Given the username, I assumed. I just can't resist responding sometimes.
Sorry, he only sent me a picture, it shouldn't be that hard to decipher, he's just starting out. But, thanks, I'll tell him that for future ref.
Yes. Angular and Knockout are very similar in my mind, but Angular lets you do even _more_ dangerous things with HTML via "Directives." (And obviously I'm biased.) What scares me about both of them is that they're _essentially_ extending HTML _unofficially_, whereas Backbone explicitly separates data-render logic and lets HTML/css do its own thing. (I'm also working on an article comparing the various frameworks. Spoilers: I still love Backbone) While I'm spewing opinionated babble, Ember is IMO the only other framework doing interesting things right now. I've perused the 3600-line knockout.js and even the 14k line Angular.js, but I'm not touching the 20-30k-loc Ember. I just like that they keep their templates logic-less, and then somehow do a bunch of magic to grant templates access to the javascript app-space. I mean, I don't _trust_ the magic, but it's interesting. 
Trying to address all of your points: 1. Never mentioned lack of XML schema support (or I'm not sure what you mean?) DTD's and XSD's are dime a dozen in Java nor did I say JSON was superior to XML in support. If anything I was speaking to the Big O Notation and it's relation to algorithm efficiency. 2. He wanted a bench-mark and I grabbed a random one from the top on google. In 2012 no-one that is sane would use eval to parse JSON, or 99.9% of the time at all, no need to get in to that anymore. X/Path isn't a bad thing, it's the best thing to happen to XML. Ignore the authors thoughts on the rest of programming, that wasn't my point. But most of that's a side conversation, that I don't think we disagree on. 3. Please find me a "good" sane semi-complicated structure bench mark where a widely used language / parser (doesn't have to be the browser, but it can be) where XML parsing is quicker than JSON. I don't even advocate using it all the time, each has it's pro's and con's.. I'm a pretty sane developer. That doesn't change the fact that I've yet to see ANY bench-mark where XML parsing of a semi-complicated structure was faster and less intensive than doing the equivalent in JSON. 4. Use any bench-mark you'd like whether it involves network or not and find a situation where XML wins. In my experiences JSON always is faster or as fast as; and never significantly slower like XML parsing can be in certain browsers/situations. Realistically in the world network delivery time of a data format would play some sort of small role in time it takes to get to the user, I'm not sure it's significant enough to argue either way.. more-so on some mobile platforms now-a-days. What I'll usually do is create a quick REST client in node and then just do everything localhost so it at least touches a server, it can be made in minutes and tweaked forever. Like I hinted earlier I use both everyday, each are good for certain things. Parsing speed is one of the Pro's I see for JSON, no need to go crazy. I think you may be also replying to another comment or put a whole bunch of things into the argument that weren't said or irrelevant. All you really did was attack the article, please tell us why your point of view is correct. Why/how is XML parsing faster than JSON? 
The big one I have found is template loading is a pain in the ass, especially if you want to support asynchronous loading. Most of the examples you see show the template encoded as a javascript string within the view, or even worse are HTML strings in JavaScript... but then, what the hell is the point of supporting templates if you need to hand edit code and embed it in the view. This leaves one of two options. If you are server driven, you can perform this process automatically server side, which is clean enough, and keeps the templates separate. However, it requires a server side component. If you aren't using a server and want to support templating, that means loading them with AJAX. Doing it async seems like the JavaScript way to do things, but I have decided that it isn't worth it. Load and cache the templates synchronously on initial render and save yourself a gigantic headache. 
Just curious, bias or not, but did you check out Kendo's MVVM? Ive worked with Telerik javascript in the past ( their commerical Rad Controls suite ) and these guys really know their stuff... but the licensing was bit off putting. The idea of a smaller all in one package is rather appealing.
Dude.... I actually have seen this, but I completely forgot. Thank you so much for bringing this in to my life... I am a young guy, and saw this when I was very young! PS Joking about the JSON pronunciation, I just watch a lot of conventions, and folks all have a different way to say it. 
The code between lines 47 and 57 is fine, there are some bad pixels in there that are causing problems. Tell you friend to clean out those pixels first and then see if that fixes his bug
Support for people with disabities to meet some of the accessibility rules and regulations. 
For sure, that's another great one. Definitely something that's gotten overlooked in a lot of projects I've worked on.
This is fantastic. Thanks!
&gt;I also disagree with MVVM and think we're in a shift towards event-driven programming. No framework is MVC nor do they want to be; Backbone's most important class is Backbone.Event. Couldn't agree more. I was glad to see Backbone.Marionette so heavily emphasize the concept of an event emitter (which they call "vent")/pubsub system as a means of decoupling the origin of an event with all its potential destinations. Very cool stuff, and a dream for building in a modular manner.
This. Other than the fact that "maxForwadsSpeed" is mispelled (which atleast seems consistent), there isn't much we can see from that shot.
Heh, my personal favorite was to watch folks intentionally mispronounce it just to watch Doug Crawford twitch. "Well, I think J-S-On has a lot of benefits over XML." "True, but I'm not sure if jizzin will gather a lot of support among the strict type crowds."
*Check this out* https://npmjs.org/package/rsj
I'm guessing it's UnityScript, which lies and claims to be Javascript but actually includes a lot of non-standard features.
That's because it's not an array. It's an object. The object has two properties with keys of "2" and "3" but it's not an array.
Instead of: { "2": { "userdata": {}, "auctions": [] }, "3": { "userdata": {}, "auctions": [] } } You want: [ { "userdata": {}, "auctions": [] }, { "userdata": {}, "auctions": [] } ]
bTW: Allow the user to middle click to open a link in new tab whenever appropriate. Single page apps that don't respect middle click should burn. http://www.ianhoar.com/2008/06/08/death-of-the-middle-click/
**Automated UI testing**: As the app grows in functionality, it becomes impossible for QA to fully test all the features for every release. You need a full suite of tests for each feature and ideally fixed bugs as well to prevent regression. Note: this is different from unit tests, where you care about the *internals* of the app. For UI tests you just care about what's presented to the user. **Connection handling**: A single page app is probably doing a lot of ajax calls or some other kind of async data loading. Connections can be pretty unstable so you need a way to detect (and display to the user) the current state as well as gracefully handle anything that goes wrong. For example, you can queue and retry certain requests when the connection restores. **Power features**: A single page app is often something that users start using regularly. Thus, you get *power users*: users that start hitting the peak of their productivity with the app. For these users you need to build features that don't get in the way of first time users but enable power users to do the same things faster. **Keyboard navigation** is a good example of a power feature. Being able to use the tab/arrow/enter/space/esc keys etc to navigate and drive the app is a huge performance booster for power users but often requires a decent amount of extra code. Just managing what elements can and can't get focus and in what order is a giant pain in the neck. 
...while the current detection depends on the assumption that nobody even more nefariously ran: this.__defineGetter__('module', function(){ return { exports: {} }; }); Every detection is based on assumptions that can prove false. Even if one tried (this.navigator||{}).userAgent or any other commodity usually only found only in servers or browsers, one can never be sure that there's no way to circumvent the detection.
I don't think the Router should command the Views. I don't currently have an example up to back that up--at least, not one that I'm proud of (my site is a clusterfuck)--but I'm working on one that would. (For what that's worth.) But the whole _point_ of Backbone is letting modules communicate with each other when they _want_/need to. 
Reminds me of my foray into C programming. I had a nice program, that worked fine, but I wasn't done with the assignment so I kept adding to it. After one of the additions, it developed a bug. I would run the program, and then I would be LOGGED OUT OF THE COMPUTER. I don't program in C any more.
I'm using angular on a couple projects and I've fallen in love. Every other JS framework I've used throws way too much of its DOM manipulation logic in its controllers, which makes testing a nightmare. Angular's best feature is its dependency injection, which again, makes the app extremely easy to write maintainable tests for. HTML attributes are the way HTML is intended to work. All this wacky DOM manipulation we do after the HTML has rendered is an egregious hack. With Angular, you can read through a given HTML file and tell exactly how the application is supposed to work.
Testing, testing, testing. That should be first on your list.
I feel that Lewis Carroll, had he come along a bit later, would have appreciated the perversities you can accomplish with a language like JavaScript.
At first I thought it was SayingILikeTits
I'm torn on this. If it's not too much work to support screen readers and such, then sure why not. But putting allot of time in for a potential extra .1% in your userbase doesn't seem justified.
Are you using PHP to create this JSON? If so, you can fix this by removing the keys "2" and "3". Basically if an array does not have integer keys between 0 and (length-1), it gets encoded as an object: echo json_encode(array("foo", "bar")); // output: [foo, bar] echo json_encode(array(0 =&gt; "foo", 1 =&gt; "bar")); // output: [foo, bar] echo json_encode(array(0 =&gt; "foo", 2 =&gt; "bar")); // output: { 0: "foo", 2: "bar" } Hope that helps!
Since Angular is created by Google Developers it may seem interesting to have Angular integrated into Google Chrome.
I've used Backbone, KO and AngularJS, and I prefer Angular to the others. It's a more complete framework. It has everything that KO has and everything that Backbone has, and requires very limited setup or teardown. it's IMO a more powerful set of tools, and it's designed from the ground up for testability and dependency injection. A lot of people are afraid of angular's template processing saying "It's creating it's own markup" or whatever. But if you read up on what it's actually doing with directives, it's not that scary. The "custom elements" people worry about are just placeholders for processed templates (that contain actual HTML), they can be nested however you like. As for the attributes, it's true those are non-standard, but they're also unnecessary, as you can make attribute directives into class-based directives, like where ng-whatever becomes class="ng-whatever". In the end, what really matters is: It works, it's very testable, it's very powerful, and it's fast. The downside to it is since it's such a complete framework there is more to learn about how to do things "the angular way", but once you get that down you're not likely to turn back to the other frameworks.
Ok, thanks a lot for you help. :)
&gt; Use var when declaring variables (loopvar, arrayvar) And give them meaningful names or, in cases of a simple index in a loop (and nothing but an index in a loop!)``i``, ``j``, and so on as that seems to be a common naming convention for these kind of looping variables. That'll make it easier for other programmers to read you code. Similarly, don't call you array with the found nodes x. X is a meaningless name unless we're talking about Cartesian coordinates and such. In this case, think of ``elements_with_class`` or something similar. You use ``arrayvar`` to add elements to an array by index. With [array.push(elt)](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/push) you don't have to worry about arrayvar anymore: the interpreter does. And finally: drop the comments that don't add anything to the conversation you have with the interpreter. So, adding all together we get: function document.getElementsByClassName(whatclass) { var elements_with_class = []; var i; while(document.all[i] !== undefined) { if (document.all[i].className === whatclass) { elements_with_class.push(document.all[i]); }; i++; }; return elements_with_class; } Using a for-loop and introducing a local variable to hold document.all[i] while processing the i-th node would make things more readable still.
Hi all, thought you guys might be interested in a free talk we have coming up at SkillsMatter.com (London). It's a hour long session by Damjan Vujnovic that will show you how to test 'trickier' corners of your JavaScript codebase, such as asynchronous components or components dealing with time or depending on server. To give some idea of what it would be like here's a previous talk from Kevin Henney: http://skillsmatter.com/podcast/ajax-ria/cool-code-3677 
Depending on who you are developing for there might be some rules and regulations applying, like for instance if you are designing for the government.
Yeah, we know now.
&gt; while(document.all[i] !== undefined) { &gt; &gt; if (document.all[i].className === whatclass) { &gt; elements_with_class.push(document.all[i]); &gt; }; &gt; &gt; i++; &gt; }; You don't need semicolons after blocks (i.e. *if* and *while* in your code)
This is an interesting one. I've gotta be honest, I don't think I've ever used middle-click in a web browser, except to use the horizontal/vertical auto-scrolling back in the day. Definitely never for opening new tabs. Thanks for mentioning this.
three.js is a 3D library though, whereas the ones in a table are all for 2D graphics
Good god, please prefix your code with four spaces so that whitespace is preserved! ---- `setInterval()` returns a reference to the interval object, but because you're saving it locally, it is not accessible outside of that function scope. Meaning that when `#skip_button` is clicked, `periodic_call` is not set both locally and globally, so there is no interval to clear. Subsequent calls to `#start_button` just add more instances of timer countdown. **Solution** Either save the reference to the timer globally (remove the `var`) -- **don't do this**, or initialize `periodic_call` outside of the events: var myApp.countdown_timer = undefined; $(".start_button").live("click", function() { myApp.countdown_timer = setInterval(function() { // ... }, 1000); } Where myApp is your app namespace. [Your javascript is namespaced, right?](http://addyosmani.com/blog/essential-js-namespacing/)
The main takeaway from this problem is to realize that when you are attempting to modify an object (in this case, a timer) from multiple locations, they each have to refer to the "same" object. You'll note that if you try typing this in your console: [] == [] It will return `false`, even though the array contents are identical (in that they are empty), but they are not the same array, since they both point to separate arrays saved in different memory addresses. So your `countdown_timer` variable needs to have a common reference point. Right now, it's being re-defined inside each function scope, so you are never truly modifying the "same" `countdown_timer`. ---- var a = []; // a is now essentially "the array at memory address xyz" var b = []; // and b is "the array at memory address abc" a === b; // returns false, as memory address xyz != memory address abc ---- As for *solutions*... if you don't want to declare `countdown_timer` outside of the event function blocks... Perhaps try [jQuery.data()](http://api.jquery.com/jQuery.data/)? I'm a Mootools user, so I have never used this, although I have [used the equivalent](http://mootools.net/blog/2008/01/22/whats-new-in-12-element-storage/).
is there some reason why 3D libraries are excluded?
Interesting read, going to have to play with this in the future! Thanks for the link! 
Strawman again: you realized you're unable to defend your original point of "you should never use it", and so now you're retreating to the much weaker point "you never need to use it". Does that mean you're willing to concede that it's sometimes appropriate to use those lines, even if you never "need" to?
Mainly because I was interested to see how the library I develop (which is 2d) compares to other similar ones. It would be interesting to see similar comparison of 3D-specializing libraries (usually powered by WebGL), like Three.js, C3DL, etc. Found this list — http://stackoverflow.com/a/6794833/130652
I'll never understand how anyone can defend JavaScript (such as your downvoters lol). Every language has it's ups and downs.. its "that makes sense" and its "wtf?!", but the fact is, and i should hope most would agree with me, JavaScript has a lot of WTFs. [This talk](https://www.destroyallsoftware.com/talks/wat) is a good example of JavaScript's "wat"s. So, the question becomes how many wats need to exist before we declare a language as bad? How many poorly designed features and gotchas need to trap newcomers before the language is declared bad? Browsers are unlikely to adopt VMs anytime soon, so it's unlikely that JavaScript is going to go anywhere anytime soon.. which is fine. ES6 and future versions of JavaScript are making great strides to make JS a great language.. but i just don't believe it's there now.. far too many WTFs for that title, imo.
what about http://raphaeljs.com/
It does. I realize the problem. I was trying to use a unique user ID as the position in the array. (eg. Rather than creating an array with 10 items, and only populating 2 and 3, I was trying to just specify items 2 and 3 and assuming the others would be handled properly.) In any case, I definitely see my mistake now. I do need to retain those keys, but I can restructure the PHP code to build these properly. Thanks to everyone who helped!
Thanks for sharing this ~~gem~~ great article
loose the loop and add the increment of x like you did for y. also put setTimeout only in the conditions you wish it to continue moving
That does work, but the only problem is that it is not using a "for" loop. I understand that that is really a better way to do it and a way I wish I could, but ,do to this being for a class, I have to use a "for" loop. Everything I can find on google is basically doing it how you just did. I just have to use a "for" loop, which the setTimeout does not work properly in that way.
hey, thanks!
then increment the setTimeout timeout in the for loop: var x = 50; for(var timeout=0;timeout&lt;800;timeout += 100) { setTimeout(function(){ //move by x //...... x += 100; }, timeout); }
Ignoring type declarations (what are they doing here?) and assuming this is otherwise the same as JavaScript, this is syntactically correct. Without seeing anything else (and given the type declarations implying this isn't pure JS) I would bet your buddy is confused about what lines like this mean: PlayerAnimSec.animation("some string").whatever_property = something; PlayerAnimSec.animation.CrossFade("another string", a_number); This implies that this PlayerAnimSec.animation thing is a function that accepts a string and returns an object (that itself has a property 'whatever_property') as well as having properties applied to it. This means you have to have something that effectively is structured like this going on: var PlayerAnimSec = {}; // Or maybe this is a function, who knows? PlayerAnimSec.animation = function (a_string) { // do something with that string and then if (/*determine that a_string == "another string" somehow leads to */) { return { whatever_property: whatever }; } } PlayerAnimSec.animation.CrossFade = function (another_string, a_number) { // do some other stuff } If the error occurs at the lines you indicated (only) then maybe PlayerAnimSec.animation is an object that he's made with a function as a constructor but doesn't realize that PlayerAnimSec.animation is not itself that function (and can't be 'called' as if it was that function) but rather is an object produced by calling new on that constructor. For example: // Strange but possible setup. // (Constructors typically mess with 'this' rather than returning an object, because they don't get any prototype goodness.) function Animation(str) { if (str == "walking animation") { return { whatever_property: whatever }; } } Animation.prototype.CrossFade = function (another_string, a_number) { // do some other stuff }; var anim_inst = new Animation(); // Error, animation isn't a function. It's the object the constructor returned. Which is probably not how a constructor should be done anyway. anim_inst("walking animation"); // This is ok. CrossFade is a property of the object that animation's prototype link points to, so it can be accessed as if it was a property of animation. anim_inst.CrossFade("take this string", 5 /* and this number */); Then again, maybe it's not this issue but in that case your screenshot alone isn't going to resolve this issue - there's only so much guesswork that can be done with it.
Lose the comment tags inside the script ffs... those became obsolete at least a decade ago.
Dude puts his UI code in... Router. Wtf?
You need to highlight the section which is code, *then* click the "code" button. RES won't magically detect which section is code or not.
this.$el.html(...)
`@$el.html @template @locals`
&gt;I've found that the "this.el = ..." clears the events initially bound by Backbone.js in your view, for example. Backbone only listens for a view's events under this.el, so if you assign this.el = something else those listeners are gone until you this.delegateEvents() again. Make sense? The answer to your question, as other's have posted: this.$el.html(...) or @$el.html in CoffeeScript. 
Ok, so if I want to completely replace this.el with the content from a template and get the events back, I can call this.delegateEvents() again?
Now that's teamwork. Fuckin' a!
Yeah, that should work. I think the better way to accomplish your goal of not creating extra divs would be to define this.el in your view. If your application layout has a div#app and you want your rendered content to live there, just put id: '#app' in your view code and Backbone will use that element as el instead of creating a new div. Check out the doc: http://backbonejs.org/#View-el
I keep seeing this same comment on different "help me with my homework, /r/javascript" posts. It's like all the AP Web Development teachers hit the JavaScript part of the curriculum at the same time, and they're all using books published before 2010.
It seems you haven't use any decent editor lately. With auto-completion it takes about 5-6 keystroke to write "document.getElementById". I don't see much problem with this.
Valid but considered old and not really html5
I'll need to see some example code to help more. Feel free to pm me. 
Why put this in google doc instead of wikipedia?
what an odd question. I use the same strategy to determine what to test in anything I program: *what sort of errors could I easily make that would cause me sufficient pain and a test would efficiently help prevent?* It's pretty much the same strategy by which I decide that it's a good idea to check if my keys are in my pocket before locking the door on my way out. I might be missing the point of your question, but asking other people generically what to test for seems like a flawed strategy.
Your template's root element is $el. That is, your template should only contain the child elements of the view you want to render, and you should enforce that $el is of the right tagname and has the right classname elsewhere.
Does he work for the county?
You don't need to. Who says you need to? If you don't expect any value from it don't do it. I personally do it all the time, because I usually find it uncovers bugs and leads me to a better design. The trick to writing tests for spaghetti code though starts with step #1: Don't write spaghetti code. 
I just put this into chrome javascript console and it's working just fine. Are you sure your tools are doing what you hope they are doing? var x = document.createElement('script');x.src='fisk.js';x.type='text/javascript';document.getElementsByTagName('head')[0].appendChild(x);console.log(document.getElementsByTagName('head')[0].lastChild);
[jQuery is magical](http://api.jquery.com/append/#comment-67912032). [This](http://jsfiddle.net/SN3PX/2/) works as expected.
Excellent list! You can find a couple of [missing items at jswiki](https://github.com/bebraw/jswiki/wiki/Canvas-wrappers).
First of all, your client code shouldn't be spaghetti javascript, otherwise you're missing too many internal interfaces. Wherever you have interfaces, you should be 100% aware what gets in and comes out. Tests deliver a part of this awareness, so your client code is no longer a black box. In addition, you should regularly test your frontend code in different JS engines/browsers, so for example the inability to work with sparse arrays of IE will be no problem for your users.
This is because jQuery doesn't usually use createElement to create HTML nodes in order to be fast, so script tags are filtered and either loaded via $.getScript or eval'd if they're inline. If you'd do that manually like Brillegeit suggested, it works as expected.
Backbone provides the setElement method on the view object. [Here's the documentation.](http://backbonejs.org/#View-setElement) It undelegates the events of the old element, sets both the references el and $el, while checking if the parameter element is a jquery object or not, and also delegates events on the new element. I cannot thing of a reason you would not want to use this.
Just added Processing.js to the list. On one hand it's a 2D drawing library, just like the rest. On the other hand, it's an emulation of a different language, whereas all the other libraries are pure Javascript (well, except Paper.js and its PaperScript). I added another column — language — to make it clear.
................
you can use saga: http://timurstrekalov.github.com/saga/ i've been using it for a few weeks now it found it very good. I was using JSCoverage before and it's pretty good but hasn't been developed in the past 4 years and was a dependency pain in my maven build. 
I wouldn't be so sure. It can happen. That's the thing with randomness, it doesn't mean "fairly even distribution across a range", it means "totally unpredictable" http://dilbert.com/strips/comic/2001-10-25/ However, I'd be looking at your code - what does it look like? Also, what kind of device were you running it on - these can be factors too.
Actually, using document.createElement inside of a jQuery function is much faster than parsing the tags. But using the tags is arguably better for readability. Either way, unless you're creating a bunch of dom elements, it doesn't matter which one you use. For reference, without tags, faster, less readable: $(document.createElement('div')) Vs. With tags, slower, more readable: $('&lt;div&gt;&lt;/div&gt;') 
It's just that, in the tiny amount of reading I've done regarding Backbone (and other very popular libraries lately; angular, ember, etc.), it seems there's little concern with scaling RIA's with things like windows, buttons, &amp; especially layout management. I like the way ExtJS has done things (at least in the Ext JS 3 variant), but I always try to stick to open source. Layout is something I feel a lot of Software Engineers prefer not to write by hand and so the AWT-style is often favorable among this group. Have any libraries you'd recommend to that end? 
Downvoted for spreading misinformation. 
Hah. Good Catch. And in a single sentence the entire article loses complete credibility when we realise that the author has *no fucking idea what he's talking about*.
A good JS test coverage tool that's still under active development is [Istanbul](https://github.com/yahoo/istanbul). js-coverage hasn't seen much development at all, and is harder to integrate into builds IMO.
Show the code or it didn't happen.
Math.random seeds using the current time when the script starts executing. It may have just been an unlucky seed, randomness does not always guarantee a uniform distribution. Here's a really quick histogram generator I made using d3.js that generates 40 numbers between 100 and 2400: http://jsfiddle.net/clarle/83Cnh/
That doesn't mean it isn't random, but if you don't trust the drawings, you could use something like: http://www.random.org/
I guess it's easier to create a decent entropy pool on the server side than in JavaScript. I also would rather trust /dev/random to deliver good random numbers than my own self-brewn JavaScript solution. And if you don't need too many of them and can fetch them in larger blocks from the server even the performance might be not that bad. But yes.. the sentence reads bad.
As the other guys mention, "random" does not imply that all points generated will be evenly spaced across the range. I guess that what you want is randomness combined with *coverage* which would give the people more of a perception of fairness, even though it has nothing to do with randomness. Probably what would do the job for you would be to generate random numbers, and run them through a [Jenkins Hash](http://en.wikipedia.org/wiki/Jenkins_hash_function) to provide coverage. Note that what is making your pseudo-random algorithm fail, is pinning the floats to the nearest integer, which causes unwarranted duplications.
Completely my opinion of course, but tech videos aren't for me (unless they're TED talks); I can read much faster than any presenter can speak, and considering the number of projects that I informally review each day (3-10) I simply do not have the bandwidth to dedicate 8 minutes to any of them (and 8 minutes is probably more time than I spend on all of them combined); usually 30-90s is about the most time that any individual project will get -- unless I decide to follow-up for more information at a later time. I did read the github page though, which thankfully looks like it covers most of what you offer; is there much in the video that's not covered on the github page?
Thanks! That means a lot. Don't worry, I also refer to him in the third person.
It would avoid looking up the function in the document object, so yes, there is a good reason for it,and no, it won't lead to any more confusion than if you used a library like jQuery, which has similar convenience functions. You're right, making the same call is also redundant.
Most of what is covered in the video exists on the github page. We are planning to do follow-up screencasts which cover some more advanced topics. I've found that 10 minutes or less is actually the perfect amount of time to spend watching a screencast; when there is code involved and not a lot of philosophical jabber it's highly worth it. I recommend you reconsider your stance on watching tech videos and give this one a try, it's worth it and Justin is very careful to only include relevant information :)
Modulo, good one!!
I think this might work...can you walk me through it a bit?
Hmm.. See, we set a counter variable. It, by default, is 0. The % sign is module. It gives the remainder. The (if) statement checks if counter % 2 === 0. Basically, it checks if it is an even number. If it is, it does the first case, and adds 1 to counter (counter++) making it an odd number. For the next time, it would be odd, and thus the else would be run. Also, take "var counter = 0" outside the function, otherwise, every time it is called it will be set to 0, and only the first case will be run. Also, it might be future proof if you change the variable name to something more descriptive (example, counterBingOrGoogle). Don't forget to change it in the if/else as well!
given enough hits, and given random is nicely distributed, and given a good seed it should be equal and random
Date.now returns the milliseconds since 1/1/1970, so it's either even/odd, or my Maths is off.
Cool. Put it up your ass
Just for clarification. I'm not hoping to remove the script tag later. I want to be able to check if it's already in there so I don't add it multiple times.
This is a really bad way to structure a ternary operator. location.href = (Date.now() % 2) === 0 ? 'http://www.bing.com' : 'http://www.google.com'; 
I find client side testing is most useful on mid-large scale web apps where there is a reasonable amount of data processing being done on the client side (naturally still validated on the server end). We currently use jasmine and sinon to test our backbone/require app, and keeps you on your toes surrounding exceptions which may occur during server connections and data that is returned.
Your example, my example, or both? If you meant my example, is there a reason it's 'really bad', or was it just that I could have made it more concise?
Actually one can, with a large enough set of data. It's fairly easy. I don't know about this 'not random enough for a raffle' business, but I can tell you that it is possible, with enough data, to distinguish random and pseudo-random processes.
K, done and done, now tell them apart.
I think that was a mistake with my histogram. 100 - 400 is considered to fall under that area, where as the rest only have a range of 200. Sorry!
As ishmal says, it's taking the Math.Random from float to your range that is causing the difference. If you just scale from 0 to 2400, it looks much better. Takes about 10,000 to get an (almost) uniform distribution. http://jsfiddle.net/83Cnh/9/
&gt; Don't believe me? Flip a coin a thousand times, write down the results, then write your own list of coin flips and I will tell them apart. They were all heads. Now what?
That code will go to bing 100% of the time and google 0% of the time. Step through it line by line, and if the reason doesn't jump out, give a shout and I can explain further. (Hint: When you get to the `if` statement, `counter` is always 0.) (edit: see my other reply for more details)
Read my explanation to OP, I already found out why :)
&gt; adds 1 to counter (counter++) making it an odd number That code is never reached. Setting `window.location.href` unloads the current page. &gt; For the next time, it would be odd, and thus the else would be run. The next time, all this code is run again. It has no memory of having been run before in a different load of this page. So `counter` is set to 0 again.
Aww, shucks. Good call. I haven't used location.href before, thanks for correcting me :) OP, I stand corrected. You'll need a server side language to ensure true equality, or, you can use Random, or as given above, Date.now(), the results will be close to equal anyway. Sorry for misleading you.
The code is fine. It's random, and over enough runs will be equally distributed. The same is true for the `Date` solution posted in the thread.
Before I wasn't sure if maybe you had some idea of what you were talking about. Now I am 100% sure you are clueless. HTML4? For a 17 year old browser? 17 years ago they used HTML 2 - and HTML was not very good back then. It was only in HTML 3.2 that it became reasonably usable, and by then they had full script support.
One of the interesting things I learned re: this topic, is that one can do more than just add up the total number of heads versus tails to tell the two sets apart. Human beings are usually pretty good at getting a roughly similar number of heads or tails in their sets. The counter-intuitive part of these random sets of coin flips (and the part human beings suck at modeling) is that not only should heads and tails equally often, but every possible sequence in the set should occur equally often as every other possible sequence of the same length. So HHH should occur just as often as THT or TTT, and HHHHHHHH should occur just as often as HTTHHHTH and so forth. Naturally, human beings don't typically do well at evenly distributing the larger sequences. Typically favoring patterns like HTHHHTHTHHTHTTH over TTTTTTTTTTTTTTT, which should occur just as often. (Granted, to look reasonably at 8 to 15 flip sequences one would need much more than 1000 flips)
I'm 90% sure he's joking, but a state-run lottery could be that bad.
I too had this issue. I also wonder, why input type of text for the phone examples instead of &lt;input type="tel"&gt;?
It's even harder for the lay person to recognize. If you give the public a stream of numbers from a good random number source, they'll claim it's showing bias.
Cool. Put it on Mars.
Another nice text effects script. Beautifully executed.
Appreciate the response. I see now that it wasn't much better than the *if*, if at all. Cheers!
Actually: randomNumber = Math.floor(Math.random() * (2400 - 100) + 100);
Again, you seem to be unaware of the concept of graceful degradation, and the reason why the HTML spec was written the way it was. HTML was specifically designed to be forward and backwards compatible, such that HTML4 documents can be rendered on browsers that were written before HTML4 was written. I guess if you're the type of person who thinks of specs as merely "advice", that may be why you've never had your pages work on older browsers.
Absolutely wrong. 'True randomness' means that for each instance in which you are assuming a random outcome, all of the possible outcomes must be equally likely. In the example of flipping a coin a thousand times, for each coin flip the possibility of either heads or tails is equally likely. Extrapolating this out to a thousand flips is pointless, because each coin toss is a separate and unconnected event. And claiming that there must be an even distribution of all possible outcomes over a series of unconnected events doesn't even make sense, because you would be claiming that previous coin tosses would affect future coin tosses in a way that ensures an even spread of results. Of course, that last part is what most humans have a lot of trouble with, because it seems so obvious and yet so counter-intuitive at the same time.
Dart is my favorite. The much better tooling makes it very easy to use. It also doesn't contain any of JS' bad parts or things which are similar to those. Block scope is also very nice to have. There aren't any radically new features, but that's okay. This way, everyone can learn it very quickly. CoffeeScript isn't very good from my point of view. The syntax has a lot *more* quirks than JavaScript. There is that strange shadowing issue. And it doesn't help with scaling at all. The trade-off just doesn't look very appealing to me. Traceur and (untyped) TypeScript are very reasonable approaches when they are used for backward compatibility. E.g. back when Java 1.5+ introduced a bunch of new language features, someone created [Retroweaver](http://retroweaver.sourceforge.net/) which allowed you to use all of that on 1.4 VMs. That was really cool. However, things are a bit uncertain if these features aren't actually standardized yet and if they aren't even available in any browser. Some of those things might change. TypeScript is somewhat disappointing. It doesn't support `let`, so you still got that silly function scope going on, and the neat IDE stuff only exists for Windows (Visual Studio). I'm also not a fan of AS3-like type annotations.
You have said what I was trying to say so much better. Thank you. To add, mistidoi is not only wrongly extrapolating a series of unconnected events (such as a single coin toss) into an arbitrary set (1000 throws for example) but that he is then correlating that extrapolated data set into a single result - i.e. a "random distribution curve" - which doesn't exist because 1000 is a purely arbitrary number.
There is a good reason for that, actually - I've read that study. When people are asked to come up with a "random" list, they will still come up with a pattern that "looks" random to them - not too many heads in a row, that kind of thing. But a true random set will have anomalies like 8 or 9 heads in a row, which by itself is unlikely, but on a large enough set it becomes unlikely that something like this wouldn't happen. Radiolab talked about it in their episode on stochasticity and interviewed the woman who did the study. Look it up - its a fascinating and entertaining episode. 
That was originally the way I structured my calls, but it wasn't working so I'm trying everything possible. In the examples he posted online, he always uses the .done() callback, so I'm trying to replicated that. Thanks for the response
This^ time 1,000. Tools are either vitamins or aspirins. Vitamins are nice, but aspirins solve headaches. Until you know what kinds of headaches you'll have, all we can do is recommend Zinc and Vitamin D. Besides, even if you were leaning towards my current choice (CoffeeScript), I'd ask you to think very carefully before deciding that the beginning of a new, large web project is the right time to take on a new language and new tooling and find yourself asking "Backbone or Ember.js or...?" Better to try a new language on a small project, where if worst came to worst, you could lock yourself in your office over the long weekend and port everything back to JavaScript. You'd still have all your domain knowledge and you wouldn't be fucked.
CoffeeScript has the biggest community backing, loads of resources out there. I was worried about debugging when I first heard about it, it's a total non-issue, you just `console.log event` just like you would in JS. At the end of the day with CoffeeScript *it's just JavaScript*. Dive in.
And just hope your code works in all browsers? or use js with something like jquery?
If you're pre-compiling coffeescript in node you're likely doing it wrong. CoffeeScript should already register a require.extensions on the .coffee ext to automatically compile those files in node: http://coffeescript.org/documentation/docs/coffee-script.html#section-6
&gt; Otherwise, I see no point in adding types, because you aren't going to get the Intellisense without Visual Studio, and its just going to be more typing and less readable. I would use something with types because the type safety it grants you, not because of Intellisense, but you can't sell soap to a pig.
Coffeescript seemed the number one choice for node users at desertjs.org. I'd want to try out Dart, too, since it has static typing, which might help you avoid those last minute errors where you do something like accidentally modify something to pass in/receive an array/scalar instead of the opposite.
I know you don't have to precompile it for Node. I am using that for the client-side code.
So I don't explicitly need return true; and return false; statements to make the function boolean? 
Thank you for the response - I'm thinking this is the reason why it's not working, and I'm going to look into it further in the morning
noice! i checked out your site. great stuff! I feel inspired to play around with canvas, which I have been putting off.
It's doing the computation then returning that result. No equation is being returned. The function is not "made boolean." It just returns some value. In this case, % happens before ===, and === always returns true or false.
There's a kernel of truth here: if we're working looking for random numbers for use in cryptography, then `Math.random` could be problematic because its results are predictable, and therefore replayable. We'd have to use a random number generator built with cryptography in mind, but choice of language and whether it's server-side or client-side still should have no effect on the algorithm.
To wit, it is actually possible to return a function from Javascript (a function is as close as Javascript has to an equation.) You just aren't doing that here.
yup!
Several people asked for source so I dived in and put it on Github. I'll had some more docs on making apps shortly. 
Edit: this is a great tool, I'm very impressed. I meant to say that before the rant that follows. I'm really bitter about the 1000 comment limit that reddit imposes on the user profile page. I've been here for more than four and a half years, yet any comments I've written that are older than ~3 months are effectively lost for all eternity, as there is no way to view them unless you already know the URL of the thread. And of course the site search only indexes post titles, not comments. I've often wanted to refer to a comment that I've made in the past, but it's impossible because there is simply no way to find it. You can try googling some combination of a word that you remember using and your username, but that's not very effective because google does not index every thread, and even if it did, you get tons of spurious hits because it's searching the entire page for that word. It really pisses me off that after contributing god knows how many thousands of comments (I don't even know the number, because that's a secret too) and even paying for reddit gold, the vast majority of my contribution is thrown down the memory hole. I realize that the limit is probably related to some performance constraint; that they didn't want the site being brought to its knees by spiders constantly trying to spider the entire massive database of posts and comments. But FFS make it a reddit gold feature or something, it's not like there are many web crawling robots out there using gold accounts, let alone logged in at all.
It works fine in Dart and I don't see why that wouldn't work fine in TS, too.
&gt;Why couldn't you have just used '-target 1.4' when compiling? Because that didn't work if you used any of the new features. Would have been nice if it would have worked that way though.
I dunno. I'm not sold yet. This reminds me of the perl CGI module, where you could programmatically create HTML on the server side using a syntax similar to this. This results in mixing of your language domains and (in my experience at least) leads to a less-maintainable project. YMMV but I've adopted the philosophy of "html does html best", "javascript does javascript best." C#, VB, perl, sql etc should each stay in their respective domain. The MVC (and variants) design pattern facilitates this well. Crossing the boundaries (as required in templating) should be kept to a minimum.
This is great! Is there an english version of that book?
Wrong thread?
Chatter around the internet seems to indicate this book has been around since 2009. Try contacting them? It seems Harmut speaks english, from a [recent comment in the site](http://www.generative-gestaltung.de/P_4_3_1_02).
Thanks! :) 
Thanks! A few days ago, one of the admins said they'd like to allow for comprehensive [data extraction](http://www.reddit.com/r/ideasfortheadmins/comments/10tai6/ever_wondered_the_data_liberation_policy_of_reddit/c6gicdf). I'm not sure they will ever move ahead on it though - it doesn't seem like there is a lot of demand and they've done fine without it for years.
As a side note, IE8 doesn't support the Access-Control-Allow-Origin header, so you have to have a fallback if the user is using IE8. Not sure, if you're concerned about the cross browser compatibility, but I though I would mention it. [Example using IE8 XDomainRequest object](http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/)
The difference with this and the CGI module you mention is that JavaScript is run in the browser, while any of the other languages run on the server. JavaScript needs to be able to change styles, change content, attach events at *runtime*. That means you need to be able to reference all of your elements. Now you can say that you can reference them by using an id or class... but that gets complicated when using the same names inside a list or inside reusable pieces of HTML. You'll run into name collisions (look at how asp.net solves that, it's horrible, but necessary since it's serverside) When creating elements though DOM you already have a reference. You can name them with variables if you like and you can safely pass the elements to other functions without the fear of naming collisions.
Under Graph Type -&gt; Data there is an option to plot karma. Looking at the current layout with fresh eyes, there are way too many drop boxes. I think I need to change most of them to sliders in order to draw out the more interesting ways of plotting the data. 
While you may be mad now, no one will ever know three months from now.
Have you tried? I've been programming in typescript for the last few weeks since its been out, and this is actually one of my biggest annoyances.
All of those features work on java 4, because they are handled at compile time. I.e. there is no generics, the compiler just uses Object + casts. Which of the java 5 features are not handled at compile time?
Oh! Excellent! Thank you! :D
&gt; ~~CoffeeScript~~ Javascript has the biggest community backing, loads of resources out there ftfy
@StoneCypher - True. To be fair, I should remind the OP that those are function expressions in that case -- a concept he wouldn't have when coming from C. In C he'd have a pointer to a function, which is a different beast.
Thanks!
Any chance you can elaborate on this? Take, for instance, a situation in which you're referencing "app" in two different modules. Due to app itself returning a new instance of Marionette.Application on invocation, I have to imagine it's equivalent to this: http://jsfiddle.net/gNQvH/ As you can see, a new object IS created each time. You're saying that's not the case?
Out of curiosity, what made you decide to go with TypeScript?
The optional static typing and the good IntelliSense support in Visual Studio. I had ported my game engine from C++ to JavaScript and just when I was almost finished, Microsoft released TypeScript. I started porting the project to TypeScript right away, adding back all the type annotations that I had to discard when porting to JavaScript, and in the process found numerous bugs and inconsistencies. Also, features like the swizzle operators would be a real pain to write manually: get x(): number { return this.values[0]; } set x(value: number) { this.values[0] = value; } translates to: Object.defineProperty(vec2.prototype, "x", { get: function () { return this.values[0]; }, set: function (value) { this.values[0] = value; }, enumerable: true, configurable: true });
Amazing, you've created webOS. :-p All joking aside, cool project.
Could you explain to me how jQuery helped you write event-driven code? I'm genuinely curious, because I know it's possible with vanilla as well. Also, I've seen a whole lot of cases where jQuery encouraged novice javascripters to write bad code, and I'd be interested in seeing the opposite.
Additionally, isn't the plan to eventually have native browser support? That would mean that, instead of disappearing in the future, it could get a whole lot faster.
Read the source if you want to know everything about it: https://retroweaver.svn.sourceforge.net/svnroot/retroweaver/ Also, there is Google. There are about 21k pages which mention RetroWeaver. Seriously, `-target 1.4` did not the trick. Feel free to try it with a 1.4 VM.
I've met plenty of PHP programmers who have the same mentality. They have only coded in PHP, and see no point in ever trying Ruby, Python, JavaScript, Java, C#, Haskell, whatever; because they feel "I can do it in PHP, so why switch?". Nothing wrong with PHP, but there is something wrong with a closed mind.
I agree, but on the other hand it has its reasons that values are passed by reference. It wouldn't make much difference for the vector types I guess, but it's another thing for matrix types, where we're dealing with up to 16 variables. One of the goals of the API was to reduce the number of allocations but you still have to be careful. Today I spent an hour looking for a bug which turned out to be caused by a single missing vector copy: var direction = distance.normalize(); // overwrites distance! I used GLM (see link in original post) for the C++ project, which I if I remember correctly generally allocates new vectors. It's not the same thing though, because in C++ you can allocate on the stack, whereas objects in javaScript are always allocated on the heap, as far as I understand.
Well, frankly, no one really cares anymore. The 1.4 to 1.5 transition days are long over. It was just an example for automatically transforming something to make it backward compatible. It's like polyfilling, but it goes one step beyond. It means you can use new language features, too, which can make your life a whole lot easier. Such a language feature could be for example built-in classes/inheritance or the super neat `let` keyword.
Exactly, copying objects like vectors is errorprone and also slow. I always had two variables at the top of my scripts 'var t1 = new Vector(); var t2 = new Vector();', just so I can do some calculations without allocating a whole bunch of objects every frame. Hopefully such an option will come some day, I'll surely switch to such a language (bonus points for operator overloading!)
Thanks very much for your detailed response. You helped convince me to take deeper look at CoffeeScript. I'm still concerned about its readability but it does appear to have a lot of very cool stuff. Even seemingly small features like string interpolation and triple-quote-block-strings can make a huge difference for everyday tasks like constructing dynamic HTML, etc. I really wish CoffeeScript didn't have optional parenthesis and commas, though. Seems to make it significantly harder to correctly parse and comprehend complex statements. Hopefully some of that can be avoided by enforcing a few style guidelines.
Thanks for this post. I'm going to have to read it a few more times, I think, before it settles in.
Awesome, glad I could help. I think the trick to giving it a chance is just to take the time to try it out. Up until I had actually used it for a few days or maybe a week or two, I really didn't like the @ and -&gt; .. now I really much prefer the -&gt; over 'function' in terms of readability. Probably the same thing goes with Dart.. if you don't try them both out seriously you won't be able to judge. Anyway here are a few examples from my github of the type of code I prefer with CoffeeScript https://github.com/ithkuil/remember/blob/master/public/trial.coffee https://github.com/ithkuil/mcchunkloader/blob/master/public/scripts/nbt.coffee 
You can't do it with Javascript alone. You could load the content into an iframe, but I'm guessing that won't suit your needs. What I'd recommend doing is sending an AJAX request to a PHP script that would grab the relevant data from the external site and return it for you script to handle. 
I am sorry, but I think I might have already tried that, unless I didn't do it right. I do have a php script, [here](http://phchurch.net/source.php?url=http://reddit.com), but could you post some generic code? Thanks for the quick response!
Use PhoneGap: http://docs.phonegap.com/en/2.1.0/cordova_file_file.md.html#FileTransfer
How about jsonp?
Actually, this looks doable. 
&gt; I've written almost 10,000 lines of Javascript. Not a ton but enough to know that I'd rather not do another 10k of it if I can avoid it. In that case, it would be really helpful if you could tell us why you personally would rather not write another 10,000 JS/LOC. Then it would be easier for us to recommend the right analgesic :-)
If I am understanding this correctly you are trying to make an app that pulls in info from your drupal Site? Could you use this http://drupal.org/project/phonegap and phone gap?
Personally, I learnt more about JavaScript, and loved it, only after I switched to coffeescript. 
All right. Well, if nobody answers before then, I'll post a sample some time tomorrow evening.
My understanding of the problem: you need to render your website in a phone with out parsing in phone or rewriting your website. Only way I know of doing this is writing a server side script that parses the html data into json and then returns that to your phone. This is entirely possible in php. I did it a long time ago and I do not remember the details. To be more helpful, I did this quite recently using [nodejs](http://nodejs.org/), a framework called [expressjs](http://expressjs.com/), and a library called [zombiejs](http://zombie.labnotes.org/). It went something like this.... //app is the express object //look up how to configure it app.post('/mobile/:url', funciton (res, req, function () { zombieBrowser.visit(url).then(function () { var yourParsedData = magic res.json(yourParsedData); }); }); It's a pretty convoluted solution. I was not doing this for a production environment or a phone. The idea is the same. Get the server to make an html request, make the server strip out what you want, format it, then give it back to the phone.
 TRIPPLE_WORD = "Tripple word" tiles = [] tiles[1] = {type :TRIPPLE_WORD} console.log(tiles[1].type); The last line writes to the log. You can see it by choosing "inspect element in chrome" 
Client part: var s=document.createElement('script'), callback='[insert function name]'; s.type="text/javascript"; s.src="[insert server part url]?callback="+callback; document.documentElement.appendChild(s); For the server part: you need to filter the HTML content so the carriage returns and quotes (single/double, whatever you use) will be escaped and wrap it into a JSONp call. If you had the GET parameter callback as "callback", the return would look something like this: callback("&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n...");
The function that defines `app` is just invoked once by RequireJS.
Have a php page load and echo out the html data via cURL. Then load that php file via javascript.
Congrats on that gaping security hole: http://phchurch.net/source.php?url=/mounted-storage/home140/sub018/sc76520-GTTG/phchurch.net/sites/default/settings.php Now have fun changing your MySQL password. It wasn't a strong password to begin with.
Awesome thanks for giving me the idea! 
Did you know that one of the best ways to avoid a flame war is by not starting your reply with an ad hominem attack? I do not need you forgiveness nor do I have qualms with you personally. Just please don't pretend my posts didn't exists and don't introduce vulnerabilities to your web sites. That is all I want. Also I am here for the JavaScript, not for the small talk.
What's wrong with declaring arrays in this way?
So, do you have any cool JS projects?
Was going to say this. JSONP is precisely for when you explicitly want to allow a script from another site to be able to grab your data.
I've been programming for about 6 or 7 years. I have always been the top of my class in all my CS classes. I have taken tons of criticism from some not very nice people. I don't let it bother me. Even though I don't want to admit it, he is right, but very mean. I just want to be a friend to everyone :).
Yes, but they are for my job and I wouldn't be comfortable linking my online life with my business stuff, sorry. Did you get that feature (as stated in your question) working in the meanwhile?
That's understandable. I haven't got a chance to even try. I am hoping from this project that I will have decent grasp on JS and jQuery.
Oh, then you are in a bit of a bind. Do you know if the native side of PhoneGap on WebOS is written in JavaScript? If so writing a plugin is pretty easy since you already know JS. If it's C r C++ you will have a bit more work cut out, or need to hire someone else to implement the FileTransfer API for you. Otherwise you have to proxy every request from a server. You alsmot certainly don't want to do that.
It's only invoked once in the Todomvc example (I'm assuming you mean the start() call in main.js), but if I were working on an application in which I needed to access properties of "app" in another module, I could potentially be invoking it more than once, couldn't I? Or is a single invocation some sort of feature of RequireJS that I'm not aware of?
Unless the site allows the 'P' (callback) part of JSONP, it won't work. If using PHP, file_get_contents would be the best bet.
What you've found is 'callback hell'. :)
I think you're looking for something like [Hammer.js](http://eightmedia.github.com/hammer.js/). Or you can use [Toe.js](https://github.com/dantipa/toe.js) for direct integration with JQuery. And then there's [Touch Punch](http://touchpunch.furf.com/) for use with JQuery UI. Both Hammer and Toe provide you with some non-W3C-standard touch gestures like `swipe` and `hold` which don't really translate to mouse event. Whereas Touch Punch is more of a direct translation from touch events to mouse events (touchstart -&gt; click, touchstart+drag -&gt; mousedown+mousemove)
This is actually the way I was currently doing this, but I felt (not sure why) that it wasn't the most efficient way to do it, so I wanted to modify my approach. Thanks for the input :)
Thanks so much! :D
Have a look at how iScroll 4 does it. https://github.com/cubiq/iscroll/blob/master/src/iscroll.js
Thanks so much. This seems to have nailed exactly what I was trying to do. I knew how to make objects and arrays, but being self-taught, did not realize I could store the objects into the array. Thanks for taking the time to write this out for me to see it. I believe this will do exactly what I was trying to do, and I learned something new today. Thanks for your help.
You might have to be careful about touch platforms that emit touch and mouse events.
No problem! :D GLHF
Thanks for the reply! Here's the js error that shows up in the FireFox console: `[13:51:44.229] uncaught exception: NS_ERROR_DOM_BAD_URI: Access to restricted URI denied` I have virtually no experience using this console, do all the numbers in the brackets correspond to time? Or is there a line number I can refer to? EDIT: The chrome js console was a bit more descriptive: `XMLHttpRequest cannot load file:///Volumes/s_fs/projects/js/pdfjs/build/generic/web/locale.properties. Cross origin requests are only supported for HTTP.` **and** `Uncaught Error: NETWORK_ERR: XMLHttpRequest Exception 101`. Is there a way I can replace the XMLHttpRequest with some other method?
Shouldn't be an issue if it's read only, no? If he wants to store something and present it to users, then XSS is a huge concern.
This is a resource origin issue. Don't load the page off of your hard drive. Run the pages through a local web server and make sure all resources are loaded through the same host (localhost) and port (probably 80).
If you'd followed https://github.com/mozilla/pdf.js#getting-the-code, you would found "Next, you need to start a local web server as some browsers don't allow opening PDF files for a file:// url:" and run "node make server"
The "node make server" alternative is simple "python -m SimpleHTTPServer" cli command
Am I missing something? It looks like they all have reportDate: { year: 2013, month: 3, day: 15 } That seems unnecessary. 
If you can find JavaScript API that can get PDF data without XHR, then you can feed that directly to the pdf.js API.
1) All of the reportDate objects are identical. Get rid of that, just store 1 date as a UTC and reference it directly. If you later have need for multiple dates the approach I'd recommend would depend upon the precision required. If it were a day I'd simply include a plusUTCDay: 1 to represent a day after the typical day. If you needed hour precision or less, I'd consider a date object for each team. 2) Logo is repetitive, you already know it based on the abbreviated team name you're using to look up each team object. Simply reuse the 'choice' variable and remove logo data from each team object. If you remove those two elements you're really only looking at a map of abbreviations to full team names eliminating the team objects entirely. You'd be left with something like this. var startDate = new Date( 2013, 3, 15 ); var mlb = { ari:"Arizona Diamondbacks", .... };
Great! Thanks for the advice! I'll start working on this...
I think the proper solution in most cases would be to not do anything like that at all and reconsider if serving up foreign content in this manner is really necessary. If it is really necessary, I would use a separate domain. This way, the Same Origin Policy neatly takes care of the XSS aspect of this thing.
I recently had to deal with this; and there's a few things to keep in mind: 1) Touch events often behave differently across platforms. iOS, for instance, triggers touch events as well as click events. They also have different indexes for where they store event location information; for instance iOS has an x/y for the touch event regardless of touches; while android requires you to derive x/y information from the touch; etc. 2) I'm torn on the use of shims in this case; where hammer.js is kind of nice in that you can just bind to 'touch' events; you still have to deal with point 1. 3) Use Adobe Edge Inspect, AKA Adobe Shadow, AKA Weinr: http://html.adobe.com/edge/inspect/ . This tool makes debugging events across platforms far easier. 
Balls—I knew I forgot to mention something...will edit the above description. Final schedule hasn't be released yet. The report date will not be the same for each team.
Okay that sounds and looks kinda right. As I have few to none experience in JavaScript. How would I go about including it? So far I have: &lt;a onmouseover="CngClass(this);" class="something"&gt;...&lt;span style="display:none;"&gt;some annotation to show onmouseover&lt;/span&gt;&lt;/a&gt; So instead of writing onmouseover I make it a variabel that changes upon loading the document? Like: &lt;a variabletouchormouseover="CngClass(this);" class="something"&gt;...&lt;span style="display:none;"&gt;some annotation to show onmouseover&lt;/span&gt;&lt;/a&gt;
If you use &gt; element.appendChild(document.createTextNode("text")); instead of &gt; element.innerHTML = "text"; you can avoid triggering the browser html parser and speed it up some, but the script is almost to simple for it to matter. 
I use it like you did all the time, so I hope not.
with an if()
Feature detection doesn't really have much to do with learning JavaScript beyond the simple act of knowing how to check whether an object has certain properties. Obviously you should know that if you're doing any JavaScript. Past that it's just about memorizing/researching all of the different quirks between browsers. Obviously that's never harmful to know, but if you're just creating apps rather than creating your own framework/tool/API, there are probably much more useful things for you to spend your time learning than every browser feature quirk, especially when there are dozens of libraries out there which have a major goal of solving this problem for you.
My understanding of require.js is this: in your "define" call at the start of your js module file, you provide a function to require.js that it regards as the module initializer. It will call this function once and cache the return value as the module definition. It will then provide this cached return value to any other module that declares that module as a dependency. So the returned new instance of App in your case should be cached and provided as the "App" module to any other modules that need access to it. 
You need to not use inline JavaScript. See my other reply to you in this thread.
Use [addEventListener](https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener). Also, keep in mind that, unlike a mouse, [touch allows for multiple points to trigger at once](https://developer.mozilla.org/en-US/docs/DOM/Touch_events).
You need [jquery.fingerpointer](https://github.com/dantipa/jquery.fingerpointer) from the guy that wrote Toe.js. You can pass the same function for both finger and pointer and handle both events, as well as do any modifications you need for either case.
The problem is then having to use (e.g.) `mods.mod1` instead of just `mod1`. You could do `var mod1 = mods.mod1`, but the existing AMD syntax does that with fewer keystrokes. AMD is a bit unwieldy, but I don't think this proposal is any less so.
is there no live example? github project pages always seem to be lacking.
Almost as useless as saying "with some JavaScript code!"
There are also a more complete one (or complex) on github http://replit.github.com/jq-console/
Actually, it's standard practice to detect whether a certain feature is available, rather than detecting a platform and then making assumptions about that platform. It makes for much more scalable applications.
Three.js also supports canvas. Here's a Three.js demo that uses canvas: http://mrdoob.com/projects/code-editor/ 
I find the simplified commonjs syntax to be much more straightforward http://requirejs.org/docs/api.html#cjsmodule
Not sure what that has to do with anything. He put the object at index 1, accessed it at index 1. What's the problem? TRIPPLE_WORD = "Tripple word" tiles = [] tiles[2311] = {type :TRIPPLE_WORD} console.log(tiles[2321].type); works as well.
I agree with the other sentiments thus far. I believe introducing yet another module loading spec is just going to make things messier. We already have AMD and CommonJS and they don't play too nicely together, I'm not terribly fond of the idea of yet another one...
Add gradient text... mind implodes!
No it's not. Yes, his way of creating an object uses the same notation as a namespace, but the article is about extending, cloning and inheriting objects without using prototypes or closures.
&gt; and some helper functions This still seems rather basic to me and not a true equivalent of an object with a constructor. The disadvantage is not being able to examine the constructor to determine object type. For example: function RealClass () { this.bar = function () { console.log( 'Real' ); } } var foo = { bar : function () { console.log( 'foo' ); } }; var boo = { bar : function () { console.log( 'boo' ); } }; var Real = new RealClass(); console.log( typeof(foo) ); // 'object' console.log( typeof(Real) ); // 'object' console.log( typeof(boo) ); // 'object' console.log( foo.constructor.name ); // 'Object' console.log( boo.constructor.name ); // 'Object' console.log( Real.constructor.name ); // 'RealClass'
&gt; Could you give me an examples of where you use instanceof? Some polymorphic function arguments APIs (think jQuery-ish) where the input of a given function could be a string, an array, an object or a more specific object. Or maybe a function which can take both a splat of arguments (to be called directly) or an array as first element (so as not to mandate the apply-dance)
There is a link to examples in the readme - https://github.com/michalkow/cssConsole#examples
This is why I like using Tim Caswell's [DomBuilder](https://github.com/creationix/dombuilder) for Backbone.js views - you can tell it to keep references to the elements you're creating as you go by suffixing element names with `$name`, like so: var refs = {} this.$el.append(domBuilder([ ['.dropzone$dropzone' , 'Drag and drop images to upload or ' , ['span.file-input-container' , ['input$input', {type: 'file', name: 'photo', multiple: 'multiple'}] , ['a', {href: '#'}, 'select files from your computer...'] ] ] , ['ul.thumbnails$thumbnails'] ], refs)) // refs now has dropzone, input and thumbnails properties
&gt; Note, though, that mel isn't compatible with IE 6 or 7. Neither is anything else I work on from here on out! Woohoo!
Videos are static files. There's nothing that raises cross domain issues across domain tuples (protocol, domain, port) e.g. http://www.w3.org/2010/05/video/mediaevents.html has a video that loads from http://media.w3.org/2010/05/sintel/trailer.webm with no special headers
I get all the bits about avoiding closures and some of the attribute and DOM lookup stuff, but the "avoiding loops" part seems a bit ridiculous to me. Who would actually write unmanageable code in that fashion just to shave some milliseconds?
That kind of stuff is really only relevant in high performance applications, like 3D rendering and so on. Here are two good rules with regards to optimization that I find helpful: **Rule 1**: Don't optimize Solve your business problem first. If you are thinking about performance before you have solved the problem at least once, you are doing it wrong. **Rule 2**: Performance comes from architecture Micro benchmarks for how fast object allocation is is meaningless. Real life performance problems occur because you need to scan a massive dataset more than once, or because you allocate hundreds of thousands of objects per second, or because you update the DOM over and over. The solution is not blindly unrolling loops, the solution is modifying your architecture to efficiently use the limited resources you have available. While micro benchmarking is usually not very helpful, domain-specific benchmarks, that test individual components of your system, kick ass.
wow, a working example, what a novel idea
That sounds interesting. Could you provide a toy example.
[Here](http://www.playmycode.com/build/try-play-my-code) you go. That is the first prototype version. The compiler project is [here](https://github.com/PlayMyCode/Quby), however it is not currently stable (and right now it doesn't run at all). The prototype version had a lot of limitations with language features, due to the parser it used. So I decided to rebuild about half the code, with a whole new parser, and move it over to TypeScript. However I'm planning to have that done by November, as I want to use this language on a different project. One of the ideas behind the language is to *not* produce idiomatic JavaScript, requires all code to be present at compile time, and to not be fully dynamic. All JS interaction is also done through a special hash symbol (#def for defining a JS-friendly function, #foo for JS variables, #bar() for calling a JS function), and if it doesn't have a hash, then I could do any transforms I want on the code (non-prototype based classes, function in-lining, tree-shaking, etc).
I use them for checking custom objects all the time. For me, it helps decide whether something is an object created from a JSON response or something that has already had that response parsed through a constructor. There's some handy funcs for such things in [my personal JS lib](https://github.com/BrynM/bpmv). Take a look specifically for bpmv.arr(), bpmv.obj(), bpmv.whatis() and bpmv.typeis(). Feel free to crib from those or use the while lib if you want. Of note is that I don't examine the constructor for an Array in the same way as I do for other objects. bpmv.arr() uses the following: bpmv.arr = function ( dIsArr, okEmpty ) { return this.obj( dIsArr ) &amp;&amp; ( Object.prototype.toString.call(dIsArr) === '[object Array]' ) &amp;&amp; ( okEmpty || (dIsArr.length &gt; 0) ); } This works all the way back to IE5, which the constructor method will fail at in those old browsers.
something about this site breaks the back button... 
Sorry didn't mean to be snarky. I just had never heard the word performant used, but I liked it. 
that's not loop unrolling, it's just moving the cost from run time to compile/parse time
If you play with things like MongoDB and node.js and want to be able to cheaply type the documents returned by a query, nothing beats assigning `__proto__` on that document and pretending it's a full fledged object. It gives you all the feel of OO without the overhead of creating new objects/copying fields over/etc. 
For 3D rendering you use WebGL and that means using the graphics card. You have to use loops.
The only thing that I think is valid is that you can't keep modifying the DOM in a huge loop or whatever. The rest of it is bullshit. You really have to use loops, closures, and objects etc. in order to write useful JavaScript. Sorry. There very few reasons you would legitimately need to work around basic features like that, and you would never do it without first profiling on a specific browser and/or a specific platform and seeing a very specific and rare problem. The only thing that I think you could use those types of optimizations for would be for an automated rewrite prior to minification or file combination, if you could somehow figure out how to do some of that stuff automatically. Which I don't really think you can in most cases.
I love these! Here's mine: Replace: /\*\s+([\w\s\*]+)(\n)(\*\s+)(\1)($|\n)/gi With: * $1$2$3**$4**$5
I don't understand. Are you saying that WebGL implementations are not a good example of code where high performance optimizations like loop unrolling could be useful?
There's my http://gamejs.org Inspired by pygame
Thanks for the comments. I am not really recommending this style - like I said it's a thought experiment. Your mileage may vary. For "instanceof" I've actually used the technique of walking the prototype chain to determine ancestry - not cross browser though. Although over time I've found that the spirit of duck-typing calls for not using type verification in your program.
This is the easy solution. Some browsers will still issue warnings, but not errors anymore. A more robust method would be to redirect to a page with a parameter and detect it to send a window.postMessage to the parent frame that the login worked - but this only works for IE8+ and modern browsers.
SO isn't the place for code critiques either, they will most often just get closed, if you're lucky they will be moved but there isn't an option for non-mods to vote to move it to the right place. In the StackExchange network there is [Code Review](http://codereview.stackexchange.com/) for that sort of thing. Downvoters: not complaining but I'd like to know where you think I'm wrong about what I'm saying.
Came in here, everyone was downvoted. I agree. There are few news sites and many many help sites. This does not need to be turned into yet another help site. It's a problem in most of the other low-hanging-fruit language subreddits, too. It's significantly worse in /r/php.
As a semi-beginner in JS, I want to come here to read interesting links and discussions about the language. I do not want to come here to read other people at my experience level asking questions they should be asking elsewhere.
I'm ok with it, most of the language- and technology-specific forums are filled with this. I don't foresee this changing without very *serious* policing of these topics. I've also seen a lot of good discussions come out of seemingly "obvious" questions. In the meantime, perhaps we can shuffle people in the direction of r/javascripthelp?
Yeah, I'm seeing that, too. How dare we raise our voice against the ever growing influx of people asking entry-level questions? I really don't understand why mods would let it get out of hand in this way, until these subreddits are just no longer a good read for people who are really interested.
If everyone who agrees with this sentiment and reads this topic would structurally help by downvoting newbie questions, would that make for a start?
&gt; You more or less did, and your point certainly wasn't related to the complexity brought by additional layers of abstraction. this is why I hate talking to people on the internet. we are in a javascript forum, on a javascript thread, talking about the differences in different javascript related languages. how in the fuck could you have possibly thought he meant what you thought he meant? Beyond that, once you made the initial mistake, how in the fuck could you possibly come back here and try to defend yourself in your misunderstanding? Just accept that you made a mistake and move on. &gt; Why go with something that is as close to JS as possible? just like JS? You won't learn anything, you'll just have a new tool to play with. like the man said, stick with plain old javascript until you understand its problems. and, let's face it, using anything else is just asking for trouble if you are planning on deploying to the wild. your idealism is heartening, but incredibly misplaced, and your attitude just plain stinks.
The problem is that if people do not want to read a beginners question, they will just ignore it, and click on a different link.
Probably going to rub against the grain here, but... I actually don't mind the critique requests. I like using my experience to help people out, no matter which website I'm on. As long as the normal flow of new, interesting content on here isn't interrupted too much, it really doesn't bother me.
I guess I'm going to be the voice of discord and welcome some downvotes: I don't see why we can't have both, anywhere you go on the internet where there's a community around some tech there's people asking for help with it. I also think everyone should get down from their high-horses, because the attitude in the comments here is a lot like "I'm so good at [language] that these noob questions disturb me" This being a forum to discuss new and awesome javascript is great and the reason I myself subscribe (though seldom post), however I don't see why we have to tell people asking for help to bugger off - how great would YOU have become if that times you couldn't figure out something alone everyone told you to fuck off? Because that's what a downvote does. Now, imho, the best way to handle this, is have fixed in the culture of this subreddit that questions should not be upvoted, you see it, you answer if you can but you don't upvote it. Usually, on reddit, not upvoting is downvoting enough. Helping newbies an important part of a great community. (And the side bar does say "All about the JavaScript...".)
Then moderate it in a way that punishes everyone without exception that requests help solving their JavaScript issue.
incoming rant....... As programmers I am ashamed at every single one of you who hasn't just used the **hide button** and moved on with your lives. SHAME. You have no right to dictate which posts belong here based on their level of skill behind the question. There CAN be rules added to make sure we don't just get flooded with bullshit, bad questions, or other ** GOOD MODERATION TECHNIQUES ** But screw EVERYBODY who doesn't just hide posts using the HIDE button. I hate how reddit has transformed into this fucking massive jerkfest of everybody whos been here longer than 2 years. I've been on reddit for almost 4-5 years lurking around and yeah you get bored and annoyed with shitty posts but you use the fuckin hide button and move on
That's okay... Stackoverflow is not http://codereview.stackexchange.com/ It seems like most of the requests are code review requests.
The sidebar also says: &gt; Stack Overflow - For help with your code
The loop data is very likely not possible to hard-code, as that data is dynamic. And if that data were static, the result of that unrolled loop could probably be a static number or a static object anyway. This doesn't just apply to WebGL code, this applies everywhere. Or am I missing something?
I agree with this. There's a difference between "I can't figure out how to do this, please help" and "I wrote this and think it's good. What do you think?" I'm with OP on the former, disagree on critique not belonging here. Lets not have /r/javascript become a place where all but the elite are afraid to do anything but lurk.
In my opinion StackOverflow is too cumbersome for newbs asking questions. Once you finally jump through all the hoops to get registered and post a question, you discover that your question is unlikely to get answered without karma. And the only way to gain karma is to answer others questions. But, if you are a newb how do you do that? I like Reddit because it is an easy place to ask questions and likely get a few answers, and hopefully one is right. Personally I will always upvote a question if I cannot answer it. that way it eventually will get an answer then fall by the wayside.
Yes. There are already Chromium builds with native Dart support.
This is just silly. Really, this is what you are complaining about? Not trying to learn something new or teach something new, but moaning about people asking questions? BTW, this subreddit is called javascript, not javascriptnews, not javascriptDiscussions, or not even javascriptNOTstackoverflow. Stop being a complainer!
It's not only here, I'll submit stuff and get downvoted in minutes. So fickle.
It'd certainly be nice if people bothered googling things first.
The only things in r/javascript that should get downvotes are articles and comments about languages that people mistake for javascript, ex: coffeescript. That shit does not belong here.
EDIT: formatting of list of posts needed linefeeds. Just looking at this thread: sentiment is mixed. It's not a unanimous thing by any stretch of the imagination. So let's put this into some perspective... I just sorted by "new", and did a count of the last 25 posts. Scientific? Nah, not perfect, but decent. In the top 25 posts, here's all the "help" posts: 1) "Grid help" - downvoted to negatives. 2) Need assistance with cross-domain JS issue - downvoted to 0. 3) "How to make a javascript function that on desktops works as "hover"/"onmouseover" and on touch devices works as "ontouch" or similar?" - actually has quite a few **upvotes**... this IS a help request, is it not? But I guess people found it interesting. 4) Create An Array With Properties? - downvoted to negatives 5) New to JS, need advice on getting some HTML from an external website. - downvoted &lt;0 6) returning equations instead of operations - downvoted &lt; 0 7) GeoLocation Question on navigator.geolocation.watchPosition - +4 .. so this one was OK with you guys too? 8) Questions about accessing Requirejs module that returns new object (in the context of a Backbone/Marionette app) - +1/-0 ... IMPORTANT NOTE: At 25 posts, the timestamp was already "3 days ago".. I was going to scan through 100 posts, but I saw the timestamp and thought it pointless, because at that low of a volume, all I can think is "really?" So of the 8 help posts, 2 were actually voted positively because apparently those seemed to be interesting or "worthy" questions. That leaves us just 6/25, or 24% that are bothersome. At 6 posts in 3 days that the "I hate help" people disapprove of, that's 2 posts a day that are irritating you so much you had to make a post of your own to this subreddit to complain about it. Honestly, my opinion here is that the system is working just fine. If 2 posts a day that you don't like bother you that much, then yes - I do feel you're being a fusspot. Truth be told, and I don't mean this to sound jerk-ish: If 2 posts a day you dislike irritate you that much, you probably shouldn't be on reddit at all. The whole IDEA of Reddit is that you'll see stuff you like and stuff you don't, and **vote accordingly**. I view my job as a moderator as having the following responsibilities: - Filter out spam - Filter out egregiously off-topic stuff like people devolving into personal attacks on each other's mothers in a comment thread about code - Try to contribute content if possible (this is really the community's job, but I can see an argument for wanting moderators to be contributors... lately I have been too busy to contribute much here) - In rare cases (never happened on this subreddit), ban users who are repeatedly troublesome Beyond that, anything else is considered "going overboard with your powers" by much of reddit and you essentially get crucified for it. Ultimately, the system works just fine. You guys are downvoting the stuff you hate, and upvoting the stuff you don't. The problem is that /r/Javascript only sees 25 posts in 3 days, so even stuff voted into the negatives may show up on the page. If more content was contributed to r/Javascript, then upvoted stuff would push downvoted stuff off the page.
Sorry, was replying from my phone and wasn't as clear as I could be. See my more detailed reply [here](http://www.reddit.com/r/javascript/comments/11y3q9/rjavascript_is_not_stack_overflow/c6qlnx1) .. 
here's the headers you need https://developer.mozilla.org/en-US/docs/HTTP_access_control it oculd be as simple as having a proxy page that sets an extra header (although terribly insecure..)
shut the fuck up OP
I feel the same way, and every single programming subreddit suffers from the same woes.
That's very neat! If you are looking for a binding just for gl-matrix you can find my binding here: https://github.com/RicoP/gl-matrix.d.ts 
This. As someone who has recently submitted a code critique post, I am (admittedly) biased towards allowing such posts. I enjoy reading other people's perspective and seeing how they process code in their brains—outside of the electric box. I don't often post to StackOverflow because all of my questions get flamed and closed 2 minutes after I open it. I thought this was a friendly place to learn and share. edit: grammar
Seriously not going to help a fellow dev in need? Why not change it to r/stuckup
what I said was that your lack of attention to the discussion was ridiculous, and then to come back and have a different argument than the one that was going on as though that was in any way appropriate is preposterous. &gt; I also didn't attack the guy, I didn't say something like "how in the fuck could you possibly come back here", I just disagreed, and said why. I didn't attack you, either. take out the words "in the fuck" and you have nothing to complain about. That isn't an attack. You also didn't disagree. You made some comments about something that was completely separate from what was being talked about, and then framed it as though it was a disagreement. and that is what I hate about the internet. 
Very nice.
&gt; I didn't attack you, either. take out the words "in the fuck" and you have nothing to complain about. And? Those words were not taken out. It is you who has walked in swearing; no one else. As I said previously, don't take it so personally. I didn't, and I'm the one that got the downvotes. The other commenter didn't either. We disagreed, and doesn't mean I cannot still respect their opinion.
I feel like if StackOverflow is too cumbersome then your question isn't worth asking in the first place. Hell, many noob questions for JavaScript are straight up repeat after repeat on SO.
&gt; I do not want to come here to read other people at my experience level asking questions they should be asking elsewhere. Why not? Sounds like you could learn from the answers.
I guess my point is that I already have places for that. It's just a personal preference for what I'd like r/javascript to be.
It's interesting that a statement of fact is getting downvoted. The subreddits are not democracies unless the mods allow them to be. That said, I find the newbie hate discouraging. Elitism will get us nowhere and trying to answer the newbie questions is, in a way, giving back to the development community. So many people complaining about the lack of "quality" posts, but I don't see a mad rush of "real JS news" being submitted today. The most active recent thread is this one. Perhaps we should just create /r/js_circlejerk. 
mitchellrj [OP] isn't a mod.
And in all martial arts training you train with a group of people near your skill set. The black belts and white belts aren't doing the same drills at the same time. Teaching is definitely valuable, but the black belts do their own advanced training when the white belts aren't around for a reason. 
There's barely enough people to support this community as it is
I've got to admit ... it makes me feel pretty smart every time I use it. Maybe I'm just immature that way.
I don't think you understand how stackoverflow works. It takes no karma to ask a question, nor does it cost you karma for someone else to gain it by answering your question unless you put a bounty on it of which you start out with enough points to apply bounties to two questions with zero participation in the community. As for cumbersome registration, I don't see how that can be, they offer you a myriad of openid providers to log in with and allow you to post without setting up any more information on your profile. The only questions that I see go unanswered are either extremely difficult and niche questions, invalid questions, or indecipherable/vague questions. The ones that have already been asked get closed, sure, but they provide a direct link to the answer, which the user would have probably seen and ignored when they typed in the title of their question.
Oh. I guess I should have taken a closer look at the staff list before making that remark. ++.
Call them on it. It's "random enough" for your purpose. Challenge your crowd to match your 7 of your next 10 random events, and offer a $50 reward. Best-case scenario: You put a room full of know-it-all developers in their place. Worst-case scenario: You spend $50 to learn about an awesome technique for guessing psudeo-random numbers. Guaranteed no one would be able to work out a solution in the time it takes to give your presentation. So many devs are quick to jump on this "not random enough" train without a true understanding of what it would take to actually start correctly guessing random number generators.
I'm in a weird middle ground on this one, I'm not a fan of Stack Overflow style questions, but I am a fan of code review style questions. Code review = a humble request to integrate with the social fabric/technical knowledge of this subreddit. A one-off question has better places to go to (Stack Overflow) and is inherently less community oriented. I don't feel right bothering other people who have not expressed an interest in helping me, when there are communities dedicated to that very thing.
He could have suggested it by messaging the mods as well. Perhaps even ask them what direction they intend for the subreddit.
First off, Stack Overflow is a terrible place to ask questions if you don't already know your language pretty well. You'll receive a few comments telling you to google it or that it's a duplicate, and then your question will be deleted as "not a real question". Of course, that doesn't mean /r/javascript needs to be its replacement. I think majority opinion should decide this one, but I will point out one thing: "noob questions" can become great resources. On the off chance that they get a really thorough answer, that answer can be linked from elsewhere, and in addition to educating people who need it, also drive more people into our community. This doesn't happen with a signifiant fraction of questions, but it does sometimes happen. How do you guys feel about splitting questions into a separate subreddit? It seems like the community is pretty divided about this, so two subreddits would allow those that want to see questions to subscribe to both, and those that don't to do nothing. (I especially want to hear from a mod on this suggestion, because my intention is not to splinter your community)
Super!!
It's the same way in physics. The way to make sure you fully understand something is to teach it to someone. 
I think the real problem is that since this is a pretty low volume subreddit, these posts are more prominent than they would be otherwise. What about starting weekly posts like some other subreddits do to encourage more conversation? I could imagine things like "Monday Bugbash" where people post about annoying bugs they overcame, "Tuesday Project Show and Tell," etc. I'd love to participate in some stuff like that (maybe host one of the days?) if there's interest.
Definitely true. But why is that? There are clearly a lot of programmers on reddit and a lot of programmers using and learning javascript. Where are they? It's possible that a more focused subreddit would attract more people. It's possible that it's too late and those people are already somewhere else. I did notice the responses here don't include anyone saying "I am a novice and I like asking questions here!", the only novice response was from someone saying they want to see more advanced discussion so they can learn from it. Everyone seems to be very open and wants to help novices but there is a distinct lack of novices here who are asking for that service.
&gt;Everyone seems to be very open and wants to help novices but there is a distinct lack of novices here who are asking for that service. When I first posted no this thread everyone was saying how they downvotes novices asking for help, if you notice the mod post, requests for help on /new have been downvoted into the negatives, I disagree with what you are saying, I think there is already an elitism in place that is driving novices away - if it also doesn't drive away the more seasoned people.
Also, there's this option in the reddit preferences... http://puu.sh/1i1BB Downvote, and move on.
It seems like every development-related subreddit has this very complaint every so often. I think it's ridiculous. Stackoverflow is not really designed for lengthy and involved discussion related to the questions posted there. However, reddit is designed for that. Many really good technology discussions are branched off from people asking support questions. I would only agree that it is a problem if nearly all of the posts were support questions and we didn't see other types of threads. But /r/javascript is not anywhere near that at the moment.
This is the carpet subreddit, you need to post this in /r/cars
Other programming subreddits split up the news / questions between /r/&lt;language&gt; and /r/&lt;learnlanguage&gt;.
You seem to be confused. That's Java, this is the JavaScript subreddit. Might I also suggest [StackOverflow](http://www.stackoverflow.com) for all your programming needs.
It's not about being mean or nice. How do you think other people know if your code works or not? They've tested out (or in the least, read about it) the code themselves. Especially when it's something you can just run right away in your browser, there's no reason to not test it yourself first. It was a lazy question with a lazy description. That's why it got downvoted. [Cargo cult programming](http://en.wikipedia.org/wiki/Cargo_cult_programming) is a horrible way of going about things. Sure, pick up some snippets here and there but then go test them yourself and tweak as needed.
&gt;The first paragraph is quite under-educated, let me elaborate on why this is completely false. Your opening sentence is exactly the kind of elitism that bothers me with many seasoned developers. I despair to see /r/javascript take on any of that tone. I don't think talking down to someone can help educate them - in fact, it may hinder their education. As I pointed out [elsewhere](http://www.reddit.com/r/javascript/comments/11y3q9/rjavascript_is_not_stack_overflow/c6qu74e), you are wrong about the requirement to register.
Well, I assumed you guys were USED to writing javascript, I don't DO this shit... I am trying my best to do something I've never had to think about. Second, I have tried reading what I can about it, which is how I got this far. I guess I assumed there was some "set" way to do this, that I was just not able to find a decent article about through google. I came here to ask what I thought would be a simple question, so if I phrased it wrong, I'm sorry. I don't know what the fuck I should have said. 
I was thinking the same thing. Seeing positive and negative reactions to web development threads are what help steer my own beliefs in where i should focus my attention. Maybe OP is right in the sense that Reddit isn't really code friendly. Maybe if there was some type of shortcode for users to post code within brackets may be easier to communicate. For now, I agree that posting code and asking for help is basically another way of saying "someone PM me and help me", which doesn't help everyone else learn a true lesson from the thread, itself.
Alternatively /r/javahelp
From TomWij: &gt;You're assuming you need to be registered, while you can just anonymously ask a question and as long as you have the cookie you can still register later if you decide to continue. Then, from Jedakiah: &gt;Interesting. How? When I click "Ask Question" it prompts me to login. So I then created an account, verified it, etc.
re: your username [Yo it's three thousand thirty, and I want ya'll to meet Deltron Zero. And Automator](http://www.youtube.com/watch?v=Q7_jbluF0qo)
cool story bro so if 800 more languages that 'transpile' to javascript are cobbled together, then they all must be allowed to be discussed in r/javascript? Your argument isn't worth the pixels it is written on. There are subreddits for precisely this reason. Once you say the word coffeescript you are no longer talking about javascript, and fucking NO they are not the same thing. 
No worries. :)
scope (this) will be element inside of the event listener (unless otherwise changed via call or apply)
This guy is right. Although I never really understood why they decided to go with making the element the scope for event handlers; maybe because they're acting as properties of that element as if you were doing something like: some_element.onclick = function (e) { console.log(this); }; I really think this would have been more reasonable if they just made the scope window and made people rely on the event's target property.
Thank you! So often when people complain about wrong posts in subreddits moderators agree and start to overthink it to the extremes. The up/downvote system works quite well.
All I have to say is..this is cool! Probably going to waste all morning looking at obscure frameworks. 
k thanks
Thanks, I'd missed that. But that subreddit isn't just defunct, it's completely empty. And that's not surprising, seeing as it isn't even mentioned in the sidebar, let alone some form of alert in the submission process. The subreddit needs an announcement and backing from /r/javascript to have any fighting chance. If it doesn't get it, then I guess that's a mod decision to keep javascript questions in /r/javascript.
yeah, there are 2 ways to do this. One where the scroll-bar stops at the top of the tbody and one where it stops at the top of thead. I am not convinced that one way is intrinsically better than the other
This is great! My coworker loves the Ruby toolbox and wanted to build something similar but for JavaScript. Glad somebody did it.
Nice site, but I found some mistakes in the intro text: &gt; It's your Javascript Territory! JSTer is the most **sofisticated** and complete community catalog of open-source Javascript libraries. Find **tyhe** right tool to work and share it with others! All libraries are well organized and can be added by GitHub users. Also, Spine is an MVC framework very similar to Backbone, and should probably be in the MVC category instead of Mobile (or perhaps both).
&gt; If you use Firefox, you’re gonna have a bad time. Heh..
This ain't stack overflow. 
This is amazing. I'm totally using this for a school project. One thing- the sources on github are fucked up, I had to load an example and rip the source myself to get a grasp on it (and with my limited JS knowledge, I'm mostly just editing the source while I learn it).
Myself, being a more seasoned person, is driven away by the novice questions. I came here looking for what you call "elitism", or what I would call "a place where a non-novice can learn something new". I just don't think you or I have any evidence of what's driving people away, although we seem to agree the half and half mess here now is useful to no one. Every other successful community in existence has been "elitist" by your definition so I doubt that this is the problem. There is an anti-novice question thing going on here, but there isn't any elite content by any definition.
Ugh, sorry about the post title -- I meant "help explaining prototypes and constructors".
thanks
Thanks for the report. Fixed. :) Pro tip: If you run into issues like this, have development ideas or something, just use the "Problems" widget at bottom left. I'm happy to discuss here as well, though.
"One of the things that makes JavaScript so portable is it's intentionally minimal library of built-in functions." well, i would submit that if javascript was actually concerned about being portable it wouldn't have *three* ways to instantiate objects and *four* ways to set keys in objects (source for that is [here](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#constructorpatternjavascript)). i would submit that it would be a lot better to stick to less syntactic barrel-rolling like that and maybe include some useful expansions to the base language. 
the next thing you would say is "but rustledJimmiesScript IS javaScript" and then proceed to post article after article about how much more "beautiful" it is than javaScript. so what if a million languages compile to javascript, if you aren't discussing javaScript, it probably doesn't belong here.
Actually I'm not wrong as it is a default on the network that you do not need to register, see http://superuser.com/questions/ask for instance. It appears that Stack Overflow has recently changed this behavior *on their site only* to avoid users leaving problems open because they don't come back to respond to their question, make a barrier against SPAM, a human check and various other reasons. Registration and logging in are still extremely easy to do, and are also mechanisms that *need* to be in place on high volume sites... I don't care about whether its elitism, you're just upset with it. It actually tones down to me that we're discussing "simple registration" here which isn't an actual problem anyway, so I assume you agree with the rest of my answer...
Only SO's FAQ, as it has been recently changed. See my clarifying comments above which link to Super User with how it used to be and why this is removed from Stack Overflow.
Be a good example and don't come into a thread insulting everyone, you're not going to change yourself for the better by placing insulting comments instead. Peace!
Guilty as charged. I'm an Angular cheerleader. Angular does: - MVC - Two-way binding - Reusable Controls - Routing - RESTful service handling - AJAX requests - Templating - All with Dependency Injection. I love it. It took a while, but I love it.
Disagree. For creating objects, all you use/see in code is {}. Anything else is simply not knowing better. Having multiple ways to set/retrieve object keys in the language is very handy depending on the data you're working with. edit: I'm referring to dot and bracket notation
 &lt;script type = "text/JavaScript"&gt; &lt;!-- lol, still commenting out JS eh..1997 called...and said YOU ARE A LOSER..no just kidding, you are a fantastic person
Right, what I meant was that you can't assign a whole new prototype object to an instance, though you can manipulate the one that is already there.
I would describe the learning curve as "steep but short". It's a *complete* framework. JQuery isn't even really *required*, but it does work really well with Angular. The biggest thing to learn is doing things the different angular types, and how to leverage them the "angular way". - Scope: This does the work of ferrying data between the pieces of your application. It also does the work of allowing you to subscribe to changes in your data (via $watch) and notifying angular to update the UI, (via $apply, which is usually automatic). - Controllers: These are for logic for manipulating the data in your scope. (Don't do any DOM manipulation here). - Directives: they're the most powerful thing in Angular. Use these to manipulate the DOM, tie the DOM to your Scope, create reusable controls, etc. - Views/Templates: this is just your markup. Here you apply your Directives or write out values. - Services: Injectable pieces of code that do things like help you with Ajax I/O, or other reusable dependencies. I would say most "gotchas" come from a lack of understanding of what's going on behind the scenes in Angular. [This is an important read for any Angular developer IMO](http://docs.angularjs.org/guide/concepts). If/when you start using it... if you have questions, message me. I'm happy to help.
I couldn't have said it better myself!
You have a minor syntax error: function Lawnmower() { this.brand: 'snapper'; } 
1. Dropbox's request limit will not be exceeded by a single user since a user is on their own account. (It would be insane if they did) 2. Dropbox can go down but so can servers. 3. Dropbox already approved this and they want users to store data on top of their platform. A lot of apps already does this individually. Dropbox is the just the first service I'm implementing, Google Drive is next.
That's the idea: Users gain control of their own data, developers can scale up to infinity and let Dropbox handle the load and the storage.
lol, add yourself to the beta access list and add your reddit username in the what do you want to use this for section. I'll send you the client details today. The product is ready but I'm mainly concerned the docs aren't detailed enough.
Check out Ben Alman's Throttle / Debounce plugin: https://github.com/cowboy/jquery-throttle-debounce You're looking for the debounce demos/docs.
The point of $.keyup() is that it fires every time a key is depressed. If you want to add a limiter, then it is very easy to do using delayed function calls. As an example: var delayTime = 300; // 300 ms var delayTimer = null; $(document).ready(function(){ $('#input').keyup(function(){ clearTimeout( delayTimer ); delayTimer = setTimeout(function(){ Alert('Do Stuff'); }, delayTime ); }); }); This will display an alert 300 ms after they stop typing. On each keypress it clears the previous timer, and so if they are pressing a key at a rate of more than a key per 300 ms, the code you want to run will never be executed. As soon as they stop typing, the 300 ms pass and the code is executed. It's an additional 5 lines ( 4 if you don't make the delayTime variable ), and very simple to implement, so it's not something I would add to a library.
[An alternative (to some extent): Use google docs as a database; directly from javascript.](http://blog.ouseful.info/2009/05/18/using-google-spreadsheets-as-a-databace-with-the-google-visualisation-api-query-language/) I fail to find a concise and recent article about this. One problem with any of these approaches is that it would makes non-javascript fallback impossible. Please correct me if that's not 'a problem'/'not all true'.
I noticed that this only happens on Windows: in your update function, keep track of whether you are in the middle of processing the key up and don't do anything if you are: var processing = false; $('#input').keyup(function() { if (processing) return; processing = true; // ... });
ill try this but i think, what i've seen skimming, throttling/debouncing is what i need. ty for replying.
Ah, thanks! Basically wrote half of those pages in a coding frenzy from 9pm-2:00am
No prob :) nicely used bootstrap by the way!
Thanks, my bad.
Cool, I did not know about the proposed `Object.setPrototypeOf()` method. I do not use `__proto__` properties because they are non-standard, but yes, you could force a new prototype object that way.
it's an Dropbox restriction. When you sign up for Dropbox key, Dropbox asks if you want to just store in one folder or access an entire Dropbox account. Right now I built it on the all access Dropbox model, so the file path is configured differently, I'm going to switch to app folder permissions.
I wanted someone to make this for a while. Nice work. Can it do partial uploads/downloads? Or do you have to do the whole data set each time? It would be cool if you had a journal that you could be replayed, and you would rotate those every now and then.
Hey thanks Max!!! Oh that's interesting, let me know what you come up with! I'm thinking about what's the best format for all this stuff. Thinking OSC - there's a couple of things in npm for that but not tried them.
Thanks! The data set is there locally and on Dropbox, so only the changes are synced each time. We currently do not do versioning if that is what you mean.
i was kidding :p
oh, of course. and never cross the streams, neither.
What's going on in the 21. minute? I think it's blocked due to some infringement issue. Great talk by the way, thanks.
In older versions of IE the script element doesn't have the onload event, it has the onreadystatechange event.
I thought you needed approval from Dropbox to get access to their entire Dropbox folder.
I'm researching this, but is onreadystatechange compatible with all other browsers? Should I just use onreadystatechange or should there be a browser check that uses the function depending on what the client is? EDIT: So I tested it, and IE8+ it works fine, which is going to be a pain.
Since you're already loading jQuery before anything, you might want to replace the guts of `async_load` with [`$.getScript()`](http://api.jquery.com/jQuery.getScript/), which is an asynchronous script loader. Caveat implementor: jQuery 2.0 (1.9? check the blog) will drop support for IE8-.
Thanks a lot! I showed a clip of a great Iggy Pop interview. You can see it here: http://www.cbc.ca/archives/categories/arts-entertainment/music/punk-rock-comes-to-canada/gzowski-interviews-iggy-pop-1.html
This. This I like. /bookmarked //twice
This is amazing!! I am pretty new to JS and html5...where do i start so I can be a rock star too? 
That's good to note. That might be the easy way of making this more compatible with older browsers.
&gt; Dart : Sounds cool enough. Honestly I'd probably be happy to use either Coffee or Dart. Not sure which one will "win" in the long run, though, and am afraid to bet on the wrong one... I wouldn't worry about which one "wins". The world of web development is so large that there will be many winners. My prediction is that plain JS, Dart, TypeScript, CoffeeScript will all be around with active communities. To me, Dart fixes the most problems, has the nicest syntax, with the least amount of surprises, and looks like it'll have a great core library, so I'm going with that.
Awesome speech mate. 
Awesome talk. Specifically, as a bass player, the idea of a web-based equalizer piqued my interest. Also, dat accent. &lt;3
That's only a syntax error because of the '.', remove it and run the code (then it becomes a semantic error).
Plays the Star Trek theme on a browser-based Theremin... DEFINITELY a redditor. :)
nice
Stuart is punk rock.
That was fantastic. *JSONG!*
Those aren't different ways to do the same thing, those are completely different parts of the language, and only when carefully invoked do they have the same effect. They don't overlap any more than two functions that sometimes return the same value. **Creating Objects** &gt; var newObject = {}; Yes, this is the standard way to create an object. &gt; var newObject = Object.create( null ); This allows you to specify the object's prototype as you create it. It is the *only standard way to do so* - `__proto__` is non-standard, and creating a superfluous function and instantiating it is an inefficient hack. &gt; var newObject = new Object(); Besides being necessary for consistency (all functions must be instantiable with `new`), this lets you cast things to Objects (no, not quite everything is already an Object). Returning an empty object is just a useful default behavior for when it is passed `undefined`. **Setting properties** &gt; newObject.someKey = "Hello World"; This is the most concise way, but requires you to hardcode the key. &gt; newObject["someKey"] = "Hello World"; This allows you to use a variable instead of hard-coding a key. If you're using it for anything else, you're either making a mistake, or babying Google's closure compiler. &gt; Object.defineProperty([snip]); While the last two methods simply create a property, this gives you far more control over how it's created. You can define getters and setters, stop people from overwriting or deleting it, and opt out of enumeration. Using it to set a static key to a static, non-configured value is like typing 1+1 into wolfram alpha. &gt; Object.defineProperties([snip]); Syntactic sugar for a `defineProperty` loop. So, yes, I guess this, unlike everything else here, introduces no new functionality. But I find it kind of funny that you'd complain about a function like this, which is basically just saving you writing a loop, while most of the community is starry-eyed over jQuery's indifference between arrays and values, and every library out there has its own `forEach`.
I didn't mean be able to write a complete polyfill for addEventListener, I meant knowing what does and doesn't work cross-browser, so that you don't end up doing something stupid like posting to StackOverflow asking "how can I use jQuery to find the text in a textarea?"
http://gruntjs.com would be a good place to start.
The synth and the amp are on Github - https://github.com/stuartmemo
Haha, thank you!
Heh! You can play along yourself here - http://questionpark.com/electro-theremin/theremin-startrek.html
May the odds be ever in your favour!
Exactly. An opportunity to learn/improve languages you might not get to touch that often. 
That sounds really awesome. Curious to hear more about what you have in mind.
I feel like a game based on forking could get a little weird...
But think of the title possibilities! 
Don't use PHP *edit because that was damn snarky: This is an issue with PHP losing your session variables, not with javascript. I would suggest using StackOverflow (that handy link over there on your right) and posting it under the PHP section.
Have you considered using DerbyJS? It's Node-based but focuses on highly responsive apps. Meteor is in the same wheel-house but I think I like the fact that anything available through npm can be used in Derby. http://derbyjs.com/
Learn By Doing — it's the only way. Reading programming books can only get you so far.
Can't agree with this more. I like programming books, they are great to read when not at your machine, but when you are, there are better ways to learn.
I'm sorry. I don't know what &gt;(is window.close overridden in your codebase?) means. I'm taking some classes on js and mimicked the example from the book but clearly we haven't gotten as far as overridding codebases.
PHP's time() will return server's time, while JS will return the client's. In other words, the time zones are probably different.
damn that's a problem. What would you suggest? EDIT: wait... isn't that an easy fix? Couldn't I just do the php cookie with javascript almost the same way?
Feeling a little Marquee Mark on this. But, nice work! However, you may want to just add / remove a class (css) in the timeout instead of creating the CSS though JS.
&gt;Feeling a little Marquee Mark on this. Say what?
Sorry, making a reference (trying to be funny) to the old marquee element. I think its a cool effect but can be a bit jarring. Was just trying to be a little funny... had beers with co-workers at lunch.
Oh no worries. I didn't know if you meant A) The Funky Bunch, B) The old marquee effect or C) Some library called Marquee Mark that I'd never heard of, ha.
I haveto admit that I first thought it was exactly that..
&gt; Usually the volume rendering is done server-side and streamed to the client Agreed, but isn't that sort of old school thinking? Today's client has a GPU and people want real-time 3D zoom, pan rotate... &gt; Take a look at fovia (http://www.fovia.com/) which provides a SaaS-type service for rendering DICOM data directly, and has libraries for all kinds of clients Interesting. The web site has a 2005 copyright. And it all looks very expensive. Anyway the quicktime movies give me some inspiration. It will be fun to see how I can create the same visualizations in real-time 3D for free in your browser. &gt; You should also keep in mind that DICOM images of MR/CT scans contain spatial coordinates of the image. This is what I am beginning to understand. I stumbled across this capability when I had a very brief moment looking at the DICOM files using Osirix. Would you have any idea where I can get more data or information on the spatial coordinates in a DICOM file? DSK, thank you! You comments are of great help...
A) Absolutely sure all libraries were loading before mine. Turns out I didn't need to install .min at all. I removed that, *and* replaced every instance of '$' with 'jQuery' in my code, and everything works and works together now. Thanks for your response, though! (I will not edit the plea to indicate that it's working correctly.)
Cool. Glad you got it fixed. :)
http://unhosted.org/
Nice, and I hate to rain on your parade, but you could replace this with a little CSS, such as [this fiddle](http://jsfiddle.net/gkmGe/1/). Even with prefixes, it's also about the same length, and much shorter once animations become standard. It would also be more efficient, and this could be quite noticeable difference on a tablet or mobile (especially with more content on the page).
I think I have found some people I should be talking to here: [http://pipeline.loni.ucla.edu/products-services/brain-viewer/](http://pipeline.loni.ucla.edu/products-services/brain-viewer/) And also to the XTK people here: [http://pipeline.loni.ucla.edu/products-services/brain-viewer/](http://pipeline.loni.ucla.edu/products-services/brain-viewer/) Both of these groups look like very brainy people indeed... 
A link to author would be great
lol Marquee Mark is the funniest thing I ever heard in reference to something being corny on a website. I really hope it catches on
I miss the marquee. :(
You are looking for the word [closure](http://en.wikipedia.org/wiki/Closure_\(computer_science\)) Any time a new function is created, a new scope is created for it. The new scope retains access to the values in the scope the function was created in. However, that isn't what's happening in your examples. In your examples you are just using `amount` as a global variable that *everything* has access to. so here: return amount + number; //amount is undefined? amount is *not* undefined how bout this amount = 3; function makeAddFunction(){ var amount = 3; return function(number){ return amount + number; } } myFunc = makeAddFunction(); myFunc(1); // 4 amount = 578; myFunc(1); //still 4 
Me too, it had such good vibrations. Feel it, feel it. 
I'm confused--what's the use case?
In case 1 single page (e.g. Product) has several different states (e.g. Pants, Shorts, Shirt) that you want to be able to be linked to (e.g. /products#show:pants). A benefit to using # over ? is that hashes (#) don't need to change the page to make it **both** an action and a bookmark.
In pure CSS, he can't emulate the random (unless you know of some way to that I don't know of). size = (Math.random() * (deg * 2) - (deg));
A nice idea, but your code is not reusable now. If you position it as a library, you should add an external interface for this library usage, so other programmers will be able to use it not altering the code or looking how exactly it works, only being familiar with the interface. Like this: var Shake = {}; (function() { // ... Shake.start = function() { // Your shake() code here // ... } // Shake.stop = function() { — Why not also implement stopping shaking? }); There is a little flaw in the function's logic: what it does is shake *several* elements. However it would be better if it shook only *one* element — because when you make a library, you should keep its usage as simple as possible. Not the library itself should iterate through all the elements when you need to animate several elements, but the applied code (the one that is written by user of the library). // Usage examle Shake.start(document.getElementById("your_booty")); // Handler example (hover) document.getElementById("her_booty").addEventListener("mouseover", function() { Shake.start(this); }); document.getElementById("her_booty").addEventListener("mouseout", function() { Shake.stop(this); }); How you set styles using setAttribute("style", ...) is not the right way to set styles at all, because it rewrites existing styles of the element if it had one. You should not alter "style" attribute, but instead work with properties of element.style object: elements[i].style.MozTransform = "rotate(" + size + "deg)"; element[i].style.WebkitTransform = "rotate(" + size + "deg)"; And so on (please google for exact property names). Anyway, again, a nice idea for a library. **EDIT:** typos and minor clarifiactions.
boost, I think you're missing the primary goals of my article: 1) exposing the power of using prototype 2) fun 3) encapsulation. I never complained that JavaScript should return anything else when dividing by zero. I simply stated that it wasn't useful in my application. The reason you create a function is because your application needs something beyond built-in functions. That's what safeDivideBy is.
No, this is a terrible idea. You should create new classes for these sorts of functionality, going around and adding frivolous methods on the String prototype will get you into all sorts of trouble down the line.
Next up would be &lt;blink&gt; then? After that a bundle called Hazed &amp; Dazed. Just a single .js that if run on a html page (in head or from a bookmarklet) adjusts and animates and blurs and blinks random stuff in a webpage to make people puke. 
It was too advanced for it's time:)
What kind of trouble? What makes a method frivolous? If I use String.occurrences 10 times more often than I use String.indexOf, is it frivolous? A function being frivolous really depends on the application. If your application is a basic calculator, then yes, String.occurrences is frivolous. If your application is a word processor, String.occurrences is far from frivolous. Would I really want to create a new object called String2, to contain functions that, for my app, are more useful even than the ones that are built into the String object?
I stated in my previous post on Numeric prototype, that this is not a wise practice within libraries. But, adding a function to an object does not break any assumption that a library would make. What could possibly break by adding an occurrences property to the string object? I also noted that adding a "serverLog" function breaks the rules of cohesion. I added it "for fun". I have the feeling you're just looking at the code samples without actually reading the text.
That's REALLY cool, thank you for sharing it. It would be neat if it came alive or something.
Mind if we see some of your code then?
The "special name" you were looking for was probably either "higher-order function", "functor", or "closure". They mean slightly different things but JavaScript functions can have all three terms applied to them.
Link?
I've always wanted to make my own eyeball.
[formulanimations :: a simple eye ball](http://www.youtube.com/watch?v=emjuqqyq_qc)
Closure is what does the magic. But currying is what your first function is doing and may be the cool word you are looking for.
&gt;Today's client has a GPU and people want real-time 3D zoom, pan rotate... Well that depends. 3d enabled radiology workstations most certainly will render using local resources. But what if your client is a browser or mobile device? Is it reasonable to have your user wait until hundreds of megabytes of imaging data is transferred before they see a 3d render? What if they want to see another study? Do they have to wait again? What if they only work with the 3d render for a few moments? There are good reasons for having server side rendering. &gt;The web site has a 2005 copyright. And it all looks very expensive They are most certainly active and yes medical is usually expensive, especially if you're doing clinical imaging (e.g. Claiming that your product can be used for diagnosing patients) because then you need a medical licence from the FDA. Spatial coordinate write up: http://nipy.sourceforge.net/nibabel/dicom/dicom_orientation.html You can also look at the DICOM spec directly: http://medical.nema.org/standard.html
You're assuming that no one else is messing around with the base objects. It's a bad practice because you could easily step on each others toes. For the sake of argument, suppose I was writing a word processor and I wrote my own *String.occurences* function for counting the number of times that given word appeared within the document. All of a sudden, your function completely breaks my app or my app makes your function pointless. By extending the base types like this, you're also adding additional overhead for commonly used objects. Now every time that I create a string just with the intent of getting the length, I have to make a full object that also includes your *occurences* function. It's a horribly bad practice and even if **you** have the common sense to do things which most likely won't cause conflict, it doesn't mean you should advocate teaching it especially to those who may not have your understanding. *Edit: "...intent of getting the length..."*
A JavaScript child object can't get any information about its parent object unless there's some data duplication involved. I've come across a similar problem before when designing database schemas for MongoDB, so you might want to take a look at [Schema Design in MongoDB](http://www.mongodb.org/display/DOCS/Schema+Design) as a reference too. With how many children and ancestors you're dealing with, it's probably better just to store the id of the parent and grandparent inside each child, rather than the entire object. So consider something like this: { "type": "grandparent", "id": 12345, "children": [ { "type": "parent", "id": 123456, "gp_id": 12345, "children": [ { "type": "child", "id": 1234567, "p_id": 123456, 'gp_id": 12345 } ] } ] } Then, if you have a child object, and need to re-access it's parent or grandparent, just collect the parent or grandparent's ID, and traverse the initial object again from the top. However, I feel there's probably an even better way to solve your problem, but I don't have enough information about your specific use case right now to help out more. Is there a reason why you absolutely need to have such a large JavaScript object in memory? It might be better to break it down into several smaller objects, and access them only as needed. EDIT: For your specific use case, check out something like [Trees in MongoDB](http://www.mongodb.org/display/DOCS/Trees+in+MongoDB).
The standard is value[,key], where key is optional. jQuery does it backwards, dont follow that convention. I do like the idea of iterating over strings in the same manor. Edit: Jesus Christ downvoters. Look up the fucking standard for how a foreach should handle a callback function &gt; callbackfn is called with three arguments: the value of the element, the index of the element, and the object being traversed. Right at the top of page 136 http://www.ecma-international.org/ecma-262/5.1/Ecma-262.pdf
I haven't compared the difference between them too closely but how does this differ from other implementations of forEach? (Underscore, native [in some browsers], jQuery.each, etc.)
Zooming to make this readable on my phone puts the menu in front of the actual text... 
So what? Should he not attempt to create tools because someone else did already? Is he not allowed to learn/help others learn by hacking because someone "beat him to it?" Also there is some utility in iterating over strings in the same manor as arrays|objects. It is done in quite a few languages and when it is available, it proves to be useful. You speak of problems it _may_ cause, do you have example? His approach (the iterating/callback portion) seems sound.
&gt;(PS: i REALLY wish we had webSQL, then i would have none of this pain!) Well, you could use [sql.js](https://github.com/kripken/sql.js), which is sqlite compiled to javascript using emscripten
Note of caution: characters in a string can't be accessed with the same syntax as arrays in &lt;= IE7 (possibly IE8 as well). "charAt" is probably better.
True enough, however, in some cases you merely need a single bit of functionality that happens to be in a library/framework, without needing anything else of it. Sticking to the functionality you need saves you the extra bandwidth payload of the (in this hypothetical case) useless code. I'd also be happy to hear of the problems it might cause, as they are the things I need to learn about to become a better developer.
Definitely agree on the "learn/help others lear by hacking". I do know that the functionality this provides is not novel in any way, but it is definitely a good way to explore the features of the language and find your own ways to solve problems. If you only ever solve problems by using other people's solutions, then what experience will you have when a new problem arises? As for the string iterating, someone on IRC suggested using charAt there. I haven't investigated whether that is more efficient than string[index], but it's worth keeping in mind. [edit:] Seems like string[index] is not supported &lt; IE7/8, which is a more than valid reason to go with charAt.
Very true, however, would you not agree that the more long-winded solution is easier to actual follow when reading it? I find readability a very important quality for code to have.
OP said "looking for feedback" and he gave it, don't shoot him for it.
No, it's not IMO. The shorter version is much, much easier to comprehend. I can see his easily all at once, whereas yours I'd have to maximize my window to see it all. Cyclomatic complexity is also lower, as is the number of intermediate data structures. A personal programming maxim of mine is to use the least amount of code required for the job. If one has trouble understanding what it does, then add comments, but don't _add_ code simply to substitute for documentation. The number of general bugs, performance issues, security concerns, and faulty logic are all directly proportional to your line-count.
Re: objects and strings -- I'm trying to imagine a case where you don't know whether you have an object or a string but still want to iterate over it, and have a function that can handle object elements (anything) or characters in the same meaningful way... and I can't. It seems to me to be more useful to have a function that iterates over a collection (array or object) with some VERY well defined behaviors with respect to inherited elements and array order and sparseness, and if it happens to be passed anything else then it either warns you that you didn't pass a collection, or just calls the provided function once with the value. The way I think of it, strings are almost never collections of characters in the same way that arrays or objects are collections. Strings are more likely to be collections of words, or delimited values, or something even more interesting. And in this case the programmer will want to split the string and then iterate over the resulting collection. Sorry if my feedback seemed harsh, but if a beginning programmer came to me (a 25 year veteran) and asked for feedback, that's the sort of thing I'd tell them. Making a useful, well-defined function is far more important IMHO than making an efficient one -- you can always refactor easily later for efficiency, refactoring to handle odd function behavior tends to be much harder. Finally, my point in mentioning other libraries wasn't "don't bother", it was that other people have already thought about this (a lot) and maybe there's something to learn by comparing your implementation to theirs. Want more? OK, it would be much easier to read and maintain if refactored into three different functions: one for arrays, one for objects, and one for strings. You can cover them over into a general function if you want, but don't bother switching more than once. For arrays, think about sparseness. If I make an array a = []; a[1000] = "foo"; how does the iterator handle it? Is that as useful as it could be? What about if I do a['foo'] = 'bar';? Will 'foo' be included in the iteration? Does the string iterator distinguish null and ""?
Wow, thanks for the well worked out reply, some things for me to learn here. I admit that I actually forgot about native forEach possibly being there, most probably because I never used them due to incomplete browser support. Good point on making local references to toString and forEach. As I mentioned in some other comments, I'll switch the key and value order around. I'll be looking into the jQuery and underscore implementation to gather some other ideas; can't hurt. Thanks for the helpful feedback! 
I just noticed that earlier as well. It's meant to transform the menu into a top bar, but for some reason it's not doing that on phones. Planning to re-develop the front-end soon so I think I'll leave it for now.
Re: Objects and strings: I do completely agree that there isn't really a case where you don't know whether you have a string or an object to iterate over. Implementing it for strings was a bit of a spur of the moment thing when I remembered that you access the characters in a string the exact same way as you do the elements in an array (IE7/IE8+), I now learned. In retrospect, keeping it to just arrays/objects seems like a better idea. I honestly don't care much if feedback is harsh, as long as it is constructive. With this additional comment, you remark about using strings in this makes sense, and I've learnt something of it, so thanks. I'm going to be looking at the existing implementations soon, and figuring out why they do things as they do to see if I can pick up on an additional few things.
I think I would rather google for exactly the functionality I need rather than search for it in a library to pick it from the (probably large) source. Regardless, as mentioned in other comments I'll be looking at some library implementations of this to learn some more. As for where I'm coming from: I was reading a book to brush up on some JavaScript patterns when I randomly got the idea of using callBack to solve something that'd been bugging me lately. As a bit of an exercise for myself, but also as a subject to make write a post about. It can teach some people some things, and getting feedback on it can teach me probably even more (as it proves to do right now).
Browser support's always a pain. But forEach isn't actually that bad - it's supported everywhere but IE&lt;9, and some very early firefox versions. So you still need to test for it, but most of the time your code's going to take the more efficient branch.
Added &lt;meta name="viewport" content="width=device-width"&gt; to the &lt;head&gt; now so at least the media query gets used. It still looks bad because of the category list on top, but should be more usable on mobile.
- Could you show us some example JSON data from the server? - Are grandparent/parent/child objects mostly identical? (id, name, parent, ...). - Are the IDs globally unique?
How about an option to put a contact lens on the eyeball? And the whites would be good too - adding options for level of bloodshot, and spectrum from blue-white (babies' eyes) to the yellow of old age / late jaundice. You own special signature broken capillary as well? That one would be hard to add in. 
&gt;No, it is still the same old window.amount. Nope. It's not. It's actually arguments.amount. When the outer function is defined, we've defined arguments[0] as the variable "amount". The fact that you happen to be passing in a global variable of the same name is completely inconsequential. Once a variable is passed as an argument it becomes part of the scope of that function, which is why your global "amount" is not changed. Scope traversal in javascript basically works like this. Let's say you have made a reference to something called "amount". JS will first look in the local scope, which means the function it was defined in (or the global object). If it doesn't find it there, it will look at the arguments object in the function it was defined in, if it doesn't find it there, it'll continue to the next containing function repeating the process until it reaches the global object. If it's not found on the global object it'll throw a reference error. So yes, you're correct. the somethingElse.amount is arguments.amount and the inner function here maintains a reference to that variable because it's inside the scope in which it was defined. Your global "amount" here isn't changed because it isn't in the same scope as your arguments.amount in the outer function. Hopefully this clears things up. EDIT: See this for clarification on the arguments object in javascript. https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments
I meant more efficient than a `forEach` function written in javascript, not more than a simpler type of loop. But I went back and did some testing after reading your comment, and [the results were interesting](http://jsperf.com/foreach0948839/3). The native function was indeed much faster (except in firefox, but I would expect that to improve in the future). However, that's only compared to a robust forEach imitation: if I made the manual iteration less robust by leaving out `hasOwnProperty` checks, performance skyrocketed far above even the native function's. Strangely enough, the most time-consuming part of the loop seems to be actually checking whether a property exists.
You need to go DEEPER.
It doesn't crash IE, silly. It just throws an error.
It's not good practice to be using a try catch here, leave exceptions for I/O &amp; unexpected things that the code cannot recover from. if(typeof console == 'undefined') There's nothing unexpected happening, we know IE won't have the console so let's account for that from the start and not rely on an exception.
brucebannor, you right. thanks for the advice. i update the post and add credit for you.
Appreciate that. And admittedly, my use of the term "programming into a language" may have been a little strong for what I was doing with the in() function.
Awesome, and it is a really good post. There was just a question about this yesterday in /r/javascript.
&gt; I meant more efficient than a forEach function written in javascript, not more than a simpler type of loop. And the point is that it isn't necessarily: modern JITs can do things like inlining a javascript-implemented foreach, which they can't do on native methods.
Just started looking into Angular. Is there a reason for the $ on your objects or are you using reserved Angular methods? ie: .$error .$valid From the little I read about Angular, the $ is reserved for the framework itself.
I think you misunderstood. I wasn't referring to when I was passing in `amount` into the function. I was talking about his original example (and subsequent ones) where he just starts using `amount` in his inner function That's exactly why I gave that example. &gt;so in my myFunct method (in the screenshot), "amount" is actually "window.amount" look at the screenshot for reference (sorry you had to type all that out) **edit** http://i.imgur.com/tAHpv.png
I implemented one for arrays because I don't see the point of doing it for strings and I use `for(var obj in SomeObject)`... well that its intended use to my knowledge... Array.prototype.foreach = function (arg) { var args = Array.prototype.slice.call(arguments, 0, arguments.length - 1); for (var i = 0; i &lt; this.length; i++) { arguments[arguments.length - 1].apply(this, args.concat([this[i], { "ord": i, "last": (i === this.length - 1), "first": (i === 0)}])); } }; ... var args = [1, { "this":"that" }, "123"]; args.foreach(function (val, meta) { var index = meta.ord; var isLast = meta.last; var isFirst = meta.first; console.log(index + ": " + val + "; isLast;" + isLast + "; isFirst" + isFirst); });
Huh? I believe the OP _is_ the author, and the material at the link was written by him.
I didnt create those methods they are already define in the angularjs library, take a look at this http://docs.angularjs.org/api/ng.directive:input.text
Was it... Firebug, Dragonfly, Dev Tools, or F12?
I'm sorry, I should've been more clear on the demo page. It uses getUserMedia so you need chrome 21 or above, opera... I'm not sure what other browsers support this api. You also need a webcam. Once you allow the browser to access your webcam, it takes the video feed and throws it into a canvas 2dcontext to get the pixel data. Pixel data gets converted from rgba to hsv. The lightness is then mapped to an ascii character. TLDR; real time ASCII video conversion in the browser from your webcam feed
Everything seems to be running fine to me?
Dammit. Now I don't want to refactor mine or work on it at all.
Not really. The maths will be taking up about 0.01% of the CPUs time.
Seems like you need to read a book on Javascript Design Patterns. It explains these patterns you are trying to implement. Also, this just in: Object getters and setters. http://addyosmani.com/resources/essentialjsdesignpatterns/book/ https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty
"expressiveness" means shoving things onto one line? You Rubyist and Pythonistas have a serious fetish for this, and it's misguided. This is hardly the kind of thing that kills Javascript productivity.
Divs do this by default, last I checked.
asscii
Saw it on Chrome 22, it works fine, but the cpu usage is really high. I think you can fix it in someway, maybe extend the per drawing interval.
I don't know what project you are referring to, but I've built a js/php project that does that. It was pretty neat but i got distracted from it due to work, if you're interested I'd be happy to post it on github. Just let me know.
Nice talk! Been working with the web audio API for about a year now and I'm absolutely stoked on it. 
Good work, sir!
Please read the [docs](http://www.schillmania.com/projects/soundmanager2/doc/). I've never used Sound Manager, but it took me less than a minute to find this option: waitForWindowLoad: true
`createTextNode` is a property of `document`, not `window`. Change `createTextNode(` into `document.createTextNode(`.
Just curious, what's the benefit of storing JS in localStorage vs. just having it cached by the browser? I'm not too familiar with this technique.
Don't get why the last few are invalid. 
Good question! The browser cache is great for storing assets, sure, but the problem is, particularly on mobile phones, you don't know how long something is going to be in the cache for. This could mean that a user can revisit your site moments after visiting last time, and having to redownload everything again. By storing in local storage, we have full control of the caching experience, and someone can visit a week from now and, granted there aren't any code changes, have the site load near-instantly (I say near instantly because the browser still makes an HTTP connection to get the original page). That could be rememdied by using the AppCache manifests... which could be used in this case, but they're generally a pain to debug.
&gt; This could mean that a user can revisit your site moments after visiting last time, and having to redownload everything again. This sounds like an edge case. All browsers I know of will cache content by default unless explicitly set to expire the cache immediately.
Generally, I'm with the "let the browser do it's thing" on this. I say let the cache do it's thing. Trying to circumvent the user settings seems like asking for lash back. Also, tracking changes on your JS just feels like bloat that wasn't needed. Keep your JS small (minify) and your start up processes lean and I don't see a purpose in this. Also, it keeps local storage free for actual data. It's already potentially limited (IE is 5 million, Chrome is 2.6 million characters, but still) so dumping a bunch of JavaScript in the localStorage seems like a waste when the browser can cache that outside localStorage for "free." The only impact in not using this is a HTTP Request to get the change status of the JS file if there are no updates.
Actually it doesn't. Underscore's "extend" method is completely different, and although Backbone uses Underscore, it sets up the bulk of the inheritance code completely on its own.
Fixed; thanks!
It makes more sense to allow characters surrounding them ([example](http://example.com)). Still, too late to change the challenge!
Hmmm... hope not! There's a typo in your challenge!
`([example](http://example.com))`
we tried this technique at my job expressly for speeding up ipads. it was slower than just allowing the ipad to load from its component cache; sometimes up to a second. yes, in the worst case of network latency and a cold cache it did better; but it hurt performance in what should be your best case, a warmed cache. we abandoned it and favor compression/concatenation to limit the number of http requests and things that the device needs to cache. edit: here's that code. it was never finished/polished after the first round of sad benchmarks: https://github.com/coxmediagroup/kappa
This tutorial looks at creating a simple game (with Physics) in JavaScript using the [Moscrif](http://moscrif.com/) SDK. I suppose that was pretty much summed up in the title, eh? Anyways, if you have never heard of it ( it's fairly new ), Moscrif is, um... a cross platform game development kit (with Physics) in JavaScript... Moscrif provides a pretty comprehensive cross platform API, an IDE, simulator and a great deal of documentation and source code, and a native host that removes most of the performance issues of creating games in HTML. You can develope in Moscrif with no other dependencies ( no need for Android ADT, XCode, Visual Studio, etc ). The Moscrif SDK is free to download and start, and available in [different tiers](http://moscrif.com/feature-overview), although this stuff always confuses me. In many ways, Moscrif feels like a game oriented version of Appcelerator Titanium, but with a slightly easier UI and a simulator, which is nice, as dealing with the Android emulator is a gigantic pain in the #$@$ and a big part of why I dont use Appcelerator these days. Basically, if you are wanting to create a mobile game, and JavaScript is your weapon of choice, check out Moscrif.
Another note; you should have probably made the tests more comprehensive. For example, this is a "winning" regex: /(^\s*|.+?\s)\[([^\]\[]+)\]\((http://([-.a-zA-Z0-9]+)+(\.[a-z]{2,4})+/?)\)($|\s.*?)/gi $1&lt;a href="$3"&gt;$2&lt;/a&gt;$6 But would fail the completely valid Markdown: [Test Link](https://example.com/) or [Test Link](http://example.com/path/to/file.html) ***Also***, according to the [MarkDown page](http://daringfireball.net/projects/markdown/syntax#link), you can use relative paths for URLs: &gt; If you’re referring to a local resource on the same server, you can use &gt; relative paths: &gt; &gt; `See my [About](/about/) page for details.` That makes the regex *much* more complicated, something like this: /(^\s*|.+?\s)\[([^\]\[]+)\]\(((http|https|ftp)://([-\w]+\.)*[-a-z0-9]+\.+[a-z]{2,4}(/[\w~,;\-\./?%&amp;+#=]*)*)\)($|\s.*)/gi \1&lt;a href="\3"&gt;\2&lt;/a&gt;\7
That's not necessarily true on mobile. I sometimes have a few "tabs" open in mobile Safari and when I switch between them it does a full page reload.
I think the author forgot to write the body of the article.
Great stuff! I planned on making something similar actually. Although browsers have great caching, it also means that you're at the will of whenever the browser deletes it's cache. I've wanted something like this so that I could write a web-app in a web-view that will work regardless if there is internet or not. Essentially I would provide the webview with all the necessary JS, css, and html templates that are then cached and ready to be used whenever. Good stuff!
kinda cheated on the url validations, but it works: Regex: /(\s|^)\[([^\]\[]*)\]\((https?:\/\/[^,_]*)\)(\s|$)/ Replace: $1&lt;a href="$3"&gt;$2&lt;/a&gt;$4
I've completed them all to date and have learned of ton of regex! Please don't stop making challenges!
Interesting, because of the web-view I'm assuming mobile. I have to ask wouldn't it be much more efficient / better user experience to just use Phone-Gap?
I thought the newest blackberry browser was supposed to be near 100% html5 compliant, maybe its still in development 
I'm not sure... whenever "Blackberry browser" is a requirement, the client usually means "It has to work on my old-ass Blackberry", so the lowest common denominator is almost always what we have to test against. 
Well... yes they do. And they have aggressive caching policies for static files. However mobile devices exhibit different behaviour, particularly iPhone where if you hard quit Safari or restart the phone the cache is gone: http://www.yuiblog.com/blog/2010/06/28/mobile-browser-cache-limits/.
That's a good reason. Good luck!
That's interesting, we've only seen positive results. In subsequent revisits, the site loads really snappily (you don't see the splash screen). How big were the files? Touch is only ~120kb in JS.
We do minify, and we do concatenate, and we do aggressively cache files (to the point where in order to force a change we have to change the file name for the browser to pick up there was a change). Also, we used ASP.nets minifying scheme, which automatically versions the filename for us.
I fairly new to HTML5 Application Cache, what are the pain points to debug? And if it does truely suck, is the Application Cache W3C Working Group aware of it?
RFC compliant e-mail validation?
That'll be coming, one day. I want to get stuff like lookbehinds working first, though.
I wasn't! :-D http://fightingforalostcause.net/misc/2006/compare-email-regex.php
We use three different types of tests, traditional unit tests that stub out the XHR call, tests that mock an XHR call, and tests that make a true XHR call and hit our server. The traditional unit tests are pretty much what you described. We've recently started using [Sinon](http://sinonjs.org/), which lets us stub our XHR calls and confirm that the class making the call is doing everything we expect (building the right URL, assembling data to post, etc.). We run these tests as part of our CI. The mock XHR tests are used to ensure that we handle our XHR callbacks correctly. These tests can do the same as the basic unit tests, but the real benefit is that they let us test our callbacks. We fake the data returned because (1) we don't have to worry about the time required to make a real XHR call, and (2) we know, generally speaking, the structure of the data that will be returned, so this mock data should provide a good indicator of how our code will perform with a real call. We update the mock data used in our tests occasionally to be sure it stays fresh. Our final type of tests make a real XHR call to a developer's server. As you said, these tests are slow, but they're sort of a final confidence test. These tests confirm everything the other tests tell us, but also show us that everything is working as it should when we make a real XHR call. One of our biggest uses of these tests is to confirm that our back-end services are working as we expect and that everything works when we integrate. Additionally, this type of test gives us the ability to confirm that a server or back-end service is up and running. We run these tests infrequently, mainly just for initial integration testing of a new service. So, that's everything. It might be a little more than you need, but it seems to work for us.
Very comprehensive; exactly the kind of answer I was looking for! Thanks so much!
I drive a Jet, made out of JQuery plugins and npm modules.
Thanks for the reference material. It's going to help a lot. I'm guessing with all the gotchas it may not work well with a responsive app?
I don't entirely agree. Your mocks will need to implement functionality you define so your own object behaves as expected, meaning you need to write "lines" 2 and 3 of my example above. Why would you need a framework for lines 1 and 4, since those are the only two *actual* lines of code I completely wrote? Mocks are ridiculously simple in JS and you generally don't need a massive framework for that like in Java or C++.
Let's look at "spies" (mocked methods) in [Jasmine](http://pivotal.github.com/jasmine/), my preferred JS test framework. I'm running an integration test, and I don't want to actually call some method that has side effects: `spyOn(MyApp.Util, "closeCurrentWindow");` I'm running a unit test, and I need to fake out user input: `spyOn(userInputGetter, "getUserInput").andReturn("i'm a user");` I want this part of my app to act like the real deal under this test, but I also want to make sure that it was only called once: `spyOn(calculator, "add").andCallThrough(); calculator.doOtherStuff(); expect(calculator.add.callCount).toBe(1);` Oh, did this part of my system call that part right? `expect(thatThing).toHaveBeenCalledWith("red", "blue");` Can you get by without a test framework? Absolutely. But if you need the above kind of features in your tests, why write the framework yourself?
lol'd
Since you asked the most relevant question, I'll share with you the answer--Safari and Chrome (as I've read) are webkit browsers and handle the readystate quite differently from IE and Firefox. When alerting, it's almost as if the readystate starts out as...undefined, but always made it to readystate==4. So, I wracked my brain looking for the answer in javascript when the solution was simply in understanding the most simple of concepts--how it parses! All I had to do was move the "loading" message outside of the function. When called, the code simply parses down to that point, delivers the "loading" message via the updatepage function, then, when the readystate eventually reaches 4, it simply calls the updatepage function again and delivers the proper response text. Sometimes, the answer is so mindnumbingly simple.
Expected to see an abuse of the term _singleton_ and wasn't disappointed (that's not a singleton it's just a static object).
I wanted to report back that I found the [Closure Tools Blog](http://closuretools.blogspot.com/) to be a great resource. They just recently (in the last month/1.5 months) posted some articles regarding compilation levels and notation. Check it out!
This: class Animal { constructor(name) { this.name = name; } sayName() { console.log(this.name); } } class Dog extends Animal { constructor(name) { super(name); } bark() { console.log("Woof!"); } } is supposed to make "more sense and is simpler to use" than this?: function Animal(name) { this.name = name; } Animal.prototype.sayName = function() { console.log(this.name); }; function Dog(name) { Animal.call(this, name); } Dog.prototype = new Animal(null); Dog.prototype.bark = function() { console.log("Woof!"); }; Only a Java programmer would think that. What's next? Setters and getters? OOP is not the answer to everything!
This is what has bugged me about JS's prototypical "classes": * A class' methods and members aren't in the syntactic scope of anything. There's nothing stopping me or another dev from defining a constructor, adding some methods to its prototype and then writing a whole bunch of unrelated code before finally deciding to augment the prototype with another method. Having the syntax "class { ... }" keeps everything together. * I find it easy to forget the song and dance of inheritance. Plus there's more room to make hard to catch mistakes. One reason I have enjoy the Flex development I've done is because ActionScript did EcmaScript classes the right way. They even got rid of the need for the "this" keyword when referencing class members. Oh, interfaces too. I'll be very happy when ES6 comes out.
Welcome to the world where people create solutions for problems they don't have. 
You forget that programmers are lazy by nature. To be honest, the easier it is to structure projects and see the forest for the trees the better. If this means that we have will sacrifice compact code for maintainability and lowering the language barrier, so be it.
Actually, that's a fair comment. But consider that should I use Javascript's paradigm as it was designed, I could do the whole darn thing in one expression. Such is the power of anonymous functions, and non-OOP thinking. I updated the code. Thanks.
From what I understand, having spoken to some of the people who are behind the JS spec, getters and setters weren't added to encourage additional discipline. They were added because HTML DOM objects essentially behave as if they had getters and setters (e.g.: you set innerHTML, the page gets updated immediately). DOM objects do things that regular JS objects couldn't. Getters and setters were added as a way to "fix" this inconsistency. Classes, however, seem to be added only because the ES committee is caving under outside pressure. I don't think Brendan Eich really likes them, but lots of people do and they want to please these people. As a side note, they're adding a jillion new features to ES6. They really seem to be trying to please *everyone*. We'll see how that goes. To me, it seems JS is turning into one of those kitchen sink languages.
you also need a webcam... it will show teh kitteh but I'm in my school's computer lab, so it asked for permission to use the microphone and I was confused until I figured it out.
I don't understand the final example you have: Folderol.prototype.aFluentMethod = function (arg1, arg2) { return begin1( this, this.set({something: arg1, somethingElse: arg2}) ) } I'm pretty sure I understand what it's doing, but why wouldn't you write it as: Folderol.prototype.aFluentMethod = function (arg1, arg2) { this.set({something: arg1, somethingElse: arg2}); return this; } Am I missing something?
Maybe I should make the example longer. Both do exactly the same thing, but having a way to say "I'm returning this" at the top of the code makes it more obvious that you intend to return "this" and most especially, that you don't forget to add the line at the bottom. For two lines, it's probably easier to write 'return this', and some people might argue that if it's longer than that you need smaller methods.
I've tried to expand that in the post, I appreciate the feedback. /r/javascript rocks!
I guess I'm just failing to see when it would make things simpler. your conversation with boblauer helped me understand the goal of the example code better. this just seems like a combinator that makes as little sense as it's name implies. I suppose, by being able to combine things in one line you make the code a little more terse - but then you have this odd begin1 function in there that obfuscates the code to anyone who doesn't know about this idiot combinator and who has to work on your code later. 
well i lost power and this is my first day working on it again... yeah i never got it figured out. I would love some help, im working on it right now. Now it has gotten to the point, where I have so much extra code, trying all sorts of different things. I am basically confusing myself. I think I need to start over.
Nice, using the [null object pattern](http://en.wikipedia.org/wiki/Null_object_pattern) for a [filter](http://en.wikipedia.org/wiki/Filter_\(higher-order_function\)).
[I Combinator](https://en.wikipedia.org/wiki/SKI_combinator_calculus) is the traditional term from Combinatorial Logic. [Identity Function](https://en.wikipedia.org/wiki/Identity_function) from math and "I Combinator" are nearly synonymous, so use whichever one seems clearer. I'll add a mention to the text, thanks.
Sure, you can quote me. Heh, that reminds me: In Prototype, we do have `Prototype.K`, but it acts like the I combinator, not the K combinator. It's the default iterator in all our `Enumerable` methods, much like the first example in the article. I've always wanted to move it to `Function.IDENTITY` or otherwise give it a more accurate name.
&gt;Also, how is this a knock against OOP? Your code examples are both OOP. It's not as if you're comparing procedural with OOP. You're comparing OOP with OOP. My example (the 'classic' instantiation style) is not necessarily an example of object oriented programming a la Java (a distinction I made). Mine is an example of prototypal inheritance. I believe classes are a different type of inheritance. Inheritance does not equal object-oriented programming. Thinking of everything as objects with data and methods is object-oriented thinking.
If you were familiar with Haskell, or other such languages, you would find the take example, which showcases the more functionally oriented features of LiveScript, very readable. Returning objects in a switch? How readable is this: switch something case blah prop: 1 key: 2 case asdf one: 1 two: 2 In the end though, there are people who cling to their curly braces and semi-colons, and if you are one of those people, this language simply isn't for you. 
This is nuts!
you can set this with the yoffset setting, after running bookmarkscroll.init() do this: bookmarkscroll.setting.yoffset = -50; just replace the number with the size of your header in pixels.
Why wouldn't you just write this: Folderol.prototype.aFluentMethod = function (arg1, arg2) { doSomethingImportant(); this.set({something: arg1, somethingElse: arg2}); doSomethingElse(arg1); finishWithThis(arg2); return this; } It's the exact same thing and no one is baffled by the "idiot". Also, the example you used with the giants and map(fn || I); might be quicker to write, but if you do map(I) on a large set, you're wasting CPU cycles when you can just return the collection. Less code doesn't mean faster or better code.
In the end, I have lots of love for this language. And, if what you see from Clojure, Low-level JS, and other languages are any indication of its flexibility, hopefully people who like their JS like Java can have that, and the people like me who don't can have something else. I just hope the OOP mentality doesn't subsume the JS-mentality.
&gt; That's only mocking individual functions, though. To mock out a constructor function and all of its methods, you're going to have a hard time with Jasmine. [jasmine.createSpyObj](http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.html#.createSpyObj) is exactly what you're describing and using it makes it easy to fully mock out a constructor function and all of its methods. // a complex spy, with each member a spy var dialogSpy = jasmine.createSpyObj("Dialog", ["open", "close"]); // and an easy DSL to stub returns dialogSpy.open.andReturn("The dialog was opened"); dialogSpy.close.andReturn("The dialog was closed");
I like your writing style. Have you considered authoring a book? There's only so much I can get out of your blog, and I've read quite a few of your posts over the last year or so.
Just paste it underneath the initialization
I've never used github before, but I think I submitted a fix. https://github.com/TradeMe/bootup.js/pull/2
he has a couple books published - but they might just be collections of his longer essay/blog posts. leanpub is where he publishes I think.
Not sure why someone downvoted you, that would be my recommendation too.
&gt; there are people who cling to their curly braces and semi-colons "Eeee... ur languagez r not mine n stuff" [pushes up glasses] [snort] Fuck off with that. I'm being pragmatic. The example I took off of the website is damn near unreadable. Attempting to emulate Haskell is interesting I suppose, but it's probably one of the most confusing languages to learn. Let me reiterate: READABILITY IS A PRIMARY CONCERN in *all* software development. In the time it would take the majority of front end developers to adapt to this syntax, they'd have been done faster with CoffeeScript or even vanilla JavaScript. It's cool and all, just not very practical. ... unless you're a Haskell shop that doesn't want to hire experienced front end developers.
Unless performance is an issue, I strongly prefer code constructs that are self-documenting, because over time documentation and code can drift out of sync with each other. In Ruby I often use `returning` or `tap`, and in JavaScript, I often use `_.tap` or a "fluent combinator" to do the same thing. It could be a question of taste.
What are you trying to reduce? total file size or lines of code?
Regex: /^(.*\s+)?\[([^\[\]]*)]\((https?:\/\/[a-z0-9][a-z0-9-]{0,31}(?:\.[a-z0-9][a-z0-9-]{0,31})+\/?)\)(\s+.*)?$/i Replace: $1&lt;a href="$3"&gt;$2&lt;/a&gt;$4 Didn't bother to go too in-depth with the URL matching because it's been done in previous weeks. Just pulled in enough of that solution to answer this week's. I'll also have you know I broke my long-standing word to my friends that I wouldn't join reddit just so I can follow along on these discussions. A pox upon your house!
bit of both really :) but if dalectris and laxxium are sugesting jQuery, then i shall learn how to use jQuery and see how it goes ^.^ i may have reduced the mount myself by moving stuff around and making a new function, if that does no work then i shall be using jQuery :)
Doesn't work for me on Chrome version-I-don't-know but looks like cool shit!
jQuery gets a lot of heat for being bloated, but it works well and allows you to do a ton of things with very succinct code. It'll make your life a lot easier when working with AJAX and also the DOM. Also, it's well documented, so learning to use it isn't too bad either.
Sorry my final sentence came across with the wrong tone. There is nothing wrong with liking semi-colons and curly braces, and many people do. Those people will not like this language, and thus shouldn't use it. Basically my point is that there is no absolute measure of readability. I, and many other people, find LiveScript more readable than JavaScript. Other people will not. Choose whatever is best for you, and in your case it seems that you find JavaScript more readable, so you should stick to what works for you. I would however encourage broadening of horizons and experimentation. I would encourage you and others to give different languages, eg. Haskell, LiveScript, etc. a try. Your idea of readability may evolve as you try out different points of view. 
I'm sure if I were used to it, it would be fine...For me at least... However I'm on a position where I need to hire experienced front end developers, and I just don't see them knowing Haskell. 
The problem is getting the data to the browser, not storing it. It's a slow loading issue because we're fetching and displaying all the data.
&gt; The problem is getting the data to the browser This isn't something that can be solved by client side JavaScript. I don't know if you got my point, but what I meant was you would only get the data once, store it in the browser, then perform paging on that data without additional requests back to the server.
May not have other resources than myself, or might be server issues I'm not aware of. Or poor calls to a 3rd party we're stuck with. This is why I stated a mostly front-end solution. At this point I'm just brainstorming for ideas. Maybe I'm not understanding your custom page scenario, but it seems like it would make things worse as we'd still have to deal with the slow loading. That's what I'm trying to avoid. Yeah, if performance was good and I could get all the results in a couple seconds, I'd just use Knockout to manage the results on the client - no problem. When I mentioned streaming/chunking what I was envisioning was something like: * Client makes an initial ajax request * Server (somehow) returns, say, the first 100 records - not the full data set. Perhaps this is your server component? * Server is generating more records, say a 100 at a time, perhaps storing them in session * Client side caches the responses that come back so we can page back and forth between the data sets * Client callback has handled the first 100 records, we're all done, fires off another request asking for the 2nd set. Perhaps there is a flag in the JSON data indicating there are more records and where we are in the list so we know what to ask for next? * Rinse and repeat until we have all records So the records are essentially streamed in to the browser where we can display the first 100 (maybe in 5 seconds), then the next 100, then the next, etc., instead of waiting for 30 seconds for the page to load all records.
I can definitely see the Haskell connection. However, compare the prelude definition of take with your own. take n _ | n &lt;= 0 = [] take _ [] = [] take n (x:xs) = x : take (n-1) xs It uses pattern matching rather than guards. take = (n, [x, ...xs]:list) --&gt; etc would be take n list@(x:xs) = etc But that's meaningless, you couldn't actually call it with an empty list without a pattern checking for that. That's besides the point though, the Haskell is a lot cleaner, LiveScript is kind of a mess. You have tons of three character operators in places because you don't really seem to ever overload any of JS's operators and translate them into different structures based on context. In every case it looks like your answered ambiguity by adding more characters. LiveScript and Coco both have great features but really crufty syntax.
If you want to keep it strictly on the frontend *and* support IE7, I believe you are out of luck. It is possible to start reading (and thus, parsing and displaying) data from an XHR call as soon as it arrives (this is essentially [Comet](http://en.wikipedia.org/wiki/Comet_(programming\))) by listening for the readystatechange event on the XHR object, but unfortunately IE7/8 [doesn't support it](http://stackoverflow.com/questions/4158435/ie7-8-responsetext-in-readystate-3-not-available/4718513#4718513). Even if you could screw IE, you would also need to roll your own AJAX stuff and a custom parser for the data to do this. There are some solutions to this that do support IE (script tag + iframe) but they require some control over the backend. If you can't touch the backend per se but wouldn't be averse to adding another layer to the cake, I'd go with something as simple as making a caching server that would fetch your whole dataset as needed and send it (quickly) to the clients when requested, possibly supporting paging in there as well. Not showing the absolutely most recent data might of course be unacceptable, but it should be possible to hack around it on the frontend. 
Yea, definitely easier to get all the data in the browser... but pagination isn't reasonable for 1000 pages either so make sure you limit the return data to something sane :p
The issue, as far as I see it, is, well, we just have a very slow page load because it's loading 2 years worth of data. This could be not a ton of data for some users, much more for others. It's a legacy app, I'm sure you know how that goes! Some of the data is at the 3rd party. We've profiled what's happening and approximately 65-70% of the time is spent at the 3rd party and I doubt there's much we can get them to do about that. It's one of those it is what it is situations, we're just trying to minimize that pain for users.
If you can't modify the server side you are stuck downloading the entire file. But that doesn't mean your site has to be unresponsive while that happens. When you make an XmlHttpRequest you can set it to be async, so your site can continue running code while it loads. When it's async you can also add listeners to the request to listen to events. There's a 'progress' listener that can inform you when more data has been downloaded. In that listener you can access the requests textResponse property which has all the data downloaded so far. Of course since the full file hasn't been downloaded yet you're going to have trouble parsing that file, unless it's in a simple format that doesn't require an ending indicator. That means if you want to parse XML or JSON you're going to have to repair the data first so it will parse. Even if you get all that working you still need to consider that all the data is coming in asynchronously, so what happens if you're in the middle of repairing and parsing the data and more data comes in? You need to be very careful about that. So it's a lot of work and not a simple task but it definitely is possible. Maybe someone has already implemented something like this? I don't know, but it's worth a look. If you want to know more about XmlHttpRequests here's a good place to start: https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest and https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest You'll want to look at the section on Monitoring Progress. Another problem is that the progress event isn't supported in IE until IE 10! You could check for more data on a setTimeout instead, but that could just lead to even more async troubles. As for the best practice for pagination? Do it on the server side. Your api should take query options for which page you want and what count you want back. But you need to do that on the server side. You can't have best practices javascript if your server doesn't support it. If all you really want to do is not block the page while data is loading you just need to use an async XHR call, which I'm pretty sure is the default if you're using jQuery, but they'll still have to wait for the data to load.
You shouldn't be returning 2 years worth of data if you aren't displaying 2 years worth of data. You should be returning n results per request. Why can you not modify server code to get a count of all record, but only return so many rows?
Webstorm seems to be one of those intelligent IDE's. Still won't beat code coverage.
Because it is what it is, it's dealing with a 3rd party. And **we are displaying 2 years of data, we're displaying EVERYTHING**, that's why the page load is slow. I'm not sure how I can more effectively communicate that.
You can use a streaming event based JSON parser.... asynchronously parse the JSON as it's received. Clairinet seems to fit the bill. But I've never used it. http://writings.nunojob.com/2011/12/clarinet-sax-based-evented-streaming-json-parser-in-javascript-for-the-browser-and-nodejs.html https://github.com/dscape/clarinet Stackoverflow discussion... much of it seems to be for server side code. http://stackoverflow.com/questions/444380/is-there-a-streaming-api-for-json
Lots of javascript front-ends, e.g YUI3, support a JSON datasource. You'll need to add page controls and if your data isn't too large, I would recommend storing all the rows you fetch into your local model in js and then only request server data to get each page/batch you haven't loaded yet. Only the server side, you'll want to construct a server page you can request JSON results from which has parameters for before or after records past a certain primary key number. Each page needs to know its start key and end key. When you request the next page, you request records after the last key in your page. When you request the before page, you request records before the first key in your page. Disabling the before control on the first or after control last page is nice to have. Sorting by column adds additional complexity. Pagination has unavoidable complexity. Using libraries can greatly reduce the amount of code you need to write.
Many thanks! I suppose I could have done a better job googling, but I don't like typing on tablets.
Pre-build some LUT that the pages use, rather than calculate them on demand. Running some SQL batches overnight would solve your performance problem, unless it's international? Compress your data - ensure it's GZIP'd by checking the reply header. Create a JavaScript data buffer, that adds data in blocks, and get the server to send AJAX (compressed) data a block at a time... maybe have a little counter on the display saying "45% downloaded..." If you do it right, you can keep browsing with the data you have so far.
Ah, my Chrome reports "Version 22.0.1229.94 m". It fails with a TypeError on line 361 with `Object #&lt;AudioBufferSourceNode&gt; has no method 'start'`: $("#music-start").click(function () { setupSourceAudio(); sourceNode.buffer = audioBuffer; sourceNode.start(0); // &lt;-- this line sourceNode.loop = true; musicRunning=true; $("#music-start").addClass("disabled"); $("#music-stop").removeClass("disabled"); });
Cache the data and paginate on XHR requests from there? You can create a key value store which you check on every request. Simple timestamp concatenated with ordered query parameters, not counting pagination as the key. 2 years of data as the value. If the same request comes in again before an expiry window (timestamp + 10000 or whatever) pull the data from your key value store of cached data and paginate out of that, otherwise store it. Be sure to cap your cache size so you don't overflow your server storage.
If you download everything and change this to sourceNode.nodeOn(0) it will probably work. The API has changed in the later versions.
oh God if only there were a credible alternative to sibelius/finale that ran in Linux or the browser! that would be the day I could finally be free of Windows forever.
I've solved it now :) thanks for the help. having not written the code, it was odd to see how they handled the commands variable (they changed it halfway through), but I found it and used .toLowerCase thanks for the help!
You already have a good list. Some tips: - Use a lint - read other people's code, especially popular things like jquery, node, etc - Follow Crockford's advice about which features to use and which to avoid, e.g. always use === over ==. You almost never want what == does. Just don't use it at all. He has a lot of tips like that. Javascript requires discipline. You can easily create a giant mess. The language allows it. That doesn't mean you should. I've seen and worked on modular, object oriented driver software written in assembly language. If a clean project and codebase can be done in assembly language, it can be done in javascript.
Or don't follow Crockford's advice and learn the language. Then you can decide which one to use: === or ==, i+=1 or ++i and some other crazy stuff.. Also there're plenty of papers online. One particular source I like is http://dmitrysoshnikov.com/ecmascript/ After you know the language the best style guide is reading source, as snarfy said
this! thank you for making this make sense to me.
Always a good reference: JavaScript: The Definitive Guide
also from ncz: [high performance javascript](http://shop.oreilly.com/product/9780596802806.do)
I had mentioned yesterday to another developer maybe we could do xhr polling, as it was really the only thing I could think of, but I told him I thought it would be a bad idea. And even then, we would need some server side component to be able to spit out results every 100 records or whatever so we can keep going back and build up the full result.
The idea of multiple requests is to get the data a chunk at a time, say 100 records, then another request that gets the next 100, another request that gets the next 100, etc. It's still the same slow load (for the complete set), but at least they get the latest records in 4 seconds, more records in another 4 seconds, more in another 4 seconds, etc. 
A simple little module that does something useful to bridge functional and object-oriented programming. Specifically, create a new object with a series of bound methods pointing at the original object, so these methods can be passed around "naked" by functional-style libraries and still do something useful. The timely pun is probably the most eye-catching part of it. :)
Pass in the needed ids as function parameters, is the simplest solution. For instance the definition of ``imageSlider`` would become something like: function imageSlider(canvasId, audioId, silderId) And then you just use ``document.getElementById(canvasId)`` in your code. If you don't like that (because ``progressBar`` would need the combination of all three of its sub-functions' ids in its arguments list), then you could simply define all relevant ids in an object and pass that single object to your top-level function (and you could pass different id objects for different players on the same page). var ids1 = { canvas: "canvas1", audio: "audio1", slider: "slider1", ... }; function imageSlider(ids) { var canvas = document.getElementById(ids.canvas); ... } imageSlider(ids1); And if you like Object-oriented programming, you could turn all of these functions into methods of the object that stores those document ids, and then just reference them directly with ``this.canvas``, ``this.slider``, etc. Javascript is a multi-paradigm language, so how you organize your code is up to you. That does mean someone completely new to programming could end up writing a mess, though, so it's best to study some single-paradigm languages like Lisp, C, and Java for Functional, Imperative, and Object-Oriented styles, and decide which is right for you and your problem at hand.
I like your implementation but the lack of tests and use of LGPL instead of something more open like MIT leave me a bit apprehensive. For testing, I'd suggest looking at [mocha](http://visionmedia.github.com/mocha/) and [zombie](http://zombie.labnotes.org/API) for your needs. edit: markdown
As the author himself admitted, continuation passing style is similar to how assembly languages work, and we've built constructs on top of that to make it easier to read. But unlike assembly languages, Javascript is very mutable, almost to its very core, so you don't need another language to solve this problem. There are a few libraries to solve this issue, such as [async](https://github.com/caolan/async), [promises/when](https://github.com/cujojs/when), and my own solution [queue-flow](http://dfellis.github.com/queue-flow). Callbacks don't need to be written as nested anonymous closures, that's just the first reaction a user has because they're writing their code linearly with respect to their code's execution. These libraries let you structure your code in a similar linear fashion, but without the nesting, so code reuse becomes more feasible and readability remains high while not blocking the CPU.
I think you're missing what I'm saying. If you can't tell the server give me n results per requests, which you would have to do to make any kind of segmented request work, this is a near impossible task no kind of front end sorcery can fix. The problem isn't your front end, it's your server and how it's loading data.
I've been programming in JS for 7 years, and still learned a good deal from [Javascript patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) 
Thank you, how would the HTML for those functions look?
The what? Oh, I see you're using the old ``onsomething="javascript_code"`` attributes in your HTML. Don't do that. document.getElementById('someElement').onClick = function(event) { // Your code here }; Then you can simply make part of your code's initialization step attaching all event handles to the relevant ids provided by the user of your code.
Signals sound very similar to custom events to me. Sure there's a little cruft when you do it in javascript, but it still solves the major program of an unreadable code structure.
Most books you've got listed are great ones and some mentioned are also very good (Resig and Zakas ones especially). I always recommend the following as good reads to every developer who asks this question. * Even Faster Websites (Steve Souders) * JavaScript Web Applications (Alex MacCaw) There are also some really good general programmer books, whilst not JavaScript specific learning about other languages in general helped increase my understanding about JS. * The Pragmatic Programmer (Andrew Hunt) * The Clean Coder (Robert C Martin) 
I see. I guess that for me, coming over from Java, it was frustrating to find that there were always 10 different ways to do something, and that 8 of them were "wrong" I ready the O'Reilly book, Javascript Patterns and also liked the Javascript cookbook just because I needed a lot of examples.
Agreed, this is awesome. I feel that there's going to be a large collection of videos of us doing really absurd things on YouTube in a few minutes though. With that said, there must be a way to log the information that's being recorded and use it like a broken Kinetic, no?
I call it the flanagan. A must have.
I JUST WANTED TO SEE HOW MY WIENER WOULD LOOK, AND NOW I'M BEING EXTRAPOLATED ON THE INTERNET!
I just get a js alert that says "fail"
Ha, I forgot that the server has to actually process it into JSON upfront - since it's not a streaming format. Another tally in the "con" column. I think the best recommendation I can give you is to initialize the page to a point where you can show a spinner and have the navigation, toolbars, etc. visible, then download the entire chunk of data, and DO NOT render it all at once. The rendering is especially problematic. But then, you've probably already started down that path, and my advice is nothing more than an affirmation that better solutions will be few and far between, if they exist.
Reminds me of the PSEye games, Mezmerize being one of them. Cool job. 
I wish I could upvote the Pragmatic Programmer suggestions more than once. I would add The Little Schemer.
This is awesome. Gonna hook it up full screen projector at a party and have it showing the dance floor. Should be cool, would love to see some more colors involved also. 
Sorry, it's a 2 hours Friday evening coding things. Can't handle all corner cases.
Thanks, If you want you can go look the JS sources. Movement detection happen in the glfx.js custom shader named move.
Use modules. I prefer CommonJS, which is used in node.js, but AMD modules are often used in browsers. [requirejs](http://requirejs.org) supports both of them.
Object literal is a good start. A better way to extend the idea is to use the module pattern: var myLib = (function(){ var privateFn = function(){ // do someThing }; var publicFn1 = function(){ // do something using privateFn }; var publicFn2 = function(){ // do something using privateFn }; return { betterNameForPublicFn1: publicFn1, betterNameForPublicFn2: publicFn2, }; }()); This helps you keep your API clean by not exposing the utility functions used inside your module. There are many more advanced patterns. See more [here](http://addyosmani.com/largescalejavascript/) and [here](http://shichuan.github.com/javascript-patterns/)
I spent way too much time playing with this
I've found that computers do a spanking job of holding javascripts
No argument there; I use AMD for all of my projects, thereby avoiding any pollution of global scope. For libraries, however, I don't want my users to feel forced into using a style they aren't happy with, so I chose the format that lets them export to the global scope if they aren't using CommonJS or AMD. I don't think it's the right choice, but it's not *my* choice to make for them.
&gt; Precompiled Handlebars templates are most likely faster. The JSPerf includes precompiled Handlebars templates.
This isn't quite a fair comparison. templayed.js doesn't support some mustache features, and requires a more explicit scoping of variables. And Handlebars isn't comparable at all, as it has a lot more features. Whether dropping those features is worth the performance boost is another question.
I'm thinking that this is the kind of thing that should be done server side. Now, if for some reason, you still need to do it in JS before submitting the form, just add an even listener on the form. Add an ID to the form tag and use that ID to listen. You'll need another ID to reference the text input. JQuery makes this really easy: $('#myForm').bind('submit', function(e) { var textInput = $('#textInput').val() + 'bacon'; $('#textInput').val(textInput); return true; }); This is easy to circumvent on the user side, so I wouldn't rely on it.
I'm sorry, I feel stupid, I really have no idea what you're trying to do. That said, I'd like to help a bit with your syntax, which might be the only problem you have. First: this is a function. Make sure you call it somewhere so it can actually return a value. var a = ([]); ... should be: var a = []; var sheet = !Games; Games isn't defined anywhere. If it's defined outside this function, you should consider passing it as an argument: function expectedWin(Games) { ... OK, so I assumed sheet was a boolean, because of this: var sheet = !Games; Here you're saying that you "Games" is a boolean (or should be treated as such) and you want "sheet" the inverse of its value. In the "dataRange" line: var dataRange = sheet.getDataRange().getValues(); ... you're treating "sheet" as an object full of things. That's not going to work. Not sure what you're trying to do here: a[k][1,dataRange.length] You defined "a" earlier as an empty array and here you consider that array to be full of values and multidimensional. The "[1,dataRange.length]" isn't going to work, you can put only one value between brackets. Does this help? Did you base your code on another language's syntax that you know better?
Not mistaken in the context of property descriptors. Drop in your favorite console: var o = {}; Object.defineProperty(o, "x", { value: 1 }); Object.getOwnPropertyDescriptor(o, "x"); will yield configurable: false enumerable: false value: 1 writable: false The intent of these defaults, I understand, is that the property is maximally secure: it can't have interesting things done to it just because you forgot to ask for not configurable, or whatever. (Sadly, the same is not true for whole objects being non-extensible.) What you may be thinking of is that if you *assign* a previously nonexistent property, those defaults are true. var o = {}; o.x = 1; Object.getOwnPropertyDescriptor(o, "x"); ⇒ configurable: true enumerable: true value: 1 writable: true 
TIL. Thanks!
Oh, I see. I don't know the API so I can't be of much help. Good luck! BTW, if you use 4-space leading instead of 2, your code will be formatted as code in the post. 2 is for reply formatting.
No problem! Sadly my knowledge of the context stops there :(
Never heard of lovely.io, but I'm checking it out. Thanks for the link!
So old... They provided patches for this years ago.
Get rid of the new line on line 44. Put it in jsfiddle.net for us
Go to: http://www.jslint.com/ and paste your script in. Fix all errors that it reports back to you. There's a bunch in the script. Also JavaScript is case sEnsitive. Your function is "Esp" while you call "ESP" on your onclicks. 
I'd suggest using the DOM more in your script -- your eventlistener can get the "value" of the selection -- &lt;form id="my-options"&gt; &lt;input type="button" value="1"/&gt; ... etc &lt;/form&gt; Javascript: var form = document.getElementById('my-options'); form.addEventListener('click',function(e){ var guess = e.target.value; var rand = (Math.random()*10) % 6; if(parseInt(guess) === rand){ alert("yes!") } else { alert("no"); } },true); 
You've simply made some minor mistakes that the browser can't get past. 1) if you call "ESP()" then your function has to be named "ESP" and not "Esp" 2) to compare "guess" and "num" use "===" and not "=" which actually sets "num" to be the value of "guess" (the two numbers would always match this way) 3) you must end every "var" declaration with a semicolon ";" 4) you must end every action (in this case: alert) with a semicolon ";" 5) you must end the function with a semicolon ";" In your HTML Use "src" in your &lt;script&gt; tag not "scr" and close "&lt;h1&gt;" with "&lt;/h1&gt;"
I don't think you need to know anything besides primitives and objects. But you should know that things like Strings can be primitive or object. var a = String("test"); this is a string var b = new String("test"); this is an object That goes for String, Boolean and Number I believe. Also, there is no clone. There is cloneNode for dom objects. Most libraries have a clone and depending on the library they may only clone dom elements and you will have to tell it whether or not to be a deep clone.
This bot really annoys me, this guy have aimbot, seriously... But the coding is nice, pretty quick and simple responses. It would be nice if there was some sort of trail for your ship so you know where you are with ease, also, I find myself lost outside the screen a lot when I spawn, but I guess that ok for silly game :p Great work with the data handling, looks seamless and nothing teleports around, that's pretty cool!
Ok, yes I was wondering about strings. So String, Boolean, and Number can be a primitive or and object? Thanks, I'll have to keep that in mind.
Thanks for the suggestions. Will definitely play around with a trail and fix the screen size problem somehow. Might need switch to canvas instead of dom elements...
Yes, they can be either. And as kenman pointed out, if you have a string, number or boolean primitive and you try to access an attribute of it as if it were an object, javascript would coerce it temporarily into an object. var a = String("test"); a is of type string var b = a.length; a is temporarily coerced into an object to get the attribute typeof a; a doesn't stay an object, here it is a string.
That is handy! The attribute concept does seem to simplify things.
god, why don't you go play with your dick?
... well fought, anon2.
&gt; The fact that a language is flexible does not mean it is nice to use. The colloquial expression is that it's a "Turing Tarpit." As Alan Perlis famously explained, a Turning Tarpit is a place where *Everything is possible, but nothing of interest is easy.*
Very nice :)
Very cool stuff! But why Dropbox? Get a github account, or even just a blog and put it there. Easier to share, longer lived and no worries about quotas.
Will do!
Except the compile step is done in the loop so it's not exactly doing all that much good. 
Added a chat. Type "/name CrimeInBlink47" to change your nickname.
My only regret is that I have but only one upvote to give. Thank you. That explanation worked wonders. "You're asking the user nicely" when using front end validation, is the best piece of advice to come from this thread. This really helped me, thank you. Also; should I end up using the front end validation anyway...is this about right? &lt;script language="JavaScript1.2"&gt; function check_spam(){ var regex=/[Hh][Tt]{2}[Pp]\:\/\//; //regular expression defining HTTP if (document.myform.myinput.value.search(regex)==1) //if match failed alert("Please do not paste any links inside the form.") } &lt;/script&gt; 
That won't work because AFAIK *search* doesn't take a *regex* object as a parameter. You'll need to use: if (regex.test(document.myform.myinput.value)) { } Also remember that front-end or back-end isn't *either...or*. You can use both -- which makes your site more user-friendly and decreases server traffic/load -- but you just shouldn't not use back-end validation.
Alrighty. I am having issues. Like I said, I am not a javascript (or php) progammer. Can you take a looksie at my code over here: http://pastebin.com/A7WyWCzT I'm unsure if I'm even allowed to do what I did there, but it seemed right! Evidently, it's not. Thanks for any assistance, I really appreciate it!
http://paperjs.org/
nice game, but I was hoping you would provide some src also
I'm just curious how you do server side synchronization with clients. is server master that handles the overall state of the game? is there some dead reckoning involved? I'm interested cause I have zero experience on multiplayer games and I'm keen to learn new stuff
This is almost memoization, except you're generating the object each time and then possibly throwing it away if you decide that it's been created once before. You use the arguments of the constructor to determine the hash, which in turn determines whether or not the object has previously been created. So, even though your params are all that's needed to determine if the object has already been built, you go ahead and create the object and _then_ check for a pre-existing instance. With memoization, you could compute that exterior to your ctor, which would give you the advantage of not creating objects that you might turn around and throw away on the next line. I realize that you're actually trying to demonstrate something else, but the parallels are too great to ignore, and if your constructors are expensive, then the savings can be huge. Here's an altered form of your example, but applying memoization (and yet keeping canonicalization): function Card(rank, suit) { if (ranks.indexOf(rank) &lt; 0) { throw '' + rank + ' is a bad rank'; } if (suits.indexOf(suit) &lt; 0) { throw suit + ' is a bad suit'; } this.rank = rank; this.suit = suit; } Card.prototype.toString = function () { return Card.hash(this.rank, this.suit); } Card.hash = function (rank, suit) { return '' + rank + suit; }; Card.factory = function (rank, suit) { Card.cache = Card.cache || {}; var hash = Card.hash(rank, suit); return (hash in Card.cache) ? Card.cache[hash] : (Card.cache[hash] = new Card(rank, suit)); }; And then: &gt; Card.factory(4, 'S') === Card.factory(4, 'S') true I also like that this pulls the unrelated caching/hashing code out of your constructor, and that it also creates it's own `hash()` function which isn't just interwoven into unrelated logic.
Can you explain briefly what the utility of the b(a,b,c) function is?
I like that this is done without external libraries, more math to explore. I think the lookup tables might be a naive pre-optimization. Why arbitrarily choose 1/360 of the arc when you're actually dealing with a ratio of 1:2π? Maybe a typed array would be good for this kind of table?
I was just thinking the other day how memoizing the trig functions was a thing of the past... ;)
Great comment. The HashLife implementation mentioned uses this technique, there is a method for retrieving the object from the cache, and if it isn't in the cache, a new one is generated and added to the cache. Generation is expensive in HashLife: Squares are represented as QuadTrees, and generating a new 16x16 square in the worst case creates four new 8x8 squares, sixteen new 4x4 squares, and sixteen new 2x2 squares (there are 64 2x2 squares in a 16x16 square, but only sixteen possible unique 2x2 squares).
As pointed out at the bottom, without weak references I think this approach is generally impractical. Most of the time you can either enumerate all possible objects ahead of time which leaves you with an enumeration, which you should do instead of interning (i.e. the Card example); or you risk running out of heap as your cache fills up with the innumerable amount of objects you need. 
i use requirejs/backbone/jquery/underscore alot on my projects and i love it, the shim support in 2.0 works great (since backbone and underscore dont support amd) although i did have a tricky time getting it working originally but after that its been smooth sailing.
It returns ( *a*+(*b*-*a*)**c* ) as you can see and it's equivalent to ( min + (max-min) * perc ) so the explanation is *a* plus the distance between *a* and *b*, multiplied by *c*, which is a number between 0 and 1 representing a percentage. An example: b(100,300,0.5) returns the middle between 100 and 300 (200). b(100,300,0.1) returns (10% of (300-100)) plus 100, which is 10+100. C is a percentage (usually named T (time) for bezier curve calculations), *a* is the start point and *b* is the end point. Edit: Bézier curves can be drawn by getting a percentage of all lines you can create with the original points you are given to get new points, then, taking the same percentage of all the lines you created with the new points and getting other points and so on until you find the last point, this last point you can draw in your canvas and, by drawing enough of these points in the canvas, you get a Bézier curve.
CoffeeScript is off-topic. This sub isn't about JavaScript the compiler target. It's about JavaScript the language (see side bar). You don't see Java, Python, Lua, Dart, etc stuff here, do you?
Great work! Would enjoy the source if you feel like posting over at [github](http://www.github.com).
While it is certainly debatable whether or not discussion regarding compile-to-JavaScript languages like CoffeeScript belongs here in /r/javascript, I embrace it. I don't think it's appropriate to place CoffeeScript tutorials, no. So this link, in my opinion, is off-topic like you said. However, I see no harm in posting comparisons between compile-to-js languages and such material that is directly related to JavaScript.
I don't think you know what [Geometry Wars](http://www.youtube.com/watch?v=LcN3uvXbCIM) is.
I keep tea-bagging the other living people. For some reason my live person is faster than others.
Cool, it was just on my mind as I recently made a function [to make this painless in php](https://github.com/k3n/PHP-Memoize/blob/master/memoize.php), not that it's hard to do but it was fun to write. Re: canonicalization specifically, I liked the article -- shows the great utility of `toString()`.
&gt; Yes, we can, via a(), so it’s not collected. How about this one? var a = function () { var smallStr = 'x'; var largeStr = new Array(1000000).join('x'); return function (n) { return smallStr; }; }(); &gt; We can’t access it anymore and it’s a candidate for garbage collection. * * * How confident is the article about this one? At least in the presence of `eval`, this is not true. function foo(x) { return function() { return "x = " + eval('x'); }; }; Now look at the output of this, foo(10)(); It's `"x = 10"`. Lexically, `x` is not referenced anywhere in the enclosing function but I'm still able to access it in the closure, meaning it's *not* eligible for collection. My guess is that this is merely due to the presence of a direct `eval`, but I'm not certain about that. 
&gt;Globals are cleaned up when you refresh the page, navigate to a different page, close tabs or exit your browser. Function-scoped variables get cleaned up when a variable falls out of scope. When functions have exited and there aren’t any more references to it, the variable gets cleaned up. So does this mean you should wrap browser extension code in a function?
Most compilers jump down to interpreter mode or first-level compilation when there is an eval. They automatically assume it can't be optimized and don't even try to. I can find some refs when I'm not on my tablet, if you'd like; just let me know if you're interested and I'll go hunt down the sources for that claim.
I think he was just giving examples, not an exhaustive list. I only have experience with Chrome extensions, but Chrome's background processes can close for a number of reasons - because the browser closes, automatically for non-persistant processes, and manually via `window.close()`.
I appears to me that test is comparing apples to oranges... Of course creating a dummy "stupid" property and then deleting it is slower than not creating and deleting it! Creating two identical objects, and using delete on one, and assigning null on the other would've been a more even test, I think.
I hate it when I have to program around hidden features. Setting and delete-ing keys on a dynamic object should not have obscure effects depending on how they implemented it using hidden classes. It's an elementary language feature ffs. Should we just let keys with null values accumulate in our maps in fear of a Chrome specific feature and test the shit out of null values? How do I store a null value then? Blaagh.
Nope, sorry, haven't had enough players at the same time D:
Don't be so mean to him D: He likes my game, and that's all that matter :D
Mjah, true, I like speed as well but I don't like that it's doing hidden stuff. Feels like magic: if it works better with classes then why not use classes in first place? Let the programmer specify what's a member property and what's dynamic. I like thing to happen in the code, where it's shared among runtimes. But change is happening already, with Dart and the new EMCA specs having type and class support.
What are you running on the server? Is it also javascript? Do you send it through apache or nginx? I'm just curious. I'm thinking I'm going to try using socket io for the collection of real time statistics and graphing (network and cpu usage graphs). It seems like the latency here is above anything I would need.
In your test, you expect `This'` to tokenise to `This`. Whilst "this" isn't a good example, having a lone apostrophe at the end of a noun phrase is valid: e.g., "This is Chris' cake." should tokenise to "This,is,Chris',cake"... Maybe I'm just being grumpy because I can't get this one (and I don't have any cake)!
I have no idea how this is played. xD
It's things like this that make time move backwards.
I think that it is fine with the apostrophe removed - it is still the word, and they're just keywords.
Revealing Module Pattern. [My discussion of why](http://lpar.ath0.com/2012/03/22/javascript-module-patterns-and-code-size/).
No. Worked for me on Kubuntu 12.04.
I'd suggest a different name. * [usejs](https://github.com/jaubourg/usejs) by jaubourg * [use.js](https://github.com/tbranyen/use.js/) by tbranyen And there's probably others...
This isn't 'Nam, Smokey. There are rules.
If you consistently set properties to undefined instead of null, you would only have to check for undefined, right? (I chose undefined because it is the fastest way according to the other test). I agree with your statement about readability. I only opt for less readable code when there's a bottleneck involved, often with a code comment to explain why.
The zombies ate our instructions! We have to do what's necessary, sir!
AMD's comma separated dependencies are better than a single string with whitespace separation. This doesn't seem to export modules explicitly. How does it work with files? How is it deployed? 
&gt; jQuery (no plugins) I don't think you know what that means... /*! * jQuery Cycle Plugin (with Transition Definitions) * Examples and documentation at: http://jquery.malsup.com/cycle/ * Copyright (c) 2007-2010 M. Alsup * Version: 2.9999.6 (11-SEP-2012) * Dual licensed under the MIT and GPL licenses. * http://jquery.malsup.com/license.html * Requires: jQuery v1.3.2 or later */
I like the consistency across the metaphor. Also, I **love** juice boxes.
I think the readme is ready :D
Hum, this one is hard. The comma tells me that one should use the *g* flag with the replacement containing a comma, but the standalone "Hello--" replaced to "Hello" prevents putting a comma in the replacement… I'm curious for your solution, apart from using multiple replacements or a replacement function, I don't see it.
Isn't that just Windows 8?
They'll have to give me a compelling reason to support it.
I would say that what is going to add up is a poor and difficult to maintain software design if you optimize your code that way before seeing a performance problem and profiling.
Unfortunately different browsers pass your code event objects with different fields, so you have to work with the lowest common denominator, if you can figure out what exactly it is. 
My first reaction was similar (and I let the IE guys know all about it too). Over time, having worked with both in real projects, I've realized that this is a better approach -- especially to unify input events in the long term. Once you've used this instead of trying to support mouse, touch, and sometimes stylus all concurrently, it's a no-brainer.
You should follow how standards are being formed these days. It's not simply by committees anymore. You see a lot of developers and browser vendors implementing their own specs, letting developers try out, making changes, and getting it standardized across platforms.
Yeah. I agree with this based on principle, however, Visual Studio 2012 does a lot of this. With the 'intellisense' implementation, there was one oversight: because javascript code are silo'd in JS files, and included in the html, you get incomplete or erroneous intellisense, which could hinder you more, than if you looked up the function and its arguments.
If that is your goal, why do you include quotation marks in with the keywords?
Like marketshare? Good luck with that, with surface..
Reason #9624 no one should be using IE.
http://www.w3.org/TR/touch-events/
They turned off comments pretty quick, didn't they?
It is a candidate recommendation. Candidate recommendations are signed off by all members of the W3C. Members of the W3C include Microsoft, Mozilla, Apple, Opera, and any other browser vendor you can think of. If you aren't following the W3C for how browsers are supposed to work, who are you following? Everyone else is.
It's not free, but have you looked at [WebStorm](http://www.jetbrains.com/webstorm/)?
I agree webstorm is the best javascript IDE that I have found. My .Net developer friends even use it when it comes to writing JS web apps over Visual Studio. The price for a personal license of webstorm is very reasonable and should be within the budget of most. Best part is since it is written in Java it is available for any platform. I also find the nodeJS plugin to be very helpful for server side javascript applications.
Candidate recommendations are not "signed off by all members of the W3C". Any citation to back up that statement from the [W3C Process](http://www.w3.org/2005/10/Process-20051014/) document is welcome — Candidate recommendations are published once the working group (and there is no WG within the W3C where all Members are members) believes the specification is ready for a call for implementations, often done without unanimous consensus within the WG. The only time when the W3C Members as a whole approve the technical report is immediately prior to advancement to Recommendation.
That has been a requirement for almost a decade now, and has led to a lot of angst from web developers (HTML5 not "done" till 2022, CSS 2.1 only "done" last year, etc.).
It also works [equally well in Firefox](http://caniuse.com/#search=touch) actually. Also, please note that a standard is not a monopoly, because everyone can adhere to it.
About a week. A lot of blogs automatically close comments after a week or so to avoid spam.
Are you sure this is possible in javascript? I don't know how javascript's regular expressions can insert commas into some, but not all, phrases they match. For example, how can a single JS regular expression transform "`a test`" into "`a,test`", and "`'a test'`" into "`a test`"?
IE6 used to be the de facto standard. If we put WebKit/Mobile Safari's APIs in the same position, we're just repeating history all over again.
Microsoft turns theirs off as soon as it turns against them.
I played with WebStorm a little while ago. It's a great IDE, although when I last touched it it was unable to identify, for example, the type of object that was going to come down a websocket connection. Has this been addressed?
I'm not against the comments based approach, although there are other potential benefits of using a function (like type exceptions). Also, it's probably just me, but I often find heavily commented code difficult to read. I agree that the 'don't touch the object prototype' rule generally a good one. Sometimes it has its place. The link you provided doesn't mention that you can 'hide' the properties you add to a prototype just like the default properties of the object prototype are hidden. Further to this, if the 'as' function was configurable/renameable, the risk of overlaps with other libraries could be mitigated.
He's presuming that PointerEvents could come to the other three browsers in the future, if everyone who has to do both now decides MS did it better.
I just looked at a few of the previous IEBlog posts. They all have comments disabled within a similar timeframe, regardless of the tone of the comments (the others I saw had mostly positive comments). I don't think you're onto something there.
I wasn't able to fully explore the program before my new laptop broke (It turns on but it won't boot, no video (onboard or external), fan, hdd light comes on and stays on after a while.)
You're looking at the short-term side effects of the evolution of these specs. What I'm saying is that instead of relying on a standards body like the W3C to solely decide on what technologies we can implement in browsers (remember of the slow progression we saw between HTML4 and HTML5), we should let the browser vendors and developers innovate by developing features and eventually standardizing them once we all reach a consensus. Look, no one is forcing you to use the TouchEvents that Microsoft is proposing. If it ends up being a difficult-to-use feature, developers won't use it and it'll eventually die out. Alternatively, if it turns out to make things easier for all of us, other browser vendors will take notice and subsequently implement and we all benefit. Browsers are where you're seeing the innovation happen due to competition, not the big standards bodies. HTML5 and CSS3 are two very good examples of this in action. The difference between the old Microsoft way which was to implement proprietary features without providing a spec is that they (as well as Google and Mozilla) are more actively working with the standards bodies to ensure that these features get standardized and spec'd out.
Out of curiosity, what is your take on this Mr(s). Opera Employee? Do you think pointer events are better? Are they likely to become a standard in other browsers?
You can't have it both ways. If you support the idea of de facto standards, then do you also think that Netscape (and Firefox later) should have just been team players and implemented IE5-6's de facto standards? Otherwise, surely you can see how [WebKit is becoming our new IE6](https://www.google.com/search?q=webkit+is+ie6&amp;oq=webkit+is+ie6). Apple's (patent-burdened; not well-suited to be a standard) touch events API is fine for multi-touch, klugily workable for mouse events, but not at all suited to pressure-sensitive stylus input. Windows has long had deep support for digitizer-based stylus input. In fact, the Surface Pro ships with one. It should be obvious why they've decided to create a more robust standard instead of emulating Apple's API and trying to shoehorn incompatible data into it.
Well, it's trivial simple to polyfill (though that's not exactly the right term in this case) the TouchEvents API onto IE's more comprehensive API since IE's is a superset of Apple's. There's a tiny library on GitHub to do that.
BUT! **What happened to abstraction layers!?** Touching, pointers!? What the hell?! **They're *Position Input Events!* PIE's.** You can have two PIE's moving relative to each other - multi-touch. You can have PIE's oscillating - click, double click, triple click and so on. You can have PIE's oscillate and translate - Click and drag, double click and drag... or touch and drag........ What happened to all the Software Engineers who knew about this stuff? ##Fuck it - I'll write an abstraction jQuery plugin that does it. It will be called jQuery-PIE.
Why are we even talking about pointers?! http://www.reddit.com/r/javascript/comments/12qyzj/ie_still_reinvents_its_own_standard_doesnt/c6xnw3i
IE 9 is something like 5% market share. ALL IE's make up 16% - http://www.w3schools.com/browsers/browsers_stats.asp
Okay. You say "foo.as(Bar)"... then what? "Bar" can be anything.
As much as I want that to be a reality, that is only traffic going to w3schools, which is a highly flawed sample. I'd suggest checking out Ars Technica's stats which sources from a far broader sample of users. [ars stats](http://arstechnica.com/information-technology/2012/11/firefox-dips-below-20-percent-chrome-falls-internet-explorer-gains/)
Selecting an execution context for the javascript file would probably allow that to be solved. The execution context could be inferred, and type inference could run from there. I can easily imagine an IDE looking for a reference to the open .js file and working out that it was most likely going to be called by a page which also referenced another .js file.
What's your definition of "execution context"? &gt;The execution context could be inferred From what? &gt;type inference could run from there How so? You don't know what other scripts have already run at this point. You don't know what anything is. You know some primitives. "foo" is a String. 5 is a Number. [...] is an Array. {...} is an Object. Does a Number have a "length" property? No idea. &gt;I can easily imagine an IDE looking for a reference to the open .js file and working out that it was most likely going to be called by a page which also referenced another .js file. Which other js file? How could an IDE know about that? [In Dart, this is simple. There is a "main" (=one clearly defined entry point). I include the "foo" library, which has a "bar" class which has a "baz" method. I can tell that this "bar" instance came from that "foo" library and I also know which parameters it takes and what kind of thing it returns. I can also jump to its definition. There aren't any ambiguities or unknowns.]
&gt; From what? The same way a human would infer it. Perhaps it would look for requires() or &lt;script&gt; strings within text files that are *near* the currently open file. In many IDE's you open a 'solution' and then open an individual file. This helps things along too. The real question is probably... "if you can infer the calling files, you can probably identify calling functions, and build the intellisense tree without the proposed as() function"
I haven't used this in *that* slide show
Microsoft will lose billions of dollars if the web platform really starts competing with the Windows desktop platform. As long as the web platform has compatibility issues like this, that makes it less attractive to developers, and helps maintain Microsoft's position. So I have to assume that the reason Firefox, Chrome, Safari and Opera does it one way while Microsoft does it a different way, is, once again, those billions of dollars.
Ok, so far I've got 7 downvotes on this, but still no constructive feedback. I made this loader to have an easy way to work with separate files instead of have everything in one single file, but still be able to write the code the way I like. Sure I could use require.js or something else, but with use.js I can just split everything up, with no requirements how to code the modules (some features, like caching, need a name space, but it's not mandatory). The async stuff works well in a live environment too, so often there's no need to combine the modules in production (depending on type of project).
I was prepared for the worst when I submitted the link. :)
Yes, both Nodejs (using it's [net](http://nodejs.org/docs/latest/api/net.html) module) and extensions in Chrome (after turning on *Experimental Extension APIs* under [chrome://flags](chrome://flags) ) can create or listen for tcp connections on arbitrary ports.
isn't anyone concerned about the security implications of this ?
Android/iOS's default browsers both use WebKit. When people use actual standards I have no issue, but many use prefixes in abundance, esp. on mobile: Mozilla are currently having issues with unprefixing breaking sites... again. And that's with keeping the prefixed versions!
Thank Apple and patents for that.
Me Gusta! Keep up the good work!
That doesn't make sense since the pointer API is also used in Windows 8 "Metro" apps on the desktop too. They just needed a more robust API that makes sense for touch, mouse, and stylus input instead of just touch input.
I have no idea about that community - but there's no harm if you were to ask them about it!
I started thinking about using it to debug and profile my nodejs applications. Chromes tools to do so are top notch and are available at the click of a button. Not being able to run c++ node modules is a snag, but its a step in an interesting direction.
You messed up the `&lt;body&gt;` tag in line one, for starters.
you spelt prompt wrong on this line: hoursWorked = promt("Enter the number of hours worked:",ES); Also there's nothing calculating net pay
OK. We can get it working, but it's in a pretty awful style. You're not seeing anything because you misspelled the word 'prompt' Fix that, and your program will work -- mostly. At the end, your net pay will be listed as undefined, because you've never calculated it. That's a pretty easy fix. Just because the style really bothers me, I've added a more modern (still not perfect) variation. I still didn't manage netPay, because you should do some of this yourself. Also, I suspect it will be quite obvious to the instructor that you got help if you turn in my code. I provide it only for comparison purposes... &lt;!DOCTYPE HTML&gt; &lt;html lang="en-US"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;payrollB.html&lt;/title&gt; &lt;script type="text/javascript"&gt; function calcPayroll(){ //Declare Variables var grossPay; var netPay; var hoursWorked; var wageRate; var tax; var overtimeRate; var overtimeHours; var taxRate = 0.15; var wageRate = 15; var overtimeRate = 20; var BR = "&lt;br /&gt;"; var text = ""; //create a variable for output output = document.getElementById("output"); hoursWorked = prompt("Enter the number of hours worked:"); hoursWorked = parseFloat(hoursWorked); //Caculate gross pay. grossPay = hoursWorked * wageRate; //Caculate tax withoholding. tax = grossPay * taxRate; //calculate net pay here.... //Display calculation. text += "Paycheck:" + BR; text += "Hours Worked: " + hoursWorked + BR; text += "Hourly Wage Rate: " + wageRate + BR; text += "Gross Pay: " + grossPay + BR; text += "Taxes Withheld: " + tax + BR; text += "Net Pay: " + netPay; output.innerHTML = text; } // end calcPayroll &lt;/script&gt; &lt;/head&gt; &lt;body onload = "calcPayroll()"&gt; &lt;h1&gt;Payroll Calculator&lt;/h1&gt; &lt;div id = "output"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; There's some sloppiness in your HTML. As another reader pointed out, there's an extra brace in the body tag. It's also quite strange to put JavaScript code in the body. I think you were told to do this to make the document.writes work (which is another technique that was abandoned long ago, for good reasons.) These days, the accepted way to modify a page is to change the innerHTML property of a page element. Also, that PA constant is really strange. Paragraphs should be a container, and using a paragraph as a one-line element is really missing the point of HTML. If this is what your teacher gave you to work with, that's what you have, but you're looking at a really limited way to do JavaScript. EDIT - formatting....
The matching require.js code is not actually much more difficult, except for the fact it would be split among multiple files. For instance: NewModule1.js: define(function() { function newMethod1() { // .... } return {newMethod1: newMethod1}; }); NewModule2.js: define(function() { function newMethod2() { // .... } return {newMethod2: newMethod2}; }); main.js: define(['NewModule1', 'NewModule2'], function(NewModule1, NewModule2) { console.log(NewModule.newMethod()); console.log(NewModule2.newMethod()); }); or, if you prefer one import per line: define(function(require) { var NewModule1 = require('NewModule1'); var NewModule2 = require('NewModule2'); console.log(NewModule.newMethod()); console.log(NewModule2.newMethod()); }); Simple enough.
Again, can you provide an actual example? I learn better when I can see how something works in actual practice. I don't understand how you can prevent scrolling before it can even determine the direction you're moving. I thought that once you put your finger down, it would have to either be in default scroll mode or be detecting a gesture.
Thank you SO much! I'm working on an MSIS for the library field, and I think that this class is mostly so that future librarians can put "java" on a resume and never use it again. I, personally, feel that a knowledge coding is essential to the future of my field, but it feels like the text book I am using is... rigid and antiquated. I really appreciate your help, I feel like it has helped me get to the base of the issue!
Have you asked the guy who submitted it for his solution?
I know that not all the browsers support it yet, but have you thought about using WebSockets to do the same thing on the client without Node? https://developer.mozilla.org/en-US/docs/WebSockets (disclaimer: I haven't looked to see if you are using it if available...)
It does use websockets if they are available in your browser. If not, it falls back to either a flash socket or basic HTTP polling. (All using the socket.io project) Websockets are not raw socket streams unfortunately so they cannot connect directly to the IRC server. 
Just did.
That's true, I hadn't thought of that. Interesting stuff.
That's another way that Windows 8 "HTML5" apps won't actually be HTML5 and will break compatibility with the web platform, which is one of the main goals of Metro apps. The strategy's three phases are:[11] Embrace: Development of software substantially compatible with a competing product, or implementing a public standard. Extend: Addition and promotion of features not supported by the competing product or part of the standard, creating interoperability problems for customers who try to use the 'simple' standard. Extinguish: When extensions become a de facto standard because of their dominant market share, they marginalize competitors that do not or cannot support the new extensions. http://en.wikipedia.org/wiki/Embrace,_extend_and_extinguish
ok. Glad to help, but one more thing... Don't call this 'Java.' That's an entirely different language, despite the similarities of the name. You could certainly say 'JavaScript' or 'Programming' - at least at a beginner's level. If you want to know more, let me know and I'll tell you about one of my JavaScript books. (I've written a couple...)
I like this one: https://github.com/borismus/pointer.js It doesn't patch the Apple events into IE10, but if you use its normalized interface then you can handle events from a range of devices and input types.
No problem. Good luck with future revisions!
It doesn't give you anything in IE10. Look at the pointerDownHandler: - https://github.com/borismus/pointer.js/blob/master/js/pointer.js - https://github.com/borismus/pointer.js/issues/2 
Reporting in with a WordPress success.
&gt; This argument feels a bit fallacious to me. I'm don't think I'm arguing anything. This is what's happening and how HTML5 and CSS3 have largely evolved. &gt; IE supports PointerEvents and the other major browsers support TouchEvents Untrue. In the post you linked to IE10 supports both. &gt; though using a "beta" prefix rather than vendor-specific one makes a lot more sense from a developer sanity POV. It would seem so, until you run into a case where there are two competing specs. See Mozilla + Opera vs. Google with CSS gradients. We could have ended up with this: background: gradient(linear, left top, left bottom, from(#00f), to(#fff)); But instead they competed and we got this: background: linear-gradient(top, #00f, #fff);
Looks great. Your next step should be to add WAI-ARIA for users on assistive technologies. I was thinking of writing an accessible IRC application but would be very willing, instead, to provide guidance on integrating ARIA into this.
I did check whether it worked… but I was tired at the time so I didn't do it properly. It should be solvable in its current form, though!
For the challenge!
I believe IE10 only supports Pointers. The reason I linked the article was to show that. It's MS evangelism's guide to cross-browser portability. I agree that we need space for competing standards, but vendor prefixes are the wrong approach. We should name the different APIs (maybe after greek letters or version numbers - doesn't matter). Then, you wouldn't have to duplicate the same line 4 times to get each browser to recognize the same rule. webKitRule: 1, 2, 3, 4; mozRule: 1, 2, 3, 4; oRule: 1, 2, 3, 4; msRule : 1, 2, 3, 4; is dumb. This is better: betaRule: 1, 2, 3, 4; gammaRule: "one, two, three, alternate syntax"; then all the vendors who support the beta proposal implement that, the ones who support gamma implement that, and they all support the one that wins when the dust settles and the prefixes fall away.
Do you mean via https://kiwiirc.com/client or connecting to an SSL IRC server which is done by clicking the SSL checkbox - under the 'more' link?
I mean between the browser and the IRC server. Although, you might be doing this via WebSockets/Flash, I haven't looked at your code yet.
This is something I've been thinking about implementing. We've just been trying to get things ironed out generally first, though.
Nice, 5 monster-kills in a row!!!
Great stuff. I've submitted a patch and some tickets for you ;)
Yep, lookbehinds would have been extremely helpful. Good job!
Nice one. I think you're the first to successfully complete it xD
XDCC? 
Not sure there is anything here that hasn't been solved already by the legions of script loaders already available - http://microjs.com/#loader Also, I think loading modules via Ajax is a method that isn't bulletproof http://requirejs.org/docs/why.html Good effort though :) 
jQuery is a powerful library, but it is not a replacement for Javascript. It is meant to be used alongside JS in order to facilitate operations that would otherwise be too tedious, mainly because browser differences. Its strength lies in ease of use, but not in performance. Each time you do a $('selector') call, jQuery is basically roaming the whole DOM to find and return items matching your selector. This is time-consuming if abused, and is especially noticeable when you are working with content-heavy pages. It is best to store the result in a variable and then use that variable to perform operations on. To do this, you have to use JS. Also, while jQuery is great at many things, there are myriads of situations where it is not applicable. Even in situations where a jQuery solution is possible, there is almost always a smarter, and more performance-savvy way of doing the same thing using mostly plain JS. It's ok to use jQuery, even heavily, but knowing JS will help you understand what exactly jQuery is doing for you, and what goes on under the hood. By the time you gain an understanding of this, providing a more performing, mostly JS-only solution will come naturally to you.
You were downvoted because of the concept of 'Vanilla JavaScript'. JQuery IS a libary made and used with basic javascript, not some enhanced version of it. New languages that are processed to JavaScript code are different thing, coffeescript for example. 
To try and come up with an analogy (Hope that's the correct word), that's like saying I want to be a mechanic, and have been working on a car assembly line so I should be fine, sure you can tack stuff together, but you don't really know what's going on, or why certain stuff is happening and if you want to customise anything complicated you are walking into a mine field. Taking the time to learn Vanilla JS will really pay off in the long run, or at-least it did for me, I started with Jquery and was proficient learnt(still learning) js now I can see multiple solutions, have a much better understanding of what is going on, can find and debug quicker etc etc. Good books that can help allot: JavaScript the good parts (bit overrated but still a good book) Pro JavaScript techniques (goes off in a tangent but still good) Some good mini projects (no jquery) -Simple calculator -Slide show -Noughts and crosses game Make sure you take the time to test and debug for different browsers (If you are interested in browser side js) the extra understanding of how the browsers differ + what is actually going on is probably the best learning curve you can get if a little frustrating. Hope my advice helps, and remember its just that advice at the end of the day you just got to do what you feel is right. 
XDCC wouldn't be feasible to implement - but if it were possible to create a plugin that enabled drag-drop/upload that stored it online somewhere temporarily.. with a link being sent to the recipient or many recipients? I don't personally use XDCC but it should be able to enable plugins that do the above if that covers your bases?
OP is comparing apples and oranges. JavaScript is a language and jQuery is a library written in JS. You can't do anything useful with jQuery without knowing JS.
A lot people can do stuff with jQuery which I struggle undrstanding, but they can't understand my "pure" javascript... Wierd, but jQuery is different than just typing what you want instead of what someone thinks you want - kinda.
"[I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.](http://en.wikipedia.org/wiki/Law_of_the_instrument)" jQuery is a library, not a language. If all you need to do is find an element and change a background color, if you can't do that without jQuery, you have to load a massive library to make that happen. If there is something that you can't do with jQuery, you won't be able to do it. jQuery is good for a lot of stuff, but if that's all you know, you'll find yourself constrained by it. // Good question, by the way.
What problems have you been running into? You could always create an *Issue* informing the developer of the problem. **Edit:** Accidentally a word.
I've seen people use jQuery for *everything*, including stuff that didn't involve the browser at all. You have to know where to draw the line. If you're manipulating the DOM (= browser objects), use Ajax, invoke a funtion when the page is completely loaded, etc. by all means, use jQuery. But for everything else, you better use plain Javascript. Besides, am I the only one who thinks the syntax you have to use to make jQuery do anything at all, is actually quite complex? 
When creating a UI that is dynamically generated by something like JSON, you will need to use plenty of loops and conditions. Think about a UI that has a max total of 10 different buttons, but a user has a configuration that should only display 5. You would then loop through all the button options and and have a condition that would only display those buttons that matched the user configuration. for(i=0; i &lt; 10; i++){ if(userButtonArray[i].buttonActivated === true){ addChild(userButtonArray[i].buttonType); } } You'll also run into many occasions for loops and conditions for most types of animation in the canvas element. Tons of great things that you can do with programming UI without JQuery. 
jQuery is awesome. Many other libraries are also awesome. I'm current in love with Twitter Bootstrap. Purists argue that it is inefficient and this is true but investing your energy into sorting out browser compatibility issues when you can concentrate on design is also inefficient. Before using libraries, I coded my own transitions, DOM event triggers, and the like. Because I don't like reinventing the wheel, I ended up with my own "library" of code snippets which I reused regularly. Although it suited my purposes, it was coding in a vacuum with no peer review and limited testing. Having said all that, you will invariably come across a need that your library and related plugins do not satisfy. You'll want to write your own plugin or modify someone else's. For that, you need to understand pure JavaScript or you will be overwhelmed and discouraged. My advice, when time allows, try reproducing some of the same utility jQuery provides in pure JS. Instead of using $.each, try iterating over that array using for...next. Experiment with absolute values, nulls, NaNs, undefined, and see why your results vary when doing comparisons. Familiarize yourself with anonymous functions, call backs, and prototype. Even test different approaches to see how memory is affected. Most importantly, look under the hood of jQuery and see how the sausage is made. You'll learn a lot and code better. 
Best I could do: /['"]?((?!\w+")\s(?!\w+"))["']?/gi ,
i get where you're coming from OP. i take jquery as complexity indicator: if i need something outside of jquerys scope i move to another programming language. the javascript eco system(tooling etc.) is really horrible compared to other programming languages. vanilla js has no usecase for me aside from running jquery. that being said, javascript is fairly easy to pick up. can you programm in another language or is this your first one OP? 
jQuery is amazing. It's probably the single best thing on the internet in terms of usefulness, simplicity, documentation etc. You can absolutely use jQuery to do complex things, you can write entire front end applications in pure jQuery if you want. But you're still going to need to learn programming. You're still going to need to learn how to make HTTP requests, you're still going to need to learn how to iterate over an array, or work with Javascript objects. You can work with the jQuery syntax and make some pretty complex stuff, but you're going to need to understand how to program, don't think it's a shortcut around that. 
If you do focus on getting a really good understanding of using jQuery, your knowledge of JavaScript is going to be rising a lot anyway. You are going to wind up seeing error messages where jQuery code is further up the stack and need to have a good understanding of JavaScript to use jQuery really well. If you find you are making more progress being a productive web developer after 2 months using jQuery rather than Code Academy exercises then I'd recommend focusing more on the jQuery. However I would certainly advocate finding out more about the JavaScript language as I see good knowledge of this as being essential to doing high quality front-end development work. I recommend you have a look at some W3C specifications for JavaScript and related HTML technologies. Also it's worth looking into and understanding the jQuery source code (or at least the parts of it that get used most by code you write).
There is more motivation to learn when you see something as essential. Perhaps some of this boring stuff is not that important right now but you have little idea about which of it is an what is not? I recommend you have a look at Douglas Crockford's work, particularly JavaScript, The Good Parts. It's a short book, and is aimed at a more advanced readership level. You would be able to follow some beginners' exercises in areas where you lack knowledge of what Crockford writes about - but also have an understanding that the knowledge you are picking up in some of the more boring parts do fit into some types of more advanced, and perhaps more interesting JavaScript programming.
You find loops and if/else statements boring? Perhaps programming isn't your thing...
&gt;It is best to store the result in a variable and then use that variable to perform operations on. To do this, you have to use JS. You can do that with jQuery, can't you? $selector = $('selector'); $selector.doStuff(); $selector.doMoreStuff(); Or did you mean something else?
Write something that you will use all the time - like a calendar or something. I find that in development, the stuff that gets most of my attention is the stuff that I use personally the most. Rather than development for development's sake, apply it to some area in your life. Like when you're sitting at your computer late at night, you sometimes get that feeling like, 'man I wish there was a tool that did X'. Note that down, see if it's implementable in Javascript, and build it. Use all the libraries you can, but make sure its completely customized to YOUR needs and I can tell you with confidence that no library will allow you the customizability that the core language (Javascript) will. Some useful places to ask beginner questions to get started or even if you have questions throughout the process are StackOverflow.com, /r/webdev (of course), google (as broad as it sounds), jQuery forums etc. As you go on, you will find yourself going to help forums more and more and you will learn more and more, even things you never thought you would need, you will learn them. Learning something like front-end development is a very non-linear process, and you may find yourself jumping ahead and/or back through loops etc. Just get through the frustrations and keep going. You will eventually get to a point where you know tidbits of information from all areas. But to really get a strong foundation in Javascript, you should get a good book and read it cover to cover. And keep building, don't stop building. Learning by example and by practice is what makes good developers good. You have to have a sense of owning that knowledge, which only comes through applying it and building things. Good luck and feel free to post as many questions as you want!
"Pure jQuery" is a collection of functions that aid you in JavaScript development. You are still using JavaScript, so it is impossible to write something "in pure jQuery" without using JavaScript.
You're getting downvoted because /r/javascript isn't StackOverflow, and because the core question has been well explored and can be read about all over the web. This sort of post dilutes this subreddit as a resource for new and interesting articles. I'm sorry if I'm coming across as a dick. It's good to have enthusiasm and be inquisitive, but your general process if you want to make it as a programmer should be: Try to figure it out yourself -&gt; Read the manual -&gt; Search for existing literature if the manual doesn't help -&gt; Create new literature by asking the question if you can't find any. Going out of order creates a lot of scattered, redundant literature and makes things worse for posterity trying to find the best answer to the same question, and worse for intermediate to advanced devs who use things like /r/javascript for news.
1. How does this differ from [Google's Caja](https://code.google.com/p/google-caja/)? 2. Why did you recreate the parsing wheel instead of using the already tested and vetted [UglifyJS](https://github.com/mishoo/UglifyJS)? 3. What do I get if I can break your sandbox? Also, when I hit the "JS Tests" button it reports 15 failed tests. 
I've worked with several developers who wanted to learn a library like jquery “instead of” Javascript, apparently to avoid learning javascript's complexities. This won't work - it would be like learning to hack the Linux kernel without learning git and C++. Jquery leverages javascript subtleties frequently, like function scoping, closures that create the equivalent of private variables, duck typing, and monkey patching. Further, there are many bases Javascript already has covered well that jquery has no role in whatsoever, like preincrement/postincrement, Math methods, some string methods, a few url parsing methods, and backwards loops. If you try to use jquery for everything, you'll be unable to perform a lot of fundamental operations, and you probably will introduce bugs due to a lack of understanding of what you've written.
Are you looking to build simple web sites or to be a true front end *developer*? If you just want to make some simple web sites with a bit of UI interaction, understanding how to do simple things with jQuery will probably suit you just fine. If you want to be a developer though, it's kind of essential that you actually learn the language you're proposing to develop with. 
you'll never master jquery without having a clue what's going on. ultimately, you can get by just find chugging away at jquery. there are enough libraries and plugins that will do everything you need to do. at the end of the day, some things matter more... like getting the job done. most people care only about the results you produce, not how you got there. learn javascript if you want, learn jquery because you need to. (at least until the next big library comes out)
jQuery doesn't have a syntax, JavaScript has syntax. jQuery is just a JavaScript library. JavaScript is the language. There is jargon (a word library) for computer stuff in English, but you are still speaking English when you use those words and are bound by English syntax and grammar rules.
That's like saying "If sentences are so easy to write, why learn words?"
I never said I want to be a programmer. My goal is to take a beautiful static design (psd) and make that document into a fun, interactive web page. Websites like this : https://lowdi.com/ really inspire me. I was under the impression that a front end developer isn't 'technically' a programmer.
Yeah, `querySelector` &amp; `querySelectorAll` got supported surprisingly fast.
Edit 2 : I don't desire to be a president. I don't find governing any fun, HOWEVER, I do get inspired by looking at presidents and seeing how much people like them. I want to be able to get all the fame and love as opposed to solely being a 'president' in the traditional sense if you understand. Thanks again. Seriously. That's exactly what you're saying.
I'm not the author.
Why do you want asynchronous script loading? I'd recommend using something like Google Closure, or at least the closure compiler.
Exactly? http://diannaeanderson.net/wp-content/uploads/2011/06/sminigo11.jpeg
No offence intended. My basic understanding is that html/css isn't programming. I assumed since these are frontend markup languages that javascript was similar (in the sense that its not compiled or that some sort of terminal isn't used, hence not a true programming language). But like i said, ive been doing this for two months. I have a long road ahead of me, and just like everyone else on this sub i'm going to make mistakes.
Two things on top of what everyone else has said; jQuery isn't always what you want to do in the browser. Second is that jQuery doesn't always fit the solution very well. For that it might be that you only use a tiny percentage of jQuery, so no having it as a dependency, or it might be that jQuery doesn't fit the model of your application.
&gt; No offence intended. I know, I was being a bit tongue in cheek :) You're right about HTML and CSS not being programming languages. They're markup languages, and as such they won't be able to "do" anything; They just describe to a browser how an element looks. Javascript, however, is a programming language. You can use it to calculate 1 + 1, or the 512th digit of Pi, if you will. You can use it to write a 3d engine and do collision detection, you can write a chat server and client, and basically anything else you could come up with. The cool thing is, Javascript can do all that *with* or [*without* a browser environment](http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions). The fact that it's (usually) not compiled doesn't make it [any less of a programming language](http://www.php.net/).
 &gt; Bulk operations, they can also be a performance trap, but with raw DOM you'll have to manually iterate that shit, no selecting half a dozen elements via CSS and trivially setting their color or whatever. Well at least `querySelectorAll` returns a native `Array`, not a fucking `NodeList` [`querySelectorAll` actually does return a `NodeList`](https://developer.mozilla.org/en-US/docs/DOM/Document.querySelectorAll), sadly. I still don't understand why `NodeList` has such a useless prototype. Anyway, it's often handy to make a little helper function to coerce it into an array, e.g.: var $ = function(selector) { return [].slice.call(document.querySelectorAll(selector)); }; Then you can do stuff like [this](http://jsfiddle.net/mkantor/SWajP/1/).
When I first started with JS, much like the OP, I started with jQuery. I wanted to do a few show-hide things, some tacky fade and slide animations to spice one of my first designs up. I have had previous programming experience (mostly as a hobby) but I did not know how powerful Javascript really was. It was back in the days of jQuery 1.1, when I had first seen it explode on the web and I thought that was all there was to front-end programming. So I started making gargantuan mistakes, using jQuery for the simplest of things, which could have been done much more elegantly with plain JS. After a while, I gradually started to understand javascript better, and now I only use jQuery for what it's meant, and am enjoying writing in plain javascript more than ever. So, yes, the $('selector') use I mentioned, had to do with not abusing jQuery like so: $('#GalleryNav').css('display','block'); $('#GalleryNav').fadeOut('slow'); $('#GalleryNav').next().css('display','none'); (real 'code' from that first project).
Hmm, yeah you're right. I'm pretty sure the one I've used in the past *was* called pointer.js. Probably a too-obvious name for something like this, with several different efforts under the same name. I'll try to dig up the one I'm thinking of and post back here when I find it.
PHP isnt a programming language, its a scripting language. There is a very grey area with Javascript, but in reality it is a scripting language. HTML is a markup language, and css is a stylesheet language. However, that doesnt mean Javascript is easier then things such as C#. A programming language is something that compiles into machine code, or compiles into machine code ran buy an operating system. A scripting language is something which is processed by another application. The other application for javascript being the browser, the other application for PHP being apache. I always get downvoted when i tell people this, which is a shame, but it is true. Just because you are scripting in Javascript dont take it as an insult. But programming and scripting are two different things. However he is wrong, if you are using scripting languages be prepared to do the same complex math and operations as a programming language.
If google translate is so easy to use, why learn another language
I think a great example is bookmarklets.
It's not the selection that's wrong. It's the re-selection. An optimised version would be: var galleryNav = $('#GalleryNav'); galleryNav.css('display','block').fadeOut('slow'); galleryNav.next().css('display','none'); You are right in that, being an ID selector, it's not terribly slow, but as a beginner, I was not able to distinguish the performance difference between selecting an ID, a class or just a convoluted $('div ul li.selected a'). At that time jQuery to me was this magic box that would let me play with the page (I learned what a DOM is later on) and allow me to do cool stuff.
&gt; It's not the selection that's wrong. It's the re-selection. Yes I understand that, I was just saying that in this precise case it's not overwhelmingly harmful.
It returns a "static" `NodeList`: [unlike other functions which return `NodeList`s `querySelectorAll`'s `NodeList`s don't "auto-update"](http://jsfiddle.net/mkantor/77Jv4/). Maybe you were thinking of this difference. The reason `querySelectorAll` doesn't return a native JavaScript array is because the DOM interface is supposed to be language agnostic. As far as I can tell there's no reason why there couldn't be methods like `.forEach`, `.map`, etc in `NodeList.prototype`, though.
... and also you don't want to. The whole reason I write/use bookmarklets is because they're instantaneous - if I wanted to load a new webpage, I'd just bookmark an online utility that does the same thing.
If you are using JS to change CSS , you should pick a different hobby (unless you are working with animation).
jQuery provides you the tools to make use of the fundamentals the language has available in an efficient, general way. It's perfect for easy light weight stuff. But when you start to develop much more depth in interactive front ends, you will absolutely find yourself having to understand the fundamentals of javascript -- closure especially. It's important to master the understanding of how certain design approaches may come into play with Javascript and how variables may be referenced. You'll come across situations where you need to create prototype objects, which will be helpful in many complex scenarios. Learn Javascript, how it works, and why its actually quite different from standard languages.
Thanks for the link; interesting stuff. I feel like this whole discussion would make more sense if there were separate `LiveNodeList` and `StaticNodeList` interfaces (and if `HTMLCollection` could be nuked once and for all). Ideally, I'd prefer to have something like [John Resig's `NodeList` API proposal](https://github.com/jeresig/nodelist), which makes `NodeList`s more array-like without having any methods that fail (just adding `Array.prototype` to the chain unfortunately adds some incompatible methods). It also makes `NodeList`s actually take advantage of their uniqueness by adding the `NodeSelector` interface, the `EventTarget` interface, callbacks for when elements are added/removed to live lists, etc. At least `[ArrayClass]` made it into [the DOM4 draft's `NodeList`](http://www.w3.org/TR/domcore/#interface-nodelist). I guess that's better than nothing.
You reminded me to look into which model Opera supports, and I can't find one. Any insight into which model Opera does/will use for touch events?
They said the same thing about Android apps. No, no issues, because they are installed apps. I mean, the security issues are due to stupid users installing everything under the sun, but still, &amp;#3232;\_&amp;#3232;
Try MDN
If you are writing code with jquery all day long, you are still writing javascript. The only thing jquery helps you avoid is writing your own xhr request handlers, animation libraries, and dom manipulation. It creates a facade pattern around everything so you can actually attempt to remember their library over the arcane ways vanilla javascript does it via the usual dom.
Third. And yes, very good.
If you look beyond the browser it's no brainer why you should learn native JS (node.js).
Pretty much all touch-screen mobiles support 'double click' to zoom in on an area of the page so they wait up to 300ms for a second click to invalidate a single-click. That makes your page a bit more sluggish.
I use [Hammer.js](http://eightmedia.github.com/hammer.js/) -- it's been so good that I haven't looked elsewhere.
Yeah if you double-click within 300ms then it'll just do it straight away, but a single click will wait about 300ms before doing anything. 1/3 of a second might not sound like much but it really does make a page feel kind of unresponsive.
Check out [my blog](http://symmetrycode.com/)
I have to admit, there are a lot of very simple tasks that I'd have to look up, to accomplish with vanilla Javascript, because jQuery has spoiled me. On the one hand, it doesn't really matter, because I've encountered very few situations where jQuery was not an option, and it's easy enough to google my way through snags. If you forget the syntax for selecting an element, big deal! It takes less than ten seconds, literally, to look that up, if you're competent with a search engine (which is probably the most important skill for anyone who works with computers, or maybe for anyone period). On the other hand, this is only true because I learned Javascript first, and I understand the fundamentals. Any logic you're doing is still vanilla, so unless you're strictly using Javascript to change properties of elements, you can't get by on just jQuery, and if you don't understand the basics of object oriented programming, you're writing ugly code regardless, with or without jQuery.
Vanilla JS should be used to structure your code so it is reusable and easy to maintain. If you are going to just be building small websites for local companies, feel free to go wild with a 1 page jQuery on ready function callback and litter the place with click events. Unfortunately this is a maintenance/performance nightmare and not good practice. But as I mentioned, it's up to you and where you want to further your career. If you intend to be a full time front end developer, any decent job interviewer will quiz you on your JavaScript basics and your experience building web applications.
Bookmarklets.
This is horrible to read, how come none of the people showing off their wrangling of Javascript seem to care about maintainability? Imagine the nightmare of being this guy's replacement.
Idk if this counts but Underscore has a function isUndefined which compares the argument against void 0 instead of undefined in order to handle cases when some jokester redefines undefined to something.
No, they aren't. Some of them play pretend because MVC is well known. Point me to a controller in Backbone, Angular, or Knockout. Angular and Knockout use something like MV where the View is HTML with data bindings to the Model. I guess I'm gonna toot my own horn; I argue that Backbone is _definitely_ not MVC [here](http://koglerjs.com/verbiage/backbone) and that it is Object Event [here.](http://koglerjs.com/verbiage/guide.) Convince me otherwise; like I said, point me to a controller in Backbone. 
Because you must learn to walk before can run.
I think we should probably just agree to disagree. I've read your article, but you're just playing semantics. Out of the box the Router is just a thin Controller, no matter what you want to call it. Dumping all of your controller code into your view and/or model doesn't mean that you don't have a controller. Just means that you don't know how to structure code.
We're not talking about learning, we're talking about running a dev team. Trial by fire is a terrible way to run a business.
Because it's just a library, eventually replaceable with things like knockout.js
Remove the semicolon after the if statement's condition.
We haven't arrived at the perfect JS framework yet. With this attitude, progress will remain forever frozen in time.
This attitude's my assessment of the rapid experimental progress of the seven (eight) major frameworks. MVC is the past; to hold onto it is to attempt to freeze progress as we move further into (IMO) event-driven development. 
I didn't find things like loops to be boring, but I'd been putting off learning JavaScript for quite a while. What I found worked for me was to find something "real" to build, but without a strict deadline imposed on it. You'll find yourself with real problems to solve, and all the time you need to learn how to solve them properly. One example of a (sub-)project that really helped for me was fetching a JSON list of real-time bus departures and formatting that to look pretty on a wall-mounted HDTV. Fetching JSON from somewhere and looping over it to do something useful and display the results is probably a good bet to learn how to deal with looping and some error/flow control. Weather, sports scores, stocks, there's bound to be some data out there somewhere that you could put to better use if you played around with it some.
D: this is unholy miscegenation, knockout and backbone cannot intermingle (I'm toying with the idea of a Backbone Ember mashup.)
That's ultimately why I'm staying clear of it... Taking a framework that wraps and extends two frameworks makes me really feel like I'm going to add problems not remove them :) Still, I'm keeping an eye on it.
`NaN`, `Infinity`, and `undefined` are read-only properties in ES5. Assigning values to those is a no-op.
Can you elaborate what you mean by "event-driven"? Given that pretty much all frameworks use events in some way?
Other people have told you where the error lies. But also, please do not use Whitesmiths indentation where the } and the else are on different lines. Do: } else { AKA K&amp;R style. And yes, the details of which style is completely unimportant at your level of programming education. But getting in the habit of having a consistent and easy to read style is important.
I agree with this +1
meh, although i agree that this would be a better style, style is completely your choice, as long as it makes sense and as long as other people you work for are fine with it (ie follow conventions set up in your work environment). Other thank that, style is completely what you feel comfortable with.
What the hell is wrong with people these days recreating basic frameworks for their startup when they could be spending time building the actual product. The person mentions using both Backbone.js and JavaScript MVC, but settles on building their own MV* library? In addition, the result is just a copy of John Resig's simple class pattern: http://ejohn.org/blog/simple-javascript-inheritance/. This is just a shortcut for inheritance in JavaScript not a full blown MV* library. In my opinion this is a waste of time and leads the team down a road of problems, performance issues, and bug fixing around custom library code. If you want to get your hands dirty and understand how an MV* framework operates, do that in your own time, not at the expense of the product you are building at your startup.
Only in modern browsers. In a lot of browsers still in use, you can overwrite them.
The point was simply to demonstrate a proof that there's no possible situation that exists where void can do something that can't be otherwise done, which seemed to be the answer the poster was looking for. But yes, if you want to do this then you use the operator made to do it.
at first glance I thought the problem was Romney.
I agree with the point, just not the implementation.
Agreed, but, as he's obviously just starting with javascript, why not start with something that's more widely used?
Alright, I'll probably get downvoted to hell for this but from my time as a proffesional web-developer, I've learned something. "People who code in jQuery are unable to code in JavaScript" Solving every problem with jQuery is a performance killer and brings you to callback hell. This is not a problem with jQuery, jQuery is awesome but more with the developers who think jQuery is a language more then a framework. Use jQuery for the easy event binding, the very cool selector engine and the awesome ajax functionality. Make sure that, for everything you code, you know how you'd do it if you weren't using jQuery. If you don't know what jQuery actually does "but it works" then you have most likely created a mess "that works" There are 3 reasons WHY it matters to know JavaScript. The first is performance, this is a small reason because on 99% of the websites out there, performance is fine. So what your script runs 10 times slower then it could have? If the user doesn't noticed that it doesn't really matter. For the 1% where it DOES matter, however. You'll be glad you know it. Also, since The second is structure. If you don't know JavaScript and use jQuery for everything. You are stuck within a certain structure that might not suit your application needs, requiring you to do complex work-arounds for a problem instead of simply solving the problem right there and then. And last but not least. Debugging. If you know JavaScript, you know what jQuery does when you call it's method. Even without checking the source. If you know what it does, you can eliminate possible causes for a bug. So that selector doesn't work? Well, jQuery only puts X and Y on it, so that shouldn't be a problem, but it also does Z, so maybe it's that. I know I said 3 but this fourth one is just personal to me, and might not be true for other people, **Don't let a library do something you do not know how to do yourself.** A lot of people talk about how bad it is to reinvent the wheel, but if you're gonna need wheels, it's important to know what makes a wheel round. Reinvent the wheel. Find out what makes it round, once you understand that, you can use a library that generates perfect wheels for you because it saves time, and you can reconize their wheels as 'better then yours for X and Y reasons'
It never hurts to know the fundamentals of one's craft. In addition, once you encounter a problem that can't be fixed by using jQuery, you'll have to rely on your skills with vanilla JS. For example, if you ever start to write mobile web applications, you'll be glad about each byte saved - so if you can do it without jQuery, good for you.
Check out the arguments property for calling a function with a variable number of arguments: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments But probably you can just pass "null", i.e. redraw(foo2, bar2, null); redraw(null, null, baz); OR you can wrap those paramters in an object and pass that redraw({ foo2: foo2, bar2: bar2 });
Thinking about it, that may well be what's happening. foo2 and bar2 are both defined in dostuff() but because they're local redraw() can't see what they are, and neither can dootherstuff() to pass them through... I should add, it's not throwing errors, but it's not actually doing anything either since it needs all three (foo2, bar2 and baz) in order to actually do its thang. What I'd like to do is have it recycle the missing arguments from last time it ran. Must investigate further...
It's not required in this case, but I like using `void` to turn functions declarations into immediately invokable expressions when you're not interested in the return value, as it *feels* (to me) like it declares that intent better, as opposed to wrapping the declaration with parens or using another unary operator to do the same job: void function() { // ... }() vs. (function() { // ... })() !function() { // ... }() The `void` version is also handy for confuzzling Java developers.
Yeah, I only realised that it needed persistence while I was writing that reply. Looks like I've got some twiddling to do! Cheers for the help man, I'm gonna be busy for a while by the look of it =D
Blugh. Head asplode. Will attack later after coffee.
So, just out of curiosity, youd want something that looks more like clojure?
Is there ever even a legit use case for redefining undefined? I wouldn't bother testing for that, I'd just stop using(or fix) the script that was doing it.
Well one reason is that existing frameworks can come with extra content that isn't required for your applications needs.
I've been programming for 25 years. I still fuck up semi-colons and parenthesis and brackets all the time. The only thing that changes is that you learn what mistakes to look for. Everyone explodes? Look for a missing or extra semi-colon. Being a good programmer just means that you have a lot of experience fixing your stupid mistakes.
You can extend everything in javascript, is't just not always a good idea. Maybe an interface like this could be an idea: var watch = new Watch(obj); watch.on('change', function(key, value) { console.log('%s changed value to %s', key, value); }); var watch = new Watch(obj); watch.on('key', function(value) { console.log('new value %s', value); });
&gt; I think data-binding is a little bit foolish. Agreed, I just can't get behind tying so much of my code into HTML attributes (if that's what you're referring to); it seems to be taking a step backwards. Nice reply btw, you laid that out well!
It's in the title of the submission... &gt; How we do JavaScript MVC at Behance
Are they required there? Or is that just custom? On my latest bookmarklet, I was getting seemingly-random syntax errors using `void()` -- but not all the time. Changing it to use an IIFE instead (and not changing anything else) corrected the issue. Or maybe I was doing something else silly that I didn't realize.
Curious how that will play out in ES5 and/or strict mode, I'm guessing it's fine for now but it seems like it could raise an error if actually running in strict mode.
I definitely agree with this approach. It's one thing to extend Object.prototype in a closed project where you understand the implications, but doing so in a 3rd party library where people are just going to drop it in without knowing the implementation details is likely going to cause headaches for some. Other than that, very cool library. One thing that would be cool is to use a timer-based getter/setter implementation, similar to how AngularJS works. This would allow for browsers that don't support getters/setters to still emulate them. You can read more about it on this SO post: http://stackoverflow.com/questions/9682092/databinding-in-angularjs
You're probably right on that, I just hope that they never take away bookmarklets!
What about this: var obj = { attr1: "value of attr1", attr2: "value of attr2" }; startWatching(obj); obj.watch("attr1" , function(){ console.log("obj changes"); }); 
It makes a loop and reads the attribute value looking for changes? 
I was looking for a solution for older browsers and that might be the best. I will definitely try this in a Watch.JS fork. Thank you :)
&gt;Your approach would mean for-in loops without hasOwnProperty checks No. Guarding for-in is how the language is supposed to work. Overwriting `NaN`, `Infinity`, or `undefined`, however, is malicious. If you do this, you want to break things. If you are in the position to do this, you can break everything either way.
&gt; Guarding for-in is how the language is supposed to work. Sure, if you're iterating over an object with a prototype chain you've set up. But what about just a simple key-value map? The only way that'll pick up extra values is if somebody messed with `Object.prototype`, which, like overwriting `undefined`, is either very stupid or downright malicious. Besides, `hasOwnProperty` checks are actually a whole lot more expensive than the looping construct.
Doesn't work in Firefox (15.0/Win7).
what happens if I already have a variable/function named watch on an object?
cute :) 
jQuery does not extend `Object.prototype`, `Object` itself, or any other native types. That's been part of its core philosophy from the beginning.
I see your point, I guess I look at it a different way. It's just such an edge-case to me, like someone using reflection to change the value of String.Empty in .NET.
if your (anyone's) only issue is writing it out all the time.. then don't. var qs = function(a){ return document.querySelectorAll(a); }; qs('div'); or if you want to avoid a function call; var d = document, qs = 'querySelectorAll'; d[qs]('div');
If I'm already using a library that creates an simple shortcut and already remember said shortcut off the top of my head and know that it works in more browsers, why would you argue that I should use a selector that requires set up to make a shortcut for?
Often, instead of sending variable length arguments, people will send a single object literal with the arguments and/or functions inside it. I find this style easier to use.
Yeah, i think this would be a good idea. This follows the mixin of other libraries, like event emitters. They usually have a method on them, to mix in their stuff on the new object. I recently found RSVP which is a lot of stuff, but also has an event emitter you can mixin on your own stuff, i really like how its done: https://github.com/tildeio/rsvp.js var obj = {}; Watch.mixin(obj); obj.watch('key', function(value) { console.log('key changed to %s', value); });
I really like that. Well done!
I enjoyed going to /r/javascript this morning, and seeing Text Birds.... enjoyed in a weird way. Thanks!
Passing an object (/ associative array / hash / name-value pairs) is best. Having recently done some crap code where I started with variable arguments, I can attest it was just one big hassle. It's not crap code anymore, and I'm passing an object for the area I used var args before. 
Object.create isn't on the prototype. I don't know, but jQuery might add a polyfill if it's not native to the browser, but it doesn't extend the prototype.
Yea I had noticed that (see my earlier comment) I'm reading into it, I guess Object.create is new to JS 1.8.5. Before that it had to be manually added. Hmm, so maybe jQuery is forcing the version of JS being used. I dunno.
Not sure if this is part of the rules, but it seems to remove unconnected blocks as well.
[Text people!](http://asdf.us/vortex/)
Can you check for window.DeviceMotionEvent.interval ? I saw someone do that once, not sure if it works as you need
I doubt there is a problem, it's just a case of local variable masking a global one.
I skimmed through it and I've been thinking about it. I like that Angular _allows_ the use of MVC, but I have an uneasy feeling about the injection of another layer. The abstraction layers end up looking like API - M - C - VM - HTML. ...Which I suppose is alright. My main problem with Angular/Knockout isn't in the optional addition of a Controller, but the fact that ViewModels in total have javascript, HTML, and css within their focus all at once. 
Console.log() examples you give shouldn't produce syntax errors. What you're seeing is a result of the ambiguity between Object literals and block statements. Basically every one of your examples is being logically converted to { } &lt;remainder of expression&gt; An empty block statement is a no op so the expressions are parsed as: +0 -0 ~{} // Slightly tricksy, {} is an object, we call valueOf() on it, return NaN, ~ forces us to turn it into an unsigned int, producing 0, ~0 is 0xFFFFFFFF, which is then interpreted as a signed int, eg. -1 The first three are parsed as unary expressions, the rest are binary operators, so the syntax is invalid: *1 /1 %1 &amp;1 |1 \^1 \&gt;&gt;0 &lt;&lt;0 
That's fairly common in many languages, and very good practice IMO. However, it's only useful on immutable datatypes (like primitives, constants, etc.); as you show in the second example, it won't help you there. But yes, very good point that it could be done accidentally! I'd bet most errors like this are accidental -- I don't actually think someone would knowingly overwrite `undefined`.
I have only done one hobbyproject in angularjs, but I found that the controller layer ended up containing a lot of boilerplate code. Perhaps it was unnecesary One the other hand I liked the way that the html page was somewhat readable. I also like the idea of hiding the javascript away in reusable directives.
But if it's read-only, I don't think you could use it as the identifier for an argument. Thus why I believe it would likely fail. This is the same as trying to use `function` or `if` or something as an argument (or variable).
.NET as in C#? Being a strictly-typed language, it's largely impervious to many of these types of problems.
An actual JavaScript REPL is a lot more convenient to use than `console.log()` on everything: http://repl.it/ 
directives make me hide under my bed shivering at night. you say "hiding," I hear "burying"...
 &lt;label for="foo"&gt;&lt;input type="checkbox" id="foo" style="display:none;"&gt;bar&lt;/label&gt;
Pretty cool stuff. Looking at the implementation, this will not work in IE8, FF 3.x, or Opera 10.5 - 11.5. I haven't tested it, but I'm pretty sure `defineProperty` only works on DOM elements in IE8, and isn't at all available in the other browsers I mentioned; Also `__defineGetter__/__defineSetter__` are not available. 
Holy fuck ... I can't believe I didn't think to change the display property. Thank you very much for the input and sorry to waste any of your time! Thanks again!
Descartes meets JavaScript.
Object.create is part of the ECMA spec afaik. It should work with vanilla JS.
After playing around with it (I hate sitting around discussing what may/may not happen when we can easily test it), it looks like you're correct. Though, it doesn't make a lot of sense to me. Chrome complains if you use `eval` or `arguments` as an identifier for a function parameter, but lets `undefined`. So I had thought `use strict` would be useful for this problem, but I guess not...and the kludge code lives on....