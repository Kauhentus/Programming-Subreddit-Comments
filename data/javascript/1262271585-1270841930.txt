Why?
I assume that he runs Apache.
I don't know if javascript has the appropriate API's to handle a lot of stuff you'd want on the serverside. DB Connectivity? File IO? I love it and all, but I just don't see how I could use it for anything on a server in it's current incarnation.
library issue != language issue
JS is a language. The DOM is the API the browser presents, SSJS is the API for server applications. Much of Firefox is written in JS, and the underlying API presents yet a different set of functions.
That is really remarkable, so what would be some other examples of memoized recursive functions as this seems like it would be incredibly useful for people who make complex calculations on the fly in javascript. In game browser games, I'm looking at you.
The point still stands. Server-side javascript (or CommonJS, as folks like to call it these days) libraries are still in their infancy. The good news is that many of these projects are popping up left and right: for example, [DB Connectivity](http://activerecordjs.org/), [FileIO](http://code.google.com/p/v8cgi/wiki/API#Files), [XML Parser](http://libxmljs.squishtech.com/), etc. etc.
I must have missed the disclaimer in that article that admits that Y combinators in javascript are rendered redundant by existing language features. But yes, javascript does lambda calculus. All the usual lambda tricks apply. 
Try this: &lt;body&gt; &lt;form name="myform" action="." method="GET" onSubmit="testResults(this);"&gt; Enter something in the box: &lt;br /&gt; &lt;input type="text" name="inputbox" /&gt;&lt;br /&gt; &lt;input type="submit" name="button" value="Click" /&gt; &lt;/form&gt; &lt;script type="text/javascript"&gt; function testResults(form) { var TestVar = form.inputbox.value; document.write('You typed: ' + TestVar); return false; }; &lt;/script&gt; &lt;/body&gt; I made several adjustments: * Tags and attributes are lowercase and the self-closing nodes have had their closing slashes added. * Form submit triggers script so you can hit return and still have things work. * Input type changed from "button" to "submit" as there really isn't a "button" type. There is, however, the `&lt;button&gt;Click!&lt;/button&gt;` tag. * Form submits to current page. * Function returns false to override default submission action. * Removed spaces between function names and function parameters. That's not generally recommended. Tested and working in the major browsers, including Firefox. :D
I need to learn maths, this is way beyond me. =(
Thank you so very much, it was driving me crazy
Only things I would change: action="." If you want to submit to the current page the correct way is to have an empty action attribute action="" An action attribute must contain a URI but according to the URI RFC an empty URI is still a URI &gt;4.2. Same-document References &gt;A URI reference that does not contain a URI is a reference to the current document. http://www.ietf.org/rfc/rfc2396.txt [Further reading](http://www.thefutureoftheweb.com/blog/use-empty-form-action-submit-to-current) onSubmit="testResults(this);" The onsubmit attribute, although it is an event handler, it is still an attribute and as such in XHTML should be lowercase onsubmit="testResults(this);" &gt;XHTML documents must use lower case for all HTML element and attribute names http://www.w3.org/TR/xhtml1/#h-4.2 *Edit: Formatting*
You have to close the document. document.write("whatever"); document.close(); do that every time you use document.write() or it will show as always loading. document.write is not the best way to output to your page, but it works for when you're learning.
One other thing... for running javascript under Firefox, if you don't have it, you **really** should get the FireBug addon, which allows you to set breakpoints, see errors, etc.
 &lt;!DOCTYPE html&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en-us" xml:lang="en-us" &gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt; &lt;title&gt;Test Slug&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;form id="myform" name="myform" action="" method="GET"&gt; &lt;label for="inputbox"&gt;Input&lt;/label&gt;: &lt;input type="text" id="inputbox" name="inputbox" /&gt;&lt;br /&gt; &lt;input type="submit" value="Test" /&gt; &lt;/form&gt; &lt;div id="iditis"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; function testResults(e){ var inputString = document.getElementById("inputbox").value; document.getElementById("iditis").innerHTML = "You typed: " + inputString; e.preventDefault(); } formSubmitted = document.getElementById("myform"); if(formSubmitted.addEventListener){formSubmitted.addEventListener('submit', testResults, false);} else if(formSubmitted.attachEvent){formSubmitted.attachEvent('submit', testResults);} &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;
This was it, added the close and it stopped it's loading, thanx.
I tried as little as possible touch the JS so he could follow the necessary changes easily, but I didn't know it was valid to leave `action` empty. :D
This is exactly what I was going for taking the time to help
ASP doesn't allow server-side DOM manipulation with JavaScript. To me, that's the best use for server-side JavaScript. Unfortunately, the only framework that had it was Jaxer, and it's buggy and abandoned.
http://code.google.com/p/v8cgi/wiki/API Db? check! File IO? check! Sockets? check! Anything you need to build a full web app is there for you. Let us know what else you need, we will code it for you.
I've implemented the TeX line breaking algorithm in JavaScript and Canvas (see: http://www.bramstein.com/projects/typeset/myfit.html ) but it is a far stretch from a full TeX implementation.
i do this too, and i can't stand the NY Times because if you double click a word, it loads up definition of that word.
absolutely - I took to adblocking that popup icon on that site, but I keep meaning to block the javascript as it still is doing it behind the scenes (and still creates the clickable area)
It's things like this that make me use NoScript and think twice before whitelisting a domain (which I do fairly often, but not lightly).
Nice to know I'm not the only one. I too highlight passages of text as I am reading, and it's annoying to see the loading indicator suddenly show up.
doesn't work in firefox, as noted on the page... until it does... well.. sorry.. but... not really practical.
It does now -- you need the latest nightly build, though.
I have so gotten used to just randomly selecting text somewhere near my current focus, that I cannot read any texts without. I get very distracted, if I don't do it. My ex hated me for that. :)
there's a certain condescension associated with this "feature" on the nytimes web-site...it's like they're saying, "hey...we're going to be using some highfalutin' words around here, so we've added this nifty little feature that you can use when you get to the hard parts of the article. you can thank us later."
You might appreciate it if English wasn't your first language.
touche'
when you interact with a computer, it does something. You don't want the computer to do something, then don't do something to it. How hard is this?
Noscript is the answer.
I took a poll on this and those people hate it too. :D
I also hate the javascript-powered snow on sites I see. Fucking hate it.
I asked my roommate's dog's previous owner's host family, and they all liked it.
Well one vital benefit I find that doing this makes is that when I'm scrolling huge walls of text, I don't lose where I was reading. Otherwise I end up reading the start of paragraphs again until I realise I just read it, or alternatively missing entire paragraphs. This is really why I do it, not because of my reading age of 7. It was [this rfc](http://www.faqs.org/rfcs/rfc4868.html) that prompted my post; a big wall of text! And yeah, I know how to select text in various ways, but all those methods still get picked up by this script in particular
I never knew the ctrl+click thing, you're a prince.
Yet another 3D engine. Great...
From a quick look at the JS, it looks like it does other stuff, like appending some text and URL in the clipboard to "source" the text you're copying. The tracking could be made slightly less obnoxious by: - being sneakier. there are ways to send data to a server that don't trigger the loading state in most browsers - being gentler. Putting a small (~ 500ms) delay before triggering network activity would prevent the browser from going crazy because you're frantically clicking all over the page's text.
I use a different approach, and use YesScript. It's a blacklist, as opposed to whitelist. It's great as I generally want the scripts, but hate NTY articles.
I do this too. It's less of text issues, but more of the fact that if there's no activity where I'm looking, my ADD sometimes kicks in and I zone out for a few minutes, and lose my place. It drives shoulder readers nuts, which is the main reason I don't try to fix the habit.
Oh I noticed this too. Every time I selected text browser started sending stuff. Added tynt.com to my firewalls block list. 
I hate that horrible shit. It also inserts crap into the bottom of everything you copy, which is just fucking evil if you ask me. It was blocked many, many moons ago when I first noticed my browser's loading bar spazzing out randomly.
I like how the headline questions the "master"hood of these would-be web "masters."
My company's analytics software does this--it batches up action data and sends it during inactivity or page unload.
And I thought I was the only one... So many people have asked me: WTF are you doing? It just feels natural.
Actually a nice idea (the page unload one)!
Delaying the reports also allows it to ignore transient actions which the user quickly canceled or altered. For instance, if we want to know how far down the page the user read, we can ignore cases where the user hit the scrollwheel down to the bottom of the page but back up without actually pausing to read the content. Or, the aforementioned select-unselect-select something else pattern (though in our case we only care about what the user actually copied to clipboard, to know what they found useful or interesting).
Slows down the whole computer.
touché
Not when you use chrome.
You're better off asking JavaScript questions on stackoverflow.com
Primary is Firefox here. As of yet still has better debugging tools, though Chrome is improving lately! (Use it at home; not yet approved at work) 
Oh, on Wikipedia, not any wiki.
I should have specified, my bad, the title was long so I abbreviated it forgetting that of course there are other wiki's.
You can do this in Firefox more easily: * select Wikipedia from the search engines dropdown * highlight some text * right click -&gt; Search wikipedia for "some text". This works for any search engine.
Better yet (using Firefox), add a keyword search. In other words: * Right click on Wikipedia's search edit box * Select Add a Keyword for this search * Type Wikipedia as the name * Type something like w for the keyword Now, any time you want to look something up in Wikipedia, go to the address bar (Control-L), and type something like: w Linzer torte Viola! This will work on *any* search edit box, and is, IMHO, one of the most under-used, under-appreciated features in Firefox. While it has nothing to do with JS, it's still very cool.
Wow this shows how much I don't know. :) Leave it to me to find a more complicated solution when a simple one exsists. This should be made common knowledge, no one I know knew of it and they are at least as techno-savy as myself some more so. I think as it's very useful and time saving and you don't have to bother with JS or bookmarklets. The internet is a cruel mistress, but I learn something new about her every day that keeps me coming back for more.
Wow this shows how much I don't know. :) Leave it to me to find a more complicated solution when a simple one exsists. This should be made common knowledge, no one I know knew of it and they are at least as techno-savy as myself some more so. I think as it's very useful and time saving and you don't have to bother with JS or bookmarklets. The internet is a cruel mistress, but I learn something new about her every day that keeps me coming back for more. Edit: Linzer torte looks delicious!
It was a life changing event when I learned about that a couple years ago. I have keywords setup for stuff like imdb, dictionary.com, wikipedia, google maps, bugmenot, etc.
It's even easier with a hell of an extension called "Context Search" that skips step 1 entirely and adds all your search engines to a context submenu when you right click highlighted text. I switched from Firefox to Chrome a few months back and that's the only thing I miss.
Thank you for the reference the this extension. I'm always finding new ones here, in fact before I was on reddit I didn't have any at all. I look back on this as a dark and scary time in my e-life. This may fix the only problem I had with this method, in that I typically have my search engine set to Google and might forget and end up searching Wikipedia when I meant to search the net. Edit: Just restarted Firefox with Context Search now installed, it sure is Handy Dandy.
Doesn't work for me.
Does not work in Chrome for me.
Well this will certainly help me properly assimilate myself into the hivemind.
⚀ ⚅ ⚅ ⚄ ⚂ ⚃ ⚂ ⚀ ⚅ ⚁ ⚅ ⚄!
Works for me
also, var dice = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']; , why not \u(2680+Math.floor(Math.random()*6))?
Yahtzee! ⚅ ⚅ ⚅ ⚅ ⚅
It broke when I put 10000000000000 dice to roll. 
I think you want this: String.fromCharCode(0x2680+Math.floor(Math.random()*6))
Unit test frameworks can give some information about your code performance. Even if I'm wrong it's still good to write unit tests
i love jquery
The footer of the site says "Donate and get a free ebook." How is that different from paying for it?
you get to pick the price you "pay"?
Looks like some cool new things in 1.4: http://api.jquery.com/category/version/1.4/ * some functions that only took strings or number values as parameters now take functions. addClass, for example, can now take in a function in which you can calculate the value to return based off the dom element you are chaining off of) * new "delay" function that allows you to basically set a timeout for however many miliseconds by chaining it off the current jquery object. Very useful instead of having to break the chain, doing a setTimeout and then doing more jQuery on the callback. I really hope their are performance tweaks. It's nice getting a speed boost from jQuery devs without having to touch your own code base.
1. You get to name the price 2. Presumably, each of those books costs more than $20 at retail
douche
Hypocrites
I assume it's because the jQuery team receives the money rather than the author/publisher. It's really a shame that you can't pick the book though.
Main titles in Flash? Who would have expected that from jQuery site?
The plugin is sifr, which uses javascript, although it doesn't use jQuery. I don't see any problem with it, it seems like the best solution right now.
Also, you can deduct a donation off your taxes, where you have to bill your employer for a "continued eduation book"
" it works fine in IE" wow
Did I read that right? [api.jquery](http://api.jquery.com/) is built in wordpress?
Upload a live preview
[FT(HTML)FY](http://pastie.org/772187) EDIT: Show me a mockup image and I'll do the CSS/jQuery too.
http://imgur.com/G5awz.png Thank you so much! 1 thing though. I need to have an active state for certain menu items. So on interior pages , say the "events" page. If we are on the events page "events" has to stay active as well as the events sub menu. The way the code is now, I can do that. I just need to do an easing effect on the bottom menu when the top menu items are moused over. THANK YOU SO MUCH, I greatly appreciate it :)
Not impressed.
http://wilwaldon.com/easing/easingmenu.html There ya go. Hope this helps. Thanks!
Just added a question on stack overflow, hope it helps me out :) http://stackoverflow.com/questions/2039270/need-a-good-easy-tutorial-about-jquery-easing-effect-im-a-total-noobie-at-js
So did you get it all sorted out with superfish, or do you want me to do anything?
They used to popup these searches automatically but now you just get a question mark. I think they had some complaints about this, I know I complained and a few weeks later they changed to the question mark instead of the immediate popup.
only when you use IE, i think we have you profiled takatori
Nah, Firefox slows down too. There is one blog site I occasionally visit (from a bookmark on work PC, can't recall it now) that Task Manager shows Firefox as consuming 50% of one core while the site is open. IE. I'm offended. Does reddit even work on IE?
I can't imagine that IE would handle the reddit's goodness. I'm unwilling to do any verification of that claim however.
I'm all good with superfish, thank you. I'm actually learning how it works which was my original intent so I'm pretty pumped. Thanks again! It's much appreciated!
http://weblogs.asp.net/scottgu/archive/2007/06/21/vs-2008-javascript-intellisense.aspx
thanks! this is neat and relevant, but it is not es4+, do you know of a way to do js coding with strong types in vs?
The CSS specific features work great. However, I spend much of my time in the DOM tab of Firefox which DungBeetle doesn't have. I would have loved this 2 years ago...now it seems as though IE6 support is slowly being phased out.
Not quickly enough. Unfortunately, I spend roughly one day in five working on JavaScript and CSS issues specific to IE6.
no
do you want the web server to send you a prerendered PNG instead of HTML? why do you draw the line there?
Of course not, I just think it's a waste of users' time to force them to render things that could be figured out server side first. Look at my first example, notice the delay in the stars and the numbers populating. This also could be applied to doing ajax after load. There is no need! Just load it once and be done with it.
It's not about you. ISO dates are machine parseable and, more importantly, machine-identifiable. In fact, ISO dates are used extensively in [microformats](http://microformats.org/), which search engines are starting to understand. Scripts like javascript-pretty-date allow user agents like your browser, which can run Javascript, to display a human-friendly date while keeping the default a machine-readable ISO format. A programmer could sniff out the user-agent header to identify different search engine "bots", but there are so many different ones out there and it's hard to know them all. This has nothing to do with offloading server-side processing and everything to do with appeasing the search engine gods, who frankly are a lot more important than you. Edit: I agree the delay in the first example is a bit much, but it gets better after the first page hit when the scripts are cached.
It is better to let Javascript render dates in the browser since it will automatically use the user's preferred locale.
If we don't do ajax, then we reload the whole page; which would be a huge waste for both of us.
What the hell is wrong with Dragonfly? I love it and use it as my primary web debugging tool. I only use firebug if I absolutely must. (very subjective choice of mine) edit: Somehow I knew that I'd get downvoted for my personal opinion but no one could be arsed to tell me theirs. Nice job /r/javascript.
&gt; a waste of users' time to force them to render things that could be figured out server side first. you do know that that does not exclude rendering the entire page server side, right? in any case, it is a _good_ trade off to calculate some things client side to reduce load on the server. server side CPU and memory is generally scarce, and client side is generally not. just as sending a prerendered PNG would not make sense in most cases, some processing should be done client side. just because you think a particular instance is poorly done, (i disagree, i would not want to delay page load to calculate the stars), does not mean that it is always wrong. some ajax loads more pages of comments, like youtube. do you want that to be done at page load time also? also facebook continually updates the X minutes ago on each post using javascript, that cannot be done server side.
i am not suggesting to reload the page, only to send the correct data the first time, and then any subsequent data updates can be done with javascript.
you say server resource are scarce and that users' resources are not, this is where we disagree.. i would value the users' resources first. Google has plenty of server resources. yes, why can't youtube send the comments on the first load? i am not suggesting facebook not update their x minutes ago, but for the initial load, it could be calculated (if it isn't already, i have not looked at that one) so that there isn't a blank area and then populated after a delay.
calculating on client side is just about free to the server operator. calculating on the server side is quite expensive because you multiply by the number of people using it. if you increase the load on your server by calculating more things server side it will slow down everybody, because it will increase latency. and your server will be able to serve fewer clients at a time, so you will need more of them. and your customers will probably go to a competitors page because it loads faster. you do know why P2P is so popular, right? because it is scalable, unlike centralized web servers. your CPU is idle most of the time, the server CPU is not. QED. and do you really want the dates rendered according to server side settings? by the way, thanks for the downvotes. 
so as a user, would you be comfortable with everything be calculated post-load? where do you draw the line? just send a blank body tag and load everything via ajax? it is getting ridiculous. 
depends, sometimes it is still worth it to calculate some things server side. and it doesnt necessarily have to happen after page load. why use javascript at all, following your line of reasoning? or HTML, making the browser calculate box widths? or CSS? just prerender the page and send it as PNG, okay? its a trade off.
Firebug lite has already been doing this: http://getfirebug.com/lite.html Just go to the bookmarklet and drag it into your bookmarks. Click the bookmark on whatever page you want to debug in ie6 and voila you have firebug.
Google Visualizations are the best. They were confusedly named (on purpose) in the article, so here you have them in their glory: http://code.google.com/apis/visualization/documentation/gallery.html
Just played around with dung beetle, I agree it's a lot more powerful than FB lite. Great work!
[:-D](http://i.imgur.com/ZivFw.jpg)
I spent a couple minutes trying to figure out what this does. Gordon claims to allow you to run .swf files without using your browser's Adobe Flash plugin. It seems to parse / render them using javascript.
http://wiki.github.com/tobeytailor/gordon/demos Seems to do something, anyway.
I'm more impressed now. I haven't actually checked out the code, it's very feasible that the library just injects the appropriate `media` tag, I haven't verified that this works yet. * tiger - static image * blue - Complex animations * trip - simple looping animation * buttons - interactive buttons; some with event handlers 
I used the Webkit DOM inspector to verify that there is SVG being generated and manipulated in the page. There is no Adobe Flash player in use at all.
That is awesome. I have firebug but I hadn't the time until after work gets off. Good job, realstevejobs.
Pretty sure realstevejobs isn't responsible for Gordon.
This is amazing. I didn't know javascript could do so much (HTML5 is used a lot)
Wow pretty impressed that it's actually fast! 
Why would someone submit a link to their source code if that's all they were doing?
Pretty cool stuff.
Words fail me to express how utterly awesome this is. It's a long way from being a full-featured player, but this is an excellent start.
This also happens to work on the iphone (as well as any other JS equipped browser). *EDIT:* [proof](http://twitpic.com/xxmi2) 
No HTML5 here.
I downloaded this, and it wouldn't run, however the demos on live seem to work, locally not.
I'm really not sure whether r/javascript is correct. A mix of r/wtf, r/awesome and r/javascript would be appropriate. WTF THIS SHIT IS AWESOME!
i don't get it. what is this supposed to be/do? initially i thought it would return the function "namespace", which has to be a property of the object "my". but it returns nothing and the parameters in the function definition don't make sense - why even pass p, o and i? please explain ;|
What sort of DOM manipulation are you looking for? The MSXML stuff handles HTML well enough: var dom = new ActiveXObject("msxml2.DOMDocument.6.0"); dom.validateOnParse = false; dom.async = false; dom.resolveExternals = false; dom.setProperty("SelectionLanguage", "XPath") dom.loadXML("&lt;a id=\"test\"&gt;A&lt;/a&gt;"); var str = '//*[@id = "test"]'; var ele = dom.selectSingleNode(str);
live q&amp;a in 30 minutes on ustream: http://jquery14.com/day-01/jquery-14-live-qa great new overview cheatsheet: http://futurecolors.ru/jquery/ new api site: http://api.jquery.com/category/version/1.4/ 
Commence wicked air guitar solo!!!
Anyone know what the performance gains are? I can't find any data or graphs on this...
The changelog for v1.4 can be found here: http://jquery14.com/day-01/jquery-14 and it has a few pretty graphs and charts with performance gains. Seems to be faster, just finished benchmarking some of the javascript from one of my web apps that uses jquery and it's on average about 8% faster for me.
This is the most extensively (and usefully) commented code I've seen in a long time. And there are some nice demos on the web site: http://deanm.github.com/pre3d/
This one's called "I Wanna Rock Your Body"; and then in parenthesis "All Night Long".
Upvoted for novelty, though I actually prefer the JS syntax.
Vestigal meme? I'll give them credit just because they made the effort but the example JS isn't doesn't have to be as verbose as presented.
Doesn't insignificant whitespace have the lovely effect of making JS lighter over the wire? If you want to do Python, just do Python. Don't try to shoehorn its basic elements into somewhere they don't belong.
The new documentation is fantastic, though I don't understand the need to call it "API." Confuses newcomers and seems less descriptive.
You poor bastard.
On an unrelated note, DungBeetle is a fantastic name.
&gt; Pyscript is just a syntactic beautification of Javascript Beauty is in the eye of the beholder. To me it's an obscene bastardization.
the docs subdomain was already taken by the previous version :)
I was going to give it a proper read until I noticed it spews javascript errors in my console on **every single mouse move event** .
I think Javascript is already quite [like Python](http://gumuz.nl/weblog/pythonic-javascript-its-python-braces/) (or vice versa) 
http://developer.mozilla.org/en/docs/A_re-introduction_to_JavaScript
That's quite nice. But not the approach I had in mind. Thanks for the link, I sure will be reading that.
I've wondered for a long while how difficult it would be to link up Python to WebKit as opposed to a JavaScript engine. Does anyone have a clue? Also, good luck trying to debug that.
FYI, I started the Narwhal project, and the name may or may not have been influenced by my time on Reddit. (but there's more to it than that. JavaScript's unofficial mascot is the rhino. narwhals are kind of like sea-dwelling version of rhinos)
Glad to be of help. I immediately thought of that link when reading your title as it covers a lot of core JS.
This is very, very basic and any person who's learning JavaScript would know numbers and strings by then (not the string class, but how to write one). What is confusing is how you wrote it with the "&gt;" terminal interface. I've seen some JavaScript command line utilities, but most newbies won't understand this without some help. You'd be better off to tell them to make a webpage and use alert() or document.write(). You can also provide a way for them to debug or see what objects look like on the inside by giving them this code: out = ""; for(i in document){ //use any object where document is out += i + " - " + document[i] + "&lt;br /&gt;"; } document.write(out);
I did provide few options to [interact with JavaScript](http://sajisblog.wordpress.com/2010/01/15/understanding-javascript/) in the first post. I know it's very basic as I plan this as a guided exploratory discovery for newbies. I think I've got the debugging part covered as I've advised readers to use Firebug as an option. As you probably know, firebug intercepts objects and prints out an exploded view. I've considered you suggestion and will offer readers the option to view exploded views of objects and arrays as and when they're introduced. Thanks for the feedback. :) Edit: Clarification.
What shell are you using that does &gt;&gt;input &gt;output instead of js&gt; input output
I'm using spidermonkey and firebug as required. But yes, I'm just copy pasting and the prompt is fictional.
I've skimmed through your first post and it's good. Please don't take this the wrong way as it's merely constructive criticism. As a writer myself on my own website ([opencodeproject.com](http://www.opencodeproject.com)), I appreciate anyone who want to teach others. First, you have to consider your audience. I believe what you have done in your first post bypasses the basic users by introducing them to SSJS and Firebug (a useful program but over the top for beginners). I would have introduced Firebug after the person started wondering why an object looked like it did. Firebug also allows you to perform certain commands that are not in the default JavaScript library (console.log). This could confuse new developers who are more likely to continue using console.log even if it's not available (because you can't always develop with Firefox and Firebug). Suggestions: 1) Teach them the basics by writing a simple webpage with a &lt;script&gt; tag. 2) Use alert() for the first few articles, get them to understand it and when it's useful. 3) Introduce Firebug as a developer's resource, but not a crutch that they always need. 4) When using Firebug for development, you should also provide alternatives to a Firebug command. 5) Test out other debuggers - Chrome, IE8, Firefox Error Console, Firefox Web Developer. 6) Always link to your previous article if you mention it within your text. A link at the top doesn't tell what kind of information you taught, but a link inside the text where you explain what you taught does.
Writing a web page could be considered in one view as part of the basics of learning JavaScript. If you've read my first post, you'd see that the gist of my approach is not really to teach some steps to set up a web page nor to teach some idioms. As is mentioned, it is about core JavaScript. In fact, I'm just itching to build it up as quickly, lightly and smoothly as possible to functions, objects and prototypes. Again, if you've read it, you'd see that it not at all about the tools, nor the API or what have you. If I can get someone who struggled with the conventional donkey working approach of the write, save, break, refer API, rinse, repeat and give-up to understand these concepts that I consider as the simple basics of JavaScript, I'm certain I can consider them self sufficient and independent in their future endeavors. Regarding the links, I sure will consider cross linking my posts. Although I have to consider if that would be distracting a la Wikipedia. My ideal goal would be to prep the readers to be able to understand most of [this](http://javascript.crockford.com/) by themselves. Sincere thanks for your detailed comment.
The javascript subreddit is small enough as it is, there's no reason to break it up more.
sounds great! good work, i can't wait for the jake tutorial.
&gt; narwhals are kind of like sea-dwelling version of rhinos even wikipedia didn't know that, so i updated it.
&gt;Interesting things happen on Chrome Linux (which I think is caused by it not finding the Times font.) In Chrome on Linux, the "Assisted browser line breaks" section is pretty mangled. Several of the spans wrap to two lines. (I did see the desired result in Firefox on Linux.)
Except that I don't care about jQuery, it is inferior.
I'm surprised the MooTools community still harbors this kind of attitude towards other libraries, and I'm sure this kind of zealotry isn't representative of the whole community. I sure am sick of it though.
Sorry, I'm just upset. It feels like nobody trys anything new these days. I've been a javascript nerd for a long time and it feels like there is no healthy competition anymore. Everybody just uses jQuery by default and it kills other libraries communities. My attitude is not really representative of the community, Mootools people seem nice enough.
Don't push your luck Saji..
LOL why is that? 
Once upon a time, it was scriptaculous that had all the glory, remember? Libs become popular. There's nothing wrong with that. If anything, keep the MooTools related items in /r/javascript will better help your goal. Separating them will be less likely to get new interest in the project. I also wouldn't worry about "everyone". You can bet that other self proclaimed javascript nerds have done their homework and explored all the major libraries out there; and while they may have chosen a favorite, I doubt that they'll completely dismissed any of them.
Wow, an answer. Thanks. :) Okay, but that is very subjective, right? I can work far better with dragonfly than with firebug/webinspector. Yesterday I was asked at my company by a new guy with what I work and told him Dragonfly. However I also recommended for him to use Firebug instead. It's not that I'm zealous about it, but I also can't understand the extreme negative opinions about Dragonfly.
uneval doesn't work on chrome. why didn't anyone tell me?
uneval doesn't work on chrome. :)
YUI Datatable is one that isn't mentioned here. It does quite a bit and I really like it as a solution for "grid editing" even though the end result isn't exactly spreadsheet like.
thx, fixed it
next steps: * *add heat maps* already started with combining a sine wave (to make the north and south colder and the center warmer) and the height maps (it tends to be cold on high mountains) * *add rivers* randomly choose high points and let the water flow down. bonus for erosion. * *add cities* more or less randomly. cities tend to be near water and in moderate climate zones * *add roads between cities* i could use my [jsastar](http://jsastar.tapirpirates.net/) pathfinding for that * *rainfall/humidity* i have no idea how to model that ... * *terrain type* combine heat with humidity and you get swamps, (ice) deserts, tropical regions, ... * *add vegetation* uhm ... i guess, cellular automata on the terrain type map could work * *repost* in /r/rpg update: typo and terrain type
Also not mentioned is the Opera Unite app [Gridnite](http://unite.opera.com/application/432/). 
I would read the answers to this question at stackoverflow: http://stackoverflow.com/questions/13021/is-there-a-concise-way-to-do-namespacing-in-javascript Also there is links there to good articles on subject, like: http://peter.michaux.ca/articles/javascript-namespacing which does comparison of different ways of doing this.
The naming conventions we use are pretty standard. * CamelCase for JS namespaces and "classes" * sadCamelCase for JS attributes and variables * underscore_separated for HTML element IDs and such * hyphen-separated for CSS classes Sounds a little complicated, but it works pretty well. The underscore_separated HTML IDs is mostly because our backend languages use that as a convention, so it makes sense for us, but you might want to do something different. Hyphen-separating CSS classes seems excessive, but it's actually nice to have a distinction between them and HTML element IDs/names, and it doesn't seem to cause any trouble. For namespacing and source organisation, we use something like this: in MainNamespace/Foo/Bar.js: window.MainNamespace = window.MainNamespace || {}; MainNamespace.Foo = MainNamespace.Foo || {}; MainNamespace.Foo.Bar = (function(){ ... return whatever; })(); It has the advantage of being simple, and every file can be used alone (assuming it has no other dependencies), or in combination with other things that also define stuff in the same namespace. You can even check dependencies (`if (!MainNamespace.Foo.SomeDep) throw new Error("SomeDep is not loaded!")` if you need to, but we don't do that explicitly very often). Yes, you have to be a bit careful to not overwrite stuff, but in practice it doesn't seem to be as much of a problem as I expected. For bigger projects we have some other libraries that abstract some of this stuff away, and does a better job of managing (and autoloading) dependencies. But in general it's only saving a few keystrokes, so we've found it's often worth the extra boilerplate to arrange for a single js file to be properly portable.
Instead of referencing `window`, a better way to declare a main namespace is as follows. var MyNamespace = MyNamespace || {};
You should use prototype methods with your classes. prototype methods can be created once per class and not per instance. saves both memory and creation time. I wouldn't go too wild with the namespaces. Every . costs and doesn't really bring you that much. So I mostly go for a rather flat layout and use closures to hide everything I don't want to explicitly export. something like (function() { function modulePrivate() { } this.AClass = function() { }; AClass.prototype = { classFunction: function() { } }; })(); Maybe combine with with some [simple, light-weight inheritance](http://ejohn.org/blog/simple-javascript-inheritance/)
i like to use dojo's provide/require functions. that way, in addition to creating namespaces, you can separate the javascript into different files too. 
I pretty much agree with everything here. A few additions: - the main reason to namespace is to avoid global scope collision. Pick one global name (like the name of your library), and stuff everything under it. - prototype-based classes are a must for things you create a lot of. Don't use per-instance closures on those. It's reasonable to say "If a method starts with _, it's meant to be private. don't call it." - cache references in local variables. It's better to do `var Pixel = CoolLib.Pixel; while(true){ (new Pixel).draw() }` than to resolve CoolLib.Pixel at every iteration. At the same time, be aware that the "this" value in a function is relative to the object the function was called from (i.e. `var draw = pixel.draw; draw() ` will usually not do the same thing as `pixel.draw()`, particularly if you rely on prototype-based inheritance.) 
It's fine, at least as a starting point. As another poster pointed out, you should use prototypes for instance methods - they take significantly less memory. And if you're worried about nesting depth, it's also fine to assign to your top-level namespace: MyLib = {} MyLib.ASubNamespace = { ... } Each dot costs you a hashtable lookup - they're not free, but in typical usage they aren't much of a problem. If you're worried about the cost of this, you can assign to a local variable: var f = MyLib.ASubNamespace.AFunction; f(1); f(2); In a tracing-JIT like V8, this should even let the compiler inline the methods. Also, be aware of how to create private namespaces: (function() { // Private bindings here, assign to a global namespace if you want them to be public })(); That prevents private functions from being accessible externally, and is a bit more syntactically lightweight.
It may take a year or two to make it rock solid, but make no mistake about it, about 100 million web developers (html, css, js) will start coding their own back ends in the language they already know. I, personally, love it.
JSGI. Looks awesome and I'm dying to use it for a project but there is no way I can verbally pitch this to my boss staight-faced. :)
Why not link to what we want to see instead of some crappy blog. [enjoy](http://getfirebug.com/wiki/index.php/Firebug_Release_Notes#Firebug_1.5)
DId they fix the memory leak? And the annoying breakpoints that dont show red dots when you click, but still stop when debugging? I also miss being able to double click on an element in the html window and having it open for editing. There's been so many bugs with firebug since i started using it on firefox 3.0 and above. I miss the Firefox 2.0/firebug days. Edit: I'm using it right now and it seems like the inspector is much faster. The memory leak, I'll have to wait and see on that one.
I'll be as happy as an anonymous function in a closure when I can finally ditch PHP and just write JS all day.
Shame it doesn't fucking work.
still seeing a memory leak...
OK, I can look at this two ways: a) An interesting library extending what JavaScript can do, allowing webdevs to write applications. b) Web developers finally decided they'd like to make desktop applications, and couldn't be bothered learning another language.
&gt; Mike Radcliffe’s Inspector. A key feature, now solid as a rock. We don't have the rocks we use to have .. It worked fine *before* I updated. Now it's totally broken, great job.
&gt; WRONGO! Okay? sounds like one of my typical commit messages.
Take a). There are a lot of good things in CommonJS, especially for serverside javascript.
Not a big fan of using graphics in place of objects, but I'll let that slip. Here's the main problem with the article: * He did not point out that this system only applies to Objects. Yes, in theory everything is an Object, but the following are not passed by reference, they are passed by value: Number, String, Boolean, null, undefined. Again, however one must make the distinction between a Number value and Number object. If you create a number using the "new Number()" constructor, it is no longer a Number type, but an Object type of the Number constructor. The same applies to String and Boolean. JavaScript can be confusing.
&gt; **What you need.** &gt; &gt; If you’re on Windows, you will require the Mozilla Firefox Browser and the Firebug plugin. It's fine to require your readers to use the same tools as you, but it's misleading to say you *need* this particular software. You could use Opera with the Dragonfly debugger, or chrome with their debugger... etc.
Well said.
"The server at blog.one-geek.com is taking too long to respond." Yeah, really a long delayed update.. :( now seriously, i really wanna see this
Try bjartr.blogspot.com, the domain forwards there. A friend had the same problem, turns out he couldn't get to blogspot.com at all.
What do you think of this [view](http://www.reddit.com/r/learnprogramming/comments/asmuf/understanding_js_more_about_variables/c0j7he3)? Also, as I said earlier elsewhere, this series of posts is about getting a newbie as quickly as possible to functions, closures and prototypes. So he/she can begin to explore the language independently. Thanks for you valuable input.
Personally I think passing by reference or passing by value are simple enough programming concepts that newbies should learn them as part of their programming foundation. It's probably an easier concept than describing variables as 'immutable, distinct primitives'.
I think you misunderstood. All I'm saying is that it's easier if you consider the primitive values as immutable and distinct. Ie: say for example, there is only one 1 and all variables that have the value 1 points to this.
Not really related, but does anyone knows an efficient way to make deep copy of an object in JS?
From your linked comment: &gt; You can still consider them as being passed by reference but when you try to mutate them, the local reference changes to point to the new distinct value. Please tell me why this is a good way to view primitives? I see several problems with that: * It violates JavaScript's scoping rules. * It makes your statement about garbage collection false * The spec does not define it this way. * It makes (1==1) confusing with regards to ([]==[]) * Harder to visualise for a beginner (and that is clearly your target audience). * Why make it hard to explain "var a = 1, b = 1; a++; alert(a==b)" ? * Makes it hard to define "a===b" for number types, you'd be tempted to say that it evaluates to true if a and b point to the same number object, but then how do you explain (0/0 === 0/0) evaluating to false? How do you explain (0 === -0) evaluating to true when they are actually distinct? * Not the case with regards to memory (important for optimizing scripts). Yes, in theory you can describe a convoluted system of primitives being pointers to objects in the set of all primitives, but it'll contain many caveats and is simply less intuitive.
Why? Most languages treat number types as a series of bits representing value (eg. 32 bit integer, which in fact is what JS numbers are).
Because in higher level languages, you don't need to know the details. At least not for beginners. Sure it's important to know that JS number are 32bit floating point. But beyond that what's the need of knowing the implementation details?
&gt;It makes your statement about garbage collection false We could consider the primitive literals resolving to it's value. &gt;It violates JavaScript's scoping rules. I don't see how. &gt;The spec does not define it this way. Yeah but, can we teach anything from the spec? &gt;It makes (1==1) confusing with regards to ([]==[]) You mean `1 === 1` and `[] === []`? I follow Doug Crockford's recommendation and don't advise the coercive comparison operators. Anyways, as I said, we could consider the primitive values as distinct and immutable unlike arrays and objects. In this POV JS only looks at the reference. Easy. &gt;Harder to visualise for a beginner (and that is clearly your target audience). No; There are only references. To mutables and immutables. That is all. How the infinite set of strings are implemented are not the concern of the language user. Easy right? &gt;Makes it hard to define "a===b" for number types, you'd be tempted to say that it evaluates to true if a and b point to the same number object, but then how do you explain (0/0 === 0/0) evaluating to false? `0/0` is `NaN`. `NaN !== NaN` I might be mistaken in all this because I haven't thought this all through. But yeah, when you (or the people who're reading my posts) can ask these question, you're way beyond my league and the league of my little blog. :) Edit: Clarification
You could use JSON: function jsonCopy(data) { return JSON.parse(JSON.stringify(data)) };
So there isn't any built-in way to do it? I mean I guess it'd work using JSON but that's kind of... convoluted (also it requires libs you may not need otherwise).
There is no built-in copy function. It depends on what your requirements are but this is a very fast way to copy an object: function copy(object) { var f = function(){}; f.prototype = object; return new f; }; That copies an object using prototypal inheritance. Or you can write some kind of recursive loop to enumerate all of an object's properties. There is no right or wrong way and they all have drawbacks.
Ok thanks, I'll use that.
I didn't misunderstand you, I just don't think it's any easier, nor do I think it gives newbies any more insight into the language.
This is really cool, I'm really interested in this stuff. I came to see the 360 video, and it *is* awesome. But I couldn't get to the larger version, seems like your host is down. I also have another question, does your webGLU implement the same API as the traditional OpenGL Utility Library, or are they different? Again, really cool stuff.
Try going directly to http://www.cs.rit.edu/~bpd9116/webgl/videosphere/videosphere.html add ?width=1024&amp;height=768 or whatever you want it to be, add &amp;wireframe=1 to see the wireframe version. WebGLU (as of now at least) does not implement the same interface of traditional GLU.
Hmm, those are the same conventions I use, and I've occasionally gotten funny looks for it! I feel vindicated now.
Just the opposite here. I always access Firebug from the little statusbar icon, but I used to put it in my toolbar because I thought the big icon was so damn cute. I think the legs are supposed to be angle, curly, and square brackets, If that helps you appreciate it.
Can you tell us benefits from using it over, for example, dojo.require?
* It doesn't require Dojo (it has no dependencies) * Not tied to Dojo's class structure / inheritance model * You can declare a package as a bundle of JavaScript files *and* image/css resources I'm not an expert on Dojo though, so please correct me if I have this wrong.
So I think it's nice piece of code. Ideal for use with libraries that dosen't have file dependencies manager included, like jQuery. Thx for sharing!
Hey, thanks. I actually wrote it originally as a jQuery plugin, but decided it would be more useful on its own.
as a prototype user, i thank you.
I guess we like different things... The legs don't bend differently though, maybe you mean figuratively.
The function goFromHere is only defined within your document.ready function. So when you're trying to call it from the link, you're no longer in the document.ready function. The fix is easy... Just move the whole function goFromHere out of the document.ready function, and it should work as expected.
You're placing goFromHere() within the document-ready event handler's scope. However, when you clink the link, you're in the scope of the document, not the event handler (which is why the function can't be invoked). Simple fix: Move goFromHere() outside of the anonymous function you bind to $(document).ready() and leave the rest of the code the same. I believe it should work just fine.
Okay, I moved it out, but the problem still persists. (Actually, it was outside the function when I first started, but since it hadn't worked, I wasn't sure what was going on.) The code I'm using is [here](http://dl.dropbox.com/u/55596/www/reddit/safari_books_scraper.user.js).
Try loading jquery from within your userscript. You can do that by creating a script element and appending it to the DOM.
This script is working for me... The goFromHere() function is definitely being called when you click on the go link without errors.
The other thing you could try is giving that link an ID: &lt;a id="MyGoLink" href="#"&gt;Go!&lt;/a&gt; Then use that from jQuery to specify an onclick function: $(document).ready(function(){ $("#MyGoLink").click(function(){ // do something when link is clicked return false; }); });
Thanks, this worked for me. Not sure why my original code wasn't working on my end. :|
Here's a better way to write that chunk: (function($) { if (typeof($) != 'undefined') { function goFromHere() { alert($('#HtmlView').text()); $('#next').click(); alert($('#HtmlView').text()); }; $(function() { alert('Hello World!'); $('&lt;a title="Go from here"&gt;Go!&lt;/a&gt;') .appendTo(".global_searchL") .click(function(evt) { alert(evt.target); goFromHere(); evt.preventDefault(); }); }; } else { // jQuery doesn't exist or wasn't passed... } })(jQuery); If you're certain jQuery will exist, you can remove the anonymous function wrapper and condition: function goFromHere() { alert($('#HtmlView').text()); $('#next').click(); alert($('#HtmlView').text()); }; $(function() { alert('Hello World!'); $('&lt;a title="Go from here"&gt;Go!&lt;/a&gt;') .appendTo(".global_searchL") .click(function(evt) { alert(evt.target); goFromHere(); evt.preventDefault(); }); }; Clicks are now assigned using jQuery instead of the in-string attribute method you'd been using. What this will do is ensure that the click handler is registered with jQuery when `goFromHere()` is called (which calls the `click` handler on the anchor). Also worth nothing is the move of the function out of the DOM-ready handler for jQuery to ensure global availability before the `click` method is called. The click method on the anchor is passed the event (`evt` above) and `evt.target` will get you a DOM reference to the anchor that can be wrapped with `$()` to get the jQuery reference if necessary. Finally, the jQuery `ready` language has been shortened to the appropriate shorthand (passing a function to `$()` is the same as `$(document).ready()`. Edit: also `evt.preventDefault()` will keep your link from triggering a page reload/redirect when the link is clicked. This may or may not be desired but is generally used when assigning click handlers to links that you wish to only fire JavaScript and not direct the browser.
Good to have at least one commenter that knows the exact nature of the problem. Scope. Scope. Scope. It is one of the most important things you learn when learning programming, and especially important when you work with functional language.
I like it, it's a really nice and simple intro to objects. I only wish he would have included functions. Then it could be a recommendable tutorial.
Will sure do. :) Thanks for the motivation.
Me too! It's very exciting.
I tried it in Firefox, IE and Chrome. I must be missing something because this it's just an empty iframe every time. 
WebGL only works with nightlies of Chrome, Firefox and Safari for now. http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation
Nice. I think you should use JS syntax for the comments, though: &gt; flub.enemy = spike; this way. should be &gt; flub.enemy = spike; // this way 
Nice and simple. Really small thing though: I wish you switched the order for the dot notation and bracket notation (btw, the ES3 and ES5 specs use "bracket notation" and not "subscript notation"). The dot notation is actually just syntactic sugar for the bracket notation. Nitpicky, but heh. ;)
I do my dev in [Firefox 3.7](http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/) (with webgl.enabled\_for\_all\_sites set to true in about.config) . I've also tested in Chromium (started with --no-sandbox [which severely reduces security] and --enable-webgl). It'll work in those. Never managed to get ahold of a WebGL enabled version of Safari to test with.
omg. it's so cute
Nice enough article and all, and plenty of upvotes, but Javascript is most definitely not an interpreted language; it has always been a compiled language. The fact that JIT compilation has only been added to Javascript compilers relatively recently doesn't change their status as being Javascript compilers.
Javascript has never been an interpreted language? Really?
JIT (and tracing) compilers are the only compilers for Javascript. before that, they were all interpreters. besides, only language _implementations_ can be compiled or interpreted, not languages. edit: added (and tracing)
&gt; but Javascript is most definitely not an interpreted language; it has always been a compiled language uhm, afaik firefox's spidermonkey is an interpreter. rhino is an interpreter. afaik internet explorers js engines never compiled anything. the newer tracemonkey is a tracing jit, but starts in and falls back to the interpreter when needed. with most tracing jits, compilation and interpretation are entangled, because code is recompiled when (better) statistics are available. also, jsh is right; languages aren't inherently "compiled" or "interpreted" - there are *C/C++ and assembler interpreters*.
I'm not sure about this but doesn't v8 compile javascript? I could be wrong though, not my area of expertise.
&gt; We have some ideas on the parallelization of so called imperative programs. i don't understand why they're not using the webworkers message-passing model: just take the code and data that should run on the gpu out of the global scope, voilá, concurrency problems solved (and js coders are used to the async callback style anyway). update: &gt; $("div.test"). add("p.quote").addClass("blue").slideDown("slow").toGPU(); whoa, whoa! mixing dom and the gpu and everything and aaaahhh! that makes no sense at all! that said, most of the code samples look *a bit weird*.
v8 is a Just In Time compiler. that means javascript is translated to native machine code prior to execution; so yes, it's a compiler. tracemonkey is a tracing jit. it runs the code in interpreted mode and collects statistical data about execution, e.g. how often a function is called. so if a function is called *very often* ( - in a loop), it's compiled to machine code. if errors happen, execution fall back to interpreted mode. one may wonder: v8 compiles all code, tracemonkey just a tiny fraction. v8 is a lot faster than tracemonkey, so obviously, full compilation is better than tracing. that's probably true at the moment (not really\*), but tracings statistical approach yields the possibility for a lot of optimisations static compilers don't have; e.g. very aggressive inlining. i believe tracemonkey has *a lot* - yet untapped - potential. \* look at [LuaJIT](http://luajit.org) - tracing! (and faster than v8 - yes i know, comparing apples and bananas; but both are dynamic languages). &gt; An innovative trace compiler is integrated with advanced, SSA-based optimizations and a highly tuned code generation backend.
this is ... unsettling. i don't really understand it, but what about the http-headers that are sent to IRC? are they ignored?
I suppose they are ignored as bad commands. Perhaps this works with FTP and plain shell sessions as well.
Thanks for the detailed info.
I think the green blob in the diagrams should have a title "flub", I was confused for a few moments. It might be a good idea to point out (one of) the reason for using [] notation, and that is to allow pointing to variables that have names that cannot be pointed to using the dot, such as names with spaces or names starting with a number character (other reasons are probably more suitable in later blog posts, such as pointing to [counter]). Your object in the "Conveniences all round" section doesn't have a trailing semicolon (bad practice, one of the most common types of omitted semicolon, makes the closing "}" look like block syntax instead of object syntax if the whole object is not visible on the editor's screen). I don't like the use of inverted double quotes *within* code like [“enemy”], but I see how that can be debatable (note that at one point you forgot to invert them and used regular quotes: "enemy").
&gt; I wonder if you can take this idea and make a full fledged bidirectional javascript IRC client. http://sourceforge.net/projects/jisirc/
This is used in spam attacks since a couple of days on Freenode.
Right, but jisirc relies on ActiveX controls: aSockets[this.sock] = new ActiveXObject("Catalyst.SocketCtrl.1"); The script above does it with pure javascript (no ActiveX socket helper controls) and is cross platform.
You can't keep the connection alive and you can't receive anything, it can't be used to write a usable client.
1. a way to slowly client-push data to the server after a server response 2. a way to get the IRC server to echo http response headers 3. a forgiving browser that ignores badly formed response headers You're right, I don't think it will work.
About the name for "flub", I thought it was implied. Now I'm having second thoughts. :D Yes, about the subscript (bracket) notation, I was planning to introduce the specifics later. The rest of the corrections are noted. Thanks for the detailed comment.
Out of curiousity, what did you find wrong with Dojo? I'm no expert, but I use it pretty extensively and I'd like to know what to look out for.
Dojo just seems to be generally unreliable once you do anything custom/not in the demos. Grids are a big pain point, and the chart lib has a lot to be desired
Just make sure you take the license into consideration. Since 3.0 it is licensed under GPL 3. Explicitly check what you can and cannot do without a Commercial license: http://www.extjs.com/products/license.php http://www.extjs.com/products/license-faq.php
If you like the overall feel of Dojo you might look at Google's Closure, which looks and feels a lot like Dojo(clearly they were inspired by it) but may be more mature what with being used in Google production apps.
of course!
Been making fat client apps with Ext JS for about 2 years now. It has been very solid. Very very few bugs, and the ones we found were quite minor. Great set of widgets and pretty easy to extend. The license is cheap considering all the stuff you're getting. 
We've basically given up on the widgets that ship with dijit, and on their data store abstractions. But I still think the dojo core is pretty sound. It's effectively a good standard library, class system, code loading framework, build system etc. Even the widget framework, while the widgets that ship with it are rather brittle and inflexible to custom requirements, the base classes they're built on are still a sound basis for building your own widgets. The data store abstractions we found weren't quite the right abstraction for the kind of APIs we wanted to use it with, and were a bit buggy/complex/opaque too. But maybe have improved since. But the core XHR/transport stuff is solid and useful.
I used ExtJS to develop Intranet applications for my last job. Incredibly stable, expandable, and compatible. I would recommend it, though I haven't used Dojo.
Also, the documentation is superb. http://www.extjs.com/deploy/dev/docs/ It has absolutely everything in the framework right there, all organized.
Watch out for the licenses. It swithces to GPL ish.. ie its a "modified" GPS that says if you "extend" a base class and wish to keep it, you must take a license. http://www.jroller.com/sjivan/entry/my_response_to_jack_slocum
So, this is why Digg users don't like reddit... on Digg this thread would consist of "LOL" ... here it's "I wonder if you can take this idea and make a full fledged bidirectional javascript IRC client"
Digg's comment system does not encourage conversations. Because comment responses are hidden by default, diggers seek attention by posting comments responding to the post itself with less interest in what everyone else is saying. Besides getting to see interesting posts, reddit wins out for me because the comments are often times more interesting than the post.
jquery :)
can you release the jquery version? maybe it will be added to core?
Maybe I'm just dumb but where are the actual download links? When I click 'Get It' it just tells me there's many to choose from but doesn't show where the hell to choose from. 
Have not really used Dojo, but ExtJs is very solid. Using it in a heavy client for complex gov't app using all widgets, zillions of tabs, grids, forms, etc. Easy to extend for custom widgets. Similarities to Swing. Lazy Rendering. Idiosyncrasies yes, but no major bugs to speak of.
Neat reference.
quirksmode.org is a better reference in my opinion.
That site has an odd way of SEO.
Layout aside this is a super helpful link for me. I just began writing my own CSS-modifying plugin for various libraries (call it a learning exercise) and although I have most of this functionality it's nice to have a lengthy reference on one page.
I never use vanilla JS and if someone quizzed me on the spot on how to do some complicated dom traversal and modify class styles and attach events without a library, I would be screwed. I think jQuery is awesome for your own projects and even startups, but when you get to companies like Apple or Google, they don't want anything to do with libraries that aren't invented in house. Apple and Google will have their own JS frameworks that are added to and modified and you would be expected to act like John Resig and crew and maintain them. Basically, you'd be an idiot to not leverage the power of jQuery, but when you go to big companies who are very web centric, you can't get away for a library because A.) It's not created in house, B.) Speed issues.
Depends on what you're doing. Generally speaking, libraries are great to deal with matters of the DOM. The effort necessary to create a well rounded, cross-platform DOM library seems too great to try to reinvent that particular wheel every time. But everything else is for grabs, as far as I'm concerned. 
Follow up: When you think about JS, are you thinking about JS or are you thinking about the DOM ? In response: What you said about Google/Apple makes sense. In fact, I would expect just about any company with a large code base to be using in-house stuff (not just with javascript but other languages). Just an observation, but looking for Javascript answers online usually leads down one of two paths: 1. You find a forum from 5+ years ago that is not really relevant anymore, or 2. You find someone showing you how to do it in jQuery. Perhaps the documentation for jQuery is killer here. It is _the_ authoritative reading for getting something done (albeit using a library), whereas I doubt many people would (or could) bust out the ECMA specification and find what they were looking for. Speaking of documentation, I find [Quirksmode](http://www.quirksmode.org) to be very useful.
I'm thinking about the DOM, because that's what I mainly use it for.
We use jQuery at my place of cubicle imprisonment, or rather, we started using it on new development. What we now have is a whole mess of code written in vanilla JS, Prototype, and jQuery. My boss has no idea why I think about jumping out the window some days. 
I hear you. I first learned JS, then Prototype, then jQuery. I have one big project that I made which also includes all 3 and it's a freaking maintenance nightmare.
Word. It is interesting now with engines such as Rhino or V8, because you CAN write javascript and not have to worry about inconsistencies... Unless you plan on porting it.
True, the cross-platform-ness might be the biggest win IMO, and I am sure just about everyone here can agree to that.
Nothing beats doing things the hard way.
TIL: function im_stoned(data, callback) { data = data+1; callback.call({"data": data}); } im_stoned(4, function() { alert(this.data); }); I had no idea you could cast to *this* like that.
It is not that hard when you know what you're doing.
I only use vanilla JS when writing like Firefox scripts and such.
thanks for giving me a headache dude
Having the knowledge to do it without a library is important, and I've spent a lot of time doing this. I learned a lot by actually trying to make my own library, which was basically a slimmed-down customized version of Prototype. This was a good way to learn the inner workings of doing DOM manipulation and building cool JavaScript plugins. But in the end I've always used jQuery on all my public projects, simply because it's fast and easy to implement. Everything in JavaScript these days is about managing the DOM, and no library besides jQuery has the DOM as its core focus. Not having to deal with all the cross-browser DOM bullshit is always nice. [Somtimes] I find it hard to even the most simple tasks without it.
I seen you in #javascript talking about that today
Thank you for this. So you dont think its crazy to keep your own personal library of augmented DOM functions and properties ?
Why not? Whatever works for the developer I say. That kind of stuff really only matters when your working on larger projects with a team of programmers, in which case you'd probably use a in-house library (as mentioned in a anothers' comment). Personally I focus on speed and reliability for my clients' websites, so I'd rather use something like jQuery which is more stable and polished than a custom library would be.
That's how most native forEach implementations work, basically. Use call so client code can just use this in the callback function to refer to whatever element they're on in the iteration. Javascript has all sorts of odd this tricks. Call call/apply with undefined or null and this refers to the global object. Likewise if you call window.eval (obviously, when you think about it). You want head hurting, check this out... you can't call call on a host object in most browsers because host functions aren't really functions so don't have the function prototype, so, eg: alert.call(undefined, 'foo'); doesn't work. But, you can use call to get around this call limitation! Function.prototype.call.call(alert, undefined, 'niiice'); Yes, two calls. I find that absurd ;)
All your javascript? Can't say. It depends on what your target is. You can program javascript server side. There is javascript.net even. In these cases, using a framework is probably not necessary. If you are talking about javascript being run in various web browsers, absolutely use a framework. Especially when some browsers implement certain features (like forEach) and others don't (a situation that will become even more important as browsers begin implementing various ES5 features), differences in selector engines, differences in optimization techniques, and, especially, DOM access, not using a framework is absurd.
You don't think Google and Apple use libraries for a lot of sites? I'm sure they use them for some things. You think they have to invent their own library? What is it about a Google or Apple website that makes it so they cannot apply jquery or another library? If I worked at Google or Apple, and someone tried to tell me to invent my own library to do something that an existing one would work for, I wouldn't do it.
Google did invent their own library, Closure, but they took a lot from Dojo, and Apple has their own library, Gianduia, but they also use SproutCore which they didn't invent.
&gt; If you are not using a library, such as jQuery, for all your javascript, in 2010, are you doing it wrong? Yes. jQuery is fast, reliable, well-documented and widely used. It is effectively an open standard. The next person who has to maintain your code will appreciate this (this may be you in 6 months time when you've forgotten about everything you did). Even if they don't know jQuery, they can go and learn about it from the (excellent) web site, books, blogs, etc. If they get stuck, they can ask someone on a public forum. On the other hand, if your site is written using your own homebrew libraries then you better make sure things are thoroughly tested and well documented or someone will be cursing your name sooner or later. Thousands of hours of development, testing, optimisation, etc., have gone into jQuery et al. You would be a fool not to leverage that. That said, it's good to know how these things work. You should certainly write and maintain your own libraries of JS functions, but try to build them on top of jQuery or one of the other well-known libraries wherever possible.
It's not a matter of what *you* know, but of what IE *understands*.
If you are not using a library, such as jQuery, YUI, prototype... you aren't doing it "wrong", you're just fucking insane. Enjoy landscaping with a toothpick.
I use jquery heavily but I still ended up creating an ajax handler library on top of the simple ajax jquery does (creates and manages turning table cells and divs into various forms on mouse clicks, handles the saves, handles the return from sending to the database, and changing the form field back into td/div).
I'm doing my own framework since some months ago; my objective is to generate full web application interfaces directly in javascript, no fully components based but with a battery of class oriented HTML generators that latter will be personalized in the own application classes (I call it modules). It does some interesting things IMHO, the latest and most interesting thing for me right now is dynamic load of external components, I maintain a project that let me invert time in this develop. It loads quite fast, does exactly what I want, and does it my way. And I'm still maintaining even IE6 compatibility. I keep an eye on the main frameworks for learning purposes, but I believe that every developer has his own vision of the code and every project has is own objectives so for me is better a specifically designed tool for what I want, than a do-it-all-right swiss army knife framework. And, WTH, I don't want to loose the fun of doing it myself. PD. Edited to [try to] correct my sometimes-confused english sorry :)
I think your problems started when you mixed Proto with jQuery - the first one can do everything that the second one + it is easier to organize Prototype-based code.
Exactly - if you are working in a predictable environment you can just write plain JS (and use all webkit/gecko goodies)
I think it depends, are you after absolute and complete lack of any excess? Then avoid the jQuery. But for most apps that have a decent amount of js, or pretty much any js-heavy app, jQuery is the way to go. I shouldn't just say jQuery. Depending on your task, there are all sorts of libraries that are better suited to other tasks. But jQuery is a good universal library. 
I'm not sure if it was your intention or not, but your presentation on the subject of prototypes is skewed at best. If you're trying to do what your series' title implies (helping people understand js), then discussing prototypes using a non-standard property would be the worst possible route. Take note that you weren't actually discussing what prototypes are, but rather just elaborating on a part of their function (ie. the prototypal inheritance _chain_). Since you already discussed objects on a previous post, it would have been better if you actually dived into the deeper parts of js' oo nature. I was expecting something like a discussion on constructors (particularly the Object constructor) and the prototype property of that constructor. While inheritance is one of the most important reasons for the existence of prototypes, let's not forget that the real reason why we have them is to be able to define the blueprint for objects.
True. For small and relatively quick projects I tend to lean towards jQuery. If it's some sort of complex web app, more and more I'm feeling YUI3 is the way to go. It has nearly all of the features of jQuery plus a boatload more you can import at will.
&gt; With that, I’m going to pretend that the ECMA standard, IE and Opera doesn’t exist! Why oh why are you teaching non-standard techniques? *Nobody* uses the technique you discuss and if they are it's because they were expecting ECMA edition 4 to pass, that's not what happened, we got ECMA edition 5. Why aren't you going down the road of: function Thingy(color, speed) { this.color = color; this.speed = speed; } Thingy.prototype = { size : 20, weapon : {name : 'slime', ammo : 100} }; This is simple, elegant, and exactly how JavaScript was designed. Your readers are going to have to learn to code like this anyway so why go on some detour they will *have to* forget? If your readers are not up to the point where they understand functions then teach them bloody functions, after that teach prototype inheritance, there's no use for prototypes without functions anyway.
Did GPL v3 ever add a clause for SaaS environments though?
I don't think it's crazy, no. In fact, I think it's crazy loading something like jQuery if all you want to do is use the $() function. Having said that, I think it'd also be crazy to end up writing your own library that does what Prototype/jQuery do. These projects have thousands of hours of work in them which you're unlikely to match on your own, so you might as well make use of them. Nothing wrong with keeping a library of functions for particular situations, though.
Whats folks' opinion here on just incorporating jQuery into the language itself? I wouldnt say NOT using it or something else is "doing it wrong", but youre really limiting yourself. Eventually a new thing will need to be added that you didnt think of, but that one of those libraries would make alot easier. I learned this the hard way.
There's a **lot** to learn about functions before one can effortlessly grasp JS constructors. Topics such as scope, the "this" variable and of-course functions. None of which have anything to do with the idea of prototypal inheritance. There are many voices who do not take too kindly to JS's constructors (which you claim to be elegant.) I subscribe to this view. Conforming to JS's tortuous constructor pattern is a necessary evil. But I feel that we can tackle this evil confidently only by unraveling the tangled mass. My approach is to lay it out bare for an overview and then build up on the practical side of things. Again, this is about understanding ideas. The practical side of things although very important follows the understanding.
I chose not to as I have not introduced functions yet and constructors are functions. I feel that there's lot to learn about functions before someone can even begin to understand how JS's constructors work. I will be covering the topics you mentioned. But this is just a quick glance at what the core idea is all about.
Of course it was a mistake. This was when I was a Web noob about 4 years ago.
They wont ask you to invent one, but you'd be required to maintain it and that means knowing the DOM very well.
I hate how it is an implicit assumption that you are scripting the DOM of webpages when using javascript. My javascript OS is gonna kick your ass when i release it.
Well, really, you are only invoking the call function on itself. It's confusing because of the silly syntax javascript can have sometimes (thanks to liveScript's affinity towards Java devs...). The `call` function extends the base prototype of all functions, and therefore has somewhat of a circular reference. The whole `Function.prototype` part would be equivalent of, say, a static function in some of the more Classical languages. This is just good ol' static recursion (with stupid syntax). I'm pretty psyched about the addition of Object.create in ES5. Yay _actual_ prototypal inheritance.
I think it's generally pretty important to understand the way that the language is structured. I also think the DOM has quite a few quirks and problems that are essential to being an effective web developer in Javascript. However, rather than just solve the problems that so many other libraries already have, why not just dig through their source code. You have to be pretty diligent to _actually_ understand something rather than just looking, but it can be insanely helpful to peak in to the jQuery source for things. I would suggest you subscribe to the jQuery GitHub updates and you'll be notified each time there is an update and you can see how the library is writing and molding in vanilla JS. Also, with a library like jQuery it's fairly important to learn the aspects of the language and of the DOM &amp; HTTP models that it doesn't cover. Specifically, JavaScript inheritance is almost avoided along any major code re-use patterns or suggestions. I would certainly suggest looking into a pattern for code structuring and re-use that fits your style and application.
I'm _sure_ that my nick isn't haxd on freenode.........
Why did you choose to teach this before functions? I can't say I've ever seen objects of any flavor come before functions of any order and am intrigued.
Nothing particular. I've had a lot of success with explaining prototypal inheritance to my friends using `__proto__`. And so far in my posts, I've had everything covered to introduce it. So I guessed why not a quick overview. If I'd try to Justify more, I'd be make it up. I just thought this was cool. I'd seen many people delighted that the idea of inheritance in JS is so simple. That's all.
It's not casting to `this`, it's assigning to `this`. 
I agree. Stay away from dijit and dojox and you should be fine. Things like `partial` and `hitch` found in the core are invaluable. The biggest issue with Dojo is that it's documentation is in disarray. Really. Really. Bad.
apologies.
Big +1, javascript is so incredibly flexible that you can easily pervert it into unmaintainable, unpredictable hackery. So many people waste tons of time trying to turn it into java. You are better off starting w/ jQuery and learning from it the best patterns for using JavaScript. jQuery really embraces javascript and all its prototypal-oo, scheme-like goodness whereas many libraries make it look like the red-headed stepchild of Java
Sorry about that, I named it that. Just say "jay ess gee eye" instead :)
Here's mine: http://narwhaljs.org/
I throw together lots of little demos and such without using any sort of library. But usually I don't care about cross-browser support for demos. The moment you want to use XHR or events in a cross browser way you need some sort of library, or perhaps just a collection of helper functions you wrote yourself.
Neat. Thanks for *not* making it a jQuery plugin.
Here is an analysis of the answers: http://www.nczonline.net/blog/2010/01/26/answering-baranovskiys-javascript-quiz
1. A variable declared inside a conditional is initialized whether the conditional executes or not. So the code is parsed, `a` is initialized (set to undefined), _then_ the `"a" in window` check happens. So the conditional fails, because we've initialized `a`, and we jump straight to the `alert`. I missed this one. 2. A named function expression (as opposed to a _function statement_) does not define its name as a variable in the current scope. I missed this one. 3. Declaring an already-declared variable will generate a warning, but _will not_ overwrite `a` with `undefined`. Alerts the text of the function. I got this one right. 4. It never occurred to me that you could assign to the `arguments` collection. I don't know why you would do this unless you hated yourself. I got this one wrong. 5. Spec says that if the first argument of `call` is null or undefined, `this` will refer to the global object. Useful in situations where you don't know the name of the global object, I suppose. I got this one wrong.
Yeah, `typeof NaN` is `number`. That one is pretty stupid.
Man, I really don't know the answer to these. I'm always praying to the JS-gods my copy-pasted lines work as advertised. I have spent many an hour bashing my head on my keyboard because of that. (I love jQuery)
&gt; I don't know why you would do this unless you hated yourself. applies to pretty much all of the above, I think.
Why can't I zoom on my iPhone? Lame. Also, downvotes for pointing out an obvious flaw in someones shitty blog? Lame. Here's your problem: &lt;meta name="viewport" content="width=450; user-scalable=no" /&gt; Explain to me how you expect anyone to read your tiny ass font at 450px? Stop fucking up my web.
&gt; I don't know why you would do this unless you hated yourself. I agree, I got the others right, but I thought that it would be retarded to be able to modify the arguments array. Apparently ECMA doesn't agree with me.
A personal favorite onclick="onclick(alert())"
new self [ ((typeof 1).replace(/^./,function(a){return a.toUpperCase()})) ] (10); ??
Read Javascript the Good Parts and stop shitting up the internet with copy and pasted atrocities and mash-buttons-until-it-works terror
Author kinda reminds me of [Joe Lauzon](http://fiveouncesofpain.com/wp-content/uploads/2007/12/joe_lauzon.jpg)
assigning into the arguments is very handy for setting a "default" argument. Something like ` if( arguments[1] ===undefined) arguments[1]=='default'; `, allows you to loop without the loop itself having to be cluttered with checks for arguments, and without having to recreate the array.
The first two were straight-forward to me, but I got 3 and 4 wrong (I too thought the arguments collection would be read-only), and took an educated guess at 5, which turned out to be correct.
Is this meant to be a joke? Wasn't this exact same type of site ripped off my microsoft in china?
You would say that, mr Narwhal!
5 for 5.
Try this one: var a = 0; var b = -0; a = 1/a; b = 1/b; alert(a + ' , ' + b); Yes, in JavaScript there is a difference between +0 and -0.
FYI, http://www.reddit.com/r/programming/comments/ap6zy/gordon_an_open_source_flash_runtime_written_in/ Edit: I am not trying to say it is not proper Reddiquette to submit this, I am simply linking people who haven't seen this before to comments of the previous posting.
Nice summary :)
helpful, thanks.
uhh, tlrobinson is mr narwhal. i am just a minion
I apologise for the mixup. 
Signed zero and infinity is a commonly implemented floating point feature
Creating an array and then joining this array is faster than just concatenating the string? That is fucked up. But very good to know. Thanks. I'll have to test this on Node, to see if it's the same there.
Yes, quite fucked up. Only in IE&lt;8, though. The array seems to add a couple of ms to the other browsers' scores.
article doesn't make clear that it's not the DOM being the problem here, but really string-concat. same thing here, array.join() typically 2x as fast var stringConcat = function(times) { var string = ""; for (var i=0;i&lt;8000;i++) { string += "foo bar di bar"; } return; } var arrayJoin = function(times) { var string = []; for (var i=0;i&lt;8000;i++) { string.push("foo bar di bar"); } string = string.join(""); return } var timeIt = function(fn) { var msStart = Date.now(); fn(); console.log(Date.now() - msStart) + "ms"); return; } timeIt(stringConcat); timeIt(arrayJoin); edit: code fix 
Yes, but I don't think many people are aware of signed zero in JavaScript (I only use Infinity to demonstrate how to see the difference).
No. There are situations where a library would be the wrong solution. For example, at my place of employment, I'm responsible for some button/widgets that people can place on their web sites. I need a little bit of JavaScript to do some AJAX queries and minor DOM tweaks, but the uncompressed source file I'm working with is still under 10K. Now, suppose I decided to include even a compressed version of jQuery in my widget (to say nothing of an uncompressed Prototype or something even heavier...). I'd balloon my payload's size unnecessarily, for no benefit - and it could slow down other users' page-loads. Yes, this means I have to handle certain browser incompatibilities myself, and I don't have $() available. It annoys me every time I type out `document.getElementById()`, but I've re-evaluated the idea of using a library a couple of times. It might make *my* life easier, but it'd be the wrong thing for the project overall. 
Doing it wrong.
is there a subreddit for jQuery?
Of course I should point out that's just a test case that exhibits the same behavior that a larger project does.
http://en.wikipedia.org/wiki/JavaScript#Versions Also this is javascript, not ECMA script. You usually use ECMAscript to code not these new javascript versions. See here: http://stackoverflow.com/questions/1330498/what-is-cross-browser-support-for-javascript-1-7s-new-features-specifically-arr
get firebug. does it load the js file? if you're doing local development (file://) you'll have trouble, deliver via httpserver for minimum pain.
^^ get firebug 1.4 currently 1.5+FF3.5+ubuntu = trouble
Firebug 1.5+FF3.6+Anything = trouble. Inspect Element stopped working.
Chromium's ECMAScript engine (v8) doesn't support JavaScript. There's no reason this shouldn't work in Firefox though.
Works fine in Gecko/20091101 Shiretoko/3.5.5pre and Gecko/20100203 Firefox/3.6 here. Modified the JS to: alert("Hello World!") function foo() { yield 10 } alert((foo()).next()) Which gives me one alert box with "Hello World!" followed by one with "10" as expected. Have you checked the error console?
How so? Using Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2) Gecko/20100203 Gentoo Firefox/3.6 with Firebug 1.5 and Inspect Element works fine here.
&lt;http://www.reddit.com/r/jquery/&gt;
dude, thanks!!!!
The DOM is a problem if every time you call createElement, the browser has to redraw. Browser re-draw is the most over-looked performance sink of many web applications. The article doesn't touch on that at all though. I agree that string-concat is slow (at least in IE), and using arrays is faster in javascript. But this is old news. 
Let's do Second Reality JS!
No sine scroller?
I liked the original Unreal better... for its time, anyway... but man those days were cool... downloading some new crazy demo on a 1200-2400 baud modem.. ha!
The size of today's demo has scaled up to match the increase in speed ;)
Will do one today or tomorrow. And some "rasterbars". And after that i will do some 3D. If i had the time i would recreate some classic demo in JS.
Shadybobs!
When you do, you can use [this](http://www.reddit.com/r/programming/comments/azf5e/hi_reddit_here_is_my_open_source_flashbased_amiga/) for that true old school feel. Don't forget to make the entire browser cycle through different colors for a few seconds while your demo uncrunches!
the table under "benchmarking the variants" (on page 3) may be irritating at first - because the author uses a single core cpu. even on my dualcore, 4 workers don't seem to be significantly faster for the demo (most of the time they're even slower). i haven't read the whole code, but i think all this looks a bit suspicious. i mean, the webworker part - the rest is quite interesting. i'm especially shocked by the performance gain through manual loop unrolling. i thought (tracemonkey) trace trees could optimize that :( **update:** aha, it seems the manual unrolling perf gain may be because firebug blocks the jit compiler! **update2:** disregard that, i su**. here are my results for the live demo: direct mode Worker mode 4-Worker mode basic variant Working ... 1038 ms. 961 ms. caching Working ... 336 ms. 319 ms. no function calls 261 ms. 291 ms. 265 ms. the "Working ..." indicates that it doesn't finish without the firebug console open. with firebug running: direct mode Worker mode 4-Worker mode basic variant 1248 ms. 1189 ms. 1161 ms. caching 344 ms. 337 ms. 337 ms. no function calls 317 ms. 332 ms. 337 ms. so, there's not much difference, seems the firebug/jit issue isn't the problem anymore. still - i can't see the **4x speed improvement** the author reports for manual loop unrolling! in chrome, loop unrolling helps a bit more, but not that much either. but repeated clicking on the web worker benchmark makes the time needed go up more and more. *i'm not convinced.*
Hey man, can you hook me up with a free copy and I will review it on the O'Reilly site please ?
That's what she said.
As I work with javascript a lot at my job, I understand how complex and mysterious it can be. What I don't understand is the need to know every nuance and trick. Trial and error, debugging. I can do a lot of great programming with out completely understanding every quirk javascript has. I guess what I'm trying to say is if your new to javascript, don't get hung up on this stuff.
Switch to VGA XMode :)
Indeed. Anybody who runs into stuff like this on a day-to-day basis is probably doing something wrong, or absolutely hates their coworkers.
Moot point as I would fire anyone who wrote code like that.
&gt; Please make sure you select answer in each question, as lack of answer is not checked and counts as failure. Does that mean they failed their own quiz?
I would then go through the trouble of hiring them again, just to have the joy of firing them again.
that depends... we write/maintain an extended xforms implementation and we try not to use external libs to minimize page loading time and dependencies.
How much is this book implementation specific (aka. browsers)? And how much does it rely on YUI?
123)-456.7890 validates against the example given. If you wanted to test for balanced parans in the first triples you'd have to do something like ^(?:(\\(\d{3}\\)|\d{3})) to start out.
Definitely. Pretty much everything on this quiz is mentioned by Doug Crawford in [his book](http://oreilly.com/catalog/9780596517748) and [recent talk](http://www.youtube.com/watch?v=hQVTIJBZook&amp;feature=player_embedded#) as "The Bad Parts" and [JSLint](http://www.jslint.com/) will probably tell you, that you have brain damage if you use things like the "with" statement. 
(function f() { function f() { return 1; }; return f(); function f() { return 2; } })(); It's good to point out that this sort of nonsense does not return 2 in Rhino. Regardless of the --version. Wait... Is that right on Rhino's part? Fuck if I know. 
Why shouldn't it validate? It's clearly a valid phone number with a missing parenthesis, and it's correctly reformatted by the provided replacement string as "(123) 456-7890". Leaving out the requirement for balanced parens was intentional.
Got 13 out of 14 wrong bitches - beat that!
It doesn't rely on YUI at all (or any other framework), although it does include some info about the YUI minifier, etc. Much of the book is specific to browsers, since it's meant as a practical guide for web developers (plenty of real-world cross-browser benchmarks are included).
I can't, but O'Reilly might (although I doubt it). However, I'm currently offering a contest for five free copies: [*High Performance JavaScript* giveaway](http://blog.stevenlevithan.com/archives/high-performance-javascript).
[I left a comment for that last week, heh.](http://blog.stevenlevithan.com/archives/high-performance-javascript#comment-47030)
Or works on building and testing a cutting edge javascript engine ;)
As far as I know, their is no wording for SaaS environments, so it's pretty easy just to GPL3 your JS code without threat to the server side logic.
The purpose of the test was just to see how far your knowledge of the language extended. It is not advising you to use those constructs. It is merely a test to see how knowledgeable you are... nothing more.
The base64-encoded logo is a nice touch.
using the what.cd background i see
Neat. When i try to type in the firefox 3.6, the letters don't show up, and there's no apparent way to save...
Yeah what gives? 
The MediaWiki look &amp; feel is now worth emulating? I'm old.
kinda similar but not the same. Did what.cd invent wood panel background.... and what does that have to do with the wiki software?
Fascinating, but I'm curious how it would do against a Database that is massive or much larger than the sample. 
This is brilliant! How can I trust it?
MediaWiki called, they want their (most likely trademarked) logo back.
I just got goatse'd in text form :(
In fairness they look pretty damn similar to me: * http://flx.me/wp-content/themes/3.0/images/background.jpg * http://what.cd/static/styles/postmod/images/wood.jpg I doubt What.CD will be suing him for copyright infringement any time soon...
It's all in one file and it's only 500K. Get in there and look if you want to be sure.
nothing but what.cd did invent *that* wood panel background
you first need to save the html to your computer
I agree, it does look the same. In fact it looked the same when I started messing around with the image. The thing is that I never got it from what.cd but from a free web design resource site. Maybe deviantart, I'm not sure.
:-)
Well, I personally think its a clear layout for displaying wiki's. If you have a better suggestion please do share.
Personally working with a sample that has grown up to 5MB, still works snappy. I have something like 70 articles that are well filled.
You can probably diff the core code against the tiddlywiki core. Also, if something nasty would be in it you'd noticed in the comments already. This html should be the least of your worries, do you check every binary file you download?
thanks! Doesn't work on every browser but on most it should work well. I have to admit that there will be differences graphically between browsers, but the core functionality should work fine.
I checked their logo [here](http://commons.wikimedia.org/wiki/File:Mediawiki-logo.png) and I couldn't find evidence that I shouldn't use their logo. Next to that this was originally a personal project, I'm not making any money from it. Feel free to insert your own logo in base64 or make a suggestion of what kind of logo I should use :-)
Tip: use this in combination with dropbox to have the same wiki distributed everywhere.
Like I said, [I'm old](http://c2.com/cgi/wiki). Wikipedia has certain design constraints that *kinda* justify all that administrative debris, but if you're already having a personal Javascript wiki, I don't see the big overlap. Wikipedia is serviceable, but hardly a paragon of good design, at least in my opinion. IANAD.
Wrong... &gt;In short: you are free to share and make derivative works of the file under the conditions that you appropriately attribute it, and that you distribute it only under a license identical to this one. [Official license](http://creativecommons.org/licenses/by-sa/3.0/)
most binaries I end up using are pretty popular. I went through the source but if you've looked at it it's a little thick in places. It specifically caused all sorts of alerts in firefox when it tried to change it's own file (which obviously is the only way it's going to work BUT) it got me thinking about telling my family to never ever say okay unless they understand what is going on. I like this tool and would like to use it so I'm looking for some way to verify that it's not going to fuck me, especially since I've never heard about it before and it was put out there by one of it's own authors. Diffing against the tiddywiki core might be a good idea, I appreciate it. 
Where is the signup?
Which I'm doing :)
I stand corrected. You've done a nice job on the clone. It really deserves its own logo, though I've no idea what that might be. I like the idea of a TiddlyWiki just for cataloging ideas/documentation, without all the confusing GTD functionality. After playing with TW some time ago, I ended up with VooDoo Pad, which I prefer mostly for the cool sync features, as I can (incremental) sync several computers with the same document via a SSL webdav server.
(repost from [dupe](http://www.reddit.com/r/programming/comments/b0ypn/hey_reddit_i_created_a_wikipedia_clone_out_of/)) I'm a lurker in the [TiddlyWiki community](http://groups.google.com/group/TiddlyWiki/), but haven't seen that being mentioned - you should post about it there!
Why did you change the TiddlyWiki core instead of writing plugins? As far as I know, this means we won't be able to upgrade TiddlyWiki.
I mean OK, but you get quite a bit of functionality at that cost.
No IE or jQuery in this test? Kinda pointless then isn't it.
I'm guessing, since he has a MacBook Pro, it's difficult to get IE running. You could always download the benchmark and try it yourself, as he suggests at the end.
Where's the standard deviation?
There hasn't been a new version of Tiddlywiki in a while. It wasn't possible to change all behavior with plugins, hence I made some rudimentary adjustments to core. It wasn't anything critical though. I just checked and you can still upgrade without losing much
Thanks :-) Just like you I wanted a tool to save my thoughts and documentation, usually all kinds of second tier stuff that I'm bound to forget, such as server configuration, small project documentation and all kinds of other stuff. I use dropbox to sync up with several computers, which also supports versioning. I've looked in to VooDoo Pad, but it sadly only works on a mac. I wanted something that would be truly cross platform. I'm playing around with the idea of building a iphone/ipod touch interface in the next ver.
He's calling his MacBook a 'top-of-the line 2009 computer'... top-of-the-line laptop maybe. And repeating these tests without clearing the cache, pointless? I feel uneasy with the memory usage tests, too. Different Platforms would make a nice comparison, how does this perform on an iBook G4 (4years old)?
Cute!!! I'd like to show this to my web dev crew!
What is the SD... simply?
Chrome again! Damn, I love my FF, but it's getting slower and more bloated each time I install it. (Making a new virtual machine, I often see software freshly installed) - before the plug-in's are added. =(
JavaScript can be slow if you don't do it right, but, there is no reason to be afraid of using it just because of the speed issue. Browsers like chrome and safari can make even the crappiest and inefficient JS code run like lighting. In terms of the first page load, it's best to have your js includes at the end of html instead of the beginning so that the page doesn't freeze on load. Or if you want to be even quicker, you can asynchronously load your JS using AJAX. Either way, once the JS is loaded, it's up to you to make sure you onlicks and ajax pollings are efficient and quick. 
He mentions jQuery but it isn't in the results. Then I saw at the top of the page where he says that this is a work in progress. I'm pretty curious to see how the frameworks stack up against each other. We see a lot of browser speed tests.
Think of it as how spread out the numbers were before you calculated their average. 
It looks very fine. There are some useful Plugins. http://www.martinswiki.com/#MediaWikiFormatterPlugin Allows you to insert MediaWiki formated text into a TiddlyWiki. http://www.martinswiki.com/#MediaWikiAdaptorPlugin Adaptor for moving and converting data from MediaWikis. I want to hide the view-buton . Is this possible ? I dont like the Blockquotes. It is better in http://nathanbowers.com/gtdtw/index.html#FormattingInstructions%20%5B%5BAbout%20GTD%20TiddlyWiki%5D%5D | | It is to large. I like it smaller like | | ------
cctiddly works with mysql. You can xampp and cctiddly install and import your tiddlers there. The rss-feed can be imported by wordpress. advanced options or (config.options.chkGenerateAnRssFeed = true) The Number of the Items is low. You can change it. config.numRssItems = 300; 
Oh!
+1 to renaming the site NaNWTFs. &gt;NaN === NaN // false Some argue this makes sense. Some ppl also like to sniff glue.
 typeof null // object null === Object // false null being and object is weird, but so is the second expression. Isn't that like expecting "foo"===String to be true because the type of "foo" is String?
 alert(0.1 + 0.2); // 0.30000000000000004 alert( ((0.1 * 10) + (0.2 * 10))/10 ); // 0.3 This is a floating point precision problem, not a Javascript problem.
&gt;This is because parseInt accepts a second argument for radix. If it is not supplied and the string starts with a 0 it will be parsed as an octal number. Riiiiiiight, of COURSE. Sorry man, this one makes sense.
i am transposing this comment from the ajaxian thread because it is relevant. these javascript "wtf" threads are really getting old. NaN === NaN // false i do not want two NaN's to ever be equal. because i dont know what the fuck is in them. plain and simple Number.MIN_VALUE&gt; 0; // true? really? wtf. Number.MIN_VALUE has a very specific purpose: to be the smallest number larger than zero. it pertains to precision, not magnitude. read a fucking manual and this shit will not surprise you. parseInt('06'); // 6 parseInt('08'); // 0 oh boo-fucking-hoo. you gave parseInt() a format KNOWN to represent octal, and then gave it a character that it didnt recognize (outside the range of 0 to 7). thats like being surprised when parseInt('14q6&amp;5') gives you zero. yeah, we didnt know you meant base-thirty-shut-the-fuck-up. typeof null // object null === Object // false oh shut the fuck up and learn what a 'typeof' operator is. surprise, a function/class name isnt equal in both content and type to an object reference. get lost, troll! 
This makes me facepalm to read these, not because the language is wrong, but that the poster doesn't understand **why** these things are the way they are. It's a real shame that there is no commenting available, so the reasons why things are the way they are could be explained. I'd even be polite about it when commenting. I just worry about other people who are feeling confused about JS that see it, and walk away thinking JS is stupid or wrong, instead of learning. Maybe someone could start a tumblr or something that explains each of the posts. Name suggestion: ftwjs
&gt;Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn’t read very well. &gt;[]=![]; What? I'm parsing this as T=!T ? Where am I going wrong?
&gt;surprise, a function/class name isnt equal in both content and type to an object reference. It's getting late, can you explain how this one relates to the bit of code above it for me please? ^-^
It depends what you're using for your set of NaN's.... 1: If it's not a number, does that make it "one other thing" ... everything which isn't a number.... 2: Or could it be any number of things that "aren't a number"? Depending on what you take the sets as, it could be either... The language-smiths went with option two...
Ok, Mr Vindictive. Are there any oddities then?
Agreed. I wonder though: apart from ageing DEC hackers, does anyone actually use octal anymore?
gladly. null is an object reference. Object is a function (constructor) or a class name, depending on what is happening here. in either case, === is the "equal in both content and datatype" operator, and that would definitely not hold in this case.
oh, absolutely :D but this post highlights almost none of them. try this on for size if you want a real WTF: http://perfectionkills.com/javascript-quiz/
 "string" instanceof String; // false. Now THAT I find confusing. The [MDC](https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Operators/Special_Operators/Instanceof_Operator#Description) demonstrates that behaviour: &gt; For example, you can specify a string created with the String constructor, but you cannot specify a string literal. But then why the hell does this [] instanceof Array evaluate to **true** when we are talking about [literals](https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array#Syntax) here as well?
weak sauce.
[] isn't a primitive value, it's merely shorthand for new Array(). In javascript, the only primitives available are undefined,null, boolean, number, and string. Anything else is an object.
according to IEEE 754, NaN should never be equal to NaN. this is one of the fundamental ways that we check for NaN. besides, if NaN == NaN returned true, then the following would also return true: 1^inf == inf/inf 0/0 == 0/inf 0*inf == sqrt(-1) tan(pi/2) == log(-1) none of these are true, but if you start letting NaN == NaN, then you open the door to all of this nonsense.
 alert([] == ![]); //true alert([] == false); //true alert([]); // (yes I meant blank, nothing, nada, '' in other words) alert('' == false); //true alert([] == ''); //true The author got that statement wrong. Arrays evaluate to false if they're not initialized. Also, since a string expression can be evaluated like an array you can use the same logic for an empty string, which is the same as an empty array. alert([] === ![]); //false alert([] === false); //false alert([]); // (yes I meant blank, nothing, nada, '' in other words) alert('' === false); //false alert([] === ''); //false
So what you’re saying is that Math.sqrt(-1) === 0/0 ? I’d rather err on the side of caution.
I never realised FTW was WTF backwards. Mind = blown. It's so perfect.
A more accurate solution: var num = 0.1 + 0.2; alert(num.toFixed(2)); Afaik, you could still hit a floating point precision problem dividing by 10 (I know I did when I multiplied by 4 and divided by 4 - I was trying to round to the nearest 0.25).
I had just dusted off an old library that I was working on, that was extremely similar to this one. This, however, is probably better and more complete. Looking forward to reading more about it!
Thanks!
Thanks.
I am not trying to trash this blog post, but if you have read anything on Crockfords site about closures, there is nothing new here. If you *have* read about closures, and still have trouble understanding them, this blog post might help shed a little light.
Javasript 1.7 has *let* that makes possible to bind variables in local scope. https://developer.mozilla.org/en/New_in_JavaScript_1.7
There's also the old `with` statement, which is kind of the poor man's `let`.
It's an interesting article, but the library he talks about rx.js isn't available. Which is pretty disappointing.
I started with MooTools and now use jQuery pretty much exclusively. They're both great libraries, but from my experience with MooTools I spent more time thinking "How can I get this to work?" whereas with jQuery I spend more time thinking "Shit, that was easy!" Guess it just depends on your coding style and what you're trying to accomplish.
Yes, I didn't realize how far away JSConf was, I thought it would all be revealed/released sooner. 
This blog post is actually easier to follow than crockford's in my opinion. I like it.
Nice blog post, keep it up.
easy is always better imo. Especially since resig and his team are constantly making speed improvements to the library.
Excellent explanation, thank you. When you say: &gt; this is one of the fundamental ways that we check for NaN. Do you mean that we can use `x !== x` to check if some variable is NaN? This should be the only "value" where that holds true I suppose.
under the hood, a lot of libraries implement isNaN() by just checking to see if `x == x` returns false. the only case where that would be true is for NaN. i could see my way to implementing that function in C as follows: bool isNaN(float x) { return x != x; }; essentially, the answer to your question is a very long-winded "yes"
To each his own. Again, this wasn't a bad blog post by any means. 
Just use [SyntaxHighlighter](http://alexgorbatchev.com/wiki/SyntaxHighlighter).
&gt; Flash Player 9 (or above) is needed to view presentations. We have detected that you do not have it on your computer. To install it, go here. 
To see one of the listed features in action here is a puzzle game I wrote last week using CSS3 features (no flash), mostly CSS transitions. http://icefox.net/anigma/
Emerging Ajax techniques, such as Ajax Push and Comet have brought revolutionary changes to Web application interactivity. Get to know more about Ajax applications, emerging techniques and more at the upcoming Sun Tech Days 2010 conference. There would be detailed session on Ajax in which GZip contents, minifed JavaScript, strategically placing of CSS links and JavaScript tags will be discussed. There would be lots of other beneficial sessions too for the developers. Hence register early before seats are full. If you register early, you also stand to win an exciting Sun branded T-shirt. This conference will take place in Hyderabad, India on 24-25 March, 2010 at the Hyderabad International Convention Center. Further Info Is At : http://www.141sercon.com/suntechdays10/sessions.html#1
Posted on slideshare.com, which depends upon Flash. Is nice! FFS, people, get over it. Flash is a tool. It can be used well, or poorly. As with most tools, it will most often be used poorly, as most people (which includes developers, myself not necessarily excluded) are idiots most of the time.
Adobe astroturfers in 3,2,1...
You fail to get it. Flash is a not very good (and often functionally inferior) implementation of many technologies now available directly in browser. The most frequent reason for it's deployment is ignorance. TLDR; We'd much rather people poorly used modern JavaScript and CSS features than Flash.
The day we need tldr for two sentences is the day it's all over for us as a species.
Nope. But thanks for playing. I'm not sure what it is that's keeping you from realizing that there are many applications where Flash can do things that in-build browser functionality cannot. And, in many cases, even where JavaScript/CSS/HTML5 *can* provide the same functionality, it cannot for the same number of people. There will no doubt come a day, and it may even be fairly soon, when JavaScript/CSS/HTML can do most of what Flash can do today just as well, perhaps even better in some cases. It will come to pass that the penetration of the new browser capabilities will be similar to that of Flash, though that may take a while. 
You fail to get it. Browser implementations of many technologies are broken, and inconsistent, forcing developers to write several versions of the same thing. More importantly, the vast majority of the current browsing population can not use the most modern browser features. Flash is the only viable way to reach that audience at this time. Run a video site? Good luck getting rid of flash anytime in the next 5 years. Hell, you can't even get rid of it for Firefox and WebKit users at the same time unless you want to double your storage costs. Man, HTML5 is great, huh?
Huh? We weren't even in disagreement but you are still being a douche. I wasn't disagreeing with you. You just fail to understand why people want to see more fancy JavaScript/HTML5 websites. I agree Flash is sometimes the right choice. It probably still is for most of the random Flash games out there. However *many* of the things that people use Flash for *today* can be done better in-browser. We are currently in a period where most of the browsers are actually quite far ahead of most developers. That makes informed users frustrated that they aren't getting to see their fancy new toys put to good use.
Nice.
&gt; Browser implementations of many technologies are broken, and inconsistent, forcing developers to write several versions of the same thing. [Not really true anymore.](http://quirksmode.org/compatibility.html) There are still some corners of various standards where things get a bit messy but on the whole it's not too bad these days. Especially when you throw somethings like jQuery in. &gt; Run a video site? Good luck getting rid of flash anytime in the next 5 years Huh? YouTube, Vimeo and dailymotion all offer non-Flash video streaming now. I can quite safely evade any Flash players at all on those sites. Yes as a content distributor I suppose I still need to care about Flash to reach as many people as possible but as a user it's available to me. Just because it *can* be done in Flash doesn't mean that should be the only choice you give people. &gt; you can't even get rid of it for Firefox and WebKit users at the same time unless you want to double your storage costs. You mean because of the whole encoder thing? That's a fair criticism and a good reason to continue using Flash for video. This article wasn't really about video or even HTML5 vs Flash in general. It was just an example of how you can often use HTML5 in place of Flash. Just because you can't use *everything* in the spec on *every* browser *right now* doesn't mean you can't use the actually useful and commonly implemented parts. 
Um ... yeah. Is this page supposed to be a joke?
you could always do: var gEBI = document.getElementById; var acme = gEBI("some_widget"); If you hate typing that shit out. Everything you say is on point though.
word life
No signup is needed, this is enough "Submissions must be in the form of an installable .plasmoid file submitted by email to javascriptjam@kde.org before midnight (UTC) March 31st 2010. A valid email address is required in the Plasmoid's metadata file in order to receive awards."
Gotta love speed improvements.
jQuery really is a phenomenon. Who would have thought that a JavaScript library would ever have fan clubs all over the world?
jquery makes javascript work.
jQuery fixes the DOM just like most other JavaScript libraries. Javascript *the language* has its faults but doesn't need too much fixing.
All I know is that I'm a hack programmer, and I don't ever intend on being anything _but_ a hack programmer, but I can do shit with jQuery. All the arguments I've seen for other libs seem to run along the lines of "jQuery may making doing stuff with Javascript really easy, but _our_ library is more pure for the following important reasons..." ...none of which are important to me. (Also, the distinction between the DOM and Javascript is immaterial to me, since I only ever write Javascript for a browser. And until something like node.js starts showing up on lots of servers (or something), I don't see why I should care too much about the distinction.)
&gt; All I know is that I'm a hack programmer, and I don't ever intend on being anything but a hack programmer, but I can do shit with jQuery. This is actually my #1 problem with jQuery. Trying to work with other people's hacked-together jQuery makes me hate my life. Not once have I come across an even remotely maintainable jQuery-based front end. And that sucks, because I really, really like the ideas behind jQuery.
Ha ha. Fair enough. I was just sticking up for the JavaScript language. It gets a lot of flak because of inconsistent implementations of the DOM across browsers.
Well, for me this comes right back to the fact that I'm a hack who only works on small (my own) project. Pretty much nobody reads my code, so I evaluate libraries exclusively on whether they help me write what I need to write, yesterday. 
I will say that messing around with jQuery has forced me to at least glimpse the fact that JS is a cool language. I don't understand all the terminology about closures and blah blah, but I do find myself thinking, when I'm writing Python, that "er, this bit right here would actually be easy in JS."
Oh, and I would _love_ for JS to be widespread on the server. The fact that we have to use like 3 languages (JS, Python/Ruby/PHP/whatever, and then probably SQL) to write a simple web app is bonkers.
Overall, some good suggestions in there. &gt; typeof is your friend. As a means of validation, I disagree. For example, typeof(null)=="object", typeof(NaN)=="number", and typeof(new String("hello"))=="object" . If you're expecting a numeric input, it's generally better to use !isNaN() to check it so a value like "16" will be valid but "16candles" will not. Javascript considers null and undefined to be equal, so a check for x==null will catch both and not run afoul of the fact that null is considered to be an object. 
+1, typeof is pretty useless
I'd mention that == and != cast before comparison while === and !== do not.
Ah, another blog post that should be entitled "Seven programming patterns that I can't quite use effectively".
s/Implementation/Use/ JavaScript Implementation implies making a JS engine, not using one.
Pffh, you youngsters and your libraries, back in the olden days we knew our way around document.layers and document.all and liked it! Have you even heard about [JSSS](http://en.wikipedia.org/wiki/JavaScript_Style_Sheets)? Now get off my lawn! &gt;:)
getType() is essential, smth like this http://github.com/ringo/ringojs/blob/master/modules/ringo/unittest.js#L481-509 getType("foo") === 'string' getType(123) === 'number' etc...
Someone has been looking at the HTML5 spec. What web developer doesn't want the ability to do all this? I can't wait for the next spec to be approved and completely implemented.
This is really neat, I think I'll play with it.
See you in 2025!
The Server feature where you can pipe pages down a "stay-open" connection... I've not seen it used with Ajax... but wouldn't it at least emulate sockets for non HTML5 browsers? I've never seen it used "in the wild". The browser wouldn't generate traffic polling the server for messages/data, and the server just passes new data down the connection...? It's some kind of MIME type the server replies with... I can't remember it. =( Edit:: Ahhha! PUSH! http://docstore.mik.ua/orelly/web2/xhtml/ch13_03.htm
The Ping attribute... Has anyone noticed Google is now tracking the links we click on? **They change the link text to display the direct link, but use a redirect to their own site!** Here's what appears in my status bar when I hover over the first link after searching for "Reddit" http://www.reddit.com/ ...and here's what it links to: http://www.google.co.uk/url?sa=t&amp;source=web&amp;ct=res&amp;cd=1&amp;ved=0CAkQFjAA&amp;url=http%3A%2F%2Fwww.reddit.com%2F&amp;rct=j&amp;q=reddit&amp;ei=UkeES-nTKJ-60gSIsLXGAg&amp;usg=AFQjCNGP2I23xwAzzicm-TwmDMKVU72m0w&amp;sig2=GToaNK_kCbL_nBB-D1B1SQ
If this was an eclipse plugin, I'd probably have sex with it.
Unfortunately don't have time to play with it. The submission title doesn't say what this is, the webpage doesn't either. So what is this?
Is it supposed to look like this http://i.imgur.com/zQx7U.png or is something broken?
Broken on Firefox unless you have the resizeable edit box addon. Safari and Chrome work as it should.
It's working now! And there are ready-made examples to import! Now I get why people were talking about sex :D
It's a quick testbed for throwing HTML, javascript, and CSS together in a small sandbox-type environment.
I thought this is what web browsers were for. You know, edit html, css, javascript locally then test in your browser. How is this an improvement? Maybe I do not understand jsFiddle. What is the value?
I was hoping this would be tales of solder-related derring-do.
I just lost the game.
yeah, it's tricky. i assumed that if there's a whole game show dedicated to that topic, there would be some trick questions. but then, almost alwys it's: chrome avoids unnecessary reflows, ie doesn't. whoa! maybe that's the reason chromes rendering is worlds faster than IEs? would have been more interesting if firefox, safari and opera would've been included too, but still - interesting post.
Yay Javascript.
Shame it's [full of spam](http://meetups.jquery.com/profiles/blogs/purchase-azithromycin-online)
background: http://sla.ckers.org/forum/read.php?24,33349,33405
This is a very old technique that relies on implicit type conversions that John Resig just posted about today on Twitter. To explain, let's try to produce the single letter string "f" without using alphanumerical characters. \(!\[\]+\[\]) produces the string "false". +\[\] produces the number 0. Individual characters in a string can be referenced through numerical indexes in the form of string[index], so now we can combine this: \(!\[\]+\[\]\)\[+\[\]\] Repeat several times and you can build up any string and execute it as code. I hope I got the formatting right :)
The Javascript code alert("Reddit") can also be executed with the following, perfectly valid, code
[related thread](http://www.reddit.com/r/coding/comments/b6te8/til_you_can_use_to_program_anything_in_javascript/)
[related thread](http://www.reddit.com/r/coding/comments/b6te8/til_you_can_use_to_program_anything_in_javascript/)
.... i'd rather let people look at unminified javascript rather than pay the bandwidth costs that this method would incur.
This is about obfuscation and security, not minification. Readability is not a concern here.
i'm not talking about readability. i'm talking about the ballooning of the size of the code. minifying the code will obfuscate the code just as well as this method. with both methods, you can reverse engineer it.
It was developed originally as a) a cool thing to do, and b) a method for bypassing XSS filters. code size is not important for these use cases.
http://imgur.com/W3wRE I slightly confused the converter with my enthusiasm for fart salads.
It's about as secure as rot13.
Which isn't secure enough, hence why I always use double rot13.
Hmm, thanks Mr E... I'm still mystified :-/ 
It's pretty neat, I applaud them for their usage of obscurity :) Unfortunately, you can't actually use it since the second someone saw that...well, let's just say the method of obscurity makes it unique enough to find the code that was used to obscure it to begin with :p
Can't be much worse than triple DES.
There are other ways of doing this: []["sort"]["call"]()["atob"]("aN")[0]+(!+[]+[])[!+[]+!+[]+!+[]]+"false"[2]+(![]+[])[!+[]+!+[]]+(!+[]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!+[]+[])[+[]]+(!+[]+[])[!+[]+!+[]+!+[]]+(!+[]+[])[+!+[]]])[+!+[]+[+[]]]+" "+"[object Window]"[13]+(true+[]["filter"])[10]+"true"[1]+"false"[2]+"undefined"[2]
link no workie for me.
For people who downvote him, realize that this will increase your javascript size by at least 20x if not more. I have about 500k of javascript in my app that I deliver, increasing it to 10 megs is not an option.
Links work for me and the advice within couldn't have come at a better time. I was banging my head against the desk for the last hour when I should have been switching my code to be driven from DOM-less events. Just like that my API is cleaner, my code is less coupled and I'm happy with this design. Thank you, people smarter than me.
GWT actually has a function to do that.
soooo, who suggested you do that?
so you wouldn't buy a knife because you'd then go around stabbing people?
nice trick, thor ;)
Sounds nice. I hope its easily addable via a plugin or module or whatever. 
The idea is that when it'll be mature enough it will be added to the JavaScript engine and become part of Firefox, exactly like TraceMonkey.
It does not correctly convert these letters in a string: v, w, U, W Otherwise it's pretty damn cool.
My javascript is fast enough, how about using less than 4 gb of memory?
Have less tabs open at once. Fx caches your tabs and their history, and it will use up a lot of memory if you don't manage them more carefully. See [here](http://kb.mozillazine.org/Memory_Leak#Settings_that_reduce_memory_usage) for tips on limiting memory usage, moving memory usage to disk space on minimize, and probably some other neat stuff.
The code for readability is open source, you can go ahead and take a look for yourself: http://code.google.com/p/arc90labs-readability/
I had no idea it was OSS! Excellent!
Wow, that's a pretty nice javascript gallery widget. Lemee just right click and view sourc...oh shit ... nevermind. 
I use emac's js2-mode, which has awesome syntax checking and coloring, but it's not an IDE per se - no code completion aside from hippie-expand. What kind of features are you looking for beyond straightforward text editing?
vim, muthafuckaz!
Great talk. I didnt pick up on variables being hoisted to the top of their scope before. Well, I recall reading in his book that you should declare variables at the top of their scope, but never understood why. Crockford is one of the illest emcees ever. Offtopic, but am I the only one that thinks Crockford looks like Ben Kenobi? I hope I look like that when I am older. 
You can always use online editors. They work everywhere. [reddit!](http://codefave.com/ToolsandResources/10_useful_online_code_editors)
Autocompletion/intellisense would be nice 
I'm a fan of Aptana studio, it's cross platform which is nice when using my Windows partition to develop. 
I second that, js2-mode ftw Lose the Zero (*) and get with the Hero (emacs)
gedit for mac
VS 2008 with the jQuery intellisense file is really nice, I hear that 2010 is even better.
Textmate has a great bundle for standard js as well as bundles for most major libraries and frameworks like jquery and mootools.
While js2-mode can be handy I find it very slow sometimes - for small files it's ok. Instead of it I use jslint on whole project dir. find . -name "*.js" -exec jsl -nologo -process {} \; 
Not really an IDE, but textmate is prob your best bet.
How well does Visual Studio 2008 (or 2010) run on OS X?
n00b need autocomplete. 
For what? Javascript is a rather minimalist language.
vim, my fellow gentlemen.
Hihihi. I wish. I've just got used to it after using VS2008 at work, When your namespace is huge it certainly helps. 
Small language but I'm working with within a large namespace on this particular project. Discoverability of methods really helps speed up dev. 
NetBeans offers great syntax checking and autocomplete for javascript if you download the php-bundle. If you are looking for a complete IDE that doesn't suck the way eclipse does, go give it a try!
I use Coda usually, I prefer it over Textmate. 
Or just get Eclipse for PHP. Despite the odd name, it has html/xml/js/css autocompletion/highlighting and all that good stuff. Unlike Aptana, it doesn't have all the Aptana-only stuff, which is probably useful if you're building something atop the Aptana server, but otherwise not so much. The problem with Eclipse is always the same: It's fairly overwhelming for new users, and even after a few years of using, you won't know half of the features, and use about 5% on a daily basis. So a bit like emacs, then. 
Textmate, as mentioned above, will auto complete almost any word previously used in a file, within that file. Not quite intellisense, but still pretty good.
Oh, I see. I believe Steve Yegge was talking about this on [SO podcast 50](http://blog.stackoverflow.com/2009/04/podcast-50/). Might want to give it a listen. 
Couldn't tell ya, I imagine very well with bootcamp/parallels/etc Funny how this is the answer you typically get when asking if games or some superior software is supported by osx but in this context it's not approved of.
Thanks for the link. :)
Komodo works fine for me.
It kinda makes me sick that (especially for JavaScript) you'd have to ask for the best IDE *for a particular OS*.
VMWare + Dreamweaver
Komodo, i like it because it has auto complete for javascript as well as for jquery, mootools, and some others. (i use jquery extensively)
I'm so going to be downmodded, but I like Netbeans. http://huima.wordpress.com/2010/01/07/jquery-support-in-netbeans-javascript-editor/
ctrl+f → vim → upvote Vim's "generic complete" feature (:he compl-generic) really helps for where the regular intellisense functionality of IDEs usually fails at the complexity of javascript.
Textmate.
If you are using Firefox then you will be better off using / instead of ctrl+f, just like in vim.
["JavaScript for C and Python Programmers"](http://www.wooji-juice.com/blog/javascript-article.html) **edit**: God. After reviewing that article I am going to advise against it. What are you trying to do in your project?
We are just learning the basic of HTML and JS in the class, I am more so looking for a thorough and formal explanation of the object hierarchy and implementation of JS.
I would look into video lectures by Douglas Crockford. He presents javascript for what it is, a language that's both beautiful and horrible at the same time. Curiously, he named his book "Javascript: the good parts". This approach assumes you have a somewhat higher level understanding of programming, eg, being comfortable with more than syntax but approaches and paradigms. He'll present a few keys things in good enough detail, which illustrate how javascript is different from most/all languages you might have tried before. 1 - Scoping: How variable values are looked up, and how to use the scope chain effectively 2 - Lamda/anonymous/first class functions: Using functions as function arguments and returns is absolutely awesome. This is not something you'll have used in Java. The closest you might have come is throwing around objects that implement runnable, but JS is much more beautiful. 3 - Closures: Depending on how you use the previous two aspects, you can do interesting things called closures. A closure is basically encapsulating the scope at some point within a function in such a way that that scope might no longer be accessible, but will continue living on unchanged within an anonymous function. Anyway, my explanations probably suck; I'll leave the rest to Doug. http://yuiblog.com/crockford/
Glancing over the second lecture, this looks like what I wanted. Thanks
...which I'm not doing. It is chromium on linux, actually. But thanks anyways ;) Any idea on why I get downvoted for providing reason to skyjumper's mere expression of preference?
You could probably do that automatically in Emacs.
Did you look at it? You're basically just pressing a key to complete the word you're typing based on surrounding text. It even puts matching words from other open files at the outer extends of the completion list. How can it get any more automatic than that? Does Emacs ship with a *mind control minor mode* by now? =)
[This is a good javascript book.](http://oreilly.com/catalog/9780596101992) 
Netbeans 6.8 for php or Eclipse PDT. Coda is ok, but not for managing projects, it's for quick dirty FTP editing. TextMate is too basic for my tastes.
Dreamweaver has a OSX version as well. 
Not exactly what you wanted, but useful. - [JavaScript Guide @ MDC](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide) - [JavaScript Reference @ MDC](https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference) - [Eloquent Javascript](http://eloquentjavascript.net/)* \* They used to link to this and another tutorial on the MDC, but I can't remember what the other one were.
I dunno about an IDE, but it was a surprise to me that OS X comes with a JavaScript console, jsc: $ /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc \&gt; a = { foo: "5" } [object Object] \&gt; a.foo 5 &gt;
Emacs.
I meant the ctrl+f+vim+upvote bit.
That doesn't make any sense. Obviously OP uses a mac, so it would make sense for him to ask about IDE's for a mac. Just because JS is cross-platform doesn't mean everything having to do with it is.
this should be on the top: https://bespin.mozillalabs.com/ has jquery syntax highlighting built in
another great bundle is the [Javascript Tools](http://github.com/subtleGradient/javascript-tools.tmbundle) which includes JSLint (validates your javascript).
Except read the title again
why do you have huge namespace specially when writing javascript? namespace just has to signify and readable.
Thanks for the protip.
lol, dogg, u cold
Yea exactly, you ask a Mac/Linux user what good games or certain software that is excellent on windows that the OS of their choice supports (or equivalent) and many will point you at dual booting, emulation or VM software as an acceptable solution. VS is an amazing IDE so I don't see why this is any different. Disclaimer: I have an ibook (pre-intel), a windows machine for gaming, and Kubuntu at work. I'm not on any one side I love and hate all equally for different reasons. 
Lightbox has since been modified to use a number of JavaScript libraries (such as the Prototype, and jQuery for its animations and positioning), in order to reduce the size of the code. The release of Lightbox encouraged other developers to work on similar projects, resulting in products such as 15+ promising jQuery Lightbox-Clones
Downvoted for the use of the word "fanboy". No paragraph that has included that word has ever been anything else than trolling.
This is a demo to show the synergistic combinations of text, motion and sound (when available) in providing a more engaging experience for the reader: http://narrator.hs.vc uses: ([readability](http://lab.arc90.com/experiments/readability/) and [autoscroll](http://tim.theenchanter.com/))
Yep don't address the point just the semantics. Edited to appease your sensibilities
Good stuff, as always.
mutability is a giant hammer anyway, and should be avoided when possible regardless of the language.
I dunno, compared to other languages (ie. PHP) javascript has good RegEx support. Sure there's always room for improvement, but I feel at this point it's just nitpicking. Good read though.
if you think like that then you deserve to be stuck in an 'enterprise'(on)
I tend to agree except for his complaint a out Unicode. That really does needto be fixed.
You down own OPP? Article Title FAIL.
:D Much better.
this actually needs to be said?
VERY cool! Thank you for the link
Small font size and little content despite paragraphs of text.
+1 for Coda. Its not specifically a Javascript IDE, but its a damn good Web Development IDE if thats the kind of Javascript you're writing. It has code complete for the DOM methods and a code navigator to jump quickly between your own methods in your code.
and both are terrible pieces of work.
It's a damn beautiful first order programming language.
I taught JS, HTML, and CSS for a couple years. AMA.
This is my blog, dedicated specifically to JS on the server. Follow me as we create a blog engine using V8CGI and MySQL. You won't believe how easy it is to code JS on the server!
how to use jquey 
nsfw adds
Your title confused me until I clicked the link. Might want to fix the typo.
Are you a slut, or is there some compelling reason this should blow my mind?
Holy hell, that is very interesting.
A must-read. For me anyway. Thanks gst.
 db.query("select..", function (result) { // use result }); Ok, I get why they do this, and in principle I agree with it, but this seems like a really bad idea to me. You're using this data to build a page, meaning you can't build said page until the data is retrieved and parsed, causing you to build the code with tons and tons of nested anonymous functions. Except for in the cases of updates, where would you want an asynchronous DB call?
I've been [posting beginners level JavaScript lessons previously](http://www.reddit.com/user/SajiRaju/submitted/) and this is the continuation of that. I've got myself a new domain [saji.me](http://saji.me) I'd be grateful for comments and criticisms.
There are often times a need to query the database multiple times, and each of those queries do not depend on each other. One can now structure the code to do those calls asynchronously. The other advantage is that instead of occupying lots of memory (like a thread), the code is literally asleep until the database query events back into the callback function. Also with careful choice of coding conventions there doesn't have to be lots of anonymous nested functions.
I don't know anything about node.js yet, but I happened to stumble on [a blog post](http://benjaminthomas.org/2009-11-29/bomber-actions.html#evented_programming) which addresses your question. :) *Edit*: hmm..that blog entry is a few months old. Based on a [recent mailing list post](http://groups.google.com/group/nodejs/msg/426f3071f3eec16b) it looks like Node is punting that higher-level functionality to third-party libraries (like Bomber, I suppose). So if you were to write a Django/Rails-like framework on top of Node you might include a deferred/promise library to create a more linear chain of functionality similar to a blocking application.
One advantage familiar to Scheme programmers is that the scope of result is explicit, and mutation can be avoided along with the class of bugs associated with it. Of course in Scheme you can use or define syntax transformers to make this code look more familiar if you want ... it would be nice if JS could do this too :-).
The 'bad' reasons In the article don't hold up. Further fragmenting the scene? weird language quirks? Save me.
Whatever dude. Don't forget &gt; ... there’s a ton of horrible code out there that just gets copy-pasted from project to project. which is somehow the fault of Javascript itself.
I can't tell if you're agreeing or disagreeing with me. javascript on the server could only be a good thing.
Don't bring any weed to TXJS, you may end up in jail for 35 years :\
I have to give kudos to this for being the first one of these lists I've seen that don't idiotically list things like "NaN is a number" that apply to most every language.
I'm agreeing! I was being sarcastic.
&gt; meme I don't think that word means what you think it means.
I like the part where the author, at the same time, mistakes ASP for a programming language and misses the fact that by mentioning it, he invalidates his point that there is no server-side [J(ava)Script](http://en.wikipedia.org/wiki/JScript) [atm](http://en.wikipedia.org/wiki/JScript_.NET). 
And not the case in any of the other popular server side languages. Which are also less quirky than JS.
Why isn't it a meme?
From Wikipedia: &gt; A meme (pronounced /ˈmiːm/, rhyming with "cream"[1]) is a postulated unit of cultural ideas, symbols or practices, which can be transmitted from one mind to another through writing, speech, gestures, rituals or other imitable I'm not sure how you can call Server-side Javascript a cultural idea.
Sure, if you stop reading there. Isn't server side javascript a practice? One that can be spread from one person to another -- and whose ideas (everything that makes javascript what it is) also replicate between people. And going back, why isn't it a cultural idea? It's certainly an idea within the culture of programming. Server-side javascript isn't a behavior, it's an idea - one that can be transferred from person to person through code, articles or blog posts. So why isn't it a meme? From *Virus of the Mind* by Richard Brodie: &gt; A meme is a unit of information in a mind whose existence influences events such that more copies of itself get created in other minds.
When people cite "what we have now is good enough" as a reason against change you can immediately tell they have no actual point.
Does anyone know of an overview of JavaScript-related conferences? This one looks fun but it's a bit much travel for a one-day conference.
Javascript on the server is here to stay, like it or not. I, personally, love it!
Since he didn't get the nomination, he started a career as a Javascript programmer. Who knew?
Ok, that literally just completely froze my entire system for about three minutes in Firefox with the hard drive thrashing like mad. Then some fucking grapes popped up. Fuck that, and fuck you.
Read them. Read the grapes.
Good article, presenting a problem we've probably all encountered and demonstrating how it can be avoided without being obtuse. I wonder how other environments such as node handle the same sort of scenario?
Especially because you can in fact use JScript to program "ASP" pages. And JSscript.NET can be used as well, both compatible with ECMAscript implementations. Writing an article about server-side javascript and not mentioning or not knowing about JScript.NET seems a bit dubious. 
You're thinking of John Edwards.
Interesting stuff for sure, but I just can't seem to come up with reason why I'd actually want to use this.
This is excellent. Now we can apply transformations to dynamic content like user submitted thumbnails. Combine this with a cross browser support for css transitions and soon we could see a shift in presentation code moving out of javascript and back into css. Woo!
I figured I might be misremembering the name, but thought it funny either way, so I posted it. I guess others disagree with my sense of humor (not the first time).
Oh wow, that is insane. Your kind of people are the ones that get punched in the face by people like me.
I use jQuery on a daily basis, and there were a few tricks in there even I didn't know about (namely Event Namespaces and using the animation function in a different way). These tips will definitely come in handy.
I applaud the developer, but please... please, people... dont do this. Websites are supposed to be *readable*. If I wanted to read text from a weird angle, Id turn the monitor on its side. 
The joys of backwards compatibility..
http://mrdoob.com/lab/javascript/harmony
Wow
Very neat. Ran perfectly in Chrome (dev build) without a single stutter.
Does anyone else think it's funny that Yahoo's developer evangelist is evangelizing Google Maps?
&gt; isEven: function(n) { return _isNumber(n) ? 0 === n % 2 : nan; }, lol.
I'm giving this a thumbs up, even though I think the Reactive approach is a bit verbose.
Here might be a good start: http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture There's more goodies in YUI Theater but they're easy enough to find from the above link. 
Thanks, I'm watching it now.
The video was really good. I really like the whole architecture that he proposes. Do you know of any sample application that actually uses this architecture that I can take a look at the code?
Your desktop app design pattern is pretty similar to what yui 3 encourages you to do. Each block of UI functionality is usually a widget. Those things have events, lifecycle methods, attributes with getter and setter, plugins and a bunch more things. For a long-lived application I'm working on, I have objects that keep track of state and fire events that my widgets can listen for to keep their UI up to date. It might be completely overkill for what you're doing, but it's damn powerful.
I don't know any in 'the wild' corporate applications that haven't been minified / obfuscated. However, [YUI2](http://developer.yahoo.com/yui/2/) and [YUI3](http://developer.yahoo.com/yui/3/) I believe are set up in such a way and the full source with comments is available on github. Also google's closure tools and jqueryUI might have non-minified source to look at... dunno. I'll leave that as an exercise for you to work :)
Seeing as you've already gone down the path of building rich client-side applications that consume JSON services and are noticing the experience is similar to desktop development you should probably look into frameworks that cater to that situation nicely. I can suggest [sproutcore](http://www.sproutcore.com/) Aside from making the consumption of JSON data pretty trivial, it is clearly inspired by the Cocoa development patterns familiar to Mac and iPhone app developers. In particular, it helps reduce the manual work of updating the DOM to reflect the JSON data that has been returned through bindings. There's a pretty compelling demo of bindings in general here: http://demo.sproutcore.com/bindings_overload/ More realistic bindings here: http://demo.sproutcore.com/store_configurator/ I can't find a great example of the JSON datasource stuff, but it's in their documentation if you're interested. There's also [cappuccino](http://cappuccino.org/) which is similar in inspiration to sproutcore, but eschews writing JavaScript itself in favor of Objective-J, among other technical decisions. The results are impressive if you don't mind deviating a bit from the more traditional web development path. The 280 North slides application is particularly well done: http://280slides.com/ There's also [Coherent](http://coherentjs.org/). And while it was defunct for a while the developer is pretty dedicated to his project. I'm sure YUI and dojo are nice and have come a long way since I've last looked at them but the Cocoa inspired frameworks are pretty impressive given how essential some of the functionality you get from them feels after even minimal usage. They really make frameworks and libraries that have focussed on making AJAX requests, easing DOM traversal and manipulation, and maybe at most adding some way to build widgets seem pretty ineffective in the grand scheme of things. That said the caliber of framework you choose really depends on your needs for a particular project. I often still use prototype and scriptaculous even today when I don't need bindings, notifications, templates, or an MVC structured application in general.
For the past year I've been working on http://web.ebuddy.com/ (in beta, currently), a web-based IM aggregator. The architecture I've introduced there is based on a publish/subscribe mechanism. Basically, the app JS consists of 2 main sections: the core and the GUI. The core JS has the responsibility of keeping the client-side data in sync with the server. If a contact goes online, the core gets the data from the server and updates the right JS contact object's properties. The GUI JS has the responsibility of keeping the DOM in sync with the client-side data. If a contact object's properties change (for instance by going online) the GUI finds and updates all corresponding DOM elements. The core and GUI modules only communicate by publishing and subscribing to custom events through a central hub. This way they are completely decoupled and it's trivial to write a different GUI for the same core or run the core without a GUI at all. The code is not open source, unfortunately, but feel free to PM me if you want to know more.
I would recommend http://www.javascriptmvc.com. I'm using it on current project, and it works great even after few thousand lines of client side code.
I get a feed.
read the extjs source code. http://www.extjs.com/products/extjs/download.php?dl=extjs311
ExtJS is exactly what you need. You can make libraries of widgets, they can talk to each other. It's great.
I've started writing something a bit like this for JSAPI (though my aim was more for javascript as a general purpose language than Firefox extensions). Might tidy it up and see if reddit have any thoughts. Python's ctypes is seriously handy, be nice to have this in JS land.
I try to object-orient my major javascript functions as much as possible. It makes it very easy to reimplement in other contexts, and extremely simple to expand and scale.
Good idea, weird syntax. Since those external declarations happen usually only once, it'd be pretty reasonable to have a little parsing layer on top of the raw API that'd allow someone to write things as let fopen = jsni.c_function("FILE* fopen(const char* name, const char* mode"); 
How is this going to be secured?
web pages don't have access to it. code that already has access to native layers also gets access to this. 
I liked the idea, but it seemed to be a little under documented in parts. Maybe I just didn't spend enough time look at it, seemed like a pretty good idea though.
How is sproutcore for performance? Playing with some of the demos it seemed surprisingly slow in some odd parts, but the bindings seemed really useful in general.
I compiled it, downloaded the picard framework and played around with the examples. I wrote some jquery ajax code against the picard example and was surprised to see that it sent an HTTP OPTIONS request. Then my 20 minutes were up.
Yes, but web plugins can be offered (and have been) by bad guys as well as good guys. This expands what a web plugin can easily do and therefore makes that layer more attractive for attack.
Little-to-no content. 
Sorry, I (it's my post) just put something I did at work quickly online, didn't expect anyone to post it ;) Still, I think it's a fun example that you can give people to try out, but of course you have to introduce them to the framework first.
Oh, sorry, I was in a bad mood yesterday. I did appreciate the title though, "first significant coding experience ..", it irks me when people post blogs that amount to a "Hello, World". Thanks, could of read the first paragraph of the documentation for that one! Slightly offtopic - I checked my mailing list mailbox today and saw [a peculiar email](http://groups.google.com/group/nodejs/browse_thread/thread/413ad6be4888ba54) from the nodejs list. Dahl commented on how he is dissapointed with all the web frameworks sprouting up around node. Kinda funny, but I had the same sentiment.
No problem ;) I lurk in the mailing list and saw that post too and he's right. node.js is really powerful for certain specific tasks (long open connections, lot of files - everything with lots of blocking I/O). But now people try to replace other general purpose web languages like PHP with it, and that was certainly not the goal. Might be a topic worth blogging about - what problems in my application should I solve with node, and how do I connect it with the rest of my architecture that's written in another language.
I prefer the following syntax: function Person(name, age) { this.name = name; this.age = age; this.speak = function() { alert('My name is ' + this.name + '.'); } }
actually pretty well-informed and comprehensive. might want to link to Ben Cherry's recent [exhaustive examination of the Module pattern](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth), as you touch on it there.
Now, if we could just get everybody to dump IE 6.
Hmm, yes, that's nice... In about eight years this might be useful.
I would dump IE
I personally would peg it at 3-5 years. With Windows 7 there isn't as much reason to languish at XP with default IE6 for bulk of the home users. Though IE6 might still be used in businesses after that period, until end of support: 2014 plus 3-5 years and some slack years. Hmm, maybe you are even hitting it too low.
that would be funnier if your username was 'everybody' 
Since I'm pretty sure someone will be asking, Jetpacks will still be instantly installable, and not require a restart. You can read about it in the [FAQ](https://jetpack.mozillalabs.com/faq.html), second paragraph down.
I loved the pencil drawings. Gave a very clear picture of exactly how this architecture is going to work. It even openly acknowledged some drawbacks and problems they expect to run into going forward. Very cool.
Since the XPIs are able to load and unload multiple times during a Firefox session, wouldn't instant installs go without saying?
Whoa, digg has become a verb ... &gt;They both move us to using Web technologies and skills rather than having to digg into XUL or C++.
Sort of. It was stated as a goal, but never really detailed as to whether they accomplished it or not. Between that, and using the same packaging format as the older addons left me vaguely unsure, so I figured I'd hunt for a source stating it.
Demos work fine for me. Suppose it depends on what you're trying to accomplish as to whether or not it's acceptable. It may be worth checking out the sproutcore subreddit http://www.reddit.com/r/sproutcore/ and looking over any other posted examples, especially in light of 1.0 being released recently. I don't think there's anything inherently slow about any of these frameworks compared with the more traditionally accepted "fast" frameworks such as a jquery. There may be some perception that with all the extra features you get with an application framework there must be a price paid somewhere, but I don't feel I've paid that price in terms of performance. At least with the ones I've mentioned, I think the main price you pay is in the learning curve of adopting a framework rather than just a library, in addition to the framework itself really only addressing applications and not being well suited for building the more typical JS widgets that get dropped into a document. Might be worth your time to learn enough about sproutcore to implement a small prototype of what you're trying to do and judge performance. Sorry I can't be any more helpful addressing performance but it's one of those YMMV things. 
Neat. It incorrectly indicates that I am using the Windows classic theme though: &gt; You are running in the windows classic theme. Thank you for being awesome. However I'm actually using Chrome 5.0 with Ubuntu 9.10 and Gnome 2.28.1.
Couldn't detect my Zune Microsoft's official theme (rgb 226,226,226)
As expected, it had no clue I was on a mac. Anyway, this is why on sites where I want a specific uniform look I override the entire select appearance and style it myself. Works great on almost all browsers (IE insists on drawing the little down button no matter what so I'm a little confined on my control). I've also seen sites that set the opacity for the select to 0 and draw a faux control under it, updating the text via javascript.
good idea, need more data points. But that's just a matter of more testing. the PoC is great.
Prior art: http://code.google.com/p/base2/source/browse/trunk/src/base2/jsb/chrome/theme.js
oh wow nice. i wish i could have found that about 2 weeks ago, would have saved me some time and money
I am trying to write a "dropdown replacement widget that is indistinguishable from native dropdowns", so i cant just style it using my mad paint skills, i have to do this kind of thing
It frustrates me to no end that jQuery has all these cool widgets and Prototype's got jack shit. I had to port a MooTools calendar to Prototype just so I had a calendar widget that didn't suck.
Wow .. I didn't expect to read about my timepickr :)
 **Boost Your Business for FREE!** Free advertise your [products](http://www.bytrade.com/factory-2-1.htm) and services? Get your business more exposure? Go to [ByTrade.com](http://www.bytrade.com)! Market your business to one of the largest [international trade marketplace](http://www.bytrade.com) ! FR-E-E! 
What about calendar date select: http://code.google.com/p/calendardateselect/ 
Really hard to read those code examples. Why did they use inconsistent formatting ? EDIT: added EPMD &gt;At the house they had the mics on the mantle &gt;Looked at the DJ and said "May I?" &gt;Lit it up like the Fourth of July 
Interesting, but the one I ported actually looks and works a lot better. One of these days I might get around to writing up some documentation and releasing it. Pff, who am I kidding.
Oh fuck, not reference counting. I kind expect that from IE, but Mozilla. It's not like doing proper garbage collector is rocket science. The correct way to deal with memory leaks is to issue bug report. 
var a; if ( a=undefined || a ) { console.log(a); } &gt; &gt;/\* for copy pasta. &gt; &gt;firefox logs 1. But you can do weird things with !a in the || statement. &gt; &gt;why, i dont geddit. &gt;\*/
Some context here would be good, but in any case it's pointless code as the *if* will never pass. Note however, one could also do a similar pattern with: if (a=undefined, *2ndStatemnt*) { ... } A comma here executes the first statement but only returns the value from the second one, to some this may be less readable, to me it is more correct as you don't need an OR statement if you *know* the first value would always evaluate to a *falsey* value.
firefox (via firebug) doesn't log anything for me, unless I first do: &gt; undefined=1
I’d recommend reading [this developer.mozilla page](https://developer.mozilla.org/en/A_re-introduction_to_JavaScript#Memory_leaks) instead. The ibm paper is terribly written with terribly formatted code examples and seems to take most of its material from the page I linked above (at least it’s listed as a reference on the ibm page).
&gt; The ibm paper is terribly written with terribly formatted code examples I find this tends to be the case with developerworks.ibm articles; thanks for posting a better resource
Interesting, as what you've suggested is exactly what i was looking for: function canReturnUndefined() { if(new Date().getTime() % 2 &gt; 0) { return {prop:'prop1'}; } var a; if( a= canReturnUndefined(), a) { console.log(a); } /\* interesting shortcut \*/ 
 Thats crazy that you can define what undefined should be.
Doesn't really tell you much. Don't use $(".classname"); as apparently that's expensive.
Not sure, I think `undefined` is a value, whereas five12 is creating a variable named undefined. I am willing to bet undefined is in that big list of reserved keywords you shouldnt use in javascript.
Surely undefined is in the big list. This is so common: if( a == undefined) { } undefined, is in the same world as null. Edit: its not. var undefined = '1'; is valid whereas var null = 1; is not. 
var undefined = 'yes'; var a; if( a == undefined) { console.log('not gonna happen'); } /\* wtf \*/
Along the same lines... typeof undefined; // "undefined" vs var undefined = "hello"; typeof undefined; // "string" EDIT: In the first example, could that be because undefined is not yet assigned to anything, and as a result defaults to "undefined"? Example: typeof foo; // "undefined" 
so undefined isn't some value in the same way null is. Nor is it a keyword ( i can't do var null=1 ). if(obj == undefinedcontantwenevereverdefine) { console.log('undefined!'); } doesn't work. It seems somewhere there is a declaration of a var undefined, but it is never instantiated with a value. var undefined; Super interesting. You could really fuck up massive amounts of code by setting undefined to a value. 
var null = true; throws syntax error. but var undefined = true; is completely valid. It seems undefined is just an uninstantiated declared variable. I sense mischief. Edit: for diabolical thoughts
jQuery declares its own *undefined*, so it is immune to your puny weapons. Also, things that are implicitly not there are still falsy, like ({}).missing so that won't break either. It would take an explicit comparison with the variable *undefined* for your hack to break most things.
Not really. Anything worth its weight should be using typeof with the string "undefined" to do comparisons.
I never understood why JavaScript cares to distinguish undefined and null, nor why anyone using JavaScript would care to distinguish them as they compare to equal with ==. Why not test both with ==null and consider the byzantine difference between null and undefined to be irrelevant?
 Object.prototype.missing = "lol"; I do like how jQuery gets its `undefined`: (function( window, undefined ) { /* 6000 lines */ })(window);
jQuery defines its own undefined because of smart-ass bloggers. Nobody *ever* redefines undefined. There's all sorts of JavaScript that can break *everything*.
Clever girl. It won't do jack to someone who uses typeof liberally though. Equality comparisons to null reservedwords is too dicey even with strict compare. 
Prototype has `Object.isUndefined`, which itself does a `typeof` check.
Defining your own undefined makes it both a local variable thus obfuscatable by e.g. yui compressor and gives you also a quicker lookup. 
null, true and false are all special values and keywords. undefined is no keyword but a variable that has the special undefined value, a value that all variables that are declared but not assigned to have.
True. Also, it's faster than referring to a global undefined. But that's not the point of this post.
TIL alternate meanings for the word "byzantine"
Came here to say this. IIRC, Google's Closure compiler makes this mistake. Hopefully they've fixed that by now.
Can someone explain this to me?
Actually, this reminds me of the following angry usenet post. http://groups.google.com/group/comp.lang.javascript/msg/37cb11852d7ca75c?hl=en&amp;dmode=source
Well, jQuery defines its undefined mostly performance (first) and to avoid munging (second). Same as defining its own window and document (although those both help with using jQuery in widget-y type things as well).
It's an anonymous function that is executed immediately to create a local scope. The window object is passed as the first argument, but nothing is passed as the second argument which means it is undefined. The function declaration declares a local variable called undefined which now contains the value undefined.
This is a really nice implementation. Plus you get the performance increase for the local scope. Nice.
You don't need to use the comma there, you can just use if (a=canReturnUndefined()). This is because an assignment expression returns the assignment, eg: b = (a = new Object); alert(a==b); // alerts true
What a douchey-douche "David Mark" is. Seriously, I couldn't get through the 3rd paragraph of this guys whining... he *really* seems to hate any javascript that he didn't write.
That's the best you can do? Try: for (var i in window) { delete window[i]; }
The example you used is the same as: var a,b; a = b = new Object; This is not surprising that this works. However, it is cool that : var a; if( a = canReturnUndefined() ) { console.log(a); } works. Really nice. 
That'll teach 'em to not use globals.
that was a fantastic explanation. But I fear too technical for the OP. I liked it nonetheless.
everything he says is 100% correct though.
JQuery is fairly slow on smartphones though - with the increasing use of low-powered devices it'd be a good idea to write efficient code.
"asshat" was the adjective that came immediately to mind, but I think "douchey-douche" also sums it up quite nicely. I've met his type before. Obviously knows his stuff, but totally incapable of seeing any part of the big picture above low-level micro-optimisations. In the time it took him to write that post (and clean the spittle off his keyboard) he could have fixed a fair few of those things that were obviously broken (or at least improved upon them in some small way) and sent off a patch. But he doesn't appear to be interested in how good or bad jQuery is. He just wants everyone to know how clever he is. &gt; Save your time, money and aggravation and forget that jQuery exists. I think I'll save my time, money and aggravation and forget that Mr Asshat Douchey-Douche exists. 
 // declare a function x = function(a, b) { // a and b have local definitions }; // call a function, passing values in for a and b x(10, 20); // call a function, passing in a value for a, but leaving b undefined x(10); // declare and call a function all in one (function(a, b) { ... })(10, 20) // now look again at the example: (function(window, undefined) { ... })( window ) It creates an anonymous function which takes two parameters: `window` and `undefined`. It then calls the function passing just one parameter, `window`. This ensures that the `undefined` variable inside the function is always undefined, even if the `undefined` variable outside the function has been re-defined to have some other value. 
Couldn't agree more. Otherwise you are in the risk of ending up with some very cluttered and highly coupled code.
*jQuery declares its own undefined, so it is immune to your puny weapons.* jQuery !== Javascript *It would take an explicit comparison with the variable undefined for your hack to break most things.* You see this all the time. Like I mentioned below, Google's compiler has this mistake. Its worth knowing.
Checking for a built in object type in a different window won't work since you're just using instanceof. I am not sure what the best workaround is. But in the runtime type check pass of closure compiler, we overwrite all window.open and keep track of windows. When checking for a built in type, we check in all windows.
ouch... thx for pointing this out, this one really surprised me. Playing a little with Chrome and Firefox I found this might work too: &lt;x&gt;.constructor.toString() == Array // is array? then true just try this in FireBug or any kind of Console: tmp = window.open() new tmp.Array(1,2,3) instanceof Array // -&gt; false new tmp.Array(1,2,3) instanceof tmp.Array // -&gt; true new tmp.Array(1,2,3).constructor.toString() == Array // -&gt; true new tmp.Array(1,2,3).constructor.toString() === Array.toString() // -&gt; true I think i will explore this method so testing for an object being an array might become var arrayTypeStr = Array.toString() // at initialization .... if (x instanceof Array || (x['constructor'] !== undefined &amp;&amp; x.constructor.toString() === arrayTypeStr)) { ... } but first I need to find out if it works in other browsers too... edit: What about iframes? I guess you will have the same problems too, when iframes are involved. Or imagine opening a subwindow which opens another window(which means you also have to overwrite the window.open method on subwindows) or has another iframe, or the iframe is created dynamically... Do the closure compiler handle the case, that the main window calls a function in an opened window and the type checking is done in the opened window itself?
 var document = window.document; That's also good for speed in MSIE. Use this in a closure.
Already do, actually (just a couple lines down from the top): http://code.jquery.com/jquery.js But yeah, that's another really good performance speed-up.
Do you iterate top.frames recursively for runtime type checks?
kewl u gaiz! Also, check out my Top 39 MUST HAVE jQuery popups you need to know about! EDIT: Also, follow me on twitter, I am a social networking media expert with 10+ years xp.
it looks like this is all very old info relating to IE6. Does anyone know if it's still true?
I've tested this solution successfully with different browsers now: IE 5.5, IE 6, IE 7, IE 8, Chrome, Safari 4, Firefox 3.6 and Opera 10.0 Note that storing the window object returned by window.open did not work with every browser. in some browsers (i think it was IE) tmp.Array was undefined...
Just to offer an alternative. although mine does require jQuery right now: http://jscott.me/jquery.undoable.html (I'm using a modified version which doesn't require jQuery in an application of mine so I'll probably release that at some point)
Ummm, I thought this would have been as simple as a state object var State = { 'changes' : [], 'current': 0, add: function(content){ this.changes.push(content); }, get: function(index){ return this.changes[index]; }, set: function(index){ this.current = index; return this; }, undo: function(){ var content = false; if(this.current &gt; 0){ content = this.set(--this.current).get(this.current); } return content; } }; or whatever, but an object literal would be great for this type of logging 
This plugin is pretty strong but I wanted something simpler and describe how it could be done so that way, someone could do it on his own.
What happens when I want to undo, my undo?
In fact, I was just thinking about it. I could create an "redo" stack that would contain the undone undo. So, basically, all you'll have to do is call jskataUndo.redo() and it would work.
I'm surely not the first one to have thought of that but the post was also about explaining how it was done. I'll have a look at cocoa's undo manager though...
You can drop that formatted UTC stamp into "new Date(x)", then use toLocaleString to format it to your local timezone, as per system preferences? (new Date("Thu Mar 25 20:27:19 +0000 2010")).toLocaleString() Which produces "Thursday, 25 March 2010 20:27:19" for me
Yes, it is. It has to go through every dom element and check whether it has the classname. Better: $('#container .classname'); Since you probably have some element with an id (#containter) as a parent of your elements, you can take that as a starting point. Now it only takes all elements in the container and scans them. Even better: $('#container element.classname'); This limits the amount of elements to scan even further. There are however cases where this optimization might bring you no performance increase at all; or even hurt you. &lt;ul id="container"&gt; &lt;li class="classname"&gt;&lt;/li&gt; &lt;li class="classname"&gt;&lt;/li&gt; &lt;li class="classname"&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; Here the first selector might be better, depending on the browser implementation of getElementsByTagName. Correct me if I'm wrong.
FYI you are implementing a simple functional version of [this fairly common design pattern](http://en.wikipedia.org/wiki/Command_pattern). The best way to implement redo imo would be to wrap the two functions together and push the whole thing onto your command stack (in your case jskataUndo). It is a neat little snippet though. 
Thanks a lot!
what, if any, compatibility restrictions are there on this method?
I understand the theory. But I don't know if we're talking about ms differences or not. I haven't done the tests.
You can't format the date string that the .toLocaleString() method returns, it may vary depending on system/browser/locale settings. The string is also quite long and not very well suited for narrow columns. But more important is that you can't sort your tweets by date as .toLocaleString() just returns a formatted string.
for what it's worth, here is a lib which can help you with nearly all your date-chewing problems: http://www.datejs.com/ hope it helps
If you wanted to sort your tweets, I'd suggest using the .valueOf() function, which returns milliseconds since 1970-01-01, and sort on that. Also, for formatting, I'd recommend using a tool like I just found [here](http://blog.stevenlevithan.com/archives/date-time-format)
Hmm, well it seems not all browsers are created equal with respect to this, the string you were trying to parse doesn't work in IE8. If you move the 2010 to after 'Mar 25', it does work, but I'm just getting a NaN for the first string.
You could also do a "feature detection" type approach to detect an Array (including in another window)... something like: if (obj2Test &amp;&amp; typeof obj2Test === "object" &amp;&amp; typeof obj2Test. length === "number" &amp;&amp; typeof obj2Test.splice === "function) { // it's an Array!; } else { // it's not an Array. } That should do pretty good at detecting Arrays etc. You can get more fidelity by checking some other stuff like if the object's length property is enumerable etc. To be honest I'm not smart enough to know if this is really a good approach but it's what I've used when playing the "is it an Array?" game.
you can't reformat the date string returned by .toLocaleString() (except maybe with some gnarky regexps, but since the string comes from the OS with 100s of different locale settings, its nearly impossible to account for all formats). Since .toLocaleString() is the only date method that cares about DST, you have to decide between an incorrect, but arbitrary formattable date object or a fixed, but correct date string.
Yeah I agree, reformatting the localestring wouldn't be practical, unless you could pass it to the datejs tool [link from polaretto](http://www.datejs.com/)? But then that tool might just work fine with the original string, I haven't had chance to try it.
Actually, looking at one of the places I've done this sort of thing in the past, I actually did use the format tool from Steven Levithan as linked to above, my code does this: (from an e-mail viewer app I wrote) dateNice: (new Date(parseInt(email.udate) * 1000)).format("dd mmm yyyy HH:MM") and that code seems to work with DST (just sent a test e-mail @ 11:55, it reads as: "31 Mar 2010 11:55") Changing my region to Cairo (+0200) correctly changes it to "31 Mar 2010 12:55"
Depends heavily on your page, the effected elements and the browser. In IE/FF3 this can easily mean a couple douzen ms for 100 elements. And just for selecting the element that is.
The problem with this approach is that it won't work with subclasses. For example, a DivElement is also an instance of Element.
Yes, we do.
Or you could buy a book on javascript and learn how to write it...
Try reading through this: http://www.anaesthetist.com/mnm/javascript/calc.htm Here is a table set up with the HTML for a different calculator: http://www.javascriptkit.com/script/cut18.shtml There are probably some free scripts out there but I couldn't find anything yet. I suppose the question I have is are you a programmer looking for help, or a customer asking for a freelancer? The reason I ask is I could provide you with all sorts of information, but if you're not a programmer then it wouldn't do you any good.
Both of these links are fine starting points, but neither of them should be used on a site that any customers would use. These provide the basic mechanics of what needs to go into a simple js-based calculator, but neither provide a robust solution for a "real world" application. Then again, maybe the OP is just trying to get someone to do homework for him/her.
Yeah, the OP needs to look into [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation) and make an attempt to mimic a C or [Java calculator](http://www.java-samples.com/showtutorial.php?tutorialid=524), but I didn't want to explain that too much without more information.
Better to get a function reference &amp; array of args to perform the undo action. Accepting a closure might also work. edit: Commented before looking at the code, which uses closures and seems to be quite flexible.
I actually rewrote it as a function constructor, but I didnt want to nerd out too much. But it looked something like this function StateObject = function(){ var changes = []; ... return { } //obj literal with some methods including redo since undo is just an index in the stack } It would be better to do it this way as you can have various states for different actions var editor_state = new StateObject(), button_state = new StateObject() etc
More information required before this can be interesting.
Try this one: http://www.malsup.com/jquery/cycle/int2.html Just do like visitphilly did and use giant images instead of the thumbnails this site uses.
last I checked you don't even need to use getComputedStyle(). querySelectorAll works just fine: var visitedLinks=document.querySelectorAll("a:visited"); But I have mixed feelings about them patching this. It's kinda nice to have for greasemonkey scripts.
Oops. I failed to take my own [advice](http://www.reddit.com/r/unitedkingdom/comments/bkc7i/this_is_why_i_hate_that_bastard_richard_littlejohn/c0n7kyg). Here is the actual URL of the article: http://blog.mozilla.com/security/2010/03/31/plugging-the-css-history-leak/
Problem with that is that if the image is larger than the screen, you'll get a horizontal scroll bar and an uncentered image. 
put it in a div with overflow set to hidden.
from the linked blog post: &gt; It makes getComputedStyle (**and similar functions such as querySelector**) lie by acting as though all links are unvisited.
It's a Lynx-emulator. Fantastic. Now do Dillo and Amaya.
It just won't work. That malsup cycler requires a fixed width. You can't use variable widths like percentage of window-size.
no, but you can put it *in* something that uses variable widths. Also, for what you're trying to do, it won't take much programming to do it from scratch if you use jQuery. [here's](http://allstatesugarbowl.org/site.php) one I did recently that uses very little custom code. it basically fades out, changes the image, fades back in.
The designer/client wants the image to be super-wide so even on 1280 wide screen resolutions, you don't see the edge of the image. I'd probably do a png overlay fade on the sides so it doesn't have a hard edge. But with 1300 wide photos, there's almost no way to get away from the horizontal scrollbar. I actually just started hard coding it with jquery. Dunno if I can get it working with slides, might have to default to fades. 
Hm, tricky. I saw a site once that used in the body: onResize="resetSliderWidths(getX(),getY());" In resetSliderWidths you'd have something that resizes the existing elements, and updates the JavaScript slider dimensions in the code: function resetSliderWidths(xMax,yMax) { document.getElementById("slider").style.width=xMax; document.getElementById("slider").style.height=yMax; slider.drawCurrentPicture(); } Examples: http://www.boutell.com/newfaq/demos/backgroundfill/ http://methvin.com/jquery/splitter/3csplitter.html
Uh... What's wrong with View → Page Style → No Style?
ok... do something custom. put the image as the background of a div. then there will be no scrollbars, even if the image is bigger than the window. (scrollbars only show up with &lt;img src..) then, use javascript swap out the background images. (whether in a timed loop or with a button) i suggest using jquery, when you're comfortable with it, it will cut your javascript coding time in half, if not more.
Well, it's still fairly trivial to generate styles for each link using php (or whatever) having them look something like a.link1:visited { background:url(userLookedAt.php?site=1); } No javascript involved... it is more intensive on the server side I guess, but not harder to do, at all. EDIT: nvm, they seem to want to limit the properties you can use too.
Ugh, this is a terrible solution. As mentioned in the comments, they should make the following changes: 1. Allow background image styling in :visited 2. Fetch any background images that would be applied for each link if :visited, whether it *is* visited or not. Combined with their other changes, this would be effective and would not cause many breaking changes. EDIT: Ah, I bet it would still be subject to timing attacks. -.-
This was basically my go-to solution. But I wasn't sure if you could make a sliding animation work here. I don't think you can. I'm pretty sure the backgrounds would just toggle. 
Does this make for one more thing developers and designers will have have to hack around when they actually need to use such functionality?
As soon as he wrote this: &gt; The first comparison does not need to be strict. ...I knew I did not have to read the rest of the post, for the poster is an idiot. (Strict comparisons are faster.) Furthermore, strict comparison is just better defensive coding.
A lot of websites look this way at first thanks to RequestPolicy.
What, do you mean when developers are... trying to work out if the user has visited a site? I don't quite see how Javascript would ever need to see if a page has been visited in an authentic application.
&gt; I don't quite see how Javascript would ever need to see if a page has been visited in an authentic application. For styling/hiding parent elements of visited links, which cannot be done through css alone.
Nothing is wrong with it. It's a joke. But if you are one of the 75% of users who don't have Firefox, this works just fine too.
John needs to refresh his knowledge of Greek history. Something about a wooden horse. 
A lot of people were screaming bloody murder when MS made their first contribution to the Linux Kernel, but not Linus. Of course they're doing it for selfish reasons, that's why anyone would ever contribute to an open source project (pretty much the gist of what Linus said), but I don't think they have any desire to 'own' jQuery. Judging by some of Resig's recent posts, he's developed a pretty good relationship with a lot of people at MS, and MS realizes that jQuery support for IE is crucial moving forward. Sounds like a mutually beneficial relationship to me (plus, why not make MS devs fix IE compatibility issues, instead of open-sourcers, who usually despise all things MS?). Honestly, with their behavior as of late, I've got a lot more respect for MS than Apple. Apple took BSD, gave it a facelift and pretended they fucking invented it. Whereas MS has been contributing to the Linux Kernel and jQuery. Tell me, which is better for the open source movement? (Not that I'm going to go out and buy Windows or anything, I like my Linux just fine, and if MS wants to contribute to it, cool by me).
Direct link to the jQuery template proposal: http://wiki.github.com/nje/jquery/jquery-templates-proposal It looks pretty good.
yeah Microsoft will secretly submit malicious code that will make IE look even worse
I don't give a fuck.
Thank you for sharing. All of Reddit can rest easier, now that we know how you feel.
Another creative use of &lt;script&gt; tags as data islands. Resig had used the same thing for processing.js It makes me wish browsers would start fetching all files pointed by &lt;script src='...'&gt; tags, even if they have no idea how to process them themselves. It'd make those kind of hacks a lot more useful. As it stands now, something else has to parse those tags and try to fetch the files they point to over XHR, with all the cross-domain headaches that implies. 
The question I have, is why is Microsoft interested in JQuery? Their general strategy has been to slow development of the web as an application platform as much as possible to keep people on Windows as their main app platform.
You don't need to use xhr to load javascript. As an example GWT applications load different javascript dynamically depending on the browser you're on. I believe what it does is include the &lt;script&gt; strings in the DOM during the execution of the app. As long as the js file is formatted so javascript can parse it, you can load files like this. They can even be cached properly by the browser.
All true, except I'm talking about using &lt;script&gt; tags to point to content that isn't javascript. Here, they're using tags like &lt;script type="text/html"&gt; to contain templates. Processing.js uses &lt;script type="application/processing"&gt; to point to processing source files. 
I'm suspecting that's why they're interested in JQuery. Attack on all fronts.
Yes it would be nice if you could point to content which isn't javascript directly. What you can do though is create invisible iframes which point to html files whose body content is the data you want. You can then access it directly (as long as it doesn't contain &lt;/body&gt;) or other fun tricks :)
I don't give a fuck what MS thinks. They are assuring that they won't bury jquery in twilight zone of open source(Now I can breath easier).
We don't give a fuck.
crap i closed the window at the last second out of habit. i don't want my girlfriend to start shooting at me!
And again, they can't come up with something new by themselves .. http://ejohn.org/blog/javascript-micro-templating/
In fact Resig used this technique for pretty much the same thing ... two years ago. http://ejohn.org/blog/javascript-micro-templating/
That would've been accurate to say during the interim between IE6 and IE7, but not so much now. They've had a growing core of people in the Developer Division who "get it" for awhile now. It takes time to turn a ship as large as MS, but they're doing it. There may be a pointy haired boss somewhere with evil in mind, but the DevDiv guys aren't like that at all.
Wow, something that could have been TOTALLY done with a transparent gif and therefore been accessible to about 95% of the browser market was instead done in a way that is only accessible to about 20%. I'll go off and implement the same thing with activex and vbscript and get twice the coverage. Good Show!
The proposal do cites John Resig's micro templating solution as a prior work. MS is formalizing this idea and advocating it to be included in jQuery's core library. This is a good thing. Also, I didn't downvote you.
Yes, but if they're links on any site owned by the developer, this can be done _entirely_ server-side. Unless you want them to render links for sites they don't own - which is a violation of privacy.
As title says "next generation"... It was never meant for 95%
Why would I want to only zoom a small circular portion of an image? What's the use case?
These are all great little examples of what can be done with JS. But for me, personally, I never saw what was wrong with a text input with a default value of "dd/mm/yyyy". Specifically, I *hate* the way that a lot of these date pickers offer no way to move more than one unit of time; eg to change from Janurary to August often requires seven clicks of the arrow next to the month. God forbid we're entering a date of birth and need to move 27 years back in time - which is easier, 27 clicks or four keystrokes (assuming they even have a year choice; often we'd be talking about (12*27) clicks)? Also because there are so many, users don't get a chance to become familiar with them; if there was a standard, well-implemented &lt;input type=date&gt; element then I would be happy. But every website seems to use a different date picker, meaning users have to re-learn the interface. Which is terrible. They do have their place; in web applications like Google Analytics for example. But web designers, please think about usability over design when it comes to form elements.
what if you call the positioning of the second item with the scrollDown's callback?
enhance!
they are interested in jquery because their asp.net developers are using jquery and will continue to use it in favor of the microsoft ajax javascript tools they produced independently. because these asp.net developers are going to use it, support and jquery integration within developer tools are seen as very beneficial features to visual studio, and much appreciated by studio users. it's a feature that users like.. that's likely the prime reason. it's really a good move. i don't think they have an evil plan to co-opt it and make it worthless or something similarly silly. they just want to integrate with a toolkit that is very popular. 'if you can't beat em, join em' is the business/product development philosophy here.
you've got a couple things going wrong here. 1. You're trying to adjust the style on the innerHTML (which you can't do). Adjust the style on the element, instead. (document.getElementById('header').style.left); 2. If you set the left position to the width of the window, then it'll always be positioned off screen. (but maybe you have a reason for this). 
thanks. yeah. that was my intention.
I admit I looked more at the code samples than the actual proposal, so yeah .. I missed that :| +1 for MS
So this plugin means you have to make an additional HTTP request and learn new templating syntax just to do: &gt; var jsonTemplate = "&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Number&lt;/th&gt;&lt;th&gt;Part 1&lt;/th&gt;&lt;th&gt;Part &gt; 2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;"; &gt; $.each(returnedJson,function(i,val){ &gt; jsonTemplate += "&lt;tr&gt;&lt;td&gt;" + i + "&lt;/td&gt;&lt;td&gt;" + val[0] + &gt; "&lt;/td&gt;&lt;td&gt;" + val[1] + "&lt;/td&gt;&lt;/tr&gt;"; &gt; }); &gt; jsonTemplate += "&lt;/tbody&gt;&lt;/table&gt;"; &gt; $("#where-i-want-it").html(jsonTemplate); I understand it was just an example and the markup need not be as horrendous as in the video. Still, there appears to be zero benefit to this plugin. 
These look a lot like JSP scriptlets... Deductive argument: * JSP scriptlets should be avoided. * This jQuery templating system is just like JSP scriptlets. * This jQuery templating system should be avoided. [Why scriptlets should be avoided.](http://java.sun.com/blueprints/guidelines/designing_enterprise_applications_2e/web-tier/web-tier3.html#1097968)
It's called JSONP
I'm pretty sure it's not a "hack" if you're using the API as intended.
with jQuery its easier. $('#header').css('left', window.innerWidth); you could even animate it back with something like this: $('#header').animate({ left: '-=' + window.innerWidth.toString() }, 1000, function() { // Animation complete });
What are you trying to hide?
Very informative! I never knew you could overwrite the object prototype in such a manner. This should prove useful with some of the projects I'm working on.
Yes, this is an April Fools joke.
So are you saying that you think that scriptlets should be avoided?
JSLint catches this. Error: Problem at line 1 character 5: Expected an identifier and instead saw 'undefined' (a reserved word). var undefined = true;
A certificate error on your subscriptions page will stop most potential subscribers dead in their tracks, best fix that. I would run any javascript code through JSLint prior to going live with this. It appears that there are some scope issues, as well as unused variables that could be removed. What kind of information is transmitted with the error info, do you have a demo/preview anywhere, and how long will the beta be?
Direct link: http://www.brothercake.com/site/resources/scripts/cssutilities/ It doesn't work in IE6/7 at all for me ("Unresponsive script..."), which would be the only reason to use this script in the first place.
Apart from cross browser support it looks like most of this functionality is also in Opera Dragonfly which was recently open sourced: http://bitbucket.org/scope/dragonfly-stp-1/
Were you reading some other article? The reason you use this is because the browser normalizes your css. All browsers do it, so it's useful for all browsers. IE6,7,8 all have tools by Microsoft to help to get at the same data firebug's DOM tab does, but in a much less elegant way. So saying IE is the only reason to use this is disingenous. 
No, because the only reason I'd use this library is to get non-normalized attributes out of the CSS and I have the baked-in or plugged-in to every browser but IE.
Element#on looks hawt.
Do people still use prototype? 
Yup. There's very little that jQuery does that Prototype+Scriptaculous doesn't, and a lot that P+S does that jQuery lacks. Prototypes extensions to the base datatypes have made my life SO much easier. And then there's the whole performance issue. jQuery 1.4.2 narrowed the gap, but it still isn't as efficient as Prototype is.
Hell yeah, I look forward to using that. And this implementation feels so much more natural then jQuery's .live() method.
when I was using prototype, I found it full of poorly written code that was written in a way that made me seriously question the authors competence in solving the tasks they set out to. (third party jquery plugins are no better --- but the core is done well). I didn't want to make it my life mission to struggle with the project. Is this still the case?
I held the same view back when the project was still young (say, early 2000s?), and was vehemently against it up until about a year ago when I decided to give it a try again when my own pathetic AJAX library kept screwing up. The current version is extremely robust and I've never felt like I had to struggle with it; The syntax for everything just plain makes sense, it feels like a natural extension to JavaScript. Combined with Scriptaculous I've been able to make some really amazing stuff.
Thanks for the feedback, I fixed the certificate issue. Also, I'm a JS lint fan, and it passes most things, but some of what you're seeing is from the YUI compressor, but won't affect the end result.
I like the MooTools' way container.addEvent('click:relay(selector)', function(){});
see, I instantly have a bad reaction to that because it just isn't natural programming. separate arguments should be separate arguments and an event name should be the event name, not some block of text that the library has to parse apart regardless of if I wanted to use delegation or not.
I feel that parsing a string is better than checking if an argument is a string or a function. Prototype's on .on(string, string|fn,[fn]) MooTools' addEvent .addEvent('string', fn)
I found this when doing some reading about how to use element prototyping (on arrays, specifically). There is a bunch of useful stuff here.
Perhaps you are unfamiliar with .delegate()? $("table").delegate("td", "hover", function(){ $(this).toggleClass("hover"); });
More efficient how? Every benchmark I've seen has jQuery ahead in terms of speed (why do you think Prototype is switching selector engines?) Also if I'm not mistaken, jQuery's file size is much smaller than the Prototype+Scriptaculous combo. Not trying to hate on Prototype, it paved the way for the others, but I think it's been superseded by newer libraries.
I can't find any benchmarks comparing the different libraries since jQuery 1.4 was released, just that chart they put out showing how 1.4 compared to 1.3 and 1.2. Do you have one handy? &gt; why do you think Prototype is switching selector engines? Because the old one was written 3 years ago, everybody know Sizzle is better, it's a natural change. &gt; Also if I'm not mistaken, jQuery's file size is much smaller than the Prototype+Scriptaculous combo. YUI Compressed P+S is 183k total, but the majority of Scriptaculous wouldn't be loaded unless it was needed. Minified jQuery 1.4 is 74k. So yes, it is about half the size. However, jQuery also lacks many of the datatype extensions that Prototype provides, especially in regards to Strings, Dates, Arrays, Enumerables and Hash tables. These, plus Prototype's form management functions are the biggest reasons I use it, so I consider the extra size well worth it.
I'm mostly referring to the [SlickSpeed](http://t3o.org/slickspeed/) and [TaskSpeed](http://ejohn.org/files/142/) tests, but I'm sure that doesn't tell the whole story. At any rate, I'm glad to see that Prototype is still refining things. We still use their lib at my office, so I'll be looking forward to the new release as well. EDIT: By those [same benchmarks](http://sandbox.tobielangel.com/prototype/slickspeed/), it looks like the latest Prototype will be much faster.
&gt; Okay. Now let’s use this in Node. If you’re like me, your first session in Node will look something like this: &gt; What Just Happened? Think something is missing here. 
I've been *really happy* with [JSON Template](http://json-template.googlecode.com/svn/trunk/doc/Introducing-JSON-Template.html). (As a nice bonus, that page links back to reference Reddit!)
Yeah, sorry about that. It should be fixed now.
The piece of code at the end is downright dangerous (because it mucks up global objects, potentially overwriting properties in other modules), and there's nothing object oriented about ruby's behavior, if anything it's abject-oriented. Ruby's `require` is akin's to PHP's `include` or C's very own `#include`, it just dumps the `require`d file in the local namespace and executes it. Node.js's original behavior, where `require` *actually creates and returns a full-fledged object* is infinitely cleaner and far more object-oriented.
I'm a little biased, but I like [iGesture](http://github.com/raganwald/iGesture) :-)
jQuery does not cache on the iPhone.
The [Official Announcement](http://github.com/raganwald/homoiconic/blob/master/2010/04/igesture.md#readme "Announcing iGesture").
Good point, thanks. If you're writing an HTML5 application, can you put it in the manifest? Also, I wonder if folks using tools like [PhoneGap](http://phonegap.com/) can bundle libraries with their apps?
Apparently mooTouch splits its JS files into cacheable chunks. That might be a better alternative. It depends on your web site.
No keyboard support.
It's always interesting to see alternative concepts, but I wonder how discoverable this is for the average user to figure out. Everybody knows how to work a calendar. Does everybody know that if you want to pick a month that isn't in the list, to click the closest displayed month and the picker will scroll in that direction?
I had been doing this for _years_ before I first saw someone else do it, and for exactly the reasons given. It's really useful for SQL DDL statements too.
First time I've seen it, so today will probably be the first time I start using it!
I use [this calendar widget](http://codetale.com/2009/06/21/javascript-calendar-widget-108/) and it does the trick just fine.
As retarded as introducing balls first...
It's quite pleasant how it draws a neat line down the left side of each "list". It would also be much easier to append items with this style.
Nah, it's not for me. Even though I've been caught out by IE barfing on extra/missing commas more times than I care to remember, it's just too visually jarring. The comma is the least important part and you're putting it up front in the most important position. However I do fully subscribe to the "keep everything lined up" philosophy. var o = { a: "ape", b: "bat", item_three: "cat", item_four: "dog", // etc }; I suppose you could extend that by moving the comma into a separate column. That gives you the benefit of being able to see when one is missing, without having it getting in the way. var o = { a: "ape" , b: "bat" , item_three: "cat" , item_four: "dog" , // etc }; If I could change one thing in JS I would make the final trailing comma optional as it is in Perl. By force of habit (as a long-time Perl hacker) I *always* put a comma after every item, even in the last one. It avoids the "forgot to add a comma to the previous line" bug when you add an item onto the end. $foo = { one =&gt; 'Item one', two =&gt; 'Item two', three =&gt; 'Item three', # extra comma is OK }; 
I don't really buy the examples: // error in comma-first style var a = "ape" , b = "bat" , c = "cat" , d = "dog" e = "elf" , f = "fly" , g = "gnu" , h = "hat" , i = "ibu" ; Sure, that stands out, but what is the likelihood that you'll actually end up with such a structure? More likely: // error in comma-first style var a = "ape" , b = "bat" , c = "cat" , d = "dog" e = "elf" , f = "fly" , g = "gnu" , h = "hat" , i = "ibu" ; Is the missing comma really that much more apparent than in the traditional style?
Same here - I got into the habit from SQL. The examples aren't that good -- very often the right-hand side/variable value is a different length, and it doesn't line up nicely. With commas first, the commas always line up nicely and it's super easy to tell when you've skipped one. 
Quite a bit of haskell and erlang code is written similar to this. I like this style quite a bit. I wish I could use it in my ruby code without getting laughed at.
Interesting, but very poor usability.
For sure. There is no way to know that you can use the mouse wheel in the first example without explicitly being told. 
I don't know about other browsers, but in Chrome on the second example (the one that says "wheel disabled, show arrows, larger") if you click the errors at a quick rate you get some flickering from the divs being selected. You should be able to get rid of that if you toss a e.preventDefault() or if you use onselectstart="return false;" on the body. 
Yes, yes it is.
The trailing comma is legal in the ECMAScript 3 spec (which all current browsers purport to implement). Internet Explorer previously treated the trailing comma as a parse error, but IE8 fixes this. (Of course, this means you can't start using it until you drop support for IE 6–7. But that day will eventually come.)
yeah, good luck using the mousewheel one on most laptops. Good concept, that's about it.
Thats fine, but what pisses me off is that JSON does not allow trailing commas. I modified a JSON parser to rectify this bullshit. Reliable programming is more important than bad standards.
I will never be okay with this.
i do this all the time, in lots of different languages. i started doing it in sql, and it's just spread from there.
Well it's either that, or getting your feelings hurt by jslint, because let's face it, if you try to decipher IE's error messages, you will lose your sanity much faster than with either of those methods. 
And also much easier to delete items with this style. Normally, if you delete the last line, you need to also delete the trailing comma on the new last line, but this way, you don't need to worry.
JSON is a subset of the Javascript syntax, with specific requirements and different goals. Items such as requiring quotes around property names stand out in this regard. If you modified your JSON parser to allow trailing commas then it is no longer a conformant JSON parser. Heck, why do you even use a custom JSON parser? Reference an existing one written by people smarter than you, and use the native JSON objet from ES5 when available.
A lot better than the search on the jQuery page. You should add a public page for adding new plugins, it seems that a lot of those I use are missing from your index.
Upvoted for novelty. We did this with an internal tool for a DHTML chat back in 2000, but it was ugly and not very functional since it was not our primary focus. This seems like a nice service offering, but I have doubts about the market size.
No wireless. Less space than a nomad. Lame.
One thing is avoiding errors, another thing is increasing readability. I think commas last is much more readable than commas first. AFAIK a closure compiler or Firefox will catch those errors for you anyway.
This is quite smart.
I find it funny that with only 600+ plugins, the search box doesn't use jQuery's autocomplete... cool idea though.
you should put the browser name next to the engines ... maybe some explanation of where the numbers come from ... you know ... some boring stuff to give it the slightest bit of context
Yes, and how frequently it's updated.
Pretty sneaky not putting Carakan (Opera's JS engine) there. I'm sure they know about it, and how fast it performs.
What a shitty chart, it doesn't even label which engine is mozilla's. I know it's simple to look up, but should you really need to just to view the chart?
They are all Mozilla's except Google V8 and Apple Nitro. 
What's the horizontal axis? Dates? Commits? It's a mystery!