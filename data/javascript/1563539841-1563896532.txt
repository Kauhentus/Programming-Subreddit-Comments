 - const hasProducts = products &amp;&amp; Array.isArray(products); + const hasProducts = Array.isArray(products); &amp;#x200B; First line will return false on empty array, second will return true
Fair enough. Brains are weird.
An empty array is not falsy. The first line will also be true.
Yes, functional programming has become cool. Debugging tools that let you jump through each iteration of the execution in a functional structure have not. For that reason I never prefer writing a map, filter, or reduce longer than a few lines. Also, a loop will do map, filter in a single scan of the iterable. But it makes it look like you graduated in the early 2000s
Reduce I found strange. It made it look like the accumulation was a separate step after iteration...
Yes, you can, no you shouldn't. If you use map, the runtime will know it has to generate an array with a certain size and it can optimize for that. Map and find also immediately tell other coders what to expect, unlike a reduce which can produce varying results.
Yes, you can, no you shouldn't. If you use map, the runtime will know it has to generate an array with a certain size and it can optimize for that. Map and find also immediately tell other coders what to expect, unlike a reduce which can produce varying results.
Yeah but they barely scratch the surface of 'functional programming imo. I personally feel theyre much more readable than loops but youre defs correct on the debugging tools problem.
Hi u/mementomoriok, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I agree that you should use map/filter where you can, but OP was saying he prefers reduce over the others so I was giving a (albeit inefficient) example on how that could be achieved.
Undefined is read-only in strict mode. You'll get an error if you try to assign to it. All ES6 modules operate in strict mode, so that's important to know. Also function missingParamerCheck(name, age){ var name = name || 'John Doe' var age = age console.log(name) console.log(age) } is not a default parameter; this is: function missingParamerCheck(name = 'John Doe', age){ console.log(name) console.log(age) } Your usage example is not showing a default value either. A default value will occur when the value is undefined. Not when it's falsy: missingParamerCheck('', 23) &gt; John Doe &gt; 23 In this case an empty string is considered falsy, so your check-and-reassignment is considering it missing. Which it's not. It has a value -- an empty string. If you do the same thing with a proper default value you'll not see "John Doe" logged. Also, there's no need to re-assign a parameter to a variable of the same name. Consider a parameter the same thing as having declared a variable with `let` or `var` at the top of a function. You don't need to "pull" the values in.
There are a few electron apps that provide repls: https://runjs.dev/ https://github.com/princejwesley/Mancy
This is the reason I got a CS degree.
Yeah, the reduce animation is wrong. In reduce, the green thing is there from the beginning. The function then received both the current green thing and a yellow thing and decides what the green thing for the next iteration should be. The final green thing is the green thing returned during the last iteration.
If you're using VSCode, there's a plugin called Polacode.
Also account should be the first argument in the callback, not value.
He was probably thinking of !array.length, which evaluates to false since 0 is falsy
Provided the array is empty, that is to say
At first I thought the co-founder of the "uninstall" package was quitting
I'm very happy about this, I really respected Seldo and lost most of it during the anti-union firings (and how he handled Ceej's firing \*by text\*). Excited to see what he does next.
For sure there are more metrics that go into this but when you run a research like they did at a scale of an ecosystem you need to have some assumptions (it's an academic research after all) and can't review each package manually to vet them.
Not implying anything, but why do you say dev.to is trash?
Hi u/the-witch, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
My bad.
And hasn't had items added and removed without length getting reset.
Hi /u/RedJohn286, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This line of code from the article made me want to post this. I had never thought about this: if ('a') { // true if ('a' == true) { // false It did a very good job of explaining why. **TL;DR: Truthiness is about Boolean coercion, whereas `==` uses the Abstract Equality Comparison Algorithm**
PDFkit. Although I have never used it, a friend of mine had done and he said it was good. Hope it helps.
Of course, but if those assumptions are wrong (even sometimes wrong), the data is misleading. For example, if you tried to measure the program complex by line count. Certainly, the length of something is often related to complexity, but not always. A program that quadruples in size because the new release supports ten languages instead of two is not four times more complex. It’s complexity might be exactly the same, in fact.
Now please explain why using lodash is better than having this functionality built into the language.
This is way better than that video. Aint nobody got time for that (video)
Hi u/e-crypto92, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You mean having no difference is pretty hard? I was talking about erasing the difference for the sake of all user and "standard" libraries (for example GraphQL). GraphQL already has the concept of optional parameters, so is there really a need for the JS distinction, for example. Maybe we still need the distinction for low-level libraries. In general, it seems to introduce bugs and confusion.
Can someone PM me and help me with a function problem? It won’t let me create a post on this thread. Thanks!
interesting until this... I actually would have thought that ('a'==true) would be true and ('a'===true) would be false.
I use kendo. https://demos.telerik.com/kendo-ui/pdf-export/index
Yep. But `Boolean(‘a’)` equates to `true`, which is what `if(‘a’)`is doing.
I've tried [node-wkhtmltopdf](https://github.com/devongovett/node-wkhtmltopdf) and it is pretty good
I used too as well, however most of the time I found my self reimplementing the functionality of map or filter using reduce. And in those cases it's a lot better for the readability of the code if you stick with the predefined map &amp; filter functions. That way your code will be a lot easier to reason about at a glance. Always using reduce forces the reader to understand the minutia of your code in order to even grasp the overarching intention.
Hi u/Dmitriyx, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I agree. The animations do not really communicate the functional programming roots of these functions. When you put them in that context, such as your reduce example, they make way more sense.
**No.** As is posted in multiple places in this sub (presubmission warning, guidelines in the sidebar, etc.): /r/javascript is not a support channel ------------------- * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! The community has requested that we not include help and support content, and we ask that you respect that wish.
I was just thinking last week about how to start doing this for a new project. Thanks for the post!
Oh I use them, I just prefer reduce.
Hi u/TatzyXY, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Have yet to see good content posted from it
Couldn't you just put your break point in the function passed to \`map\`? Or do you want to debug the iteration happening internally?
thats great thank you. i ended up on a fork of it called pdfmake which is more declarative. i wanted to convert an HTML to PDF but the process is much more involved. for the simple things i am doing its actually easier to just "build" the PDF from scratch.
Yep my stupid phone autocorrected. Thank you.
OK. Anything that suits your work. :)
I have similar feelings. A lot of shit came out with that whole sorry episode that reflected quite poorly on the character and ethics of Mr. Voss.
Hi u/SherlockHolmes03, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Think single line arrow functions that use ternary conditionals and invoke other second order functions within them. I run into them all the time. Most of the time those are written by people trying to look clever - "Hey let me demonstrate my knowledge of map, reduce, curry, partial and bind in the same implementation! To hell with your time!" The debugging problem is also bad when using a "reactive" library e.g. Rx, since the control jumps between your code and library code very frequently. Breakpoints would still be somewhat useful but forget about "stepping through" your implementation.
It would be nice to someday see a real immutable built into js. define an immutable type and you can't change anything about it even the object properties, etc.
Flawless
[https://medium.com/dailyjs/use-const-and-make-your-javascript-code-better-aac4f3786ca1](https://medium.com/dailyjs/use-const-and-make-your-javascript-code-better-aac4f3786ca1) The issue, probably, is that folks confuse const and immutability. Like many things in javascript, const (i.e. constant) isn't directly equivalent to similar concepts in ruby, java, whatever. It's got a weird JS spin, because JS is weird about variables and objects. const != immutability. Also, const's behavior points to type but not content, when it comes to objects/arrays. So you can expand objects/arrays as long as they stay objects/arrays. That can be confusing for folks. I do get his point about people who use const because a value or object never gets reassigned, NOT because it's meant to be a constant. I can see where you'd want to avoid that. But, probably his reaction is somewhat extreme.
Why do you need to debug each iteration? With map, you're writing a function from a to b. It literally doesn't matter if the array is one element or a million. With filter, you're writing a predicate function for a. Ditto. With reduce, writing a function from (a, b) to a. Matters a bit more, cuz you can still write simple tests for desired behavior that don't rely on any iteration at all. Of course, none of your functions should be more than a few lines long anyway (or you'd be really shit at functional programming).
Do you have a non-paywall link by chance? My alien fingers refreshed by mistake and got this.. https://imgur.com/a/i5HYa0M
The article is terrible.
Can't get past the introduction, and it's two sentences. This guy is a fucking idiot.
I wish that they were consistent, tho - i.e. deleting a property should be equivalent to assigning `undefined` to said property.
`const` is correct. `let` is not, unless you actually want to reassign a variable (which you shouldn't as close to ever as is physically possible). This article is terrible. The author is an idiot. Literally nothing to discuss here.
Hi u/christoffer_van, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Current project stats: let: used 12 times 3 times in for loops 9 times as a proof of my fallibility. const: used 645 times variableName.property = something: used 6 times. 2 times for MyComponent.defaultProps = something 4 times for modifying a DOM api object. (Canvas rendering context) variableName[property] = something: used 0 times. In my project I don't reassign anything if I can help it. So as a coding convention in my grey matter, it wouldn't really matter if I used `let` or `const`. But by stretching that argument, I could also write everything as `var`, since regardless of it, I wouldn't ever misuse it. *Have you tried typescript* where you can make a following type: type DeepReadonly&lt;T&gt; = { readonly [P in keyof T&gt;: T[P] extends Array&lt;infer I&gt; ? ReadonlyArray&lt;DeepReadonly&lt;I&gt;[]&gt; : DeepReadonly&lt;T[P]&gt; }; Then you just could just wrap all your data types in DeepReadonly&lt;&gt; or DR&lt;&gt;.
Why? I didn't say that was the case.
npm install --save-dev @types/lodash
That’s what I thought. So why did the person I reply to say it was going to return a copy?
I think one can go a bit overboard with avoidance of let. I think it's fine for simple mutable state, eg., within a closure or in a module's private scope. But yes, prefer const (and use Typescript's readonly) whenever possible.
By copy they meant it returns a new array instead of mutating the array in place
I don't know why it's so surprising. What other language uses const to mean immutable? JS const is pretty much the same as C# const or Java final.
Wish I could down vote this crap more than once.
I high key like using let, especially in conjunction with ImmutableJS. Reassignment isn't an issue at all, and in fact it can really help make your code more readable--the real concern is mutability, which of course const doesn't protect from Though const is definitely the standard in JS, so always use it when you can. It's not a very safe language so you need all the help you can get
People remember your by the images ;)
As already posted, this isn't really about being functional. But IMO anything that avoids `this` is preferable. So functions that operate on structs rather than class methods, and closures to encapsulate state rather than 'private' class members.
I'm glad they're cleaning up, and improving existing stuff, and not adding more complications to the type system I have to figure out in everyone's source code.
It is but he worked at Facebook, Atlassian, Cloudflare and seems to be the creator of Flow and Babbel (core team). I mean we use that tools all day. He can't be that stupid.
Gotcha. Thanks, I appreciate you clarifying that for me.
whoosh &gt;&gt; JavaScript ecosystem for the better &gt; &gt;So they're shutting down npm?
&gt; const is correct. let is not, unless you actually want to reassign a variable Disclaimer: Let me be the devils advocate here to get the discussion going: Who says that this is correct? Just because everyone does? &gt; The author is an idiot He worked at Facebook, Atlassian, Cloudflare and seems to be the one of the creators of Flow and Babbel (core team). I mean we use that tools all day in a javascript tech stack. He can't be that stupid and wrong.
JavaScript is quirky. Best thing to do is avoid the quirks - I haven't used `==` for years.
No, I don't think it's *hard* I just think it's *useful*. Not every API uses GraphQL, and having a difference between "this property exists but doesn't have a value" and this "property doesn't exist" is useful. Null and undefined are different things used for different purposes.
This was my first thought too. You just need an understanding of _what_ is constant. If you have experience in pretty much any other language the difference is really clear, as you said
Disclaimer: Devils advocate again to get the discussion going: Is this not the exact thing he mentioned in the article? I mean you don't have 645 real constants. What are real constants of the 645 and what are just: "I will not assign this variable again but you could change it to let if you need to constants"?
_Eh_, in any good debugger, you can a) blacklist library files so the debugger won't step into them b) set inline breakpoints for those oneliners These are solved problems.
&gt; Though const is definitely the standard in JS Disclaimer: Devils advocate again to get the discussion going: Why? Because everyone does? &gt; It's not a very safe language so you need all the help you can get Exactly, but would it not be more helpful if you use constants only for values which are actually constants? I mean this would help more than having over 600 const vars. in the source code which are not actually constants maybe just a few of them.
I was lazy and none of the solutions I found were simple/effective enough, so I wrote simple script which runs puppeteer and converts HTML page to PDF. https://gist.github.com/GuskiS/9e6d654ae5a961b8e1c7037bd149622d Hope it helps, there might be possibility to serve HTML as string, but not sure.
And yet.
&gt;Disclaimer: Let me be the devils advocate here to get the discussion going: Who says that this is correct? Just because everyone does? Everyone does it because it's correct. If you don't want a variable to be reassigned (and you basically never do), use const. In the very rare case where you might want reassignment, using let signals this intention. &gt;He worked at Facebook, Atlassian, Cloudflare and seems to be the one of the creators of Flow and Babbel (core team). I mean we use that tools all day in a javascript tech stack. He can't be that stupid and wrong. Apparently he can. He's also a shit writer, or are you going to argue that this also can't be true because of his resume? Lots of idiots work at lots of big companies. In my experience, most people working at big companies (like most people everywhere, but often with higher salaries) are some degree of idiot. If this is the hill you want to die on, be my guest. But you're just going to make a fool out of yourself, at best. FYI, it's "babel." Two Bs.
Is it maybe more likely that we are not correct and he is? I mean we sit here on reddit and talk and he has over 650 repos on github. Maybe now 651 in the time we talked here...
We use the [RestPack HTML2PDF API](https://restpack.io/html2pdf) for several clients at my job. It generates PDFs from web pages, so we generate a print-friendly template and then feed it to the API.
&gt; Who says that this is correct? Just because everyone does? `const` communicates the **intention** of the programmer who wrote it. When working on large/complex codebases, readability is everything, believe me.
The single loop is great for optimization but trades that for readability/simplicity. Which could very well be needed. Most of the time your higher-order functions take functions that are so simple that they are obvious. You compose functions from these simple parts to make more complex behavior. If I have to go to the debugger, I feel like I have failed to make a good design.
&gt; Everyone does it because it's correct. Thats true but worpress is shit too and everyone uses it and people even write in that spagetti new plugins. What the mass uses is not a quality indicator in my opinion. At least to a certain extend. &gt; If you don't want a variable to be reassigned (and you basically never do), use const. In the very rare case where you might want reassignment, using let signals this intention. Yes I do but hear me out: How should a developer after one or two years know that he actually is allowed to reassign that variable. In other languages when I would see something like this I would rather say: "Ohh the programmer declared it as const, so he wants always that same object/reference". Then I would not reassign that var. but it could be fully okay to reassign. &gt; Apparently he can. He's also a shit writer, or are you going to argue that this also can't be true because of his resume? It is a rant :D &gt; Lots of idiots work at lots of big companies. In my experience, most people working at big companies And they only eat...At least if you watch them on youtube... &gt; If this is the hill you want to die on, be my guest. But you're just going to make a fool out of yourself, at best. Rip! Tanks for your insights! &gt; FYI, it's "babel." Two Bs. I will correct it, thx!
I just defer to linters. For a while I actually had an opinion, that var was fine, and let an const were optional when they seemed to fit the moment. But the way wannabe leetcoders act like it's such an incompetent blunder, and call it out, screw it. Way too trite for me to even bother thinking about.
Well he should have written a better article then.
Just to elaborate on your grievances... I thought this post was going to tell us to write sensible code that avoids conditional statements everywhere by, e.g., ensuring that invalid data cannot possibly be passed into most functions (see: [Making Impossible States Impossible (YouTube)](https://youtu.be/IcgmSRJHu_8) ). Instead the post suggests alternate ways of writing more conditional statements which make use of *implied* Boolean evaluations in host object methods, just to avoid writing an extra half-line of code. The result is terse code *for the sake of terse code*, which is far less clear about its intent. This could have been a good post. Sadly it wasn’t. It could have offered insight into keeping error-handling at the outer edges of the application, preventing the need for conditionals throughout the codebase. Instead it’s just some overly-clever JS hacks.
If you don't know how to implement this effect just by seeing it, then I don't know how to help you.
But this is exactly the point of the article when you have a big code base 10000 `const` vars. you dont know which one of them are actually constans. You just have now 10000 places where you are not sure if you are allowed to change them to `let` or not. Because of what you said the programmer said I want const here, no new object.
Yeah, less fucking would be a good start.
Hi u/AcidRohnin, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The whole let/const thing is what made me finally give in to linters. To save my sanity. Nothing is more insufferable than arguing this point with some pretentious turd in a code review. For like 15 years var was fine, now all of a sudden it’s a fireable offence. My ass.
&gt; If you have experience in pretty much any other language In many languages constants have the same behavior like in JS but nevertheless you dont prefix in other languages every var. with `const` like you do in JS. That was/is the point.
I was using Digital Ocean, but am currently switching to Azure(because work is switching so I wanted to get hands on experience with it) Honestly I think DO was easier to work with, but that's probably familiarity bias.
Are you being serious? That's ridiculous.
&gt; now all of a sudden it’s a fireable offence. My ass That made me laugh :D - I hope that was a joke.
If you're looking for something cloud-based that does not require local setup, the team here at DocGenSoftware would be happy to work with you to accomplish what you need. You use templatized DOCX files and provide your data in JSON format to generate your PDF documents. PM me if interested, we want to help!
Some of us do make 6 digit salaries at big bay area tech companies and have thousands of github stars and still could care less about the article's argument... `const` has a very specific meaning. He's complaining it's not the meaning he wants and then throwing swearwords around to sway impressionable people. The reality, though, is that this is a storm in a cup of water. You don't hear Paul Irish or Brian Terlson or Axel Raushmayer ranting about this kind of stuff because it's superficial, and they are not scared to read the Ecmascript spec and use their own brains to come to their own conclusions. You should too. Jamie is prolific alright, but he also has a reputation for being a attention whore/drama queen (see e.g. the times when he went on a rampage wrongfully accusing Microsoft employees of ripping off up "his" code, or when he wrongfully claimed Babel was his project, or the anti-ICE license change drama, or heck just scroll through his twitter feed...). I really wouldn't consider Jamie to be the most authoritative resource around...
Hi u/shiningmatcha, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Which true scotsman, err, debugger do you suggest?
Hi u/AManIsBusy, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Well, probably not the first time, but level to which it’s a joke depends on the prissiness and call-out level of the pretentious turd.
const rulezzzzz!!!!!!
&gt; and still could care less about the article's argument... But are we then not the problem? I mean when the argument is good...What do you think about this statement: &gt; Did you really mean to COMMUNICATE that we should never change the answer or do we just happen to never change it? &gt; What if we came along later and decided we are okay changing the answer? But now it's a const and we aren't really sure if we're going to break someone's expectation for answer if we do change it. &gt; There are lots of bindings that we happen to never change that we're totally fine if they do change. In fact, that's probably true for most bindings. It's not something your code will generally care about. &gt; But by automatically applying this rule to every binding no matter what the author's actual intent was, we actually throw out our opportunity to COMMUNICATE something I think this is very true and my main point to use let insetad of const. And only use const if they are actually constants. Or an other example: In c# or in Java constants behave the exact same way like in JS. In these languages no one would write a `final` before every var. just because it gets no reassignment so far... &gt; Jamie is prolific alright, but he also has a reputation for being a attention whore/drama queen Okay, dont know him just found his article on the web...
Those aren't higher order functions. A higher order function takes a function as an arg and returns another function.
I think I know of what type of person you talk about. Annoying! This reminds me of one statement of the creator of PHP. "It does not matter how or with which tools you build your app/product. Only the app/product itself (result) must be good." something like this...
`let` and `const` for me also convey the meaning of how I'm using that variable. I could have two cases: * `let` is a default and there are no consistent rules of use. `const` is reserved to those values that don't make sense to change at all (like exports, functions, enums). * `const` is default and has consistent rules of use. `let` is a special case where when I see one, I know that I **will** change it after declaration (if it's unset). It should be obvious which one has tighter rules and thus which case gives me more information when I encounter them. In the former one, I can never be quite sure that a value isn't changed. In the latter one, I can be sure that when I go to declaration it's also the definition (as in value).
I like this reply because it shows me an other way of thinking. The problem I am not sure if I agree. I think the following statement of the article weights very much: &gt; What if we came along later and decided we are okay changing the answer? But now it's a const and we aren't really sure if we're going to break someone's expectation for answer if we do change it. &gt; There are lots of bindings that we happen to never change that we're totally fine if they do change. In fact, that's probably true for most bindings. It's not something your code will generally care about. &gt; But by automatically applying this rule to every binding no matter what the author's actual intent was, we actually throw out our opportunity to COMMUNICATE something. and this would speak for the first version of the list you mentioned.
&gt; Did you really mean to COMMUNICATE that we should never change the answer or do we just happen to never change it? The argument is self-defeating: if you were to use let where most would use const, you should then ask yourself "did I really mean to COMMUNICATE that we should be careful about what this variable references or am I violating the YAGNI principle?". The question for const is benign and for all intents and purposes pedantic. The one for let is picking between two known bad choices. Anyone who's been around JS enough ought to know in their gut that whenever one changes a const to a let, there a 99% chance the are doing something bad (due to introducing complexities related to referential equality)...
I think as people have discussed else where, I think the `const != immutable` is the key takeaway. I can see there being some benefit to only using `const` to annotate objects that are intended to be truly constant and using let for things that mean anything that is intended to be changed. At the same time I feel you've given up the one true protection the language can enforces for a convention which you can easily make a mistake against.
Thanks. This is one statement on Stack: "I haven't decided totally myself, but I'm considering using const for all non-array/non-objects and use let for objects/arrays." and "const can lead to performance issue as they can't be garbage collected as their reference is immutable." What do you think about that?
I might have an innate, and largely irrational, gut feeling where mutations pollute the readability of all code around them. Granted, if the mutations are hidden and the function behaves like a pure function, then there's no problem. I haven't had much chance of having those, though.
As I mentioned, `let obj` implies referentiality matters, and code that relies on it is far more difficult to grok than code that doesn't. Implying that you are doing it when you're not is somewhat equivalent to the story of the kids crying wolf. // if you think `let` here should be used to indicate // the fact that objects are not immutable // then you do not understand references well enough // and you should probably follow consensus let obj = {a: 1}; obj.a = 2;
Everything good in this release!!
I know see more points. Javascript wouldn't be what it is today if people couldn't have expanded and polyfilled functionality. A naive array prototype object implementer would expect it to never be expanded or modified and could've defined it as immutable, nonextensible, etc. I don't quite understand what's the meaning behind the word \*binding\* here. Usually, when something is defined as \`const\` or \`let\` is opaque to all third party developers anyway. Further, extensions are quite a bit better to do explicitly rather than implicitly. I don't have enough library development experience to weigh on that further.
For objects `const` is fine they are refernces anyway. Interesting it gets when normal scalar variables come into play. Everything is prefixed with const even if it would be fully okay to change that variable. Even the fact that every says if you need to change that var. just change it then to `let` shows already that it never really was a `const`
No. Takes a function OR returns a function. It can be both, but it’s not required.
Hi u/ainoid, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Now there's a fucking npm enterprise edition. D:
.filter(x =&gt; x &gt; 5) The animation returns 5 though
&gt; it would be fully okay to change that variable This statement is very fuzzy and I'm not sure I understand what interpretation you mean. Do you mean to say this is ok? let now = Date.now(); Again, this implies you'll change `now` within that scope for some reason. `const now` makes it clear that `now` refers to only one point in time for the scope of that variable, meaning there are less mutable things for a code reviewer to keep in their heads. Or do you mean this is ok? let version = '1.0.0'; This makes even less sense if the intent is to communicate that a programmer might change the code. Because obviously a programmer can change _any_ code and run tests and take responsibility for their commits.
If your code isn't too dynamic, a good IDE should be able to infer and show the return type even without complete JSDocs.
Ah. You are correct.
I know this is /r/javascript but I think the same problems apply to python. If I put a breakpoint on line1, I'm able to see the value of `n` on every call. But it's not in the normal stack location you'd expect because `out` is lazy-eval. `out` on line 4 is currently the lazy `type map`, when I hoped for `out` to have been evaluated. I can force it with `list(out)` But in actual code, it seems like that would be annoying. At least I can see the values of the lambda call. is_even = lambda n: n % 2 == 0 l = [1, 2, 3, 4] out = map(is_even, l) # out is still type map out = list(out) # out is now `list[int]` print(out) So what I mean is I have to use # yay, now a breakpoint exists. out = list(map(is_even, l)) print(out) This seems like a lot of work for little gain?
Honestly, does it need to be explained.
At my work we've been using the babel plugin for a while and it is the best.
&gt;Thats true but worpress is shit too and everyone uses it and people even write in that spagetti new plugins. What the mass uses is not a quality indicator in my opinion. At least to a certain extend. I didn't say it was correct because everyone does it. I said everyone does it because it is correct. The order of operations matters. &gt;Yes I do but hear me out: How should a developer after one or two years know that he actually is allowed to reassign that variable. In other languages when I would see something like this I would rather say: "Ohh the programmer declared it as const, so he wants always that same object/reference". Then I would not reassign that var. but it could be fully okay to reassign. Little hard to follow what you're trying to say here. But hear me out: I don't care about bad Java programmers who have trouble with Javascript because they haven't learned the language. You should rarely, if ever, want to reassign a variable. This is why const is correct. "But, but, but bad programmers reassign shit all the time!" is not an argument for let. &gt;It is a rant :D When someone feels the need to rant about how stupid he is, I try to believe him. If you're writing Javascript well, const and let should be entirely interchangeable except in a very small number of edge cases. Reserving let for those cases provides important context that you're about to do something that's kind of dumb (reassign a variable) because it's necessary for that specific part of your program.
r/restofthefuckingowl
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
VSCode's Node &amp; Chrome debuggers are nice.
You must be a 10x developer (/s)
Hi u/CoderDot, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nice!
This isn't actually an issue with the keyword, it's an issue with the language (and most languages). The normal thing is UPPER_SNAKE_CASE for global constants that should never be modified but I've definitely seen code that modifies global objects regardless. Frankly in my day job, I don't care if you mutate the reference because most mutations are non-destructive (more often Array.push and Set.add and Object[key] = newVal, but I *do* care if you blow away my reference, because you've wiped away all my work and now we probably have a bug because the values might have been missed. If you want true(ish) read-only constants that are never modified, Typescript to the rescue with `readonly` and `as const`
Hi u/invinc_ray, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/SuperStreetRat, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I'm putting myself in a vulnerable spot by saying this, but I don't understand Typescript, so whenever I see it, I run away.
It’s just JavaScript with types! There are some things that can still be a bit difficult to think about but I quite like it.
'!', '&amp;&amp;', '||'
lets be frank i doubt you know how to help anyone. thats takes a skill known as empathy.
That ceej quote is savage
that may make it more readable to you, but it will make it less readable to everyone else who uses the actual keywords... I don't think it is very difficult to remember the 3 symbols and what they mean.
He probably doesn't understand typing, so Typescript seems weird and scary. Totally natural. &gt; It’s just JavaScript with types! We have to stop saying this. We don't explain the difference between a car and a bicycle by saying "it's just wheels with an engine". He put himself out there, ready to learn. If we understand what they are confused by, we should take a minute to educate them like those before us did to us, instead of giving them the equivalent of a tag line or sound bite. Once you understand Typescript, it is (mostly) JavaScript with types. At least that's my two cents.
What is it you don't understand about Typescript? Is it types and what they are used for? Or is it something else?
Have another downvote
In the few times i encountered Typescript, it was in a package or a module, and it added no value to me and only caused problems. Left a bad taste in my mouth
What IDE do you use? Your IDE (I use WebStorm, but VS Code works for people and is free) will grab the typings from that module and give you code assistance when working with that library. It helps your IDE understand the file. With JS, the IDE has to scan it the best it can and guess at a lot of things. With a properly typed library, there isn't guessing. What bundler are you using to load that module? Most bundlers with TS support will do a form of compiling and it'll help ensure you don't have (design time) errors. If you are the only person working on a project, and it's just a personal project, you will struggle to see the benefits. The biggest one is when you come back in 6 months and try to understand the code you wrote. "What type was this variable supposed to be? Was it redeclared anywhere else in code?" Issues like that won't happen. As you switch projects frequently, and the team size grows, the benefits become apparent immediately.
Just curious: do you find life harder without Google products and simply doing it to make a stand? Or have you have an equivalent or better replacement across the board?
Very cool! Quick questions: \* How do you control animation speed? Would this animation run faster the faster your CPU is? \* Why request animation even when row reaches zero? Would probably be best to stop requesting new frames after that?
Puppeteer! I've used it for many different PDF invoices and it's a dream.
It is not worth it to encode your code and later have a translator for it. Less code is better as it helps you focus on other important areas.
&gt; We have to stop saying this. It is literally a typed JavaScript superset though. That’s the pitch. Right off typescriptlang.org
I don't think "harder" is the right word, it's more of just getting used to new tools and breaking old habits. It *is* just a protest "stand" though, that's the only reason I'm doing it. I generally like google products (when they don't cancel or lobotomize them) and don't really care about their less than stellar data collection and privacy issues. However, as much as I like some of the products, I don't like the way the company behaves both from an indy developer standpoint as I mentioned, and also from a customer service perspective -- their CS is terrible, even for paying customers.
How does that help someone who doesn't understand what types are? If a person has done nothing in dev besides JavaScript, it means nothing to them except things are more complicated. Yes, their website says that. But it isn't. There are definitely things that are different than JavaScript. Decorators for once. You may have to enable them, but they are definitely extremely common.
That’s an advanced concept you learned at some point too. It’s learned like anything else. Realizing you already know a good part of it is a good motivator.
Side projects: [dokku](http://dokku.viewdocs.io/dokku/) on the cheapest [Scaleway](https://www.scaleway.com/en/) instance Work (when I can choose): [Appengine Flex](https://cloud.google.com/appengine/docs/flexible/) Both are rock solid, easy, realiable, and cost effective for what they provide and what they are intended for.
This kind of attitude is why our industry is toxic. You are probably just a joy to work with.
Typescript is only good for IDE developers.
I remember being a new programmer 20 years ago. My mentor had a rule: if, after finishing a piece of code you pat yourself on the back and feel particularly clever, stop, and rewrite it in a clearer, non-clever way. The next person to read that code will be lost, and typically so will you when you come across it in a few years. I feel like a lot of programmers just want to show off how clever they are, but never think about maintaining that code; but maybe they don't have to because it seems like people change jobs the way they change underwear so they never have to face the actual consequences of clever code.
1. `requestAnimationFrame` ensures it's not CPU based. &gt; The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. [MDN](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) If you want to control the speed, `requestAnimationFrame` does pass a delta time argument you could use (milliseconds since last frame). This is how most game engines work. 2. If you were just drawing one image, yeah you'd stop at row 0, but that example loops forever; it sets `row` back to `imageHeight` when it hits 0.
Silly opinion, I use vim without the fancy inference plugins and still love TS
This sort of behavior is why I can't convince my friends to enter the industry. Don't be like this person.
If you'd like to see the code in action: [https://luke.lol/check-fs-quota.php](https://luke.lol/check-fs-quota.php)
Eslint is a linter and prettier is a code formatter you can't prefer one over the other. Sure eslint has some formatting rule, but it's not comparable to what prettier can do. Me and most people I know use prettier *with* eslint
Hi u/Ki_Bender, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It looks great! And while at that, check the other tutorials, lots of good stuff in there. Thanks!
Woha! You're a champion!
At work we use [Octopus Deploy](https://octopus.com/)
Heroku
Ansible playbooks.
JavaScript's syntax is based on Java/C. &amp;&amp;, || and ! have been the standard in C-family programming languages for decades. The increase in readability would be nullified by backwards compatibility issues and inconsistent codebases. JavaScript isn't Python.
Ha. I could do it with 1 line.
Hi u/wpmed92, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Netlify
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Would this also work without a server? So can I just run this in a browser?
Hi u/SulfurCannon, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I'd like some cheaper alternative maybe free
I don't like TypeScript because if how it's architected, and I think Flowtype fits into the ecosystem much better. But... the features TS offers are compelling, and its invention of the Language Server Protocol is significant, and means not only VS Code can do "intellisense" on TS/JS. I wouldn't write every project in TS, but for a large project with many people I'd consider it.
Tool wise I can use yarn instead of npm, but what’s the alternative to the registry itself? I know there was some noice about some main employees breaking off to make a a distributed registry, anyone know what the status of that is?
I use it only for null/undefined checks.
I would do it like this: ```` // The value of Date is not constant, so I would use `let` let now = Date.now(); ```` ```` // The value of Version is constant, so I would use `const` const VERSION = '1.0.0' ```` ```` // I would not use const because the value of the user-input is very likely never the same and it is very likely that it need processing let userInput = document.getElementById("input").value; ```` A lot of ppl. would do this: ```` const userInput = document.getElementById("input").value; ```` But it gets very clear that this never really was a constant if we write more code: ```` // Now a lot of people would change that const to let but it never was actually a const let userInput = document.getElementById("input").value; userInput = trim(userInput); ````
Fixed
Maybe it’s a typo but the example for poly fill using isFinite is using a global function isFinite not a method of Number
Hi u/DEB3007, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
TypeScript is amazing. Just wanted to say that.
Hi u/DEB3007, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What video?
star [https://hapax.bitbucket.io/star/](https://hapax.bitbucket.io/star/)
I made a small (&lt;1.3kb) library for making components out of HTML you already have. It's a really easy way to add UI features to server-rendered HTML. It has lifecycle methods, internal state, simple \`data\` attribute api [https://github.com/tamb/domponent](https://github.com/tamb/domponent) . Influenced by Basecamp's Stimulus.js.
I made a tool for creating cryptocurrency trading bots and deploying them to aws lambda. It is built on top the serverless framework and allows developers to implement custom strategies for any exchange that has an api. &amp;#x200B; Github: [https://github.com/ScaredIbis/flexible-crypto-trader](https://github.com/ScaredIbis/flexible-crypto-trader)
Hi u/NishkalKashyap, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Recently I've started teaching functional programming in JavaScript [on YouTube](https://www.youtube.com/watch?v=M4EyBg1dgas&amp;list=PLhXZp00uXBk4ejkUZiDnv3R0AERA7Z4xp). It's an introduction to the topic. My goal is to present slightly lesser known programming concepts and paradigms.
Interesting. Here’s some feedback. Is it for educational purposes for you? Or are you sharing it to help educate others? If it is for others, then add lots of explanatory comments in the code. Thanks for sharing
We continue working on open-source Educational JavaScript Project. Here is an announcement of the live youtube session with the live coding [https://medium.com/@korzio/educational-javascript-project-live-coding-94ae4a1154c8](https://medium.com/@korzio/educational-javascript-project-live-coding-94ae4a1154c8) &amp;#x200B; Also, recently published an article about Async Iterators - [https://medium.com/better-programming/why-would-you-use-async-generators-eabbd24c7ae6](https://medium.com/better-programming/why-would-you-use-async-generators-eabbd24c7ae6). Will be very grateful for any feedback, suggestions, help, claps, and reposts.
Thank you for the feedback. The answer is both. Started as something for myself, but I thought it is useful for others, because the codebase is so small that it can be understanded as a whole very quickly. The goal is clearly to make it even more useful. Thanks for pointing out the lack of explanations. I will add a lot more detailed examples.
That one it's a global function [isFinite](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite), I know it caught my attention as well at first
Speed that up and it could be a nice lazy load animation.
Great findings
Are you posting on hackernoon? They recently broke from Medium. Might be good to support them.
Hi /u/davidibl, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
When you have a really thorough eslint config (we use airbnb core extended with our own rules, plus vue recommended or react equivalent), it does almost as much as prettier can do. And actually, the things it won’t do are the things I don’t want it to do, so yeah I prefer it over prettier.
The GitHub registry will eventually usurp them.
&gt;Access **3659** libraries from C# and let [Bridge.NET](http://bridge.net/) compile your project into JavaScript. More like compile your C# project to JavaScript.
Hi u/unknow117, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I read the title and thought "why the fuck would I wanna do that?" Think you got it a little backwards
Hi everyone, I start to learn javascript and need to understand one thing about the loop for. I do understand everything except the var str. I don't understand why the "str" stand for. Here is the case: var str = ""; for (var i = 0; i &lt; 9; i++) { str = str + i; } console.log(str); // expected output: "012345678" Thanks in advance
AWS codebuild + codepipeline + GitHub (or codecommit if you want to keep it private)
I do some work on a platform where the browser is from ~2012; it barely even supports ES5 (bind needs to be polyfilled). While frustrating at times, it has had the advantage of forcing me to learn the differences between each release of ECMA Script. ES6 had the most "library" additions, and the list isn't all that big. If you have to support older platforms I highly recommend learning which library methods were added when. It gets really easy to slip into newer JS and learning to keep an eye open for unsupported features will be super helpful!
I think the compiler (transpiler) is really where TypeScript shines. I recently regactored a commonly used method in a large enterprise application which required adding a new, required property in a configuration parameter (think: methodA({a: true, b:false}). Rather than having to find all the existing calls to methods using that parameter myself, the compiler spit them all out as errors allowing me to quickly and confidently complete the refactoring.
**No.** As is posted in multiple places in this sub (presubmission warning, [guidelines](http://www.reddit.com/r/javascript/wiki/index) in the sidebar, etc.): /r/javascript is not a support channel ------------------- * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! The community has requested that we not include help and support content, and we ask that you respect that wish.
Where do you add these polyfills? Is this in addition to Babel?
Yeh I am on Opera, maybe unrelated issue to firefox, but it says cant connect to reddit. It doesnt matter how much time you take, I would just love to see it fixed. Thanks in advance
I have a lot of respect for Jamie Kyle. I’m normally inclined to give his opinions serious consideration because of the many, many great contributions he has made to the JS community, but he comes across here like a teenaged edgelord who mistakenly believes that gratuitous usage of ‘fuck’ and ‘shit’ serve as an acceptable substitute for a good argument. Maybe that’s the point, and this is just satire that’s a little too on the nose?
Great work. u/tippr $0.25
u/czjiyomo, you've received `0.00078644 BCH ($0.25 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://bitcoincashers.org/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
u/tippr $0.15
u/tippr $0.10
u/scaredibis, you've received `0.00047186 BCH ($0.15 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://bitcoincashers.org/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
u/thesadburrito, you've received `0.00031451 BCH ($0.1 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://bitcoincashers.org/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
Seems cool, but it was causing problems when I tried to implement a module and it was an error in the dev's part. Just made dealing with other people's code even harder to deal with.
Everything edited and managed locally, then FTPd to DigitalOcean or other managed hosting. For my own apps I use Cloudways over DigitalOcean.
If you're using [Babel](https://babeljs.io/docs/en/usage#overview) you have the option of specifying what browsers you're targeting, allowing it to automatically manage your required polyfills (babel uses [browserlist](https://github.com/browserslist/browserslist) to do this). That's not to say that it isn't useful to be aware of the limitations of the browsers yourself, though, so +1 from me.
I would use compressed images for normal usage (definitely for the background), and serve the full quality version when needed (like opening an image).
&gt; bind needs to be polyfilled :(
Hi, what page are you trying to view? Has the site worked for you in the past? There is currently an outage of a 3rd party service that may impact some results. User pages should work. If you are unable to access your user page on revddit, you might have a conflicting extension. The site works for me in Opera. Let me know how it goes!
Yeah that makes sense, currently most of the files are around 3MB-ish, how small can an image file(jpeg and png in this case) before there will be noticeable drops in quality(visually)?
Normally, netlify. In the past I've used Firebase hosting and github/gitlab pages.
CoffeeScript (RIP) used this.
You can simply override the prototypes of this JavaScript native objects at page load. But yeah of course using babel and browserlist for browser compatibility it's potentially less messy, the downside being you don't get transparency in the polyfill implementation.
You could even use a backend image scaling service so that you aren't sending 4k images to a mobile phone or 13 inch laptop
Also take a look at [`srcset`](https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/).
I see this and think whirlpool, not blackhole.
That's cool too! Maybe later today I'll try to tweak it out to look more like a whirlpool.
Well, there's something I didn't know about! Thanks, this plus compressing images has bought it down to 10s!
I was planning to do the image scaling myself when I've got the approve to use a backend, but this looks cool too, I could suggest the clients of this! Thanks
If your audience has mostly 3g images then are those huge images really adding more value then they cost in load time? For a site that image heavy of use every trick in the book. Compress everything, lazyload with low res placeholders and even reassess the design to see if the amount of images can be reduced.
[removed]
Hi /u/Just4Funsies95, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I'm not arguing against :-) We need more of these researching done to better understand the status of the ecosystem. For example, if npm was able to provide download stats per a package's version that would be very informational but currently we have only a package-level downloads count.
Babel and core-js are your friends because these learnings get shared across a community and you don't go chasing something like this where you copy paste polyfills.
I would like to hope so as well but I'd be surprised if this is the case with the majority of the modules that didn't release anything in the last 12 months.
🆒
&gt;lazyload with low res placeholders The trick with lazyloading low res placeholders, I did some quick research and settled on a neat solution, loading a very low quality blurred image first then replacing it with the actual image! Thank you very much for this suggestion. I'm already lazy loading the images in the other pages, but the landing page has a background image and just one more image they take quite a lot to load.
You can use next.js with zeit/now if you want SSR/react/serverless deployment.
Hi u/nmaxcom, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Most hosting options offer a free tier for low traffic use cases. I know for sure heroku does
Hi u/nmaxcom, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I've just added a very basic example here: [https://github.com/jsdw/angu/blob/master/src/examples/jsonFilter.ts](https://github.com/jsdw/angu/blob/master/src/examples/jsonFilter.ts) It's only a starting point but I hope it gets the rough idea across!
$200 for custom staging suffixes seems a little too much to me...
Just learn the syntax and you'll forget about it pretty quickly. This is like, for any language there's an adjustment curve, but you're just hurting yourself by trying to change a language to what you're used to.
This is beautiful in it's simplicity.
Then do it? What is the point of this comment
Hi u/rishikcr7, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You could use node imagemin plugin and convert to webp. Then picture tag and lazy loading.
A few months ago I created a 'create-react-app' to learn webpack :D &amp;#x200B; [https://github.com/dabitCoder/react-webpack-config](https://github.com/dabitCoder/react-webpack-config)
React/React Native NativeScript/Vue Native Angular/Ionic
&gt; Node + Express + Postgress + Pug &gt; Simple Smh
Serverless or we build Docker containers to run on ECS.
Jenkins
So this is my problem. I use digital ocean as well. So what if I have a small change like a typo change. I was wondering if there is something we can do like a git push
 I'm a junior developer. I'm very much interested in Javascript. Today I just published my first ever article on medium regarding Javascript array methods. Please check it out and provide any feedback if you can. Thanks a lot :) &amp;#x200B; [https://medium.com/@thidasapankaja/javascript-array-methods-made-easy-part-i-1b1bbe325cb7](https://medium.com/@thidasapankaja/javascript-array-methods-made-easy-part-i-1b1bbe325cb7)
Could you not just use webassembly? It's not like you're doing any DOM stuff.
You could maybe try to divide your web site to few smaller articles and using js make i load one by one for exaple you can load 3 articles on load and than when you scroll to second article load fourth (just add image html do not nead that much time to be loaded) This is my opinion if you nead more infos contact me
gitlab ci
&gt;bind needs to be polyfilled Wow I didn't know bind was that new. How did people work before? Apply and call? (I assume they did exist).
You can easily transpile es6 for your code base dude.
I'm well aware, and do. It's an embedded system though, and at the time that a lot of projects started development there wasn't tree-shaking for any ES6+ method polyfills; Syntax transpilation is one thing, importing a gigantic library just to use [].includes(...) is another. Many projects were quick one-offs and experiments as well, not worth setting up an entire build system when you can just be mindful of what you're coding with. Basically, I'm saying that working on a system that has constraints forces you to be more mindful, which can be a good thing.
Circle CI, AWS CodeDeploy, and good ol' fashioned dragging a zip file to Elastic Beanstalk's Browser UI
This is precisely why I hate Webpack. You never truly "learn" how to use Webpack, you kind of just roll the dice until it works and come away 8 hours later with a little bit less hair and absolutely no knowledge gained.
Bind came in with ES5; it's pretty rare to have to polyfill it these days. IIRC call has been around since the ES1, and apply since ES3. A basic bind polyfill can be done using call/apply: Function.prototype.bind = function() { var context = arguments[0]; var args = [].slice.call(arguments, 1); var boundFn = this; return function() { var newArgs = [].slice.call(arguments); var allArgs = args.concat(newArgs); boundFn.apply(context, allArgs); } }
Uhhh, any photo-like image should be compressed as a JPEG (definitely not PNG) with the lowest possible quality that doesn't result in noticeable/distracting artifacts. As a rough guideline, you should be able to pull off a "full-page" image in no more than 200-300K. See, for example, the photo of the man and woman on this website: [https://www.brightidea.com/](https://www.brightidea.com/) which is 189K. If it were me, I wouldn't mess with fancy loading and stuff, I would just properly compress the images!
I remember before webpack when I was happy and full of life.
You can install single functions off of npm from lodash if you dont want the whole lib. Npm I lodash/denounce I think.
VueJS add-to-basket and checkout: [https://codepen.io/Vosmonster/pen/JgoWww](https://codepen.io/Vosmonster/pen/JgoWww).
Hi u/Slashy96, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Always happy to help!
Hi u/ivanhoe90, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi, I am the author of [Photopea.com](https://www.Photopea.com) , which is an advanced photo editor. I also did [AMA about it](https://www.reddit.com/r/IAmA/comments/c8ru2y/i_made_a_free_alternative_to_photoshop_that_is/) some time ago :) I gave a talk about it at the Web2Day conference, the video was published on Youtube yesterday. I thought it might be interesting for the audience here, as I think it is quite different to how people usually do the web development. E.g. I wrote 80 000 lines of JS in Notepad++. I never used any UI framework, Node.js or npm. I deal with cases, when even 4 GB of RAM may not be enough for a JS program (4 GB is the current limit of Chromium, I recommend users Firefox in such cases).
You may just want to consider enhancing the user experience during the loading times with additional interactivity ?
You can check out [Google's WebP format](https://developers.google.com/speed/webp/). Supported by all modern browsers except Safari. 25-34% smaller than comparable JPEGs.
In my opinion, it all comes down to ones preference... EDIT: ... and while I was looking for words to answer your question I've found this article - http://chevtek.io/its-okay-to-use-frameworks/
I use [lazyload](https://github.com/verlok/lazyload) and specify lower resolution images at smaller screen sizes. It's really easy to do in my case, since I develop themes for Shopify, and they have incredibly easy means of rendering smaller/larger images of a source image right from the theme code.
Are you referring solely to the Github tweet, or to something more? I think you're misunderstanding the context of that tweet. A lot has been said here and elsewhere about the role of jQuery, but 1) it's not a framework, it's a library, and the problems it solves are of a much smaller scope than those solved by modern frameworks; and 2) it can be replaced because most of the problems it solved when it first hit the scene years ago are now solved natively by modern browsers. Mainstream tech companies are definitely still using (and building/maintaining) JS frameworks for web apps and will continue to do so.
The phrase “Too many cooks in the kitchen” comes to mind here. There’s nothing wrong with some of these frameworks as they make a streamline process for developers but honestly Js is becoming more and more powerful and simpler to use. I get your frustration tho, it sucks taking time to learn something just for the industry to stop using it all together but it’s usually a slow death.
Nope, frameworks are saving time. Experienced developers have no time to invent wheel again and again and solving problems already solved by someone else. You can spend week to learn about some framework and then make application in another 1 week, or you can fight 2 months doing simple slider or responsive table.
There will always be libraries and there will always be frameworks
I recently attended a talk by \[Jeremy Keith\](&lt;[https://adactio.com/](https://adactio.com/)\&gt;), one of the things he said that stuck with me was that the goal of a framework is to be eventually replaced by a standard, which is exactly what has happened with jQuery. When jQuery was released it solved a lot of problems, but now the majority of the features it provides have been replaced by native standards. &amp;#x200B; Use frameworks when it makes sense to. It doesn't make sense to use jQuery now that it's killer features are now standards but if, for example you're developing a front-end application React would make that process a lot easier, mostly because there aren't standards that provide the same functionality. &amp;#x200B; I'd always recommend using vanilla JS where possible, but only if it makes sense to, frameworks aren't going away and they're (mostly) there to fill the gaps in the current JavaScript ecosystem.
No, I have been reading some articles promoting plain javascript over others. This tweet as in one of those articles. Would not frameworks die out after some time and wouldn't this consume time rebuilding?
I guess you don't really understand why they made typescript.
The answers make me curious. When would the next mass death of existing frameworks occur? And of course the birth of new ones?
[removed]
[removed]
[removed]
[removed]
This question seems to be asking what the next industry altering invention will be...if I knew, I’d have invented it already 😂
lol.
Hi u/gitarre94, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I made a visual animated RNG "race" app to determine the draft order of my fantasy football league entirely with Javascript and jQuery. I'm pretty happy with it, though it still has some work that needs to be done. [https://100yardrush.com](https://100yardrush.com)
This seems a bit relieving. Thanks lol.
I highly doubt framework usage is going anywhere. However, what is getting cut back is perhaps wanton usage of libraries, even in frameworks and other dependencies. Recently, whenever I've had to think of adding a dependency I've gone through the dependencies of that library with a comb to make sure I understand what I'm adding. If a library shows zero dependencies, I'm happy. If it shows a multitude of them, I will find another solution. Sometimes, that other solution is to write the code myself. Every dependency is a risk. Keep betting against the risks, especially with a dependency tree resembling your family tree, and you're bound to one day find a bad apple.
For small projects - possible. For large projects - only if you throw a shit ton of money to code everything inhouse.
No and here's why: Imagine you were a company that received thousands of emails per day. To save time, the company would create 'canned responses' instead of typing out new responses every single time. There might be edge cases where a custom response is needed, but they can reduce probably 90% of their work by using canned responses. Javascript libraries are just 'canned responses' for when thousands of develops have the same needs. It makes no sense for them to type out (and figure out) their own solution. There may be cases where writing something from scratch is needed, but in probably 90% of cases, there's library that can help. Thank you for coming to my TED talk.
You were told wrong. Lodash is one of the most widely used libs for good reason. 40k plus stars on github and four open issues. FOUR. Outdated and archaic? Find me another popular repo with that ratio and I’ll send you a nickel.
No. Because some libraries like jquery are meant to bridge short comings in the language. As javascript grows it will cover those shortcoming internally and make jquery obsolete. But... 1.) Consider the boost c++ relationship. C++ continually steals from and Internalizes things in the boost lib. But that's a collaborative relationship. You go out and try ideas in the libraries. The best ones get internalized in the library. The library will always be a few steps ahead of the language since the library grows with the language. 2.) Some libraries aren't meant to bridge short comings in the language. They offer capability that the core language will never consolidate. Leaflet for example. There will very likely never be a vanilla mapping library in javascript.
The point of jQuery was to deal with inconsistencies between browsers and not much else, so it's pretty useless nowadays. Frameworks on the other hand are complete different, since their use is to make your life easier and to make large codebases easier to handle. Frameworks are not going away unless people stop using HTML, get used to it.
&gt; I am told lodash is archaic and backdated. Unless the utilities it provides have been added natively, how could a utility library become archaic? Your alternatives are: write your own debounce or use someone else's package. The benefit of using the lodash version: it's well tested and actively maintained. Even if you're not using any other lodash functions, you can just install [lodash.debounce](https://www.npmjs.com/package/lodash.debounce) or import just the debounce function with `import debounce from 'lodash/debounce'`.
Not really helpful, as that's still going to be a huge, significant factor to the loading time. Lazy loading and proper compression, regardless of the format, is the way OP should choose.
If you're looking for convenience, I'd check out [Heroku](https://www.heroku.com/). It's pretty straight forward to connect an app to a github repo and have it redeploy whenever a branch changes. The CLI also supports deploying. We use it mostly for quickly spinning up QA/staging servers. The drawbacks are it's more expensive than something like DigitalOcean or EC2 (but there is a free tier that works fine for hobby stuff), and you have a lot less control over the server (which could be seen as a plus since it means very little maintenance/setup).
This is exactly right. I've been going through all my work's projects and ripping out any libraries that are barely used and trying to find ways to remove the larger ones as well. Basically trying to make it a "pure" framework project.
I hope so. I hate working with frameworks and other people's code... most of the time.
I can just about guarantee that to build a robust SPA you're going to be better off using framework vs. vanilla js for the next decade or two.
This website is great and loses very little quality... https://tinypng.com/
Front end performance is my itch, so I’ll give you a list: 1. Use modern image formats and compressions. 2. Use SVGs whenever possible. 3. Use srcset for different sizes and formats. 4. Only load images when they are just about to show on the viewport. 5. Cache all the images(service workers can help with dynamic content caching). They are for images. I you have issues with performance related to other stuff, feel free to send me a link and ask for help.
I can do it in one command! npm install electron
You could take on a naming convention for your promise returning functions. We use Angular, so it's observables in our case; but if the variable / function returns one, add a $ or something to the end of it's name. Like so: `doRequest$`
Hi u/Poimu, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Open issues is not a great metric. It could, of course, mean that the repo is more or less dead.
What one can do with Java or C# etc., can be done with plain vanilla JavaScript (or JS framework). There are two advantages here: 1. Web developer who knows just frontend technologies like HTML, JS, CSS can develop backend say service, controller with JS (Node js). No additional programming knowledge required here. 2. This way it is cost effective for a company to manage their applications since they don't need to recruit different skillet folks. JavaScript learning is really a good start if you just begin learning programming languages.
Hi u/krazyjakee, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Well, you start by not sending 4k images. Unless your whole market has 4k screens, AND care about perfect quality, AND your images take up the whole screen... they're useless. Cut the resolution then compress (preferably lossless). SSR doesn't give you any benefits on images, it only improves the rendering the JS would do.
Well, from 4k, you can cut the pixels by 1/4 at least, since 99% of the market doesn't have 4k screens, which gets you under 1MB. Compressing gets you a little bit more; some with lossless compression, a bit extra with lossy.
He's totally right
What have _you_ achieved in your career?
"const is correct" - what does it even mean 🙄, const and let have nothing to do with 'correctness'
"I am told lodash is archaic and backdated." This is nonsense :) Here you go: https://30secondsofcode.org/function#debounce
What about this: [https://stackoverflow.com/questions/2950107/git-push-into-production-ftp](https://stackoverflow.com/questions/2950107/git-push-into-production-ftp)
It seems Heroku is similar to Cloudways + DigitalOcean. I haven't tried Heroku though. Cloudways builds a controlled environment on a number of different hosts, and I can then focus on deploying applications. I have 20+ of my own relatively low-traffic applications on a single droplet, each with a database. When customers need more or dedicated capacity I set up more droplets. I have both FTP and SSH, so I still have freedom to screw up if I want to, but less severely.
Hi u/programmerjules, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
They kinda work the same way
&gt; Labels in JavaScript are a variation on the very ancient GOTO statement GOTO statement is a branching statement, similar to if-statement, or even a function call. GOTO was a bad practice because it created a very messy call procedure that forced you to keep track of line numbers, addresses, etc, every time you try to understand the code; it made refactoring code very difficult too. How does that compare to this? ``` outerloop: for (let i = 0; i &lt; 10; i++) { for (let j = 0; j &lt; 10; j++) { if (condition(i, j)) { break outerloop; } } } ``` This code is clean and easy to refactor. In fact, this could be refactored to this: ``` function doStuff() { for (let i = 0; i &lt; 10; i++) { for (let j = 0; j &lt; 10; j++) { if (condition(i, j)) { return; } } } } ``` Which looks and behaves exactly the same, yet isn't considered a bad practice. Think for yourself.
You could write a custom websocket server that watches your pug files for changes that would send a message to client to reload.
Is it better than my iPhone XS?
Love it
You cant represent a black hole in 3 dimensions. The whirlpool representation is a 3 dimensional representation of the bending of space time.
Not sure why you're being downvoted for asking questions and contributing to the discussion. All code becomes legacy code at some point. Even old vanilla js code becomes obsolete as the language evolves, so I wouldn't be overly concerned over that particular point.
Funny story. What was your use case for `Number.isSafeInteger`?
Principles of Writing Consistent, Idiomatic JavaScript - [https://github.com/rwaldron/idiomatic.js/](https://github.com/rwaldron/idiomatic.js/) No practice problems or anything like that...more of a style guide.
It's still alive!
In my eyes, no, not any time soon. Most things can work quite well on modern browsers with vanillajs, but there's still an elephant in the room: the DOM. DOM apis are a serious pain to work with, and frameworks can alleviate a lot of that pain. Most frameworks I've worked with have a view layer that abstracts away things like appendChild, createElement and the like. There's also general code structure that some frameworks mandate. This can create a "level playing field" where entering, say, an angular codebase you've got a pretty good idea where things are. With vanillajs, you get a lot of freedom, for better or worse, and this freedom can make bringing new people into the code far more difficult.
Take the following JavaScript code : let a = 10; console.log("START iterating"); LOOP:do { console.log("BEGIN of iteration"); if( a &lt; 13 || a === 15) { a++; console.log("CONTINUE"); continue LOOP; } if( a &gt; 18) { a++; console.log("BREAK"); break LOOP; } console.log(a); a++; console.log("END of iteration"); } while( a &lt; 20 ); END: console.log("STOP iterating"); Here, you define label `LOOP` to represent the `do...while` loop. You use a `continue` statement with the `LOOP` label to break out of the xurrent iteration and a `break` statement with the `LOOP` label stop looping altogether. Now, consider the following C code : int a = 10; printf("%s\n", "START iterating"); START:do { printf("%s\n", "BEGIN of iteration"); if( a &lt; 13 || a == 15) { a++; printf("%s\n", "CONTINUE"); goto START; } if( a &gt; 18) { a++; printf("%s\n", "BREAK"); goto END; } printf("%d\n", a); a++; printf("%s\n", "END of iteration"); }while( a &lt; 20 ); END: printf("%s\n", "STOP iterating"); Here, you define label `START` to represent the `do...while` loop &amp; a label `END` to represent the first statement after the loop. You use a `goto` statement with the `START` label to break out of the xurrent iteration and a `goto` statement with the `END` label stop looping altogether. The behavior of both is strikingly similar, and the output is identical : START iterating BEGIN of iteration CONTINUE BEGIN of iteration CONTINUE BEGIN of iteration CONTINUE BEGIN of iteration 13 END of iteration BEGIN of iteration 14 END of iteration BEGIN of iteration CONTINUE BEGIN of iteration 16 END of iteration BEGIN of iteration 17 END of iteration BEGIN of iteration 18 END of iteration BEGIN of iteration BREAK STOP iterating &gt; Which looks and behaves exactly the same, yet isn't considered a bad practice. &gt; Think for yourself. As you said, you can achieve the exact same effect by using functions instead of labels. So what's your point? In programming, that's often many ways to achieve the same result that sometimes look very similar and sometimes look very different. Just because they look similar, that doesn't mean one isn't a better choice than the other.
As if the black hole swarm at the center of our galaxy wasn't enough
Good bot
Thank you, z-zy, for voting on license-bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
My rough understanding is that they've made a huge leap but not quite huge enough to dethrone Intel as the leader in single threaded performance. npm install cluster?
The real downside to lodash is that it's big, and if you're not careful, you load a bunch of stuff you don't need. Some of the stuff in there has been implemented naively, and some is so trivial with newer native stuff that there's no need to get a lib. But debounce is definitely still good, and there's plenty of other gems. Just make sure you're being selective about what you include, unless page load isn't a big deal.
Very cool! It’s nice to see an explanation as well!
The paradigm you are looking for is called "functional programming". There is a seemingly infinite supply of articles on functional programming in js.
I don't really know what you're asking with your question. Do you want to program in a more function way? If so, then stop using classes, and instead, use functions and object literals. Functions should provide the computation in your program and your object literals should contain the data/state of your application, and you shouldn't mix the two. Your functions should be small and composable. Also, learn how to use callbacks. The next step would be to try to keep you functions pure and your data immutable.
Hi u/garboooge, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I tend to post a lot of snippets on twitter and reddit to help teach javascript concepts. Sometimes, using a conventional editor and taking a screenshot is a pain in the ass, especially if I’m mobile or the code snippet is especially long/tall. Additionally, while I realize my snippets have helped a bunch of people learn, I know there not accessible. I created this quick utility that’s a work-in-progress to help me easily generate code snippets. I still have a lot of work to go, including the following to-do list: - different languages - different code themes - persisting and linking to previously-generated snippets I’d appreciate any recommendations, especially on how to achieve the last bullet. Having a link to the snippet is crucial for accessibility. I’ve done a bit of backend work, but am still a bit skeezed our by storing any user input, plus I’m hoping to roll this thing out at little or no cost. Thanks everyone!
Yes, I actually found it was because of the disconnect extension, so i made it unblock [reddit.com](https://reddit.com) and that seems to have fixed it. So yes, I would say it was a conflicting extension. Thanks anyway!
Hi u/nanariv1, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The tests I have seen were that they had some benchmarks that are faster than intel in single threaded, and some that weren’t, but they were so close it probably doesn’t matter. But these were like rendering systems and video editing benchmarks. I don’t know if Chrome has intel-specific optimizations for JS. It’s probably too early to call, since there will still need to be optimizations based on real world use after gathering usage data.
Frameworks and libraries will never go away, only specific libraries/frameworks will go away or become smaller. Development is about pushing boundaries. We are doing amazing things today that require libraries to perform effectively where they were simply impossible before. Meanwhile, some features no longer require libraries because they are part of the platform. Libraries and frameworks represent the clean interface on the edges of the capabilities of the browsers. They will only stop changing or go away if we stop innovating on the web entirely (not going to happen) or if the web platform somehow adds all conceivable features (not going to happen and a really bad idea). Beyond that, sometimes libraries are made just to avoid repeating work that shouldn’t be part of the web platform (like a business-specific framework for a business specific product) or to allow a different (but not better or worse) interface on an already existing feature (like immutable libraries).
Do you, boo
In this case, however, it doesn’t. I’d be pretty confident in saying that if you use any modern js tooling, chances are they use lodash under the hood one way or another.
Definitely. Fortunately, for most modules you can install the package independently without the entire lib, which is another sign of a truly quality library.
Great, I'm glad you solved the issue!
I don't know if I should say this, but maybe you could... _get inspiration_ from https://carbon.now.sh/ Also, it's generally considered that you should post not only your demo but also your source code, when you post here.
Come on, it's simple. Forget Postgres. Just Express and Pug, it's a very simple MVC site, nothing fancy.
Exactly 😡 What would you recommend I use?
There must be tools ready for this, aren't there?
haha that's a funny meme good job.
ROASTED
Vue / strapi.
Hi u/hiquest, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Was consuming this shared utility that conssists in a stream of numeric values that performs currency convertions. The ratio convertions come from the server and they are inputted manually. Sometimes they overflow and you have 2^53 being passed. Although the proper solution is to filter on the source, we had to make it work in that day, so yeah.
You mat want to change the utm\_medium for the link you've given.
I can't find anything about $200 for that kind of service. Link?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Idiomatic coding style will come with experience and understanding. Read a lot, write a lot and think a lot. That's basically it. Modern JS is striving to become more OOP-like with added support for classes, modules, lexical scoping, reduced reliance on prototypes and _this_ so using some Java idioms is actually beneficial in JS now. Maybe set up a linter, with some good configs (e.g. eslint+airbnb) it'll be screaming in your face about _some of_ non idiomatic code constructs. Play with NPM. Browse open source projects. Read articles and books, watch youtube videos. Well, that works for me.
Idiomatic coding style will come with experience and understanding. Read a lot, write a lot and think a lot. That's basically it. Modern JS is striving to become more OOP-like with added support for classes, modules, lexical scoping, reduced reliance on prototypes and _this_ so using some Java idioms is actually beneficial in JS now. Maybe set up a linter, with some good configs (e.g. eslint+airbnb) it'll be screaming in your face about _some of_ non idiomatic code constructs. Play with NPM. Browse open source projects. Read articles and books, watch youtube videos. Well, that works for me.
Idiomatic coding style will come with experience and understanding. Read a lot, write a lot and think a lot. That's basically it. Modern JS is striving to become more OOP-like with added support for classes, modules, lexical scoping, reduced reliance on prototypes and _this_ so using some Java idioms is actually beneficial in JS now. Maybe set up a linter, with some good rules (e.g. eslint+airbnb) it'll be screaming in your face about _some of_ non idiomatic code constructs. Play with NPM. Browse open source projects. Read articles and books, watch youtube videos. Well, that works for me. also https://eloquentjavascript.net/
Thank you!
Hi /u/ralphlouisgopez, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/heytherealisha, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Really liked your code editor!
Hi u/ralphlouisgopez, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/heytherealisha, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hope this library helps building multi-lingual apps. Any feedback is much appreciated.
Off the top of my head, when you register and goto your project profile, you have 'edit site name' or something like that, when you click it, it says that custom staging suffixes require a payment of $200
* Use map, filter, and reduce functions * Ask yourself, does this thing really need to be a class? Why? * Really and truly understand that functions are values that may be passed around and manipulated, even inside of other functions * Learn spread notation and key/value shorthand notation * Does this thing need to be a for loop? Why? * Learn async, await, and promises thoroughly. How do you create a promise out of an older style callback API? Good luck! React/Redux was the best javascript teacher for me, but I think what I wrote above were the main points.
I don't mean to be hard to you in particular but this is even another pointless useless listicle-like trash tutorial that a dev publishes on medium. Why I hate it: 1. I find hard to believe that an experienced developer that can actually provide a good utility for vscode would struggle with the process so we are aiding unexperienced devs to pollute the ecosystem even more. 2. Your steps don't cover the "why" whatsoever, they are just blind steps that a user must follow and they teach nothing. You are not explaining what each steps does and what it means. This means that the user must follow exactly your choices and if their scope, environment or conditions are slightly different your guide is useless. And this brings me to the last point: 3. In six months Microsoft will update the process and you most likely won't update your guide. So in six months time your guide will join the endless pile of bad articles that won't help users and actually will misdirect them. Every time a user needs a tutorial and finds it on medium they can be reassured the tutorial will be wrong and not up to date. I really wonder what motivates this army of medium writers to produce low effort content that pollutes the Internet. My only answer is they seek to promote themselves as they are almost always freelancers.
I was looking for the correct word and found it just now - 'idiomatic coding' in JS - is all I want to learn!
I can recommend Gitlabs Server with Ci / CD Pipeline. There is a Community version available.
Why don't you just skip webpack?
[removed]
Thank you, I've put quite a bit of work into it because I use it so much.
That's ridiculous! Any other services you would rather use?
I’m relatively new to JS and it is the only language I have experience with. Are objects unique to JS, or is the object literal syntax unique? Also, when you say “objects that contain data/state shouldn’t contain functionality”, are you advising against using objects that contain methods? Thanks.
Thanks! Nope, not yet, now posting to other communities, like codeburst. Are you suggesting to try hackernoon? I am quite new to this world, do you know what are the benefits?
They are independent and trying to get away from the subscription model of Medium.
[https://github.com/MostlyAdequate/mostly-adequate-guide](https://github.com/MostlyAdequate/mostly-adequate-guide)
Also, polacode for VSCode
Interesting read. There's another con to the approach which the article doesn't state explicitly - the requirement to move the business logic to the client, which may be an issue due to intellectual property. By the way, finally Redux "reducers" make sense to me.
I think adding `async` is a good solution, without resorting to Hungarian notation.
A bit overkill don't you think?
That's a good point, thanks! Will add it to the article.
https://www.npmjs.com/package/html5-to-pdf
Hi /u/CoderDot, this post was removed. As stated in the [AskJS guidelines](https://www.reddit.com/r/javascript/wiki/index/askjs), AskJS is not for help or support. This is your only warning. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/loaiabdalslam, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Oh, I didn't realize you're the author. Very well written!
Hi /u/NishkalKashyap, this post was removed. Please don't repost projects unless there's been significant updates. Thank you.
Don't know about back end side of things with node, but front end side of things is mainly functional. Namely due to influence of flux architecture and React, which became sort of a standard in all front end technologies. Angular is a bit weird, however it's generally the least liked tool by developers. There isn't much use of object oriented code, due to the fact tat entire application cycles data through one side flow render passes. It takes a bit of time to adjust, but the end result is rewarding, rather than trying to shoehorn what you already understand in java to fit javascript, try to learn it from ground up.
&gt;Are objects unique to JS, or is the object literal syntax unique? This is a bit of a loaded question. The simplest way to answer this is to say that the way objects work in JS is unique and the object literal syntax provides a very convenient way to make objects. Other languages do have objects but they don't work the same as they do in JS. Other languages also don't have the object literal syntax. &gt; Also, when you say “objects that contain data/state shouldn’t contain functionality”, are you advising against using objects that contain methods? If you want to program in a functional way then yes
Hi /u/michaexe, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Not saying it's wrong or right but that's a subjective statement about some technologies with some generalizations thrown in. Hard to imagine someone aspiring to be good with JS and ignoring its OOP side. Doesn't make any sense to me for it's such a vital part of the language. Whether to use them or not is up to the programmer. I simply can't agree they're of _not much use_. On an unrelated note, I find OOP JS a gateway drug to TypeScript... which is so much fun.
I'm right at that point. I'll use it only to bundle which works for me. What's your recommendation for this stack?
Not at all. Slightly slower to render than some of the other PDF generation libraries, but way easier to make *nice* looking emails (using HTML/CSS). Already uses the tools most web developers are already using.
The package.json says MIT. I'll add the license itself to the repo
Why shouldn't you say that? I'm confused
You should create some unit test, I personally would trust a library more if it's being properly tested. Good job by the way
[https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read) &amp;#x200B; Check this book out, It's available for free. I actually had it printed out by a service in color and am making may way through it slowly. Every page is chock full of techniques that coming from the Java world I just would not have imagined. &amp;#x200B; In general, reading anything by the author will open your eyes: [https://raganwald.com/](https://raganwald.com/) &amp;#x200B; I don't use his solutions straight up (my teammates would hate me) but just studying this stuff makes a far more dexterous developer.
I wonder if there is such a think as idiomatic JS coding. the language is refreshingly free form and expressive.
I fully agree. Maybe it's just me but every time I see shorthand arrow functions without brackets or returns, I have to stop and think... wait wtf am I looking at.
Well, I mean, I don't know if it's such a good idea doing what has already been done. So that's why I wasn't too sure it's a good suggestion.
I took the codesmithx precourse and it was extremely helpful.
I’ve never heard of it! I’ll have to look into it
Gatsby is a static site generator, so it's good when your data doesn't change often,a perfect example is a blog using git, where you'll push changes and then it'll be available after Gatsby rebuilds in deployment. Next is for server side rendering, where your data can be changing and different, but you need a server to render the pages it builds.
I created spotfindr ([https://www.spotfindr.app/app](https://www.spotfindr.app/app)) using React Native. spotfindr allows drone pilots to share awesome flying spots and helps grow the FPV community. &amp;#x200B; I prefer to use React Native over Android/Kotlin or iOS/Swift because designing awesome UIs is much easier there. Moreover, updates only have to written once, which saves tons of time. &amp;#x200B; I would love to hear what you think about spotfindr :)
&gt;I apologize to all readers from 2025 who search the web for “ES2025” and find this article. Nice.
Awesome. I appreciate it so much when someone writes an explanation of functional programming concepts in developer language instead of mathematician language. Impenetrable concepts become simple, thanks to the writer putting in the work to understand the mathematician language to begin with. If I can take a crack at "monads for developers": a monad is any data structure you can write a flatMap function for. So obviously an array is a monad. So is a promise ("then" is either map or flatMap, depending on whether the callback returns a promise). Where it gets exciting is realising all sorts of things can be flatMapped, like error states, logging, form validation, network responses, and you can use monads to avoid thinking about those things the same way you use array mapping to avoid thinking about loops.
Thanks for the feedback. The unit tests are in place (\*.spec.ts) files in the [https://github.com/DenysVuika/preact-translate/tree/master/lib/src](https://github.com/DenysVuika/preact-translate/tree/master/lib/src). Also wired with the CI/CD (Azure Pipelines). I would not trust a library without unit tests too :)
The idea good. It feels like bridge between error handling and goto to handle know unknowns of programming flow. But I have couple of questions and concerns 1. I personally feel this is pushing complexity into core concept of event loop and stacks of JS 2. Will it not be harder to debug ? 3. How the `handle` will or should behave when `perform` is called in closure context
Hi u/HolidayInternet, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/KosmoonStudio, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
From a mathematical point of view, Promise doesn’t really count as a monad, because it does not support arbitrary nesting (Promise&lt;Promise&lt;A&gt;&gt;), and so the join operation is meaningless.
Early dialects of lisp had dynamic scope instead of lexical scope. So if we referred to a name that was not bound inside a function, instead of searching for a binding in functions that *lexically enclose* our function, those lisps would search for a binding in functions that dynamically *called* our function. The downside of this “dynamic scoping” was that you couldn’t know at “compile time”with certainty how bindings would be resolved. It would depend on how the code was executed at run time (hence the term *dynamic*). This was deemed unsatisfactory, and the vast majority of programming languages these days have some form of static scoping that allows us to know with certainty how each and every name lookup will be resolved, and the way in which functions are called cannot change this. Dynamic scoping was good at one thing, though: Error handling. You could build try/catch and even simple algebraic effects out of dynamic scoping. Dynamic scope is a kind of low-level building block. Interesting to see it being “rediscovered.” I put that in quotes, because CS researchers know exactly how dynamic scoping works. We generally don’t want to just bring the building blocks back, for the same reason we prefer async/await to coroutines, and while/for to GOTO. We want more specialized tools that solve a pain point in an obvious, consistent way. We don’t want to have every project reinventing algebraic effects out of dynamic scope, but in inconsistent and incompatible ways. But still... If you haven’t heard of dynamic scope, yiu might want to start your reading with Wikipedia’s entry on scope: https://en.wikipedia.org/wiki/Scope_(computer_science)
Project Page (?): https://github.com/netflix/pollyjs *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/Selfish_Ghost, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
As far as I understand, the difference is that effects are actually typed (as part of your function signature), which I didn't go into — and so you have a lot more guarantees about what a function can or cannot do. I'd also say dynamic scope is actually used a _lot_ these days, although many people don't realize that, just like you say. E.g. React "Context" feature is pretty much dynamic scope, and is very useful for cases like theming where passing something through the whole subtree is tedious. Dynamic scoping is bad when there's nothing to restrict it, but with static effect type signatures (such as the case in algebraic effects) or top down data flow (such as the case with React Context) it's actually pretty nice.
Absolutely! If I were to say, “You don’t need algebraic effects if you have dynamic scope,” I might as well say, “There’s nothing you can do with objects and classes that you can’t do with functions.” Next thing you know, we’re in the Turing Tarpit: *Where everything is possible, but nothing of interest is easy.*
Yeah exactly. Even if we got rid of all of them right now, companies and people who solve a lot of similar problems will start reusing their work and within a short amount of time, bam, a library.
Promises are not monads as they cannot be composed a la f(g(x))
Cool
Thanks, just started programming!
I’m trying to get into it, but it seems kinda confusing to me. Whats the best program to start?
Watch some of The Coding Train by Daniel Shiffman videos on YouTube. He has some great examples in a few languages. Mainly JavaScript and Java. But I would recommend understanding the logic behind any programming language you feel comfortable with before trying to learn multiple. Once you understand the logic behind it learning goes a lot faster.
Thanks!
From reading this I got a feeling that algebraic effects as described are basically what effects are in redux-saga. Your generator "yields" an effect which is the same as a request to "perform" something, and top-level dispatcher middleware can decide how to act on different type of effects, when to resume execution and what to resume it with. After using redux-saga for a while, the concept of making everything a generator doesn't even seem that scary.
I kind of feel like you lose too much context and it starts to feel like magic. Kind of like "where did this value recover from" or "what is this effect recovering for?" I can see the value in avoiding "colors" but is the trade-off worth it? At least colors help maintain the context.
This is such a helpful thing. Thank you!
That´s cool man
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I’m glad you think so! :)
I´ve made a text transformer for Russian that uses the pronunciation of the language to transform to Russian characters. &amp;#x200B; GitHub: [https://github.com/JaimermXD/text-transformer](https://github.com/JaimermXD/text-transformer)
Sweet. Using P5, correct?
Yes
Thanks!
Looks like the Chernobyl reactor core seconds before the explosion. Cool.
This seems to me like the equivalent of using context in React vs. prop drilling. In some cases, it may well be a good idea but it can also feel like your app is suddenly far less explicit about what it is doing and with what data (and what effects).
Lol. Incorrect explanations of a monad (and also the original post) get upvoted and the one correcting comment gets downvoted. Gg r/javascript :)
Merci
schiffman video. -- [https://www.youtube.com/watch?v=H81Tdrmz2LA&amp;vl=en](https://www.youtube.com/watch?v=H81Tdrmz2LA&amp;vl=en)
2. I would imagine the debugger would still be able to step into the handler without too much difficulty, in a similar way to how it is able to step into a callback. 3. This would likely be similar to throwing an exception in a closure function: it depends on the context in which that function is called. Once a try-handle block is completed, it is a reasonable expectation that the handler can be discarded, just as the catch block is no longer needed after the try block is executed. This is where handlers differ from simply passing a callback function, where the callback would be passed into every closure. The advantage of representing effects at the type level (similar to how Java represents checked exceptions) is that you can make sure that you never call such a callback when the environment does not contain the correct handlers, but as the article says, this does color the functions. Personally I think that’s preferable to functions that rely on possibly absent context, but JavaScript has never been the most keen on type-safety. Haskell’s MTL library is an interesting example of creating monads that support different effects, while precisely limiting which effects are available. No unsupported effects can be performed, and all supported effects must be handled.
Hi u/ahnerd, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Why not just use something like http://winrus.com/kbd_e.htm instead?
Hi u/xoerli, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For compression, give the google project Squoosh a go. It has helped me out many times to compress an image without any visual loss. &amp;#x200B; [https://squoosh.app/](https://squoosh.app/)
I love it!
Take Javascript let a = 5; Add types let a: number = 5; When compiling, make sure the types are what they say they are let a: string = 5; // ERROR! Fancy types can check if object properties are correct let a: {items: number[]} = {items: [1, 2]} // good let a: {items: number[]} = {items: ["1", "2"]} // ERROR a.items // good a.somethingelse // ERROR Types only matter when compiling typescript. After the typescript is compiled, functions don't have any checking to make sure types are correct // myfn.ts function myfn(a: string, b: string): string{ return a + b; } myfn("1", "2") // works myfn(1, 2) // ERROR! // in browser console myfn("1", "2") // works myfn(1, 2) // works Why use typescript? It catches errors at compiletime instead of runtime. Consider: document.body.requestFullScreen() In javascript, you won't know there is an error until you run that part of the code. In typescript, that error will be underlined in your editor before any code has been run. Typescript also provides much better autocompletion suggestions in editors.
I'm glad you like it. If you use it in one of your project i would love to see it.
My project at work has a bunch of backend Java and C++ devs who are having to transition to doing frontend work for the next year and a half. (Complicated project planning stuff.) Since I'm the resident expert on anything related to modern web dev, I wound up putting together a 4-hour internal presentation to try to get folks up to speed on the JS language itself, as well as related topics. Afterwards, I went ahead and put the slides up on my blog as a reference. It's primarily a lot of small code snippets and syntax examples in cheat-sheet style, as well as brief summaries of topics to let you know they exist. Slides are here: ##### [JavaScript for Java Developers](https://blog.isquaredsoftware.com/2019/05/presentation-js-for-java-devs/) The TOC: - Introduction - A Brief History of Web Dev and JavaScript - Understanding JS - Core JS Syntax - JS Concepts in Depth - Core Language - Functions - Classes - Async - AJAX - Modules and Other Topics - Working with the DOM and HTML - JavaScript Outside the Browser - Node.js - Package Management - Real World Usage - Build Tools - Developing JavaScript - TypeScript
Different people will have different ideas about what it means to feel creative, I guess (e.g. HTML and CSS do not feel creative, to me). However, I think JavaScript can totally feel creative. Take a look at what you can do with the [jQuery UI](https://jqueryui.com/) library, and try out some of the demos. For example, you can do some pretty cool [animations](https://jqueryui.com/animate/), if that floats your boat. I realize a lot of people think jQuery is passé, but it's still alive and kicking. You can look at these types of effects in [other](https://vuetifyjs.com/) [JavaScript](https://greensock.com/) [libraries](https://getbootstrap.com/docs/4.3/examples/), too.
Nobody would need to use labels in the example that you showed. In your JS example, the use of labels is counterproductive because there's no reason to make the code more complicated by using labels if you don't even need them. In your C example, using GOTO is even more counterproductive because you now have 2 labels and it makes the code harder to follow than if it had no labels. &gt;So what's your point? The point was to show that using labelled loops isn't different from using a function (the code reads identically and means the same thing). Since using a function is not a bad practice, that means that using labels is not a bad practice either. That goes back to your original comment: &gt;Just because you can doesn't mean you should! Is misleading. Yeah, don't go around using labels everywhere for the heck of it, because you may generate a lot of confusion. However, using labels to break out of nested loops is totally the right scenario to use them, because it wouldn't be different from using a function to do that. Don't get me wrong, I'm all for using a function instead, because in general it makes your code cleaner when you have more smaller and reusable functions. But going around and telling people not to use labelled statements just because it reminds you of "goto" is just wrong. In general there's a lot of comments like "Don't do X, don't do Y" that unnecessarily restrict what people can achieve, and I disagree with limiting the way people can express themselves. There's a lot of practices that are put forward by certain *thought leaders* in the industry, who display their own lack of deep understanding by considering certain things "bad practices". For example, some of them say we *shouldn't use classes*, some say we *shouldn't use types / interfaces*. However, if you understand the true good practices, SOLID principles and things like polymorphism, then using classes and interfaces will lead you to writing a much cleaner code. That's why I said "think for yourself". Don't listen to anyone but your own experience, and constantly seek improvement.
Thanks for the post, Dan! I found a video on Algebraic Effects a while back from Jane Street but had a hard time following. Your post was very helpful!
Is this the same technique used on [https://www.deviceinfo.me](https://www.deviceinfo.me/) ? How many ways are there to detect private browsing??
There's still one or more ways to detect private browsing in Chrome 76+ like on [https://www.deviceinfo.me](https://www.deviceinfo.me/) How many ways/methods are there exactly?
I’m in a similar situation, working to bring drupal devs up to modern web development. Thank you for this!
Nice! That looks like an awesome resource. Honestly wish I knew more java and looks like your resource seems easy to follow so far :)
I don't see how it even avoids "colors" in this case. It moves them, sure. Now they're in the `handle` section of the code. But the function that includes the `handle` section would still have the concept of those function "colors", wouldn't it? Otherwise how could _it_ handle something asynchronously?
Thanks! Yeah, the "... for Java Devs" part is kinda misleading, because there really isn't much Java-related content in there. Mostly just one table comparing Java and JS. Most of the content in there _should_ be useful for anyone who wants to get up to speed on JS syntax and the surrounding ecosystem.
why would they add random keywords? It adds nothing and makes the language more confusing.
const is made to signal that that value will not change, not that it's supposed to/shouldn't change. Who cares about what it's supposed to do. What matters is what it does.
&gt;you dont know which one of them are actually constans yes you know. The ones called const are constants. If they are top level, then you know they are permanent constants, if they are deeply scoped, you know they are temporary. There's literally no possible confusion.
I disagree, classes and this make it easier to inject dependencies in tests, and tests are more important than anything.
brave is crap
why would anyone use cheerio? It has a random api that you need to learn. jsdom does the same thing except it uses the regular web apis you already know &amp;#x200B; same thing with nightmarejs, it's just an inferior version of puppeteer.
Hi u/Non_Bot, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/marteaFFS, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/srjkmr, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
React (don't mean just the view library but the ecosystem at large) relying on functional patterns is nothing subjective. It's just the idiomatic way of writing code with the tool. Within React, there is nothing vital about classes. Recent developments are phasing out class components. And Im not even starting on redux here. Now you may say that's just one tool out of many, however that's industry standart. Angular has a fair share, to the dissapoinment of many developers, you can check data on yearly "state of javascript" report. Vue has tiny yet significant market share, but it's important to mention that Evan You also wanted to take Vue more towards functional road due to technical reasons. You can read about it on rfc thread in Vue github. Also, you don't need oo patterns to take advantage of typed system. React + TS is very common combination.
That's why I wrote promise, not Promise. JavaScript Promises aren't monads as implemented, but it's trivial to implement a promise that is.
Sorry, I don't follow. What prevents you joining those into a Promise&lt;A&gt;?
Still ‘.then’ is not monadic as it violates functor law. Also, you said arrays are mondads, that is incorrect, they are functors, they cannot handle wrapped values - they need a flatmap implementation at least.
Because the correcting comment is wrong. I said a promise is a monad because you can write a `bind` function for it, not that `then` is `bind`.
I don't understand why you're phrasing this as disagreement. Half the things you're disagreeing with I never said (`then` is monadic) and half are actually agreeing with what I wrote (you need to write flatmap was literally the whole point of my first post).
Hi u/bencryer123, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You cannot write a monadic bind for Promise because it will always fail the monad laws. Nestjng is very important. Also, your definition pf a monad is false. It’s not _any_ data structure you can write bind (flatMap) for. Eg integer is not a monad.
Hi u/LazarLjubenovicat, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
JavaScript libraries which provide monadic promises literally exist. &amp;#x200B; I didn't provide a definition of monads, I provided a description.
Again, they cannot make Promise a monad. They can provide a flawed bind implementation. If you ate interested in a proper async monad in javascript have a look at fluture.
Are async issues not the biggest bug causers for people writing in JS? I get race conditions all the time.
Fluture is the library I'm talking about. How do you think they implement async in javascript without using Promise?
Apologies. Misread the first comment, yes you can write a ‘flatmap’ for an array to make it monadic. .then is not Monadic as it breaks laws under certain situations, it only satisfies right identity. This is a nice resource, especially on associativity https://buzzdecafe.github.io/2018/04/10/no-promises-are-not-monads
They use promise internally for the async implementation, obviously. And provide a proper monadic data structure around all that. That doesn’t make Promise a monad, which was your original claim. In fact, the reason fluture exists is because js Promise can never be a monad.
Arrays do have a [`flatMap` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), at least in most modern browsers.
Really helpful since I'm going to school for CS thanks!
I’m aware, but it’s not common.
Honestly a lot of these new ideas are just rediscoveries of old ones. This one just rediscovers dependency injection and autowiring, but in a worse way, because the "performer" and "handler" have to be hierarchically related (i.e. "handler" has to be in the call stack of "performer"). In dependency injection, you can write completely independent modules, and the module that calls another doesn't have to handle everything, you could have a separate module for it.
&gt; Nobody would need to use labels in the example that you showed. Add a second loop if that helps. &gt; In your JS example, the use of labels is counterproductive because there's no reason to make the code more complicated by using labels if you don't even need them. Not per se. If use labels to escape the outer loop in a bunch of nested loops, you might want to do the same with single loops, just to make your code more consistent. In my experience, code that uses many different constructs to do the same is harder to read than code that consistently uses the same limited number constructs. For example, consider the fact that `do...while` or `while` loop can be rewritten as a for-loop. For that reason, I never use `do...while` or `while` loops in my production code and always use the equivalent `for` loop instead, even when a `do...while` or `while` loop would be more readable on its own. Consistently using a `for` loop everywhere still makes your code more readable than using a different type of loop depending on which you personally think is the most readable loop in each particular case. The same applies to the use of labels for breaking out of loops. It's best to either use them everywhere or use them nowhere, because using them only in very specific cases is bad for the readability of the code as a whole. At least that's my personal experience writing code in several languages for more than 15 years! &gt; In your C example, using GOTO is even more counterproductive because you now have 2 labels and it makes the code harder to follow than if it had no labels. The C example I gave you was actually a mashup of two examples I found elsewhere on how to use the goto statement in C. It was actually one of the most readable and most useful cases of the goto statement I've seen... Then again, we're talking about the goto statement. There's a reason it's gotten such a bad name after all... &gt; The point was to show that using labelled loops isn't different from using a function (the code reads identically and means the same thing). Since using a function is not a bad practice, that means that using labels is not a bad practice either. And I showed you how labels with breaks &amp; continue in JavaScript loops is nearly identical to labels with goto statements in C loops. Using your own logic here, this would mean that labels is a very bad practice. &gt; However, using labels to break out of nested loops is totally the right scenario to use them, because it wouldn't be different from using a function to do that. Breaking out of the outer loop from insider the inner loop where you have two nested loops is probably the only scenario where labels in JavaScript is in fact the simplest and cleanest approach. I give you that. (1) This use case just happens to be fairly rare, though. And as you pointed out yourself, (2) there are alternate ways to implement this behavior (isolating part of the logic in functions) that are just as effective, if not more. (3) And then there's the matter of code being more readable when you restrict the number of different constructs used within the same code. As such, I don't think I've seen labels being used anywhere at all in actual production code in the 15+ years since I wrote my first line of JavaScript. &gt; But going around and telling people not to use labelled statements just because it reminds you of "goto" is just wrong. The similarity with goto statements in C is by no means worse an argument than the similarity with using functions, which you use to justify it. The main reason I'd avoid using it, though, is because it's such an uncommon construct it's rarely ever spotted "in the wild". And that means few people even know what it does, let alone how to use it themselves. &gt; In general there's a lot of comments like "Don't do X, don't do Y" that unnecessarily restrict what people can achieve, and I disagree with limiting the way people can express themselves. There's a lot of practices that are put forward by certain thought leaders in the industry, who display their own lack of deep understanding by considering certain things "bad practices". Tech is not really that different from politics and art in the sense that every new generation tries to come up with a new idea to improve on the ideas of the previous generation, often returning to older techniques. A good example would be the whole debate on OO vs functional programming. IPL, a language invented in 1956, is often cited as the first functional programming language. Simula, a language invented in 1967, is generally accepted as being the first OO language. Both types of programming languages have existed side by side for decades, and many languages contained aspects of both. Back when I first learned programming, in the late '90s, OO was all the hype. Java &amp; PHP, two languages released in 1995 were very popular back then. In fact, the first programming language I was taught was Java. And with Java being an almost purely object oriented language, OO became very popular... so much so that PHP would soon become (partially) object oriented as well, further boosting the popularity of OO. In JS code too, OO would become very popular, even though pre-ES6 JS has a very peculiar and incomplete way of doing OO. During the last two decades, however, we've seen several new functional programming languages emerge, like Scala, Clojure, Kotlin, Dart &amp; Rust. And as the disadvantages of OO are becoming ever more clear, these languages grow in popularity. This in turn has its influence on other languages, resulting in a growing movement to get rid of OO as the dominant paradigm in JavaScript and to adopt a functional paradigm instead. Is functional programming really better than OO? Or is it the other way around? Personally, I think the answer to that question is much like the answer to the question whether tabs are better than spaces or not. There are very good reasons for either choice, but in the end it is mostly a matter of personal preference. I'd say the same applies to whether or not labels should be used to escape an outer loop from inside an inner loop. IMO there's good reasons to avoid it and good reasons not to avoid it. And continuing to argue over which decision to make is rather pointless, really, when we could be spending our time writing code instead ;-)
I think many of the best posts to the subreddit have been self posts that are not questions (and would be weird to reframe as such). Personally I don't like the idea of those going away
[removed]
Hi u/ivansonofcoul, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I am making an application now based mostly on jExcel. My first week impression is that it is truly great and easy to use. Is there a community in place for discussion? I am sort of new to HTML/CSS/Javascript as well.
While I like the idea, I don't think using the `try` keyword makes much sense. If feels "tacked on" much in the same way `else` on a `for` loop does in python.
Thanks for this, but should a cheat sheet not be downloadable and printable? I am often forced to use chrome save as pdf to create cheat sheets from articles, but it usually does not work satisfactorily. Cheers!
I think picolisp made the voluntary choice to be dynamic scope first as a paradigm.
&gt; And continuing to argue over which decision to make is rather pointless, really, when we could be spending our time writing code instead ;-) Agreed, I'll try to write my response quickly. &gt; Then again, we're talking about the goto statement. There's a reason it's gotten such a bad name after all... It's funny how all this time you focused on comparing `goto` with labels rather than actually trying to understand what makes `goto` bad. What makes `goto` bad is that you can put it literally on any line in your code. Here's a C example I found for you ``` void checkEvenOrNot(int num) { if (num % 2 == 0) goto even; else goto odd; even: cout &lt;&lt; num &lt;&lt; " is even"; return; odd: cout &lt;&lt; num &lt;&lt; " is oddn"; } ``` You could do something silly with JS like this: ``` function checkEvenOrNot(num) { even: { odd: { if (num % 2 == 0) { break even; } else { break odd; } } return "odd"; } return "even"; } ``` But even in a situation like this the flow of things is predictable. You have a certain scope denoted by a label, and you can only break out of a scope denoted by label rather than being able to go literally anywhere and having to track down a ton of areas where you can end up. Besides, this practice is self-destroying: the developer will get tired of adding more and more labels and wrapping parts of the code in squiggly brackets, indenting part of the code, etc, and, while doing so, will probably notice that adding labels everywhere for the heck of it doesn't actually make the code more readable. That's not the same case with `goto`, because using `goto` might actually make the life easier in the short term, but will inevitably cause a big mess later on. &gt; Breaking out of the outer loop from insider the inner loop where you have two nested loops is probably the only scenario where labels in JavaScript is in fact the simplest and cleanest approach. I give you that. I didn't say that, but yes, that's the only case I imagine myself doing it. &gt; And I showed you how labels with breaks &amp; continue in JavaScript loops is nearly identical to labels with goto statements in C loops. Using your own logic here, this would mean that labels is a very bad practice. Similar doesn't mean identical. Labels are a subset of `goto` that really can't go wrong, except when the developer is a masochist and makes their life more difficult for the heck of it, without even a short-term gain. My argument when comparing labels with using a function was that they're virtually identical in this particular case, and you agreed that that's the only valid case to use them: so I don't see why you'd disagree with my argument there. &gt; 15+ years since I wrote my first line of JavaScript Yes, please appeal to authority more; it'll definitely make me change my mind, that's the only way to win the argument, isn't it? ;-) &gt; For example, consider the fact that do...while or while loop can be rewritten as a for-loop. For that reason, I never use do...while or while loops in my production code and always use the equivalent for loop instead, even when a do...while or while loop would be more readable on its own. Consistently using a for loop everywhere still makes your code more readable than using a different type of loop depending on which you personally think is the most readable loop in each particular case. This gives me a better idea of what you're like as a programmer and as a potential co-worker. Basically, your idea is, even though we are surgeons, let's only use a hammer because surely we can get stuff done with hammer, and consistency is more important than reason. &gt; using them only in very specific cases is bad for the readability of the code as a whole Proven by... Science? Reason? Logic? Argumentation? No! By 15 years of experience! Now let's get to interesting stuff. &gt; Tech is not really that different from politics and art in the sense that every new generation tries to come up with a new idea to improve on the ideas of the previous generation, often returning to older techniques Agreed. But I would compare it more to parent-child relationship. At some point, the son rebels and goes against parents' ideas and wishes. Then, after they grow up, realize their parents were wise and actually had great ideas, and probably return to using some of them. Right now we are in rebellion stage. &gt; Is functional programming really better than OO? Or is it the other way around? Personally, I think the answer to that question is much like the answer to the question whether tabs are better than spaces or not. No. The spaces VS. tabs makes a minimal difference. The OOP vs Functional is a monumental, so it matters. And, it matters towards your employment. But, I think, in the end, those 2 approaches are just 2 different ways of doing the same thing, and neither is better than the other. &gt; And as the disadvantages of OO are becoming ever more clear, these languages grow in popularity Please tell me more about the "disadvantages of OO"? Inheritance (it usually is)? Classes are not "pure"? Or is it bug prone because you forget "new" keyword? What is it this time? I really want to know. Personally, I would phrase it differently: "And as the influx of new developers failed to develop the understanding of OOP and, in frustration, rebelled against it and proclaimed it a bad practice, functional languages grew in popularity".
The code is missing for race-condition.js
No problem. To be honest, I don't know about that rule. As you mentioned, usually they are not printable and are represented in the form of an article.
Well, it's not a global rule, just how I think the world should be :)
&gt; a monad is any data structure you can write a flatMap function for. Thank you! That's the most concise definition of a monad I've found yet. Too many people kind of waffle with "A monad is a monad" or start going off on huge rabbit-trails.
 Very useful document, thanks for sharing.
Well, my text transformer is so simple to use, and let´s admit that things are cooler when you make them by yourself ; )
Very useful, thanks. I never remember which .pipe operator does what. Maybe next time, though, in each example start with a new `let array = [ stuff ];` so that each operation can be ready independently without needing to read the previous one.
Thanks, glad it helped you
No problem. Yes, I was thinking about should I do it like that or not...guess I should have :)
Hi u/Vitamin_C_is_awesome, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Printing out code... can’t say I relate
Not related to arrays, but consider using const instead of let, nearly all of your examples are not reassigned
I agree with you. I use \`const\` wherever applicable and use \`let\` only when reassign is needed. I did rewrite the cheat sheet, considering that it's not a new one, using \`const\` but reverted the changes, not sure why :)
Fantastic! This looks really handy for converting a REST response structure to Typescript and GraphQL for client and server respectively.
Maybe show an example of the sorting logic? &gt; Sorting &gt; The method sort sorts the elements of an array and returns the sorted one. let cities = ['Paris', 'London', 'New York', 'Barcelona', 'Madrid', 'San Francisco']; cities.sort(); console.log(cities); // outputs ['Barcelona', 'London', 'Madrid', 'New York', 'Paris', 'San Francisco'] // custom sorting function cities.sort(city =&gt; { // sorting logic });
That's a model that works best for people writing articles for exposure.
I've added it, go check it out.
Hi u/lchancellor, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This is why the article says: &gt;The exact syntax doesn’t matter here — I just came up with something to illustrate the idea. and then again &gt;Again, a reminder: the concrete syntax and specific keywords are made up for this article. They’re not the point, the point is in the mechanics.
Thought it was an opportunity to improve the sort section. I just came up with that idea for an example. Thanks!
This is different from dependency injection because it affects the control flow. The hierarchical relation is also pretty much the whole point. :-) &gt;In dependency injection, you can write completely independent modules, and the module that calls another doesn't have to handle everything, you could have a separate module for it. As long as there's *some* handler above the stack for every operation, it works. They don't need to be all in the same place. There's even an example showing it.
CkEditor has got to be one of the best text editors for the web and couldn’t be easier to implement on a site.
I know. That's why I'm providing my opinion on it.
I'm not a big fan of the regex routes. I understand that they're powerful but they're terrible for readability. I like the return object that contains both a header and a body. I'm not a big fan of manually having to encode text responses but I'd most likely end up using json response function anyways
Thank you so much for this! I believe I have some arrays to update.
Hi u/sofloLinuxuser, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I do agree with the worsened readability, and was initially considering introducing \[\`path-to-regex\`\]([https://github.com/pillarjs/path-to-regexp/blob/master/index.js](https://github.com/pillarjs/path-to-regexp/blob/master/index.js)) or implemented a subset of it myself. Perhaps I'll go ahead and add this. &amp;#x200B; I did introduce a \`textResponse\` helper which is much like the \`jsonResponse\` function, only without the JSON serialisation. I removed it as I thought it was overkill and using the \`TextEncoder\` API (a staple of Deno by the way) is trivial, but perhaps it would nonetheless serve as a nice, descriptive abstraction. I'll bring it back.
Hi u/cjayL902, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Content is nice, but this website's custom scroll is terrible and brings cpu to 100% load with huge rendering delays.
What do you mean by custom scroll? There is no custom scrolling implemented
Github is the best place.
That's odd. It's pasted. [https://gist.github.com/ubershmekel/fc88307f827b3f0384c64117001c947b#file-race-condition-js](https://gist.github.com/ubershmekel/fc88307f827b3f0384c64117001c947b#file-race-condition-js)
I can think of a scenario where 1 happens, and a scenario where 2 happens. I myself write my pure functional JS in a style that doesn’t leave much room for classes, but that’s not because they’re mutually exclusive. Anyone who says otherwise needs to remember that we use class instances in functional JS all the time— the built in data structure types. An Array is a class with state and with methods; if you only use it’s pure methods, like concat(), map(), indexOf(), and get length(), then your use of Array is functional. Once you mutate it, though, all bets are off. Likewise, if you make a utility class similar to Array, and give it a functional interface (methods that have no side effects), as long as you don’t mutate its state, you’re still in FP territory. As for the factory scenario, I could imagine a method that takes an object and returns a method encapsulating an operation to be performed later with the passed on object. If the object is a UI element and the encapsulated output is an animation of that object, ten the factory is like a “makeAnimation” function or something.
Worked for me inline :shrug:
Actually, I might have misunderstood OP. If you need to mutate state, as we all do at some point, then you need to decide where to draw the line between your functional code and your mutation code. Gary Bernhardt calls the result a “Functional Core, Imperative Shell” approach, and has a great 30-minute video on it. I recommend FCIS for developers who wish to maximize the functional aspect of their programs, without grappling with monads and such.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Hi u/merott-, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I would definitely use path-to-regex (or something similar). It's makes the routes way easier to read. &gt;I did introduce a textResponse helper which is much like the jsonResponse function, only without the JSON serialisation. I removed it as I thought it was overkill and using the TextEncoder API (a staple of Deno by the way) is trivial, but perhaps it would nonetheless serve as a nice, descriptive abstraction. I'll bring it back. Could you add something to detect whether the return value is a string or an object, then have the library decide what encoding to use?
If you rather like, crossposted on: Medium: [https://medium.com/@david.dalbusco/how-to-take-a-screenshot-of-a-website-in-the-cloud-27f08dcbe9c1](https://medium.com/@david.dalbusco/how-to-take-a-screenshot-of-a-website-in-the-cloud-27f08dcbe9c1) My website: [https://daviddalbusco.com/blog/how-to-take-a-screenshot-of-a-website-in-the-cloud](https://daviddalbusco.com/blog/how-to-take-a-screenshot-of-a-website-in-the-cloud)
I would suggest maybe mentioning that custom sort() is required to return 1 or -1 to determine ordering, not true/false. In my experience, this is a common source of confusion, even for experienced devs who forget. Just a thought.
The term "cheat sheet" comes from people bringing in a very information dense sheet of paper with things like answers, formulas and notes into a written exam. Lately it seems to be getting abused into long articles but in the past if you searched cheat sheet it would get something like [this](https://i.imgur.com/AEAboEs.png)
I love that there are still people make cool stuff without 200GB node_modules folders. It looks awesome, keep up the work.
Gotta love the people printing code, light up a section using a highlighter, and asking why the highlighted portion doesn't work.
An awesome resource, thank you for taking the time to make it. I read it once yesterday, but today it seems to have been taken down from github. Hope you can reupload it or fix the link. Cheers!
Looks like GitHub is just having issues temporarily :). Hopefully it’ll be back up soon
There seems to be an outage at Github this morning...
Specifically one thing I'm looking for right now is to be able to get number of rows. Two functions I am missing which relates to that: &amp;#x200B; (1) =SUM(A1:An), if n is the number of rows. (2) Add new row at place n-1 (because the last row is a formula row)
Agreed, scrolling is horrific on that site. Good info though.
This is excellent, thank you!
Electron + JS ftw!
Needs to be able to fit in my 3-ring binder. ;)
Thank you for sharing, this was a pretty interesting and informative read! &amp;#x200B; And the fact that they plan on sharing more on the process of making the new Desktop app sounds great!
For arrays I'm ambivalent because what most developers are looking for with `const` is immutability not reassignability, but `const` doesn't truly provide that.
Excellent editor that we're building a custom configuration with our plugins.
Hi u/RoamingRaven, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For arrays I'm ambivalent because what most developers are looking for with const is immutability not reassignability, but const doesn't truly provide that. It's similar to doing `ALL_CAPS` in Python to culturally indicate immutability, except maybe a little more deceptive.
Well all of the common lifting configs will yell at you, which indicates to me that a significant portion of the population is onboard with const
Hi u/tampaine, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/catchingtherosemary, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nice overview! Didn't know includes exists. If you are open for suggestions then maybe add return information about non matching functions like find(). I often have to check whether it returns null or undefined. Nonetheless, very informative!
javascript is a really powerfull language nowadays, i think its the future???
This is an example of why it is important to ship fast and optimize later.
Thumbs up for the operation cheat sheet
Thanks for pointing that out. I've made the code inline and left a link to the gist. /shrug
Hi u/iamsecretlybatman, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
K.
Glad you think so :)
Get images, resize them and optimize them, then re-upload them and rewrite the posts containing the bad/unoptimized images to direct them to the optimized version. That’s how I would do it.
This whole thing screams generators to me, but yeah having to turn everything inbetween into a generator doesn't smell good. Kind of unfortunate that generators didn't make it in as a "transparent" feature like coroutines in Lua (key difference is allowing yield from nested functions).
Now I need to be able to do the same in an immutable way.
Hi u/zukethenuke, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Same. If you’re trying to modify the image size in JS, you’ve already lost. The load penalty is coming from downloading the image, so nothing you do client-side is going to fix that. You basically just need a script to do what koekieNL is suggesting, and add that logic for future uploads, too.
It might be worth mentioning that \`.reverse()\` not only returns a new reversed array but it also reverses the original array. That one catches lots of people out!
There's a fundamental difference between jQuery and newer frameworks like React. For example, Github tweeted about using Fetch for ajax requests. React doesn't have AJAX built into it, you just use JavaScript. jQuery was something you wrote instead of JavaScript, but writing React effectively requires you to write a lot of JavaScript.
hmm ... other technologies will coexist with react native in the future. ;-)
An even better cheat sheet is available at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
Netlify forms is honestly insane. That feature alone has convinced me to build my new site on their platform.
I mean not wrong, but I am not aware of all that many people saying that using vanilla JS over a established frontend framework...
This is an image editor I built over the past 4 months after reading a tutorial on [Link text](http://www.williammalone.com/articles/create-html5-canvas-javascript-drawing-app/). The repository is at [Link text](https://github.com/kccodeguy/gifgit-image-editor). It has basic image editing tools and more will be coming soon.
This is an image editor I built over the past 4 months after reading a [this tutorial](https://www.example.com). The Github repository can be found [here](https://github.com/kccodeguy/gifgit-image-editor). It has basic image editing tools and more will be coming soon.
You either forgot the /s or You like how accessible the desktop is now thanks to Electron + JS and are just misunderstood.
[removed]
I really don't like the idea of that. It sounds like unnecessary magic that is bound to fail or result in confusion. I'd rather have two explicit helpers in that regard, plus I think their names contextualise how an endpoint will respond (e.g. `jsonResponse` =&gt; `application/json`).
Is it normal that every button triggers a page refresh ?
Pretty impressive, first "issues"/things I noticed: * No Undo support * Big images (6MB) did not work, it just sat there showing the file upload dialog
I uses the localStorage API so that's the cap for most browsers I guess. The production version I think I'll migrate from using it.
Scrolling down seems to make it fling back up to the top? Also I'm getting about 2 FPS on mobile.
Article doesn't actually provide a single example of where vanilla-js "doesn't cut ". It's just a bullet point list of things frameworks are good at.
Article doesn't actually provide a single example of where vanilla-js "doesn't cut ". It's just a bullet point list of things frameworks are good at.
Each tool has its own page. I was going for the kind of functionality like [Lunapic.com](https://www.lunapic.com) where the user can navigate to each page for a separate edit. If more people complain about it I may change to all tools in one page.
Keep these coming!!! Love having useful "Cheatsheets" that I can easily refer back to.
Yeah, I'm completely serious. I hate all compatibility issues between all the different OS systems. VSCode was built using Electron... Slack is too... I have no idea why I'm getting downvoted. PWA's and JavaScript code bases are becoming more and more usable in a plethora of environments... it's used for servers... it's used for desktop applications... hell, we can compile JavaScript into iOS apps now with React Native. I also disagree that it's just another pointless argument. Why should we have to use multitudes of different code languages just to have cross platform compatibility. We have a perfectly good render engine for HTML... we have a rich ecosystem of JavaScript libraries that are easy to use and install with package managers. Half the apps on the iOS app store could be PWA's. It makes absolutely NO difference **FOR MOST APPLICATIONS** so why not JS?
We use this [imageproxy](https://github.com/willnorris/imageproxy) to dynamically resize images on the fly depending what options you put in the url. We also run it through cloudfront so only the initial resize is a little bit slow but after that its smooth sailing. If you run on docker, its supereasy to use.
The way this is normally done is in the backend. You expose a dynamic endpoint. For example fetch/resourceid/width/height. Your backend will then serve a resized resource and efficiently cache it. Another option is to expose a preset number of sizes fetch/resourceid/[large, small, etc] depending on your needs.
Hi u/sukanya9693, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;I also disagree that it's just another pointless argument. I didn't allude to it being pointless, tho it actually is. Because there will always be people saying its useful/worthless with all sides having valid arguments that can be displaced by the other. Bottom line is use what works best for you. More and more, tho, whether the bytecode programmers like it or not, JS is more and more finding itself being the tool for the job.
I'm in complete agreement with you... ...now I'm just confused. I wasn't trying to start an argument at all. I just like the JavaScript ecosystem. I think it's heading a good direction.
I have recently created a library for creating SVG charts on Angular. I think it would be quite useful for Angular developers to create charts easily. The library is open source :) Charts supported right now: \- Line Graph \- Multi Line Graph \- Bar Chart \- Clustered Bar Chart \- Pie Chart \- Donut Chart \- Sunburst Chart \- Gantt Chart \- Timeline Chart I picked Sunburst, Gantt and Timeline charts as I noticed not many free libraries offer these. Hope this helps people! Any feedback or requests for specific charts would be appreciated. Thank you!
"tens of thousands of bug fixes" That sounds a bit much for (essentially) a traditional discussion forum.
&gt; Undo's can be accessed from the Edit&gt;Undo menu. I'll check upon it. Sorry I meant via keyboard.
I can tell you don't write production software and I can tell you don't use Slack.
The find example kinda threw me off. Might want to do an array of object where you look for one specific property on the object and then return the entire object. Shows the utility a bit more.
I think you should consider using a hash/query string parameter in the URL or use the History API to get the functionality you want without reloading the page. I personally really like including additional data in URLs for just these kinds of purposes.
I do and I do, both on a daily basis
Good, but it's important to document which methods mutate the original array and which do not. One of the biggest gotchas for new JS devs.
This should be a single page application for better UX.
Yeah I need to implement keyboard shortcuts to make undo/redo easier. I have a lot on my plate that's why I overlooked it. I'll make it a priority.
I would like to agree, but even the best electron apps use significant resources. Fine on a full desktop, but on my laptop having a program use 300mb+ of memory and lots of CPU usage is unacceptable for me, especially if I have to run multiple electron programs. I can handle one, but if everything or at least a large majority were electron then it would massively slow my laptop down (MBP).
https://bugs.webkit.org/buglist.cgi?quicksearch=OffscreenCanvas No ETA, but plenty of open bugs about it.
In addition to your point, it should be said that vanilla JS very much DOES cut it when your site doesn’t require complex UI transformations or state management. Your average blog site barely needs any JS at all most of the time, let alone a whole framework. So, as with all things, the real answer to the question is: *it depends*...
Hi u/ImToxxicBoi, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Terraform + Bash + CircleCI -&gt; AWS
Site unusable on mobile.
What’s with electron hate in the comments?
It's what [express](https://expressjs.com/en/api.html#res.send) does. I think it makes for cleaner functions. If you don't like it though then fair enough, it's your library.
That was great. Now if only they could organize their API docs a bit better...
&gt;It makes absolutely NO difference **FOR MOST APPLICATIONS** so why not Electron + JS for desktop applications? Electron apps always have a large memory footprint. Even the best apps made by large companies take a noticeable toll on my computer. If everything used electron it would be impossible to multitask. It *DOES* make a difference in performance and user experience and most webdevs don't care because it's easier for them.
This must have been a massive undertaking. I don't really care much for the bundling and size changes, the one thing I care most about is the fact they finally decided to do something about the excessive memory usage. Slack historically has been such a memory hog, it consumes more memory than Google Chrome (and that's saying something). I love reading technical articles like these. They give you an insight into how big companies like Slack work on a technical level and also reassuring that even billion-dollar companies don't always get it right the first time and are still working out this stuff like the rest of us are.
&gt; This gives me a better idea of what you're like as a programmer and as a potential co-worker. Basically, your idea is, even though we are surgeons, let's only use a hammer because surely we can get stuff done with hammer, and consistency is more important than reason. What I'm saying, is that quality is more often than not measured in terms of simplicity, not complexity. &gt; Then, after they grow up, realize their parents were wise and actually had great ideas, and probably return to using some of them. Right now we are in rebellion stage. Every phase is a rebellion against the phase one. Culture (this includes tech culture) has a tendency to be in constant flux between two polar extremes. Another example in tech culture would be centralization vs decentralization. The more centralized a system becomes, the more voices wish for decentralization. Then the system becomes more decentralized, only for voices increasingly demanding centralization. And so the pendulum keeps swinging between one extreme and the other. &gt; Please tell me more about the "disadvantages of OO"? Inheritance (it usually is)? Classes are not "pure"? Or is it bug prone because you forget "new" keyword? What is it this time? I really want to know. [This article provides a good overview of the issues with OO](https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53) &gt; Personally, I would phrase it differently: "And as the influx of new developers failed to develop the understanding of OOP and, in frustration, rebelled against it and proclaimed it a bad practice, functional languages grew in popularity". It is through understanding Christianity that Christians start rejecting Christianity and eventually become Atheists. Much the same, it is trough understanding OO that programmers become start rejecting OO and eventually dabble around with functional programming. Does that mean functional programming is so much better than OO? I can't comment on that yet. While I find [functional reactive programming (FRP)](https://en.wikipedia.org/wiki/Functional_reactive_programming) very intriguing and I'm eager to experiment with it, I haven't found the time yet to experiment with it. Having said that, OO has some clear disadvantages. If you haven't encountered those disadvantages yet, maybe you're just lacking some experience...
signaling
Hi u/IanAbsentia, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/kezro, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What kind of Redux-related perf issues are you referring to, especially on the Atlassian side?
People are fucking idiots
I don’t know why you’re being downvoted, I agree with you. It’s a great solution but it slaughters the paltry 16gb my MBP has.
And ternaries run slower than a straight forward if/else condition
There's a certain programming crowd that favors memory-efficient code over everything. They hate Electron, because a) it is very memory inefficient, and b) it almost always beats everything else in the marketplace.
I don't get all the complaints about them using Electron tbh.... There is an alternative? I mean, that they could make a cross-platform app and still perform as native? They even showed a graph with a massive improvement in memory usage... Looking right now at my task manager and Slacks is using 300mb with two workspaces connected... not bad at all...
Too bad they picked a garbage framework.
I get that if you're using some 3D rendering software like Unity, you need to get closer to the metal. But seriously, how many applications could do away with the 5 different code bases they have to maintain in favor of just one. On top of that... we're able to wrap C/C++ code with node.js similar to the way you do with Python so that you can optimize the bits you need to and save yourself a huge headache with the stuff that doesn't need to be difficult.
Which one are you referring to?
I'm sure this article wasn't written by a bot but it reads like it was written by a bot
Any reason we cant just compile javascript natively? I know its an interpreted language but why cant we build a compiler for it also to build to machine code and work just as well as C++? IMO HTML/CSS/JS is such a great workflow it should be used for everything but I'd like better native support for it. Like Chrome OS but for every OS.
Hi u/a_knife, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The sheer amount of salt because they have used Electron to build a successful product. Man JS sure ruffles feathers of programming neckbeards.
I understand that `They don't need to be all in the same place`, but they do have to be hierarchically in your call stack. It's definitely an interesting idea, and dependency injection is not identical to it, but seems to serve nearly the same purpose. Quoting you, &gt;algebraic effects can be a very powerful instrument to separate the what from the how in the code Let's take a look at how your own example would be implemented with a standard dependency injection and auto-wiring: interface DirectoryOpener { openDirectory: (dir: string) =&gt; any; } interface Logger { log: (...str: any[]) =&gt; void; } interface FileHandler { handleFile: (file: string) =&gt; void; } @inject("DirectoryOpener", "Logger", "FileHandler") class FileEnumerator { constructor(directoryOpener: DirectoryOpener, logger: Logger, fileHandler: FileHandler) { this.directoryOpener = directoryOpener; this.logger = logger; this.fileHandler = fileHandler; } enumerateFiles(dir) { const contents = this.directoryOpener.openDirectory(dir); this.logger.log('Enumerating files in ', dir); for (let file of contents.files) { this.fileHandler.handleFile(file); } this.logger.log('Enumerating subdirectories in ', dir); for (let directory of contents.dir) { // We can use recursion or call other functions with effects this.enumerateFiles(directory); } this.logger.log('Done'); } } **Note**: depends on what you're using for dependency injection, you may not need `@inject(...)` decorator, you may not even need a class, you could make it work with functions just as well. This way this module doesn't know anything about how `openDirectory`, `handleFile` or `log` are implemented, it just potentially knows about interfaces (if you use TS). And, the handlers `directoryOpener`, `logger`, `fileHandler` don't have to be in the same place (although they could be the same object too), and, they don't have to be hierarchically related to `FileEnumerator`, unlike *algebraic effects*. Again, quoting you, &gt;Effect handlers let us decouple the program logic from its concrete effect implementations without too much ceremony or boilerplate code. For example, we could completely override the behavior in tests to use a fake filesystem and to snapshot logs instead of outputting them to the console This is very nice. One of the SOLID principles, dependency inversion, serves exactly the same purpose, and dependency injection and auto-wiring could make it quite nice. Here's part of the description of the principle (taken from [Wiki](https://en.wikipedia.org/wiki/Dependency_inversion_principle)): &gt;Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions It's basically just a re-wording of what you mentioned in the article. I'm glad that people are rediscovering these patterns for functional programming, and I would like to see something like that implemented in the language in a nice way. If we have something like that in the language, it may make dependency injection libraries obsolete.
Link to editor with code: https://editor.p5js.org/gregtj/sketches/0MwVAddHc This is one of my first JS projects so forgive any weirdness. I am a Python programmer since about the release of Py3 though.
Got some work on mobile, looks interesting though!
I'd recommend an external caching image proxy like this one: https://images.weserv.nl/ You use a URL to them where they get the orig file, then based on your specifications, they resize/etc it, then cache it (like a cdn). You could even have your backend proactively (in slow batches) pre-cache (on their cdn) all those by making requests in the background of the server. That way when the end user loads the same URL it will havd already been processed by the proxy and will load much more quickly. It'll also cache in the client's browser for even faster future loads.
Hi u/bencryer123, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; quality is more often than not measured in terms of simplicity &gt; in my production code and always use the equivalent for loop instead, even when a do...while or while loop **would be more readable on its own** That's funny, I guess readability ≠ simplicity? &gt; Culture (this includes tech culture) has a tendency to be in constant flux between two polar extremes Not really. Cultures are changing very slowly due to institutional and bureaucratic barriers. Tech culture is different in this regard because there's no real barriers, just mental ones. We have certain *thought leaders* who kind of establish how things *should be done* - and, yes, old *thought leaders* go away, new ones emerge, so there's influx for sure. The key thing to understand is that people are fallible, and *thought leaders* only know and proselytize part of the truth, while ignoring a whole other world that exists in others' minds. &gt; It is through understanding Christianity that Christians start rejecting Christianity and eventually become Atheists Not necessarily. People understand Christianity differently, and someone's understanding can convince them that it's true more and more. If you were previously indoctrinated, I think the rejecting comes from thinking critically and asking yourself hard-to-answer questions and realizing that religion won't give you a satisfactory answer. If you've never been indoctrinated, it'll be quite easy to reject the beliefs just by looking at them and at how arbitrary they are. Or, in fact, if you're too lazy to study it, the rejection will come naturally too. &gt; Much the same, it is trough understanding OO that programmers become start rejecting OO and eventually dabble around with functional programming. Again, no. Experience takes a lot of time and your own thinking / experimentation to start itching for something. For me, I've always been experimenting with finding better and better ways of doing programming. And, luckily for me, at the time when I was really itching for something better (and I had a few ideas of my own), I had a chance to work on a code base that had a very clean structure that was using exactly the concepts I was thinking about / experimenting with, which made me rediscover OOP in a renewed light. I was lucky, but I bet, most new developers who just studied OOP in school and then started working, unfortunately, didn't get a chance to discover the beauty of it like I did. Then comes rejection supported by the *thought leaders* who proclaim functional programming to be a panacea. &gt; [This article provides a good overview of the issues with OO](https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53) Ah, I'm disappointed. I read the article a while ago, and, well, the author's problem, like most others who agree with him, is that he failed to understand OOP and SOLID, and that he didn't design his system (or designed it quite poorly). OOP helps you by allowing you to write independent yet communicating modules. If you're stuck in inheritance hell, or mutating your values all the time, yeah, of course you're gonna suffer. But you suffered not because of OOP, but because you made really poor choices when you chose how to use OOP. Perhaps, if you used SOLID principles, none of that would have happened. &gt; If you haven't encountered those disadvantages yet, maybe you're just lacking some experience... Haha, it comes down to experience right? Remind me, was it 15 years you had? 😂 Sorry, I don't mean it personally, I just troll you a little bit because your ego is a bit larger than normal. I think a little bit of self-reflection can help you a lot.
Runs fine on my iPhone 🤔
More accurately it reverses the array in-place, and merely provides you a reference back to the array you sorted. const a = [1, 2, 3]; const b = a.reverse(); a === b // true
I think there's too much of dynamic stuff going on in JS code for it to be compiled to machine code. Workarounds would make the final app bloat so much if would outweight the benefits. Facebook tried to compile PHP to C++ and it kinda worked, the not all the code was compilable, there had to be bridges between compiled and interpreted code and those presented bottlenecks. Perphaps with TypeScript you could compile something, but unless all od your node_modules are compilable you will run into those bottlenecks.
Awesome!
How do I create a new image? "New" still shows upload prompt.
Content is nice, and very useful sheet.
Javascript is very powerful language nowadays. and your website looks great.
Does anyone know what's up with code splitting by default in recent versions of React? It's breaking my CSS load order (the result is different in dev vs build) so I have to run a script to merge the CSS files after build, quite annoying.
&gt; it almost always beats everything else in the marketplace. It beats my PC, that's for sure.
&gt; It makes absolutely NO difference FOR MOST APPLICATIONS It makes an absolute big difference for all but one app.
This is a common issue. When using scoped styles, you need to make sure to use the same instance of the loader, otherwise splitted items might not receive the same case class codes as far as I know.
&gt; Looking right now at my task manager and Slacks is using 300mb with two workspaces connected... You're looking at the wrong window.
Hi /u/jqueryHub, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yup, for using Electron.
Hi u/berozapaul, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This is interesting and all, but dark mode? Are we ever gonna get an official dark mode?
I don't have any explicit splitting, react does it for me since some version. I have a reset CSS and bootstrap included in index.js (reset being first), but in production build bootstrap CSS is split into a different file that is loaded first, which results in it being overridden by reset.
Probably the amount of state changes if it's all of the issues they could be following
Looks like fixed already.
Sounds very weird. the order in which the CSS is ordered/served has no effect on the end result. Are you using plain react? Because afaik react does not do code splitting out of the box. Maybe some webpack magic?
Oops I meant create-react-app, not react itself. I have a simple repo to reproduce: https://github.com/d07RiV/style_test (it's just a stock CRA app with two styles included from index).
Why this pathetic comment is getting upvoted is beyond me.
Can I ask where did you get the documentation to write this example? I was looking for this info, just like the loop you used in transition but it seems hard for me to find all existing syntax to see what's possible in the framer motion
This looks awesome, thanks! I have been using [https://github.com/ampproject/rollup-plugin-closure-compiler](https://github.com/ampproject/rollup-plugin-closure-compiler) on my compiled TS files, how much smaller could I expect the minified files to be with TSCC that uses type information? Cheers.
Good point.
No. I'm not..
Because probably you did not read the comments on the medium post
On the front-end, do you dynamically serve images based on the client window size (if so, how?)? E.g serve a larger image to someone with a 4k screen.
&gt; That's funny, I guess readability ≠ simplicity? `for(;condition;) {...}`is identical to `while(condition) {...}` and equally simple. &gt; Cultures are changing very slowly due to institutional and bureaucratic barriers. What are you talking about? Due to the influence of the Internet &amp; other mass media, our culture changes faster in a decades than it used to change in a century or so. &gt; Tech culture is different in this regard because there's no real barriers, just mental ones. There are no real barriers in politics or art either, other than the artificial ones impost be so-called "leaders"... which is no different in tech, really. &gt; The key thing to understand is that people are fallible, and thought leaders only know and proselytize part of the truth, while ignoring a whole other world that exists in others' minds. No shit, Sherlock. &gt; Not necessarily. People understand Christianity differently, and someone's understanding can convince them that it's true more and more. If you think Christianity is convincing, you don't understand it. Christianity is convincing only to the same kind of people who are convinced by snake oil salesmen. If you actually think about it rationally, it all falls apart. &gt; Again, no. Experience takes a lot of time and your own thinking / experimentation to start itching for something. For me, I've always been experimenting with finding better and better ways of doing programming. Same here. Back in the day, I created my own open source framework because I wasn't satisfied by the available framework at the time (this was before Bootstrap was released). And here at the office I frequently start refactoring shit (sometimes on my own time) when I stumble on yet another crazy Rube Goldberg machine. Refactoring is kind of my thing... I never go with the flow. I always distrust authority. I could not relate less to all those sheep who go with whatever is hyped at the moment, completely relying on the judgement of others to determine which tech to use at any given time. &gt; I was lucky, but I bet, most new developers who just studied OOP in school and then started working, unfortunately, didn't get a chance to discover the beauty of it like I did. I currently work on a codebase that consists of about 800 to 900 different AMD modules written in ES5 prototypal JavaScript. It is by working on large codebases like this (in various languages) that I learnt that OOP has its flaws and doesn't really live up to the promises that were made to me in school. &gt; Then comes rejection supported by the thought leaders who proclaim functional programming to be a panacea. You really think I'm THAT kind of person? You're prejudice is showing. No, functional programming is not panacea. But neither is OOP. In my experience, the perfect code is a balanced mix of object instances, singleton objects &amp; pure functions, with each having their own use cases. I don't like to stick rigidly to any paradigm or design pattern, simply there is no one-size-fits-all approach : sometimes you need a hammer, sometimes you need a screwdriver and sometimes you need a bulldozer. &gt; If you're stuck in inheritance hell, or mutating your values all the time, yeah, of course you're gonna suffer. But you suffered not because of OOP, but because you made really poor choices when you chose how to use OOP. Perhaps, if you used SOLID principles, none of that would have happened. It's very ironic you seem to accuse me of being indoctrinated, while you yourself sound like an OOP groupie unwilling to recognize any of the flaws developers more experienced than yourself have noticed by doing the same things you're doing : looking for the best solution be trying different approaches. &gt; Sorry, I don't mean it personally, I just troll you a little bit because your ego is a bit larger than normal. I think a little bit of self-reflection can help you a lot. Pot... Kettle... You sound like a know-it-all 16-year-old idealistic rebel who thinks he's found the recipe for the ultimate utopia, on his path to make the exact same mistakes everyone before him already made. No, I'm not saying my personal experience is gospel. If that's how I sound, I'm sorry. I'm just trying to share my experience writing code since the late '90s. If that makes me sound arrogant, that's just because I'm better with code than with people :-p
Wow! That sounds great, I would love to pick up [https://devdocs.io/](https://devdocs.io/) again. I really liked that tool a lot. Thanks to people like you, making the effort.
Hi u/Ratiborwow, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thank you! Basically, type information enables more aggressive property name renaming. For example, when a class' method has a name similar to some native DOM api, closure considers it is not safe to rename it, but it provided with type information, closure can determine it is safe to rename &amp; possibly inline that method. As I understand, rollup-plugin-closure-compiler first uses rollup to bundle, and runs closure compiler on each generated output. TSCC uses closure compiler to both bundle the source and minify it, and closure is in general much smarter in removing dead code than rollup alone. This can be more relevant if you are generating multiple bundles at once, as Closure can perform some "inter-bundle" optimizations as well. Another benefit of using type information is that you can easily prevent renaming of certain property names. If you have certain types which depends on external sources (such as format of data received from ajax) you can use typescript's `declare interface { ... }`, and TSCC will inform Closure not to prevent that name. Check out a section https://github.com/theseanl/tscc#use-declare-interface-to-prevent-property-name-renaming in readme!
People hate Electron, because you need to ship a browser with your application, file size and memory usage go through the roof compared to more native applications. However, most users do not care. They want a pretty application that just works. Add the multiplatform development benefits to it and I'd say Electron should be a default choice for native apps --- if a web app does not suffice.
Hi u/max_glass, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Beautiful! Love the fact that you did not use a library for the physics. I've been trying for a while to figure out how to somewhat realistically model a cloud of ejecta from a celestial body colliding with another one and while I've made some progress, I haven't been able to take the conservation of angular momentum properly into acocunt as you can see in [this simulation](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/Collisions%20Test%20-%20Take%20that%20Jupiter!). Is there any chance you would be able to point me towards some good resources that would let me create ejecta clouds that are a tad bit more realistic???
AFAICT, the "transparent" (aka, "non-color") form of algebraic effects seems like another way of asking for deep continuations, or rather true "coroutines" instead of generators. This classic post from Dave Herman from 2011 makes a pretty good case IMO as to why that's not likely for the web, and why (maybe) it shouldn't be. &amp;#x200B; [http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/](http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/) &amp;#x200B; I like the idea of exploring them with \`yield\` and generators, even though it means you have to "color" them. Asking for deep continuations is, IMO, too much magic for JS.
Stackoverflow?
Although... in programming land... "later" never arrives and you won't get an opportunity to go back to your backlogs. Unless you are a good process oriented and practical technology company like slack. but many people twist it and think... ship fast and fix it later.. Which is definitely the wrong idea to teach young developers. Since, combined with the aforementioned "later" never arrives... the fix never arrives.
&gt; And running code knows things: hard-won knowledge gained through billions of hours of cumulative usage and tens of thousands of bug fixes. &amp;#x200B; My inner monologue immediately quips: "But, if you have tens of thousands of bug fixes.. then is it really the same product or is it the proper code you initially attempted to write and failed?"
&gt;I get that if you're using some 3D rendering software like Unity, you need to get closer to the metal. This mentality bugs me. Performance should always matter. If a game can update itself 60 or 144 times a second, normal applications should be able to respond at least once under a second. Normal applications should be able to do what they need to do without taking over a whole system. &gt;But seriously, how many applications could do away with the 5 different code bases they have to maintain in favor of just one. How many applications use one codebase that doesn't work perfectly anywhere? That's one reason why software has this stereotype of being buggy. Don't get me wrong, I love JavaScript. When I pseudocode problems, it's in JavaScript. But it worries me how willing the community is to just build on top of piles of code and not worry about what's underneath.
Using a Foo internally in a Monad doesn't make a Foo a Monad.
I tried searching and I found some solutions but they didn't work for me. As long as my research goes I think it has to be an extension in order to access these API's and I am trying to access them from a webpage.
Oh yeah it has to be an app or extension, you don't want random websites accessing all sorts of info about your device
Ok cool,now the I have to learn how to make an extension then :D
Hint: make a softbody tetris.
Then consider yourself lucky that you've never had to work with such a codebase. I've worked with two different codebases that easily exceeded 10,000 bug fixes over their lifetimes
Hi /u/KosmoonStudio, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nah, we just use a sensible default for different kind of images (eg. avatar pics can be something like 80x80 when used as a menu item but on the profile page its max width is something like 400px).
The problem with scrolling should be gone now.
The problem with scrolling should be gone now.
It was a Chrome/Android issue
The problem with scrolling should be gone now.
Thanks.
Working on it. Appreciate the feedback.
Later does arrive. I've worked on several projects now where we focused on new features fast early on and then started devoting a portion of our sprints to incremental rewrites later. I think part of what creates this "later never arrives" is that programmers will go propose a total rewrite of everything at once which isn't feasible. Incrementally replacing code like Slack did here is easier to sell and you can continue delivering new features.
I am working on some new features for ferrum.js; Going to add proper hashing, hash tables, binary trees when the code is stabelized. https://github.com/adobe/ferrum
&gt;is that programmers will go propose a total rewrite of everything at once which isn't feasible. &amp;#x200B; But that's the point. It is usually the management side that wants everything at once. No tech lead worth their salt would agree to that unless they knew arguing was a waste of time.
Hi u/orangehello1, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don't understand this reasoning to be honest. It's about priority. Which is more important, new features or improved performance? Technical optimization it not something you do on the sides, it has as much business value as any other thing the team will work on. Slack clearly arrived at a point where more users can be satisfied by improving performance than adding new features. If there's no clear business benefit in resolving technical debt, you might need to ask yourself if it is technical debt at all.
Because people don't realize every engineering decision is a trade-off, which means that for the obvious disadvantages of using Electron, there are a lot of advantages which are less visible to the end-user: reduced technical complexity, faster time-to-market, overall far less development costs which makes it possible to build the application in the first place, etc. The advantages are much less obvious at first sight than the disadvantages, which is why many people are complaining about Electron (which is quite ignorant in my opinion).
The iPhone app has a Dark Mode option which leads me to believe the Desktop isn’t far behind. We’ll probably start seeing new features after any bugs from the rewrite are ironed out.
Because there are sites that recommend it. It's easy, and if you have node, you probably have npm. From a Google Search: https://medium.com/@itsromiljain/the-best-way-to-install-node-js-npm-and-yarn-on-mac-osx-4d8a8544987a
Hi u/funnysmurf, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I support a CS codebase. We decided long ago that `and`, `or`, and `not` are strictly forbidden from the code base. Due to CS semantics, `a and b` reads as both: `a &amp;&amp; b` `a(and(b))` Of course we would never had a function called `and`, but it adds enough difficulty in visually parsing the code that we decided it wasn't worth it. The only exception is we allow `not in`, considering `not in` to be a single operator.
Wait, how is this chart embedded on Reddit?
No idea why you're getting downvoted, but this is exactly the reason why teams use Electron, and it makes a lot of sense.
Personally, I prefer Vue over Angular / React. One of the main reasons I like vue is the syntax feels right to me compare to others two .
Unit testing and TDD are like open offices, a blatant cost cutting measure justified with a vaporous excuse. Writing specifications and hiring testers is expensive, lets just make the developers do everything. They’re too desperate to say no, screw ‘em. Writing articles about it all, like it’s a worthwhile thing, is sad.
I'm surprised to hear management that even cares about rewrites. My management experience has mostly just been wanting results they can deliver to their managers that makes them look good. As long as I can keep including new features in with the rewrite they can keep delivering good reports.
&gt;join operation is meaningless Is this because a Promise’s ‘then’ method automatically implies `join` upon resolving? Could you somehow wrap Promise to achieve the desired behavior?
It’s slightly more complicated, but that is the killer app of monads, to be sure. But monads must also implement `map` and `join`, and conform to certain algebraic laws. I’m not an expert, but that’s my understanding...
https://embed.ly/providers/new
Nah, we just use a sensible default for different kind of images (eg. avatar pics can be something like 80x80 when used as a menu item but on the profile page its max width is something like 400px).