I just use regular links, quicker to load, better for user etc. The urls are: https://www.facebook.com/sharer/sharer.php?u=URL_ENCODED_URL https://twitter.com/intent/tweet?text=TEXT&amp;url=URL_ENCODED_URL https://plus.google.com/share?url=URL
But the problem occurs when you want to show share counts. 
&gt; The idea is that you're loading a single page application... That may be the point of these frameworks, but it's not always what they're used for. My takeaway was that (as present) these frameworks are awesome for sites/apps where the initial load time is less of an issue than subsequent interactions. For sites/apps where page load is more important you're much better off rendering the HTML on the server (at least for the initial load).
Can you add predefined message to those links ? For example, your handle "via @handle" .... ? I know that the code twitter embed adds a `data-via` attr and the proposed content of the tweet is the page's title.
Yeah, think so, I don't personally, but you can google it and find out.
Incredibly impressive! Can we change the CSS/templates of components without having to send a PR?
Absolutely. You can override every bit of tcomb-form writing a custom template. Actually the Bootstrap theme I wrote is merely the default (and most complete). The Gridforms and Ionic demo are examples of such a customization. Writing a new theme basically means implementing this protocol: https://github.com/gcanti/tcomb-form/blob/master/lib/protocols/theme.js i.e. implementing a bunch of functions: - textbox: for textboxes and textareas - checkbox - select - radio - struct: for forms - list: for a list of "items" The PR thing just means that if you write a Foundation theme, I'll be happy to add it to the repo :) p.s. I'd like to point out that there are other awesome form libraries for React.js out there which have inspired me: - [newforms](https://github.com/insin/newforms) - [react-forms](https://github.com/prometheusresearch/react-forms) are my preferred ones. p.p.s I'm writing right now an extensive guide to explain how to customize tcomb-form writing new themes.
Awesome, keep up the good work! I am definitely taking a closer look and I already have a few use cases where I can start using it!
Why not?
&gt; custom elements = custom code 
I think it is an amazing language once you understand 'the true way' and I would be disappointed if the majority of JS devs didn't find it great, but I think that's not the case, since there are alternatives (that compile to js) but they didn't make a huge impact. It gives you an insane amount of freedom, but it comes as a two edged sword. The main point of JS is that you should forget what you've learned about OOP, just go modular + composition. Also, use the tools available, start with a linter, it will catch everything while you develop and your code won't offer nasty surprises. Anyway, I'm saying the above after 3 solid years of only JS development, and yes, at start it didn't feel right, but that's only because there are too many misinformed educators. 
https://www.sharedcount.com/
Great! Let me know if you have feedbacks and suggestions. My main use case right now is to generate tons of forms for our internal backoffices (for whom the Bootstrap theme is good enough), but with the new customization feature I'm going to use this library for our customer web app as well.
This is great.
Very cool stuff. Is there anywhere that talks about the technology you're using more specifically? This is an area I am very interested in. I've been working on a real-time audio/video streaming hobby project that kind of imitates the functionality of Twitch.tv.
$450 per year for something which can be done easily with little developer effort. 
Brag? Im just saying I wouldnt buy 5 cars if i only needed one.
Bah... **holy war**. The people who have never been able to live without jQuery will continue to demand jQuery for all things regardless of how rational or irrational that need is. Some of this is due to vanity, some to incompetence, and some due to compatibility issues; but at the end of the day business does not care about any of those issues so long as the product is built and passes QA. Holy war aside. I always interview people without mention to jQuery. The real problems live outside library solutions and demand creative insight.
Step 1. Be very beginner friendly language (requirements browser + notepad) Step 2. Have lots of entry level developers Step 3. Some of those become middle level developers. Step 4. Some of those become senior level and write interesting/cool libraries Step 5. JS now has more awesome libraries to draw in more people Step 6. ~~Profit~~ Growth I think any language which would have ended up living in the browsers would become successful JS was just the first, although it's not without it's strengths. I share your longing for static typing and try to use TypeScript as much as possible.
North Korea inheritance is the best inheritance.
And this is precisely why tooling matters and your favorite language can't win. Network effects around tooling destroy any advantage you get writing code in your favorite language. Obviously the analogy isn't perfect in this instance, for example transpiling, but you get the gist.
Just use abstractions on NPM, problem solved. Now you get browser compatibility without the bloat, and your code is clean and readable. https://www.npmjs.com/package/dom-css https://www.npmjs.com/package/domready https://www.npmjs.com/package/xhr etc..
Gzip helps reduce latency with the request; but the browser still needs to parse the un-gzipped code. This can be pretty slow on some mobile devices. 
 var i = 0; function twoPlusTwo() { return (function() { "use strict"; for(var two = 0; two !== 100; two = Math.round(Math.random()*100)) { console.log(two); i++; } two = two/50; return two })() + (function() { "use strict"; for(var two = 0; Math.abs(two - 2) &gt; 0.000001;) { var ran = Math.round(Math.random()*1000)/1000; if(two &gt; 2) { two -= ran; } else { two += ran; } console.log(two); i++; } return Math.round(two) })(); } console.log(twoPlusTwo(), i);
Typically JQuery is cached if you're using the available CDNs or if you have a lot of visitors that come back to your site. The cache check is single-digit milleseconds whereas the network transfer can be tens to hundreds of milleseconds (on high speed connections). When you consider caching, even a non-minified file is still faster than a network call. gzip decompression time is negligible if you have to hit the network because it only adds a few microseconds (or milleseconds on mobile) to the process.
Dear god
It's actually pretty simple... Just a lot of random number generation. I bet there is cooler stuff other people could do.
Yes - see the Angular section at [Why Meteor](http://www.meteorpedia.com/read/Why_Meteor).
I'm not calling Filament Group clickbait, is that why my response is getting downvoted? I'm saying no shit a SPA slows down the time to initial content, but who the fuck uses Angular for a Buzzfeed list
Awesome. Looking forward to the guide. Seems this is how you set the template: https://github.com/gcanti/tcomb-form/blob/master/index.js#L4 Will there be a more complete API documentation on available config options?
One interesting thing I noticed is you're using `uvdom` to loosen your dependency from React. I had thought it was just a toy library as part of your blog series "Understanding React and reimplementing it from scratch".
From first principles: var zero = {}; function succ(num) { return {prev: num}; } var one = succ(zero); var two = succ(one); function add(m, n) { if (m == zero) return n; return add(m.prev, succ(n)); } function toJS(n) { if (n == zero) return 0; return 1 + toJS(n.prev); } var answer = add(two, two); console.log(toJS(answer)); 
 function twoPlusTwo() { return (+!0*(+!0+!0)+(+!!1*(+!0+!!1)))/(+!0); }
I really wanted to write my own goto routine in javascript using a regex and then exec() to jump to a line in a function, but this is all I have time for at the moment. To make it even better, I didn't bother to test and I'm sure it won't run (or calculate the right value) the first time. function addValues(x, y) { // Loop through x adding to an array of 1's. for(i=0;i&lt;=x;i++) { if (x &lt; i) { values[] = 1; } } // Loop through y adding to an array of 1's for(i=0;i&lt;=y;i++) { if (y &lt; 1) { values[] = 1; } } // Loop through the values and add them up for(i=0;i&lt;=values.length;i++) { total = total + values[i]; } // Return the result return total; } result = addValues(2, 2);
During the refactoring (v0.2 -&gt; v0.3) I had two main goals: 1. target other css / html frameworks besides Bootstrap 2. remove the hard dependency on React.js The second goal is partially achieved using uvdom (though you can still write templates with JSX or vanilla `React.createElement` if you like, in that case `uvdom.compile` behaves like the identity), but I failed to remove React.js from the internals. Maybe I'll try another experiment during the holidays using Mithril: its nice API let me hope, but we'll see.. I admit it's quite challenging.
 function twoPlusTwo() { return [!+[]+!+[]]+(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]])+[])[!+[]+!+[]]+[!+[]+!+[]]; }
 function twoPlusTwo() { return -~![]+~~!![]+!![]*!![]+!![]/!![]; }
Yes. There are several points of extension and configuration: - write new inputs - write new templates - write new transformers (a transformer deals with serialization / deserialization of data e.g. numbers to / from strings for numerical fields) Alas writing good documentation is hard and time consuming, but I'll definitely write down every way to customize and configure tcomb-form since it's was one of the main goals. I want to make crystal clear how tcomb-form works. Furthermore, once v0.3 will be stable, I want to extend the library handling other combinators: tuples, dicts and unions!
Can really be written with anything function twoPlusTwo() { return -~!Function+~~!!Object+!!String*!!Number+!!Boolean/!!Array; }
 function twoPlusTwo () { return (function (g) { return [void null, void null].map(function (x, y) { return g.next(); }).reduce(function (a, b) { console.log(g.next().value); return a.value + b.value; }); })((function* f(two) { yield two; yield two; return 5; })(function (x) { return (((+!x &lt;&lt; ~(~+!x &lt;&lt; +!x)) - +!x) ^ ~(~+!x &lt;&lt; +!x)) &gt;&gt; +!x; }())) }
The book covers a lot of interesting points in JS, and is technically interesting. However, it is in serious need of an editorial review. The grammar is poor and hard to understand at times (particularly the code samples). Additionally, I've hit a few bugs with the interactive exercises, for example, `ReferenceError: __match_answer_and_solution__ is not defined` when I try to submit an answer. Edit: Still going through the book, and I find some parts are incomplete. For example, in the first section, the exercise is to add a single character to a code snippet to fix the function. The correct answer is adding a `!` character to the front (which is totally mysterious to someone who don't understand exactly what that character is doing), but there's no explanation for it. Edit2: Things are getting worse and worse as I read on. I do not recommend this book. It was only $3, so I'm not that worried about it.
You would have to create the function :P function twoPlusTwo() { return new Function('return '+[!+[]+!+[]]+(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]])+[])[!+[]+!+[]]+[!+[]+!+[]])(); }
Uses the ~ operator and eval for laughs. Has the benefit of making the user believe that their input is somehow meaningful. function deuxPlusDeux () { var n, args = [], twoPlusTwo, diff; for (n = 0; n &lt; arguments.length; n++) { args.push(~~arguments[n]); } twoPlusTwo = args.length ? eval(args.join('+')) : 0; diff = 4 - twoPlusTwo; if (diff !== 0) { return 'needed to add ' + diff + ' to your numbers: ' + (args.join(', ') || '¯\\_(ツ)_/¯ ') + ' to make 4.'; } return 'added ' + (args.join(', ') || '¯\\_(ツ)_/¯ ') + twoPlusTwo; }
multi-file uploads
So new Question. I've been wondering about. The application at large will be a very thick 'game of life' clone. Tracking individual entities as where as environmental factors that that affect them. I want all these things to persist and be available to anyone with access to the server. So my thought was using a database to store the information. However I imagine that that many calls to a DB of any kind would be exhausting for any machine or server I can own. I assumed that somewhere I'd have to meet in the middle and make some more static data in JSON, assuming that calls to JSON data would be faster? Any thoughts? How does one go about making such numerous sequential queries and maintain performance? 
Source is probably: https://plus.google.com/+UmarHansa/posts/Bj19Qvf4bb7 And it is probably still in Canary.
 function twoTwo() { var Hͫ̆̒̐ͣ̊̄ͯ͗͏̵̗̻̰̠̬͝ͅE̴̷̬͎̱̘͇͍̾ͦ͊͒͊̓̓̐_̫̠̱̩̭̤͈̑̎̋ͮͩ̒͑̾͋͘Ç̳͕̯̭̱̲̣̠̜͋̍O̴̦̗̯̹̼ͭ̐ͨ̊̈͘͠M̶̝̠̭̭̤̻͓͑̓̊ͣͤ̎͟͠E̢̞̮̹͍̞̳̣ͣͪ͐̈T̡̯̳̭̜̠͕͌̈́̽̿ͤ̿̅̑Ḧ̱̱̺̰̳̹̘̰́̏ͪ̂̽͂̀͠ = arguments.callee.name.length; var ლ_ಠ益ಠ_ლ=(function P0() {return arguments.callee.name})() .split('').filter(function(chr) {return /[A-Z0-9]/i.test(chr)}) .reduce(function(a, b) {return a.charCodeAt(0) + b.charCodeAt(0)}) &gt;&gt; Hͫ̆̒̐ͣ̊̄ͯ͗͏̵̗̻̰̠̬͝ͅE̴̷̬͎̱̘͇͍̾ͦ͊͒͊̓̓̐_̫̠̱̩̭̤͈̑̎̋ͮͩ̒͑̾͋͘Ç̳͕̯̭̱̲̣̠̜͋̍O̴̦̗̯̹̼ͭ̐ͨ̊̈͘͠M̶̝̠̭̭̤̻͓͑̓̊ͣͤ̎͟͠E̢̞̮̹͍̞̳̣ͣͪ͐̈T̡̯̳̭̜̠͕͌̈́̽̿ͤ̿̅̑Ḧ̱̱̺̰̳̹̘̰́̏ͪ̂̽͂̀͠; return ლ_ಠ益ಠ_ლ } [jsfiddle](http://jsfiddle.net/b1njpyyo/)
Guess they haven't pushed this to canary yet?
I added a little example: http://gcanti.github.io/tcomb-form/guide/index.html#templates
Which versions of the **128** total versions of jQuery would be cached? My point is, you're appending 34 KB of data to your application that really only needed to be maybe 3.4 KB because you didn't use the other 90% of the library. It's not even the network time that realistically matters, max TCP packet size is 64 KB. It's the amount of time it takes the compiler to parse the document and compile what's necessary.
the git repository seems to have disappeard. i'd love to check out some source code
Lol fine job sir!
You could just make everything in the function up to "return 2+2;" be extremely complicated stuff unrelated to what the function returns, right?
As the person who answered my question pointed out - It's not possible to do. That's why it's giving you blank data.
This is a form of [Church Encoding](http://en.wikipedia.org/wiki/Church_encoding) using objects rather than functions. Very nice :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Church encoding**](https://en.wikipedia.org/wiki/Church%20encoding): [](#sfw) --- &gt; &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), __Church encoding__ is a means of representing data and operators in the [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus). The data and operators form a mathematical structure which is [embedded](https://en.wikipedia.org/wiki/Embedding) in the lambda calculus. The __Church numerals__ are a representation of the natural numbers using lambda notation. The method is named for [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church), who first encoded data in the lambda calculus this way. &gt;Terms that are usually considered primitive in other notations (such as integers, booleans, pairs, lists, and tagged unions) are mapped to [higher-order functions](https://en.wikipedia.org/wiki/Higher-order_function) under Church encoding. The [Church-Turing thesis](https://en.wikipedia.org/wiki/Church-Turing_thesis) asserts that any computable operator (and its operands) can be represented under Church encoding. In the [untyped lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus) the only primitive data type is the function. &gt;The Church encoding is not intended as a practical implementation of primitive data types. Its use is to show that other primitives data types are not required to represent any calculation. The completeness is representational. Additional functions are needed to translate the representation into common data types, for display to people. It is not possible in general to decide if two functions are [extensionally](https://en.wikipedia.org/wiki/Extensionality) equal due to the [undecidability of equivalence](https://en.wikipedia.org/wiki/Lambda_calculus#Undecidability_of_equivalence) from [Church's theorem](https://en.wikipedia.org/wiki/Church%27s_theorem). The translation may apply the function in some way to retrieve the value it represents, or look up its value as a literal lambda term. &gt; --- ^Interesting: [^Mogensen–Scott ^encoding](https://en.wikipedia.org/wiki/Mogensen%E2%80%93Scott_encoding) ^| [^Eager ^evaluation](https://en.wikipedia.org/wiki/Eager_evaluation) ^| [^Cons](https://en.wikipedia.org/wiki/Cons) ^| [^Type ^theory](https://en.wikipedia.org/wiki/Type_theory) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmxqfs8) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmxqfs8)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
function twoPlusTwo() { return 4; }
 let twoPlusTwo = () =&gt; [for (i of [ [for (i of Array.of(arguments)) i], [for (i of Array.of(arguments)) i] ]) +!+i+!+i].reduce((i, j) =&gt; i + j);
This is everywhere!
 function twoPlusTwo() { var bits_0=[0,1,0,0,0,0,0,0]; var bits_1=[0,1,0,0,0,0,0,0]; var bits_out=[0,0,0,0,0,0,0,0]; var carry=0; for(var x=0;(x&lt;bits_0.length &amp;&amp; x&lt;bits_1.length);x++) { bits_out[x]=bits_0[x]+bits_1[x]+carry; if(bits_out[x]&amp;2!=0) { carry=1; bits_out[x]&amp;=1; } else { carry=0; } } var output=0; for(var y=0;y&lt;bits_out.length;y++) { output+=bits_out[y]&lt;&lt;y; } return output; }
I just want to tell those of you who have posted functions: you are all insane in a good way.
I agree that prerendering on the server will be an improved initial experience for some single page applications. I know that Tom and Yehuda are working on prerendering in Ember, and there are some other libs that will also help with prerendering Ember. I am not sure if backbone or angular SPAs can be rendered on the server considering that, by default, they do not represent state in the URL. 
Just to keep in the spirit of bloody minded complexity, I decided to avoid using any of the arithmetic operators (+, -, * or /) function twoPlusTwo () { function numAsCharToBitArray(char) { var asc = char.charCodeAt(0); var num = asc &amp; ~ 48; return [ !! (num &amp; Math.pow(2, 0)), !! (num &amp; Math.pow(2, 1)), !! (num &amp; Math.pow(2, 2)), !! (num &amp; Math.pow(2, 3)), !! (num &amp; Math.pow(2, 4)), !! (num &amp; Math.pow(2, 5)), !! (num &amp; Math.pow(2, 6)), !! (num &amp; Math.pow(2, 7)) ]; } function bitArrayToNumAsChar(ba) { var num=48; for (ix in ba) { if (ba[ix]) { num = num | Math.pow(2, ix) } } return String.fromCharCode(num); } function addBitArrays(ba1, ba2) { var carry = false; var result = []; var bit; for (ix in ba1) { if (ba1[ix] ^ ba2[ix]) { bit = true; if (carry) { bit = false; } } else if (ba1[ix] &amp; ba2[ix]) { bit = carry; carry = true; } else { bit = carry; carry = false; } result.push(bit) } return result } function addNumbers(a, b) { var baa = numAsCharToBitArray(a.toString()); var bab = numAsCharToBitArray(b.toString()); var baSum = addBitArrays(baa, bab); return bitArrayToNumAsChar(baSum) } return addNumbers(2, 2); } The addNumbers function is only valid for positive integers where the result will be less than 10 
&gt; Backbone is a library, not a framework, and plays well with others. You can embed Backbone widgets in Dojo Dojo is a toolkit, not a framework :p
Unfortunately this particular implementation is not open source at the moment. 
 var twoPlusTwo = function(y) { return function(x) { var z = x.toString().split('')[y] var t = new Float64Array(z); return Math.abs(t.BYTES_PER_ELEMENT / (Math.ceil((y - Math.E - (-0.6))))); } } console.log(twoPlusTwo(0)(Date.now())); // =&gt; 4
No
That's pretty cool. I f*cking love Chrome developer tools.
 // in ecma5 [x, y, z].every(function(f) { return f == 9; });
There isn't in JavaScript, but in CoffeeScript (which compiles to JS) you can write it just like you suggested.
Though I think it's a stretch to call that 'shorthand'.
&gt; function twoPlusTwo() { &gt; return [!+[]+!+[]]+(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]])+[])[!+[]+!+[]]+[!+[]+!+[]]; &gt; } Or, of course, eval(twoPlusTwo());
Depends on how much they want to lay out but: Miško Hevery, Todd Motto, John Papa, Adam Abrons, 
http://rangle.io/ - I don't work there, but I know a lot of the guys who do. They're a fullstack JavaScript consultancy based in Toronto and do lots and lots of work with angular. Members of their team often do talks at local meetups regarding angular best practices etc. If you wanna hire a consultant or whatever it's at least worth checking in with these guys - they know what they're doing and they're just great guys as well. edit - I just checked out their site for a while and it looks like they have packages specifically for training - http://rangle.io/training/
Hey sorry for the late response. I wouldn't use functions in the view unless they generate layout. in [this](http://pastebin.com/jJf4esFh) link i pasted a controller , view and model from an old project. some of the functions and variables are in my native language but you'll be able to understand how i keep everything separate. My model only does stuff with the db , my controller has 1 function the index in which it will load 3 views and look if someone is logged in (so the logic part), call the functions in my model and load the view with the data from the model. The view will then only show the data provided by the controller. If you have an alternative i would definitely switch to PHP or ASP since they have really nice build MVC frameworks with a lot of functionality like functions against xss or other usefull stuff. JS isn't really made for making MVC applications mainly because it's client sided.
really cool! I will start tinkering with it
Windows is shit.
Hi /u/RevillWeb, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just `revillweb.com`. **Consider this your only warning.** Continued posting of only a single source will force us to take action. Thanks for your understanding.
There's also `Array.prototype.every`. I've used them before, but less common than `forEach`, `reduce`, `map`, `filter`. **Edit** Since I was thinking about this more, `some` is a bit like a `indexOf &gt; -1` with a valuation function parameter. `some` is iterative and returns when it finds the first element that returns `true`. This is good to know, since there are other clever ways to accomplish the same thing if you know more about the collection (e.g is it sorted?). Sometimes a search algorithm can be more appropriate.
Hi /u/jellekralt, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `jellekralt.com`. Thanks for your consideration!
I challenge someone to use the "with" statement.
 function twoPlusTwo () { with ([,,]) return fill(length).reduce((a, b) =&gt; a + b); }
looks like a bunch of whitespace. Did you try putting your cursor just before `&lt;script&gt;` and hitting the backspace key a bunch of times?
This is an awesome bot
Though not really intended for this purpose, `some` and `every` can also function as a "lazy" `forEach` with predicate. All in all, the functions on `Array.prototype` are surprisingly well-thought-out (shame not enough people know about the optional `thisArg` parameter and keep churning out `[].map(function(){}.bind(areYouAmusedIDidntReadTheDocumentation))`).
zip.js and JSZip. zip.js was the one I went with. But I eventually moved the zip generation server side, since the client side zipping would sometimes fail with huge zips, which was unacceptable.
If you like some, I'd recommend checking out nodeschool.io's Functional JavaScript module along with codewars.com where you'll see a lot of elegant approaches like to problems.
I'm assuming that the reason nobody has a solution for you, is that they can't actually recreate the problem on their own. If it were a common problem, it would likely be [listed in their issues](https://github.com/twitter/typeahead.js/issues). If it's not in there, then I doubt there's anything we can do to help without actually seeing markup and code (and perhaps even relevant styles, because who knows).
My brain just reached maximum execution limit.
Hello, now the guide should be complete. I also added two sections about advanced form management showing a powerful feature: using subtypes with structs and lists.
`every` is nice because you can break out of it.
how is this different than `filter`?
look at html5boilerplate
`filter` pops elements out of the array when the callback returns `false`. `some` will iterate through the array *until* the callback returns `true`, then break and return `true`, otherwise `false`.
 function AppException(message) { this.message = message; this.name = "AppException"; } function testTwoPlusTwo() { var assert = NaN; try { assert = twoPlusTwo(); if(assert !== parseInt(4,10)){ throw new AppException("twoPlusTwo() === " + assert); } } catch(e) { throw new AppException(e.message); } }
To elaborate on /u/physics4life's answer: http://www.facebook.com/sharer/sharer.php?u=THIS_URL https://twitter.com/intent/tweet?url=THIS_URL&amp;text=OPTIONAL_TEXT&amp;via=TWITTER_HANDLE http://www.linkedin.com/shareArticle?mini=true&amp;url=THIS_URL&amp;title=POST_TITLE&amp;summary=OPTIONAL_TEXT&amp;source=LINKEDIN_URL and for further info in the facebook share or twitter cards: &lt;!-- Open Graph meta for facebook sharing --&gt; &lt;meta property="og:type" content="website" /&gt; &lt;meta property="og:title" content="PAGE_TITLE" /&gt; &lt;meta property="og:url" content="PAGE_URL" /&gt; &lt;meta property="og:image" content="url/to/share_image.png" /&gt; &lt;!-- Twitter card meta --&gt; &lt;meta name="twitter:card" content="summary" /&gt; &lt;meta name="twitter:site" content="TWITTER_HANDLE" /&gt; &lt;meta name="twitter:title" content="PAGE_TITLE" /&gt; &lt;meta name="twitter:description" content="PAGE_DESCRIPTION/EXCERPT" /&gt; &lt;meta name="twitter:url" content="PAGE_URL" /&gt; &lt;meta name="twitter:image" content="url/to/share_image.png" /&gt;
Is there any other way to get orientation of image (from input tag). 
I like seeing stories like these because I am an indie game developer. Recently I learned that before starting to make a game it is a good idea to make a game prototype. This way you can experiment with game play ideas before committing to building the game. This is something I'm working on. http://www.tigrisgames.com/prototype/1/
In the library, what did you bind callbacks to? I always seem to run into problems with inputs and event bubbling. 
I happened to listen to the latest episode of Javascript Jabber today, which was all about Track JS - a service that sounds like pretty much exactly what you're after: http://trackjs.com
I normally use "use strict"; in my scripts then use *window.onerror* to catch all errors and post them over to the server. The server then sends me an e-mail with all the information.
It depends on what you are working on and what type of devices you have to support. Most newer "PCs" aren't going to run into too much problems unless you are working on a sizeable single page app with lots of data (hundreds of thousands of records, etc). I do a lot of mobile HTML5 and I spend a ton of time identifying unnecessary paints, memory leaks, etc. because some phones suck but my clients still have to support them.
Yeah, ES5 gave us some really great stuff. But legacy IE is why I can't have nice things like this at work. So, back to underscore.
I gave you credit on the pen fyi, Yours was one of the examples that inspired it. Would love to know who had the original idea though, could be you?
Putting that In production is the best way to make you're self undisposable :D
Callbacks will be bound to the first argument passed into `new Quay` as it creates an event listener on that element
IIRC, the native function.bind will bind arguments as well. 
Yeah but the problem with it is that it re-binds `this` as its first argument as well.
why? angular is on its way to legacy land you'll be writing new stuff that is going unsupported shortly
Nope.
That's not entirely true. During the hype following the conference where the Angular team announced 2.0, the public freaked out about the changes and everyone was crying because their code would no longer be usable. Members of the team have come forward since then stating firmly that they will provide an upgrade path to follow between 1.3 and 2.0. 
It's usually a good idea [to declare your x-posts](https://www.reddit.com/r/webdev/comments/2p3aow/am_i_the_only_one_who_cringes_at_the_term/). 
[the internet](http://internet.com/)
It doesn't appear that the constructor function does anything with the parameter provided. Sorry, I'm new to javascript and was just trying to learn. Is this code supposed to work?
Whoa, what just happened here?
You are correct I meant to pass a list to the sprites
&gt; n does anything with the parameter provided. &gt; Sorry, I'm new to javascript and was just trying to learn. Is this code supposed to work? To see how it would work: **Replace:** function Sprites() { this._sprites = []; } **With:** function Sprites() { this._sprites = arguments[0]; }
In light of this roadmap from Mozilla, what are your thoughts? Many in the comments are riled up over the (temporary?) withdrawal of HTML imports.
 I think the reason you think putting HTML5 in the post title was a bad call is the same reason the authors think it was a good one - it is the mark-up; we don't have JS running websites on its own. you aren't really "using" HTML5 in the same way a 3D shooter uses RAM, HTML is the lid of the box that contains the scripting that creates the game, so to speak. naturally i they would put HTML5 in the header to refer to browser games that rely on scripting. also i mean its /r/javascript so its not like they were ever going to get huge swaths of karma or clicks by putting in a buzzword, haha. 
I think not including HTML imports makes sense for Mozilla for now. ES6 modules are still being grokked by the community, and the HTML import polyfill works well on FF. So rather than take time to implement Chrome's spec-by-implementation, they can wait and see the actual needs raised by the community.
Do you mean that `function(a, b, c) {}.bind(thisArg)` will become `function(/*a=thisArg,*/ b, c){}` ? IIRC only the second argument to `.bind()` and on are used to partially apply the function.
You need a canvas HTML element to display WebGL or anything drawn with a 2D canvas. HTML5 comes with audio, video and canvas elements, as well as a JavaScript API for each. HTML5 is more than just straight up markup elements.
I agree with their decision to forego on HTMLimport. I don't think I would have use it to load Web Components. Just like with ES6 modules, Web Components should be lazy loaded when needed, not prefetched at startup. Instead of importing the HTML needed by your application, the Web Components should have a convention based loader that can look at the name of a component and find out where to load it from.
thank you
&gt; You need a window system client to display OpenGL or anything drawn within a window. Widget toolkits (GTK+, KDE) come with audio, video and canvas elements, as well as an API for each. Widget toolkits are more than just straight up widgets. And that's how OpenGL rendering becomes GTK+ rendering or KDE rendering. GTK+→OpenGL relation here is the same as HTML5→WebGL/JS/canvas HTML is a *markup language* by definition, just rules on how you can write a text similar to XML. How can it have something to do with what resources that markup represents?
Thanks. I remembered that Bugsnag does it too, I'll check out trackjs!
Thank you, that's what I've been thinking about!
the syntax for binding to keys is slick. 
What we are interested in when drawing in a canvas is not the HTML &lt;canvas&gt; element, but rather a DOM &lt;canvas&gt; element. HTML is just a way to describe a DOM, but those are completely different things. DOM gaming, anyone?
Any idea how long it takes for Google's CDN to pick up new versions?
~~Hi /u/jhartikainen, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just `codeutopia.net`.~~ ~~**Consider this your only warning.** Continued posting of only a single source will force us to take action.~~ ~~Thanks for your understanding.~~ edit: see below
As someone who has no experience in developing games or 3d modeling, is it reasonable to expect that I can code my thing in JavaScript / HTML5 and use some kind of transpiler that targets iOS / Android platforms automatically? What kind of quality can you expect from such a tool?
This way you can also include stack trace. onerror has these arguments: message, url, linenumber, column, exception Just use *exception.stack* ("use strict" will always throw Exception on error, so this is very nice)
Actual HTML5 games are games that use &lt;canvas&gt;, as that tag was introduced in HTML5. It might be used as a buzzword in some cases, but it has legitimate uses, such as distinguishing from Unity or Flash games. 
It should be an argument to the function, not the context of the function imo. It might make sense for `this` to be the Sprites object, so that consumers can have both the argument as well as the larger object available in their callback.
``` ()=&gt;4 ``` I think I'm doing it wrong.
I'd say watch Douglas Crockford's videos starting with this one. It's actually 2 hours, sorry, but there's no better video I can think of. http://youtu.be/v2ifWcnQs6M 
Half of it is that people attempt to teach this subject when either they don't understand it well themselves or they simply cannot communicate it effectively. The other half of the problem is that many developers are emotionally sensitive about this subject. There are a great many people professionally employed to write JavaScript and they are less than well prepared. I attempted to explain this subject to my 8 year old completely abstract from code and here is how I did it: http://prettydiff.com/guide/unrelated_closureToAChild.xhtml
I'm creating a browser game with 100% SVG graphics. Would it be wrong to call it a SVG game?
Mikowski's new book does a really good job of explaining closure. I recommend it to anyone struggling to understand the concept. http://www.manning.com/mikowski/ 
Sorry, my misunderstanding. Thought it was OK as long as I participated in other ways (comments, discussion) edit: "additionally if you do not participate in discussion, or reply to peoples questions" this is what led me to the conclusion it was OK, would you mind clarifying?
For your each example, I usually allow for a second parameter to provide a context, and call the callback bound to that context, defaulting to passing the scope's this if the last param isn't provided. E.g., Sprites.prototype.each = function(cb, context) { context = context || this; for (var i = 0, l = this._sprites.length; i &lt; l; i++) { cb.call(context, this._sprites[i]); } } It's also really useful when used in conjunction with a for loop: function forEach(iterable, fn, context) { context = context || this; for (var i = 0, l = iterable.length; i &lt; l; i++) { cb.call(context, iterable[i]); } } For instance for adding a list of classes to an element: forEach(['classOne', 'classTwo'], element.classList.add, element.classList); 
Oh, you were referring to the arguments given to bind? I mistakenly interpreted that as the arguments a `.bind`ed function would take (ie. the thisArg argument of bind would end up being the first argument and the context for the bound function), which is not the case. Glad we're on the same page here. As for not worrying about "breaking" functions, native `.bind` shouldn't be an issue if you're only dealing with the function object itself (eg. callbacks), as in such a case the context of that function is undefined. `someFunctionNotAttachedToAnObject.bind(null, ...args); should be perfectly safe there.
Sorry, yeah, your activity is ok. I was going through a batch of self-promoters, and must have got your profile confused with someone else's. I'll remove the warning!
The promise of HTML5 gaming is not what tools you use to build your games, but that the games you build will run on any standards-compliant browser. There is no contradiction in using Unity or Unreal engines to build pure HTML5 games. 
"HTML5" is just a stand-in for a number of browser-based technologies. It's not really not that important what you call it. 
No, but more public communication from our engineering team is something we've been working on internally (blog posts, etc.) We currently use OpenTok as our WebRTC provider and a ton of custom code based around Autobahn and Redis for the realtime bits, which plug into the Backbone client-side app.
GitHub clients, or my actual git install in the OS?
This is exactly what I do. Allow people to specify a context or use the current class as it's context so there's no questions about what this refers to.
Both.
Probably had the same problem
It's a fairly straight forward concept, but the biggest problem I have with closures is following the code execution. Especially, when one closure returns another closure (and that returns another closure; etc.) `d3.js`, albeit an extremely well written library, can be hard to follow. Take for example `d3.js` linear scale. var = d3.scale.linear([0, 10]); // Create a linear scale from 0 to 10 Here's a snippet of code from https://github.com/mbostock/d3/blob/master/src/scale/linear.js#L22 function d3_scale_linear(domain, range, interpolate, clamp) { var output, input; function rescale() { var linear = Math.min(domain.length, range.length) &gt; 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber; output = linear(domain, range, uninterpolate, interpolate); input = linear(range, domain, uninterpolate, d3_interpolate); return scale; } function scale(x) { return output(x); } ... scale.domain = function(x) { if (!arguments.length) return domain; domain = x.map(Number); return rescale(); }; ... return rescale(); } Everytime you modify a property, `rescale` is called and returned. In reality you are returned the `scale` function which contains a different closure function called `output`. It's somewhat mind-boggling to look at, and even harder to debug.
Not really conventional, probably not performant and I wouldn't recommend it... But you can use string comparison and regex. Probably the shortest solution. Just a different way to solve it. if (/^9{3}$/.test('' + x + y + z)) `/^9{3}$/` is a regex that matches if all characters are '9' and has length 3. If you had a numerical array and value that you wanted to check... var value = 9, x = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]; if(new RegExp('^' + value + '{' + x.length + '}$').test(x.join('')));
Any ideas for a mac 10.7.5 user? Github software download now only supports 10.9 or higher.
Because mobile doesn't have any graphics acceleration like PCs do. EDIT: It's interesting that at least two redditors think mobile has the same graphic accelerators PCs do.
Switch to a new Git client or make sure your filesystem is set to case-sensitive.
I love that my employer has gotten me a Safari Books Online subscription. It's like a bookstore at my fingertips. Expensive, but well worth it. I can skim through this book and see if I like it.
GitHub uses the local git installed, so you can upgrade that with something like homebrew. 
Github's client includes an installation of git. But the problem is with Git. 
install nodejs and just run : node [your-script-file.js] 
Yeah, and if you were using node, you could use Gulp to watch your script so that the moment you save it, the nearby console executes your file, and reports any output or errors. You can create really cool workflows with tools like Gulp (and node, of which gulp is a part).
Doesnt this only apply if youre blindly cloning repos?
Anybody have any idea why the remove function was written as remove = function(a, x) { if (contains(a,x)) { a.splice(a.indexOf(x),1 ) } } instead of something like remove = function(a, x) { var index = a.indexOf(x); if (index !== -1) { a.splice(index,1 ) } }
me:$ brew upgrade git Error: git-2.1.3 already installed so am I good or am I fuxxored?
And also only if you're doing so on Windows or Mac, apparently. *nix isn't affected because of case-sensitive filenames.
You need 2.1.4 or 2.2.1. You're not "fuxxored" unless you blindly clone git repositories you're pointed to.
That's what of my favorite ones. Another one is http://2015.front-trends.com/
Again it has nothing to do with "ticks" or "cycles" as the spec clearly points out. This is especially true when it comes to native promises. The spec merely requires an empty call stack and the appearance of async execution. The spec does not have explicit requirements about the use of timers or cycles on the event loop.
&gt; It is sad that HTML5 (the markup language!) is widely supposed to have something significant to do with graphics/audio/input APIs that are what makes gaming in a web browser possible. http://en.wikipedia.org/wiki/HTML5#New_APIs Canvas and Audio are kinda important for games. WebGL, Web Audio, and the Gamepad API aren't from the HTML5 spec, however. Same deal with things like Device Orientation and WebVR.
If you want to run it in a browser I suggest using a site like jsbin and just open the JavaScript and Console panel: http://jsbin.com/?js,console
brew update &amp;&amp; brew upgrade git
Dropping HTML Imports is kinda lame. They are very convenient during development. For deployment, you can use something like Polymer's vulcanize, which puts all dependencies (and their dependencies and so forth) into a single file. Kinda inconvenient, really. I hope they do at least get the other stuff properly working soon. For what it's worth, the Developer Edition seems to work quite a bit better. You can see and inspect the Shadow DOM there, but it's not yet marked as such. In the inspector, it looks just like the Light DOM. :host also doesn't work yet.
Thanks! Glad you like it :)
Planning to refactor those bits at some point (probably tomorrow.) The original version was me just hacking something together for work and those bits are all that's left of that :)
Isn't that exactly what happens when using tools like bower and npm?
Okay, understood. Won't post any further articles from the thoughtram blog.
Call and apply only work during execution. Use bind() instead.
or you could simply go to about:blank, open up the console (f12 on win), copy+paste your function and call it from there.
I think it was actually just because there was no space put in the numbers. I couldn't get your style to work there, but thanks anyway
You're splitting hairs. You can call it a "cycle", a tick, a turn in the event loop, or whatever. The spec still requires that the callback to a promises fulfillment is not called in the same tick/cycle/event loop turn as the one in which the promise is being resolved. Thus in a chain of promises only one can be resolved per tick/cycle/event loop turn. This is almost always a good thing though.
I think his point is that the most of the *rest* of the Web is built on free, open standards with free, open source software. It's disappointing to see mostly proprietary, closed source software in such a listicle.
Hi /u/sunjieming, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
&gt;I think his point is that the most of the rest of the Web is built on free, open standards with free, open source software Source?
And composer
+1
Option 2 leads to code that is hard to test. Option 1 is easier to adapt to new requirements, like if you suddenly decide to support the same contract as es5 Array.forEach, which passes on (item, i, array) as arguments.
If you're not sure which ones to watch you can quickly read this recap I wrote: http://rikschennink.nl/thoughts/fronteers-2014-recap/
yes, I realize that, I just didn't realize that divs treated non-spaced words like that. I never ran into an issue before
This is another common point of misunderstanding. Closure is the process of closing over a function at interpretation time so as to isolate one scope from another. To describe accessing references across scope boundaries the proper language is *used in closure*. This point is nitpicky though and doesn't matter to writing code in the language. For all I care closure is applied just the same either way.
I'm a bigger proponent of browser games than most, but I don't see those engines (or games of that scale) playing a big part in this for a while yet. Their minimum footprints are pretty huge (30MB+ for Unity, I'd guess Unreal would be similar.) I think that in order to get popular, it'll have to start with smaller, fast-loading games. So I think it's going to be Phaser, Three.js, Babylon.js, other web-specific engines and tools, and custom engines for a while yet. What I'm curious to see is if web-based engines &amp; tools can mature to the point where they're more attractive than the traditional big guys.
This is a little off, but ill bet you have somekind of text editor? Just write your javascript and build it straight in the editor (you haveto setup nodejs as a build system). Its very quick and easy for prototyping without a actual browser. (I use ST3 w. nodejs as my build) Just hit cmd-b and you see the result immediatly.
You can put in a bunch of [zero-width spaces](https://en.wikipedia.org/wiki/Zero-width_space), which will allow you to tell the browser where to break an overlong line - without leaving visible whitespace when it doesn't.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Zero-width space**](https://en.wikipedia.org/wiki/Zero-width%20space): [](#sfw) --- &gt; &gt;The __zero-width space__ (__ZWSP__) is a [non-printing character](https://en.wikipedia.org/wiki/Non-printing_character) used in computerized [typesetting](https://en.wikipedia.org/wiki/Typesetting) to indicate word boundaries to text processing systems when using scripts that do not use explicit spacing, or after characters (such as the [slash](https://en.wikipedia.org/wiki/Slash_(punctuation\))) that are not followed by a visible space but after which there may nevertheless be a line break. Normally, it is not a visible separation, but it may expand in passages that are [fully justified](https://en.wikipedia.org/wiki/Justification_(typesetting\)). &gt; --- ^Interesting: [^Thin ^space](https://en.wikipedia.org/wiki/Thin_space) ^| [^ISO ^14651](https://en.wikipedia.org/wiki/ISO_14651) ^| [^Zero-width ^non-joiner](https://en.wikipedia.org/wiki/Zero-width_non-joiner) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmzlir7) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmzlir7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is the problem, simply add: word-wrap: break-word; to your output div and that should give you your requested result.
Cheers, forgot to update brew :)
Long list of libraries that may help: http://microjs.com/#dom
 For homebrew OSX, brew update, brew upgrade git.
Doesn't relate if you just use GitHub as your repo handler, guess my company's safe :-)
how is it inconvenient if the polyfill works? You don't feel like adding one line of code to import the script?
Through your link I found https://github.com/KoryNunn/crel which is basically the same as Mithril's system. Thanks! :)
Interesting that you've heard of a niche library like Mithril but haven't heard of React.
You assume I use GitHub. I only use git. So, git client could mean the git executables, or it could mean some GitHub 'stuff', thus, I asked for clarification from people who might know better. Asshole.
I have. But it feels like it's heavier than what I actually need so I don't like it that much.
i wrote my own. syntax is like this: create.div({ classes: ['class1', 'class2'], content: create.a({ href: 'http://link.com', id: 'linkID', content: 'click', }), }); 
Link?
d3.js -- esp. since I use it for visualization anyway -- but the learning curve is a bit steep. I wrote a little data-driven form builder using d3: https://github.com/ericgj/d3-form (it's not really polished though). Also been keeping my eye on [tcomb-form](https://github.com/gcanti/tcomb-form). 
Safari is indeed brilliant
To be honest I'm not sure I'm new to Meteor myself, but Meteor comes with its own templating engine called SpaceBars, Meteor is starting to be viewed as more of a platform than a framework, like Rails is to Ruby. You can use a different templating engine if you want to but i don't see why you would as the syntax is great and reactive. 
To add to your explanation, here is a working (but not very practical) example using with: &lt;!-- ko with: contactLists --&gt; &lt;p data-bind="text: $data[0].title"&gt;&lt;/p&gt; &lt;p data-bind="text: $data[1].title"&gt;&lt;/p&gt; &lt;p data-bind="text: $data[2].title"&gt;&lt;/p&gt; &lt;!-- /ko --&gt; I was curious if it was possible to bind to an array index in with, and it is, but you have to use $data. If you remove $data, it won't work.
I thought AMD (and then CommonJS) had killed the module pattern? What's your use case?
Malicious NPM modules could have git dependencies.
Are you sure no other software on your company's systems is using git behind the scenes? Otherwise, no, it may still affect your company.
If you are referring to this: &gt;Updated versions of GitHub for Windows and GitHub for Mac are available for immediate download, and both contain the security fix on the Desktop application itself and on the bundled version of the Git command-line client. I did read TFA, but while it mentions fixing the git command line client, it does so via the GitHub desktop app. I don't use that so wasn't sure if it is related to some install of git via the GitHub app, or something else. That's why I was asking for some clarification. I do not use GitHub. If install a new unix executable from here: http://sourceforge.net/projects/git-osx-installer/files/ Will that solve this problem? It isn't clear from the git site that these images will fix the issue.
I would go with Handlebars too. Why doesn't it fit your needs? What are you trying to achieve?
Games made with Flash, Java, Silverlight, etc could all be described as "browser based games", but most people wouldn't call them "HTML5 games". But in today's world HTML/JS is not restricted to web browsers. I can package an HTML application as a browser app, a mobile app with Cordova, a desktop app with node-webkit, a smart tv app, etc. I can make a game with HTML that will run on almost any device as a native application. It wouldn't really be appropriate to call it a "browser" game if most of the users are playing it as a native iOS/Android app Sure, the native applications are technically just wrapping a web browser, but the "browser" part is kind of irrelevant if I'm only using it for its HTML renderer and JS engine. The user isn't doing any web browsing in my game; they're just playing a game which was developed using technologies defined in the HTML5 spec.
No reason at all. In fact, many projects use this form of "IIFE". Even browserify will use `.call` for bundles IIRC.
Games using SVG graphics as per the HTML5 spec are also HTML5 games. It doesn't really matter what specific tags you use - if your game is built around the HTML5 spec, it's an HTML5 game.
Why not just make one form and change the css per product?
No demo?
Heh. Unfortunately, that's not quite how that works. Would be nice if it would be, really. Find the polyfill, install Node, install Bower, download the polyfill, put it somewhere, include it, change your code to use the "WebComponentsReady" event, change your code to use `document._currentScript` instead of `document.currentScript`, and do whatever else I might have forgotten. If your project doesn't use Bower, updating that polyfill will be also a bit inconvenient. Anyhow, I don't think I'll use it. I'll just use Chrome for development. Viable option #2 is to use Polymer.
perhaps actually copying and pasting snippets of javascript?
Me too, I expected steps: * Google "how to do _____" * Click first stack overflow link * Go to first answer * Highlight code snippit of answer * Right click, click copy * Go back to notepad * Right click, click paste * See if it works, if not, go to the second answer
so you were expecting someone to write an article about how to use a pc copy paste native behaviour? Geez, this article is actually much more useful. Perhaps he could have titled it - "The Definitive Guide to Copying and Pasting WITH JavaScript" but i would hope most of the intelligent world would get what they mean
How pyramidey does that get if you're doing heavy nests?
Whats the usecase then? It generates super custom HTML every single time? It'd seem if it was that complicated that you couldn't use a template engine you'd be in absolute hell as far as making sure its valid HTML.
@Taurath I'm not sure if you are serious or no... I'm new to reddit, but I thought this is a subreddit for JavaScript developers :)
I know its close to christmas, but is everyone out of energy to power their sarcasm detector?
Just making a joke mate :P (to explain, and further kill the joke, its a common refrain that unskilled developers will blindly copy and paste code without knowing how it works). Interesting article - I'm curious as to how you're handling the HTML pasted in from other programs - do you run it through a bunch of sanitizers before allowing it to be saved? In-line CSS is especially vulnerable to code injection, which is why I've been veeery wary of promising full html rich text.
Ah good to know - thanks for the article!
I like [creationix/dombuilder](https://github.com/creationix/dombuilder) - does away with per-element cruft (one function call at the top), has Jade-like convenience syntax for classes/ids and syntax for holding onto named references to some of the elements it creates. And of course there's [JSXDOM](https://github.com/vjeux/jsxdom), because the syntactical pain of writing and later modifying deeply nested trees of function calls/objects is one of the main things [JSX](http://facebook.github.io/jsx/) fixes.
Would you be willing to put your Logger.js up on pastie, as much as is feasible without exposing something bad? I appreciate the help!
Each device will likely have a unique API. You will need to look for professional services documentation per each device you wish to access. You could try looking for this documentation on the manufacturer website, but it might just be easier to call them and have them mail it to you. There are some cases where the documentation might only be in Korean, Japanese, or Mandarin for devices that are not marketed internationally, but these are not common.
https://github.com/rackt/react-router/blob/master/UPGRADE_GUIDE.md#route-props-passed-to-handlers API changed in 0.11, you used to be able to do this. Two interesting dicussions on it [here](https://github.com/rackt/react-router/pull/314) and [here](https://github.com/rackt/react-router/issues/615).
Check out the [guide on their github page] (https://github.com/rackt/react-router/blob/master/docs/guides/overview.md). You can use named parameters when you create your routes or pass in props when you run your routes.
Awesome, thanks!
I use the slim preprocessing language :)
&lt;Handler yourProp="stuff" /&gt; Then pass them down to child handlers &lt;RouteHandler {...this.props}/&gt; 
Ben is unemployed
This is a bit OT, but: HTML5 localstorage won't help, because only the user that generated the data would be able to access it. The server needs this data so it can pass it on to the other clients. You'd need a database to keep track of the session IDs on the server side, in conjunction with a (different) session cookie to track each individual client (in PHP, you can use `$_SESSION` for this). MongoDB is absolutely the wrong tool for this -- MongoDB isn't a relational database, and *relating* data is exactly what you're trying to do. If you're newish to databases, I recommend trying MySQL/MariaDB or SQLite. If you're trying to send realtime data around to various clients, though, I'd look into ditching PHP and using something like [socket.io](http://socket.io/) in conjunction with a Nodejs server.
I blame QA
&lt;script type="text/template"&gt; lets you write the forms in straight html, and then you can use jQuery to select your template, html() to get the contents, then do some other kind of templating like jresig or lodash's .template() to customize, and then $() the string to have your dom elements. 
I know how to draw a line between two dots with pythagoras, but I do not know how to alter the enemy's direction to follow that line.
Idiomatic javascript is the `;(function(){})();` form, with the intention that you use the function parameters to explicitly supply the dependencies. So, the short answer is that you only get one "this" and its name has to be "this", and that could be a bad thing. 
Have you tried using Handlebars templates before? When I used them I was surprised at how much I could do (by integrating JavaScript logic in the template itself), my guess is you are underestimating Handlebar's power. You can do anything with Handlebars, the only limit is yourself.
Target x,y - enemy x,y will give you a delta x,y. Positive/negative values for delta x,y will determine the direction (left,right,down,up). Does that help?
Yes I have worked in terminal and have a few dependency issues with homebrew. I fixed a couple, though I am using macpython 2.5 for python using IDLE and so maybe the bash file needs to be altered? Or just move mac python to another directory? I didn't know Sublime text could interact with the command line. Cool! I'm going to learn to do that next.
You could simplify this with &lt;select data-bind="foreach: contactLists"&gt; &lt;option data-bind="text: title, value: $parent.id"&gt;&lt;/option&gt; &lt;/select&gt;
I recommend to use a 2D vector library. It makes these things a lot easier. Anyhow, without one it would look like this: // targete position var target = { x: 5, y: 7 }; // my position var position = { x: 9, y: 9 }; // subtract (= difference vector) var dx = target.x - position.x; var dy = target.y - position.y; // normalize (= direction vector) // (a direction vector has a length of 1) var length = Math.sqrt(dx * dx + dy * dy); if (length) { dx /= length; dy /= length; } // move // delta is the elapsed time in seconds // SPEED is the speed in units per second (UPS) position.x += dx * delta * SPEED; position.y += dy * delta * SPEED; **Edit:** If you want to make the enemy sprite face the player, use `Math.atan2` to determine the angle: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2
What's your use case for doing this?
Sometimes there is no QA. The smoke and functional tests by developers can find the errors too!
[Let's build a snowman...](http://m.youtube.com/watch?v=JQ1ZOFNBL68)
Feedback appreciated- check the github link inside for an example workflow.
This was amazing :D I entered the competition to do a site in 60 mins with 3 other random devs live over google hangouts and won. Our site was beyond terrible, but just good enough to beat the other team. Seriously, kudos to you guys.
OK, two things are happening here: 1) You are reassigning the prototype to a new instance of an object. This pattern is deprecated! (See [this](http://zeekat.nl/articles/constructors-considered-mildly-confusing.html)). Remember that prototypes are objects that new objects *inherit* from. So, after running your code: Woman.prototype = new Biped(); Woman.prototype instanceof Biped // true Let's take a step back for a second. Keep in mind that prototypes can be modified directly, so: var Foo = {}; Woman.prototype = Foo; (new Woman()).bar // undefined Foo.bar = "baz"; (new Woman()).bar // "baz" This brings us to: 2) Your `amputee` variable is in a closure. (Read up on closures [here](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work).) Woman.prototype = new Biped(); `Woman.prototype` is now an object that has two functions: `amputate` and `isAmputee`, both of which have access to the `amputee` variable (JavaScript has function scope). When you call `new Woman()`, the returned object still has its `prototype` referring to the same object that was returned by `new Biped()`, shown above. The following, then, becomes obvious: Woman.prototype = new Biped(); (new Woman()).amputate(); (new Woman()).isAmputee(); // true Woman.prototype = new Biped(); (new Woman()).isAmputee(); // false Hope that helps!
What happened here? I don't get it.
No. I am not splitting hairs, you simply don't know what you are talking about and think the spec says something it doesn't. It clearly says that while you MAY use ticks or event loop turns, YOU DON'T HAVE TO. "Since the promise implementation is considered platform code, it may itself contain a task-scheduling queue or “trampoline” in which the handlers are called." You can still have a perfectly compatible Promises A+ implementation while executing deferred actions before the next iteration of the event loop. The spec requires an empty call stack. It does not require any ticks or cycles or turns or whatever of the event loop.
I may not have explained myself clearly. There are two specific ways I would like to use the listing information. - One way would be with a device like a Tivo, or DirecTV receiver. Both of them have control drivers that give me some limited feedback like power status of the device, or current channel number. I don't get much beyond that because of the limitations of the current control drivers and/or the limitations of their APIs. However, if I know that someone is using a Tivo with Comcast or Verizon, and I know their zip code, and I know what channel they are watching from the feedback from the cable box, then I would like to be able to use that information to query a 3rd party using the zip code, content provider, and channel number to get additional feedback on what they're watching and the channel name. - Second way the driver would be useful is with a cable box where I have no bi-directional communication, like a plain old Comcast box. I wouldn't be able to tell what they're currently watching, but I would be able to provide them with a list of their favorite channels with information about what is currently on their favorite channels, and then have those buttons execute an IR macro to change the channel to what they would like to watch. I'll admit, having something like a Tivo give me direct feedback would be the easiest way, but I've spoken with them at our trade show, and as of right now they do not have an API that they're sharing with anyone but big players like Crestron. That's why I would like to know if there is any service that would allow me to query program info and channel names based on zip code, service provider, and channel number, and I was hoping someone here might have already done something along those lines so they could point me in the right direction.
&gt; Java Definitive Guide Sorry. I'm lost. I don't know what "Depth" is supposed to talk about, and I can't find a book called "Java Definitive Guide", and even if I did, I don't see how that would help with JavaScript. kthxbye
This is not correct. Functions are also passed by value and they're not primitives. It's simple. Objects and arrays are passed by reference. Everything else is passed by value. Edit: Actually I'm wrong about that. My mistake. It becomes clear when you do a simple test that attaches something to the function as if it's an object. var foo = function(){}; var bar = foo; foo.fn = function(){ console.log('Hello World'); }; bar.fn(); //Logs Hello World
In not sure why you've gotten so many down votes. Great article!
Awe they fixed it!
Yes, it's very cool to think that your whole program can operate and work with just a handful of objects in memory. Understanding how that works and knowing your program's memory footprint is satisfying.
As is the case with Java, everything is pass by value. However, with objects (as you have noted) it is a reference that is passed *by value*. This is why you cannot reassign the reference within a function body, but you may alter a property on the passed in object. See here for good discussion on this http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language
ok, I've been doing so much reading on such a wide variety of topics that I'm having some trouble connecting all the dots clearly in my head. That code you wrote above, is that essentially what things like Django and Flask were written to handle? or is this a separate topic entirely?
I've read up more on $_SESSION.... it seems that I could accomplish what I need perfectly fine with PHP and MySQL, correct? But what you're also saying is I could do it just as well, with the option to quickly implement live updating, using socket.io and an installation of Node.js? I'm new to socket.io and Node but did some reading on both, let me know if I'm misunderstanding.
my guess is the reason they didn't use this pattern was because .call and apply were not well supported?
&gt; That code you wrote above, is that essentially what things like Django and Flask were written to handle? More or less, yes. That block of code is a server in pure python; Django and Flask are designed to reduce the boilerplate by providing a framework for accomplishing the task of serving requests over HTTP.
Hah. Awesome. People like to say that ES6's classes are "just" syntactic sugar, but you won't have that kind of problem with classes. class Biped { constructor () { this.amputee = false; } amputate () { this.amputee = true; } isAmputee () { return this.amputee; } } class Woman extends Biped { } var mary = new Woman(); mary.amputate(); var sally = new Woman(); console.log('mary', mary.isAmputee()); // mary true console.log('sally', sally.isAmputee()); // sally false [Live demo](http://bit.ly/1sI6U9b)
This is strikingly similar to my own Flux implementation https://github.com/andrejewski/emf. The only places our code differs is in how we create classes, use the Dispatcher, and of course name. In EMF, classes are extended instead of using #create&lt;Class&gt;() methods. The Dispatcher is also extended to remove the need to deal with dispatch tokens. EMF does not entirely ditch the switch statements, but the event-method name style trigger is also used. Snapshots seem to be better handled with fux, but EMF does have a HistoryStore class which does something similar. I take heat for some of my project names, but I would consider changing this package's name. I can't talk to anyone IRL (or internet for that matter) about "fux." It is too close to "f*ckes."
At the very beginning, with all the concessions and odd talk about loosely typed languages, I was convinced that this article was going to be another rant by some silo'ed programmer from the early 2000's who had never had to work in more than one language in his life - and liked it that way. But i'll admit, he's come to all the same conclusions that other well-rounded coders have, and he understands the benefits of JS. It's not particularly informative, but if it helps a few siloed programmers out, then cheers to that.
Typically, prototypes are only useful for inheriting functions. Instance variables are typically undesirable unless you want the states to be share for all inherited objects. In your example, Sally and Mary both share the same prototype object Man which became an amputee at first call of the amputate() function. Joseph and Thomas create two separate new instances of Man which have different instance variables "amputees", they don't share the same prototype at all.
Agree, pretty good article. except the part about node-webkit. There's already a few (maybe 3-4) competing frameworks and node-webkit is one of the worst.
is anyone old enough to remember that site back in the mid 90s called 'cut-n-paste-javascript.com' or something to that effect. I used the shit out of that site. It was like Matt's Script Archive only for js.
in case you missed it https://twitter.com/jashkenas/status/546060104169435136
Right on. I originally set out to create a similar API with extends and with `getInitialState`, at one point I even had a `getState` method. I abandoned these ideas because 1) Extending means your state will be available in the instance directly. 2) getInitialState and setState are both very React-like and I wanted to be agnostic, plus setting properties on `this` felt more natural in the JS world. I still like the idea of getInitialState only because you can probably define a more rigid store and conform to it rather than set props as you go, after using this on several projects though I have no regrets on the way things have evolved. The syntax is inspired by reflux, which is what I was using before, but I wanted something with these specific properties. Thanks for the link, you got my star.
Ya. It's certainly less than 100% complete. How far did you get?
the blank page with disappearing spinners asking me to login to facebook.
Just realized I need to publish test account creds with these questions.
did you try it in chrome? it don't work so well in chrome. and i'm not about to login w/ facebook (even if i used that shit) to a site w/ no explanation as to why.
Not necessarily... It really depends on how ContactList is declared.... the following would make all the passed properties observable : function ContactList (props) { var self = this; Object.keys(props).forEach(function (prop) { self[prop] = ko.observable(props[prop]); }); }
&gt; Matt's Script Archive *Wow*, now that's a nostalgia trip. I don't think I have pulled up that site in 13+ years but it was invaluable back in the day.
I did. Latest chrome and IE on 8.1. Hmmm
yeah, and riddled with security holes too as was later revealed :)
Is the second example supposed to generate the output below? {} {} {} {} {} 
what are the others?
1) As you've said, the prototypes for built-ins change over time. It's entirely possible that Object#map or Array#shuffle could be added in the future, and your code would cause a conflict with newer JS engines. 2) Any method you were going to add to a prototype could just as easily be a standalone function. It's not any harder to write map(obj,fn) than it is to write obj.map(fn). 3) I don't know much about C#, but extension methods look like they have to be explicitly "used". In other words, they only apply to code that's expecting them. That's totally different than monkey patching a built-in type. If you're developing an app, you can probably get away with modifying built-in types. The main reason that's true, though, is because library authors generally consider the practice taboo. Best not to do it if you can help it.
there's a tv listing site with an api. i forget its name though. also, do you have any libraries loaded or just pure vanilla js.
i never touch existing prototypes that are there natively. I think its ok to add your own. But I usually have lodash loaded anyway because there's a lot of cool shit in there that makes coding a snap.
That was really helpful, but now for the dummest question of them all. I got "Hero" and "Enemy" as different constructors. How would I then make "target x," and "y", be the "x" and "y" coordinates of my Hero. (I would use your code as a function under "Enemy". Sory for being stupid, but I've noticed that google aren't allways your friend.
Basically what you've done here is set up a scoped variable -- amputee -- to a particular object -- biped. Each instantiation of a man is it's own biped, each with it's own amputee variable... However, when you create the woman object, each of them will have the same biped prototype -- which uses the same amputee variable. This might be a bit easier with a slightly less sexist example -- if you ensure that both Man and Woman are equal, each an object with the prototype of Biped. (also note the proper way to set up a prototype chain, using the parameter of `Object.create`) var Biped = function () { var amputee = false; this.amputate = function () { amputee = true; } this.isAmputee = function () { return amputee; } } var Man = Object.create(new Biped()); var Woman = Object.create(new Biped()); var humans = { mary: Object.create(Woman), sally: Object.create(Woman), lucy: Object.create(Woman), joseph: Object.create(Man), thomas: Object.create(Man), joe: Object.create(Man) }; var humanNames = Object.keys(humans); var idx = ~~(Math.random() * humanNames.length); // sugar for floor var poorSap = humanNames[idx]; console.log('amputating %s', poorSap); humans[poorSap].amputate(); humanNames.forEach(function(human) { console.log('Is %s an amputee? %s', human, humans[human].isAmputee()); }); If you execute this, you will see that once one member of a gender is amputated, all others share the same fate -- this is because the particular "Biped" object prototype, with it's private amputee variable, is shared across all of them. I don't believe there is a way to do private variables using prototypal inheritance without this side effect.... if you want this kind of privacy, use a module pattern -- and even then, the private variables will be shared if you set up multiple children with prototype pointing at the same object.
My use case is that I have a global application state in my top level component that needs to be passed to the child components as props. IN this case it's a collection of objects and a few filters to filter said collection. It's basically the [101 of React application architecture](http://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html) before Flux came around. The collection of objects is passed to the top level component. I don't see how I'd do that with being able to pass props.
Can you elaborate on that? I can pass props to the *Handler* when I mount the top level component? Like this? Router.run(routes, function (Handler) { React.render(&lt;Handler myprop={myval} /&gt;, document.body); }); How can I select which props I want to pass to my child components? They don't need the full application state from my top level component.
JavaScript is a terrible language, running in the right place. Don't throw the baby out with the bathwater. Strong typing, reusable libraries, compile time, DB transactions, data-binding beyond lists, non-DOM rendering concepts, true threads with mutable state... they'll all be re-invented in JS, sooner or later. The real benefit of JavaScript is not that it is a beautiful language - in fact it is a terrible one... but it runs on the client, which lets you store your state in memory, rather than serializing it through a dozen forms (cookies, headers, query string, etc) and sending it to the server each time. Intelligence at the edge is ultimately scalable, and JS is the way to get there. Don't use that as a justification for JS as a language.
I don't really seen the need for this, unless you're coding in Notepad.
http://jsfiddle.net/v8ojwaxd/1/ &gt; To me, it makes sense that when making a new object of type x with a prototype of "new y", a new y object gets created and the private variables in there are not being effected by what some other instance did. What actually happens with prototypes is that given `X`, whatever prototype it has, when you do `new X()`, the new object's prototype is pointed to `X.prototype`, not that a `new (X.prototype)()` is created. In some sort of non-valid pseudo-code you could think of it as (minus some stuff not relevant right now): operator new(f) { var newObject = {}; f.call(newObject); newObject.prototype = f.prototype; return newObject; } And it makes sense because that way all objects created with `new X` share the same prototype and you can actually build a prototype chain. If, on the other hand, each `new X` got a different prototype each time then you wouldn't actually share anything across *all `X`*.
In C#: * Extension methods don't modify existing types. They only *look* like they do. * Extension methods only affect the file in which you include them. * You can easily find out where the method was defined. None of the above are true of modifying prototypes in JavaScript. 
Here are some ideas: #### readme Some items are lacking in your readme file. - Browser support / requirements - License (I know there is a LICENSE file, but it does no harm mentioning at least which license it is) - Actual usage. You have documented the available functions, but nothing beats a 5-6 line snippet of code showing actual usage. - Demo. You could go a bit further that just including the code snippet by actually putting it you use in a full demo, however simple and small it is. Then put it online somewhere and put the link in the readme. You may think these things are secondary to code. From a pure [I maed dis](http://weknowmemes.com/2012/12/i-maed-dis/) perspective that may be correct and fine. But these things make the difference between *just throwing some code in Github* and *authoring an open source project*. #### code I have not looked at it in depth, but there are two things that immediately stand out (besides lack of tests and lack of demo, already mentioned). Both are pretty bad, imho. 1. You're throwing up the `selectEditorInput` function into the global name-space. You shouldn't do that. Create a local scope and confine your auxiliary functions in there. Only set as global the actual `scribly`. 2. The whole `localStorage` thing and `storeLocally` flag is really badly set up. You don't actually *opt-out of local storage all together* at all. What you actually do is always have the hard requirement of `localStorage` availability and usage but if `storeLocally` is set to `false` you will then *clean* the storage. This is bad because while you give the impression that this can work without `localStorage`, it actually won't work *at all* without it. Besides those two, you do have a fair amount of repetition which could be avoided easily. While not as serious as those two things, it would do the code much good to have a bit of cleaning and abstracting.
I wrote this: &gt; The spec still requires that the callback to a promises fulfillment is not called in the same tick/cycle/event loop turn as the one in which the promise is being resolved. We agree on that rigth? The spec states that quite clearly: &gt; In practice, this requirement ensures that onFulfilled and onRejected execute asynchronously, after the event loop turn in which then is called, and with a fresh stack. But the implementation can still execute all enqueued promises in between event loop turns? Is that you're point?
PHP/MySQL has its own trendy acronym for a reason! I was just suggesting that it might be easier to go with Socket -- really depends on the specifics of what you're trying to do. I'm not sure what's available these days with PHP. There might be a good websockets library in PHP-land you can use. You could DIY everything of course, but that would involve writing your own API endpoint on the server end and your own API consumer on the client end. Best to let someone else's library handle all that junk.
Still, I don't understand why you want to do this? Because you want to write javascript like you write C#? If you want to potentially break other libraries that your code is running with, then sure, do it. Or, you could just write a utility function instead.
Right, but even if I'm not around to maintain my app at that stage, it's still going to be using the the old version of jQuery that is compatible with my modified prototype. So it's really no issue
It's because I want to actually make use of a JavaScript feature, which is prototypical inheritance. If you don't modify existing prototypes you might as well be using classical inheritance, which is sort of missing the point of JavaScript
Until someone upgrades jQuery or adds another lib that depends on the native function, and the app breaks with no indication as to why. I've seen this happen numerous times. Just because you can doesn't mean you should.
So now your app is tied to an outdated version of a library. What happens when a massive bug is discovered in that older version, and jQuery issues a notice to upgrade immediately?
One thing you should look into are code conventions. These are small things, but help people read and understand the code better, and let them add code in the same "standard" style. Most importantly: Never use tabs for indentation. Other small things are: Don't put a space before colons in object literals (`storeLocally: true,`), do but a space between control statements and parentheses (`if (...)`).
I use prototypical inheritance all the time, in my own code. As many others have pointed out, when using it to overwrite core code you are doing it for all code you are running, not just your own. Sure this is fine as long as you run the project and you know, but if this is for paid work, then it's a horrible practice. 
Lol, it won't scroll on mobile. 
I like the ES6 classes based approach of EMF, especially since it's my understanding that React is moving towards using ES6 classes for Components. Having looked very briefly at both, I think EMF could benefit from adding the magic methods from FUX, such as a `Actor.generateActions` to mimic this: class LocationActions { constructor() { this.generateActions('updateLocation', 'updateCity', 'updateState', 'updateCountry'); } } and a `Store.bindActions` to mimic: class LocationStore { constructor() { this.bindActions(locationActions); } onUpdateCity(city) { this.city = city } onUpdateState(state) { this.state = state } } They should be fairly trivial to implement, especially since you can nick the code from FUX :-) I have [some pre-Flux code](http://new.belgingur.is/) that I'd like to re-architect before adding any more features and I might well use EMF for that and add More Magic via intermediate classes. 
This all seems a bit hypothetical, but I will concede that in that exact situation my app would break. But it depends on: 1. Me writing a prototype method, and then ECMA using that exact same name with the exact same prototype 2. The ECMA method behaving differently from my method (and if it's something like map() it likely will behave the same) 3. A library that I use making use of this new ECMA method in the future 4. A critical error occurring in the current version of this library so that I am forced to upgrade to a version of the library that uses the new method (and I know for sure jQuery doesn't use new methods within the same major version 1.XX, but they do release bugfixes) 5. Me not being around to fix this error even though I was around to update the library
Can't load any libraries, there are just a handful of functions that mostly relate to accessing the control system. I'd be doing everything through an http function
I'd definitely recommend using a tool like JSHint or ESLint to check the code on a regular basis. For simple stuff you can use the online checker at http://jshint.com/ . In addition to finding problems like your undeclared loop variable `i`, a lint checker can teach you a lot about JavaScript as you explore its options.
&gt; I figured it out Does that also go for the question you sent me? I can't tell from the timestamps. Anyhow, please use English identifiers. I only know English, German, and a little bit of Japanese. Your chosen identifiers mean nothing to me. Secondly, if you want to keep the formatting of your code intact, add a tab character or 4 spaces at the beginning of each line. Use your editor's block-indent for that. In most editors, you can just highlight several lines and indent them all with tab (and unindent with shift+tab). Just do this before you copy the code.
I have but one up vote to give. I'm looking forward to a change similar to the 2 to 3 jump in Python, to bring some sanity to the language. 
I'm not against the theory of adding to the base objects, but you can do it in a slightly smarter way to avoid the potential of future conflict. You can simply name it in a way that is less likely to conflict. Array.myShuffle(), fyShuffle() (for the fisher-yates), or nytShuffle() (namespaced), would accomplish the same goal, have close to 0 chance of future conflict, and would more clearly show that they are tacked on by you and not native.
I suppose I'm still searching for the reason JavaScript has prototypical inheritance. Within your own code there's really no need to modify existing prototypes because you made the prototypes in the first place. And if changing core prototypes is so wrong, then JavaScript should use classical inheritance to prevent the kinds of issues people are mentioning. Right? So why do people complain about the new ES6 `class` if it's just encouraging a good practice?
That sounds like quite a good compromise. Thank you!
Thanks for the feedback! Ill provide one with my next commit to the README.
Thanks for replying! I'll look into these tools for showing tests provide it when I update the README.
Thanks for your constructive criticism. I didn't notice most of these as issues last night, but now I see that it would be much better if I condensed it down and took out the unnecessary functions.
Do you know why there won't be an Array.prototype.contains and String.prototype.contains functions in ES6? Because fucking MooTools added a contains function to the String's prototype. It's incompatible. That's why ES6 had to go with "includes" instead of "contains". Otherwise, it would break all those websites which use MooTools. Don't modify objects you don't own. http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/
Thank you for the feedback, and for going a more in depth about the local storage issue. That is a pretty misleading claim now that I see it that way. I'm glad I posted here so that I could get this kind of objective view of things. Much appreciated!
&gt; This all seems a bit hypothetical Well, it's not. Some of my code broke because someone overwrote methods of built-ins. Specifically, it was an old version of the Prototype library which blindly overwrote Array.prototype.unshift with its own broken implementation. Also, crap like this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#String.prototype.contains
&gt; I want to actually make use of a JavaScript feature You shouldn't use a feature just because it exists. It's nice for polyfills, but that's about it. It has very limited uses just like `goto` in C. This isn't like C#'s extension methods. It's dumb unrestricted monkey-patching which affects everyone's code on the page.
Still need help with making an If-statement. Is this more readible? function start(){ player = new Hero(300, 150); //the player enemy = []; for(var i = 0; i &lt; 20; i++){enemy.push(new Monster(random(200), random(200)))} //spawns enemies if(keyboard.space){bullet = new Shoot(hero.x, hero.y)} // That if-statement is suppost to draw out a ball that flies off with an acceleration. Does not work. } function update(){ clearScreen(); player.draw(); //the draw function player.move(); //the moving function bullet.rita(); // the draw function, "function does not exist error" bullet.move(); //the moving funtion, same error as above. //How do I make it work? for(var i = 0; i&lt;20; i++) { enemy[i].draw(); //keep all enemies getting drawn enemy[i].move(); //makes the enemies follow the player } } 
You need a list for the bullets. Each bullet has a position (x, y) and a direction (dx, dy). When you fire a bullet, a bullet with the right x, y, dx, and dy values is created and added to the list. In each step of your "simulation", you move the bullets and check if they hit something or left the screen. In both cases they are removed from the list. The drawing part just draws what's there. It iterates over all the bullets and all the enemies and just draws them at their current location. Note that removing things from a list while iterating over it only works if you iterate in reverse and if removing it is the last thing you do in the loop. When you remove an item from a list, everything that follows is moved by 1, which means you'd skip the next item if you were to iterate in the usual forward direction. If you got an hour to spare, watch this talk: [Google I/O 2011: Super Browser 2 Turbo HD Remix: Introduction to HTML5 Game Development](https://www.youtube.com/watch?v=yEocRtn_j9s) It covers all of the basics.
Thanks, man. Just to clarify, EMF doesn't use `setState`. After `getInitialState()`, state can be accessed through `this.state` with plain JS (though also Immutable if you want). Initial state made sense to me because I was bootstrapping each store on page load and also wanted to integrate immutables from the beginning. I was inspired by the barebones Flux package, so it's weird how close we landed on implementation.
Right, C# extension methods are little more than syntactic sugar for the following: myObj.someExtensionMethod("foo", 42) =&gt; SomeStaticClass.someExtensionMethod(myObj, "foo", 42) You could do something very similar to the second in JS to achieve the same effect. 
I am going to check it out when I get home, thanks a lot for the help!
I am going to check it out when I get home, thanks a lot for the help!
Note to the op: Do what makes you happy. Don't give in to the holy war of tabs vs. spaces. If you want to use tabs for your project, do it. If you have to be on a project where the author has to use spaces, grin and bear it. Space for indentation annoy the crap out of me because I can't set my preferred spacing in my editor and it's annoying when I open up an opinionated devs 2 space indented code and have to read into a pyramid to figure out what's going on. I also hate that github still uses 8 space tabs. Indentation is a personal preference. Just be glad you don't have a language that makes it significant.
How many fux?
Checking works if you polyfill. It doesn't work if you add your own stuff. That's the problem with MooTools. Its "contains" function works differently. That's why the standard(!) can't add it. It would break many existing sites.
A lot of plugins provide a clean way to extend their functionality without making modifications to the core, jQuery's fn.extend is a good example of that http://api.jquery.com/jquery.fn.extend/ That said, not every library can be extended in such a fashion, and sometimes changes must be made internally to solve some problem. Usually the way I go about this is to fork the library's repository on GitHub, and commit any modifications on the fork. Then include that fork into your larger project using a [git submodule ](http://git-scm.com/docs/git-submodule). This allows you to manage the fork independently of your larger project, create patches, merge in changes from the parent repo, etc.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Action at a distance (computer programming)**](https://en.wikipedia.org/wiki/Action%20at%20a%20distance%20%28computer%20programming%29): [](#sfw) --- &gt; &gt;In computer science, __action at a distance__ is an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern) (a recognized common error) in which behavior in one part of a [program](https://en.wikipedia.org/wiki/Computer_program) varies wildly based on difficult or impossible to identify [operations](https://en.wikipedia.org/wiki/Instruction_(computer_science\)) in another part of the program. The way to avoid the problems associated with action at a distance are a proper design, which avoids [global variables](https://en.wikipedia.org/wiki/Global_variable) and alters data in a controlled and [local](https://en.wikipedia.org/wiki/Subprogram#Local_variables.2C_recursion_and_reentrancy) manner, or usage of a [pure](https://en.wikipedia.org/wiki/Purely_functional) [functional programming](https://en.wikipedia.org/wiki/Functional_programming) style with [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency_(computer_science\)). &gt;The term is based on the concept of [action at a distance](https://en.wikipedia.org/wiki/Action_at_a_distance) in physics, which may refer to a process that allows objects to interact without a mediator particle such as the [gluon](https://en.wikipedia.org/wiki/Gluon). In particular, [Albert Einstein](https://en.wikipedia.org/wiki/Albert_Einstein) referred to this effect in [quantum mechanics](https://en.wikipedia.org/wiki/Quantum_mechanics) as "[spooky action at a distance](https://en.wikipedia.org/wiki/Spooky_action_at_a_distance)". &gt;[Software bugs](https://en.wikipedia.org/wiki/Software_bug) due to "action at a distance" may arise because a program component is doing something at the wrong time, or affecting something it should not. It is very difficult, however, to track down which component is responsible. Side effects from innocent actions can put the program in an unknown state, so local data is not necessarily local. The solution in this particular scenario is to define which components should be interacting with which others. A proper design that accurately defines the interface between parts of a program, and that avoids shared states, can largely eliminate problems caused by action at a distance. &gt; --- ^Interesting: [^Action ^at ^a ^distance](https://en.wikipedia.org/wiki/Action_at_a_distance) ^| [^Parallel ^computing](https://en.wikipedia.org/wiki/Parallel_computing) ^| [^PC ^game](https://en.wikipedia.org/wiki/PC_game) ^| [^Variable ^\(computer ^science)](https://en.wikipedia.org/wiki/Variable_\(computer_science\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cn0kc5k) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cn0kc5k)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I'm curious how many javascript programmers know facts like this. I interviewed for a job a few years ago, and they gave me a quiz that asked questions like… Does !!1=="1" return true or false? I consider myself a pretty good javascript programmer, and I could make a reasoned guess, but I really didn't know the answer for sure. So it really came down to a 50/50 chance… the same odds of someone who doesn't even know what JavaScript is.
A really big reason not to modify builtins: inter-op with other code. Imagine if two libraries both add a `Array.prototype.contains` but implement it differently. Only one would succeed. 
You can find lots of these using a linter. For example, you can see these same warning pasting your code into http://jshint.com/ I have my editor, Sublime Text 2, set up to lint on every save with JSHint Gutter. It's also very common for established projects to require code to pass JSHint tests, usually checked via Grunt or Gulp.
Yeah, I was a little disappointed that this project looked so good but turned out pretty useless. Thanks for your help, but these solutions look like half-baked hacks to me. ReactRouter seems to completely break React's main premise, i.e. uni-directional data flow from parents to children via props. Isn't that right? Where would the application state live with ReactRouter?
off topic: what is your flair?
Your code has zero comments. Even in school that would immediately result in an F. https://github.com/KinmanCovey/scribly/blob/master/src/scribly.js
I've been meaning to check it out, but we've been using Grunt in our toolchain for a while. Thanks for reminding me. 
Imo setting up your tools is a small investment with a huge ROI. Once you know your way around something like this, you can automate most of your tedious tasks and focus on building awesome stuff. The example is just linting, but you can do ftp deployments, pre-processing, testing- you should give it a shot
&gt; So it really came down to a 50/50 chance… the same odds of someone who doesn't even know what JavaScript is. Actually, that's not really the case. If you know JavaScript, you can still get most of the points. E.g. you could say that == coerces the types. You could say that "!!" turns a truthy value into true and a falsy value into false. You could also say that you didn't memorize the coercion tables since you're always using === and !==, because that makes the code a lot easier to understand and because it helps to identify some mistakes. You could then ask if they are using == and != and if they are using a linter. Anyhow, I also didn't bother to memorize those tables. To me, this is a bug: &gt; '2' == true+true true This kind of crap should never show up in human-written production code. If a minifier replaces `true` with `!0`, sure, whatever, but that's not something a human being should write.
Order of operators !!1=="1" ! ( ! ( 1 ) ) == "1" ! ( false ) == "1" true == "1" true !!2=="2" ! ( ! ( 2 ) ) == "2" ! ( false ) == "2" true == "2" false If you're expecting: !! (1 == "1") /* true */ !! (2 == "2") /* true */ I must ask why the !! cause == returns a boolean anyway
In a world of bower, npm and automated builds... not everyone gets semver right. It's pretty foolish to use a third party library with no tests, it WILL bite you. This project may be small, but the next one might not be. If the OP wants to learn something, even one thing, this is it. OSS *needs* tests.
Do you use codekit or something along those lines? This is the same idea, but a little more extendable. 
I agree 100%. Not having tests defeats the entire point of open source- the author might know his 118 lines by memory, but there's a good chance that someone submitting a PR for a new feature isn't going to hand-test every inch of code. Even if they did, it's now a 128 line project, and the next dev comes around- it's a scalability issue. 
Yeah, there's a balance to be had for sure. 
That's the spirit! 
I'd like to say.... What QA? This was obviously a direct push to prod.
im also a fan of jscs- mostly because it forces you to adopt a consistent style
&gt; Not having tests defeats the entire point of open source- The importance of unit tests do not legitimate absurd statements like this. I understand your point, but this way of advocating unit tests does more evil than good by putting the focus on the existence of unit tests rather than the quality and code coverage. And the 'point' of open-source is far greater than, and unrelated to, unit tests.
I do agree that OP should learn to use unit tests, and use that knowledge in both this and future projects. That is an excellent idea.
It comes down to "booleans are first converted to numbers when doing type converting comparisons", which apparently seemed like a good idea at the time. http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3
What does SASS, git merge conflicts and wordpress have to do with javascript?
Coding style is something defined by the author for each project and is not inherited by the platform used. Of course there are some JavaScript-specific conventions but whether to use tabs or spaces is not one of them. It's completely up to *you*. If you want to, check out [EditorConfig](http://editorconfig.org/). It defines the format of a file that you can add to your project where you define editor settings (tabs vs. spaces, indent size, etc.) so that people who contribute to your project and have the plugin installed will automatically have their text editor configured to use your project's style. It's quite popular and used by a lot of projects. If you want to enforce a specific coding style (like whether to use single or double quotes and much more) you can add a `.jshintrc` file to your project so that others can have their contributions checked against your style definitions. It also helps you check your own code and complains when you forget semicolons, for example. Check out [JSHint](http://jshint.com/docs/). The defaults are pretty sane already.
This is why I just use === all the time.
Pointless. If you ever wrote that code you should immediately quit your job. 
Needs a test suite. How do I know if it actually works?
http://shop.oreilly.com/product/mobile/9780596517748.do JavaScript The Good Parts is a fantastic book. Shows what not to do and why.
It may be worth looking into https://github.com/mozilla/localForage It would add a dependency, but it's a great little library which greatly improves local storage by using IndexedDB or WebSQL if availaible
Here's the correct answer. == will use type conversion under the hood, while === will not. http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.1 Here are the rules that come at play in this scenario: * If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. * If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y). t2t2 almost had it right, here's how it goes (fast-forwarding to where the LHS and RHS have been evaluated independently): !!1 == "1": * true == "1" * 1 == "1" * 1 == 1 * true !!2 == "2": * true == "2" * 1 == "2" * 1 == 2 * false
You are making assumptions that just aren't true. You're right, some people may be using questions like that to bring up things to talk about, but the two interviews I went on recently where I got questions like that, that wasn't the case. The first one had a similar fringe case question about PHP on a written test, when going over the test afterword and we got to that question, I prefaced it with, "I really didn't know this one, so I took my best guess", to which he responded, "Well, you guessed wrong". I tried to push for an explanation and was told that "I really should know that". The second interview was full of trick questions and questions about random javascript factoids, but I think the tone of the interview was summed up best when he told me that one of my side projects was "wrong" because I had chosen not to add a "Log in with Facebook" button and then lectured about why node was better than PHP for a while. You're right, maybe there is a legitimate reason for asking this question, but in my experience, interviewers usually have a limited amount of time and want to know how you will fit into the position. Additionally, there are a ton of better questions, in my mind, for sparking discussion than asking semi-trick question about a language. It just seems to me that if an interviewer is asking a question like this, it should be because you are running into something like this on a fairly regular basis, or because you've been in the interview long enough to exhaust all non fringe case interview questions. I've never been in either one of those scenarios.
What is incorrect is that the spec has any requirements about how you have to use the tick/cycle/event loop. That is simply an implementation detail. For example, there are three common ways that non native promises are implemented: 1) setTimeout - the problem with this is that setTimeout is slow. It's slow because the browser will often introduce a minimum delay when using setTimeout, so in certain browsers you might see something like a forced 4ms delay between a promise getting resolved and then executing if you were using setTimeout. 2) setImmediate - it's not a standard at this time, but supported by node and some browsers. Basic idea was to give a better alternative to setTimeout(...,0). It still queues a task on the standard event loop though, so despite the name execution might not actually be immediate if there is some IO going on. 3) MutationObservers - For Mutation Observers, there was a new concept introduced into the javascript runtime called the "microtask queue". The difference with the microtask queue is that all the tasks in the microtask queue must execute before yielding to the main event loop queue (or macrotask queue). See an example here in bluebird (https://github.com/petkaantonov/bluebird/blob/master/src/schedule.js). If you schedule a million microtasks, they are all going to run before anything you schedule with setImmediate. The importance difference here and why microtasks are useful is that if you queue a microtask and then inside the microtask you queue another microtask, that microtask is also going to execute before the next full turn of the main event loop. So there you have 3 common patterns that are valid for implementing non native promises, only 2 of which require a full turn of the event loop every time a promise is being resolved. Should the browser introduce other ways to queue work that don't require full event loop turns, you'd also be free to use them. Native promises are also free to do their own thing and could do something entirely different if they needed to. Promise implementations have a lot of freedom to decide what they want to do to. There are no explicit requirements about how promises need to interact with the event loop in the spec.
Yes, thank you! And if I ever read that in a codebase I'd quit my job. This is as bad as writing var x = true + 7; (probably worse)
Thank you for replying to my post and providing your criticism. While I do agree about the importance of comments, at my current level in my Computer Science studies, comments seem to have become less important while descriptive variable and function names have become more important. I will eventually comment the code completely once I get a build I am happy with. For now I will stick to trying to explain my code using my code.
This is the best argument I've heard so far. Reasons like updated frameworks or other people improving your code don't matter if you're the sole maintainer of your work and you can adapt as necessary to newer features in whatever frameworks you may be using, but you can't control JavaScript's features.
Reliable, and as demonstrably free of bugs (as possible).
no. my point is that any decent text editor or IDE has code folding, which makes it easy to manage larger files. Also, grunt jobs need virtually no configuration once set up. It's not worth the hassle, IMO.
[Relevant quiz.](http://davidshariff.com/js-quiz/)
I usually have a setup like this for whatever build system I'm using. Far easier to share common configuration across projects this way. It does break things into multiple files, so you can't see all the configuration in one place, but as long as the context of each module is isolated and well defined, I never feel like that's a problem. Good post.
This setup isn't about reducing the amount of code in one file, it's about breaking common configuration out into reusable components. Now all you have to do to add configuration for some task is drop a file in a directory, rather than having to either edit one large config file to add configuration you've done 100x before. The amount of hassle with a setup like this is virtually nil.
My first reaction at reading that was irritation and disgust, cause typically people who ask questions like that are trying to ego trip. But then I thought about it: Did they phrase the question like that? Or was it phrased as "what does this do: !!1=="1". Phrasing it the way you described is pointless. Knowing what this evaluates to isn't important for a couple reasons: The first is that you'll rarely ever see something like this in the wild, so knowing it offhand only communicates that the interviewee knows an arcane expression (big deal, can you solve real problems?) The second is that it's trivial to open up a console and see what it evaluates to at any time. Asking what this expression does is much more interesting because it forces you to work out what you know about JavaScript to try to find a solution. When I'm interviewing, I don't care if they know the answer to this offhand. I'm much more interested in seeing how they arrive to their answer because that provides not just insight into what they know about JavaScript, but also their critical thinking and problem solving processes.
Your explanation isn't clear in the !!2 == "2" case though. Both of those are truthy, but that expression is false. Hence the Stack Overflow answer.
It doesn't sound like it was an interview question, but a question on a quiz that was part of the recruitment process, so not necessarily something to talk about.
Ummm seriously don't use this "library". You never need regular expressions to parse a url. Create an anchor element. Set its src to your url. Now you have access to all the parts of the url because the browser automatically breaks it out for you. To parse the search, just split the anchor.search by '&amp;' then iterate, and for each split by '='. Make another object that you can store the key value pairs, and you're done. 
Honestly, I don't remember the exact questions they asked or how they were phrased. It was years ago. There were a bunch of them, and I just remember the questions required a pre-understanding of odd pieces of code that I would never use in production (like !!1 == "1") .
I've been pretty happy with 6to5 (which has some benefits over traceur) and its browserify transform. You could just use beefy + tape when testing client side code. Or you could use a test runner like [prova](https://www.npmjs.com/package/prova). Example of es6 in node/browserify: https://gist.github.com/mattdesl/56718c3c9820e1935398
Thanks for the suggestion! I ran my code through JSHint and fixed the errors it pointed out. What a cool tool.
To build on top of that, "1" doesn't == true just because it's truthy. Otherwise !!2 == "2" would be true as well. To understand that you have to remember that 1 is the only number that's not just truthy, but also *[abstractly equal](http://ecma-international.org/ecma-262/5.1/#sec-11.9.3)* to true. This is because when comparing a boolean with another type using ==, js converts the boolean to a number (false as 0, true as 1) and then sees if the two values still equal each other. In other words, abstract equality is a really weird idea and strict equality is much better at keeping you sane.
Although if they just overwrote it rather than checking, it would have been fine.
Yeah, I used a little too blunt of a point, thanks for bringing me back to reality. It's certainly not the point of open source, but I think it's one of the most powerful tools you can use. I just get a little twitchy when I think about managing a project even with three or four other anonymous people on the internet, let alone something the size of jQuery without testing. It's just a good habit to get into.
just one is given, MIT licensed.
its pretty sweet.
Then it's a terrible server. You should convert the values to their real type as soon as you get them.
Joke's on you, that's always false on CofeeScript.
You are definitely right about that!
It's always QA's fault, no matter what.
don't do math w/ js
Heh. No, it wouldn't. Reason being, there is usually some other stuff running on that page, too. E.g. some 3rd party widgets, ads, analytics, and things like that. E.g. some old version of the Prototype library blindly overwrote Array.prototype.unshift. This broke my perfectly valid code on those websites which used that particular version of Prototype.
&gt; comments seem to have become less important while descriptive variable and function names have become more important They should beat you with a stick for repeating this nonsense. Code tells you *how*. Comments tell you *why*. For example, how am I supposed to know what **inputType** parameter to your methods is? Is it an object, an integer, a DOM element, a string?
I see your point now. I was minutes away from committing changes to the source code too. I will take this sort of commenting into consideration.
&gt;Things often get serialized to strings from the server to the frontend and may not always be deserialized to native values. Then the bug is in the serialization, not equality. I never use the "==" comparison, which tends to just complicate things and create bugs due to type coercion.
I did not know that true gets converted to 1 in a double equals comparison and I have been doing JavaScript for years.
What do the logs look like if you POST it? User/pass is usually in a post request. 
Answering my own question. HTTP GET requests don't have form data. jquery will format the information appropriately in a HTTP POST request (`type: 'POST'`).
You nailed it. Thanks!
&gt; talk about You're also assuming whoever asked the question wants to talk about it. In my experience those sorts of questions aren't for talking about. There are so many things that are more productive in an interview than asking random questions about coercion.
There is only two correct answer to that question: "I would use git blame and start yelling with the person who wrote this", the other answer is "I would not use the monstrosity, as it makes no sense, so, i don't know, but i don't have to, i can enter that command to the interpreter and i get an answer in about 16 milliseconds."
Wow, I'm impressed that a small confusion inspired you to write an entire article, and a good one :) On the original confusion, I've had enough time to realize that the article that I had submitted should've been titled something like "The Definitive Guide to *Clipboard Access* in JavaScript", but I still believe that if one pays attention, they will find the difference in meaning between the following two phrases: "Copying and Pasting IN JavaScript" and "Copying and Pasting JavaScript". English is not my mother tongue though, so I might be totally wrong. Again, great writeup on "borrowing code" that you did! Cheers :)
No, it's fine! I really liked your article - I've had an application that I've been fiddling with for a while now that really works best with access to the clipboard, and working out the best way to implement that is hard, and there isn't much good stuff out there to help, so your guide was definitely helpful. Probably overkill for that particular need, but useful to keep in mind for the future.
!!2 == Boolean("2")
&gt; It's just like Facebook mom, can you see it? +1
Hi /u/manzzup, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `manzzup.blogspot.com`. Thanks for your consideration!
logic and js don't go well together.
I just deployed a web app, in which I use "!!". I am, however, not even a junior developer. I'm still programming as a hobby. so I'm blaming it on inexperience and it being my first app :) the senior developers did point out that "!!" was unnecessary but I forgot to change it. and my employment at that company ended two days ago... oh well, practice makes perfect. 
Just curious... Why would something like !!1=="1" ever show up in the real world?
 &gt; !!new Boolean(false) true &gt; !!new Number(0) true &gt; !!new String('') true Having primitives and wrappers was a bad idea.
I understand where you are coming from, but I think calling this pointless is simply missing the real point. This is a puzzle/riddle/exercise to showcase one of many nuances in JavaScript type conversion and logical expressions, and you are inevitably going to run into some similar nuance eventually. If you got it wrong, and any part of the explanation is news to you, I would hope you at least care a little to understand something you didn't know. Have you ever tried to test if a variable in JavaScript is a number? [It's probably not as easy as you think it is](http://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric), and there are a *lot* of answers to this question, many of them bad answers from people who fail to completely grasp type conversions in JavaScript. This individual case is probably not realistic, but it exhibits a logical (forgive the pun) issue in JavaScript on a general topic that is valuable to understand. I'm definitely not an advocate for puzzles in interviews if that's where you're getting at, but understanding even part of this problem is valuable to a team. If that's not your bag, I understand, but calling this exercise pointless is definitely arguable.
bro do you event lint?
I hate code criticism as much as the next person, if you cant handle this level of commenting and feel the need to fight it tooth and nail, don't work for a large company. They are heavy about process and excessive "correctness" 
http://egghead.io
An example from my own career: jQuery does not support binary file uploads through its ajax method. The problem is one line in an unnamed callback function buried in another function that's about a hundred lines long. If the original function was broken out in such a way that allowed for easily overwriting that portion of code in a class that extended jQuery, I would've gladly taken it. Instead, I patched the jQuery source. I'm not happy about it. It's nothing I recommend. Maybe one day jQuery will support binary file uploads, I mean its just one line to fix!
I totally agree. Also it seems really slow, I did something as simple as rendering a sprite and giving it acceleration and there was a drop in frame rate. It's really nice that it does all of the physics and collision for you but it definitely seems to come at a price.
Anyone who asks this in an interview has seriously no clue how to interview, and shows their massive lack of understanding of what makes a good developer.
Exactly, my answer would be: "One: I don't commit to memory things I can test in the console in 1 second. Two: I don't write code with double, triple or quadruple negatives in front of variables. That's idiotic, or do you not, not, not, not, not, not, not understand that?"
I need to repeat that no one is saying to write code like this example, it is simply an example of how JavaScript works, like part of a text or reference book. Insisting it will never exist doesn't acknowledge that the question itself has a valid purpose, unless your response is just maintaining that you don't care--which is fine, you don't have to, but you felt strongly enough to assert its pointlessness, so I think you should acknowledge the counterpoint if you're going to respond. If you shift the focus to maintainable code in an interview that brings up a question like this, isn't writing code that passes all possible tests part of maintainability? Did you look at the [isNumeric example](http://stackoverflow.com/questions/18082/validate-decimal-numbers-in-javascript-isnumeric)? That's a real example of a strange JavaScript nuance and it definitely matters why it works. Is your answer to this question simply to use jQuery's isNumeric() because it's a solved problem? You don't care why it works because it does, and jQuery is a trustworthy source? I'm genuinely curious what you think about that. If I asked you how this works, could you explain it, and would you care to? I generally agree with the "screw puzzles in an interview" philosophy. I prefer production code examples, and nothing on-the-spot/under duress. I have said before that these sort of riddles have no bearing on my ability to develop apps, but as I strive to build better apps outside of jQuery, I'm coming across these nuances on a daily basis, and these exercises look more like daily exercises in my ability and knowledge, and less like pompous hypothetical challenges. EDIT: Failed ninja
Because Javascript has a brain damaged type system.
&gt; I don't write code with double, triple or quadruple negatives in front of variables `!!x` is a legitimate and common technique for explicitly casting a variable to a boolean. Normally, you would see it in cases where you are comparing with another boolean variable or assigning a boolean to another variable. if (!!x === y) { ... } or y = !!x; 
Repeated post.
order of operations. !!1 resolves to true, and == does a truthy check on the other comparator .. "1" is a special case where 1, "1" and true all resolve to true. "2" is not the same. !!(2 == "2") resolves to true because 2 == "2" is "truthy" !!(1 == "1") resolves to true because 1 == "1" is also truthy.
True, but much more often, some bozo did write this code and did quit their job. Unfortunately, now it's your job and you've got 70,000 lines of this nonsense to turn into something readable and elegant. I'd personally love it if I was being interviewed for a job and they gave me some small examples of their existing code to refactor as an interview test. It would let them know I'm capable of reading other people's code, and can distinguish between the good and the crap, and if what they pull out of svn to show me is a horror show, it lets me know to run for the door and not look back no matter how much money they offer ;-)
&gt;non-primitive objects There are primitives and objects. It's one or the other.
new Boolean(false) is not the same as Boolean(false). You're creating an object, and doing a check against that, so it's saying "Yes, Object is not null or undefined", then doing the double negate on it. val1 = new Boolean(false); val2 = Boolean(false); #val2 is a primitive while val1 is an object containing a primitive. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean Relevant lines include: &gt; Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. &gt; Any object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. and &gt; Do not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task and &gt; Do not use a Boolean object in place of a Boolean primitive.
Thanks for the suggestion. I'll definitely check this out.
Eh, it's not as bad as people might think. Under the hood, javascript treats !!val the exact same way as Boolean(val). So while it is slightly more confusing to read, it's certainly an acceptable shortcut to cast a non bool value as a bool in 7 less key strokes.
I'm aware of that. That's why I said that primitives and wrappers were a bad idea. This is something JS copied from Java without having a good reason for doing so. Dart, for example, is perfectly fine without primitives.
It wouldn't. The only times I see code like this is when someone who has learned to code in a "correct" language is taking a stab at the silly toy languages of JavaScript and PHP by not willfully not using the correct operators and proving using "logic" that those languages are silly. 99.9% of these are based on the fact that == equals === compared to most other languages, and that absolutely everyone in real life uses === and that relying on the implicit casting features has been considered bad form for at least a decade.
So why mention it? I'm saying !!2 is the same as Boolean("2"), and when you know that, it becomes more clear as to why Boolean("2") != "2". But since Boolean("2") is not the same as new Boolean("2") (as one is creating a primitive and the other is creating an object), it seems odd to randomly mention the downfalls of something I wasn't discussing in the first place. I mean... we can discus the problems of having an Object and a Primitive in a language to represent the same data, or the performance benefits of Primitives vs Objects, but that's not entirely relevant to the discussion about why !!2 != "2".
The same reason !!0=="0" equals true 
`var HandWave = function(` There's really no good reason to do this.
`===` fixes that.
.....*and*...that's why you shouldn't use coffeescript.
Yes, much better. I'm just not a fan of adding fixed stuff to broken stuff. It just turns the whole language into a minefield.
I cannot see why you would want to avoid this. If I have control over the codebase and use modules, I would rather have the access to state. Mocking and testing are so much easier this way. Since it's a class there is no reason you couldn't override the constructor to hide state.
Actually, there are lots of benefits to asking about odd behaviors in a language during an interview. If they happen to know that behavior, then great. But more often, they won't, and it will give you a chance to see how the interviewee thinks. Do they panic and clam up? Do they guess an answer? Do they inquire about more details? Do they talk it through the steps that they do know? Do they complain about how it's a bad question? Questions aren't necessarily about determining knowledge and skill set, but about getting insight into the thought process when problem solving.
&gt; This is a quirk? Yes, as I mentioned, having primitives and wrappers doesn't really serve any purpose in JavaScript. It only adds some quirky behavior. It doesn't improve anything whatsoever. &gt; typeof new String() "object" &gt; typeof 'adsf' "string" &gt; new String() instanceof String true &gt; 'asdf' instanceof String false &gt; String.prototype.whatAmI = function () { return typeof this; }; 'asdf'.whatAmI(); "object" The last one is actually `(new String('asdf')).whatAmI();`. It's auto-boxed. That's why it does what it does. Same thing in Dart: print('asdf'.runtimeType); // String print('asdf' is String); // true The end.
By "remove the bind", you mean you have `setTimeout(this.declare(), 5000)`?
Did you write "this.declare()" instead? Well, if you are calling that function yourself, it will of course execute right away. Anyhow, put a testcase on jsfiddle (or whatever) next time.
setTimeout(this.declare(this), 5000)
6to5 is awesome. I recommend something like this: https://github.com/6to5/6to5-mocha Then in your test files, load your **un-transpiled** app files for testing. 
function LateBloomer() { this.petalCount = Math.ceil(Math.random() * 12) + 1; } LateBloomer.prototype.bloom = function() { setTimeout(this.declare(this), 5000); }; LateBloomer.prototype.declare = function() { console.log('I am a beautiful flower with ' + this.petalCount + ' petals!'); }; var test = new LateBloomer(); test.bloom();
Oh, I see what you're saying now. Thank you
&gt; setTimeout(this.declare(this), 5000); You are calling the declare function and then you pass the result to setTimeout. You aren't passing this function to setTimeout. `Function.prototype.bind` does return a new function. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
Of course it serves a purpose. Primitives exist for performance's sake, and the Object exist, as I said before, to house the utility methods for the primitives. Because the Object is being misused for something it wasn't designed for, it's behaving exactly as I'd expect it to, which is to default to implicit type conversion. And relying on implicit type conversions is as painful as poking yourself in the eye. Neither is necessary, so stop doing it :p I'd also like to bring up the fact that we should probably just be using more proper OO techniques like the visitor pattern or something instead of using things like instanceof in the first place for anything remotely production quality.... but now we're getting wildly beyond the original !!2 != "2" question at hand.
` document.getElementById("login-button").onclick = "floatdiv_unload" ` try referencing a function rather than a string.
Still cannot set property onclick of null.
roger that :) 
I'd recommend doing the binding of `declare` within the `LateBloomer` constructor (such that the `declare` function is no longer being rebound every single time we're calling the `bloom` function, only one time in the construction of each `LateBloomer`). function LateBloomer () { this.petalCount = Math.ceil(Math.random()*12) + 1; this.declare = this.declare.bind(this); } LateBloomer.prototype.bloom = function () { setTimeout(this.declare, 2000); return this; }; LateBloomer.prototype.declare = function () { console.log('I am a beautiful flower with ' + this.petalCount + ' petals!'); return this; }; (new LateBloomer).bloom(); Also the methods now return `this` thus making them chainable ;)
yeah that won't work. you need to use dom methods to create nodes. i would recommend you use jquery for this. makes it much easier.
i don't get it. what does it do?
document.getElementById("login-button").addEventListener("click", floatdiv_unload)
&gt; document.getElementById("login-button").addEventListener("click", floatdiv_unload) Cannot read property "addEventListener" of null. 
Do you have a source that primitives in javascript do not perform better than their object counterparts? I find it hard to believe that the associated memory footprint of an Object doesn't have an impact on performance, especially when considering the size of a Boolean primitive is 4 bytes, while an Object with no payload is 8 bytes in javascript.
Providing an object-like interface to the user doesn't mean that you have to use the same one-size-fits all implementation under the hood. V8, for example, doesn't actually use double for all numbers. It uses smi, int32, and double. It collects some range feedback and then it tries to find the best representation. The Dart VM does similar things. If you do some math it doesn't actually create all those objects. The semantics of the language and the things the engine actually does are two separate things. The VM can take any shortcuts it want and you'll be none the wiser. As long as the semantics are preserved, it can do whatever it wants. https://www.dartlang.org/articles/numeric-computation/ http://www.infoq.com/presentations/dart-compiler ([slides](http://s3.mrale.ph/StrangeLoop2013.pdf))
Not sure if it matters, but it wasn't an in-person question. It was a test I was given online after an initial phone interview to I guess test basic technical understanding before the in-person technical interview. So I could have even looked up the answers. It wasn't any place that I could have elaborated on my answers.
You mean where is the actual code? http://pastebin.com/czBX7Gsm
O the contrary, in CoffeeScript all == are translated to ===, the JavaScript convention. There is no === in CoffeeScript. 
And.. there's your problem. Your button isn't id 'login-button'... it has a CLASS of 'login-button', but no id as such.
....and that's why you shouldn't use coffeescript.
Let's learn to read some error messages: &gt; "Cannot set property 'onclick' of null" When you get an error message that mentions `null` or `undefined`, first thing you should think of is not "Why can't I set the property?" (or equivalent question), but "Where does that `null` come from?". In this case it's pretty clear: document.getElementById("login-button").onclick = ...; The *thing* you're trying to set its `onclick` property to something is: document.getElementById("login-button") So, the conclusion we get is that `document.getElementById("login-button")` is `null`, and that is where your error comes from. Now, this one is pretty easy. `document.getElementById("login-button")`. You're looking for an element with **id** `"login-button"` and you get `null` back ,so that means there is no element with such an id. Reading the HTML we see that this is indeed the case. You have this: &lt;div class="nav-btn-r login-button" onclick="floatdiv_load()"&gt;Login&lt;/div&gt; but you probably meant to do this: &lt;div class="nav-btn-r" id="login-button" onclick="floatdiv_load()"&gt;Login&lt;/div&gt; 
 Boolean(x) is more explicit. !!x is a relic from the pre-C99 era (no boolean type).
Yep! I did think as I was writing it "I really need to check that JS does integer division in the same way as Java, because I'm quite sure it doesn't". Then I completely forgot. In Java `floor` isn't needed because the numbers are all integers in the first place, so you'll always get an integer result. In JavaScript that's not the case - which is a good thing, but confusing when you're transcribing code late at night...
Because man should inherit from woman biologically, unless you're using biblical inheritance. &lt;/facetious&gt;
I haven't gotten around to using node-webkit/atom-shell. Can you elaborate why node-webkit is one of the worst?
I avoided it because it goes against the spirit of flux to be able to directly manipulate a store. Stores are supposed to only change in response to actions. From a store's level you can still provide a way to retrieve the state without allowing mutation.
What if you were writing a minifier or a language which transcompiles to JavaScript? Knowing these things could be valuable in optimizing the output. What if you are debugging a legacy code base that's poorly written, wouldn't it be helpful to know these idiosyncrasies? I agree it's not very important to know, but I wouldn't say pointless, you're not always going to be working with perfect code.
[!!x is faster](http://jsperf.com/double-negative-vs-boolean).
It's not just the addition of Math.floor(). These were all the changes I had to make just to make that code work: * Capitalise String.prototype * Handle the (times === 1) case and ensure that its result was cast to a string. (This wasn't handled by the Java code either, so it wouldn't work) * Change calls to repeat(this+this, ...) to (this+this).repeat(...) * Math.floor(times / 2) when times is an odd number. * Added curly braces. (Not essential, but made the code easier to work with). Several of those changes also need to be made to the other repeatStr functions you gave, in addition to changing several occurrences of `this` to `str`.
This is how you should extend objects and inherit methods: http://jsfiddle.net/v8ojwaxd/2/ (updated your jsfiddle)
It is bad advice, the problem is explaining *why* it's bad advice. Now, in particular, as the meme as spread so far that few people even remember the original justification; they just "know" that it's "bad". With things the way they are now, where do you even begin? I certainly can't compress an explanation down to one suitable for a forum post. (It wouldn't it be an appropriate place to offer one anyway.) I figure all anyone can do is wait until this old meme dies a natural death as developers gain experience with languages like JS.
Yes, it's faster because *!* has his own opcode while *Boolean* must be treated like any function object due to javascript's dynamic properties. We could argue that !! is more explicit for the compiler while Boolean() is more explicit for the programmer (subjective interpretation). An example with Mozilla's Spidermonkey where the function function bool() { var x = "string"; var z = !!x; var y = Boolean(x); } generates the following opcode //var x = "string"; 00000: string "string" 00005: setlocal 0 00009: pop //var z = !!x; 00010: getlocal 0 00014: not 00015: not 00016: setlocal 1 00020: pop // var y = Boolean(x); 00021: getgname "Boolean" 00026: undefined 00027: getlocal 0 00031: call 1 00034: setlocal 2 00038: pop 00039: retrval Implementation of the opcode not: http://hg.mozilla.org/mozilla-central/file/3a1dcd04ea02/js/src/vm/Interpreter.cpp#l2218 Implementation of Boolean(): http://hg.mozilla.org/mozilla-central/file/3a1dcd04ea02/js/src/jsbool.cpp#l118 Implementation of ToBoolean: http://hg.mozilla.org/mozilla-central/file/3a1dcd04ea02/js/src/jsapi.h#l1134
We don't use and systems based outside of GitHub.
I think that is just as bad. First of, who codes anything with a double !. Pretty sure that code would be refactored straight away. Second, what is it meant to do other than basically waste your time and send you off to hunt for some obscure answer and reason why. The more people snub these pointless interview questions and make the companies and interviewer feel stupid for even asking them, the sooner there will be some actual, meaningful interviews. End rant.
Excellent response. "Teach a person to fish", and all that.
http://beats.meteor.com/room/cRnKmCxaJWBFx3DQH
I went and created a [Github Gist](https://gist.github.com/pigeontech/9ec184ec1d06736a857e) with some of the info in this thread. Maybe others will find it useful. With a bunch of other examples, it's easier to see a pattern.
Thanks, that helped me to figure out how to have ReactRouter cooperator with me. It works, but apparently it's not really meant for my use case. 
sweet beat. hoping to implement a "save" functionality next for better sharing
I've been programming for few months starting off with professional JavaScript for web developers, and it covered one this in quite some detail! 
I case anyone wants to compare to the official SDK: http://aws.amazon.com/sdk-for-browser/
I interview people often. I want to know the steps the person is taking in their head to get to the solutions, not so much just if they know the answer. Do they weigh other solutions, why did they choose those one?
Don't know at what point you saw it but someone has completed changed it from what I did lol.
You really should give a bit more information of what you need help with. However, I'd be willing to help out if have any problems.
What you want is page navigation via AJAX. There's lots of resources out there for this. Just google the phrases: "jquery ajax page navigation" or something like that. jQuery can do this very easily: http://api.jquery.com/load/
ty
Very cool! Needs more cowbell though.
I would actually love to be proven wrong about that. I would love to know of a use case for that sort of thing.
I ask similar questions in my Js/front end interviews - not this specifically, but questions to see if candidates understand things like why to use === and scenarios like this (kinda) come up of course. I'm surprised how many JS dev candidates, even "senior" level, don't know about truthy values, or even what === does compared to ==. I had one *senior level* JS candidate tell me that === doesn't exist in JS and it's a trick question.
To be fair, a decent number of people use !!x as an idiomatic way to cast to boolean instead of Boolean(x). You can argue that the conciseness comes at too high of a readability cost but I don't think it is that bad honestly once you've seen it a couple of times. I've seen it used even in fairly high profile libraries like Underscore before. I'd guess most browsers will optimize it to the same assembly as well... But I agree with everything else. Knowing the arcane order of casting operations in JS isn't very useful, especially compared to things like knowledge of closures and how to structure code effectively.
I'm sad that there's no step about deciding whether or not a license permits you to use the code. If permitted, you should always provide attribution or acknowledge that someone else wrote the code.
What do you need help with, specifically?
Interesting - thanks. So the background is i teach law students how to automate documents using HotDocs. HotDocs is programming in the sense that it runs scripts and has a syntax all its own, but for my own betterment, I wanted to automate a document from scratch (eg ask site visitors a series of questions to determine eligibility and, if eligible, to produce a simple legal form with their answers). Think jsPDF is the right tool for this?
'source' link no worky! +1 for meteor though :)
Expected it to work on mobile. Oh well 
I have done this as well. Just write a directive that calls jquery. It takes a while to used to writing directives but they work great!
http://beats.meteor.com/room/Z7sSsiFsokS4PXBdP
Good catch! will fix that as soon as I can. Until then, source for those interested: http://github.com/yoavz/beatbox
I'd recommend you use the [Angular UI team's UI-Grid](http://ui-grid.info/). 
Pretty neat! Two suggestions. The link should keep the tempo, and triplets would be awesome! http://beats.meteor.com/room/4QbzesTagpauXhDkH http://beats.meteor.com/room/PnNX7nvpLGo4sCh7H EDIT: Also, maybe "read only" rooms, so you can share one without people being able to change it? Someone went and muted all of my tracks, which is no fun!
Ooh, I've been meaning to build something just like this for months. Guess I can cross it off the list now. :) Great work. Love the ability to have phrases of different lengths. Looking forward to seeing where you go with it!
&gt; compared to things like knowledge of closures and how to structure code effectively Well, you've put it much more eloquently than I. This is what I was trying to express with snarkitude. I would rather have my developer show this kind of detailed knowledge about JS security vulnerabilities, code reuse and modularity, testing best practices, and proper communication with databases. Casting booleans would be very low on the totem pole. I feel like tests like this are just copying some vague notion of what they think Google would do, without really understanding why.
Pegjs is the current standard. You will have to improve on it to get usage. I recommend that you use their syntax. What we really need is the ability to push and pop state so that can parse grammars with context. Specifically we should be able to cleanly parse indented grammars. That would make your parser state of the art. Heres the issue on Pegjs. https://github.com/pegjs/pegjs/issues/217
So awesome Edit: your repo looks broken though, you shouldn't have gitignored .meteor folder, it has all the metadata
Agreed. Thank you for your reply, very much appreciated and I commend you for pointing out something so simple which I didn't even see.
Fair enough, just don't do it in production code. ;)
No, I refer to this: &gt; A [critical Git security vulnerability has been announced today](http://article.gmane.org/gmane.linux.kernel/1853266) [..] and this: &gt; The Git core team [has announced maintenance releases](https://www.kernel.org/pub/software/scm/git/) for all current versions of Git [..] and this: &gt; More details on the vulnerability can be found in the [official Git mailing list announcement](http://article.gmane.org/gmane.linux.kernel/1853266) [..] as well as the numerous times the article refers to "Git" as something separate from the GitHub clients and services. The updated GitHub clients are only provided because they provide bundled copies of git. Note how all of the links point to sites related to git but not related to GitHub. So, yes, it's git itself that has the vulnerability. And, yes, you should update your local installation of git. Whether the URL you refer to provides a reliable updated version for OSX I have no idea. It says it's official and seems somewhat reputable, so I guess it might be. I can't tell you as I don't use OSX.
I code with double ! in javascipt, I think it's pretty common.
serious vulnerability disclosed on reddit, bouh !
This might be too hardcore for the job depending what OP is going to do with it. I would suggest using [ng-Table](http://bazalt-cms.com/ng-table/example/1) if you don't need too much.
http://beats.meteor.com/room/vg2963snF6QHu2LYC
[ChartJS](http://www.chartjs.org/) [DyGraphs](http://dygraphs.com/) [Easy Pie Chart](http://rendro.github.io/easy-pie-chart/) [Flot](http://www.flotcharts.org/) [Knob](http://anthonyterrien.com/knob/) [MorrisJS](http://morrisjs.github.io/morris.js/) [Kendo UI](http://www.telerik.com/kendo-ui) [jVectorMap](http://jvectormap.com/) can be useful too
I used it for typecasting. I made a $.post() to a php-script and got "1" in return if I remember correctly(on phone atm, can't check source). I found out that "!!" convert my "1" to 1, so I was happy and left it at that. can get back to you with more details, and source, if you'd like. 
Yeah, all of the rooms are collaborative and not read-only, so whoever views it can change it to what they want. 
I admit, that yield feature is gonna be quite handy!
Disagree. What are you suggesting here? Hungarian notation? Leaving a time capsule describing what type the parameter happens to be at the time?
I've used Highcharts quite significantly and quite like it.
Glad to see what is on the roadmap going forward, though I wish they wouldn't be so cavalier with breaking changes. Things like that hurt adoption of the framework.
Odds are that datatable is doing DOM manipulation that's conflicting with Angular's directives. You're either going to need to write a wrapper to present the table info in a different manner, work the calls to datatable into your existing angular code (such as call the update after success of an AJAX call), or look for another plugin.
definitely needs a read-only, but awesome nonetheless
If you wrote a step-by-step tutorial, describing how to build this webapp, I'd read the shit out of it. And if it was on a blog, I'd follow that blog.
I too am a huge fan of Highcharts. They have a fairly solid support team, and their APIs are documented very well. But most import, the charts are extremely pleasing to look at! :) My only complaint with using Highcharts is anything beyond pet projects requires a license that is pretty steeply priced.
Gonna be? Why not use it today? https://6to5.org/
Hard to say without seeing all of your code. If you inspect the element, is it set to display:block but have zero height? Try setting height to auto, or a fixed size if you know it. Same for width if width is zero. Could also be a parent element that has overflow set to hidden. Really hard to say without seeing the rest of the code or a working example.
Will other instruments be added?
So I changed it, I am showing all my code. The parent element has "&lt;div id ="ineditortxt" style="display: block"&gt;
Nope. Just a stylesheet. 
That "@@iterator" thing (22:30) was replaced with "Symbol.iterator". Here is the example with Chrome 40: &gt; var iterator = [42, 39][Symbol.iterator]() &gt; console.log(iterator.next()) Object {value: 42, done: false} &gt; console.log(iterator.next()) Object {value: 39, done: false} &gt; console.log(iterator.next()) Object {value: undefined, done: true} Interestingly, Chrome logs "value: undefined" for the last one. In his example, the "value" property was omitted. Dart recently got async/await (hidden behind a flag). That stuff really helps. Another ES7-ish feature I'm looking forward to is [SIMD](https://github.com/johnmccutchan/ecmascript_simd). See also: http://kangax.github.io/compat-table/es7/
Other than allowing your 'private' functions to have access to your class variables, I don't understand the motivation for this. Node already has a module paradigm via module.exports. 
Your _isListEmpty helper references 'this', but it is not called in a way for it to have a context. Since its trying to act on a list object it should probably be a member function itself. If I might make a suggestion, rather than trying to encapsulate only the prototype in your self calling function, why not encapsulate the entire class? My personal preference is for this style: var Animal = (function() { var helper = function(thing) { return "" + thing + " val"; }; function Animal(name) { this.name = name; } Animal.prototype.doSomething = function() { return helper(this.name); }; return Animal; })(); 
I'm sorry what? It's not a 'meme' to prefer === over ==. "A rule of thumb" is not the same as "you will _always_ do it this way". You should _prefer_ === over ==, which is to say that you should write your code with === by default and then switch back to == if you have a good reason for doing so. The reason this advice has spread so far and wide is because == creates all sorts of subtle bugs that new programmers (and even experienced programmers new to JS) stumble into and then have no idea where to even begin with debugging. It is perfectly fine to use type coercion, but you should have a reason for doing so that is much better than 'because I use == in other programming language and had no idea that it was different in javascript'.
@@iterator is Symbol.iterator. @@iterator is the spec convention used to refer to well-known symbols. Some (maybe all?) well-known symbols are also stored as named properties on the Symbol object. In other words, the value of Symbol.iterator is @@iterator.
I feel like you are still missing the point. inputType, tag, these are both terrible names. You should not have to read the whole anything to figure out the type and meaning of a local function argument. If you need to do this, your functions are too large, or they have too many external concerns. 
I think the "@@" part is just a convention in the spec to refer to a well-known symbol value. You can't just say "Symbol.iterator" in the spec. You could say something like `Get(Get(global, "Symbol"), "iterator")` but this is pretty verbose. There is another convention for prototypes, eg. %GeneratorPrototype% is the value of Generator.prototype.
d3
The === 1 case isn't actually needed because when n is 1 this: } else { return this + (this + this).repeat(Math.floor(times / 2)); } is this + (this+this).repeat(0) -&gt; this + "" From a 'function composition' point of view its probably better to have the cases out as 0, 1, even, odd, but it does technically work without the 1 case. Cheers :) 
Yea, anyhow, in actual code it's `Symbol.iterator`. `"@@iterator"` (string) currently still works in Firefox, but that's non-standard. `@@iterator` never worked.
I solved it by passing 'this' into my private methods that needed reference to the object. Is that a bad practice or something? Thanks, I'm still learning.
Thanks, CaptainBlase - I took your advice, but needed to keep the ***&lt;!-- ko with: data --&gt;*** tags. Still, it's simpler, which I like!
I have tried pegjs and jison before writing this library. The syntax and feature is directly inspired by those. For the push and pop state in the parser I thought about it for indented grammar as it was my original goal to create such a language. Then I found out I could just create special tokens during the tokenizer phase https://github.com/batiste/EPEG.js/blob/master/index.html#L181 This technic seems to work quite well and seems to fix the context problem in a rather simple way. Any reason this is not sufficient? Really the big difference right now is support for left recursion which enable you to write your grammar more intuitively.
this
Hi! The link you've posted for the "jerk" is no longer working. I'm on the original Moto G and been trying to figure out what to do with the Cardboard. I've managed to figure out where the magnet is, and its kind of working now. Though, of course, the lack of gyroscope is the main problem :(
also, you are publishing the id of every single room in the universe. That's why the page load is slower and slower every time. Just publish the requested id.
i think you can do that in node. i remember something about process next tick.
http://nodejs.org/api/process.html#process_process_nexttick_callback
How on earth can you simulate generators without generators (in ES5). I thought the entire concept of pausing then resuming a function was impossible before ES6?
Check out the bottom of the page - "Input", "Output" http://facebook.github.io/regenerator/
this stuff is already currently possible, however there's drawbacks like hard to understand code, and speed. With the new specs, it will be implemented at a lower level and be much faster.
Ah. A giant switch case encompassing every possible point the function could be paused. Elegant. ^it's ^^still ^^^pretty ^^^^clever ^^^^^though
Just because something doesn't work as you think it should doesn't mean it is wrong. You shouldn't use a hammer to work a screw. Using a getter to trigger your console.log would probably solve your problem better than the "wait;".
I would be very interested in seeing the performance though. I'm too busy to search for it right now ^okay ^^I ^^lied ^^^I'm ^^^just ^^^^too ^^^^lazy 
One method I investivated was Java 6u10+ LiveConnect. http://www.sitepoint.com/connect-java-to-javascript-with-liveconnect/ **Pros:** * It seems to have cross-browser support and works on almost every major browser. * Requires only the installation of a signed/trusted plugin to work, and the signing of an applet of an embedded applet of my own. * Trusted access allows direct file access through java. **Cons:** * Java has been on the out for web-based content for years. The number of websites that require java installation for the client are extremely few. I've seen surveys report less than 0.2% of sites surveyed reporting a need for Java to be installed. * I cannot find a listing of where this module is supported on mobile devices, and what browser versions do/do not support it, so I cannot know ahead of time whether this is a sane investment of effort. * It requires me to dust off my Java knowledge, which has been soundly shelved for a decade now. * I'd have to install the JDK, so that I can have yet another god damned icon blinking at me every three days about necessary updates and security risks.
I like d3. Not chart specific but nice
I think https://trello.com/ is pretty well done, it works great real time.
Could your users not save to the cloud? 
The second method I've investigated is HTML5's FileAPI for persistent storage, rather than local file system access. This method is definitely not viable. The reasons why: **Pros:** * Allows local storage **Cons:** * Only supported in webkit. * Doesn't allow the user to specify a sandbox location; everything in the persistent storage cache. * Must request permission for more quota every time the limit is reached by the user.
Pipe operators (back and forward) are available in LiveScript as well : http://livescript.net/#operators-piping
If the map editor is online, why not use a traditional database to store the levels in? Users can then quickly share their creations with the community or between apps, etc. I understand you're trying to solve problem X, but perhaps you might want to re-think the fact that files are saved locally at all. If this is not an option, then you can just use LocalStorage, which can hold about 5mb IIRC.
A good read! A little short for my liking, I was just getting into the swing of it and it ended. Will be *very* interested to read anymore that may be published.
Didn't know it was real time, i only use it for myself. That's pretty cool.
The real-time thing makes it shine when working in groups! :-) It's also nice if you like me love tabs, then you always look at the correct data.
JavaScript isn't allowed for obvious reasons. A malicious moderator could do stuff like steal user sessions or redirect to a phishing site. 
Yeah, its one of the best features imho of LiveScript.
I find Promises to be the best way to deal with async operations, but for sure, something like that could be usefull.
Definitely makes it more competitive against my trello clone ;). For the rails rumble, i started on a trello+journaling combo. The idea is you can kind of devlog &amp; tag issues as you work on your side projects. Mostly doing it for myself and to learn ReactJS
You can check out my realtime web app project - http://itsgonnarain.net - a realtime weather app in AngularJS. Updates rain detection every 10 minutes and weather and webcams update every 30 minutes. 
Here's some ideas to start with: * Store the "cool" names in an array * Use `indexOf` to see if the name is in the array * Redirect as appropriate Look into jQuery as an easy way to wire up HTML form elements with custom JS code. jQuery also has some array helper methods if you want to go that route.
Well in a naive and simple case like you just described, sure, it's very easy to just wrap the call in an if statement guarding it from being required inside Node. Except that what happens when you load the rest of the code that requires Page? Wrap up all that stuff in if statements too. Great now your code looks awful and is hard to reasonable about because you're branching everywhere. Branching logic sucks. I've done it for browser extensions (Chrome and Firefox) to make them work in both, and it was a nightmare, do not recommend. I've also written a library that is isomorphic (Backbone LayoutManager), and found a similar issue with jQuery. We ended up using Cheerio under the hood, but for anyone making their own custom constructors, they would still need to `require('jquery')` on the server, or always use `Backbone.$` - which would be the cheerio instance we loaded. I think its a toss up, the memory footprint of these tiny libraries and frameworks is relatively small and I'd be more worried about the footprint of nested dependencies from random modules you're pulling in to craft your server-side.
I think Highcharts takes the cake. I do not think D3 is the way to go for charts. Changes to charts with D3 require *coding*, whereas changes to charts with Highcharts requires *configuraiton*. Highcharts covers all the edge cases you'll run into out of the box. Other libraries will not. You will *especially* be writing custom code for edge cases wtih D3. That's been my experience using both at two different web app. shops now.
One of the awesome aspects of web programming is that there are a million and one ways to solve any problem. Unfortunately this also makes it hard to learn and get started. What you've described would commonly be referred to as "form validation", because it involves getting user input in a web form and then validating that input with javascript. If you google for form validation tutorials you should be able to find some easy to follow guides to get you started. Best of luck!
This actually changes in a significant way in ES7. This is equivalent to what you wrote: (async function() { var e = await athing.someAsyncCallback(); console.log('We got a response!...', e); })(); You can use transpiliers like [6-to-5](https://6to5.org/index.html) to have this today. There's also promises, which are becoming more popular than callbacks to avoid things like "the pyramid of doom". athing.someAsyncCallback().then(e =&gt; console.log('we got a response!...', e); Between the two I just don't see a place for your `wait` keyword to be that useful. :)
Definitely consider checking out the video linked at the end for more on this topic. In general I have about 5-6 more Marionette posts planned for the next month or so.
I came in here prepared to explain to you why you were wrong about whatever it was that bothered you but ... I agree with you. I think that Javascript's asynchronous behavior is _awesome_ and its perfect for most client and server problem sets. _But_ Javascript should also support other models, including the one you described. There are definitely problems that aren't well suited to javascript's async model.
Not to nitpick, but I thought the optimal method was to set the length variable outside of the loop entirely? Something like this: ''' var i, len = arr.length for (i = 0; i &lt; len; i++) { //some looping stuff } ''' That way the length doesn't need to be "grabbed" every time around. I could be wrong though...
Can you name a few situations where even the ES7-style async/await or promises won't be well-suited to asynchronous execution? Just curious. 
How long will this book be free for? Should I be writing a script to scrape it?
&gt; LocalStorage, which can hold about 5mb IIRC. LocalStorage is definitely not an option. Unfortunately, LocalStorage doesn't do binary data, so the storage sizes balloon like crazy. Tilemaps get pretty sizable. Not only that, but I store javascript code directly in the maps themselves for single-use object behaviors. I doubt very much that I'll actually hit 5mb of data for my project, but having a 5mb limit hanging over my head for offline storage is simply something I want to avoid. I think I'd be better served by IndexedDB for offline session storage, although it's only got partial support in IE and Opera, which for that I would probably wind up using WebSQL as a fallback. This is why I'm asking this specific question: The offline fallback is the only way to get around dealing with: **Storage Limits:** *IndexedDB:* * Firefox: unlimited; popup after 50Mb temporary * Firefox mobile: unlimited; popup after 5Mb temporary * Chrome&amp;mobile: virtually unlimited; popup after 5Mb temporary; popup for permanent storage * Interbutt Exploder 10/11: default-limit 250Mb; limit 999Mb; popup after 10Mb silent failure after default-limit *Web SQL:* * Safari: popup after 5, 10, 50, 100, 500Mb, etc intervals * Safari mobile: 50Mb limit; popup after 5Mb * Android browser: 200Mb * iOs WebView: 50Mb &gt; I understand you're trying to solve problem X, but perhaps you might want to re-think the fact that files are saved locally at all. Unfortunately, that's just not how this app is going to be distributed. This application is accessible through the web and offline. I think I have a method of doing this that will work, though... I'll detail it in a second post because this one's getting over-long.
It would be funny if you did that in javascript.
You're correct, V8 does optimise this, and the difference is negliable. These days, even while (i--) has little difference. I'd advise you just use lodash and never worry about loop performance—it's so unlikely to be the bottle neck in your program.
Your `div.innerHTML =` line has a string over a few lines. That's a syntax error in JavaScript, so your whole script will bail. You could bring the whole string on to one line, or 'split your string' + 'in to separate strings' + 'concatenated across multiple lines'; Your script should at least run that way, and you'll start getting errors in your browser's developer tools. From here, there are some great resources in /r/LearnJavaScript 's sidebar that I think will help you a lot.
Just found some new information out: Chrome's FileSystem permits installed applications to access the local filestructure provided the manifest permissions are set properly. http://www.developer.com/lang/reading-and-writing-files-in-chrome-installed-applications.html This gets me access to what I need from Chrome. This, unfortunately, isn't available in any other browser and it looks like nobody else is going to implement it any time soon. Further, installed chrome apps don't seem to work offline. I could be wrong about that. Information on this method is spotty at best. Some sites claim it can't save to the local disk, while others claim it can. There's a firefox competitor to this, but it's nowhere near as close to ready as Google's variant.
There's also `@@construct` for referring to constructors in the spec, even though constructors are never implemented as such. Firefox presumably supports `@@iterator` as a property name because es6 iterables were implemented before Symbols (and thus before `Symbol.iterator`)
Nice - but I think that should be curl -O?
yep or pipe it to a file using &gt;. I didn't actually test that but it should work
For the record, I definitely prefer being able to define the grammar in javascript code as opposed to having to write and then compile a separate `.peg` file. It makes development and testing so much simpler. Also I'm assuming the fact that this can handle left recursion means that it won't fall into an infinite loop quite so easily... PEGjs' web compiler has locked up my browser on many occasions. Keep doing what you're doing OP.
When you say V8 optimizes this, you mean the first option is faster, or that V8 makes the second option look like the first?
Those other error you'll see in the devtools: 1. **On lines 16 and 21:** `getElementbyId` should be `getElementById` (case of all letters matter) 2. **On lines 16 and 21:** `appendPlayers`/`removePlayer` should be `appendChild`/`removeChild` (it's a built-in methods in JavaScript to deal with HTML elements) 3. **On line 19:** `function removePlayer()` should be `function removePlayer(div)` (you are not passing the element to this function, so it won't know what player to remove) This code's approach is bad in general. It doesn't matter that much when it's a small piece like this, but if you want to become a professional programmer — try to find other solutions to this problem and compare them.
Thanks for the hints! 
http://ge.tt is my favourite
Mind sharing?
I'm aware of the process.nextTick, the point of this is it would pause the current call stack and let the event loop run anything it needed then resume the call stack. next tick just executes a callback with a fresh new stack on the next tick (also valuable but not what i'm interested in).
See my comment on huesoso.
Sencha's ExtJs, Sencha Touch and Sencha Space. One style, great documentation and support. If you think your Enterprise should sail on a free boot existing from loose parts, who is going to save you when that ship is sinking and you are going to drown?
I feel like there may be use cases where a wait keyword would be more expressive than async/await. But the main reason is code bases don't need a big re-write. If you have an asyncronous method you can use wait (a single line) rather than writing an anonymous function with two new keywords. In addition it allows a developer to specifically define the wait criteria in more direct terms. So mostly its about writing really easy to read maintainable code.
You can use a basic `wget` command wget \ --recursive \ --no-clobber \ --page-requisites \ --html-extension \ --convert-links \ --restrict-file-names=windows \ --domains &lt;domain&gt; \ --no-parent \ &lt;url-of-page&gt;
Take a look at http://jsperf.com/loops/33 --- they're all almost the same. The only one that you might want to be careful of is Array.prototype.forEach, as it is half the speed in V8 (although note that this is your only real option for sparse arrays). Honestly, I recommend just using LoDash and not worrying about performance for your loops.
Oh, very true. Maybe they should just stick to names that won't show up in ES, such as a capitalised first letter, prefixed by an underscore etc.
It's in LoDash. If you do Node a lot, it's nice to have somewhere to bind your utility functions (plus there are some community ones).
Ah, my bad. Causal reading on the train, I looked more at the code.
It sounded like in his case all the code that required page wouldn't get executed in the server-side environment anyway for some reason.
Interesting. I haven't looked at Firebase before, but its a similar idea. Firebase allows for a data store that is accessible on clients as well as a server. In a sense, its a database. I'll keep this in mind for future projects.
impressive
Thank you! I tried my best to make it as accessible/understandable as possible. I hope people give it a try. 
well, unless you're asking the user to input a date...
Or you could simply, y'know, not modify objects you don't own. If you add "Foo" and some other library also adds "Foo", you'll have a problem. Nothing will prevent collisions. I mean, what are you gonna do? Make them start with a space? "foo[' bar']()" doesn't really look any better than "util.bar(foo)", does it? C#'s extension methods or Ruby's refinements are different. They aren't global and you have to opt-in explicitly. Other programmers and future-you can see where these extensions came from. If you don't use them, they won't affect your code. You'll also know where you can find the documentation, because you know who owns these extensions.
User input is independent of their system clock.
You can use the HTML &lt;map&gt; element. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map
The easiest way I guess is SVG. It's XML document, so after embeding directly (without canvas!) into HTML page it's becoming part of DOM Document and you are able to modified it in the same way as the rest of document.
I remember getting an email about this book earlier in the year when it was released, but I never did get around to purchasing it. The table of contents looks really promising; it's nice to see a JavaScript book that takes areas like logging, internationalization and debugging into consideration. Thanks for sharing!
Nice work!
The problem is how do you pop state when a parsing path is rolled back?
Any reason you'd use java over node.js?
www.medium.com is the epitome of single page apps on my opinion. There have been numerous times when trying to do UX on my own single page app where I've tried to "improve" their design for it and have simply been forced to say, "well, that really does seem like the optimal way to do it." Maybe that speaks more to my lack creativity than their abundance of it, but either way, I think the product is amazing. Also, some of their engineers have excellent blogs where they actually go into detail on how they implemented their features. Great stuff all around. I also think that the www.espnfc.us redesign is excellent for a more "corporate" single page app (e.g. one that's not primarily targeted at tech people). They still have issues with the backend, but the js side of it is fantastic. 
You don't need Canvas and D3. Just export your PSD to SVG, put it in the index file. Then, add click events to all the body parts using JS. Highlighting can be done with CSS.
This is a waste of your time worrying about
Guys - it's less than 30 bucks. The guy probably spent a year writing it. 
Fair enough. Ebay manages to allow JS and phase out the evil though.
Thanks for sharing! I can only recommend [Moment.js](http://momentjs.com), it especially helps if you need to display dates.
There is a slight twist though, you can quality control the clients timezone by asking for it and setting it, say in their profile or something. So you'd have a value they chose so it's not on your when it's wrong. Your server can assume it's own time is right and offset it based on the profiles timezone setting. You'd also have at least some assurance that when their client sends a different timezone than their profile you could assume things about it. Possibly responding with a dialog or something on the UI before you send it off, sure, but still pretty useful for a lot of sites to respect the clients timezone in some way.
Note that @@construct (and Symbol.construct) have been removed in the latest spec.
i think Qudos.io is what you need
Or you could buy it
I don't know much about this but I've heard that LightTable used to be a node-webkit software and they now use atom-shell because it was better.
The first issue is caused by the second - it can't consider the SmoothieChart.js file loaded while there is a syntax error. With that source line (line 804) - is that from your devtools console, or is that the relevant line within Smoothie.js itself? For me line 804 is a blank line. It could be that there is a hidden character there, but odds are there is something else going on with how your app is loading the library. It could also be a manifestation of an error in your app's code - perhaps there's a dangling brace or something that is being mistakenly reported as an error in smoothie.js
Hi Reddit, I'm very happy that you're all so excited about my book. I'd just like to clear up a few points: 1. The fact that it's available for free in HTML form does not mean that I'm giving permission for you to scrape it and download it, nor am I giving permission for you to download PDF versions from torrent sites. 2. I worked on the book for 3 years. You have no idea how much effort goes into writing a technical book until you try to write one. My compensation for that work so far is less than minimum wage. 3. I am the founder of JSHomes - an organization dedicated to providing job training for housing-first programs for the homeless. When you decide to pocket the small expense of the book to save a few bucks, keep in mind that the money you saved could have helped a lot of people. https://medium.com/the-backer-army/fighting-poverty-with-code-d1ed3ebd982d Out of respect and decency, please enjoy the book in its legal forms. Sincerely, Eric Elliott
Thank you for pointing this out. It was three years. =)
For those who can't afford the book, the HTML version is not going away.
My bad, vaguely remember some thread on es-discuss discussing instantiation reforms. Is this related to that, and/or do you know the relevant discussion around this decision? Thanks for the clarification. :)
That's true of 99% of the books on Amazon. Did you buy them all already?
Did you pirate them all already? ;-) 
I'm just stating a better and faster alternative to all the people in this thread trying to figure out how to scrape it anyways. Personally I don't care to buy it because I already know javascript and will not read this.
I'm not sure it was discussed on es-discuss but here's [the meeting notes](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-24.md). Gist is that it's now an internal private slot called [[CreateAction]] instead.
React really takes a lot of wind out of this projects sails.
It's less than $20 for the ebook on Amazon.
The first thing you should know is that Ajax means Asynchronous Javascript and XML. The second thing you should know is that Spry is a JavaScript framework. "Updating a web portal" can mean a number of things, and it is not clear from your description what you want to do. A simple re-skin using CSS is a quick way to update the look of a web site with little danger of breaking functionality. Adding some simple site enhancements with JavaScript is harder, but is also another way of updating a site. 
Thanks
interesting read. 
so i've been avoiding the `var foo = function(){}` declaration lately infavor of old school `function foo(){}` for that reason. It is hoisted and can be referenced before its declaration. Is there any benefit to doing `var foo = fn` anymore?
It's very flexy, and boxy, and 404y.
At my work we do this: var foo = 'bar' ,bob = 'cat' ,derp ; derp = function() {}; This way when you add a variable it only adds a single line when doing git add.
is there any benefit to this though? 
It makes git changes easier to read. We just manually hoist/declare everything at the top at all times.
leading commas make me hurt inside
Why handlebars and not react itself ?
It took me a second to realize why that was seemingly harder to read than it should've been. 
Its not really wasting time...of course I could pirate the book, i could also buy it because i'm not as poor as you apparently are. Scripting is a great skill to learn and comes in handy all the time 
If you know Java script so well then broaden your skillset by scraping the book.
You learn to love it.
sorry, but that sounds like a pretty bad argument.
I'm really curious how you got contacted From someone else who has a bit of of knowledge spread out across different languages Did you have your resume up on a job board? Or we're you actively applying?
This question is like "Help, my front door is made of oak, but I want to replace it with wood!"
Read a little more about node, node-webkit, and app.js. Package node into an installer and node will give you full access to the client side environment across all platforms. Another option would be to write a chrome plugin - single browser obviously but still cross platform. Client side java sucks. Let it die. 
I found this: "Isomorphic JavaScript apps are JavaScript applications that can run both client-side and server-side. The backend and frontend share the same code." - http://isomorphic.net/
wtf
Heh, build the new app, replace old w/new one when ready.
The multiple var pattern gives you the single line change in git, plus the debugger can step on every assignment rather than jumping over all of them. The trade off is that the multi var pattern has more characters.
It starts to get more tricky when you have callback functions and closures. Function A has Variable "b", which Callback C uses, and maybe modifies. Personally I don't like to manually bind functions to variables; most of the use-cases for that seem to be using heavily object oriented systems, which I feel isn't a very good usecase for Javascript.
I'm making a product using something very similar to this right now, and its been really quite a breeze to code with and organize. The use of browserify really makes it very simple, as you get to write things like validators, models, HTML templates (using whatever flavor you want), and if you're feeling really fancy requests, all once and from one place - without the whole-framework buy-in something like react+flux and meteor bring. Its the most flexible way of doing quick full featured web software that I've seen, granted I haven't been around as long as many others.
Where I work, we're in the process of setting up JSHint and JSCS to enforce various rules about code style. One of the JSCS rules is this: "disallowMultipleVarDecl": "exceptUndefined", That allows: var a, b, c; But disallows this if any of the variables are being assigned: var a = 1, b; That seems to be the best trade off between being concise, and allowing the debugger to stop at any variable assignment.
loads for me
works for me
Any idea why it wouldn't work? My browsers are all updated ... 
This can be so cool. An app running on a server... that serves it self! 
Unless of course, the default input is "now" based on the client's clock. 
Yeah, why optimize for one line git changes? Sounds weird and likely not that helpful. Why not just write the code and let git document the changes. Optimizing for diffs sounds just icky.
dear god that is hideous. just so you can have a prettier commit? also you lose the named function in stack traces
The only time I will do function declarations anymore is if I need to assign a new function to the variable at a later time or from within a nested scope.
I'd rather not
Sorry I meant as updating it. It looks very old and out of date.
Sorry about that. Yes I meant enhancing it with JavaScript. I was just lost on how to go about it. Thanks for the re-skin information I will look into it.
[Yeah](https://usqedu.files.wordpress.com/2014/04/lets-go-back-3.jpg)
Made out of Cherry wood. Got it. I know it was confusing. I latter realized to my embarrassment that it was JavaScript. My real question was on advice on how to enhance the site. I wanted tips (just the tip) on how to go about it. 
That's what I'm saying.
For me, it is rule that states "keep your functions small". Usually it kicks in long before hoising can bite me. &gt; should usually be followed in any language Nah, it's totally pointless in languages where scopes are not luxury, f.e. C++. 
it's nice to see this covers Function hoisting. Something many developers are unaware of. edit: i was wrong
in depth on function hoisting: http://elegantcode.com/2011/03/24/basic-javascript-part-12-function-hoisting/
Works perfectly fine here too. Is there any other error? Also hard-refresh might help.
It's sad that the only comments are about how to steal the book, rather than its content. 
Doesn't look well on mobile. 
the isomorphic principle (= code behaves the same in different environments) feels really important for the next years. I started a reddit here /r/isomorphic but so far not yet much response.
there are a number of more isomoprhic libs, e.g. from Art.sy or WalmartLabs. You can find a number of references here http://pipefishbook.com/references -&gt; Chapter 1
&gt; one single rule that should usually be followed in any language: declare your variables at the top of your methods. What? No. Why would you do that with block scope? You do that with function scope because this way your code reflects reality. With block scope, you just declare them on first use and your code behaves exactly as anyone would expect it to behave.
Exactly. I think it's possible but it might be rather complex to implement. It's not out of the question that I might try it.
I also think using JavaScript to define the grammar is just more natural and removing this compilation phase is a big plus. Also I am not convince the peg.js syntax is a big improvement. Yes EPEG.js handle left recursion and uses a stack to track parsing progress and bail out as soon as there is a loop that doesn't yield progress.
This is far too vague for you to get any actionable advice here. It sounds like you might be over your head. 1. Define what needs to be done. 2. Implement it.
Yeah thanks. I am looking a way to enhance it. I hadn't know that it is JavaScript. It's a project for me so I will have fun with it :)
I think [this](https://www.youtube.com/watch?v=LhF_56SxrGk) is actually relevant here, after all. **Edit** Linked to HD version, because the 90s look so much better in HD!
[That's what I'm saying](http://i.gjcdn.net/imgserver/game-header/950/24018_1.jpg)
I think I don't really get your post after all, then! Sounds like you basically don't like the javascript async (fair enough). You don't like [generators](https://github.com/eiriklied/es6-generators) either; I admit I'm not up-to-scratch with them yet, but they seem to help here somewhat.. 
So you did get the chance to update your code! :)
Interesting, especially since i can do the same + export to png, pdf using https://github.com/kapouer/node-webkitgtk (but batteries are not included and i'm not hosting anything yet :)
That's pretty cool. Would be interesting to be able to zoom in.
&gt; Read a little more about node, node-webkit, and app.js. Package node into an installer and node will give you full access to the client side environment across all platforms. Can you give me a link to where this method would be explained? I've been searching, but I seem to be lacking the keywords that would inform me about this method. &gt; Another option would be to write a chrome plugin - single browser obviously but still cross platform. I've revamped my UI library over the last 6 hours. It's now fully jquery independent, but offers almost all of the same functionality. My method of doing things is a lot faster and more modern. Except in the course of doing this, I just cut all support for IE and Mozilla. I'm just going to develop the application as a Chrome exclusive until there's reason to support different browsers. &gt; Client side java sucks. Let it die. Java is far from dead. It's a very hated platform by many programmers, but it still offers a higher user-availability (70-80%) than most HTML5 features (average of 65% thanks to mobile users) across all environments. Further, the vast majority of enterprise-level programming is done in Java. I cut my teeth on Java back in the 90s. It's still a relevant language. Unfortunately, it's not done well since Oracle bought it. Would packaging Node.js into an installer endanger the end-user? Java requires user trust elevation on a per-app basis. Does Node? I can't find a lot of solid information on the method you are describing.
same for me, one of the main reasons to keep using it is if you want to replace the function at runtime, as one-time functions for initialisation purposes or stuff like that.
Been trying to find ways to get a flux+react app to render server side in rails. Haven't had too much luck yet on finding a good solution. I still like working in the rails environment, and it's what we use at work. If I can find a good setup like this that gives us benefits of both worlds, then it's an easier sell for sure.
Not function declaration but function statement. `var x = function(){...}` also declares a function, just an anonymous one.
The concept is not really anything new or groundbreaking. Some elements of code lend themselves to such "isomorphism": a math library, for instance, should behave the same on the client and the server. There's undoubtedly some value in automatic parity in client and server code for such functionality, but since clients and servers have completely different requirements and fundamentally different environments, this value can only go so far. We know this because desktop application programming always had such code-sharing between client and server. It provides a lot of convenience and potentially reduces code duplication, but it doesn't really make new things possible that weren't already possible before.
I wonder if this means I should back off learning and using Rails and should embrace Node/Express or Node/Meteor instead. 
Published November 11, 2013. This article is a bit outdated on some points. The big one is the change with SEO, Google now crawls with JavaScript so it's not as big an issue (I'm not sure about Bing). Briefly mentioned, Airbnd also did release some code to help with the issues raised here called [rendr](https://github.com/rendrjs/rendr).
I would like to believe this is true but do you know any example of site heavily depending on JS (i.e. a SPA) and correctly crawled by Google?
From my point of view, an isomorphic application should work with JS disabled on client-side. As far as I know, this is not the case for meteor.js, does it really provide a way to write isomorphic applications?
For your careers sake, probably.
This may just work... I'll give it a try, cheers.
Uh, cool story bro?
Update how? Your requirements are so vague as to be completely meaningless. 
I think this is a valid question. It doesn't matter if it's a waste of my time since it is __my time__ not __your time__. If I want to learn something obscure there is nothing wrong with it. I don't understand your need to belittle me on such a topic, especially one that could actually lead to performance boosts. 
go to [nowtweets.com](http://nowtweets.com) and you can zoom in to read tweets on a map
You can check this from same author: http://twittmap.nodejitsu.com/ but with a different approach
Generally, they should be considered unsafe. While most don't have nefarious intent, it would be fairly easy to write one that posts your authentication cookies to a third party server. To check if one is safe, you'll have to learn javascript then look at the bookmarklet's code and determine if it is safe or not.
I would call the book dense. It covers a lot of ground in relatively few pages. I introduce topics in fairly broad strokes, trusting users to dig deeper and learn more on their own. That said, it covers topics in enough depth that you should be able to learn a lot using only the book if you prefer. It assumes you have some existing JavaScript experience. If this is your first exposure to JavaScript, you might want to start with "Eloquent JavaScript", first. See: "Learn JavaScript Essentials: One Clear Path to JavaScript Mastery" https://medium.com/javascript-scene/learn-javascript-b631a4af11f2
This book doesn't teach basic JavaScript at all. I don't doubt that you can get around in JavaScript, but I am completely confident that this book will teach you a lot that you don't already know.
Why?
I've tried to add another section more specifically about that, although the legal complexities surrounding small snippets is surprisingly complex depending on where you get them from, so I'm not certain I got it right. But yes, you're right, I should have emphasised the importance of licenses more.
Why is that a priority for you? Are you also concerned about IE5 support? (honest question, not trying to be snarky)
Javascript variables are not usually block scoped.
Nice!
Not really the case, async calls are perfect for a lot situations, but there's certain times where asynchronous operations or callbacks can't save you (or can't even be used), where a 'wait' keyword saves the day, for example: for(var i=0; i &lt; 10000000; i++) console.log("Iteration:"+i); This is a trivial loop, any other language can handle this quickly and without more than a few kilobytes of memory. However a browser or node JS will eat up 2GB before the OS kills it off. While this example may seem contrived, there's use cases such as image processing that need tight loops and create just as much "cluttered" memory (as the example above) such as this that don't lend itself well to async operations, in-fact are downright brutal to put into async operations. The wait keyword would save the day here: for(var i=0; i &lt; 10000000; i++) { if(i % 1000 === 0) wait; console.log("Iteration:"+i); } This would allow V8/JavaScriptCore/SpiderMonkey re-run the event loop so that garbage collection can pickup all of the old dusty buffer data in STDIO and make sure nothing else has been missed in the meantime. So with a "wait" keyword there's a lot of use cases that would solve a lot of core node (and browser) issues by allowing seemingly "blocking" calls to become "waiting" calls. Some of these use cases the "async" and "await" keyword just wouldn't help.
Shouldn't be too bad. Have a push construct that returns an object with state properties to push. To unroll just pop it. Refer to current state via a state variable. INDENT push:{ return { indentLevel: state.indentLevel + 1 } }
Variable declaration depends on the language. Your single rule does not apply to all languages. http://programmers.stackexchange.com/questions/56585/where-do-you-declare-variables-the-top-of-a-method-or-when-you-need-them I remember reading this when I first started programming. Your rule works with JavaScript, but fails with other languages.
I think a lot of geeks are exceedingly interested in concepts with stupid terminology so they can feel smarter. It explains the buzzword soup so prevalent in the industry.
jService is not the most descriptive name ever...
Agreed... Would've made more sense if it had to do with commerce. Even jTrivia would've been better... 
Browsers will typically wait until your JS is done executing before triggering reflow. You must be doing something inside your JS to trigger the reflow. Are you querying element css properties by chance?
Anything jump out at you as a next step for refactoring? Open an issue! https://github.com/thomasphorton/snake-js/issues
One of my priorities is to have my contents correctly interpreted by Google, Bing, Yandex, Facebook, Twitter, Pinterest etc.
I like this! How granular.
`http://jservice.io/api/categories` is only returning one category
it would be cool if your random question had the answer field show up on mouse over or something
Hope I'll be more lucky to get a response here than on HN... Is the Espion headless browser based on an existing one? If this is the case, which one?
Not Constantinople?
Can you provide some examples where your `wait` keyword would be better, or at least more meaningful? The one you provided currently can be done more idiomatically with less code using async/await or callbacks -- adding two keywords is hardly a big rewrite either!
That robot example is just plain old shared code that's been around for decades. No programmers would use the term "isomorphic" to describe this. When people talk about "isomorphic web apps", they are referring to being able to write **JavaScript** for both the *server* and *client* portions of **a web app** - no more, no less. Using "isomorphism" to describe this situation is already a bit of a stretch, but programmers love their loose interpretations of math terminology.
Hehe, nope ;)
Unfortunately it's too early to publish internal technical information. 
A more significant reason for doing this is it makes it easier to spot errors: var foo = 'bar' , bob = 'cat' derp ; You can just follow the line straight down and if you don't see the correct comma then you know immediately there's a problem. Much the same for object literals: var myObj = { x: "foo" , y: "bar" } , myOtherObj = { x: "foo" y: "bar" }; In both cases it's very easy to see there's a missing comma. However, it's not the only way to fix these issues, and usually it just annoys people. Furthermore, a lot of people are already trained to looking for the errors at the end of the line, and there's linters and other tooling to help.
This is actually pretty neat. I wrote a simple little NodeJS app using websockets so that multiple people could play Jeopardy. Currently, I have to type in all of the questions and answers. With this, I could just get the questions from there. Very cool.
I understand, let's wait for Q1 2015 then :)
Thanks for the reply. I might have a misunderstanding of how reflow works. My understanding was that if you appended elements one by one to something that was already in flow, it would reflow each time regardless of if script was still running.
Thanks! While I was waiting I started playing around with document fragments and manipulating the table while it was stored in there. It's working a bit faster for sure. Rather than have my PHP script echo the table out initially, I'm working on having it put all the info into a javascript array so I can create the elements in memory and then append them while the table exists in the document fragment. I think I'm on the right track kinda!
For me the android pixels are barely visible (blue on darker blue). Apart from that, nice idea.
Previous discussion [here](http://www.reddit.com/r/javascript/comments/2q1ud1/the_greatest_thing_lacking_from_javascript/).
Good point, thanks!
That would be horribly inefficient as you are right to think. See this article for some examples on when reflow might happen. http://mir.aculo.us/2010/08/17/when-does-javascript-trigger-reflows-and-rendering/
I've built table rendering software for an internal product, and I can tell you from experience that repaints/reflows for large tables are nightmarish. The best way to get around the issue of modifying that many DOM elements (and reflowing everything after) is to A) have built-in pagination for the tabular data with a limit on the rows per table (depending on your column count, I'd say keep it to 50 or less) or B) be a bit tricky and only load in the cells you need as you scroll through the data. (Keep the rows and columns you're not looking at out of the DOM completely.) B is probably the most effective way, and it's what Google Docs Sheets does. The limitation is that you have to use absolute positioning within your "spreadsheet" element, and override all native scrolling functionality.
iirc you can prevent reflows by putting them all in a requestAnimationFrame (test it first though). Adding TDs one-by-one will typically reflow if you're querying the DOM (eg with jQuery). https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame 
Oh dear.
Yes, I agree with you there. Disallowing multi-var declarations is one way to easily solve this problem, and it discourages too many variables being declared at once as well.
jEopardy
No. There will still be a role for exclusively server-side frameworks such as Rails. In most cases, isomorphic applications will cover only the client portion of the stack. So, rather than having view rendering happen as part of the same application that handles the business logic, it will happen in a different layer. Check out [this post by Zakas](http://www.nczonline.net/blog/2013/10/07/node-js-and-the-new-web-front-end/) for an example.
Sorry. I did it last night and I rushed through it. At work I was given a project tl update their old porta that was done through Ajax. I did see that it is originally done through JavaScript. I wanted any tips on how to enhance or give the portal a facelife since it is kind of wonky. 
So we have PhantomJS and Casper... why use this? The built-in functions to save images??
Hi /u/TheEspion, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/DonaldDerek, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/RevillWeb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/rampage_wildcard, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `thomasphorton.com`. Thanks for your consideration!
"With block scope" = let/const. When you quote someone, don't change the meaning by omitting important parts.
ES6 has let/const. With a language that has block scope (like ES6 if you use let/const), you just declare them on first use and your code behaves exactly as anyone would expect it to behave. Explicit enough? :P
JSpardy?
What software are you working with? What tools do you have access to? What javascript libraries are you leaning towards? Etc etc etc etc If you specify these things, then we can help pave you a path.
What do you mean?
10-4, thanks!
&gt; Use Case #1 — How do we help the event loop and garbage collector? I don't think the event loop or garbage collector actually needs any help in the example presented. Unless specified in the ECMAScript spec I would expect that the JS engine is free to garbage collect when ever it likes or needs to and not just in between processing events in the loop. This isn't a language problem. 
I chuckled. You're probably right. It's a good topic because JavaScript is the only language I personally know of that does this. Hell, even an experienced front-end developer I know didn't have any knowledge on hoisting until recently. He's just never ran into the issue.
I have SharePoint Designer 2013. I also have visual basics, but others mentioned that it wouldn't work. I don't know what other might be helpful. My job gave me this project and I am very excited to do. The languages I know are C# and Java. Their old portal was done with Ajax and looks very old and dated. I would love to revamp the site. 
Learn how to use generators.
There's an additional bit to this as well: keep your files small. If you have just one file with 500 functions and some of them are hoisted and some of them are not you're going to have one heck of a time figuring out which can be called anywhere and which can only be called at a specific point in the file, even if all of those functions are one-line. If you have small files with small functions each doing their own specialized thing in a module then hoisting/not is basically just a style convention.
The main benefit for me is use of lambdas. With `var foo` you can inline a lot of the time into a lambda, which is less typing, which is a Good Thing^TM. // cs foo = -&gt; true // ts/es6 var foo = () =&gt; true; // &lt;es6 var foo = function() { return true; } function foo() { return true; }
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let &gt;In ECMAScript 6, let **does not hoist** the variable to the top of the block. Hoisting is a function scope thing.
While most of this was covered in the article, I'd like to elaborate a bit on this bit: &gt;then the function would still work There's another way to do this without named functions: using a "resilient module pattern": (function(module) { var secret = "foobar"; var getMySecret = () =&gt; console.log(secret); var usesMySecret = () =&gt; getMySecret(); // public assignment module.getMySecret = getMySecret; module.usesMySecret = usesMySecret; }(window.foo)); foo.getMySecret() // foobar foo.usesMySecret() // foobar delete foo.getMySecret // true foo.getMySecret // undefined foo.usesMySecret() // foobar This way you can pass your functions anywhere, allow them to be used in any way, even mutated or deleted, and the other ones will still work fine! This can also be combined with the similar "revealing module": window.foo.bar = (function() { var secret = "foobar"; var getMySecret = () =&gt; console.log(secret); var usesMySecret = () =&gt; getMySecret(); // public assignment return { getMySecret, usesMySecret }; }());
The advice at the end about setting the month and then the day when using the setMonth and setDate methods is wrong. There are cases that break, whichever one is called first.
You'll sometimes hear "function declaration" refer to functions defined like this: `function foo() { ... }` where as "function expressions" refer to functions defined like this: `var foo = function() { ... }` These are both technically statements (*as a whole*), though all of the forms can be used as expressions by self-invoking: `if ((function() { return true; }())) console.log("Yay!");` `if ((function foo() { return true; }())) console.log("Yay!");` `if ((x = function() { return true; }, x())) console.log("Yay!");` The semantics is mostly there to distinguish between the two forms. The article highlights why such a distinction would be useful. 
I foolishly assumed you were Christian from flinc. Didn't consider the fact that two people were working on the project. Although, if you are him - we had a chit-chat about your project in front of our office over a cigarette. Cheers!
I think it is another problem now, actually. The HTML/Javascript is getting converted to unsigned char arrays to be loaded onto the microcontroller (the previous post explains this a little more) through a Perl script. I think this script is causing the issues and I am currently trying to figure out why/how? When I use Chrome to open the html file directly it works, but after being converted and loaded onto the microcontroller only IE works. 
Your "wait" is equivalent to: function* gen() { for (var i=0; i &lt; 100000; i++) { setTimeout (this.next.bind(this),0); yield console.log(i); } } new gen();
&gt; When people talk about "isomorphic web apps", they are referring to being able to write JavaScript for both the server and client portions of a web app - no more, no less. Actually it is more than just writing JS on both the frontend and backend: it's being able to run the _same_ JS code on both. A common goal is server-side rendering of pages for SEO and performance, without having to duplicate your view layer code between the FE and BE.
You have to specify a count. Apparently it defaults to 1. http://jservice.io/api/categories?count=100
&gt; it makes it easier to spot errors A linter does that for you. If your editor doesn't put a squiggly line under mistakes like that, try a different one.
&gt;Uncaught SyntaxError: Unexpected token ILLEGAL Well, just take a look at the line in question. You have an illegal token there. If you know how JS' syntax works, it should be easy to spot. Since you didn't provide a live demo, I can't take a look myself.
That it does, which I even acknowledged in my post! However, not everyone edits in an editor with that kind of advanced error checking (it's not a simple grammar mistake, it's valid JS), so it's not like this is not a legitimate benefit of the style. Just a benefit that can be achieved in other ways, such as linting or not even allowing multi-var declarations in the first place.
That's explained in the tutorial: &gt; As React can't handle rendering &lt;!doctype&gt; tags, etc, we have to offload that layout rendering task to Handlebars. Here's our simple HTML5 template file: &lt;!-- file: server/templates/layout.handlebars --&gt; &lt;!doctype html&gt; &lt;html lang=""&gt; &lt;body&gt; &lt;div id="content"&gt;{{{content}}}&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
Try simplifying your test case and posting it on codepen.io or jsfiddle. Jade should translate directly to html, so just use that if neither of those sites supports it. Your problem is most likely in your CSS, but I can't really tell what's going on because of the formatting. Simplify the problem and start adding complexity though, it's the best way to learn for yourself. 
Also, why is this is in /r/javascript if it's a rails app?
I've tried cleaning up your code a little bit- it's still missing all of your externally linked files. You can try adding it in here so we can get a better look: http://codepen.io/tho/pen/ogzzEN
But how do you feel about *male* models?
this gives me an airtight excuse to code yet another trivia irc bot
&gt; ES6 has let/const. &gt; I know all about ES6, but you were talking about Javascript in general. Only a tiny fraction of Javascript that is deployed in the world is ES6. That's why I said "usually".
Well, I read your comment as "isomorphic web apps use Javascript _as a language_ for both the server and client portions of an app - no more, no less", which doesn't really capture the current meaning of "isomorphic web app". Plenty of sites use JS on the BE (Node) and the FE (Ember/Backbone/Angular/React/etc), but it doesn't make them "isomorphic".
&gt; you were talking about Javascript in general No, I was not. See that "any language" bit in the quoted part? That's the context.
Medium, a real time web app? It's a nodejs based blog. I agree their content is sublime but it's not a web app imho.
Does anyone know how this would work with regular apache/php servers? Or does such an incongruence between server/client environments not allow an isomorphic approach?
look into nodejitsu for free hosting. they offer free hosting for open source projects. I would fork to check it out, but im on my home pc, and would much rather visit a URL. 
i'm surprised it doesn't have an MVC framework.
Well that theme is definitely more than I expected, but it looks great. When I posed the question, I was more or less suggesting a subreddit icon and banner. I could see how a full theme might be hard to maintain.
Neat. How does it behave if synchronous compute time is larger than an interval, does it start to drift then or does it start dropping computations?
If you have a Mac, you have a built in screen reader: http://disability.illinois.edu/academic-support/assistive-technology/mac-os-x-voiceover
A bunch of reasons: the anonymous IP infrastructure, the pre-scraping functionality (scheduling), the post-scraping features (data QA, change detection, data storage and delivery), the easy-to-use and highly-versatile scraping API, the error handling, etc. And of course, being on the cloud, you don't need to manage the infrastructure.
Looks like it will drift. It's hard to tell because the code isn't particularly readable. Lots of nifty tricks, not enough comments. Nonetheless, I'll be using this in future projects. 
Ugh... It annoys me when projects like this reuse the name of an [existing, well-known software project](http://clusterlabs.org) that has been around practically forever.
/u/greim, since JS is single-threaded, JS itself, an as an extension pacemaker, will start drifting. You can work around this by wrapping with a web worker or child process. P.S. I'm the author. I've filed [issue#1: consider using web workers or child processes to mitigate drift if the JS thread is blocked](https://github.com/secrettriangle/pacemaker/issues/1). Thanks for the feedback!
You'd have to pass the data to node because react runs in js. You could pipe in JSON to a node process and get back html. 
More annoyed than having a project named interval5? If every project was named something unique, eventually we'd run out of descriptive, relevant names. Spending five seconds to read the description makes it clear they're unrelated.
Yep. Makes it much more difficult to Google it if you don't have the link handy. And really, I think that's a pretty weak argument -- with the number of words and word combinations in English alone, we're a long way from running out of descriptive names for projects.
CSS is for those designer types to worry about, we just want to gossip about libraries and frameworks. ;)
For the super basic stuff, I'd point her to a site like teamtreehouse. I haven't price checked in a while but they had a pretty good student rate when they were first starting out.
We "tutor" a few kids after school a couple of days a week. Mostly this consists of having them run through code academy courses and coming to us when they get stuck. More advanced kids we give a project to (one of our own completed projects) and get them to build it from scratch. We all learnt web development by teaching ourselves. We try to encourage that in our students too, just with the added bonus of having someone super close by when you really get stuck. 
doesn't take into account 3xx.
Yeah, I set her loose on her own with some "homework" and told her to ask me if she had any questions (we went through changing span text contents, changing color, and changing font size, so I had her figure out how to change text alignment on her own). She's Japanese though and speaks very little English so she has trouble with some of the training sites out there. But I suppose I could adapt the lessons for her. I think she just really likes having someone to sit down with and ask questions and there aren't too many other developers here on our small island. 
NVDA is free/donationware for Windows: http://www.nvaccess.org
It looks like standard *has a* relationship between objects. You could send a reference to a hero whose spell it is going to be hero.spells.push(new Spell(hero)); or use objects hero.spells.push(new Spell(0, 0, [{name:"intelligence", ratio:1}, {name:strength, ratio:2}]); or use them combined hero.stats = {intelligence:{ratio:1}}; hero.spells.push(new Spell(0, 0, hero.stats)); and you should probably not hardcode damage and cooldown. Move them to config or attach it to your state. hero.spells.push(new Spell(config.spells['spell name'], hero.stats)); The point I am trying to make is that there are many ways to do the same thing. It seems you are making a game so your question shouldn't be which is the best way to do this, but which way is good enough (and your way **is** good enough). No one playing your game will ever see your code so try to make a good game, not a perfect pile of code. Happy holidays from a fellow gamedev who has spent too much time perfecting his code. 
It's all JSON.
Seeing as how synonyms exist, I don't think that's a weak argument. Why aren't you annoyed that projects name themselves after [existing, well-known objects](http://en.wikipedia.org/wiki/Artificial_cardiac_pacemaker) then? The project isn't anywhere on the first page of the search for "pacemaker".
Alright, you win, bud. Clearly your asperger's is stronger than my opinion. :)
Aren't the clues and answers covered by copyright? That makes this less useful.
sucks its just bitcoin
codeschool.com
nope. not safe.
screenreader needs to support js.
Worry about performance when you've got perf data telling you which part of the code is actually slowing you down. Until then your solution seems perfectly reasonable. Here's a completely useless refactor of it because fun: Hero.Spell[2] = new Spell(100, 20, { agility: 0.6, strength: 0.2, intelligence: 0.1, healthpoints: 0.01, spellpower: 0.2, }); this.dmg = Object.keys(ratios).reduce(function(acc, key) { return acc + Hero[key] * ratios[key]; }, baseDmg);
The problem with `wait` is right there in the "run the event loop *once*" (emphasis mine): &gt; Pauses execution of the javascript stack and lets the event loop run once, and resumes execution. As that is not a terribly precise description, [I'll assume you mean something like this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/EventLoop): When `wait` is called 0. Execution is paused. 1. The current whole stack state is saved somewhere. 2. Nothing is done to the heap. 3. The current paused "thread in execution" is re-queued into the message queue, *but not at the end* like every other message. Instead it is queued as the second message. (In some way, the saved stack is associated with the message to be restored later) 4. stack is emptied. 5. The event loop is then free to run the next message. 6. When running a message, if there's an associated stack state, the stack is restored to that state. The first thing that comes to mind is that I can't see how this could affect garbage collection in any way at all. Only, maybe, tangentially. On the one hand, the GC does not run through the event loop message queue system. In fact, *when* it runs is completely up to the implementation of the JS engine, so no feature in the language or in the mechanics of the message queue system can or will determine if the GC is run or not. On the other hand, if what you pretend is for the GC to go through your "in-execution stack state" and clean it, that won't do. Again, it's implementation specific and most of the times stuff won't have been marked as collectable yet, so even if a sweep went through, not much would get freed. But the real problem comes from what those mechanics `wait` would introduce, which is a source of blocking the message queue indefinitely. Say you `wait`, and the next message processed `wait`s too. You're blocked. Also, you haven't considered what happens with stack restoration. Let's play with a couple of closures. Let's imagine something silly like this: (function() { var somevar = 1; document.getElementById('someElement').addEventListener('click', function() { // ... somevar++ ... }); document.getElementById('anotherElement').addEventListener('click', function() { // ... somevar-- ... }); })(); So, `somevar` is referenced in both handlers. They will, at some point, fire and thus be queued in the message queue for execution. Now, the first one `wait`s, the second one executes, the first one's stack is restored. How do we do that? Do we restore `somevar` to the saved value? Do we not? Why?
Always be prepared. I'm everywhere! &gt;:D
since she has basic knowledge, I'd suggest just doing some javascript project together (pong game? basic website?) - she codes, you help her. "learning by doing" is almost always the best approach, IMO
頑張れ
How did you go about getting the opportunity to tutor kids? What age are they? I'm curious because I would like to tutor/teach kids in middle or high school the basics of programming.
Besides `__proto__` being non-standard, that doesn't seem to work perfectly, I'm afraid... //Parent class function Parent(){ } Parent.prototype.update = function(){ this.age += 5; console.log("Parent update"); } //Child class function Child(){ this.age = 10; } //Inherits from Parent Child.prototype = Object.create(Parent.prototype); Child.prototype.update = function(){ this.__proto__.update(); console.log(this, "Update"); } var son = new Child(); console.log(son.age); son.update(); console.log(son.age); Not only is `son.age` not updated because of an incorrect `[[thisValue]]` but you also may notice that the `console.log("Update");` appears twice on your console. I've added `this` to that line so you can see what is happening and understand why that's not good.
I heard about the [super hero supply parts store / 826NYC](http://www.nytimes.com/2011/10/30/nyregion/at-the-brooklyn-superhero-supply-company-no-villains-are-allowed.html?_r=0) and always thought it was an amazing concept and one that would suit they way that we work at my company. We just started putting the word out that we were willing and a few parents dropped by to enquire. We don't charge for lessons, just a way of giving something back to our small community. We have however set up a coffee shop in one corner of our office so parents/supporters etc etc can help support our efforts by getting their coffee from us. We're going with a mad scientist theme rather than super heros. So far it's been a blast. 
I think (not in front of computer) that you need to do this in update instead: this.__proto__.__proto__.update.call(this); Now this will fix both problems. The first proto of this is actually the function.prototype of Child. I'm not sure if there's a problem here but I think the main thing I'd see is that you need to walk the chain in case some base class doesn't implement the method. 
JavaScrict doesn't have classes so why try imitating this behavior? That is the question you need to ask yourself.
A bookmarklet is a "javascript url" -- that is... insteadof http:// you're looking at javascript: Thus, anything you can do with javascript can be done from a bookmarklet. From portscanning inside of a firewall to cookie theft and including changing the background of every website to pornography.
Heaps of reasons. If you're making a game the odds are you'll have some hierachy like GameEntity → Creature → Player, Monster1, Monster2 where you'll want `super` I was also looking into the source code of Knex (an SQL query builder) which works on multiple databases (Postgres, MySQL etc.), and the database driver for each database inherits from a base driver, and ideally would call its methods if possible.
That's kind of the direction I was thinking of going. Yesterday, we just went through some simple stuff so I could get a feel for where she's at. It's how to work up to the bigger stuff that I'm trying to figure out. Like, how much time should I spend changing styles and what should I move on to next? This is definitely an interesting experience for me though and I'm re-learning a few things as well.
Awesome! I will definitely check that out! Thanks!
Well, the second one is happening because that's what you're doing with `__proto__`. (Note: When I say "`function` is called *on* `object`, I mean `object` is the `[[thisValue]]` on that call): son.update() // -&gt; calls Child.prototype.update on son this.__proto__.update() // -&gt; this is son, son.__proto__ is Child.prototype // so it calls Child.prototype.update on Child.prototype this.__proto__.update() // -&gt; this is Child.prototype, this.__proto__ is Child.prototype.__proto__ // which is Parent.prototype, so it calls // Parent.prototype.update on Parent.prototype We could do as /u/Poltras says and use `this.__proto__.__proto__.call(this)` and that would sort of fix both problems, yes (to the extent that this particular example works). That still doesn't address the fact that `__proto__` is not standard, of course. But the main thing that this makes visible is that `__proto__` is not really like `super` in Java or C#. In fact, in those languages, `super` is a relationship between *classes*, while in Javascript, the prototype chain is a relation between *objects*. My personal point of view is close to /u/frerom/ below. Why try to forcefully emulate something? Or in any case, that if you really want to do that, maybe those lots of blogs you mention do have reasons to go further than this, that it is not so simple.
&gt; how do I do this with Hero.intelligence instead of Hero["intelligence"] ? or should I just revamp my entire system and go associative arrays? In JavaScript, those two things have exactly the same meaning. The only difference is that using the ["key"] syntax allows you to specify any string, whereas using .key has limitations related to the characters that are permitted in an identifier.
What is the relation of this project to [remarkable](https://github.com/jonschlinkert/remarkable)? Looks to be a fork. EDIT: [Yeah](https://github.com/markdown-it/markdown-it/commit/9afffbaefd4dce87ca609deb9f9b58accc69f032). Wonder what the story is.
I was handling B.Sc. and M.Sc. student for last couple years, I imagine their level should be somewhat the same to one of your friend - know the basics, have no idea about anything else. So, what we usually did is: 1. Give a very detailed description of the project, talk through it, discuss, make sure the student understands what needs to be done 2. Give student a complete freedom to do the project the way she wants 3. Meet once every week to answer student's question, help with difficult parts, etc. Essentially, the more the student does on her own, the faster she'll learn how the whole thing works. 
A few steps can help. 1) Code to standards. Use elements as they're intended to be used. 2) Ensure keyboard navigability. There is also a slew of accessibility stuff you need in your HTML. Download the WAVE Toolbar for Firefox, check for errors and make changes until they're all gone. If this is something you can post, I can take a look at it for you. 
I have to point out the awesome tool [webscraperjs](https://github.com/ruipgil/scraperjs) that uses cheerio as a scraper. Good stuff!
I've spoken to the maintainer. It seems to be related to differences of opinion, but as for *why*, I do not know. Whether you use remarkable or markdown-it is of no concern to me personally, I just hope any plugins built are compatible with them both. 
There is a great advantage in duck typing and using utility methods that compose objects and transform them. Not sure about the performance implications though. That's one of my blind spots. 
That approach is typical in a class based language like Java. JS is not class based, so it often falls short when you start relying on large class hierarchies. In JS you can wield prototypes for a much different (arguably stronger) organization. http://en.m.wikipedia.org/wiki/Prototype-based_programming https://cs.au.dk/~hosc/local/LaSC-4-3-pp223-242.pdf Edit: if you want your code to look and feel like you're using classes, you can use ES6 and a transpile like 6to5. 
ES6 has classes, and they are currently present in both Chrome Canary and IE Tech Preview.
Ahh I can't post it !! Thanks for the help. Keyboard navigation is enabled but not sure how to ensure all the text gets picked up. But they can navigate everywhere with tab +enter :)
You also need to make sure you have a good heading structure and set up the appropriate ARIA Landmark roles. They are very useful for navigation.
Got it. It wasn't clear to me when I skimmed the page yesterday at work that it is a cloud service. Sounds cool, I've thought about providing such a service myself.
Kind of strange that they don't make reference to Remarkable even though it looks to be a fork (or complete clone..!?).
Ah. Well, then try this. http://rawgit.com/w3c/aria-in-html/master/index.html
This is *in spite* of javascript's systems, not because of them. We've have classes in transpilers for a while but they've always been hiding prototypes.
Here's a quick cheat sheet on the landmark roles. http://www.html5accessibility.com/tests/roles-land.html Note: You're probably not going to need the 'application' or 'presentation' roles.
You seem to believe that classes and prototypes are mutually exclusive, but this is not the case.
Thanks!! This is what I'm looking for
The prototype is not exactly the same as the super. The way transpilers have been handling this for a while now is by keeping a reference to the parent prototype chain and calling it explicitly. The following approach most closely resembles how `super` works in classical languages. This approach is basically what `__extends` does if you ever use a transpiler. var Parent = (() =&gt; { var Parent = function() {} Parent.prototype.update = () =&gt; console.log("parent update"); return Parent; })(); var Child = ((parent) =&gt;{ var _super = parent.prototype; var ctor = function() {} ctor.prototype = _super; var Child = function() {} Child.prototype = new ctor(); Child.prototype.update = () =&gt; { _super.update.call(this, arguments); console.log("update"); } return Child; })(Parent); This is of course quite a lot of work to imitate something that isn't really how javascript works. I would advise you to look into instead trying to work with javascript instead of against it. /u/mattdesl had some good reference material. Also. `super` is a reserved keyword, so you can't name a function with that name. :)
"If it ain't broke, don't fix it."
&gt;The first proto of this is actually the function.prototype of Child This is fundamentally why `__proto__` is not a replacement for `super`, even if it was standard and not quirky. It's referencing the current prototype, which is not `super`!
[It was not an amicable split](https://github.com/jonschlinkert/remarkable/commit/89c2c9f261a358c388ee32a44afd94110f47f1db). NodeBB utilises Remarkable as its Markdown parser, whether or not we will switch to Markdown-it is still open. We most likely will support both (toggling between based on user preference), if at all.
In Object Oriented Programming, the general preference is to use composition over inheritance. What this means is that your objects should be made of other objects, instead of subclasses of other objects. In the example of a game having entities and then monsters deriving from that, you'll instead want Monsters that is made from entity parts. Luckily with javascript, we can literally copy those parts from one to the next. To make your life easier, this is a well established pattern present in many frameworks and libraries. For instance, in Underscore, it's called [_.extend](http://underscorejs.org/docs/underscore.html#section-85). So, build classes from parts, and then use Object.create to produce instances of a class. Don't use inheritance between classes. 
Personal pet peeve: That seems not to be a *parser*, but a parser fused with an HTML renderer. This is not the only one, though; as far as I've seen no one else can tell the difference, or no one cares. Is there any Markdown library that converts Markdown to some sort of abstract representation I can work with? Sort of like the "debug" tab on this one, I guess. Doesn't need to be Javascript. That would be really useful to me.
Basically, I just use [jsuri](https://github.com/derek-watson/jsUri/releases) var uri = new Uri('http://mtbink.com/p/index.php?p=utility/tex-preview'); uri.getQueryParamValue('p'); // will returns 'utility/tex-preview'
You don't need to reason about both. You just reason about prototypes. Classes in ES6 are functions and prototypes. Same as before, now with better syntax.
maybe some people like to use the hard way :lol:
Just looking over the table of contents - definitely putting this on my reading list since it seems like most javascript books out there cater to beginners and leave out the stuff you need when you get over the initial hump. Thanks for sharing!
That is the weirdest, most trivial reason for a project fork I think I've ever seen. 
Sweet! You just gave me inspiration for a project this xmas break.
Fantastic talk - thanks for sharing!
Interesting I did not know about reduce. Thank you for that. I wasn't that worried about performance, more along the lines of trying to have a solid foundation? So that later on things don't turn into a mess when I might try to add something new etc. Thanks for sharing your knowledge, I wish you happy holidays
I didn't say websites require JavaScript or CSS. But good luck with that, if that's your thing. And JavaScript is pretty much synonymous with web-dev. I know which subreddit this is, /r/javascript is literally written in the post's title. Either way, thanks for your feedback.
do you use jQuery? If so I would do it like this, assuming a structure of &lt;ul id="parent"&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;/ul&gt; $('#parent li:nth-child(2)').nextAll().remove()
Thank you very much for taking the time to write out such a detailed reply. May I ask why I shouldn't hardcode damage and cooldown? I'm not sure what you mean by attach it to your state as well =(. I might be missing something from your post, but I tried it out. The main problem I'm having now is I have a separate variable that contains the total value, for example: total.intelligence = hero.intelligence + items.intelligence + buff.intelligence; and so when I calculate the spell damage I actually use total.intelligence*ratio, and I can't figure out a way to get the value from the total with just "intelligence". What I tried from your post was for( key in hero.stats ) { console.log( total.key ) } but of course it didn't work. I've even tried stupid things like total + ".intelligence", I've tried almost everything I can think of but can't seem to get it to work. The only 2 options I can think of is Associative arrays like I did above or a really lame method that I don't intend to use and that would be: if( stat = "intelligence" ) { dmg += total.intelligence; } else if ( stat = "..." ) { } Associative arrays seem like itd just make my life easier all around, not sure why I'm so against them, maybe because I don't know much about them or how they work or if they create any problems. I'm not too worried about performance, except if there'd be a huge difference between the two, but I'm mostly interested in having a solid foundation so that later on I don't wanna rip my hair out trying to add new features if needed. Thanks again for taking the time to reply, I really appreciate it. I wish you happy holidays again =)
Always look on the bright side of life! ♫♫ :)
According to the `CHANGELOG`, looks like the split happened 4 days ago. Whatever the reason, can't say it would be a bad thing, considering the forker did a lot of work: https://github.com/markdown-it/markdown-it/graphs/contributors https://github.com/jonschlinkert/remarkable/graphs/contributors
Not sure what that's about. It loads pretty much instantly for me.
I wonder why the repository was originally under Jon Schlinkert's name...
If you're not using jQuery, you can just walk the child nodes and remove them until you get to the end. [Example](http://codepen.io/anon/pen/zxKwGO?editors=101). The only complication here is that the DOM exposes all kinds of child nodes (e.g. comments, whitespace, etc.) and so the third child element won't necessarily be `childNodes[2]`. The first loop in that example walks nodes until it has seen 'n' element nodes, and then starts removing from there. 
Nice, digging the modularity. My only complaint would be that some of those modules do not really need to be "turf" specific. For example, `turf-is-clockwise` would be more Unixy if it was just `is-clockwise` or `is-polygon-clockwise`. This would help improve discoverability and make them nicer to use alongside other generic path modules, like: https://www.npmjs.com/package/simplify-path https://www.npmjs.com/package/delaunay-triangulate https://www.npmjs.com/package/triangulate-contours https://www.npmjs.com/package/chaikin-smooth https://www.npmjs.com/package/convex-hull etc.
Not sure if this is what you're talking about, but [Pandoc](http://johnmacfarlane.net/pandoc/) is a brilliant piece of software that lets you go to and from different markup formats.
Yes i am using jquery and thanks i will use this code
https://en.wikipedia.org/wiki/List_of_screen_readers Accessibility in SPA is **hard**. Make good use of aria-live elements, ARIA description attributes, HTML landmarks, ARIA landmarks (role). You have to practice with a screen reader to understand how painful it is when accessibility is a failure. You also need to know the frustrations blind users encounter and how to provide a more usable experience. An important thing I learned just recently is that aria-labelledby attribute can refer to multiple id values.
cheerio is pretty sweet, just used it on a side project. felt very jquery-ish so it was trivial to implement. name is great too as i love cheerios cereal!
Yes in a class based odds are that your entities inherit behavior, although this is less common now. You should check out Entity Component Systems instead. Could work terrific in JavaScript:)
Yes, classes are comming in ES6. The reason for this is beyond me, it really isn't necessary and I think this really adds to the confusion of JavaScript. I don't think adding a bunch of stuff to a language just because people can't learn how the language work is a good idea (or will, of course it takes time to learn new concepts when all you know is classes because e.g. Java, I've been there myself). There are a number or great features in ES6 but classes isn't one.
This is how I usually handle inherit with prototype :) function Parent() { this.age = 5; } Parent.prototype.update = function() { this.age += 5; }; function Child() { Parent.apply(this, arguments); // Parent constructor! } Child.prototype = Object.create(Parent.prototype); Child.prototype.update = function() { // Override Parent.prototype.update.apply(this, arguments); // Call super function }; var test = new Child(); console.log(test.age); test.update(); console.log(test.age); Edit: Some comments
The developer, who made 99% of the commits to the Remarkable, just moved the code to another repo.
Look at the commit history. The repo owner has made 1 (one) commit (edits to the readme). The primary committer just moved the code to another repo due to [the dissention](https://github.com/jonschlinkert/remarkable/commit/89c2c9f261a358c388ee32a44afd94110f47f1db) with him. See also http://talk.commonmark.org/t/markdown-it-high-speed-pluggable-parser-for-js-with-commonmark-support/977/
Cheerio is really excellent for interacting with webpages; you can also use it to automate form-related tasks by sending `POST`s and scraping what you get back. (Shameless plug for my [`better-pastebin` Node module](https://github.com/Hydrothermal/better-pastebin), in which I used Cheerio for exactly that.)
The reasons aren't beyond you. They're many if you want to look for them. Peoples' inability to learn JS was not among the reasons, either. I'd suggest familiarizing yourself with the proposal's justifications before forming opinions about it!
Looks like a butt-plug.
A Christmas butt plug
Well, Markdown is a plaintext-to-HTML syntax. It's simply a way to structure HTML content in a way that's convenient to write and edit. A tool that converts Markup to PDF needs to make the exact same assumptions as if you convert Markdown to HTML to PDF. HTML in turn is just a markup language itself. In fact, it's one of the most used standards for markup. It doesn't, however, define how the content should be *rendered* (with a few exceptions) unless you parse the document and use the semantics of it to apply styles (for example using CSS). So it's not really a hack, it's the most standard way to go about it. However, just rendering HTML to a PDF isn't possible without interpreting the markup and making decisions on styling. That's probably where it's going to be hacky if anywhere. 
Must be single-use.
A singleton butt plug. 
The Yule Logger^TM
That is a reason - to make it easier to write code everyone is already writing today in an extremely verbose way. In that sense it doesn't change anything about how JS is used. However, there are many other reasons why classes are good. Presented without elaboration: * useful for all built-ins and libraries to agree on a class pattern because it allows them to interoperate better (eg. one library can extend another library) * gives you a place to add annotations, visibility modifiers (eg. private state), and other such ornamentations in the future * super keyword, which is difficult to emulate without lots of code and performance degredation * support for subclassing built-ins like arrays. Custom elements will be implemented by subclassing DOM elements. * Static-side inheritance without having to proto-twiddle yourself.
Meteor allows you to include anything you want into head. Just add a head tag to any of your html files and you are done: &lt;head&gt; // anything you want is here &lt;/head&gt;
There is no difference in JS between obj.property and obj["property"] &gt; why I shouldn't hardcode damage and cooldown I tend to change these quite often when balancing the game, so having them in a config object makes it really fast to modify. At least faster than going through the code and searching for the right spell. &gt; what you mean by attach it to your state [State is a standard object in game design](http://gamedevelopment.tutsplus.com/articles/how-to-build-a-jrpg-a-primer-for-game-developers--gamedev-6676#state) that is responsible for creating the game world, adding heroes, enemies, backgrounds, etc. It usually contains references to every object it creates and every object has a reference to it's parent state. It is one of the ways to communicate between objects, other being events/signals. Now back to your game. Am I correct by saying that: * Hero has stats, spells, items and buffs * Items and buffs affect stats * Spells depend on stats There is only one sane way to avoid obj["stats"] and use obj.stat. Objects are copied by reference in javascript. Example: var Hero = function(){ this.stats = { int:{ amount: 10 }, str:{ amount: 5 } }; this.spells = []; this.spells.push(new Spell(10, 10, [this.stats.int, this.stats.str], [2, 0.5])); }; var Spell = function( BaseDmg, Cooldown, Values, Ratios ) { this.baseDmg = BaseDmg; this.cd = Cooldown; this.values = Values; this.ratios = Ratios; this.update(); }; Spell.prototype.update = function() { this.dmg = this.baseDmg; for( var i = 0; i &lt; this.values.length; i++ ) { this.dmg += this.values[i].amount*this.ratios[i]; } }; // Testing var hero = new Hero() console.log(hero.spells[0]); // dmg 32.5 (OK) // lets change hero stats and update spell hero.stats.int.amount = 15; hero.spells[0].update(); console.log(hero.spells[0]); // dmg 42.5 (OK) hero.stats.int is the same object as the hero.spells[0].values[0]. So when spell is updating, it is looking up hero that created it stats. That's the result of objects being referenced not copied. I hope this helps at least a little bit :)
CDN is not an appropriate name. This video is about building an HTTP caching server. A CDN requires multiple servers distributed around the word. The purpose is to serve content people as fast as possible by shortening the physical distance to the server and using the best connection. Additionally, there are push CDNs where a developer must upload files before requesting. There are pull CDNs which are in spirit of the original post/video (i.e. when content is requested, if it is not cached then fetch it and cache it, otherwise serve cached version). Please don't spread misinformation, it makes frustrating situations for the rest of us to clean up.
That's cool! Your source code does look kinda like a butt plug, BUT... the rendered Christmas tree and twinkle effect are both fun! Regarding reusability etc- this code was clearly minified and then shaped into a butt plug, so get off the authors ass!
You need to stop referencing that your portal was made with "ajax" because ajax satands for asynchronous JavaScript. So your portal is already using JavaScript. If I read correctly, your site Also already uses a JavaScript framework so your question is rather vague. If you're looking to just update the way it looks then I'd recommend checking out one of the other subs like web design, css, et al. Depending on the complexity of your portal, it may or may not be that "easy" to update but we have nothing to reference or base our answers off of.
fs.writeFile(util.inspect(object), "file.txt", ...); or use pipes to pipe console.log output to a file from cmd...
&gt; I tried with JSON.stringify(object), but it doesn't go down on the whole structure and hierarchy. Wat? That would be a serious bug in a central feature. Smells like user error.
Functional on mobile, but not mobile friendly. I would have expected a responsive design. 
http://www.reddit.com/r/webdev/comments/2qbc9m/how_to_save_the_output_of_a_consolelogobject_to_a/cn4xmw2
Surprisingly related to the [butt plug gnome](http://upload.wikimedia.org/wikipedia/commons/6/6a/Rotterdam_kunstwerk_Santa_Claus.jpg).
This. Also, you can add plugins to different templates/views by using event helpers. So you can define global vars and functions in a global.js file (I put mine in the lib directory). Then you go to your events.js script Template.appLayout.rendered = function(e,tmpl){ globalFunction(); } So in that example every page that uses the app layout gets the global function applied. I believe OP needs to just look into meteor more.
Ok, you didn't allude to the many varied use cases for classes so I wanted to make sure you're aware... but it's more than state, and every addition adds complexity so I'm not sure why you don't object to any new addition at all, even functional ones. Anyway, TC39 is completely agreed that classes are a good idea. There is literally no dissent. Maybe you know better than them, but Javascript is fundamentally an imperative language and will continue to improve its imperative capabilities. Doesn't mean TC39 can't make functional patterns easier, too, but it's too late to make JavaScript a purely functional language.
Obviously you can't expect JSON.stringify to save functions. You could stringify them manually if you wan't but then you are probably doing it wrong either way. A better solution would be to save a type field and instantiate objects from that information. And circular references won't work if you use the console either. You would need to restore the circle manually when you read the JSON data back. But that too seems like the programmer not knowing what they are doing. Better to Structure that data without circular references in the first place, possibly by connect to objects with an ID rather than a direct reference. The whole question reeks of a novice programmer asking the wrong question, and no-one questioning *why* he would want to solve his problem in a certain way.
Really cool. I can think a few places to use this.
Had to be built in a week and didn't have time to make it fully responsive and guarantee a stable product on mobile. The video canvas was the hardest part to make responsive. We are planning to launch yearly and will be responsive next year. 
This Internationalization API addresses a small but quite useful portion of communication complexity, making it easier to produce locale-sensitive web applications.
Safari
Caching array lengths is sooo dumb to me. I mean people seem to do it a lot so maybe I'm the crazy one. But it just seems like such a silly thing to do. It's like a superstition.
And yet it omits a very important aspect, which is parsing. I really don't get why they didn't make the specification "two way", so that it included parsing as well as formatting.
I just used the chrome internationalization API today, and so far it seems like a cool solution for translated texts.
There's no need to cache array length anymore. Browsers do it automatically internally these days. 
That and, as this article points out, if there is a call in the body of the loop, a bounds-check might have to happen anyway. So the length caching is not doing anything there either.
What should this do? 
It's either incredibly poorly built, or it's some kind of scam.
using md5 for password storage is joke..
http://blog.unicode.org/2014/12/cldr-2601-maintenance-release.html#links An update to CLDR 26 has been released, only for the JSON format of the data. **Some of the JSON data from CLDR 26 had corrupt identity information, which has been fixed in this update.** The XML for CLDR 26 remains unchanged. Refer to http://unicode.org/cldr/trac/ticket/8018 for details. Uni~speaking **;)** about the universe and thought.
`;` terminates any previous expressions that left out a semicolon. The next `(` is the start of the self-executing function declaration. IIFC.
Wow. I'm so glad this author only deals with V8 because this is pretty poor advice for web developers. For the rest of the world, we have to deal with SpiderMonkey, Chakra, Trident, Nitro, and JScript. Any JS developer worth their weight knows to program to the slowest engine's capabilities. So V8 caches the array length for us. Does JScript or Chakra? Does V8 also cache the length of `HTMLCollection` like we get from `getElementsByClassName()`? As soon as he started out bashing for-loops and praising `Array.prototype` methods, it was evident that the author only benchmarked on the latest engines running on desktop computer (which was confirmed later on). To completely throw out mobile as a testing platform was also ridiculous. Slower engines and slower platforms are where you're going to see problems with the author's preferred iteration methods. Let's think about this in terms of map-filter-reduce. If I do this with `Array` methods, there could be at least 3 loops through the array plus the expense of creating `n*3` (where `n` is the number of elements in the array) variable objects for each function execution. On older engines without a JIT, that is exactly what will happen. If I do a map-filter-reduce with `for(;;)`, I can do it in one pass of the array and 0 extra variable object creations. Back to caching the length, some engines (notably JScript) make property lookup very expensive. This cost goes up with things like `HTMLCollection` which, in some browsers, calculates the length of the live collection every time it is accessed. Caching the length in those engines makes perfect sense. TL;DR: If you can control what engine your code will run on, by all means use V8 and trust its internals. For web developers, we have to look at the slowest browser with wide-spread use and program with it in mind. EDIT: I either didn't read well enough the first time, or something was lost in translation. See the reply below from /u/mraleph about the true meaning of his Christmas message, which I endorse.
That's untrue. `getElementsByClassName()` and others return an `HTMLCollection` that is live and will change if the DOM is modified so it cannot be cached. Also, host objects that act like arrays don't actually have to conform to `Array` (by spec).
I have to assume the article was more geared towards Node developers, which doesn't concern itself with the DOM. Otherwise, I agree with you that the author's advice would be bad if you're targeting the browser.
I don't know about ES6, but in the current draft, all numerical values are floats; so, you'll have to be wary of all the pitfalls that come with standard floating point numbers. Just as to not scare you, you shouldn't have to be concerned if you're performing basic arithmetic (addition/subtraction), but be forewarned that (10/100+1)*100 !== 110; however, (10/100+1)*100 === 110.00000000000001. EDIT: formatting
Baby steps?
Correct on both counts. Same reason many libraries begin with a `;` at the start. (Also, I needed two characters at the top of the tree to keep the middle even.)
I gathered the article was demonstrating the perils of premature optimization, which goes for V8 as well as older mobile engines. TL;DR don't do stupid things like caching length or eschewing Array.prototype methods before you've benchmarked it.
It's primarily a Javascript thing. I'm not certain for the reason why, but I think it has to do with the fact it's dynamically-typed, JIT-compiled, and its compiler needs to have a smaller footprint compared to other languages since it lives in the browser.
I strongly recommend reading up on floating point arithmetic. It'll answer pretty much any question you have about this topic and it's pretty interesting too*. To answer your question, though, it does happen in every language, as long as the numbers are floats
Author here. &gt; So V8 caches the array length for us. Does JScript or Chakra? I would argue that it's not about V8 at all. It's rather about having a relatively good JIT vs. not having such JIT. In fact SpiderMonkey, Chakra and V8 these days are much closer in terms of how they optimize things then they were 3 years ago. Modern versions of these engines *all* sport sophisticated tiered adaptive compilation pipelines. As I say in the post: if your code is running on a slow interpreter - then certainly caching array length is the right thing to do. Likewise if profiling shows that caching is a good thing to do - then do it. Just don't base your decision on microbenchmarks - base it on understanding what those engines really do. &gt; Does V8 also cache the length of `HTMLCollection` No, it doesn't. Though arguably it should. The post deals *only* with arrays. In general V8 could be doing a better job optimizing DOM related things. &gt; As soon as he started out bashing for-loops and praising `Array.prototype` methods Well, no. That's not what this post is about at all, e.g. I am well aware that `Array.prototype` methods are *dog slow* even on V8 compared to plain `for` loop. They are dog slow even in the simplest use patterns and certainly there are no sophisticated optimizations happening with these patterns either (e.g. V8 will not do something like *deforestation* and fold away temporary array allocations). However in a lot of cases it does not really matter whether you use a single `for`-loop or use `Array.prototype.*` and create a whole bunch of temporary arrays - because majority of your application time is *spent somewhere else*. That's why my post contains a big red line saying "profiling and extensive code analysis showed that caching improves the quality of the code". The one and only advice I give to people is to *understand what is happening* before acting on any advice they are getting instead of blindly applying it. I would argue that's this advice of mine is not that poor, won't you agree?
&gt; It's primarily a Javascript thing. No, not it's not. Any programming language implementing IEEE floating point numbers which includes C, C++, Java, Python, Ruby, PHP and loads of other languages have this problem.
Looping on an array-like object that can change mid-way through is a risky thing to do anyway.
I thought he was talking about having a difference in floating-point numbers and integers. Sure, all languages have floats, but when you're dealing with the integer domain, you no longer have to worry about the problems that arise from decimal math (outside of rounding issues). In Javascript, ints and floats are treated the same, and this is almost exclusively a Javascript thing.
Yet in some situations, it has to be done. How is one supposed to interact with an `HTMLCollection` without looping over it?
&gt; I thought he was talking about having a difference in floating-point numbers and integers. Ah, I didn't read it that way but in retrospect, I could see it going either way. That being said, in languages without arbitrary integer support i.e. PHP, _large_ integers often "degrade" to floats.
Yeah, English can be confusing sometimes.
And, of course, I could have checked the domain name and saw that it was you. Your Google talk on micro-benchmarks is one of my favorites.
**⚷** and I saw the lock **;)** 
You are a life saver. Thank you so much again for taking the time to write it all out and explain everything, I couldn't be more grateful. Thank you, thank you, thank you =) 
Parsing is a hard problem so was put off from V1. V1 addresses the majority use cases, hopefully someone will champion parsing for V2.
I'm trying this out in a project.
I found that this talk was very interesting in regards to state management and how MV* is different on the web client-side than it is on the desktop client-side. Enjoy!
 ;(function(i){ 'use strict'; [].map.call(i, function(element, index){ index % 2 === 0 ? i.removeChild(element) : ''; }); return; })(document.querySelector('#yourElement')) There you go! One without jQuery. 
can you tell any case for my knowledge plz?
Almost every language will have this behaviour if you opt to using floating point numbers. And if you want to store arbitrary real numbers, that's probably what you'll use to do it. However, almost all languages (that aren't javascript) give you a way to state that a variable is an *integer*, meaning that that kind of behaviour will not occur. However, if you're doing math with integers, 10/3 = 3, not 3.33333...
I use [cheerio](https://github.com/cheeriojs/cheerio) for server-side HTML manipulation. 
Why would we throw out the entire ecosystem of tools that have grown up around the spidermonkey AST? (esprima, estravers es-*)? What's the compelling reason behind a competing AST format?