That's not gonna age well
Fantastic!
&gt;Seriously, if you want to create a good web app, you just ignore the existence of IE/Edge. Those people should suffer. This is the correct answer. LoL 
Hard one to explain to non-JavaScript people
One thing that worries me is that developing a framework-like solution may just look too abstract for him at this stage. It is a jump from "make a TODO app", "make a 2048 game", "make a Solitaire" to something like "make a state container that updates virtual DOM, diffs it with actual DOM and renders". It can probably make sense after several days of explanations, but I just feel like this is a sure way to lose interest.
He knows what he did.
This is exactly what I needed! Do we have for FB Messenger or the Line App？
Perl people might wonder what the single quotes are for. Lol
I would have loved to be taught that way. It makes it pretty obvious what frameworks are and what problems they try to solve. Though just to be clear, most of the knowledge that we all had to learn just isn't as important as it once was, that applies to most of the doms functionality: complex data queries, updates via innerHTML, the hacks that made it faster (for instance layout thrashing), and so on. At a certain point your friend will obviously see the troubles we had to face, and with modern abstractions mostly all of it is just an implementation detail that no one would ever have to touch again. Not just that, with a v-dom the target doesn't matter at all. It could render into the dom, using ugly data queries inside, or into a native desktop canvas where different rules apply. 
&gt; good web app &gt; compatible with IE Pick one^. Seriously, though, I was there at my last gig. Our strategy was to prioritize modern evergreen browsers, and to be conservative about polyfilling modern features back to IE 10. The real winning strategy was to come back to execs with periodic updates on: 1. the performance hits we expect from polyfilling back to IE10 (which were very real, and affected all users) 2. the developer time spent debugging/fighting IE (with a dollar amount attached to that time) 3. The % of users that use IE. With those three metrics, it became apparent to business that we should show IE users a helpful "upgrade to Edge/Firefox/Chrome" message and drop support. But YMMV :/
How's this? https://codepen.io/anon/pen/PEXyPY
Doesn’t work on iOS 11.2.2 with Safari 😕
You can't do register-level interrupt handling (ISR) in JavaScript. I never said you can. You can't even do that in a lower-level language that's not designed for bare-metal (e.g. Go). As I pointed out from the beginning, you solve the interrupt problem with "process affinity". The process core you run your real-time JS app won't handle interrupt, while the other core running kernel handles interrupt. This is a very common solution, people even use it to solve the "c10M problem" (serving 10 million connections using single machine). In case you don't recognize, the link I pointed to you is the Linux kernel interrupt handler for x86. Unless you are an embedded programmer, it is an abstraction you use everyday without realizing. Stop pretending "real-time" is some black box, it is just a system of guarantee provided by upstream system you use, whether that system be hardware, OS, compiler, runtime, framework, library. 
Fair point. I should say that while React is pretty fast, ultimately, it is just javascript and it can't perform faster than a vanilla DOM update or even a jquery update call because it has the overhead of the vdom diff engine. It's a worthwhile trade off for a large scale applications, though, since it allows you to not worry as much about your state. 
Wishing for regrets later in life I'm thinking
No, you still have to explain why the fuck you would get that inked
Yes, but I had an old version and then bumped into demo-tamer.js which is much better ;o)
That first suggestion is kind of a contentious one, I used to share that opinion and now I can’t imagine doing that. It makes it more painful to change later. I don’t think there is any speed benefit to doing that, either.
Glad you found it useful! Regarding other IMs, their apps must open its own protocols, so maybe there are docs out there, but I'm not sure.
It works well for this particular small example (thanks, it's useful to look at!), but probably wouldn't work well in our case. First of all, the TODO app involved saving TODOs by sending them to the server, which requires keeping the state separately from the DOM. If your example involved separate state, you would need to do two actions on every change: manipulate the state and also manipulate the relevant dom. I think this approach gets out of hand pretty quickly, especially since our app involved more than just adding, checking and deleting. In our case, after every state change a global `renderAll()`function was called, which basically re-created the whole page using the state as single source of truth. The latter is an important property I would like to preserve.
Cool! Is there a way to make this compatible with web.whatsapp.com? Would be cool for PC users that don't want to download the app.
Okay so I did some research and found some more opensource or free resources: For a general website messenger type chat app: [website chat generic not social network centric](https://github.com/HubSpot/messenger/blob/master/docs/welcome/index.html) This seems to work for Facebook Messenger and opening it up from the website: [click to start FB messenger](https://www.npmjs.com/package/facebook-chat-api) I found the Line App! So easy - thank you google: [the Line App](https://social-plugins.line.me/en/) This apparently does it for Telegram: [launch telegram ](https://telegram-store.com/blog/how-to-copy-a-link-in-telegram/) Hopefully others will add to this list. I should have google this before but didn’t realized what to call this until the article. Thanks
We're looking into it!
Your complaining about IE must never had seen Safari. (Shrug). There is multiple layers of hell 
&gt; Unless you are an embedded programmer I am an embedded programmer, among many other types of programming. &gt;Stop pretending "real-time" is some black box I never said anything like it was a "black box". But I think you have a very different definition of what "real-time" systems do. Javascript is not capable and will never be capable of actual real-time processing. Is simply is not. It's either a fantasy or a relabeling of what real-time systems traditionally are. &gt;&gt;https://en.wikipedia.org/wiki/Real-time_computing &gt;*Real-time programs must guarantee response within specified time constraints, often referred to as "deadlines".* Sure you could say that a guaranteed response in 1.5 seconds is "real-time" as long as that is the defined constraint, but I think that misses the entire reason real-time exists as a thing in computing. &gt;&gt;*A real-time system has been described as one which "controls an environment by receiving data, processing them, and returning the results sufficiently quickly to affect the environment at that time".* This is really the meaning of real-time in computing, and it is something javascript really isn't capable of. Responding to input, *processing*, and then delivering a result in *real-time* is something an interpreted scripting language just cannot do with any meaningful impact on a real-time basis. We're talking nanoseconds, not milliseconds. 
As far as the debugging tools, they aren't that great, but debugging tools haven't always been great so I've dealt with worse in the past. If you can set a breakpoint and step through the code, your debug told are better than what were available when Gmail launched. In general, the biggest barrier to creating something great that works with ie10 is your own mentality. It's a very capable browser. I generally develop with chrome, then test other browsers toward the end. IE 10/11 are rarely the browsers that cause issues. It's mostly Safari. If you are concerned about new javascript features, just use babel and you can treat ie10 like any other browser. In general I think this is a fine solution because I use features that haven't made it into the modern browsers fully yet so I would be using it anyway. If styles are an issue then you won't get to use the full flexbox spec but ie10 does have some flexbox support. If you want to be super-safe just use display: table and display: table-cell or floats.
Just realized it loses it's state too! :( It would need some debugging if you were gonna use it. I don't know... just a quick example of a frameworkless todo that I came up with. Godspeed! :)
Also, `SyntaxError: Invalid character '\u2018'`
Mostly using stack overflow and trial-and-error (yes, this is a serious answer).
There's plenty of room for shitty spec implementations all around! If IE was our top nemesis, then the iOS WebView/Safari wrapper was next in line. There was just an order of magnitude difference between fighting improper implementation of `window.scrollTop` (Safari) and needing to Polyfill `Promise`s.
1. Do not support anything below IE 11 (Microsoft no longer support anything below IE 11, why should you? Unless you are required by law). 2. https://caniuse.com and polyfills 3. avoid anything from ES6+ (unless you get a polyfill or use a transpiler) We have also found that our largest browsers are just whatever is installed on the OS the user is using. The main desktop OSs we see are Windows 10 and OSX. As a result, the majority of our desktop traffic (90%+) is from Safari and IE 11. Since we have less than ~5% of traffic from &lt; IE 10 combined, we just fuck supporting it. As a result we support IE 11, Edge current - 1, Safari/Firefox/Chrome - 2 on all platforms. 
Once you've done the "make a TODO app", "make a 2048 game" and "make a Solitaire", you can then abstract those to become your custom framework. You don't start at the solution when building things like that. You pull out the like pieces that make sense to pull out. If you're looking for somewhere to start, maybe state and updating state, then rendering based off state changes. One thing I've found when I've built things to learn, is that I'll realize I need something and learn about it when it happens. Don't spend a week explaining the virtual DOM unless your friend actually hits a problem that virtual DOM solves. The same goes for a lot of other problems that frameworks solve.
&gt; I am an embedded programmer I find that hard to believe when you didn't mention any specifics, and didn't even recognize Linux kernel code on interrupts, but I take your word for it. &gt; We're talking nanoseconds, not milliseconds. Most interrupt and context switching latency are in microseconds range even for RTOSes, at best you have few thousand nanoseconds. If you need full nanosecond response, you would need to go back to FPGAs or ASICs. You can do microseconds computation in JS. I have done it for a fingerprinting/profiling application. That is harder now, because v8 reduced the precision on the timer last year for security reasons, but you can definitely compile your own v8 runtime and still do it. 
This is a work in progress, and simply used to help me start my own Redux projects. I will be updating it as I see fit (I want to add React Router as well as update the README to explain the skeleton thoroughly). Enjoy!
I believe firebug had a includeable js version for IE. Had to use it to debug angular app under ie8
@roboctocat wow, how come this is not famous? I am looking at the docs, it looks amazin, and so well documented, many examples, beutiful interface. I have been searching for UI Kits for React since maybe 3 months ago, and nowhere have I seen Atlas Kit before. Thank you for mentioning it!
I really like rmwc: https://github.com/jamesmfriedman/rmwc It implements react components that use the new Material Design Components from Google, the successor of mdl. Easy enough to customise and the components make more sense than in mdl.
This HN discussion from a few days ago had quite a few interesting comments: https://news.ycombinator.com/item?id=16159389 It was a slightly different topic, but inevitably some of the (good, long) comments were about this question.
Thanks for your advice, this is something I should think about. In my opinion, we've already hit problems that virtual DOM could solve, but the whole explanation of observable state, DOM diffing and so on is pretty large by itself. I'll need to think how I can explain it clearly without going too abstract.
I use https://restlet.com/ chrome plugin. Quite handy.
Ok to sum it up for ppl who might have same question. so if you get a collection with ClassName, means everything will be behaving normally untill you remove the current class you gathered the collection with. if it was class="a b", you can add any class, but if you delete/change 1 of those it ruins the HTML collection Same with any other HTMLCollection / live NodeList if you gather with getElementsByTagName, you can change class but you can't change the td's, if you try to remove the div, you ruined the collection https://jsfiddle.net/adkuca/c00fqmts/ as it counts you're removing td's, therefore chaning the HTML collection, shrinking it by 1, therefore shrinking the ran.length by 1, so you get half iterations, and you add a new td half less. examine this: https://jsfiddle.net/adkuca/c7jb0es8/
Already outdated. Modules and classes are always in strict mode. "use strict" isn't really necessary anymore.
Hmm I’ll have to look into that
This thread seems to suggest that there is zero performance benefit https://stackoverflow.com/questions/3781406/javascript-variable-definition-commas-vs-semicolons
&gt; didn't even recognize Linux kernel code on interrupts That's really disingenuous. And, Linux is not an *embedded* system. It's an operating system. But you're a troll and you're just saying this to try to discredit me without even knowing me. I've been coding assembly language for 34 years, so fuck off. &gt;Most interrupt and context switching latency are in microseconds range even for RTOSes, at best you have few thousand nanoseconds. Maybe in your non-realtime world. https://community.arm.com/processors/b/blog/posts/beginner-guide-on-interrupt-latency-and-interrupt-latency-of-the-arm-cortex-m-processors Here's a little primer on interrupt latency on Cortex-M CPUs. Cortex-M can respond to IRQ in 12 clock cycles, when it starts executing the ISR. On a 150MHz Cortex-M, that's *80 nanoseconds*. The ISR would take some time, let's say 100 clock cycles or about 660ns. 150MHz is really not even that impressive for silicon these days either, and your suggestion of microseconds response time for interrupts seems uninformed. So no, you don't need FPGAs or ASICs for nanosecond response times. 
&gt; I think this approach would get out of hand pretty quickly, especially since our app involved more than just adding, checking and deleting. Isn't this a good lesson to teach to a beginner though? You don't really understand why the single source of truth/DOM diffing/etc is a good thing until you've suffered the alternative.
Let's say you load register 0 with the word located at address 32. Is register 0 an integer? Is it 2 characters? Is it the upper half of a floating point value? It's **none of those things**. Which one it will be interpreted as will be decided *by the operator that uses it*. If you send it to an integer calculation it will assume the bits represent an integer and act accordingly. If you send it into an fp calculation it will assume the bits represent half of a floating point value (And probably that the other half is in r1). This is a pointless conversation because you don't understand the difference between an operator controlling how a bit pattern is interpreted vs some innate quality (which doesn't exist) of said bit pattern that defines it's type. [Here](https://en.m.wikibooks.org/wiki/X86_Assembly/Intrinsic_Data_Types) is a crappy explanation I found in 30 seconds of googling that holds just as much weight as your sources do. Those symbols you are pointing at are just directives for storing data. Its 100% possible to store as an integer (this is a specific instruction that stores in a specific way, it is not the same thing as actually typing data) into a memory location and then 1 instruction later store the same bits as half of a float into the same memory location (again a specific instruction, *not* actually typing the data). You're confusing specific instructions with actual data types. Data types don't exist at the assembly level. The operator used with a particular piece of data defines how the data will be interpreted. So yeah I'm done with this.
I thought most polyfills act based on feature detection?
"The wasap name is inspired by the way mothers pronounce WhatsApp all around latam ♥” I immediately got the reference before reading this. And then the mexican phone number in the demo sealed it. Muy bien!
&gt; laining about IE must never had seen Safari. &gt; (Shrug). There is multiple layers of hell Seriously why doesn't Safari get a worse rap around here? 
On the other hand, they transpile to Scripts, which do need the directive to kick in strict mode, so maybe in a few years it'll look like an old-timer, close-to-the-metal-bad-ass battle scar.
The number you quote is if you write machine code directly for the CPU. For any OS-based real-time (e.g. PREEMPT_RT), it would be on the order of 1000ns to 10us. I never said JavaScript can run without OS (compile to metal). I never said JS can do nanosecond latency. However there are non-bare-metal microsecond latency real time -- the prevalence of userspace apps running on PREEMPT_RT (or RTAI or Xenomai) is a clear example of that. 
From my pov. polyfiling is quick fix compared to solving ui look and feel issues I have seen in safari. From a Technical standpoint you are correct tho but as there is already good polyfil standard code written it’s faster. 
&gt; just ignore the existence of IE I agree. &gt; just ignore the existence of Edge I disagree.
I'd buy that, for sure. We were very lucky to have a very simple UI and a not-terribly-discerning user base... basically a bunch of forms. If we were building a more interactive/responsive experience, I could definitely see Safari's UI quirks posing more of a problem.
If the server you are downloading from supports byte range requests, you might be able to only request a part of the file at once and re-assemble it through appends manually.
Actually, I think depending on what you’re updating and how much of it, React can be much faster than just updating it in the vanilla way. The virtual DOM allows you to effectively make all changes in one go when ready. It’s much more efficient. 
You'd probably have more luck with this is you posted the code/some explanation.
I'm looking for someone to just have a 1 on 1 chat with that can help me understand 
DM and we'll see what we can do
Glad you found the homage to all our madrecitas!
I knew I was going to get flamed for this lol
&gt; For any OS-based real-time (e.g. PREEMPT_RT), it would be on the order of 1000ns to 10us. We're talking about different things then. Your version of "real-time" is not mine. There is real-time, and then there is really actual real-time. And they are orders of magnitude different. I'm working with real-world physical phenomena that doesn't wait around for an OS to decide to respond. If the system doesn't respond in a specific window of nanoseconds, then the system fails. End of story. Full stop. 10us is a non-starter. This discussion is about what javascript can not do, and one of the things it can't do is actual real-time (my version of real-time). Maybe it can do something approximating real-time (your version of real-time), at several orders of magnitude slower than my version of real-time. And there is no example of Javascript doing anything like this, so your argument is extremely hypothetical and not really based in reality. 
&gt;iOS &gt;Safari Found your problem.
It's still very prominent: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core-vs-jquery Of course that ignores CDN's. In a recent post npm made they calculated growth rates and jquery is getting smaller overall, but far from plummeting. But either way, it's reached its peak.
[r/java](https://www.reddit.com/r/java/?st=JCMFPLGE&amp;sh=07619481)
&gt; This is a pointless conversation because you don't understand the difference between an operator controlling how a bit pattern is interpreted vs some innate quality (which doesn't exist) of said bit pattern that defines it's type. And this is a pointless conversation because you don't understand the difference between an actual _data type_ (as in the computer science term) and the type system a language uses. An SBYTE, for instance - a signed integer in the range −128 to 127, otherwise known as an `int8_t` or a `tinyint` - is an _actual_ primitive integral data type. Have you never wondered why JavaScript's _TypedArrays_ are named things like `Uint8Array` or `Int16Array`? &gt; You're confusing specific instructions with actual data types. Data types don't exist at the assembly level. The operator used with a particular piece of data defines how the data will be interpreted. And this is what is known as not having a _type system_. It is up to the programmer to ensure that the data passed to the operator is of the appropriate _type_, to avoid errors. If you declare a variable as an SBYTE for instance, it's not going to have enough memory for a SQWORD allocated to it.
It's an amazon s3 Fileserver. I don't know if I'm able to do that. But I have been thinking about zipping the file and splitting it up. 
[Oops](https://i.imgur.com/kJXHkCO.png)
Agreed!! My argument is definitely hypothetical and we definitely came from different conception of real-time (or different end of that spectrum). Sucks that internet arguments take a whole day to clarify. I actually appreciate the work people like you have done, as without it, I wouldn't be able to write userland code for my microsecond-latency profiler application. 
Can confirm, broken for me too. That's hilarious.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/javascriptstudygroup] [Audio Recording in safari](https://www.reddit.com/r/javaScriptStudyGroup/comments/7rlucj/audio_recording_in_safari/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
r/javahelp would actually be better
Here's a sneak peek of /r/javahelp using the [top posts](https://np.reddit.com/r/javahelp/top/?sort=top&amp;t=year) of the year! \#1: [\[x-post from /r/learnprogramming\] Books that helped me grow as a junior Java developer](https://np.reddit.com/r/javahelp/comments/6ze1l4/xpost_from_rlearnprogramming_books_that_helped_me/) \#2: [I just wanted to say thanks](https://np.reddit.com/r/javahelp/comments/6v1hqb/i_just_wanted_to_say_thanks/) \#3: [I think I found piece of code which is 8 times slower on java 9 than on java 8](https://np.reddit.com/r/javahelp/comments/7b5erh/i_think_i_found_piece_of_code_which_is_8_times/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I'm sorry but I'm not sure what this offers that the regular API doesn't. This is [my website](https://yamen.pro) If you scroll down to the bottom you'll see social links that you can click and start a conversation with me on WhatsApp or Messenger inside the app and it works with WhatsApp Web too. Is there something I'm missing here?
I would much prefer some more investment into iterators... A standard library for iterators with those utility functions would work on all iterables... We don't have to reimplement map on every type that will exist.
I don't know what those are but perhaps this will help: https://www.gatsbyjs.org/blog/2017-10-03-smartive-goes-gatsby/
Not much, just that when I click it on my desktop, I get «the address wasn't understood». Also we found that even on mobile, on some devices that link will not work, so it's better to use directly the link to the protocol if you're on mobile, which wasap.js checks out of the box.
But you can load the needed polyfills dynamically and only add to the load time of older browsers. It's particularly easy using a bundler like webpack. Also if all you're trying to do is polyfill the native promise you don't need to bundle bluebird. There are thinner alternatives
yeah i was going to say this, we load most of ours dynamically now based on feature detection. We even built our own super small polyfill library that has choice additions
https://stackoverflow.com/q/41091495/2015433
ES2015 modules
Ignorance is your problem.
Uh...does it really import the entire lodash library for a handful of functions?
Replace it with socket io
Is this based of the old Symbian S40 Whatsapp communication protocol? Will this be future proof?
http://www.earthclassmail.com are scamming people.
thunks are easy to test, because they are functions
Unfortunately, there is bad thing - generator instances doesn't inherit from`%IteratorPrototype%`, so majority of user land iterators would fail. This is probably solvable with [protocols](https://github.com/michaelficarra/proposal-first-class-protocols) though. 
Reviewing GitHub repos is a great idea! https://github.com/schempy/platelunch Generate boilerplate unit test code from source files.
you should check out ramda.js, this seems to me like you might be reinventing the wheel here. Good work though, always like to see FP on this subreddit.
Before reading into how important thunk is, keep in mind that this is the entire source code for it: function createThunkMiddleware(extraArgument) { return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; { if (typeof action === 'function') { return action(dispatch, getState, extraArgument); } return next(action); }; } const thunk = createThunkMiddleware(); thunk.withExtraArgument = createThunkMiddleware; export default thunk; 
A few questions about the pen plotter and your work. First, do you like the axidraw? You're using it, it's priced at the top of the line. Do you feel it's worth the $500.00 dollar price tag? Second, where do you see this development going for you professionally/personally? It's impressive. I guess I'm wondering why you find this fascinating or to what end you're developing this stuff...
I'd use double quotes.
No really, safari is trash.
This is awesome! I’ll find a way to put it in a project soon. Congrats!
I love jQuery still for smaller projects, but I wonder what type of future it has because of libraries like Vue, React and Angular.
needs to be converted to telegram. ;)
The other hand says 'never forget'
Nice thing.... Thanks for the code... Great work...
Speaking from very recent experience (was doing this last week), Safari is fairly difficult to deal with in terms of audio recording, much worse than Chrome. The best results I could get was to use https://github.com/ai/audio-recorder-polyfill. One caveat though: it stops working for no apparent reason after sixth time (you can even see that in the demo) and I could find no information about this problem on the internet with the exception of vague mentions of Safari allowing no more than six audio contexts per page or something like that. Also, it records in a format that is different from Chrome and Firefox, so you’ll have to deal with that, too. 
Thanks so much! I have asked all over the internet and have not been given any work around. I guess I will just have to notify users on iOS devices about possible problems. I am currently making a practice band log which could feature audio recording. Is it possible to upload files on mobile safari? Or, should I just scratch the idea.
Yes, it is possible. One possible approach would be to record the audio, convert the audio blob to base64-encoded data url, then send it to the server for storage. The major problem with this is the fact that Safari records in uncompressed WAV which will give you very large files as compared to WEBM or MP3. There should be a way to get the raw stream and encode it into MP3 on the fly, though. But if you'd ask me, I would say that a tool that deals with large number of arbitrarily long audio files should not be browser-based, it should be an app (native, or cordova, or whatever). This way you will have access to filesystem and better recording options. 
Community Edition of Visual Studio 2017 is free: https://www.visualstudio.com/vs/visual-studio-express/ Menu-&gt; Debug | Attach to process | vType: JavaScript | attach to iexplore.exe :)
I was thinking the same thing. Like C++ style algorithms where you can have free functions [map](http://en.cppreference.com/w/cpp/algorithm/transform), [reduce](http://en.cppreference.com/w/cpp/algorithm/reduce), [filter](http://en.cppreference.com/w/cpp/algorithm/copy), and many more that can all generically operate on arrays, queues, linked lists, sets, trees, hash tables, and anything else that provides iterators.
It’s the new IE 6
Okay. Thanks. I don't think I will pursue audio recording then in my band practicing webapp, because I don't have a mac to write ios apps. I guess logging practice times will just have to suffice.
Hi /u/Developer_Friend, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Dude are you a senior dev or something your a beast!
Consider focusing on Chrome to realise your original idea, and offering a dialed-down version for other browsers, maybe? 
Ahh. TIL... 
I have done this once or twice.
next.js is for applications and server side rendering, gatsby creates static pages.. theses are not the same dude. 
[removed]
I would look into d3.js At the least I think you should look into svg. 
Especially when "lodash/do" exists. Not to mention the linked module has some mutation going on which could ruin your day.
Just detect mousedown/touchstart, mousemove/touchmove, and mouseup/touchend?
[removed]
Comparing it than to native Javascript controls which get better and better :)
It’s like “protected mode” for the web. 
You seem to post a lot about Onsen UI. Is this your own project? All I mean is, your title makes it seem like you are a casual user who has suddenly stumbled upon and become addicted to it, but you've been posting about it for 10 months. Best to give full disclosure, if this is something you are personally involved with. Or don't, I'm not the police!
Build a portfolio site with it, then come back and post it.
Works great with React, I'm messing around with it. Very simple setup. Love it
do people do manual dom manipulation in frameworks? then i dont see the argument because you're not gonna forego a framework to use jquery. right? meaning jquery is actually being directly outmuscled by modern js frameworks
Still mustache templates, but all your css will already be inlined so you are ready to send them much easier
There's a lot to unpack here. JS is single-threaded by design. But you can design the program to work asynchronously, using callbacks or promises. That is, kicking off jobs to run in the background, and then doing something to complete the task when the background part is finished. You can use any nearly UI library or framework to make the interface in the screenshot. Is this a web app? Desktop? Mobile? CLI? As for the progress indicator, I'm not sure.
It will be a CLI application. It is easy to put the top part in, but then as you are traveling through options, the bottom part would move also. It would be ideal to make that it's own module that has it's own state and just sticks to the left bottom part of the screen. Do you have any particular cli based UI libraries in mind? Thanks
This, I've had great success using firebug in the past
Nothing last forever
Hmm, I've only used Inquirer, which was alright. Why not look at these lists: https://github.com/agarrharr/awesome-cli-apps, and look for node based ones. Then look at the source code of the ones you like. Or this list https://github.com/sindresorhus/awesome-nodejs, look at the command line apps, command line utilities sections. Good luck and have fun!
Hmm, I've only used Inquirer, which was alright. Why not look at these lists: https://github.com/agarrharr/awesome-cli-apps, and look for node based ones. Then look at the source code of the ones you like. Or this list https://github.com/sindresorhus/awesome-nodejs, look at the command line apps, command line utilities sections. Good luck and have fun!
I've done a few small cli tools for work. For "multi-threading" you can use child processes or clustering, both of which are built into node. For the display in a terminal, I use https://github.com/chjj/blessed with https://github.com/yaronn/blessed-contrib
Wow that makes no sense ... Maybe cheerio.js ?
I can't think of really any sites I go to that doesn't have jQuery. 
At the moment, I'm trying to implement it using a div table with 1 row. I did look into d3 (3 years ago) and it didn't look like it would be suitable for timeline-like data. But d3 is very big. I thought about svg but haven't looked into it much. Will do! Thanks!
I can easily remove the lodash dependency. But it seems like what I built was really already done by lodash and ramda. It was still fun though.
Good luck supporting legacy browsers. 
Yes, similar to python's itertools &amp; the like. Not everything needs to be a method. 
What others have said is true: thunks allow you to remove async code from your component logic, and what you have said is also true: you can fetch your data before your action and dispatch the result when you get it. *However* I think the best way to think about thunks is this: thunks allow you to dispatch functions that in turn dispatch other (multiple) actions. So perhaps you've run into cases where you have a number of actions that you want to call in a row: onClick() { dispatch(getBowl()) dispatch(getMilk()) dispatch(getCereal()) dispatch(eat()) } And you start to copy/paste this code everywhere for other buttons where you want to allow cereal to be eaten. With a thunk you can pass a function that does this every time instead: // thunk export const eatCereal = () =&gt; dispatch =&gt; { dispatch(getBowl()) dispatch(getMilk()) dispatch(getCereal()) dispatch(eat()) } // And in your components you can simply: onClick() { dispatch(eatCereal()) } The real fun comes in though when you need to dispatch multiple async functions in a row: export const login = (email, password) =&gt; async dispatch =&gt; { dispatch(loadingStatus(true)) const token = await fetch('endpoint', {email, password}) dispatch(getPosts(token)) ... } And now, in any component you can simply: onClick() { dispatch(login(email, password)) } ...and you'll know that the loading status will be set, posts will always be fetched, and now you don't have to litter every component with async logic whenever you want to handle a login click.
thing* :facepalm:
https://github.com/Contiamo/redux-track I made this to use redux with an event tracker. Would love feedback.
...why on earth would you do this? You would be much better off simply starting from scratch (if this was meant to be a learning exercise), or instead picking one of the hundreds of SSR React boilerplates available.
I wrote an article a few years back for multithreaded JS. The concepts are still relevant. http://benhowell.github.io/guide/2014/06/20/multithreaded-javascript-using-nashorn Code: https://github.com/benhowell/NashornMultithreadedExample
Here's the API docs for how to spawn and control processes in node. It's somewhat similar to web workers https://nodejs.org/api/cluster.html https://nodejs.org/api/child_process.html
mouseDown + mouseMove + mouseUp works as I expected, thank! However, when I click and release the mouse button and then move the cursor, `mouseMove` triggers. So, that is not like a `dragging` action. Any ideas to prevent `mouseMove` from firing when the click is released?
Just use the pattern attribute. This is so ridiculously unnecessary.
If you are familiar with React there is a neat project called Ink. It’s like React for the command line. https://github.com/vadimdemedes/ink
In case anyone asks the same question I did: [Wtf is thunk?](https://daveceddia.com/what-is-a-thunk/)
Sure, you can use these things but why do you think it's easier to make a round trip to the server and re-hydratate the state again from the sessionStorage? It seems to be more work, not less. Not to mention that your server won't contain pure API methods anymore but it will need to handle the UI concerns now. Moreover, you will have to synchronize the persisted data on the client with the contextual information that will inevitably come from the server. Basically, you will have no true master of the context...I feel that it's much easier to handle specific concerns at one place instead of multiple. If you can do all the UI related things on the client then I think that the codebase can be more cohesive and clean. 
If you start a project from scratch, you can use a boilerplate that offers you everything. But for projects already created with CRA, this article shows you how to simply implement SSR without ejecting, without adding more dependencies and without rewriting the entire app on top of another framework / template / boilerplate / starter. And finally, CRA is maintained by FB developers, it has a great community and support built around it, unlike the other "hundreds of SSR React boilerplates available".
It looks like you are concerned mainly with the data synchronization / concurrency / consistency. It's hard to discuss this topic without knowing your use cases. For many scenarios this is not an issue at all. However, if your app is highly concurrent then it's a really difficult problem no matter what approach you use.
This seems amazing!
Will that work on iOS?
Welcome to the world of tattoos
https://www.tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript/
It is still incredibly useful to thousands of companies who still have to support legacy browsers.
`import {select, selectAll} from 'd3-selection'` for domestic manipulation is all you need. That or just Vanilla.js
I like that they included a detailed support detection section. https://developers.google.com/web/updates/2018/01/paintapi#browsers_that_dont_support_paint_worklet https://ishoudinireadyyet.com/
Unless he's already in a stable relationship, I'd guess that would have reduced his chances of mating by about 35%
Yep, legacy browsers 
Does the `F.object` I wrote have an equivalent in ramda? I can't find something like it
I didn't know about ishoudinireadyyet, that's awesome
If I'm not mistaken, `buttonClicked` [should receive the `tab` object](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/browserAction/onClicked) you're after as its argument. (The example at the bottom of the page logs out the current tab's URL, if the permission is set)
lol
Glad you like it! It's moving slowly, but we are getting there. Share it around! Speaking of, I should probably collect articles there as well...
https://app.rtms.events
https://caniuse.com/ Is a more general and older website with a similar purpose. 
Yeah but I always love those specific websites, like Jake Archibald's https://jakearchibald.github.io/isserviceworkerready/
I was more talking about something like Browserify
I was talker about something similar to Browserify(I found out about this on another forum)
I like the AxiDraw, it's a great piece of engineering. Yes, it's expensive, and obviously not for everybody's taste. There are other plotters that are much more affordable, although perhaps not as convenient and robust. Mostly I create plots to learn about geometry, computational design, and generative art. It has also introduced me to other areas of interest — next I'd like to apply my code to CNC milling, laser cutting, 3D printing, etc. I don't think it will ever replace my full-time work, but one day perhaps I will be able to sell occasional prints made with AxiDraw or similar numerically-controlled devices.
This question is now everywhere and every other thread have 100s of solutions available., Here is explanation of one of the solution https://conceptf1.blogspot.com/2018/01/javascript-are-1-2-3-equals.html
Totally missed it! Thanks a lot!
Ishoudinireadyyet.com is supposed fulfil the same purpose, but for the time before a feature is added on caniuse.com (for example, AFAIK, CSS Paint still isn't listed on caniuse because as of now no browser has it in stable. Chrome will be the first come March). I'm collecting signals and development state most of all. And of course, I'm limited to Houdini APIs :D
Because many peole use it JUST for dom selection and toggle a class on click. You really dont need Jquery for that.
this is so useful, i got mad after seeing the first `Set` proposal without useful methods like `union` and `intersect` 
https://github.com/albinotonnina/react-parcel-jest-babel-boilerplate-2018 a boilerplate that uses the new Parcel bundler, as a closer to 0 configuration alternative to Webpack :)
Why am I not surprised that it’s parcel?
#2 could use some work. It advocates: stub.throws('some error') stub.returns('actual result') To more closely represent what is going on, this should probably be: stub.rejects('some error') stub.resolves('actual result') And for the errors, it should probably be `new Error('some error')` instead of a string. `rejects` and `resolves` were added in sinon 2.0 Also, it still uses regular functions for the `it` blocks - these can also be async functions and you can use them in tests as well. Mocha supports returning promises so works very well with `async` and `await` e.g., it('should handle errors', async () =&gt; { let result = null try { result = await someMethod() assert.ok(false) } catch (err) { assert.equal(result, null) assert.ok(err) } }) it('should work properly', async () =&gt; { const result = await someMethod() assert.ok(result) })
That is the latest fad. Not to dismiss how good it is, but it makes sense why.
Has webpack fallen out of favor?
To be honest it’s been a while since I worked with it so I’m not sure if there are actual recording functions but it will most definitely make everything you need to get the input and output for the recording set up easily. https://developers.google.com/web/fundamentals/media/recording-audio/ That may help as well
Working on boiler plate app for AWS Cognito, React, and bootstrap. It is called Cognito strap. Here is an running example: http://cognitostrap.org/ Here is the code: https://github.com/baus/cognito-strap Definitely appreciate feedback from anyone into serverless development with AWS
To tell the truth I still to this day have not been able to figure out the point of it myself. I wish someone would tell me. 
What does "thick" mean? 
Hmmm that makes me more compelled to use it. 
I hate reddit's code thing with the 4 space indents I prefer Github's ```
Arbitrary file reading and writing would be a huge security hole allowing malicious actors to do all kinds of nasty things to a person's computer just because they visited a website. Its not a horrible feature of the language it's a security measure. Javascript, as a language, can handle arbitrary files if you run it outside the constraints of the browser. Node, for instance, can read and write files. Also quick note html 5 added the ability for the browser to open and read files but they must first be selected by the user. You can't access files a user doesn't specifically grant access to. Usually this is done with an input element and drag and drop.
But do you really think, just because some COULD do something malicious, that they would. 
it would make it much easier to build a feature I am trying to build. 
Yes absolutely. Security 101.
Er... Yes?
You have to consider that browsers allowing arbitrary file access would be a lot more of a problem than it is for a locally-stored Python application (or whatever) to have the same ability. You visit dozens, maybe even hundreds of different websites on a daily basis. Would you really be okay with each and every one of these having completely unguarded access to everything on your device? Malware like CryptoLocker wouldn't even need to rely on tricking the user into downloading and running an executable, you would just need to click the wrong link _once_ and you'd be done for. Also, keep in mind, this is a security model that exists in more than just browsers. Android also requires you to explicitly grant permission to storage before you can touch it, for example, though this isn't quite as strict as the restrictions browsers put on file access. &gt;Is this one of those horrible features of the language? No, because even if you assume this is a bad thing (which it isn't), this is a feature of browsers, not the language itself. You can access arbitrary files in Node just fine.
&gt; Future is the same like past. It's a dom manipulation library, and you are comparing it to application frameworks. That's my point. You erroneously assumed I was comparing them. Vanilla JS learned a lot from jQuery throughout the years and if it continues to do so, then I don't really see a future for it. A lot of its nice syntactic sugar could easily just be added to regular JavaScript.
You're saying that any website you visit should be able to read and write to your files? I think you should take a break and think about that a lot.
This article is pretty poorly written. https://twitter.com/pyrolistical/status/954900159623708672
Have you considered a career in comedy?
./src/components/Button/index.js which re-exports ./src/components/Button/Button.js and does nothing else gives you the best of two worlds.
dem clicks
True, but then you have the inconvenience of an extra `index.js` file to maintain (presumably by hand) in every directory.
All you need is `shift()` and `push()`, nothing else. `shift()` removes the first item *and returns it* (so assign that to oldItem -- you don't need `slice()`), and `push()` adds to the end. Don't reassign `arr` to anything, just call `push()` on it and don't do anything to the return value. Then return `oldItem`. Good luck!
If there was a solution that had no drawbacks, we wouldn't be having this conversation, would we?
That made me chuckle. Maybe you **could** be a comedian.
It would also be easier to do if browsers implemented a `heyDoThatThingINeedToDo` function but sadly TC39 refuses to discuss it.
vue-models, a Vue.js plugin for building models that benefit from Vue's reactive data, schemas from JSON Schema, and a familiar API https://github.com/nickforddesign/vue-models
Thanks! 
Just looking through your post history, and you really have a knack for methodical experimentation. Keep up the good work man. I like it. 
Definitely a good thing. Not taking into the developer of websites/apps themselves writing malicious code, hink of all the websites with xss vulnerabilities, and them imagine visiting one where that vulnerability could access all the files on your PC. No thanks.
Cool tip. That cursive font gives me cancer though
True, it's all about weighing the different drawbacks against each other.
Change `src='/jqtest.js'` to `src='jqtest.js'`. Having a `/` at the beginning tells your web browser to look at the top-most folder of the server on which the website is hosted. You probably don't want the top-most folder.
Another user removed their comment, but it went away once I removed the "/" before the script...
And comment two is whinging about it.
I think I like what you're getting at here but I'm having trouble visualizing it. Do you know of any open source projects that do this well?
Yes, it's horrible cause i can't steal secret, personal files from all visitors to my website!
Yo!, I came back to this, I am trying to make it exactly like jQuery just to play with it. In jQuery we don't send in 2 arguments in function and `this` is set to the target element. ``` function addDelegateEventListener (context, event, selector, callback) { context.addEventListener(event, function (evt) { var matches = getMatchingDelegateTargets(context, evt.target, selector); for (var i = 0; i &lt; matches.length; i++) { var test = callback.bind(matches[i]); test(); } }, true); } document.getElementById('outer').oncontextmenu = function() { return false; }; outer = document.getElementById('outer'); addDelegateEventListener(outer, 'mousedown', 'div', function (evt) { if (evt.which === 1) { this.style.backgroundColor = 'red'; } else if (evt.which === 3) { this.style.backgroundColor = 'blue'; } }); ```
So, if you invoke Array(5); that will crate an array with five empty slots?
This webpack plugin might help: https://www.npmjs.com/package/directory-named-webpack-plugin
[pls no shoot messenger](https://i.imgur.com/TcAtUxd.png)
/s
Agreed, but slower too. Usually this doesn't matter but it's good to know both ways.
Not quite the stack you'd expect in 2018.
This is a bad example because array access of an index that isn't defined ill return undefined. In your example replace new Array(5); with [] and the behaviour will be the same. Try with t.map(console.log); to illustrate your point.
That should work fine. What error do you get?
getting this error: Controls.js:19 Uncaught TypeError: Cannot read property 'pause' of undefined
You need to bind your handlers.
Thanks! Wow can't believe i missed that. 
Well, then your `counter` is `undefined`. Seems that you are passing it incorrectly to the constructor.
contributors would be appreciated ;) I need some help to make it work in the browser. I've never migrated a node project to the browser.
I'm guessing JS is your first language, or more bluntly, you don't know how to program yet. Programming and language are two different things. Once you know how to program (that is, think like a programmer) you'll quickly adapt to new languages. Much like knowing how to drive vs which car do you drive. I said that because I want to help you "the right way" and not just spit some solution. If you'd rather have the solution let me know and I'll step aside. What you want to achieve is relatively simple, so it's good enough to start thinking like a programmer. As a rule of thumb, about 80% of the energy/time spent on a particular problem should be thinking, imagining a solution, and the other 20% righting and making sure it works. Sometimes we jump too fast to the coding part and we end up lost in the middle with a horrible code and time wasted. So let's think about this: there are two sources of information, each can have different values. Depending on the combination of those, you need some sort of phrase to show up. Now, don't hang up on the details (how to make it appear in the web and whatnot, that's a minor thing) and try to come up with a pseudocode script. This would be an example for a game I'm working on: for each friendly player if his health points is 0 or less, then call dead function on that player else, if his health points is less than 100, then call offer medkit function on that player I hope it makes sense. It was a half assed examples but you'll find lots of pseudocode examples. From there to code is an instant. Let's see what you come up with.
According to the esmodules spec in node, your imports are supposed to be valid urls so one could say that if you have to import an esm like `src/foo/index.mjs` you should be consistent and extend that reasoning to your `src/foo/index.js` import. Depends how much of a good boy you want to be. http://2ality.com/2017/05/es-module-specifiers.html#how-do-module-specifiers-change-with-esm
Oh I thought it was like some new slang meaning "good". It reminded me of this: https://youtu.be/i4QYvXpaXlYl
This should be the top comment
I use this ugly one whenever I need to generate something. E.g. a 2D array or something like that. &gt; Array.from({length: 8}, (_, i) =&gt; 2 ** i) (8) [1, 2, 4, 8, 16, 32, 64, 128] If JS had something similar to Dart's List.generate, it would look like this: Array.generate(8, i = &gt; 2 ** i)
Yes. &gt; new Array(5) (5) [empty × 5] In V8, this currently produces a sparse array instead of a packed one. So, it's something you probably shouldn't use for a game's tile map and things like that. You get a packed one by creating an empty one and then pushing values to it.
Why do you think this is more readable than a single method call?
Eggheads was great: https://egghead.io/courses/react-fundamentals 
I'm pretty sure it errors in any browser (that's why you always use `console.log.bind(console)` when passing console.log as a callback).
I can almost hear DHH's excitement
But since he used length property of the array the values are defined....to..undefined. correct me if in wrong, but simply replacing the array ctor with [] would not work since the [] does not state any length?
Angular does this. Check out the [packages in the repo.](https://github.com/angular/angular/tree/master/packages)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [angular/angular/.../**packages** (master → 86d9612)](https://github.com/angular/angular/tree/86d96122305087626fbb5ae94e38ff9082a2a083/packages) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt0d42d.)
Nice trick. I use something similar when i want a dummy array to iterate on: ``` new Array(8).fill(1) (8) [1, 1, 1, 1, 1, 1, 1, 1] ```
It used to be like that but IIRC both Chrome and Firefox now pre-bind the console methods.
I’m a n00b dev and this is a really helpful tip. 
Can you explain?
I think example is good. Index is iterated from 0 to array length. On the other hand using `map` on array created with `new Array(5)` would have no effect (`new Array(5).map(console.log)` would not even call `console.log`). 
This is a compiler. A compiler transforms code from one grammar into another, which is precisely what this code example does. Perhaps you are thinking of an interpreter which executes code into an expressed output.
not familiar with the use of the underscore, what does this do?
How is this not a (very simple) compiler? 
It’s a variable name like any other, but convention usually is that it’s an unused parameter. Rust and I think Haskell even have that built into the language, so you can have multiple of those in the same function declaration.
What color theme is this?
It's even uglier in ES5 :-) &gt; Array.apply( null, Array(8) // or {length: 8}, but it is slower because apply // is faster with true arrays ).map(function(_, i) { return Math.pow(2, i) }) [ 1, 2, 4, 8, 16, 32, 64, 128 ]
What are sparse and packed arrays?
Here's my standard advice for learning React: The article "A Study Plan to Cure Javascript Fatigue" ( https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1 ) is a great place to start. It gives an excellent series of steps for tackling modern Javascript concepts one piece at a time: Javascript, React, ES6, and state management. There's also a "Front-End Study Guide" based on that article that's very good, at https://github.com/grab/front-end-guide . On that note, definitely don't over-complicate the learning process by trying to learn many different things at once. Some people will say you should use a "boilerplate" to learn React, and they're wrong - boilerplate projects almost always come with too many pieces configured, and are confusing for beginners. Instead, the best advice is to focus on learning React itself first. Once you have a good understanding of how React works, you will better appreciate why a state management library like Redux can be useful, and you can learn about other tools later. You should start out by reading through the official React docs and tutorial at https://reactjs.org/, and I'd encourage you to use the official Create-React-App tool ( https://github.com/facebookincubator/create-react-app ) for setting up projects. It creates a project with a solid build setup, with no configuration needed on your part. There's an excellent post called "Simple React Development in 2018" ( https://hackernoon.com/simple-react-development-in-2017-113bd563691f ) that gives some more specific instructions on the actual steps to follow. For an even simpler setup, CodeSandbox ( https://codesandbox.io ) is an online editor that lets you build entire React projects right away. Past that, I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. It includes links for learning core Javascript (ES5), modern Javascript (ES6+), React, Redux, and much more. I also published an "Intro to React (and Redux)" presentation at http://blog.isquaredsoftware.com/2017/02/presentation-react-redux-intro/ , which is a good overview of the basic concepts for both React and Redux. Finally, the Reactiflux chat channels on Discord are a great place to hang out, ask questions, and learn. The invite link is at https://www.reactiflux.com .
https://v8project.blogspot.com/2017/09/elements-kinds-in-v8.html
I think at that point you're better off using a simple for-loop to populate the array.
It's only config-less so long as you only want the default config... And then you need to add a config file, meaning it's really convention over configuration.
I’m a touch confused. How is it that you expect to learn JS if someone else writes the code for you?
cool, thanks
Demo won't load on Safari, the example on Github looks cool though :) 
Yes. Yes they would. Heck, I would write 4 malicious websites personally the next day arbitrary file access would become possible.
&gt; But Controls needs access to the state inside Counter. &gt; When i figure that out, handleSession will increase/decrease Counter.state.time. Doing that simply goes against the idea of having two different entities. When you design a structure you need to know why. The goal of having two separate things is that... well, they _are separate things_. If you have an entity called Counter, whose mission its fair to assume that is managing and keeping track of some piece of data that represents a count or time, then that entity -the Counter- needs to be _fully responsible_ for that. If you let some other external entity -your Controls- happily manipulate `Counter.state.time` then... what _is_ Counter for? It won't serve any purpose at all. Designing the system to have two separate entities should mean something _like_ this: - We have a Counter entity. This Counter models completely and on its own the whole logic and behaviour related to managing or keeping track of the time. That is, we'll design an entity that: * has an internal property, which, say, we will call time * has an external API (a bunch of methods) that expose which actions other entities can require of it. e.g. Reset the timer, pause or continue, etc. - We have a Controls entity. This manages the input events processes them in any way that's needed and _calls_ Counter's API to execute actions on it. What happens _inside_ of Counter is of no concern to Controls. Note that this second point about Counter is an API, not _free access_ to the internal `time` property. An external entity should be able to call... counter.reset(); ...but it _shouldn't be able_ to do... counter.time = counter.initialTime; It usually helps to actually start designing from that external interface, not by thinking about the internal workings of the entity. So... We could think our `Counter` is something that can be used like this: let scrumCounter = new Counter(15); scrumCounter.start(); scrumCounter.stop(); scrumCounter.reset(); Once we have this and are satisfied enough that this is what we need from the Counter, then we start writing the actual implementation. We might have an internal property `running` that represents whether the timer is active or not. _Or we might not have it_. But whether we have it or not, this doesn't change the external API. And that is the important detail: That Counter's internals _should be of concern only to Counter_ and no one else. Your Controls entity, should never be able to do something like `counter.state.time = ...`. The Controls entity should never know where the Counter stores its information, or even that it has or doesn't have an internal `time` property.
https://jsfiddle.net/adkuca/rdrekqk2/2/ learned .call .bind :D
I see. Apologies if I came off as harsh, wasn’t meaning to. I’m on mobile right now but if I have a chance later on today I’ll see if I can whip something up for you. Assuming you’re just using vanilla JavaScript? (No jquery, React, etc)
not a problem at all :). I do have respect for good code (I coded a bit in C back in my university day) I am just squeezed between things to pay attention too. If you could give me a hand it would be more than appreciated. Yes, plain JS that I'll implement on plain HTML with no CSS. 
I agree in principle, but in practice it’s a different story. Standardizing your catch blocks in a functional style can improve the readability in code. 
These are probably your best bet. Clear, methodical and complete https://tylermcginnis.com
It is. The definition of a compiler is ["software that transforms code written in one programming language into another programming language"](https://en.wikipedia.org/wiki/Compiler). This takes a made up arithmetic stack-oriented language (albeit a impractically small one) and produces Javascript code. Sounds like a compiler to me. Judging from the "both are just very simple expression evaluators" comment, he probably missed the `transpile` function, which does the code generation. Or maybe he's assuming a non-turing complete language isn't a language, but that's not true of e.g. Datalog. Or maybe he's starting from the notion that compilers should produce assembly, but that's not the case for e.g. `javac`. There's also no requirement for a source language to be practical (e.g. brainfuck). Maybe he just wants to shit on other people's work to feel good about himself (the irony). Shrug. 
I see, I will read the article again will try to re-consolidate. I'll see what to do about the update part. Thank for your feedback.
this was an excellent summary. thanks!
Mocha Master
this is not true in my experience. I code a lot and yet didnt know these concepts. When I'm working on a project, my mind set is to complete a task. I don't ask why or how. Guess what? was asked these questions and failed. It was the interviewer trying to be clever. not me. You can't answer truthfully if you don't understand fundamentals.
Writing games for consoles isn't as easy as just compiling. You need to look into the game development process Short answer: absolutely not
Stephen Grider has some great content on udemy if you are more interested in videos. If you want to do more of a reading situation, checkout The Road To React which is a fantastic book for getting started and understanding vanilla React
Its weird i'm too retarded to find the way to extend a react.component in order to add default props. I want to have riotJs type "if" "show" component don't like react conditional at all. I know it works with HOC, but i don't like how they are made or used. 
What does ** sign mean? Never met it before.
&gt; We're not going to remove ASI support, or break compatibility with the existing code Well, not a single application would stop compiling if the -&gt; operator in C++ would keep being supported like it is now, but new features e.g. in C++20 would require different syntax... To make it a proper comparison in line with the proposed handling of ASI. 
Interview questions that revolve around cleverness or obscurities works from the principle that a good candidate can pass them _despite them being terrible questions_, not _because they are good questions_ (even if the interviewer thinks they're awesome). Learning about the various aspects of JS with the mentality of "outsmarting a clever interviewer" sort of misses the point. People that pass those interviews are able to because they possess curiosity and proactiveness beyond just doing the search-on-stack-overflow-copy-paste-refresh-rinse-repeat-till-it-works cycle. You can fake that proactiveness to a certain point, but eventually you plateau because the list of things you need to learn to progress further won't be given to you in a golden spoon from your favorite internet forum anymore. If we were to make a cheesy analogy, just learning whatever js thing someone told you to learn to ace interviews is being given a fish to eat, and being curious and proactive is learning to fish. To be clear, there's nothing wrong with not having the interest to learn CS fundamentals on your spare time. Not everyone needs to be an overachiever Elon Musk, and that's ok. For most people just getting by in some big corp with no knowledge of new.target or sorting algorithms or whatever is just fine, (and no, I'm not being sarcastic).
Down on chrome too.
That's what call does. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
Hidden magic is a bad thing. Instead of utilising transferable skills to see what's being done explicitly, you have to memorise the conventions of every library.
Literally the same as Array.from but how it was done in es5
So your saying call adds methods to an objects prototype and that is how it is able to call those methods in that context. So call() can be thought of as extend()?
This is a really nice question. I have no experience with Nintendo Switch but from what I gather it is compatible with the unreal engine. Maybe something like Unreal.js is worth pursuing? I don't know if V8 will be packaged but I don't see it being hard to implement an interpreter for JavaScript (famous last words). Even at ES5 level, it could prove very useful. Maybe we'll see a React Native Nintendo Switch, who knows.
Thank you, I'll check it out
For default props just add an object with your defaults to a class property called `defaultProps`
Thank you so much, it's seems helpful I'll check it out Thanks
Thank you 
You might as well cal it what it is in case some junior dev comes along and starts using it.
This is a nice guide, but we don't really test for 90% of these in our interviews, nor have I ever used 60-70% of these in real production code (Object.freeze? Hoisting? implicit conversion of types like in the intro?).
I think the blog author wrote that code in an unecessarily complicated way. It's not call() that adds methods, and it'd probably be simpler if you didn't use call() at all. Here's an alterative version that's probably more understandable. All I did was pass an ordinary argument rather than try to set "this". var asCircle = function(someObject) { someObject.area = function() { return Math.PI * this.radius * this.radius; }; someObject.grow = function() { this.radius++; }; someObject.shrink = function() { this.radius--; }; }; var Circle = function(radius) { this.radius = radius; }; asCircle(Circle.prototype); var circle1 = new Circle(5); circle1.area(); //78.54
I would argue that interview questions like these really work from the principle that the interviewer has too many candidates and needs a random filter to remove 90% of them.
Nice. I played around with a similar idea in 2015 before I finally decided to actually try out React. Ultimately, though, React is simply a fundamentally better approach for defining UI components and composing them.
That is if he has written the component in question himself. If he uses a third-party component and wants to use a version of it with default props, do: import React from "react"; import SomeComponent from "some-library"; export default (props) =&gt; ( &lt;SomeComponent defaultProp1="defaultValue" defaultProp2="defaultValue2" {...props}/&gt; ); And use this component instead.
*x-post from /r/webdev I cloned a mobile game called Calculator from Simple Machine LLC to a web version. The game is playable at https://nervous-austin-d4b8ec.netlify.com/ and source code is at https://github.com/ehkoo/calculator. I think the key point here is to apply the concept of curried functions into practice, and although I'm using React, the game logic itself is pretty framework-agnostic and can be built with any UI libraries or just vanilla JS.
For better or for worse
Well not really. Call() is simply a way to call a function defining what its context i: `asCircle.call(Circle.prototype);` You are just running the asCircle function, but `this` will be `Circle.prototype`. So, inside the asCircle function, you have things like `this.name = ...`, then it's being added to the Circle.prototype object.
It's easier to comprehend because it's more explicit.
Looks like a similar niche to StencilJS - how does it differentiate?
As a small note: I see in your reducers that you're using `Object.assign` like this: case ActionCreators.FETCH_TOKEN_REQUEST: return Object.assign({}, state, { ...state, isFetching: true }) That can actually be simplified, because the object spread operator already acts like `Object.assign({}, otherObjects)`. So, it could just be: case ActionCreators.FETCH_TOKEN_REQUEST: return {...state, isFetching : true};
The Switch ships with a WebKit browser, though this is used exclusively for authenticating with social media (posting screenshots to Twitter, for example), and there's no way to escape this page or navigate elsewhere. You'd be fine developing desktop games by wrapping with Node Webkit, but for console don't bother. It's a headache enough to port a JS game to CocoonJS or Cordova to a mobile device with heavily supported and generally available SDKs. If you want to target desktops/consoles and everything in between, go with Unity. 
Hey max. Thanks for your descriptive answer. As I responded to rco8786 below, I appreciate coding and the philosophy (so to speak) that goes into it. As the moment I have just been resolving other priorities and that is why I resolved turning to reddit. Great tip about the pseudo code. 
&gt; console.log(2.0 == ‘2’ == new Boolean(true) == ‘1’) No. Just no. If anyone asks you this in an interview, you should turn around and walk out. You should never write code like this. Especially on a project that you are working on with other people. Why? Because 99% of developers will have no idea what you were intending to write. It doesn't matter how correct the code is, if another developer stumbles upon it and is trying to figure out what the code is trying to do they are going to waste a ton of their time. I don't care if it's super fancy and it saves 10 lines of code. Readability is way more important.
&gt; I don't ask why or how. I think you ought to change this habit. 
In my last interview there were things I did not know. I do not know the differences between bind, call, and apply. I was really quick to put that answer out. I never use these in my own code, because I personally believe they are hacky and unnecessary. Even though there were things I did not know, since I don't claim to know everything, I still had a stellar interview. It isn't about knowing everything. It is about determining whether the candidate is competent enough and a good fit for the organization. Unfortunately, that is all software employment has because it doesn't have any sort of licensing or accreditation process like every other professional industry. If the interviewer is competent and experienced it is pretty easy to separate people into groups: seniors, contributors, copy/paste jquery coders, and people who don't need to be there.
Hoisting isn't something you use. It is always there and cannot be turned off (at least in the case of functions). Having an idea of how hoisting impacts code execution is a completely valid interview question.
sure. At the last place I worked, things move very quickly. I am trying to slow down. But I don't always get to the bottom of how each language works being a student whose focus is to get a variety of experience. I do dive deeper into how algorithms work, just not always frameworks or languages.
This! This answers my question. I understand call and use it often, but the use of it in this case does make what it is doing difficult to understand, while the code you wrote explains it perfectly. Thanks.
&gt; You should never write code like this. Then that is your honest answer to the question. Don't be shy about it.
&gt; bind, call, and apply They are pretty fundamental to JS though. I mean how do you use classes / components without ever coming across .bind ... it tells me you are either fairly new in JS or your background is a different language and are unnecessary opinionated - your "I personally believe they are hacky and unnecessary" comment points to the latter. I wouldn't hire you.
No where in that statement is === used.
If someone tells me "hoisting is not something we use in production" it's a hint that the interview should be over... wtf
I was expecting a shitty article about `a == 1 &amp;&amp; a == 2` but these are actually the things I looked for last year while interviewing candidates at an SF startup. I never asked about `regex` or `error handling` as those in my mind should be hidden away in a team-decided abstraction instead of ad-hoc ways but I can definitely see if I expected the candidate to write those tools to understand them. I'd say that the underlying thing that this article is advocating for is a deep understanding of the fundamentals of the language and this I **greatly** support. The only thing I'd add to this is that instead of just learning the words to be able to describe to me in code an example of what they mean. Example: I don't really care if you understand the `MDN` page on what `Promises` are. I instead want to see you use them in a way that shows you understand them. So instead of : const getUser = url =&gt; new Promise((res, rej) =&gt; fetch(url).then(res)) you would instead just return `fetch`: const getUser = url =&gt; fetch(url) 
Any time, chum.
And this is why I will probably never use it. My web projects are too complex for anything less than custom, programmatic solutions. Data-driven is not sufficient, so config-less or convention are definitely not good enough.
I was actually going to reply with: "A perfect guide to cracking a JavaScript interview: KNOW JAVASCRIPT". But your reply basically says the same thing in a less snide way, so let's go with yours.
Maybe I'll take a look at SVG. The DIV table didn't work well. http://www.timmahrt.com/samv/textgrid_div_table.html SVG seems much more promising: http://www.timmahrt.com/samv/textgrid_svg_table.html
Where do you call your method? 
I'm pretty proud of myself that I got it right. But still, I got it right because I find obscure trivia interesting, not because knowing obscure trivia has any effect on my ability to write good JavaScript. Neither the JavaScript Abstract Equality Comparison Algorithm, nor operator precedence for multiple `==` in a row, is something any good JavaScript developer should ever need to know, because it's not something that should show up in good code ever. Like, at most, it'd be useful to know that `undefined == null` and neither of them `==` anything else.
&gt; Or you could use the the support Unity engine that supports JavaScript Unity doesn't support JavaScript.
I don't get why you'd want to do this in react
&lt;button onclick="functioneating()"&gt;&lt;/button&gt; Like this. And i did check everything a few times but could not spot a mistake. Is the scirpt correct? :o
A JS developer. You don't know Chad?
Is it a separate js file or do you have an embedded script tag? It’s not the best way how you implemented it but if the html is correct and your gif file can be found, it should work. is it in the same folder? 
What's the difference?
Yes but _why_ - that's a very legit question. And it separates the experts who can _define_ best practices from those who can merely follow.
Responsive grid UI with Preact.js: https://codepen.io/bydeinon/pen/RxqNvX
Thank you! I will try that :)
Good. At least we agree on something.
Thank you man, problem solved!!! Very happy about that. Thank you for the swift answer and help! 
Just because you shouldn't write code like this, doesn't mean you shouldn't know how to read it. If you spend time reading and working with other people's code, then you see loose equals being used. You need to be able to work out if it's a legitimate use, and if so why, or if it's just bad code. If you know what type coercion is and have experience working with other people's code, this is a trivial question. There's nothing wrong with it.
It's not configless, just that that everything configurable now has sensible defaults. You wouldn't get far just running webpack without configs, it might just be enough to get the most basic things going, but for everything else you'll create a config, though it will be smaller because again, some things default to very efficient results (mode: development/production go a long way). Running webpack the betas myself, configs have gotten way smaller than webpack 3's while taking less time to compile and decreasing bundle size, the next upcoming beta will go even further and remove the need for common-chunks because everything's done automatically.
Yay! I made a post about this months ago and I am happy to see this actually come into practice. 
Chad over at the IT department I reckon.
If you have worked with it before you know they expected you to get familiar with internal gibberish that made no sense at all. Getting "chunks" right with esoteric settings, worrying about "scope hoisting", etc. Getting a really lean bundle often meant brute forcing settings over and over. At this point most of the settings had no relation to your actual project. They're finally getting this right. Configure what you have to, but at last it does its very best to squeeze the shit out of the resulting bundle.
&gt; In my last interview there were things I did not know. I do not know the differences between bind, call, and apply. &gt; If bind, call, and apply were the difference between whether I gained employment Why should I hire someone who don't understand code written in my team?
I like it. Makes the code more clean and less crowded
Solid addendum, thanks for covering my ass 
Hmm interestingly enough I tested some features in Chrome Dev tools and it seems call does not override arrow functions. Whatever context those arrow functions where created in, stays forever. So this means that for object literals, `this` will always be the surrounding context. And for constructors `this` will always be the instance object created when `new` was called. 
Tried https://www.npmjs.com/package/babel-plugin-jsx-control-statements yet? Otherwise, what's so bad about the hoc, it would do exactly that in a lean functional way: const CanHide = comp =&gt; class extends Component { static defaultProps = { hide: false } render () { return this.props.hide ? null : &lt;Comp/&gt; } } @CanHide class Anything extends Component { render () { return &lt;div&gt;hi there&lt;/div&gt; } } &lt;Anything hide /&gt; 
The problem domain is largely irrelevant to a solution outside of some UI/UX decisions. Understanding how 'why' drives 'what' is far more useful in my experience. I rarely if ever have a need for another developer that doesn't know what they're doing other than whatever they threw at the wall seems to work. Learn your craft.
Who cares if *you should* know how to read it? Asking this shit in an interview tells you nothing about how good they would be if you hired them. If a team is uses questions like these to determine who they are hiring then I do not want to work on that team. Period.
Wes Bos has a great course on ReactJS. https://wesbos.com
That's just not true. "Regular" JS: constructor () { this.method = this.method.bind(this) } method () { return this.property } ESNext: method = () =&gt; this.property Most modern projects use Babel or TypeScript where you're highly likely to have access to this syntax. If you don't, it takes about a minute to Google or just find how it's been handled by those before you (assuming context of this is important virt everywhere e.g. in React). The only other circumstances in which I've encountered those methods is in legacy code that didn't utilise rest/spread, but again, it takes only a moment to check MDN and see what they do. 
Looks nice, I just really don't get how any UI framework doesn't have a datepicker built-in. Maybe that's a nit
I'd never write code like this (nor should anyone), but the principles involved in solving it are good to know when rooting out bugs.
Very high.
The most probably answer is that the recruiter asked a developer for some sort of screening process and something was lost in translation. The recruiter probably knows that Java and JavaScript are different languages but probably isn't a developer who can tell the difference by reading code or simply didn't look at the test. Go talk them and mention the problem.
a domain of the problem surpasses any programming language.
What do you use for date pickers, numeric inputs, etc. that are almost always necessary?
thank you. it scares me why posts like this one isnt rated higher in this sub.
It shows knowledge of type coercion and experience reading code. Two qualities that are good to have in a hire. It's one question, not the be all and end all of an interview. There's nothing wrong with it. You've also said that you'd use one question to determine who to work for, which hilariously hypocritical. Saying you'd out of an interview solely over that far more stupid than asking it in the first place. 
HTML 5 standard inputs are actually fine for my needs, I just use bootstrap to make them look good (I don't need fancy stuff and don't really need to support older browsers) 
Sometimes...the community...is wrong
woah. seems so. any idea how i can fix that? 
 console.log(2.0 == ‘2’ == new Boolean(true) == ‘1’) syntax error?
No one is gonna ask you a regex question in a JS interview. 
did u include the file in your html..need details when u say :not working"
I think what he meant is that the question is to show you understand type coercion and the implications of using `==` instead of `===` A good answer wouldn't be "don't write this" or "that's ridiculous" the interviewer is looking for "that would evaluate to true because JavaScript will coerce the values. To avoid a scenario like this you could use the strict equals to avoid coercion and produce more readable, reliable code" 
I don't believe I ever said that, and if I did it's not correct. I start off with one simple coding question that they should be able to solve in 5 minutes. That's just a litmus test. If they get past that easily, I ask another question with a lot of depth. I make sure to walk through runtime complexity, problem solving, algorithms, scaling, data structures, security. It's always a discussion between me and the person I'm interviewing, and I always ask meaningful questions that let me probe to see how they approach problems and solutions. There is no programmer that knows everything about every language, framework, and technology out there. All of them evolve daily, and best practices and technical details change constantly. What you are doing when asking questions like this is asking a trivia question. I care that they have the skills to solve whatever problems comes their way. That they can architect a solution that's readable and testable. What happens when they start working on a new project that's written in a different language? Or another JS project that's written using a different framework? You can't expect everyone to know the details about every single language nuance. It's better to expect that they are smart enough to tech themselves whatever they need to know to deliver quality software.
Array(5).fill() output undefined 5 times.
You're being dramatic, it's a question that tests your problem solving and your understanding of type coercion in JavaScript. If you whine about it the interviewer isn't going to say "oh boy he's right" he's going to say "wow is this how he handles everything he doesn't like, is it how he solves every problem?" You make your answer a solution, "this is true, this is why it's true, this is why it's not good code and this is how you fix it" You're giving terrible advice, it's not indicative of production code, it's an interview question.
I don't know, I was just worried about pissing him off I guess. After reading these responses I probably will just ask "Hey, did you mean to send me a *Java* assessment?"
Oh nice. I always get some lame requirement to support IE
It's not some esoteric part of part of the language, it's pretty fundamental and common. It's not even dressed up to be confusing, it's stripped back and to the point. It's basically shouting "this is type coercion and loose equality". I'm sure your process is just fantastic, but sometimes people want to hire an experienced JavaScript developer, and an experienced JavaScript developer should know what type coercion is. If you want to know "do they know what type coercion is", this is a pretty obvious way to ask it.
There's another convention to name it as you normally would except prefixed with `_` to show it's unused.
Your "ESNext" example is a Stage 3 proposal which will _probably_ become part of the standard but isn't as yet https://github.com/tc39/proposal-class-fields Some companies look for developers who can also survive outside the React bubble... &gt; Most modern projects use Babel or TypeScript They are two different things. TypeScript is _not_ JS, by definition &gt; If you don't, it takes about a minute to Google /facepalm I'll try that at my next interview
It's just the "smart" quotes
&gt; Your "ESNext" example is a Stage 3 proposal which will probably become part of the standard but isn't as yet Sure, but the chances of it dropping out are small, and if that happens your transpilation tools will continue to work for a while. Lots of companies worried about stability are using TS where they've had it in since pretty much day one AFAICR. &gt; Some companies look for developers who can also survive outside the React bubble... Says it all that you think React and similiar libraries are just a bubble. &gt; They are two different things. TypeScript is not JS, by definition Did I say otherwise? What relevance does this distinction have? My point was that most are using one of these two tools to code in JS or a close superset of JS. In the former you're likely to have this functionality and in the latter you certainly will. &gt; I'll try that at my next interview I feel sorry for the potentially great developers you'll reject at the next interview you conduct because of your preconceptions about people who dare to live just a little ahead of the curve for good reasons.
But if he really didn't know the difference he would just still say 'Yes' to that... still thinking he send you the JavaScript one. Hence why you have to differentiate that he sent you the Java one instead of the JavaScript one.
OK, I'll phrase it like "You gave me a Java test for a JavaScript position, was this is a mistake?"
We'll that's fun. I've really only used Unity a handful of times since I'm not overly interested in game dev, and the part that actually does interest me is creating the engine.
Being an engineer is more than just using the latest shiny tools to feed one's ego and feel "ahead of the curve". The fact remains that most JS code TODAY uses things like bind and call etc, and if you want to be considered a solid developer and more than just a hipster you better know them inside out. Which doesn't mean you need to use them in your code - but refusing to acknowledge them is just arrogance.
make a game, you can learn networking, graphics, security (anticheat), input handling, event handling, mouse handling, 3d/2d graphics, filesystem, entities, oop, filesystem.
That's what recruiters and screening software is for. Tech leads have better things to do than be dealing with spam resumes and the like
This is the funniest strawman related to programming I can remember.
Browser cache maybe ?
TIL! `Array.from(Array(6), (_, i) =&gt; i + 1)`
Wha'ever, fam
I actually ran into a similar problem today and my best guess is that you need to either be running 2 processes on 2 servers or using gulp with webpack if you want to compile and live serve with 1 process . 
vuescroll doesn't support scrolling on mobile phone now(It will support in the future), and it uses the [vuetify](https://github.com/vuetifyjs/vuetify) UI framework which supports the Safari9 and higher :). Please make sure your browser is above the Safari9. :)
 console.log(2.0 == ‘2’ == new Boolean(true) == ‘1’) Only sensible outcome from this is a linting error for using ==
Look, that's great and all but being opinionated is exactly how you get booted out of an interview. They want someone who will conform to their methodology easily, not someone who is going to be a loud stuck gear. If they ask you this question you take it at face value and answer it. If they wanted you to answer it in some clever, nonsense way then you gtfo because it's going to be a terrible work environment.
*Why* Because JavaScript is a stupid language. 
&gt; I personally believe they are hacky and unnecessary FWIW, this comment strikes me as coming from someone who does know a thing or two about using dynamic scoping where you should really be using lexical scoping. I can never remember the order of arguments in some PHP functions and I always have trouble remembering if the method I want to use is called `shift` or `unshift`, but that doesn't mean I can't use them. &gt; how do you use classes / components without ever coming across .bind You should try to ask that question in an open-minded non-rhetorical way. Having seen arguments from both sides, I think it's actually an interesting discussion.
`this` is a pretty fundamental part of the language though. It's not like the JavaScript "test" I just took on Upwork that was a bunch of ridiculously obscure trick questions that I just typed into a console rather than trying to work out in my head. Stuff like (not an actual question but representative): var a = Boolean('-1') == parseInt('37.45', 7).toString() ? (new Function('a', 'b', 'return a &gt; b ? Boolean(a) : typeof new String(b)')(4, 5)) != typeof [1, 4, 7].map(it =&gt; it.toString()) ? 15 : 'foo' : 12 
&gt; The recruiter probably knows that Java and JavaScript This is the least likely scenario in my experience.
What’s the convention when they’re are multiple unused? _1 and _2 ... etc?
I'm surprised CSS and C++ aren't confused more often.
I would do both. This way people who don’t have a google account or people who don’t want to use their google account to sign in can still use your web app. 
I wouldn't hire you.
I've heard people confuse C# and C-Plus before.
I read somewhere yesterday that people were using delay method to post pone the sass compiler. I see if I can implement webpack. There must be another solution to this??? 
JavaScript is multi-paradigm. I promise you can write large advanced applications without *this*. I have done it several times, and I also promise that not using *this* will result in substantially smaller code. There are two things about this language that I really like (well three if you consider that inheritance and OOP crap are completely optional and avoidable). JavaScript has native lexical scope and functions as first class objects. If you code to the strengths of the language you don't need all the convention-based garbage that you think you can't live without. As far as your code sample the `new Function` and `new String` are bad form and the rest is a deeply nested ternary.
A programmer who is also the ladies man. 
I know Chad, I was just seeing y'all knew Chad.
You should probably have a native speaker edit your articles.
FUCKING CHAD REEEEEEEEE!
Yes, that's what I usually see.
I totally disagree. The interviews I've had were after technical tests and paird coding sessions. The interview should be the place where you express your opinion. Honestly I don't see the value in making people answer tricky technical questions in the interview. There are far better ways to learn what someones technical ability is.
&gt; can I get away with just using google's signin Only things I've ever seen doing this were toy side projects. And usually the first comment is something like "Ew, why do I need to use facebook/google/whatever to login? No thanks". So yeah, do normal auth.
Sadly i can't test it on safari, that's why :(
You can't piss off a recruiter like that. They want you to get hired on order to get their cut. 
One of the main differences between Ozjs and StencilJS is that Ozjs doesn't need any bundler (still needed if you want the script to run on browsers that doesn't support ESM) for your scripts to run. StencilJS also use JSX and a virtual DOM, while the templating in Ozjs isn't using any virtual DOM and instead of using JSX, it's using native tagged template literals (It's the same kind of technique used in lit-html but in a way that allow you to modify more things than lit-html like element tags, properties, events...) I just looked up at StencilJS so i don't know all of the differences but that's the main ones i saw from their docs
I usually just make them longer: `(_, __, ___)`. It's extremely rare it'd ever get longer than that, since the whole point is that it's unused. It's not a convention I follow, but leading underscores are frequently used to say that a function won't be exported/set as a class method, so you know it's kept "private". `_2` reads a bit too close to that.
A good question would present the issue in a reasonable context, rather than throwing shitty curveballs intended to confuse the candidate. IMO, questions like that are pretty disrespectful. I also question whether they're valuable - is a developer who's good at language-specific trivia or "algorithm bingo" a good developer? --------- We are writing an expense tracking app for the customer. When the user enters an expense, they are presented with a number of different categories to split the expense into, such as travel, lodging, entertaining clients, etc. One expense may be split into multiple categories; for example, a $1000 hotel bill might be charged as $800 for lodging and $200 for entertaining clients. Each field is a numeric text input. According to the specification, the user should leave irrelevant fields blank. However, after analyzing usage of their existing solution, the customer has determined that an entry of `0` into a field is most likely a user error, should not be accepted, and should trigger an error message. ------------------ Here is the relevant code. QA noticed that if there are blank fields, the entry will be rejected with an error; this is outside the spec. Can you fix it? ...then a chunk of code that I'm too lazy to write, the key line being something like if(field.value == 0) { // show the error and reject the submission } because `'' == 0 -&gt; true`. 
It's a common convention, like using `i` on that same line to mean "index".
I'm surprised this is even a tip - I always thought this was the typical usage for `Array.from`. It definitely comes up a lot when working with non-array collections, especially NodeLists. e.g. const headerTexts = Array.from(document.querySelectorAll('h1'), el =&gt; el.textContent);
Obviously you havent heard, this is, the hot new thing
In languages where you can't have multiple parameters called '_', you'd go with '_', '__', etc. You very rarely need more than one, though. 
Maybe I'm just a terrible JS developer like the other commenters have implied. But, yes, I've never written code in production where we've used a variable before it's been declared. Likewise, I don't believe I've ever used a function before it's been declared (except in certain explicit cases of monkey-patching). Finally, ever since ES6 came along, all of our variables are declared as block scope. So yes, I don't think a person's understanding of hoisting would affect their ability to function as a Javascript developer, and we've never actually taken advantage of this Javascript functionality in production (yes, I understand that it's a language feature, so saying we don't _use_ hoisting in production is not technically accurate).
I don't know that I'd call it "fundamental" - it's entirely possible to write code that never once *relies* on hoisting behavior, even if it is happening behind the scenes. Doubly so if you're using a linter.
Sounds like you're a good developer to me! I'd be super suspicious of any code where hoisting is intentionally used, and super suspicious of any company where that code would pass review without question. The only time I ever "use" hoisting is with helper functions created to make my code more readable. My own sense of style is that a file's exports should be at the top, after only imports, file-scope "globals", and constants. So any helper functions used in the exports will be below them in the file - and therefore will be hoisted. To me, it's a good trade-off in exchange for a file structure I find to be very readable. I don't think I've ever intentionally allowed a (non-function) variable to be hoisted. 
Hi /u/StarkGamer, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
You will find that you probably know nothing about anything that you think you have knowledge in as soon as you try to start a project. That's exactly why you need to start a project. It doesn't have to be pretty, it doesn't have to have all the bells and whistles but you **need** to build up your *experience*. 
You need to get the element with var myElement = document.getElementById('myId') and most likely use the native click handler to attach it to the element with myElement.addEventListener('click', function() { myElement.value = Math.random(); }); I am on mobile so can't type this out better. You will need to Google for the Math.random part if you need integer values or the value to be between certain numbers.
Pushed out a fix for this. Thx for bringing it to my attention.
Do they? I know we got some feedback from a team that focuses on providing Angular support, so Angular developers say the same thing. Is Angular happening? If so, I'd say Aurelia is as well. In either case, feedback is welcome.
Doesn't reduce space complexity. For Fibonacci, loops and tail-call recursion have space complexity of O(k). Memoization and non-tail-call recursion (i.e. no compiler support) have space complexity of O(n). * Loop - You only use as much space as what's required in each iteration of the loop * Tail-call - your function's stack/closure get replaced in a tail-call recursion, so only use as much space as what's required in each individual recursive call * Non-tail-call recursion - recursive call stacks are kept, stack/closure uses up memory and its linear to input in Fibonacci * Memoization - your memoization uses memory and its linear to the output
I would encourage the use of "===" early on..
You should both and the best way of doing so is using http://www.passportjs.org/
Two uses I can think of: * Bootstrap dependency - e.g. intranet pages that you expect backend engineer to maintain * Throwaway splash pages with a bit of FORM / AJAX
right. with memoization the benifit is that when excute m times, loops and tail-call recursion has a m * O(k) while memoization still has a 1 * O(n)
@ is just sugar, the hoc is the same for owned or foreign components: @canHide class Owned extends Component { ... } const Wrapped = canHide(Foreign) This would give both the ability to hide when the prop for it is true. 
It's probably an expected answer.
Is there anyone here who can't answer the question? I'm not a great JS developer, it's not my primary language and I understood what was being asked immediately. Surely it would be one question of many which assess your JS fundamentals. You're not going to get production code in an interview, you'll get fake examples which demonstrate a specific topic succinctly. A legitimate question is an interview is what ever the interview decides to ask. I've conducted a lot of interviews and sometimes get people who get annoyed because I've asked a specific question they can't see the point of or they feel I didn't give them enough chance to figure out the answer. That only happens if they can't answer it though. I'm actually pushing them into slightly uncomfortable situations specifically to see how they react. Just because you can't see the point doesn't mean there isn't one. My particular style is "who wants to be a millionaire" style. I start with an easy question on a subject and remaining in that subject get progressively tougher until I break the candidate. Then I move to the next topic. I could see an ===/== question being a simple level 1 question. Really, would you want to hire someone who couldn't answer that question? You do get asshat interviewers who don't know what they're doing or are just horrid people. They are a big red flag. Even in those cases you're better off remaining calm, answering the questions as best you can an seeing what happens. Especially if it's the first round of interviews. They might not even be part of the team, just someone dragged in against their will to filter out the idiots.
Typical for low effort spammy recruiters that only look at keyword and know nothing about the actual work.
"A good question"? Have you worked in a real business? A large part of the skill of a developer is establishing what is required. Following on from my other post, I sometimes ask questions which are very ambiguous specifically to see whether the candidate just stares at it blankly or has the ability to ask "Do you mean X or Y?" or the holy grail "I don't understand what you've asked, can you explain a little more?". I'll take humility over ego every time. I'm not trying to trick the candidate, I can nudge them along the right route if I think they're worth the effort, some people can do it but don't because they've had a shitty experience at a previous work place and I help them. However, if they start stamping their feet and claiming it's a disrespectful question they can fuck off. That's pure arrogance. 
Spot on.
&gt; Have you worked in a real business? Yes. Have you? &gt; A large part of the skill of a developer is establishing what is required. Do you require your developers to work with code that is likely to have lines like `console.log(2.0 == ‘2’ == new Boolean(true) == ‘1’)`? If so, what the fuck? If not, why waste everyone's time asking about it? `==` is not required. Let it be established. Where I work, `==` is a lint fail - and hopefully a typo. `==` is not idiomatic, because its type coercion is broader than ideal, so it can have unexpected results in some cases. I have not committed [the fuzzy equality table](https://dorey.github.io/JavaScript-Equality-Table/) to memory. I don't intend to, because there's no reason to. If I ever come across a use case where fuzzy equality is called for, I know where to find it. May as well ask about the finer details of the `with` block! If you ask trivia questions, you select for people who know the answers to trivia questions. That may or may not be correlated with ability to create value for your employer. You mentioned another post... unfortunately I don't see it. Maybe it was nabbed by AutoModerator or something. So I'm missing some context, sorry. Ambiguous questions can be cool. I don't think you can expect the average person to jump to saying they don't understand what you asked. People on the other side of the table will expect that your questions do have answers. You might not be trying to trick the candidate, but if the only correct answer is "I don't understand, please explain more", you probably are. I feel like you have to be *really* good at interviewing to pull it off right. &gt; However, if they start stamping their feet and claiming it's a disrespectful question they can fuck off. That's pure arrogance. Calm yourself, we're not in an interview. And if you treat interviews as opportunities to go on a power trip, I pray we never are. Just remember - ask bullshit questions, get bullshit answers.
&gt; That does not mean, that you can be excused to not know how parts that you don't use work. Sure it does. Nobody spends time mastering code against bad practices unless they are trying to bullshit their way through an interview question. I know this from experience interviewing and conducting interviews. &gt; 10 years of experience don't mean shit, if you call things you don't like or understand hacky and are almost proud of not knowing them. That is the difference between a senior developer and an amateur. Amateurs developers assume they should know everything. Senior developers have done this long enough to know what to avoid.
Looks like that's what happened. though recruiters are getting payed based on your capabilities to get a higher rate, so basically the only thing they are needed is to have a "Referred" highway to interviews, nothing else. Last one got me an interview with a big one and was supposed to bring me to the office for the interview (I was coming by plane from another country). Turns out he had to go away for "emergencies" and I was left alone in a new city :) but it went well anyway, so lesson learned and don't count too much on them Just ask him, you can't piss them off as they work "for you" so they only have interests to place you somewhere - Just get your linkedin sorted and if you have some experience you'll get several offers a day
I would even specifically write something like... &gt; (these are two different languages) ...with the brackets. Don't leave any chance for confusion or assumption. I'm extremely specific in every email I write, and usually even include redundancy such as explanation the same thing in two different ways. Even then a stupid number of people still send me totally confused/irrelevant responses.
The one-liner expects the person to know the rules of `==` coercion. My question only asks them to know that `==` coercion can cause weird results. &gt; domain knowledge When you hire, what's the person going to spend a ton of time doing? Processing your organization's domain knowledge. Why wouldn't you interview for that skill? &gt; Then has to read through a load irrelevant boiler plate code, and be able to spot one esoteric bug sitting in the middle of it all. Yes, that's called debugging, also something that your new hire will probably spend a lot of time doing. And if you think `==` is esoteric, why even ask about it? I agree that it's esoteric, and I don't think the question should be asked - focus on stuff that will help you understand how the person will contribute to your team. But if you're dead-set on asking a trivia question, at least make it a useful exercise!
this group is about JavaScript, neither Java nor Scala.
It supports the mobile phone now!
But then again, when executing `m` times, there's another difference: In the recursive TCO form, all consumption is temporary. The memoized form relies on a memory consumption that needs to be _permanent_. It's not as simple as thinking that one approach is _better_ than the other. It generally depends on the value of `m`. If `m` is small, i.e. this is a process you'll use infrequently, the permanent memory sacrifice may not be worth it. If `m` is big, i.e. this process is executed very frequently, then there may be other approaches with better performance both in time and memory. If `m` is neither big or small, then it may be difficult to say that one approach is actually better than the other except through a case by case experimentation. ---- For the trivial case of Fibonacci, one would just use the formula based on the golden ratio. Which is a few orders of magnitude better. But of course, other real-life processes may not have such a simple solution.
You'd use a GreaseMonkey script (aka. GM script or UserScript) with the help of a web browser extension which provides GreaseMonkey comptible functionalities (e.g. GreaseMonkey, TamperMonkey, ViolentMonkey, etc.). It's possible to create such script. https://www.reddit.com/r/userscripts/comments/7s5323/choose_form_field_selections_on_hotkey/
Yes I do get this error. It saying that this sass file was unreadable meaning that it wasn't compiled, and then I check style.css which at this point doesn't have any styling as gulp process errors out to console and stops the process, I guess this is what is happenning.,,, I'll try with delay. Thank you!
&gt; You call JavaScript multi-paradigm language, but claim that only those practices that you use are the correct ones. If that makes you sad then grow up and get over yourself. You being sad doesn't mean I am arrogant, but it does mean you lack the maturity to make hard and fast decisions. &gt; No, experienced developers don't reach for elegant solutions. They reach for simple ones. They build architecture that works for the task and do not shape tasks to fit into single prefered architecture. They write less code, even if it makes you sad. You mention what a senior should do as opposed to what seniors actually do. Once you have done this long enough the difference is a memory opposed to a wishlist.
Have you heard the one about the craftsman who didn't know their tools? You can look at a river and know you need to build a bridge, but without the knowledge of materials, practices and correct design you may end up with something that 'works', but it will more than likely be a dam. We are craftsmen and women. Know your tools and use the appropriate ones for the current space.
Some people seem to think offers and interviews grow on trees.
If you are experienced they absolutely do. 
Thx guys! Hope you like it : )
[Is it the Chad?](https://www.youtube.com/watch?v=_79BtELxB2k)
If only they did.
If you know javascript more or less, i'd go into tools next because this is going to open the floodgates for current-gen javascript, or es-next, modules, and the community at large via npm. Two very important tools in the javascript eco system are probably webpack and babel. Then start any project. Even your personal website will get you into non-trivial problems that you have to solve somehow. Simple stuff like top-header moves in when you scroll down, or side menu that draws out - it will teach you lots of things. And after that, pick a framework.
My point was that you are trying to make something out of CRA which it was never intended to be. If you want SSR, why not submit a feature request in the issue tracker? As soon as you "fork" CRA, your argument about "maintained by FB developers" is irrelevant...
How much experience do you have in what areas? I have about 13 years of experience and have most recently been working with Python and React. I’m doing contract work now - my last client found me and told me they literally can’t find an experienced dev locally. They weren’t underpaying either. This difficulty in finding experienced people is a constant thing I hear from clients, and I’ve been in the interviewer side of things and had a pretty similar experience. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ByronHsu/AAG-Visualizer/.../**index.js#L108** (master → c0b8c29)](https://github.com/ByronHsu/AAG-Visualizer/blob/c0b8c29c11ef3ff0658cdd3f9bab28492a25944c/src/index.js#L108) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dt22fn5.)
CodePencil
Visualizing circuits with paper and pen is true torture.... Thanks for creating this, it makes my life betterXD I kinda want to see some more visualizing examples, are there any? XD 
The most friendly guide on the topic so far, although I don't have experience on js, it is still quite informative. Thanks for the work!
Unless you have a strong need to manage it yourself, I'd personally recommend you use a third party auth provider. Authentication is hard, and people do it wrong all the time. Connecting to a third party \- be it Google, Twitter, Facebook, Reddit \- or even many third parties, is easy and it just means that you don't have to worry about getting it right yourself.
Thanks for all the replies guys! Definitely gave me some avenues to check out. 
I think that mayble DAG, FSM, Blockchain, React Element Tree, Bundle Dependencies Graph...etc. can be implemented by similar methods. If you are interested in it. We can make it together!
I would suggest using a third party like Auth0.com They have excellent dev documentation and it's free for small projects including 2 3rd party integrations(google, twitter, fb, ...). I am not affiliated with them in any way. Whatever you do, do not implement auth flows or credential stores yourself if it's not your core business.
The world in javascript is huge, fun, and always surprising. It is certainly worth learning!
&gt; Rust and I think Haskell even have that built into the language Prolog too.
What a *darn* shame.. *** ^^Darn ^^Counter: ^^11767
I'm in similar position to you, so maybe my newbie perspective will be useful. &gt;What would be next steps to take if I want to get into the more technical aspect of javascript like JSON / AJAX / web forms? MEAN Stack? React? Unity? MDN is one of the best sources there, but you also have to examine things on your own. When I encounter new things, I always check them with typeof and toSource to see what's going on. When you encounter functions, always ask "what does this function return?". Try building some small apps for your personal use. 
You are correct! I meant to add something to the `fetch().then` but got excited and moved on. 
Yeah, the irony. The author failed to copy/paste the code correctly.
Or: ``` [...Array(totalYears)].map((_, i) =&gt; year + i) ```
lol, angular but no react
Webpack is basically the standard these days 
I don't want to work for someone where I have to "crack" the interview, I don't want anyone working for me who expends energy on a laundry list of "interview questions", but I guess free thinkers are not the kind of yes men/women most companies are looking for.
I would have to setup webpack instead of gulp? If this is so I need to recreate my project and compiler sass??? Can I add webpack inside of gulp, gulpfile.js??
Use the variable without quotes. // original document.getElementById("container").innerHTML = buildingTypeName; // using variable var myVariable = "container"; document.getElementById(myVariable).innerHTML = buildingTypeName; If you use the variable with the quotes, `getElementById` will try to find an element with an id that matches the variable name rather than the value in the variable.
react is so 2017
It didn't realize software engineering fell under the "IT sphere" now
Put a bunch of big name JS/web projects in a hat and draw 5? Here's my draw: 1. Npm 2. Firebase 3. Electron 4. Leftpad 5. jQuery mobile
really? if the memoize function could be customize to only cache the recently two value, it's space complexity will be same to what a tail-call recursion version have. It will lose some time for extra operation used by memoize function , and this trade could brings a better control to the temporary state and a clear code style for raw function. That looks like in topology you could pull some stuff inside out, I think tail-call and anti-tail-call(memoize) are actually the samething on different side about how to manage the temporary state.
Has definitely happened to me a few times! I taught myself enough java to at least try though! Obviously didn't get the jobs but...learned a thing and am still in touch with some of the devs! Networking can't ever hurt. Plus I can now read those funny t-shirts you sometimes see floating around with humourous java functions on 'em! Bonus!
Nice! I like this, hope it catches on. 
Thanks so much! I’ll be sure to try this when I get to my laptop. 
Ideally yes. Unfortunately JavaScript has this one particular feature that other programming languages don’t have as much: the majority of people writing the language don’t understand it. The consequence is that if the interviewee really understands the language, a “simple” question may not be so simple, and the interviewer may believe they are being lied to when they were trying to use JavaScript as a tool to ask generic OO questions.
Welll... you start by posting formatted code :)
Great idea! Any idea why reddit reformats / hijacks the formatting? Or suggestion of a place I can post the code to look properly formatted? Getting an answer is worth the effort to me :) Thanks!
I wrote an iPhone app as an assessment test. The company actually wanted a webapp. I had to borrow a mac to do it, and no one ever bothered looking at it because they didn't have the tools installed to do so. I still got the job (btw, i built a web version just for shits to try to impress).
Everyone is balls deep in Vue and React. Meanwhile a small number of developers are producing some lean, minimal and beautifully composed SPA’s using Mithril.js. Before y’all start hitting the downvote button because you’re intimately involved with either Vue or React, see here: https://mithril.js.org/framework-comparison.html 
I'd do just this one liner... ``` function registerHandlers() { document.querySelectorAll('a[href]').forEach((el, index) =&gt; el.addEventListener('click', () =&gt; alert(index))) } ```
Look into Phantom.JS or Watir Webdriver in Ruby Form completion is a fascinating subject, but you're going about it the wrong way, by copying obfuscated code from other sources.
Great, and using javascript? 
You could post an example on codepen.io or jsfiddle.net. Also, code formatting on Reddit requires four spaces before the text. likeThis();
https://github.com/getify/You-Dont-Know-JS I think this is a good resource 
You seem to be missing all your semi colons
Thanks, this looks like exactly what I had in mind. I'm looking through this now. He even seems to have video courses too, which is a huge plus for me.
If you're using a recent enough version, look into Promises, and in particular at Promise.all\(\)
You could use NodeList's forEach: document.querySelectorAll('a').forEach(...) One of their tests fails if you use addEventListener instead of onclick. Seems to be an issue with their tests.
I work with people that think i already overcomplicate code :( Traditional HOC adds the function name before exports and makes the thing either look weird on declaration or on export. I've encountered resistance. But you have a point with decorators! Thank you dude! 
Seconded on Auth0, if you follow their tutorials, it's super easy to get up and running.
Hi /u/ROFLQuad, For javascript help, please visit /r/LearnJavascript. Thank you!
That’s very interesting, because the comment below mine by DzoQiEuoi complaining that “Hidden magic is a bad thing” is somehow upvoted to positive 10 points.
This is the millionth duplicate of "what is function scope?". Congratulations you won.
People also seem to forget that interviews go both ways. They're seeing if you're a good fit, yes, but *you are also seeing if you want to work for them*. 
use typeof and make it more explicit? It's not like `==` is going to help you with `"YES"`.
http://jspaint.ml/
No they're trolling about the "trend" idea
While some didn't think your joke was funny . . . it's actually kinda something to think about. When you're dealing with machine evaluation like this, semicolons might actually be the thing that throws the entire thing off... as far as the machine is concerned.
This content is surprisingly lacking of substance.
I just don’t think relying on automatic insertion is a good move. Plus I prefer the legibility of semi colons 
ASI is there whether you rely on it or not, though. I've been bitten as often in a codebase that did use semis as I have in one that didn't. Pretty much the only place I would ever find semis necessary is in the line right before a [...someArrayImCopying].forEach... On the other hand, they're going into your return statements, period, if you aren't diligent to keep the expression incomplete.
It's built with Vue.js and open source https://github.com/wbkd/d3-discovery
Does anyone know why Maps don't use property accessor notation? I use Sets all the time - but I've never reached for a Map because an Object is just less "noisy" and more "javascripty" in its syntax...
This is very subjective article. Nothing wrong with subjectivity, only that it suggests otherwise (`every front-end programmer needs to watch for in order to keep up to date with the times while working on their projects.`). Besides this whole article seems more like "2016 JavaScript trends" ;) 
I used to think C++ was the new C and C# was the new C++. I was completely wrong. Now I know better. Now I know they're three distinct languages. C++ and C# might have taken some inspiration from C, but none of these languages are direct replacements of C.
They are using unit tests. The code is executed by Chrome 62.
Even if you still support IE11, you can use promises if you use a polyfill.
Thanks, I'll look for this
Thanks, I'll try ImageMagick, and if it doesn't work for me. I'll try canvas
My recommendation is the classic full stack to do list: - node backend with user signups and authentication - postgres or mongo database - jquery or a modern framework for front end - have fun with some css styling and making it mobile friendly - deploy your web server to heroku or similar 
I wonder if, maybe, the problem is not JavaScript. I mean, six years using it seems enough to be able to achieve something more than "a stupid simple app". Hey, I'm not implying anything wrong with you, ok? What I mean is that maybe it is more of a general programming struggle... maybe? I don't know because you didn't give too much context about the things you've done and learnt. But it does sound like you might need a _more general_ knowledge in the approach to programming. Again, I don't know, but if that is indeed the case, then I would suggest going _beyond JavaScript_. Look for more general resources about programming, even if they use a different language. It might be interesting, to be able to offer better help, to know what you specifically struggle with (or _would_ struggle with) and why.
Can you clarify your question, what is actually failing in your Window environment, and what do you want the docker container to do? I find docker dev environments to be very subjective ... Why not just write a docker file from a ubuntu base image mount your directory as a volume and use kitematic / exec into it and run what ever commands you want? 
Out of curiousity, have you come across [Page.js](https://visionmedia.github.io/page.js/)? Seems to do mostly the same job with a little less setup code. I've personally found Tj's stuff to be solid and easy to use. Obviously, different goals, since you're after a closer experience to express, but in terms of routing and middleware, you're almost one-for-one.
use map instead of forEach the code looks something like this and remeber you have to call this inside the async function. await Promise.all(files.map(async (file) =&gt; { // promisify this part and await for this and that will do the work :) file.getUrl(function(err, url) { if(!err) { console.log("got the url!)" } }); }));
That first sentence is great. I want to know if the "Java is short for JS" thing was an assumption, or if someone told them that, or where that came from in the first place.
Because `new Map() instanceof Object === true`. Meaning `map.foo = 1` does exactly the same thing as `obj.foo = 1` Maps are useful when you want to associate a value to a structure without polluting that structure. There are also WeakMaps, which are like Maps but whose contents get automatically garbage collected if nothing else in the app is using the values.
Property accessor notation converts `key` in `obj[key]` to a string in order to access a property on `obj`. `Map` on the other hand lets you associate arbitrary objects with values, it never converts your key to a string. They could have special-cased the property accessor notation for this, or generalized the behavior to let an object determine what `[key]` means, i.e. make it overridable. This, however, would mean that you can't shim it for older browsers. I'm guessing that this might have been one reason. Consequently, 100% of Map works for older browsers, given the right shims.
The high performance obviously burnt out the web server. She just couldn't handle it! https://i.imgur.com/TNHtjtR.png
Thanks for reading. That is fair feedback - it would have been a better article had I included more code examples and specific usage inside my apps. Maybe I'll do a part 2 in the future including those things :)
* https://github.com/unibeautify/parse-framework * https://github.com/douglascrockford/jslint * https://github.com/prettier/prettier * https://github.com/prettydiff/prettydiff
If you replace var with let in the loop the problem is solved. The actual issue with the entire problem is that the function closure references the global scope of i. let creates block scope removing this issue. I say this first because I think this is the true solution to the problem and the entire point of let. Literally a mutation of 3 letters stops the entire need to rewrite it. Also this code probably isn't using a real dom to run the tests but probably a unit test suite with stubbed and mocked objects and methods with possible spys to validate against. I would avoid using any additional methods not specified in the example as they aren't stubbed out. 
Isn't that a recent api change? NodeList for the longest time did not support most Array methods
This is true. In the past as an interviewee I would ask for clarity when things are unclear, so that I can ensure I am speaking to the interviewer's intent. If as an interviewer things are unclear I expect the interviewee to raise concerns and let me know that I could be more precise. In this case it is the job of the interviewer to ensure the interview is a calm and safe place where such concerns can be raised. The goal is to have a simple conversation to determine if the candidate has the experience and potential capabilities to perform in the given job. It benefits everybody when that conversation moves along smoothly and that candidates are rated in comparison to other candidates. If a candidate wants to compete better against other candidates they would invest their own time to practice the necessary skills. You don't, and shouldn't, get a reward just for showing up.
I think it's always supported `forEach`, just not `map`/`filter`/etc.
Yes that's very true. Thing is that with every new project I tell myself that this one is going to be quick and easy but I always end up using something new, this needing more time to figure it out and implement it.
Yes, it's a rather recent addition. Also note that it only got forEach and all the other stuff is missing. https://developer.mozilla.org/en-US/docs/Web/API/NodeList You still have to use Array.from or [...foo] if you want to use the other array methods like filter, map, etc.
&gt; enough that I can really appreciate the ideology behind the frameworks and tools I use, and how they work on a low level In my experience, if you want this level of understanding, your best bet is to re-invent the wheel for the whole stack. Use VanillaJS/NodeJS for every piece of an actual small-medium sized application. Don't make it perfect and don't worry about it scaling. Just solve the problems that the frameworks/libraries solve from scratch. When I did this years ago, I always got stuck on a piece here or there ( AJAX at the beginning, HTTP/TCP at the end ), but eventually I understood *what* every layer of abstraction I added does without actually knowing the *how*.
Thanks
I agree, although that single statement is kind of a trick question anyway. Those Unicode quotation marks (U+2018 and U+2019) are a syntax error. :) 
Ouch I was not aware of it... Thanks for the info. However, I think they are some differences in the API that [frontexpress](https://github.com/camelaissani/frontexpress) exposes and the one of Page.js. On my side I tried to stick to the ExpressJS router API. The main idea of FrontExpress is to know only one routing API and apply it on the client and on the server. Yes it's more verbose but you can do more. Have you seen that you can [create modular, mountable route handlers](https://frontexpressjs.com/routing/)?
I would say mainly for single page application (SPA). It can be useful if you need to do some front-end logic accordingly to an HTTP request. Obviously, if all the rendering is done back-end and there are no rendering logic on the front-end this lib is not useful. [Here](https://github.com/camelaissani/frontexpress-demo/blob/master/frontend/page-router.js) an example of code which shows how I manage the menus selection with FrontExpress. 
I would create a variable to hold the font size you want the first hello world to be. Then as the loop runs, increase that number too. 
I'd never heard of that plug-in, but it really seems to offer the best of both worlds: index.js functionality but with files that don't all have the same name. Thanks!
In fact it's implied that C# is like a better C++ in it's name. The '#' represents ++ ++ So it's like C++ ++. https://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Name Edit: Formatting
Good point. Thanks, I will be more considerate. I just like these guys and want to help spreading the word.
He's not wrong, though. I've been asked most of these questions in 9/10 of my interviews lately. _Hopefully_ the interviewer is putting more weight on aptitude and ability to collaborate rather than specific arcane trick questions. For those trick questions, it should be more about how the candidate responds under pressure, and whether they can think critically about the question rather than getting it correct. 
`element.style.fontSize = s + 'em'` s gets bigger every time in your loop, you can use 'px' instead of 'em'.
I got it to work but now the size increases too much so it caps out and won't increase anymore. Any ideas on how to fix that.
Maybe I'm guilty of a little hyperbole. I understand JavaScript basics pretty well, I can add functionality to a webpage with VanillaJS (I'd probably have to look up some of the DOM manipulation functions, but that's because I don't use them that often), I've written a few node command line apps using libraries like axios and some 3rd party APIs, I'm currently a developer on a medium sized react/redux project and I understand most of the basic react lifecycle, the basics of redux unidirectional data flow, and mostly can make things happen, add functionality, etc. But especially when working with React and Redux, and some of the newer ES6+ stuff I start to feel like I've just memorized the way things are supposed to look and don't really understand how things are happening behind the scenes.
This is a good idea, and something I've thought of trying before, my only worry is that my grasp on the ideology behind libs like react is still too tenuous to really be able to replicate what they've done, even in a basic way. I think that's primarily because react resources generally just skip to the part where you're learning to build things, which makes sense from a practical perspective.
Hi /u/Redsuperninja, For javascript help, please visit /r/LearnJavascript. Thank you!
I totally understand that feeling. My `react` clone was this: Given an object of `{ type, attrs, children }`, create a DOM node and when I tell you, re-write the DOM. I didn't really go into `and them patch/update` because that's 1) way too hard for me to build and 2) out of the scope of my problem when `el.innerHTML = createNode(newState)` works for my own understanding. Don't get too bogged down in what libraries actually do right now. Instead, build a SPA without them. Then, once you've written your own Handlebars templating system or your own Component-based system, you then build a new application/refactor yours using React or Vue or Angular because at that point, you *understand the underyling problems those libraries solve.* You may not know the **way** they solve them but you understand the **pain points** they are offering a solution to.
I see. I still stand by the idea of going beyond JS, because it looks like you do know it _enough_. Try to look for more general ideas about programming. Alternatively -or additionally-, you can do two things (I mean both, together): 1. Try to implement those things you feel you have memorized and use mechanically. Just try. See how you could achieve those things. 2. Look into the code for that library or framework and see how they actually implement it. Read it, try to understand it. Compare it to your own solution. As I said you'd do _both_ things, but _do_ try to write your own implementation first.
 const urls = [ "https://srapi.github.com", location.href, ]; const getResponses = async (urls) =&gt; { const requests = urls.map(url =&gt; fetch(url)) return await Promise.all(requests) } getResponses(urls) .then( responses =&gt; console.log(`There you go:`, responses), error =&gt; console.error('No luck. Standard error message:', error) )
If you have any interest in artificial intelligence, you could study the JavaScript **[AI Mind](http://ai.neocities.org/MsIeAi.html)** for Internet Explorer and learn to tweak it for fun and profit. 
Oh, okay then! Spread away! :)
Yeah, understood. Webpack is definitely worth the learning curve, it's an extremely powerful tool and once you know it, you know how most of the modern framework bootstrapping tools like vue-cli and create-react-app work, and those probably won't be changing to a different build tool anytime soon. That being said, there is a very new one called Parcel that I hear has less of a learning curve, if you just want to get set up quickly.
So, I can get started with auth0.com even if u have no expertise in security? I am really concerned that I will mess something up, which is why I prefer using Google signin
However, it is basically impossible to avoid something that you don't know is there
You can use `node:latest`, which installs Debian:jessie at the moment, and just `apt-get install npm` in there, copy your files into the container, then run `npm install`. Just remember to `apt-get update` first. This will not work with webpack dev server, however, if that is running inside your container, unless you map the root of your project into the container as a volume.
If you weren't aware of hoisting, the only way you'd ever write code that takes advantage of it would be by accident - you'd declare and initialize all variables/function expressions/functions before you referenced them. In the real world, of course, when moving code around, it's more than likely you'd *accidentally* move a function call above its declaration. If you noticed, you'd end up in a "my code works and I don't know why" situation, but you'd likely never notice - since it works. So I think you're right, but only because this hypothetical JS developer who doesn't understand hoisting would stumble into it by accident.
I appreciate this article but I feel as though it lacks detail. Can you give a more detailed write up with some more concrete numbers. The author has a history writing articles about his poor experiences with front end frameworks and his inability to grok them and claiming untruthful statements, which Dan Abramov went through and responded too. It really just feels like a rant with no substance.
&gt;no real backend developer would ever code with javascript on the server what a ginormous tool. He doesn't even bother to justify any of his points.
Nice looking has more to do with your design skills than your development skills. I've been doing web development for several years, but I haven't cultivated great design skills, so unless I have existing designs to rely on, my projects are usually ugly, but that doesn't mean they don't work well. You should be able to start implement pretty designs within a few weeks to a few months depending on how much time you spend on learning CSS. If you want practice implementing real-world designs, try reproducing designs from existing sites. For example, try reproducing the layout on [github's front page](https://github.com/).
On transitions, handlers etc. I notice that this is currently managed through d3js. No reason to change that. Perhaps a first step would be to abstract all your d3js code into d3js components - https://github.com/curran/d3-component. It is similar in concept to React Stateless Functional Components. Once you have it as component, you can simply provide a React component that is a wrapper around your d3js component and manages its mounting. For this. simply provide a componentDidMount function. There is a thorough tutorial on how to do this at: http://www.adeveloperdiary.com/react-js/integrate-react-and-d3/ The d3js-component + React wrapper made available would give users the option to use the components in a reactjs environment… without forcing them to use react. If you prefer the approach to force users to import React to use your library, look at https://github.com/codesuki/react-d3-components for examples. I sent you a direct email... I live 500m away from your department. Do not hesitate to get in touch, directly, if you need more help. 
 function registerHandlers() { var as = document.getElementsByTagName('a'); for (let i = 0; i &lt; as.length; i++) { as[i].onclick = function() { alert(i); return false; } } } Easy solution, just change `var` to `let` so it's block scoped and it's now a new variable each time the loop runs. Problem solved.
If you haven't tried it already, I recommend checking out MobX as an alternative to Redux. Especially if you're frustrated with all of the boilerplate needed in Redux.
I think it’s more likely that a hypothetical inexperienced developer might be reusing variable names, or mutating vars in questionable ways, and variables declared with var are also hoisted. This can lead to unexpected results if you are unaware that hoisting exists 
&gt; Having frontend developers (the same guys that 10 years ago used transparent spacer gifs for layouting) coding your application server is a high risk in term of security: it’s like letting your mechanic healing your heart disease. What a dipshit.
RIP
I just thought to myself "but who would do such a thing?" The same kind of dude who doesn't know about hoisting, probably. :/
It's better to use single event listener on parent. Much higher performances: - Read more here: https://stackoverflow.com/questions/28627606/does-adding-too-many-event-listeners-affect-performance - See test in action here: https://jsperf.com/click-perf - Article about this topic: https://www.kirupa.com/html5/handling_events_for_many_elements.htm
A single event listener obviously takes less time to add. But the downside is that figuring out the desired target can be tricky. For example if you had a span inside the button, e.target might come back as the span and you would then need to implement logic to find the ancestor button. With a button, simply looking at nodeName probably suffices, but if it was a div, you might additionally need to add some sort of class to be able to identify it during traversal. So instead of spending time upfront on registration, you might end up spending time on each event to figure out which one is the relevant DOM element. With multiple event registration, you spend N time registering events upfront, but on each event, you only need to look at e.currentTarget. One can argue that a registering individual events on a very large number of buttons would block, but at the same time, if that was the case, you'll probably be running into bigger performance issues w/ e.g. creating the DOM in the first place.
I can't remember the last time I wrote a for loop though, outside of hacky test code. Once again you're right, it's just pretty far from my day to day code. 
I typically just use a standard Ubuntu base image and add what I need to that
OK, I assume you mean "How do I load an image on a page, slice it into two parts and save those parts as files." The following two links will show you what you need to do. Basically, you need to load your larger image into a canvas element, copy cropped portions of that image to target images and have a button or buttons that save the contents of the cropped images to a dataURL that the user can download. [Loading, Drawing and Slicing Images on Canvas](http://www.homeandlearn.co.uk/JS/html5_canvas_draw_scale_slice.html) [JSFiddle for drawing and saving to an image](https://jsfiddle.net/codepo8/V6ufG/2/)
That's for dockerizing the app itself. I was wondering if there's a good image out there that I can develop in.
can someone explain why this has 0 points, have not used gotten to know promises and would like some insight
&gt; 1 event listener hearing 100 events &gt; vs &gt; 100 event listeners each hearing 1 event 1 event listener + 100 events = 101 resource allocations 100 event listeners + 100 events = 200 resource allocations
It's not that they don't come up. But the writer is focusing on "tricks" of particular problems... you're banking on the trick questions that you know the tricks to answering. An article actually talking about the concepts and how to learn them would be more valuable when posed with similar but not identical questions.
you're fine, react and vue are probably the upcoming big players for the front end frameworks. Angular still has a pretty big share, but its dropping.
Gulp with webpack? Ew :)
I don't make a silly list of questions when I go on an interview, and I don't expect to have to answer them. They need you, you need them, it is a mutual exchange of needs, not a one way street. Why the constant articles, repos and posts about "cracking" interviews? Be the other end of the mutual exchange by developing your skill and becoming an asset, the interview will crack itself. If you were valuable, they would be the ones wanting to "crack" the interview with you.
I looked wrong. Didnt see that the order was different
The order is irrelevant, one consumes more resources. That is the main reason it is considered a bad practices. 
https://jsperf.com/event-delegation-vanilla
Been building websites for 4 years. Still can't make a nice looking one without a designer or template.
You are using the last "index", right? Because you are resetting the same function with the ever-changing value, so finally it is set to return the last value. Try this very simple fix: function registerHandlers() { const links = document.getElementsByTagName('a') Array.from(links).forEach((element, index) =&gt; { let myelement = element; let myindex = index; myelement.addEventListener('click', (e)=&gt; { e.preventDefault() alert(myindex) }) }) } I haven't tried this snippet, but this pattern is a nice easy way to use closures. 
Not bad, pretty similar to Ramda's cond which I suspect may have been inspired by Clojure's cond function. http://ramdajs.com/docs/#cond
Awesome thank you 
Why on this green earth would one use JavaScript to do this? It makes no sense whatsoever.
yes,you wouldn't have the break after the return but i know what you are pointing out. Only problem is that wouldn't be functional programming. it would be imperative. I was trying to see how you would achieve this functionally. Mainly to improve unit test and while keeping it pure. I was inspired looking at the reasonml and ocaml. I have known of functional programming for a while, but these little unknowns have always stopped me. So i was just going through how i would get some stuff done and couldn't find a nice functional switch.
Because one might be familiar with JavaScript and interested in machine learning.
+/u/CompileBot Node var x = ['foo', 'bar']; x.length = 1; console.log(x)
Output: [ 'foo' ] [^source](http://ideone.com/93Pvb6) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20/r/javascript/comments/7sazvw/given_the_following_code_what_is_the_value_of_x/dt3fso7%20Include%20your%20reason%20for%20reporting%20here.) 
&gt; Anything inherently wrong Yeah. - `_switch([])(1)` throws - `_switch([()=&gt;false,()=&gt;'asd'])()` returns undefined. Switch statements aren't very functional to begin with because of the inability to check for exhaustiveness. Normally, functional languages will give you pattern matching. Here, you should at a minimum return a Maybe or an Either
So the equivalent to doing it with pencil and paper, I guess. 
No? How does it make no sense?
what is happening internally?
Well, it's hard to read. How about: ``` function _switch (statements) { return (input) =&gt; statements[input] || statements.default(input); } const cases = { 'yoda': 'hmm me is yoda', 'han solo': 'chewie, ready the ship', 'default': (val) =&gt; `who the hell are you? ${val}? nope, no friend of mine`, }; const test = _switch(cases); console.log(test('yoda')); console.log(test('han solo')); console.log(test('rey')); ```
I believe his user name is the answer. 
That wasn’t me you responded to but I agree with them lol
&gt; but some techniques could perform decently Exactly. The article isn't called "The advanced guide to high-performance Machine Learning". Obviously C/C++ has an advantage when it comes to performance, as talked about in the article.
yes, the throw there would be bad. because it's unintentional. I would have to throw regardless if someone was to misuse it, and state that it expects an array of even length. it made me curious what other languages would do. Test lodash and it just returns something it believes is okay. In my case i did undefined but i can see how it could cause a problem. the reason i did undefined was so you could do test(1)|| "alternative" I wanted to see how ramda handles misuse as well because they are trying to solve the same thing. https://runkit.com/embed/dbbsnfdtefpc they also return undefined, which makes sense in my head as well. For the reason i stated above. 
[Mermaid](https://mermaidjs.github.io/) FTW!! 
yes, i have seen this potential solution. Not very functional, it solves some of the issues with the switch statement but not what i am trying to do. perhaps i should share a little big as to what functional programming is. https://www.youtube.com/watch?v=oB8jN68KGcU 
if i want it to be exhaustive i could just throw if i don't have a result. 
Better idea: use visual studio
visual studio is good but with one problem, the file size is extremely huge :)
This is how I would implement it: ```js function cond(pairs) { return value =&gt; { for (const [condition, action] of pairs) { if (condition(value)) { return action(value); } } return value; }; } ``` Usage: ```js const always = x =&gt; () =&gt; x; const T = always(true); const is = x =&gt; y =&gt; x === y; const greet = cond([ [is('yoda'), x =&gt; 'hmm me is yoda'], [is('han solo'), x =&gt; 'chewie, ready the ship'], [T, x =&gt; `who the hell are you? ${x}? nope, no friend of mine`] ]); console.log(greet('yoda')); console.log(greet('han solo')); console.log(greet('rey')); ``` The fact that it takes a single array of condition/action pairs simplifies how the function works internally but is also beneficial for maintenance - variadic functions (functions that take variable number of arguments) are frowned upon in functional programming, as they make currying marginally more difficult - especially in a language like JS where you can't rely on `function.length` for determining arity.
There's a section in the guide called "why javascript". See that for your answer. 
What about the sorting? 
I like Moment.
One thing I haven't seen listed on here yet that *really* helped me is teaching. Whether you're doing a night class or presenting at a local meetup, you will be forced to understand the ins-and-outs of whatever it is you're talking about. Therefore, if you have an area you know you want to expand into (functional programming? creating your own virtual DOM? or fetch the weather and display it on the page using zero libraries and no frameworks), then teaching will force you to do it.
probably do the same thing. stuff like this is why ui frameworks are popular because listjs and others aren't setup for exotic cases. but again, hide the input on the second link and list for clicks on the first, then click the second. in modern browsers, document.querySelector https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector and event listern should be all you need
i just force the user to understand milliseconds since epoch caveat: im the only user, works for me
Throwing is a procedural concept. In lambda calculus (the concept upon which functional programming is built), there's no such thing as bailing out via a `throw`; expressions must always return a value. In JS, the culmination of that philosophy is probably in efforts like the fantasy-land spec and libraries like sanctuary.js, which aim to provide monadic composition even in cases where errors occur. If you want to dive deeper into FP, I would suggest playing w/ sanctuary.js, but as a word of warning, be advised that the terminology can be daunting. If you're interest in alternative ways to get similar benefits, another less intimidating option is to invest time into a type system such as the one provided by Typescript or Flow (particularly, ADTs)
https://meltdownattack.com/ Joking aside, browsers don't expose any means of reading memory to Javascript.
I can hardly read that site on desktop due to those share buttons. 
Event delegation ftw 
Serious question: Can a time object ever truly be immutable? For instance, if you have the time “now”, wouldn’t the next clock cycle make it no longer “now”? Or if you get a “now” object, then later your clock syncs with a server to earlier, and you get another “now” object, they would be for different points in time, but be equivalent? Seems like because time progresses, time objects can’t really be immutable because it’s meaning can change at different times. Also, it’s just about as difficult to describe time objects as the this object...
Nah, `now` is just the current point in time. It can easily be immutable. `Date.now` is special in that it returns the current point in time.
Thank you for your reply. I know it is a serious security problem. I just want to make sure if it's 100% impossible or it works in local. 
Well, it returns a number, which you interpret as a point in time. But since that number in time can repeat, then on one line of code it have be in the past, and on the next it can be the future. Immutable means it’s meaning doesn’t change (not just that the values don’t change) over time, but that seems like a pretty clear change in meaning. Or maybe I’m overthinking it.
I mean, training a neural network in a browser doesn't have many use cases, unless you want to train specifically on some client provided data and don't want to offload onto a server. Other than that, though, any sort of serious machine learning will be done on a GPU-accelerated server using something like tensorflow, etc that has an optimized backend written in a low-level language like C++. I could see people creating node.js wrappers for this, like there are for python, but that's not really what the author of the article was talking about. 
Imagine that. A section in "Machine Learning in Javascript" about machine learning in javascript. Who whudda thunk it?
They left dumbass out of the title.
As far as I know, the only at for the browser to get data from outside the browser sandbox is through it's http connections, including like you said, web sockets. May I ask what kind of data you are trying to send?
If the data is not transient, you can use local storage. Though it's limited to about 10-15MB, these days. [https://www.w3schools.com/html/html5_webstorage.asp](https://www.w3schools.com/html/html5_webstorage.asp)
i am already using typescript, which does take you very far, but it still relies a lot on the user to provide a lot of information to it. Either way this isn't about a type system. It's about reducing complexity. https://www.youtube.com/watch?v=YXDm3WHZT5g the more input -&gt; output without side effects and re useable small components 
yes, that is certainly true
Functional is about doing these things from what i understand. using smaller functions. creating bigger logic using well tested small components. Not creating any side effects. my isYoda function can be used here (composed) and used in different ways. like ["person","yoda"].filter(isYoda); //reusability don't let the simplicity of the function fool you, however. This wouldn't be some simple string compare in real live. It would be something very complex that can't be represented by comparing some simple text. perhaps it's filtering getting users that are targeted for a immigration. i could do given these smaller component functions. isSenoir isPotentialGovtGrant isMinor isWinnerofLottery given that i could setup something like _switch([ isSenoir,deny, isPotentialGovtGrant,investigate, isMinor,accept, isWinnerofLottery,accept ]) Now imagine someone else on the team has already created those functions and i need to reuse them. If it's an object switch, how do i implement this logic How do i compose things such as _switch([ compose(isSenoir,isRich),accept, &lt;--- isPotentialGovtGrant,Investigate, isMinor,accept, isWinnerofLottery,accept ]) What reusable parts do you have in the object switch? Look how i can easily extend the options or things i am doing. Without having the restructure an enormous amount of code. For example look at this _switch([ compose(isSenoir,isRich),accept, &lt;------- compose(isPotentialGovtGrant,isMyFriend),accept, &lt;--------- isPotentialGovtGrant,Investigate, isMinor,accept, isWinnerofLottery,accept ]) Look how easily i have just placed my friends on a fast path to immigration with that compose, otherwise for everyone else i just investigate them. This is the power of functional programming. If i have an issue with let's say isfriend. i can just fix that one function and all the logic upwards that uses it, they are automatically fixed for me. DRY (don't repeat yourself) const isYoda = x=&gt;x==="yoda"; const getYodaPhrase = x=&gt;'hmm me is yoda' const isHanSolo = x=&gt;x==="han solo" const getHanSoloPhrase = x=&gt;"chewie, ready the ship", const getUnknownPersonPhrase =x=&gt;`who the hell are you? ${x}? nope, no friend of mine` const test =_switch([ isYoda,getYodaPhrase, isHanSolo,getHanSoloPhrase, //my default ()=&gt;true,getUnknownPersonPhrase ]) console.log(test('yoda')) console.log(test('han solo')) console.log(test('rey')) I hope that demonstrates what it actually means to be functional.
Immutable doesn't mean that the meaning doesn't change. It means that the value does not change.
this is pretty sweet
i believe you are correct in your statement. I just wish for a better solution. thank you for those potential solutions tho. I will look into those things that you recommend.
I'm familiar with functional programming, what I submitted certainly is a functional approach. And the simplest method for the task. What you're talking about is a difference in logic (i.e, more logic). The difference is `x === y` vs `check(x) === true`, which in the original is redundant but as you said could be extended.
What can it be used for?
I would have something that interfaces with the thing that does the searching. (Client &gt; API &gt; Server). If you're thinking about efficiency and scalability then you're going to want a language that can do that. As much as I enjoy JavaScript I don't know that it fits that tool. Can you use it? Yes. Will you be fine? Probably. Should you? Well.. probably maybe not. Or maybe so. Maybe you'll run into a roadblock with Node and create some library that fixes as much of the things that can be. Or maybe you'll have a slow site. 
Thank you for your feedback @fogbasket. To give you a more detailed idea, I will explain the process I am going to follow. User enters a tag and I auto-complete it. And user can enter as many tags as he/she wants. Then when the user hits search, I am collecting all the articles that have those tags in them. Now, I do not think this work too CPU intensive. So I think the node.js will be a good choice here. Do you agree?
 var myText = "You really should have Googled this. It's a really simple thing to find. Come on, dude." var myTextFormatted = myText.replace(/(\.\s+)/g,"\$1&lt;br /&gt;&lt;br /&gt;"); document.getElementById('yourDIV').innerHTML = myTextFormatted; I have absolutely no idea if this will work. Hmm.
This is infinitely less interesting than the idea my brain came up with as the page loaded.
For instance, inference mode: Basically a trained model comes from a backend (e.g. Python Backend with Tensorflow) and can be used to make predictions for the user in the browser (e.g. [movie recommendation](https://github.com/javascript-machine-learning/movielens-recommender-system-javascript)). In addition, it can be used for online training in the browser to train the model with each continuous input of the user.
No no no. I’m not wrong, you’re overthinking it. I wrote it with the assumption that it was a simple input and won’t be mutated. You’re mutating the input and you get a different output. That can be prevented with a very simple object spread in the closure. So `const cases = {...input};` passes the “test”. It adheres to the principles outlined in what you linked. It can be used to compose more complex functions. It’s pure. I do this professionally.
Awesome work!
Thank you :)
Thanks, that's awesome, it really helped me a lot.
I created this wrapper for myself a couple of months ago and i find myself using it a lot. So i thought i might as well share it with you guys &gt; This is how you would use lowdb const low = require('lowdb') const FileSync = require('lowdb/adapters/FileSync') const adapter = new FileSync('db.json') const db = low(adapter) // Set some defaults db.defaults({ posts: [], users: []}) .write() // Add a post db.get('posts') .push({title: 'lowdb, good stuff'}) .write() // add user db.get('users') .push({name: 'lowdb'}) .write() &gt; This is how you use ninjadb const ninjadb = require('ninjadb') const posts = ninjadb.create('posts') const users = ninjadb.create('users') // add a post posts.push({title: 'ninjadb, pretty simple'}) // add user users.push({name: 'ninjadb'})
i was hoping they would have compilers on paper you could write code and manually compile for prisoners to use and people without webpages to write libraries with
Trigger warning... All my server management scripts are written in PHP. Are there better languages for this task? Sure. But I've only got so much time in the day and other priorities to balance. This got the job done for me much more quickly than I would have if I had to properly learn to program in language, and do it well. 
First create the project with the language you are more prolific with. Once it works think about that 
Ugh. I did this once for a “sale countdown” tool for product pages. People got the number wrong every time... it didn’t take me long to figure out it was my fault
any chance to have your rename scripts system online. I'd very much like to give it a look.
If I read this right, you are just wrapping it yourself at every dot. this is not what OP was asking for. /u/kajjiNai wants to read how the browser wraps the content of some div. Sadly, I don't think that's possible. 
Yes. First make it work, then make it work quickly. Some of the best stuff I've done has been prototyped in a scripting language first (I used to use Tcl a lot), then later rewritten in something more appropriate for the finished application. [Thomson's Rule for First-Time Telescope Makers: "It is faster to make a four-inch mirror then a six-inch mirror than to make a six-inch mirror." -- Programming Pearls, Communications of the ACM, September 1985](http://wiki.c2.com/?TelescopeRule)
I suspect the answer you're looking for is "eval". However, that's incredibly dangerous in a live site because people can code *anything* they want. If this were used in a test, for example, the student could hack the test instead of actually answering the questsion. Worse, someone else could hack it and give them the code to hack all the answers automatically. The proper answer for your style of doing it is a sandbox. This is going to be really, really hard, and I don't recommend going through all that. The answer that I'd use is to create Unit Tests for the students in a Git repository and have them download that and write code that passes the unit tests. They would then give you the code they wrote and you could check it against the tests as well as review the code. Alternatively, you could write the unit tests and *not* give them to the students, but that seems like a real headache as it's likely they won't work perfectly.
Thanks. If not for div is there any other HTML element I can use? Like a textarea ? Or can I embed something like this https://draftjs.org/? I am seeing if they have an API that gives me line by line
I see a number of problems; the first one being that it is _really_ ugly. Let's try to go from first principles. What is actually the problem with the original `switch` statement? Inherently, from an FP POV, there's just one particular _annoyance_: In JavaScript, the `switch` statement is... well, _a statement_. It would be better (for some values of "good") if it was an expression. Other than that, nothing _else_ is particularly "non-FP" about `switch`. So, a worthy goal might be to try to encapsulate the switch statement into an expression, something that, instead of _acting_, produced an _output_. **But** this goal is only worthy if while reaching it we don't have to sacrifice other things. Evaluating your solution, we should think: "Are we sacrificing too much?" My opinion is that yes, you're adding a number of things which make it a less than ideal solution. - For one, as /u/lhorie already mentioned there's that really nasty `throw` there. That, in itself, is already a big sacrifice for me. We've gone from a _syntax_ error to throwing an exception and that is hard to accept. - Then you're using a _weak_ structure, a simple array, where there is no distinction between predicates and actions. This, in turn, is part of the reason for that exception. Maybe if you fixed this, the exception could be avoided... - You're _both_ transforming the `switch` _and_ expanding it. That is, you're adding capabilities. And not only that but you're doing it in a mostly unstated way. I suspect this _also_ "helps" in needing the exception. I'd say that the first thing to tackle should actually be that last point, because it is a _design decision_ and so it will mandate over the implementation details. So... do we _just_ want to transform the `switch` statement into an expression "as is" or do we want to _add_ capabilities to it? The difference in your code is clear. The switch statement, as is, does only have one kind of predicate: equality. Yours allows for anything. Of course there is an _abusive_ usage of `switch`: switching on `true`. And so the real question is if we want to keep that or not. But then again, switching on `true` in the current form, is still done with the same syntax and semantics of only allowing for equality predicates. We should keep this in mind. So, anyway, let's say we decide to keep to equality predicates. It would, then, be a _good idea_ to distinguish between predicates and actions. That, in JS, is a dead end, of course. If _I_ were doing this and still thought I wanted to do it, I would very likely just switch (no pun intended) to TypeScript. Anyway, we can at the very least give our input a _better shape_ than that single shapeless array. Now, here we can go with, basically, two options, one a bit more explicit than the other, but also more cumbersome: [ [ condition, result ], [ condition, result ], ... ] ...or... [ { condition, result }, { condition, result }, ... ] Personally I still don't like it, but at least the shape is better defined. We haven't _completely_ annulated the need for the exception, but at least with this more explicit syntax, we are hinting better towards the correct usage. (Something which, I must say, an error message like `"uneven switch statements"` looks quite cryptic.) We still have some pending problems. The `default` condition is interesting. In your code, you're just manually adding a condition with a fixed `true`. This is not a good solution. Consider the following (admittedly weird but valid) `switch` statement: switch (false) { case x &lt; 1000: console.log("X is very big"); break; case x &lt; 100: console.log("X is quite big"); break; case x &lt; 10: console.log("X is kind of ok anyway"); break; case x &lt; 1: console.log("At least X is more than one"); break; default: console.log("Such a shame"); break; } I acknowledge that this is a _weird_ `switch` but conceptually it makes just as perfect a sense to look for the first `false` statement as it does to look for the first `true` one. And this does have an effect over the `default` condition. With your implementation, you're _forced_ to use a `true` condition as default. Using any predicate (not just equality) and only testing for _truthiness_ forces you to do that, while the _true default condition_ doesn't mean "if this evaluates to `true`" but "if nothing else evaluates to `true`". The solution is to have some explicit syntax. But since we're still in JavaScript the best we can approximate is either _providing_ some sort of token for a pseudo-syntactic construct, _or_ changing the signature to distinguish the `default` by explicit shape. Maybe something like: [ [ condition, result ], [ condition, result ], ... ], defaultResult I'm not going to continue because this is getting really long and boring for everyone, but just to put things together, I'll throw a _longish_ tl:dr; I personally wouldn't really bother with turning `switch` into an expression _in JavaScript_ (just go with TypeScript and a lot of better tools will help you, or use other constructs; I haven't used `switch` in a long time), but if I were to do it, I'd much rather it had a shape such as this: function sswitch( cases, defaultValue ) { return function(value) { // ... test each case's condition for equality against value, if match, return the case's evaluated result // ... reaching this point, if there's a defaultValue, return that. If not, just return } } `cases` would _probably_ have the shape above (an array of pair arrays), but depending on the mood I might go for a more explicit `[ { case, value }, { case, value }, ... ]`. (I haven't even mentioned it but I assume it's clear that I wouldn't mind giving up _fall-through_) There are still pending a number of things, of course. You've opted to make it somewhat lazy, which allows for _reuse_. Would I really want that in a `switch`? Doesn't that turn it into something quite different? Would I sacrifice the simpler non-lazy case? Right now I'd say I'd probably not, but I've already said I wouldn't do all this in any case, so...
Thanks, mate - that cleared it up!
Except that doesn't work. https://jsfiddle.net/85wvkbae/, at least not naively. Oviously, you *can* get it to work with the space efficiency of the tail-reccursive (or loop) implementation, but at that point your implementation will likely look a lot like one of those (or be needlessly complicated).
&gt; Most native Javascript methods do not mutate the original data. Developers come to expect this from Javascript Somehow the author just ignored all of the `push`, `shift`, `unshift` etc, which are common array methods...
The "What's wrong with you?" is part of the section heading and implies that it explains why it's useful. Try reading it first.
Use Luxon over all else because immutability? If you're looking for a serious date/time library, use [js-joda](https://github.com/js-joda/js-joda). Joda Time has a long history in Java, and there's an implementation in .NET too (Noda Time).
1. Write code on paper 2. give to somebody outside and have them compile it for you, providing you with the results on paper. 3. wait for your next visitation time 4. ??? 5. Rinse and repeat until your program works or hou get released.
*I liked how you could physically hold a program in your hands, and then put on any surface in the building, where it would start executing, as if by magic.* I would love that too.
You can check out [this organization on GitHub](https://github.com/javascript-machine-learning/organization-overview). There are implementations for shallow algorithms but also usages of neural networks and domain specific implementations such as a Spam Filter or a Movie Recommender System.
Once you instantiate an immutable object using `now`, that object is frozen in time. If you instantiate a new immutable object in a few seconds using `now`, that object is similarly frozen in time at the new time. `now` will return a different immutable object each time you call it.
Hey, you’re right! In those cases, though, the verb implies mutation. I guess you could argue that`add` could too, but it’s not as obvious to me that you’re mutating there as it is with the array methods you’ve mentioned. I’ll update my post to mention those. Thanks for pointing out my omission!
Not necessarily over *all* else but over Moment (which was my go-to before discovering Luxon)
...but it's just your code i copied and pasted. I assume your just joking and trying to jest me. ahha i guess. i think we must both know what is going on at this point.
Uh, no... &gt; //easily broken &gt; cases['yoda'] = "well there goes that idea" This isn’t my code. And it’s not functional code, obviously you can’t expect the side effect free perk of functional code if you’re “testing” it by creating side effects. Immutability is a big part of functional programming.
Well... I think /u/shavyg2's point is fairly valid. Your proposed `_switch` function does not _produce_ side-effects, that is correct. But then again it does _depend_ on some **side-causes**. Yes, it is a nice idea to assume _good behaviour_ on the rest of the code, but to make your function more solid you'd try to make it free of both side-effects (your function behaves nicely) and side-causes (your function is cautiously wary). The fix, though, is pretty trivial; small enough not to invalidate your own proposal if corrected.
/r/iamverysmart 
Hi /u/Umnumm, For javascript help, please visit /r/LearnJavascript. Thank you!
Yes I had the same problem... loved date-fns but without support for time zones or at least understanding utc, i can’t justify switching 
Hi /u/codixir, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Well it doesn’t *depend* on any side-causes, it is affected by some of you try to do so, yes, and like you said that’s easily avoided. But that’s just the nature of JavaScript, you can fuck up any code by mutation if you try. But yes I agree, it should guard against that and that’s absolutely a normal thing to do. It’s a good idea to use an immutable library just in case and you shouldn’t make assumptions like that. Then again I’m not writing bullet-proof code here, the self contained example is perfectly pure.
What I dont understand is why most of the popular deep learning libraries, like tensorflow, caffe, dlib etc, which are build in C++ should only provide a python, but no Javascript API. One could as well create Node.js bindings to the native libraries and get all the performance benefits like gpu acceleration. I dont see what the difference to python bindings would be. Maybe you know the answer.
it also doesn't give me opportunity to to reuse functions, which is mainly want i was trying to achieve. This could be my mistake of not explaining it clear enough tho.
I know you said that your variable doesn’t contain strings but it would be helpful to see the rest of your code... This is a pretty specific js environment, I dunno if anyone is going to know what to expect from InDesign without being able to test it 
Time to implement your idea for fame and glory! (or document it for others to implement if you don't have the time or the interest, so you can maybe see your thought-baby in the real world by someone else's hand if not your own)
Well, _if corrected_ (and the fix _is_ small) I don't think u/Dissimulate's solution would be less reusable than yours.
Good observation. Think about it and compare it to what I'm saying. Who is the (serious) audience for tensorflow, etc.? And are they more likely to use Python to get their work done or JavaScript?
Note how if you declared the input value separately and then mutated it, the output would change.
Thanks, I have setup webpack for a new project. For this one gulp-wait seems to be working. Thank you all for your suggestions and comments.
Holy shit this is insanely good. Why downvotes lol? I can only assume someone developing same thing or similar and wants do downvote so this library wont get popularity.
I concur. The title made me go wild with my javascript imagination... I then skimmed it through and sighed 
r/titlegore
Hi /u/tazplay1337, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/kajjiNai, For javascript help, please visit /r/LearnJavascript. Thank you!
Awesome!
[Punchcard computers were already a thing.](https://en.wikipedia.org/wiki/Punched_card)
It will depend on how the variable is displayed by whatever it is that processes that variable. If you use a function to display it, read the documentation for that function. If the function is used to draw or render the value onto an object that display the value, read the documentation for that object.
Any way to do so with Node?
The Class keyword was added in ES6. I would review the difference between the old ways of adding methods to a prototype vs the new ways of using ES6 classes. More then likely in the constructor function you need to use the bind function on all the methods so "this" works properly. If you're using webpack you might be able to get away setting methods to arrow functions which automatically use the correct this.
Yep! not that i do better but.. its still irritating. 
You probably coded only small applications... when you face a 2000+ component app, being developed by 3 different teams, each in a different corner of the country, you'll value *anything* that protect programmers from doing mistakes that silently break your app.
the biggest benefit I enjoy about type checking is usually the IDE your using can tell you about errors as you literally type your code. If a function expects a string and you pass a number, the IDE lets me know. It prevents obvious errors you make miss otherwise.
Real musical applications aren't just MIDI...
As soon as we don't need to transpile back to es5 these will be great, until then though they're unuseable in production.
Do people still do this? I always thought it was pretty stupid
Why do you think you need to transpile these days? Are you still supporting IE 11?
There has to be an error you can log somewhere. Start there.
I mean, [yes](https://en.wikipedia.org/wiki/Computer_programming_in_the_punched_card_era). Yes that would be hard.
This isn't just MIDI
A quick thought for question number 1: There's nothing wrong with setting the `rotate` transform to more than 360 degrees. So when the second hand ticks from 59 back to 0, rather than setting the transform from `rotate(354deg)` to `rotate(0deg)`, you could go to `rotate(360deg)`, then `rotate(366deg)`, and so forth.
The C++ application is a render program. I want to write a tool for it in browsers. The render is 1920x1080 and 60FPS, so absolutely I don't want to transmit the data. I hope just C++ and javascript use the same memory to handle it.
whether or not its valuable is very very context dependent. it's almost impossible to answer in the abstract. in principle it can dramatically reduce the number of bugs in your code. in practice it makes code more verbose and slows down initial deelopment time. whether or not that slowdown is compensated for by time saved debugging is an open question. a lot of the time it does dramatically reduce debugging time by eliminating common classes of bugs. 
I know javascript gets data from memory address it is a serious problem. However, could I do in a opposite way? Javascript defines a block memory and C++ know where the memory is. And then C++ changes the memory data. Could I do that?
I'd look into webgl. There is no way to accomplish what you are asking for with the setup you have as far as I know. Your C++ app is a server and your browser is the client and the client should always be doing the rendering.
&gt; Any use for commercial purposes is prohibited and will be blacklisted Why not follow through with this then?
There's a lot of cool stuff you can do with Adobe scripting. I haven't done it for Acrobat much, but I did a ton of Photoshop and Illustrator work. [Check out this reference guide](http://wwwimages.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf). Basically you make a stand-alone JS file that itself indicates which app to open and then which file to open and then what operations to run through. You can either double-click run that file or you can put it in an Adobe-designated spot that it can be activated by other scripts (we used Perl). Getting output can be tricky. As a work around we had Photoshop create a blank PDF file and used the filename to give us our information. So Perl activates a script then watches an output directory for results. The Photoshop script runs some preflight stuff to tell us image dimensions, resolution, color mode, etc. I imagine there are similar methods you can run to determine bookmark locations, then create an index page with that info, then merge that page with the original PDF file.
Yep.. don't warn them... just bar them.
this isn't MIDI at all
I agree with /u/crobison that your first step should be to follow through on blacklisting them. However, you may also want to consider moving to a whitelist model. The problem with blacklists are that you're just playing whack-a-mole. It becomes a maintenance nightmare really fast.
Well sure send them a warning first. Sounds like they basically did that though. 
Yes. I know what you say. My purpose is really unusual. But I want to try it.
many companies still transpile to older ie browsers
not yet. any hint? 
Eli5?
I usually give out a 24-hour notice to the violators. Already sent them an email. So probably by almost same time tomorrow, they will be on this [blacklist](https://github.com/whizzzkid/instagram-proxy-api/blob/master/blacklist.js). I am trying to think from the perspective of a UI dev for a big company like sony music. He/She has been asked to develop a page for one of their artists. Since the artist is popular, they are expecting a windfall traffic. How can a dev even consider loading data such as an instagram feed from a service that clearly states that it's running on a free heroku instance and is only free for personal use. Isn't it obvious that there is no guaranteed SLA to get that data? This is nuts.
I have tried the F12 tool but no errors are thrown. Can you recommend another way to check for errors?
You nailed it, I guess this was the problem that motivated me to write this post. It's painful to send out a couple of mails everyday telling them that they have been exploiting my service. At the same time I also do not want existing user to suffer if I move to a whitelist model. I guess I should go through the logs and find genuine users and add them to the whitelist by default and create a google form for new users.
Hmm, my instinct is that stacking rotations would lead to errors in the long run—after just sixty seconds, the second hand would already be at 21,600°, and that just seems so... messy.
Oh I know, that was in reference to another conversation in this thread.
I'd go even further on inheritance and just say don't do it ever, prefer composition over inheritance. If you need functionality from another class DI it in. (Yes, there are edge cases where is makes sense to use inheritance over DI; but it's usually because of weird limitations which make DI impossible or very difficult)
I guess it depends on the company, even though older browsers constitute a small percentage, for some businesses it's a chunk their not willing to lose even if it's just 5%. And with the tooling available it's not too difficult (yet) to support browsers down to ie10 (minus flexbox/css-grid of course)
Our policy is &gt; 1%, and IE 10 fell off that list quite a while ago.
Not entirely sure why this is down voted, but I really like the flow of this idea. Hell, I could see an entire pipeline formed as a service that integrates all of this seamlessly. 
I definitely care about tests and so does my team. We have fairly strict rules about what must be tested before we'll accept a pull request. 
TL;DR: 1. old trends remain even more popular 2. there is something called Lona 2. there is something called Reason 
I've always hated comma leading syntax. Please don't do it! 😂
Have you looked into WebAssembly as a compile target? It can share memory with JavaScript.
This is nice. Range iterators. The only point I'm a bit doubtful is the need to have two different ranges, one with a smaller set of features. Specially since the size of the larger one is not _"big"_ anyway.
On behalf of the whole webpack team, I really appreciate the time and effort that you took to explain this. This is one of the final remaining pieces on our documentation that I would like to solve for webpack.js.org/ So if you don't mind, I've created a new issue ( https://github.com/webpack/webpack.js.org/issues/1801 ) so that hopefully we have this reasoning, context, and motivation for why webpack exists and what does it solve. 
&gt; I remember there being some talk on overhauling the UX of webpack configs, but I don't see much sea change based on this changelog. Has that been postponed? &gt; &gt; EDIT: That said, all these changes are welcome. I'm fascinated to know how wasm modules will work. Will webpack provide an easy way to take wasm binaries and provide a JS interpreted version for "legacy" browsers? https://github.com/webpack/webpack/issues/6357 has all of the changes we have slated currently (looking very much like our RC candidate minus one architectural feature remaining https://github.com/webpack/webpack/pull/6369). If you notice in the notes here, we have made it so that out of the box you don't even need to specify a configuration. This will give you wasm, json, js bundling out of the box. And will reduce the size of your configurations by defaulting these less commonly changing values. 
 &lt;form&gt;&lt;/form&gt;
Interesting. I can’t find a Medium think-piece on it though so is it that interesting?
I used iterators so that they could be consumed multiple times. If you create a `Range` object, you can iterate over it repeatedly. Generators can't (as far as I know) emit any more values after they have been consumed. Also, the iterator part is only a few lines. Most of the code is there to add methods that match the Array.prototype methods without actually making an array. This project is admittedly pretty silly, but I'd love any other feedback or suggestions. Do you know a way to reset a generator?
Debugging would cost a fortune in ink
[Here's](https://developer.mozilla.org/en-US/docs/WebAssembly) an overview if you haven't already found one. The [WebAssembly.Memory](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) API is probably most important for your use case. It provides a resizable block of memory (exposed in JS as an ArrayBuffer) in pages of 64 KiB. [Here](https://stackoverflow.com/a/46748966/2175506) is a StackOverflow thread with a working example (link at the end of the post).
&gt; Among popular object-oriented programming languages, JavaScript is relatively unique, as other prominent languages such as PHP, Python, and Java are class-based languages, which instead define classes as blueprints for objects. It's not as unique as we think. In Python, for example, a class is itself an object (a building, not a blueprint), and inheritance is done by delegating down a chain of objects, from instance to class object to superclass object and so on. Just like in JavaScript. Ruby is also the same way. PHP is in-between. Its classes are still objects (a building, not a blueprint), though it doesn't use delegation for inheritance.
&gt; auth0.com Thanks! I am a self taught noob programmer and according to [reddit!](https://hackernoon.com/your-node-js-authentication-tutorial-is-wrong-f1a3bf831a46), passport js doesn't seem to provide documentation on how to store authentication passwords and how to handle sessions. **Do you know if there is any documentation that would cover passport js implementation in its entirety?**
&gt; I am curious about the goal at the end of the day You tell me lol. It sounds like you want to enforce that a composition of tests and predicates don't come undone via array/object mutation shenanigans, and you also don't want the complexity of option types to deal with the inability to do exhaustive checks. I'm arguing that you should have at least some form control over your return types. So, a "composition of tests and predicates" sounds like a type in my books, so let's call it `type SwitchCase`. We want a SwitchCase that is composable but immutable. We also want to be able to specify upfront that falling through to the end should do _something_, whatever that may be. In concrete terms, that might look like this: const eq = x =&gt; y =&gt; x === y; const always = x =&gt; () =&gt; x; const defineSwitch = (d = () =&gt; {}, cs = []) =&gt; () =&gt; { const f = v =&gt; (cs.reduce((m, [t, p]) =&gt; t(v) ? p : m, d))(v) f.case = (t, p) =&gt; defineSwitch(d, [...cs, [t, p]])() f.default = v =&gt; defineSwitch(v, cs)() return Object.freeze(f) } const $switch = defineSwitch() const test = $switch() .case(eq('yoda'), always('hmm me is yoda')) .case(eq('han solo'), always('chewie, ready the ship')) .default(x =&gt; `who the hell are you? ${x}? nope, no friend of mine`) console.log(test('yoda')) console.log(test('han solo')) console.log(test('rey')) const switchOrEmptyString = defineSwitch(always('')) const test2 = switchOrEmptyString() .case(eq('yoda'), always('hmm me is yoda')) console.log(test2('rey')) // empty string const switchThatThrows = defineSwitch(x =&gt; {throw new Error(`no case handles ${x}`)}) const test3 = switchThatThrows() .case(eq('yoda'), always('hmm me is yoda')) console.log(test3('rey')) // throws So here, we can reuse a partial SwitchCase but never mutate something that we already defined (e.g. we can do `test4 = test3.default(always(''))` and `test5 = test3.default(always('no'))` and nothing will break). We can also create different versions of `switch`. The first one returns `undefined` if there's no default case, which is arguably the closest in behavior to a switch statement. The second returns `''`, and it would be type-safe to call e.g. `toUpperCase()` on the returned value without a check. The third one bails out and throws. So now, you can decide what you want your `switch` to do in error cases, call `defineSwitch` with an appropriate handler, and then all code using that `switch` would conform to that behavior.
See [this recent Reddit comment explaining why JS module formats and bundlers like Webpack exist](https://www.reddit.com/r/javascript/comments/7qdksl/having_a_hard_time_understanding_webpack/dsoq9p3/). You don't have to use Webpack, specifically, since there are several options available that ultimately do the same general workflows. But, Webpack is definitely the most popular bundler at the moment, and there's lots of documentation available. You might want to check out a few sections in my [React/Redux links list](https://github.com/markerikson/react-redux-links): - The [Basic Concepts and Overviews](https://github.com/markerikson/react-redux-links/blob/master/basic-concepts.md) section has articles discussing what modern JS tools do and why they exist - [ES6 Features#Module Formats](https://github.com/markerikson/react-redux-links/blob/master/es6-features.md#javascript-module-formats) has info on what the different module formats are, and the history behind them - [Webpack Tutorials](https://github.com/markerikson/react-redux-links/blob/master/webpack-tutorials.md) has lots of articles on what Webpack does, how it works, and how to use it
You got pretty in-depth with math stuff, and I'm absolutely terrible at math, but could you build something like a Siri or Alexa with Javascript? I was just starting to wonder about building something on a Raspberry Pi or Beagle Bone Black. I guess, if there's a lot of math involved, I won't be doing it, but I'm still curious if it's possible.
You didn't do your homework though ;) Where's the pseudocode for your problem? Either you are not telling the truth about what you need (I hope it's not it) or for the time being, you won't be able to solve your JS problem. You basically need to pay someone (if it's easy, someone may do it for free) to look at your files and stuff, and code whatever you need to solve your request and leave the learning endeavor for the future.
A generator returns an iterator after invoking. So invoking a generator again gives a new iterator. So the range function above can be consumed multiple times.
I've never actually used it but I think you might be looking for something like this https://loopback.io
Next.js. also does server side rendering.
You might look into [Sails](https://sailsjs.com/). I've never used it myself but it looks like it's modeled after Rails (Ruby), which is famous for its "convention over configuration" mantra.
And forgets about dealing with the ( I'm) in the first example. I prefer most of time double quotes for this reason 
First thing that jumped out to me as well. Just paste the code into your console before hitting publish and you would catch the multiple errors that exist in all but the final line of that first example. 
That syntax makes me want to punch kittens. I have never and hope to never see it. I mean if the only reason is to simplify a diff just no.
Honestly I just use template strings almost by default (in longer strings). Never have to worry about which quote mark had to be escaped.
no.
Check my other comment.
Feathersjs is really excellent for this
Nice! I didn't realize that you could replace the _function that returns an object that contains a `next` function_ with a generator function like that. Thats much cleaner. I've added a version like that to [the gist](https://gist.github.com/thebopshoobop/9e9978ef8d6ada10b68ad9ba11627cb0).
You may want to add a key pressed function for example in my pong game var value = Number(key); if(value == 37) { // left arrow this.paddle.move(-4, 0); } else if (value == 39) { // right arrow this.paddle.move(4, 0); } else { this.paddle.move(0, 0); this is so that when a certain key is pressed it moves the paddle so it should be as simple as changing what happens and the key code to shift instead of the arrows
Add an event handler for keydown, and have something detect when the mouse is over that cell. Put them together and there you go. 
A generator is just an iterator, after all. :)
tried, suddenly a keypress was getting counted as 100+ times
Alas, that works util you start writing MySQL. That uses backquotes to escape field and table names.
I see the difference, but this doesn't return an iterator, it returns an iterable object. So when the iterable is iterated over it creates a new iterator object every time. So invoking the range function and generator function will not get you the same object, iterator vs an iterable object. Anyways, it's an interesting way of approaching the problem.
It actually turned out to be quite easy to update the Range class to use this strategy: https://github.com/thebopshoobop/iter-range/commit/747b151d830a145d9d533b052dcba0d97ab6cd9d
You might want to remove that number immediately. 
'toUpperCase()' isn't being run on an array. The array is made up of words (strings). You are taking word number 'x' and selecting the first character (charAt(0)) which is a string, and then uppercasing it.
And we have lift off.
The way they wrote it is pretty good, but I'll try to show you what it's doing. for(var x = 0; x &lt; array1.length; x++) { var word = array1[x]; var firstLetter = word.charAt(0); var capitalizedFirstLetter = firstLetter.toUpperCase(); var restOfWord = word.slice(1); newarray1.push(capitalizedFirstLetter + restOfWord); }
Good thing we’re talking about JavaScript, then.
That doesn't do what he's asking, and for what your function is doing, it should really look like this const uppercase = str =&gt; str.toUpperCase();
I did end up refactoring it back together. Thanks for the suggestion!
damn your right. edit incoming.
Its somewhat outdated. Half of the module-level patterns (what they call "design pattern") are still in-use, though some of them are handled by compilers now, so only appear in generated JavaScript. You would hand-code some simplier JavaScript in some modern ECMAScript flavor (ES7, TypeScript, Flow), and know that under the hood, it would give you the aforementioned pattern. For architectural patterns, or what they call "MV* patterns", it's better to learn frameworks (React/Redux, React/(Re)Flux, Angular, Ember), and figure out the name and usages of major pieces in that framework, and know how the frameworks are implemented. There are too many permutations in the architectural patterns nowadays, most of them don't have names anymore. 
I mean, if you're comparing valid code to invalid mishighlighted code, anything looks better
Appreciated. I'll get reading.
I actually like it
Spring boot
If you only store the most recent two values as cache, then it is not memoize, its just a loop with 2 extra local variables. Benefit of tail-call recursion is not the argument of "loop vs recursion". It is to allow you to write a recursive algorithm as-is, and the compiler would compile it with loop-level performance without you changing your code. This is very useful in areas like tree/graph traversal. 
the code you post is not a fair example, you write a fib function with inner cache. But in my article I introduce a memoize functor(not pure) to manage the cache outside, version in my article the loop iterations is 15 not 328. wish you could read my article again.
wut
you should think again. when excute m times with range Xn in fib(Xn). If the caller gives a Xn &gt; Xmax, he will pay cost fime for Xn - Xmax, if Xn &lt;= Xmax, the caller could get the answer directly from memoize. While tail call must pay Xn again.
JavaScript reinventing Perl 5, once again.
It doesn't apply if a normally quoted string contains backquotes. So this remark really doesn't have a point.
no, you still change your code. my way not need change code, i do all things outside. in the raw Fib is `return Fib(n - 1) + Fib(n - 2)`, but in tail-call style, it must change to `return fib(n - 1, acc0 + acc1, acc0);`
Looks great. 
My mistake, the time I gave is for factorial. There is no `O(k)` loop for fibonacci, thus no `O(k)` tail call for it either. You have to memoize for improved speed Fibonacci whether you loop or recurse. My statement about tail-call is still true for linear recursive operations (e.g. factorial, tree traversal).
tail-call style for factorial is not friendly for memoize, you could try yourself. If you have a service to provide a remote factorial, then people call it m times and anti-tail-call-optimization version would win
Who the hell does that these days?
It's 2018, are we really still writing articles highlighting basic es2015 features?
Then please show me how you get 15 iterations while only keeping 3(ish) values around, that's general, and does not require you to change your implementation.
Yeah, no, my point wasn't that you were wrong per say, but the immutable trend and methods are rather new addition to a language with a lot of history (and baggage). We don't expect methods to not mutate in javascript, as much as we are thought to avoid the methods that *do* mutate, cause "reasons". I'm not saying it's wrong, I preffer immutable programming myself, but if you go and find someone who did js 10 years ago, I doubt you'd find that he "expect immutability" from js methods.
I agree. Won't you reduce the diff if you always add trailing commas also? 
I've done same game once. But unfortunatelly I removed it from online repo. If you want to check if point was scored you need to check it like this: if (0 &lt; ball.y - ball.radius || canvasHeight &lt; ball.y + ball.radius) { // ball touches edges of the canvas thus point was scored As for steering with mouse you need to add one event listener canvas.onmousemove = event =&gt; { paddle.x = event.clientX; } Here's small idea from me: try to add vectors for calculating ball movement, this way you can add some randomness with ease.
This doesn't scroll as smooth as a normal scroll bar on my laptop. Also, I can't scroll to the side. And if I am at the bottom of a container and try to scroll down, normally the page should scroll further down, but does not in this case.
Also doesn't support autoscroll (middle click scroll), nor native smooth scrolling. While it's cool that you can customize the scrollbars, overriding native scroll behaviour has just too many drawbacks and is often annoying for users. Please don't override native behaviour.
 const uppercase = str =&gt; str.replace(/\b[a-zA-Z]/g, match =&gt; match.toUpperCase()); 
Great points! I'd like to do more Python this year! Just out of curiosity: what's the company you are working for regarding ML? Feel free to send a PM :)
Pretty awesome how simple it is to use wasm like that, I'm super impressed! JS import { add } from "./add.rs" console.log(add(1,2))
Maybe they outsourced the task through something like odesk/upwork with tight schedules or low rates, so that the developer who implemented it just didn't have enough time or didn't care enough to read the description of your service. Or maybe developer informed his management that he will use this proxy temporarily before switching to proper solution but didn't have time due to even higher priority problems.
That is it exactly. We have some code that runs some really complex queries that can't be hidden behind a library, so had-write all sorts of SQL queries. I can't cut and paste from MySQL Workbench without massaging the paste due to that quote issue.
`split("")` is a horrible way to split a string into characters. It shatters on all sorts of high-order characters. // This is very broken console.log("abc😀".split('')); // This works console.log([..."abc😀"]); // So does this console.log(Array.from("abc😀")); 
Yeah, I've remapped the double quote to the backtick because it's by far the best way to specify strings. And also because backticks are a bit awkward on german keyboards.
Escaping the backticks is still easier than fixing all the new lines I think. 
The "Object Literals and Concise Parameters" section has a bad code sample; `c === concise` is false, the objects just have the same form.
There is still a bit of leap of faith involved for some developers who write 'browser friendly' ES5 and need convincing to adopt the (initial) pain and doubt of adopting transpilers. Articles like this can give people the push, no matter how repetitive they can seem.
Sorry I wrong, I need 16 iterations instead of 15. Here is the link [gist](https://gist.github.com/ukari/13a9756281a1997fe1cac24399f1f35f) [jsfiddle](https://jsfiddle.net/ukari/4emz5wzp/1/)
it's not that hard, you can do it
It is designed to be impossible. If a method is discovered that allows it it will almost certainly be fixed.
No
Not a backend solution ...
Thanks
&gt; Arrow function syntax allows us to omit the keyword return if the function contain just a singular intention of returning a value (or an evaluated expression). &gt; For the JavaScript interpreter to understand we are using this option, we need to swap the curly brackets { } with round brackets ( ) , like so: Uh, that's not true. No brackets needed.
Moment is nice, but why not improve it even further?
Last year in order to achieve some consistency in setting up our javascript projects, we put together a set of best practices and asked the community to contribute. Thanks to your feedback (mostly on reddit) this documentation is in a much better state now. It has been translated in 3 languages, covers more aspects of a JS project and has achieved more than 11K stars on github. Our plan for the coming months is to add a section for GraphQL best practices as well as adding more translations.
You are confusing data with function.
Thanks for your advise! I will do better :)
&gt; Also, can I pursue this legally? Not worth it. A cheaper route would be to redirect those domains to an alternate page response explaining the license violation.
I thought I write a good article to recommend things not be mentioned in the fixed mindset, and get a lot of downvote. burns Bruno in Rome
Can you show me how you added it? 
https://jsfiddle.net/tssa2o8e/17/
I'd like to stay anonymous, but its one at the bottom of this page http://pytorch.org/
Classmates always are asking me why I care too much about how my code looks.
I use double quotes in HTML and JSX, single in vanilla JS
They also stole the for loop
TypeScript already allows this. It's even enforceable using tslint. 
&gt; it still recommends using "stage-2 features"... TL;DR on why this is bad for JS newbies like me?
Stage-2 is mostly stable but still draft / incomplete. They are features that are likely to be included in the next JS specification, but they’re not final. Just means you *might* be learning something that’s going to change in 6 months, but what else is new? The description over at Babel.js has more detail about what it actually includes: https://babeljs.io/docs/plugins/preset-stage-2/
Stars, upvotes, downvotes ... what is this obsession? Meaningless. They are literally just clicks of a button made by users, bots and trolls like me.
Ive never heard of this, thanks for letting me know. But in the context of an emoji, how the hell are you supposed to uppsrcase it amyways? 
Two syntax errors in the first code example. Why is this upvoted to much?
 for (let i of Array(10).keys()) { console.log("Look Ma', I'm iterating 10 times with ES6!") }
I could've simply put e.shiftkey and w/o the window and everything would work, TITLE.
I just can't, show me
https://jsfiddle.net/tssa2o8e/18/
ES6 4 lyfe
thanks, buddy!
Pretty sure if you look around Github for express api boilerplates you will find plenty but don't trust them blindly.
Hmmm, ok. I'm going to reply in my flow-of-thought, as opposed to textual ordering, so forgive me if this response seems a bit jumbled. *** Instead of using the transformation/animation `setInterval` mix, I should switch up the coding to use only animations within a `requestAnimationFrame`, so that it's firing up as soon as you switch the tab back to the visible position, keeping everything with the illusion of being synced. I suppose that I could figure out how to do so using the example clock and the [simple](http://www.lapartequefalta.org/clo4.html) samples that you provided, but how would I do so while still incorporating the bezier curve transition to the second hand animation? This might come across as superficial, but it's a key aesthetic feature of the overall clock. I ran the Inspector on clo3.html/clo4.html (the only difference I can find between the two is that clo3 has `return w + d15 + d*Math.sin(d15*Math.PI)/2;` within the `function chunkify(t)`, whereas clo4 just has `return w + d15;`, but I'm not sure what that difference is doing, because they look identical running side-by-side), and it looks like I can "ignore" the `// Hour and Minute marks` bits, because that's just setting up the appearance. In the `// write` sections, it looks like the rotation is being set, and based on its absence from the "non-animated" clo.html, the `function chunkify(t)` part of clo3/4 is setting the transition—would I incorporate the bezier transition there? Then there are the `save` and `restore` commands—are those what makes it continue to refresh? Once all that's done, would I need to minus-1 from the hand angles to keep things synced, or would [correctly] rewriting things solve that problem? ^1 One question about that sample
Thank you, I'm a graphic designer first, so the design preceded the animation challenge—it's all Illustrator vector work. I checked out the moment.js clock, and there are no immediate hints that I can find as to how it runs—the clock itself is just a div with sub-id'd classes, and the script is just `window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga('create', 'UA-10641787-5', 'auto'); ga('send', 'pageview');`, so I'm not sure what else to look for
Yes, there are plenty of people who still haven't adopted the newer features.
;D I know that I can do it this way also. I want that pressing SHIFT clears it, on the position the mouse is, not moving it a pixel
Ahm... The clocks I linked are various variations on the same theme. The difference is subtle. The point is that, over the simplest case, the animation is calculated for each frame. The actual calculation is what you may tune in different ways. With a CSS animation you have a set of predefined curves, and you chose a bezier one. You can do the same calculation of a bezier curve manually in JS (just look up tje appropriate formula). What you see in my code are not bezier curves. Instead I chose a more complex curve, mixing an exponential with some various sinusoidal bounce at the end of the movement (in the final one the second hand has quite a bit of bounce, while the minute hand only has a little bit). But that is not important. The important bit is just the idea of using a formula (one you like) and using that to animate the rotation yourself. 
Yeah, that's bad advice by default. I disagree with those who wouldn't use ESNext features in production projects, but equally I don't think you should be chucking an entire stage preset into your project. Use stable by default, and then add in individual features as plugins as needed (for example https://github.com/OpenSourceCTF/website/blob/develop/.babelrc.js#L33).
Oh, now you're asking your question correctly. You want that simply pressing shift clear whatever cell the mouse is over, right? You should've said that from the start :) The solution is a bit more involved, then. The press of the shift key will not have information on which cell the mouse is on. So you need a similar approach to my initial attempt, but doing exactly the opposite. In variant /17, I'm storing the state of the shift key by capturing the keydown and keyup, and then use that in the mouse event, right? Instead, what you need to do is, when the mouse enters a cell, store which cell it is on. And then on a shift key event read what cell it was on.
Are you sure there are no other scripts? That looks like the google analytics script to me. I’d check but I’m AFK
TL;DR: Yes, by modifying the toString method and understanding type coercion. 
Whatever floats your boat. Here are the eslint rules: https://eslint.org/docs/rules/function-paren-newline https://eslint.org/docs/rules/implicit-arrow-linebreak
Can someone please explain how this isn't useless and the wrong place for this logic.
How dare you breaking the sacred rules ? :O
I could be alone on this one, and please, anyone else here tell me if I'm wrong, but I don't believe a employer is going to be "wowed" by online javascript competitions, or care for them at all. With that being said, I like this one https://www.codingame.com/ They have daily challenges and you can play against others, but similar to hacker rank, and any other challenge based site, it's going to revolve around logic and programming - although I can't imagine why.. it's not like javascript and programming languages alike utilize much logic or... programming .... 
&gt; And after all this time, and comments on reddit you'll still find some trivial shit to nitpick. 
&gt; When I first started programming, I found code examples using variable and function names like Foo, Bar, Baz, Bash to be extremely confusing. Heck, they are still confusing for me, even if I know that it's just a naming convention. Unless an example is shorter than 5 likes, one should never teach with *foo* and the likes.
:( LOL
If it's just about authentication have a look at this example https://github.com/ReactTraining/react-router/tree/1.0.x/examples/auth-flow
Or this one https://code.tutsplus.com/tutorials/authenticating-nodejs-applications-with-passport--cms-21619
I'm quite lazy, could you say which ones ?
I'm not sure. At first thought, I would say if no errors are thrown, then I don't see what you would polyfill.... Strange situation. 
Those are rookie numbers, you gotta bring those numbers up.
https://www.codewars.com
Thank you so much.
IMO even `a, b, c` is better than `foo, bar`. Anyway I always try to use reasonable names for variables.
Gather a couple of classmates with bad looking code. Tell them each of your solutions have a bug. Then propose to fix the bugs in each other's code and ask who wants to fix yours.
I just saw the Api in https://igpi.ga is no longer working, as long the ?__a=1 append at the instagram URL. Anyone got a new solution?
&gt; Don't use basic authentication unless over a secure connection (HTTPS) In this day and age, *nobody* should be using basic HTTP auth. **Nobody.** Using your transport mechanism as your sole source of login security is a single point of failure. Remember that with basic auth the credentials (merely a base64 encoding) are re-sent with every request as well - far from ideal. [For further reading.](http://swaggadocio.com/post/48223179207/why-the-hell-does-your-api-still-use-http-basic)
For the record, these are not "Javascript best practices" but Javascript project best practices. The difference is important.
Stage 2 is generally the place that many people start using new features since at that stage of the TC39 process the syntax is covered but more importantly the APIs have already been decided, so if the internals change then it makes no difference. With Babel, you run no risk whatsoever putting this in production code. Many of the big players use stage 2 as their starting point. Facebook is a good example - you can see evidence of it in their OSS projects (check out React Native, which includes stage 2 features by default). Worst comes to worst and the spec changes, the Babel plugin or polyfill isn't going anywhere, and you have the simple task of removing the new features from your code. Full stage 2 description: &gt;Draft: all major semantics, syntax and API are covered, but TODOs, placeholders and editorial issues are expected Obviously it's up to the individual or the company, but the only risk is losing a couple of hours if the spec does change dramatically.
Okay I edited it a little bit and added the scores but it wont call on the function and just freezes same link as before if you want to look at my changes. 
12k now
A few things I disagree with (being an author of various small things): - using another nano-library external dependencies: I would actually avoid that because it offloads decisions about semantics to another project. For example, if that project decides to support symbols, your library as a downstream consumer ends up taking a hit even if it never deals with symbols - no builders and transpilers: You need to play nice with the ecosystem. It ends up being more source code to explicitly support UMD than to just do `export default yourThing`. Let the consumer of your library decide if they want to use Rollup for its dependency inlining benefits or if they want to make trade-offs to get some other benefit from Webpack/Parcel/whatever - uglify: Again, let the consumer decide what they want to do - ES6: it's not really about writing ES5 or ES6, it's about being conscious of the weight of your code after it goes through transpilation in your user's project. An arrow function probably won't kill you, but you don't really get much of a benefit from writing out Array.prototype.slice.call instead of using rest operators, and you usually don't want all the overhead of an ES6 class. - tools like size-limit: These tools just help you find out what the size is, not so much how to decrease the size A few things that I'd add: - don't try to please everybody: have one way and only one way of doing each thing - be careful with what you _don't_ support: if you break some expected semantic by design, it'll eventually reflect in the reputation of the library. Either be correct or be VERY explicit about caveats - don't code golf: readability first, size second
&gt; Avoid URLs like this: &gt; GET /blogs/:blogId/posts/:postId/summary &gt; For nested resources, use the relation between them in the URL. For instance, using id to relate an employee to a company. &gt; GET /schools/2/students/31 I assume it was created by different people but I spotted this after 3 mins of reading.
The first url is referring to a property rather than resource itself hence the suggestion to avoid it. 
Right click in the page and click on 'Inspect Element' - that'll open up the developer tools. Then find the 'console' tab. You'll see your problem. playerscore !== playerScore
You realize everyone transpiles their code anyway, right?
Basic auth is perfectly valid as an additional level of authorization above your regular business logic. For example in test environments. You'd like to test your application from a point of an unaurhorized user, and yet not open it to the whole world. 
oh whoops thanks :)
Does this work with TypeScript?
Store it in your server and use that as a proxy to the third party API. No, there's no way around it.
looks like there's many ways for everything except shift ctrl and such, they only listen if they're pressed while another key is pressed, like e.key will work on everything except few like shift it's like there's no way to do it
It looks like it supports source maps, so it should work with TypeScript and other compile-to-JS languages that generate source maps. 
It's working, check my blog's homepage: https://nishantarora.in
What are the benefits of this? Standard approach is to have both request and response.text return Promise objects which can be awaited (or yielded) exactly the same, without new abstractions, helpers and constructs: response = await request('tip.txt'); text = await response.text();
&gt; Organize your files around product features / pages / components, not roles. Also, place your test files next to their implementation. Thank. You. Even a tightly scoped project can get downright unreadable if you're dumping everything into a `components` folder.
`get_api` doesn't have an `x` property. There's a local `x` variable in the `get_api` body, but those don't become properties of the function object. They're localized to the scope of that function call; the function object doesn't have access to those. Generally you don't bind functions to other functions. Instead, you bind to some object that has the data you want to access via `this`. getChannel.bind({ x }) // object with the current scope's x as a property
That is wrong. Basic auth is perfectly safe if used correctly (at least https and strong password). Basic auth is exactly like logging in to your reddit account, admin account on the api (where you can create tokens, add users etc..) or your super confidential customer database application. No where does it say that basic auth can't have IP restrictions, MFA, rate limiting, password rotation schedules, one time password etc.. Yes, I highly prefer (insist) to use oauth or other more sophisticated authentication schemes for actual integrations, but implying that it is not encrypted when we are sending it over https and that **nobody** should use it, ever, is just plain wrong. Yes it is not ideal, but no it is not inherently unsafe - if used correctly. &gt; Authentication tokens must not be transmitted in the URL: GET /users/123?token=asdf.... &gt; &gt; Why: &gt; &gt;Because Token, or user ID and password are passed over the network as clear text (it is base64 encoded, but base64 is a reversible encoding), the basic authentication scheme is not secure. &gt; read more... Another false claim there.. Query parameters are encrypted and irreversible if transmitted over https. Again, I agree that it is far from best practice (for instance because query parameters are logged literally everywhere, see [owasp](https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url) for more information), but stating obvious false facts as reasons for why something is considered bad practice is not the correct way of educating the community. When I see statements like that, it reduces my trust and confidence in the entire project, even though most of it is very very good and a great resource for the community. Also stage-2 proposals?
Tokens can be expired and do not leak passwords. The basic auth mechanism [relies](https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side) on the `Authorization` header being sent with every request, which is just a base64 encoding of `user:pass`. Sorry, but that's way too much password exposure to be reasonable by today's standards - https or no. A password exchange should only happen *once* and subsequent requests should be authenticated using a secondary mechanism that can expire.
Want to use it in a controlled development environment that you don't care about being secure? Go for it. IMHO, you're better off developing against a more modern mechanism though.
Alternatively, use an IDE that understands doc blocks and will automatically label the parameters for you, including all the built-in ones.
Yet another paid course pretending to be an article.
I think you might be right. Still a bit confusing.
After each bullet point there is ‘why’ section. On this one it says: “This is not pointing to a resource but to a property instead. You can pass the property as a parameter to trim your response.” 
I agree. For me object spread is always worth it, for example, as it's a lot nicer to work with than Object.assign. 
I didn't see anything else in the head or body, but I'll check again when able (also afk).
Ok, I'll play around with it and see if I can't get things worked out and ticking away.
Binding a function isn't bad practice, often needed for the situation. But it isn't needed in your case since getChannel is not associated with any object. If you want getChannel to have access to data from within the get_api call, then you would rather have that passed in as an argument to the getChannel call, something like: }).then(function (data) { getChannel(data, x); }) // ... function getChannel (data, x) { console.log(x); } getChannel wouldn't use `this` at all, instead relying on what it was given as arguments in its call.
i use this code block all the time const log = (...message) =&gt; console.log(...message); const ini = (...iniArgument) =&gt; log(...iniArgument); const loading = () =&gt; log("This won't do anything"); const interactive = () =&gt; ini("DOM and JS: loaded"); const complete = () =&gt; log("CSS and Image: loadad"); const docState = { interactive, complete, loading }; const load = (e) =&gt; docState[e.target.readyState](); document.addEventListener("readystatechange", load); it's useless.. but it's beautiful.. it looks like a block of codes.. the function load demonstrates how to eliminate the needs to use switch.. or maybe if/else statement?
Managed to get the 2nd one first actually, haven't gotten the 1st or 3rd ones yet.
Oh yea. It's working here now. But at the time i posted, it wasn't. Thanks.
The 1st one is just an exercise in tedium. There's nothing interesting about it. Its just a test of patience to sit there and interpret it by hand. Or you could run it through one of those interpreters that exist. Meh.
Not going to fly, using comments to document code and an editing environment that can parse those comments? Nope, far too difficult to ask of someone, this method of always taking a single object as your sole parameter is so much more sensible for api design. 
I fare much better reading descriptive names for variables. If that's a coding best practice, it should be even more a coding guide best practice.
Do you develop inside the container?
That article is about using Basic Auth over HTTP. The advice here is that Basic Auth is fine iff you HTTPS.
I tried using it for actual browser UI auth (for fun i guess?) Browser's act all quirky about it. Can't even log out without doing weird stuff. 
The code inside of the promise constructor will run once and the "callbacks" will each run but not at the same time. JavaScript is single threaded and can only run one thing at a time. They will run in the order they were registered with a "then".
Great, thanks for the info.
Hi /u/kaloraat, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Static type checking. Problems solved.
https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval var timerId = setInterval(() =&gt; aCheck(), 2); ... if (b &gt;= 20) { clearTimeout(timerId); }
oh thx
Come drink my kool-aid, it will solve all of your problems!!
Well, 8 out of your top 10 anyway.
It is a JavaScript environment that runs outside of a browser. Basically it breaks the language out of just running on a web page. The environment itself implements a number of useful features and is often used as an HTTP server but it can really be used for anything. It comes with npm, a package manager for JavaScript and so makes it easy to use libraries that others have written.
Funny, I read the release notes before I saw this reply. It's all great news, I'm really liking how you guys are handling this! I'm gonna have to onboard some co-workers on Webpack at my new job, so this and the CLI is going to be a shining light when all this goes stable!
What is Google? What can you use it for? What questions can it answer? How easy is it to search?
You don’t need comments for your IDE to know your parameters. WebStorm certainly doesn’t.
Well, I mean, go for it! https://github.com/Robinfr/electron-react-typescript Always looking for feedback.
What kind of framework/technology lets you implement two distinct authorization methods at once? Another upside to the basic (or digest) auth is that it is very easy to add it on the load balancer/apache/nginx layer, so your app doesnt even know about it, so it doesnt add any differences between production and staging env. 
Oh, I did not know this. I browsed through MDN, and this is not mentioned in the Promise documentation, but the async documentation mentioned it. It may be a better idea to start with generators, to help people understand how coroutine essentially works. I will mention await/async in part 2.
Npm literally stands for node package manager. It was created originally to be used with node. Node doesn't come with npm as much as npm comes with node.
The point of it is the name of the function. Resolve a promise **then** do this other stuff.
I use Typescript, and it catches all these things all the time. It's awesome.
People aware of the subject, but undecided or uncertain should just google the plethora of resources on the subject. Unless you've recently started learning and all of this is new to you, there's really no reason not to adopt and use new features. It has been a quarter of a decade and people are deliberately and pruposefully staying ignorant.
Yep, before async/await there was Bluebird's [coroutine/function*/yield](http://bluebirdjs.com/docs/api/promise.coroutine.html) and this generator approach surely helped me to understand the physics of coroutines better.
Why is this getting downvoted?
Most of these are not even specifically Javascript related. 
WALK IN LINE! OBEY!
Npm does not stand for node package manager. &gt; Contrary to the belief of many, "npm" is not in fact an abbreviation for "Node Package Manager". It is a recursive bacronymic abbreviation for "npm is not an acronym". (If it was "ninaa", then it would be an acronym, and thus incorrectly named.)
neato
Codefights.com is really good. There are daily challenges, interview practice exercices, "tournaments" and a pretty great community. It's mostly about algorithm though... 
Because r/node has very little traffic as it is. We don't need the userbase divided even more.
The most common issues are not the ones that keep me up at night.
Linkt to your blog seems broken.
corrected
Yes i understand but this jquery library use type attribute as a text. Provides better look and feel.check once....
This tag loads default datepicker.
But with the compiler acting as a watchdog, I am not subsumed by these issues. All of that mental load is offloaded to the computer. Instead I focus on the bigger problems you alluded to.
Meh bot.
*Beep boop*, I am a bot, *darn it*. *** ^^Darn ^^Counter: ^^46360
No doubt.
Stage 2 means "We're close to final draft" but it _doesn't_ mean that it will become an accepted feature. Stage 3+ is the only assurance that the feature _will_ become part of the Javascript.
Jquery is just a bloated library offering nothing that can't be easily achieved with modern javascript. 
Yeah, nowhere near enough content on there to start thinking about curating and specializing. If you want to manage some stuff post more on r/node
Oh dear... the top post is about Ashley Williams... the power of trolls is still too much. 
Absolutely, you should be "coding with these issues in mind", but it's worth noting that these are the Top to errors *that made it to production*! So they are being missed in a large number of cases. To me, that says our minds aren't good enough and maybe offloading these problem to a type checker can free up some of that valuable mind real-estate. Of course there is a tradeoff but, in my experience, I've found the tradeoff of adding types to be well worth it in any decently sized project (measured either space, time, or both - with is most of them).
find books on javascript design patterns, with constant practice you will get better at properly structuring your code
Every time I see the name sails I always hear “suby on sails” in my head 
Really cool idea, looking forward to trying it out.
It's probably just a joke to confuse people.
Realistically, when you get a real job, probably a lot of spaghetti jQuery strewn across countless files as far as the eye can see. Not js files mind you, but inside even more script tags in the HTML.
And motor cyclists don't need helmets; they know there are cars on the road.
What are the difference to Luxon?
Addy Osmani (developer at Google) wrote a book on JS design patterns. I've read some chapters but not all of it. It might be useful to you: [https://addyosmani.com/resources/essentialjsdesignpatterns/book/](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
With HTML : &lt;input type="text" name="usrname" maxlength="10"&gt;
Are you comparing bugs to people?
You can't restrict what people put in the prompt, but you can check what `letter` is and see if it's not a letter once someone submits the prompt. If it's not a letter, you can prompt them again with instructions like, 'WHAT DON'T YOU UNDERSTAND ABOUT "ONE LETTER"???'
why.
You are sending numbers as argument to getStartTime(), somehow this number is an an array which you call map on, the mapped values are then an element which is an array which you call reduce on. Then later on you can appt? appointment i guess, but this value is undefined. I would really like to help you, but the example doesn't make sense and don't shorten the words when sharing the code, we don't want to guess what the variable is
You are better off doing a sequential merge of the times from two schedules ordered on the start time. Then reduce over the array returning overlapping blocks checking if the previous start date is before the previous end date. If it is modify the old end date with the new end date. If they do not over lap push the new entry onto the array and repeat. At the end calculate the differences between entries for open spots.
Your solution only works correctly for rectangular objects.
Just your friendly reminder that __this is a beta__ and should ___not be used in production___ yet.
You have to use destructuring for this: function foo({a = 1, b = 2} = {}) { console.log(a, b); } foo(); // 1 2 foo({a: 11}); // 11 2 Classic option objects are only usable if you write a type definition for it. Without that, the signature tells you absolutely nothing and you have to refer to the docs or source.
I don't get it
I sadly have but only one upvote for this.
Thanks!
That's correct. 90 fails because although each has a 90 minute availability, those availabilities do not overlap.
They'll be ignoring 23% of users globally. I'm all for new cool stuff, but IMHO it's still too soon for proxies (for public websites). We can't just polyfill proxies, so their libs will break hard or be very unreliable; not something you want for a popular library.
There is an overlap in input[2][0][1] to input[0][1][0]
Love the zero config feature. Will be cool to see if they implement feature detections and automated loader installation like Parcel.
Hmm, cool. Immutable.js is great, not too sure about Normalizr but will have to try it out
I am thinking of this input var input = [ [['09:00', '11:30'], ['13:30', '16:00'], ['16:00', '17:30'], ['17:45', '19:00']], [['09:15', '12:00'], ['17:00', '17:30']], [['11:30', '12:15'], ['15:00', '16:30'], ['17:45', '19:00']] ]; Here we cannot count index 1 up for the middle one, because it is still a valid time because it's starting time is later than the others ending time.
Here's the output for `getStartTime(input, 90)` : [ [ {"start":"11:30","end":"13:30","time":120} // this is the only result so we can compare all the other times to this ], [ {"start":"12:00","end":"14:00","time":120}, // 90 min overlap {"start":"17:30","end":"19:00","time":90}], // no overlap - starts after first ends [ {"start":"09:00","end":"11:30","time":150}, // no overlap - ends before first starts {"start":"12:15","end":"15:00","time":165} // no overlap - overlaps but only for 75 min ] ] This would return `null` because each has to overlap AND each overlap has to be at least for the requested length of time. 
Haha 
This should work: const video = document.getElementsByTagName('video')[0]; video.addEventListener('ended', function() { video.currentTime = video.currentTime - 1; video.play(); });
The source code is available here https://github.com/anvaka/pixchart with descriptions of how its made. I'm happy to answer any questions.
FWIW: I’ve blogged about this: http://2ality.com/2016/10/asynchronous-iteration.html Async iteration will be useful for handling streams and more.
Every sufficiently complex problem can be reduced to an async iteration problem ;)
It can name my variables for me?
I came up with a shitty solution now const input = [ [['09:00', '11:30'], ['13:30', '16:00'], ['16:00', '17:30'], ['17:45', '19:00']], [['09:15', '12:00'], ['17:00', '17:30']], [['11:30', '12:15'], ['15:00', '16:30'], ['17:45', '19:00']] ]; const BLOCK_SIZE = 15; //Minutes const nineOClock = 540; function getStartTime(schedule, time) { const frameLength = time / BLOCK_SIZE; let bitArray = []; let bitLength; for (let i = 0; i &lt; schedule.length; i++) { const personSchedule = schedule[i]; let bitString = ""; for (let j = 0; j &lt; personSchedule.length; j++) { if (j === 0) { bitString += timeToValue('09:00', personSchedule[j][0], true); } if(j &gt; 0){ bitString += timeToValue(personSchedule[j-1][1], personSchedule[j][0], true); } bitString += timeToValue(personSchedule[j][0], personSchedule[j][1], false); if (j === personSchedule.length - 1) { bitString += timeToValue(personSchedule[j][1], '19:00', true); } } bitArray.push(bitString); bitLength = bitString.length; bitString = ""; } let scheduleStart = null; let count = 0; for(let k=0;k&lt;bitLength;k++){ count++; for(let m=0;m&lt;bitArray.length;m++){ if(bitArray[m][k] === '0'){ count = 0; } } if(count === frameLength){ return valueToTime(k-frameLength+1); } } return scheduleStart; } function timeToValue(firstValue, secondValue, available) { const firstSplit = firstValue.split(':'); const firstHours = parseInt(firstSplit[0]) * 60; const firstMinutes = parseInt(firstSplit[1]); const secondSplit = secondValue.split(':'); const secondHours = parseInt(secondSplit[0]) * 60; const secondMinutes = parseInt(secondSplit[1]); const timeDifference = (secondHours + secondMinutes) - (firstHours + firstMinutes); let availability = ""; for (let i = 0; i &lt; (timeDifference / BLOCK_SIZE); i++) { availability += available ? "1" : "0"; } return availability ; } function valueToTime(value){ const timeFromStart = value*BLOCK_SIZE; const actualTime = nineOClock+timeFromStart; const hours = Math.floor(actualTime/60); const minutes = actualTime % 60; return hours + ":" + minutes; } console.log(getStartTime(input, 60)); Basically i noticed that each block was around 15 minutes, so i made thats what i based the time on. I converted the array into bits of 0 and 1's 1 being - available 0 being - unavailable Now each array had the same length, then i went through the array and checked if i found `x` amount of consecutive 1's to determine if there was a free slot. time/BLOCK_SIZE = 60/15 = 4 We are looking for 4 consecutive '1111' in all three arrays, if one has a 0, then the counter reset
I have gone through the article and github issues but I'm still a bit confused, how can I know what webpack will do without a config ? What I mean by that is obviously it will take javascript and bundle it, will it take es6, are there any babel plugins pre installed ? It will also obviously take css by default, will it take scss ? How can I know these specification ? Are there repos out there with a basic config, a more complex one etc ? Loads of question I know, but I'm excited :) Good job to all all the people involved !
Oh. I'm sorry, I thought you were not being serious specially with that warning just after that. My mistake.
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/3x91ac/why_not_to_hire_people_who_like_es6_classes/cy2o6zj/)^3 from Eric Elliott.
Hmm, thats would solve some other issues ive been having 1 question though, whats a callback
This looks way better
other way around but kinda
Do you have any docs/tut on those hacks? I couldn't imagine using `webpack` without `html-webpack-plugin`
CodeKit isn’t free though. So Webpack is used for? 
It can invalidate just the right amount of caching for me?
I didn't see any info on that, give it a try. If not scss then you just have to set up a loader... don't worry there's only like 3 different syntaxes for it.
Ah, well, in the first one, there's first a simple problem of having `math` vs the correct `Math`. But even with that solved, both clocks fail on the same thing. You're trying to call some `rotate` method on your `shand`, `mhand`, `hhand` and that just isn't right. They don't have that method. You'll have to do what you where doing previously with `style.transform = rotate...`. You can see it [here](https://codepen.io/anon/pen/ypdrZq?editors=0010) and you can change the formula on the `accel` function to modify the movement of the seconds hand to whatever you prefer.
Ahh. I’m a fool 
Sure it can! ``` for await (let name of generateBestNamesFromTheInternet()) { console.log(`Cool name ${name}, bro!`); } ```
Sure it can! ``` for await (let invalidatedAmount of invalidateJustTheRightAmountOfCache()) { console.log(`Invalidated ${invalidatedAmount} bytes for you, bro!`); } ```
&gt; In addition, webpack now has dropped Node v4 support, allowing us to add a considerable amount of newer ES6 syntax and data structures, also optimized by V8. So far we have seen real-life reports of 9h to 12min! That's a great improvement and all... but can somebody please tell me what could be happening to take up 9 fucking hours? Mining bitcoins on the side or something?
Do you have an example config with all the bells and whistles? Trying to find a 1-1 comparison.
Pff, stable releases are for dinosaurs!^^/s
I can see where this is coming from, but is it really practical? The React API is just not the few methods mentioned in the article - it's the entire component lifecycle, setState, and so on. I know the idea is that you'd offer a limited subset of features - but if a component doesn't rely on state or lifecycle events, then how complicated can it be? How re-useable could it be?
I was trying to use v4 with my side project that uses vue-loader. Everything broke and I can't figure out why. It does look to be an amazing release. Looking forward to moving everything to the latest when ready. 
Gotta address the elephant in the room. As a full stack library with a "GraphQL-like" querying API that uses Redux under the hood, why would I use this instead of Apollo, which fits that description perfectly except it actually follows the GraphQL spec?
Yeah those were good suggestions. I’d add that the best outcome is to not stress too much about hype, you don’t have to jump on the hype train but you also don’t have to let it bum you out. Having been on the other side of that, I know what you mean about the JS community feeling snobby. However, I really do believe that it’s because most of us have been on both sides of it and we know how much easier our lives are now that we’ve adopted modern tools. I smoke cigarettes and sometimes I notice that former smokers are the most likely to tell me I should quit smoking, I think it’s a bit like that...
&gt; Oh. I'm sorry It's cool, I forgive you
WOOOOOOOOOOO I've waited so long for this!!!!
Will this support a ES module syntax without a transpiler?
I disagree with history rewriting. It is a bad practice.
Anyone else use webpack in production and have LITERALLY no idea what it's doing?
No need for any extra packages, webpack does that easily. Add this: resolve: { alias: { 'react': 'nervjs', 'react-dom': 'nervjs', 'create-react-class': "nerv-create-class" } } And you're running a IE8 compatible 9kb react with the fastest benchmark scores. It's similar for most drop in replacements like preact and inferno.
Well I can't answer for anyone else but personally I don't have LITERALLY no idea what it's doing. Largely because there are tons of explanations and answers about what Webpack and its various loaders and plugins do a mere Google search away. You don't need to know how to roll your own config to grasp that it bundles your JS into one file (or several, your choice) or that it allows you to import and use non-JS code/resources in your JS files as though they were JS modules.