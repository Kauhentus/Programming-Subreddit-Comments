&gt; Software, even in it's nascent form (today), is built upon the technologies established by those before us. I agree completely. However, focus should be on the software you're writing and not the software you're using to write that software. As a comparison, would you tell an author to build their career on top of MS Word? I sure hope not. I hope you'd tell the author to build the career on the ability to convey information in a clear way that engages the user. Their sentence structure should be correct. They should avoid typo's etc. So why say that an IDE is an essential tool to build your career off of? How about building a career off of the type of software you write, the types of problems you solve. I've personally written JavaScript using Visual Studio, Webstorm, Sublime, Atom, Notepad++. None of those made my JavaScript better or worse. They made my day better or worse (being sluggish, or quick, as an example.) Use the tool that works best for you, but if I talk to someone who has built their career on an IDE, any IDE, I don't want that person anywhere **near** my code. &gt;That's a value judgement and personally seems backward. Sure. But stating it's a backward value judgment is also a value judgment. One that provides no value to the discussion. 
But there are caveats to all of that. Startup pricing, last I saw for Storm, simply made the commercial license (that the "startup" discount applies to) the same price as a personal license. It's not like you can get a personal license for half-off which you intend to use to make products. That's fair enough, but still not the same as just saying "you get half-off if you are a startup". A "startup of one" is not benefited in any way. You just go buy a personal license and be done with it. OSS free license is for further OSS coding, and nothing more. There's no free lunch whichever way you slice it.
This... is amazing 
Read Stroustrup's explanation of this video here: https://isocpp.org/blog/2014/06/stroustrup-lists
[Rhino!](http://a.abcnews.com/images/US/GTY_black_rhino_lpl_131027_16x9_992.jpg)
 &gt; JavaScript was meant to be a smaller version of Java Actually [Something like PHP only worse](http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/#comment-1027) as Brendan Eich said 
I'm on stage 0 because I need class properties, it gives a weird error, I will paste it here. Error: Uncaught reflect-metadata shim is required when using class decorators
If you're currently paying it's cheaper on a year by year which was how you were doing it before
I already switched to Atom and couldn't be happier.
Even better, lol Try importing this: https://github.com/rbuckton/ReflectDecorators Might not fix everything but should at least get you a different error :D
Definitely not, but classes are much more clear.
&gt; technical debt Ehhhh, not really. It's not like Jetbrains products lock you into using their product at all. If you want to stop using it now, it's not any different than if you stopped using it when it goes subscription. You just might spend a bit more money because you have to pay during the transitions. I don't see how this is technical debt in the slightest. I'm not a fan of a subscription model for something like this, but I don't get your analogy. &gt; building a career on top of a tool is a form of technical debt The subscription model has absolutely nothing to do with this type of statement. Building a career off of any tool is bad, the way you pay for it doesn't make it any worse.
`forEach`, `map`, and `reduce` are very common. You have a list of users, and need to ping all of them? `users.forEach(ping)`
And [Spider monkies](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey), I suppose. 
Because of browser inconsistency. Some people are still supporting IE6 (believe it). jQuery is slow because it standardizes the DOM APIs over old and new browsers. A lot of the slowness comes from the badly written animations which don't use anything like requestAnimationFrame.
Just my theory, I haven't tested, but I imagine that the child selector would be faster than the surface and descendant selector because it only looks through one level. Descendant selector looks through every level.
Does Atom have cross-project code completion without giving you stupid completion choices? E. G. If it's a string only show string functions in autocomplete 
Because it's a framework that makes life "easier". Back in the day it was one of a kind, you didn't have a whole lot of other frameworks that had the consistency and usability of jQuery. These days there are a lot more frameworks, however the reason that jQuery is still popular is because of the thousands of plugins people developed for it (and still do). There are a lot of alternatives to both the general framework and the plugins, and sometimes I just go the extra mile to make a small framework that does the one or two things I "required" jQuery for. In my opinion using jQuery solely for events, or selectors, or AJAX is a horrible waste of data.
I don't remember book with monkey
Sadly, I've worked at more than one large software company where teams think it's perfectly reasonable to check idea files into scm as their source of truth for dev environment configs. A lot of people will pay a premium to make sure no one moves their cheese.
[removed]
use fetch http://davidwalsh.name/fetch (Note the polyfill)
Glad to hear! Curious what your bundle time is. Do you use Grunt or Gulp?
Gulp, about 180ms, I just have the basic demo, nothing heavy: copy assets and views from src to public folder, bundle js files.
Stop calling the DOM APIs vanilla JS. They are completely separate from the JavaScript language. It's confusing terminology. Use Vanilla DOM instead
I've been rather disappointed with it, and I'm only using it as a scratchpad/quick editor. It might be marginally better than Sublime, but I can't say for sure.
This should be higher. The responses to that blog entry are *overwhelmingly* negative and JetBrains seems to be unwilling to deviate in any way. 
If I were using it as a scratchpad/quick editor, I'd say it sucks too. It's much better as a full project IDE.
Nope, yeoman has way to much boilerplate, I find myself deleting most of it. I always start from scratch.
dope
If you mean javascript expertise in total..well, I switched using node.js late 2011 and after that I started to learn the language properly. I used jQuery before that as well, but nothing special..
Just in case anyone here is a student: https://www.jetbrains.com/student/
Just to separate DOM elements from plain objects..
I expected the arrogant comments. Regardless its shitty development
You have to be a little more careful with this approach because you lose the reference of the object in `fn`. Its harder to use arbitrarily defined functions that way, though `fn` could be defined to expect `this` to be the object, then you could call it as `Object.keys(obj).forEach(fn, obj)`. Example: function logProperty(key, keyIndex, allKeys) { console.log(this[key]); } function app() { var name = { first: 'John', last: 'Doe' }; // logProperty would normally have no // way to know what `name` is, but we can // pass name to the context of forEach // so it can reference it via `this` Object.keys(name).forEach(logProperty, name); // -&gt; John, Doe } Of course inlining the forEach callback will give you access through the closure as well, but for cases where you're not inlining, it gets more difficult. 
right click on folder &gt; Mark Directory As &gt; Excluded. I do this to my generated files and things like node_modules. I found indexing issues disappeared straight away. It will exclude the folder from search, which i usually find more useful then when those types of folders are included. 
&gt; just a note to avoid confusion of anyone reading this, jQuery isn't a framework, it's a library. No, its a framework. It has a large API, various features, and accomplishes several unrelated objectives all with the intent of simplification and abstraction. &gt; a framework calls your code within its systems. Like its query selector system and various chainable methods for abstracting the DOM into its plugin system? This is dumb. Frameworks are not MV*.
&gt;Would you rent a cheap screwdriver if you need it all the time and it never changes? &gt;Then why would you rent an IDE? IDEs do change, ESPECIALLY JS ones. If someone can come and start a deluxe screwdriver tax, I'd probably say fuck it and use the screwdriver that needs tape on the handle to be comfortable.
Not quite what you want to hear, but if you want vastly improved tooling, try TypeScript. Alternatively, try beefing up the JS tooling via ".d.ts" files for the libraries you're using. E.g. this is VS Code with a d.ts for jQuery: http://i.imgur.com/BjhSCFm.gif Things also *just work*™ if you use ES6 modules: http://i.imgur.com/j8ruVcc.png
no. netbeans and webstorm are the best two javascript IDEs in my opinion. a couple years go i evaluated both and chose webstorm based on better jsdoc support and purchased it. prolly would have stuck with them, but the move to subscriptions is gonna force me to take a much closer look
along that note, getting your audio setup well (not just for this, but *any* audio work), can REALLY help. The difference is night and day. Good podcasts are a good example. That investment in a good microphone is worth it.
A library is something you call. It's just like the stuff from the standard lib. A framework calls you. It's like a big fat no-op application where you fill the blanks to make it do something useful. https://en.wikipedia.org/wiki/Software_framework &gt; [...] a software framework is an abstraction in which software providing generic functionality can be selectively changed by additional user-written code, thus providing application-specific software. A software framework is a universal, reusable software environment that provides particular functionality as part of a larger software platform to facilitate development of software applications, products and solutions. https://en.wikipedia.org/wiki/Library_%28computing%29 &gt; [...] a library is a collection of non-volatile resources used by computer programs, often to develop software. These may include configuration data, documentation, help data, message templates, pre-written code and subroutines, classes, values or type specifications. jQuery is a library, not a framework. It doesn't have its own entry point nor does it provide any application structure.
[Stackoverflow](https://stackoverflow.com/questions/6535288/disable-intellij-indexing-on-specific-folder) answer with various ways of doing it.
It does it even with excluding stuff.
Right. I'm asking "what in it differs from Atom to make it worth $70 to me?"
seems like you made a bad idea worse.
 // Here ya go! Just put this in your global scope: function inherit(inhObj,self) { var selfProto = Object.getProtoTypeOf(self) var inheritance=Object.create(inhObj.prototype); for (var i in selfProto) {inheritance[i] = selfProto[i]}; self.__proto__ = inheritance; inhObj.call(self); } // Then just say `inherit(inheritanceObj,this)` // at the top of the function you want to inherit from. For instance: var Fruit = function() { this.taste = 'good'; this.shape = 'round' } Fruit.prototype.getTaste = function() { console.log(this.taste) } var Apple = function() { inherit(Fruit,this); this.taste = 'sweet' } var apple= new Apple() apple.taste // "sweet" apple.getTaste() // sweet function Pineapple() { inherit(Fruit,this); this.shape = 'ovular'; } var pineapple = new Pineapple() pineapple.taste // 'good' pineapple.shape // 'ovular' // Most people say to do something like this: var Fruit = function() { this.taste = 'good'; this.shape = 'round'; } Fruit.prototype.getTaste = function() { console.log(this.taste) } var Apple = function() { Fruit.call(this); this.taste = 'sweet' } var Pineapple = function() { Fruit.call(this); this.shape = 'ovular' } Apple.prototype = Object.create(Fruit.prototype) Apple.prototype.constructor = Apple Pineapple.prototype = Object.create(Fruit.prototype) Pineapple.prototype.constructor = Pineapple var apple = new Apple() var pineapple = new Pineapple() apple.taste // 'sweet' apple.getTaste() // sweet pineapple.shape // 'ovular' pinapple.taste // 'good' // And that works, but it kind of clutters up your code, and you have // to make sure you declare Apple's prototype functions *after* you // have set the prototype to inherit. This can be kind of tricky, // especially if your planning on inheriting from different files and // stuff, but whatever floats your boat! // It's also kind of confusing for someone who doesn't know you're // inheriting something. Sure my code's more confusing, but it's really // none of their concern, as it's abstracted. The conventional method looks // like it's doing something important, and this is really a hack for // something JavaScript didn't expect you to do anyway. // Note: If you change/add a prototypal function later on to an // inherited object, it will be propagated to the its inheritors. i.e. Apple.prototype.sayhi = function() {console.log('hi')} apple.sayhi() // 'hi' By the way, I made this [gist for you](https://gist.github.com/zwhitchcox/420e72aa9433ba1ab40d)
It starts lightning quick, and handles files of all sizes no problem (two of my big pet peeves with Atom). The extensions available are pretty awesome, but I know Atom has a ton. If you're happy with Atom there's not a huge reason to switch (it *was* designed as an open source sublime), but sublime is free to play around with (small nag after 5 saves) so I'd give it a go anyway.
Also, prototypes are kind of complicated, but the general gist, is when you create an object, you use an object constructor. That constructor can have various prototype functions. So when you call a function from the object you created from the constructor function, it first checks to see if there are any functions of that name directly on the object. Then, it goes to the object it inherited from and sees if there are any functions of that name prototypally inherited. It will continue going up levels of inheritance until it finds a match or runs out of levels. For instance: var o = function() {} o.prototype.sayhi = function() {console.log('hello')} var x = new o(); x.sayhi() // 'hello' x.sayhi = function() {console.log('yo')} x.sayhi() // 'yo' delete x.sayhi x.sayhi // 'hello'
Atom has received major performance upgrades since the original beta.
TIL people actually pay for Sublime
WOW! All of their shit for $20/month? Done.
I do not disagree.
I don't think I've _ever_ used currying in JavaScript. I use partial application _all the time_ and it doesn't require any special libraries: fn.bind(null, argA);
Gotta spend my discretionary budget on something. Can't really justify a new laptop or SSDs every year ;)
Thanks. Could you explain why I have to use `new`? I've been learning from [YDKJS](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch5.md) and I never really see him ever use the `new` when creating his closures.
Clever, thanks for the idea!
To expand on this answer, when you use the 'new' keyword, what happens is that the 'this' context within the function call is set to a new object. By calling without the 'new' operator, the this object is just passed through from the calling context, so you get some flaky behaviour. You can observe this by inserting: ``` console.log("THIS: ", this);``` as the first line in your function, and then comparing the differences in these 2 calls: ``` var a = MyObject("foo", "bar"); var b = new MyObject("foo", "bar"); ```
if you keep your licenses up to date, these prices end up being cheaper (much cheaper if you're a business buying employee licenses, only a bit cheaper than personal licenses)
Need files bigger than 2MB?
Their licenses before were also basically a subscription thing. Buy the product, and get free updates for a year. I guess here this is just autorenewing the license
Why not just use function composition? Why the extra syntactic masturbation?
When working with large files, by "bit faster" you mean "doesn't totally crash and burn" right? Atom completely locks up if I try editing large files. 
How would you feel if nobody paid for your work? 
That's not currying, it's cleaner partial application. I prefer to post library-independent snippets.
Sry! I edited it
"new" makes a separate instance of an object, based on the prototype. For instance: function NumberStorer(number) { this.number_stored = number; } NumberStorer.prototype = { getNumber: function () { return this.number_stored; } } var a = new NumberStorer(100); var b = new NumberStorer(200); var c = new NumberStorer(300); console.log(a.getNumber()); // 100 console.log(b.getNumber()); // 200 console.log(c.getNumber()); // 300 console.log(NumberStorer.getNumber()); // Error: NumberStorer.getNumber is not a function! Each NumberStorer (a, b, and c) has its own *this* and thus its own *this.number_stored*. The prototype is a sort of common, shared set of properties and methods that get merged into any newly-created object (NumberStorer) instances (effectively-- it's a wee bit more complicated than that) . The last log fails because getNumber is part of the prototype, and while that gets merged in with any *instance* of a NumberStorer (part of any *xxx = new NumberStorer(val)*), it's not part of the NumberStorer function/object *itself*. You could also directly access *number_stored* by saying something like console.log( a.number_stored ); // 100 but it's often considered poor form to directly access objects' properties. It's better to have "getter and setter" functions, if only for future-proofing's sake. If, in the future, you wanted to run code every time something in the object was accessed or changed, you would have a harder time intercepting reads and writes of the property (a.number_stored) directly, but you could just add the code into the getter/setter function (a.getNumber()).
Not at all. Not even close.
Quite distressing for those of us who've had to deal with pre-J8 Java and architecture astronauts. Angular 2 appeals primarily to Java developers who don't want to take the time to learn JavaScript. No, your `DateConverterFactoryProxyStrategyBean` doesn't need to be a stateful, 500-line mutative class inheriting from `ConverterFactoryProxyStrategyBean` and implementing `Beanable` and using `synchronized`. Granted, this is still quite a ways from that, but I fear that we're going to see a lot more of it, and a move in that direction, if Angular 2 gains steam. (Probably will, because Google, Angular, blah blah.) And it's a shame. The core of Angular 2 is pretty good.
thank you for clarifying this for me :)
Point of terminology only, but unless I'm mistaken, that's not a closure demo, that's just an object, an object instance, and its properties. A closure demo would be something like: var getNext; // Declare the function up here so it's global function setupCounter() { var counter = 0; // The getNext function is global (the var statement is outside this), but the function body is defined here, in // the scope of setupCounter, meaning that the "counter" variable is in scope in the getNext // function, and the value is retained even during successive calls to getNext. getNext = function () { counter++; // ...is still able to be referenced here, and the value is retaned from call to call return counter; }; } // -- end setupCounter setupCounter(); console.log( getNext() ); // 1 console.log( getNext() ); // 2 console.log( getNext() ); // 3 // But "counter" is only accessible from within the scope of setupCounter (which includes getNext, because that's where it's defined) console.log( typeof counter ); // "undefined" // And yet... console.log( getNext() ); // 4 console.log( getNext() ); // 5 console.log( getNext() ); // 6 (Though that's probably a shit closure demo. I use closures all the time, but I'll be damned if I can come up with a good practical and explanatory demo of one off the top of my head.)
 FactoryFactoryBeanFactory
Oh, awesome. That was one of its biggest flaws before, to me at least. 
Wouldn't open source libraries be white box? Maybe I'm confused about what black and white boxes are. Care to elaborate?
&gt; A library is something you call. And so is a framework. Frameworks do not exist in any given code if they are not included and called. A library provides a set API to receive input and provide some expected output or action. It is a self-contained item separate from your other code, such as a module. A framework provides a means of integration to other code. The easiest way to tell the difference is that if you remove a library as well as the calls to the library from a given app the code should operate its other functionality. A framework is nearly impossible to so easily remove from any given code, because its purpose is to integrate. JQuery does this, and so does MVC. Also, keep in mind that JQuery invented the concept of the query selector, which is an abstraction. This is what made it popular. If you ever recommend against JQuery a few years people would immediately bitch about the needs for abstraction. That said it more closely aligns to the definition of software framework that you provided.
$ 29 /year for existing users**
And my last sentence in my first post rears its ugly head.
It's not just code that I open in sublime. Huge sql dumps, log files were all pain to open in atom and brackets the last time I tried. Sublime shows a progress bar too but doesn't bother afterwards.
https://en.wikipedia.org/wiki/JQuery &gt; jQuery is a cross-platform JavaScript library Seriously, jQuery isn't a framework. You can use it as some sort of platform for your CMS's JS or whatever, but it's not a framework. jQuery doesn't have an entry point. ready() sorta looks like that, but you're just registering another event handler there. You can also have thousands or zero of those. Angular2, on the other hand, does have an entry point. You hand it your main component and it does everything from there. &gt; The easiest way to tell the difference is that if you remove a library as well as the calls to the library from a given app the code should operate its other functionality. A framework is nearly impossible to so easily remove from any given code, because its purpose is to integrate. So, the standard lib is also a framework, because it's impossible to remove form your code? That definition is kinda off, I'm afraid.
&gt; Seriously, jQuery isn't a framework. You can use it as some sort of platform for your CMS's JS or whatever, but it's not a framework. Nearly every JQuery web application will fail hard if you remove the reference to the JQuery script file and reassign `$` and `JQuery` references. I don't mean that there would be a minor loss of features, but that the application would throw a shit ton of errors and it would be faster to rewrite the app from scratch. How is that a library? &gt; jQuery doesn't have an entry point. It absolutely does: `$` and `JQuery`
There are many ways to accomplish the same thing. Inheritance can over-complicate things or extremely simplify them. It's a tool -- learn when to use it and it's extremely valuable. But _never_ touch `Object.prototype`
&gt; Nearly every JQuery web application will fail hard if you remove the reference to the JQuery script file and reassign $ and JQuery references. Same if you remove every string method. &gt; It absolutely does: $ and JQuery $(function() { ... }); That? Yea, that isn't an entry point. That just registers a handler for the DOMContentLoaded event.
Netbeans is my primary IDE, but Sublime and VS Code are way better for javascript.
&gt; Am I just overly dependent on frameworks &amp; libraries? Probably :) This is a really common question across languages, it's not specific to web dev. Google "Advantages to object oriented programming" Or just work with node a bit, you'll learn quick!
I'm so glad you mentioned node because I looked at it and I didn't understand what it's used for. Their only example is a web server which doesn't seem very useful to be able to code :)
Here is an example: http://jsfiddle.net/0r24aw8u/ Note how the framework inverses the control (IoC) and how it goes through its default behavior unless you replace it with something else.
That's a lot of code! In JavaScript?
Once you get the tests, think about submitting them here: https://github.com/tbremer/devtests Trying to create a resource…
No, that's what node is primarily used for, Web servers. How do you mean that it's not useful? Not trying to be rude, i don't code for a living, just as a hobby, so I frequently feel like a "fake" programmer.
If you're using Backbone or Angular.js, doing... var ListView = Backbone.View.extend({ events: { // some events hash }, render: function () { // some jQuery } }); var listView = new ListView(); isn't that different from something like this under the hood... var View = function () { // some fields }; View.prototype = { // some methods for subclasses to inherit }; var ListView = function () { View.call(this); }; ListView.prototype = Object.create(View.prototype); Frameworks might hide the inheritance syntax from you, but a developer using those frameworks are still using subclassing and inheritance.
I don't think they're directly comparable. Someone's involvement with open source often falls into one of two categories: 1. Someone doing something they enjoy for the fun of it, but not as a full-time job (ie. they have some other source of income) 2. Development is sponsored by a company (so essentially the developer is paid to work on it) For Sublime Text, I believe the guy that works on it does so full-time. If I was working full-time on a project, I'd absolutely want to be paid for it, regardless of whether it's open source or not.
"Web Server" is a _very_ general term. We're not talking about cloning Apache or something (though node does that), it's a closer layer to PHP/Ruby/etc.
That's a real nice "website" you've got yourself there: All the content is loaded deferred, and the loading script completely fails when local storage is disabled.
IMO, no, they're just fun distractions. The only thing that prepares you for work is work. Now that doesn't have to be _at_ a company, but it needs to be along the same path. If you want a job as a JS dev, build projects with JS.
It is literally the definition of currying. Partial application fixes a variable number of arguments, while currying takes a function with an arity &gt; 2 and turns it into a series of unary functions that return each other. Being able to use two things the same way does not make them equal.
As a consumer, I basically automatically rule out purchasing any product that uses a subscription model. The only exception to this is something like MS Office 365, and that's only because of an academic discount which gave me 5 years worth.
Ramda is my new goto FP library because everything is precurried and makes my compositions much easier.
Not to be a smart aleks, but one could make the argument that I have never lifted a hammer in my life, but most would still hire me as an apprentice and teach me their ways. But I know that the industry doesnt work that way when it comes to web development. I built a calculator using html/css/ javascript. But it was so simple that I dont think its enough you know?
You're asking what you can do to be prepared, not how to get an internship with no experience. Do you honestly thing building one thing, _no matter what it is_ is sufficient? Keep building stuff, _all the time_, until you get a job. Done with your calculator? Great, go build something else.
Not my code, but I'll bite. If his example function had an arity of 3, and you bound the first function, then it has a new arity of 2. The Hindley-Milner representation would simply drop the first argument, so `(a, b, c -&gt; x)` becomes `(b, c -&gt; x)`. In order to bind another parameter, you'd have to call the bind again. With currying, all parameters get split off, and it becomes a chain of unary functions. Going back to the type representation, it becomes `a -&gt; b -&gt; c -&gt; x`, where each function returns the next function waiting for an argument. Unlike partial application, you don't have to reapply bind in order to add more parameters before the final invocation to get x. Still not close to the same thing, even if you can use them for the same thing / to implement each other.
Yes, and _most libraries_ don't work like that. They don't count arguments, they just partially apply partially applied functions, ad infinitum. But that's an issue of implementation detail. I'll concede that the example _should_ be currying, and I'm paying too much attention to the fact that implementation rarely is.
I make html5 games that run on a node.js backend to verify all game moves. The games are around 26k loc, and the backend is around 12k
Just to put it out there, node has more uses than just server applications. It's a proper production ready runtime used to make development of applications easier across platforms (eg: Atom editor, wunderlist, etc...) or to add javascript scripting support to existing products (eg: Photoshop, robotics kits, etc...)
[Cakewalk](http://www.cakewalk.com/) did this with [Sonar](http://www.cakewalk.com/Products/SONAR/Versions). I was so unhappy with their decision to move to subscription-only. I've been upgrading every two releases. I was all ready to pull out the credit card and drop an unnecessarily large amount of money on my hobby (which I never actually use, but always wanted since I was young) - and they went subscription. Well - they won't be seeing any money from me for a long time. Turns out I just have to be happy with what I've already got.
According to MDN this is not examples of closures. Instead of that they ask to avoid using closures if it's unnecessary. &gt;**Performance considerations** &gt;*It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.* If some resources not clear enough for you try to find another. For example http://shamansir.github.io/JavaScript-Garden/en/#function.closures or answer-articles on Stackoverflow 
What is 'most libraries'? Most functional programming libraries? If they follow the interface of currying, where I can do `curriedFunction(1)(2)(3)` then by definition it's not partial application, since I didn't need another function to keep binding arguments. If you're referring to the techniques used to curry, then that's language-dependent and has nothing to do with what currying and partial application are. Even if we limit ourself to strictly JS, then a closure with an internal array of arguments is a much easier way to implement than a function that keeps a partially applied invocation inside itself, which is actually how 'most libraries' do it.
&gt; `curriedFunction(1)(2)(3)` With most JS libraries (not counting things properly build like Ramda) you can't write that and would end up calling `curriedFunction(1, undefined, undefined)` -- It's left to the user to reduce functions to only take one argument.
We're not talking about just any functions, we're talking about curried functions, and their difference from partially applied functions. Not all functions in JS are curried. Not all functions in JS are partially applied. What I'm saying is that IF you curry a function using Ramda / Lodash / any other FP library with a .curry function, it would work like this. I still don't get what you're trying to argue.
The fact that there is no call to another function implies it. If it were partial application, you need another function to do it. Curried functions can operate on their own once curried.
Okay, going back to the original snippet which is basically: f(g(x)) I said it wasn't currying. It's not. It could be implemented with currying _or_ partial application. But it's a pointless conversation.
&gt; If it were partial application, you need another function to do it what? Look at the "partially applied" vs "curried" example and tell me where there's another function. Honestly, I don't care as there isn't really a point to this. We're arguing over the imaginary implementation details of an example code snippet.
oy vey. You can't implement currying without other functions either. _Where_ those functions are is irrelevant. let cMyPredicate = (v) =&gt; myPredicate.bind(null, v); Snippet works. Not currying. Pointless conversation.
Yes, but the point of this illustration was to show that the forEach would pass in the wrong value (so afterFirst would not equal AFTER_FIRST), but the recursive call to the function would pass in the right value.
This type of object definition is usefull when you need to instanciate thousands of an object. If you uses this.addVertex = function(){} this function will be instanciated thousands of times which can take a lot of memory for complex object, using the prototype way it will only be instanciated once. 
but if `f` has an arity of 2 (which a filter function does), and it gives back a function that we then invoke on the next line (which it does), AND we don't use an external function (`Function.bind` is nowhere to be seen), then by definition it has a Hindley-Milner of `(a -&gt; (b -&gt; x))` ... which is curried. You're conflating composition using nested calls with currying, when the example above is currying a function, then immediately passing that curried function into another curried function. Both composition and currying go hand in hand together, but they're not even similar.
&gt; if `f`... if it gives... if, if, if. Let me re-iterate: _implementation details_ &gt; (Function.bind is nowhere to be seen) Neither is the function that makes currying work, that doesn't make it not exist! You seem to be under the impression that `f(g(x))` implies currying. _it doesn't_. It implies currying _or_ partial application. I'm not conflating anything. I'm saying you can't know implementation details from that snippet! And for the 10th time, this is pointless.
It's pointless, but you're still not even wrong. `f(g(x))` Has NOTHING to do with currying OR partial application. It doesn't even IMPLY either of those. It's a composition. It just happened to be used in the example alongside currying AND partial application in both snippets. Functions are first class citizens, so it doesn't matter that we passed a function into a function. We still have an argument that was passed in, and while bind fixed it in place, currying satisfies a function that was waiting for its argument and returns the next function in its chain that needs an argument. Hence, why the presence or lack of `Function.bind` matters.
parity =/= arity The original code says it's curried. Even if we don't take the author at face value, the assumption being made that it's valid and works and that its arity matches the code above it makes implications on what each function must return, which lets us calculate the signature, which lets us prove that it's curried. You're trying to say that the presented code is wrong because it's not explicitly curried, but that has nothing to do with the types. If we get a value back from a function and can then invoke that value, it must be a function. If a function with an arity of 2 returns a function when invoked with only one value, then it's curried. It's that simple. Taking one line out of context and trying to discuss its ambiguity doesn't help your original point, which is: &gt; That's not currying, it's cleaner partial application. Which is plainly wrong.
&gt;the forEach would pass in the wrong value forEach expect callback with 3 parameters. And he don't care. As long as this is well documented and expected behaviour. It's like a contract: if you play the game, respect the rules
Good grief. You're complaining about "i" being an esoteric way to name a counter and keep a straight face while suggesting the use of faux symbols as arguments to public APIs? This is a clusterfuck. I give up.
Built in out of the box. eg. Emmett. I'm not sure if you could call it strictly plug in, as MS plugs it in for u, rather than allowing 3rd party plug-in to be installed at will by end user.
This is why I use open source tools as far as possible. I caved for PhpStorm. And now I regret it... I'd pay more for it if it was open source, just for the peace of mind.
Yup, that's why I use sublime. However, if you have a large file with no carriage returns, it goes full retard.
We did this at my place of employment with 8 different apps (yay microservices :| ) We replaced RequireJS with Webpack and used a file system watcher in dev to rebuild when anything changes. Webpack is fast enough that the rebuild time is minute.
Yep, will have to do that. The annoying thing is that it works locally, but thats windows vs linux in prod/test. 
Its not actually 'Export_{id}' for the procedure. I have 3 system names that are in there linked to the enums. 
Do you think all those APIs you consume are 'useful for coding'? Because that's what Node does (among many other things). Node is probably the best tool for building APIs at the moment. 
&gt; But how else can we prepare in order to get an entry level job as programmers? Here's the deal. Neither college nor any other kind of higher education has enough time to actually teach you programming. They try to get some concepts into you and get you started with programming. But there is no time to actually learn how to do it to any degree of competency. The only thing that teaches programming is programming. You have to spend the hundreds and thousands of hours needed to gain the experience, to learn from the mistakes (and sometimes from the successes). So, there is no time to waste. Get programming, get learning. That is how you can get a leg up on your peers, and maybe you might actually have some projects you can show and talk about at a future interview. 
&gt; if (exportType == 0) { procedureName = 'Export_0' } ; The semicolon doesn't go there. &gt; if (exportType == 10) { procedureName = 'Export_10'; } ;' What? Use a linter. Also, provide a test case on jsbin or jsfiddle. This works: &gt; '20' == 20 true Set a breakpoint and check it with a debugger. This stuff isn't hard.
I often wondered why my coworkers used other editors and IDEs instead of just using Vim for everything and custom tweak it to be perfect for them. Then I realized they had a life. 
Also those log files can fill up real quick
The vanilla equivalent would be something like: [].forEach.call(document.querySelectorAll('#bla'), function(el) { el.hidden = true; }); The jQuery version works with all kinds of selectors, if there are multiple results, and also if there aren't any results.
Basically everyone feels like a 'fake' programmer, even professional ones like myself. It's because there's such a huge body or knowledge that comprises the field that you regularly run into people who are far more knowledgable than you, no matter what level you're at. It's not a rude comment to make, I'm not sure that OP is too well versed in Node and web backends given their response
People will start tweaking the jQuery code in all kinds of ways now. Make them also tweak the javascript to make it faster.
That's the secret to happiness in life not just daw's. 
$.hide and $.show are extremely costly. Make your own and use them instead: $.fn._hide = function () { this.css("display", "none"); }; $.fn._show = function (type) { this.css("display", type || "block"); }; 
If they fix the app flicker (which they blame the OS) that happens at random, they can have my money.
You want to read up on strict equality (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators) - a table like this also helps explain your confusion: https://dorey.github.io/JavaScript-Equality-Table/ Basically, javascript will do a hell of a lot of work to try and force equality to happen, but there's no guarantee that it does happen. On top of that, it's not strictly typed, but will try to coerce types, and at some point your code is not making `export == 20` evaluate to true. Also you don't need to do ```var query = require('url').parse(req.url, true).query;``` You should just have access to `req.query` (http://expressjs.com/4x/api.html#req.query) if you are using express.
We actually can tweak some native functions to make them run faster. For example filter. Can't recall others, but I think sort is there too.
Edge has best ES2015 support imo. Firefox, and Chrome has test/dev mode support, doesn't really work for production.
Each of the cases I've seen of this break the spec, and so it's not a 1:1 comparison as far as feature parity goes.
JSPerf is actually back up now, in case you haven't used it, it's pretty nifty... here's an old test I found: http://jsperf.com/vanilla-js-v-jquery-hide/3
I like http://markup.rocks
...like analyst is to analrapist
what exactly do you mean by "break the spec". Sorry, my brain is melting. (Urge to stupid emoticons and swears is huge. Please send coffe)
Null
Sure thing. Before: for (i = 0; i &lt; 5000; ++i) { var x = document.getElementById("new_post"); x.style.display = 'none'; x.style.display = 'block'; } After: document.getElementById('new_post').style.display = 'block'; Look, ma! No JS: #new_post {display: block} I'm only half-joking. The problem with this benchmark, as usual, is that it's complete nonsense. It doesn't do anything useful nor is it realistic.
https://medium.com/medium-eng/why-contenteditable-is-terrible-122d8a40e480
You really have to give [Reaper](http://reaper.fm) a try.
I would say yes and no. These simple challenges can give you the opportunity to learn how to solve lots of different, little, problems. This sort of knowledge is valuable, as well as the extra experience with the language. It won't, however, give you any experience in the building of or within applications. 
If you cancel you lose the "existing user" discount.
Yes . Thank you that makes sense ! 
Thank you so much for the comprehensive feedback! You are so good!
Ok so I'm using tools that use it . I have actually looked at the source code of some projects and it's not understandable to me. But I can build the things that I need to without understanding it ... Like using a car you don't have to be a mechanic. Still it would be interesting to understand more how it works which is a motivator for learning this stuff. 
Yes &amp; yes. Thanks !
No I just meant I don't know what else it can be used for, I just couldn't think of anything else and that's the only example they give. 
I know, but to my knowledge, it's original use was for servers. Plus, it was relevant 
Sometimes it's needed, most of the time it's not. 
There's been several posts here about it, so I just chose one... you can probably find more: [fast.js - Faster reimplementations of native JavaScript functions](https://www.reddit.com/r/javascript/comments/28ynkw/fastjs_faster_reimplementations_of_native/)
I started off 'programming' using flash actionscript back in 2003 or so. Actionscript is another varient of ECMA script with the same syntax as Javascript so I find the object prototype helpful, because doing things in Flash often required using a bunch of self-contained objects that can all do their own thing independently of each other. I also think its generally tidier having variables and functions pertaining to a certain thing all together within that thing.
this is great stuff for getting a beginning understanding of functional programming, without having to install Haskell.
Are you using any frameworks or libraries or is it all vanilla &amp; custom?
So if I stay in front end it doesn't sound like I need to know node (?)
Great point! that's why you would put it on the prototype instead of the object - so all the objects use the same function. Thanks!! I was just messing around with this to see the difference and realized I can't access the function if I declare it with this. Is that another reason to use prototype? And why would Graph2.addVertex return undefined ? function Graph2() { this.vertices = []; this.edges = []; this.addVertex = function(v){ this.vertices.push(v); } } Graph2.prototype = {addVertex: function(){console.log("fake adding")}} // Graph2.addVertex // undefined // Graph2.prototype.addVertex // (){console.log("fake adding")}
https://www.reddit.com/r/javascript/comments/3jlpf4/is_the_performance_between_jsjquery_this_large_or/cuqdi7b
You can use composition through the use of prototype &amp; Object.create while completely ignoring using constructors and new(). It really opens up the power of the language when you understand what you can do with that... 
I'm in the same boat. I've been doing web development for almost 20 years. I've worked on huge projects (Fortune 20ish company) and I've never found a compelling use for prototype in what I've done. There's always the argument "but you might need to extend all the objects of the same type..." which never actually happens and so ends up being a waste of effort. Composition is much more important than inheritance. Prototyping only seems beneficial when you have a ton of objects that are identical and you want to conserve some processing... but the vast majority of stuff being done out in the real world isn't like that.
Plot twist: The Jquery spaghetti code version could be written in 50K!
That's exactly the same reason I give myself when I decided to try it out. Also, even if you don't use it, other people will, so being literate in that style might help you understand other people's code :) I recently started a project with a friend in the style of [this](http://eloquentjavascript.net/07_elife.html), and it's been really fun \^_^ I'm looking forward to having a cyber aquarium I can leave up in a monitor I'm not currently using. 
It doesn't have to be Haskell, Racket (and DrRacket) is also a great environment to get to grips with fp.
udacity nanodegree helps u develop a portfolio of a few projects. is this recomendable?
Did you see my second test? I created 1000 objects using ```new Apple()``` and ran the inherited function 1000 times on each of them, and the performance was still the same. EDIT: Ok, I added a new test, and when actually *creating* the objects, it's about 50% slower, but after you've created the objects, it doesn't appear to have any effect on performance. So, if you're instantiating over 100,000 objects, it will add about one second onto your code. I don't really see many people doing that though, and you're codes going to be pretty slow anyway at that point. Excellent point about IE 10 though. I didn't realize that. I added a note at the top of the gist. So, in your opinion, is this pretty much useless at that point? I mean &lt;=IE10 makes up about 20% of the browsers. Thank you for your notes. I'm still learning.
Developing projects is always recommended. (Tip: It helps a lot to have a project where you are actually interested in what the program does, not just in how to program it.) I can't comment on any specific websites or courses. When I was in your situation the closest thing we had was typing in program listings out of the back of magazines and books. 
how else can i develop a portfolio? I wonder if github would help with that. Maybe i can build a website for my dads business?? Maybe I can develop a program that keeps track of a players stats for the nfl season? im trying to think outside the box lol. what do you think?
It's okay. Eventually everybody gives in to the Dark Side. :)
Kind of.... When you have tens of thousands of lines spread across multiple files you still don't need inheritance or any form of OOP. You do need a means of file reading/inclusion, which typically requires a build process. My own app is approaching 20000 lines of code across just a couple of files and uses 0 inheritance. Inheritance never makes your code faster unless you have persistent execution tasks.
Not specifically, no. If you ever plan to use build-tools like grunt or gulp (to do jobs like minification/concatenation, CSS preprocessor compilation, etc) it's useful to know the basics, however.
My coworker: "we should leverage prototypal inheritance when blahblahblah in the blah feature blah module..." Me: "I just want the client to pay me a lot of money so that I can go home every night and pour whiskey all over myself." I've never used it either.
Highly recommended, I use it for one of the classes I'm teaching.
You can also use functional-shared instantiation to get around creating those functions thousand of times, but you still have the issue of multiple references, which can balloon memory.
&gt; factory functions I find this paradigm very useful in JS because it is guaranteed to give you a new object, not just a reference to an object and you don't need to resort to libraries like jQuery to get a deep-copy of the object.
The prototype works as a fallback object. Each instance of Graph2 won't have a method defined on itself, but JS will fallback to the instance's prototype to find the method. That's also why Graph2 doesn't have an own property of addVertex. You can easily test this with `Object.hasOwnProperty(prop)` Removing the this.addVertex assignment in your constructor: var graph = new Graph2(); typeof graph.addVertex; // 'function' graph2.hasOwnProperty('addVertex') // false
I've been studying up myself in preparation for job hunting: * Front end: https://github.com/h5bp/Front-end-Developer-Interview-Questions * Node: https://blog.risingstack.com/node-js-interview-questions/ * Front end: http://ashleynolan.co.uk/blog/a-guide-to-front-end-interviews * Front end: http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015/ * *** Front end: https://www.reddit.com/r/webdev/comments/3f7q3q/been_interviewing_with_a_lot_of_tech_startups_as/ * General CS: https://gist.github.com/TSiege/cbb0507082bb18ff7e4b * General CS: https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/
Here's a separate topic: instead of talking about how long you've been at this and so if you don't understand something it could not possibly be useful, consider instead that software gets written many different ways and people in our field have had lots of ideas over the last 50 years. It's OK to think stuff sucks (I do it all the time), but you should seek to understand it before making that call. And if you can't understand something you should think deeply about whether the reason is you, or the thing.
Code example here: https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=%2F*%20Set%20default%20parameters%20In%20ES6%20*%2F%20%0Afunction%20slider(%7B%20speed%3D500%2C%20effect%3D'slideup'%2C%20responsive%3Dtrue%7D%20%3D%20%7B%7D)%7B%0A%20%20console.log(speed%2C%20effect%2C%20responsive)%3B%0A%7D%0A%2F%2F%20Run%20with%20defaults%0Aslider()%3B%20%2F%2F%20logs%20500%2C%20slideup%2C%20true%0A%2F%2F%20Overide%20just%20one%0Aslider(%7B%20speed%20%3A%20750%20%7D)%3B%20%2F%2F%20logs%20750%2C%20slideup%2C%20true%0A%2F%2F%20or%20them%20all%2C%20order%20doesn't%20matter%0Aslider(%7B%20effect%20%3A%20'scrollHorz'%2C%20responsive%20%3A%20false%2C%20speed%20%3A%20250%20%7D)%3B%20%0A%2F%2F%20logs%20250%2C%20scrollHorz%2C%20false%0A Also works without the object/destructuring function slider(speed=500, effect='slideup') { ... } // then run it slider(200,'slideHorz'); 
Closures aren't bad, but overuse of them can balloon memory usage as it can keep stuff from being garbage collected for a really long time if you aren't careful. Just keep track of what is still in scope and you should be fine.
&gt;It just seems like most web applications don't require complex inheritance - what do you think? I like you OP. I don't use inheritance in JavaScript. It's not necessary even for large projects, and can easily be overcome with composition in its current form. Mixins and JavaScript would go together like peanut butter and jelly and I wish ES6 would have gone that route instead of trying to make JavaScript act like a classical inheritance language.
"In my experience type checking dramatically speeds up development and provides a nice DX." What's DX?
Developer experience.
See my other reply to your comment above. This will create a copy of *someMethod* for every instance of your 'Object' Object.someMethod = function() {}; This will only create one copy of *someMethod* for every instance of your 'Object'. When you call the method, you have to bind 'this' to call the method in the context of that method. Object.prototype.someMethod = function() {}; Basically, if you are just using the object to keep some methods in a 'Name space', then just use an object literal. If there will be may instance of the 'Class', use the prototype. 
You call a meeting and tell your team that from now on, it's all Coldfusion and we'll use Javascript and css to make things a little prettier/fancier.
Got it! thank you :)
I would strongly disagree with that. All the tools you use are using it. I had used it before but, in the last year I've really had to start building this way. http://m.icro.be/
Unless you are building a game engine or physics simulation, it's probably nothing to worry about. And if you're at that level of performance, you should be using emscripten and asm.js to compile your code from a memory managed language like C. You can always give users a top-level api that has an understandable JS interface.
Good example that shows nothing. All major browser will cache all style manipulations until some idle, which in most cases means end of context (exit from function where changes were done). So while jQuery really tries to show and hide elements with redrawing, vanila will do nothing, just change DOM property for awhile. Next one: jQuery gives you a level of abstraction. That means if I want show or hide element I just call $x.show() or $x.hide() and there is no need to complicate the code with unnecessary things like .style.* or "none". Actually the short version of your code would be look like $("#new_post").hide().show(); It's just one line! The less code you wrote the cheap and easy it would be to support and change it in future. So if you want to hide only one element in your project, you probubly don't need jQuery. But it's not real world problem and very basic kind of project.
Pick the technologies you want to represent in your portfolio, then build something with them. If you want to use HTML/CSS/JavaScript, then also make sure to use popular libraries and frameworks that are relevant to that industry, and make an app. It doesn't matter if you're imitating an already existing app, or making something new. Someone looking at your code samples will care about formatting, commenting, structure, efficiency, intelligent (code) design choices, and so on.
I am not sure what you mean. Cropping means removing pixels. If you want to resize the image to be a best fit for a given aspect ratio, you need a different algorithm than crop. If you mean you want to crop at a higher pixel density, then I think you need to increase the render dimensions of the canvas and then decrease the canvas tag's size to compensate.
That... is a cool blog. The connect 4 thing is awesome, and now I think I'm going to buy that book about AI (Artificial Intelligence: A Modern Approach)
Well, I feel dumb. Thanks!
I tried this and got so confused by the first exercises. What is the point of using a currying library? Isn't the point of currying (in a language that does not require it) to make the program flow clearer? What benefit does it have if you don't see it happening?
Ugh. I'm sorry to hear that they gave you the run-around! I tried to get a student discount for my grade-school son and was also turned down because he didn't have a formal class in Javascript that he was taking. I guess they are pretty stringent :(
I use new all the time. It becomes a method to DRY out my code, as I don't have to keep rewriting common elements shared across modules and instead just do new Foo(). I don't much use Object.prototype because it does not play nicely with knockout, which is what all of my recent js projects have been using. I also tend to not make a massive amount of instances of an object, which would be the only reason to use Object prototype in my understanding. I'm a non-node backend dev, so I tend to do as much work as possible in the backend and leave the js to manipulate the particular instances in question and the DOM. 
Currying is a thing you can do to functions. Curried functions can then be strung together in a list in a process called composing. When you compose two or more functions, you get a new function that you can name and it will do useful things. (At least that's what I got out of it.)
[Netscape?](http://gifrific.com/wp-content/uploads/2014/01/Robin-Williams-What-Year-Is-It-Jumanji.gif)
ES6 has already launched. But its only a specification - a description how how things should work. Its up to browser vendors to update their browsers to support it, and the only browsers they update are the new versions of those browsers. Older browsers will continue to support the old JavaScript which does not include the newer ES6 changes. However, since it takes time for browsers to update, and people want to use these ES6 features now, there is the option to transpile ES6 code into older code that is compatible with older browsers. The most common way to do this is by using babel: https://babeljs.io/
That's a fair question. Actually, there is no real "launch date". If the organisation behind ECMAScript approves certain features, browser developers may or may not add them to their browsers. Actually most of ES6's features where already implemented by the major browsers months and years ago. Browser manufactures decide on their own if they want to add a feature and user decide on their own if they want to update their browsers to the latest version. [Here you can find a chart on which browsers support which aspect of ES6.](http://www.webbrowsercompatibility.com/es6/desktop/) Now, what does that mean? First of all, old and outdated browsers will not support ES6. Furthermore you can't even be sure if your code runs the same on the *latest* browsers. The ratio of users with browsers that support ES6 will of course increase in the next years. While a year ago only a minority of browsers supported ES6, maybe in the next few years it becomes the majority. If you can't wait however, you can use "ES6 Transpilers" like [babel.js](https://babeljs.io/) to convert your code with new shiny ES6 features to ES5, which is commonly supported by browsers. dfas
Since SuperFLEB already explained the answer in detail I would like to show another way of doing the above the way I do it. function setSandwichModule(first,last, table ){ var sandwich = { customerName: [first, last], tableNumber: table, bread: { white: true, sourdough: true, wheat: true, wrap: false, italian: true }, cheese: { jack: true, cheddar: true, mozzarella: false, swiss: false, parm: true }, sauces: ['mustard', 'hot', 'ketchup'], breadOptions: function(){ //returns all breads that == true, false means stock is out }, cheeseOptions: function(){ //same as read but just returns cheese == true }, toasted: false, breadPick: null, cheesePick: null, saucesPick: [], cookingStarted: false, sendToChef: function(){ if(this.toasted){ var list = 'a toasted sandwich on '; }else{ var list = 'an untoasted sandwich on '; } list += this.breadChoice + 'with' + this.cheeseChoice; list += ' and ' + this.sauces; return list; }, sandwichStart: function(){ this.cookingStarted = true; alert(this.tableNO + 'is being made'); } } return sandwich; }; Ok above it goes like this you have a function that sets up a new customer object at a sandwich shop when lets say a new customer named Jackie Chan comes in, and is seated at seat number 8. customerTable8 = setSandwichModule(jackie,Chan, 8 ); lets say you are the waiter you can walk up and ask him what kinda sandwich he wants, you simply assign each of the values. **if you want to list the choices available just do** customerTable8.breadOptions(); and customerTable8.cheeseOptions(); FYI this can be apart of a even bigger module called sandwhichShop were the available choices is a shared hash that all objects inherit. when ordering you can just assign these values: customerTable8.toasted = true; customerTable8.breadPick = 'white'; customerTable8.cheesePick = 'swiss'; var sauceList = customerTable8.sauces[1] +' ' +customerTable8.sauces[3] customerTable8.saucesPick = sauceList; once the order is done: customerTable8.sendToChef(); when the sandwich is being made: customerTable8.sandwichStart(); anyways you can call this..sandwichStart(); or any function within a function in the module, you can do lots of stuff. 
I took a course in college where the final project was writing something very similar to this, except it was in OCaml. Given a start and an end it would recurse throughout all the possibilities and either conclude that it was true or false. That code was a mess, and I didn't know anything about functional programming at the time, but it was a fun project and really interesting since I was also finishing a math major at the time. 
From OP's comment, it looks like babel is compiling by essentially doing: var arg = arg === undefined ? 'default' : arg; I would hope most browsers implement it similarly to avoid problems with falsy values.
Use iron-node or node-inspector to debug your way through and understand what's going on in your code. 
~~Why is this called Vulcan when the Google polymer "compiler" is already called this?~~ I am an idiot.
Try Paul Irish/Addy Osmani's videos.
Only when it's `undefined`, not when it's `null` or anything else.
'97, I was just a wee lad.
Pretty sure both Code School and Treehouse have courses on the Dev Tools, but they're both paid. There may be free trial periods though.
man, both of those videos were excellent. great comment -- thanks for posting.
oh yeah, I kinda thought ES6 was already out. thanks for the clarification. 
One tip I've found really helpful is to name as many of your anonymous functions as you can. Especially if you're ute minifying your code. 
Nice example!
The chant is "Inheritance is not for sharing code" :)
That's now fixed - at least sort of..
Fixed. Although a bit differently..
Now works better!
Yea, sure. PHP invented that. Just like doing ternary-ifs the wrong way around, eh? LOL.
You don't get 2 for your first example, you get "TypeError: this is undefined." Are you sure you're testing properly? The only one of your three examples that logs 2 is the third one, and that's the only one where `foo()` is not running in strict mode. 
Recent versions of Atom handle things a little better - but yeah. It can be pretty bad. That said, the performance improvements have been noticeable and being able to extend functionality with JavaScript makes it worth the pain of opening large files anyway. Since using Atom full-time, it's become clear to me that there really isn't a good reason to be *editing* a file that's large enough to cause Atom problems and there have always been CLI tools that are faster and better at *reading* information from large files than your text editor of choice.
Can you post the script? Or at least the relevant part? That would help a lot.
Rule #1 -- Always use semicolons. Rules #2-10 -- See Rule #1 This is a universal solution -- If pattern A sometimes breaks and pattern B always works then you should _always_ use pattern B. Why would you leave your code error prone just because a semi-colon probably isn't needed somewhere? And even if it's not needed there right now, when you go back and modify the code what you write _after_ that line can have an effect on whether or not a semi-colon was needed on the previous line.
Why case vs if? Is case a faster method than if statements?
For funsies, I added another version: var elements = document.getElementsByTagName('label'); var lookup = { name: function () { return json.fullName; }, email: function () { return json.email; }, phone: function () { return json.phone; }, address: function () { return json.address.streetAddress; }, zip: function () { return json.address.zip; }, city: function () { return json.address.city; } }; for (var i = 0, len = elements.length; i &lt; len; i++) processElement(elements[i]); function processElement(element) { var key = element.innerHTML; var sibling = element.nextSibling; if (lookup[key]) sibling.value = lookup[key]()[0]; if (key === 'zip') $(sibling).trigger('input'); }
Caching the length should also speed it up: for (var i = 0, len = elements.length; i &lt; len; i++) { 
Whoops, thank you. Fixed.
I also had this same problem today and was hoping it could be made a more efficient function. for (var key in $scope.obj) { if ($scope.obj.hasOwnProperty(key)) { //alert(key + " -&gt; " + $scope.obj[key]); for(var i = 0; i &lt; $scope.objArr.length; i++){ if(key === $scope.objArr[i]._id){ //console.log( key, 'versus', $scope.objArr[i]._id); $scope.objArr[i].quantityUsed = $scope.obj[key]; } } } } (tried to change out specifics but hopefully the gist of this for if for if crap helps to describe my issue)
You say : The task is simple, grab an element by id, and hide/show it 5,000 times. What you're actually doing, in both cases : For 5000 times, grab an element, and hide it, and then show it again. Also, the main jQuery function does more than grab an element. It will look at how you've called it, and do as appropriate to satisfy what it thinks you want. eg. `$("&lt;div class='name' id='itsMe1'&gt;Some text in here&lt;/div&gt;");` To do this, it's doing much more than just getting an element. Though, in the end, it's likely doing a getElementById .. hand't looked through the source on that. To satisfy your criteria, you should cache the element before going into the loop. var $el = $("#new_post"); for (var i = 0; i &lt; 5000; i++) { $el.hide(); $el.show(); } Others have already mentioned that hide &amp; show also handle a bunch of edge cases, which need to be detected by JQuery using some other DOM facing inspections in places. Not sure if hide &amp; show are as bad as others, but still. Newer jQuery's with dropped support for older browser help, but can only go so far. For example, if you hide a &lt;span&gt;, then you simply call `display: block`, then you will destroy your layout. Just a simple example there, without getting into quirks of layout rendering. Another thing to consider is that browsers have certain timings for drawing, and offer a method to optimize your DOM operations to work with this as well. *[requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)*, should you be interested in going down the rabbit hole. And another, JS is single threaded, which means you vanilla JS code is likely being run without any noticeable artifact. ie. If you run that and watched, nothing would happen, except for the UI halting for 25ms, and a possible 25ms of 'this page is unresponsive'. Sorry if this is a lot, and maybe a bit overwhelming for what seems a simple post. Not trying to dump on you at all, just want to show how aligning things with what's happening undercover can help a lot, and why it can be worth the effort to pick these things up ... kinda happens as you keep learning anyway too! ;-)
Did you use logical resolution or some other complete subset of logical rules? 
Please.. God..... Tell me this is a joke. 
Actually, none of this is necessary. Because your data format is a direct mapping, you don't need any of those if statements, and only one loop (which I did as a ES5 forEach). See solution here: https://jsfiddle.net/bucxcffL/1/
Codeschool.com has a free course on devtools. Should have what you're looking for. 
Sweet I actually have that book on my bookshelf!
&gt; Published: September 29, 1997
I just looked this up, it's only when the args are undefined (even if you explicitly pass in `undefined`).
Yes, why would you need to see it? It's a key feature of ramda and lodash-fp, one should understand the libraries they are using.
http://jsperf.com/caching-array-length/4 Uncached was slightly faster here in FF 42 [SO discussion](http://stackoverflow.com/questions/5349425/whats-the-fastest-way-to-loop-through-an-array-in-javascript)
No: A sandbox is useless if code meant to run in it has an official way to disable it.
Technically you don't need them if you follow like 2 other rules on how to structure your expressions. Like not putting line breaks in the middle of a return statement. There's a growing number of people who advise not including them and I kinda agree with them they are not required. However the current convention is to include them so please do. There's no reason for you to but everyone else does so do it. I do. At the end of each expression. Here's an article which shows there are less reasons to use them then you think: http://mislav.uniqpath.com/2010/05/semicolons/ However once again USE THEM. 
The true performance boost here was to cache values too. In your if you retrieve the value in each condition. This improved version grabs it once. You're unlikely to notice performance problems with JS. Its vs switches do have different performance specs sure but they don't make a significant difference. A switch is cleaner here.
&gt; and compresses easily It's not your job to think about this. It's a minifier's job :) You're asking when you should use semi-colons, which most people equate to "when do I _need_ semicolons". I think this is a _horrible_ path to take with JavaScript. JavaScript has automatic semicolon insertion, meaning that if you leave it out your code _usually_ works: var foo = 42 There are two issues with this: You have to memorize a bunch of pointless rules that you're liable to get wrong. More importantly, the JS interpreter will _undo_ semicolon insertion in some cases: var foo = 42 // Below is my class structure (function(){ var bar = 43; // private var })() That code breaks. The automatic semicolon after `42` was removed because the next token was a `(`, so it's executed as `42(function(){ ... })`, and 42 isn't a function. Do you really want to have to remember all these weird cases? And remember to check code _around_ the code you're editing? Or would you rather just put semicolons at the end of _every_ line (well every line that's not part of a statement)?
fantastic! Thank you. This is very succinct, and pretty much exactly what I was looking for. I will look into getting an editor that supports linters.
Didn't know that either. Thanks for letting know!
https://github.com/django/django/pull/2692
Yes.. Yes
+fucking1. Albeit, babel is somewhat of a godsend, don't you just hate that your (or our) target audience is so slow to upgrade and get the benefit ES6 has to the community... This community may be somewhat small, atleast to the vast amount of "website owners". But, holy shit, it is definitely the time to be programming in JS and it is definitely the time for this language to shine.
:) I've been developing in JS for 2 years now (Java/ActionScript before). Short time, hated it 5 years ago; ActionScript was a delight. Something, about the "state of the union" in JS per se has really turned me on to the language. Things are moving fast. It is a technology that has more than the potential to "take over". There is vast potential that is unrecognized even today; and I'm thinking Big Data, gaming. etc. Maybe it's simplicity in expression opening to a wider audience (server-side).
Yeah, some description about what this is would be nice.
X-Post referenced from /r/webdev by /u/aventic [Facebook login coupled with Javascript and ASP.NET Web API security question (stackoverflow)](https://www.reddit.com/r/webdev/comments/3jqcor/facebook_login_coupled_with_javascript_and_aspnet/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
Awesome, thanks! Looks as if there has been nothing but [performance updates](https://chromium.googlesource.com/v8/v8.git/+/refs/heads/4.5.103/ChangeLog) to V8 between iojs 3.3.0 and this, so hopefully it's not long til everybody is under a single version. Seriously, this couldn't be a better change for the community if so.
Yesterday they said they'd be releasing it on Tuesday. This is probably just prepping for the Tuesday release. It's in the Github issues. It's odd that they already built it today, but they said they would release next week to avoid the weekend. 
Are you talking about placeholders? Or autocomplete?
lol, your comment seemed on point to me! edit: spelling
This can *really* bite your ass when you're writing a server application, though. Consider this: function respondToRequest() { var session = Math.rand(); doAsynchronousThing(function () { console.log(session); }); } What happens? User 1 makes the request. A session is generated for User 1. Asynchronous thing is starting for User 1. User 2 makes the request. A session is generated for User 2. Asynchronous thing is starting for User 2. Asynchronous thing ends for User 1 and activates the callback. What is logged? User 2's session! When the outer function was called again, that session variable changed to something else, and the inner function is keeping track of that outer variable. This means that I can see your information if I happen to make a request at the wrong time, and that's very, very bad. Closures and multi-user asynchronous code -- you know, everything that goes on in a node server -- just don't mix at all.
(I’m the author of the blog post.) Typed Arrays are a relatively boring feature. What is interesting, though, is [how many browser APIs support them](http://www.2ality.com/2015/09/typed-arrays.html#sec_browser-apis-supporting-typed-arrays): File API, XMLHttpRequest, Fetch API, Canvas, WebSockets, and more.
Probably a long time. Still not at all sure how they can implement more than just the syntax for modules and expect it to work in browser/Node land.
That is wildly inaccurate. Do you have a source? For example, if you Google for Simula67 you'll find that it's generally regarded as the first OO formal lang. Way before C++. Also smalltalk was pure and king for days before C++. I think even objective-c was even before C++.
[According to this](http://stackoverflow.com/a/21016088), yes. But i'm not sure this is the best way to improve your JS skills, I think you should start with an html basis and try and dynamize it. Appending content to your html page would seem like a better idea for instance
Do you want to save it into server? Do you want to download it locally? Some details, could help what exactly you want.
Looks like you're right! Hey OP (u/TheBeardofGilgamesh), check it out here: https://www.codeschool.com/courses/discover-devtools
This guy explains it pretty well: http://stackoverflow.com/a/18652918/1236086 Some of the quotes: &gt; npm is most commonly used for managing Node.js modules, but it works for the front-end too when combined with Browserify and/or $ npm dedupe. &gt; Bower is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree (size heavy) while Bower requires a flat dependency tree (puts the burden of dependency resolution on the user).
That might be just the current branch name, and this will be released later.
The autocomplete feature
Well, iojs 3.3.0 was on V8 4.4. The biggest thing new in V8 4.5 is that arrow functions are now fully supported (they're available without any command-line flags, and they support `this` correctly now).
Try this: http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3
Well that's how release candidates work. If there's no blocking bugs found the RC build becomes the release build.
thank you! that gives me enough context to make the decision on what to use. 
Glad to be of help! :)
Exactly. So it might be a week or more before this becomes public. I'd wait.
Honestly, get sublime text, read up on how to use Bootstrap. You'll have something functional in no time, especially if you know some JavaScript.
Low estimate I have seen on es-discuss is one year.
I'm trying to dynamically generate a HTML page, all client side though,the HTML, CSS and JS files that go into making a template, if you like, they're already downloaded onto the local machine.
From what I've seen, it's more like io.js being renamed to Node.js
Ok, not trying to be a pain, just trying to understand. So you want something like a webpage where you can click a button in a browser, and the user will have a brand spankin new HTML saved to their download folder? Or do you want to run some JavaScript file on a console window that will generate a html and save it to the same folder as the script?
Not sure if serious or just trolling.
yea I heard it's because some community members treat them like shit /s
Such as?
&gt; be a pain, just trying to understand. It's fine, you're trying to help me out here, thank you! But yeah, that's pretty much the idea of it, it's an odd project that I'm working on, very odd. But it doesn't matter where the file is saved, in the downloads or the same as the script, as long as I'm able to generate a HTML file, that's all that matters for now, I can try and tweak it or tailor it at a later date if need be, either would be great to begin with. Thank you for your time man! 
It sounds more like you're looking for data, not a database. There are loads of free data sources out there. I could enumerate them, but just search for the term "open data" and have at!
I'm a big fan of pointing people in the right direction, then allowing you to read up and learn - it helps cement things, and you'll learn a lot wider amounts of things than if you straight up get code. With that said, it'll be easiest to use nodejs I think, you can use it to run JS code in your console. Check out this link, and do some googling on the topic within. Stack overflow will be a great resource. https://nodejs.org/docs/latest/api/fs.html For a browser solution, this maybe your only option. Chrome only, and probably won't last, and won't be picked up by other browsers. http://www.html5rocks.com/en/tutorials/file/filesystem/ Writing to and from the file system is serious business with serious security implications, so it's very hard to do. Otherwise, you can use something like this, but it's server side stuff, which you mentioned as a no no. http://www.codeproject.com/Questions/468019/SaveFileDialog-equivalent-for-a-webpage Hopefully this helps!
Soon... for (let span of document.querySelectorAll('span')) { span.hidden = true } NodeLists are iterable.
The current plan is to make them extend the Array class in the future. So, document.querySelectorAll('span').forEach(...) will then actually work. For what it's worth, I went with ES5 because that's what OP used.
Well, I guess the point is to have all of those array methods at your disposal without having to use an array literal + spread or Array.from. I too prefer for-of. Thanks to block scope and "for-loop iteration scope" (if you use `let`) everything is neatly tucked away and you can also close over the counter variable. ForEach was really handy with ES5, but much less so with ES6.
[removed]
Thank you! I think Three.js is a very good graphics library too, Lemon-Js is an alternative. &amp;nbsp; With Lemon-JS, I want to provide additional elements like a [clean/transparent code](https://github.com/DonoSybrix/Lemon-JS/blob/master/src/StateBlock.js), a complete website with documentation/examples/tutorials and some plugins like Bullet and Box2D integration, Spine (2D Skeletal animations) and a particle engine. The library was made to create powerful application and help developers to create applications/game/prototypes quickly. &amp;nbsp; Lemon-JS is ready to support things like automatic batching, culling, 3D models are in JSON (not a custom format) and the scene is automatically sorted so the user haven't got to worry about things like that . I don't know if Three.js support/will support things like that. (Oh and I will port it to C/C++ so you'll be able to use the emscripten version too.)
Everything is ok here, strange :/. You can use [RawGit](http://rawgit.com/) using "examples" directory to see demos too (ex: [Demo post-processing](https://cdn.rawgit.com/DonoSybrix/Lemon-JS/master/exemples/08-Processing/index.html) and [Demo shaders](https://cdn.rawgit.com/DonoSybrix/Lemon-JS/master/exemples/07-Shaders/index.html)). I will put the library, the documentation and the demos on a website later :)
&gt; npm does nested dependency tree (size heavy) This is npm2. nmp3 creates a flat dependency tree.
npm can install packages from git URIs.
Yes, but version 3.x is not out of beta yet.
Yes! [That's](https://www.youtube.com/watch?v=0xx_dkv9DEY) a great one, also. Very good viewing.
Hey, when you say ES6, is that referring to ECMA Script 6? Just want to make sure I'm looking at the right thing
I've using Grunt currently and somebody recommended I should switch to Gulp. When it comes to using Grunt, what I really want to know is. There's a local copy of grunt saved to your project. You ask Git to ignore node modules downloaded, do you still upload your gruntfile.js file? Will it serve any benefit to other developers if you allow them to have the grunt configuration will you have? Is this generally best practice? Great help. Thanks. 
Yeah, you should probably just fork the project and get it done yourself, faster, in your spare time. Easy! Will look forward to the results.
NPM currently can't and doesn't manage "client-side" libraries and pakages. Especially packages that might contain style sheets and possibly HTML. Bower is designed to manage client-side libraries. Now, NPM is likely going to add support for client-side library package management and that will likely render Bower moot.
I have to say ... I really hate that website.
Hell they could just name one. Pretty clear they're just trolling though...
You're not alone! The graphic in the OP over complicates things with bad design. 
I am aware of the problem, but it will take me a while to fix it.
[NodeList.js](https://github.com/eorroe/NodeList.js) your welcome :)
I don't think you are correct. Consider this [fiddle](https://jsfiddle.net/7L9g5f87/3/) Each time the doAsynchronousThing is called a new anonymous function is created and the session variable it has access too is only the one that was in its scope at the time of creation. If the session variable was some sort of global then I believe you would be correct.
The ES6 module spec that is part of the finalized ES2015 standard?
https://gofore.com/ohjelmistokehitys/stop-using-bower/ tl;dr bower is not that great, just stick with npm
I think you're really underestimating how complex modern JS engines are and how much work is required to implement a new feature. Also, just making it work often isn't enough. It has to be fast, too. Anyhow, just to give you an idea, here's what's in the V8 repo: ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- C++ 771 121074 72663 880219 Javascript 3261 42684 85814 329904 C/C++ Header 539 43182 32220 152953 Python 104 3768 5127 16328 Bourne Shell 20 198 426 803 HTML 6 68 48 504 make 2 54 138 351 Lua 2 79 90 344 Lisp 1 13 51 222 CSS 3 40 26 219 vim script 1 20 24 75 DOS Batch 1 4 3 23 ------------------------------------------------------------------------------- SUM: 4711 211184 196630 1381945 ------------------------------------------------------------------------------- There are almost 1.4 million lines of code. If you want to see what goes into implementing a feature, just read one of those accompanying issues in their entirety. E.g. check the SIMD one: https://code.google.com/p/v8/issues/detail?id=4124 Click all the review URLs (and all their side by side diffs) and take a look at what was changed.
I don't have to support IE8. All I know is that on [Working With the Browser](https://facebook.github.io/react/docs/working-with-the-browser.html), it is written "At Facebook, we support older browsers, including IE8." Different posts on stack overflow suggest that it works on IE8 once the appropriate polyfills are installed. If that information is incorrect, I would recommend to write on [react discuss](https://discuss.reactjs.org/t/best-practice-of-css-styles/547/2) to detail what prevents you from using reactjs with IE8. 
Are you looking to create a single page application? 
Always fun to rework some old ideas. :) if you're into FSMs, check out Machina.js. I've used it on a couple projects, pretty nice. http://machina-js.org
That article explains all the reasons why I prefer not to use bower. 
Wait a few weeks.
so basically a very minimal version of meteor?
Or you could just use `function addVertex(graph)`... Why would you want this call to be looked up through a property in the first place?
Aurelia is awesome. I look forward to its wide spread adoption. 
Thanks for that. Nice and clean. I did a [rebound](http://codepen.io/widged/pen/JYoVNK). I separated the aspects of layout generation from the ones of rendering and added the option of rendering with svg.
You kind of answered your own question. Yes frameworks are usually used in more complex development. It depends on what you are trying to build. jQuery is useful for lot's of smaller operations. Check out microjs.com for other small solutions to site / app features. Use a framework when its benefits are relevant to your project needs.
Awesome.
Thanks for the suggestions :) They are welcomed, I'm looking for feedback on the project which is why I posted so keep it coming! I agree about the redundant "reddit" before every command
Nice idea, looks good.
Should work now!
Fixed!
You described what would happen had you omitted the `var` keyword (and not been using strict mode). Here's exactly your example, with logging and a dummy `doAsynchronousThing` added: function respondToRequest(req) { var session = Math.random(); console.log('session for ' + req + ' is ' + session); doAsynchronousThing(function () { console.log('callback called', req, session); }); } function doAsynchronousThing(cb) { setTimeout(cb, 400); } respondToRequest('user1'); respondToRequest('user2'); Try running it and see what it logs. Then delete `var` and see what it logs.
Now that's a wonderfully inventive and useful project named after one of my favorite things.
Obviously you aren't aware of Stackoverflow's purpose and that such questions are off topic. Otherwise you wouldn't make a statement like that.
One problem with that answer is that he states jQuery coders will write spaghetti code, as if they all do and angularjs users can't and don't do that. He also throws in a few "Angular does these things" as if jQuery/javascript can't.
I also like this page: https://github.com/ericelliott/essential-javascript-links
Now you are saying SO's purpose is to delete content. You also think that categories selected by the poster affects the content of the question. iow, it sounds like you want SO to allow any content despite any rules which are posted and despite a five strikes needed to get it deleted. And popular opinion by whom? Redditors? Some forum you read somewhere once? No. SO is good at keeping such questions off there because it is not a place for your opinions, as this post is. SO wants just the facts so please don't sway from that. And, yes, I am one of those guys with the power of deleting which I spend part of my weekends doing.
&gt; Now you are saying SO's purpose is to delete content. No. There is no way to interpret the words I posted to mean that. &gt; You also think that categories selected by the poster affects the content of the question. No. There is no way to interpret the words I posted to mean that. &gt; it sounds like you want SO to allow any content despite any rules which are posted No. There is no way to interpret the words I posted to mean that. &gt; and despite a five strikes needed to get it deleted The five-strike policy is obviously absurd. It might make sense if the question is viewed by 10 people with the power to vote, but when it's viewed by 5,000 with that power - especially when that power is selectively given to those who tend to use it - then something expressed by only 5 of them is obviously an unpopular opinion. The policy means that any question that is sufficiently popular will be closed, unless you introduce additional tools to prevent that. &gt; And popular opinion by whom? Redditors? Some forum you read somewhere once? Popular opinion doesn't work like that, it's a tendency spread over different websites. reddit, forums, blogs, news sites, comments on news websites, essays by top SO contributors, you name it. Do you really deny that SO's reputation has gone downhill over the last two years? And have you been contributing to that site for longer than that? &gt; it is not a place for your opinions, as this post is. [...] I am one of those guys with the power of deleting And there we have it, the heart of the problem. People to whom "opinion" means "what the other guy logically concluded" and "fact" means "what I logically conclude".
That design doc looks like a nightmare to me. You may feel otherwise. Not to mention that it was posted just one week ago. Of all the greenfield options, I just think that angular is a poor one at the moment.
I third that!
I recently replaced Handlebars in some of my existing web projects with this thing I wrote. Of course it doesn't have all of Handlebars' features, but it is considerably smaller and might be worth a look if you can live with its limitations.
ah yeah `&gt;.&lt;` thanks for that... I didn't realise that they worked like this, but that makes sense, cheers
particle.create((88, 898, 4, 1)) you must remove these inner parenthesis. Parenthesis are for separating expressions on a same line, so (88, 898, 4, 1) will return the last expression which is 1. particle.create((88, 898, 4, 1)) is equivalent to particles.create(1) particle.create((88, 898), (4, 1)) is equivalent to particles.create(898,1)
&gt; Wow. That does look a lot more finished now. Cool. 
I get the short string I entered in when i type echo %PATH% where jacav i get 'is not recognized as an internal or external command' I changed my directory and was able to get type HelloWorld.java to show its full contents. Now i closed and reopened cmd and it can't even find javac and i get the 'javac is not recognized as an internal or external command' error again. Sigh 
But humans aren't the only animals that can be migrant. This makes no sense. 
Just realized that `list help` wouldn't work because it'll give you /r/help sub, so maybe `help list`
&gt; Do you really deny that SO's reputation has gone downhill over the last two years? I do. &gt;And have you been contributing to that site for longer than that? I have been a contributing member for far more than five but less than 10 years. What I have noticed, over the last two years, is too many questions and answers which are one-liners and those which showed no effort on the part of the questioner to do any research on their own. Today I voted to have one removed because a simple Google of the topic brought a full front page of answers to the question, including several from SO. I once said I'd bet half those questions came from redditors cause, a few times I noticed someone complaining, here, that their question was unanswered or deleted. Sure enough, some of those I voted to have them removed for one of the reasons I just stated. &gt;The five-strike policy is obviously absurd ... something expressed by only 5 of them is obviously an unpopular opinion. Those five have reached a point where the other thousands have upvoted their answers to a point that their "opinion" is more highly regarded than just anyone who signed up. On top of that, my downvote can be overrided by others and the question or answer can be re-opened for any of several reasons by others of higher reputation. I presume that you are saying an up/down voting system, such as on reddit, is your preferred method but, the problem with that is what I just said; any dolt who signs up here could get a post deleted but, on SO, the ability to do that is relegated to those who achieved a posting reputation that was created by "the masses" if you will.
Also try click all kings in a row.. ;)
&gt; I actually now deploy different builds to different browsers so that browsers with ES6 get ES6 code. That is _super rad_ man! How do you stitch ES6 modules together? Any ES6 minification tools?
I got inspired by your idea - planning to write. I've never wrote a blog, but you got to start somewhere :)
Fixed!
"Police" is fine. "Retard" is the banned word.
You've done fucked up your path. **Never** replace that with any string, **always append**. Go ahead and ensure the following is present in your path: `C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;` That's the default one that comes with windows. Unsure if you need anything else in there, if it's an OEM machine who knows what sort of crap could be in there. Looking at mine, I've got NVIDIA paths, intel wifi stuff; myself, I've added in various sdks, ruby, python, cygwin bin directory, gnuwin32... lots of stuff. When you type a command and press return windows looks at the current path, and every path in %PATH% for something by that name - if it doesn't find it, you'll get the not recognized command.... and conversely if someone has written a program that depends on system components in system/system32, now it can't find any of that stuff and will likely fail with a generic "can't find it" There's a lot of internal stuff that windows does that may or may not depend on having c:\windows and system32 in the path - could be what's why you can't compile, I dunno. Not being able to compile is likely just the tip of the iceberg for weird shit that doesn't work now that you've buggered path. Typically I have an environment variable for JAVA_HOME, `C:\Program Files\Java\jdk1.8.0_20` and have the following included in my path: `%JAVA_HOME%\bin;`
My favorite is the fact that what we used to call "tolerant" (begrudgingly willing to coexist with that which one disagrees) is now called "intolerant". Now "tolerant" is used to mean "unpaid cheerleader of approved, progressive ideals."
Android chrome 45
You can still license your part MIT, because this license is GPL-compatible. Just the whole thing including the graphics would be GPL then.
As I mentioned in another comment, the problem I have is that this works for me locally in Dev\Windows, but the Server for Test and Prod is Linux and fails. If JS is evaluating differently on 2 different servers its a problem, but I cant imagine thats the problem so I was looking for some guidance. I fully acknowledge this isnt hard, but with limited access to the Prod box and attaching a debugger to an external system not being viable, I had hoped someone might have some constructive criticism. If you dont have time to assist, dont reply. Quite few people have been quite helpful and pointing me in the right directions, so feel free to go about your business. 
Thanks madole, but the issue is that the prod is somewhere in cloud (which I dont have debugger access to) and on a Linux box, whereas I have no problems locally on my Windows box! I'm debugging through... ah.. something that may or may not be MS Visual Studio, depending on whether that gets me banned from the Node club. In saying that, I am downloading Iron Node right now :) 
&gt; Promise.try() is not part of Promises/A+, nor is .promisify(). These are wrappers in bluebird wrangling the limited capabilities of Promises/A+ in much the same way jQuery smooths over events. Through the library we can pretend we have a better tool and less opportunity for mistakes. No disagreement there. I feel that ES6 Promises were rushed (Promises/A+ is fine though, as it only specifies a minimum interoperability set), and that there are several missing features. Bluebird fixes that almost entirely, which is why it is my go-to recommendation. That isn't a bad thing, by the way - the *goal* of the Promises/A+ specification was to ensure interoperability between different implementations of Promises that might have their own additional featuresets. `Promise.try` is easily replicated using `Promise.resolve().then` anyway, if you are working in an environment where you can't use Bluebird or an equivalent implementation. I have some more things like that listed [here](https://gist.github.com/joepie91/791640557e3e5fd80861). &gt; I'm not using bluebird, though. I have the NPO polyfill[1] and jQuery at my disposal. It's a more recent jQuery that handles .then() more appropriately. jQuery is not Promises/A+ compliant though, unless that has changed recently. &gt; Your gist for the encapsulation does not work. doSomethingAsyncAndStrange() takes a callback. I was assuming a promise-returning version of that method. If not, you will have to use `promisify` to make it work. &gt; Bluebird's own examples[2] suggest putting async request and the callback inside the function passed to the Promise so they have access to the resolve and reject functions. This only applies to things that cannot be automatically promisifed, such as EventEmitters. It's an edge case that you'll almost never actually encounter - I've only seen it used correctly for the Node.js `http` module, and for my ES6 delay implementation. Almost everything *can* be promisified automatically, and shouldn't use manual promise creation. &gt; There's a lot of old and/or vendor code that has its own idea of how to return data and report errors. I can't rebuild the web service to throw a 4xx or 5xx HTTP code when something goes wrong, so I have result logic that needs to decide on a resolve or reject. That's why I dislike the new Promise(promiseHandler) structure... it is pretty ugly when you are performing the conversion of something existing into promises. If you're dealing with unconventional APIs, then it's going to be a mess *anyway*. Many things can be represented without manual promise creation just fine, though; for example, by returning or throwing from within a `.then`/`Promise.try`. If you have a more concrete example, I could show you how to do that cleanly with promises. &gt; I don't think there's a good reason to throw your own exceptions for errors you intend to handle. It's one thing if JSON.parse() throws an exception, another if I throw exceptions to pass messages or control[3] . I have seen a lot of Java where throwing exceptions is the primary form of flow control; using exceptions to pass messages up the call stack where they are handled as expected responses. It makes maintenance terrible. Promises improve the maintainability of error handling, but I'm still opposed to throwing and error when you could pass it. You shouldn't use errors for message passing. You _should_, however, use it for error passing - even if the errors are being created in your own application. When used correctly, this will work cleanly and as intended; interrupting execution, bubbling up an error, and then representing that error as some kind of formatted response to the user. See also [here](https://gist.github.com/joepie91/c8d8cc4e6c2b57889446) and [here](http://cryto.net/~joepie91/blog/2015/05/14/using-promises-bluebird-with-express/). It's an absolute joy, maintenance-wise. &gt; The Promises/A spec says thrown errors should become rejections, but is silent on how/when/if you should cause rejections. Because this is an application architecture concern, and out of scope for Promise implementations. &gt; If I use return Promise.reject(new Error('Terrible things!')); instead of throw no exceptions are generated, but I still create my "known error state" I plan to handle. Within promise handlers, there is no difference between throwing it or returning a rejection, other than that when returning a rejection, it's easier to mess up by forgetting a `return` statement. Throwing is the correct thing to do. &gt; It appears the performance is the same[4] , though there's a lot of garbage collection happening during that test, so the margin of error is &gt;10% on some passes. It is a quick throw-together test, so it may be off. No, it is most likely just fine. Throwing and rejecting are equivalent from an internals POV. &gt; From MDN (emphasis mine): Not sure why that is the recommendation. JS engines have gotten to a point where this kind of thing is easily optimized, and __performance shouldn't be an urgent concern to begin with__. The correct order of concerns is security &gt; maintainability &gt; performance. You should only optimize things when you have hard numbers telling you so. Security and maintainability are a lot more important, and promises (especially Bluebird) play a *huge* role in that. &gt; The more layers of anonymous functions and closures, the more opportunities to create memory leaks by holding onto unused contexts. If your code is properly modularized (ie. affecting minimal outside state), this really won't be an issue.
So the average opinion isn't good enough to moderate questions, but is good enough to choose moderators? But I wasn't even getting into that before, I was comparing high-rep users to each other. If 5,000 SO users with the rep to vote to close view a question and only 5 vote to close, it gets closed. The ones that closed it are no more reputable by anybody's measure, and a tiny minority. And there are *always* tiny minorites. Ask any 5,000 people any question and not once will 4,996 of them give the same answer. And it's much harder to reverse the deletion than to delete it in the first place, especially since a deleted question is going to receive a lot less attention unless some external website calls attention to it. &gt; I presume that you are saying an up/down voting system, such as on reddit, is your preferred method Good god no, reddit's algorithm doesn't even favor facts let alone reliably surface them. I like that SO recognizes that it's a complicated thing to extract truth from a crowd. I just think the way they handle miscategorization is hurting the community.
kk. so does that mean that my code is wrong or are you just showing me another way of doing this? also what does while(true) mean?? what would happen if i did while(false)??
The latter. Use "while(true)" or "for(;;)" for infinite loops. They make your intention clearer. If there is a counter which you don't change, it looks like a mistake.
Recursion is one of the first things we learn in computer science. To understand recursion you must first understand recursion.
There are some good materials on frontendmasters and udemy if you don't mind paying. http://freecodecamp.com has a good collection of free javascript materials. Kyle Simpson's You don't know JS books are pretty good and free: https://github.com/getify/You-Dont-Know-JS
What's with you? Are you high right now? You're misunderstanding everything I write, and you're talking about something one minute then seemingly forgetting about it the next.
I don't agree with this at all. Ang1 is a very mature framework now ( in a Frontend Dev framework timeframe) and will not be forgotten for a very long time. Even when it is abandoned it's not like your site will suddenly stop working and you won't be able to get help from places like here and SO - so basically you have a piece of software that, although wouldn't see any more direct updates, but you will basically have lifetime support. When two finally is released and ready for full-time use (which won't be anytime soon) your Ang1 skills will help you tremendously in your learning of Ang2, plus upgrading sites to Ang2 if you so choose won't be an overly difficult process. But that is just my opinion.
LOL, it's not *me*. I actually understand the importance of free speech. What I'm saying is that the "thought police" who have recently infiltrated the programming community are also against the word "retard," because it's insulting to retarded people, apparently. Not sure how. My uncle is medically retarded, and he is incapable of differentiating between a complement and an insult.
I don't know enough about testing on React to answer... but I never had a problem in Elm, so...
My guess: JS is single-threaded, and event handling is wedged in in between code running. That while loop is basically consuming all of the JS processor time, and making it impossible for the events to be handled (I'm surprised your browser isn't shitting a brick and grinding to a halt as well). What you want instead is to have whatever you need to do done in the/a canvas click handler.
Not all retarded people can't tell the difference between insult and compliment, and "retard" is a pretty general term. 
The "not equal" operator is wrong in the while condition. But regardless, you're not supposed to wait like that, your function which handles the click will be called every time. In fact, by putting an infinite while loop you're actually preventing the click to be handled by your function, because it's blocking what's called the "event loop", which basically handles events like clicks.
Add a click event listener to all the elements with the 'toolbar' class. Iterate over them all and hide the associated div. Either throw a check in to make sure you don't hide the target of the click, or just reveal it after looping through the others.
I will definitely try that challenge,it looks extremely hard lol. however in javascript math.random is 0 up to but not including 1. atleast thats what my reference book says
What `while` does is repeat what's in its `{}` block as long as the expression in its `()` evaluates to `true` (or [equivalent](https://en.wikipedia.org/wiki/Truthiness#Use_in_technical_jargon)). In your code, the expression `i &lt; 1` returns `true`, so cut the middleman: `while(true)` indicates clearly that the loop should always run.
very nicely explained. it makes sense when you put it that way. thanks
See if this makes sense to you. CSS hides all H1's and the (unchanged, working) JS picks one and shows it. http://codepen.io/anon/pen/jbPPqE
Recursion is simply making a function that calls itself until it fulfills a requirement, given the inputs. The inputs can be the same as before, as long as some other event happens to change the outcome, or the function can modify the inputs and try itself again until the condition is met. Imagine the simplest form being a multiply function. We all should know that multiplication is the same as addition of the same number, x, n times. 2 * 3 is the same as 2 + 2 + 2. We can write a recursive function to solve this easily. function multiply(x, n){ var result = 0; if(n &gt; 0){ result = multiply(x, n-1); return x + result; }else if(n &lt; 0){ result = multiply(x, n+1); return -x + result; }else{ return result; } } Open the console and run this: https://jsfiddle.net/mL956Lwv/1/ To be honest, that function took a couple of tries and it's probably not the most efficient. It's a 5 minute hack to prove a point. You can see that the recursion method is a bit slower than the built-in multiplication operator. A bit is an understatement, it's more like several hundreds of times slower. The other limitation is that the maximum number of times this can recurse (in Chrome with this function) is 14,445 times, that's an input of multiply(x, 14445), so you have to be careful to limit the number of recursions in Javascript. Here are some resources of varying difficulty in understanding: https://www.codecademy.com/courses/javascript-lesson-205/0/1 https://msdn.microsoft.com/library/wwbyhkx4(v=vs.94).aspx http://www.htmlgoodies.com/primers/jsp/article.php/3622321/Javascript-Basics-Part-12.htm http://www.integralist.co.uk/posts/js-recursion.html
I love JS, even with its quirks! It is a simple and imo elegant language if you can curve the complexity factor, that gives you incredible freedom to formalize a wide range of problems. HoF combined with es6 is cool
Aside from the `=!` in use... what you probably want to do here is to attach a click handler, wait for at least two clicks, then return the coordinates. If you put nothing in a while loop and no way to get out, as /u/SuperFLEB so eluquently put it -- you browser will shit bricks printing console.logs. This requires some async magic to do properly -- what you need to do is perform the action (in this case, alerting the results) only after receiving the required input from the user. This can happen at any time and you don't want to block the thread until it happens. jQuery for brevity. You can also use promises, resolving with the values once you have them -- but I'll just go with callbacks. function getCoords (cb) { var clicks = 0, ret = {}; $('#chessboard').on('click', onClick); function onClick (e) { var prop = 'nextTurn' + (clicks === 0 ? 'Origin' : 'Destination') ret[prop] = { x: e.clientX, y: e.clientY }; if (++clicks === 2) { $('#chessboard').off('click', onClick); cb(null, ret); } } } getCoords(function (err, coords) { console.log(coords); // { // nextTurnOrigin: { // x: 0, // y: 0 // }, // nextTurnDestination: { // x: 0, // y: 0 // } // } }); If you use promises, the function looks a bit different, you need to create a new promise object at the beginning and instead of invoking `cb` you would call the `resolve` method on the promise passing `ret` -- at the end return the promise's `promise` property. After doing this, caller looks something like this, getCoords().then(function (cords) { // same as above. });
This isn't why you have a problem (as pointed out by others in this thread)... but is there a reason your canvas element isn't in the body?
Small nitpick but you should initialize "var secondNumber" outside of the while loop and just keep the "secondNumber = ...." in the while loop. This is so you don't keep initializing that variable
Also, if you see `typeof` return `"object"` or `"function"` or (oldIE only) `"unknown"` and [you know the value is not `null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#null) and you want to see which of the built-in types the value inherits from (known as the internal `[[Class]]` property), use [`Object.prototype.toString.call`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#Using_toString%28%29_to_detect_object_class), like Object.prototype.toString.call(document); // "[object HTMLDocument]" where the word after `[object ` and before `]` is the `[[Class]]` property. --- Later on, if you decide to develop your own object inheritance hierarchies, you should test with [the `instanceof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) (requires you to know what constructor to test against) or [`Object.getPrototypeOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) (modern browsers only, iterate to inspect the whole prototype chain) because you can't make custom `[[Class]]` properties, and `typeof` will always return `"object"` or `"function"` for your custom instances.
Of course you can, there's not enough jQuery.
[Image](http://imgs.xkcd.com/comics/appropriate_term.png) **Title:** Appropriate Term **Title-text:** I know a lot of people hate these, but I prefer them to touchpads. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/243#Explanation) **Stats:** This comic has been referenced 166 times, representing 0.2093% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cut8hfs)
what do most programmers use now in days?
you're gonna love this: https://github.com/wooorm/alex
Comments are a must, as a front end dev if someone gave this to me to review I'd return it right away and say you need comments. Start breaking your logic out into functions. This will give you option to reuse logic without having code duplication. Look into unobtrusive JavaScript. Error handling when working with numbers is a must. I know this piece isn't very complex but don't get into the habit of not making assumptions when working with JavaScript at any given time a variable can change types or become undefined. I also check my variables for type and not being null or undefined. This will give you a much cleaner and more maintainable piece of code for years to come. You're on the right track. The break isn't really necessary and I would have used a for loop. Just my preference when working in loops. for(var x = 0; x &lt; 1; x++){ //logic } Maybe look into switch statements as they are sometimes a cleaner way to check a single variable against multiple outcomes or if()else if() else. Try to limit the amount of work your code has to do to reach the final output. Meaning if it's greater than 6 it doesn't need to check it's going to be the same as the random number. Also one last thing. use parseInt on the user input to ensure it's a number it's it's empty it's a no go and you shouldn't even be using it as if it's a int. 
A more clear way of showing your intent would be to use a recursive function. This is a function that calls itself, here's an article explaining it: http://www.sitepoint.com/recursion-functional-javascript. and a very basic example would be: function addBackwards (num) { if (num &gt; 0) { return num + addBackwards(num - 1); } return num; } This function when passed 5, will return 15, because 5 + 4 + 3 + 2 + 1 = 15. Code is read more often than it is written so it very important to write readable code. If you find yourself having to do something odd, then make a comment explaining why so the next dev (which might just be future you) will understand your decision and be able to make modifications easier.
Thanks for the reply, how can I get around this?
The head element is for metadata about the document, such as the title and external resources. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head A canvas element is considered document content, so belongs in the body. If your markup renders, this is because browsers do whatever they can to make a page work. That is, you're passing out-of-spec html and relying on the browser engine to get it right. I don't know if it causes problems because I've never seen it. :) Note you might need to put the script into your body too (or wrap it in documentReady) because the canvas element must exist when the script runs. 
Without seeing the whole of your project it is hard to say, but a guess could be that once you have your event listeners set up, when your click counter reaches 2, you trigger the rest of your project by executing a callback function. var clickCount = 0; var board = document.getElementById('chessboard'); // keep it vanilla js var clickHandler = function(e) { clickCount++; // do whatever you want // now execute the rest of the project // 2 here is a magic number and could be stored in a constant if (clickCount === 2) { startNextExecution(); // detach eventListener for memory optimisation (if needed) board.removeEventListener('click', clickHandler); } }; board.addEventListener('click', clickHandler, true);
Aside from using =!, you're also incrementing mouseStopVar too soon. It will never equal 0, whereby the first if clause is never entered. You can move it to the bottom of your function. Next, put the alerts directly into your click handler. The while loop will consume all your cpu cycles... it's just not going to work. Just put the code into your click handler, or pass a callback if necessary (as someone else seems to have commented). Assuming you want to stop alerting after 2 clicks, you can do: &lt;html&gt; &lt;body&gt; &lt;canvas id="chessboard" onclick = "mouseStop()" width="675" height="675" style="border:3px solid #d3d3d3;" &gt; &lt;/canvas&gt; &lt;script type="text/javascript"&gt; var mouseStopVar = 0; var nextTurnOrigin = [0,0]; var nextTurnDestination = [0,0]; function getMouseCoords(event) { var mouseCoords = ['x','y']; mouseCoords[0] = event.clientX; mouseCoords[1] = event.clientY; return mouseCoords; }; function mouseStop (){ if (mouseStopVar == 0) { nextTurnOrigin = getMouseCoords(event); } else if (mouseStopVar == 1) { nextTurnDestination = getMouseCoords(event); } else if (mouseStopVar == 2) { alert(nextTurnOrigin); alert(nextTurnDestination); } mouseStopVar = mouseStopVar + 1; }; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; If you'd like to just keep alerting, then the last "else if" clause could simply be an else. (Alternatively, you could update mouseStopVar in the first two branches of your if-block.) if (mouseStopVar == 0) { nextTurnOrigin = getMouseCoords(event); } else if (mouseStopVar == 1) { nextTurnDestination = getMouseCoords(event); } else { alert(nextTurnOrigin); alert(nextTurnDestination); } mouseStopVar = mouseStopVar + 1; }; Finally, you'll have an easier time structuring your code if you add the click handler in the script. &lt;html&gt; &lt;body&gt; &lt;canvas id="chessboard" width="675" height="675" style="border:3px solid #d3d3d3;" &gt; &lt;/canvas&gt; &lt;script type="text/javascript"&gt; var mouseStopVar = 0; var nextTurnOrigin = [0,0]; var nextTurnDestination = [0,0]; function getMouseCoords(event) { var mouseCoords = ['x','y']; mouseCoords[0] = event.clientX; mouseCoords[1] = event.clientY; return mouseCoords; }; function mouseStop (){ if (mouseStopVar == 0) { nextTurnOrigin = getMouseCoords(event); } else if (mouseStopVar == 1) { nextTurnDestination = getMouseCoords(event); } else { alert(nextTurnOrigin); alert(nextTurnDestination); } mouseStopVar = mouseStopVar + 1; }; // Add event handler. var board = document.getElementById("chessboard"); board.addEventListener("click", mouseStop, false); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener Next, you might like to just pass a callback if this is part of a larger project... whatever you do with the coordinates is probably not related to capturing them. &lt;html&gt; &lt;body&gt; &lt;canvas id="chessboard" width="675" height="675" style="border:3px solid #d3d3d3;" &gt; &lt;/canvas&gt; &lt;script type="text/javascript"&gt; var nextTurnOrigin = [0, 0]; var nextTurnDestination = [0, 0]; var mouseStopVar = 0; function getMouseCoords(event) { var mouseCoords = ['x','y']; mouseCoords[0] = event.clientX; mouseCoords[1] = event.clientY; return mouseCoords; }; function mouseStop (event, callback){ if (mouseStopVar == 0) { nextTurnOrigin = getMouseCoords(event); } else if (mouseStopVar == 1) { nextTurnDestination = getMouseCoords(event); } else { callback(nextTurnOrigin, nextTurnDestination); } mouseStopVar = mouseStopVar + 1; }; // hypothetical callback function otherFunction(nextTurnOrigin, nextTurnDestination) { alert(nextTurnOrigin); alert(nextTurnDestination); } var board = document.getElementById("chessboard"); board.addEventListener("click", function(event) { mouseStop(event, otherFunction); }, false); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; You should consider tracking the state with an object or closure, so as to eliminate most or all of the global variables. It really depends on your own style and preferences - if you were using a framework, you'd probably adopt that style. &lt;html&gt; &lt;body&gt; &lt;canvas id="chessboard" width="675" height="675" style="border:3px solid #d3d3d3;" &gt; &lt;/canvas&gt; &lt;script type="text/javascript"&gt; var turn = { origin: [0, 0], destination: [0, 0], mouseStop: 0, getCoordinates: function(event, callback) { var coords = [event.clientX, event.clientY]; if (this.mouseStop === 0) { this.origin = coords; } else if (this.mouseStop === 1) { this.destination = coords; } else if (this.mouseStop === 2){ // execute callback callback(this.origin, this.destination); } this.mouseStop++; } } // hypothetical callback function otherFunction(origin, destination) { console.log(origin) console.log(destination); } function addListeners() { var board = document.getElementById("chessboard"); board.addEventListener("click", function(event) { // Pass the callback to clickHandler.... turn.getCoordinates(event, otherFunction); }, false); } addListeners(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Be sure you understand how 'this' works, especially in terms of your callback. https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes 
I'd definitely try ng-admin if I were you (https://github.com/marmelab/ng-admin). It's a frontend admin framework for building administration interfaces based on REST APIs. It's using Angular.js, but a React port is ongoing (https://github.com/marmelab/react-admin). 
console.log(addBackwards(6000)); // InternalError: too much recursion You can't replace infinite or large loops with recursion. A simple loop would be much faster and it would also work with much larger values. function add(n) { let sum = 0; for (let i = 1; i &lt;= n; i++) { sum += i; } return sum; } Even better: Do the math! function add(n) { return n * (n + 1) / 2; }
It doesn't matter so much for practice code like this, but in production javascript you *never* want global variables like: var randomNumber= Math.floor(Math.random() * 6) + 1 When you can help it, declarations should be inside what is called a closure. I'd argue this is the single most important mark of good javascript. Like I said, it won't make too much of a difference now, but it's a good idea to get used to it. Read here for more info about closures: http://javascriptissexy.com/understand-javascript-closures-with-ease/
http://jsfiddle.net/br45vh8d/ All children are initially hidden via CSS. One is randomly picked and its display value is set to "block".
I was thinking that because I'm not a native English speaker, that would be a great learning experience as well. Especially if readers could correct my grammar, it would be a win-win! :)
You're right, that should work.
https://github.com/wooorm/alex Apparently "Billy fucked the nigger's retarded tranny whore, right up it's gender inferior queer shit cunt." Has no issues. I'm not sure it's really all that comprehensive. 
This is a terrible use of recursion. This function cannot just keep running because it'll eventually error out if ran enough times.
Have you tried Zero Clipboard. code.google.com/p/zeroclipboard/ A lot of people resort to the flash solution since there is no cross browser solution for this.... 
I agree with your use of comments. In my opinion comments are extremely useful where they document things that aren't immediately apparent when reading the code by itself. Documenting unexpected behavior or small hints that save a lot of time for people who have to interface with the code is very, very useful. As with code itself, I would argue that people should strive for the absolute minimum amount necessary. I've seen horrible things where all code was essentially duplicated in plain english comments because of "policies". Now *that's* even worse than useless.
I would say, the article is fully compatible with both comments. The first comment describes a head comment which was actually claimed to be very useful. The second comment describes hints that are supposed to help based on common sense. Both are suggested as perfectly fine additions.
Ah, my bad, confused Handlebars and Mustache. Didn't mean to come off as condescending, just wanted to add to the conversation by adding alternatives. 
Faster too. 
It's all good :) Handlebars and Mustache are very similar.
https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines "Any headline that ends in a question mark can be answered by the word *no*."
If code were perfect it wouldn't need comments or tests. As code isn't perfect, it does need comments and tests. The tests are for making sure the code is understood by the computer. The comments are for making sure the code is understood by the human. But just like crappy tests, redundant comments can be distracting or even harmful. You want to strive for the minimum of necessary comments and the best way to do that is to make sure your code is unambiguous, terse and unsurprising. Don't comment on what is easy to see, comment on what's easy to miss or what can't be seen (e.g. the intentions behind seemingly useless or broken code).
You can usually avoid comments by writing meaningful variable and function names. Using numberToBeGuessed instead of randomNumber, inputGuess instead of secondNumber... and refactoring to functions to declare intent (displaySuccessfulGuess(), displayIncorrectInputError()...). A comment is a lie waiting to happen.
I only come to reddit during breaks in work or bouts of boredom looking for links so it sometimes happens I forget where the conversation point is or I just work up or going to sleep. In any case, I don't think I'm misunderstanding you at all but I'm also bored with this thread so that's that.
Also, magic numbers (that 6). It helps a lot (when it comes to reading the code) to extract all of those to constants and configuration objects, for instance: var MAXIMUM_NUMBER = 6; Then using MAXIMUM_NUMBER instead of 6. It has some other advantages, like flexibility (if you feel the need to change 6 to 7 or 1000 you only have to change it there, instead of tracing sixes in your code that may or may not represent the same value). You can make them actual constants with `const` if you are using ES6.
Are you seriously using incredulity instead of an argument?
You should consider porting this to a freeboard.io plugin! Nice work. 
I think ghostery blocks Google analytics api. 
&gt; A comment is a lie waiting to happen. Very true, assertions and test cases should be the preferred method of documentation. You'll know when they cease to be true.
It was written that way because I care very much about shaving a few ms off of it in this exact case -- Put simply the function calls are too much overhead (especially transpiled ES6 with with splats) and it's worth having "unreadable" code -- I actually re-wrote it to remove the maps and `Array.apply` calls to make it faster. Regardless, it's not really the point, though I appreciate you taking the time to write that out :) The _purpose_ of your last code block is no clearer, the comment is still needed.
Yes, it does.
I appreciate your feedback and I will look into this article. Would books such as code complete help? 
Jquery brought to you by Disney Vader?
This was really well written and to the point. Thanks for the submission!
- communicative, happy to share knowledge - passion, always learning, not lazy - great sense of humor
Redux and Flux are both ways of managing application state, so you're going to use one or the other, not both. Here's a complete tutorial on using [React/Flux/Webpack](http://survivejs.com/webpack_react/introduction/) though.
I guessed that if you were focussing on performance you'd have avoided the function calls entirely. That said, yes, it's still not self-evident, but my point was that you should avoid relying on comments alone (and generally only use them as a last resort, e.g. to convey intention rather than implementation details). I genuinely had to stop and dissect what the code is meant to do (and whether I fully understood all the implications and edge cases).
This looks awesome. Thank you very much.
Do you mean like GET to/from POST? How and why do you think this is happening?
If you're using one of the latest browser(s), then you can use [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver). Here's an example [jsFiddle](http://jsfiddle.net/vLpofndm/).
Performance is becoming less of an issue (current iOS and Android devices and browsers are getting very fast.) Newer hardware features are probably going to need native apps to access them, but not all apps need those features. I mostly wonder about things like iOS Safari's swipe navigation and bottom bar, which I feel must be intentional sabotage by Apple. It's important for a mobile app to be able to interpret and make use of gestural inputs rather than just clicking links and buttons. When Safari steals gestures and clickable areas away from your app or causes undesirable resizing, it's very difficult to match a native app's feel and usability. It's also hard to argue for when a lot of iOS users like these features for static page sites. Until Apple provides a user-friendly "install" experience for web apps with adequate configuration options (disable rotation, swipe nav, etc.) I think we're a bit stuck, even if the technology/performance is there.
hehe. One does not simply 'finish learning JS'. jQuery is a toolkit, not a framework... in the vein of [lodash](http://lodash.com/docs) or [async](https://github.com/caolan/async). It's just another tool in your toolbelt. I typically use it any time I need events attached in a framework-less browser setup. I said 'for brevity' because it's less typing... the reason I used jquery is because it's shorter, easier to wrap one's mind around. And maybe I don't like a lot of typing. A framework is something like angular or react -- these will inform on how your code should be structured. 
* Can I see myself wanting to go have a beer with this person after work and shoot-the-shit. * Would this person make a good golf partner (whether either of you play golf is irrelevant) * Can they write a coherent paragraph and talk about? 
I'm sorry, that was a dick way to make my point. You are misunderstanding most of what I say though. And I agree that we should stop now.
Not sure why this is so popular, shouldn't really be using Gulp at this point and the organizational structure of the project doesn't really teach anything new. Would suggest looking at http://github.com/ironbay/react-redux-template It does contain a lot more but everything is split apart so shouldn't be over whelming 
so in other words this will keep infinitely iterating until correct number is guessed in which case it will exit out of the loop? Thats awesome. Thank you.
Won't this be fixed with es6 proper tail calls? Also I just did a simple example to demonstrate recursion with an easy concept
Why shouldn't you be using gulp at this point?
Check out a documentation of this two functions https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener Here is good example http://www.w3schools.com/jsref/met_element_addeventlistener.asp But I think you need start from some basics about what is variables and so on. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Basics
Hey, so in this case, * "click1" is the ID of the element you'll be applying the event listener to * click is the variable name, which holds the DOM element of "click1" * "click" is the type of event listener you're applying. (Listening for clicks on #click1) So if you changed the ID of the element to "push", you'd have this code: var pushDOM = document.getElementById("push"); pushDOM.addEventListener("click", function() { alert("You clicked #push!"); }); Note: I called the variable pushDOM to make it different from the class, you might want to do something similar in your projects to differentiate between parts of your code
If you are past the edge, you reflect the velocity but you don't move the particle. Since you haven't moved the colliding particle when you check for collision again, you check for the exact same x as before. So it's still checked as colliding and you will just reflect the velocity again and still not move. So once you collide, each iteration basically just flips your velocity around. And at the end some particles might be pointing the right way, so some particles sort of move correctly. A quick fix is to move the particle to the correct spot when it collides such as if (x &gt; (width - rad)) { velX *= bounce; x = width - rad; } if(x &lt; rad) { velX *= bounce; x = rad; } x = x + (velX / steps); if (y &gt; (height - rad)) { y = height - rad; velY *= bounce; } if( y &lt; rad ) { y = rad; velY *= bounce; } y = y + (velY / steps); An even better approach would be to just solve for the time of impact. Find the projection of the displacement vector(your improperly using the term velocity) on the normal of the line, then divide that by the same distance projection and you can solve for a time of impact.
I do want to say that I rarely come across anyone who can carry on an intelligent conversation on reddit and you, sir, are one of only two or three I've had this entire year.
No one is thought policing. GitHub--a private entity working within the confines of capitalism and private property--has decided that they didn't want a repository that they considered hateful to continue. If you're against that, be against that. There has and will never be thought policing, especially not on the internet. Nothing legal in the vast majority of countries comes even close to what the concept of the Thought Police is. If you're going to criticize something, criticize it without exaggeration. If you're really just angry about not being allowed to insult people in a way that's offensive to others on GitHub, I would love to discontinue the argument.
Long legs and a fine ass. (My answer is no dumber than the question.)
Specifically with react there's a lot of devtools lost when not using Webpack 
Ahhh, Thank you very much. Is there a way of using an event listener to see if a user clicks anywhere BUT the div in the said example above as well?
Wow, that's so useful! I can't believe I haven't seen that before
Wow, that's so useful! I can't believe I haven't seen that before
good point
No, there is not. You just attach an event to the parent and then you check the target. If the target is the one you want to exclude then you do nothing, something or call stopPropagation() on it. [Here is a silly example.](http://jsfiddle.net/0m1yznq3/4/). You may want to read about event bubbling to understand how this example works.
Nice video, learned quite a bit.
I agree about Webpack, but for those who wish to use gulp and browserify, this kit serves them well enough. Advocating for webpack is well and good, but react-starterify is fundamentally built around different tooling, so it's not really a helpful critique. I've used it, and being familiar with the tools, I was able to get a trivial project done very quickly. Would I suggest using this for a large company's next replatforming effort? Probably not.
Well, the goal here is to put a `Text` object in the document, which the browser automatically renders as the text it contains. `document.write` works by saying "write this HTML after the current script element", and in HTML plain text like "You guesssed right" means to the browser, "create a `Text` than contains 'You guessed right' and insert it where we are right now". The modern approach is to create and insert the `Text` object manually, like so: var textObject = document.createTextNode('You guessed right'); document.body.appendChild(textObject); Of course you could also create and insert a million other things that end up rendering the words "You guessed right", this is just one of the simpler ways to do it. Another common pattern is to have some slot where you want to put it, when you first empty then fill with your new `Text` object.
I really like the sentiment behind this, and it's something i strive for, but i worry that it's pushing me towards 'jack of all trades, master of none', but perhaps that's because i'm not following his ideas entirely strictly. I think this is a really good basis to build a career on, and hopefully given time i can achieve 'mastery' or at least a good level of competence to not feel limited by this. Edit: as an example, i'm not even a frontend developer, i'm mostly systems and backend, but read things like /r/javascript in order to have a greater understanding of the environment i work in.
Could you link to your configs? It'd be nice to have a collection of useful configs with documentation for corresponding file structure and what not. Thanks in advance!
He means use something like this for your data structure: var sites = [ { url: "http://google.com", note: "This is Google" }, { url: "http://yahoo.com", note: "This is Yahoo" } ]; var iframeUrl = sites[0].url; var noteText = sites[0].note;
Ya I figured that out, and once I switched my array to an array of objects my next button quit working. I'm going to have to do some troubleshooting to figure it out. Thanks a lot for the help!
I don't know what I'm looking at.
If you used Bluebird you could use [promisifyAll().](https://github.com/petkaantonov/bluebird/blob/master/API.md#promisepromisifyallobject-target--object-options---object) It could promisify entire modules for you. So for node fs, you would just use var bluebird = require('bluebird'); var fs = bluebird.promisifyAll(require('fs')); And now every fs function has a mirror function that is async. So fs.open() becomes fs.openAsync(), and it will now return a promise. All the original callback functions are still there if you wanted to use them as well. It works for any library that follows the node style callback. 
 array.filter(obj =&gt; { if (obj.type === 'teacher') return obj })
This is also why you can paste an URL like "http://example.com" in your code. It's a label followed by a comment.
 ah, nice!
I enjoyed this video a lot and I agree on many levels. Even after being a developer for nearly a decade I find myself going 'back to the basics' and relearning things that get me excited about programming again. There's so much to learn that sometimes it's easy to become overwhelmed and forget about the importance of fundamentals.
Both examples are broken -- you're referring to a variable, `ace`, that doesn't exist. If you open the console in either example, you'll see `Uncaught ReferenceError: ace is not defined`. The working example just manages to add the event listener to the dropdown before hitting the reference error and failing. The other example, with that code at the top, fails immediately and does nothing.
You fit in well then, as you are 15 years old in maturity. 
Array.filter returns a new filtered array. You have to store it. "obj" is the name of that arrow function's parameter. It isn't visible outside of that function.
 (brew/apt-get/etc) install rename rename 's/.js/.tsx/' *.js
Oh sorry. I didn't know how to add external sources so I left it out, but ace points to an external source of java script and css. With the website on my local server it breaks even when the external code can be reached by ace.
But what you are essentially saying is "you're not using it, but it's baked into the tools you are using". While I get that it's used in a ton of frameworks and libraries, most developers out here don't use it directly (which was the question) or if they use it they use it incorrectly or for the wrong reasons where other techniques would suffice. Too often they are simply following a pattern that has been taught to them without understanding it's real value OR they over over-engineering and pre-optimizing where simpler more straight forward techniques are more than adequate and have fewer side effects. Just my two cents.
https://github.com/basicdays/node-promissory For example: var promissory = require('promissory'); var fs = require('fs'); var readPromissory = promissory(fs.readFile); readPromissory('package.json', 'utf8').then(function(str) { console.log(str); }, function(err) { console.error(err); }); I like this solution because of the explicit step of converting only the functions I need.
Live module reloading is something Webpack does and React hot leader uses that feature of Webpack. From what I can tell using it in Gulp is just using Webpack from Gulp to do reloading.
Key word comment and you're wrong. I recommend you look into JavaScript patterns. My favorite is the module with the facade return. You'll impress people by knowing what you're talking about instead of negating facts. Edit: what's your github? Edit: nvm I'll find you. Edit: Stack Overflow now?
When you're trying to maintain a 1000+ file code base with no comments I'd like to see your response then. Lets be real you don't have any real experience with actual software. I've been a Sr. dev for years and your mentality of thinking you know best over standards is saying that you know better than the web.
&gt; return sentence.charAt(5, 24).toUpperCase(); What does that code do? We shouldn't have to answer it for you, just read it and tell us, in an english sentence, what it does. Hopefully it'll be clear why it's wrong. Once you figure that out, may I point out that there are _two_ `i`'s in that first sentence? And what about when I change the sentence to `Yesterday when I ...`? You shouldn't have a static number (`5`) _anywhere_ in your code. What you need to do: - Find the location of the first `i` - Convert it to uppercase - Find the next, repeat If you don't know how to do that then whatever class you're taking is failing you (or you're not paying attention) and I suggest going back to your teacher and telling him/her that you have no idea how to do this. Someone here giving you answers isn't going to help you. &gt; /\w\S*/g It's called a regular expression. Google it if you're curious, they're extremely powerful (but sometimes confusing as hell to look at).
once an exception happens all the javascript in your site after that line will not work so when it cant find the editor it throws an exception. here it is with a bunch of try blocks https://jsfiddle.net/0m1yznq3/34/ 
Staying relevant as a programmer is a particular phrase. To stay relevant, you need to learn specific skills in demand. He explicitly says this in the video and expands upon it a bit. This is correct and really almost the end of the subject. You will find work, as long as you follow the path of "learning what's popular" and continue to self-teach popular solutions in the problem spaces surrounding your specific skillset. That's great you use angular, you can teach yourself some handlebarsjs along the way and bingo, you're growing to ensure relevancy by adding prerequisites for a future job. The question of "how to get job offers" is what he really focuses on. Fundamentals get you offers when specific knowledge is just a cursory prerequisite and someone is looking for a long-term developer. That's a subtly different issue than a simple relevancy check.
&gt; Such as: /\w\S*/g (what is this?) A regular expression. https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp It's some sort of sub language which is used by a bunch of programming languages for string matching/searching/replacing. &gt; 'The number of the beast is actually 616, not 666.'.match(/\d+/g) ["616", "666"] /.../ is a regex literal, \d means digit, + means "one or more", and g is the global match flag (i.e. *all the matches*). It's a bit of a mess, but very convenient.
He basically says "u should've studied computer sience"
This is really awesome! I didn't know about the MutationObserver. Thanks for taking the time to write an example!
Since this was already solved, I'll tell you something else. "Edge detection" is about detecting edges in images: https://en.wikipedia.org/wiki/Edge_detection The right terms would have been *collision detection* and *collision response*. https://en.wikipedia.org/wiki/Collision_detection https://en.wikipedia.org/wiki/Collision_response
Check out [nw.js](http://nwjs.io/) (formerly node-webkit) It's what I used to create Write or Die, my writing productivity app. You can create cross-platform applications entirely in JS.
If you want to write true performant desktop apps, e.g. first person shooters etc, then Javascript is not your best option. Using something like Electron, you still have almost exactly the same runtime environment (Chromium) than if you simply just write something that runs in a Chrome Browser. I have not investigated Electron at all, but my guess is that you are gonna have more or less the same kind of setup, e.g. something in the backend (Node) and something that manipulates the DOM (Angular/Ember) in the front end. So my recommendation is that if you want to write something that executes in a browser and use some form of internet connectivity and does not require hardware accelerated graphics, use Javascript. Also take a look at Meteor.js and maybe Sails.js. If you want a true desktop app with desktop performance, use something else, maybe C#. 
You alluded to the answer with "reduce": const xs = array.reduce((acc, x) =&gt; { const prev = acc.filter(y =&gt; y[0] === x.name)[0]; const item = [x.name, 1]; if (prev) prev[1]++; else acc.push(item); return acc; }, []); See console: http://jsfiddle.net/togyg9r7/
I held this misunderstanding for a while as well. As @Wince noted below, the object approach would be a better and more efficient approach, because the lookup for an existing record would be far quicker than using filter.
Key map to array pairs is a common operation in functional programming, which is why Lodash/Underscore provide: https://lodash.com/docs#pairs
It's the same as @Wince's, except it's yielding a string rather than an array of arrays. For D3.js you want an array of arrays, either with my approach, Object.keys, or _.pairs.
Glad you enjoyed it. Thanks for the link that is a fantastic resource.
The problem seems to be the word fundamentals. You're taking fundamentals to be the basic building blocks of a program (looping, control flow, variables etc). I assume that to even consider being a better programmer, you have to understand those basics. To me, this video is talking about fundamental patterns of software engineering (not programming). The high level concepts that are pieced together to make a framework - the concepts that many frameworks share but might implement slightly differently. An example is the MVC pattern, which a lot of frameworks use to define their overall structure. To me, understanding fundamentals is being able to explain what MVC is, when you should use it, what conditions led to MVC becoming so popular, why you'd use it over another architectural pattern (and what some other patterns might be). The idea is to understand both why and how. How you use dependency injection (give objects their fully constructed components either at instantiation or before use) is important, but not as important as why you use dependency injection (because a component shouldn't have to manage the creation of the things it depends on, it should just use them). Implementing an MVC type pattern yourself for your jQuery apps will teach you about these things. You'll find the shortcomings of your implementation, of the pattern itself, and you'll start forming opinions about these based on how you like to use them. To answer your question: Use a framework that solves the problem you have. Every framework tries to solve specific and general problems. Find the one tailored to your problem. Most programmers eventually learn that there's nobody out there who has all (or even most of) the answers. They learn to figure these things out, they're going to have to get their hands dirty and try (and likely fail) on their own. You might be getting to that point.
Awesome dude. Now do I need to keep my laptop open the whole time or is there a way to keep this running without depending on my laptop?
Have the script run on the server and sync the database with your laptop when needed, would be my suggestion.
Disable the sleep mode in your laptop.
I will! But just to be informed what's out there. I'm more of a node.js person and always "server-side" long before that. I dislike having to program GUIs :)
Hi /u/healves82, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/thesystemx, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hmmm, the guidelines say: "Posts must be related to JavaScript, even if indirectly.", and you see Javascript being used here: https://github.com/simplaio/rucksack I'd personally say this goes hand in hand with JavaScript, but alas...
I love you, you said it better than I ever could. Spot on. 
OP said cross platform, so Java for now.
I personally am happy you did NOT talk about those things. Very tired of getting started tutorials that try to throw a million features at you. What you've covered is the minimum required to just start building things with React and ES6. I would have appreciated a final project on git with the production vs dev builds and the package.json though. Any way you can toss that up?
draw the img to a canvas (or a jpg i guess) and then use vibrant.js there was another library released this last month on this subreddit, but i forget the name!
There's no code, because the's no feature similar to what I'm looking for in Tracking.js. I'll probably have to look into extending it, as you said. Thanks.
Yep! That's correct!
I think you'll find this a nice read: https://advancedweb.hu/2015/09/01/revisiting_webapp_performance_on_http_2/
No. I'm making fun of people who call anything remotely related to the web a HTML5 something,something,spaceship. Bowling alleys are now HTML5 bowling alleys cause they have a web interface to their scoring displays.
1. The transform pipeline... you mean, like, unix pipes? Or having intermediary build steps with Make? Browserify by itself supports using multiple transform plugins. 2. From what I can see, there are browserify plugins that support for this kind of stuff as well: https://gist.github.com/substack/68f8d502be42d5cd4942#css - On our team we manage our CSS build pipeline separate from Javascript, so our designers can use the "Compile SASS" options in the LiveReload app. We don't do much to dictate how our individual developers should handle their development build process as each person's skills and needs can be very different. We are obviously strict about the production release builds and the process is codified in a single Makefile. 3. Yup, LiveReload or any number of other applications and tools have been doing this for years. I've been using this browserify transform plugin: https://www.npmjs.com/package/react-hot-transform along with watchify: https://github.com/blockai/react-openpublish-iframe/blob/master/package.json#L8 4. This sounds interesting although I don't find the alternative of maintaining the HTML file on my own that difficult as the name of the build file doesn't change that often. I am 100% positive that a motivated individual would have no problem building some process to handle this task. My main point was that Make is the superior tool for codifying your release builds. This isn't about what tools developers personally like to use during development. They should be able to use whatever they want. This is about maintaining a build process for applications that aren't always within the scope of a single tool that is trying to do everything. The Unix Way is a bunch of small tools working in harmony. Here's a great intro to Make from Mike Bostock, the creator of d3: http://bost.ocks.org/mike/make/
Typically JS desktop apps use Node.js for the file system integration. The frontend can use an MVC framework like React or Angular. So, most likely, you will have to learn all three of the technologies you listed. I would suggest ~~Atom~~ Electron + React since they both have a booming community and strong future. 
&gt; I would have appreciated a final project on git with the production vs dev builds and the package.json though. Any way you can toss that up? Great idea. I've set up a repo [here] (https://github.com/dabit3/beginning-webpack)
&gt; a ton of the stuff I mention is not taught in computer science university. How would you know that? &gt;I did not personally study computer science. 
I'm a great believer in reading things and interacting with people as a proxy for knowledge. I also believe that the Great Pyramid of Giza exists even though I haven't personally been to Egypt. I also believe that Pluto exists even though I haven't seen it. Naive, I know. 
More of an "executive overview" than an intro.
Yes, I'm trying to bring this to production so I want to avoid depending on my laptop. Any suggestions for that? 
Your wrote in a comment: &gt; Always thought of reduce as a way to get a single value from an array. Let's see if I can help out with understanding "reduce" in general. First, and this is *very* important, unless you already deeply understand it, the following explanation works best (or only if) you forget *everything* you think you know about `reduce`. Ready? Okay, here we go: 1) `reduce` is nothing but an iterator. Given an array, just like `forEach()`, `map()` or (using a block instead of a function) `for (of/in/...)` it calls a function for every single item of the array. That's all. The rest is "details". 2) One "detail" where it differs from the other iterator methods is in what arguments it gives to your iterator function. For now we only care about the most important ones that it makes no sense to leave out - all iterator functions provide more arguments than are usually needed. What is special about `reduce` is that *it gets the return value of your function from the previous iteration as (first) argument* in addition to the item (in the array) the current iteration is for. 3) You can choose where to start the iterations: You an start with the first item in your array, or you can provide a "starter value". The "starter value", 2nd (and optional) argument to `array.reduce(function, starterValue)`. If you don't provide a starterValue during your first iteration the 1st argument to your function will point to the 1st item in your array, and the 2nd to the 2nd one. During the 2nd iteration the 1st argument will be whatever you returned in the first iteration and the 3rd item in your array as 2nd argument. And so on, until you get to the last item in your array. If you *do* provide a starter value the above is "shifted to the left": During the first iteration the 1st argument to your reduce function is going to be the starterValue and the 2nd arrgument will be the first item of your array. -) At this point it is probably a good idea to point out *that you can do ANYTHING*. All `reduce` does is hand values into your function! You *can* limit yourself and combine an array of strings into one string, or sum up a bunch of numbers. However, that is the most boring use of `reduce` possible. Given this infrastructure provided by `reduce` you can sum up a few values - or you can do wild things. The easy stuff is when the return value of your `reduce` functions after all iterations are done is of the same type as the values in your array. When you combine strings or multiply or sum up numbers that is the case. The "wild(er)" stuff is when the return value of your `reduce` function is something very different from the type of your array: For example, when you use `reduce` to convert arrays to objects and vice versa! In this case you use the starterValue to feed an empty array or object into your `reduce` - and in each iteration add to it. Your iterator function has to return what it gets as 1st argument, so that in the next iteration it gets the same object again to add to it. For example, to turn an array into an object: [1,2,3,4,5].reduce(function (previous, current) { // Note that "previous" is an object previous[current] = current * 2; return previous; }, {}) returns { '1': 2, '2': 4, '3': 6, '4': 8, '5': 10 } I fed an empty object into the iterator function (the `previous` argument) and in each iteration add a key `current` to it, with value `current` (just for the simple example). I have to return the object so that it gets fed back into the iterator function as 1st argument during the next run. Now I turned the array into an object! To turn an object into an array, let's reverse the above. Because `reduce` exists on arrays only we simply use `Object.keys()` to create an array on which we have a `reduce` function: const obj = { '1': 2, '2': 4, '3': 6, '4': 8, '5': 10 }; Object.keys(obj).reduce(function (previous, current) { // Note that "previous" is an array, "current" is a key previous.push(obj[current]); return previous; }, []) returns the values of the input object as array: [ 2, 4, 6, 8, 10 ] Of course these simple examples could have been achieved in numerous other ways. As you can see this time I feed an empty array into the iterator: The type I want returned determines what I feed, and if I want a *simple* type that is the same as the type of the items in the array I don't need a startValue *to obtain a type* for the result. In my simple examples I limit myself to using values within the iterator function that I obtain from the array `reduce` works on. However, it is easy to iterate over an array and, for example, use yet another object - a hash - to get values from. Or call other functions from within your iterator - which, using generators or in ES7 async/await could even be asynchronous functions. `reduce` is really just a very flexible framework function for iterations. The usual examples where you sum up an array of numbers have the big disadvantage to limit how people new to the array functions view them. There is a lot of overlap of the iterator functions - after all, they all do very similar things. For example, you could swap `map` instead of `forEach`, you just disregard the array returned by the former. Or you could do the exact same with `reduce`, if you disregard the first parameter that feeds back the previous iteration's value. My simple examples could just as well have been made with `map` or `forEach` if the object or array that is to be built is defined in a variable outside the iteration in lieu of the starterValue. So it is programmer's responsibility to decide what "looks best", the iterator methods just provide small differences in semantics while overall providing mostly similar functionality. Hope this helps. 
As I said, user forever or PM2 to daemonize the process. A daemon is a process that runs in the background and is not attached to any specific shell, so it will live on after you exit (until the process is killed or the server is rebooted).
Mate you didn't even open the link?
&gt; You basically build your own ng-repeat from scratch Don't... Just use a standard JavaScript loop that returns an array of elements. In fact, don't use a loop, use a map and map over an array of data that returns a list of elements. If you are building a component for looping, you are probably over-complicating things. Edit: Example I wrote a while back: http://codepen.io/nschubach/pen/YXEgrq?editors=001
Thanks for the details!
&gt; my recommendation is that if you want to write something that executes in a browser and use som first off, thanks for your reply. If my knowledge is wrong please correct the following facts: 1. Electron uses the browser as an emulator at its best, but its specific use is to create desktop apps using JS (like atom) 2. Using Unity, (one of the best game engines till date) you can make games including the most sophisticated FPS or RPGs using pure JS (believe me I've tried.) 3. Sometimes, C# (also used on Unity) is not the best option.
that certainly wasn't the healthiest advice I've got :D
How are you going through the array with the next button? Something like sites[i].url i++ I'm on mobile sorry.
Nah its cool. I think hosting it on a server would be better for me. Do you have any good suggestions for server that could host it for me especially for a hobby dev?
Added better graphics and a couple of easter eggs..see if you can find them :) https://deck-of-cards.js.org
Interesting project but I think it's the wrong way to solve the problem. If a Vim user wants to use Vim keybindings in a browser, they should use a browser plugin (or special browser) for it. HTML doesn't really describe behaviour because it's up the user agent. That being said, I can see this being useful in more specific applications like web-based IDEs.
Im not sure I understand, how can the script run if my laptop turns off?
Great article, just a small rant: the ‘’ characters are not copy/paste friendly. And it's not consistent throughout the code examples.
I'm assuming you're SSHing into an actual server. You shouldn't use your laptop for something that needs to run continuously and be accessible from the outside.
The event API you are pointing out in MDN is intended to be used with DOM elements and to handle DOM events. Most event systems/event emitters/etc are actually architectural level event buses, intended either to augment applications with event driven subsystems or as a backbone for event driven architectures. Theoretically you could use some poor virtual DOM element as event bus for the entire application, but that approach would have huge disadvantages over a custom event system. In a 10-20 line JS web page this might not be a problem (like, AJAX submit for a contact form), however, for a rather front-end heavy web applications, event systems are used for so much more than just DOM. 
How do I make this line of Java Script external? Does this line have to be internal to actually work as it is using window.document? window.document.addEventListener("click", function(e) {
meanwhile im still trying to convince co-workers not to inline their js
Some strange results. More people of heard about React than Angular? Doubtful.
I'd be interested in seeing question 5 broken out into at least two questions: preferred JS libraries (none, jQuery, Mootools, Zepto, etc) and preferred JS frameworks (none, Angular, Backbone, Ember, etc).
what do you use to fetch the data? Which xhr library? fetch? superagent? 
by submitting the form?
That's bad intell. Microsoft open sourced .Net and expanded its cross platform capabilities last year. https://news.microsoft.com/2014/11/12/microsoft-takes-net-open-source-and-cross-platform-adds-new-development-capabilities-with-visual-studio-2015-net-2015-and-visual-studio-online/
&gt;Theoretically you could use some poor virtual DOM element as event bus for the entire application, but that approach would have huge disadvantages over a custom event system. What are the huge disadvantages? You could probably use the window|document object as well? If you are having "event driven subsystems or event driven architectures" why wouldn't you want to call the [native] code behind addEventListener, removeEventListener, dispatchEvent?
they separated "heard about X" from "used/using X". hence why ember can handily beat both of them on the former metric while enjoying a comfortably irrelevant 4% on the latter.
Why do you think you need those while(true) loops?
I've seen too many bower components that are literally the minified js file that you link in your HTML. You may as well link a CDN.
Computer science grads are in luck, then. It's only a matter of time before job offers requiring 10 years of Rust experience start flowing in.
That's not an external resource, that's part of your code. An external resource means if your script is relying on another library or framework. For instance, to refer to the `$` variable from jQuery, you have to link to the jQuery library by including it on your page. In your case, if the `ace` variable in your script is part of some library, you have to link to that library, or it will be a reference error.
I found the presentation of your code challenging to read, so I ran it through my beautifier at http://prettydiff.com/ function triangleArea() { var val1 = parseFloat(document.getElementById("value1").value), val2 = parseFloat(document.getElementById("value2").value), ansD = document.getElementById("answer"); while (true) { if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); break; } else { ansD.value = val1 * val2 * .5; return ansD.value; } } } function squareArea() { var val1 = parseFloat(document.getElementById("firstSide").value), val2 = parseFloat(document.getElementById("secondSide").value), ansD = document.getElementById("square"); while (true) { if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); break; } else { ansD.value = val1 * val2; return ansD.value; } } } function circleArea() { var radius = parseFloat(document.getElementById("radius").value), ansD = document.getElementById("circle"); while (true) { if (radius &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); break; } else { ansD.value = radius * 3.14159265359; return ansD.value; } } } I don't understand the use of the while loops. The `if` condition appears to be enough. The following code is smaller and even easier to read: function triangleArea() { var val1 = parseFloat(document.getElementById("value1").value), val2 = parseFloat(document.getElementById("value2").value), ansD = document.getElementById("answer"); if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = val1 * val2 * .5; return ansD.value; } function squareArea() { var val1 = parseFloat(document.getElementById("firstSide").value), val2 = parseFloat(document.getElementById("secondSide").value), ansD = document.getElementById("square"); if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = val1 * val2; return ansD.value; } function circleArea() { var radius = parseFloat(document.getElementById("radius").value), ansD = document.getElementById("circle"); if (radius &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = radius * 3.14159265359; return ansD.value; } The functions can also be nested for increased modularity. function area(type) { "use strict"; var triangle = function triangleArea() { var val1 = parseFloat(document.getElementById("value1").value), val2 = parseFloat(document.getElementById("value2").value), ansD = document.getElementById("answer"); if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = val1 * val2 * .5; return ansD.value; }, square = function squareArea() { var val1 = parseFloat(document.getElementById("firstSide").value), val2 = parseFloat(document.getElementById("secondSide").value), ansD = document.getElementById("square"); if (val1 &lt; 0 || val2 &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = val1 * val2; return ansD.value; }, circle = function circleArea() { var radius = parseFloat(document.getElementById("radius").value), ansD = document.getElementById("circle"); if (radius &lt; 0) { alert("Sorry try again. Remember, only positive numbers are allowed"); return ""; } ansD.value = radius * 3.14159265359; return ansD.value; }; if (type === "triange") { return triangle(); } if (type === "square") { return square(); } return circle(); }
Thanks! But if their search sucks, seems like that'd be the reason I wasn't able to find something like this in the first place. :/ 
They do provide a really handy API so that other third party services can provide superior and opinionated searches.
what exactly are you trying to do? depending on the application you may not even need an access token.
Life taught me that those who claim they possess understanding through lack of knowledge usually suffer from an inferiority complex. And tend to resort to sockpupets. And are full of shit.
are you reading the .responseText or .responseXML? if you use the .responseText it should return the raw text file that you have requested. If you wanted you could parse the responseText as XML or use the XML response that is in JS http://www.w3schools.com/xml/xml_parser.asp But since you say you only need the raw text than .responseText should work :P Good Luck! 
JSON is a derivative of XML and not based on javascript...thats when i stopped watching
I thought you were advocating fundamentals over tools... perhaps you should consider a tertiary education course after all. One with focus on consistency perhaps? 
&gt;Second... what will you do when you want to have a custom object with that emits events... var EventTrait = { on: addEventListener.bind(window), off: removeEventListener.bind(window), emit: function(name, val) { dispatchEvent(new CustomEvent(name, { detail: val })); } }; var model = Object.create(EventTrait); you could do something like the above (taken from this [post](https://stackoverflow.com/questions/21566615/is-there-a-way-to-implement-eventtarget-with-plain-js)) &gt;I highly doubt that a) there is that huge of a difference in speed or resource usage between custom em like this and native one It probably takes/leaks less memory as well. &gt;this API gives you out of the box (deferred execution). Every. Time. I think I understand the "deferred execution" demo from [here](https://jsfiddle.net/atnwp3nc/1/), i.e after pressing the "Pressed EM" button the "Pressed EM" text is show (immediately) and then after a while the "Long running done with EM" is shown. In the case of the "Simple event" button the "Pressed EM" is not shown until the "Long running done with EM". The thing is that pressing the "Pressed EM" button (in Firefox, in Chrome it does) doesn't always show "Pressed EM" before "Long running done with EM", I don't know why. Anyway my idea is to reuse the functionality that the browser provides instead of relying on a dependency which might be written poorly (compared to the [native] implementation). 
Html Form: http://www.w3schools.com/html/html_forms.asp If you submit the form the "normal" way you don't have to access the data from the inputs, they'll automatically get send and you can access them in your php-script where you are submitting to in the $_POST array. If you want to access the value of an input you can do this with $('#colorpicker-'+newid).val() vor example or with document.getElementById("colorpicker-"+newid).value;
depends. How big? what is the team's experience? What are the main goals? More about browsing data, inputting data, interacting with data?
in my opinion JS isnt the right course to take, most desktop development languages are C derivatives and as such if your app actually kicks off and needs to become properly native the differences between JS prototypal system and C will be painfully obvious. I would suggest thinking again. JAVA isn't awfully pretty in actual use but the way it forces your to develop will ensure you have a good foundation for moving to another development language. But this is just my two pennies worth.
if its a chrome extension you can have it open the link in a new tab? I'm not exactly sure what you are trying to do here
This is why I wish `let` had `const` semantics.
But we all know that Angular 2 gonna rock, so maybe it's good to start with angular 2 because this is the future.
Start with the stack that you're most productive with and least likely to fuck up.
team experience with angular 1.x, the main goal is of course modular code, easy to test, easy to maintain. 
...I wouldn't, but that's up to you, I guess. 
&gt; But we all know that Angular 2 gonna rock Must not... get trolled... In all seriousness, Angular 2 won't be production-ready or have an ecosystem for a long time. [The tooling around React is consistently getting better.](http://react.parts/web) If you can wait another year or so, then Angular 2 will be a fine choice. That said, I've used Angular 2 and prefer React, mostly for architectural reasons. Angular 2 will be familiar to Java programmers. It does things like create classes that are functions in disguise, just like Java. Even uses TypeScript. React will click more if you prefer a functional style or want to learn something new/better.
Hi @kenman alright sorry about that!
 // Flashes text function blinkText(array) { // Blink interval setInterval(blinker, 250); // Flag to see what state text is in (true or false) var flag = true; // Number of times to blink text var blinkNum = array.length; var i = 0; var divID = document.getElementById("blinkText"); function blinker() { if (i &lt; blinkNum) { if (flag) { divID.innerHTML = array[i]; flag = false; } else { divID.innerHTML = ""; flag = true; i--; } i++; } else { // Delete if it's still showing divID.innerHTML = ""; // Stop blinking clearInterval(blinker); } } pickTwo(array); } function pickTwo(trialSet) { var guessSet = trialSet.slice((trialSet.length-6), (trialSet.length)); var two = []; while (two.length &lt; 2) { var x = guessSet[Math.floor(Math.random() * guessSet.length)]; if (two.indexOf(x) == -1) { //make sure letter is not already in array two.push(x); //appends to array } } document.getElementById("displayTwo").innerHTML = two; } // Removes startTrial and calls blinkText function startTrial() { document.getElementById('startTrial').style.display = "none"; nextTrial(numTrials); } function nextTrial(numTrials) { for (i = 0; i &lt; numTrials; i++) { trialSet = prepare(); // creates a trialSet blinkText(trialSet); } }
I assume they would simply create a different keyword. `let` is typically used in functional programming languages to denote lexically-scoped constant bindings or aliases. Maybe a `val` keyword. I'm sure you could find something reasonable if you spend enough time in a thesaurus. All-in-all though, not that big a deal. I find that `const` makes functions slightly easier to reason about, but you'll get much more benefit by using immutable data structures and pure functions. I do however contend that `const` makes you think in a more functional way by default. It makes you be conscious about changing bindings (at which point you may extract a function), and mutating an object referenced by a ` const` binding feels completely wrong.
I doubt I will. I dislike the fact that Angular embraces mutation, DI containers, Java, and other useless stuff. If you prefer Java, C# or other class-based languages, then your opinion will be different.
TypeScript, using classes for *everything*, DI, class annotations for everything. For example, [here's a filter in Angular 2](https://auth0.com/blog/2015/09/03/angular2-series-working-with-pipes/): @Pipe({ name: 'tempConvert' }) class TempConvertPipe { transform(value: number, args: any[]) { if(value &amp;&amp; !isNaN(value) &amp;&amp; args[0] === 'celsius') { var temp = (value - 32) * 5/9; var places = args[1]; return temp.toFixed(places) + ' C'; } return; } } This is the sort of thing you might see in Java: turning computations into classes. Even has type annotations and class annotations ("decorators"). You even have to inject this class in order to properly use it.
&gt; without the while loop, when you run it through the if statement, it wont loop back and ask you to enter a new attempt If you were using prompt to ask the user for the input, some kind of loop would be necessary to start the process over. However, since you are (i'm assuming) having the user click a button to start the process, it isn't needed. Also, if you look closely at your while loop, you have a break under the if statement, and a return under the else statement. It's impossible for your loop to make it past the first iteration anyway :)
I don't really mind classes, annotations, DI or the rest, but I am struggling to understand why a pipe / filter should need to be a stateful instance of a class, rather than a simple, pure function. In that regard, it does feel a bit like Java, at least prior to getting lambdas, which (I think) are essentially shorthand for anonymous classes anyway.
* Flow allows a "comments syntax" var i/*: number*/=100; which makes flow files 100% compatible js files with some extra comments * Flow type system is not nullable unless specified explicitly. This allows to capture "cannot read value of null" or "cannot read value of undefined", which is 50% of all the errors at least
Thanks! Unfortunately, I am just pulling the responseText. It seems like the error comes as SOON as the XMLHttpRequest.send() is called (and returned). Seems Firefox is immediately attempting to parse the XML whether you read it or not. If I use FireBug in Firefox, it seems like it ignores the errors and doesn't display them. It's only in the Firefox native console that you see them. I've tried finding a way to prevent Firefox from attempting to parse the XML on a request, but to no avail. :/
0.12.7 to 4.0? I know skipping versions is all trendy, what with Netscape skipping 5.0, but seriously?
Ah, I didn't mean technical main goals, I meant more on a user/business level. What are you trying to achieve functionally?
Versions 1 - 3 weren't skipped; they were shipped under the banner "io.js" because Joyent was procrastinating on shipping new changes to "node". The two projects reconciled, cannonizing each's version history. Since 1, 2, and 3 were shipped by io.js, the merged version is 4. 
is your second function `pickTwo()`? It's being called right after the function *definition* of `blinker()`, which of course, would be invoked immediately. 
&gt; mutating an object referenced by a const binding feels completely wrong. Except that you often will do that away from the line of code where it was declared, so it's totally not obvious that this thing is something you shouldn't be messing with its contents.
Sweet- thanks!
I love the observation that with `Object.freeze` you can treat Objects/Arrays as *values*. This means that they won't change underneath you with, meaning the `const` keyword actually means the binding and the values wont change. There are a lot of libraries that help you with hierarchical data ([horn tooting](https://www.npmjs.com/package/icepick)) -- it really leads to an interesting style of coding --- with stronger guarantees and invariants.
It makes initialization faster, but when calling the functions, those defined at the instance level will be faster because the prototype chain doesn't have to be accessed to locate the function. But same applies here; performance impact is negligible 99.9% of the time.
Not sure if would help but you might be able to reduce the complexity of this greatly by using the &lt;blink&gt; tag. Edit: Never mind, looks like the blink tag has been killed off.
I really find it strange that people think that - when they learn React - they are not learning a DSL ( that is going to be obsolete in 5 years!! ) - but rather a pattern.. While learning angular is learning a DSL .. and not a pattern! Further thing is when people say that - there is no pattern.. ( uhm.. sorry DSL.. ) that you can carry forward to Angular 2 - so Angular 2 is a completely new framework. 
Wait why is it impossible? The logic says if number is less than zero then run this. If not, skip this, dont even go into this alert box, just skip down to the else. I guess thats how I understand the logic. Am i wrong?
Just to clear up any confusion. Version 1.x - 3.x was Node's awkward adolescent phase, during which it dyed its hair pink, rebelled against its parents, moved out of the house, and preferred to be called "io.js". After some soul searching and figuring out of some personal issues, everyone mellowed out, and Node/io.js became 4.0 and moved back home. Mostly everyone is cool to each other around the house, and people generally don't drag up the past. It's "Node" again but the hair is still pink.
Well, above might be a something worth to take a look at, and maybe I could wrap the library around this, and fallback to the current implementation when this API is not available, but I need to give this some serious testing tho. I have fixed the issue with Firefox - apparently, it requires minimum timeout to be 4ms instead of 0 as in Chrome/IE. I have applied a temporary fix to use 4ms delay in FF, however, that will not work in the long run anyway.
Hilariously accurate. 
All very valid points, and from a legibility point of view the first method makes the most sense to me as well. From where I'm sitting I'd like to reserve the constructor function only for the members actually needed or set at init. 
Thank you for this. I've read a lot of this book so far. My focus is on performance. Should I just create the same class for all the design patterns in this book and then run them in order to find which one has the best performance?
Right, with everything fixes and all external files properly linked I ave found the problem. Some reason if I do not have this code internal with my HTML then it doesn't work. Code: ``document.addEventListener("click", function(e) { if(e.target === click) { if(drop.style.display == "none") { drop.style.display = "block"; if(drop2.style.display = "block") { drop2.style.display = "none"; } if(drop3.style.display = "block") { drop3.style.display = "none"; } if(drop4.style.display = "block") { drop4.style.display = "none"; } if(drop5.style.display = "block") { drop5.style.display = "none"; } if(drop6.style.display = "block") { drop6.style.display = "none"; } if(drop7.style.display = "block") { drop7.style.display = "none"; } } else { drop.style.display = "none"; } } else { drop.style.display = "none"; } }) `` Why does this code not work in an external javascript file but it does if it is copy and pasted into my HTML in the ``&lt;script&gt;``tags.
Yup, I meant Electron, not atom. :) 
React no doubt. quick to learn, smaller API surface, options like MVC, Flux and overall easy to compose with anything else. Pick up your best of breed libraries and change only one piece at a time down the road when better options come out. Angular 2 is a masochist experiment in engineering making the simple complicated. If you want a better Angular 2 with a much nicer syntax that works with "normal" ES5 or ES6 Javascript, look at Aurelia instead.
Nah. No more than the internet itself being too big.
 var sum = (num10 + Number(string8) + one);
Oh, it does work. I was getting an error but it was unrelated. Thanks!
Sounds like he just can't keep up.
So much this. Having your applications being as terse as possible at the cost of propreitary abstractions is a terrible way to design a codebase that others can jump into. 
Think of Github as one giant `git` repository for the world. So to get "Github" working, you have to learn how to use `git`, the free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. So yes, you can `git commit` all the files at once, and then `git push` them to your repository. You don't typically `push` archives to Github, you `push` the raw contents, the source code.
In my experience, Java is a great foundation language but I'd hate to use it for programming. Writing native Android apps is probably my least favorite thing after native Obj-C iOS apps.
Start by reading the code on the existing modules in npm https://www.npmjs.com/search?q=text+adventure Use modules (and classes if necessary) and browserify.
It is a two edged sword that a lot of ES6 features are enabled by default. Great to be able to use all the goodies on the backend, but it can cause some troubles for code that should run on the forntend and the backend... At least for now while ES6 support is not consistent across browsers and I'm guessing that node javascript will be ahead of browsers for the foreseeable future. 
Good point, I should probably use this! :-)
try pulling with .responseXML and see what that does
This is Huge. And insanely illegal (unless people are waving their rights by siging: "yes, you can inject ads into my browser requests"). I am still new to java-script so let me know how the code hashes out, and WHERE on earth was this found??!! I assume it's written into a TWC wifi/modem they issue out to users for a "generous" monthly fee. Lol, These cable companies are getting grosser and grosser by the day... Headline: TWC is literally hacking its own customers. A P.R. NIGHTMARE!!!
thanks for the feedback, i agree about the priority being an experienced developer
http://nodejs.org/ is blocked by SophosAV as Spyware &gt;.&lt; (Before you rag on me for using it, company policy. &gt;.&lt;) EDIT: While it is not specifically about Node 4.0.0, do I really deserve so many downvotes for informing people who might include Node.JS maintainers that a major company firewall software has put them on their shit list?
He said it wasn't optimized for mobile devices yet, but it ran surprisingly well on my phone. All it really needs is a better UI layout for mobile. :)
Your ace.js isn't linked to the jsFiddle, so I can't actually check. If you fix it, I'll take a look at it. In the meantime, you can do anything in an external file that you can do with inline script. If you're moving working code to an external file, you need to take things into account like load order and timing. If the code is doing something element specific (like adding an event listener), that element needs to exist in the dom. Same would go for code, if inline code is depending on something in an external file, it may not exist until the file is loaded and parsed.
maybe its in the wrong place? if your not using jquery most people used to put their scripts at the bottom of the `body` tag because: * it would not load until after the html, so the html renders faster * the elements are rendered and you can access them, if theres no `&lt;body&gt;` content there is no `document.body` other solutions often used: * put everything into a `document` "ready" event or "load" event (usually window.load) * put everything into an `init()` function or a series of functions and call them at the bottom of the `body` tag * use jquery `$(function(){ ... })` wrapper that will only run the code at the ready event idk if thats the problem, what are you using?
The big advantage of immutable objects isn't history (though that's nice to have). JS uses events and an event queue. You never know when a function's going to be called nor do you know if an event before your current one has changed your data (a potential bug). With immutable data, a lot of async issues simply cease to exist because you can treat time as a constant rather than another variable. When do you not want to use immutable objects? As they say, there's no free lunch. Current immutable systems take a small performance hit in exchange for the guarantees they make (courtesy of them being written in JS). If you have something that you can prove (keyword is prove) is bottlenecking your system in a major way, changing back to mutable objects can provide a performance boost in some situations.
For more context, here is his tweet and ensuing discussion: https://twitter.com/ivarvong/status/641034191589634048
[**@ivarvong**](https://twitter.com/ivarvong/) &gt; [2015-09-07 23:43 UTC](https://twitter.com/ivarvong/status/641034191589634048) &gt; Time Warner wifi injected an ad into my HTTP session, seemingly by rewriting jquery. JS: https://gist.github.com/ivarvong/32599c1d0982c2df089e &gt;[[Attached pic]](http://pbs.twimg.com/media/COVpM0oUcAAYizI.png) [[Imgur rehost]](http://i.imgur.com/iU9MGqj.png) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
I don't think that was implied by 'better devs for a lower price'. There is currently greater management demand in the market for angular, thus higher salaries for the technology, if one does not require one or the other.
Like this? [jsFiddle](http://jsfiddle.net/ot321knd/) Part of the problem was the way you're setting intervals. You actually set a bunch (not a single one). Also as a side note, your code deadlocks if you don't pass in a proper array.
makes sense. semver says that this is a breaking change.
Basically, all the new stuff listed as new in 4.0 was introduced in the io.js versions. Io.js is now just a(n important!) footnote, in nodejs history. The reason for the fork was philosophical differences between two groups (stability vs speedier delivery of new features). They've resolved their differences and now all is well in node world. There are some breaking changes, mostly related to security and changes in the underlying v8 engines. Beyond the list of major changes listed directly in the post, they also link to a list of more detailed list of the breaking changes here: https://github.com/nodejs/LTS/wiki/Breaking-changes-between-v0.12-and-next-LTS-release
Assuming "string8" can be any string (not always a number as a string), then converting to Number is not safe (possibility of NaN). The safest way would be: var sum = num10 + (parseInt(string8)||0) + one; Which would turn string8 into 0 on a NaN. Or just wrap it into a function to make it easier to use: function foo () { var sum = 0; for (var arg in arguments) { sum = sum + ( parseInt(arguments[arg])||0 ); } return sum; } var sum = foo( 2, 4, '6', 'a string', 8 );
yep, thanks for your comment. This project is not to replace powerful IDEs on web pages, but rather as a web side writing(such as blogging, writing notes, ect.) of enhancements.It is like writing with vim users with smooth and efficient writing experience without the need to install any browser plug-ins.
&gt; Have your boss take it The boss probably wrote it and knows exactly how to solve it. It might be the only coding problem the boss knows how to do. I would love to ask the boss to take a different test of equal difficulty that he isn't already familiar with. I really dislike interviews where it is apparent that the people asking the questions wouldn't have known the answer themselves. They have canned questions and canned answers. If the answer is correct but doesn't exactly say what the interviewer has on his paper, then too bad for the smart and well qualified candidate. You are absolutely correct about the cost of interviews. I remember we almost passed up a kid who absolutely aced a programming interview. We asked him to code five different problems on paper. Each was a little more difficult than the next and he coded them all very well. One of our bosses didn't want to hire him because he didn't like the school the kid went to. I put my foot down and told him it didn't matter what school he went to, because I know half the people working here couldn't get all 5 of those problems correct. We did hire him and he turned out to be a great asset. If it were up to the boss, we would have lost a wonderful team member.
I attempted to fix the ace.js, but I have no idea how the external file thing works on Jsfiddle. I managed to get the correct file connected and if you click on it, it will take you to the file but some reason it is not being used.
were you loading scripts in the head tag? then yes, otherwise no and i would make sure they are loaded in the right order (ie ace.js first). maybe ace.js isnt loaded yet sometimes when your `&lt;script&gt;` block runs? another reason to use window.load. (i dont remember why atm but the doc.ready is probably better to use than onload)
I see, that's interesting. Is there any way to make this faster, other than to run getJSON synchronously which is hard to do? Is there anyway to define foo.bar?
Well, I'm done with ever trying to do 3D graphics programming. How about you guys? /joke That was a great presentation. I would love to see someone give this in person. Presenting is an art form into itself, and *this is a freaking master artist*. Even if he were a monotonous, mouth noise-spewing, umming speaker, his presentation and illustration of the points alone would be amazing.
Babel 6 (W/ ES7) + Webpack + Postcss + CSS Next + React Hot Loader is awesome. If you haven't looked at webpack and its modules like PostCSS (Lost Grid, CSS Next, CSS Modules) you're missing out.
one big js file (or whatevers easier for you) and then minify/jscrush it, the players will have a hard time cheating
There's the "notable changes" list from a previous version of the fork... so if you never even looked at the fork, it's quite incomplete. Is there, or will there be, what I guess you could ccall a "tutorial-log" (change log with learning info on the changes) between this 4.0 and 0.12.last?
yep, you should update to 4.0 at your leisure.
What kind of "policy" is that?
This is a good point and something I missed. Thank you! 
I installed it and immediately had to revert to io.js because I got a segmentation fault trying to run a gulp task ¯\\_(ツ)_/¯
They didn't skip versions. 4.0 is the successor of io.js 3.3.0. Look at io.js for the "Missing" version steps. "node" was dropped - the new node.js is the old io.js.
I just noticed I hadn't replied to this. I really appreciate you taking the time to compile this list, it's tremendously helpful.
You are awesome. Thanks for the detailed explanation.
Reinstall your node modules
Well, your variable is but what it points to may or may not be immutable. 
I'm also having problems with gulp tasks after installing. reinstalling node modules hasn't helped
Since the discussion has moved to include non-Javascript options as well, I have to add my 2 cents: Haxe Cross compiles to native binaries for all three major desktop OSes, and Android plus iOS as well. These work quite reliably. It also has a HTML+Javascript transpiler target, but this, in my experience, has a way to go before I would consider it reliable. Haxe's syntax is quite similar to Javascript as it derives from AS3, which derived from the proposed, but ultimately not adopted, ECMAScript 4 standard. I like to think of it as Javascript with strict types. Owing to its history, its community and tooling and libs are all very game development oriented, but that is beginning to change recently. tl;dr= if you aren't averse to something other than Javascript, give Haxe a go.
Versioning seems to be even harder than naming things, and invalidating cache.
Like, I don't mean to be a party pooper, but if the integrity is upheld by an SHA check, what's to stop TimeWarner from just rewriting the SHA checksum to match it's modified jQuery? They're already fucking around with Javascript requests it seems, it'd be not much harder for them to fuck around with HTML as well?
[**@rvagg**](https://twitter.com/rvagg/) &gt; [2015-08-11 23:35 UTC](https://twitter.com/rvagg/status/631247614378295296) &gt; http://github.com/iojs/io.js ⇒ http://github.com/nodejs/io.js ⇒ http://github.com/nodejs/node ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
I would decide the scope of your project, and especially consider that not all roles need to be 40 hours a week roles. On the last application worked on, I began looking into a rewrite since that was on our roadmap(never got there). I found that a 6 person team, based on our very general requirements would have been ideal. Example: - 2 Front-end devs - 1 Backend Dev (Part time contract ?) - 1 Data Person (Part time contract?) - 1 Tester (Par time contract) - 1 to PM You are obviously the PM, and if you Data layer is taken care of, then you may not need a person for this. You also don't necessarily need a full-time tester, but should probably contract that out. A tester is cheaper than having your devs test themselves. That leaves you, at minimum, 3 full-time JS developers. Look for people with the skillset, but don't restrict yourself to that. The extra 10 or 20K per head for a React or Angular dev, vs a clever developer with a different skillset, may be more than just paying for training and building a prototype or two. **Budget:** - Find out what the average wage for a web developer in your area is. Multiply it by 1.25 or budget for some major incentive. It is cheaper to keep an employee than to risk losing them, so you want to make sure that they don't go anywhere. - Alternatively, determine the average cost of rent and multiply by 50 for the low end, 60 for the high end. - Budget for all new equipment. Don't buy new equipment, but equipment will fail, and a busted computer will cost you hundreds of dollars in wages/lost productivity a day. - Budget for may two the three times the estimated length of the project. It shouldn't take that long, but... - I sincerely believe that your goal should be to not fail, success is easy once you protect yourself against failure. **A Note about Angular** - If you go Angular, then you'll be stuck with when Angular 2 comes around, and you may have trouble finding Angular 1 devs years from now. - Perhaps going with a more modular architecture will be better.
HTTPS and [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives) are also at your disposal.
I'm not sure what events you have access to under the extension APIs (or indeed how google music loads/changes content on the page). I imagine you'll want your code to run on page load, and whenever the URL changes, right? In which case the [load](https://developer.mozilla.org/en-US/docs/Web/Events/load), [popstate](https://developer.mozilla.org/en-US/docs/Web/Events/popstate) and [hashchange](https://developer.mozilla.org/en-US/docs/Web/Events/hashchange) events might be enough to get you started. Something like this: jQuery(window).on("load hashchange popstate", function () { /* Do stuff */ });
that always happened whenever io.js changed semver major (it's v8 breaking changes and libraries take 2-3 days to update properly) - io.js v3.3 is actually the version I'd recommend using until everyone gets up to date with the new v8 in 4.0 (node 4.0 is io.js 4.0 and successor to io.js v3.3 - it's not even the related to node v0.12)
It's very common policy in larger companies. All web traffic is routed through a proxy server (often a 3rd party product), and all sorts of stuff is blocked for all sorts of reasons (ranging from "security" to "productivity" via "controlling the herd" and "stop using all of our bandwidth for Spotify and Youtube!"). Common targets include the likes of facebook, twitter and youtube, but all kinds of things get blocked including massively wide-ranging categories like "content delivery network". End users (including web developers) get very little control over it. The categorisation is usually done by humans, so mistakes are made continually - such as including anything with a comment form or embedded twitter feed in the "social media" category (really).
Ironically, the jump from 0.12 to 4 is due to the switch to semantic versioning in io.js, to make it easier to reason about versioning. Should be a lot more intuitive from now on.
Someone needs to show you guys vim or emacs
I was getting an error with my sqlite3 of which I was like ok no problem. Next I reinstalled the previous version of node (after uninstalling the new version) and got the same error so I uninstalled and reinstalled sqlite3 which resolved the problem. Before I could test any further my internet stopped working and no amount of troubleshooting would resolve the issue so rebooted my computer. Before it restarted I got '=( Something went wrong while restarting issue' or something to that effect. Then my computer wouldn't come back up so I had to hard shut it down and then turn it back on again. At the point I figured I would just stay with the current version of node for a bit. I don't know if the node install messed with my computer to make me have the network issues but it had already wasted an hour of my time and I had stuff to do.
Eh, no harmony modules. Why, [V8](https://code.google.com/p/v8/issues/detail?id=1569#c29), WHY?!
So 'minification' basically just compresses all of the whitespace in the file into a big chunk of text (delimited by semicolons), right? So it's still totally readable, just a big PITA. (This is how Bootstrap JS files are sent, if I'm not mistaken...)
No. What you need to do is *wait* for the async operation to complete before you start using `foo.bar`. Lookup promises: https://www.promisejs.org/
clear as mud
yea, but it might be a good case for jscrush and a lot of other minifiers convert variable names from like 'somethingMeaningful' to 'a' and the same for funcs, the output makes zero sense :) 
Still no dice. :/
👍 with zero sense!
Unfortunately installed and had to immediately revert because node sass wasn't working last night. Hopefully soon it will be resolved
not quite. I have this code, I can see the buttons being created while it is doing the click, but when completed they don't exist. : function setSeats(seats){ //alerts the information in the section alert(seatDictionary[seats.id][0]); for (var i=0; i &lt;seatDictionary[seats.id].length ; i++){ var r = $('&lt;input/&gt;', { type: "button", id: "field", value: "I'm a button" }); $(".sections").append(r); } }; //This function removes the svg elements from the div // and changes the div to the seat layout $('.sections').click(function() { $('#stadiumDiv').toggleClass('stadium seats', 10); $('.sections').attr('visibility', 'hidden'); $('.backToStadium').attr('visibility', 'show'); setSeats(event.target); }); EDIT: code fix
Why not leverage well-known terms for your API like .on instead if .add?
&gt; I had a look at what babel actually supports and there are some problems going all in with ES6 that make it problematic to rely on babel for frontend code, most troublesome are proxies which cannot be supported: https://babeljs.io/docs/learn-es2015/ 
Think I'm gonna need to see the related html and css to make sense of what's going on... Of if you tell me precisely what you want the program to do, then I can code it for you... 
Pretty much everything goes on github nowadays.
This is a difference between a signal and an event emitter. An event is emitted on-something. e.g. `.on('started', callback)` vs `.started.add(callback)`. You can see more information on signals vs. event emitters here: https://github.com/millermedeiros/js-signals/wiki/Comparison-between-different-Observer-Pattern-implementations A key point though is because a signal is already one event there is no need to look up a set of listeners by event name like you would do with an event emitter.
I am using the toggleClass to change the CSS background from a football stadium to a seating image. when I click the svg elements on the stadium I am wanting to take an hashmap of data and create the appropriate number of seats. I was trying to create the seats with javascript buttons but when the click to change the background finishes the buttons are removed.
I'll probably do that after I fix the API. It could use a detailed write-up on the strategy. While the linked list may not be necessary the main issue I found with other libraries was the need to copy and/or slice the `arguments`causing v8 de-optimizations. There are safe ways to use the `arguments` object in v8: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#what-is-safe-arguments-usage
Rational?... Let's see, Reddit is okay, Facebook too, Youtube as well. Framework7 is "Shopping" or "Entertainment" or some shit like that. Stack Exchange (but not Stack Overflow) static asset server is as well, so I can't get CSS on Stack Exchange sites without "this action being logged". And, for some reason, NodeJS is Spyware, so it's outright blocked, no way to even reach it (the first page ever that I got that result). I have no idea what the logic is. The only thing that makes any remote sense to me is that it is using machine learning and classification, but horribly miscalibrated and overfitted. But I might be wrong, given that the error page that informed me that NodeJS is the most dangerous thing I ever surfed to also gave me the link to the page where I can apply for reevaluation of a site, so... Yeah. (I did submit that, if you are wondering.)
One thing I notice is you have id: "field" which I presume gives all of the seat buttons the same id. This could be a problem.
Does this mean that we still have a mid-life crisis phase coming at some point in the future? Yipee!!
http://tddbin.com/ ??
You have my sympathies. Seriously; I don't think I could tolerate that.
I can't seem to figure out how to just simply upload a file on github.
That's a great explanation, thank you.
When you talk about the window.load event do you mean the javascript onload? or are the "ready" and "load" events jquery?
Yep, thanks. Finally figured it out. :D It wouldn't allow me to get past a specific spot until I put either a readme or license file up.
I still don't get it :/
I was just thinking about JS needing some more feature-rich data structure library. Too bad it's not available yet. EDIT: Thanks for the link. I think it would be better if it were linked in the title instead of the video.
Thoughts? http://codepen.io/ForScale/pen/xwGoLQ
I think this is really cool. I wish I was smarter at events/signals. I also second the vote for writing out explanations for the design. This is really neat stuff.
On the right track, going to have a look at that site..some good stuff there! haha thanks!
After further investigation, gulp is still very much a thing. webpack is more on par with browserify, than gulp. https://webpack.github.io/docs/usage-with-gulp.html The link above will provide you with more information on setting up webpack for use with gulp. And the comments even mention further that webpack is not a replacement.
yeah, it was I changed the code. Also the solution was to change the svg stadiumWhole to display none... I didn't show you guys where the error was to fix it. :(
Don't worry, you aren't alone.
If you have just a single file you might want to look at "gist" from github: https://gist.github.com/
To do that, just take what I originally linked and removed the background images and add news content.
Amazing work! Can't wait to try this out..
Me too. Having things in a global registry sounds really bad.
Thank you!!
Also seems like he made most of the work in this project, impressive.
the syntax is very similar to Mongoose or mine [Moonridge](https://github.com/capaj/Moonridge). Good to see engineers at Google doing the same things.
I strongly recommend against having any specific types of parameters on object constructors. Instead, I recommend that every object constructor just takes a single object that contains named properties to set on the new instance. Then your constructor might look like this: function (properties) { for (var key in properties) this[key] = properties[key]; this.globalEvents = this.globalEvents || {}; } If you are using a language with an existential assignment then this is more concise: this.globalEvents ?= {} 
I meant actual effort. Do you see his example of the select with SQL and then in Lovefield? A lot more stuff to type.
Working great!
They are basically values that are completely unique on a global scale. No two symbols in your entire application will ever be the same value.
You can still access older api docs from the website and from github. https://nodejs.org/docs/v0.12.7/api/ https://github.com/nodejs/node/tree/v0.12.7-release/doc/api
&gt; Alternatively, determine the average cost of rent and multiply by 50 for the low end That's a pretty low wage for Cal 
Why would I use that? And what's that part about fiddling with internal js variables? Changing the language level behavior of regexs like he did seems like a super bad idea. 
The original motivation was to add private properties to JavaScript classes in a sort-of backwards compatible manner. Like you could do this: const privateKey = new Symbol(); class myClass { constructor() { this[privateKey] = 0; } incr() { this[privateKey]++; } print() { console.log( this[privateKey] ); } } export default myClass; //other file import myClass from './myClass.js'; const privateKey = new Symbol(); let x = new myClass(); x.incr(); console.log( x[privateKey] ); //undefined x.print(); //1 There are also plenty of 'built-in' functions that can only be accessed by special symbols now. Like `@@iterator`, which is accessed via `someArray[Symbol.iterator]` See [Here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols) for a full list of those. But yeah, they are fairly pointless most of the time. It's just another tool that might be useful in some situations, but you shouldn't try to force using them in your code. EDIT: To clarify, they were originally going to have a `private` keyword for classes, that used the above method internally to represent the private values, but it was downgraded into what it is now.
Just amazing! We at https://www.zunzun.se are gladly suprised with the amount of people not using module bundlers..... 
So there is Websql, which they abandoned in favour of recreating a relations database on top of a document database. What's the logic here?
I'm not sure why you're arguing this. If you read further down, the final form of the eval accepts a scope object which could or could not be a native eval which is how the author intends for it to work.
Scope holds variables. How can you pass eval if he overwrote eval?
I don't get it. &gt; the idea is that the only way for this to be able to run is if there is an exception thrown in the task that is run, otherwise nothing can stop the loop from completing synchronously and clearing the timeout. This presumes that the loop *always* completes before the timeout hits - unless it is stopped by an exception. But how can you make assumptions about how long the loop will run? There is information missing, as stated I see no way that anyone can safely assume that the timeout will be cleared before it hits even if no exception occurs. I can't make assumptions about how long unknown code will take to run. 
You’re missing the point of importing another linter config.
Nice
Ah yes, true. I forgot the context of the problem, I was wondering "what does this have to do with process.nextTick"... EDIT: So clearTimeout would prevent the function to be run even if it was scheduled? I don't know how the scheduling works. I know it won't *run*, but I thought `setTimeout` will place the function in the event queue anyway (at its end, unlike `process.nextTick`) - it just won't run because the process didn't yield to the event queue yet? So `clearTimeout` removes an already placed function from the queue? Or has it really not yet been added? How exactly `setTimeout` works on the C++ level isn't something I ever thought asking. [It seems I'm not the only one...](http://stackoverflow.com/questions/739847/how-is-settimeout-implemented-in-the-javascript-interpreters-or-timers-in-genera) (the comment under the accepted answer is right, the link does not actually answer it) 
Why? This is quite an obtuse example of function composition when the native way of handling it is simpler to read and doesn't require knowledge of a third-party API. `promptThenAlert = function(p) { alert(prompt(p)); };`
do you know
Who names their child Sql?
Btw. try click all kings in a row ;)
Hardly obtuse, this is how most functional programmers expect composition to be handled.
Not an answer to your question, but an answer to your problem: Try attaching an event handler to a common ancestor, and using that as a delegate to handle specific events that have bubbled up from its descendants. Example (WARNING. Uses jQuery. Consume at your own risk): Say there's a div: &lt;div class="container"&gt; &lt;span class="button"&gt;Button #1&lt;/span&gt; ... &lt;/div&gt; Where there are a whole bunch of dynamically created `.button`s. This jQuery snippet: $('.container').on('click', '.button', function(event) { ... }); Would latch onto `.container`, but would be responsible for handling any events that bubbled up to `.container` whose `event.target || event.srcElement` matched the selector `.button`. That way you'd only have to apply the listener once, and you wouldn't get any double-fires. &amp;nbsp; Whatever library you're using probably has similar functionality, or you could write something in vanilla JS, of course.
[Here's a much better explanation than I can give.](https://youtu.be/m3svKOdZijA?t=605) Reason being that you can program in a more declarative, functional manner, as that's what I'm reading between the lines the purpose of the article. Examples from the talk var last = function( xs ){ var sx = reverse( cx ); return first( sx ); } var last = compose( first, reverse ); last( [1,2,3] ) // 3 The second example you can swap first and reverse very easily, whereas the first example, you have order of evaluation so you must change your code accordingly. Another example, with partial application var wordCount = function( str ){ var words = split( ' ', str ); return length( words ); } var wordCount = compose( length, split( ' ' ) ); wordCount( "There are seven words in this sentence" ) // 7 Final example var createComment = function( html ){ return Comment.create( replace( '&amp;quote;', '"', html ) ); } createComment = compose( Comment.create, replace( '&amp;quote;', '"' ) ); This example unnests the functions because it will call replace first, then Comment.create using the output. In my own work I've found this to be invaluable. Imagine the following scenario where you have paths, shapes, and geometries which need to be wrangled. Trivially, it looks like: function createGeometry( parcels, extrusionSettings, offsetSettings ){ return shapeToExtrusion( extrusionSettings, offsetShape( offsetSettings, mergeShape( parcelsToShape( parcels ) ) ) ); } What's wrong with this? It's a lot of nested functions. On top of that, I need to know every setting before I can generate this function. From a readability point of view, it sucks too because I need to read from the inside out using parens, (first look for parcels, then who wraps that, then who wraps that.. etc). With composition it looks like: const createGeometry = compose( shapeToExtrusion( extrusionSettings ), offsetShape( offsetSettings), mergeShape, parcelsToShape ); Here the data flows upwards from the bottom, and I give compose a bunch of partially applied functions with the settings baked in. This is much easier to re-shuffle the order, for example if I wanted to have a totally new type of geometry by omitting mergeShape, I just do: const createGeometry = compose( shapeToExtrusion( extrusionSettings ), offsetShape( offsetSettings), parcelsToShape ); And I'm done, I don't need to write a new function, I just compose what I need together. Still though, your point stands that it requires a third party API. I think in some cases the benefit of programming more declaratively outweighs the negatives of that, and it only makes me wish currying and compose were built into the JS spec.
nw.js starts with around 130 MB which is big. Consider it too
I should have clarified. This is how most functional programmers expect it to be done in Javascript and Haskell.
It is bad for a couple of reasons: * It forces a binding between some markup code and some JavaScript thereby disallowing swapping out the JavaScript without also changing the markup. This is a maintenance headache and increases risks of bugs in production. * Barrier to extension. A very common thing is to supply additional features to an existing application, but this convention can make extending the app more complicated and costly. * Performance bottleneck. Instead of just parsing markup code the browser has to intermittently parse JavaScript, which can slow things down. This is frequently referred to as blocking. The preferred approach is to use the addEventListener method to bind events to DOM elements. This approach has the benefit of allowing multiple event handlers to be associated with a single event without collision. It is very clean and completely dynamic without interference to the markup's structure or changes upon the given DOM node. This approach can be problematic in some single page applications in that the event handler is not necessarily unset or garbage collected just because the element is no longer available. The events will continue to remain active and available so long as a reference to the event or node remains available. This can cause memory leaks and bog down applications that require frequent user interaction or that wildly rebuild the dynamic markup structure. I am old school so I prefer to set events upon the DOM node directly, but dynamically. Example: myElement.onclick = myHandler; The biggest problem with this approach is that only one event handler can be assigned to any given event. With proper code management, though, this isn't really a problem. Properly managing your code and interactions is something you should be doing anyways. This approach is far less likely to be problematic compared to the addEventListener approach in complex applications. Because my preferred *old* approach forces management of events, such as grouping various event handlers into a single higher function so that multiple event handlers can be assigned to a single event, it is easier to see what is happening in the code directly. Extending the application is easier, because you know what the code is doing and where all the pieces are, and adding new features is faster and cheaper.
Anyone here use Brackets? I started taking an online JS course and the instructor uses it.
because the loop is synchronous, JavaScript does not have any sort of preemptive multitasking so timeouts and other things (aka the event loop) will only happen when everything else has finished. In other words, if I do setTimeout(something, 10), if my script runs for 2ms and then is done then in ~8ms the browser will run the timeout, but if my script runs for 20ms, the browser doesn't interrupt it to run the timeout, it wait until it is done. (there is technically a 3rd way things could happen and that is if the loop takes WAY too long the browser will have a popup about a slow script allowing the user to forcefully exit it, I believe that should have the same result as an exception being thrown).
Are you talking about selection of text? Something like this [jsFiddle](http://jsfiddle.net/UFkjy/)? (That's not my jsFiddle, just an example I found that sounds like what you're asking.)
i got a seg fault too when trying to run gulp.. back to v0.12.7 for me
First I am mostly trying to optimize the dispatch method, I am assuming this happens more often. Other methods should be fast but not at the expense of `dispatch`. Second, the listeners are ordered (first in, first out) so a hash won't work. Last, when I switch to the API listed in the github issue (returning the binding node `handle = signal.add(cb)`) `handle.detach();` is O(1). I guess I should have released this feature as a 0.0.3 then asked for feedback. I was trying to decide between these two patterns: ``` handle = signal.add(cb); handle.detach(); ``` and ``` handleDetach = signal.add(cb); handleDetach(); ``` The second is how it is done in angular `$scope.$on`. Thank you for the decision. This is helpful.
I'd add that there are different use cases, and there can be way more attaching/detaching than event firing. Especially in interfaces, where you often have to create, and then at some moment destroy, a lot of interactive elements at once, but user will interact (and have relevant event fired) only with few of them, and one at a time.
How is this better than using LiveReload in say a grunt/gulp script? Out of curiosity.
I switched to a linked list to allow listeners added with `.once` to be O(1) when they detached. I found that if I changed the detach methodology it could also be O(1). So now, on the master branch, `add`,`detach`, and `dispatch` are all O(1). I don't know if that is true for any other event library in JavaScript.
This is interesting. I'm curious if this technique is used in other large database repos (like app stores, linux, gems, etc.)
You would need to keep a transaction log for syncing and batch update to the server at appropriate intervals. What those intervals are (amount of change or just regular timeouts) is going to be particular to your site and may even be affected by detected connection speeds. You shouldn't need to download an entire database, just the data required for the task at hand. Optimising the space by monitoring what can be discarded (cache cleansing) is also beneficial. 
Lovefield is a Javascript library. WebSQL is a browser API with support so limited that it's useless.
Just imagine the Reddit manchildren snickering at those top luls. "HAHA I read that as CHEESE WHIZZ lol!!!" That's why they're not downvoted. But as of this comment we've won the battle and it's sitting at -2. Well done, team.
&gt; valid point No one cares you can't read
Honestly? I don't think they make such a masters, but if they did, I'm sure it wouldn't be worth what you'd pay for it. Web development isn't really a masters subject, it's pretty easy to pick up with internet resources and/or books. You learn best by choosing an idea and attempting to implement it. If you insist on purchasing online education, do yourself a favor and get a [nanodegree from Udacity] (https://www.udacity.com/nanodegree). Also, check out [Coursera] (http://www.coursera.com). You're not going to break the bank with either of these, and you may get a half decent education in software development.
This is when someone needs to bring up the fact that it's an educational blog post that concludes: &gt;implementing a programming language—no matter how small or strange—is a great way to learn about the language you implement it in Not sure what you're demonstrating, either. Composition for the sake of composition is just indirection.
Your probably right. I just feel like most Info Tech degrees are just very broad. I know guys that are making 120k+ being web developers, so I don't see why not make it a degree of some sort. You basically in the same salary range as a Dr.
Historically, most programs work mostly offline. You pretty much download it and never update it again. Sometimes you'd have things like games where most of the assets are still local but there's a network connection. At a certain point, we actually ended up basically entirely merging where the server renders in real time rather than sending some data to the client where it renders. Now we're going even further: we ship an entire client on page load which communicates relatively minimally with the server.
i like jquery a lot it depends on the point for clientside vs server side. usually i want to save CPU cycles for the server so i do stuff on the client side. but theres still valid reasons for doing stuff on the server side.
This would do it. ~~Although, you still need to convert the bounds to pixels.~~ And it doesn't detect if you have a document open. Edited to convert to pixels for you. You may already get pixels, since it's based on your preference setting, but this will change to pixel and back in case people have it set to inches (the default). Also keep in mind that this is always four points, even if the selection is not a rectangle. var startRulerUnits = app.preferences.rulerUnits app.preferences.rulerUnits = Units.PIXELS try { alert(app.activeDocument.selection.bounds); } catch (e) { alert('Please make a selection before running the script.'); } app.preferences.rulerUnits = startRulerUnits
Holy... I just wish i never have to deal with this. But thanks for the article, at least i know where to turn to if i ever need to. 
Yeah, it's totally fucked...the tldr version for regex's is use [regenerate](https://github.com/mathiasbynens/regenerate)
Like stock sublime? Because that's really not very good looking.
I think one reason that these degrees are broad is that these technologies don't stick around forever. If you can learn technologies that are being used in industry though completing a degree, that's great. However at the end of the day you still need a good breadth of knowledge so that you can learn new and upcoming technologies by yourself. Even though IT degrees are quite broad, having some knowledge of networks, data structures and some alright math skills will only increase your web dev abilities. 
Here's an article written by the guy that implemented symbols for Firefox: https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/
Atom is so beautiful stock. 
IMO it looks better than stock Sublime and already looks a hell of a lot like sublime. I hate to be that guy but, why not just use Sublime?
Hmm, maybe my celebration was a little premature. It appears to work exactly the way I need it the first time, but once "#reviews" is in the URL, doing it again seems to have no effect :(.
I did look at this as a solution as well, but found that the anchor link was much more reliable with the way this is setup. The page this is being used on is a template for products in a store, so the position of the #reviews anchor link varies based on how much content there is for the product. Also, the length of the reviews themselves vary, and the "Next/Previous" buttons are at the bottom of the reviews. It just seemed really messy to go that route compared to this. Edit: ah, premature response again there haha. bed time for me I think :P. The bit about scrolling to a specific element is interesting for sure, and would solve the problem I just described. I will look into that for sure. Thanks!
Racist! You don't want Russians to program in Russian?
....... I really need this
Tom Scott has a pretty entertaining video about running into this; I'm surprised it wasn't already posted here https://youtu.be/GsyhGHUEt-k
I still believe there should be a String attribute that returns the number of codepoints in a string. It's true there are caveats, but it would be useful. Right now you need to work around it (from the article): function countSymbols(string) { return [...string].length; } 
You need to push a tag: git tag v1.0.0 git push --tags
Short answer, yes. But there's not really a consensus, although the observer pattern is definitely popular in JavaScript, there's event emitters, pub/sub, callbacks, generators, co routines, signals, doors, and the pure function approach. Depending on how their put together you could use an observer pattern, although I prefer a more functional approach and try to distance myself from an object oriented / observer style although I'm not really sure that's possible. It's usually a mess and turns into something that's sort of like an observer pattern... I think the JavaScript community is still experimenting with it I can't count how many different implementations I've come across
Do you know any of good simple library which allows to use this pattern? I have readen Signals documentation but I dont like their approach. I prefer something really simple like event.fire( 'someeevent' , { some:'data' } ); event.listen( 'someevent' , function( data ) {} ) Of course I know that writing my implementation of this pattern can be done under 10 minutes, but I would want to search on github for existing projects that use this feature to understand a bit of structuring apps using this design pattern :)
💩 = a new concise way of saying "i don't give two shits!"
Also, pretty nice way to call constructor without new: function __constructor() { // code } // prototypes .... function constructor() { return new __constructor() } var something = constructor(); // something is now instance of __constructor. Hooray!
At first it seems strange. As soon as you master it... fuck everything else.
multibyte string. probs a unicode string length function somewhere.
&gt; It's true there are caveats There's the caveat that some people think it might be useful even though it's not any use whatsoever. Counting codepoints is a good way to break stuff and not much else: it's useless to know how much space text will take on screen (variable width *and* combining codepoints), it's useless to know how many "user characters" a string contains (combining codepoints, precombined ligatures) and it's useless to know how much space text will take on the wire (few people use UTF-32 these days, the most popular encoding by far has a variable width of 1~4 bytes/codepoint). The only situation in which it is useful is if you need to implement proper unicode handling because the language doesn't provide it, and as the article itself points out `countSymbols` does not come even remotely close: a proper version needs to implement [UAX#29 Unicode Text Segmentation section 3 Grapheme Cluster Boundaries](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).
Rational? Where did you get that idea? I clearly wrote that the categorisation is done by humans! ;-)
Offtopic: I only see a box with the unicode value in it (01F 4A9). What does it need to see the real character? I'm on Linux.
[Unicode Character 'PILE OF POO' (U+1F4A9)](http://www.fileformat.info/info/unicode/char/1f4a9/index.htm). You need some bigger and better fonts on your system :)
 I prefer the opposite of what `new.target` is trying to achieve. function Beep(boop) { if (!(this instance of Beep)) return new Beep(boop) // now it works with and without 'new' }
Thank you. sudo apt-get install ttf-ancient-fonts did the trick.
What browser do you use to not see unicode? Nothing to do with Linux, I see it just fine, even in the terminal.
Thank you avenp, this is good idea. I'll move it to head shortly
This technique is not new, although for this specific application in the Node-space, it is novel. Project Honeypot [uses a DNS to propagate its lookup API](https://www.projecthoneypot.org/httpbl_api.php). You request a resolution for the IP address you want to check, and their service returns a specific IP address that corresponds to a threat level. Very speedy and very effective, if a little weird (since I "grew up" consuming REST APIs)
I don't see a way communicating between two devices with WebRTC and being offline.
&gt; For example, Twitter needs this in order to count how many characters you're using. Twitter does not *need* this, they just decided that their "character count" would be an NFC codepoint count. Which as noted above is completely arbitrary and, in the end, nonsensical: Unicode 8's alternate skin tone emoji are all going to eat two "characters" when a basic skin tone only eats one, even though they're all one user-visible characters. Likewise the extended flags feature which uses regional indicator pairs when the 10 flags of the "basic set" use a single codepoint each. And then, there's [ZWJ sequences for multi-person groupings](http://www.unicode.org/reports/tr51/index.html#ZWJ_Display) (which can be combined with skin tone modifiers for extra fun) &gt; But some basic knowledge of what constitutes one character is better than no support at all. No, it's not. Enough knowledge to be dangerous is just that: dangerous.
I do, it's clearly better in every way. I still test out the competition regularly to see what gimmicks they come up with to try to wrestle Sublime out of the spotlight, then if they're anything I care about, find the Sublime plugin from 2 years ago that already does it better. But in the mean time, if I have to pop in there and look at hideous "let's obscure information for he sake of looking like Metro" Atom, then I'd prefer to give it the Sublime/Chromium makeover and have defined characteristics and actual style. #RealTabsHaveCurves
Thank you for answering my question.
&gt; I think in some cases the benefit of programming more declaratively outweighs the negatives of that, and it only makes me wish currying and compose were built into the JS spec. I actually hoped for something like this in ES6, instead of classes, promises and other imperative stuff. I find JS much more fun and manageable to program in when doing it in a declarative, functional style. It's also much easier to test than the infinite state machines you end with when doing imperative pogramming. But hey, with the new ```const``` combined with a recursive ```Object.freeze```, we can at least have immutability in JS now.
Unfortunately preview tabs is no more: * http://github.com/ahuth/preview-tabs/issues/22
I think this allows for that, they are throwing in the if but maybe you could do other wise. 
Guarding against every possible kind of mistake is a waste of time and it clutters up your code with useless garbage. Just use a linter. By the way, you can't instantiate classes without `new` anyways. You get a TypeError if you try that. **Edit:** You also get a TypeError in strict mode if you omit `new`when you call a constructor function which writes to a field of `this` (this.foo = foo etc).
holy crap, you're awesome! thank you so much!
Unicode is a backdoor vulnerability. There are characters that modify the behavior of neighboring characters. You can't possibly test the infinite variation in Unicode and how it will affect your program.
So simple, you just drop it in and you're done. Maybe the next step could be watching for all the files index.html references, so you don't even have to specify a file list (unless you need to update given changes in the local server). /u/changetip $2
*Javin007* received a tip for 8,130 bits ($2.00). -- [^^what ^^is ^^ChangeTip?](https://www.reddit.com/r/changetip/wiki/tipping-on-reddit)
As someone who had to integrate Chinese code, no.
Just because your language doesn't need that doesn't mean that no languages need it.
Agreed, languages and tools that exist in a walled-in garden of safety and honesty don't need to think about security.
is there a way to get the height and width measurements? like "5 in. x 10 in."?
https://nodejs.org/api/events.html there are something like 200 variants on this pattern on npm. event emitters etc are the bread and butter of any JS dev, you don't need to draw down the 500lb gorilla of RxJS to use this pattern...:/
this is a bit of a red herring. I love FRP, but the OP is just looking for EventEmitter
I'm trying to duplicate this weird behavior in Iceweasel. Do you have an example of it in action?
There's also a [Lisp that becomes JavaScript](https://github.com/clojure/clojurescript).
[This gist]( https://gist.github.com/calvinmetcalf/f29eae737d52ae8fd54a) you need to make sure pop-ups aren't blocked and the pop-up isn't already open 
Interesting. I will admit I only briefly looked at the spec. It's also interesting that the W3 HTML5 validator will throw errors if it sees &lt;style&gt; tags in the body without the scoped attribute and yet Chrome as removed it. Do you happen to know why it was removed?
[Radium](https://github.com/FormidableLabs/radium) is currently my favorite library for this sort of thing. [Anyway, you can find a good argument in favor of inline styles here.](https://www.youtube.com/watch?v=ERB1TJBn32c) Put any preconceived notions aside. If you are using a proper CSS architecture like BEM, then inline styles or CSS modules are the logical conclusion.
I think I will go your way. I have went through documentation quickly (as I was in work); it was more like gliding my eyes through github page than actuall careful reading; anyway I have no idea how should I use RxJS and what is going on there. Perhaps thats because I am still inexperienced in modern JS programming, so I will go easier way now and go back to RxJS after I'll make some decent progress in learning :) Thank you!
What are you talking about? UTF-32, UTF-16, and UTF-8 are binary representations of Unicode. All strings in JavaScript are UTF-16 internally, which is why `length` on that emoji returns 2: It's a surrogate pair. If it were UTF-32 the length would be 1 as all Unicode code points are represented as a single code unit by UTF-32.
But it's the string operations that make the issues. The example stated, the majority of perfectly sane regexes end up breaking when introduced with pairs, which in turn could break a system.
After they JOIN ed
&gt; With your favorite language &gt; Brainfuck ... Looks cool! Great work. Any plans for JavaScript? (Preferably with Babel stage 0 support.)
&gt; apply for reevaluation of a site, so... Yeah. (I did submit that, if you are wondering.)
Nice! For a moment, I thought it was going to do the solitaire winning animation, but easter eggs are always fun.
Thought they had a civil UNION...
Yet another layer of complexity that doesn't make any sense. but if you type it in the unicode character on your keyboard (U1f4a9), it outputs 2 (??)
They had me until [slide 23](http://www.remojansen.com/talks/data/slide.html?slide=introducing_typescript#/slide23). &gt; TypeScript goes beyond ES6 &amp; ES7 &gt; &gt; TypeScript introduces some great features that are not available in ES6 or ES7! IE has repeatedly "introduced some great features that aren't available" in other browsers. Those almost never went over well and fucked a generation of web developers. Microsoft, learn your lesson already: You don't invent things; you dumb existing things down for the masses. Much in the same way Apple marks up price tags of existing things they decide to release years later.
It depends on what you want to "work". But as far as generic, informational websites go, of course they can be made without JavaScript.
Unicode is such a pain. I've been coding for a long time and until recently, haven't had to deal with emoji characters, but when I did, it was quite the eye opener. I see comments on this thread stating the importance of knowing the language you use goes about encoding strings, but it doesn't end there. You also need to look at your persistence layers and any tools that may interact with the string data. MySQL was pretty surprising, it doesn't support "full" UTF-8 in it's "utf8" character set. You actually need the "utf8mb4" character set. On all fields, in all tables, and at the database level. Oh, and you have to ensure that client connections are using the same character set, otherwise you can't fetch the emoji. Oh yeah, and if you want to use mysqldump, you have to specify the character set. Many tools I use don't support emoji natively, so doing routine stuff like executing sql statements on a remote machine means having to ensure all my encodings are correct so I can "WHERE username = 'Bob💩'", because that is actually useful at time. Overall, I'm glad we took time to get emoji working correctly. I think it took me probably two full work-days when it was all said and done, but it's cool to see people using emoji in our app.
Have you seen [cycle.js](http://cycle.js.org/)? I'm just getting into functional programming and I have a feeling that these guys are heading the way React should have been.
PROBLEM? HELL NO. Get this over to /r/shittyprogramming immediately so we can use this. I'm putting the 💩 everywhere now.
I played with it a couple months ago, it was really great. I think people should try it, the result is not at all like the janky JS-frankenstein apps people have been writing with goofy frameworks like Cordova. One of the nice things about the toolchain is it tries to keep you out of XCode as much as possible. (Unless you want to use XCode, but why would you want that)
Like... the responsiveness won't work? It won't look right on mobile devices? If that's what you mean, css has great ways to handle mobile responsiveness. @media, flex, even Bootstrap. Hell, you can get away with just using % units, really. I apologize if that's not what you were asking...
&gt; User needs to press refresh to see updates &lt;meta http-equiv="refresh" content="5"&gt; FTW!
I use Loopback a lot at work and to be honest am quite excited. Their framework is very wide but in many places very shallow and their documentation is terrible. If the acquisition is followed by cash and people injection, this may be great. Interesting that express.js is now owned by IBM though.
does firefox actually interrupt the performance of the application or does it just throw errors and that is annoying?
Nobody cares what Russians do or want.
I'd be much more excited about this if React Native didn't still require development to be done in OS X. I know that's more on Apple than Facebook, but as a Windows/Linux user it would be nice to be able to write iOS apps without having to make a massive financial investment first.
[Ecmascript 5.1 spec](http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.5.1) says characters. So does [W3Schools](http://www.w3schools.com/jsref/jsref_length_string.asp). So obviously there is some confusion. EDIT: For anyone that still cares, the Ecmascript 5.1 spec does indicate that each element in a string is a 16-bit value, so while the spec's use of the word "characters" seems to be a poor word choice, it does seem that string.length should indicate the number of 16 bit values contained therein. 
Since you are using Optimizely I am assuming this is related to an A/B or MVT test or atleast injected from an experiment switch. I really detest JQuery personally, but I am speaking not so much from my bias as I am from actual experience. I was the test engineer for Travelocity for more than a year and JQuery almost always introduced bias into the experiments. I know everybody in the cult of JQuery will tell you that the speed differences are irrelevant and unnoticeable, but our testing proved otherwise from the conversion data. Experiments using JQuery converted lower and failed more frequently compared to tests run later with vanilla JS. I recommend just writing your code with vanilla JS. Everything can be cached as its built and you don't need any methods of any kind except to create new elements, set attributes, and append elements. You also lose a lot of time to frequent repaints on the screen, so never append your new DOM artifacts to the document until you are finished building everything. You can build and append elements outside of the document for a massive speed increase that scales more efficiently as the length of your data iterations increase. 
&gt; By only assigning inline styles and not providing any classes you make it impracticable for users of your component to style them to their own liking You can simply accept props or something of that nature. See http://material-ui.com/. Reaching into CSS classes is essentially monkey patching global variables. It's brittle and breaks encapsulation. Even if you insist on using CSS, it's likely that CSS modules will become the de-facto standard, which creates randomized CSS classes. So you'll need to do some work regardless.
I guess the real question is why do you not want use JavaScript?
To get domain: location.origin To get name: document.getElementsByTagName("title")[0].innerHTML; To get favicon you can look for it in the HTML's meta tags, but it may not be there. If the favicon is only in the HTTP headers just open an AJAX request to the server for a resource that does not exist. You will get a 404 back but you will also get response headers that indicate the favicon (if specified). This will drastically corrupt the server's HTTP logging though by generating a bunch of 404s artificially.
By the way its JavaScript and not `Java Script`. JavaScript is just a common name for the primary subset of ECMAScript and is as related to Java as car is to carpet.
Would you say... you put that 💩 on \*?
Not following the ES6 and ES7 standards could be a bad idea but I believe TypeScript is not doing that. I think this is not like IE, everything in ES6 is respected by TypeScript (ES7 too but is too early to say...). Generics an interfaces are not in the plans of IE6 and IE7 right now but who knows what would happen in ES8? so maybe TypeScript is just trying to innovate. For example, TypeScript is creating a reflection API based on some conversations at ECMA about ES7 but there is not even an official proposal yet. The nice thing is that this is all at design-time, at run-time TypeScript adheres 100% with standards so the browsers are not affected by these features.
How i read the article, its not about eval at all. The author wanted to demonstrate the similarities between Lisp and JavaScript. Its all about lists, and how to treat them as data structures. As the author pointed you can have your entire code as a JSON file, kind of like you'd have a AST.
you could use the shorthand method $.post(..) and the .done() / .fail() methods to attach to the jqXHR object. http://api.jquery.com/jQuery.post/ if it doesn't need to be a post ajax call, you could use the $.getJSON(...) method, along with the done/fail approach. http://api.jquery.com/jQuery.getJSON/
I suppose that's a valid point...? At least, I didn't know that and think it's interesting that that's a requirement, but the amount of downvotes you've gotten seems to suggest it's not?
Just expressing an opinion really. I'm a developer and a PC gamer, so 99.9% of my time is spent in Linux/Windows. OS X is a requirement for React Native, unless I'm completely misreading the "requirements" section of the [documentation](http://facebook.github.io/react-native/docs/getting-started.html). I'd love to write iOS apps in my free time (I use an iPhone), but I don't have the money to spend on a piece of hardware that would essentially be a really expensive, rarely used dev box. As to the downvotes...your guess is as good as mine.
I'm curious as to the state of "hackintosh"es (or even just running OS X in a VM) is these days? I have to presume that would be sufficient to at least let someone like /u/musicmunky *try out* iOS development without having to go buy apple hardware first? Or do things just not work well enough in a virtualized/"hackintosh" environment to even start trying to do iOS dev and run the iOS emulator?
hmmm, I might give it a shot again if Yosemite makes the process easier. The last one I tried was with Mountain Lion and if you so much as sneezed around the computer it would break completely. VMs are a completely different animal - sometimes it works on the first try (had success with Snow Leopard usually), and sometimes it doesn't work at all (Mavericks for me). Thanks for the link!
Whats meant by "Time Traveling"?
&gt; IE has repeatedly "introduced some great features that aren't available" in other browsers. So have all browser vendors. Canvas is from Apple. WebGL is from Mozilla. XHR was from Microsoft. I don't really get what you're complaining about anyways. TS is a to-JS language. If it wouldn't add anything new, it wouldn't have a reason to exist. Having some other things to offer is the whole point.
what's your computer's spec? I can't get yosemite to run decently enough on mine. You got any advices for running it in a VM?
"Wonderful Day" !== "wonderful day"?
In some versions of IE the console object is undefined until you open up once. Therefore if you are attempt to perform a `console.log` you are calling a property of something undefined which causes an error and therefore kills your application.
Doesn't matter; codecademy wants the original string to be lowercase.
Yeah, it sometimes says stuff is wrong even when when in a regular .exe it would work fine.
yeah, i need an upgrade :p
I tried lowercase, and it gave me the same error
Fixed! I had to retype it for some reason, and it worked, even with the capitals.
Works for me http://i.imgur.com/PiEFhTp.png Edit: I see you got it to work :)
great blog, ties together cutting edge concepts nicely.
Because keeping your HTML separate from your CSS, separate from your Javascript is cleaner, easier and is a widely established best practice.
Interesting... I still can't get it to work on IE though... :( Oh well, I'll keep plugging away at it! Thanks for the help!
Yeah, can you see anything wrong with [this](http://imgur.com/1vs5ubb) though?
Do we need Typescript: no we don't. Stick to the standards and adopt Babel.
Yep, I can see it now
I mean yeah, this wouldn't be a problem if the web could be updated in a reasonable amount of time when, for example, we realize that `observe` needs to change in libraries to allow a future standard version with different behavior. But unfortunately this is not reality. In reality, sites get deployed, widely used, and never updated. No amount of advice will change this. It's not a software engineering problem. You'll need to convince millions of companies that they need to shell out fees to their web vendors on a regular basis for updates that don't "provide value", among hundreds of other things outside the realm of engineering.
Once Android support comes out, it's going to be a game changer for many small and mid-size web dev shops. Current prerequisites to developing a web app with accompanying mobile apps are knowledge of PHP/Python/Ruby/etc for the web backend, JavaScript for the client side stuff, Java for the Android app and Objective C/Swift for iOS. For many smaller shops, there simply aren't the resources/know-how to invest in mobile. This is soon being shrunk to be able to do almost everything in JavaScript, which is pretty damn cool. I don't think we're quite there yet (and I guess there are also some competing all-in-one solutions in JS and Java) but I think Node/React may ultimately gain the dominance for new web properties that jQuery enjoyed for years as the clear and obvious choice. 
Height and width of the selection? ~~That's what the bounds are (it's all four corners of the selection).~~ (This is actually wrong, it's the coords of the two corners. I'll add another comment with the calc'd w and h for you.) If you want inches instead, then use Units.INCHES. Unless you mean of the document itself, then that's: app.activeDocument.width app.activeDocument.width.value The first one gives you with the unit measurement (like "3 in") the second is just the value (like "3").
ziphion2 is asking about scripting in Photoshop. I just assumed using the javascript syntax since they posted to /r/javascript. You can read more and look at the docs on the [Adobe Dev Portal](http://www.adobe.com/devnet/photoshop/scripting.html)
&gt; The CSS-esque styling that Flexbox uses ... Please correct me if I am wrong, but isn't react's flexbox actual css (rather than "css-esque")?
The "ancient fonts" package includes Symbola, the font with the widest emoji coverage of all, including the new Unicode 8.0 emojis; the guy who made that font (George Douros) also made a bunch of fonts for reading ancient scripts.
More than that, you can't even fit more than 65536 glyphs into an SFNT-format file (like a TTF or OTF), so you can't cover all of Unicode with just one font, although you can get plenty of coverage with homographs (like the Latin, Greek, and Cyrillic capital A have different code points but the same glyph).
I had the same reaction when I first saw it as well. 2ality is, in general, a great resource for understanding JavaScript and best practices for JavaScript.
thank you!
thank you!
Goodbye StrongLoop :(
You don't need js for displaying content, but you do need js for most interactive behavior beyond basic form POSTs.
It's a [unicode](https://en.wikipedia.org/wiki/Unicode) character. Relatively recent addition.
[removed]
I actually wanted to do something like this. Can you give me a code example on how to pull it off? Unfortunately, I don't have the mental bandwidth to figure it out on my own.
This is exactly how it's done. [This](https://github.com/facebook/css-layout) is the code for React Native flexbox you're interested. Really cool stuff.
tonicdev.com/new is pretty sweet but i dont think it has the file system stuff. nitrous.io
for offline: SublimeText and Github's atom are two good, free editors.
https://c9.io/ not sure if it's the perfect sale for you BUT https://c9.io/ is what I was told is the standard equipment you should be familiar with.
I was going to try webstorm but then they got caught up in their pricing policies.... Even the least expensive seemed more than I wanted. :(
get the github student developer pack; it comes with $100 credit towards hosting with digitaloceean.
It's not ugly and his ternary statement does essentially the same thing in less characters. However, the point he is trying to get across is how simple it is to think and handle UI state in React. You update the state and conceptually your entire application will just re-render. Components don't need to explicitly tell each other what to change, how to change and hot to actually put it on screen. They just take in a new set of props and render UI elements or other components according to their own instructions. Of course re-rendering everything constantly would be a terrible idea in practice, so at least in browsers React will actually diff the end result with the current UI and apply the minimal set of mutations to get there. The developer doesn't have to worry about it and can use a way more simple mental model.
Sure it does, you just need to do it in the parent class (and pass the inheriting class back to the parent, unless there's some way to reference it I don't know of)
Just want to add you can run your own server offline as well seeing it is open source. https://cloud9-sdk.readme.io/docs/running-cloud9-desktop
Any recommended talks? I found [this one](https://www.youtube.com/watch?v=8aGhZQkoFbQ) helpful for understanding how asynchronous callbacks and the event loop works 
Bizarre, tried assert('💩'.length==='Bono') and got a pass
JSConf indeed has a lot of good videos, both mindblowing and inspiring from time to time. Also check out https://fronteers.nl/videos?lang=en with tens and tens of conference, meeting and lightning talks about front-end technologies and related subjects. Some personal favourites in that list: * [Real-time recompilation of running JavaScript by Peter van der Zee](https://fronteers.nl/congres/2013/sessions/real-time-recompilation) * [The biggest devils in the smallest details by Marcin Wichary](https://fronteers.nl/congres/2012/sessions/the-biggest-devils-in-the-smallest-details-marcin-wichary) (explains the process behind Google Doodles) * [Arnout Kazemier - Pushing the real-time web forward](https://fronteers.nl/congres/2014/sessions/arnout-kazemier-pushing-the-real-time-web-forward)
Great article! Mocha has really clean syntax when it comes to async testing (just return the promise). I didn't know about the chai as promised until now.., but it looks even cleaner. I did a [drop in syntax sugar library](https://github.com/tomastrajan/jasmine-async-sugar) which enables mocha async syntax (just return promise) for Jasmine 2.x / Angular 1.x
FYI, in lower left corner there is Q&amp;A forum where you can find all the solutions and explanations.
I recently watched last years talk from Mathias Bynens titled "Things I Didn't Know About CSS". Although it focuses on CSS, it is certainly relevant for JavaScript developers who do front-end stuff. https://www.youtube.com/watch?v=WjP7TEKB7Uo
&gt; My first hurdle was learning Flexbox, React Native’s way of doing UI layout I thought React Native has bindings to native components so that you can use Cocoa Touch components. Is it so? Or is React Native also using Web Views?
Have to admit, I do like this. I shall try it on a large project where my gulp build is slow, not sure if it will speed it up but I think it will simplify the process much more.
How to hack websites using only CSS... because IE7. Great.
:D Thanks! 
&gt; Interesting that express.js is now owned by IBM though. The trademark is.
just like that if you need maximum speed and the data is large you can do it the other way for a small speed boost, instead of pushing it onto the stack every function call. var bigarray = [......] function dostuff(){ for (i in bigarray) { ... } }
In short, focus on writing code that's easy to read/understand, the compiler handles this kind of stuff. 
http://jsperf.com/variable-creation-local-global Something like this you mean? Tests would appear to show local is faster.
Always prefer to use locals rather than globals because they make your code easier to read and understand. It is very difficult to track where and how globals are used. If you are worried about performance test it both ways. Never guess with performance.
Oh yeah. Got it. [Here's the solution](https://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-kolisar.pdf) Page 20 ff.
And enjoy run-time errors ?
They are soon announcing a more affordable approach to their licenses, so keep it on look-out. However, from experience PhpStorm will do everything WebStorm does and more.
Even though I haven't had a chance to use React yet (more of an Angular guy), I do appreciate the influence the framework has had on the JS community at large. Getting into Framework flame-wars is silly, lots of communities are doing awesome things - and the ideas/concepts can benefit everyone. 
Nice :) Interesting to see use-cases for these things starting to slowly crop up
Better than evil? 
Correct. But this means if I have this: function() { for (var i = 0; i &lt; 60000; i++) { for (var z = 0; z &lt; 2; z++) { //do shizzle } } } In that scenario, every time the function is called, 60K "z" variables will be created and retained until the function completes. If there's a particularly complex function, this could get nasty.
Just hit F12, everything shows up fine.
The var is not actually being created in your for loop; it's hoisted to the top of the function which contains the loop and created there (once), but only assigned a value when the loop runs. 
Ahhh, that makes more sense. So this: function() { for (var i = 0; i &lt; 60000; i++) { for (var z = 0; z &lt; 2; z++) { //do shizzle } } } Is functionally the *exact* same as this? function() { var i = 0; var z = 0; for (i = 0; i &lt; 60000; i++) { for (z = 0; z &lt; 2; z++) { //do shizzle } } } *Edit: Fixed var location.
Correct, and you'll sometimes see it written that way (e.g. by Crockford, as I recall). Edit: Er not quite, the vars would be declared inside the function. 
I don't see the point, other than confusing beginners trying to `view source`.
That looks awesome dude. Appreciate it 
What you're looking for is trying to make your functions as pure as possible. Meaning same input produces the same output. In your example the variable is assigned to a new value every time so it is "pure" but what if your function was appending or mutating the variable and another function was written that modified that same variable then your function couldn't be considered pure. Think arguments in, mutate then output. This makes your applications easier to understand. As the number of outside variables increases so does the mental overhead it takes to rationalize the state of your application. 
More like: function() { var i; var z; // i,z = undefined for (i = 0; i &lt; 60000; i++) { for (z = 0; z &lt; 2; z++) { //do shizzle } } }
The Doodles one was amazing. I feel so inspired to do stuff now.
Rendered DOM === HTML Source interpreted, Rendered as DOM, sometimes changed (via JS, e.g.)... Both are very different (especially in this case). Try it.
Any word on how to upgrade to 4.0 with homebrew on a Mac? Latest I can get with `brew upgrade` is 0.12.7_1
Ah, yes. I put them in the wrong spot. Would making them undefined be better than creating them as integers?
Thanks for all the great replies. This is an awesome community. I have made my decision based on the responses. Thanks again 
The point is that the source delivered by the server ("View Source" contents) seemingly *does not contain the JS*. The JS *is* there, but its obfuscated. F12 (Inspector Tools) shows the resulting code after it has been unobfuscated.
&gt;Apparently the JS machine DOES, however, "bubble up" all variable declarations in the function to the top, so it won't create multiple vars after all. This is called "variable hoisting" in JavaScript FYI. Also the `let` and `const` keywords introduced in ES2015 are block-scoped, so they would work the way you're used to (although `const` is single-assignment, so `let` would be the one to use in a loop).
Hmm been having a hard time intergrating the code, but will continue to work on it. in the mean time I stumbled across this piece of code on the website, I think this was in control of the scrolling for that section but it never really worked out and I think we gave up. &lt;script&gt; $("section.container_8 .banner-nav a").click(function(){ $(this).addClass("active").siblings().removeClass("active"); $("section."+$(this).attr("id")).addClass("appear").siblings().removeClass("appear"); }); &lt;/script&gt; It works if you click the radio buttons on the screen but it won't auto-scroll as it doesn't have that command. If I can add to that piece of code to get it to auto-scroll then everything will be fine. Any ideas?
Look at the source of the index.html file, not just the final result.
Hmm....no luck, it just stayed at the first Section and didn't move when i switched .click to .ready
You should definitely always use global vars they are so much faster. Local vars are for hipsters with fancy mustaches and tight jeans.
I assume ES6 is only supported in "evergreen" browsers like Chrome and Firefox?
The ES6 spec was finalized a few months ago, and support for various features is being gradually added to browsers. You can check out the compatibility in [current browsers here](https://kangax.github.io/compat-table/es6/). `let` and `const` can be used in Chrome in strict mode. However, most devs that want to write ES6 (or even newer ES7 proposals) code will be using a transpiler, like [Babel](http://babeljs.io).
Hmm... can you put all of the code in a [CodePen](http://codepen.io/pen/), save it, and link it back to me? I can play around with it then...
Right, but what does it matter? It's a neat party trick for sure, but has absolutely zero application for web apps as far as I'm concerned. Not being able to `view source` has zero impact because you're not preventing anyone from seeing your code.
For online I like codepen.io for quick experiments, and plnkr for for when I need multiple files. For offline is use sublime text + prepros. 
Is shizzle an industry term?
What about multi cursor, that was the end of vs for me. They had a plugin for it, but it was super buggy
Actually, now it's a stage 2, so it's enabled by default.
 For this specific use case you can only use let, as const is, well, constant, so you can't iterate it. In Python if you don't declare a variable as var, it is automatically function-scoped? Didn't know that. If you do that in JS, it is globally scoped, and should in the var majority of cases be avoided. Now that we have let, I don't see where var should be used instead.
According to the GitHub repo, it's still stage 1. https://github.com/lukehoban/ecmascript-asyncawait#status-of-this-proposal Ah, looks like the offical up-to-date table is over here: https://github.com/tc39/ecma262#current-proposals
&gt; function test(data) { return 'Hello ' + data; } FTFY The reason why this is better has nothing to do with how many variables I am using and every thing to do with being concise and easy to read. 
cool do you have a github acc?
Yep. Same username as here, actually.
TIL, you CAN do this in ES6: const ix = {i:0, j:0, k:0}; for (ix.i = 0; ix.i &lt; 10; ix.i++) { //... } (Not that you'd want to but still...) Edit: Where to learn more: http://blog.getify.com/constantly-confusing-const/
fo rizzle
Wish I still had my older code where I tried that. Wonder what I did mess up there.. :/ Edit: Finally got time to test it - doesn't seem to work for me - arguments still aren't passed. :/ Edit: they are accessible with arguments[0] at //do shit part
That's how constants work in most other languages too. You can't reassign the value of the variable, but if it's a pointer to a mutable data structure, the data structure values can still be reassigned. This can easily be solved by using immutable data structures.
It is recommended to actually use map, reduce, filter and forEach over the standard increment for loop, as they already have some built in type and defined checks so you don't shoot yourself in the foot. Plus it's a lot more readable, so there's that. I actually use "var" for module-global variables when programming in Node just to distinguish them from the function variables and because I despise implicit global variables. I know that if I declare global variables inside a module (aka without the var) it will only be module global, but I like to explicit mark them with global using var.
[removed]
Awesome! I really love [ng-conf](https://www.youtube.com/user/ngconfvideos) too for those of you still using angular.
the best talks are closest to the beginning of the playlists.
I'm referring to the confusion that it could cause if they thought it was block scope. For instance (and I'm not saying I can find a valid reason that you would do this, but...) if you had this: for (var i = 0; i &lt; foo; i++) { //do stuffs } i = bar; You might THINK that the declaration of the "i" in the for/next loop would be declared as block scope, so the "i" in this case should be a global variable. However, that's not the case. The declaration being "hoisted" up would keep the variable locally in the function.
Right, and that would present itself at runtime as a bug. But that's also why you don't reuse variables outside their original intent, don't reuse variable names and comment your code. Hoisting, like closures and dozens of other language features, is something everyone should learn about in Javascript. But sometimes the best way to learn is to make mistakes. 
Pretty cool. [Starfighter](http://www.starfighters.io/) is doing something similar, tho the larger purpose is to serve as a substitute for technical interviewing for programming positions. [kOS](https://github.com/KSP-KOS/KOS) for [KSP](https://kerbalspaceprogram.com/en/) is also pretty badass, tho the language isn't as ... expressive as one might otherwise be used to.
How do other high level languages compare? I've worked with C# before long ago but I can't remember at all if you could steal change properties of const objects.
Writing a chrome plugin for Google music. I need to collect the songs from playlists. Since the page isn't static, I'm not sure how to select them
Excuse my ignorance, but are these actually streams? I was under the impression that streams represent a sequence of data over time. Based on the examples and briefly examining the source, I don't see any iterator-esque methods that would allow the Stream object to be manipulated or observed over time.
Functionally identical or not I consider there to be an implication in externally declared iterators that says "I'll be using this again later" either because you have multiple loops or because you use that outside like i=bar. Writing code isn't always about what makes functional sense its about what story your telling or implying with your code, hence the importance of good white space practices.
not sure if downvoted because people like ted or like JSConf. lol wasn't badmouthing JSConf
One of the (very limited) acceptable use cases, although you might try reverse engineering the Google code itself to figure out how to listen for changes without MutationObserver. Add I understand it, and I've used it before, it's pretty straight forward. The MDN page for it will probably be helpful.
Is there ant information you can give me about listening for a change that doesnt use MutationObserver?
If we can get it to handle stdin we can get autofixing editor integrations.
I was.
Hi /u/abyx, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `codelord.net`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [codelord.net](/search?q=%28and+site%3A%27codelord.net%27+author%3A%27abyx%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|157|74%
Hot reloading is nice, but not the point for react starter kit. I don't really understand what your goal is. Am I missing something here ?
When you are using a CDN like CloutFront, you can't invalidate cached entries in one go. It means that when you deploy a new version of a site, some users may download your updated index.html file but not the updated CSS file, leading to UI issues. Generating unique filenames for resources prevents from this kind of issues.
http://38.media.tumblr.com/85a0f08dec61015e31c18be845de59fb/tumblr_n7j6q7YwK11r4gei2o2_400.gif
Not enough! The standard is 50 before you're useful. 50! Anything else and we'd have to actually write code instead of just reading about it!
&gt; So it turns out that Javascript "bubbles up" the declaration to the top of the function. /u/Magnusson wasn't just using the word "hoisting" as a convenient metaphor for the behavior, that's what the behavior is actually called. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting
How did you get past the interview? 
I'm a freshman in college! I know HTML/CSS/Python. My learning curve is pretty steep. But, motivation/passion/charisma. A combination of all of the above.
Thank you! 
Oh hey. This is cool. Thank you!
The creep has to be next to the spawn for that to work.
Overall I think this is cool, but here are my feelings about it. 1. Nit-pick It's `val = await fn1(val);` not `val = async fn1(val);` 2. this is what `flatMap` is generally already used for for promises. Here's roughly the same thing using `RxJs`, which I find superior because the control flow happens in the way you read it compared to `compose` which is backwards. Original example: let elementsFromFile = compose( map(toElement), param("data"), JSON.parse, asyncLoadFile); // imperative data extraction elementsFromFile("elements.json") .then(function (elements) { // update the view }).catch(function () { // Display friendly message, retry }); RxJs Version of example: let elementsFromFile = file =&gt; Rx.Observable.of(file) .flatMap(asyncLoadFile) .map(JSON.parse) .map(param("data")) .map(toElement); elementsFromFile("elements.json").subscribe({ onNext(elements) { // update the view }, onError(err) { // Display friendly message, retry }});
Thanks, I guess I'll be experimenting over the next few days with: + atom + webstorm + vs + codepen...
I have two of them next to the spawn, and they are stuck there filled with energy =/
&gt; Taking Screeps as an example, are you claiming that an arbitrary programmer shouldn't be able to demonstrate some skill at accomplishing various feats and goals in the game? That is exacly my problem with this idea, any arbitrary programmer would be able to do this. And just because they can do that does not mean that they are capable of writing code that can be used in a professional settings. 
Maybe you mean LiveReload? eg: https://www.npmjs.com/package/tiny-lr Practical implementation w/ browserify: https://github.com/mattdesl/budo
You write normal-ol' React, and it does magic to turn that into native UI elements - you don't use Cocoa touch components at all. ```&lt;View&gt; &lt;Text&gt;Hello World&lt;/Text&gt; &lt;Image src={} /&gt; &lt;/View&gt;``` They have some built in components for you to use: like ScrollView etc. The thing that has surprised me is how fast it is, even after doing crazy things like ScrollView inside a ScrollView inside a ScrollView. I've been waiting for things to grind to a halt as my app has got more complex, but it's not the case. It's very impressive. 
Not that one. I edited my description above. This other one was client side as well.
Maybe this one: https://github.com/Javin007/LiveReload
I figured it out. ... I was being dumb. This is tutorial mode and everything was (invisibly) paused while it was patiently for me to finish my builder routine. But this looks like a lot of fun. Goodbye, lunch breaks.
That's the one! Now there are two. :-)
a lot of that has to do with the hardware. I've seen two motherboards that took Yosemite as easily as any blue-blooded Mac would(I'm ignoring a pretty pain-free multibeast config/install when saying this, but that part was literally paint by numbers). the second one actually successfully booted the same SSD I'd used to install the first board without any modifications or need to re-configure/re-install multibeast. these were sandy bridge/ivy bridge boards, though, so they've been around long enough for others to work out the kinks. edit: I'd definitely suggest following the hardware guides.
Gulp/grunt/webpack/"next week task runner/system builder" is overhead. In a couple of months when you will try to migrate your configs to "next week task runner/system builder" and wait for plugins for simple operations that can be done with npm scripts, I will still be using my config. Regarding python - I'm only using it because livehotreload uses it. What's your point?