&gt; However, I haven't been successful at all in using jQuery with google's map API. The Google Maps API is (essentially) a collection of javascript functions. They don't interfere with jQuery in any way. If you cannot use jQuery in conjunction with the API, it's got nothing to do with said API.
Of course this depends on your usage, but for me, when dealing with data structures for numerics in JavaScript, I make use of an Array as the basic data store. Then my data structure is designed around indexing into this array. The 'data structure' really becomes a DataView of the Model (the Array).
Did it occur to you that you might be calling setAttribute on a null object?
document.getElementById and if that doesn't work it might not be finding the Body_full element. would need your full code / more info on it 
If I had to make a guess, you are maybe making that call before the dom is ready. Also, you probably want to make that document.getElementById
Similar to what jeefmasta said and I didn't try it, but... What about using something like..? if (window.chrome){ document.getElementById('myDiv').className = "specialClass"; } You may have to call it in an onLoad function to avoid null or write inline script well below the intended div. 
You didn't check it with WinXP (still 30-45%), did you? Over there, it will also look like crap with Firefox, IE, and Opera. Use a different font. One which is properly hinted.
Would what your suggestion of document.onLoad prevent this?
Also, I am still only learning JS, but I was under the impression that: document.onLoad(switchID();) was correct? I am probably wrong, but when would each of our formats be correct?
Oh, and [here's an image I saved](http://i.imgur.com/ia8sE.png). It's no duck, that's for sure. It looks like the layers may have created some artifacts when they were merged. I'm not sure if you're working with alpha transparencies for the rounded edges of your brush, but that *might* be the cause?
It looks like I was wrong before. Your method _runs_ the event handler, not setting it. so if you have: document.onload = someFunction; that someFunction will be run when the load event fires. if you have: document.onload(...); it will _run_ whatever event handlers you have for load, immediately, even though the load event hasn't happened yet.
Nope. onLoad takes an assignment. And the thing you would assign to it is a reference to a function, which is switchID without the parens. By adding the parens, you make it call immediately.
&gt; Put that in a div that hides the cursor via CSS and move this element to wherever the cursor is on mouse move. That works? I always made custom .cur file, which seem to must have at least one visible pixel.
Probably for good reasons too. Thanks for the link!
Drawing lags a lot, you should probably try using window.requestAnimationFrame to smooth things out. I'm working on something similar, but with a focus on collaborative drawing, ultimately people will be able to "join a room" and paint and draw diagrams together. [Here it is.](http://canvas.flooi.de/id/reddit). For now I'm just fleshing out the UI and the tools. Code is not minified so feel free to take a look at if you like.
This is top notch. Keep going, and be sure to keep us posted on your progress. 
&gt; That's what I'd do in jQuery, didn't know I could do that in vanilla javascript. jQuery is a JavaScript library, nothing more. It is not something separate from JavaScript. This is a big point of confusion with new developers, it seems. You said, "that's what I'd do in jQuery" but absolutely nothing in warfangle's example invoked anything from the jQuery library.
Still learning JS, but what is the purpose of &amp;&amp;? What is its use?
Without data validation I came up with pretty similar, kinda dirty, but is nice and short: function GetFactorial(input) { var product = input--; for(; input&gt;0; input--) { product *= input; } return product; }
Broken on safari 5.1.4 on os x :(
Good catch, thanks! :)
I think I understand. Good explanation, thanks. So, ... &gt;1 &amp;&amp; ... would translate to if(false){...} ? 
It's GDI vs DirectDraw. If it looks like crap with GDI, it will look like crap with any browser/OS combination which uses that library. So, if Chrome/Win7 looks bad, Firefox/XP, IE8/XP, etc. will also look bad.
In first place you'll need /r/java/. Javascript in not Java. At all. But if you want to learn javascript, you could try https://developer.mozilla.org/ or http://javascript.info/.
No worries :) Just wanted to make sure what you wanted. **Off Topic:** Otherwise, [here](http://docs.oracle.com/javase/tutorial/) is a good start.
Would translate to false. === -1
All great advice. Thanks for reminding me about changing the cursor. I had thought of it early on in the project but completely forgot about it.
Yeah the anti-aliasing the canvas element automatically does is part of the issue, but the real root of the problem is my blending function is wrong and needs fixing. Any graphics gurus out there? :D
[https://developer.mozilla.org/en/AJAX/Getting_Started](https://developer.mozilla.org/en/AJAX/Getting_Started)
That being said, since you'd be creating the module only once and assigning it, using eval would not necessarily be a horrible idea. I wouldn't use it myself because I can't see a lot of gains with this particular construct.
Thanks for letting me know! It seems that the issue is with getting the line number from which asserts come from. I'm looking into it. If anyone has ideas of how to get line numbers in a simple, elegant, yet reliable and precise way which works cross-browser, let me know! **edit**: For maximum pleasure, try it with Chrome, and if you report me quirks I'll work them out on all browsers. **edit**: It neither crashes in Safari now.
No worries! It worked fine in firefox as far as I could tell, pretty cool tool. Thanks for sharing!
Here is a personal commit for you: https://github.com/Wizek/Tree/commit/f92b4bc95baab7b22a8f7ca31ec17f3af2ce1592 If you check the jsFiddle, it should work now in Safari as well!
Note that jQuery is required to run this code. Also, in this case, whatever script/file you call on the server side (in this case, ajax/test.html) does not need to be a complete HTML document... it can be a "fragment" of HTML code that gets inserted into your current page, so to speak.
Ah, I assumed 0! was 0 (been out of school too long =P) so I specifically modified it to make it work, ha. This is what I had before: function GetFactorial(input) { var product = 1; for(; input&gt;0; input--) { product *= input; } return product; } 
Well, AJAX is just used to draw content from a server (which you can store in a variable, or whatever). Then you use DOM manipulation to add that content into a div or w/e. Are you familiar with DOM? Or you can go the jQuery route as others have suggested, but it's always good to know what's happening.
you'll probably just use the responseText method and change the innerHTML of your div to that
use the strategy pattern // this can also be a full blown class if you so desire var actions = { west: function() { ... }, east: function() { ... } }; if (typeof (actions[direction]) === "function") { actions[direction]( ... arguments ...); // or actions[direction].call(this, ...); // or actions[direction].apply(this, ...); } else { throw new Error("Not a valid direction"); } probably overkill for two actions, and might have problems if they are not strings or numbers (with numbers you can use an array)... my JS-fu is not as strong as some others here I imagine...
If I run this, I get: a: 3 e: aaaaaaah! ----- a: 3 e: 2 And the ECMAScript v3 standard says that this is what should happen, in section 12.14 (emphasis mine): &gt;The production Catch : catch (Identifier ) Block is evaluated as follows: &gt;1. Let C be the parameter that has been passed to this production. &gt;2. Create a new object as if by the expression new Object(). &gt;3. Create a property in the object Result(2). The property's name is Identifier, value is C.value, and attributes are { DontDelete }. &gt;4. **Add Result(2) to the front of the scope chain.** &gt;5. Evaluate Block. &gt;6. Remove Result(2) from the front of the scope chain. &gt;7. Return Result(5). This is further confirmed in section 10.1.4 (emphasis mine): &gt; 10.1.4 Scope Chain and Identifier Resolution &gt; &gt; Every execution context has associated with it a scope chain. A scope chain is a list of objects that are &gt; searched when evaluating an Identifier. When control enters an execution context, a scope chain is &gt; created and populated with an initial set of objects, depending on the type of code. During execution &gt; within an execution context, **the scope chain of the execution context is affected only by with &gt; statements (see 12.10) and catch clauses** (see 12.14). 
No, you can't check simultaneously, as JS is a single-threaded language. But what you can do is reduce the cost down from linear (O(n)) to constant (O(1)) by using proper data structures, as beltorak's comment shows. A hash table lookup is a constant time (amortized) operation, so it doesn't depend on how many possible values there are, as with a series of `if` statements or a switch.
What about other languages? Out of curiosity is Javascript primarily/only used for the web?
Thanks. I didn't mean it to be JS specific, though I am learning that as well, but r/programming doesn't accept text posts? Seems odd. 
Yea, /r/programming tries to be a news site. /r/coding and /r/compsci will be closer to what you want. No worries though, we're quite welcoming over here at javascript.
If you'd like more suggestions on the backend, this might be a good place, but for the user experience I'd recommend posting this on [r/graphicdesign](http://www.reddit.com/r/graphicdesign). Those guys will be the end users, right? Also: needs moar liquify
Agreed ... would it kill them to at least hook up a mouse click event?
Can we run js.js inside of js.js inside of js.js?
I would love to see a simple web tool where I can demo js.js. You would essentially just need a page that calls the application with a textarea for input and a separate textarea for output. It would also be interesting to see how this operates compared to Esprima. http://esprima.org/demo/parse.html
You really need to read jsFiddle's documentation. The HTML part is inserted into a body tag. jsFiddle generates html, head and all that stuff for you.
&gt; js.js is a JavaScript interpreter in JavaScript. Instead of trying to create an interpreter from scratch, SpiderMonkey is compiled into LLVM and then emscripten translates the output into JavaScript. ... Oh. Much less impressive/interesting, then. :-(
It would be nice if he backed up the points with jsperf results or something. e.g. here's one for the scope chain claim: http://jsperf.com/scope-chain-testing
Nice work.
Excellent idea and comparison! Even though a TODO application is very simple and might not be a deep code analisys, it gives a very quick example of a framework syntax and organization. The idea could be further extended presenting other basic and intermediate examples (prehaps community contributed?), so to evaluate the strenghts and weaknesses of the frameworks, the cases where each one shines or becames contrived or bloated, etc. Anyway, this is another great contribution to the community by Addy Osmani!
Yes it definitely can be replaced; however, I didn't have an opportunity to try switching it out. One thing I'm definitely interested in seeing, but didn't have the chance is to find out how well the native templating system actually performs. The reason I don't like it is the verbosity of a lot of it, it outputs the comment for containerless bindings, and containerless bindings are also verbose. For instance, `&lt;p data-bind="text: someObservable"&gt;&lt;/p&gt;` and if you want to do something like `&lt;p data-bind="text: someObservable"&gt;&lt;span class="sprite"&gt;&lt;/span&gt;&lt;/p&gt;` you'll have to switch your markup to be `&lt;p&gt;&lt;span class="sprite"&gt;&lt;/span&gt;&lt;span data-bind="text: someObservable"&gt;&lt;/span&gt;&lt;/p&gt;`. You wouldn't have to switch your markup using pretty much any other templating system. However, binding is super powerful as it'll update the text if you programmatically change the observable.
Well you're right, I know jQuery is a library - but that's why I'd do things differently with it. Most of the syntax in his example is already written out in jQuery so that I don't have to. That's why it's great.
It doesn't work in IE7. But then again, very little does.
See also [Narcissus](https://en.wikipedia.org/wiki/Narcissus_(JavaScript_engine\)), and more recently [Tachyon](https://pointersgonewild.wordpress.com/2011/08/27/the-tachyon-javascript-compiler/) ([pdf](http://www.sable.mcgill.ca/~clump/cdp2010/ChevalierCDP10.pdf)). Related is also [Google's Traceur](https://code.google.com/p/traceur-compiler/), although it compiles next-generation javascript to an older version, rather than being a javascript interpreter. It's written in JavaScript though.
And you can never bring them back :(
http://cdn.memegenerator.net/instances/400x/19009061.jpg
Surely this is a someone trolling and this isn't a real plugin? Edit: Nop.. Looks real.. *rolls eyes.
OP here. I don't specifically recommend this approach anymore, unless you really can't use the awesome [async.js](http://github.com/caolan/async) in your specific case. I think it speaks volumes that I started doing things this way to avoid having to use Step, even if it was available to me.
jsception.
I thought about saying that, but then I realized I had some dignity.
Thanks for introducing me to this tool! Am I missing something though? Your example for me appears to demonstrate evidence against the author's claim. My example which should have been "slower" was about 5% faster according to this site.
This is why you don't trust slides without data to back claims. jsperf is the shiznit.
[Developer pages](https://developer.mozilla.org/en-US/), you should become great friends with it. If you're trying to get a value of an input field and somehow displaying or modifying it, use [value](https://developer.mozilla.org/en/HTML/Element/Input). As far as your html is concerned, get rid of your font tags and place your id within the 'P' tag. Font tag usage these days is useless, CSS will handle that for you while staying semantic.
Do you add the objects to the global scope?
and killable :(
I do indeed with this function: function create_new_object(id){ if(!window.hasOwnProperty(id)){ window[id] = new fishObject(id); //&lt;-- added obj to the DOM... could be accessed from anywhere on the page as long as it exists. }else{ alert('There is already a fish with that name'); return false; } }
&gt;When your users load a page, retina.js checks each image on the page to see if there is a high-resolution version of that image on your server. This sounds stupid, why not have an attribute with another path instead of checking all images. Could be &lt;img src="image.png" data-retina="image@2x.png" /&gt;
OKay, thanks!
Responsive image is definitely going to be the next big web design/dev discussion/problem solving topic because new devices with Retina-like and Hi-DPI characteristics. 
No. I hate to break it to you, what you are asking is ***impossible*** to do in parallel. It has nothing to do with computing either. It's the mathematical aspect that does not work out. An "if, else if" is actually two statements that requires two *successive* comparisons. *You need the result of your first comparison to process the second statement*. Computing being somewhat based on boolean logic, if and if-else statements are pretty much the basic building blocks of conditional statements and cannot be 'factorised' any further when working with 2 statements. If more than 2 statements need comparing, one can use a switch statement. Of course, your conditionals are still not parallel and never will/can be.
Well for one thing, that it makes an extra HTTP request for *every single image* on your page. 
Pro tip: value is an attribute of &lt;input&gt;, not an element/tag. So, don't write it in angle brackets. That's just for tags like &lt;body&gt;, &lt;input&gt;, etc.
Thank you, kabuto. I think the real question is how do I allow someone to name an object with the *string* NaN so that it is not interpreted as Not A Number. 
thanks. so basically its used to use instead of a getter function when privacy is not important?
For the other thing, that can be made with CSS - not even one line JavaScript needs to be written.
This is still not parallel computing. The look-up mecanism just adds 'an interface layer' (extra overhead) to the initial branch conditions. The statements will always need to be verified for true / false values somewhere. Furthermore .. an if / else-if cannot be done in parallel, this is mathematically impossible. See my other comment below.
... if one condition is 'always' false, why check?
Well I mean it can be west or it can be east but never both
Yeah, my first thought was "WOAH THIS IS COOL! DERF DERF!", but then I tried to think of any reason to use it.
If they are gonna use JS, why don't they use page width detection that's not apple specific? I have a high resolution screen, why can't I get HD images on my pages?
I started doing webdev in '98. As a former Javascript developer who is now a so-called Javascript library user, I gotta say, it's a whole lot better this way. Of course, it's probably a good idea for folks to get enough of an understanding about the nuances and quirks of the language and browser implementations to understand just how painful Javascript development can be without a framework or library to handle the grunt work. 
Thanks for the quick response! I've thought about using jquery. But I just feel that I could come a lot further using plain JavaScript? So, I will deffently follow up on that point. I will try to find some easier ways to put my code. I've looked into some object oriented js. But I don't feel like im getting it 100% yet. So, I need to read up some more on that tomorrow. I will write down the rest of what you said, and deffently follow up on that aswell. Just, because those where pro tips :) Thanks a lot! And, I will try to join in on the 140byt.es. Just need to explore some more of js first :p Thanks again! &lt;3
You're welcome. About the easier ways: there are a lot of shorthands in JS. For example, instead of defining an array and every instance of it, you can simply use the JavaScript Object Notation (better known as JSON): ['this', 'is', 'an', 'array']. Another example is the modulo operator "%". Try to avoid comparisons or switch-statements if you end up doing almost the same stuff over and over. Oh, and don't stop asking questions. Most of them will be answered :-)
So what? jQuery.com uses v1.4.2 on their homepage, but v1.7.whatever's the most recent in the docs. Don't judge an e-book by its home page.
Ok. You are currently comparing 2 things (east OR west), thus **one** conditional statement is needed to determine what you have. You can assign a default (not really recommended): // This only works inside a function of some sort: function checkCondition(direction){ if(direction == "East"){ // Do stuff for east condition; return result; // returns result if condition is East } // Do stuff for west condition, return result; //returns result if condition is West } All right, see don't worry about the syntax, JS is not my best language but the math is the same. Notice that to test two elements for a match, one can do this with a **single**, simple if. Comparing 3 elements for a match would require 2 verifications at the most. This is n-1 possibilities. THe only way I can *imagine* doing those verifications in parallel with JS would be via ajax requests. You would need the number of conditions to check, let`s pretend it is 100 000 conditions (would make a huge switch statement!) , one could start 100 ajax requests that process 1000 conditions each. How exactly is beyond the scope of this commentbox, and raised some interesting scaling possibilities if feasible but you would need many many many conditions before you reap the result of this technique. Oh, and this would *NOT* be parallel computing, it would just be a dirty hack for multi-threaded conditional checking.
Awesome.
Well, you're certainly organized. I'd say your next tool should be how to write a loop... This still isn't very dynamic, but for instance this: var i =0; var imageArray = new Array(); imageArray[i++] = "images/hero1.png"; imageArray[i++] = "images/hero2.png"; imageArray[i++] = "images/hero3.png"; imageArray[i++] = "images/hero4.png"; could be replaced with: for(var i=1;i&lt;5;i++){ imageArray.push('images/hero'+i+'.png'); } In this case we're only replacing 4 lines of code, but in the future that will number in the thousands and zillions. 
The original purpose it was built is actually for a future product we're building at Twitpic/Heello. Unfortunately can't go into details, but I wanted to leave the library as open-source instead of making it closed-source.
You can accomplish a quarter of that, half of the time... if(direction != west){ go east; return false; } go west; 
What does this mean? &gt; If you called these constructors directly, then a complex object is returned. If you simply express a number, string, or boolean value in your code (primitive values like 5, "foo" and true), then the constructor will return a primitive value instead of a complex object value. I'm guessing it is referring to something like: &gt;var num = new Number(); as opposed to: &gt; var num = 5; But what is the difference? The second won't have certain methods? 
Here are two things that helped me get really good with javascript: 1. Closures. Javascripts objects and variable scope used to confuse me and I just didn't trust what I wrote. Closures, in javascript, are like little variable scopes. Each function is a closure, each block of code between {}'s are closures. Inside a closure, your code has access to it's variables, and the variable declared directly outside of it. In your example, try adding var slide = document.getElementById("slide"); just above function nextSlide. Then replace each call to document.getElementById("slide") with slide. It should still work and you won't need to call document.getElementById all the time. 2. The Document Object Model. I used to not understand the difference between javascript and the DOM api. Things like document.getElementById (and the entire document object) are part of the DOM. Using the DOM you can change any element on the page or create new ones. Each html tags gets turned into a DOM object. document.getElementById returns one of those objects. If you have firebug installed, add console.log( document.getElementById( "slide" ) ) somewhere, hit f12 and reload the page. In the console tab you should see the object. You can expand it and browse through it's properties. Definitely spend some googling both of these.
Cody is a pretty smart guy.
Ha! I see what you did there. 
DOM manipulation is painful. Javascript is actually a pretty solid langauge.
I tried putting your code into jsfiddle but couldn't get it to work easily in a slightly drunken state so I didn't look too far into it. Assuming it draws something for you, it looks like you're clearing the entire canvas in the animate function of your paddle object: this.context.clearRect(0,0,this.canvas.width,this.canvas.height); Clearing the canvas there doesn't just effect the things that your paddle has drawn; it effects the entire canvas. The canvas context works by using your instructions to update the its buffer of pixels and does nothing else - no notion of the caller, layers, etc., it's its own thing. You need to get something else rigged up to clear the canvas each time an update is necessary and then call into draw of each of your drawable objects (the paddle and the ball). Having draw methods on objects is a good idea but having clears inside of them isn't; put that in an outer call that clears once and then asks everything to redraw and you should be set.
I'm deeply curious as to what you find "painful" about developing with JS.
Thanks! I tryed something like that yesterday. But didn't get it working :c I belive i forgot about the .push :o thanks again &lt;3
hahaha, maybe your ment to build the first one? Ey? Se what i did there? c: and, I will deffently message you on the github. But Im worning ya, i might ask a lot of stupid questions about JS :o 
 var Obj(name){ //constructor this.name = name; } Obj.prototype.alert = function(){ alert(this.name); } Here `this` is needed outside of the constructor
All still waiting for auth implementations I guess. 
&gt;`width: '200'` Why is this a string? &gt; draw: function(){ &gt; this.canvas = document.getElementById('myCanvas'); &gt; this.context = this.canvas.getContext('2d'); Get a reference to the canvas element and the context once at the very beginning. You need a main loop which updates and draws all the things.
Good point. I need a 'new' in there
"ebook" in this case means PDF.
It sounds alot like dojo's style of defining classes/modules look at dojo.define
Technically yes. I've spent too much time around ExtJS recently and Sencha uses the term "scope" when they really mean "context" (they also encourage passing callbacks along with contexts as separate variables rather than using bound functions -- not exactly best practices, but it tends to stick to you). Yes, scope really should mean "where your variables exist" and context just means "whatever `this` refers to". JavaScript only has function scope (though this will change in the future), everything else is implicitly turned into a property of the global object. In a global context (i.e. a function called without an explicit context, or code not wrapped in a function), `this.foo`, `window.foo` (in a browser) and `foo` refer to the same thing. In a non-global context, `this.foo` refers to the property `foo` of the context object instead. In a function where `foo` has been declared as a local variable (i.e. `var foo`), `foo` refers to the local variable. That said, scopes can be nested (as "closures"), but this is really getting out of hand, so I'll just stop there. EDIT: Also, Sencha doesn't believe in deferreds. Sadly.
Here's another example: someFunction.call( this, someParameter );
If you're just getting started, I wouldn't worry too much about learning the DOM right now. Just get comfortable with javascript. At some point you'll find that you want to do more, and that's where the DOM comes in handy.
Heh, good call. Initially I thought I needed to set it to something like '200px' never changed it to an integer after removing the 'px'
Be wary of w3schools, be wary of any code written more than 3 years ago, be wary of any code involving browser detection, be wary of any code using document.write. That probably could have been written using a loop. 
Without checking the subreddit, I immediately wondered if this would put it on a collision course with earth.
granted, but I didn't think the OP was asking about parallel computing despite misuse of the word parallel and the phrase "do both simultaneously". Usually in the case of polymorphic message passing (like the strategy pattern above) however, there is no check for the other values - either the desired value exists in the "vtable" or it doesn't. granted this is not the same as doing both checks simultaneously. Also granted, the vtable could be implemented as a simple linked list or array of { name, addr } structures, in which case the JS engine is still checking for all other values up to the one in question, but given the proclivity for JS authors to use an object as an associative array it is also reasonable to assume that member lookup is based on some sort of keyed or hashing mechanism, in which case the JS engine does not have to check for all other values, it just has to see if the desired value exists or not. **tl;dr** given the OP's question and code example, I deduced what the OP was really after and concluded that it was not parallel computing.
Here's the [LICENSE.txt diff](https://github.com/meteor/meteor/commit/4764dcc85979747de288d4645aaecc03d69ffea6)
I am not a JavaScript whiz, so can someone explain what all the MVC frameworks are for? I mean, I get what they do but I am just have a hard time figuring out how they fit in. Like say you have a blog engine, what are the differences in using an MVC frameworks vs. building it in plain old JavaScript? 
[Web Workers](https://developer.mozilla.org/En/Using_web_workers), they allow you to run a script in a seperate thread. They can't touch the DOM, and they can't share memory with your main page, to prevent threading issues. However they can send and receive messages, which is what allows you to communicate with them. All the data you send across is copied, to prevent two threads altering it at the same time.
Suddenly interested in this project again!
A solution would be **smart progressive PNG/JPEG/whatever**. Basically, progressive PNG had the right idea, but instead of sending the first bit of a block, send the average of that block instead. Then you send 3 more bits-averages, and let it compute the 4th bit-average from those 3 and the first (which is the average of all 4). Repeat this step for higher and higher resolutions. This way you have an instant low-resolution image which grows in resolution by a factor of 2. This way the browser can also stop downloading higher-resolution parts of the image if it doesn't need it (it will have a valid image after every step). And if the user for example changes the orientation of the device, changing the layout and making the image bigger, the browser can automatically start downloading higher-resolution version of the image (but only the parts it doesn't already have), without any action required on the part of the web developer. Use case: thumbnails would no longer be separate low-res images, but can link to the full-res image themselves. A page of 1000's of high-res images would download the thumbnail previews instantly, and only on clicking on one would it upscale it to it's full resolution. This would optimally solve the bandwidth problem, and free the developers from worrying about image resolution or bandwidth (bandwidth would only be used as much as needed). It would also allow low-bandwidth devices to optimally distribute available bandwidth among the (potentially many) images on the current page. It would also work equally well not just on 2x size difference, but for much larger differences while preserving optimal bandwidth usage. The current progressive PNG is useless because it doesn't go from low-resolution to higher resolution, it goes from jagged-broken image to slighty-less-jagged-broken image until only on the final step it's the actual image. For example if there's any text it's unreadable until fully downloaded. The same can probably be done for JPEG and other formats. This would also have advantages over other progressive-enhancement image formats like the newer SVG (which progresively shows parts of the image while downloading), because it instantly gives a full image (at a lower resolution), instead of random parts of it.
It's important for certain sites. A real estate listing site, for example, should show the highest-resolution photos the device can display.
I recommend you use an IDE. It will highlight many syntactical issues for you. http://www.aptana.com/ is what I use.
Blog is too simple app to get the benefit of MVC frameworks. They help you to deal with a lot of interlinked objects on the screen. Say a grid and a side panel with info. When you chose a row in a grid, the side panel should automatically show the data from that row. And both should sync update when you edit something in a panel or the grid. MVC frameworks have what's called a "2-way data binding". That allows you just link visual controls to some data object, and they are updated automatically. So they simplify your application removing a lot of boilerplate. 
Holy shit dude :o Thats brilliant c: my code will look cleaner. And I can more easily edit everything(allmost) in my JS file. Allmost like using styleshets instead of inline stying. Thanks man c:
Ok, so its like the hardcore lvl? I hope i get there soon. I's probably a lot more to learn before Im readdy. Thanks anyway! C:
Ah, ok. i will. Whats wrong with document.write ? Is is making the page slow? Or reloading the page or something?
What? That's... that's not what I'm saying. Serving a baseline medium-resolution image by default, and then serving higher-resolution images if the user's device and/or connection make it worthwhile is a _good_ idea. It saves bandwidth on both ends. Plus, if your screen is 1280x800 you can't do much with a square image larger than 800px, whereas a screen at 2560x1440 can utilize a square image of 1440px.
It doesn't work in XHTML documents serves as XML (nowadays a very niche case), but it really shows the author didn't really know/care for real life usage. Normally you'll want to change the content of an element that already exists, either by removing it from the DOM, doing loads of complex stuff, then reattaching it, or just by editing it's content directly. Document.write is a pretty old school method and it is just one of many clues that it's either out of date, or written for a very simple case. If you want to see what something outputs for learning, use console.log("hi") for instance. You'll see the output in the dev console (in the inspector, firebug etc)
Which browser are you using? If you're using Firefox install firebug. Both Chrome and Safari have debugging tools built into the browser (cmd+shift+i on Mac). I've implemented most of my JavaScript/Coffeescript in emacs and haven't had any problems. For the majority of the syntax errors (matching parens for example) the editor has decent match highlighting. Also if you have some huge functions try breaking them down into smaller pieces to make debugging easier. Then there's unit testing if you feel like getting hardcore or something.
I disagree. I've gotten more enjoyment out of Zork than a lot of flash games.
I've used firebug, the chrome debugging tools, and Opera's firefly, and it tells me that it was expecting a curly bracket. I just can't find where I messed up. I'm also using notepad++ and I still can't find the error.
&gt;I'm pretty sure I misplaced a { or } somewhere and I can't figure it out Use JSLint (or at least JSHint). There are plugins for many editors available. It's integrated in Komodo, for example.
Yes, I'm to lazy to change all the code for this game to that, but I'll make sure to do that next time. Lesson learned. :)
Thanks, I'm installing it now for notepad ++.
This is a fantastic tutorial. I'd just like to mention an alternative to Restify (I've personally found it somewhat lacking in terms of authentication methods for more complex applications). I personally like [express-resource](https://github.com/visionmedia/express-resource), which is a module to express that lets you more easily create routes to REST API resources. Restify is great and really simple, but when you want to do something like "only be able to modify this object if logged in" with Backbone, it's a lot easier to use Express with express-resource, since Express has sessions and cookies built in to it already. If you're making a "pure" REST API, where the only authentication you need might be an API key, then Restify is simpler and possibly better for development since you can track each individual request with dtrace. Still, great tutorial, and I hope to see more soon!
Small critique: Wouldn't the simplest example involve the front end only? Mixing frontend and backend instantly ups the difficulty from simple to something more involved when having to prepare the environment just to get started.
The real power of backbone.js comes from the relatively transparent client/server synchronization. There are plenty of client-side MVC frameworks to choose from, and honestly Knockout.js really outshines Backbone in that arena. But Backbone offers seamless server syncing and so it makes sense (at least to me) that any tutorial would feature that particular aspect in gold letters and big font because that's what makes the Backbone library useful. Having said that, Backbone really has an unfortunate method of dealing with bindings (basically manual) and does not manage memory well (like many other libraries offered by jashkenas).
Can you share some places where Backbone usage might result in memory leaks?
I didn't get the impression that it meant to introduce MVC/MV* as a concept, but rather show how Backbone fits into that style. But I also don't argue that the simplest backbone example would be client-side only, since you can basically hook up the server whenever you want.
It may have been fixed, since I haven't used it in some time, but when I was using it a few months ago it would: 1. Not delete internal references to models that were `destroy`ed. This was a known bug at the time for generic Collections that did not specify an explicit model. 2. Force you to manage your own views, explicitly. You can `bind` to the `destroy` event on models to have views auto-destruct, but this leads to a lot of memory churning before the GC picks up the things that were deleted. It's better to re-use existing views, but that leads to leaks. It's annoying to have to manage your views explicitly, in the end. 3. I'm having trouble remembering now because it's been a few projects since then, but I believe there was an internal issue that led to leaking memory when using some of the Collection functions on generic collections. That's all I can remember right now. Look at the issues list from a few months ago and you should see some issues relating to this.
Great response, exactly what I was going to write.
Technically, 2560x1440 is measurement of size, not resolution. Resolution is the number of "Dots (or pixels) per Inch". Current OSes typically declare that as 74 or 90 DPI, irrespective of actual resolution.
I've been working on a View manager to handle the life cycle of views, Backbone doesn't handle this for you and is an important part of the application. e.g. every time you type var view = new Backbone.View(... you will have to manually clean it up
Without demonstrating the fluid synchronization of Backbone with the server you aren't really showing an example of Backbone imo
In JS, there is a global named `undefined`, which has the `undefined` value. Problem is that you can redefine the global ("`if (undefined=x)`") and so comparing to `undefined` does not work anymore. This is one way to get the `undefined` value for sure (via an undefined parameter) and also with that name.
Do you have a github repo for that? I'd be curious to take a look.
Hey, it's in the works, http://github.com/thomasdavis/backboneboilerplate
Thank you! You got no idea how much that means to me. 
Well javascript in general, most people don't actually know how to program in it and wing it. But I am not sure you are hating on the notion of mainly able code. It's kinda one of the big selling points of Mvc patterns in JavaScript.ಠ_ಠ
Eating what the other sheep puke out on twitter isnt criticizm, its just stampeding. Either explain *why* that is true or dont make it part of the discussion, that opinion on its own just smell newbie-wannabe-elite.
I love Knockout, but I recently came across some weirdness that made me switch to Backbone for a project. Disclaimer: My problem below could have also been caused by my own inexperience. I had a list of users which was just a select box and a list of roles which were all checkboxes. When selecting a user, the roles that user is assigned should have shown as bold and checked (this part worked) and if a role was checked or unchecked, the text would become bold or regular. What I got stuck on was that when checking or unchecking a box, the text style wouldn't change with it except on the third try. I imagine it would work on the second try, but at that point the text is changing back to whatever it was originally anyway. I spent 2 days trying to figure out why knockout seemed to not "observe" the checkbox state until the second or third click and eventually gave up and decided to give Backbone a try. Steeper learning curve and there's a lot less "magic" involved meaning more code to write, but at least I was able to get it to work the way I wanted.
I'm letting them know so they can fix it. It's not meant to be a judgement of the ebook.
I was letting you know so it could be fixed, not to make any judgement...
I'd like to have a sample PSD available to try; everything I used failed.
that could also be argued to be a point of view that embodies the NIH-syndrome, reusing premade thingies is often seen key to speedy delivers. I can write my own operating system but i dont, i can do my own language but i wont, i can code my own framework but i got better things to do, like writing the actual logic of the application instead. Calling people that choose productivity with existing tools over technical aptitude with idealized own written code for stupid is rather... stupid. "its bloated because its bloated" is for me a tautology and doesnt give me any answers, im a ex 64k demoscener and know what bloat means, im not really arguing if the libraries in question are bloat or not, i just think its very bad for developers as a community to repeat arguments that might or might not have any relations to reality without forming your own opinions. 
More concretely. Backbone offers me nothing of value. It's application structure and architecture choices it enforces on me actively hamstring me. It's not that backbone is bloated, it's simply that given the alternatives available, there is no good reason to use it. Sure, you can use Backbone and get shit done. You can also use PHP and get shit done. You can use jQuery and get shit done. You can use ASP.NET and get shit done. That doesn't mean that any are of value. As for NIH. Yeah it borders on it, I agree. But the thing is that backbone is fundamentally flawed, hence it's worth doing something similar yourself. As for repeating arguments, the statement on twitter is my own.
The funny thing is that he doesn't even quote other people to add weight to his arguments, he quotes ***himself***. I've seen him do the same thing before in IRC.
Fun! When do you suppose the Web Audio API will be implemented in FireFox and IE? [My Stab At It](http://www.cs.mcgill.ca/~mcheva/musictoy/main.html#baaaaaaaaaaaaaaibaaaaaaeaaaaaaakaaaaaaafaaaaaaecababaiabicicabeaeeeeciaaciciabaababadaaabaeacjeaababababaaaaaaaaeeeeeeee)
thanks. And if you're not using the function as a constructor, you can simply do Object = { method: // } ? And if you're never going to access the method, and only run the entire function (which returns a value from the method), you can skip adding an object property all together and just use a variable? I.E. Object { var method = function() {} } instead of Object { method: function(){} } ?
I hate mediocre JavaScript libraries. 99% of JavaScript libraries are a) written by people who don't know what they are doing and b) mediocre.
When learning JS, I found the book "Javascript: The Good Parts" by Douglas Crockford helped demystify Javascript for me as well as gave me a working set of tools to move forward with. Additionally, there are lots of great learning sites out there. http://www.codecademy.com/ &amp; coursehero.com were great free resouces.
I have to agree with this. Sure it's a game, but I clicked into this thread expecting talk of something like the Impact game engine.
Hard to say. Right now Firefox and Chrome have their own competing audio APIs. They disagree on which solution is better. Perhaps I'll eventually use one of those libraries that can interface with both. I added a link to your pattern on the blog post :D
Nice, I added your pattern to the examples on the blog post as well :D
For one, ensures your references to $ haven't been thwarted by [jQuery.noConflict()](http://api.jquery.com/jQuery.noConflict/)
You owe me an hour. Had fun, thanks for sharing! 
&gt;Yours is rather different from the kinds of music I envisioned being made with it. Something [more like this](http://www.cs.mcgill.ca/~mcheva/musictoy/main.html#daaaaaaaaadaamaaadamaaadaaadaamabjecbaaaaaaaaaameaaeejecaeaaaaaaeaaaejecaaaaaaaabjecbaaabbfababeababababaaaaaaaaaaaaaaaa)? :P Do you perhaps plan on adding support for [sample selection](http://www.cs.mcgill.ca/~mcheva/musictoy/samples/drum/) and pattern sequencing (like in FL studio)?
If you don't mind, I'll be borrowing your patterns for my blog post ;) I'd like to add more features. I've been thinking of building a more serious web-based DAW type of thing, or at least something a little more capable. It wouldn't be very hard to allow people to select samples they want, or even to tweak synth patches with a few knobs and buttons. I actually wrote a simple virtual analog synth, but it has no visible controls. One of the main difficulties in extending MusicToy is building a competent UI for this. I'd like to keep things as simple and streamlined as possible. The GUI for MusicToy is very simple right now, but if I want to allow an arbitrary number of samples and synths, arbitrary lengths of patterns, different dialogs for selecting samples, editing synth patches, editing patterns and sequencing them, it can get complicated pretty fast. I've never used FL studio. I only have brief experience with a Linux DAW called LMMS. Could you explain the basic workings of pattern sequencing in FL? Since you seem to be familiar with computer music composition, I'd also be curious to hear other suggestions you might have about UI designs and features to add.
I had a few random issues with knockout, too, but nothing I haven't gotten around with 'computed observables' or playing around. (I found that the 'visible' binding looks crap if items disappear too late, so I used the 'css' binding instead. Turns out that that behaves more like a toggle than a simple boolean switch sometimes.) But overall I'm still happy. My code is not too bloated yet (written in coffeescript), so I haven't had much need for the extra modularisation of something like Backbone. Once I'm past the quick prototype stage I might take the plunge and learn it, too.
found this that could be helpful: http://www.bennadel.com/blog/1927-Faking-Context-In-Javascript-s-Function-Constructor.htm so using the Function constructor could be an option
I like checking out all my options and once I have time I will play around with backbone. I might end up with a combination using both frameworks, or just backbone if it's superior in every way. (The combination might be too bloated, or I might not like backbone, can't tell yet. :))
Thanks, man :) I may add to it... was really just a practice test. But, it is kinda fun.
Nicely done. Here's [a housey pattern](http://www.cs.mcgill.ca/~mcheva/musictoy/main.html#dbaaaaaaaeeeaaaaaaaaeeaaaaaaaanaaaaaaaaeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbaaaaaaaaeeeeeeeeabababab).
I built something like this in college, 8 years ago, when javascript was just a twinkle in most developer's eyes. It sucked ass. This seems to not have followed in its footsteps. Good for it.
I know it's pretty simple, but I thought I'd share it just in case :)
I made it even better by making it a single line: var Class = function(d){ return (d.constructor.extend = function(def){ for (var k in def) d[k] = def[k]; return Class(d); }, (d.constructor.prototype = d).constructor); };
Store these as variables and reuse that variable since you keep doing it $slider.find('.slide li') 
Nice! I didn't think to do that.
Did you save or fork it?
Upvoting this Kaz, great job and thanks for the information. Everything looks flawless and this is exactly the format I expect of my students! Have time for 5 and 6?(I understand if not, brb daughter calling lol)
Nope. You modify the original when you create the extension: var Class = function(d){ d.constructor.extend = function(def){ for (var k in def) d[k] = def[k]; return Class(d); }; return (d.constructor.prototype = d).constructor; }; var Node = Class({ constructor: function(n, w){ this.neighbors = n || []; this.weights = w || []; return this; } , addNeighbor: function(neighbor, weight){ neighbor.neighbors.push(this); neighbor.weights.push(weight); this.neighbors.push(neighbor); this.weights.push(weight); return this; } }); var Nooode = Node.extend({ constructor: function(n, w){ this.neighbors = n || []; this.weights = w || []; this.poop = "lakjsdflkjaskdflajsdlf"; return this; } , addFriend: function(n) { return this.addNeighbor(n,0); } }); var myNode = new Node(); myNode.addNeighbor(new Node(), 5); var myNooode = new Nooode(); myNooode.addNeighbor(myNode, 3); // why can an instance of Node access an instance method of Nooode? myNode.addFriend(myNooode) This is more like a mixin, with the odd addition of having different constructors.
Basically, you have a "meta-pattern" grid that allows you to trigger whether each pattern is on or off at a given time?
ah nevermind I see what you're saying. dammit.
Yeah, I totally see that now. Thanks for pointing that out :)
``` var Class = function(d){ d.constructor.extend = function(def){ var c = Class(def), k; for (k in d) !def.hasOwnProperty(k) &amp;&amp; (c.prototype[k] = d[k]); return c; }; return (d.constructor.prototype = d).constructor; }; ``` How's that?
Ugh terrible formatting. I'll just update the gist.
Correction: var Class=function f(b){b.constructor.extend=function(d){var e=f(d),c;for(c in b)!d.hasOwnProperty(c)&amp;&amp;(e.prototype[c]=b[c]);return e};return(b.constructor.prototype=b).constructor}
Escape the dash in your regular expression: [\\+\\-\n] Looks like it is now being interpreted as [a range](http://www.regular-expressions.info/numericranges.html) from + to new line, which of course makes no sense.
Damn it ! This is why regexps at 1am are not a good idea... It's actually a mystery that this works at all. Currently it's performing the exact behavior I want it to.
Komodo Edit is free (it's open source). http://www.activestate.com/komodo-edit/downloads
This is my first attempt at writing a javascript library, so if anyone has any code feedback (or feature requests for that matter) it'd be welcome! 
Another great resource if you want to learn by example is codeacademy.com It starts out a bit slow, but the later lessons have quite a bit of great material packed in!
I like my music [hard](http://www.cs.mcgill.ca/~mcheva/musictoy/main.html#pddcbebipedkdpcephpljcccpppbbghdpppegihdhppcanahpjphhkjghppiimebpngbdlophppeofhfpffejjhbhklapippplljhbanhgmphmphpafhlndd)
Fancy. But it feels weird to inherit from an object instance. Or maybe I just haven't been put in the situation enough to know when to properly utilize it.
That's some very amusing button sounds.
you forgot to go back in time with travel() and call install() earlier, that's why it didn't work :D
Great video. I'm going to check out the website
It's not the number of lines that matter. It's the accuracy and simplicity of use. Most people will have it in a library or cut/paste it.
I for one prefer the [Ember version](https://github.com/addyosmani/todomvc/blob/master/architecture-examples/emberjs/js/app.js). (I don't like its overuse of ternary ops though.)
s/amusing/horrible/g
Ah, I see. I've been avoiding delving into HTML5 audio for this reason. Whose API do you prefer? And, thanks for adding it :) 
I'm not sure. I think the Chrome API is too high level. On the other hand, the way to deliver audio with the FF API is kind of clunky. I wish we had something low-level like the FF API, but at the same time convenient to use, made as simple as possible.
Yes, that's what I meant by PCM. Oh wow, I had no idea that's how you did it. That really cool! I really want to try to make something now. Too bad I have work to do :p
Still programming with Flash. Haters gonna hate.
I absolutely love that music... Where do people even get music that awesome? Much less for use in a video? The video reminded me of a jQuery plugin a friend of mine developed a few years back: * LivescapeJS - http://brainacle.com/livescape-jquery-live-landscape.html * Demo - http://brainacle.com/static/uploads/livescape/index.html * Real world - http://pictoglass.com
I started messing around on JSFiddle. [Have fun!](http://jsfiddle.net/S3UN6/)
Or does it?... This list is interesting, regardless.
Loved the video but something that confused me about the video. Were the blobs staying in the array and being redrawn each time even if they had disappeared off the screen. If so would this not cause problems if the script ran for a longish amount of time?
Around 10k particles it was keeping my processors at a cool 80-90%, but it just wasn't stopping! As a side note, I switched up the code to see what the original was maxing out as by just removing the xSpeed/ySpeed 0,0 ones and the out of bounds ones. Never went above 300. I wonder how it would handle path groups instead of rectangles...
This is a great video to get over that mental hurdle preventing me to dive in. Thanks
Normally asking for coding help with an assignment is not acceptable, but in the case we have the following code: (function (window, document, undefined) { var power = function (b, e) { switch (e) { case (e &lt; 0 ? e : !e): // so that negative values are ignored return; case 0: return 1; case 1: return b; } return b * power(b, e - 1); }; alert(power(prompt('base:'), prompt('exponent:'))); }(window, document)); or (function (window, document, undefined) { var power = function (b, e) { return (e &lt; 0) ? false : (e === 0) ? 1 : (e === 1) ? b : b * power(b, e - 1); }; window.alert(power(window.prompt('base:'), window.prompt('exponent:'))); }(window, document));​
I just used Textmate, Chrome and Final Cut Pro. It was a lot of work. I now have a version of jsbin from Remy Sharp that I use http://code.seb.ly/osicik/6/edit#javascript,live - it'd be a lot easier with that! 
that's amazing! Coding kids for the win :) Have you seen code club? http://codeclub.org.uk/ Set up by my friends Clare and Linda and they need your help. 
Reading over a bunch of your comments in this post makes it sound like you really like re-inventing the wheel. 
What irks me is when someone uses their project to present their project, but it's buggy: the feature comparison table header bugs out when you click on certain headers (Enhanced Grid, extJS Grid Panel, etc.). Also, as someone who has recently investigated grid options for my work, the primary driver for me was being able to work with massive amounts of data. We had been using [Datatables](http://datatables.net/), but it croaks under extreme amounts of data. Using SlickGrid now and it seems to not have the same problems as Datatables does.
mention JQuery a bit there. JQuery is good for a step from copy/paste to writing their own scripts but using jquery can lead to similar problems when you start to look at more jquery plugins and use them - it's akin to copy/paste. Besides most modern browsers now support query selectors and as long as you're not using a lot of css filtering you can write your own pretty easily or just use the old parentNode, childNodes etc to get to the element you want. definitely agree with only using an ID to get to the root of the DOM you want to select from, but think it's best to use classNames as a way to get a handle of the element you want from there rather than structure (e.g. first li under a ul) because structure and node types change more than a classname.
&gt; 19 year old student and developer then &gt; “DHTML” era (remember that?) ... kinda doubting that the author does.
19 year old student and developer? Who, me? I'm not 19, and I'm not a student :)
Very cool...
&gt; up to 8x performance improvements FTFY. Still, very impressive.
Thanks!
I guess this.something fails if the 'something' property is empty - hasOwnProperty() tests for the existence of a property and doesn't look at the value. thing : { something : null } (thing.something) //false (thing.hasOwnProperty("something")) //true Just off the top of my head - someone correct me if I'm talking twaddle.
Why not contribute back to Underscore? Seems a bit strange to more or less reimplement the whole thing. I'm curious about the speed improvements, I'll have a look when I'm not on a phone. 
Just following up: I looked more into this, because I was unfamiliar with the term "bubbling." I found [this article](http://www.quirksmode.org/js/events_order.html), which I found to be very interesting. So apparently, like you said, in IE, clicking on the text box does not cause the button to switch to a checked state. That is to say, the event is not bubbling up to the button. So I reckon the solution MIGHT be to add an event listener to the button, so if the user focuses on the input box, the button will switch its value to that corresponding button. I'll give it a shot. Thank you for pointing me in the right direction!
The JavaScript curse?
what is this AMD thing?
I haven't look for too long, but from what I understand this guy has done some pre-compiling or some kind of additional compilation which leads to the improvements. So I imagine there is some kind of trade off going on here?
No, I hadn't seen seen it. Thanks for the link.
http://requirejs.org/docs/why.html
Well writing something that accomplishes similar things but with a different API, etc. is one thing but this appears to be spec compatible with the original. 
The future
How so? Unreliable like "don't use this in production," or unreliable as in "works often enough that users will just think they swiped wrong"?
In my case, I want my page to be switched to a certain page after I rotate my page.. The success rate is about 80%
Thanks, that worked perfectly.
You don't need jQuery, focus is a method given to you on elements so this works document.getElementById('myForm').focus()
Right. The readme and tweet qualified the claim with "up to 8x". Chrome was a challenge to get faster/equal using homemade methods, but I was able to using Function compilation. Also I still use native `Array.isArray` and `Object.keys` if available because homemade alternatives are unable to match the speed of native (because the homemade ones end up doing more work). Also keep in mind I've optimized more than those in the benchmark. I based that benchmark off of the one in Underscore's repo.
Building the functions allows me to inline code that would otherwise be an additional function call (reducing function calls increases performance). I use an `options` object so I can merge multiple together and reduce repeated code chunks (helps control file size bloat). I also minify the code strings (removing whitespace, shrinking variable names) during a pre-process to generate the minified build.
My instinct has always been that native ES5 methods are faster, in which case performance would be a tradeoff, but I haven't collected a huge amount of data on it... is this not always the case?
Yap, this is not always the case. I gave a talk at JSConf this year and presented several examples of simplified JS methods beating native JS methods (I'll try to get a screencast of my talk up ASAP). I also touch on this in the screencast (linked above and in the repo's readme).
I found this. Seems to be what I'm looking for. http://masonry.desandro.com/ 
Game is pretty slick indeed, one of the better canvas games I've seen. Its built using easeljs btw http://www.createjs.com/
Upvoted because it's a great question, and because of the AutoCorrect miscue.
Kinda inspired but i didnt watch it, just saw name. Anyway, i expected some code critics, because i know its lame.
*Not sure if serious*
what is basically happening in bind is that the function is called using a .apply which fixes the context of the function. (think of it as changing 'this' to whatever the context is) so 'this' has been hardcoded to the context and can not be changed.
Thanks for the reply. The only thing I can think to do is save every function of a Class within itself in another object, so the object would end up looking like this: newClass = { parent: _id, extend: function( ...) {}, baseFunctions: { init: function( ...) {}, update: function( ...) {} }, init: function( ... ) {}, update: function( ... ) {} } That way I can pass on the baseFunction list every time, and use that for binding.
What do you think of the idea of a preprocessor to ease development of more complex scripts in the same way?
This page has some good info on why requestAnimationFrame is superior: http://ie.microsoft.com/testdrive/Graphics/RequestAnimationFrame/Default.html. Notably, requestAnimationFrame can stop firing when the page is not visible while setTimeout will usually continue firing. 
I threw together a quick custom bind function that will keep a reference to the original function - that way, you can rebind it later if you want. function bind ( func, ctx ) { if ( func.origin ) func = func.origin; var ret = function () { return func.apply( ctx, arguments ); }; ret.origin = func.origin || func; return ret; } function print () { document.write( this ); } var printDog = bind( print, 'dog' ); var printCat = bind( printDog, 'cat' ); printCat();
Hmm I never thought of doing it that way! Thank you very much for the help.
Well, I'd like to point out that that page is not actually doing what it looks like it's doing. The numbers that it's displaying are not any kind of measurement. They're hard-coded into the JavaScript. The callbacks counter keeps climbing when the page is not displayed even in Chrome, which throttles callbacks. The choice of 1, 10, and 15 ms timeouts seems deliberately chosen to make `setTimeout` look bad. By their definition, if you set the timeout to 30ms, then `setTimeout` is *more* efficient than `requestAnimationFrame`. &gt; Notably, requestAnimationFrame can stop firing when the page is not visible while setTimeout will usually continue firing. Sure. I wouldn't call this a huge issue for HTML5 games or mobile devices though. In those cases you usually don't leave the page running in the background. And the article says that there's some advantage even when the page is visible, which is what I don't understand: &gt; So if you use `requestAnimationFrame` all your animations should become silky smooth, synced with your GPU and hog much less CPU. And if you browse to a new tab, the browser will throttle the animation to a crawl, preventing it from taking over your computer whilst you’re busy.
In firefox, setTimeout is definitely quite a problem - although more from many tabs performing things every few seconds (Twitter/FB? :() than from very small setTimeouts, as it does try to do some throttling.
No tude here? I think one animation in a background is all it takes on many of today's devices, especially on a low-powered devices. Just that animation on the linked page is enough to peg my netbook's CPU. Tabbing away causes it to drop to next to nothing. Realistically speaking, this is a huge win for CPU usage and almost certainly battery life. This doesn't seem minimal to me. Also minor increases in CPU can have a fairly large cumulative effect on battery life.
I'd love to see a benchmark. In the meantime, do you agree that the article is misleading in suggesting that you'll see "much less" power consumption even when the tab is in focus?
Because the whole point of CreativeJS is &lt;canvas&gt;
The example they link to is everything but smooth in FF12...
absolutely sure its hilarious
Not smooth in chrome either, though it may be b/c of jQuery.
Good stuff, man. I'm in the process as well. What are you using for/a learning resource/s?
I've found FSM very useful in JavaScript. Think of multistep forms, panels will show hide etc. Even if it's just a simple on/off state, I like to formalise the use of the state by wrapping it in a FSM. I've never used the mentioned library but I've had a great deal of fun using: https://github.com/jakesgordon/javascript-state-machine which is very polished and easy to use.
I would dig that :{D
Not much logic to critique but some style stuff. I started making a list but i realized almost all of it would be covered by [jslint](http://jslint.com/) or [jshint](http://www.jshint.com/)
Looks cool and great idea! :) Just a slight critique, which might benefit you in the future: use *verbose* variable names. Examples: _partcl_, _mod1_, _mod2_ why not _particle_? _partcl_ sounds cool and techy, but in the end it hinders readability. Also, why not _modificator1_, while we're at it? And _context_ instead of ctx. And what is cl1-3, clst1-3, sajz? The reason for me telling you off ;) is: after a few months, your code will seem to you like having been written by another person. It always is that way. So, be kind to your future self and use a naming scheme that he will be able to read. This holds true even more when there's coworkers involved! You might object that this will bloat your code, but that isn't the case: if a line of code gets too long, it's simply a sign that you're doing too much stuff in that line and need to split it up. Don't ever try to save space by shortening variable names. Also, "dude, calm down, I just hacked this for some fun" is not a valid excuse. ;) Just kidding. ^^ I hope you don't get me wrong here, I've been there, everybody's been there - it will just hurt you later on when you have to try to figure out what the variable "jfgrd3" was used for. Try striking a nice compromise between briskness and readability: * too long: _storageForAllTheParticlesThatFloatAround_ * too short: _prtclfld_ * nice: _particleField_ One other hint: use loops and arrays! Look what you could do with your code. Original: if (cl1 &lt; 0) clst1 = Math.abs(clst1); else if (cl1 &gt; 255) clst1 = -clst1; cl1 += clst1 if (cl2 &lt; 0) clst2 = Math.abs(clst2); else if (cl2 &gt; 255) clst2 = -clst2; cl2 += clst2 if (cl3 &lt; 0) clst3 = Math.abs(clst3); else if (cl3 &gt; 255) clst3 = -clst3; cl3 += clst3 New version: for (var i = 0; i &lt; 3; i ++) { if (cl[i] &lt; 0) clst[i] = Math.abs(clst[i]); else if (cl[i] &gt; 255) clst[i] = -clst[i]; cl[i] += clst[i]; } Cool, eh? This is called DRY - Don't Repeat Yourself. As a rule of thumb: very often when you have a number in your variable name (like myVar1, myVar2, myVar3), it's a sign that these should be an array. Even if you don't use it in a loop, it never hurts saying for example var myVar = [43, 23, 149]; where you can reference with myVar[0], myVar[1], myVar[2] instead of hardcoding the index.
Yes that part was so ugly, i knew there is better way to do it, i just was stuck, thanks
You wrote all of this drunk?
Potentially because Java and JavaScript are completely different languages.
I never thought I'd see a useful tech tutorial / instructional utilize (what appears to be) MSPaint... Interesting watch!
&gt; a pointer is any time in programming when two variables reference the same data in memory. Nope, that's aliasing. Multiples references to the same location is an example of references in use, but that's not a reference! The number of references is also irrelevant; the location could be referenced from one location. By convention, pointers allow pointer arithmetic and hold an actual address value (i.e you could print out the address). JavaScript's pointers can't do this, and so are typically referred to as references instead. By convention, there is a difference between pointers and references. His explanation of the stack vs heap is misleading. String constants will not be stored on the stack, and new strings will almost certainly be created on the heap. His example implies that strings are stored on the stack, always, and objects are stored in the heap. The memory optimisation he gives is milliscule, and not something any programmer should bother with (it's not even creating a copy of the function per instance, but per prototype). Finally circular references are only a problem in IE 6 and 7. It's not something we need to worry about now, especially for a new programmer who will think they do after seeing this! It might seem like not picking, but you can't teach terminology using the wrong words.
Javascript doesn't have pointers. Downvoted. Next.
Thank you, I will put an annotation for that **edit** In fact I just added annotations for all of your points. Thanks for the feedback. I still feel the basic concept was on target but I should research my terms more before the next one.
It scary how proficient he is at using it as well... for a while I though it was a spreadsheet until I noticed him erasing.
It's awesome that you've taken this feedback on board, and that you will do more research in the future. More learning resources are a good thing, we don't have enough, and it's great that your putting in the time to build things like this. However I would say your video is almost dangerous. The problem is that your half right on all those points, which makes the half-wrongs also look correct. Someone at a novice level, which is what this is aimed at, would not be able to easily pick up on those. Normally I'm not actually that pedantic about terminology; I often refer to 'references' as 'pointers', and so I wouldn't expect you to be 100% correct. It's just this video is not correct enough. Again, with more research, I'm sure you'll come out with some awesome videos in the future. Good luck!
Please guys if you know of a better tool I am open to suggestions! I thought about photoshop or even GIMP but I didn't think it would be quick enough to do this rough drawings.
Whatever works my friend, if MSPaint does the trick then who is anyone to say otherwise.
&gt; Notably, requestAnimationFrame can stop firing when the page is not visible while setTimeout will usually continue firing. And that's why I don't use requestAnimationFrame.
I think it's more lightweight and more mobile focus. I guess a better question is, how is it different from similiar libraries like zepto.js?
Well, it's for a subset of the users. It seemed like potentially a simpler solution than doing something like: switch (_get_user_id()) { case 1: do_user_1_actions(); break; case 8: do_user_8_actions(); break; // etc. } But maybe not. I don't know what I'm doing. :c
Wouldn't it be easier to just to pass the user id into a do_user_actions() function?
Pure awesome.
I tried using this on a mobile project several months ago, but was disappointed with the documentation and had some erratic issues. It may have matured since then but I've had better luck with Zepto. 
&gt; why is this in JavaScript in the first place My initial thought was to run some PHP code on the `publish_post` hook, but I realized that assuming a given author would *only* write one type of post was dumb and wouldn't work. Thus, JS. This way it can enact some defaults to make things easier most of the time but allow people to uncheck boxes and unset tags if they're doing something different. I went ahead and just did a single function with a switch inside (and deleted this thread from the listing so I'd stop getting orangereds). function do_user_actions(id) { _select_taxonomy('category', 8); // 'features' for everyone switch (id) { case 250: _select_taxonomy('category', 602); _select_taxonomy('home_position', 2001); break; // etc. } } It's still not "ideal" if such a thing exists. If the list of users who get default actions gets long, this will be a long, ugly switch statement/function.
From the article: "This particular extension is set up to handle one argument, but I would love to see your stab at a multiple argument cache function."
[Still my definitive reference.](http://jibbering.com/faq/notes/closures/)
That was a typo from the person I was quoting. I can fix that. And, I'm sure the book has a few typo's in it FYI. Sorry about that.
I downvoted this, because if you're going to link us to something, link us to IT, and not some page that talks about it and then links us to it.
Aren't there already jQuery compatible lightweight and mobile libraries? All I'm asking is, why would I be inclined to leave the jQuery ecosystem? I can't find any killer features for this library.
The technique he's trying to apply here is called _memoization_, and [Addy Osmani did a good piece on it](http://addyosmani.com/blog/faster-javascript-memoization/). Something's amiss, though; from Addy's article: &gt; One of the more easily readable memoization implementations can be seen below. This one is by zepto.js author, Thomas Fuchs. [...] Function.prototype.memoize = function(){ var self = this, cache = {}; return function( arg ){ if(arg in cache) { console.log('Cache hit for '+arg); return cache[arg]; } else { console.log('Cache miss for '+arg); return cache[arg] = self( arg ); } } }
No problem. I hope it didn't come over as too nitpicky, since the effect you did is really cool, not my intention to play it down. :D
This is a good article. However, at this point there are so many "How to understand closures" articles for JS, I feel we should be setting the bar rather high for new ones. I think this one falls a bit short. It concerns me because I spend quite a lot of time teaching JavaScript and I'd rather see a better signal-to-noise ratio. Since this article is ostensibly aimed at beginners, they should be extremely cautious about their wording. &gt; One of the key truths of JavaScript is that everything is an object. Sure, until Joe Beginner who keeps hearing this tries to do: var foo = 3; // many lines later if ( "bar" in foo ) doSomething(); ...and gets a TypeError and can't understand why. This is obviously a contrived example but I see this bite beginners all the time in real code. There's various other slightly misleading statements throughout. I think this tutorial goes on a bit too many tangents and ends up not covering any of them fully or well. For instance starting with the fact that functions in JS are first class has little to do with *understanding* closures. . The fundamental thing to understand in closures is free variables. What they are, and how JS handles them with the scope chain. This explains **why** JS's lexical scope behaves the way it does, leading to better understanding. The problem I see most beginners having is not understanding how the scope chain builds up and down over time. For that reason I think it's important to have examples that really emphasize the way a closure seals in it's free variables, even long after the scope has closed. IE an example that uses console.log() to show a time-line of how a function's scope opens, closes, and then how later on a closure can reach the long closed scope...in real time on say jsFiddle. The fairly static examples like used here tend to teach beginners c&amp;p design patterns like "this is how you crate private variables", but they do not necessarily cultivate an understanding of how and why they work. 
Nice, bookmarked you in case the need for it comes up. Sadly, we often have to set cookies to http_only to pass security audits, which prevents client-side cookie manipulation. :(
wat
slightly
Exactly. There is no such thing as a class in javascript. Still, the list goes on and on about class-centric terminology like methods and members. Javascript has *objects*, not classes. You can't have methods, sice there is no classes they can belong to. You *can* assign a function to an object member, but that just gives you individual objects that happen to have tje same function assigned to the same member. 
I dunno what's happening here, but it's worth pointing out that you should always put commas at the end of lines, and not the beginning of the following line. Otherwise some JS interpreter might come along and put a semicolon at the end of the line, thinking you just left it off, and then have an error. That's the theory anyway, I think. JSlint will detect this and give a warning or error.
http://hexmen.com/blog/2009/03/all-in-one-cookie-function/ &gt; all
To be fair that's a really good thing. 
http://en.wikipedia.org/wiki/Narcissus_%28JavaScript_engine%29 &gt;[...] this JavaScript engine is a metacircular interpreter, [...] the engine itself is also written in JavaScript [...]
First of all, JSLint only tests against the subset of perfectly valid javascript that it's creator - Crockford - subjectively praised as the "good parts". Secondly, commata at line beginning is perfectly valid and complies to the rules of automatic semicolon insertion in all current browsers. Semicolons are not blindly added at line breaks! If you want to use it that way is completely subjective and only a matter of style. Would be nice to learn more about this screenshot and whether the bug is in the browser or in jsperf.
Great page for nodejs javascript programmers
Ok, some are valid points which I simply solved by using CoffeeScript - there, many of your class-syntax gripes solved. But some things... seriously?! &gt; ...YOU MUST RUN EVERY LINE OF CODE to find all the errors What a relief that languages that compile all generate bug-free code, so you don't need to run every line of code. &gt; No Compiler Errors, Another Example Ok, cool, duck typing is bad, haven't heard this argument, since about one week. And developing since 2003 in Python, I can assure you, it is not much of a problem. Incidentally, this problem seems to be way more pervasive in Java, where lots of nulls get thrown around. &gt; Would *YOU* Let JavaScript Land Your Plane? I wonder which language *YOU* would let land your plane. If that is not Ada or a functional language with type inference I'm out. &gt; Life With Metadata (ActionScript) That example looks terrible and scares me off. Not a way to convice anyone. &gt; With Metadata Yeah, mighty fine example of an ugly Java-style API. I sometimes think that people use IDEs as excuse to write horrible, overengineered codebases which are terrible to navigate without an IDE. &gt; Library abandonment Uhm, so you suggest jQuery will suddenly be abandoned, without notice? Or that that might not be the case in other languages for an unspecified reason? &gt; Tower of babel problem: library dialects reduce skills transfer There's a thing called learning. You don't even need to learn a new language, many libraries can be learned in a short time.
FYI -- most of your problems with tooling aren't really valid complaints. There are plenty of tools that give you instant errors, completion/intellisense, etc. 
why would you put the commas at the beginning of lines anyway?
Yea, you should only use a library like this to store non-sensitive information, preferably in the smallest form possible so as not to increase the payload size of HTTP requests too significantly.
Awesome that he pulled it off. Not awesome performance...
I stayed away from Node for way too long, not wanting to believe the hype. But after using it for a few months, wow, i am nothing but impressed. It is such a rich, elegant and powerful platform.
"Great"? It's your blog so I think you are a little biased here. Also, everything on there is like copied-pasted from `README`s.
Some people like it because they can delete the last item in the list without having to remember to remove the comma from the previous line. Not me. That would bug the crap out of me.
nodejs is fine and the information is decent but adding history on scroll is annoying when I want to leave :-(
A few months ago, I implemented something similar using my own JavaScript. It didn't handle inertial scrolling in iOS and OS X very well. This one doesn't either. :(
Just discovered this myself and saw that you'd already posted it (subscribing to r/javascript now). Belated upvote, much deserved. How cool is this thing? Definitely only worked well in Chrome, as the author had warned. However, in the context of an HTML5 game being sold in the Chrome web store, it would be fine because you know everyone is using Chrome :) Also, the author mentions that the DSP is 'quite rudimentary', so perhaps there is some optimization to be done, which may improve its performance in other browsers. Seriously, How cool would it be to casually drop in a little keyboard widget in your blog?? 
It's annoying to have the scroll tab jumping around like that. I'd rather just click a load button or something.
Here are mine: * [jsgui](http://prettydiff.com/jsgui/) - this is a graphic user interface written in JS * [Pretty Diff](http://prettydiff.com/) - this is a diff tool written in js * [MML Slideshow](http://mailmarkup.org/slideshow.xhtml) - this is a slideshow application I wrote in JS. It always maintains its aspect ratio and fills screen The code in each of those examples is somewhat large, but it is pretty simple in what it does and how it is written.
Dojo's testing framework has support for async tests, I can't remember ever having used it though. http://www.sitepen.com/blog/2008/05/19/creating-asynchronous-tests-with-the-dojo-objective-harness/
I've done a lot of async testing with DOH following the pattern outlined in [this tutorial](http://www.sitepen.com/blog/2008/05/19/creating-asynchronous-tests-with-the-dojo-objective-harness/). It works pretty well, I think, though only OP can judge if it's right for him.
It's what GitHub is using for their new graphs! [source](https://github.com/blog/1093-introducing-the-new-github-graphs)
Ah yeah ... too much jQuery in the past few days ;)
Sounds great, keep up tje good work :)
I use Mocha with Promises (which provide then and done callbacks) and it's pretty nice. My code always goes along the lines of: it('is awesome', function(done) { obj.doSomethingAsync().done(done.bind(null, null), done); }); The bind is kind of lame (it prevents passing the error in), but it's not too bad.
Thanks for the suggestions. I'm more interested in learning from the ground-up for now as it really is just for the experience. As I progress though, I know I'll probably work my way into some frameworks...
Thanks for the detailed response. I've got a friend who's a whiz with web development, and he's always cautioned me about using jquery. His rationale is that as soon as you need to make something that jquery doesn't support, you'll be SOL. I'm trying to just put my head down and work through the nitty gritty, but I totally understand what you're saying as well... I'll probably end up somewhere in the middle, but regardless, I'd like to have at least some knowledge of what I'm technically trying to accomplish before I use other frameworks to gloss over it. That being said, I figured classes are what I'd need to check out...I'll do more research per your suggestions. Thanks!
Thanks for the input. I think you can appreciate my desire to learn the down-to-the-metal stuff then, as it's the path you started down. I'll end up somewhere in the middle, ~~but I think at my level of knowledge, going into the world of any particular framework may just confuse me~~. As time progresses and I get more comfortable with the basics, I'll take your suggestions into account.
That's pretty much the kind of deferred integration I'm looking for, yes (but with jQuery's deferred rather than Dojo's)
STOP. Delete any code that uses mysql_ functions, replace with Zend, ORM, or PDO.
This is the correct answer, and bonus points for not resorting to jQuery like most do...however I feel one point should be made considering the method you chose. .getElementsByClassName() is not supported on IE versions &lt; 9 unless you use a polyfill...just felt that should be mentioned. 
Have you seen [JSTestDriver](http://code.google.com/p/js-test-driver/)? It has an [async test case](http://code.google.com/p/js-test-driver/wiki/AsyncTestCase).
I feel like a bit of explanation is needed, despite the fact that you are correct. mysql_ functions are easily exploited for SQL injection...this is because it relies on you to escape all input properly. Abstractions such as PDO, or ORMs help prevent this by essentially forcing you to do things the 'right' way.
Good point. Since there are only `div`s (and we want them all), `getElementsByTagName` would also do the trick.
First one is what is a ternary? Second one is why does it need to store the value of hours, minutes, seconds after you grab them?
Nope. book for my class. It's still using the old html. And using really old methods of doing stuff. I've seen the getElementById. but haven't used it yet because we haven't learned that and i dont know if my teacher will mark off for using it.
That's entirely dependent on the quality of the framework. Even my favourite framework, Symfony, has taken some architectural decisions that I don't agree with. (I hate, hate frameworks that treat objects as strings.)
Ternary in general is like binary, but implying three. A binary operator is something like addition, in that it takes two inputs: `a + b`. A ternary operator (usually the one used as a conditional), takes three inputs: `a ? b : c`. You should move your JS out of your HTML by putting it in a separate `.js` file, then referencing that file (inside your `head` element): &lt;script type="text/javascript" src="name_of_file.js"&gt;&lt;/script&gt; This creates better separation of the different parts of your application, and allows your Javascript to be used on other pages. Of course, that's not a concern for this particular example, but it's good practice for larger applications.
Force looks like [aharef](http://www.aharef.info) link mapping... would be very nice to have that in html5 instead of an applet.
It's for an assignment for school. The code I just sent him isn't even in the book haha. What we learn is shit. It's like 10 year old javascript. I know I should make it an external javascript file. But for this assignment, it's going like this. Thanks for all the help man. As a token of gratitude. Do you play games on the PC?
STOP, collaborate and listen.
There is nothing I know of which is simple, you are going to have to write some code to accomplish this. The linked site is flash based...while I think all of what you see can be done in HTML5 + javascript + css3...it will have some caveats as well as (once again) requiring you to write a good bit of custom code to accomplish this.
I had a friend do something similar as a joke by abusing the jQuery Cycle plugin with easing. You might want something similar. Approach it like a photo carousel, but spread across multiple sections.
I want to be able to show the last 15 seconds
I think all you need is CSS transitions, no JS. 
From my experience, all the common platforms like highcharts and others should be able to handle that much data. I'm not sure about 10ms, but it's not impossible to be close to that. You shouldn't have much trouble.
Define "real time." Do you mean streaming? What is your tolerance for latency?
I wasn't aware of the include command. This looks awesome :D
You are talking like jQuery is something different from Javascript. jQuery *is* Javascript. It has a slightly novel syntax with the function chaining and how you use the jQuery object ($) for allmost everything, but is is pure js. For a newbie only calling jQuery functions, I can see how it seems like somethin separate, but we should not encourrage that magical thinking. Of anything, jQuery will teach a beginner some great habits, like using functional programing instead of messing around with strings of js code and eval(). (I had no idea how to do functional programming until I stumbled over lisp around 2007 and discovered other languages also supported those weird concepts.)
I don't think I did anything of the sort. He has a friend cautioning him about using jQuery and I felt it was a mixed message I was trying to clarify why such an opinion might exist. While jQuery is a very powerful extension to javascript, I think it's still important that people know basic js and can perform actions without it should they need to. If you learn only jQuery and stumble on some regular js that you can't read, you can end up stuck and confused. Good habits or not, it is a crutch and just because a ton of people use it doesn't mean you should be unaware of the alternatives. The ($) is not even exclusive to jQuery. If you think jQuery is just part of js and stumble on a mootools project you will again be very confused. I think it's important to have a distinction between the two so that people don't fall into the bad practice of only knowing jQuery or thinking it's pure js. Even worse, believing you know js because you know jQuery and thinking the two words are synonymous. I don't think it's fair to say jQuery is "pure js". Similarly I wouldn't call symfony pure PHP. I'm not sure I would urge someone to jump into MVC before learning some simple PHP, despite the great habits they can learn. It's important to learn how to walk before you run, just in case you need to slow down without falling.
You could do this with d3 and especially js serverside to just take the data and send it down the pipe to your page that is waiting to graph it.
Hmm, well frameworks such as CodeIgniter or Zemd will actually help you do stuff a better way. There is merit in learning naked PHP, however the process of gaining experience and making mistakes is a long one. Essentially you'll have to get a it wrong and make lots of anti-patterns before you even start to understand stuff. Some tips: * Read as many PHP security tutorials as you can get your hands on * Read into Separation of Concerns. * Read into Don't Repeat Yourself. * Avoid mysql_ functions and other deprecated/dangerous things. At the very least use PDO. If you are going to go for an OOP approach, I personally think using an ORM such as Doctrine is a great idea, however some people don't like this approach (which IMO is shortsited but whatever).
https://github.com/languages/JavaScript/most_watched
I disagree. Popular frameworks will actually teach you to do things "the right way". Never use bottom-level database access functions in production code! Use it as a learning experience. But be aware, that you will be learning things you will unlikely use in the future. Don't get me wrong. It is good to be aware of the inner workings. But you will only need it if ... * ... the library you use does not (completely/correctly) expose all internal DB functionalities. * ... you need to optimise things. Also remember: "Premature optimisation is the root of all evil" (Knuth) It is *much* more important to know your database's SQL dialect properly!
I messed up in my post: MDB2 should have been PDO instead!
Please use a condom.
Whats wrong with jQuery? 
That sacrifices readability to conserve space, whereas the purpose of 80 character line lengths is to improve readability.
I think it's been demonstrated here that such a substitution doesn't perform near as well as the 'long' version.
Nothing...but it isn't always necessary...it also has performance hindrances (overhead) when compared to direct, native calls.
I seem to be having shader issues with complex shapes.
Could not initialise shader VALIDATE_STATUS: false, gl error [0] initMaterial Three.js line 416 Also, it looks like this as [one example](http://i.imgur.com/MTj2g.png) Edit: I just tried a newer computer, it looks fantastic and it works. I guess this slightly dated computer is missing something. [screen](http://i.imgur.com/CQMFN.png)
That particular three.js example doesn't work - it fails to initialize WebGL. And your demo halts inside your initScene() on this line: renderer = new THREE.WebGLRenderer({ antialias: true }); ~~So the problem certainly seems to be with three.js~~. If you still want the stack trace, let me know. I am on github.
Yes, this one isn't working for me either on the older computer, webgl shader I guess. Could not initialise shader VALIDATE_STATUS: false, gl error [1282]
I have this problem too. ...Dammit. I love 3D'y stuff...
For the examples that work for me, they're all great. I think it's just a problem with a lot of us having old computers that don't support WebGL or some Chrome bug.
Yea beside being flash looks like the page uses Dojo
IMHO, this can all be accomplished by CSS but considering all of the transitions taking place on the example link will be expensive in multiple instances. Multiple gradients and rounded-corners in transition like that will create a slow and choppy experience.
&gt; It depends on what you mean by fine. No it doesn't Dorothy. &gt; I recently created a chart with 66,000 points in d3 As someone who has extensive experience in numerous language, and with still-running time-critical code in many government applications, I have had far more experience in d3 and created charts with far more points than that. You aren't doing it right. &gt; that was fine as a static object That's not what 'static' means. &gt; but lagging to the point of rage-quitting when I tried to interact with it. Perhaps you should stop making such amateurish attempts. You're doing it wrong. As someone who has experience in dozens of languages and someone who has worked with many complex projects, I know amateur attempts when I see them.
Are you ~~on Windows XP or~~ using an AMD graphics card on linux? You could try and force Webgl. Start chrome with the "--enable-webgl --ignore-gpu-blacklist" arguments. Be warned, there might be a reason why they blacklisted your gpu (instability, etc) but they went a little crazy when creating the blacklist.
Are you on Windows XP or using an AMD graphics card on linux? You could try and force Webgl. Start chrome with the "--enable-webgl --ignore-gpu-blacklist" arguments. Be warned, there might be a reason why they blacklisted your gpu (instability, etc) but they went a little crazy when creating the blacklist.
Are you on Windows XP or using an AMD graphics card on linux? You could try and force Webgl. Start chrome with the "--enable-webgl --ignore-gpu-blacklist" arguments. Be warned, there might be a reason why they blacklisted your gpu (instability, etc) but they went a little crazy when creating the blacklist.
I made something simple like this that didn't use any kind of library (for a similar thing). I've put it in a gist: https://gist.github.com/2563274. It was basically a friend asked me to plot points in real time with a web server. In my case, I was experimenting with websockets in c#, so the code depends on that, but it should be pretty easy to figure out what it's doing.
Thanks. I always run chrome with those options, because I do some WebGL development myself. (I just verified my runtime options with chrome://version.) My card (newish NVidia) is not on the blacklist, and I'm running the latest 290 driver. Not sure what's going on, but it's got nothing to do with physijs or three.js :) 
They were both windows 7 computers, I don't know about the gfx card.
Looks like you have a [stalker](http://www.reddit.com/user/SloneCypher).
Correct me if I am wrong, but CSS transitions are implemented in C ( or C++? Not sure what FF and Chromium is written in) and therefore almost always faster than any effects in JS. Some browsers already use GPU acceleration when drawing CSS filters *and stuff*. Check [here] (chrome://flags/) under *GPU Accelerated SVG and CSS Filters Mac, Windows, Linux, Chrome OS Use the GPU to accelerate rendering of SVG and CSS filters.* EDIT: I don't think you can implement the background music and clicking in CSS. (Not sure I ever want to be able to, I suck at lying to clients. ;) )
I just ran into this, thought you might find it useful. #4 is fairly close to what you are trying to achieve. http://tympanus.net/Tutorials/OriginalHoverEffects/index4.html
Thank you, thats what I was looking for.
You are absolutely right. There is a good reason that wiki page has the following disclaimer at the top: &gt; Outside of the 140bytes challenge or other code golf challenges, please be considerate and don’t pre-minify code you wish to share with others. We have minifiers for that.
Looks good to me, this is awesome. One thing is that the FPS doesn't seem to be correct, it shows a steady 60 FPS while it's clearly lower (on the shapes example once it gets to a few hundred shapes)
This seems to be a somewhat common source of confusion. I should have removed the FPS counter or made more effort showing what it's counting. The physics runs in a separate thread while the graphics are rendering at 60fps, which is what the FPS stats is showing.
Very informative, thank you. I see you got a little hate for the video format but I found you easy to listen to and you did a good job talking through the examples.
I think you could explain the concept of deep and shallow copy a bit more thoroughly. People who do not have a good grasp of reference types will probably find nested references doubly hard.
He's been doing it for years, and is desperately trying to trick people into thinking I'm someone I'm not. He's had several dozen accounts banned. A few people have even fallen for it. I don't really care, is the thing. :) I kind of like knowing what an enormous chunk of his life he's wasted on a failed attempt at online slander. But thanks for the heads up.
I feel bad that he's right. I feel like I should watch it now lol
Why the hell down vote this? Its a well made library and its free.
A little explanation on what's going to happen might go a log way...
You might want to explain what the environment is like (are there walls)...or even if you can turn around with the mouse...or if you move with wsad?
You're doing this for free. Do what you want. Don't let people tell you what to do.
I found the function to be more flexible... in my project, I store the _application state_ in a global model, and the getState function is just `return app.get('state')` I'm thinking of adding support for defining state at the time of view creation, though. Something like: var v = new Backbone.StatefulView({state: 'synced'}); What do you think?
There are so many fucking buzzwords in this article I wish web2.0 was the new thing.
First, very nice critique. You offered some really great observations that will be very helpful to the poster. I just wanted to add that I thought your notion of discrete steps was a great idea for this type of game. I was thinking of [Q-bert](http://en.wikipedia.org/wiki/Q*bert). It has discrete steps and I think you could encode the four possible directions with sound fairly well. Think about it? How do blind people get around in the world? In small discrete chunks. Bed to drawers, drawers to bathroom, etc. Having a free and open space is a bad match for audio.
Strings are immutable reference types. `var a = "&lt;5000 characters of awesome&gt;", b = a;` is not going to make a second copy of the value of the string. Of course, this is unobservable from within JavaScript. I would also avoid the term "pass by reference" because the textbook definition doesn't apply, even though the misconception that it does is extremely common. And saying that functions are mutable makes me a bit uneasy. Technically they are, but the *function* part of the function is immutable. (BTW in IE8, if you do `var x = function y(){};` then setting a property on `x` doesn't set the same property on `y`. Fun times.)
Can you elaborate on #2? I haven't delved into the code yet but the whole idea seems interesting. I partly agree with #1 ; however, to be fair, the removeListener method is painful to use and while I actually would implement it for compatibility, I'd also try to provide alternatives. (for example, I know some frameworks I used in the past returned an identifying object as the result of the method when you attached a listener, that could then be used to remove said listener, which, to me, seems more intuitive than saving the listener function itself)
Yeah, most integrated graphics are blacklisted. You can still force webgl using those arguments, the worse that can happen is the computer freezing.
/r/jquery
I guess you read only the first sentence of the article, as this is method is mentioned in the second one.
Things to do * Stop procrastinating, must not go to /r/funny for some days * actually do some thing in JS
Yes! This is an awesome project. I used it to create a bookmarklet that enabled collaborative editing on any text area. http://www.screenr.com/F4x8 (sorry for the poor audio)
MET12 code doesn't work.
Or if you are already loading query, you can just use $.extend(), correct?
100 lines? They forget to mention 1000+ lines worth of js libraries that allows it to be that small...
I didn't see them. Socket.io isn't a buzzword.
Oops! Hopefully fixed it up.
The javascript of the widget automatically generates a blurb of HTML -- The easiest thing is just to restyle it with CSS. Add something like the following to your CSS file. You can use an inspector in your web browser to adjust, if this doesn't do what you're looking for. .reddit-title a { display: none; } .reddit-voting-arrows { display: none; }
Checking out the code I came across one tiny thing that I recently ran into as well. var lowestF = 999999999; Use Infinity instead var lowestF = Infinity; Just thought I'd share!
Can now be accessed through: [minijs.net](http://minijs.net)
go ahead and save it as txt, and then you can rename it to whatever.js. JS doesn't need to be compiled or anything, so it really is just a text file. the .js extension just helps you and the browser know what to do with it.
A JavaScript file is only a text file. To be used as code you have to give it to a JavaScript interpreter, which is most typically a web browser. The most common way to supply it to a web browser, for parsing, is to supply it in HTML script tags: &lt;script type="text/javascript" src="path_to_my_file.js"&gt;&lt;/script&gt; or &lt;script type="text/javascript"&gt; "my javascript code"; &lt;/script&gt; The first of these examples is the preferred method for several reasons. The separate closing tag and the type "text/javascript" are compatibility with IE8 and lesser versions. In newer browsers you could serve the tag in XML fashion as such: &lt;script type="application/javascript" src="myFile.js"/&gt; Here is how to serve JavaScript in a XML document unrelated to the HTML namespace: &lt;xhtml:script xmlns:xhtml="http://www.w3.org/1999/xhtml" src="file.js" type="application/javascript"/&gt; This last example obtained via Stackoverflow: http://stackoverflow.com/questions/384639/how-to-include-javascript-in-xml-document 
No idea what you're saying, sorry. There must be an easier way to save it as .js?
Edited. Thanks!
I would start by looking at [RaphaelJS](http://raphaeljs.com/). It is a vector graphics library that is a wrapper on SVG, but is able to fall back to VML for older IE versions.
I think it doesn't move diagonally.
Correct. For the time being, it doesn't move diagonally.
funny thing is that it doesn't show multi fastest path ways? it find the only the first fast path way and presents that....... why not show both with multi-colors 
 while (1 == 1) { if (!bb.parentBox) { break; } Why not?: while (bb.parentBox) {
I'm having trouble getting it to work (FF 12.0) :( Though works fine in Chrome...
Umm... Even though the OP's link is encrusted with anti-usability-pattern crap, I wouldn't call github the original source on this. The blog post gives much context that the straight github link doesn't. 
Misleading? I never claimed I recognized any spec, I didn't even know there was one. I also don't care if you think the factory pattern is ugly. I use it because its much more powerful than prototypes. As for "The implementation is inefficient"; I'm open to criticism but "The implementation is inefficient" doesn't tell me anything helpful. "notion of bubbling"; How would I implement this?
Well, the current implementation assumes that `getState` will return a string that's the current *state name*. States are external to the view, really: it just needs to know the current state's name, not all possible state names. It only tries to match state names to a event handler after the event has actually occurred. Also, at any point in time, there can be only one state that's active.
Cool. It'd be awesome if it was a bit cleverer and could just figure out what to fill so you don't have to add the `fixie` class to everything.
I'm pretty sure you need at least a dev version of Chrome, and going to about:flags to turn on "Enable MediaStream" to use getUserMedia. I think Opera has it working already without flags.
Firebug's console.log usually calls the prototypic toString-primitive to coerce whatever the object contains into readable output unless it is identical with the native method of Object, in that case a JSON-Prettifier is used for output. A function without return statement usually yields "undefined" as output, therefore firebug returns "undefined". Chrome developer's console.log always uses an internal version of the toString method to format the data and is therefore not affected by this behaviour. Just for fun, you can set toString to function(){ return "[You are trying to coerce this object to string]"; }
You're welcome.
I'm sorry, but: for ( ; i &lt; l; i++ ) { Is horribly non-standard and harder to read. MAYBE if they went one step further and made it a while loop (which is not terribly standard, but it reads better): var ret, out, i = bar.length; while ( i-- &gt; 0 ) { out = bar[ i ]; if ( !out ) { ret = fum( out ) + baz( out ); } } return ret || fum('g2g'); It would be more readable. Of course, it does reverse the output... so if that's a problem it won't work. I also have to say, I don't buy the spaces around the parens/brackets make it easier to read. It actually makes it harder to read because it makes it appear as though it's a separate thought to me. Edit: I also removed the unused 'hello' and 'num' variables because they only add clutter since they aren't used...
Oh wow, I wish I saw this before hand. Ya I basically made what he made.
can't say I've ever wanted that sort of dumb dummie text.
would love to hear peoples ideas!
Yeah, that one example doesn't fly for me either...
almost: $.extent by default will make a non-recursive (shallow) copy of the source object, you have to explicitly use *true* as the first parameter. Even in deep extend mode, it won't copy undefined properties (which for whatever reason you may want to keep) nor it will recreate instances of native types(RegExp,Date,etc.). Also, looking at jQuery's source of $.extend it seems to me that it can't handle references to other objects;well, it deals with cyclic ones, but just skips them. Anyway, this jQuery function was designed more for properties merging than for complete copying (duplicating) an object.
Can you add dummy content according to the context it's need in? In other words, does the Lorem Ipsum plugin automatically add a random image src for an `img` tag, several paragraphs for a `section`, a few words for a header, etc? If not, then I don't see how it could possibly be better or quicker than adding a class name to an element.
Am I the only one who thinks the first version of the code is more readable?
Sure does. When i type "lor(tab)" (i mapped it for a shorter keyboard shortcut) it pops up a little select menu that has things such as 1 sentence, 1 paragraphs, 3 paragraphs, etc, etc. It gives me every length of dummy text I could use, from headers to long blurbs. As far as random images. http://placehold.it/. Can create any size. I use a custom snippet to quickly add in any image width and height i want. I know it sounds like a lot of work when you read it, but i've been using these shortcut commands for so long, it's a second process. In combination with zen coding, I fly writing markup. I think it's a cool idea and well implemented.. but I don't like adding additional CSS classes or additional scripts if I find them to be unnecessary (DRY, KISS principles). If anything, if I were to use this, i would remove those classes and scripts at production time, but that amount of work does not outweigh a few simple shortcuts from any powerful text editor or IDE. 
Cool, thanks for the response. I'll have to check it out. I dislike this trend toward handling all of this kind of stuff client-side, and there is some added value in having dummy content in your actual markup vs. injecting it in the browser.
If I had died of a heart attack on my birthday your karma would've dropped to negative infinity.
On my Android phone, I can't scroll the web page in either orientation without first zooming in.
&gt; We moved the inline 'var' declaration for i from inside our loop to this same list. bar.length was cached in this same list under a variable l to avoid having to recalculate the length of bar each time. This part is just wrong. First of all, `bar.length` is not "recalculated", it's an attribute, not a function. The only "problem" in writing `bar.length` in the loop is the access to the attribute of an object which takes up a few more cycles than accessing a variable, but it's a common optimization that is done by most, if not all modern javascript engines.
Yes. Its definitely not recalculated. for example if you splice an array while iterating over it the number of iterations is the same (often creating an exception). 
Good point of differentiation to make. When I ran the OP's code in my own console, I had reflexively added the 'var' keyword.
Sorry, when I originally ran your code I had reflexively added the 'var' keyword. Ultimately, the text that you quoted is not the incorrect part of my original comment, but this part is: &gt; such as `a = new A()` instead, that should have read: &gt; such as `var a = new A()` It is correct that variable declarations do not return a value, but variable assignments do (as noted by [YmMotHimself](http://www.reddit.com/r/javascript/comments/t4yfl/existence_of_a_tostring_method_makes_an_object/c4jlr1w)). As for your original post, I'm not sure what your question is. I did notice that the last assignment returns a different result than the first, but `a` is still defined. However, if you use the built in Firefox console over Firebug, the last assignment results in a `TypeError: aBody is undefined`, and that seems rather curious... **EDIT:** Alright, so the first assignment results in the console returning `Object { b=function() }`, while the second assignment results in the console returning `undefined { b=function(), toString=function()}`. The reason why the second one shows `undefined` instead of `Object`, is because Firebug is calling the `toString` method internally, which returns `undefined`, which gets cast into `"undefined"`. If you were to do: A.prototype.toString = function () { return 'sidereal6'; }; Then `a = new A()` will show as `sidereal6 { b=function(), toString=function()}` **EDIT2:** Didn't see a-t-k had already provided the correct answer. Sorry!
This demo is a bit more fun: http://jsfiddle.net/ewAND/1/embedded/result/
Nice job, looks good! Here are some tips I noticed. Mostly some performance tips since I'd assume that in an A* implementation you would want to stress performance. I mocked up some simple jsperfs for my points (and to make sure even to myself that I'm not just passing on bad advice): setTimeout('searchNextBox()',5); can be replaced with: setTimeout(searchNextBox,5); This allows you to directly reference a function for things such as not needing the function to be in the window object. The Form you use also requires an eval, which I would assume would be a minor hit. (The performance seems to be very similar and negligible, however the direct reference is a lot more useful and generally considered a better practice as it doesn't use an eval() string.) (http://jsperf.com/settimeout-eval-vs-reference) for (var box in boxesAround) While definitely simpler to use and even a bit easier to read, the in operator is much slower than a traditional for() using an iterator. The in keyword should only be used for iterating over an object (Also to note that if you find yourself iterating over an object frequently, you should probably consider using an array instead). (http://jsperf.com/for-on-arrays) Box.getF Essentially any methods on a class should be added to the class' prototype. This allows every instance of your class to use the same method, otherwise every instance must keep it's own instance of the method. You won't really notice a performance difference in use of the methods/objects, but creation is much quicker as each object does not need to recreate the same methods, as well as your footprint in memory will be much smaller. (http://jsperf.com/class-method-declaration) It's as simple as changing it to: function Box() { this.color = '#FFF'; this.clickColor = '#AAA'; this.searchColor = '#00F'; this.clickable = true; this.clicked = false; this.searched = false; } Box.prototype.getF = function() { var a = end.x - this.col; if (a &lt; 0) a *= -1; var b = end.y - this.row; if (b &lt; 0) b *= -1; var bb = this; var lfs = 0; while (1==1) { if (!bb.parentBox) break; lfs ++; bb = bb.parentBox; } var f = a + b + lfs; return f; } The last recommendation is a bit more major. I notice that you are simply storing all the boxes in 1 array, and constantly iterating over that array. I would recommend also storing your boxes in nested array so you have direct access to them by row/col. What I mean is, for a global array define: var boxesbylocation = []; for(var i=0; i&lt;30; i++) { var newrow = []; for(var n=0; n&lt;30; n++) { newrow.push([]); } boxesbylocation.push(newrow); } After the line: boxes.push(box); In layoutBoxes() Add the logic: boxesbylocation[col][row] = box; The function boxAtRowCol() can then be optimized to: function boxAtRowCol(row, col) { var box = boxesbylocation[col][row] || null; return box; } I would think this would be a large performance increase by itself. That's mostly what I noticed quickly. If you have any questions about what I said, just ask! Keep on coding and making awesome things and good luck!
Wow! Awesome advice! I'll try digest this tomorrow and see how much tweaking I can do. Thanks.
Wow, this did actually scare me!
I'd start with this http://www.codecademy.com
Also [Javascript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;qid=1336090054&amp;sr=8-1)
I wonder why it doesn't work on the iPad
I actually have that! But I think it's more geared towards people who are already familiar with the language, because I think it was pretty over my head.
[Eloquent JavaScript](http://eloquentjavascript.net/) is awesome. It starts out gently enough for beginners, but it teaches you a lot by the end--everything from objects to closures to the DOM. It also has an interactive console that you can practice in as you read. Amazing quality, considering it's free.
Thank you very much!
Read through it (the entire book) after every "level" you gain in JS. There is SO much in that book. You'll get something out of it every time. After you go through Eloquent Javascript, read it again.
http://www.codecademy.com and then http://tutsplus.com/lesson/hello-jquery/
I do! I actually just breezed through the first course.
hey, don't really understand what you mean by treading on the toes of node.js?
Congratulations and best of luck.
http://addyosmani.com/blog/ has a bunch of good posts, pdfs, and links. 
I second everything in this thread so far. If you decide to learn jquery on top of plain javascript, check out http://jqfundamentals.com/ 
I agree with this. I reread The Good Parts every couple months and never fail to gain something new from it everytime. 
Washing my pants
&gt; I'm rather sick of all the excess trash that must be typed in languages I'm sick of lazy coders, and coffeescript.
You should read Alexey's guide to internships in the Bay Area: http://alexeymk.com/an-interns-guide-to-a-summer-in-the-bay-area
 function boxAtRowCol(row, col) { return boxesbylocation[col][row] || null; } What is the point of overloading the accessor with a one line conditional? To test if it's `undefined` then return `null` instead? Why? Surely you can just assign `var thing = boxesbylocation[col][row] || null;` at any point?
Sent just to pick up food? Is this a thing at SF startups for interns? I'm on the east cost and have never known a friend that did an internship as a software dev do that stuff. Right on with the point getting the side projects, which are NOT a bad thing, you're there to learn and you do so by being given the low risk projects. Don't be afraid to ask for help, but don't necessarily rely on other debs to give you every answer, being a self starter and a good learner is critical to becoming one of the A players people always talk about. Also, if you continue to kick ass at the side projects, you could potentially end up with a part time remote job during school and eventually be delivering code on significant features in your project. This is what happened to me, I was first given a small UI widget to write. By the time I left college, I ended up writing the entire UI to one of the significant new features/products we were releasing.
you understandstood perfectly cosmologicon! Im trying to show how short to reach this result when you know the suitable libraries.
If you want a JS sandbox to play in check out [jsfiddle](http://jsfiddle.net/) &amp; [jsbin](http://jsbin.com/) , they both allow you to play with libraries like [jQuery](http://jQuery.com) &amp; [MooTools](http://mootools.net/) as well...
I wanted to keep it simple. But, yes, you are correct, this change did make the method pretty unnecessary. It would probably be best to swap all references to boxAtRowCol() to boxesbylocation[col][row].
fixed link: http://www.sitepoint.com/add-a-web-console-to-your-toolbox-part-1/ At least I think that's the link :)
Not to mention, making the devs feel like good teachers is a great way to help you move into a full-time position, should that be what you're after.
http://learn.appendto.com has some good screencasts
&gt; Sent just to pick up food? Is this a thing at SF startups for interns? Maybe it was just us :) None of them seemed to mind, though, probably because we'd buy their lunch... it was always "here's a $20, go to Carl's Jr. and get me this and that and pick up something for yourself." As for the side projects, you're exactly right. If you kicked ass, we'd notice... the other thing we'd notice is how "trainable" you were. We had a few interns who thought they knew everything there was to know - they never got called back to be an intern next year. On the other hand we had a couple who had an attitude of "I'm here to learn and will help out however I can" that we'd either hire ourselves or recommend them to a colleague in the industry. Unfortunately The Company has since decided that our department doesn't *need* interns so we don't get to have them any more.
Typo one line 3: &gt; `: (!(username += '') || password === '') ? { error: "No Password Given.", field: 'pass' }` should be &gt; `: (!(password += '') || password === '') ? { error: "No Password Given.", field: 'pass' }`
Isn't that what it does? You include this JS, then add a class of fixie to whatever you want to apply dummy content to. [You can also init it yourself](https://github.com/rthprog/fixie#step-2---alternatively-use-fixieinit).
What does if (!(username += '') do? Check if it's a String?
This is pretty cool. It is smooth and very clean. I love the font choices. Seems to run well on both OS X and windows
Nice presentation but A* algorithm sucks for grid based graphs (because it doesn't take advantage of grid property which is that if you go far in one direction then you need to go back if target is in the other direction thus wasting a lot of resources for searching space in wrong directions "hoping" for miraclous jump to target somewhere which doesn't happen on grids (but may well happen in other types of graphs for which A* is good)). Someone on this project: http://qiao.github.com/PathFinding.js/visual/ implemented very good algorithm. 
That's the worst use of the ternary operator I have ever seen. It's convoluted, weird, hard to debug, inflexible, and unmaintainable. If I saw something like this in someone's code I'd immediately assume they're an immature programmer. But hey if it saves a few lines of code. Sorry for the rant (maybe it's because I just woke up) but this code actually offended me :)
I'm just commenting to say that I'm happy no one has recommended W3sch&amp;#3232;&amp;#3232;ls. Really happy :)
You don't have a choice when you write it with open source, though I'm sure adobe would have liked to try, so your title is... Anyhow I know another tool that does a lot more written in the same languages and all I have to do it is right click my screen.
There are a few nice tricks in fool. Thanks for spotting it.
When will you be releasing Brackets for 64-bit GNU/Linux?
Appeared in mine. Maybe you need to reload the page with your console open.
It's just another language, that just happens to compile to javascript.
Deadalus!
Coffeescript addresses the noisy textual artifacts of Javascript. That is all. As a dialect, it affords the opportunity to see your code in two states, which boosts learning if you're paying attention. As a macro language, it allows you to save many keystrokes. There are a set of best practices encapsulated there too. The road to learning needs to be an open road.
Boilerplate and excessive ceremony suck.
A geometric framework based on Canvas 
I usually go with one var just to list my local variables all up front and in one place. Then, I follow up with individual assignment statements. This seems the most readable to me.
Do rotating 3D cube on canvas! You'll use trigonometry, a rendering loop, and for extra points, allow me to rotate it on all 3 axis with my mouse :).
I'd rather "the road to learning" not include any unnecessary forks. Coffeescript is like a fork of Javascript and needlessly complicates learning Javascript. If you are learning Coffeescript then you aren't learning Javascript. Coffeescripters can keep saying "coffeescript is javascript" until they are blue in the face, but it still isn't and never will be Javascript. &gt;There are a set of best practices encapsulated there too. Coffeescript itself should not be considered a 'best practice'. Abstracting a well understood and well documented langauge with a "made-up languge" that has its own bugs and gotchas and many forks of itself, is not helping web development. 
People obsess about this way too much. Who gives a crap; just make sure that the code is readable and layout your vars logically. Don't allow dogma to force you to over think things. If it makes sense for a var to be declared in the middle of a function, go for it!
The phrase you're looking for is "[bikeshedding](http://en.wikipedia.org/wiki/Bikeshedding)." I feel that it's still actually a valuable discussion to have, because it speaks to the problem of *using someone else's code*. These little stylistic differences, especially in JavaScript, can do strange, strange things to webapps if a semicolon goes missing. (Yes, yes, best practices, sane scoping, etc.) If, as a community, we can use a normalized style, then we can share projects and exchange code snippets much more easily. /bullshitbullshitbullshit
var all the things! If it takes you longer than a second to reorder, add or delete variables, you're doing it wrong. Even if it looks "cool". Variables all end up chained when you minify.
The "single var" rule is actually about function scope and hoisting. You define all of your variables at the very top of the innermost function, because no matter where you put them, that's where they *effectively* are. Basically, it's about making your code reflect reality. Once you can use `let`, you should always use `let` for everything. You can then also adopt the "declare at first use" rule which is very popular among all other programming languages with block scoping.
Do something with Canvas and 3D. Maybe work with [Three.js](https://github.com/mrdoob/three.js/). Is there a specific level or area of math you're looking at?
People who have to do this for a living and are managing younger coders doing all this dumb stuff in an attempt to not seem like "a noob" while introducing maintenance headaches and bugs all over the place care, I assure you. The only people who care might be those who already agree though, but I hope the large amount of discussion around these minor things will do something to stop the "best practices are for noobs, i'm a rockstar" attitude that is very popular in the node.js community.
hoisting is why you declare them right up front. Not why you only use one var declaration, because behind the scenes those are getting transformed into individual var declarations anyway. The proposed way of doing things more accurately reflects reality if that's going to be your justification. let can't come soon enough.
It's about keeping things organized. Having the discipline for "vars at the top" allows you to indicate and sense at a glance the general memory footprint of the function, as well as its colloquial (i.e. not operational) complexity. You can still get the practical benefit of declaring where needed by defining instead. It's perhaps more work, but so is all tidying, and we do that anyway because it's good for health and society.
As I understand it(or at least, as Douglas Crockford explains it in *JavaScript: The Good Parts*), the whole point of the "vars at the top" convention in JavaScript is not just for organization. Rather, this convention(like most programming conventions) conveys something meaningful about the language itself which isn't made obvious through its syntax: namely, the fact that JavaScript doesn't have block-level scoping^*. For Javascript novices possessing some familiarity with other C-like languages that *do* have block-level scoping, this design flaw can be a real "gotcha", but one which can be *completely avoided* by following the convention of declaring your variables at the beginning of a function. The fact that this convention aids in organization, function self-documentation, and resource management is just the icing on the cake. ----- ^* It also backs up what is happening behind-the-scenes thanks to hoisting, though it's probably true that this issue alone rarely causes problems in most real-world scenarios. 
author here: I just wanted to point out that this post is part of an [ongoing series of articles, where I am republishing a lot of previously internal technical blog posts](http://daemon.co.za/2012/04/returning-to-the-fold/). These articles were written over the last 18 months, as I transitioned from being a Drupal dev to a Node.js dev. I annotate them as I publish them, because I think it could be useful to others to see what mistakes I had made, and what I learnt from them.
When you're forced to follow the JSLint recommendation to use one `var` statement at work, it matters.
glad you found it useful =) 
That's true, but Sivart13 had his doubts about the practical consequence of hoisting, which is why I avoided that point. It reminds me of an argument I once had with my boss about the Oxford comma. He asked me to come up with a non-contrived example that would show why it's an issue (i.e. something other than "My mother, God, and Ayn Rand"), and I couldn't -- but I also questioned how his limitations were relevant. He retorted that the solution to any Oxford comma problem would hardly be to use esoteric grammar, but rather to rephrase to the sentence. He used this to support his view that discussions about the Oxford comma were superfluous, and to explain how it can be frustrating to see others mistake this for an interesting problem worthy of extended discussion. Which brings me to my point in my reply to the OP -- all this `var` shit is really a waste of time. In that sense, I ultimately agree with Sivart13, even though I happen to like using one `var` statement.
http://jslint.com/ function foo() { 'use strict'; var a = 5; a *= 2; var y = 3; } &gt;Problem at line 5 character 9: Combine this with the previous 'var' statement.
Looks like this guy just discovered ternary statements
Don't know why you're being downvoted for this. Although I tend to actually write my code in the JSLint style, I find it questionable that hoisting causes problems in real world code. Indeed, all the writing about why declaring vars at the top is contrived.
There's still the problem of dependencies, which *always* confuses me when I read code with one `var` statement: var foo = bar - 1, bar = 2; 
Please explain how, in your editor, you transform the example problem posed by the article: // Before var foo = 1, bar = 2; // After: var bar = 2, foo = bar - 1; 
please explain how that particular problem should be what defines how I structure my code. Also please explain how saving 4 or 5 keystrokes even matters in a problem space where thinking, not typing, is of primary importance. 
Non-issue with [JMacro](http://hackage.haskell.org/package/jmacro), but mostly relevant to Haskell programmers (although it includes an executable preprocessor): &gt;&gt;&gt; renderJs [jmacro| var x = 2; if (x) { var x = 3; alert(x); }; alert(x); |] var jmId_0; jmId_0 = 2; if(jmId_0) { var jmId_1; jmId_1 = 3; alert(jmId_1); }; alert(jmId_0); If I'm writing raw JavaScript I like assignment-less declarations up front: var foo, bar; bar = 2; foo = bar - 1; Of course, this leaves the issue that if you forget to declarate a variable you're using, it becomes global. Maybe it's better to always use `var`, even when assigning to existing variables (unless you specifically want a closure)...
Technically, it's a mashup, which is a self-inflicted XSS attack.
Thinking, not typing, is the obstacle we must surmount in order to to generate good code. No one who ever delivered a crappy product could credibly blame the keyboard, or the syntax of the programming language. Also, in my book, refactoring does not imply "reordering assignment statements". Refactoring is a bit more involved than that, and likely involves 5 orders of magnitude more keystrokes than is required to reorder assignments. 
&gt; likely involves 5 orders of magnitude more keystrokes If it takes me 10 keystrokes compared to 2 to make the fix, and I do this and similar fixes many times, that's "orders of magnitude" more keystrokes saved. Renaming variables, reordering declarations, extracting out methods... These can be done with just a "few" keystrokes, but choices in style can make doing these things painless or difficult. If even *these* can't be done efficiently, how do you expect developers to perform large refactorings with confidence (especially in a language like JavaScript)? Sure, tooling can fix several problems (especially renaming variables), but so can style guidelines. &gt; No one who ever delivered a crappy product could credibly blame the keyboard, or the syntax of the programming language. I'm sure "technical debt" has been blamed, as well as "poor requirements". Somehow I have the feeling both are related to refactoring... 
but not on linux, sadly. :/
Disagree on this. Heck, I my opinion, setInterval is evil too. Simply because my application grinds to a halt on error with setTimeout. Try debugging an error in a setInterval callback for a tight game loop.
Approaching this from the perspective of not looking at any documentation, put a console.log right above your if statement along the lines of: console.log('THIS!', this, 'XMLHTTP!', xmlhttp); And then see what 'this' and 'xmlhttp' contain in your console. EDIT: Also, don't forget stackoverflow as a resource. [How can I make onreadystatechange return its result?](http://stackoverflow.com/questions/5362462/how-can-i-make-xhr-onreadystatechange-returns-its-result) 
JSON data is in the response text of the `xmlhttp` object: var response = JSON.parse(this.responseText); You may have to activate the JSON API, if your current code doesn't work then try this: xmlhttp.send("user=username&amp;passwd=password&amp;api_type=json"); 
ok. In my code, it generally does not. Variable declaration and assignments are not the center point of design in the code I write. 
Thank You! Combined with 9jack9's reply, I was able too make it work! I'll put the updated code into my post.
Okay, then we are probably solving very different problems with JavaScript. =] A lot of what I do (non-DOM) is "go from point A to point B, with lots of little steps in between". It makes sense to have a bunch of variables there, and the order of declaration matters. A lot of DOM work is "perform this list of side-effects". Variables and objects are often mutated directly through callbacks, simply because it's easier. 
link broke already ;_;
I'd like to know as well. I pass POST requests through a server proxy with the javascript reddit API wrapper I'm working on.
My guess is he's just running it locally for now. In for a nasty surprise when he deploys.
Does reddit support CORs?
If you click cancel it still restarts.
Yup, but is really annoying since the window will lock your browser and keeps popping up while you try and do something else, i.e. look at your code.
[On that note](http://creativejs.com/resources/requestanimationframe/?utm_source=javascriptweekly&amp;utm_medium=email) Link from JS weekly
Take a look at collision detection. I've found it effective, in my canvas ventures, to use getImageData() and .data eg var bottom = ctx.getImageData(this.x,this.y+this.height-1,1,1); var pix = bottom.data; Or something [like that](https://developer.mozilla.org/En/HTML/Canvas/Pixel_manipulation_with_canvas)
The game speed is coupled to the FPS - if I only get 30 FPS, the game runs with half the speed. This is bad. You should measure the time between the current and the last frame and use this a factor for all movement calculations. var last = Date.now(); function animate() { var current = Date.now(); var tick = (current-last)/1000; last = current; paddle.x += 20 * tick; // 20px per second } Also, shameless plug, have a look at my [html5 game engine](http://impactjs.com/) - it takes care of all these basics for you, so that you can concentrate on the actual game :)
This user is dismissive of practically every JS library out there, so keep that in mind. About bubbling - I have no idea what the poster had in mind, but an interesting idea would be to be to has events bubble through a hierarchy of objects. Say I have a parent object with a collection of objects inside, if there was a way to declare that relationship so that the events of the children objects bubble up to the parent, much like DOM events do, it would be an interesting feature. 
Thanks
Correct. If I attempt to run the script on let's say jsbin.com the status returned is 0. I am experimenting with a Windows 8 Desktop Application, so it works out quite well in terms of avoiding cross-domain requests.
I don't get which is the added value of this book from the online documentation available
func.call and func.apply do approximately the same thing, which is call function func with a certain object being 'this' insofar as that function is concerned. They differ only on the convention for the arguments passed. call expects the arguments to be passed one by one, whereas apply expects an array with all argument values: console.log.call(console,1,2,3); // Will print '1 2 3' console.log.apply(console,[1,2,3]); Will print '1 2 3' as well console.log.call(console,[1,2,3]); // Will print '[1, 2, 3]' call is a bit more compact when you already know what arguments you're going to pass to the callee function, whereas apply works well for dynamic parameter lists. It's especially useful for stuff like wrappers: http://jsfiddle.net/756X4/3/ That sort of wrapping is pretty handy when, e.g., you want to add functionality to extant object.
I declare multiple variables within a single var when their relationship is pretty close (or at least close in my mind), and only with simple code: var x = getX(), y = getY(); var img = getImage(); As x and y are usually always used together, it makes sense to declare them within the same var. Even if their usage relates to img, they aren't as directly related for my liking, so it gets it's own var.
My first thought was "well, duh", but then I thought about how often I hear people call it an MVC, or claim it's "*basically* an MVC", so I guess this is actually a pretty rampant misconception. Addy Osmani's talks about this in-depth in his book [Backbone Fundamentals](https://github.com/addyosmani/backbone-fundamentals). He also talks about how modern MVCs differ from traditional MVC, getting into the wide range of MV* frameworks, and why these differences matter(and why they don't). In highly recommend at least reading the Introduction for anyone considering using Backbone.
I thought it was a decent book.
post some code 
While you guys debate silly semantics, I'll finish my work and go home. Seriously, the pedantic arguments about mvc is such a waste of time.
That's hardly a *beginner* project...
Posted almost a week ago... [WebGL Grand Theft Auto - neat, but more like Grand Theft Walking Around A Bit](http://experiments.hertzen.com/webgl-gta)
&gt; The historical existence of browser events means javascript is perfectly suited to taking away the pain of controller code. Here is the key point of the entire article and for me it was a big takeaway. It's not an argument in semantics, nor is it obvious when you're coming from a traditional MVC framework and are wasting your time trying to figure out where and how to fit a controller into the mix, when that isn't the right approach to start with.
And then I though that the C in Backbone's MVC meant Collections instead of Controller…
I agree the template that gets populated with the data from the backbone view is really the "view" in a traditional sense. The backbone view does all the responding to input via events bound to the UI and requests the right data to render that a controller would in other MVC frameworks. 
The others here have already explained really well what call and apply are so I thought I'd throw in a real-life example. Inside every function you can use the *arguments* variable to access all the arguments that were passed. With JS this is of course not a fixed number. The arguments variable is somewhat like an array: it has a *length* property and you can access the individual arguments with *arguments[index]*. But it doesn't have any of the array methods. Let's say you want to write a function that concatenates all the arguments: function concat() { return arguments.join(''); } This doesn't work, because *arguments* doesn't have the *join* method. But an array does, so we can do this: function concat() { return [].join.call(arguments, ''); }
This.
Actually it just sounds harder than it is... I did it when I was learning ActionScript back in the day and I learned tons in the process. If I have some downtime today I'll do a Fiddle
It's funny how I have the same point about working with people with your attitude as well. I once enjoyed those conversations as well, but as I gained experience in real world web application development I realized: it just doesn't matter. The life cycle of most things out there in production is not long enough to justify worrying to the level I read in these mvc discussions. "That really shouldn't be in blah blah blah". Nothing lasts more than typically a year or 2 and there's no sense in thinking it will. It's not that I disagree with mvc at all, I disagree thinking that debating it endlessly is worth the time. I've been doing this shit too long to have that drive anymore, I just want to finish my work and go home and stop circle jerking about semantics.
This looks to have to have some amazing untapped potential. Excellent work!
I guess we're just in two different planets; I love the work I do, and I love to go the extra mile to make it as best as I can within the time I have available. Can't hold it against you, though, I can only imagine how aggravating it would be to witness this level of circle-jerkness with your mindset. Good luck mate.
Thanks! It's fairly new though, and could probably be expanded with more functionality. First stop will be handling some more events (like 'onprogress' or such), feel free to try it out and see what you're missing!
Awesome! Would like to hear how it works out for you, or _if_ it does :)
Handlebars really is awesome!
Actually, that's not to be fair to say that you can extend functionality - since most users wont. But it's a good point, and I concur - JavaScript engines do give you more flexibility to extensions and it's, in theory, a good thing. Again, I don't have a grudge with JS engines - just that there is no unity or conformity among them. When there's a better alternative like a native JSON transformer in some web browser specification, I will be the first to adapt :)
/r/jquery
I am going, should be a good time. I am only about 6 miles north of where its going to be held.
&gt; I just want to finish my work and go home and stop circle jerking about semantics. Opting instead to spend your spare time arguing against people arguing about semantics, it would seem. How is the view up there?
Well there are people that are happy working in a stagnant work cycle. Then on the other-side there people that do their work, but also improve upon it and want to help the community improve. The tools and frameworks you use are made my thinkers that debate these topics. There would be no advancements in development without this.
XSLT is a programming language written as a markup language and it hates me with a burning passion.
After evaluating template engines I can only recommend jQote2. 
Not just your shards, but also your beer sharts in a breezy woodland.
i'd rather circumcise myself with a rusty grapefruit spoon and no anesthesia, than willingly introduce XSLT into any project I am working on. 
Am I the only one who, even when having a rather alkaline sense of humor find this thing totally unfunny? Sarcasm must be classy in order to be funny, if not you look only like a 6th grader.
One question. Why?
I assume it will make sense in 15 years. 
I'm with you. I think jokes like this have achieved better success in the past through subtlety. The content on this site is mostly a bunch of nonsense, when it should have been **structured** nonsense.
It even uses Handlebars for the templating now. I'm really surprised, to be honest. :)
Fair enough. I will admit though, the H9RBJS was hilarious.
I agree, this is just dumb. I'm not sure if he's complaining cause he sucks at learning new tools or what...
&gt; var base= new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z","a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"); base.reverse(); This creates a list of containing 0-9, A-Z, and a-z. It is then reversed, so it contains z-a, Z-A, and 9-0. &gt; var data=new Array(3); &gt; data[0]=base[42]; data[1]=base[11]; data[2]=base[17]; data[3]=base[12]; data[4]=base[7]; data[5]=base[43]; data[6]=base[6]; This then builds another array (called `data`) out of the given items of the reversed `base` array. We now have data = ["J", "o", "i", "n", "s", "I", "t"] &gt; password=prompt("Please enter the Password!",""); This just asks the user to enter a password. &gt; if (password==data.join("_")){ &gt; window.location.href=""+password+".php"; &gt; } `data.join("_")` is just making a string out of the array with each element separated by an `_`. So we're checking that the password entered by the user is `J_o_i_n_s_I_t`. If that's true, we navigate to `J_o_i_n_s_I_t.php`.
Unless you already have tons of XSLT and your backed changes to JSON. This would be invaluable.
Yea... [I can totally see that happening](http://xkcd.com/208/). But seriously, who doesn't "already" use JSON? Also, who uses XSLT? I mean... yea... I met *one* person who does, but that's about it, really. Furthermore, the generated XML won't be necessarily identical with the old XML. Besides, if it's your stuff, you don't have to switch output formats. You can offer as many as you want in parallel.
This. It could've been a really nice joke. Now it's all stupid.
thats some extremely long namespacing O_O, if you could post all of your code, or even the render section, would probably be able to give you something more concrete.
but is it web scale?
http://initializr.com
Oh hai guys. Obviously you guys have not even tried to implement H9RBS.js into your existing codefrastructures. If you did, you would see that it greatly optimizes the performance of your most valuable controller while simultaneously obfuscating your minified gitforks. Just give it a shot. 
i rofl'd
I'm really not prepared to back up my statement because I sure don't use XSLT myself. I was just searching for a reason to give some positive feedback ;)
&gt;I hate XSLT. But that wouldn't get any upvotes, now would it? Notice the pointless positive comments sitting down there in the negatives. Yours is no better, but has a small circlejerk behind it.
lmao
It's hardly obfuscation, the variable names are descriptive...
Yet Another JS Template Engine. This is exactly why I would prefer a more standardized way of transforming JSON with templates...
new Array(3) creates an array of length 3, filled with 'undefined'
Much better.
I cannot be sure it can webscale for I haven't seen anything related to redis in your github repo so how can I ensure the RESTfulness in my memcached controllers?
Did you download the package and look at the contents? Funny.
w3school is terrible. Its so terrible that www.w3fools.com was made just to point out all the errors in it.
Applying XPath expressions on JSON scares the shit out of me.
These are my 2 trusty references I like to pass on: [http://trephine.org](http://trephine.org/t/index.php?title=JavaScript_call_and_apply) is the best IMO, while [odetocode.com](http://odetocode.com/Blogs/scott/archive/2007/07/04/11067.aspx) also has a very good piece.
...because? No different than selecting nodes in other types of data structures. I guess you don't like jQuery either then, when using Sizzles selectors?
This is much better than w3schools: https://developer.mozilla.org/en/JavaScript Thank me later.
I think that you might find your error the view definition. The 'el' attribute should be a DOMElement. I think what you might want to do is use the id attribute instead (without the hash though).
It sounds like he's referring to this: var foo = function bar() { break bar; }; I'm guessing a "function definition statement label" refers to giving a name to a function expression.
I'm sorry but it seems to me that from the three suggestions, this one is the most spot on.
This site is awesome! Can't believe I haven't seen it yet
It sounds like it means that something like this won't work: foo_label: function foo() { break foo_label; }
You are right, it is the best suggestion here, but I had already seen it and the way it is built wasn't acceptable to me. In the end I resolved to just use simple, populated select fields in various modes to achieve what I wanted - having set out for a 'datepicker' to begin with was a mistake.
http://javascriptenlightenment.com/ after that you should try to take on a javascript framework, frameworks are the future, if you need a framework to work on you should try a game framework like crafty.js or a "MVC" javascript framework like backbone.js
http://eloquentjavascript.net/
Maybe this isn't helpful in answering exactly what you asked, but I'd recommend O'Reilly's jQuery Cookbook. Sure, it's focused on jQuery, but a lot of the principles like closures and hoisting are universally useful.
Thanks I have implemented this.
I wouldn't hold off on learning CoffeeScript. You'll learn plenty about JavaScript in the process.
Everybody in the biz says "javascript the good parts" is the best book to get. If you want to get even deeper "javascript the definitive guide" is the way to go. Or you can try to make some html elements disappear 10 seconds after clicking an image. Or build your own Image slider. 
&gt; The events map is just a list of events that, when triggered, each call a specific View function. This doesn't work well for large muli-module apps where many different views need to share the same client-side business logic. To that end, I created [Backbone.Geppetto](http://modeln.github.com/backbone.geppetto/), my first open-source project which implements a full-fledged Command framework for Backbone. I understand the added overhead won't be worth it for small/medium apps. But hopefully this will be helpful to anyone else doing something similar.
github: https://github.com/MiracleBlue/JSaw
[Learning Advanced JavaScript](http://ejohn.org/apps/learn/) Its stated goal is for the reader to be able to understand this code from Prototype.js: Function.prototype.bind = function(){ var fn = this, args = Array.prototype.slice.call(arguments), object = args.shift(); return function(){ return fn.apply(object, args.concat(Array.prototype.slice.call(arguments))); }; }; 
I'm definitely interested, but lacking in time. I'll follow you on github though and take a look whenever I have a few spare hours. It's a bit of an obsession of mine too, actually... I wrote a program that parsed chords and played back wav files of piano keys when I was backpacking around Europe so I could write music.
Come up with a project that you want to implement, and do it. You most likely won't know how to do much of it, so you'll need to study documentation for the language, etc. in order to figure it out. I think that's the best way to learn!
well, there are a few things going on there, and I trust that as you continue to grow with JS, some of your questions will answer themselves. I can offer: + javascript is loosely typed. many coming from C++ or Java, or other server-side languages see that as a problem. But in JS you are able to do some things that strongly typed languages are not able to do. So, I would caution you to try and not worry about typing as much as you naturally might. + To answer your question directly. People using the module pattern are trying to answer your question. There are many answers out there and as of May, no clear best practice. + In the jQuery world there is a clear best practice: $.fn.newPlugin = function(options){ var defaults = { someVar : 'Some Default Value', another : 123, dimensions : [] } var _options = $.extend(true, defaults, options); // ... use _options.someVar } Hope that helps.
Thanks heaps man :) I understand the time constraints. Having people that I can bounce ideas off and talk with is extremely helpful as well. I absolutely love this stuff. The primary purpose would be to have a light-weight tool that travelling musicians can use to jot down ideas, or even to script cool things like chord generators. I want to make every aspect of the system scriptable - from the individual synth parameters, to the piano roll. Everything. Breaking the boundaries of most traditional DAWs which only have limited things you can automate or script. One will, theoretically, be able to sequence stuff in JSaw, using their scripts to do cool tweaks or modifications or whatever they'd like, and export the result as midi which can then be imported into their desktop DAW. That's the goal, anyway :) Mind if I PM you?
YEah man :) that's something that hasn't been implemented yet. I'm slowly trying to figure out the best way to properly implement it. I've had several ideas, but just can't pick one. Knockout integration is actually part of the latest codebase! I've written hook objects that make it easy to hook observables into parameters on audio nodes etc. And it automagically generates input fields to adjust the parameters. It's really neat! I'll put up a current copy of it if you'd like to see that aspect. I initially started writing this project using backbone, but discovered that the idea of data models really wasn't what I needed. Since we're not strictly working with data sets, it doesn't quite fit, so I re-wrote it to use prototypes, and it's a lot faster too. Though I'm willing to take another look at backbone (I was never that familiar with it to begin with) And yes, I LOVE jquery knobs! I was planning to write something like that myself since I couldn't find anything like it, and then I stumbled on it. It's exactly what I need :D
Yes I remember looking at that :) I've been looking at all the examples of sequencers I can get my hands on to get inspiration from.
You're welcome. I think the Prototype.js snippet is used purely because it's very dense with advanced Javascript and as such provides a good test of one's understanding of the language.
this is awesome! i'm studying dsp in college so this is right up my alley. one feature i would love is VST support so i can use ni massive. i don't know too much about VST development, but my guess is that it would be difficult to implement VST support. alternatively, you could write a plugin engine so other people can implement instruments and filters using your API.
Thanks for your comment :D unfortunately, there's not really any javascript-native way to do VST support. Sucks, I know. However, JSaw is being developed specifically with plugins in mind :D I'm designing the system so that synths etc are all made up of collections of smaller components which can be connected together. All the components will come with their own UI stuff and have observable parameters etc all ready-to-go. It's somewhat similar to the way Image-Line's "SynthMaker" works. My goal is to allow plugin developers to be able to throw together a custom synth rather quickly, but without having to worry *too much* about specifying all the routes and connections, or handling events or designing UIs. Sometimes a developer might just want to add a couple more oscillators to an existing synth, or add some extra post-processing, or whatever :) so I aim to make that kind of thing really quick and easy to do in JSaw.
[Professional javascript for web developers](http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1336726653&amp;sr=1-1) has been updated with latest and greatest. Newer technologies like html5 and ecma script 5th edition are also discussed. Most updated and complete javascript reference.
Okay, the latest code base is now up on github :) including the knockout stuff.
Of course there's a way... If you can host the plugins somewhere, you can load them with XMLHTTPRequest. Then you emulate compiled x86 code ;) I'm [serious](http://bellard.org/jslinux/). The tricky part would be to support library calls these plugins are making. It would probably work if they have little external dependencies.
&gt; Here is what not to do: ... read framework code Huh? A lot of the advice I see, regularly, about getting better at programming suggests reading good code. Are you saying you want him to try to discover javascript patterns instead of learning from people who already have? Did you have a really bad experience with frameworks, patterns, or someone who was into them at some point?
Yea, fuck Frameworks. ASP.NET MVC? Forget about it! Roll your own web development framework on top of C#! Who needs a product created through the collaboration of many talented developers when you can spend copious amounts of your own free time to "learn to solve valid problems" that have already been solved. And don't bother referencing the ASP.NET MVC code when writing your own framework, because clearly you're better off improving your skills on your own by just "writing code and learning what works best for you." Why tap into the knowledge of intelligent, experienced developers when you can come up with all the same thoughts and ideas yourself!? Frameworks are so trendy - do you think developers were writing and using libraries decades ago? You do? Oh.
&gt; Huh? A lot of the advice I see, regularly, about getting better at programming suggests reading good code. If you do not have programming experience then how do you know what code is good and what is not? You are taking advise from other people who are probably no more experienced than yourself. Learn to program on your own. You don't need *other people's* code to learn to solve *your* problems, at least not if your intention is to learn something. &gt; Are you saying you want him to try to discover javascript patterns instead of learning from people who already have? That is exactly what I am saying. That is called learning. &gt; Did you have a really bad experience with frameworks, patterns, or someone who was into them at some point? Yes, I have been forced in a past life to work with people who claimed to be developers, but could not write code to save their life. A lot of garbage entered production projects due to the inexperience of framework ninjas. Its a horrible experience that is only solved by pushing problematic individuals out the door and then scraping out the problematic code later. Its one thing to be able to write code only in the context of a particular framework and being otherwise incompetent, but it a whole other level of disaster when such people view themselves as JavaScript gods and dictate their authority onto everything they touch.
thanks! ill take a look at this later today.
The demo link is broken too. New one: http://jsfiddle.net/2nYsg/3/embedded/result/
Write and read some infrastructure code: i.e roll your own PubSub library. It shouldn't be more that 50 lines of code, in fact I wrote one under 25 loc. Here is a small template, fill the blanks PubSub = {handlers: {}} PubSub.on = function(eventType, handler) { // some nice code here return this; } PubSub.emit = function(eventType) { // Awesome emitter code here return this; } Once you wrote your pubsub, go to jquery, zepto, node or lucidjs and look how the have implemented the "pubsub/event emitter" pattern. Now repeat this but instead of writting a pubsub pattern, write you css selector framework $(""), then write ajax wrapper library, etc
Here's a link to the [jQuery Annotated Source](http://robflaherty.github.com/jquery-annotated-source/).
We created a jquery plugin using this lib to let the user check the password input very easily: http://www.reddit.com/r/javascript/comments/til2z/help_user_to_avoid_password_mistyping_using_the/
Also: * [Backbone.js Annotated Source](http://documentcloud.github.com/backbone/docs/backbone.html) * [Underscore.js Annotated Source](http://documentcloud.github.com/underscore/docs/underscore.html) * [Learning Advanced JavaScript](http://ejohn.org/apps/learn/) by John Resig (The guy who wrote jQuery) Just be aware, that while the source is annotated and can explain to you what's going on, some of the decisions are made to keep the code efficient and compact rather than readable. Code readability is super important, especially if you want to be able to change it later.
I don't like. Spitting out data-level stuff makes me think we're getting stuff generated at the server side. Let the server do the math and add a class to each element, use css for styling. Yes, "use css for styling!!", I shout, my cries growing ever more faint as I spiral down into the black hole of standards-based design.
This is a really cool idea. Forking now.
Thanks for the feedback. I appreciate your point. I would only counter with the idea that a server-side calculation would put a strain on the ability of your styles to be updated alongside the calculation results. In other words you are very strictly coupling your server-side code to your client-side code (CSS is bound to whatever the server is doing).
javascript-dependent css, what could possibly go wrong? &amp;#3232;\_&amp;#3232; 
&gt; Who needs a product created through the collaboration of many talented developers when you can spend copious amounts of your own free time to "learn to solve valid problems" that have already been solved. Then why write any software at all? Just buy some giant application package that is already written and tested and addresses your concerns and solves all your problems. This is not a valid argument about why I should be using some framework. But then this thread is not about what you should use to deploy software... its about learning. Who cares is somebody else has solved some problem and put that solution into a framework. That nifty framework solution certainly isn't going to help the next guy to learn to code their way through the problem. As long as this is about learning, as opposed to development or deployment, your point is irrelevant.
I understand where you're coming from, because when I see a Cookies library on GitHub with over 1400 watchers, and it has a dependency on jQuery, I face palm. But again, I blame that on the developers, not the frameworks.
It looks like a well done project but it reminds me too much of Lotus Notes to ever use it without cringing.
My own benchmarks show the example is almost as much as [50 times slower](http://jsperf.com/mori-performance-benchmark), then just using a for-loop. I didn't even use anything special, like typed arrays, just a dumb for-loop on a JS array. For small data sets, sure this would work well, and would make the code more elegant. However it's not at all fast, so please don't claim it is. It's not, JS is slow as it is already, and this is not how you should be iterating over any large amount of data.
I like to make it as generic as possible: If you don't learn what purpose your tool serves, then you're probably not going to end up using it well.
I really like this idea. It'd be cool to see some more things like this, where you're given a skeleton/API and you have to write something that passes a bunch of tests. If you structured it right, some of the tests could be coded to output helpful errors that give you hints at what you might've done wrong.
&gt; Because there's an infinite number of problems that exist or will exist and that don't have a solution yet &gt; However, I disagree that a person should not read well written source code or learn design patterns from an experienced developer. What is well written code and how could you possibly come to such a decision if you are new to programming? This is certainly a paradox, which is why new programmers need to learn to program before evaluating other people's code for guidance. &gt; but to outright disregard them I feel is a mistake Not reading other people's code is a mistake? Why? &gt; I also think it's a ludicrous statement to say "you'll figure everything out on your own by just coding." It worked for me. The biggest external influence for me was JSLint's exceeding complaining and some articles about performance and security. The only thing I learned from looking at other code was the use of immediate function invocation from a Crockford video. The rest was self taught, such as trial and error. &gt; Even while using a Framework, the developer obviously still needs to know the language the Framework is built on top of. That is clearly not true. It is entirely possible to be a jQuery super badass and have absolutely no idea how to access the DOM and manipulate nodes in vanilla JavaScript. I have seen this several times.
&gt; What is well written code and how could you possibly come to such a decision if you are new to programming? This is certainly a paradox No it's not - you do what the OP did, and ask. You take peoples suggestions (where you see a lot of overlap), read, and assert for yourself whether it makes sense and is a good approach. I'm not encouraging mindless acceptance of other coders ways, I'm encouraging exploring as many ideas as possible to be able to arrive at the best solution for a given problem. &gt; Not reading other people's code is a mistake? Why? Because other people have completely different ideas from the ones you have. It offers an opportunity to think about something in a way you otherwise might not have thought of. Also, by reading other people's code, you learn how it works. Especially important if you're thinking about using that person's code in your own project. &gt; It worked for me. This is kind of irrelevant, as you have no credibility. No one here knows how talented you may or may not be. And even if it did work for you, I'm arguing that exploring more ideas than just the ones you can come up with by yourself can work better. &gt; That is clearly not true. It is entirely possible to be a jQuery super badass and have absolutely no idea how to access the DOM and manipulate nodes in vanilla JavaScript. I have seen this several times. Sorry, I wasn't talking about everyone, I was talking about what I felt was required for good developers. Also, I wasn't arguing the developer needs to know every API the language offers. Not knowing the native DOM manipulation functions can be cured in a matter of minutes by quickly looking up a reference. Not knowing how prototypes work, or how var scope works, or how closures work, is a much more serious concern and shows a blatant lack of knowledge about how the language works. DOM functions are just vocabulary. Do you have the canvas API memorized? The audio API? The video API? The cookies API? The local storage API? The gamepad API? Etc, etc. And if so... why?
Word of advice: Componentize your project into smaller pieces, finish those pieces by piece. It also makes it easier for others to join you if you can work on disparate pieces.
oh my
700$ isn't a lot of cash for these things, assuming it's some kind of bootcamp or conference. you could read a couple of books in a weekend and be "running", if you actually know Java already.
^^ It's so true :-) I was exactly thinking that while coding it. Lotus Notes has a such wrong user XP that everthing it touches turn into a bad memory. But it's such a nice idea I wasn't going to forget about it. I'm currently using it for anonymous content identification, and it's really cool.
Is it? You don't provide any comparison, or any benchmarks of other libraries. Its just your claim 'it's fast'. I'm not disagreeing that higher level libraries are nice. However if you are working on 1 million items, this is _not_ how you should handle them. In the worst case, we're talking about 20 milliseconds becoming 1 whole second!
the reason all of the functions are executing by themselves is because they are ending in a `()` which calls the function. try something more like this. // Create the &lt;link/&gt; element var link = document.createElement('link'); link.type = 'image/x-icon'; link.rel = 'shortcut icon'; link.href = 'media/favicon.ico'; document.getElementsByTagName('head')[0].appendChild(link); // Now define your changing functions function original() { link.href = 'media/favicon.ico'; } function choice1() { link.href = 'media/new_favicon.ico'; } function choice2() { link.href = 'media/another_favicon.ico'; } Also, try to avoid binding events in the `onmouseover="choice#();"` style; It is better to define the functions with JavaScript like: element.onmouseover = function() { choice(); // do other stuff }; Or, simply element.onmouseover = choice; Or, if you really want to do it right, using [event listeners](https://developer.mozilla.org/en/DOM/element.addEventListener). 
If there's work light enough to do in javascript without affecting the user experience and you can't afford to do it on the server, you're not going to be around long. There are good reasons to do actual work on the client (latency, eg), but "my server is too busy" isn't one of them.
&gt; You take peoples suggestions (where you see a lot of overlap), read, and assert for yourself whether it makes sense and is a good approach That is highly speculative and largely based what's popular according to some group. This is getting into a realm of personality. Some people absolutely NEED social input to make sense of anything as they completely lack the confidence to form any opinion on their own. For those people I really don't care because they will likely never be strong programmers anyways. To be a competent programmer you have to be willing to learn to program from writing code and you have to be willing to form individual opinions and make decisions, neither of which necessarily requires any input. &gt; I'm not encouraging mindless acceptance of other coders ways, I'm encouraging exploring as many ideas as possible to be able to arrive at the best solution for a given problem. In the absence of sufficient experience necessary to conclude an individual opinion mindless acceptance of some idea obtained via plurality is all that is left. John Stuart Mills said it best when he said that majority rule is the greatest conflict to the presence of liberty. &gt; Because other people have completely different ideas from the ones you have. It offers an opportunity to think about something in a way you otherwise might not have thought of. I agree completely, but not for somebody new who lacks code and opinions worthy of comparison. &gt; This is kind of irrelevant, as you have no credibility. No one here knows how talented you may or may not be. I am not hiding my identity. Google and Bing are not hard tools to use. &gt; Not knowing the native DOM manipulation functions can be cured in a matter of minutes by quickly looking up a reference. Not knowing how prototypes work, or how var scope works, or how closures work, is a much more serious concern and shows a blatant lack of knowledge about how the language works. DOM functions are just vocabulary. These things can be learned from writing code surveying the language. You cannot peering into any built in type or method without examination of prototypes. I stumbled upon closure by accident as merely seemed natural to me. I had no idea it was anything that could be named or uniquely identified until I saw it continuously popup in the JSLint reporting. &gt; Do you have the canvas API memorized? The audio API? The video API? The cookies API? The local storage API? The gamepad API? Etc, etc. I have never written anything for canvas, video, or audio from JavaScript. I use localStorage, but I did not need to read code to discover this. There is really only the getItem and setItem properties to be aware of since it only stores string literals. Since it is so simple it makes custom parsings ripe for self discovery.
What's funny is that even after reading your comment, I still missed it on the first re-reading.
I honestly don't give a shit.
Haha, yes, I have heard that a few times ;-) Anyway, even if the content isn't 100% up your street, you'll meet a lot of generalists and good people who will make the 'hallway track' quite interesting. Be sure to hunt them out.
[clever](http://en.wikipedia.org/wiki/JAV)
Java is to Javascript as Car is to Carpet.
I have created a repo in github, and I am planning to create some of this "katas". I started with this event emitter example. For now, it only has the on and emit specs methods. https://github.com/pedrodelgallego/js-workbook/tree/master/event-emitter#the-pubsub-or-event-emitter-pattern
Here's what I did: 1. I took an online course, I think from Stanford or Berkeley, but you could use any reputable source, on functional programming. The courseware relied on lisp and scheme, but I did all the course work in Javascript. I ran the apps with Jscript on Windows Script Host. A lotta people don't know about WSH - it is builtin to all Windows machines, since 1998, and it runs a Javascript engine. If you want to run ES5, you can even use the Chakra engine (part of IE9) from within WSH. Also, you can run [a Read-Eval-Print Loop in JScript](http://pastebin.com/5YSbvSVD), which allows you to interactively type in fragments of Javascript into a shell, evaluate them with &lt;RETURN&gt;, and see results immediately. I edit Javascript in emacs, and there's a possibility to run that REPL as a shell within emacs. You can send function definitions to the shell with a few keystrokes, then invoke them dynamically. 2. I looked into algorithms described by CS canon, for example A-star or Dancing Links as described by Knuth. I implemented some of these in Javascript, using them to solve particular contrived problems I set up for myself. 3. I built clients (again, running in Javascript+WSH) that connect to free data services that expose JSON. For example you can write JS clients that connect to Reddit via the public API. You can do the same thing to connect to Google services, or Facebook, or other public services. None of this requires running Javascript in a browser. 
Plus, it doesn't help at all if your cookies aren't set via JS. Pretty useless for anyone running a framework or CMS that automatically sets/updates cookies with its server-side language.
[fibers](https://github.com/laverdet/node-fibers) is cool but this just seems to obfuscate control flow.
Believe me, I know. I run a a few 200+ people conferences in nyc, one of which is free. It's hard work and pricey, but not 800/person
The fact that addy osmani and paul irish are on the from list really just says a lot. That said, I use w3schools really just for a quick reference list on HTML tags and CSS syntax. The odd time if i need to know some of the string methods I don't use a whole lot.
This may be a silly question but you ARE including jQuery as well, right?
jqapi.com is a better reference for the API
Right on, thanks for that!
you can put a function as the second arguement.. its optional $('#content').load('path/'+$('input').val()+'.txt', function() { alert('Content should be loaded by now.'); }); however, i looked at your code, try this instead: &lt;!DOCTYPE&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;title&gt; Text Editor &lt;/title&gt; &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $("#submit").click(function(){ //when the element with an ID "submit" is clicked var textsearch = $('#textsearch').val(); //get the value of the element with ID "textsearch" var thepath = 'path/'+textsearch+'.txt'; //create the path to that file $('#content').load(thepath); //load the contents of that path into the element with ID "content" }); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="content"&gt;&lt;/div&gt; Text-file: &lt;input id="textsearch" /&gt;&lt;br&gt; &lt;input type="submit" value="Submit" id="submit"/&gt; &lt;/body&gt; &lt;/html&gt;
&gt;I'm very much aware something is wrong with my feeble attempt at javascript as the html won't load anything. &lt;script type="text/javascript"&gt; close this.
It's there for moral support.
It was only a matter of time...
Nice! This will save me some code and nested object annoyance. Your solution is simple too.
(one of the authors of Hitch)... CSS has had first class support for basing selectors attribute data (including data-*), and has for some time - in terms of drafts, they've been in there for over a decade. These are based on regex oriented string compares (contains, starts-with, ends-with), literally the only thing added here is the ability to use them as numbers to select "the one with the greatest value" or "ones that are over X". Simple mathematical ideas like this are not new in CSS either: there are ideas either there or coming soon for first, last, nth-child (which uses algebraic expressions), empty and in terms of values the calculations can be relative - there is even a coming calc() function. I'm not arguing that your points are invalid, but I think some clarification is necessary, lest one think that the article above (or Hitch itself) is suggesting that one (attribute based selectors) is a replacement for the other (classes), that certainly isn't the case. Both are useful in the right circumstances and actually can help to keep the code appropriately decoupled - the trick is understanding their purpose. In an ideal world, CSS is written against a tree, it doesn't dictate changes to it. If the tree is designed such that it provides semantic values valuable to styling metaphors then of course a CSS author should use them. In your example, .defConTwo sounds like something that the app would be explicitly tracking, so you would expect there to be a class for that, for exactly the reasons you describe. However, there are other times when visual ideas are just that - visual. HTML is giving us an increasing vocabulary and things like HTML data-* attributes allows the creator of a tree to provide some raw semantic materials. Combined with greater expressive powers in CSS, this helps to free independent creation and evolution of interesting visual presentation style rules - and that seems like a Really Good Thing. 
Or just use &lt;input type="email"&gt; (with a polyfill for IE and old versions of good browsers).
This is something distinct from Coffeescript in important ways and they should therefore be considered separately. This is not a language intended to be used as a general replacement for JS the way that Coffeescript is. This is a dialect of JS designed to be used in **very specific** scenarios. That is, there are certain problem domains that are a PITA in a dynamic language like JavaScript if you write them idiomatically. (Actually not even that quite yet, it's *research* intended to explore the ways that you can get better performance in certain scenarios out of the JS engine by writing exceptionally ugly JS.) For example, if for some reason you need to a bunch of math with a ton of vectors or points or something in JS. If you write it idiomatically you will end up causing a **lot** of object allocation explicitly and in the background, only to have them GC'd pretty quickly causing long and/or frequent GC pauses in your running script. You can avoid this by constructing objects ahead of time and then allocating/reusing them c style, but it's a lot of boilerplate and a PITA. If you're using Typed Arrays behind the scenes, you can get even more benefits in JIT etc in the JS engine. What this is is relatively simple a tool to make writing that sort of code easier, it's mostly only of interest to Game Developers or people working on statistics and visualizations and such rather than your average Joe Javascript developer. There might be some use for porting certain simple C programs and stuff too, but we have emscripten to cover most of that space. There may be the occasional person who decides to start using this all the time or something, but it's not what it's intended for. This project was started by some Mozilla guys and if Mozilla ends up using it, it will probably be for stuff like creating a faster PDF renderer in JS for the browser etc. (note: pure speculation on my part) A better comparison would be something like Processing.js. A hybrid of JS + some other DSL intended for specific applications in the browser.
Also don't neglect Annoying_Smiley_Face's tip.
The mailcheck.js does quite a bit more than the email form input field.
from the computer, this won't be on the internet. just them using their computer.
So you won't be able to actually load a text file from disk with Load without workarounds in most major browsers, as this uses an Ajax request and is designed to load files off of servers. You can access files on the disk with Chrome if you make sure all your users start with the --allow-file-access-from-files switch, but otherwise IE and FF prohibit this without workarounds as far as I know. You should check out the documentation for the HTML5 File API. This is supported in all modern browsers (IE9+, FF, Chrome at least). See here: https://developer.mozilla.org/en/Using_files_from_web_applications. Alternatively you would have to use a JS runtime other than the browsers. Node allows you to read files. If you want a UI and your users are running Win8 ( ;) ) you could use WinRT.
[Spamsational wants to read a file from the client's filesystem](http://www.reddit.com/r/javascript/comments/tky72/loading_a_txt_file_into_a_div_simple/c4nmzfp?context=1), not the server's. He'd need to do something like [this](http://jsfiddle.net/RuM39/) if he wants to do it with JavaScript.
Totally agree - I don't understand why you would invest time and money into yet another JS compiler. When it all boils down - it's an unnecessary step in development.
After wondering where all the traffic was coming from - I put a Google Analytics script on the projects site. After a day of traffic, turns out it was nearly all coming from an email newsletter, "javascript weekly." For those of you, like me, who never heard of it - check it out! http://javascriptweekly.com (The article dynamo.js was mentioned in - http://javascriptweekly.com/archive/78.html)
would definitely scale easier if i could just change the array in js instead of the custom attributes.. but still possible with an extra line or two of code.
It's designed for this. You're doing it all right. :)
there is no problem having multiple requestAnimationFrame calls.
&lt;blink&gt; is back baby! Just threw up a little in my mouth. I don't know what the future holds for this little guy, haha, probably nothing. I honestly just made it because it made a neat effect on one of my websites. There was a lot of "kill it with fire" over at r/webdesign :(
Congrats! I don't know if I could find a use for it, but very cool!
Doesn't seem to work for me. I'm on the latest version of FF for OSX Snow Leopard.
thanks! Good to know I'm fretting over nothing haha. 
Nah, keep it. It would be a good way to troll people if it went viral. LOL!
That's a fun little script you wrote there :-) If I may suggest that future versions have more effects (like deleting the old/typing the new word, alpha blending, letter randomization, or like those boards at the airport)? Though it's probably easy to allow people to create their own effects.
I may have already brought blink back with [this little JavaScript](https://github.com/RyanNielson/182js) I wrote. I couldn't resist whipping this up while learning CoffeeScript.
U ARE A-OK MAN
You could accept a map from selector to array of snippets. $('#bigcontainer').dynamo({'#header':['welcome', 'greetings'], '#footer':['bye', 'see ya']});
The traffic boost *he* gives. JavaScript Weekly is all Peter Cooper.
Just got a mention from [@smashingmag](http://twitter.com/smashingmag) as well, so the watch count's on the rise again
Well, it's actually a website solely focused on the favicon and title, so this javascript is actually just acting as a preview of the changes before they actually click the link.
I don't keep track of where I got links from initially and I have a *ton* of sources I crawl through every week but I was definitely impressed by the elegance of Dynamo - nice work! If you posted it to Hacker News, that might have been where it came from. I monitor all JS stories there even if they don't get voted up. 
Yeah, O'Reilly not paying speaker travel is crazy.
The reason I bring it up is [this sort of weirdness](http://i.imgur.com/YHXwZ.png), where I see 15ms of the browser doing nothing...It seems like since (as you can see) all the scripting and rendering are done well before 16ms, the draw cycle should complete and kick to the next...not cut the framerate in half for no reason.
Very nice! An increasingly necessary event and a great set of speakers there. I'm co-chairing a new O'Reilly event (Fluent) in the HTML5 and JavaScript space and we've got several gaming talks because of its importance in the HTML5 scene but onGameStart looks like a wonderfully intensive wave of HTML5 gamedev goodness :-)
I know - I even sent a proposal there but it was rejected:).
May I suggest porting to Chrome? ;)
Sorry to hear that! To our surprise we ended up with a couple hundred proposals and sadly none of our reviewers got to every one so the scores were really mixed.. so plenty of good talks slipped through the cracks.
Might I suggest [BabelExt](http://babelext.com) as a tool that might help you get it working in: Chrome, Firefox, Safari AND Opera? :-) Disclosure: I wrote BabelExt and still need to document it more, but would love to help someone actually MAKE something with it!
So it's Hoverzoom?
Alright thanks, I just edited their sizes.
thank you.
They will freeze your account randomly, on a whim, meaning you can't access your own money. 
They don't have to follow the same regulations that brick and mortar financial institutions do, which means that they can get away with a lot of things that would never normally be accepted. I've heard countless horror stories of people who raised a lot of money (often for charity) through PayPal, only for them to freeze the account (gaining interest on the money for themselves) without a good reason. Personally, I've had a few frustrating Ebay transactions (although I don't use Ebay any more for that reason) where PayPal has automatically decided in favour of the buyer. In one instance, a buyer sent me a message using Ebay's message system saying that even though the item had arrived, and I had proof of delivery, he was going to get a refund through PayPal anyway, and there's nothing I can do about it. I sent PayPal and Ebay a copy of the message, reported his account and asked them to investigate, but they claimed that they did not have the authority to read messages sent between users using their own system, and wouldn't do anything about it. The buyer is still an active Ebay user. Here's a couple of links I found: http://techcrunch.com/2011/12/06/do-you-hear-what-i-hear-yes-its-paypal-stealing-money-from-kids/ http://www.guardian.co.uk/world/2012/jan/04/paypal-buyer-destroys-violin http://www.paypalsucks.com/ This website's horrendous, but I think there's a lot of information on there somewhere.
Home Depot has an account with them now and offers Paypal payments during checkout. I can see this going well.
Wow, that's pretty messed up O.o
Do you actually know anyone who works for Paypal? Or what it's like to work at paypal? The things quoted for why they suck don't even seem more than knee jerk reactions to legitimate concerns which were eventually sorted out.
[Please don't submit the same thing 2x's to the same sub.](http://www.reddit.com/r/javascript/comments/tndrw/check_out_what_i_made_its_a_safari_extension_that/)
That's not any doom character that I know...
so what polyfills are going to make any game on earth not run like utter shit (or even run at all) on IE8 or 7? I'm pretty sure any decent games cannot work "acceptably smoothly" on those browsers... Don't get me wrong: it's disgusting that more than 10 people on earth are using either of those browsers... but I work for a company that was once *huge* in the "casual gaming" space... and our biggest property still sees ~50% IE users. Higher than "average"? Yes. But not abnormal at all for the casual gaming demographic.
This is very cool, but I'm really puzzled by the title - this doesn't look like a DOOM character, and doesn't appear to use augmented reality in any way, shape or form (just object/gesture-recognition, machine vision and 3D graphics).
Cool little app but the headline made it disappointing in everyway.
That makes sense. It just looks spammy, is all. Sometimes you see it when someone submits a link and it doesn't get much attention, they'll just keep submitting it under a different title -- and that gets annoying real fast. It would probably be better if you did delete the old one if it is now irrelevant.
I guess you're right. I've done some animation with canvas on IE using polyfills, but nothing that really required decent performance on sub-par browsers. I also wrongly assumed that gaming sites would have an audience with a higher than average percentage of users on modern browsers, forgetting that casual gamers are often the lowest common denominator. Thanks for setting me straight, and keep up the good work on RES.
&gt; I also wrongly assumed that gaming sites would have an audience with a higher than average percentage of users on modern browsers, forgetting that **casual gamers are often the lowest common denominator.** That's the big thing... but really who can fault you for assuming that? It seems to make sense... I never would've guessed it before working here -- but the casual gaming space is actually dominated by middle aged women. It's not exactly an intuitive thought to just assume everyone would "know"... It's unfortunate... the slowness with which "average people" upgrade their browsers is really holding technology back :-\
Shouldn't try/catch always be slower? I'm not a javascript master but in other languages try/catch is used so that the exception can propagate up through the call stack to give the user/developer a reasonable idea of what went wrong and/or degrade gracefully. So, you need to store more of the program state and you have the heavyweight process of going back up through the call stack. *Edit* Testing in Chrome 18.0.1025.168 on Mac OS X 10.7.3: try/catch 9% slower.
That's what the podcast is for :)
Well apart from the incredibly bad lag and the glitching through the puck it was quite nice. As a tech demo its fine but if you was to do something like this for prime time I couldnt see it playing out well 
Great tutorial. I saw this in the Marionette wiki recently. The inline code is a really hard to follow because of the lack of indentation though. What's the reason for using $.ajax directly? Overall i'm glad to see Marionette getting some limelight! 
Regarding Chrome vs FF, browser choice shouldn't matter as to whether you get an opponent or not. Volume has been fluctuating all day with around 5 to 15 players on and off all day. You can open a second window and play yourself -- that's how we did a lot of testing. (cue forever alone pic)
If the exception is thrown, then yes, it's slower. However it doesn't throw on every loop, it only throws on new characters. In lots of implementations, not throwing is free. So if the character exists, it should be faster then the if statement.
Thanks :) There's also a blog post where we talk about building it: http://blog.artillerygames.com/2012/05/realtime-multiplayer-3d-gaming-html5.html
yeah... that's not going to happen. It takes more effort to listen to a podcast than to skim some text.
The whole hitting backwards part is what made it feel realistic to me.
http://en.wikipedia.org/wiki/Impostor_syndrome &lt;-- read up here. You're just getting anxiety about starting your first job. I can assure you that the other guys are in the same boat. Also, it's a summer internship... don't worry about delivering. Focus on learning everything you can. If it makes you feel any better, the kids from the elite universities have their own anxieties: http://theamericanscholar.org/the-disadvantages-of-an-elite-education/ 
Uh, what. 1. Catch block never runs. `foo.x++;` does not throw if `foo.x` is not defined. It assigns to `NaN`. My guess is that JIT's figure out this and optimize things away (with guards). It probably has better branch behaviour too. 2. You're reusing the same object for each test, which is clearly wrong. Don't mutate globals in a benchmark. Unless I'm misreading the test. But still, global lookups are slower. 
Every time I start a new job, I have this issue. Just be yourself and try your best, there isn't anything else you can do. As soon as you start (or even now), if you come across something which you don't know, look it up or ask. If you keep doing this, you will be fine. Every job is just another opportunity to learn.
I only go to the fanciest pizza joints rural cities have to offer.
I agree that knowledge of the DOM is important but a modern JS programmer will probably use the language in more than a browser environment. In my current position I write command line apps with node js which use some of the modules that are packaged in our web app to do analysis on static html pages. Also I am frequently called in to write utility functions for mongodb. And I script interactions with our app using PhantomJS for integration tests. Besides knowing the language also please understand the platform! Understand the event loop and how it works. So many JS programmers dont understand the environment and when something *funny* happens they dont know where to start. 
If time permits try to read the book, Object-Oriented Javascript by Stoyan Stefanov It's really a very good book to learn JS from the scratch 
I could certainly look into doing that. I haven't had a chance to do much this week because of work, but this weekend I will be right back into it. So I'll be in contact with everyone who got in contact with me for this on the weekend :) and maybe we could get this thing really on the road.
Good game, Skip!
A neat tech demo. Was a bit too jerky and I had bad latency issues but impressive none the less. I wonder with Unity and Flash/Stage3D if WebGL will really be able to compete? Early days I guess.
Other people give good advice about how to learn and evolve in your skills. I would also like to point out that part of what you're feeling might be imagined — aka [impostor syndrome](http://en.wikipedia.org/wiki/Impostor_syndrome).
Animation className seems helpful, the tween controls are neat but the Timeline methods looks great. However, most of the basic stuff is already part of jQuery and I really dislike some of the syntax choices; e.g., having to animate CSS properties with a CSS object, just so that "huge" extra code can be optionally loaded and having tons of extra global variables just for a few Easing properties. Also, TweenLite/TweenMax and TimelineLite/TimelineMax - seriously? Just call it Tween/Tween.Timeline or whatever. Edit: I'm sure that most of these are due to historical reasons. This seems like a nice project that has been around for Flash for a long time, I'm sure the team will improve their JS version as we move along.
You're in a position where you will learn a lot of information in a short period of time. That's awesome. Buckle your seatbelt, hang on tight - and enjoy the ride. Worst case (and I mean **worst** case) they let you go, but you'll leave with a lot more knowledge/experience. You never make the shots you don't take!
"JavaScript Garden is a growing collection of documentation about the most quirky parts of the JavaScript programming language." http://bonsaiden.github.com/JavaScript-Garden/ And a realle good quiz: http://perfectionkills.com/javascript-quiz/?=123 
&gt; modern programmer, more environments than browser, etc. Am I anomalous for only using JS browser-side as a salaried webdev, or is it just an artifact of working for Microsoft shops?
I use js for EVERYTHING! (also a salaried dev).. and eff MS for making asp.net.
My sympathies. I've learned that while you *can* do some really nifty hacks, the associated hoops you have to jump through just make the whole process ... less than sane. EDIT: Wait a second. If you're using WebForms at work, then where are you using JS server-side? While I imagine it's feasible to use mongodb or something for your backend, it seems weird to not just use a full Microsoft stack.
I usually embed gist directly into my blog for great syntax highlighting. (http://amccloud.com/post/23016397929/backbone-bindings). There is no major differences between Backbone.sync and $.ajax aside from a bit of abstraction. Hooking a collection to an external web service is within the scope of Backbone.Collection, though you may not be able to update/delete models because the service is read-only. I've created a jsfiddle demonstrating it: http://jsfiddle.net/tbaZs/23/ (view in console when running) This way you get all of the collection goodies like comparators for maintaining sort and de-duplication. 
I had to compile such a small list of questions last year (more about HTML/CSS, but a bit of JS questions for advanced users): * What is in "arguments" inside a JavaScript-function? * Explain what is a Closure in Javascript, what it does and looks like: * What is the easiest way to send a GET-request to a server? * What are the disadvantages of document.write and what are the alternatives? All of these questions are answerable with different levels of JavaScript knowledge, though only professionals will remember that arguments is not an array, (new Image()).src=... sends a GET request and that document.write() comes without DOM integrity correction.
No, you're not, most people are in this camp. 
If we had trophies, you would get one.
And I would display it with pride!
This! I was asked in an interview once a question about the difference between two low level types (not JS related) and instead of trying to BS my way through it I plainly told them that I didn't know because they were not something I needed to understand in my prior work. That impressed them quite a bit, and combined with the fact that I demonstrated the ability to easily learn anything I didn't know got me the job offer (though I ended up turning it down as they failed to impress me during the interview and I knew I wouldn't want to stay long).
&gt; yes I'm reusing it and resetting it for every test cycle, why is that wrong? Why I shouldn't mutate globals if the tests are executed one after the other? I was kind of confused as to how the benchmarking tool worked. Is the .prototype.setup method called for each execution of the test function, or is it called for each test type? (I assumed the latter, but the former is a possibility I didn't consider.)
&gt; It avoids the cost of looking up the character and checking if it's truthy, before the ++. Ah, I see. Didn't really understand what you were saying before, I guess. =]
&gt; Every time you utilize a library, such as MooTools or jQuery ... or if you just use it, ...
This seems like a good approach. I like this better than Ember's. Like KerrickLong I'm not too eager to abstract away the URL as the central source of truth. Question: how do you handle things like filter variables with backbone routing? Are they just internal state (so if you hit F5 you lose your filters) or what?
I felt the same way on my first job programming. Now I look back and realize I've come a long way because I never quit the problems and asked for help only after I used every available resource available to me. It only get's easier!
[indexeddb](http://www.html5rocks.com/en/tutorials/indexeddb/todo/)?
I can't think of any Ivy League schools with a good compsci program (maybe Penn). But, if you've already launched a successful startup, you're way ahead of everyone else. 
If you have a good grasp of DOM, you know more about it than most people.
I'd like to see where you get your numbers from. I don't doubt that this is a real concern, but I do doubt that it's an issue that affects 99% of Backbone-based apps, because I sincerely doubt that only 1% of all Backbone developers would be able to code around a race condition such as this. This is Asynchronous I/O 101. Making claims like this without the evidence to support it makes it seem like you're selling snake oil, when you've actually put together a pretty useful utility.
1) Anything that inherits from Object will be passed by reference. If you create a string via new String, it's not a literal like "foo", so it gets passed as reference still. 2) I asked this really stupidly, basically I was looking for namespacing via (function( $ ){ ... }( jQuery )); 3) You should add Cat.constructor = Cat 4) Making one big string and adding it to the dom is faster than multiple nodes seperately 5) generally I go by a rule that 300ms is long enough to notice, and generally refresh is about 30ms. 6) apply, different being one uses an array for the variables and the other is extra attributes. I prefer using apply.
Sorry if the title seems sensational. Unless you're patching all of your collections and models (or sync) imo your application is broken. One could argue thats an issue with backbone. Which is now why we have a pull request https://github.com/documentcloud/backbone/pull/1325 Since this type of behavior has pretty much gone unmentioned and it generally doesn't matter i'd have to say a majority if not all backbone applications can be affected given the right conditions. 
Yeah it's a bit silly. I always have an ajaxmanager class that deals with the requests in queues. If you run a PUT on an object and then do another PUT before it comes back it waits for the response and sends the second one with the updated server_modified_at. You can use similar things for search, just have a search funnel and if a second one comes in then just remove it's callback and run the next search.
Yes, that line fixed it. However, you added a prompt to the function which created a window and I didn't know what to do with it (I removed promp() and it worked). Thanks!
Yeah, I didn't realize it was trying to use strings instead of numbers. Thanks!
Down vote solely for the sensational title
Cooooooool. A couple of questions, which I guess are fairly n00b-ish: where is stuff stored? Does it expire like a cookie? What kind of user permissions are necessary? This might be useful in [my microtonal synthesizer app](http://offtonic.com/synth), so it's worth a try! Thank you!
I apologize in advance, because I just glanced over your question, but I believe the following will answer it, anyway. If not, let me know and I'll look in more detail and give you a more detailed answer. Use a custom event. Trigger it when you get your response, and do your binds inside of a bind for your custom event. There are examples under http://api.jquery.com/bind/. **edit**: the more I read the more I think there's a better way to do what you're trying to do... can you elaborate on the *purpose* of what you're trying to do? What are you really trying to accomplish--setting your current technique aside.
Maybe consider changing the name. It's hard to tell whether the first letter is an l or an I (L,i)
you could do a check for content before running the init maybe? function foo(){ if($(elementToBeLoaded).text == "") //do init end if //do rest } 
That isn't a bad idea and something I might fall back on, but I'd have to do a setTimeout or otherwise keep calling that function until the element appeared (or I decided it had looped enough). I am going to try to do it with custom events though first.
treecoder is saying that you would use the foo() function above as the callback. This is a/the way.
Ah. I'll have to think about that.
Yeah, DOM storage is far from "the way it should be", since it's synchronous http://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/ Of course, I'm don't drink the NoSQL kool-aid either. We shouldn't have to re-invent the square wheel of querying logic in each app, rather than off-load that work to another layer that has been refined over many years by specialists. This is how I feel trying to do anything more complicated than *stick value in, extract it again* with a NoSQL system: http://howfuckedismydatabase.com/nosql/
Right. I am still learning about them but they seem useful. But all of my functions are written to return html or to append html in the ajax callback. Er, I guess I could set my eventHandlers to return $.ajax though?
You can create a deferred object instead. var def = $.Deferred(); //do a ajax call here return def; //When the asynch event/ajax call is done, do def.resolve(); and then the function under then() will trigger!
Try something like [this](http://pastebin.com/BT2PVCjM).
How is this a backbone.js specific thing? Any asynchronous events are subject to race conditions... (unless I am missing something?)
The demo is fun to play with in chrome. In firefox it's painfully slow (I know it's because there are so many shadows). Sure gives a good example of the difference between the two's performance.
Don't use 'rel'. Make a custom data attribute.
Wow, thank you so much! This would be a great tool for saving user data in my app! By "user permissions", I was asking whether the user needs to specifically allow things like this. Are there safety concerns?
jetienne Learn your game characters! cool demo though :P!
Just set a variable. var returned = false; //trigger ajax $.ajax({ ... 'success': function(resp){ if(!returned){ }else{} } }); This is part of the reason why I prefer MooTools. You get object instances that you can easily reuse and handle these types of situations better
The issue with this (I think) is a) if it is outside of the event handler it will be a global variable which I wanted to avoid. b) if it is inside the event handler it will be reset to false every time the event handler is called. But I might not understand what you are saying.
And they have limits as well. I tried hot linking my [little jQuery plugin](http://prezjordan.github.com/dynamo.js) but when a lot of traffic started coming in, the script stopped loading.
Just did a jsperf comparing lookup times. Assuming totally random insert of keys in your array iterating over them as the lookup method vs the object lookup. Key lookup in objects is going to be more or less linear no mater the key. http://jsperf.com/looking-up-keys-in-object-or-array
yea, custom events is probably the better way to go.
Wouldn't you need to give us more information on what you plan to do with it? It seems like there are trade offs at hand here and it seems like the way you organize your data will really matter
The sort algorithm runs its own independent logic in the order it finds necessary until your entire array appears "in order." It's not a straight loop. You could try putting in a console.log(a,b) to visualize the steps the sort algorithm takes, try experimenting with different array orders in this fiddle http://jsfiddle.net/rt4bA/
You're trying to loop through an object's properties using a key as the value and access them using dot notation. That won't work. It will return undefined unless you have a property named 'prop' on your object. It needs to be obj[prop] not obj.prop
Would be great if it didn't eat my CPU cycles. I hope this kind of stuff does not proliferate.
Because every variable in JavaScript has functional scope. Each variable declaration is carried to the begin of function.
This stuff is like a modern version of the 90's falling snowflake effect.
If you're used to other languages such as Java or C++ that have block scope, then you would write something like: for(...) { int i = ... ... } ...and expect (correctly) that `i` only exists in the block of the loop. But JavaScript does not have block scope, only function scope. That `i` variable declared in the block exists everywhere in the function, both before and after the block. The declaration is hoisted to the beginning of the function. If you were expecting that variable to only exist in the block where you declared it, you are in for a rude surprise. ES6 I believe will finally standardize `let` which allows for true block scope. Some browsers have supported `let` for a long time, notably Firefox, but it's not standardized yet.
I have something like that: var namespaces = { "jQuery" : "function", "YUI" : "function", "Prototype" : "object", /* (...) */ "Modernizr" : "object", "Cufon" : "function"; }; The list is much longer. The only thing I do with this is iteration and testing if window[namespace] exists and equals typeof namespaces[namespace]. So I decided to use two dimensional array instead of object.
You should use `getItem` and `setItem` methods to read and write into the [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) object. storage.set("getItem", "fail"); localStorage.getItem("foo"); TypeError: Property 'getItem' of object #&lt;Storage&gt; is not a function
It's probably that you are not checking the console. I used the console to log messages more easily. If you are using chrome, you'll want to go to Tools-&gt;JavaScript Console, and if you are in Firefox, you'll want to use Firebug.
Great, one less reason I can use to convince people to make their content accessible w/o JS.
does this mean that there is no more need for #!?
But shouldn't it also be one less reason that you *want* to convince people to make their content accessible w/o JS? What other reasons are there? (This is not a rhetorical question), I am honestly asking. I guess the only big one that I can think of is that js can be prone to breaking. Anything else? 
2018 - 32 core CPUs allow for smooth realtime drop shadows!
This has been possible for at least two years - see http://www.stonetemple.com/articles/interview-matt-cutts-012510.shtml and many other pages if you don't have historical logs to confirm first-hand. There was a post about this last November as well: http://googlewebmastercentral.blogspot.com/2011/11/get-post-and-safely-surfacing-more-of.html
Accessability and NoScript fanatics. edit: To calrify. I don't give a shit about people who don't have javascript in my personal projects. But if my client wants their page to work without it, they shouldn't hire me as a javascript developer. ;)
This is a terrible reason not to do more this stuff. It is not a commercial application, it is an experiment exploring the boundaries of what JS/canvas can do.
Sorry I should have been more precise: I hope this kind of stuff does not proliferate on regular sites that I visit for the content.
At first I thought you were just doing some cool canvas stuff, but then realized you're actually using CSS box-shadow, nice work! Shadow all of the things! javascript: $('*').realshadow(); Request: An option to use textShadow instead 
Did you make this? Have you heard of [this](http://bartaz.github.com/impress.js)?
yeah, #! looks extremely ugly to me. and practically, it breaks links
&gt; Accessability Meh ... only a fairly small minority of sites give a rats hairless tail about accessibility. There are some sites that are mandated to be accessible, but for the most part, almost no one cares ... at least not enough to make it a design consideration. &gt;NoScript fanatics. Fuck those guys ... really. If you're so freaking paranoid that you want to surf today's web with JavaScript turned off, then more power to you. The web must be a pretty broken place to you.
You only need one one argument for HTML5, clean markup and accessibility without JS: "Think of the visually impaired!" (alternately, if you're speaking to a pragmatic: think of whoever's gonna maintain that site!)
On my site, I set it up to report any client side errors. We then started to randomly get this huge spike in errors, in batches. It was failing to do an ajax call, and then use the result. The problem couldn't be reproduced, and why it might happen was baffling. Then I had it report the UA, and it was shown to be the google bot. This was over a year and a half ago.
I'm a webdev too (13 years in the business) ... and really just couldn't be bothered to go around flipping JavaScript on and off. Maybe if I had a specific problem on some site I needed to see ... or sometimes turning off javascript disables some naive paywalls. However, I've got a fast machine and a fat pipe ... It's rare that I hit a "legit" site that's so encumbered with crap that it loads slow enough for me to care. Now, I do run ghostery and adblock, and that right there filters out most of the egregious stuff, usually leaving only the site's own .js to do its thing. So ... that just leaves XSS attacks. I guess I'm vulnerable, but the attack vector is pretty weak, and generally requires some action on your part to "get you". I learned long ago to read the text above the "ok" buttons...
&gt; All’s well and good thus far, but what happens if we want to iterate in reverse? One might think by would do the trick: if for element in array by 2 steps forwards through the array in increments of two, shouldn’t -1 step backwards? While it technically does, the comparison operator is not changed accordingly, giving us an infinite loop I think this is a good candidate for a bug tracker? Anyway, excellent article, I'll bookmark this.
I'm just *waiting* for GoogleBot to subscribe to my newsletter and actively participate in my forum discussions..
*looks up* ... Nope, I didn't wander into /r/coffeescript by mistake. You posted this in the wrong subreddit. edit: Go post something about Objective-C or C++ in a C forum and see how well it's received. They are different languages. The analogy isn't perfect since C++ and ObjC aren't compiled to C but I still think it's apt. And C++ used to compile down to C. Anyway, get off my lawn ;-)
I too idle #javascript, but at least there I can pretend I didn't read the question about "implementing a client side authentication solution" and subsequent arguments on the validity of said system.
But that isn't necessarily a reason to not use javascript. Good screen-readers are pretty damn smart, and can cope with a changing DOM.
Screen readers can now look at the current DOM which makes that argument obsolete. That leaves NoScript fanatics which I'm sure has to be an inconsequential amount of users.
Maybe Googlebot is first to gain sentience
&gt; What other reasons are there? (This is not a rhetorical question), I am honestly asking. REST and device agnosticism are the *reasons* the web works, and has taken off as well as it has. HTML forms an interface where any any simple client that speaks HTML and HTTP can request the *meaning* of a resource, and only clients which care about aesthetics or behaviour have to request the CSS and Javascript. JS-*only* sites (as opposed to JS-*optional* sites correctly using progressive enhancement) break this clean separation of concerns by making javascript (*behaviour*) mandatory even to query meaning. They also typically fuck up the ability to distinguish the meaning of a document from its behaviour, which has knock-on effects for everything from complicating search indexing to making aggregation/translation/mashups hard or impossible. For example, say I have a site which displays a list of contacts for my company in HTML - anyone who wants to can request that HTML, parse it out, ignore the bits outside of the (microformatted) contact info and do whatever they want with the list - dump it into a database, make it into an API other systems can query, integrate it into an application, construct a contact-info search engine, etc, etc, etc. Now imagine my page instead loads minimal HTML and a whole mess of javascript which dynamically sets up the page-markup and dynamically (bonus points - possibly even using an AJAX request) displays the contact list. Now to get that contact list the user has to not write a five-line script that's smart enough to call cURL or wget - they have to implement a full, scriptable, DOM-building, JS-enabled browser environment *just to get the basic info we want*. Moreover, instead of retrieving a simple one-dimensional string of HTML, parsing it into a static DOM and sucking out the rich, gooey data, you have to construct a dynamic DOM *which may change over time*, and in ways *you have no way of predicting*, and then try to navigate it to suck out the data you want. These are just a tiny, tiny handful of the reasons why inaccessible information is bad - it was bad when people put text in images, it was bad when they built "websites" entirely in Flash binary blobs, and it's still bad when they construct baroque, impenetrable client-side javascript shells that carefully cocoon and mutate their data in unpredictable ways. It's hard to appreciate the million and one little ways accessibility is vital to the web, but it *is* vital. The first priority of any well-engineered website is to make the information *accessible*, and the second and third priorities are to make it pretty and convenient to manipulate in a graphical, colour desktop browser for fully-able human individuals. Every new generation of web-developer or so we end up re-fighting the same old battles, as naive or just arrogant developers who don't even understand the fundamental nature and priorities of the medium they're working in (mistaking it for merely "a way to put graphics in front of people's noses") make the same old mistake of prioritising a slight increment in aesthetics over the single most important purpose and priority of the medium.
There are a few advantages over IRC, some more obvious than others. First off, the phone is more "real" than IRC. You put more "at risk" in a weird way. This likely strains out a lot of dumb questions, etc.. Secondly, you probably have a better feeling that the person helping you is a pro, why else would they be dedicating phone time to this? You also get more personalized help this way, very 1 on 1. Some things are also just easier to explain over the phone. You do bring up a great point though, I imagine code would be extremely difficult to share and comment on, forcing the use of a computer anyway. To get the almost all the same benefits, minus the very high cost of a 1-800 number, I thinking a Skype line would be a better idea. Could still be 1 on 1, etc. Definitely more people would be willing to volunteer their time also, and it would be very easy to share and work on code, point them to relevant links, etc.
But those other words *are* content. I'm not sure moving parts of content into the JavaScript is an improvement, or is it?
&gt; I thought throwing this stuff in data attributes was more organic that having the same thing over and over again in javascript. It is. Those words are content, not directives or arguments for code. I'd always rather keep content with content and code with code, so I'm a bit confused at the other responses, TBH.
It's misleading(and thus discouraged), but it isn't *wrong*, and anyone who tells you otherwise suffers from poor critical thinking skills.
A lot of valid points, for me the biggest argument is: HTML is for presentation, javascript is not. Using javascript-only links and/or fetching the basic page content with ajax should be discouraged because it's the wrong tool for the job. JavaScript should be used to complement the content. I started using the NoScript addon recently and I was really disappointed to see the amount of blank sites I see. That's not how the web supposed to work. It saddens me to see the simplest pages inaccessible without JS. Applications - sure, but blog posts? Google groups discussions? Why would these things *require* a scripting engine?
lol, you're a webdev but all your reasons are "me, me, me" - you create websites for others to consume, you should be thinking about them
This is not what I've heard from people who have to use them.
No known ones atleast. :P
Thank the guy who wrote it. Guy by the name of Callum Jones. I emailed him off his site, asking where he got the iOS links from, he pointed me tot he API and JSON. Very nice guy.
I was just writing you a little utility to do this. I thought it would be a 5 minute job but, unfortunately, the JSON link you've provided is malformed and isn't valid JSON. For example the 'itunes' object has the 'os' and 'versions' field defined twice. I don't have enough time to write a not-quite JSON parser from scratch. Do you know where this JSON is generated _from_?
Agreed, less innovation and more top X lists (sarcasm^3 ). 
[Here's a link to the API](http://api.ios.icj.me/v2/) at icj.me, who is responsible for the JSON. The original list from Apple comes from [this Apple site](http://itunes.com/version). Edit: Actually include promised link.
Oh, you... you ROCK. Testing this now. Thank you so much.
https://gist.github.com/2725749 A python2 script which extracts all the Firmware URLs from the (Apple) link you posted. The JSON is just too broken. Use with bash: for i in `python2 idevicefirmwares.py | grep ^http`; do curl -O ${i} done Note that some URLs have the 'protected' protocol (hence the grep) which probably means cURL wont be able to download them.
Thanks for this post! I am also someone who went to college with CS in mind, decided to major in finance instead, got a law degree, and am now going back to programming. I relate to what you said and I think it is an excellent response to the Jeff Atwood article.
Yeah, whoever wrote this JSON doesn't know what JSON is. It isn't even valid Javascript. They might have had an XML file and guessed at how to convert the tags to JSON, so the original file was something like: &lt;itunes&gt; &lt;os&gt; Windows &lt;version&gt;...&lt;/version&gt; &lt;version&gt;...&lt;/version&gt; &lt;/os&gt; &lt;os&gt;...&lt;/os&gt; &lt;/itunes&gt; You could turn it into valid JSON by changing the os lines like: "itunes":{ "Windows":[ { "version": "10.5.3", ... }, ... ], "Mac OS X": [ ... ] 
Thank you for this. I will definitely try to incorporate this into the schema. Everyone here has been so helpful! I'd like to send you a tip via Paypal if you're set up there, for your time. PM me.
It doesn't download the whole list. I didn't get that from your specification, it only downloads the *latest* firmware. Sorry about that. One minute. PS: No payment needed since I find this project fun. 
Hang on, I think maushu has it done. I'm testing it now, and so far so good. But thank you!
oh hey, that's cool. I should probably finally learn to use node.js.
Ok, changed the code to download all firmwares in the list. The code should be legible with the comments and variable names. Notice that "firmwares" contains all firmwares and "firmware" contains a single firmware, and by firmware I mean one object from that list. Hopefully your javascript skills should be enough to fix any problems in the future (in case the api changes). On another news, if you know a little javascript (and aren't an expert on bash), node.js might be good for you. It basically gives an api to do server/desktop stuff using javascript. I used it to: * Request the json file and the firmware files. (http.get) * Manipulate the file system (fs.*) * Pump streams from the http request into the file. (util.pump) These three things are kind of hard/impossible on browser javascript. 
To clarify, does the script now pull ALL firmwares in the list, or just the ones for the latest update (so, as it stands now, all 5.1.1 firmwares)?
See [message](http://www.reddit.com/r/javascript/comments/tt8fs/can_someone_help_me_create_a_relatively_simple/c4pl33u) below.
I need to have it only pull the 5.1.1 (latest) version-- But for each different model. I.e.-iPad, iPad2, iPad3, iPhone 3GS, iPhone 4, iPhone4(s), etc.. Each one has a model-specific version of the latest firmware. Some older models no longer stay on the latest firmware, so the number of new downloads looks to be 14 by my count. I'm guessing the way this will go the way the script is written now is to download all the firmwares for the ipod4. Can you tweak this? I stand by my offer to give you something for your time.
It's done. Check the code. What a disaster that was. xD It's not very robust at "parsing" the JSON (ex: It will break if the order of attributes change), so if you find a better way you better use it. :3 Either that or ask the owner of the API to fix their JSON. It's valid but _unparsable_ by any JSON parsers.
Thank you again. :) Based on the fact it's going to download 20 files, I'm assuming it's taking the latest firmware (6 of these models are no longer updated tot he latest firmware by Apple). This works great. In hindsight, I kind of which I had started with the actual XML file from Apple, since if the JSON guy's site goes dark, I'm hosed. But I'm not going to take up any more of your time; I'll work this out on my own since this will serve for the foreseeable future. You have been more than helpful. If you're ever in IND, I'll buy you copious amounts of beer.
Oh, sorry about that. That was me experiment something and forgot about it. Just change fileWriteStream.close(); to fileWriteStream.end(); on line 113. And restart the process, it should start on the next file. The file it downloaded *should* be okay though. I wasn't able to test the download til the end with this connection. :p 
Assuming you're fine with using jQuery, assign the inputs the same class names and do: var totalQty = 0; $('.prod-attr').each(function(){ totalQty += parseFloat($(this).val()); }); console.log(totalQty); if(totalQty%6 === 0) { // Do something here if it's divisble by 6 console.log('The number is divisble by 6'); } `totalQty` should have the total quantity, and it will check to see if it's divisble by 6 and tell you in the console. I didn't test the code, but I'd assume it's correct.
I tried the jquery/class thing before, but it didn't seem to work. I'll give it another shot, thanks much.
Will do. Thanks much! These look like exactly what I need.
&gt;'&amp;' has a special meaning in (x)html. It is used exclusively to start/indicate special character references, so (if 'ampersand' is meant) it cannot be written as is, but must always be written as '&amp; amp ;' (or &amp; #38 ;) (without the spaces! the forum converts the proper code to just '&amp;'!). If you've set wordpress up to use utf8, it's simply correcting your syntactically wrong use of '&amp;' ie on its own. source: http://wordpress.org/support/topic/unwanted-characters-038
Yes, this is one of many reasons to avoid using coffeescript. 
Wordpress is wrong in applying that conversion across the contents of a &lt;script&gt; tag. "&amp;" is not an escape character in javascript. edit: I think [testu_nagouchi has it right](http://www.reddit.com/r/javascript/comments/ttmbb/javascripthtmlwordpress_question_please_help_me/c4pm1cr), that wordpress' online editor doesn't like you pasting javascript into it :)
How 'bout a reddit code review then?
The pervasiveness of the disinformation is legitimately frightening. For anyone who needs convincing, [w3fools](http://w3fools.com/) is here to help.
Hmm, although I agree that they should put their info in a wiki-like format and allow user input and corrections, I generally use w3schools as one of my goto references. edit: they are usually within first 5 searches on google for most topics, have enough information for me to get an idea as to how to something works and improve my search query. Their information is presented in a neat and familiar fashion.
This is useful, but it won't speed up native controls (buttons and other inputs). For that reason I created a kind of crazy version that listens for all touch events that bubble up the DOM: https://github.com/davidcalhoun/energize.js Apologies for blowing my own horn, but I implemented that because I thought there was a need, and it works decently well. This is what's running behind the scenes on the new CNET Mobile implementation. It's definitely not perfect, but it speeds things up reasonably well. :)
https://developer.mozilla.org/en/JavaScript/Reference This is the JavaScript reference from Mozilla. I urge you to turn here first when seeking information - you'll find it much more accurate and complete than w3schools. They also have CSS and HTML documentation.
And that is an argument in favour of w3schools in what way?
The first part is true, but it's no testament to its quality. I guess you can say that it's good enough except when it's not. There are other sites that are better than w3schools in every way (except showing up first at Google, but really?) so I don't know what's the point of using it when you know how many factual errors it has. If you want a quick CSS reference, bookmark [that page at Mozilla Developer Network](https://developer.mozilla.org/en/CSS/CSS_Reference). Adding a keyword for their search is also highly recommended.
We won't hold you responsible for the contents of the book!
The script is being run before the element exists - the page loads progressively, and at the time that script tag is being dealt with, that div hasn't been drawn to the page. Try moving the script block further down the page, past the div you are working with. In most browsers this will work - I seem to recall that old versions of IE get a little twitchy about being asked to modify the page before it has finished loading. That's why tools like jQuery tend to provide a way to run a function just after the page has finished loading.
Your JavaScript code is attempting to change the DOM before the DOM is *ready* so it fails with an exception (use a debugging console). Just wrap the code in an addEvent(): window.addEvent('load', function() { var headingElement = document.createElement("h1"); headingElement.innerHTML = "here it is"; document.getElementById("div").appendChild(headingElement); }); For your own sanity, I would also recommend using clearer more descriptive variable names and IDs.
I edited my comment to say that exactly. They are usually within first 5 searches on google for most topics, have enough information for me to get an idea as to how to something works and improve my search query. Their information is presented in a neat and familiar fashion.
Alright, I've sat idly by and watched people get upset about W3Schools for the better part of a year now. Really, it's time for everyone to shut the fuck up. W3Schools is a website, just like any other website. They never claim to have any affiliation with the W3C, so if you jump to the conclusion that they DO, that's your error, and that misinformation is based on nothing other than an assumption you've made based on their name. Like any other website, they have no obligation, legal or otherwise, to offer the "best" or "most accurate" information on the internet. There are HUNDREDS, THOUSANDS of websites offering information on web development, MANY of which have outdated and/or incorrect information on them. Do you want to start idiotic campaigns against all of them as well? They're a fucking resource which you willingly use, KNOWING their information may or may not be the best or most accurate. You'd have to be a goddamn idiot to trust one internet site as your SOLE source of information, and for christ's sake, we're programmers; we inherently look for multiple sources of information when learning new material. Pick a new battle, for fuck's sake. Their site is well-organized, easy to read, loads quickly, and is easy to search for content within. If you're determined to become a master at a certain topic, pick MORE THAN ONE SOURCE OF INFORMATION TO READ FROM, AND TRUST NONE EXCLUSIVELY. I've never seen anyone target a sole website like people target W3Schools, and it doesn't make any fucking sense. You're wasting everyone's time and pissing me off. Stop it. Now, bring on the downvotes.
FWIW here is some javascript for this jsfiddle without jQuery: document.getElementById('fields').onsubmit=function(){ var total=0, inputs=this.getElementsByTagName('input'); for(var i=0;i&lt;inputs.length;i++){ if(inputs[i].value&gt;0)total+=inputs[i].value-0; } alert( 'The sum of these input fields: '+ total+' is '+(total%6?'not ':'')+ 'divisible by 6.' ) }
I didn't say the blind or the maintainers would be smart.
Experts' exchange.
Why are you so upset? It seems like a lot of people are reasonably frustrated with the really mediocre and woefully incomplete information that w3schools puts forward. I know I am. Therefore it makes sense to find it ironic that they would be in the business of publishing a book which purports to be an authority on such a subject. W3Schools is the C student of online tutorials. We have no obligation to like what they do. Like any other website, they are putting something out to the public and welcoming any comment or criticism they receive. Maybe it's not their fault that they receive undue high SEO, but they do, and even beginners in the field can recognize that they don't deserve it.
Run while you still can!
but that doesn't help me? it had to be possible to get a gosh darn calculator in there? 
I'm with you on this. I work with enough different languages that I'm googling syntax all the time. Often, a W3CSchools tutorial ends up being the first result, and you know what? It's usually good enough. I'm not referring to them for solutions to complex problems, the best mvc architecture or the ideal framework to use for X; I'm referring to them for basic syntax, when I'm drawing a blank, and they're great for it. I think it's just one of those things, like typography snobs bashing Papyrus, where even if their claims are justified, it's more about seeming "in" with your field than the criticism actually being worthwhile. 
im trying. i cant figure it out. 
Whoa, *Papyrus*? You need to settle down.
I have at least 3 W3Schools tabs open in this browser from today's projects....for a quick reference, they're not that bad. I agree.
you. i like you.
At least now we can literally burn it with fire.
Well, that site deserved the hatred.
thank you for your answer. i have an array with this structure: [ { name: "a", value: "1" }, { name: "b", value: "2" }, { name: "c", value: "3" },... ] and i want to loop trough every obj inside the array, take the value of "value" and change the type from string to number.
That's an idiotic oversimplification and generalization of what's going on here. They're a website. They happen to have been able to use the mystic powers of SEO to get their site to rank higher than most when a user inputs a vague, generalized search term into a search engine. This has literally NOTHING to do with whether or not their content is "the best." It also has absolutely no bearing on whether or not they "SHOULD" have "the best" content. Things improve because of competition. This is true in every single market since the dawn of time. There's more than enough competition in the realm of informational webdev websites out there to choke an army of horses. If you settle for reading ONE website, and that's your only exposure to a particular piece of information, you're an idiot, and you only have yourself to blame. As I previously said, they have absolutely NO "responsibility" to do anything, whether you like it or not. If you're going to target them for not living up to King Muppethead's standards, I hope you'd do the same for every other website on the internet offering "subpar" content.
You nailed it. If I want to remember what array methods JS natively provides, guess what? W3Schools is a fine resource, and I can find the information quickly. &gt; it's more about seeming "in" with your field than the criticism actually being worthwhile. Absolutely. I'll never forget the day a handful of months ago when a coworker was googling some font-end stuff and had W3Schools open in one tab. Another coworker came up and immediately started berating him: "why you using THAT site?" "they're the worst, haven't you heard?" "w3fools, man." When I asked him WHY they were "the worst," he couldn't give me a single example of incorrect information on the site.
I'm upset because the VAST majority of negative publicity they receive is a direct result of this idiotic "w3fools" campaign, and NOT the result of individuals actually seeking out information on W3Schools and finding it to be insufficient. The hate campaign against them is the direct result of too many developers wasting time reading Twitter feeds and latching onto other devs' opinions. It's irritating to me to see people blindly spouting negative publicity about an organization they know literally nothing about, and couldn't justify if you asked them directly. I like to think people can form opinions and seek out informational resources based on their own experiences, not the "wise" words of some pretentious group of assholes.
&gt; I'm upset because the VAST majority of negative publicity they receive is a direct result of this idiotic "w3fools" campaign, and NOT the result of individuals actually seeking out information on W3Schools and finding it to be insufficient. How do you know that? &gt; The hate campaign against them is the direct result of too many developers wasting time reading Twitter feeds and latching onto other devs' opinions. And how do you know that? I think you are wrong. &gt; It's irritating to me to see people blindly spouting negative publicity about an organization they know literally nothing about, and couldn't justify if you asked them directly. I like to think people can form opinions and seek out informational resources based on their own experiences, not the "wise" words of some pretentious group of assholes. Beginners in the web development field tend to end up at the W3Schools website (we all do, but experienced developers hopefully understand when not to trust it). When I was new to web development several years ago I did too. It was inaccurate then. It is inaccurate now. But the big problem is their way of approaching stuff. It's fundamentally wrong and contradicts everything many web developers spend a huge amount of time to evangelize. And that *is* a (great) reason to try to get people to stay away from W3Schools. And, also, the name *is* misleading.
How haven't I thought of this before. This should be the top comment.
 var i = arr.length; while(i--) arr[i].value = parseFloat(arr[i].value);
MDN is much, much better for Javascript.
Nice, looks fairly comprehensive. A few points: &gt; if(!('ontouchstart' in window &amp;&amp; !(/chrome/i).test(navigator.userAgent))) return; I don't think that's a good idea, other browsers will probably soon also have this property, plus chrome for Android coming out will break it on those devices. &gt; target = closest(e.target, 'A') || e.target, You might also want to check for closest 'area' element (even though image maps aren't very popular). Also, for the 'm-focus' class, you might want to add that to an ancestor if the clicked element is inside a 'button' element, though I would go even one step further and add the class to the entire bubbling tree line (the overhead is not noticeable and offers greater flexibility). Also, you might want to add a special class during the click, say 'm-touch', as the :active pseudo-class is not very reliable. &gt; return Math.abs(startXY[0] - xy[0]) &gt; 5 || Math.abs(startXY[1] - xy[1]) &gt; 5; Small detail, but I prefer to use Pythagorus for these kinds of checks, makes diagonals not treated differently to x/y movement. You might also want to hit the threshold if touches.length &gt; 1. &gt; tagName = nodeName.toUpperCase(); Seems a bit pointless since this is only run by your code and you pass this parameter yourself as uppercase already.
&gt;They never claim to have any affiliation with the W3C Their name suggests that they are affiliated with the W3C. &gt;they have no obligation [...] to offer the "best" or "most accurate" information on the internet. Odd use of quotes there. Anyhow, the problem is that their information is inaccurate. That's the whole reason why we try to direct beginners to better more accurate sources. &gt;KNOWING their information may or may not be the best or most accurate No, beginners do not know this. As I said, they generally assume that this site is affiliated with the W3C.
Did you try escaping your javascript? HTML: &lt;script type="text/javascript"&gt; //&lt;!-- var foo=true, bar=true; if(foo&amp;&amp;bar)alert('hello world'); //--&gt; &lt;/script&gt; XHTML: &lt;script type="text/javascript"&gt; //&lt;![CDATA[ var foo=true, bar=true; if(foo&amp;&amp;bar)alert('hello world'); //]]&gt; &lt;/script&gt; Now I'm not sure if this will work, as I do not use Wordpress, but it can't hurt to try. This will however keep your embedded javascript from causing validation errors ([w3c validator](http://validator.w3.org/)), and is a good practice by default. Hopefully Wordpress will acknowledge the HTML/XHTML escape and not convert the containing ampersands to HTML entities. Best of luck
Definitely. I've got mdn set up as a search engine in chrome. I use it all the time.
You're assuming everyone's just jumping on some bandwagon because the w3fools people found a voice. I for one have hated w3schools' crappy reference and tutorial material for years and years before I ever heard of w3fools. And now that I've given an upvote to some w3fools link from last month, you're going to say "I'd like to think you could form your OWN opinion, anusanusanusanus."
What would you suggest, then, to handle a condition as described above?
refactor the callbacks into named functions elsewhere in the scope, reference them by name. ... Or you could do something clever like obj.parseTemplate(data,template, $.prototype.html.bind($('#node'))); but that's probably setting yourself up for trouble if somebody who's not familiar with prototype and bind tries to change it. Yes, that's probably a terrible idea.
burn it with fire!
How about if you're doing an interface-implementor pattern and passing around a factory function to generate instances? Is that overdoing it with porting design patterns from C#?
I really appreciate the responses. In regard to your initial response about "circular logic" -- would the following approach be better? var obj = function(){ var template, data, node, parse = function(template, data){ //Arguments passed from successful AJAX requests //Parse data into template, populate node }; return { loadTemplate: function(path){ template = $.get(path); return this; }, loadData: function(path){ data = $.get(path); return this; }, parseTemplate: function(node){ node = node; $.when(template, data).then(parse); } } }; obj().loadTemplate('template.html') .loadData('data.php') .parseTemplate($('#node'));
I was not aware of jQuery's pipe() method. Thanks! This will definitely come in handy!
When people have heard of the "W3 consortium" and are told that those are the people that specify HTML and CSS, a lot of people start to assume they also specify JavaScript. Then, when they need a reference, they keep seeing W3schools. The natural assumption is that it's started by the W3 consortium, and those people never bother to investigate whether that's the case. The result is that I've seen *a lot* of people insist that W3schools is the official reference. That it *is* the W3C. That it's authoritative. And then they barely notice when it bites them in the ass and they have no way to correct the bad information.
Or better yet... var obj = function(){ var node, parse = function(template, data){ //Arguments passed from successful AJAX requests //Parse data into template, populate node }; return { parseTemplate: function(node, templatePath, dataPath){ node = node; $.when($.get(templatePath), $.get(dataPath)).then(parse); } } }; obj().parseTemplate($('#node'), 'template.html', 'data.php');
I often find I need kindling for some darn thing. This will do.
Thank you, robotfarts. :)
[Link for the lazy](https://www.google.ca/reviews/t?hl=en-CA)
I used the pattern from this talk: [Nicholas Zakas: Scalable JavaScript Application Architecture](http://www.youtube.com/watch?v=vXjVFPosQHw) It looks somewhat like this: Whatever.register('foo', function ($, io) { // register a 'foo' module maker // private stuff goes here // $ = jQuery (or whatever) // io = logging, listening to events, firing events return { // only reveal what's necessary init: function () { [...] } }; }); You register module maker functions on your global object. Onload all those makers are called one after another. Communication happens via events. Each module handles the functionality of one thing/widget, not of one specific page. E.g. there might be a widget which shows search suggestions. Since you use that search widget on every page, you'd also load that module on every page. This approach works very well as long as your "application" is actually just a loose collection of one-trick ponies. E.g. Twitter is like that or Reddit... or, well, most ecommerce websites. There are a bunch of isolated widgets which just do their thing and maybe they also fire events and/or listen to them. It certainly isn't the way to build big monolithic applications, but for simple stuff it works really well.
&gt;negative publicity about an organization they know literally nothing about How's that relevant? 1. They deliberately chose a name which makes people think they are affiliated with the W3C. 2. The information they provide isn't as good as it should be. That's all there is to it.
A beginner who knows what W3C is should not be making that mistake, that's just stupid.
'Sites will be blocked only for you, but Google may use everyone's blocking information to improve the ranking of search results overall.' That's good because I can't stand seeing w3schools.com as my first search result whenever I have an Javascript-related inquiry.
Interface-implementer pattern and factory functions? Seriously? Please put your foolish book of patterns down and write code independently. If your question was anything more than rhetorical you would have provided a code sample. I don't refer to code by names of patterns, but if it is so unnecessarily complex at to need a special name then it is probably best avoided. The only pattern that is essential to writing of elegant code in JavaScript is closure. Logic is most simple, and typically far faster to execute, when it is written in a straight forward declarative manner. Referring to code by names of patterns for basic style sounds like you are spending more time reading books than actually writing original code. Complex names should refer to complex principles, such as algorithmic operations. Basic uses of functions need not have fancy names except for people to communicate unnecessary complexity. The only name of a basic use pattern to which I am aware is constructor, because its such a common mistake.
The second is more condensed and easier to read, but both are very straight forward.
jQuery is a DOM library, it isn't really the right place to namespace your application code. If I were developing an eCommerce project, as OP is, it would have its own namespace and use the features of the jQuery library where needed. Plugins are one thing, but putting your business logic inside jQuery doesn't seem right.
It's not mine, so you may want to open a GitHub issue or something. :-)
&gt; Nobody is asking for W3School's abolishment I am.
In your example, performing requests to grab the template and then data (even if cached), and then parsing the template, are all *vastly* more expensive then calling each of those function callbacks. Calling a callback is pretty cheap, and should be avoided if your in a very tight loop, iterating over a huge tonne of data. In that case, you inline the function. Otherwise, just don't worry about it.
+1 Use this nice shim from our pal Paul Irish to use RAF but fall back to a set interval: http://paulirish.com/2011/requestanimationframe-for-smart-animating/
Frame.js was designed for this. It is a flow control library for JS animation. IMO a better approach than either RAF or setInterval. https://github.com/bishopZ/Frame.js
If I were you, I'd just start by privately cloning a bunch of low-hanging fruit. I'm not saying you should go make imitations in public (though there's nothing particularly wrong with that if it's not an artistic work,) but it's a good way to take a look at what the actual underlying challenges are. If you've been doing this this long, you probably already have all the druthers you need, and just need a sense of what to do. So start with some bullcrap. Don't worry about security; it's never leaving your computer. But make a quick nopaste, without syntax highlighting, just to see what it's like. Make a simple tic tac toe engine, because then you'll have to face sorting out which user is tied to which game as which player, and blah blah. Make a tiny reddit clone - if you don't have to scale or be secure, it's not too hard to fake the easy parts. I mean, I'm guessing, right? But it sounds like you have two problems. 1) You don't actually have a sense of what you want to make, yet 2) Because you haven't made stuff, you're worried that there might be landmines waiting for you #1? Well, that's just a question of writing down every time something pisses you off, because sooner or later you'll find a way to fix it, on the web, that you can knock together. Just clone simple stuff for experience while you look for your idea. Write a user system so you know how. Write a session thing so you know how. Pick little tiny projects that teach you one thing at a time, and ditch them the second you've learned your thing. #2? Yeah, there are. That's why you spend your time implementing crap until you come up with your idea. &gt; I just want to know how this person was able to rapidly build these two apps in such little time with such beginner knowledge. They knew exactly what they wanted to make. That is *rocket* *fuel*. That's part of the point of cloning: it's so that you start out knowing exactly what you're going to make. Don't change what you're cloning, except maybe to cut down to just the part you need to learn, or to ditch styling. (They're learning experiences. If they don't look like crap, you're doing it wrong.) &gt; How can I get closer to building things like this? Spend your time practicing until you have your idea. Practice carefully: choose a topic that you need to learn, then select a part-of-a-thing you could build to learn how. Once you do, ditch for the next thing to learn. Once you have your idea, check it for topics you haven't yet covered. There will be several. Learn them *before* you start on your thing. You'll make fewer mistakes going in, and you'll have time to think your thing over and cut out unimportant pieces. &gt; They mentioned they used a "Themeforest template" but I could not figure out what kind of template they purchased. I typically only use Themeforest to get ideas for Wordpress themes. They probably just took a WordPress theme and ripped it apart for art assets and a visual idea. A lot of programmers who can't art do things like this. &gt; a few weeks ago I was completely lost between using a for statement or if else, etc. You need practice. Doing small pieces of projects with targetted learning experiences is important. That means that once you have your idea of what actually to make, you'll be much more ready than you otherwise would have been.
&gt; document.getElementById("box1").innerHTML = (w ", ") What is that supposed to do? 
That's where I'm trying to print out the numbers into a box on the page. If the user enters 5 for x, I want that to return 5,4,3,2,1. Is that completely wrong?
How Paul Irish has managed to stamp his name on an API function call is beyond me.
The factorial bit was already working, but I appreciate the tips, will use!
k, guess you won't have a summary then, have fun
Doesn't seem to be working any more. It just gets stuck on an "access denied" page after the date entry page.
Just worked fine for me.
It may be because I didn't enter a date before I clicked submit, but now it won't bring back the date form no matter what I do. The page just redirects immediately to the "access denied" page even after restarting the browser. It seems to be a bug (even if it only effects people who didn't enter a valid date, it's still a frustrating bug).
Thanks to the Redditors who gave me feedback earlier, I have implemented the $.logError fully to support the browser console if available. Also implemented the required code to post the error to the server, so that it can be logged. Also created an useful utility $.showAlert, a wrapper over the jQuery UI Dialog to show a nicer alert box.
Node.js is for building JavaScript apps to run on the server (or using the same codebase for both server and client).. for client-side dev, to nicely pair with your HTML/CSS skills I'd highly recommend jQuery for working with the DOM and a framework (backbone is my favorite) for working with your data. Also take a look at coffeescript, its an alternate syntax that compiles into JS that IMO is much nicer to work with (especially when doing OO).
I recommend [Eloquent JavaScript](http://eloquentjavascript.net/). Additionally, you might want to proofread your submissions next time.
Put in some blah text, hit "submit." waited for it to load, clicked "get short URL:" &gt; Short url: undefined &amp;#3232;\_&amp;#3232;
Cross post this to every programming language specific subreddit and you've got yourself a karma machine.
An (arguably) nicer way is to use the [map](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Map) function, and do a.map(function(elem){elem.value=parseInt(elem.value)})
&gt; Strict ordering Just like an integer &gt; It supports time zones, and it has a predefined way of doing so, like +HH:MM Nope, it supports *time offsets from UTC*. This is less useful than storing an actual timezone (e.g. it is useless for storing recurring calendar entries) I've used ISO8601 in various webapps in the past, and eventually came to the conclusion that they provide almost no benefit, beyond human readability. On both generating and parsing side, a complicated mess of code grows up just to represent a date in some unnatural format that neither side of the transaction can manipulate natively. I found it simpler in web apps to just pass milliseconds-since-UTC (aka. new Date(ms)), since support for it on both sides is trivial.
is this common practice for (while) loops to handle "i" like this? i am asking because i am an absolute beginner...
nice...thank you
I'd just like to highlight something here: ISO8601 allows you to decanonicalize your timestamps into various timezones, which is a bit hairy. Best to send everything in absolute millis or seconds since epoch, UTC. If you need higher precision, I suppose you can use floating point numbers... EDIT: The only thing to recommend ISO8601 is that it is hella easier to debug with. But for god's sake, keep everything in UTC!
Meh. `(Date.now()+'').substr(0,4)` 
&gt; You're assuming you know what people mean when they say "Design patterns", in some vague generic way, but it's actually a specific list of well-defined patterns I am completely aware of this. Clearly you are making some generic false generalization in some vague generic way. Design patterns are not dogma. Stop advocating it as some religious material. I need to know the design patterns book like I need to know jQuery. Instead of wasting my time with memorizing this superlative crap I would rather spend my time programming and writing original quality code. &gt; Oops, you can't? You don't know what you're talking about. What is the difference between a senior programmer and an entry level code monkey? One of them spends time memorizing design patterns and the other makes more money. I am actually speaking from experience on this.
The title is a bit misleading. It costs 40 lines to put it together in threejs. It is 140 KB if you count all libraries and models that were used. Still awesome though.
You use them together. jQuery is mostly a DOM utility, Backbone is mostly a data/persistence library. For example jQuery lets you easily grab the value of a text input and backbone lets you save that value to the server.
They make a great starting point. If you are using something other than ISO8601 you'd better have a damn good reason. Date: Mon, 21 May 2012 16:36:49 GMT 2012-05-21Z16:36:49 --Robert
That's some fantastic documentation.
Well thanks! I've released the documentation tool as well: http://angryamoeba.co.uk/nav-js-multidoc-support/
Waaah, pretty cool!
How lazy can you be? there hardly even real physics. Actually, that little bit of sarcasm is the only way I could prevent myself from jizzing over how impressed I am.
Space Button for headlights! Arrows to move! Working brake lights!