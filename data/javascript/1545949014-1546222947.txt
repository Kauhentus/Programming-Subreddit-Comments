If I'm honest, I have a very cursory knowledge of git. I find the documentation actually offensive to read. That being said, I know at least the bare minimum, and about average amount on my team. Always looking to learn more though... So any resources you have I'd love to see. 
You need to use \`localStorage.getValue()\` and \`localStorage.setValue()\` to interact with it. Think of Local Storage as a database and \`window.localStorage\` as the client that accesses it. When you do \`localStorage.refresh = false\`, you are not storing that value in Local Storage, you are just setting a property named \`refresh\` on the client. [https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
I haven't gone in a while, location rotates. https://www.meetup.com/Coffee-Code/
This guy is actually senior. Knowing when to ignore "best practices" is the sign of an expert. 
&gt;but there are books that cover it Would you happen to have any recommendations?
I honestly do not understand why people don't use bind. It's a language feature exactly designed to fix this scenario, why create some awkward variable instead? Is there any benefit to it?
Dogmatically following the DRY principle can cause early abstractions that become troublesome down the road when they don't quite fit some new set of requirements. However not writing abstractions is also bad because the codebase becomes unmanageable and time consuming to update. The skill of when to abstract is difficult but comes with experience
I am completely fine with clever code, so long as it is clever to the context of its own module. I should be able to do other things without looking at it.
I just got hired as a full stack developer for a fortune 500 company. My experience.
I really can't argue with any of that.
DRY??
You see this a lot in bad jQuery or DOM querySelector code, where instead of assigning the result of the query to a variable and reuse that for different operations they keep querying the same thing over and over.
I offered my own constructive feedback but instead of constructive debate, my comment was downvoted all the way to -30. I took that as "No one wants to listen to what you have to say," so I removed my comment. It wasn't about looking down upon or demeaning you at all. It was real harsh criticism which the recruiter would never tell you because of issues like this. If no one is interested in what I have to say, I have no issues removing myself from the conversation.
Dogma is almost always a bad thing. From my experience and from other comments I've seen on this, when you're writing the same thing for the third time then it is time to _consider_ abstraction.
Dogmatically following anything will lead to disaster in the long run. No matter what field of expertise. One should understand why the key principles are what they are.
Yes, the Pragmatic Programmer by Andy Hunt and Dave Thomas was very good, and Clean Code by Robert C. Martin.
Tests I've seen and run on that show it as slower than other methods. Concision of code is not always the most efficient or effective for usage, either at runtime or in later update.
Isn't that what `!!isTrue` is for?
The beginner does not know about best practices. The intermediate will follow them too mechanically. Only the master knows when to break the rules.
The intention was to generate a random integer in a given inclusive range, but it made assumptions about how it would be called and didn't document or even hint about any of it. You have to read the code and interpret how it works to even understand that it's range inclusive. `((max - min)|0)` doesn't help, even assuming you pass the function integers, because Math.random() gives you a floating point number between 0 and 1. 
Nope. That'll convert the truthy value to boolean. `!! 'test' === true` returns `true`.
&gt; Stop trying to be clever. What's wrong with clever if it's easy to read? This is why I think collective code ownership is a bad day - everything has to be readable by the lowest common denominator. In some times, it means things like no using .map, .filter, because it makes other lives difficult.
stop repeating others
&gt; Only to find that barely anyone can figure out how it works. Example? I've met senior developers in .NET who didn't know how stuff like LINQ or even static classes work. I mean you can't really blame junior developers if you're that much of an expert beginner.
 for (const x of iterableValue) { console.log(x); } for-in has several pitfalls. I’d avoid it.
This x1000. I find "clever" to be synonymous with "hack" almost 100% of the time. 
Use `for(const item of items)` syntax when iterating and tight loop performance is not a concern. This is because this is interpreted as Iterator looping (except in weird JIT V8 cases where it is more performant and operated on as if a real array). Map/Filter/Reduce are also fine for this. Use only `for(let i = 0; i &lt; n; i++)` for only extremely tight loops in abstracted areas (such as deep library code). Never use `for(let i in x)`
Thanks -- that worked. Didn't know about that. Thank you!
Those are the moments where I regret not having any gold to give.
&gt; some times, it means things like no using .map, .filter, because it makes other lives difficult. What?! Really?
Actually that is one thing I learned when entering the realm of Developers. "You don't complain, you go and fix it."
Id disagree with this, comments used correctly for blocks of code allow clear labelling or summary of what a function actually does. Im not talking about every line, but honestly if I can read 2 lines of comment about what an unfamiliar 20 line function does, im going to do that every damn time 
Just to tack on, naming itself is a form of documentation.
I like what I call "the rule of three". On the third time writing the same (or very similar) code, time to DRY it up. It's just a recommended rule of thumb that helps define that line for myself and the team to prevent early optimization and also help make sure you really understand what the code is doing and how it is being used before trying to abstract it. There are definitely times where I know I will be reusing code on the first draft, so I just write it that way. The flip side is the dreaded "it almost looks the same" and when you try to DRY it up and it either becomes a configuration nightmare passing in all kinds of options or the code is branching/switch hell. Sometimes duplicated code really isn't that bad.
Cant agree more with the caching. Worked with an intern that kept writing short but cryptic code(overused tenary, arrow and one char names). He did actually implemented a cache system to help inside this one very expensive calculation function, which he then later managed to call twice within 5 lines of code with no state change in between them. He focused so much on optimising his algorithm, that he forgot to actually make sure he used it effectively. 
For each, do tests, while learning true ;)
If we're talking full on cross application cache-cache, then i agree. But its an easy pitfall to call a function multiple times instead of making a variable, filling it with the result and using the variable. It doesn't affect debugging and probably improves readability. In a browser environment it's often a better trade-off to use that little extra memory instead of valuable CPU time. 
^^ This 100%. Code is hard to read, it just is, no matter how well it's written. All the more reason to write decent code, but don't be the developer that's constantly complaining about someone else's code. It's _extremely_ annoying, and pretty insulting to the developer who wrote it. You won't make any friends insulting peoples work.
I love clever solutions, not in production code, but it's super fun practice, I think, especially if you bounce the idea between a few people, everyone comes up with their own approach, then you can combine those approaches, for the most clever solution. But yeah, keep that shit out of git.
I prefer forEach/map/filter/reduce... It's declarative way of iterating and therefore it's easier to read it
Hey, no offense taken my friend, this is just a friendly discussion between strangers. But to be frank, anyone can say "I get paid a lot of money as a JS developer", so it's a moot point when someone tries to equate experience with pay, especially on the internet. Now, let me ask you, why do you think your original comment was downvoted? What makes you think "No one wants to listen to what you have to say"? Could it be because, and I know this may be very difficult to accept and much less acknowledge, that you aren't as experienced and knowledgeable as you think you are? This is just food for thought, I'm not trying to criticize you or offend you. Lastly, if a recruiter/interviewer/whatever were to tell me they were passing on me due to my answers being "outdated", I would immediately know said person doesn't know what he/she is talking about, and that I'm better off pursuing interviews elsewhere where they actually have experienced technical interviewers. That's even assuming I'll interview as a single contributor in the future (but who knows). 
Aha, right, so truncating the entire result was probably the intent there. I always forget Math.random() in this language is 0-1. Perils of having worked with over a whole hell of a lot of languages, is confusing bits and pieces of them all over the place. :-D So, no matter what you enter into this function, if you |0 it at the end, you're going to get a whole Number out. Which I think is the point of that. Even if it's not done well. And it's quite a bit more common than you might think, especially amongst older code. 
Yeah there's a difference between leetcode code golf practicing and shit other devs might have to read thru in the morning
What pitfalls?
Look, it really seems like I pressed your buttons here. Like I said, I meant no offense. I think anything further I say will just make it worse, so I'll just stop here. No need to flex.
This is 100% the problem that polymorphic types are designed to solve. Define an interface for your abstraction, something like `obj.foo()` and `obj.bar()` must exist. Implement the interface in multiple places. Pass the class you want to use to where you want to use it. `useDatabase(new MockDatabase())` and `useDatabase(new MySQLDatabase())` and `useDatabase(new MongoDatabase())` is almost always the best way to solve this problem. It really grinds my gears that the Node community is terrified of inheritence and a few morons have convinced everyone that inheritence is to be avoided.
TypeScript helped immensely. Thinking in functional programming too. 
Don't do what you already did
Also, Martin Fowler's ["Refactoring"](https://martinfowler.com/books/refactoring.html) was just re-released on late last month with modern JavaScript in mind (rather than Java and Ruby, which the other editions focused on).
I very much disapprove of `===` snobbery. If your code is decent, you have checks in place to deal with erroneous types, and you pass the correct types to your functions, there really isn't much harm in loose comparison, not even performance-wise. If you end up comparing 10 and "10" you have a bigger problem than different types, in my opinion.
I noted in the post that it breaks because they did the cast in the wrong place, so if the min argument is floating point, the output is floating point. It just assumes the input will be ints, and that the range won't be that large, which was a reasonable assumption in the context the function was in, but it's bad, hard to understand code, but I think a good example of the kind of thing you'll see newer devs and students do, because they just learned it was an option, and haven't learned yet that it's a bad one. It's the same kind of thing as when high school students who are studying for the SATs use long, obscure words, because it makes them feel smart, rather than optimizing for effectiveness of communication, using words that are most likely to be understood, which is what is actually smart.
I figured that would be more straight forward than using loops? 
http://speakingjs.com/es5/ch13.html#for-in
Something that I see often in less experienced JS developers are `for` loops! I used to use them all the time, but I haven't written one now for a _long_ time. Learn `map`, `filter`, `reduce`, `find`, `some`, and `every` like the back of your hand. You probably don't need `[].forEach` either. I even use an eslint plugin to disallow loops. Even with that I see developers using `forEach` a lot, when they could just use one of the other higher order functions. Just to clarify you'll need `forEach` here and there, but don't jump for it so fast, and next time you're about to write a for loop, please reconsider :)
&gt;Only then can you say that you're "blocked", but **until that point, do not say a damn thing**. Be vocal about things that are going to be an issue for you in the future, if you know there's a dependency that hasn't been finished, then say it as soon as possible. Don't wait until the last possible moment to say "hey I won't be able to finish this until that other thing is done" - Say that you are or will be blocked and workaround your way as much as you can.
I think the main one is described in MDN: &gt; A for...in loop only iterates over enumerable, non-Symbol properties. Objects created from built–in constructors like Array and Object have inherited non–enumerable properties from Object.prototype and String.prototype, such as String's indexOf() method or Object's toString() method. The loop will iterate over all enumerable properties of the object itself and those the object inherits from its constructor's prototype (properties closer to the object in the prototype chain override prototypes' properties).
The same things you'd see in any novice code vs professional code.
Usually, I think what defines novice JS from more experienced programmers is the ease of understanding what they've written. If someone writes their code like someone else is going to pick up the program and work on it as well then they can write much better code. Of course, there are some exceptions and I can't really list them all here.
&gt; If you require a lot of planning; the task is too big and should be broken out more. Breaking the task into smaller tasks is planning isn't it?
I'll support you on this opinion. While I do want my functions to be well written and understandable just by looking at it - most of the time I'm looking at other code in order to walk through a stack of operations or looking at a series of functions and would greatly appreciate reduce the need for mental overhead. &amp;#x200B; It's pretty easy to see that we all have different ideas of how to write code, and we interpret things differently; a function named \`getTotalValue()\` for you might be doing calculations but to another it might just be return an attribute or property. I like looking at comments that explain what the author's *intent* and reasons for why they chose a specific implementation direction. 
I guess I don’t see the reason why you wouldn’t use `===`. It adds additional type security at no cost. I have seen so many mistakes related to `==` that I just cant imagine where there is a benefit to using == Understandably, adding typing is a lot more secure, but === is basically effortless.
To a degree, but no need to worry about every detail, just recognize when a task is too big or is asking for too much. When a task is small enough you don't have to worry about trying to think of every possible side effect because you know in isolation that your problem isn't going to be causing too many unforeseen side effects.
One thing that you would get out of it, though, if the cast were done as we suspect intended, is that if you gave it strings, undefineds, or other NaNs, you'd also end up with a Number on the out side. 
Bad jQuery? There's good jQuery? :P
Yes, for some people. They'll use the argument of "don't try and be clever and using obfuscated code instead of a for loop". So I don't think "don't be clever" is good advice.
Yeah, hence why I'm fine with using either. I prefer `==` because when it's not used the reader knows immediately that the correct type is required for the function to function normally (or that the developer has spotted a potential weakness where not using strict comparison would result in bugs in edge cases). I've personally only had one bug (that I know of) attributable to a rogue `==`, but of course that's just me. Besides, novices can use `===` too, no problem. I would even say that `===` is easier for a beginner to grasp, behaving more consistently. I also assume guides and tutorials use strict comparisons anyway as to prevent beginners from making rookie mistakes.
From grandparent: &gt; it's difficult to forsee every impactful design decision right from the start &gt; if the spec changes significantly it can throw everything out of wack and much of the inital time planning has been wasted. &gt; It's more important to identify key area's to plan TDD as most frequently described/used will never help fix these problems. The initial planning is the actual key to fixing these issues. Real, actual spec changes simply require throwing away the old stuff, whether it's the planning time or coding time. More frequently, it's not a spec change but a better shared understanding of what the problem is. Gaining understanding often doesn't require *any typing at all* and in most cases is cheaper and faster if you don't. I don't view planning as figuring out every detail, and I suspect OP didn't mean it that way either. Identifying key areas to plan *is planning.* Recognizing what areas are small enough to be well understood is also planning.
Inconsistent code formatting.
Sure, - Don't make any assumptions: When I debug something, I still start from the very top and carpet bomb that stack with console logs. A bug is also a good reason to rename something or change the flow so that it's clearer the next time. - Always be a professional: Don't put in Easter eggs, don't swear in comments or version control, don't bring down people's servers, responsibly disclose vulnerabilities, don't yell at people, realize that there will always be someone smarter than you. Be humble in adversity and graceful wth praise. - You're allowed to make mistakes, but don't make the same mistake twice: Everybody makes mistakes, but take the required steps to ensure it doesn't happen again. At the very least, offer a short term solution until longer term infrastructure can be put into place to prevent another 'whoopsy'. - Never express that you're 'above' certain work: Yah, making email templates is rough, but sometimes your company won't be able to afford MailChimp and email retention is a critical part of the business. Understand that you will unfortunately have to do work that is painful and nasty, that's the same as pretty much every job in this planet. Heck if the bosses want me to get some coffee, I'm your guy, but I'm also probably the most expensive coffee boy in the world. - The specs are not Ikea instructions, they're guidelines: Back in the day, grumpy programmers would say RTFM, which had a bit of elitism to it but was also sage advice. When you have no idea, read the docs, read them again, read the WHOLE docs, read the source code, read online communities, and don't be afraid to reach out to people when you're out if you're element. But nothing is guaranteed; sometimes optional params are required, sometimes an error message gets sent back when the operation was successful. - Keep studying and challenging yourself: You can wear so many hats as a programmer, and wow, would you look at that, you're also a JS dev! That means you can be client and server side in the same language!! Exciting stuff, try texture rendering one day, an authentication flow another day. Don't ever say that you know everything, because you never will. The industry has a habit of reinventing itself, so make yourself adaptable and embrace change. - Don't be too hasty to try the new hotness; especially with someone else's dime: Tried and true solutions significantly reduce risk. Moving too fast can blow up in your face. You don't want to be pegged as someone who makes poor architectural decisions. New JS frameworks pop up every day, so being conservative with your adoption is a valuable skill. 
If you're calling that function with weird input like that, you're better off getting errors thrown than having the output coerced into nonsense numbers and having something else look broken downstream. It's just asking for trouble.
I don't disagree at all, but Javascript has, especially in the past, encouraged awfulness. :-D 
In jQuery itself, or in code of people using jQuery?
Thou shalt not make a function like `map`, rather `await` it /s
You’d better use bind for that. ``` function(){ doSomethingWith(this) }.bind(this) ```
read my reply to the other guy who said the exact same thing. 
I love that the opposite of DRY is WET (we enjoy typing)
This thread is full of Kung Fu master wisdom
I feel like redux butts heads with DRY quite often. Especially when it comes to selectors. So many redux reducers/selectors are very similar but need to access or modify data in a sliiiightly different way that makes it very difficult to abstract without lots of customization. 
I don’t have an acute argument *against* it, other than it being very atypical.
What are the pros of writing the same code over and over again? I dont know who you're quoting with he "always dry ror" thing, it's not me. It's cleaner to cache and more performant in certain situations. Store the value of querySelectorAll, don't query the dom and rebuild an identical array like html collection every time.
Great to know, never knew! So does this apply when using vue and doing things like `v-for="thing in stuff"` too? 
&gt; one char names Maybe he doesn't know how to use autocomplete. If you want to mess with him, rename a 1 letter variable with a similar looking Unicode character. Even worse, something like this https://i.imgur.com/CBPYPpM.png
Writing a "UI framework" by adding abstractions atop jQuery, not even once.
Nobody takes the time to go back and refactor their old code. I'm guilty of this myself, but whenever I have the time I try and do this. A good developer should be learning new and better ways of doing things on an almost daily basis, whether through experience, training or just being exposed to wild code. For this reason it's almost certain that you could go back to code you wrote even a couple months ago and make it 'better' in some way. Additionally, Comments should be used to explain "why" more than "what". Sometimes it's unavoidable, but usually if you need to explain what your code does then you haven't written it very legibly. On the other hand, just because someone knows what you've written, doesn't mean they know what motivated you to do it that way. This also makes it easier for more senior developers to clean up your code if they find it. If you say "I wrote x when it couldve been y because I tried y and it gave me z problem" then other devs with different experiences and ways of thinking will be able to help you if they know a better way. 
&gt; What are the pros of writing the same code over and over again? Abstracting a piece of code has maintenance burden. If that code is never used more than once or twice, it's more maintainable to copy/paste. https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to &gt; Building reusable code is something that’s easier to do in hindsight with a couple of examples of use in the code base, than foresight of ones you might want later. On the plus side, you’re probably re-using a lot of code already by just using the file-system, why worry that much? A little redundancy is healthy. &gt; It’s good to copy-paste code a couple of times, rather than making a library function, just to get a handle on how it will be used. Once you make something a shared API, you make it harder to change. &gt; The code that calls your function will rely on both the intentional and the unintentional behaviours of the implementation behind it. The programmers using your function will not rely on what you document, but what they observe. &gt; It’s simpler to delete the code inside a function than it is to delete a function. 
&gt; consistency in formatting, variable naming, patterns, etc If you use prettier and eslint, this won’t be a problem 
Lol this absolutely no way you should be on that side of the table for an interview. You are not an experienced JS dev
Poor unit test hygiene. You can always tell when tests are an afterthought, and it usually is a sign that the source code has logic gaps.
Lol! Don't think I'd heard that before. :)
&gt; synthetic events that should have been regular click events Can you explain this, please? 
Yeah, repeating code once or twice is fine.. but dear lord I'd hate to write the same 5 lines of code over and over beyond that. And I used to do that when I was starting out.. just didn't occur to me to put those five lines in a function and use that function instead of writing those 5 lines. Makes life a hell of a lot easier for me.
I think having an eslint rule banning for loops altogether is a bit extreme. There some niche cases when for loops are needed
I do the same thing and it helps a lot. Also I nice “rule of ten” a friend of mine told me awhile back is if you have a process that takes ten lines or more, wrap it in a function. If you have a function that takes ten lines or more, think about breaking into more than one function. It just makes more readable code.
Precisely what I was referring to.
Maybe! I haven't found a need personally in a few years. But to each their own.
I disagree. It's not subjective.
All this goes for programming in general.
That shouldn’t compile.
Code style
reduce is a lot of fun!
That’s a good point. I remember watching a presentation on YouTube talking about a block of code that looked like “callback hell”, but it was “hell in a box,” and that box worked pretty darn well. It even looked pretty as long as you never actually open the box to see what was inside. I’m fine with that. If the black box stops working correctly down the road, I can always dig a bit deeper. Each language is going to have its own quirks (with syntax, typing, implicit behaviors, etc.) that make certain elegant solutions look totally unreadable. And it’s worthwhile for programmers to become familiar with these patterns over time. But in the current state of JS-based web development, the performance bottlenecks are usually related to a few key processes (DOM activity, network traffic, large database manipulation, etc.). You can design clever and highly efficient black boxes for those tasks. And make a readable interface for it. Even then it should be well-documented.
I'm gonna make this large in the vain hope that the original OP can see it across the internet #Do not test internal/private methods, they are implementation details. If you cannot test code from internal methods in your public interface, it's useless code that is safe to delete.
In my experience, novices are concerned with getting the job done, as well as trying to impress people to show that they're not novices. This leads to code that has a lot of brute force to get things going, as well as weird wacky shit they saw in code golf challenges not realising that this is a no no in production code. In agile settings, they're super happy checking off a large quantity of tickets which a lot of the time comes at the cost of that ticket being done properly and thoroughly (I see you, testless ticket). This is fine, this is normal, and in time these behaviours change - usually through in person code reviews with more senior developers. An experienced developer has a mindset of coding is just a way to solve a problem. The code itself takes more of a backseat and solving the problems at their core comes to the front. You're more likely to see these people with a whiteboard, a text editor, or pen and paper on their desk before they even touch code. People with more experience realise that smallest "smartest" code isn't always very readable, and unless tuning for extreme performance, it's not worth the cognitive load of trying to unwrap a 5 level deep nested ternary operation just to save creating some quick local variables. Their code when working on a team will need to be legible to the relevant members of the team so they keep their cool hacky tricks outside of the production codebase unless everyone is on board and understands what's going on. [The bus factor](https://en.wikipedia.org/wiki/Bus_factor) is important to this person. Their code tends to be more streamlined just due to years of experience seeing the same patterns in their head over and over, and they are much less likely to "just try anything" when their code doesn't work, they investigate and look for the root cause rather than the current problem. 
W.E.T -&gt; write everything twice.
I agree with you, and I am not talking just comments within JS but just in general. I would never hand over a project post launch that moves into support to one of our interns with out comments so they know what will be affected by changes that they make. 
Well every business functions differently. At my job we re use a lot of components that we built custom for our clients. I would never tell an intern to use XYZ component without any comments to guide them on what is doing what etc. 
&gt; It’s good to copy-paste code a couple of times, rather than making a library function, just to get a handle on how it will be used. Once you make something a shared API, you make it harder to change. Yeah, you have to careful. I find it’s better to just keep a “utils” folder and add a few small abstractions as I work. Then as broader patterns emerge, it becomes more obvious which abstractions ought to be included in a library and shared.
Just read clean code, the language is irrelevant.
If you have applied to that many places and haven't got any calls I'd say you're a tad unlucky but also need to change up your strategy. If you're not already you should be trying pretty hard to get in contact with literally anyone at that company to get a referral - you'd be surprised how many people have no issue referring people they don't really know. Perhaps I could also take a look at your resume and give you some feedback if you're comfortable with it. Feel free to DM me on here to talk about it. 
Yup, looks like the stealth plugin does a variety of things all designed to trick websites into believing Puppeteer is a real browser. https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth/evasions Seems like an ongoing cat &amp; mouse game here. 
Love this, haha
this is the one . Easy to understand code is irrelevant if it's wrong. I like code where people understand the why.
I would also throw in ES6 Map types as well. Stop using object literals as map storage and then doing janky shit like Object.keys(myObject).map(key =&gt; myObject[key].whatever()); Whenever you want to store something as an easy to index map, reach for the `Map` type. It was designed explicitly for this purpose. 
Yes. A million times yes to Clean Code. I recommend it to every Jr developer regardless of language. It is the one reference I have gone back to over and over throughout years of programming.
Yeah I learned about this ability from asm.js (even though I've never used it).
`for-of` when care about performance or when the context is non-functional. forEach when chaining transformations or context is functional. 
What about it?
D'oh at self. Thanks. I misread the `===`. :)
Regular good old for loop all the way, mostly because it's always on top in every performance test, However, I do like the newer forEach syntax, and I have used from time to time Another old favorite is the verbose "do while". Though, it's not recommended from a performance standpoint
&gt; Not using destructuring and param defaults, especially when you keep having adding params to a function where some can be null. There's a flipside to this. I've had Jr. Devs who recently learned param defaults add them in places where the code should actually throw due to a missing param. This creates some *extremely* nasty bugs due to what is essentially [Error Hiding](https://en.wikipedia.org/wiki/Error_hiding). Even more important that having sensible defaults is knowing which params *should* default, and which should throw/warn if missing. The rule to follow is always "If your function/component/class cannot do what it's supposed to do without param X, then it should throw when param X is undefined/null"
Novices tend not to have a code style
Thinking more about this I came up with some other "novice" smells. 1. Avoid `else` whenever possible. - (Painful to read but explains the concept well: [Avoid Else, Return Early](http://blog.timoxley.com/post/47041269194/avoid-else-return-early)) For example instead of this: &amp;#x200B; const myFunction = () =&gt; { var result; if (a) { result = 1; } else { if (b) { result = 2; } else { result = 3; } } return result; } How about this? const myFunction = () =&gt; { if (a) return 1; if (b) return 2; return 3; } I rarely write `else`. Sometimes it's just more clear to right an else, but I find that is pretty rare. 2. Don't write `switch`'s. Use object literal's instead. A good explanation: [Deprecating the Switch Statement](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/). Instead of: switch(a) { case 1: doSomething(); break; case 2: doSomething2(); break; case 3: doSomething3(); break; } How about this? const doSomethingObject = { 1: doSomething, 2: doSomething2, 3: doSomething3 } doSomethingObject[a](); 3. I'm still not sure about this one, but I've started to see a trend that developers that are slow and/or beginner tend to commit in large chunks. One commit with thousands of lines of code. Sometimes just one or two commits a day or they don't even make a commit for a week at a time then one week long commit. Along those lines they tend to not push up code until they're "done", and ready to open a PR. Write small [Atomic Commits](https://www.freshconsulting.com/atomic-commits/). You don't need perfection. It covers your butt too. If I'm your manager, and I don't see work going up regularly I start to worry. If I see regular commits, I pay a lot less attention. Also why keep the commits local? Push them up immediately after committing. It's a nice backup and keeps everyone in the loop as to what you're doing. I think novice developers are worried that their "experimental" commits will look bad. It's completely the opposite. If I don't see those types of commits, I feel like there might be something wrong in your workflow that we need to address.
My quick way of telling who wrote the code: beginner code === usually fugly, incoherent code professional code === uses a code standard Other than that, i usually look if they namespaced things or not, that's usually a good tell :-P &amp;#x200B;
To play devil's advocate, I've used React pretty extensively, I've also done more than a little framework design, and I still refer to React's tree diffing as a "hack" which really triggers react die hards. React offers a great abstraction that hides all of the individual add/update/remove operations on the DOM, but like all abstractions, it comes with a cost. That being said...doing everything in jQuery sounds like a nightmare. I didn't even do that back in the day.
FWIW I don't think they were being too clever or weird. Believe it or not this is a very common method of casting something to an integer in JavaScript, and also a good way of telling the optimizing compiler to treat the number as a 32-bit integer. You might not understand it right away because you're not familiar with this technique but to somebody more experienced, this is fine. The good news is that you learned something and you will recognize this technique the next time you see it. Again, just because it doesn't make sense right away doesn't make it stupid, there might be good reasons why your preferred solution wasn't used.
The name of the function and it’s arguments and the file it’s define in should convey this. If they don’t you have some growing to do. As we all do. But comments, in my experience, are almost always outdated and more misleading than helpful. Clean code is the way. 
&gt; Is it good for performance? That would depend pretty heavily on what you are doing and how you are using React. Obviously if you have some super simple extension that just pops up an alert on the page, React is going to have a lot of overhead compared to just doing it without it. However, even in that case it might not really make much of a difference to matter. It's far more likely that other considerations are a bigger problem, like if it would add unneeded complexity to the project.
That's not always true. JavaScript gives people the unique ability of easily parsing parameters in order to perform multiple tasks. If you can make your code readable, sometimes "God Functions" are useful. Being an experienced developer is knowing when a large function is worth writing.
These points are good but I would just note that those are overall good principles of software design, not only JS
For a challenge try creating a vanilla site using only mobile apps. I found Vim Touch and the Hackers keyboard work well on my Android phone for simple editing. Forces you to remember the browser API or keep flipping back to the docs in the browser.
If you're not already familiar with it, reading the language spec is definitely a valuable use of time. You can download the pdf to your phone.
Agreed! Tools help immensely with this stuff, and in amateur codebases you don't see them used because there is often a lack of understanding the need for them :) Automation is crucial in professional software work, that's for sure!
Ah.. I getcha. Yeah.
Thank you. I always thought otherwise. 
* Not using a linter or style rules. Linters help to remind/enforce certain rules that should be applied to code. Style rules ensure everyone on the project writes code according to a given style which saves time. * Setting a variable over and over to different types/values. * Trying to write JS like it is another language. JS is different and using the style/conventions will save you trouble from stuff that doesn't run 100% like the language you are used to. * Trying to do things browser specific. This is something that is getting harder to do (browser security and what not) but so many clients ask for it. Either put up with possible future code breakage or just flat out discourage it. * Understanding falsey/truthy, null and undefined. * Using MDN for reference. They have one of the best references for JS and it even tells you which browsers support a feature. * Console.Log all the things. Callbacks/Promises/Async can make console.log unreliable in certain environments and logging stuff in the browser in production is something you'll either get praise or hate for. Most programmers won't agree with me on all of this stuff but these things helped me get super good at JS.
Are you sure? https://en.cppreference.com/w/cpp/language/identifiers which does include `ZERO WIDTH SPACE - ZERO WIDTH JOINER ` &gt; (Note: C++ grammar formally requires Unicode characters to be escaped with \u or \U, but due to translation phase 1, that is exactly how raw unicode characters from the source code are presented to the compiler. Also note that support of this feature may be limited, e.g. gcc) Also https://releases.llvm.org/3.3/tools/clang/docs/ReleaseNotes.html#major-new-features Either way, this was about JavaScript not C++, that's why I said "something like this"
If I am returning something or if I have create a new array then forEach/map/filter is my tool of choice because I am probably trying to get data back without modifying the original. If I am going to be doing stuff that needs to build stuff, get modified or anything else I will use for just for convenience. 
Yes
bind, call, and apply have been kind of replaced by arrow functions. 
or Object.entries 
No comments. For some reason I find many veterans don't find the need to comment their code. Illustrates that they haven't worked on complex code bases before. When reading a line of code, if you ever stop, even for a second, to ask yourself "*what does this do again?"*, that means you need to add a comment. 
The biggest mistake I see people making with regards to JavaScript is using it by choice.
&gt;If you use prettier and eslint, this won’t be a problem this is a short term fix. learn how to name variables, learn how to format code for comprehension, learn how to make code easy to understand and you'll be able to write good code whether linting is available or not. when you can write good code, linting becomes a tool to help you, rather than a crutch you need.
This is the true answer. When i talk to you, are you easy to understand? When i read your code is it easy to understand? If I give you a problem, no matter what it is, can you think of the steps to solve it? If you didn't answer a single question, but did these things, then I'd feel pretty certain you're a senior dev, even before you've come to a complete solution. IMO there is one more level above this and it's where they can find a specified bug in their code. Also if they can write something new, in easy to understand code, that interacts with the bad code in a clean way. (fyi bad is often over-engineered code made by intermediate developers =P)
FYI there is no difference between a senior JS dev and a senior anything-else dev. At least as far as skill is concerned. a senior JS dev may suck at Rust now, but give them a few months and they'd probably do amazing with it. That may sound unrealistic, but the truth of the matter is, there is no senior JS dev that's been programming for a couple years. If they're senior in JS or anything, they've been programming for at least 5 years if not much much longer.
So, I was reading Pragmatic programmer and in Goals section, I saw "Learn at least a new language every year" where it says you will get broad knowledge across languages. What do you think about it? Like myself, I also learned to programme with PHP and OOP concepts with java and now more dynamic things with JS and I think its somewhat relevant but still a language every year or 2 is quite tedious IMO
As far as resources, I mostly just use cheat sheets like [this one](https://www.git-tower.com/blog/git-cheat-sheet/). But with regards to the specific commands I mentioned, git add -p lets you commit partial changes of a file. So if you change 20 lines but only 4 lines apply to the current commit, you can pick just those 4 lines. And you can subdivide (chunk) that set of lines even further if necessary. I always knew about git diff, but wasn't very efficient with it until I learned a few specific things: * git diff compares your working directory to the last commit * git diff --cached compares your staged changes to the last commit. * git diff -w compares changes while ignoring white space (useful for mixed environments, etc.)
If statements
Finding that balance is what the code review process is for.
What's wrong with using for loops?
&gt; a few morons have convinced everyone that inheritence is to be avoided The guy who invented object oriented programming literally left it out of his design because he thought it was shitty. I'm sure you're smarter than he.
I think it happens because most people expect to bang out a perfect piece of code in the first try rather than taking the approach one would taken when writing an essay. Get it working first then refactor into quality code. 
Hello, sorry for the trouble. It was due to new Gutenburg Editor. I have fixed code now. Pls check.
There are plenty of geniuses in the functional programming world who think you don't need inheritance at all. I doubt you're smarter than all of them.
Output is normal since you are assigning a function to an object key. You should get BMI by calling john.BMI(). If you want to set value to key directly you should use: &amp;#x200B; var john = { name: 'John', mass: 65, height: 1.9, BMI: calcBMI(65,1.9) } &amp;#x200B; Because you cant reach mass and height keys using this keyword. The scope would not be on the john object. &amp;#x200B; I hope this will help you.
I would say this is incredibly rare case and is to be avoided when possible, especially if unit testing is part of your workflow. 
thank you for the reply. is there anyway I can get the bmi to show up as one of the properties? if i do : this.body = calcBMI(this.mass,this.height) shouldnt there be a new property called body with the value of the bmi?
&gt;it results in : {name: "John", mass: 65, height: 1.9, BMI: ƒ} This is exactly what it should print. BMI is a function. If you are trying to assign the result of calling calcBMI to BMI it won't work. &amp;#x200B;
how can i assign the result of calc bmi to a property?
This is a great place I believe to showcase a library of UI components that I am building for e-commerce sites using Vue. Check it out - [https://github.com/Shreerang/Vue-Nuggets](https://github.com/Shreerang/Vue-Nuggets) 
As /u/[efeozazar](https://www.reddit.com/user/efeozazar) said, The cope of this in that case is not the john object. So you can't do the assignment like this.
A better solution might be: &amp;#x200B; class Person { constructor(name, mass, height) { this.name = name; this.mass = mass; this.height = height; this.BMI = mass / (height * height); } } const john = new Person("John", 65, 1.9) console.log(john) &amp;#x200B;
Thank you!
I don't have much experience with making extensions, but when I had made I did write the code in react too. I just bundled it with webpack which gives me an entry point through html and js files and I used that for the extension. &amp;#x200B; You can have a look at that project to know how I did that : [https://github.com/rishichawda/weatherapp-chrome-extension](https://github.com/rishichawda/weatherapp-chrome-extension) &amp;#x200B; It is an old repo but incase you need any help, I'll be happy to! 🤓
&gt;Yeah, except each time you need to pass function as event handler and preserve this (I'm omitting function as class properties). Sounds like there is a cleaner way to do whatever is trying to be accomplished there. 
Easier to make off by 1 errors imo
Well there will be 4 views, which have to be conditionally shown in the popup, so for that React is perfect of course. Also a login and register page. so local state is welcome.
Many replies ITT help me distinguish a novice from an intermediate dev. These five will distinguish the intermediate from the pros. Have an upvote. 
1) Your example should have used an `else if`, not a whole nested `if`. That aside I don’t completely disagree. You really need to pay attention to what your doing. You can’t quantify “always return early” as a static rule. You really need to understand a function and what could change. If you return early but later need to add I shared behaviors you may have to rewrite. For simple functions with small bodies, the sure. Focus on clean conditional returns tether than nested conditional soup. And frankly stop being scared of `continue` or `break`. Sure you can misuse them, but you can misuse _everything_ so just use them if they clean things up. 2) This is highly problematic, don’t do this. In _some_ cases this is probably way better, and I use a lot of objects for what used to be `switch` statements but you really need to understand that object keys _are strings_. This is significant because your example uses numbers and they’re not numbers and even though _it works_ you _really, really_ need to be intentional about your types. 3) This isn’t bad. Only thing I’d add is _dont be afraid of working commits_. If your concerned about _how clean your history is_ then your using version control wrong. There is nothing wrong with squashing commits into core branches but too many people whine about noisy history gets when you shouldn’t be concerned about it. My points for newbies looking to get better: 1) Understand your types and type check when necessary. Not documenting/testing types cans and most likely will come back to haunt you later. 2) Understand JS. Modern JS has some fancy features that, more than ever before, make it easy to forget about prototypes. But they still exist. And they’re still very core to the things you use. In addition to that `this` is a controllable value in the context of any given function. All to often we say “bind bind bind” but I find some juniors don’t really know _why_ it’s necessary or useful. Also APIs that intelligently and logically control `this` can be extremely flexible and useful. 3) This has nothing to do with JS, this is for any engineer. PAY ATTENTION TO YOUR DATA. That means mowing it’s shape, value, etc... This isn’t exclusive to data from an API. All data. If you define a global constant list with the intent to test if it includes user input (like a set of acceptable values) then consider and object instead of a list. Objects have faster lookup times. Or a `Set` if the language supports them. But note that a map structure can easily mimic a set. 4) Prefer iteration functions to `for` but know that classic loops may sometimes be necessary. I’d recommend pretty much never writing a `for ... in ...`, it doesn’t really do _what you probably think it does_ and the new `for ... of ...` is much better as it works with the new iterators and generator functions. 5) I know this goes against the grain of most JS developers but I have to express it. ALWAYS USE SEMICOLONS. Yes, JavaScript has “Automatic Semicolon Insertion” and 99% of the time it works like you expect. But I’ve proven that even prettier won’t clean _all cases_ that FUBAR the system and since it’s a haphazard, ancient feature of a Frankenstein’s monster of a language I say don’t even bother. It’s not like they’re hard and eslint will even add them for you if you set the rule. Just use them. If you hate them the use CoffeeScript or some other meta-JS _ that was built specifically for you to omit them_. The ASI system in JS was an afterthought and has some wacky edge cases. 6) Use code generators sparingly and don’t be scared to venture away from “auto-generates project structures.” I’m not saying you shouldn’t use them and I’m not saying you should ignore some framework specific conventions. I’m saying that `create-react-app`’s default project structure sucks for large scale project organization so creating something that does work better _is not wrong_. There is a good chance the generator wasn’t built to solve _your_ use case after all. It’s meant to be a starting point. 
The post talks exactly about how achieving 100% code coverage should give you no new confidence in the quality of your code. The only 100% that matters is behavior coverage, and that's impossible to verify. Which part of the post goes against what you said: Do not test internal/private methods?
&gt;Yeah, except each time you need to pass function as event handler and preserve this (I'm omitting function as class properties). arrow functions &gt;Passing callbacks aren't too common either with the new async/await syntax Callbacks are a special case of function to be executed after the execution of some other function. In async code, async/await more or less obviates them. 
\+1
Imperative Vs declarative code
To each their own! Switch statements have their own share of gotchas. I typically run into forgetting a break or return in a switch case more often than I have issues with string types as object keys. I find the object literal notation less error prone an easier to read. I don’t think it qualifies for a “don’t do this” I could say the same about a switch statement. I took the example for the first one from the link. Else if woulda been clearer but the result is the same I think it made the point just fine. 
Preact is a good alternative for this space. That's what I used to build a personal chrome extension. 
Honestly there are just better, clearer, less verbose options.
Personally, I've bought in to functional programming, so I rarely use loops. The idea that you produce new data rather than altering existing data* helps me write code with less side effects and unexpected results. I think these array functions make code more readable too. `[...].map(something).filter(some predicate)` has a more obvious intention than having to read through a loop's body with nested if-else statements to try to parse what's being done.
I've also heard of WET as "Write Everything Twice"
I don’t know Vue, but it looks like v-for-in iterates over values, so it’s probably different than for-in (which iterates over keys). https://vuejs.org/v2/guide/list.html
\&gt; The difference and use of apply, bind, call and when/how to use them. this one gets brought up \_so\_ often, i feel like, and i truly don't understand how there are people out there that don't know the difference, most likely because they've never even used them. it's possible that i just overestimate the average developer, but especially with libraries like react that used \`bind\` and \`call\` pretty often early-on, it still seems strange to me.
i disagree. those are 100% all things that intermediate devs should know. i could maybe give you #3 since those libraries are so popular that i'm sure a lot of devs use them without even really thinking.
&gt;Maybe not the advice you waited for but I took the opportunity of your post to say that and I think most of us need to hear that. i actually think this is some of the best advice in the thread. it's sort of something you don't hear a lot, but i totally agree. i always tell me clients, when they ask "can we do $x?"—"we can do literally anything you want, it just depends on how much time and money you're willing to spend." i won't tell them something's impossible unless it's breaks the conventions of computer science. :D
Git is probably the single most important tool in any development environment period.
Hitting this up
&gt;sucks for large scale project how large are you talking? just curious. i would generally agree with you, but i do think create-react-app is a pretty good tool if you're in a hurry and don't need anything \_overly\_ specific. plus, you can always eject and re-structure later if you need to.
honestly, most of the examples that you show here are examples that i've almost never used, or very rarely use. it's much more common in function signature and when you're passing data variables around. for example, &amp;#x200B; \`\`\` function getDistance(\[ x1, x2\]) {} function getData({ time, distance, coordinates: { x, y } }) {} function doesSomething(data) { const { var1, var2, var2 } = data return doSomethingWithVariables(var1) } \`\`\`
I'm of a mind that if your code needs more than a brief declaration of purpose above function definitions to understand what stuff does you need to refactor. Also, you should assume parameter lists in comments are just wrong, because they almost always are.
Hi Oli, I am trying to use tabulator in my angular 7 project. But i just can't get it to import in the component ts file. Could you help me with the steps?
There are valid use cases. They are not super common, and you should avoid using array destructuring in cases where you think it could be confusing or error-prone (as with any language enhancements, please use wisely :D). Some cases just off the top of my head (they are contrived and may not illustrate best practices for accomplishing the task in question, but I believe the accurately represent the purpose of the language construct): * A lot of people like to represent points as an array of \[x, y\]. \`const \[x, y\] = SomeLibrary.getPoint();\` This would be more readable than \`const point = SomeLibrary.getPoint(); const x = point\[0\]; const y = point\[1\];\` * You are parsing a CSV where each line is returned to you as an array of elements. \`const \[firstName, lastName, age\] = line\[0\];\` could be a use case. Another argument is that sometimes you add features to a language to maintain expectations. Other languages that support destructuring generally support it for both objects and array. Also, since objects and arrays share a lot of similarities (arrays are like objects where the keys are integers), if you support object destructuring, people using the language might just expect a similar feature for arrays.
 Hi guys! Each week of this month I’ve been writing about my favourite React patterns. I would love to know what do you think about them and do you use them? Currently is 3rd week so here are links to previous articles: [2nd week with HOC](https://medium.cobeisfresh.com/santa-react-patterns-giveaway-2nd-week-b7d09b9f7c01) [1st week with Render Props](https://medium.cobeisfresh.com/santa-react-patterns-giveaway-bc5bab7c2b9b) 
Many pages and components. I just know it features some global dumping files for things like action types and such and it becomes pretty unwieldy quickly. Like I said, they’re starting points. Not usually the end product. 
&gt; I took the example for the first one from the link. Else if woulda been clearer but the result is the same I think it made the point just fine. I can write an example of any feature that looks bad to demonstrate why you should obey what I’m saying. Yes it would have been significantly clearer to use an `else if`, that’s kind of the point of writing the statements that way. But it doesn’t support the point trying to be made as well as the worse version does. I wouldn’t allow that through code review as is. Also, forgetting to return/break statements _is not a problem with the `switch` statement_. The two are unrelated. I forget them sometimes too but I never blame the hammer when I miss a nail. Sure they’re clunky, and pattern matching/other languages have done the same kind of construct much better but that doesn’t make them bad. Like I said about wholesale using objects in the place of switch statements, _be explicit with your types_. Call a to string on it. Make it clear in the docs that you take a number but make it a string. Etc... Personally I’m not a fan of the `object[key]()` syntax. Now it’s less clear exactly what’s happening and I need to look up two more things to figure out what’s happening and why. Not to mention each of your steps there have to take the same arguments or you will need some dynamic spreading going on which can be more complicated logic; _and then_ your adding the overhead of a function call to what _should_ probably be one or two lines. But I never said _never do it_, most advice is valid when applicable. And applicability is really about readability. Sometimes it’s more readable and other times it’s less so. My point was, _this shouldn’t be stated as a hard and fast rule_. If you make it sound like that then a newbie will literally avoid `switch`s like the plague and not even think about whether it makes sense to do so or not. Trust me. I have to fix bad habits found online and otherwise regularly during code review and when others seek my aid. And to be less egotistical, I’m not the only member of my team with these viewpoints. I definitely stand alone with certain things and in others have the backing of the other seniors. Not that that means we’re right an everyone else is wrong. Just pointing out that I’m not just spouting my singular viewpoint. 
&gt; Wrong #4: Two “null” Types Null represents the *intentional* absence of an object value [per the spec](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-null-value). I wouldn't call this a "major wrong". &gt; Wrong #7: The var Keyword and Function Scoping This has never been an issue if you understand lexical scope. &gt; Convoluted and poor inheritance model It's just prototypal inheritance, pretty straight forward. Classes are just sugar for prototypes. &gt; Poor standard library How so? Other than the lack of a composition operator (*not pipeline) I have no issues. TL;DR OP repeats "Other languages do X, ECMAScript does not do X and is therefor wrong." several times. 
Just a small addition: you can accomplish the same by using interfaces. I think what one must get in Javascript or node is the usage of implicit (or explicit when using typescript) interfaces, but not only for objects but also for functions. Instead of having 3 different database implementations, why not have one generic one, that you can pass functions for saving/reading or something like that (strategy pattern). 
Apart from the other examples, array destructuring can also be useful to iterate through keys and values of a map: let map = new Map(); map.set("abc", 10); map.set("def", 20); for(let [key, value] of map){ console.log(`${key}: ${value}`); }
A few bits of feedback. 1. as /u/sebamestre mentioned, use `forEach` over map since you don't need to create a new array here. 2. `Array.from` is easier to understand from a semantic perspective. 3. I think I'd prefer to use `setAttributeNode` with `cloneNode` rather than destructuring with `setAttribute`, you'll get much better perf and it feels cleaner. Example Below: const copyAttrs = (from, to) =&gt; Array.from(from.attributes) .forEach(node =&gt; to.setAttributeNode(node.cloneNode(true))); const newEl = document.createElement('div'); // &lt;span class="old" data-test="test"&gt;&lt;/span&gt; const oldEl = document.querySelector('.old-el'); // copy attributes copyAttrs(oldEl, newEl) // &lt;div class="old" data-test="test"&gt;&lt;/div&gt; console.log(newEl)
&gt; but I want to extend this to maybe 15 functions. https://gfycat.com/optimistichairyacornwoodpecker
Even the most simple, clean and clear code can do the wrong thing. I use comments to describe intent, rarely to explain code. 
Object.entries() returns an array of tuples where the first entry in the tuple(array) is the key and second is the value. `Object.entries(foo).map([ key, value ] =&gt; \`${keyTranslations[key]} is ${value}\`);` vs. `Object.entries(foo).map(entry =&gt; \`${keyTranslations[entry[0]]} is ${entry[1]}\`);` &amp;#x200B;
Think this is what you're looking for. const nearestMonday = date =&gt; { const monday = 1; const currentDay = date.getDay(); const distance = (monday + 7 - currentDay) % 7; const newDate = new Date(date.getTime()); newDate.setDate(date.getDate() + distance); newDate.setHours(0, 0, 0, 0); return newDate; }
Damn, that reminds me of my programming professor at uni. I know he tried to teach us something, but for crying out loud, teach people basics before doing coding boogie woogie... He was doing bitwise sorcery before many of us figured out what the hell a for loop is. Failed this exam, then made it after watching coding tutorials on YouTube. Today, I teach people on how to code. I took every bad experience I had with professors and TAs, made it right, and people are happy. I'm happy. Be the change in the world you'd wish to see. Don't do undocumented boogie woogie in your code. Don't assume people will understand your code, because, to be honest, your future self won't understand either. Please, get some help, learn how comments work in given language. Use them. They won't hurt your code. Comments are love, comments bring people together. Thank you.
I'm currently living this dilemma. Trying to abstain from abstractions and just repeat myself because I know this client likes to add little exceptions that never fit in well to existing abstractions. Everything has to be very finely tunable so keeping it WET is the way to go. They come in with stuff like "oh but if this button is clicked, show these three fields, but for the other button show just one of them and make the button red, and only do this for these 10 users, if it's before April 3rd."
The same thing I see in every piece of code written by an inexperienced programmer: It's written like a scrawling maniac, who's not considering the bigger picture. And it's only getting worse, what with this whole "code now, complain later" mentality. Utter crap. Sure we have rolling requirements, but there are core formats and structures to every language that make it easily shiftable and adaptable. Shifing requirements and features should be plug and play, not re-write and re-structure. Like adding a other candle to a never-ending cake. All it should take is a little more icing and another candle. Not a whole new mix and bake.
Coding for interviews and for actual production code is quite different. For interviews I don't necessarily expect a lot of thought for naming or proper abstractions (unless that's what the question is about), you should concern yourself more with solving the problem rather than with getting perfect names, DRY, commenting necessary unclarities, etc. but when reviewing production code, certainly those things would pop up if they're not considered. Imo you could spend time going over highly maintained open source projects to see how they're written, exposure to professional grade code is better than a book on the topic. 
Really nice work. Love to see fantasy-land compatible libs.
Also an introduction blog: [http://www.myriptide.com/rrweb-introduction/](http://www.myriptide.com/rrweb-introduction/)
Sorry for the aside, but if you don't mind my asking, where/how did you learn the theory behind this sort of thought process? I don't mean this *specific* thing you're talking about, I just mean that it seems like you have a solid grasp of high-level programming concepts that are still pretty beyond me, and I'm wondering if this is just the type of understanding that only comes through many years of experience, or if I should be doing more reading/studying/video watching, etc. Like, I know what inheritance is, in the sense that I could provide a coherent answer if it was a question on an exam, but I don't think I could really enunciate its advantages/disadvantages or identify its ideal use cases like you just did. I think this sort of ability to *reason* about programming tactics and strategies is an area where I'm probably lacking. 
First and foremost, is the click track available in MIDI? If so, can't you just swap out the sound? It seems like writing a program to do this is doing it the hard way. That being said,It's possible, but would be tricky. Beat detection works by detecting transients which are only a part of the sound (others are attack, decay, etc). Replacing one click with another would require you do transient detection (detecting when average amplitude is above a threshold), but then also detect when the waveform drops below a threshold before and after the transient, then replacing that segment of the PCM data with your new sample. Exporting to mp3 is also a bit of a challenge since browsers don't let you encode media. There is a [WASM port of ffmpeg](https://github.com/BrianJFeldman/ffmpeg.js.wasm) out there, but I haven't used it so YMMV. You may also take a look at the [MediaRecorder API](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder) but it's a working draft so againt YMMV. Lastly, I think unless you're trying to make this available on the web for other users you may want to use a language like C++ or Python. Doing this in a browser sort of limits your options. Good luck! 
[removed]
I'm curious as to how you've never run into a situation where you need to perform a bunch of asynchronous actions in series before. In my experience people come up hard against that limitation of the array HOFs in short order. 
I had recently made a plugin for solving an issue that has been there for quite a long time for people who are using build badges in their repositories. Basically everyone wants their branch badges to point to correct branch statuses but for that we need to manually update it when switching branches, merging, etc. We faced the same issue in the company I work with and created this simple plugin to automate it. Currently I'm adding a cli commands to it and will update it soon with that. I would like to get your reviews on it! PRs are also welcome if you want to contribute! 🤗 Thanks! Link to repository : [https://github.com/rishichawda/markdown-magic-build-badge](https://github.com/rishichawda/markdown-magic-build-badge)
I find myself frequently struggling to decide when to break up a function into smaller pieces and when to keep it together. I have definitely gone the route of turning every identifiable discrete action into its own function and then calling those functions in the "master" function. But then I worry that it's kind of a contrived way of keeping functions small just for the sake of itself, and that if I'm not likely to *reuse* all these hyper-specific single-purpose functions then maybe there's not much justification for breaking them out, and maybe just liberally commenting would be a better way to deal with the readability issue. This conundrum has led to some regrettable inconsistencies in my code bases where I tend to waffle back and forth between some long but well-documented functions and some sparsely commented but tightly written functions that call half a dozen other functions that never get reused. I'd be very interested to see more opinions and discussion about this. 
I ran into this exact same problem. Switch to arraybuffers for your sanity.
Sure, it is a just a tool to manipulate DOM. 
Returning boolean literals 😄
&gt;.unix(timestamp / 1000).utc().startOf("isoWeek").valueOf() I had this date idea before but this ends up at the wrong time \&gt; d = [Date.now](https://Date.now)() 1545989455067 \&gt; nearestMonday(new Date(d)).getTime() 1546194600000 \&gt; m.unix([Date.now](https://Date.now)() / 1000).utc().startOf("isoWeek").valueOf() 1545609600000 This is the part which I havent been able to figure out why
Phew, glad I passed all of these. I would also add documentation to this list. As a beginner, I NEVER used to do it. Finally, after being frustrated with my own code and such little documentation, I made it a point to properly (though painstakingly) document all future code.
Agreed. Sometimes in my Node.js code I'll take stuff like database operations and put them in functions in a separate file so that the `server.js` file isn't clogged with stuff that isn't about request handling.
I mean I completely disagree with the no loops rule because it's absolutely retarded, but this is quite a trivial problem to solve without loops: `[async1, async2, async3].reduce((p, n) =&gt; p.then(n), Promise.resolve())`
Can you explain for a beginner/intermediate dev more about what you specifically mean in #4/caching?
Curious too.
[removed]
And you don't see how 1) that's a borderline silly alternative to `for (let p of [async1, async2, async3]) { await p }`? I thought the aim was "readability" 2) you can't actually await the operation, making it non-viable as a complete solution (execution immediately hands off to the next line, and in some cases you would actually want to halt it)? 
I absolutely agree, just making a point that you can always trick your way around loops if you want clever boy points from FP wankers. The operation is awaitable though, it will return a promise that would be resolved when the last promise resolves. 
Using .bind vs =&gt; fat arrow? Thoughts?
&gt; 2) you can't actually await the operation, making it non-viable as a complete solution (execution immediately hands off to the next line, and in some cases you would actually want to halt it)? Sure you can, the result is just a promise. ``` await [async1, async2, async3].reduce((p, n) =&gt; p.then(n), Promise.resolve()) ``` That said, this example is completely nonsensical: there is no effective difference in waiting for `n` promises sequentially vs waiting for all of them in parallel. This code should simply be `await Promise.all([async1, async2, async3])`.
 &gt;No need to flex. &gt; I get paid a lot of money
Oh true - brain fart. It skipped my mind that you had passed in a promise as the initial value. &gt; there is no effective difference in waiting for n promises sequentially vs waiting for all of them in parallel. Are...you actually serious? You don't think there's a difference between code executed in series and code executed in parallel? Order of execution is completely unguaranteed with the latter and is actually important in solving a variety of problems (couple of examples I've had to deal with in the past month alone: a folder of bash scripts that are supposed to be executed one after the other and a helper function for cascade-saving a bunch of related DB entities)
What kind of things for example do you do that push the boundary of Javascript may I ask. curious
 &gt;5) I know this goes against the grain of most JS developers but I have to express it. ALWAYS USE SEMICOLONS. Thank you. 
The same as in any other lang. Verbosity, using loops, failed logic and the lack of tests. 
Your code using moment uses the start of the week, so it's not rounding. My code above always rounds up. If you want actual rounding, you'd need to check the distance between the timestamp and the monday before/after then use the smaller value. Second thing, forgot you wanted UTC. just subtract the timezone offset. const nearestMonday = date =&gt; { const monday = 1; const currentDay = date.getDay(); const distance = Math.min((monday + 7 - currentDay) % 7, monday - currentDay); const newDate = new Date(date.getTime()); newDate.setDate(date.getDate() + distance); newDate.setHours(0, 0, 0, 0); return new Date(newDate.getTime() - (newDate.getTimezoneOffset() * 60 * 1000)); };
Webpack is good for multiple pages too. Webpack dev server is horrible. 
Sure do oop if you feel like it, but js still not beeing the classical javalike oop language classes shoehorn a shitty program like no other. Ive seen this over and over, trying to mold java into js it turns to shit every time. Js as a fp langauge is just that much simpler. 
With fat arrow =&gt; and classes, rarely need to use apply bind call from my experience
Of course there is a difference between code being **executed** in series vs parallel, but that's not what we're talking about here: a promise is a *result* of an execution, and waiting for a promise does not execute it. series vs parallel is relevant when resolving promises, not when awaiting them. e.g. these are all equivalent: // 1 await Promise.all([promise1, promise2]); // 2 await promise1; await promise2; // 3 for (let p of [promise1, promise2]) { await p; } // 4 await [promise1, promise2].reduce(reduce((p, n) =&gt; p.then(n), Promise.resolve()); What's more, none of these actual tell you anything about the order in which the promises are resolved. On the other hand, these definitely aren't equivalent: async function f(a) { /* ... */ } // 1: executes in parallel await Promise.all([f(1), f(2)]); // 2: executes sequential await f(1); await f(2); // 3: executes in parallel for (let p of [f(1), f(2)]) { await p; } // 4: executes sequential for (let a of [1, 2]) { await f(a); } 
that actually works!!! OMG you saved my life
What would you do in my case? Make a bunch of JS files that contain nothing but SCSS imports and use those as entry points?
apple should just rebase safari on chromium so it at least has feature parity with the most used browser. they can say it's a revolution if they want at the next conference.
Try the Py app for iOS. Good for practicing 
I did exactly that. But if i do it again i would use gulp for static fles and webpack for just javascript. 
Thanks for that, might be an interesting way to approach it. This part of music-fns could be a lot better I think.
I did exactly that. But if i do it again i would use gulp for static fles and webpack for just javascript. 
Often, they either don't develop Javascript apps in a daily basis or don't develop apps but are more of a design background so I take real life example problems that I encounter at work and try to help them find the solution (oddly it is more algorithmic than javascriptic). 
True with the resolution. This is a sample of the sort of code I'm talking about: async function batchSave(...nestedEntityList) { await transactionManager.run(async (txn) =&gt; { for (let item of nestedEntityList) { await (Array.isArray(item)) ? Promise.all(item.map(entity =&gt; txn.save(entity))) : txn.save(item) } }) } Where the promises are being created within the loop. Which I call like so: `await batchSave(a, [bNeedsA, cNeedsA, dNeedsA], [eNeedsC, fNeedsD], gNeedsF)`. 
I'd say if you find code that warrants commenting (e.g. because it's opaque or complicated), you've found code that should be extracted to a well-named function.
[removed]
I've actually had to deal with this. Old boss had *genius* friend build him a php site using cake. After looking at the code for a few hours, I admit defeat, I couldn't figure out what he was doing. Old boss loses all faith in me, tells me "it's OK he's like super super smart" I tell him "that maybe so, but that code is a confusing fucked up mess, no good programmer would write code that way" 
What do you work on where the microseconds performance difference is relevant?
Use a getter https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get 
I don't learn a new language every year, I'm not sure I see the point, as you say it's tedious and if I'm not going to use it for work it's just going to fall out of my mind after a few months. I do try and learn a large piece of tech every year I suppose, this year it was graphql for example. That *is* something that I could use in a job.
Love this approach, feels very clean. Thanks for the constructive feedback!
I'd say the example that I run into the most is with promises, say: const [users, details] = await Promise.all([ api.getUsers(), api.getDetails(), ]); But like others have said and most things you learn in development: it is a tool to add to your belt, it might come handy in the future but it is basically syntactic sugar. Also, on the new React Hooks proposal, the function `useState`, for instance, returns an array with two values you might want to name, so instead of: const values = useState(); const state = values[0]; const setState = values[1]; You'd do this neat one liner: const [state, setState] = useState(); That lets you name your variables whatever you want clearly and objectively.
Professionals know when Douglas Crockford is full of shit, and when his advice should be considered law. Crockford deserves much credit for observing that JavaScript object literals are an efficient and self-documenting data description language in their own right. JSON has pretty much drowned the wicked and obese XML in a bathtub, which is ironic because Crockford loves imposing arbitrary rules and XML is positively totalitarian; but alas, he came of age in an era when computers didn't have unlimited memory or clock cycles or bandwidth, so he's quick to recognize and exploit such sources of clean-burning and renewable mojo. (There is an anecdote about an ECMAScript meeting Crockford attended where the language's author Brendan Eich tore a copy of "Javascript: The Good Parts" in half and tossed one half into the trash.) Crockford used to hang out on Google Plus, but when he started rejecting comments from anyone not in his circles I stopped following him. 
jQuery plugins everywhere.
Messy or imprecise thinking as if the writer isn't 100% about which lines are contributing to their code. This is particularly apparent when code has evolved over a period of time as a person tries to just get it working, and various vestigial code paths or functions or variables end up being left in. This is common to all languages not just JavaScript, but unlike stylistic issues it has a real and calculatable cost if code with these problems becomes common in a code base, and when mentoring new hires you can really see their growth when they stop sending you sloppy PRs full of changes they can't quiiiite remember why or if they're needed, and they start sending you precise and concise changes. Like engineers.
==
Yeah, it totally makes sense to use a for loop there, and it's much more readable here than reducing. Though, in proper functional style we would probably use _neither_ solution: we typically prefer `map`/`filter`/`reduce` over `for`-loops for 2 reasons: (1) it shows intent, and (2) it separates control logic from business logic. In our example problem, both `for` and `reduce` fail on both of these points. Instead, we could use a dedicated control function for this that is clear on intent. For example, we can use a `forEachSequential` function: function save(item, txn) { if (Array.isArray(item)) { return Promise.all(item.map(entity =&gt; txn.save(entity))); } return txn.save(entity); } async function batchSave(...nestedEntityList) { await transactionManager.run(txn =&gt; forEachSequential(nestedEntityList, item =&gt; save(item, txn))); } To be fair though, this doesn't really eliminate the problem: we still need to decide between `reduce` and `for` in the implementation of `forEachSequential`. However, it's a much more isolated problem here, and because it's so isolated both solutions work relatively well: async function forEachSequential(list, callback) { await list.reduce((previous, item) =&gt; previous.then(() =&gt; callback(item)), Promise.resolve()); } async function forEachSequential(list, callback) { for (let item of list) { await callback(item); } } Of these two, I'd probably still pick the `for` loop, but I do think this demonstrates that it's not necessarily such a stupid idea to ban all for loops from at least your business logic. 
I prefer for..of over forEach. Much easier to read in my opinion and immediately recognizeable as a loop construct at first glance. map/filter/reduce are nice though for their respective use cases.
it's not extreme, I use that rule too, among other "functional programming" rules. The goal is not to ban loops but to discourage their usage because `map`, `reduce` and `filter` are better almost 90% of the time. If you really need a for loop you just have to prepend a comment `// eslint-disable-next-line fp/no-loops` and you are good to go. This is easy to spot in a code review so you'll have to explain why you need the for loop.
One use case is returning multiple values from a function: ``` function fetchJson(url) { ... return [error, body] } const [error, body] = apiCall() ```
forEach, filter, map, reduce and so on are special cases of imperative loop like "for of". It's easy to distinguish between filter and map in a second and you know what's going on there but if you use imperative loop, you have to study it. Chaining of filter/map and so on is also very usful and clean in my opinion. 
Also, is it really the same thing or does it just feel similar? 
&gt; You can’t quantify “always return early” as a static rule. You really need to understand a function and what could change. If you return early but later need to add I shared behaviors you may have to rewrite. I'd say return early is still an absolutely solid rule of thumb and typically results in much cleaner code. Especially in the web context, you are often uncertain about the data and it often makes sense to be defensive. By returning early, you narrow the type in your function scope and can then make increasingly safer assumptions without nesting. If you don't have TypeScript compiler or something checking your types, it's very easy to end up with functions accidentally returning undefined or missing null checks further into the body. If I'm writing else conditions the function, it's probably something I'm also wanting to refactor. Most of the time, I want to write functions that return immediately and don't even have a body (as long as it doesn't require nested ternaries) &gt; The ASI system in JS was an afterthought and has some wacky edge cases. Which is exactly why I think it's a bad idea to try and pretend it does't exist. You can add semicolons if you want, but ASI is still going to put them where you deliberately omit them, like on the line break after your return statement. It's best to just take a few minutes to understand ASI and use a linter to avoid most issues. Then manually adding semicolons becomes a matter of code style. I think there's value in omitting noise from the code and the redundant semicolons can be just as misleading as omitting them, for someone who doesn't understand ASI. I do agree with the rest of your points. In 10 years I can count with one hand the times history not being clean enough was an issue. A way more typical version control issue is developers not pushing to remote often enough and having merge hell with the branches they polished locally way too long, while arguing about merge commits and rebasing.
Great to see more frameworks being built for server side JS, especially with TS. As someone that's used Adonis quite a bit, but not Nest, how would this compare?
I’m pretty sure. In that code chunk the same variable is declared three times. I’m not a c++ dev or anything, but I’m pretty sure you can only declare a variable once. After that, you can assign new values as long as the type correlates but you can’t re-declare it.
A excessive use of settimeout.
Very cool indeed! 
Ooh interesting, giving this a shot. Thank you :’)
Great, but just so you know the list of goals you listed can literally be applied to any other project :)
I've seen loads of people do that even *with* arrow functions.
I mean the choice in whether your mysql/mongo/etc. package expose a single class or a collection of multiple functions is up to you, but all a class is (in JS or any other language) is a set of grouped functions that might have data shared between them. If you're passing around multiple functions together, just put them in a class and pass that around instead, it's easier and saves everyone time.
Absolutely right! I'm just saying that the key is not in inheritance but in interfaces. 
People using it. Its just that a lot of people will do `$('.my-class')` every time they need to do something to the `.my-class` div and then jQuery does a new lookup every time when they should have just set a variable with the element like `let $myClass = $('.my-class')` and used that over and over. (I use the $ prefix just as a convention so I remember its a jQuery variable).
&gt;I've learned came from w3schools &amp;#x200B; I **highly recommend** using [MDN](https://developer.mozilla.org/en-US/) rather than W3schools as a source of information. &amp;#x200B;
Coda.
Mostly I've been doing this well over a decade now. That said, when I was 18 or 19, someone told me a proverb that I have stuck to religiously and the older I get, the more I become a zealot for it: "Good developers read 10 lines of code for every 1 that they write." Reading, in this context, means reading and understanding, of course. I read almost all of the code of almost all of the dependencies that I use. I would read all the code that's consumed anywhere in my apps, but there's only so many hours in the day. That said, it doesn't help to read code if you can't figure out why the right decisions were made or that the decisions made were sub-optimal. I didn't learn most of this shit in college because my family's finances collapsed in the 2000s and I didn't finish, so I read a ton of books. Here's some that I remember and think are worth recommending: 1. [The Gang of Four](https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8) is arguably the most important book in software architecture. Many of the patterns in the book are very common and will be very familiar to you, even if you've never seen them formalized before, because the book has had such an impact on the way people design software. 2. [Head First Design Patterns](https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly-ebook/dp/B00AA36RZY), despite the cringiest cover, is more or less the same information as the gang of four except that it's written to be read. If I had to do it all over again, I'd probably read this one really thoroughly to get an understanding of the concepts, and *then* hit the gang of four. 3. [Thinking In Java](https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486) is ostensibly a book about learning how to write Java, which it is, but it's also the book best suited for teaching OOP thinking. OOP isn't just a set of tools, it's a set of tools that's best applied under certain assumptions about the way that data is structured and signals are communicated across an application. TIJ does a better job teaching the OOP way of modeling software than any other book I've come across. Java itself has changed quite a bit, and is largely superceded by Kotlin these days, but even still I'd recommend reading through the book if not working through the book. 4. [Java Concurrency in Practice](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=sr_1_2?ie=UTF8&amp;qid=1546004553&amp;sr=8-2&amp;keywords=java+concurrency+in+practice) is probably the least relevant think I'm gonna recommend, because again it's for java, but it starts with the assumption that you have a decent knowledge of Java and absolutely no knowledge of concurrency. It starts with primitives like mutexes and moves through them and into concurrent data structures, locking strategies, etc. Concurrency is a feature that's often omitted from high level languages (it's completely absent in JS, for instance) because it's difficult for developers to learn and understand because it's the most difficult thing in writing software. Learning at least the basics of how concurrent programming can work is helpful in architecting and designing every piece of software, because it makes you start thinking about stuff like the difference between calling setInterval and setTimeout to loop code on a timer, properly gating http requests so their responses get resolved in the order they were requested, etc. 5. [Clean Code](https://www.amazon.com/gp/product/B001GSTOAM/ref=dbs_a_def_rwt_hsch_vapi_taft_p1_i0) and [Clean Architecture](https://www.amazon.com/gp/product/B075LRM681/ref=dbs_a_def_rwt_hsch_vapi_taft_p1_i1) assume that you're already a fairly competent programmer, which is why I listed them last, but they're also the most directly applicable to your question. "How do I know what bad code looks like versus good code? How do I refactor bad code to good code?" are the types of questions these books answer fairly thoroughly. 
Sorry, but u/MystK has the right of this. *Bind*, *call* and *apply* are inherently confusing and have poor static analysis support. There is nothing you can do with them that can't be done more clearly with arrow functions, classes and pure functions. Professional developers who have a lot of experience understand this.
Isn't the presence of the loop annotation enough?
I do not think keeping things perfectly DRY is the most important thing though. It can be a massive waste of time if you ask me. I would keep things perfectly DRY if i knew that i would have to touch it often or if i would have the time to do it. To be clear I'm not talking about repeating myself 10 times and everywhere, but repeating myself two times is not a problem for me in many cases, considering i automatically write DRY code in most instances anyways. But thats just my opinion.
While I agree that code splitting is usually a good thing, sometimes it just doesn't make sense. If someone writes a function that was used only in one other function and nowhere else, I don't see the point of code splitting. And some devs are doing just this, because they were thought that code-splitting is good. When I am reading code from other devs I prefer when they dont split the code just for the sake of splitting, because whenever I read a function that contains other functions I always need to refer to the functions instead of reading it all together, which obviously is easier, especially when you are trying to understand someone elses code. One simple comment line above the block of logic can totally replace the function need and make my day easier. 
For me i would rather have them admit that they cant do the task, than them doing this. This is bound to produce horrible bugs.
Interfaces are a form of inheritence. An object that implements an interface inherits the API from the interface, and the interface becomes the polymorphic type that is [able to be substituted](https://www.wikiwand.com/en/Liskov_substitution_principle).
A lot of the time, if the function is named properly it should be obvious what it is returning. There are definitely diminishing returns at some point. I'm never going to make a generic function that returns a transformed array, unless that transformation is needed in multiple other functions. Because after all , .map, .filter, .reduce are functions themselves. 
I disagree. There is good code out there, just not much of it. Writing hard to read code is very easy. Writing simple and easy to read code is hard and takes time. Never complaining/objecting about someone else code won't ever make them a better coder. Code review is a tool aimed at making us write easier to read and understand code by giving each others advices. Coding in a team is a communication exercise.
If you don't know what bitwise operations do then you are junior and shouldn't be reviewing code...
Your choices are basically these: 1. Use a relational database 2. Use your document databases as if it were a relational database with separate collections for everything, but without any of the machinery of a relational database supporting that. 3. Use your document database the way it was intended and end up with something like the above. For future reference the best advice is: Choose a data store which best facilitates the kind of queries you'll want to make on your data.
That's not even a good random number in the end (chopping of the last bits is bad). Ouch.
_.each()
I have a webpack config that has two entry points, one to process every pug template and scss file in a set of directories and another to process the javascript into a bundle. The only downside I ran into was I always wound up with a single empty bundle, so I added a final cleanup step to delete it.
I've yet to use any of those three. Never had a need to do so.
If you've read any list of "must-read" software books in the last decade, you won't find anything new here.
That last one would apply to nearly all react usage
Refactoring: Improving the Design of Existing Code The second edition of this book came out this year, and it’s using JavaScript to illustrate code examples (was Java when it was released). Peace from IL Yogev
I try not to write jQuery, but when I do, I make a mess of it. I’ve been doing this 15 years, and jQuery is still tough to get right the first time.
&gt;Choose a data store which best facilitates the kind of queries you'll want to make on your data. I'd like to pick your brain on this one. I heard from people more experienced than me that a non-relational database supports the ever changing environment of software better, that changing the schema on relational databases is a mess. How realistic is that? I know people tend to exaggerate their problems, that is how people works, maybe they were just venting frustrations. If that is indeed a problem, how would you tackle not having all the requirements before you start making the software, a la agile methodologies? I know that for nosql databases you could just start changing the schema without many problems, "it just works" is something I heard before, how is the equivalent on relational databases?
Oh ok i get it, in my project i made a bunch of trees by in the same method, the trick is to only call the draw method once and optimize it to draw a repeated model over different coordinates
How do you mean?
the only thing you 'must read' is the 130,000 lines of WTFs from last year... &amp;#x200B;
You're completely right with the fact that most of the knowledge comes from programming and working with different teams / people on a daily basis. I've been working as a freelancer for two years ( mostly solo unless I needed someone to work with me if required ) and I can say that for sure that most of the knowledge and experience is gained from working in a team where you explore and learn from other's perspectives and approaches which is quite beneficial. No matter how many books, blogs or tutorial you go through, nothing can give you as much experience as working in a team. Also, thanks for taking the time out and curating a list of good books which a lot of people might find useful! Have a great day! And a really good new year ahead! 🤓
heh, you're welcome bud.
Overall, I see more "advanced" people forgetting about all the basics... Proper consistent naming, not keeping to high cohesion / loose coupling, etc
There's nothing wrong with this schema from the P.o.V. of how nested it is. Nested data is fine. Of course, it doesn't mean it has to be written as one giant nested literal in your code. You can assign subsections of it to variables and then assemble them all in a separate "root" literal. Now, in some cases you may see if you use structures like this that you repeat the same data multiple times. For example, let's say a player appears in multiple categories, you have its data several times. This can be fixed by returning a list of "mentioned" players in one array/object, and use canonical identifier for every mention (like player id, etc.) throughout the rest of the structure. But if you don't have that problem, no need to fix it, right :) ?
Attribute nodes cant have children, so I don't think there is a concern about deep cloning here. Feel free to change the `true` to `false`.
It's really going to depend on the use case/purpose. I have used SVG with great success both in native Javascript and using Snap SVG. I cant talk for Canvas but depending on your use case this could be a good option and there are many libs for that also.
&gt; I heard from people more experienced than me that a non-relational database supports the ever changing environment of software better Without more context this honestly sounds like your typical kool aid NoSQL gibberish. Even if you don't use a relational database, you end up reinventing many of the same core concepts in whatever you use. Relational databases were modeled after the world they describe, not the other way around. I.e. in any human-driven "dead tree" data storage facility preceding computers, you would see the same basic principles employed as in a modern RDBMS. 
You could use a pattern that firebase uses internally. Basically a Mongodb database ( or any similar database ) with a mapping of datas which is similar to relational databases. Makes data fetching faster in many cases and also better ways to access stuff. Basically best of both. 🤓
JavaScript for Web and Node.js application development. Dart for Flutter application development.
You could use a pattern that firebase uses internally. Basically a Mongodb database ( or any similar database ) with a mapping of datas which is similar to relational databases. Makes data fetching faster in many cases and also better ways to access stuff. Basically best of both. 🤓
Sometimes I'm hired to improve poorly organized resource-heavy sites where such "little" adjustments like switching `forEach` to reversed `for` loops total up to a palpably improved performance to the end user. Redoing the organization or optimizing the resources would be better, of course, but clients don't always have the budget or interest in doing that.
I'm working on an e-commerce who is selling glass sheet, and the customer need to choose shape and size(s). My purpose is to display the final result. 
In the `readme.md`, in the section on clasees, you have: myRepo.class('Artur', Me) const me = myRepo.get('me') const anotherMe = myRepo.get('me') Shouldn't those be `....get('Artur')`? --- Also, in the second half of the readme you have a bunch of `(miss-written)[links]` instead of `[text in square brackets](http:/link.in.parenthes.is/)`. 
Cool, sounds like a fairly straight forward use case. With canvas it seems very straight forward [https://stackoverflow.com/questions/36825717/create-a-canvas-polygon-in-html5-with-dynamic-user-input](https://stackoverflow.com/questions/36825717/create-a-canvas-polygon-in-html5-with-dynamic-user-input) This looks like a minimal library to do similar in canvas [https://github.com/cameronsamuels/polygen](https://github.com/cameronsamuels/polygen) As for SVG, here is a discussion around a native approach [https://stackoverflow.com/questions/45773273/draw-svg-polygon-from-array-of-points-in-javascript](https://stackoverflow.com/questions/45773273/draw-svg-polygon-from-array-of-points-in-javascript) and regarding a libaray id give this a go if you want to avoid the manual approach [https://svgjs.com/docs/2.7/elements/](https://svgjs.com/docs/2.7/elements/) but it is allot of framework for what you want to do.
I think this begs the question, why aren't there any new "must-read" books?
Thanks! For future reading, i've found this [http://fabricjs.com/intersection](http://fabricjs.com/intersection)
&gt; I know that for nosql databases you could just start changing the schema without many problems, "it just works" is something I heard before, how is the equivalent on relational databases? It "just works" in so far as you won't get immediate errors. But you will see all kinds of potential problems with missing/inconsistent data in whatever applications are consuming data from your document store. Imagine if only some of your documents got updated with the new schema for whatever reason (sharding/distribution), and now your code has to account for potentially bad data. &gt; that changing the schema on relational databases is a mess. The only time I've seen it be a mess is when you get anal about foreign key constraints. Beyond that, a relational database is a very simple, clean, logical thing. I've had to stumble my way through a lot of annoying technology and problems in web development. Relational databases have NEVER been one of them.
Welcome, hope you figure it out :)
Let's be fair; this "article" is a *joke*. It's just some meaningless fluff with a bunch of Amazon affiliate links. Can't be the only one who is becoming tired of these so-called "ultimate", "must-read" and "10-things-you-need-to-know" posts. I've got a New Year's resolution for people posting this stuff: let's come up with original, innovative content. Let the internet be more like the cool and experimental place it was 20 years ago.
Are you refreshing the entire page or just a subsection? Is the button you’re clicking just making a call to get more data while leaving everything else intact? If you’re trying to refresh the entire page [there’s a simpler solution](https://stackoverflow.com/questions/8342756/chrome-extension-api-for-refreshing-the-page).
When I say "refresh" what I really mean is auto-click after like 5 minutes. So find the button, then click it ever 5 minutes. And yes, that's how the button works but because I don't have access to the rest of the files/code so my work around is a chrome extension that lets me manipulate a little.
uh… if it does the wrong thing, it's not clean or clear.
Did you even read the comment you're replying to? They're using unicode zero width characters in the variable names, they all have unique identifiers.
Thank you! And my apologies to anybody whose phone my simulation might have melted! 
[Here](https://codepen.io/anon/pen/LMzxvv?editors=1011) are a couple of patterns
&gt;Want something to do? Click my Amazon affiliate links!
&gt; Tests for Data Transfer Objects increase the code coverage. However, they don't exercise any meaningful business behavior of the application. They're only technical details. For example, changes to the name of an accessor method are more likely to require changes to multiple tests and incur unnecessary maintenance while not providing any business value. This is the first paragraph of that article. It's point is incredibly stupid. Let me reiterate that, this is stupid. Computers as a whole are technical details, the software as a whole is a technical detail, the software developer is a technical detail, often the entire IT department is a technical detail. Despite that these technical details must work or there won't be any money because the product relies on them. As soon as a developer writes code that needs to run in order for the business to make money some value is being generated for the business, and presumably it needs to run correctly. We don't skimp on hiring practices because software developers are just a technical detail, why would we skip another best practice just because they relate to technical details? Labeling something is a technical detail, and asserting that things with this label are uniimportant he's just a way for people who don't like to deal with certain details the stick their head in the sand. There's no prerequisite of competence to get onto medium. I'm not reading the rest of the article. A much better hueristic to use to determine if you need to test code is to ask: what breaks if this code breaks, and can the business afford that? If a data transfer object breaks then production breaks, and the customers put the brakes on the money. If a build a script breaks, then the developers are inconvenienced until they fix it, one of these needs good test coverage the other does not. -- Sqeaky an SDET 
Professional Javascript runs extremely slowly and runs about 200mb of libraries for what could be done with about half a page of code. I really wouldn't worry too much about professional standards in the world of Javascript.
how long have you been developing?
You could just hook up node-sass directly in your package.json scripts. It has a built in watcher as well. Only use a bundler If you actually want to bundle your JavaScript.
Anyone telling you that one technical solution is “best” without understanding of the problem-domain is a charlatan not worth your time! Changing *any* schema is going it be painful if your interfaces are coupled to your choice of data storage. Basically your data *is* relational - you can model those relations in a db designed for that OR you can implement those relationships yourself in app-space. Which is better depends on your use case - but no technical solutions will just remove those issues, only move them around. My experience is that if your data is relational - trying to do what a relational even does for yourself is usually a mistake.
Yea these are great reference books but nothing I would read just to read. Here are some non-fiction titles I have read in the past few years I would recommend: - The Cuckoo's Egg by Clifford Stoll is a great book about the true story of catching a hacker in the early days of networked computers. I personally could not put it down. - The Soul of a New Machine by Tracy Kidder follows Data General in the early days of trying to create the next big thing in computers. If you like the show Halt and Catch Fire, this would be a great read for you. Won a Pulitzer if that means anything to you. - Father Son &amp; Company by Thomas Watson Jr, is the autobiographical account of the early days of IBM. Lots of great stories about the origin of the company and many great lessons about management. Watson doesn't exactly whitewash the history of the company, but I have heard some things were left out. I took a lot away from this book even if I am not the biggest IBM fan.
There’s much less innovation going on than what people like to portray.
You might want to look at p5.js library. Search for "coding train" on youtube. Daniel Shiffman is an amazing teacher.
Hi, thanks a lot for your question! I am not familiar with Adonis, but I guess, that it's a huge difference, as Adonis uses functional style but in a well organised form. Also, Adonis ships with its own HTTP engine under the hood. Adonis is more comparable to Express/Restify as it has a lot of commons. I think that Odi, NestJs, Routing-Controllers and etc are like the next step in the infrastructure development. :)
Thanks for your feedback! 
Yes, that's true :) We are trying our best to provide the best quality framework, so the most common best practices and principles were included in the goals list.
Oh yeah, I see those. I wanted to make sure the library itself wasn't that bad :P
Is auto click the only reason to create the chrome extension? If so then why can’t we try something like this below: We can apply a pseudo css class to the buttons, say auto-click, for the sake of differentiation, and the window.setTimeout(function() { var buttons = document.getElementsByClassName(“auto-click”); buttons.forEach(btn =&gt; btn.click()); } Apologies, in case I missed your point... 😊
There’s a difference between complaining and constructive criticism in a code review. 
The thing that sucks about this though is let's say you have a build watcher watching your main project, and a build watcher watching your package. I have yet to find a tool in the JS ecosystem that intelligently builds your package, and only when finished, builds the application that depends on it. I always have to manually build the application each time I make a change to the package. It's annoying.
8 years. With JS only recently, last 3 years, when adopting React and RN (ES7 and Typescript).
I'm by no means a JavaScript expert, but one of the things I found extremely challenging when I picked up JavaScript was that it gives you so much freedom in terms of how you approach and structure your software. When you're writing something in Python, you're subject to some pretty strong constraints in regard to how you structure and approach your code, as you are with Java, but with JavaScript not so much, in my opinion, at least. You can conjure a piece of software, adopt an object oriented approach and produce something that doesn't just work but is scalable and maintainable, too. The catch, however, is that you could also adopt a functional approach, or even a declarative one and achieve the same results, which is not a bad thing, quite the contrary, when you have some grounding in the language; I say it's not a bad thing because I think freedom is good and I'm not a big fan of dogma when it comes to code, or life for that matter. It's a question of knowing which tool will get the job done, but my n00bier self (I say n00bier because I still think of myself as catastrophic n00b), found all this choice to be very confusing and in the beginning it hampered my ability to adopt good JavaScript practices and the end products that I somehow managed to spawn read like the ramblings of a mad man, locked up in an asylum, with a fever. To me, this is what separates the JS developer with grey hair and the bouncy whippersnapper; knowing when to use what tool, or approach and structure, if you will, when solving a particular problem in JS. I think two perfect examples of what I'm trying to get at are THREE.js, which is object oriented and for good reasons, and Redux, which draws on a functional approach to programming, also for good reasons. Oh, and throwing in the DOM into the mix does not make life any easier for a novice JavaScript developer... That much is certain, but please note that much like I learned to like broccoli and black coffee, I've learnt to like the DOM, too, so I'm by no means trying to go all sassy on it, here. Having said all that, I'd recommend any JavaScript n00b that is serious about understanding the language and adopting good practices to read Addy Osmani's excellent [Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/). It might not cover all the new awesomely fancy libraries and frameworks that are ought there, but it gives you a deeper understanding of JavaScript, and with that you're ready to start shopping for your favourite framework and argue about how it's better than all the other frameworks out there here on Reddit or wherever y &amp;#x200B;
That's the trick, it's not `int abc = 1` It's int abc_plus_nonvisible_unicode_character = 1; the second would use 2 non-visible characters, and so on.
Hi /u/YogX, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
They posted it to 27 different subs...
The acronym is stroong with this one.
What have you tried?
On a related note, if you do use bind, do you still have access to whatever `this` would have been inside the function?
normally no, unless you can get a reference to it from somewhere else. the whole purpose of bind is to set the "this" variable. you could use the "call" or the "apply" methods too which just change it for a single call whereas bind changes it permanently and returns a whole new function.
I tried to make a function that has each possible selection as a variable I then selected the form div Id that holds the selections and if a value is selected an alert box would open. Or.. function howform(){ var a = ("option.value 1"); var b = ("option.value 2"); var c = ("option.value 3"); var d = ("option.value 4"); var e = ("option.value 5"); if ($("inlineFormCustomSelectPref").val()= a){ alert ("please click next"); }}
Sure but behind every complaint there is an issue and sometimes when you get a lot of things to complain about, it's not possible to make all of them "constructive". Constructive criticism is great but you should never dismiss complaints because they aren't "constructive".
Yeah. There are a lot of issues with the robustness, but I mostly wanted to just highlight the unreadability. So we're not shitting too hard on the author, in context, he was generating numbers between like 1 and 36 or so, and it worked fine for that.
alert when option is selected: &lt;select onchange="alertFunction()"&gt; function alertFunction(){ alert("you've been alerted"); } require selection: &lt;select required&gt;
If you find yourself trying to reinvent a relational DB with a NoSQL DB, then you shouldn’t be using NoSQL or you need to re-think your implementation. NoSQL isn’t RDBMS with missing features; it is an alternate paradigm for alternate requirements. NoSQL, particularly a document-oriented DB, is significantly closer to non-computer data management. For example, atomic transactions and data normalization aren’t practical with pen and paper.
&gt; the same variable is declared three times The whole premise, beginning a few posts up, is that you can be evil with Unicode characters in your names, either by using Unicode characters that look similar to latin characters, or by inserting Unicode characters that have no visual presence at all. So those three "abc" variables, despite looking the same to us humans, are actually different names to the computer.
What's calling that function? Also in that if statement, you're using = which is for assignment, not a comparator which would be == or ===
Are you restricted to using webpack? Parcel can take Html files as inputs and you can import your js/scss stuff directly from the Html file. However I'm not sure if parcel supports multiple entries without starting multiple parcel processes... 
Please spare me the condescension. First of all, all modern RDBMS are hybrid: they support "documents" (i.e. JSON, BSON or other variations thereof, including indices for them), but they also support foreign keys and relational algebra. The odd one out here are "NoSQL" databases, which are precisely databases with half the features out. They were fun to put focus on structured tree data and schemaless designs at the time, and techniques like denormalization, at a time when people didn't value those techniques enough. But we get it now, and pure "NoSQL" databases have gone two ways hybrid (with relational features) or obsolete. Your choice. &gt; For example, atomic transactions and data normalization aren’t practical with pen and paper. Bull. Do you have a social security id? Oh so they don't just ask for your short biography every time? That's normalization and foreign keys. And atomic transactions are literally the backbone of the entire bank system and accounting.
Then we mean different things when we say clean or clear code. I mean that beautiful solutions are always beautiful, but sometimes they are the wrong solution. Do you agree that it’s easier to fix broken code if you know what the author was trying to accomplish? 
I mean, I've been using JS for about 18 years, but this just doesn't come up that much in your normal frontend web work. Even if you have some reason to do int casting all the time, you should leave a comment about why that was necessary, or note that it's happening, because it's an implicit behavior, and will trip up people reading or trying to debug around that code. And even then, did you know it doesn't have operator precedence over multiplication off the top of your head? That said, it was just shorthand for Math.floor() here. There wasn't a good reason for it in the context of the project it was in. It was just lazy coding a quick and dirty RNG, which is fine on your time, but I just thought it was a good example of the kind of thing less experienced devs do, because they haven't been bitten in the ass enough times by implicit behaviors and confusing their coworkers and stuff.
I am working on creating a library of UI components for e-commerce sites using Vue. I would love great constructive feedback on the project. Feel free to challenge the need for a component, break a component apart (coding best practices both Vue and Javascript), suggest a new component or just a pat on the back (or a Github Star) is great too, to keep me going! Github link - [https://github.com/Shreerang/Vue-Nuggets](https://github.com/Shreerang/Vue-Nuggets)
I'm definitely on the functional train when it comes to iterating and sort of try to stay away from forEach when possible (as you noted, reduce in particular is sweet), especially because it allows for easy chaining, but I will note one other fun thing (that you could very well already be aware of) -- for ... in also allows you to iterate over an object's keys. I believe it's the only iteration helper that'll allow you to iterate over an object. Individuals smarter than myself would probably have countless reasons why you shouldn't do that, and I personally always end up sticking with Object.keys/values/entries so that I can map/filter/reduce over the object but I always thought it was kind of a cool thing regardless.
Metacognitive what? These are simple concepts. I've seen management-level developers pulling all instances of string literals into a separate JavaScript module "just in case" someone ever had to reuse that string literal. No one seems to have ever explained to them how string interning works, or how to count. Now, in the quest of not repeating themselves, They typed out the string, a variable name containing 90% of the characters in that string, importing that variable into their other script, and typing it out again in place of the original string literal. If you don't teach junior devs how to write decent code, they will never learn. 
yeah, just code review properly &gt; hey man, it's probably better to use `.filter` here instead of this for loop
I would use d3.js a really strong library for svg manipulation.
i guess i could see that then, especially if you’ve mostly only been around post-ES6. 
Oh. Nope, missed that 
Why would anyone do that? That’s devil in sane mean
 if (x &gt; 0) { results.push(matrix[x-1][y]); // and so on }
Frankly, after 18 years I’m surprised this hasn’t come up for you. Personally I did know the operator precedence, I guess I just memorized it over time, but even if you don’t know it, it really isn’t that bad to consult the table. As for the floor operation, internally, the number would still be stored as a double precision floating point. That’s the reason you’re not limited to 32-bits of data. Using | 0 forces it to become an integer. So again, just because you think it would solve the problem doesn’t make it true.
This. Looks. Amazing. I really hope this takes off!
I think the best way would be to separate the reusable parts and creates libraries. Then you can publish those as npm packages and `npm install` and import them in both projects. Everytime you change something in those libraries you run `npm up` and update each project.
Hi /u/occupybostonfriend, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/heyccj, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/rmhehey, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Thanks for the suggestion! I’ll check it out.
Thanks for making these! An ERC721 example would be cool and the next obvious step IMO.
IMHO if you cannot express the "what is this supposed to do" in the name of the function, then the function does too much. And in the more complex cases: the tests should explain whatever the name cannot, in code. &amp;#x200B; &gt;Do you agree that it’s easier to fix broken code if you know what the author was trying to accomplish? Yes &amp;#x200B;
There is tons of way to do it (Git?). One I like the most is to make it from scratch, you make an object with your parameter and everything that needs to be shared. Encoded in json, or as an archive, you decide. Then to share between two servers, they first have first to make an ssh key exchanges. [Ssh-copy-id](https://www.ssh.com/ssh/copy-id) Then use scp (*Secure copy protocol) .* Either one of this servers will send or retrieve, in a loop (Use shell scripts, php, or anything robust). It makes stuffs synchronized very fast, as servers have very high bandwith, you can sync in loop of few milliseconds, or minutes, up to you. 
[removed]
Sounds like a job for CI
I'm working on a VSCode extension to share a RegEx online [https://marketplace.visualstudio.com/items?itemName=lndgalante0765.regex-share](https://marketplace.visualstudio.com/items?itemName=lndgalante0765.regex-share)
what rcfox has suggested, in addition you also need to check for and accommodate at **Each** of the **edge** case scenarios - if current cell is top right and y-1 will fail and x+1 will fail, etc..... current cell bottom right, y+1 fails,x+1 fails, if top middle, y-1 fails but x+1 and x-1 work. etc etc
This is a good place to get started OP: https://blog.angularindepth.com/creating-a-library-in-angular-6-87799552e7e5 Then also this guide on using NPM link to test your packages live in one of your applications, before publishing: https://medium.com/dailyjs/how-to-use-npm-link-7375b6219557
Could also use a separate shared repository that is consumed by each of your projects. Search sub-repositories(?)
6+6-6=6 &amp;#x200B;
What all maths operations can be used. We need logic added for each kind of operation 
At first glance, a solution seems deceptively simple - There is a BIG catch tho for some ***outlier*** scenarios. DIGIT (operand1) DIGIT (operand2) DIGIT IF approach is to create a outer loop to work through digits 1-9 and an array with applicable operands in it \["+", "-".... \], then create a first inner loop to work through each operand as DIGIT (**operand1**) DIGIT ... and create result1 based on = current digit and switch on operands case"/": result1=digit/digit; then create a second inner loop to work through result1 (operand2) digit to get final result. **HOWEVER the challenge is in applying operator precedence looking at the solving of equations as a whole.** using just loops, first loop might throw a 3\*3-3 which will meet the required outcome, however just loops cannot work for 2+2\*2 because 2+2 if evaluated in first loop results in 4 being \*2 in second loop =8 which does not meet 6
Thanks, I've read the documentation about localStorage, and it now makes much more sense. However, after applying all the necessary changes, the script stil doesn't work. Also, the localStorage doesn't store correct values (according to inspector =&gt; Application). &amp;#x200B; I have commented in a clear manner the script on codepen. May I ask you to let me know what's missing? Thank you!
Thanks, it was a stupid mistake indeed\^\^. However, after applying all the necessary changes, the script stil doesn't work. Also, the localStorage doesn't store correct values (according to inspector =&gt; Application). I have commented in a clear manner the script on codepen. May I ask you to let me know what's missing? Thank you! &amp;#x200B; ps: your idea of storing time instead of incrementing a time variable is excellent, but I would like to make sure the local storage works fine before implementing that. &amp;#x200B;
Thanks for your message! I have now stored this value in localStorage. However, the script stil doesn't work. Also, the localStorage doesn't store correct values (according to inspector =&gt; Application). I have commented in a clear manner the script on codepen. May I ask you to let me know what's missing? Thank you!
CI is pretty much it. We put a branch protection rule on PRs so that the tests have to pass for PRs to get merged. The way we use CI is pretty much automating whatever you need. If you are writing scripts to make your life easier; then you are just 1 step away from using CI. May as well just use CI at that point
Simplicity has nothing or little to do with the question of metacognition. Metacognition enters into the question of DRY in reflecting on similarities between thoughts and between intentions. You might implement DRY after only noting a *visual* similarity between parts of code, but by the time you're actually *over-engineering* due to DRY, it's a side-effect of the more advanced metacognitive reflection. 
In early stages you can't be sure what code will remain there once the first version is ready, unless you have perfect information beforehand about the application scope. You don't want ugly code, and you don't want to waste time in code that will be thrown away. You get in debt to work in features, debt with compound interest, so the sooner you pay your debt the better.
Generators are not supposed to replace promises. In fact, you can simulate async/await with them.
I'm not sure you answered the question of what are the pros of writing the same code over and over again. I don't see the pros of repeating the same lines of code, I dont see many cons of putting reusable lines of code in to a function or module.
I really enjoy them as sometimes I don't need a function to run to complition and generators can remember where they left off and will continue executing once they are called again. 
Depends on the style and what other language(s) you're using at the same time, too. If I'm switching between Perl and JS, then I want the code to look roughly the same. Indented blocks, Pascal-ish structure etc. That way you don't have to change your mental reading model too much, you're still operating on a block-based way. When the code is heavily functional, you're more accustomed to progress word-by-word, in which case it's map/filter/forEach. Switching contexts is hard enough, no need to make it harder than it has to be. Which is why I also understand the way APL programmers write C -- it looks like the CPP sharted all over the place, but in *this context*, that's perfectly acceptable. In any way I try to keep loop bodies very small. Preferably passing functions directly, short arrow functions if need be. If it gets larger than a handful of line, factor it out to another function.
dope man i was very curious about this
Also checkout Lerna if you're going this road. 
Powodzenia wszystkim ;) 
Could use getElementsByTagName("button"), substring(), and an if statement. let btnObj = getElementsByTagName("button"); for (let i = 0; i &lt; btnObj.length; i++){ let btn = btnObj[i]; if ( btn.id.trim(0, 11) === x-btn-text ) { clickbutton(btn); } } I didn't check this code but something like that would be how I would get all x-btn-text*
Believe me, if I could get into that code I'd LOVE to fix this the right way. But... I can't edit the code. The best thing I can do is create an extension that allows users to press the button automatically for them constantly to see the updates. The button is a standard button but the number added at the end of the ID is random. What would be great is if I could have it search the code for all instances of the buttons (because there are more than one) with that wildcard in place of the numbers then write a little string for the getElementsById to use to .click. Does this make sense? :-) Thanks for the help by the way. So many people just want to complain instead of seeing it as a fun challenge. So I appreciate it.
To be honest I do one entry point per page, and have that pages CSS imported at the top of the page file. This will generate 1 JS bundle + 1 CSS bundle per page for you to load in your HTML file. You can then use splitChunks to have it automatically pull out common pieces. We’ve recently added an SPA portion to the app, where there is 1 entry point (a routes file) that has dynamic imports for each page but we do our CSS similarly still.
They don't help with async code, they're used to implement async code when you have no native async support. They're actually for building iterators. Things that are computed on demand as you fetch them (one by one or however you please) and "stream process" the fetched items. Thing, for example about searching for the first occurence of a new line in a large 2GB file. You don't want to put it all in RAM, that's wasteful. But imagine you have a character generator that lets you stream characters one by one until you find a "!". That can be a generator. The generator itself can efficiently read from this in small chunks for best efficiency. Generators are the shortest way to have those two parts of your program (the loop implementation, and the loop) negotiate with each other. Writing iterators without generators is generally quite verbose and boring.
You are not forced to, but if you need in your code an array that come from a formula, this avoid to generate it in the first place, so the memory stay cleaner. It's good when holding huge or infinite possible results. Also a generator is not made to be looped. One somewhat similar iterator: [Array.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) , it's concise and easy to remember;) var a = ["A","B","C","D"] a = a.values() a.next().value // A a.next().value // B &amp;#x200B;
Unless there is specific reason to use a for loop, a forEach is cleaner and more readable.
For me, we use DangerJS in our React project to measure code coverage delta, and final bundle size delta against the target branch. If the target branch is master we also warn on unchanged versions etc. For pre commit hooks, no E2E tests are run, only unit level and integration level so we can speed up the commit phase. The E2E only runs on CI. We also use TypeScript with `--no-emit` to run static analysis, and lastly we run with Webpack to build at the end after more static analysis with TSLint and testing with Jess and Cypress.
I like to use them with intersection observers for an "infinite scroll"-list. Here's an old example of mine: https://codepen.io/enjikaka/pen/JpNxJZ
I'm running into a weird issue -- I've got it up and running but the temperature and humidity doesn't seem to change. I don't think it's the correct temperature. Any ideas? Perhaps my DHT11 sensor is busted?
It's basically a 'simplified' (in that it only has 3 operands) expression evaluator, which is a lot harder than it seems to write correctly. I took a crack at it for some coding challenge thing a while back when learning java, and it looks like this and supports the most basic of scenarios: https://gist.github.com/Robert-Wett/12895f21fd37f475c0ed. My dad then wrote one for me to compare against and it looks like this (this one works): https://gist.github.com/Robert-Wett/21937475655e9d569364. So no, this really isn't a simple coding challenge. It's simple in Excel because it's build around evaluating expressions (using eval would be cheating. But... you could just use eval).
I found a good use in iterating over a file system in node.
[removed]
for any n &gt; 2, ((n+n)/n)! = 6
Sqrt shouldn't be allowed because it's equal to taking number to power of 0.5 - so you just introduce new number of of thin air.
Can you use Σ (summation)? If so, for any n except 0: ( Σ ( ( n + n ) / n ) ) ! = 6
I understand your approach, however, even after finding this: https://puzzling.stackexchange.com/questions/1963/6-the-magic-number My JS skills are not good enough to implement this in code.
Looks like this is a common challenge. I found this post https://puzzling.stackexchange.com/questions/1963/6-the-magic-number
ㅤ
 1&amp;&amp;2&amp;&amp;3&amp;&amp;4&amp;&amp;5&amp;&amp;6=6
Does this provide gamma-correct behaviour?
I think I have this working with parceljs. My package is not being watched and built, but it is being edited in a separate repo, and through npm link, the main project does rebuild. It should work for you. The one gotcha is that if you are running a build server the initial link commands don't work. You have to kill the server, npm link everything, then run it again, and from there it should update automatically. 
Are you a complete beginner in programming or a complete beginner in just JavaScript? 
JavaScript and jQuery - Jon Duckett 
Copy-paste is cheap. Copy-paste is ugly. Ugly needs fixing. Fixing is debt. Debt is bad.
You Don’t Know JS it’s free on github and amazing. 
Don't you have that backwards? If you are aware of and understand your own thought processes, then this shouldn't result in over-engineering at all. Understanding why you want to keep things DRY doesn't lead you to abuse it. At least in my opinion. Also, I don't think DRY can ever lead to over-engineering. Over-engineering is when you make something that's actually more robust and better than it has to be. Ill-conceived attempts at keeping code DRY actually lead to it being under-engineered. 
I use them to request streaming updates from an IoT device's memory when needed. It's really handy how you can just call generator.next() and it'll remember where it left off.
Well I have some background in python but other then that I’m a complete beginner 
I’ve been wanting to mess around with a dapp in react, but vue will be fun as well. Thanks for this!
It's not that it hasn't come up for me. After 18 years, you see a lot of stuff, once in a while, but try to consider how rare it is for your average developer to really have a good reason to go out of their way to use 32 bit signed ints. It's niche stuff. You write this code, and most developers will have to consult a reference to understand what's happening, and that's bad. It's great to have a large vocabulary, but you use really big words enough outside of academia, and you come to understand that you're being counterproductive if your goal is to communicate efficiently to a broad audience. Beyond that, how often do you really have to do an explicit cast? If you're working with normal JS variables, they maintain a 32 bit int representation as long as they appropriately can. Otherwise, you're explicitly opting to toss accuracy outside of 32 bit capacity. In none of these situations is it appropriate to leave the reason undocumented. But, again, being the one person in this conversation who has any idea what context this function appeared in, it wasn't justified. It was lazy shorthand for floor. Here's another excerpt from the post: &gt;When you write code, you're serving two masters. You need to tell the computer what to do, but you also need to communicate with the people who have to maintain it (it could be you). Of these, you should generally optimize for the latter. &gt;A good compiler/interpreter takes your verbose, explicit, easy-to-understand code, and turns it into something performant for the computer via inlining, folding, branch optimizations, or whatever. This stuff will just always be improving the longer a language is around, totally passively from your perspective. Your very old code was just suddenly performing better when they rolled out V8 for JavaScript and people started using newer browsers. &gt;On the other hand, people's understanding of your code will always be deteriorating the longer they go after parsing it, and it starts from nothing for new readers. To easily maintain code, you have to be able to go from nothing to full understanding in the least amount of time possible, with the lowest mental load possible, and to do that, you need explicit behavior, good names, comments explaining intent, and baby steps. Just because you can write a function in one line doesn't mean you should.
If you can write nice code in general you can have nice jQuery. The trick is to do your own thing in readable vanilla javascript and only use jQuery to interface with the DOM at sane moments. A good CSS classname system also helps and you can even do a fairly decent and flexible component system if you really want to. 
I'll probably get downvoted for this, but I think for 95+% of programmers generators are completely unnecessary, and so the answer to your question is: you shouldn't.
Here's my 5 line async/await using generators. https://gist.github.com/francisrstokes/e6fcacb5a8c5050224093e08d05af6bb
Overall, I am a fan of this package. One of the issue I have is that you are doing a linear blend of the R G B channels when you should be using a root-square average of the colors. See [this explanation](https://stsievert.com/blog/2015/04/23/image-sqrt/). Overall, you could fix this issue by adding an optional parameter to the constructor that lets a developer set their own LERP function.
Why would anybody want to do that tho? I mean... sure, we all _completely understand that code_, but what about somebody with less than 30 years Javascript experience? Honestly, you _can_ figure it out if you follow it through (or have seen the pattern before) but that doesn't mean it's _friendly_. If I came across this out of context and had to follow it through, I would be pretty damn pissed.
[Same code but without jQuery](https://codesandbox.io/s/r7wmlz4ykm)
Separate the code you want to be shared into a different isolated module and with its own repository and then either: a) package it with ng-packagr and then publish it as a private npm package which you then can install/re-use in both projects. (easiest option) b) clone the repo as a git submodule into the main project which you then can build using ng-packagr to the parent project. (a bit more hassle to set up but avoids the need of a private npm package)
Var solveForSix = function(var a, var b, var c){ Return 6};
One use case is iterating over very large data sets. Imagine you want to loop over the [Power set](https://en.wikipedia.org/wiki/Power_set) of some 50 items. A naive method might be to generate that power set first, and then start looping over each of them. The problem with that is, to generate a powerset of 50 items you'd need a [petabyte of RAM](https://www.wolframalpha.com/input/?i=2%5E50+bytes+to+PB) to generate that list first!! Instead, you could use a generator function, to only create the value when you need it instead of creating all of the values first. An NPM module that does this is [generatorics](https://www.npmjs.com/package/generatorics), and it comes in handy when you want to efficiently loop over very large data sets.
They become infinite more useful if the language/runtime support them with lazy iteration and iterators like in Python. It is pretty much the default there, to the point where materializing a actual list (array in js) is a possible code smell. For example if you use a filter or map operation on any iterable it returns another iterable that is implemented lazy like a generator. Because iterables are fist-class there generators are great to implement your own and make everything streamy and memory efficient.
Generators can be used to create DSLs (domain specific languages) in javascript because they allow you to define how the `yield` keyword behaves. [This is how an Async/Await DSL, like the one you're describing, can be created using a generator.](https://gist.github.com/francisrstokes/e6fcacb5a8c5050224093e08d05af6bb) But you can encode many kinds of behaviour with the `yield` keyword, such as: * [turning `yield` into function composition](https://gist.github.com/francisrstokes/c518d9e97de092a1d7d68cba1aaae451) * [turning `yield` into a command parser](https://gist.github.com/francisrstokes/a69fb9d3113d4688229ec04a8696c914) 
I have used them to iterate over database tables, in chunks instead of all at once. 
This is the most interesting thing I've seen that uses generators. [https://medium.freecodecamp.org/an-intro-to-behavioral-programming-with-react-request-wait-and-block-ad876e2d235e](https://medium.freecodecamp.org/an-intro-to-behavioral-programming-with-react-request-wait-and-block-ad876e2d235e) &amp;#x200B; Toggles also seem like a good use case. Basically, any time you have to choose the next item of a list of things and you want to repeat that list when you reach the end, but you don't want to go through the whole list immediately and you'd prefer not to use the state to model anything. (ie, pausable infinite repeating list.). Seems like it would be a nightmare to unit test though :P
Are you asking why you’d ever use this pattern? Or why you’d use this over just doing async/await?
There was a time - not that long ago - before async await, and this kind of solution was implemented in libraries like bluebird to provide that functionality, so if nothing else it's just good to understand the tools you have available to you when problem solving. As for friendliness of the code - In this example I was definitely going for humorously terse, but maybe it wasn't terse enough, so here is the 99 byte version `var a=i=&gt;l=&gt;{var {value:v,done:d}=i.next(l);return d?Promise.resolve(v):v.then(a(i))},A=g=&gt;a(g())()`
Complete beginners is: Head First Javascript (Almost written for childrens/teens) also you have You Don’t Know JS which is on Github and is regarded as one of the best books you can choose.
Fabric.js 
I think looking through the list of donors and financial supporters will give you a long list of answers. Check the mainline project on GitHub 
I honestly do not follow what you're trying to say... I'm saying using/writing the same five lines of code over and over is bad. I don't see pros to doing that. Instead, a developer should put those five lines in a function and call the function when those five lines are needed. I don't see many cons involved with doing so.
this is a fav. `function* cycle(choices, pos = 0){` `while (true) {` `yield choices[pos++%choices.length];` `}` `}` `let colors = cycle(['red','green','blue','purple']);` `Array.from({length:10}).map( _ =&gt;` [`colors.next`](https://colors.next)`().value);`
It feels quite good to get a healthy sequence of generator flow going. I get the same feeling from effectively using goroutines in Go.
That power set analogy is the first time I’ve ever had the concept of generators “click” for me. Thanks a lot.
wtf I hate Javascript now
Out of curiosity, who is this person? As someone with a BS degree in CS, many of these are the topics you learn in school. I would guess this person is self taught or a bootcamp graduate. That’s not to say I am better... I’m sure he has more experience than me in his niche.
Sorry didn't have time for an example till now: [https://codepen.io/anon/pen/WLZMOm](https://codepen.io/anon/pen/WLZMOm) Hope this helps.
Well. He's the author or Redux, now working at Facebook on the React team.
So what, you next() for your next list of shit and iterate if the chunk the next() returns?
Basically, it was “stream 100 items from node / Postgres, process them (.next()), then when done yield the next 100 and repeat 
Interesting, well it does make me feel better to hear this from him. CS is such a broad field, no one can be an expert in everything. Also, people come to it from different places. And, I think this highlights why there is too much of an expectation that everyone be some sort of child savant in hiring process.
&amp;#x200B; [BigBatDaddy](https://www.reddit.com/user/BigBatDaddy), [norml4change](https://www.reddit.com/user/norml4change) &amp;#x200B; Regarding the `isInViewport` part, [this link](https://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport) recommends &amp;#x200B; function isElementInViewport (el) { //special bonus for those using jQuery if (typeof jQuery === "function" &amp;&amp; el instanceof jQuery) { el = el[0]; } var rect = el.getBoundingClientRect(); return ( rect.top &gt;= 0 &amp;&amp; rect.left &gt;= 0 &amp;&amp; rect.bottom &lt;= (window.innerHeight || document.documentElement.clientHeight) &amp;&amp; /*or $(window).height() */ rect.right &lt;= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */ ); } &amp;#x200B;
I build a tool that uses the incremental output from a [spwaned process](https://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_spawn_command_args_options). I recently worked on rewriting the tool to use async generators over a convoluted [EventEmitter](https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter) system. I like it much more now.
7 - 7 / 7 = 6
4 + !!4 + !!4 = 6
Math.sqrt(9) + Math.sqrt(9) + !9 = 6
8 - !!8 - !!8
Javascript is God's chosen mistake
For my two cents, I'd turn it into a factory function that takes an arg to build out the fetcher and cache key retriever, and stores the store inside the scope of the function. This makes it generic enough and means you don't need to re-implement the fetch api. Something like the following has the same functionality but allows one to implement a lot of the "further improvements" listed in the article -- function createCachedFetcher (fetcher = url =&gt; fetch(url), getKey = url =&gt; url) { const store = new Map() return = async (...args) =&gt; const key = getKey(...args) let ret = store.get(key) if (ret) return ret.clone() ret = await fetcher(...args) store.set(key, ret.clone()) return ret } Usage const cachedFetch = createCachedFetcher() // works the same as `cachedFetcher` in article const cachedFetchForSpecificApi = createCachedFetcher( (url, opts) =&gt; fetch(url, {headers: {'X-API-KEY', 'xxx', ...opts}) ) const cachedFetchBySpecificParam = createCachedFetcher( void 0, (url, opts) =&gt; `${url}_${opts.body.specificParam}` // ehh, disregard that `body` is usually a string :) ) const cachedFetchWithErrorHandlling = createCachedFetcher( async url =&gt; { let res = null let body = null try { res = await fetch(url) } catch (err) { throw new MyNetworkError(url) } const body = await res.json() if (!res.ok) { throw new MyServerError(url, body) } return body } )
I hope some of the people I'm interviewing with read this 
I think this is fair, but damn he needs to ditch floats for flexbox ASAP!
Like a year ago I was looking for a job and this company asked me to complete a simple challenge, they asked me to use flex box, I read a lot of documentation and even after I was able to complete the challenge I didn't understand very well how flexbox is used or works :/
Pet peeve is code that creates unnecessary promises. So this: new Promise(resolve =&gt; fetch(url).then(response =&gt; { resolve(response); store.set(url, response.clone()); }) should just be: fetch(url).then(response =&gt; { store.set(url, response.clone()); return response; }) And by writing less code it's more robust. The promise from the first version will get stuck in pending if the fetch rejects.
Well, one thing is to learn these things on school and another thing is use them in your daily work, back in school I was very good with Linux, networking and algorithms, today I only remember a couple of Unix commands and that's because my working matching is a Mac, I don't remember anything about networking and only remember basic stuff on algorithms 
Yeah flex has been around like close to a decade now
Interesting. Facebook cold called me for an interview and they quizzed me on everything there related to web technologies pretty much. :D
I don't think I've touched floats ever since I learned Flexbox and Grid
Oh wow, I honestly had no idea you could do this with `.values()`. Thanks for sharing! Also I just looked up the [documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values), and under “Examples” it says “TODO please write about why we need it, usecases.” Looks like it’s still not widely used or discussed.
Well... Many of these things only came into existence (or prevalence) in the past decade. If he went to school in the early 2000’s (like me) he would have learned very little of this there.
I find this [flex box cheat sheet](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) to sum up pretty succinctly and efficiently everything you need to know about it.
Nice, thanks for sharing it! I'll practice this on the weekend 😊
You pick row or direction and align or justify content and set your flex (grow, shrink, basis). Not too much to it
I have zero idea how I'd do my job without flexbox. It is just ingrained into pretty much any CSS I write.
I'm still using Flexbox for everything. I've tried to learn Grid but it seems much more difficult to learn and master properly in comparison. I've played the plant game but my brain decided it didn't actually learn anything. Do you have any good resources where I can properly learn it?
I find [https://learncssgrid.com/](https://learncssgrid.com/) to be useful
This looks fantastic, thanks =]
GTFO
He's 26. If he went to college at all and at a normal time, it would have been around 2010
I was using it back in 2011, it may have been before it was standard but .. that's 8ish years now...
Eek. I couldn't get past the first paragraph.
This is such an important read for devs, regardless of experience. I'm sure that for most of us, there's been a point in our careers where we've felt impostor's syndrome. It's nice to know that we're not alone, and even the most well-respected developers have felt the same way at some point.
It a shame you think self taught or boot camp grads would be less knowledgeable than BS in CS grads. This was written by Dan Abramov. Try googling him.
Web development isn’t computer science. The author of the article is a prime example why using CS to evaluate devs is bunk. 
GUI for creating ESLint configs - https://eslint-config.netlify.com
I’m very interested! Cool idea. 
I’m very interested, I’m a beginner, but I developed a crud application before Mongo DJs and express and a crypto trading bot, but still very newbie. I’m self taught 
practice
If you want some practice, [Flexbox Froggy](https://flexboxfroggy.com/) is a good tutorial to go through.
Code more. Read more code. Find recently indexed projects on GitHub, find small ones, fork and contribute back. Learn advanced concepts for programming ( including js and nodejs ). CHECK if you provide value with your new skills at your company, adding efficiency where applicable. Repeat those steps, for 1.5 years, everyday. Move one step up to next company. You should never discount organization and documentation skills. Indian teams ( not all ) can sometimes overlook it since their pushing for code to be pushed. 
Yeah, I find that most of the concepts I actually *remember* are concepts that helped me solve a very challenging problem or several...
100% agreed. It’s like asking someone to write out obscure geometry proofs for an architectural design job. To do the job, you need to know how to use a few industry standard tools, and think critically. Everything else comes with time.
Try reading my other comment.
Low level languages, sockets, algorithms, bash, and the networking stack have been around for longer than that.
Nice catch, thanks!
Thanks for the factory version, it looks super clean! As for the cache invalidation, I believe there should be an API for the user to clear it as he needs it, without any complicated invalidation logic from the lib itself. You know it when you need it :)
know what a monad is but "maybe" that’s an illusion. 😀
I made online fridge magnets and loads of people spelt rude stuff on it :( www.fridgeee.com
Are you using var outside the shown function? If so,try replacing it with let 
womp womp
&gt; They don't help with async code, they're only used to implement async code when you have no native async support. Even that is not true. Generators have nothing to do with async code. It can appear async as you are able to pull out elements in an async menu but pulling said element out is synchronous unless you have an async generator. The support of sync/async generators and async/await is completely independent from each other and both are just syntax sugar for two different things which js has „native support“ for both of which already. Async code is supported by promises whereas generators are simply a sophisticated way to literally generate little functions to pull out elements from a sequence with the advantage of always only need to store only one of those elements in memory. This can in fact be used to get elements from a list in an asynchronous manner as you could call `next` in a promise's callback but not in situations where there is no „native async support“. If that lacks you can’t do async and generators will do nothing about it.
Thanks! I'm going to try to set everything up tonight and i'll send you a msg tomorrow
Thanks! I'm going to try to set everything up tonight and i'll send you a msg tomorrow
I am interested
I read URLs with the use of *browser.storage.sync.get*({URL1, URL2, ... URLn}) function that is used FireFox/Chrome. How do I check which way this function assigns values? Via var or via let? Or I just should manually re-assign it to *let*?
Thanks! I'm going to try to set everything up tonight and i'll send you a msg tomorrow
This is so extremely pointless. You wrap a promise in a generator and then (`THEN`!!!!!!!) you simply call `then` on the returned promise and you have a function which’s name is asyncawait accidentally. You haven’t understood neither async/await nor promises nor generators. Stop telling bullshit to people who want to learn.
I’d love to join in! Not sure how much I’ll actually be able to contribute since I’m somewhat of a beginner and fairly busy, but I figure contributing a little is better than nothing, right?
Hey Thanks, yea no worries. I want to help people and the more questions the better. I think it will help me become a developer myself by helping others. I'm going to try and set everything up tonight and i'll msg you tomorrow.
I tried to reassign the URL value as let both outside the function and within the function before the nested premises, but it still did not help. :\`(
I agree with the premise of this; gaps in your skills are to be expected. It’s important to know what you don’t know, and keep focused on what makes you productive. But... When a skill becomes required for your job now, or the job you want in the future, you have to be ready to lean this stuff. The job I have now requires all of these skills, and several more (machine learning, nosql, etc.). I think we need to have a tech culture that allows for both a useful gap in skills (aka, focus) and rewards learning of new skills (aka, opportunity). 
Meetups, on the job, hackathons &amp; get a mentor.
Awesome
1. You *dont* use generators to replace/mimick/whatever async await. All the people who responded in this way here simply have no clue at all (I’m not exaggerating. Read articles about those concepts instead of asking other clueless people). Async/await are both *different* syntax sugar concepts which can be used alongside or not. They do not require each other and they don’t influence how the other work. Wrapping a promise in a generator is not mimicking async/awaits. It’s wrapping a promise in a generator. 2. you want to use a generator if you are dealing with a sequence without an end 3. you want to use a generator when you cannot keep all the items of a sequence in memory. They are like an InputStream in Java basically. The dev always decides when and how much of the stream you are ready to consume. It looks async but it’s not 4. you want to use a generator when you have a logic for something that defines a „next item“ but no real sequence but you still want to work with it like with any other sequence. This basically adds to the memory thing but emphasized the fact that generators do not necessarily need to operate on real sequences 5. async/await is syntax to make async code look like sync code. That’s it. While being powerful there is not more too it. Hence if you see a callback function and even a `then` in example code that tries to convince you those concepts are related to each other you can call the flaw out directly. 6. js does not allow you to call `yield` inside an inner function hence you can’t even make the generator asynchronous even if you wanted for that you’d need 7. asynchronous generators which are only in the concept phase currently. Babel has experimental support for them. Without them every generator is currently 100% non async anyways
This is not how an async/await dsl can be created using a generator. This is a pointless and bad code example and you should stop bragging about it. You have no clue and the example shows nothing but you being able to wrap a promise inside a generator.
Great of him to come out and write this article. Does make me feel better a bit but also tells that how freaking huge the front end field is let alone computer science or full stacks. 
Simply don’t look at code examples from clueless people. The example is so extremely bad and it clearly adds nothing at all to the ops question but still the author thinks that he has proven something in his own cluelessness.
Just tossing out an untested idea here, but how about using an IIFE inside the function? function ThisIsCalledMultipleTimesInAlmostParallel(URL) { (fixedUrl =&gt; fetch(fixedUrl) .then(response =&gt; response.text()) .then(data =&gt; {do something with data and also use fixedUrl variable}) )(URL) } ThisIsCalledMultipleTimesInAlmostParallel("some URL1"); // ... ThisIsCalledMultipleTimesInAlmostParallel("some URLn"); That said, I don't see why your original wouldn't function in the same way. 
Can you show your actual code? This will not reproduce the issue you’re seeing.
The upper part of the gist is just setup, the lower part is using it, and it works a lot like async await... Instead of declaring an async function you declare a generator, that yields promises. When calling this async function, you have to wrap it in this async Await wrapper, but then the code inside this function behaves just like an async function. Additionally the return type of an async function is always a promise, so the asyncAwait until returning a promise is correct aswell. 
This code is not behaving like an async function. You generate a promise and then call then on it. You are simply using both concepts alongside.
Do you expect people to know these 4 technologies already? I still haven't learned react well, but this project is something interesting
It looks to me to be a simple property getter (hint in the name, as such, poorly named at that). A \[factory\]([https://en.wikipedia.org/wiki/Factory\_method\_pattern](https://en.wikipedia.org/wiki/Factory_method_pattern)) method is conceived for inheritance, delegating the choice of which object to subclasses. 
Wow, I really love this! It would be awesome to add presets, so you can finally see the effects of those presets :) 
Well. That’s concerning.
Honestly? A job. I had been programming for about about a decade before my first full time position and I learned more in that first year than I had in the previous ten. Software engineering involves so much more than coding and is incredibly difficult or even impossible to do alone if you haven’t experienced it for yourself.
Yea, I'm still thinking about adding presets and plugins :)
didn't know people use generators.
I’d like to throw my hat in the ring. Wrapping up my degree and I’d love any kind of real-world experience I can get my hands on. Thanks!
Definitely not language specific. 
[Amazing](https://i.imgur.com/gbIk2Rz.png) I like this, neat little idea.
thanks for your suggestion
No you don't need to know. The idea is you will learn as you code and I will do my best to help however I can
&gt; generators can be used to mimic async/await Check this out: Using async/await: https://pastebin.com/AZTtQj6h Using generators: https://pastebin.com/qfRy8TYM What do you mean generators can't be used to mimic async/await?
Awesome! I am setting everything up now. I am going to send everyone a dm when I am done
Stop ranting if you don't know. Babel uses generator functions to transpile async/await. [Check it out](https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=IYZwngdgxgBAZgV2gFwJYHsIwOYFNkDCAFsAE7BTK6kAUqAJgJQwDeAUDDFJiMlyeUrUYAXhjAA7sFR84-KERoByBKQA2SxmwC-QA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=stage-0&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=)
This is exactly what the async await operators do behind the scenes? They are just syntactic sugar around promises. We just have to add this asyncAwait helper function in this example and replace the operators with the generator operators... From within the generator, it looks like synchronous code even if an async function like setTimeout is being used. 
Why.on=&gt;earthwould.=&gt;=anyonewritecode=&lt;&gt;likethat?
True, a more code might be the culprit (let is from me trying to force separate scopes for each call of the function): function downloadURL(tempURL) { let URL = tempURL, div = document.createElement('div'), divShow = document.createElement('div'), img = document.createElement('img'), a = document.createElement('a'); try { window.fetch(URL, { mode: 'cors', method: 'GET' }) .then(response =&gt; response.text()) .catch(error =&gt; window.alert('Error2: ' + error)) .then(data =&gt; { // Img 1px img.className = 'link'; img.setAttribute('src', '../images/1px.png'); img.setAttribute('title', URL); a.appendChild(img); // a href a.href = URL; a.setAttribute('target', '_blank'); a.className = 'title-a'; div.appendChild(a); div.style.width = '210px'; divShow.style.width = '210px'; divShow.innerHTML = data; divShow.className = 'show'; if (navigator.userAgent.indexOf("Firefox") !== -1) { divShow.style.height = '118px'; } else { // All other browsers divShow.style.height = '116px'; } div.appendChild(divShow); document.getElementById('wrap').appendChild(div); }) .catch(error =&gt; window.alert('Error3: ' + error)); } catch (e) { window.alert('Error1: ' + e); } } 
Obviously it's mutability, overwrite all the things everywhere /s
I have heard first time about generator function. What is generator function?
The software industry Would be a happier place If we were a bit more honest About it's pace. There's too much to know Too much to learn I'm a 20 year veteran And I'm still concerned. Progressive web apps Flexbox grid Webpack async Sockets squid. I read the blogs Have books by the tonne Competent at many? Expert at none. 
Thanks, I tried this, but to no effect. BTW, in my actual code I have a segment that attached an image to "a", and one I comment-tag it, the issue goes away! I can not possibly fathom why exactly this damn thing can influence whether **URL** will be mismatched with **data** or not (I posted the full code below in a separate comment): img.className = 'link'; img.setAttribute('src', '../images/1px.png'); img.setAttribute('title', URL); a.appendChild(img); &amp;#x200B;
I agree that it’s ideal when the function name describes the full intent, but when it doesn’t comments showing intent helps me fill the gap. https://standards.mousepawmedia.com/csi.html
What is it you're supposed to be summing?
Doing them in school doesn't mean you know them. By which I mean, are able to do them without access to reference material. Could you write a C network server without any reference material? That would cover sockets and low level languages at least. What about a quicksort? Or a b-tree? Or... Because I know that I couldn't. And I've graduated uni and then been a professional developer for almost 15 years.
Wow, you OK? Two things: firstly, this is meant only as a demo of one of the things generator can do, since that was the question. Secondly, this is exactly how async await works. An async function is literally just a promise. Yielding inside the generator works corresponds 1 to 1 with awaiting inside an async function. Maybe take the time to make sure *you understand* how something works before spouting off on the Internet. 
Could you show an example of what is happening? I mean, say you call downloadURL("/url1"); downloadURL("/url2"); downloadURL("/url3"); What would be the _mismatch_ you're seeing in those images? What would be the complete HTML generated and what were you expecting it to be?
`Because.its(a.fun.challenge); Probably['shouldnt'].do.it().in(your, day job);`
The author said that his code was supposed to be ”humorously terse". The author knows it was bad, but was trying to make a joke.
I assume Dan is not really a regular dev and might be not writing much of the production code at all, so he doesn't really need that skills in his daily work. Some of the things he listed like flex box/css stuff are a staple of modern web development.
I'm in. I'm rather inexperienced and will need quite a bit of help along the way, but this would be great for me. I'll try my best to be more help than burden)
The output of running the function once is like that: &lt;a href="URL1"&gt;URL1&lt;/a&gt; &lt;HTML data1 downloaded from URL1&gt; &amp;#x200B; The second and following runs should add the same thing over and over but with URL2-data2, URLn-dataN pairs. So far it is completely incomprehensible to me how those pairings can go wrong in this pretty simple function just because I e.g. add an image to "A" tag (the code for this is in the previous comment). &amp;#x200B;
Please, I understand that it's tedious, but you really need to **show** the mismatched result, not just _describe_ it. Otherwise it will be very hard for anyone to help you. Ideally you would set up a CodePen or JSFiddle where the problem happens, but **at least** people will need to see the actual result of what is happening.
In my opinion it's bad, but then it also depends on how long it's been you are working with the language or framework. It usually takes some time to know how things connect and work. Its always good to know how things work under the hood. For me it paces up my dev time, it's really hard to work with a black box. You can still ignore all the nitty gritty but do not ignore design patterns. They will save you a lot of trouble and time. Anyway the good part is you know what you don't know, so just learn :)
I have a huge professional crush on Dan. The way he communicates concepts and rationale is inspiring. Knowing he isn’t the deity some of us might have imagined him to be, gives even more respect for him. Great post!
Awesome! sounds good. I will do my best to help you along the way.
Ah OK you're being irrationally angry over here too? Since you're so passionate, I'm going to explain how it works for you: You can obviously not create a generator with the with the `async` keyword, and obviously you cannot use `await` in a context of a generator. What you can do is do is ***get exactly the same functionality as async/await*** using a generator. So you know an `async` function is one where you can `await` asynchronous values, and is actually just a that returns a `Promise`. const doAPIStuff = async (userId) =&gt; { const favouriteMovie = await http.get(`http://example.com/user/${userId}/favouriteMovie`); const movieData = await http.get(`http://example.com/movies/${favouriteMovie.id}`); return movieData; }; Again, `doAPIStuff` is now a *function returning Promise*, which has encoded two sequential and related API calls. We could either call this with `.then` after like *a normal Promise*, or use it in *another async function*. Let's see if the `asyncAwait(generator)` approach works the same. We can create "an async function" like so: const doAPIStuff = userId =&gt; asyncAwait(function*() { const favouriteMovie = yield http.get(`http://example.com/user/${userId}/favouriteMovie`); const movieData = yield http.get(`http://example.com/movies/${favouriteMovie.id}`); return movieData; }); OK, so looks like in the second approach, `doAPIStuff` is ***still*** just a function returning Promise, which has encoded two sequential and related API calls, but this time with the `yield` keyword instead of `await`. And again, we could either call this with `.then` after like a normal `Promise`, use it in a real `async` function, or use it with `yield` inside another `asyncAwait(generator)` function. Hopefully it's clear to see how the generator approach and async/await are equivalent now. &gt; This is a pointless and bad code example You know that if you use babel, it's doing exactly this with your `async` functions right? You know that the bluebird Promise library had this solution for a loooooong time before async/await came along? 
I tried to rap this, congrats
You should learn ES6/ES7/... especially things like map/filter/reduce/forEach..., spread/rest operator, async/await and so on. These features can improve your code a lot. OOP in JS is kinda weird (but you can use TypeScript) so I would go more functional way. Keep your functions simple, one function does one thing, don't repete yourself (DRY), try to use good naming and write your code readable at first place (don't care about premature optimizations) 
design patterns are a must know. If I get assigned to a project, the first thing I look for is the design patterns used. If I don't see any, I'm like wtf? Did these guys get even paid? I don't wanna sound harsh, but a programmer who codes without design patterns is just putting some stuff together. There are so many books and resources you can start learning about them right away :) 
After inspecting the pop-up in my extension more closely it looks like it is a weird render issue (has to do with with link A tag overlaying over a different Div tag or something) which is not related to the variable URL-data pairing. Sorry for the bothering and thanks for the help. BTW, which would be the best way to sort the last nested Then/Premise that adds HTML to document? Since download of URLs takes variable time it is natural that in the end the pieces of HTML added in a random order rather than in the order URL1, URL2, etc. I know that *all(\[URL1,URL2,...URLn\])*. before *Then* should probably work, but is there are way to do the proper sorting/order without it? (I edit code that is not mine so I want to change as little as possible).
That you can find one-line modules on npm so that you don't have to write them. Oh no wait...
I will start with design patterns. The thing is I feel in continuous learning and I need a job. So I don't mind learning more once I have a job but for now I focus on what can help me get it.
https://eloquentjavascript.net/
Oh, I know how to filter, map, reduce, spread operator. I am not excellent with ES6 but u think I am ok and still need to improve. 
Any suggestions for where to learn design patterns? Thanks in advance
There is a book by Addy osmani on JavaScript design patterns. This should cover most of them. For just JavaScript there is another book called 'you don't know js'. It's an awesome read
Not to plug paid services, but I watched some quick videos on Pluralsight and was up to speed in like half an hour videowatching on the bus, then 2-4 quarter hours trying it out until I had what I wanted. I'm sure e.g. Egghead and Lynda would have good video tuts as well. In my experience you mostly don't beat video tutorials on efficiency. It's so straight-to-the-point, no scrolling and scanning around trying to piece together bits. That said, just going off the example React's docs, which are great, fantastic even, I'm sure there can exist excellent written material on Grid as well.
I’m a “regular dev” writing front end code and I barely need to know css. I mean I know grid and flex box because I needed to at my previous job but now I write JS 99% of my time because I work on an enterprise web app using my company’s React component library. This means that I spend my time working on how to architect the app, performance improvements, graphql and just general JavaScript. I think my situation is pretty common when you don’t work in an agency environment. 
I’m a “regular dev” writing front end code and I barely need to know css. I mean I know grid and flex box because I needed to at my previous job but now I write JS 99% of my time because I work on an enterprise web app using my company’s React component library. This means that I spend my time working on how to architect the app, performance improvements, graphql and just general JavaScript. I think my situation is pretty common when you don’t work in an agency environment. 
WTF I didn't know whose blog this was and wouldn't expect this was Dan Abramov.
More info here: repo: https://github.com/slothking-online/graphql-editor docs: https://docs.graphqleditor.com/
my point is still intact, Dan is likely not writing web apps, he's working on React core, and many of libraries developers don't use them in production
For those of you who don't know, this is Dan Abramov. He is a prominent Facebook engineer, Co-creator of Redux and working on the ReactJS team. A very smart guy who is often looked-up to by many developers. https://github.com/gaearon https://medium.com/@dan_abramov https://stackoverflow.com/users/458193/dan-abramov https://en.wikipedia.org/wiki/Redux_(JavaScript_library) https://twitter.com/dan_abramov https://www.youtube.com/watch?v=nLF0n9SACd4
Suprising actually 
Thanks
do read this one-'You don't know js'
Sounds cool, send me a message.
Ok, then you should try to learn some basic best practices as I have already mentioned. Single responsibility principle, KISS, DRY, good naming, readable code. These practices work everywhere (OOP and Functional Programing). Then you can move to more advanced design patterns which are different in OOP and FP.
It depends what you work on / want to work on. If you build things for a small number of users and just want to get the job done and are good at writing maintainable code then you’re in a good place. If you aim at working on something more impactful one day that scales across millions of users or work on a limited device then knowing how things work under the hood is hugely beneficial.
You said absolutely nothing in a lot of words. Yield and await both switch context while preserving the stack so the execution can resume later. You need a much more complex transform if you have neither of those natively. They are NOT syntax sugar when supported natively. JS doesn’t do a CPS transform for either await or yield. Only transpilers do that. 
The fact it's supported by almost all existing browsers.
I also really like this one, if games are your jam. It was kind of fun and quite useful. https://mastery.games/p/flexbox-zombies
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
currently 6am... just gotta say... this is harder than it looks. Man, I am stuck. 
Message me if you need assistance 
I see what you did there. 
For the asp side you'll use the guy System object to append to a file... As to the post data, it's been a really long time since I've dealt with classic asp. In general you may want to post the segment as base64. No idea on the asp side. You can probably include a js version of atob (btoa is in the browser already).
File system object
Yes it is factory function since it creates new literal object which is returned.
Brilliant article! 
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott.
"Angular is a popular framework which uses two-way binding." I was under the impression Angular used unidirectional data flow, with events to propagate up the component chain, almost identically to React. Does he mean angular.js from the previous framework generation?
What? Purpose of CI is completely different. 
Interesting. Want to connect with the creator of this library.
Try to stay away from submodules, they have many disadvantages. The correct way is to use packages for the language (npm).
I've interviewed there as well, and I had the exact opposite experience. About 5 interviews over the whole day, and not a single one asked about just specific or react specific tech, despite interviewing with 2 people on the react core team (Sophie and Flarnie). It was actually one of my favorite interview processes I've ever been involved in. During one of the interviews there was no code written, just some drawings on a whiteboard while we talked through the possibilities and they threw more constraints on the problem, and in another they didn't bat an eye that I didn't remember the syntax for some DOM stuff, and the interviewer encouraged me to just make up any API I wanted for the question. For what it's worth, I got an offer, so my mistakes or gaps in knowledge of react or JS APIs didn't seem to impact anything (and I ended up declining the offer for some personal reasons)
cool story bro
Sorry hadn’t looked into them much, thanks! 😊
That’s honestly surprisingly much
This will sound like an inane answer but find something you want to use JavaScript for and use it. &amp;#x200B; Toy examples teach very little as they don't expose you to all of the moving parts. Do something, you will soon come across something you do not already know. And then learn from there.
I think your right, only angularjs (Angular 1.X) has two way data binding.
Would like to join in on the project as well. Especially the React Native stage. 
It is not reasonable to try to tell people what they should be answering at interviews and then **getting it wrong**. 
I made this instruments app with React and Tone.js yesterday: http://reactinstruments.herokuapp.com/
Think the best walkthrough of generators is by MPJ of funfunfunction. Definitely worth a watch https://youtu.be/QOnUcU8U_XE He also dives into iterators in later episodes, also worth a watch. Short and sweet. 
Thank you. 
night driving. canvas animation. [https://hapax.bitbucket.io/nightdriving/](https://hapax.bitbucket.io/nightdriving/)
I know all these technologies you mentioned but you know just at tutorial level not deep stuff. Can I join?
I'd be interested if you decided to use NestJS/Odi as a Node framework and Neo4J as a DB ;) 
While I am terrible at following this advice myself, as long as you keep honing your skills, try n not get too caught up in what you do not at this stage and focus on keeping on improving and you should eventually get there. It is easy to feel at times like you are struggling on your own and everyone else has somehow found it easier, whereas all of us have been there. 
Most CS grads I know learned a ton of theory, a little C, maybe some java and not much else. Based on my experience interviewing them bootcampers and self starters generally have way more practical knowledge/experience.
Actually super cool, thanks! 👏
Are you me? 
I actually was like wtf is this dumb article until i read his name, then it made more sense.
You learn them but you will probably forget most of it if you arent using them
That's awesome, I'll give it a shot. Thank you.
Can use the same language without context switching when going from frontend to backend. And prototypical inheritance, although I tend to prefer composition over inheritance so I don't use it so often. Java is too wordy for me, C++ spec is far too big to keep in your head and it's usually hard to figure out someone else's code, PHP is OK and improving but the nodejs frameworks seem more lightweight and modern. Five years ago I probably couldn't say that, but JS evolves very quickly which some may see as a disadvantage, but I like it. 
During render, any derived values are recomputed each render. Most of the time it isn't an issue, cause it's usually for simplifying property access, but if there is calculation, that calculation is can every render.
Everyone has to start somewhere. Give yourself a break. There’s two ways you can do this: Bottom up: Learn all the theory, then start building things Top down: Start building things, fill in the theory as you go Neither is right or wrong - just different. My experience tells me that usually the latter leads to useful engineers more often than the former, but that’s purely anecdotal. The only thing that is “bad” is not being able to or being prepared to dig down and learn something new when you need to. PS - “Design Patterns” can do one. There’s some useful stuff in there, but it’s mostly buried in what ultimately are workarounds for the terrible inheritance models in C++ etc :)
Dan for president
What exactly are you trying to accomplish? Why are you trying to do this with JS instead of CSS? Answering those might help us to help you. 
They are still very useful in some situations like wrapping text around an image. 
Magic Grid - A simple, lightweight Javascript library for dynamic grid layouts. [https://github.com/e-oj/Magic-Grid](https://github.com/e-oj/Magic-Grid)
If that page ever goes away I don't know what I'll do 
Good point. If you want you can open an issue on github regarding your suggestion and I will add this feature in future versions.
They didn't say that Dan is less knowledgeable at all. The suggestion was that he doesn't know things that most people with a CS degree are taught, indicating that he might not have a CS degree. 
 One is not even allowed to call yield in an inner function so this whole thing makes no sense at all but still it’s being told and even backed by faulty code examples. I don't think you understand? This is possible, also the reason why it's possible for babel to turn any async/await code into generators, so you can support older browsers. &amp;#x200B; Here's an example of using yield inside an inner function: [https://repl.it/@teevik/AsyncAwait](https://repl.it/@teevik/AsyncAwait) It's exacly the same as when using async/await
How can you be smart enough to work on react and redux and know so little about everything else?
Check out Formstack.
Ever wanted to localize a small page to different languages? Say your portfolio or some static github site? Fear not, for I have created mehrsprachig, which lets you do exactly that! I'd be super happy about some feedback, as this is one of my first contributions to the npm universe! Check it out at: [https://github.com/rbnlffl/mehrsprachig](https://github.com/rbnlffl/mehrsprachig) / [https://dev.robinloeffel.ch/mehrsprachig/](https://dev.robinloeffel.ch/mehrsprachig/)
It's an easy to hold belief that people from bootcamps are less knowledgeable when you've been in the industry for decades and see terrible bootcamper after another and you just give up. Don't get me wrong, some are great engineers, but the ones that are are generally learning more on their own and filling the gaps in knowledge. However, a bunch just coast by and never take the time to learn good, solid foundations in things like data structures, algorithms, runtime complexity, etc. Also larger ideas like computational thinking cannot even be broached in a short term education like a boot camp. This leads to pretty bad code and implementations. &amp;#x200B; And yes, I know who Dan Abramov is. Just because one person can do it doesn't mean everyone can. Pointing out an exception to a trend is a pretty useless data point.
Is it ok for me to just admit that I prefer JavaScript to CSS ? Is it safe for me to admit it here ? Should I go hide in a safe space ? I'm scared...
I have felt it that's why i struggled with learning
This one: https://css-tricks.com/snippets/css/complete-guide-grid/ Is also very nice.
I would kind of understand that if you were using React..but not with jQuery lol
Sure? Sure? No? I ask, because you're reinventing the wheel here, rather than using the far easier method. Even better the easier method works in every browser. Yours may or may not. You'd also have to write tests for it in an real setting. If you were on a real team ANYONE reviewing your code would tell you to go do this with CSS. And this isn't gate keeping, but if you are a front end developer you need to be able to do CSS, not just JS.
My new year's resolution is learn to code stuff like that!
The syntax, especially with TypeScript, is by far the best imo. I also find NPM pretty convenient to use and the ecosystem is huge. No other language has had such a smooth workflow for me.
But to be really serious answering your question: I want everything inside the container to scale as well, not just the container.
You could do various things... If your main goal is not having to go around making a lot of changes, you _could_ do something like this... You could... 1. At the start of the function you create a timestamp - say `+new Date()` or something like that. This records the time when that particular call to the function was made. 2. When you build the DOM for that response, in the root element for that fragment you add a custom attribute - say `data-ts` - where you store that timestamp in point #1. 3. When you insert the DOM fragment into the DOM, you don't just `document.getElementById('wrap').appendChild(div)`. _Instead_ you search through the already present nodes, looking into their timestamps, for the correct place where the current (new) one should go and use [insertBefore](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore) or similar, to place it there. You _could_ also keep track of the order in some other way, but this one, while not super-clean, is probably the least intrusive. Note: remember, when comparing the timestamps, that when reading DOM attributes you will get strings and need to convert those to numbers.
and here come the JQuery bashing again...bring it on like it's 1999 !
This guy really doesn't like classical inheritance.
So...how would YOU create a 1280 by 720 container that scale with the screen and scale everything inside the container as well without JavaScript ? Using JavaScript, I can calculate and scale the container and everything inside the container scale along. How would you do it ?
Reading this article and *then* checking to find out that it was Dan Abramov was both shocking and heartening. I thought I was going to find out it was a junior frontend dev in the end, which wouldn't really be encouraging in the slightest. But given his obvious success &amp; fame, this actually means a lot to me. I'm pretty firmly in the Abramov fanboy camp.
Worked more on **Video Hub App** \- along with one collaborator creating and closing 10 PRs just this week: [https://github.com/whyboris/Video-Hub-App/pulse](https://github.com/whyboris/Video-Hub-App/pulse) Last week I added an i18n (internationalization -- a translation) for Russian (and now any other language in the future - just add 1 file of strings translated into another language and it's done!) Yesterday the app sold its 365th copy for the year - that's more than 1 per day on average since its launch in February!
Https://cssgridgarden.com is a fun game way to learn it. It's really easy after having gone through that. 
i am game developer, but interested in these technologies too
``` .container { height: 100%; width: 100%; max-height: 720px; max-width: 1280px; } .child { height: X%; width: X% } ``` Why does it have to be EXACTLY 1280 by 720? What about for users with screens smaller than that? What about for people with bigger? Did you take that into account? I'd also use grid or flexbox inside the container for handling scaling and placement of items. 
Mine was just a telephone call, and concentrated on HTML, JavaScript,etc. 
What is x% ? no max height is not 720, the design layout will be based on that but it can scale up to anything as long as it stop short of by passing the height of the clientHeight. And to answer your last question, this is for pixel perfect design, not your arbitrary "it's about good enough" relative layout. 
No developers open up like this, I respect you even more Dan. This is exactly what the community needed thank you, jr. devs suffer major anxiety from not knowing everything, and I still think some sr. devs don't even know half of the things they say they know.
Seriously? An alternate universe? Which school taught these things in 2002: * Containers * Serverless * Microservices * Node backends * Modern CSS * SCSS / Sass * CORS * GraphQL * Electron * TypeScript And *if* you were lucky enough to be in a program that taught these things, they aren’t the same things anymore and you would feel lost if you weren’t continuing to educate yourself: * CSS Methodologies * Python * Native platforms * Functional languages * Functional terminology * Streams * Deployment and devops * Graphics
Yea I’m self-taught and mostly worked with high-level tech. 
This may be useful 30 small projects. First try to do each one by yourself then check the instructor's solution: https://javascript30.com
Thanks, it is a nice idea, I will try it. :) BTW, I tried to make the function *async* to use *await* as it helps to make *fetch* pseudo synchronous, but it did not work in terms of sorting/order anyway as the calls to the function also have to be synchronous and made with *await*, what would require redoing the function with *premise* construct/approach, and that would be overboard for now. Though I guess that if I would do it from the scratch the best thing would be to use *all*.
If you’re still looking for another, I’d like to join in.
&gt; People often assume that I know far more than I actually do. That’s not a bad problem to have and I’m not complaining. **(Folks from minority groups often suffer the opposite bias despite their hard-earned credentials, and that sucks.)** Do they really?? In what ways specifically? Are you suggesting that people go “Oh this guy is probably a shit programmer because he’s black — I’m gonna skip this tutorial because of my racism”?
I am already learning the MERN stack and I already know React. So I am expanding my knowledge to full-stack. I am following tutorials and start to apply things like creating routes with Express and other stuff. I will be glad to join. Let me know what I need to do to join. 
I loved [cssgrid.io](https://cssgrid.io/) personally and recommend it to anyone who's willing to learn it.
I will do it. Appreciate!
Haha, was the first thing that choked me up on his list.
After 4 months I had to [update this bug report](https://bugzilla.mozilla.org/show_bug.cgi?id=1487081#c16) with a possible exploit in the wild.
I’m still teaching myself JS, but I have experience using GitHub. I’d be more than happy to tag along if you need it!
He doesn't need to know kubernetes or graphql to work on react, that's how.
Hi /u/Revitev, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/gquiman, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/kyrgyzrussiandude, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/kyrgyzrussiandude, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/das-com, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BigBatDaddy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/oink4me, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/paulbean, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/My-Excavation, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/F1anger, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/helntk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/akeon-lee, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/julesmanson, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/electronixHuB, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/RRDDSS, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Use something like this: var list = "&lt;ul&gt;"; rawdata.forEach((object) =&gt; { list += "&lt;li&gt;" + object.username + "&lt;/li&gt;"; }); output.innerHTML = list; &amp;#x200B;
Oh u/ohcibi, ohcibi... you sure made a fool of yourself
Fucking hell, he doen'st know any of that stuff in 2019??!? He'll never get a j.... oh.
T_D is _that_ way -----------------------------------------&gt;
Yeah after experiencing Maven and Pip, npm is incredibly simple
Thanks, I did not even know that this subreddit exits. Can you correct the headline, though? It incorrectly says this: &amp;#x200B; &gt;All about the JavaScript programming language! &amp;#x200B; If questions about issues with JS coding do not belong here, then the description should say "... except for ..."
Awwwtch, the downvote hits
I mean, that’s the *actual, on-label use case* for floats. Using them for UI layout has always been something of a hack.
With C# and Java - not having to put everything in a class. Modules. All functions are first-class, not just lambdas. Object &amp; array literals, rest &amp; spread. Even with Typescript I like having type-safe structual types (duck typing), better type inference (less boilerplate), non nullables, union, intersection &amp; conditional types. What I miss is sane run-time type checks, and in turn the ability to have libraries like Json.NET and Dapper. Also pass-by-value structs and operator overloads for vector math stuff.
To repeat from a different thread: "You know nothing nulless!!!" (And my head is exploding because sometimes nothing == null (not sure about nothing === null) but "You know null nulless!!!" seems to be an existential crisis of epic proportions.)
Fine. I am sorry, I didn't read rules before posting 😅
I can assure you that if this article was written by a woman the general mood of the comments on Reddit or HN would be much more dismissive.
Good bot 
All integers from 1 to the specified number. (n + n) / n = 2 Σ 2 = 1+2 = 3 Σ 3 = 1+2+3 = 6 
I appreciate this as someone who does node, python, and ruby. I'm used to it now, but having to mentally switch between syntax is exhausting!
Noice. if (name != "" &amp;&amp; name != null &amp;&amp; name != undefined) {...} Expert. if (name) {...}
Very true. I’m shocked to hear people went to school for these things back then? A decade ago, the things schools were teaching would be obsolete before they finished building a curriculum. Maybe things have gotten better since then, but school was not the place to learn much of this if you wanted to be any good at it. I suppose school could help someone get started, but 4(ish) years seems a long time to spend getting started, just to have to spend a lot more time after graduation getting caught up so your knowledge is relevant. 
This made me feel better about myself because I know some of the things on this list. Of course, I'm sure things that I don't know didn't make the list. At the end of the day, I just do my best. No one person will know everything. When one of my non techie friends says "you know everything about computers", I cringe and correct them. Because I may know way more than the average bear, but I don't know EVERYTHING.
Could be 1 line of code
And to make matters worse, he doesn't even know what classical inheritance is! [When he was asked](https://medium.com/@xwt23v/i-m-genuinely-trying-to-figure-out-where-you-draw-the-line-between-inheritance-and-what-you-call-ab11d70f7aaa), for example, whether a C++ class C++-inheriting from another C++ class was composition or inheritance, he said it was composition. It turns out Elliott thinks composition is inheritance with a couple of his personally invented rules on top.
Small utility for template file [https://github.com/LeDDGroup/js-to-file](https://github.com/LeDDGroup/js-to-file) &amp;#x200B;
You can do free CSS Grid video tutorials done by Wes Bos here [https://cssgrid.io/](https://cssgrid.io/). I would highly recommend. They are high quality and I learned grid very quickly with them.
I bet Dan would **fall in love** with TypeScript as soon as he passes the learning curve.
Over the last few years the syntax has gotten very nice. I don't understand the praise Python still gets for this when JavaScript is, in my opinion, a lot nicer now that we have destructing, spreading and arrow functions in particular. TypeScript is the best thing to ever happen JavaScript in my opinion, mostly because it has been executed so well. To compare it to Python (my other main language which is why I mention it again), they have also tried to implement something similar but TypeScript is *way* better. In a way it's not fair to compare them because TypeScript requires compilation whereas Python's `typing` module doesn't—but if you ignore that and just look at it as two attempts at adding type hinting to dynamic languages, TypeScript is head and shoulders above it.
I need to level up my CSS game a bit, but even though I've been a dev for 10+ years, and the last several years focused on JavaScript - the amount of time I actually need to write CSS is very rare, and the times I've needed to do the styling from complete scratch on a project - almost never. 
If I slap my name on this article, nobody would hire me, ever.....
Having a Comp-Sci background really isn't a barrier to entry for software development. Your mileage may vary depending on what aspects of programming you want to get into, but I know quite a few senior devs that don't have a comp-sci background and came into programming from other paths. I initially got into programming in grade school and got hooked on writing software to automate tasks for me that I was tired of doing manually. I didn't get into programming for the "science" of it, and actually, have a Bach of Commerce and not Comp Sci. Comp-Sci is still useful, and I think a good well-rounded team should include a few people that have that kind of background - but there is something to be said for the experience and perspectives that a diverse team can bring to the table. I also know that given my background/skills - there are certain types of programming jobs that I would not be the right person for, but at the same time - lots that I am a great fit for, and don't really feel like my career has been limited due to a lack of 'formal comp-sci education'
Neat! Reminds me of this After Dark screensaver I had on my Windows 3.1 beige box. Good times!
Your function isn’t doing anything asynchronously. Using `async` doesn’t automatically make the environment execute the function later, it just is syntactic sugar for promises and promises have to explicitly defer work to be resolved asynchronously.
Very cool! Side note: your vars of canvas, context and fireworks never get redefined, so they can be const as well :)
adding async makes it return a promise, right? So... not all promises run asynchronously?
I concur this is a fundamental misuse of async. Also there are a few async functions declared. I think it's cool what you are attempting to do, but you need to have a need for async for it to be a valid learning experience. For example you could build a index.HTML page that weird to say Firebase each prime created and that could be asynchronous depending on what you are doing. Maybe something like that, just thinking off the top of my head how to help you do what you want while using an async function. Also it's hard to be articulate on what you did wrong on my phone, but I'm thinking based on my face that you need to write something like this Async function { Const response = await fetch () // The above is unnecessary code, because you aren't making an API call, which is why your function will fail (I believe) fundamentally Const data = await response.json() //Etc } This is the general form for how to implement an async function. Coding train and mpj at fun fun function on YouTube have really good async / await demos that I rely on all the time.
So you wanna but you not gonna ?
Yep! Try putting that commented out line and see if it makes a difference. If not, try changing the timeout parameter of that value. Also, loops can also be done asynchronously if you think about them recursively. 
If you wrap it in a setTimeout with zero time, it will technically run asynchronously.
thanks for your reply. Yes uncommenting it works, but I wanna know why it doesn't without that line. I have thought about calling them recursively too, but there might be a call stack problem.
thanks for your reply. Yes, I'm aware that we usually have some await statements inside async functions. But I'm confused because I'm taught (or I believe) that adding the async keyword makes it return a promise, and promises should run asynchronously. But this clearly's not the case here.
What are you talking about? Are you actually mental? This is not some rando. It’s the guy behind redux and a react contributor. Saying someone with those credentials would be dismissed because of gender is insane.
Prove it?
One verrrrrrrryyyy long long
[:P](https://javascript-minifier.com/)
Yeah. There is a bit of scaffolding. I much prefer using a standard pathway that has a little more writing involved though. 
Its impossible to know without knowing the exact libraries you are using. However, if you are a new developer you may not be including the libraries because all of these functions are not standard javascript functions. The functions look like they are inspired by "logo" or "turtle" . If that is the case you would be missing a penDown() function call that should be added before the loop and a penUp() after the loop.
I see this every day on Twitter. I think you're confusing implicit and explicit bias. I'm not going to give you examples because I don't want to send a mob after them. (That's the whole point.) It's not about people saying "you're a woman, therefore I don't believe you". It's about people _assuming_ a woman is less competent by default — trying to be "helpful" by "well, actually"ing them on the topics they wrote books about. If you choose not to see it, it doesn't mean this doesn't happen. This is the experience of the vast majority of visible women in tech. If you don't believe them, _ask_ them. Or just follow them and watch.
Just a small side project I’ve been working on for some time, I’d appreciate any feedback :)
Promises don't run at all, functions do. Promises are just objects eventually allow you to get a value out. That doesn't mean the result value has to have been computed asynchronously, just that you can only access it access it asynchronously.
Added! :)
Resolver function inside of `new Promise` is executed synchronously, but even so, the native `await` wraps the value in a promise doing basically `Promise.resolve().then(() =&gt; value)`. So why is it blocking? You're exhausting the micro-task queue by using a loop, which in return blocks the event loop. You can see it in this example https://youtu.be/cCOL7MC4Pl0?t=1594. The entire talk is worth watching as is this article by the same author https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
Is a sound supposed to be played when you push one of the buttons? Can't hear anything on my side :(, but maybe I misunderstood the purpose of the app. Also, there doesn't seem to be a component that matches the #about route... Let me know about the sounds; I wanna play some music :D
One thing I noticed right away is that your removing the checkbox itself by calling the \`removeChild\` function from the parent node. You could use \`remove\` function to remove the \`event.target\`. &amp;#x200B; `checkbox.parentNode.remove(event.target);` 
“Life isn’t about what can and can not be done, it’s about doing it or not doing it!” – Shio Sakaki from Kenichi: the Mightiest Disciple
Cool stuff, might actually use this for one of my side projects :D
Driving while under the influence would be a more appropriate name for that lovely little piece of code, but nice stuff! 
The reason for the previously deleted list items reappearing when you add a new one is because you are using a global `html` variable and you're just adding the items in there. Instead of doing that you could do something like this: &amp;#x200B; ``` //adds items to list function addToList(text) { var item = document.createElement('li'); item.innerHTML = "&lt;h4&gt;&lt;input type='checkbox' id='chbx' onclick='pushalert(event)'&gt;" + text + "&lt;/h4&gt;" document.getElementById("myList").appendChild(item); inputField.value = ""; } ```
I just realized I commented on and upvoted the top three posts... I'm not a bot, super promise, friends. 
Thank you so much!! But another problem arises. after I clear an to-do by checking it, the to-do returns when I try to add another! :o
It was over the cook islands. So, huge iss, tiny island, no perspective, but cool nonetheless
Thank you. I think you answered my question. I wasn't aware or even heard of microtasks. The article you posted made it clear.
**Fantastic work!** It would be amazing to get the airbnb preset as an option to tick that auto ticks all the rules it uses :) [https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base/rules](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base/rules) Does it cover every rule for eslint up to v5.11? Would be great to see on the app what version rules it is covered up to.
**Fantastic work!** It would be amazing to get the airbnb preset as an option to tick that auto ticks all the rules it uses :) [https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base/rules](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base/rules) Does it cover every rule for eslint up to v5.11? Would be great to see on the app what version rules it is covered up to.
Why did you use React for this app? I like it, but building it with React seems a bit over the top. Finding places on the globe by searching for them is cool, but it would be even cooler if when you search for a place you'll get information about when or if will fly over that place next time around so that you can head outside and try to spot it yourself. If you'd really like to go over board you could let people register their location so that they can get a notification a day before the ISS is due to fly over their area... Fun learning exercise!! 
Can you retain the camera changes made after tracking has started? Every time a new update is received my changes are snapped to the ISS again. A check box to enable auto tracking could fix this if there's no sufficient way to deduce the best behavior. Maybe after 30 seconds of no engagement the app snaps the long and lat back to the ISS but retains the users altitude. Either way I'm asking because I'm geographically illiterate and am having a bit of difficulty of orienting myself to the ISS with the current altitude. I'm aware that I can turn tracking off and zoom out to get my fix. If that's the behavior you want than I acquiesce. I think this is extraordinary all said and done, fantastic!
immediately start working on something you actually want to build. 
Another idea, consider integrating this tool so that all the options that are selected that conflict with prettier are unticked: &gt;CLI helper tool &gt; &gt;eslint-config-prettier also ships with a little CLI tool to help you check if your configuration contains any rules that are unnecessary or conflict with Prettier. [https://github.com/prettier/eslint-config-prettier](https://github.com/prettier/eslint-config-prettier)
I was in the same situation in my last job, then I started looking for a job where I could learn these things, and I was lucky enough to find one. I am very happy I learned some of them, not because of impostor syndrom, but because they are _fun_. I mean not all of them (fuck BEM &amp; co), but GraphQL, Kubernetes/ Docker, node, python, microservices, I am glad I got to play with them. Working exclusively on React for years on end, as much as I like it, would drive me around the bend.
Learning curve isn't that bad. Although sometimes the types in 3rd party libraries drive me nuts.
The line you’ve commented out does yield since it only continues executing after the timeout expires. `await` ensures the rest of the code runs only after the associated promise resolves. The first resolved immediately and so `await` doesn’t need to wait. The second resolved after some time.
Ur a JavaScript developer not a front end developer then. Even with bootstrap or some other ui framework you still should be able to write some css and understand how to use things like flexbox and css animations and media queries and so forth. I’ve never worked an actual “front end” position and not written at least some css or styles... Stating you barely even need to know css is a pretty broad and false (imo) claim to make. Do you know the difference between padding and margin and when to use it for positioning? how does the bootstrap grid work? Do you know the difference between the different positions (absolute, static, and relative) and how to use them with eachother? (Rhetorical questions just stating a point). If a front end dev ever said something like “most front end devs barely need to know css” in an interview he would have an automatic no from me even if it was a JavaScript focused role. What if something breaks and you need to fix it real quick by altering the positioning of a parent or declaring a max-height somewhere? I now need to bring in a different dev in to solve a very simple problem that you as a “front end dev” should be able to fix. I see so many sr level front end devs struggle so hard with simple css and end up burning more hours hacking something together and breaking other stuff to make it work than they spend writing good JavaScript. Most places don’t want to have to hire 2 developers to do a job that should generally handled by 1. Some places have a need for an extremely specialized JavaScript developer but most hiring a “front end dev” would rather have a good js dev with mid level css abilities over an awesome js dev with almost no understand of css. Just learn css and how it all works together it’s not super hard and while you may not enjoy it all that much, front end developers that are exceptional with JavaScript but still have sharp css skills will be more valuable than just a pure JavaScript engineer for most companies that need an actual front end dev.
&gt;What are the pros and cons of functional programming vs object-oriented programming? I'd really hate to see that as an interview question. The area is a minefield of personal opinions. If you ask my old professors, the answer would be "OO is the only way to develop any application ever". I'm sure that's not the answer you'd be seeking but then half these jobs are seeking recent graduates. 
Hello and welcome to Reddit, I see this is your first post and want to help you out, so have an upvote on me :)
If you control the backend, you could POST the data to the server and then have the server create the file. This is the simplest way to do it. 
And how do I do that? As I said, i dont think github supports php.
Ive only tried a bit of angular, but I've found that React is most like pure JavaScript (you can directly manipulate elements in JS) and gives you the most control, which means it is harder to master. Vue has its own way of doing things and has a lot of what I like to call "magic" behind the scenes (e.g "this" is implicit in Vue directives)
&gt;I learnt the javascript language but I am not very good with it. vue isnt that javascript heavy.
If you are not very good at JavaScript, you probably won't be much better at a framework. Spend a few more months on JS courses, or even think about some backend languages for making websites. PHP comes to mind. 
This post actually helps my anxiety from imposter syndrome.
Perhaps you could try Netlify - they have some neat stuff for handling form submissions https://www.netlify.com/docs/form-handling/
How do I use it? Can you give me a quick introduction?
Don't run before you can walk. Get a good understanding of javascript by creating websites. Frameworks will come when you have more experience
The ease of functional composition and prototypal inheritance. 
Does the file need to be created server side? You're gonna have a hard time with that part if you don't control the back end.
Try making your own as practice. Also, there ol’ jQuery, which is architecturally simple as it’s simply a bag of utilities. The frameworks you’re referencing are a bit more; they provide a structural foundation with some assumptions about how the application will be built. Try out all of em! BTW, do any of the major MVwhatever frameworks use jQuery? If anyone know; I’m out of the loop. 
I think i do? And yes, it needs to be server sided.
At least the website needs to show the file.
Yea, a sound is supposed to play.
Thanks! :) Actually now, I have just checked the latest ESLint release and there is a new option for the rule VariableDeclarator and new rule no-useless-catch. It is the main problem of ESLint - it is too hard to keep their data up to date because there is no tool for this :( They have CLI but it doesn't contain anything from documentation :( About presets - yes, that's how I imagine their work but I want to finish with all ESLint rules and their options at first (some rules still have some missing options because I couldn't come up with a good UI for changing them), then add plugins and then presets :)
I'll take a look a little bit later, thanks :)
Hmmm I believe (and I've Neve had to explain this, so it's bound to be fuzzy) Await is the promise in the context you are referring to here. Async is just sugar to symbolize/signal to the browser's engine how to process the enclosed sequence, which uses Await as a stepping tool like we use breakpoints in browser testing
Thank you. Is it well documented ?
I know python, maybe it is better for me to go with Django or Flask. What do you think ?
I would suggest learning Javascript more completely before jumping into any of them. With that said, you're comparing Apples to Oranges here. Angular is a framework whereas React and Vue are both libraries. There's a pretty big difference there. \- A library (Vue and React) are just a set of functions and classes that you implement into your project. You control the flow of data and functionality. A Framework is much more rigid and the control flow is already there. For instance, Angular is pre-packaged with data-binding through use of the scope, whereas React is typically augmented by Redux for unidirectional data flow and to work with immutable data. Angular, partly for this reason, is considered much more difficult to master and jump into and can be confusing, especially for new developers such as yourself. Many of the typical methods and procedures in angular won't make much sense to someone viewing it solely as a javascript application, let alone someone just learning JS. Not to mention, data-binding and flux-type programming can seem a bit alien to developers at first and it's a large part of angular's core functionality. \- My advice would be to explore JS fully and specifically familiarize yourself with ES6 Classes, prototypes, and types of functions (arrow, getters, setters, etc..) and more-so when each is beneficial. This is a working core of knowledge that will help you greatly when stepping into advanced libraries and frameworks. As for which to start with when the time comes, I'd go with React or Vue, personally. &amp;#x200B; Good Luck!
Hah that's awesome, reminds me of this tribute to Leisure Suit Larry I made ages ago [http://benclarke.ca/buckland/](http://benclarke.ca/buckland/)
Thank you :)
I would strongly advise against learning jQuery. It's an archaic dinosaur that once had its time but has since been obsoleted by EMCA itself and yet to this day still lives on in denial, unwilling to accept it's overdue demise. It's a collection of unhelpful functions that no longer serve any real purpose. Even when they did have a purpose, they led astray countless new devs from learning the actual code.
What was the content?
I have no idea!! There was nothing on notepad when i clicked "edit" after right clicking it.
I ran it once using the original windows javascript command thing?? (I forgot the name, but it had red and blue colors on it)
React because it will teach you JS.
It is maybe misnamed, try opening with vlc
It said "VLC is unable to open the MRL file" and it kept giving me the message until VLC froze and crashed
UPDATE: Just noticed that when it's in the RAR file, the filesize is 485 kb, but when i unzip it and place it on my desktop, it turns to 0kb. My antivirus didn't pop up any notification about quarantining or cleaning any files though!
Here's the source where I got the file from if anyone wants to look into it: [https://drive.google.com/uc?export=download&amp;id=17xJvDpqF-GwlI5ACNH04zL43lK4wd4XE](https://www.peopleperhour.com/web/aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL3VjP2V4cG9ydD1kb3dubG9hZCZhbXA7aWQ9MTd4SnZEcHFGLUd3bEk1QUNOSDA0ekw0M2xLNHdkNFhF) Password: 1234
JSON selector - a library to select data from json with simple syntax. [https://github.com/gizt/selector](https://github.com/gizt/selector). Playground - [https://gizt.github.io/selector/](https://gizt.github.io/selector/)
Working for me, using chrome mobile.
sure [documentation](https://vuejs.org/v2/guide/) [vuecast](https://laracasts.com/series/learn-vue-2-step-by-step)
Most? or most successful? I would have to argue with that.
Send it to [https://www.virustotal.com](https://www.virustotal.com) . If it don't detect anything, just throw it away it's a junk.
nothing wrong with django
* The "AUDIO FILE SAMPLE.zip" is 843 Bytes * The "AUDIO FILE SAMPLE.js" is 769 Bytes * The js file contains javascript code that is aiming at Internet Explorer users and will create a new ActiveXObject that runs powershell.exe with a base64 decoded script. * The base64 decoded script will download a file from google drive and run it
Here is the virustotal result: [25200_Protected.exe](https://www.virustotal.com/en/file/4726fb2a4c0cfa69c03c9860ed826d3bbec4c265be8831b7e4a83c7f1fe35568/analysis/1546142268/)
Thanks Nanobyte! Wow, all of this just for a virus. Luckily my antivirus removed it when I unzipped it! But anyway, I don't use IE so I wouldn't have been affected either way!
Learn JS first, then move over to JQuery before trying any frameworks or libraries.
If you use React long enough it becomes easier to use it for anything, no matter how trivial, rather than look up how to do it in raw DOM manipulation.
The only things that are truely async in JavaScript are timers ie setTimeout, and os calls like with fs and net. Some core libraries like crypto utilize threads at the c++ level and are therefore truly async as well. When the async work is done, the assigned callback that was registered with it is invoked with the results. Promises are a construct that really just serves to help you order the execution of these callbacks amongst other things. They do not make the work they abstract async or run in a different thread. Therefore even if you declare a function to be async, unless the work inside utilizes timers or IO, the work inside is still executed synchronously in the main thread and the result is returned as a promise. The workarounds is to do computational work in child_processes or with the experimental worker_thread module in the core library. If however your app needs to do a lot of computational work, and needs to be responsive to other requests or events than nodejs is not the best tool for the job. But maybe you can make it work and that would be interesting to know how you did it! Feel free to ask any questions if my explanation was not clear.
Get a masters degree in CS.
The reason it's deleted it because you're using the target element, which is, of course, the checkbox. Ergo your sibling and parent elements (li, h4) remain. You need to use either parentNode or closest() to get the list item. event.target.parentNode.remove() or event.target.closest('li').remove() &amp;#x200B; With that said, this will still give you problems because you're removing and modifying the live element from your DOM, but you're not removing it from your virtual textual representation of the list (A.K.A. the 'html' variable). If you want to proceed like this, you'll need to splice the item out of the html variable too, otherwise, it will only remove the live element and return whenever a new item is added. There is a better way. The ideal way to do this is to create a virtual DOM in a sense. Add to and Modify that, then just render it out after you make any changes (Incidentally, this is exactly how React.js works -- for a reason). Basically, you create an array of items. Add and remove items from the array and call a render function to update the real/live DOM. Super simple. Additionally, by using a smarter method like this, you can easily track changes and move forward or backward in time! Why might this be useful? think 'Undo' and 'Redo' functionality. These features are taken for granted in life these days so if it's not included in your app, it WILL be noticed. &amp;#x200B; Here's an example of what I mean: [https://codepen.io/anon/pen/xmXvob](https://codepen.io/anon/pen/xmXvob) \- hope this helps! \~Easy &amp;#x200B;
Tourist in NY: How do I get to Carnegie Hall? Local: Practice, practice, practice.
Im serious: a masters in CS.
Just remember typescript is typed but never is it type-safe! 
I really hope typescript goes away in a couple years. Typescript is a bad static language and JavaScript is a good dynamic language. 
why would you advice anyone to learn JQuery in this day and age?
Everything is built with asynchronous in mind. Going to other languages that staple it on really makes it clear how fantastic it is to work with.
Testing asynchronous functions are the reason why I will always choose generators over async/await. They are the superior flow control operation. There are things you can do with generators in term of controlling flow that are not possible with async/await. Here is a library that demonstrates its capabilities: Https://github.com/neurosnap/cofx declaratively handling side effects by treating them as data is a huge win to readability, flexibility, and maintainability. 
why you say that
They are quite literally one of the most common functions in my professional life. Every side effect is written via generator.
Neither are common patterns in React, and furthermore React has a functional approach to UI so SOLID principles probably aren’t going have exact equivalents in the philosophy of that framework. If you’d like to keep business logic outside of your components, I suggest using the flux pattern (or redux). In this model, components can receive data-fetching functions as props, which can be called upon the occurrence of a particular event, lifecycle event, or other condition. Here’s a good article on the topic: https://medium.com/@maxheiber/no-need-for-dependency-injection-in-react-components-641182760aaa
yes they just need to practice reading the subway map and they can get there easily :D
\#BIIIIIIIIG DOOOOOOOOOOOOOM! &amp;#x200B; [https://www.reddit.com/r/programming/comments/aajb7r/how\_doom\_fire\_was\_done/](https://www.reddit.com/r/programming/comments/aajb7r/how_doom_fire_was_done/) &amp;#x200B; So I tweaked it: [https://codepen.io/SarahC/pen/BvwgMj?editors=0010](https://codepen.io/SarahC/pen/BvwgMj?editors=0010) &amp;#x200B; &amp;#x200B;
That's what a bot would say!
Nice atmosphere. =)
Thanks for the suggestion, I'm going to check out the flux pattern. I stumbled across that post today but I saved it to read it later. I'm not trying to implement the principles tightly but rather try to find the correct design alternatives for React/JS applications
Very impressive!
Yes and there are a ton of very good beginner friendly tutorials out there. Vue was my gateway drug into ditching Laravel and embracing Javascript everywhere, and it’s been great!
Is the code open source?
Can i run this code using notepad???
Possible memory leak in Chrome is the only thing I can think of. Iirc Chrome runs each tab as a separate process or something akin to that, so it's entirely possible for only one tab to have a memory leak.
In js, there is generally no reason to use a singleton, since you can just export a variable from the module. 
I agree. I just wanted to zoom out, but whenever I do, it immediately snaps back.
In opposition to the other comment, I think you are already using dependency injection in your React components. In React, DI is best implemented via context. One example is the redux store: you could directly import your store from another file and subscribe to it, but you don't want to do that, so you subscribe to the store that the Redux provider put in context. That way, your components only depend on the "Interface" in the form of the correct context consumer. What concrete instance is in there is defined in the context provider. Either way, I'm still not sold on dependency Injection in JavaScript. Various testing frameworks allow you to mock a module import. That way you can switch implementations during tests, which is not harder than supplying a mock to the constructor of a class. 
Using props to pass in functions means you are already using the D of SOLID. Just because you are not using an IOC-Container, does not mean that you cannot depend on the interfaces (props). Additionaly the article says to not call fetch logic from your components but to call it via props. Bot how are these functions getting into props? The article just moves the problem somewhere else without getting into the solutions (container components, global stores, higher order components, other components for data fetching etc.)
Sounds fine. Remember, JS was originally for dynamic html, which is a small part of making a website. I know times have changed and you can do so much more with it, but I hope people are not coming into the industry with the premise that websites are only made with JS. Ultimately, it depends on your website and choosing the right tools for the job. 
Works on my macbook, but not on my pc with Chrome... Anyhow, I'm happy I got to play some music with my morning coffee!
Yeah you make a decent point. I rarely need to write css but you’re absolutely right that I wouldn’t have been given the job unless I knew how to do so. I’d say my CSS is actually pretty decent as it’s pretty much all I did for about 4 years but I find it incredibly boring and unsatisfying to write which is why I went for a JS focused position when I was searching for a new role.
I had to disable tracking to make those view changes. Not the worst thing, but could be improved.
&amp;#x200B; HappyKoala.querySelector('#nerve').addEventListener('touch', () =&gt; { 💩('A thin coating of glitter'); }, false);
Yeah, definitely. React just streamlines the DOM manipulation and file organization without much bloat. Unless you’re trying to really max out the system resources, React is awesome, and even if you are going for performance, React is still better than your average vanilla JS app that you might find on the market. It forces a more functional programming flow, while allowing for object oriented design patterns.
I’d love to check out the code if it’s open source. I’m working on some React-related personal projects. Also what are you using for rendering graphics?
In JS that would be practical. Correct me if I'm wrong but I think IMO that exporting a variable from an instance, in the case of React or any other framework that has a more herarchiecal structure, a deep nested child component would require passing the instance from the root component all the way to the child component. That's why a singleton / service collection makes more sense to me so you can have access globally to the required service instance.
Zoom out doesn't work. It zooms right back in, no matter what you do.
Link?
Spread operator and lambdas are my favorite parts. It also doesnt rely on classes, although there is active push to ruin that part of language. When imo all JS needs is Structs.
I'm not entirely familiar with Redux but I get your point. I started using an injector that I found on npm (Can't remember the name now and I'm afk) as a context provider that required little modifications on the structure of my code. Mostly because I didn't know how much would that modify the structure that I have so far and how would that change the learning curve having to learn how Redux works
Go does it better.
What? The Singleton Pattern as used in Java or C++ makes very little sense in js, since you can just use s global variable directly. Perhaps that is what you mean by ”singleton”, but The word has a very specific meaning. And in the case of React, there is no reason to pass properties down all the way from the root, unless they are part of the state. 
Can this be used as a Cargo crate in a Rust project?
Well I'm a react and node dev and when I need to deploy my services to the cloud it is always a bit painful. I though dev could be interested BBY a solution that make deployment faster.
Yes, by adding \`swc = { git = "[https://github.com/swc-project/swc](https://github.com/swc-project/swc)" }\`. If you want to use a specific module, please tell me which one it is.
React is a small view layer, how can it ever be over the top? Having components or messing around with a div soup and query selectors makes a major difference, usually the latter is overhead laden and complex, so avoiding it altogether seems like the proper approach. 
What I am trying to do is this: transpile the JS in an HTML file before its included as a response for an endpoint in a rust webapp. I haven't seen if something like this already exists in the Rust ecosystem and swc seemed like the thing I want. Of course I could use existing JS tools but I wanted it to be done at the same time when I am compiling the Rust code since it is a fairly small app and I don't want to maintain seperate frontend for it
&gt; Did you know, JavaScript has a with statement block? /facepalm
&gt; and even if you are going for performance, React is still better than your average vanilla JS app so downloading and executing hundreds of kB and diffing the entire state is faster than this average vanilla JS app?: document.getElementById('title').textContent = 'yo'
You mean.. you want to use swc as a build time dependency? It's possible, but you may have to use a library like html5ever to extract javascript from html files. After that, you can feed swc a javascript source code and transpile it.
Working for elifesciences.org I can honestly say that some articles do have lots of large supplementary files. But gotta admit this is a bit excessive. A link would be helpful... are you able to repeat it?
Don't get me wrong, I love React and use it a great deal together with Redux, but for a tiny project like this one... I'm not buying it. It's a personal preference and I'm not going to go out on a limb and say people shouldn't use their preferred stack even for atom sized projects, but doing this project just in JavaScript would not add bucket loads of bloat; we're talking 2 - 3 DOM queries and eventListeners, tops, and the rest would just be the same logic you would have used in a React Component. &amp;#x200B;
If we're not limited to React, there are merits to the singleton pattern. In NodeJS, it's helpful to create a single instance of a DB connection and save that for the lifetime of the app, instead of creating a new one and destroying it every time. A singleton might be useful also if you want to persist an open websocket connection in the browser. 
Xcon.click = function(event) { yourFunction(yourParams); }
All you're talking about is changing the location/method where the dependency is found/injected. If you don't intend to have many implementations and strong contracts then DI is probably overkill when you can just re-wire your dependencies at the module level. I'm a huge fan of DI but if you don't intuitively know you need it, you probably don't...
Hi there, You can do it like the following: &amp;#x200B; `function someFunction(params){` `document.body.innerHTML = params[0] + params[1];` `}` `var icon = document.createElement('i');` `icon.className = 'fa fa-home'; // For example home icon` `icon.innerHTML = 'some text';` `document.body.appendChild(icon); // Append to body for test` `icon.onclick = someFunction.bind(icon, ['Param1', 'Param2']); // On clicking, the array will be passed to someFunction` Working example: [JSFiddle example](http://jsfiddle.net/5r1mLts9/2/)
The overarching idea to keep for react is that your app is just a function. Your data is the input, and your DOM is the output. You should try to keep all control logic outside the presentation layer so that your app is a pure render function. When you have manipated data, re-render with the new data. For this reason DI + container is not great as components should be functions that take data, and output DOM. React redux uses a higher order function to inject data instead of receiving it as an argument. Your components ideally won't have any concepts outside of the data they receive
Do you essentially mean SSR using rust?
I'm really interested in learning rust so perhaps this may be good to have a play about with. Amazing benchmarks. Just have to wonder how it stacks up against the real thing
Can you do one for ISIS next? I read ISIS the first time and was somewhat impressed
None of the major frameworks use JQuery.
I wouldn't go quite this far. It's still a useful tool especially when dealing with legacy codebases. I would still recommend focusing on the ECMA standard way of doing things, but I feel this is an unduly harsh critique of a tool that was extremely useful for quite some time.
It's not going to because dynamic typing is fundamentally bad for complex software development. TypeScript is amazing.
Upvote for the clear sarcasm lol
Only 95% js
I guess yeah.
You know what would be nice? If projects didn't use babel in the first place to need an alternative
I only looked at the first few minutes but if the demographic is beginners it would be good to explain more than show. Explain what map does for instance, say that it returns a new array with mapped values. Map shouldn't be used to iterate over an array and cause side effects either imo. That arrow function one liner can be shortened even more to `array.map(console.log)` no arrow function needed since console.log is a function that can immediately be passed to map. It seems like a nitpick but i think it illustrates that it functions can take functions as arguments not just function expressions
That's pretty neat! Do I get it correctly that you can only control access on your application level? I.e. you cannot say that module \`x\` can only access feature \`y\`?
Why's that? I love the fact that you can write modern javascript and support anything without having to work around things yourself. 
No, there is nothing like that in JavaScript. You can write an equality function and have it use a custom operation for your objects and another for other objects and prinitives
Because it's yet more abstraction away from just writing javascript and running it. It takes longer to execute and it has a learning overhead.. How many methods does a node dev learn to run some code ffs? Npm start x Node x Babel -r x Etc.. 
Could you also keep the js separate from the html file and dynamically append it after the build?
You really don’t need Babel to run modern JavaScript, you just need it to package your app for browser support, with the exception of modules to some degree. I often encourage my team to bypass webpack for prototyping and testing code, whether that means running it in node, typing it into chromes js console or using something like codepen or codesandbox. It is nice to keep the need for build tools to a minimum and just write code that you can run immediately, but that doesn’t mean there’s no value in using them.
&gt;Also, I would generally avoid trying to shoehorn Java/OOP concepts into JavaScript as its really quite a different language in form and practice. Not saying that it’s impossible. passing props down is like, the bread and butter of dependency injection. everyone who uses React does DI constantly. 
copy the code and paste it into notepad. save it as 'fireworks.htm'. open that file in a browser. you need a web browser (chromium/firefox/safari etc) to run JavaScript. let me know if this worked.
cool!
thanks! have you ever seen John Castaway? :)
Ok...thanks ....I will try it..
What do you use for e2e? In terms of value, which tests seem to be most worth the effort?
Either [`[Symbol.toPrimitive]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive#Description) or [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf#Description) with loose comparison: class Foo { [Symbol.toPrimitive](hint) { return 42; } } var x = new Foo(); x == 42; // true x === 42; // false Downsides: You need to use loose comparison, so `x == "42"` is also `true`. The method will also be called in other cases, so `x + 10` is `52`. Only works when compared to primitives, so `new Foo() == new Foo()` is `false`.
I think you're mixing some things up or generally missing things in your explanation. &gt; The only things that are truely async in JavaScript are timers ie setTimeout, and os calls like with fs and net. Some core libraries like crypto utilize threads at the c++ level and are therefore truly async as well. You're mixing up parallel and async execution. They go well together but they are not the same. &gt; Therefore even if you declare a function to be async, unless the work inside utilizes timers or IO, the work inside is still executed synchronously in the main thread and the result is returned as a promise. You don't need to utilize timers or IO to make it truly async. You just need to await something. There are a lot of things you can await, like a promise that resolves once a web worker is finished doing its stuff.
React isn't like other frameworks in that it doesn't have a large api surface, the cognitive overhead is the smallest possible, so small that the entire api fits written on a beer coaster. You can learn most of it under an hour, then run and build without consulting docs. If you understand javascript, you understand React and the other way around. At the same time you get better at javascript learning it and the concepts and principles will be valuable for everything else, too.
No my explanation is correct. If you await something in your async function that is async, like a waiting for the promised result of a web worker or the promised result of a network call then yes the function is truly async. If you throw in some await just to make "frames" it isn't truly async. I also never mention anything to be parallel? Although there is some parallelism at the level of libuv. When you make a promise or await something, the part where the promise is resolved the call to "resolve()" is async in that it defers the chained callbacks execution to the next tick, but that won't allow you to go service other requests. So even if you try and break up computationally intensive code with some awaits or empty promises, you're still going to block the event loop until the computation is done. 
**Composition** using the **Provider pattern** and the **Context API** #buzzwords But I'm pretty sure this is the right answer. Read how redux's `Provider` component works.
Disregarding the correctness of the algorithm, style and optimization there are critical flaws : `roman_numeral = ''` means it's a string. You want an array to be able to use `roman_numeral.push()` on it. You need to chose the way you want to proceed : - Use an `array` then `push` the numbers, then maybe return `roman_numeral.join('')` ? - Use a string keeping `roman_numeral = ''` from the start then instead of pushing you have to concat : using either `roman_numeral += 'V'` or `roman_numeral.concat('V')`
Typescript has many flaws and its ecosystem is pretty bad. But who knows those issues could be resolved in time so I won't delve into them. The fundamental problem that makes typescript a bad static language is that although it is typed it is not type-safe. I guarantee that all typescript projects of medium size and above have invalid types. You typed some API call as returning a structure that isn't quite what you thought it was, you had to use any because you used some external dependency that didn't support types, and when you casted it, its no longer quite right. For the most part these odd inconsistencies between the objects in the runtime and "static typings" You paste on top aren't gonna conflict so they can stay hidden for ages. But yeah. If an external API changes its format slightly you might not even notice but start having weird bugs crop up. This is because typescript doesn't unmarshal data into the types your app declares. Then I have tons of other complaints, like how interface and types are almost always interchangeable and the error messages are garbage and the debugging is bad, etc. So at the end of the day, typescript is a mediocre not type-safe static language. JavaScript doesn't solve the problems above because it doesn't address them. What it does though is be good at being flexible and simple. My hope is that with wasm maturing, eventually we will be able to use good static languages on the browser. As for backend development which is principally what I do, there is no reason to use typescript today. I have been using it at my company for the past 6 months, and I miss Pure nodejs everyday and am petitioning to move our stack to golang. A static language that is type-safe. It's beyond science. 
Yeah but for backend development there are actually well designed static languages out there. For front end work I understand that you are stuck with typescript for now. But hopefully wasm will mature enough to use other static languages in the browser. See above for my actual critic of typescript.
babel is meant to provide support for javascript features not yet available to all browsers. why shouldn't we write async/await just because ie9 doesn't support it? we can have it both ways. and if you are having that many problems getting a node project started, perhaps it's the fault of you and the devs you work with. there's no reason you can't setup literally any kind of node project to start with a simple: `npm install` and `npm start`. also you're flat out wrong that babel adds some overhead and increases execution time.
I really didn’t think about the issue that much that day, thats way i didn’t save the links, I wish i had them. I just wanted to know what could cause this other than a badly written recursive/loop code, so that i avoid them. 
Thanks for your time to reply. Unfortunately no it is not in MIDI. From reading about this it seems that this task is really push the possibilities of JS at the moment, and this is more suited to Python or C++ rather than a web technology. 
Cypress for E2E. I personally find it much more valuable than unit testing. It's a lot easier to write and is closer to real user experience vs a mocked browser.
Fair enough. However, when IE was a reality, jQuery was indispensable. No one would have been able to memorize all of the quirks, in my opinion. 
Why would you use a database to store real-time match data?
&gt; turn-based game &gt; React &gt; realtime Check out https://boardgame.io
What alternative is there when you want to write modern javascript but need to write code for old browsers? You'll need some kind of transpilation to be able to do that. Do you even write JS on a daily basis or are you just repeating shit you read on the web?
I wanted use a database hosting to store the matches. What should I use then?
I agree with your first two points. Perhaps I'm at fault, that's why I'm willing to have this conversation. So babel dies when ie9 supports modern javascript? If so, why invest in it? I disagree with execution times, but perhaps I'm using it wrong! Saying I'm wrong then saying I'm right is a weird way to argue the point though!
I respect Dan so much for everything he does for React and the JS community and especially for posts like this.
I'd go with something like... let numbers = [{5:'V'}, {10:'X'}, {50:'L'}] numbers.reverse() let test = 52 let result = '' numbers.forEach(iteration =&gt; { Const num = Object.keys(iteration)[0] // 50 If (test - num &gt;= 0) { // 5 test -= num // 5 result += Object.values(iteration)[0] // V } } if(test &gt; 0){ switch(test){ case 1: result += 'I' break; ... case 8: result += 'VIII' break; } } Written on phone, did not bother refactoring, but should work console.log(result)
Really glad to hear about the JSX support. I was just trying this library out and that was my only hold up.
&gt; So babel dies when ie9 supports modern javascript? If so, why invest in it? Well I don't think IE9's ever getting modern JS for one. Babel is useful for more than that though: - react: you need some kind of compiler to use JSX - using recently standardized features: not all browsers implement everything at the same time, but Babel can smooth over that. - using experimental features: Babel let's you try out the future of JS today and provide feedback to TC39. - and of course backwards compatibility: running shiny new JS in old or unmaintained environments. &gt; I disagree with execution times, but perhaps I'm using it wrong! Since Babel itself doesn't _add_ algorithmic complexity, I'm not sure how it could increase execution times. It's strictly a source to source compiler, so it's not like your O(n) sort will jump to O(n^2), unless there's a dramatic misuse of newer features (but then Babel isn't the issue is it?). I'm curious what your experience is in that area! If you have a solid test case it may be worth opening an issue against Babel!
&gt;https://jsfiddle.net/x8g37n1j/1/ Thank you so much I really appreciate it!
I mean ideally all browsers would support all features instantly and all users would use the latest browser, but that’s just not reality. The standards and new features will always outpace the range of browsers most sites want to support. You can either write code the the current lowest common denominator ... or write it once with all the new features, and let a framework like Babel do the work. As your supposed range changes or features become common Babel can change what it has to rewrite. 
`npm i` i think that will update dependencies up a minor version and patch version by default. and those shouldn't give any breaking changes
to clarify, the issue is how to deal with breakage. If I upgrade 20 packages, and something breaks, I don't know exactly which package broke things. 
but maybe plan B could be to always upgrade minor packages.
Wow what in the world. You learn something new about JS every day.
is the breakage always when a major version gets updated. i think since npm doesnt do major updates by default, i just update each major change one by one and patch the code according to the breaking changes. if minor or patch versions are breaking the code, im not really sure how to handle that
Write tests
Serious question - do you know what Babel does?
A promise is more or less a structure with two callbacks. And its exepected to represent a value that can be done, think about it as literaly the meaning of Promise of common english. Sombthing that must be done in the future. Promise Hell -&gt; developers tend to use things in a way that is not expected but "works". Changing a callbacks to passing promises is more or less the same but a bit more "inline". Most of the people expect the await keyword to work like something thread.join do, and in fact the most simple implementations do this. In theory, the await keyword could do some optimizations on how is runned the code, meaning that a 1 OS thread could switch the execution context while one async/await function is doing I/O to improve general performace.
This looks great. It always bothered me that the tools that we use while developing are build in JS. It just feels like it could be so much faster. This project is the proof of the speed improvements that are possible.
I see discussion on [targeting WASM](https://github.com/swc-project/swc/issues/87). Is this route most likely to gain traction? Are Windows binaries on the roadmap?
As another user has mentioned here, this could be a memory leak. This can be caused by issues with the codebase itself, such as accidental global variables, forgotten timers/callbacks, or out-of-DOM references. You can use Chrome's dev tools to check the performance and memory usage of a website/web application and contact the owners/admins of the website accordingly.
try to learn object oriented programming and google "Javascript Game Tutorial". ps: maybe use less questionmarks in the future. working on your english skills first might help you understand tutorials, guides and the (javascript) language more efficiently.
What readings are you getting? It might be the sensor, also make sure the one you bought already has the pull down resistor in it, they usually do but some old cheap ones don't, this will cause really inaccurate readings. Anyways, I check in on here at least once a day, feel free to PM me or post here with some pics / screenshots of the setup and what the readings look like, happy to help. I've seen so many dumb little issues with these things over the years, I'm sure we can figure it out for ya
I agree with this, if you don't immediately have to learn a framework (like for a project you've been dropped into at work), learn JavaScript on its own first. Doing so will (1) teach you the language better than most run-of-the-mill developers and (2) it will make you appreciate the frameworks. It'll also help you determine whether, for a particular use case, a framework is even necessary. 
&gt; working on your english skills great more libraries just to write some JS...
I can't imagine where I would use them but I love it exists
Only from very limited experience of having to execute files with it, so nothing beyond usage. I could do with learning a whole bunch more about it should it need to continue to exist post the ie9 era.
Assuming there's a few seconds between state change, ie a turn, a db might be able to keep up on its own, but you may want to look into redis caching anyway. It's the super intermittent network requests between client to server to db that'll likely be the bottleneck in a scenario like this. Adding a cache lets you batch things to save on overhead.
freecodecamp.org has great tutorials on learning React and Redux. Also check out Brad Traversy Web guide for 2019: https://www.youtube.com/watch?v=UnTQVlqmDQ0
Most definitively not a traditional DB. Use an in-memory data store, one that periodically persists to disk if you care about that - if this was in Java I'd have said use H2, but for NodeJS Redis should be fine. I've worked on something like this (but online chess) and with the number of users we were expecting we just used a plain old hashmap and communication via websockets (socket.io) for the real-time gameplay. Then for each game we'd copy out the moves/results to the DB and delete it from the in-memory map when the game was complete.
Thanks :P, 
Where? Everywhere obv!
Compiling to wasm and publishing to npm to run using node would be awesome. It will be interesting to see if this is how tools are built for the JS ecosystem in future. 
Depends. Will the game only be played in real time or will you allow games that last days or weeks where players take their turn when they want? If the latter, then you'll want to take the no database/in memory database advice with a grain of salt. Depending on scalability concerns, if you care about long running games but don't need massive efficiency, a disk backed database will be easier, and still perform well enough. Everything in programming is about tradeoffs, there's no one right answer, but when your first getting it working, whatever is easiest for you is probably the best place to start, especially if you're not a super experienced developer.
I’m bookmarking this for the summer when I’m making test projects at my internship lmao 
Late to reply but have you looked at [immer](https://github.com/mweststrate/immer)? It combines the ease of mutation with the benefits of immutable objects. It is pretty great.
It sounds like you've got some reading to do ;)
Good app to get some nice sounding chords. I like it. But there are not always enough different pitches of notes to try all the combinations of notes you might want. For my taste the trombone tones sound very well together.
Start a personal plain js project where you will code with the most language functions you can. It worked for me lol
Surely there’s a cheat sheet out there?
If you write out increasingly more complex versions of the functions’ use cases in a code editor (maybe take samples from mdn) and run tests on them until you understand how they work, you will memorize them easily. Really understanding how a function works will help you know when and why to use it, and remember it’s structure. I know it’s not much of a trick, but it does work. 
I have a notebook where I write down useful functions or nice pieces of code I stumble upon which I wouldn't remember otherwise. Keeping a code library (= some folder on your computer where you store code snippets/notes/whatever) might be helpful too. Personally, I like the notebook approach more because 1. writing stuff down instead of c&amp;p helps a bit with memorization and 2. I can take my notebook with me wherever I go, which means I can fill it with new information or look stuff up while I'm at work or waiting for a bus.
i see what u did there. dont understand your dislikes :/
Basically, whenever you want to do something with an array, add to it, remove from it, split it, filter it, sort it, transform it's elements, transform the entire array into something else or just iterate all the elements, remember there's a native method for it and you can find it [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) As for the cheatsheet, try [this](https://github.com/mbeaudru/modern-js-cheatsheet), though I recommend you follow [cocorote-pedro](https://www.reddit.com/user/cocorote-pedro)'s advice.
Dude, I'm glad you're having this conversation and not just believing all of this in silence.. but how can you be so opinionated on something you obviously don't really understand?
Scaling probably. If you have multiple processes responding to requests, you can't store stuff in memory because each process doesn't know about the others' data. e.g., server 1 knows about player 1 and player 2 and has a game stored for them. But then the LB bumps player 2 to server 2 - player 2 asks about the game they're in but the server doesn't know about it.
Neat! Wanna share the progress to the Deno community? ;) https://gitter.im/denolife/Lobby
I'll take a look. Everyone here seems to have Redux as a common reference. Thanks!
You can run e.g. Redis in clusters.
...and redis is a database!
Yea, there are more I can add, thx.
This is amazing. I am going to use it EVERYWHERE
Facepalm.js
Yes, and if you'd bothered to read further into the thread you'd have noticed where I said to use an in-memory datastore over a *traditional* database + API. 
After using them, you get the sense of what they do and what each is for... It took me the longest time to remember how `reduce` works. The others are pretty straight forward : - find - returns a single element, first one that the function returns true - filter - returns an array, all elements that the function returns true - map - returns a new array, change all elements in the array by some means - forEach - iterate over the array and call function for each one. - some - returns true if one of the function callbacks returns true, otherwise false - every - returns false if one of the function callbacks returns false, otherwise true - reduce, like i say, for me, the toughest one to remember - it was only after I started used a different name for the first parameter of the function it really stuck -- `(memo, item) =&gt; {}` -- memo is the last thing you returned. You can change based on `item`. If you pass a second argument, memo starts as the second argument, otherwise the first. While you're still learning, visit MDN site for `Array` -- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array to get a sense of what is available -- think about what tool you want to use to solve the problem you have instead of just digging into writing "garbage" code. (your words) 
Why's that? I'm mainly a C# dev trying to carry good principles and patters to what I learn. I may sin of ignorance with some things but I'm trying to discuss , understand and and learn from what you guys have to say
Any good examples of such projects? I’m a noob
Agreed... but easier said than done. Full integration tests are sometimes required.. Unit tests are nice of course but subtle things can break.
How reduce, filter and map functions are the same? While all of them take in arrays, but they return different things. Filter, well filter arrays, so lets say you have an array of objects, and you only want to have an array where some objects lets say have an id over 100. Map creates a new a array, and you can create an entirely new modified array. Reduce is like map but taken in accumulator, so you can accumulate values while going through array, very powerful thing. Most of lodash functions rely on reduce. So take time to learn 
Why do you suggest learning PHP for backend if they are currently learning JavaScript? Node is great.. and requires no context switching between frontend and backend
JavaScript is also for server-side. If you're doing any web dev, you'll need JavaScript for the frontend.. might as well use it for the backend too.
Just to piggy-back on that.. JavaScript is single-threaded (meaning it can only do one thing at once). When you invoke a function: what you are really doing is putting that function in a que for the interpreter to run next. So if you're constantly looping.. it'll never be able to call the next function. For more details check this out https://developer.mozilla.org/en-US/docs/Glossary/Call_stack
I use Renovate (https://renovatebot.com) for automating dependency updates on 0xtracker.com. TLDR, it monitors your dependencies for updates and then opens pull requests which can be merged manually or automatically. You’ll want to couple Renovate (or a similar tool) with a solid test suite. I also use branch deployments (https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/ for frontend and https://devcenter.heroku.com/articles/github-integration-review-apps for backend) which helps to verify the outcome of an update without having to run locally. There are a bunch of alternatives to Renovate as well, I found Renovate to be the best all-rounder. https://github.com/marketplace/category/dependency-management
I'd suggest looking at [underscore](https://underscorejs.org/), and re-writing the functions yourself. Not only would it be good practice, but you'll better understand how they work and be more likely to remember them. Maybe check out the [Functional Javascript](http://shop.oreilly.com/product/0636920028857.do) book from Oriely
Agree. Frameworks come and go, nothing beats VanillaJS in long term. Learning framework FIRST makes developers lazy and they have hard time using VanillaJS when they need to.
Sorry for the snarky response - I was a C# dev six or seven years back and remember SOLID well - for the most part React encourages a more functional paradigm where things like dependency injection are superfluous when you see everything through an FP lens (first class functions, partial application, functional composition, etc)
My background is in English literature and composition. I ended up transitioning into this field because the languages were just too fun to put down. Not having the traditional background wasn't a barrier for me either, though I still flirt with the idea of going for a graduate degree in CS at some point. I'm not sure exactly how valuable it would be for me though since I'm not interested in changing positions and happily seek out new knowledge on my own anyway.
This is pretty awesome! I'm going to test this out next chance I get. Heck, I just started learning Rust and was wondering what sort of things I could build with it.
Remove the #'s here: ``` var cars = document.getElementById('#cars').value; var occupancy = document.getElementById('#occupancy').value; var hours = document.getElementById('#hours').value; ``` 
Go to [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype) In Chrome Dev Tools delete the sections of the page you don't want, then go to print PDF and fiddle with the settings till you like the look of it. Save the PDF and print, perfect!
&gt;&lt;div&gt; &lt;label&gt;&lt;br&gt; &lt;input type="number" id="cars" placeholder="0" /&gt; &lt;/label&gt; &lt;label&gt;&lt;br&gt; &lt;input type="number" id="occupancy" placeholder="%" max="100" /&gt; &lt;/label&gt; &lt;label&gt;&lt;br&gt; &lt;input type="number" id="hours" placeholder="0" /&gt; &lt;/label&gt; &lt;div&gt; &lt;h1&gt;Estimated Annual Earnings £&lt;span id="amount"&gt;0&lt;/div&gt;&lt;/h1&gt; &lt;/div&gt; Thanks, I have tried this and it still doesnt seem to work [https://jsfiddle.net/715jp48q/](https://jsfiddle.net/715jp48q/)
Couple things I’ll point out: In terms of how to make your approach work, the key thing to look at is, what is “i” doing for you? What does it accomplish? Why is it a condition to end your loop? Another issue is whenever you use “push” in js on a standard array, you are _modifying_ the array, rather than creating a new and different array. In fact, the push function returns “undefined.” (In other languages/array apis this would work as you’ve expected it to work). In terms of a more efficient approach, a loop is potentially an expensive way to do this. For a number in the millions or billions were going to loop for a long time! I’d recommend looking into modulo based operations for making something that’s fast for all inputs. I’m hoping these are hints that help steer you in the right direction without giving away the answer, but if they aren’t enough, feel free to ask me questions :)
Does jsfiddle load in jQuery for you?
No it doesnt seem to work
If you want to write it from scratch I would use websocket as realtime communication protocol. Backend with websocket support could be written in many languages. I like node+socket.io as backend. Match history should be saved to database by backend and is not needed if you don’t want reconnection support
a super project. i built one while learning html/css very long time ago - used every damned tag and modifier to build one huge ugly site. i learned a lot. i also deleted that mess. i would do the same thing again.
Next time you solve a problem using one of those functions, add it to a gist or small repo on GitHub (or even just on your computer locally, you don't have to have it public), so that you can reference it in the future. Might seem like a small, obvious thing to do, but this is what I've done in the past and it's helped me a lot. Many times I've gotten stuck on something, realized I solved the same/similar problem before, looked at my folder of code and copied and pasted it in.
I'm considering both option. &amp;#x200B; Building as a wasm module would allow creating online repl, but currently it's not possible because of the rustc-ap-rustc\_data\_structures. &amp;#x200B; 
&gt;I love the fact that you can write modern javascript and support anything without having to work around things yourself. 
I did this last year - ember-cli 1.3 -&gt; 2.1x. It wasn’t exactly easy due to it being coupled into the backend which meant removing the project and serving it as it’s own repo. We didn’t know any of this until we tried to upgrade the entire thing and saw what broke. The dirty way is upgrade everything at once and see what kind of errors you get and what your tests say. Once you’ve made sure the core code runs - you can focus on dev dependencies. Worked well - because I could easily isolate what tests are breaking and why they break. Depending on your libraries/framework, YMMV. 
 function calculate_totals() { var cars = document.getElementById("cars").value; var occupancy = document.getElementById("occupancy").value; var hours = document.getElementById("hours").value; var amount = cars * occupancy * hours * 26.5; $("#amount").html(amount); } $("#cars").change(function() { calculate_totals(); }); $("#occupancy").change(function() { calculate_totals(); }); $("#hours").change(function() { calculate_totals(); }); You need the \`#\` sign when using selectors in jQuery but should not use them in \`getElementById\`.
if you don't want to use Jquery you can use addEventListener, listening on the [input](https://developer.mozilla.org/en-US/docs/Web/Events/input) event. i've updated your fiddle try it out https://jsfiddle.net/715jp48q/7/
I personally have a small database of functions for many different programming languages so in the rare event I forget a function I can refer to it and quickly find what I’m after. It’s definitely a recommendation to all.
From a purely business POV. Companies that provide this sort of product, do store all moves in a DB. This way if a user queries there winnings (and maybe uses paint to alter what is on their screen, so they can claim higher winnings) there is a way to verify claims. 
I was only recommending it if they were really having problems learning JS. 
That's completely orthogonal to the question I asked. Also it would be nice if people read more than the first comment in a thread 🤷🏾‍♂️ 
Long-term, I think you should try to figure out ways to reduce the number of dependencies you have.
ECMAScript is a "[scripting language specification](https://www.256kilobytes.com/content/show/1916/javascript-vs-ecmascript-vs-typescript-vs-coffeescript-differences-what-to-use-and-when)"; JavaScript is an implementation of the specification.
I've found that a good way to "reach down" is to ask team members to come up with goals on their own, such as "remove dependence on XYZ library" or "get 50% code coverage by end of XYZ". It helps set a tone, and gives you a performance metric to work from. &amp;#x200B; YMMV
Leading can be a lonely business; you can’t be buddy if you are also a line manager. Consider their perspective, they may be jealous or feeling less valued by the organisation due to your ‘promotion’; you cant necessarily fix that. Best thing you can do now you are leading is get a mentor. 
This might seem tricky but I think there is a simple solution. If you've been picked for this role of management the. You have some skill I this area that other people probably do not. Just because you are in a more "senior" role doesn't mean that your coworker is any worse at coding. If anything it might mean he is better at it than you are; and that is ok because you have skills in other areas. The key to a good team is trust. In a progressive team where each member hands off to the next you have to trust that the product you receive is going to be complete or greater. In a collaborative team you have to trust that each team member is going to carry their own weight. You are now in a position where you are the lubrication/glue. Use your expertise to identify areas that are deficient and seek advise on how to solve the issue. A great programmer may not see the gap but that doesn't mean that they can't fix it once it is pointed out.
Does it use the existing babelrc config?
tl:dr; Not everyone knows JS, so make sure to keep CSS out of it where possible. 
Good suggestions all around. I would definitely reach out to the team to see what area they feel need work and keep those as goals for the team. I had some friends that were under me as well, the biggest things are trust and honesty. It's good cause during processes like sprint planning, grooming etc you know when folks are padding or not. Another thing is learn to say no to others, both externally facing and internal to your team. You are the defensive lineman and your expertise was chosen. Always promote your team; externally show others how great person X has been or what they solved recently. Don't take credit for the team ever. Pm me if you ever need any help or have questions it's not easy but it can be awesome.
Perfectly aligns with [this meme](https://knowyourmeme.com/memes/oopsie-woopsie).
I've never had this problem within the development field, but I feel that it's the same basic principle... It is going to be very difficult (but not impossible!) to have an effective manager/managee relationship if you continue to act the way you were back when you were just team members. I've been in this position (on both sides) and I can say that he will probably have a hard time changing his view of you from coworker to "boss", especially since you were "sharing laughs" before. I've had bosses that could effectively manage me and be "buddy buddy" with me, but I don't think it would be the same if they hadn't started out as my manager and had time to build up that boss/employee rapport before getting friendlier. I've also had people below me get promoted, and take this TOO far--he thought that since he was now the manager he couldn't treat his old "co" workers even close to the way he used to, so he completely isolated himself--started eating lunch alone, avoiding talking about personal lives at all, no more cracking jokes. So he went from "good buddy Tom" to "dick boss Tom" and his team members were very unhappy in their jobs, productivity sucked, etc. I'd be seriously careful to avoid this last trap. You're going to have to change in some ways but you want to be the good (but still effective) boss, not the hard-ass boss trying to prove a point. 
Just my opinion mind, but from my experience if you start seeing yourself as not equal to other team members because you are team lead - you're going to do a terrible job. Moreover if your default assumption is that people who you presumably respect are going to try to take advantage of you, only bad things will follow. &amp;#x200B; P.S. Human relationships and Friendships are far more important and more productive than hierarchies.
spaced repetition.
&gt;If you pass a second argument, memo starts as the second argument, otherwise the first. Uh what? 
Are you guys doing, using, or applying any types of software development methodology? If not, start using applying one to your workflow. As a team lead, you need to figure out if your team or your company in general is a reactive or proactive. If you’re reactive, try kanban or waterfall (pls don’t). If you’re proactive, then try agile and 2 weeks sprint with rapid deploy if possible. If you’re going agile and using the 2 weeks sprint, then every two weeks have a backlog refinement, sprint planning, and retrospective meeting. At refinement, you figure what is top priority for the upcoming sprint. At sprint planning, get a collective estimate on how many points it would take to finish the task. Point is not time, it’s how complex the task is! At retrospective, you discuss what went wrong or what was great about the sprint. The estimation process will become more accurate as time goes on so no need to worry about it, what I would do though is allow the developers to create a reference sample story with 1 point. Then using that reference, each develop will provide a point for the story at hand. If theres a huge disparity between the votes, then either the person that votes with lowest or highest point has to explain his/her reasonings. With this process, you’re not telling the developers when something has to be done, but the developers tell you how complex the task is. As for when will the task be done, at the end of each sprint you’ll add up all the points that were delivered, and by the 3rd, 4th actually you’d know how many points your team can accomplish by doing an average of the last 3 sprints. At this point, you’ll just need to figure priorities and shift the stories in or out, up or down as necessary. The developers are now accountable for the story they voted and agreed on. You can also easily communicate up and say, this is our team effort at 100%, if you x done, then y will need to take a back seat! After I typed all this, I realize that you may a scrum master who’s job is to do the above, but if you don’t try it out.
I think honesty is the best approach, you can still keep a friendship with a colleague “under” you, let him know that you think he is as talented as you are and that you need his skills to complete project deadlines. The fact that you were chosen to lead isn’t totally under our control, and ultimately, everyone has someone to answer to
I very much second the getting clarification from your boss as to if you are expected to be a lead or a manager, this is hugely important in my opinion I transitioned from Senior Engineer -&gt; Team Tech Lead -&gt; Engineering Manager of said team. In my opinion there is a huge difference between leading and managing. As a leader you help the team produce as a member. I relied on mentoring others and really trying to empower teammate and help them understand I will be there to help when they are stuck but also help them understand my train of thought and how to unblock themselves. As a manager it is more of a eternal to the team and assisting with career growth. This is a HUGH transition in my opinion. I have a ton to say about this topic so if your current role is more of a management roll I would be happy to elaborate on the topic. I agree with others here that if you were promoted to team lead, you are doing something right 😃 talk to your manager to help understand what traits you have that lead to the promotion or just do some inner reflection 😃 as a leader I found I liked to try and help others strengthen/identify these traits. For example I have some engineers that were afraid to ask for help because they thought it was a sigh of weakness. I would try and hold them accountable for what they were delivering but instead of reprimanding if they are not producing, I would ask why they are having trouble and help find them who can help them and network more, because this is what I would do if I was stuck. An amazing engineer once told me “never be stuck more than 30 minutes without asking for help, it’s not efficient...” it doesn’t make you look bad it’s just a resource. Anyway best of luck! Happy to talk more as I struggled with this myself 😃 
This could be useful if it gets a BIG library.
Use https://dulst.com if you want this as a service.
there's two ways to lead - by politics or by example. whichever way you got to your position, keep doing it. don't suddenly go from leading by example to dictating what people have to do or else, for example. if you're suddenly too busy to effectively lead by example and you think ordering people around is an effective shortcut, you need to reach up to whoever promoted you and explain the situation. it's possible they gave you the promotion more to get you to work harder than to actually learn to lead better. if so, that's on them.