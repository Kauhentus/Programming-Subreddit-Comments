Not sure about it being a game changer, but likely that`React.Component` will be gradually phased out.
I don't know if it throws an error to not wrap a test in a describe. You can always try it and find out. Conceptually, there is no programmatic _need_ to describe a test. If it throws an error, it is merely to enforce good test readability.
Javascript has classes now, but I still often work with constructors and prototypes which go hand in hand and you can google those terms. My constructor is a function called with 'new' and the 'this' object it returns (called an instance) has whatever local props I gave it in the constructor and has access to the methods and props that are defined on my prototype object. For a 'web component' I tend to have target dom elements as a property and various dom manipulation/rendering etc. functions on the prototype. Your question is a bit too broad and there are many ways to create something that would be called a 'component' and it depends on the context. 
Thank you very much for the the reply. I just tried it out and still works (or at least it the most basic form of the tested component). I think I will just state in my demo and document that it enhances readability and stuff.
Totally agree with you. It's a pile of shit. That chinese wanker Evan You should die. I've used it and it totally sucks. To be short: While you follow their crappy dead simple playground examples on their site it's all cool and fun. Get started to real world use and you get into the nightmare of their retarded syntax and logic
Would be 1000% times better than that shit.
I like async await but there's also an ["async await hell"](https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c) that you can fall into. Working on a script for Puppeteer I felt like I was heading in that direction. But overall I like it async await
Time to refresh your cache and go duckduckgo - Google is biasing your results
Let's pull the brakes on this hype 🚂 for a second to think critically. Some things I have noticed about the hook functions: 1. They have signatures which are indistinguishable from normal functions. 2. They have hidden complexity around ordering. 3. They have no way to be unit tested. 4. They cannot short-circuit. 5. They can only be used in function components. 6. They are imperative. 7. They are not pure. I've detailed a proposal which addresses all of these concerns. Thanks for taking a look!
Yes, you *were* limiting yourself. "Were" since Flash is a dead end and not supported. If it was as popular as it was during its heyday, then Flash would probably still be superior in terms of functionality and ease of usage. But for better or worse, the world decided to move to a standard language, and the most popular platform became app stores.
I can it being moved to a separate package like `React.createClass`. The majority of the core devs want to be writing React Components in this style. 
Thanks heaps! I'll check these out!
I can't wait to read the "why we're stepping away from the react hooks api" medium articles in 6 months
For a community that pokes fun at other frameworks for churn, it's always comical to see these bi-yearly "OMG WE'VE BEEN DOING IT WRONG - GOTTA REWRITE!" movements within React.
No one gets fired from a medical institution for making a safe choice, and sticking with known and tested hardware/software is the definition of a safe choice. ES5 is (in this case) that safe choice.
I tried them out yesterday by writing a simple "Todo" app, and I loved it, because I always start out with function-components to scaffold out the view, and then have to refactor to a stateful-component once I need state. This completely eliminated that need. Also, I was up and going with a redux-like reducer order of magnitudes quicker than with traditional React, by using `useReducer`. Personally, I'm sold.
Upvotes are my preferred tender anyway B)
The short version is that you can now write all of your components using functions instead of classes, as they are providing power-ups for function-components (`useEffect`, and `useState`, to name the biggest).
Kinda like Render Props are now disliked after fanboyism propelled them in to the real API. Hoping that hooks aren't the same...
Yea I found that this way is the most efficient way of building open source tools. I was inspired to do so by [sindresorhus](https://github.com/sindresorhus) who has released something over 1100 public packages on npm... I used to build try-hard projects but I found it to be unpromising as I spent so much time on trying to perfect it and include every nifty feature I can justify putting in which resulted in almost never actually publishing anything :)
I usually try to hack together a mostly functional prototype, much the same thing that would be my final product 10 years ago... Then I start writing things down... The logical places to break it apart, what patterns seem appropriate, etc.. Then I throw away all my prototype code and start writing something unit tested and maintainable...
I like classes too, but.. I recently inherited a codebase that is a mess of Redux, MobX, and HoC all over the place and I can definitely see how hooks would make it all a lot cleaner. I'm going to give them a serious try before judging.
A few thoughts: * React Team should be improving performance instead of API. * This is a weird API, but it might become second-nature soon. * Recompose has been abandoned, and Redux is an even worse API. People who adopt Hooks won't go back.
When React came out, it was faster than Angular, and Angular 2 alienated a lot of seasoned users by introducing a radical new API. Now Angular is faster, and React 16.7 is alienating a lot of seasoned users by introducing a radical new API.
This is an example of how to do it with e.g. async/await: [https://imgur.com/9PhIS34](https://imgur.com/9PhIS34)
&gt;Maybe the docs can enlighten you. they explain what they are, but they don't provide context about _why_ these things exist the way they do. the getting started docs show one place where `describe` is used - in the setup and teardown sections. OP, jest is a descendant of [jasmine](https://jasmine.github.io/) which was heavily inspired by [rspec.](http://rspec.info/) both of these libraries prioritize writing descriptions of specs / tests in english so that you can read the descriptions like a sentence. in an ideal world the tests would be so rich and descriptive that a pm / designer / business analyst / etc could go read the tests and understand what the code does. these frameworks provided methods to let you write specs like sentences: describe("the sum function", () =&gt; { it("sums two numbers", () =&gt; { expect(sum(2,2)).toEqual(4); }); }); the syntax and descriptions reads like a sentence. `describe the sum function: it sums two numbers. expect sum of 2 and 2 to equal 4` lots of frameworks provide ways to print the results out such that it reads like this: the sum function sums two numbers ✓ both of those looks into the tests read like a full english sentence. so while the docs say that `it` and `test` are the same thing, they don't really do a great job of showing why they're different. they also don't really explain why you'd want to do a code block above vs like 
Reading online, it only seem positive things about jQuery.. I was wondering if I was wrong, or if I'm missing something?
Google it and draw your own conclusions. or at the very least fucking scroll down on the subreddit and read the 54 million other identical threads. stfu about jquery ffs.
Thank you
I'll be incorporating them into [my WebExtension](https://github.com/SamHH/bukubrow/) on a testing branch as a testing area this week. I think it's just one of those things that's hard to properly appreciate - positively or negatively - until you've given it a go yourself.
They're changing the component API to be based on functions instead of classes. Supposedly, this will be easier to use and yield better performance and optimization. Probably. Maybe.
Flash is dying if not dead. Don't bother.
I don't understand what you're asking. You want someone to convince you to use something because you're new, or you don't understand the value of jQuery after looking over the API and docs?
Because I mostly don't want to use jQuery, but since I only could find positive things about it online, it must be me that doesn't see the whole picture.
\&gt;Having worked in multiple React codebases, there have always been numerous ways to do things. Some teams go hard into HOCs, some into render props, some just manually pass data everywhere needed, some use context (old and new). Some use antipatterns like inheriting from a custom base class, and I'm sure some are still using mixins. I agree with you to some extent. But I think those things you've mentioned are more about combining or extending components with additional functionality. HOCs and render props are quite different from each other but ultimately they are just use React components using the same old lifecycle we're all used to. The hooks API is a more fundamental change to how components themselves are written which is what I don't like. It seems like teams will now have to decide if they write components now, hooks versus the old way. 
Agreed. Don't Do It. &amp;#x200B; [http://youmightnotneedjquery.com/](http://youmightnotneedjquery.com/)
If you are new to the web, please don't even bother learning jQuery. It's cancer that should be removed from the web by any means possible. &amp;#x200B; jQuery was a great tool back in the days when all browser API's were different. But after like 10 years, jQuery has become a bloated monster. &amp;#x200B; Most people use it for \`addClass\` &amp; \`removeClass\`, they might end up using like 0.1% of the entire lib. It's not worth to add \~300kb of bloat because you are a stupid developer. &amp;#x200B; jQuery becomes a tangled mess of spaghetti in about 45 minutes. Mostly because of its core design of chainability &amp; callbacks. &amp;#x200B; These days we have tons of new fancy buzzwords that all do a better job than fukkin' jquery... async / promises / reactivity &amp;#x200B; Please use Vue.js or React. (Angular has effectively killed themselves since they broke all API's a few years back) If you really can't live without \`$('.fuckng-jquery')\` then i'd say use cash.js or similar (tiny jquery alternatives) &amp;#x200B; Just my 2 cents. Been building for the web since 02' 
 if(mycatering == "ThreeCourse") { document.getElementById("threecourse").style.display = "block"; }
Almost everything in the React ecosystem has a steep learning curve and architectural issues. Over time, the architectural issues have been gradually relieved, but the learning curve remains rough. It's easy to make a ToDo demo with React, but making your first complex, highly dynamic application with it is arguably more difficult than with [VanillaJS](http://vanilla-js.com/).
In marketing, «game changer» mean «born dead»
Push each object to a array, slice the array accordingly.
I use a library called @enact that has already done some of the same sorts of things, although in a completely different fashion, so I really like where this is going. I haven't used it yet, but I can clearly see definite value in it. I think I'm in the minority of the people who haven't used it but think it looks like a great idea. :-) I just hope that this doesn't put the @enact people out. :-) 
That's interesting because so far all the hook examples I've seen have not looked readable. Instead I go, 'okay, some magic happens there and it's hard to know what it's really doing all of a sudden'. 
*vueing intensifies*
You should not.
[removed]
I'm just reading the documentation, I have no experience with it, but it seems like that is still creating a component local state, rather than an entire application state. Pretty sure there's still room for react-redux there, or react-redux-hooks . . if someone hasn't written it already :-D 
Would you rather he spent time working on improving what he knows is going to be replaced, or working on the replacement? 
I believe Abramov's article posted recently has a link to some comparisons of the code generated by a standard transpile/minify step between doing it the old way, and the new way, and I sure af can't argue with those results. 
https://github.com/Pamblam/Official-Jeff-Goldblum-Firefox-Plugin
ok, real simple example, say you have a component that displays data from two entirely different sources. In the class system, as you only have a single lifecycle method (i don't even remember what the names of the lifecycle methods are right now, it's been a long damn time since I've wrote React code that was dependent upon them), when you create that component, in that lifecycle method, you're sending a request to two entirely different services, to retrieve that data. Now, you can have two entirely different functions, one that does each piece, without having to call them in the same lifecycle method. 
history is repeating itself
React tries to be more like Mithril? Hm
Async/await does nothing to make it imperative rather than functional.
There's this thing called "try/catch"...
But why don't you want to have them in one place? It only makes sense, no? Especially on componentDidMount if you want it right away.
I refactored a smallish, new project earlier this week to use hooks and I can agree. But, there's a nice way that you can separate state from pure simple components with this approach: export function Component({ valueA, valueB }) { return (&lt;p&gt;Hello {valueA} &amp; {valueB}&lt;/p&gt;); } export default function StatefulComponent() { const [valueA, setStateA] = useCustomHook('foo'); const [valueB, setStateB] = useState('bar'); if (!valueA) { return (&lt;Loading&gt;Component is loading...&lt;/Loading&gt;); } return Component({ valueA, valueB }); } You can test `Component` very easily since it's stateless still, and you can test e.g. `useCustomHook` separately to ensure it's working as designed too. It keeps logic/state separated from the clean rendering function which helped convince our team to try out hooks in the project. I'm definitely still adapting my way of thinking but our project code base became way easier and we could drop all our HOC's too.
Just in case anyone else comes across this post... [node's util package has a built in promisify function](https://nodejs.org/api/util.html#util_util_promisify_original) . Using that, here is what my code looks like... purely async / await. exports.unzip = async (in_file, out_dir) =&gt; { try{ let e = util.promisify(extract); await e(in_file, {dir: out_dir}); return 'unzip done'; }catch(err){ throw err; } };
That "hell" is usually caused by not understanding asynchrony and how to run things in parallel. It's not unique to async/await- you can easily fall into the exact same trap with .then().
Check out my project, any review and feedback would be nice &amp;#x200B; [https://github.com/ProticM/plazar-js](https://github.com/ProticM/plazar-js)
I'm not sure exactly what the best thing to do here is, but I certainly believe that the way this has been handled might be one of the worst options. Active development has been halted with no warning, and the only suggested alternative is currently undergoing an open beta/rfc process, having been announced less than a week ago. Better might to have been to find new maintainers, to suggest an alternative library, to begin a slower deprecation process, or even just to write a message that doesn't imply that this tool is already dead and buried. I say this as a guy who's about to start the process of creating a new React app. If I present recompose to my team with that notice at the top, they're not going to feel particularly confident of its long-term viability. The core React team have already made it very clear that Hooks are unstable, and may well have major API breaking changes. Which should I go for?
Deprecation means not adding new things. 
Yeah the article didn't really explain what was happening at all...
This is a welcome addition, also it's way easier for the compiler to optimize these functional components so I think this will be the new standard.
No, it doesn't. There's no need to understand that you want it to run on componentDidMount, you only need to understand that you want to use service A and use service B to obtain your data. So, you have a method for subscribing and unsubscribing from service A and from service B, and you keep those two things separated. 
That's a cop-out argument. The creator of a particular tool has a certain amount of authority, and their actions will have an impact on the community who uses it. Sure, someone can fork and continue the recompose project, but they will not have the same level of expertise, nor indeed will they be able to obtain the same level of community support. This is particularly disappointing because there are better ways that don't cause the same issues. Most obviously is to reach out and try and find other maintainers who would be willing to support this. In general, this sort of attitude makes me significantly less likely to trust the long-term viability of anything else the creator comes up with.
Uh, except angular 2 wasn't backwards compatible and class based components in react are still fully supported and can be used interchangingly.
Sure, but the author isn't certain whether they'll even continue to update the tool for future versions, and they've clearly expressed very little interest in continuing the project. That's clearly not a project that I'm going to put much trust in.
... and this allows you to write full featured render() methods, without having the class overhead. 
Ideally a very over-engineered solution.
Sure, welcome to software development. If I had a dollar for every project I've ever used that's been deprecated, I wouldn't need to be a software developer. That's kind of the point of deprecation, though. Maybe you're right, maybe it's too early, but the dev wants everyone to go all in on the replacement, rather than spend a year getting traction on the new. 
Thank you for the feedback! &gt;I would like documentation outside of the code though. Which part of the code do you feel is under represented in the docs? &gt;This is great at documenting config structure, but I think this could use some default file generation and that could help prevent runtime config errors. This is coming! Defaults and optional properties are planned for 2.0 &gt;One of the structures I really like is a sample file of some kind [dotenv-safe](https://www.npmjs.com/package/dotenv-safe) has a good structure for this. This essentially allows people to look at that file to go, okay this is what my environment needs to look like and here are some defaults. &gt; &gt;I could see something like [joi](https://www.npmjs.com/package/joi) where there is a default flag and some script I can run where I can generate that sample file. Essentially, for any project I create, I want devs to get up and running as quickly as possible. I can see this being useful. I'll have a look at it once defaults have been fully implemented. 
Hi, I'm a Redux maintainer. We've got some discussion about a potential future `useRedux()` hook here: https://github.com/reduxjs/react-redux/issues/1063 . Also, we're pushing forward on React-Redux v6, which will use `createContext` internally for better compatibility with the latest versions of React. See https://github.com/reduxjs/react-redux/pull/1000 for the WIP PR.
True, but hooks are a deliberate exploration of adding a finer-grain primitive than components. HOCs and render props have drawbacks for how they appear in devtools and how they compose, which makes them awkward for some use cases. IMO Hooks solve those problems in a very elegant way, but it is a very different approach.
Interesting proposal.
But the replacement doesn't exist yet! It's an API that hasn't been finalised, with many controversial elements, where the lead maintainers are actively discouraging people from leaping to freely into it, because it still hasn't been fully tested. I'm uncomfortable, but accepting of deprecated but stable technology. I'm much *much* more uncomfortable using technology that has suddenly been deprecated in favour of something that isn't even stable yet, because that implies to me that the author isn't someone who understands the value of stability in software.
&gt; Which part of the code do you feel is under represented in the docs? I'm just referring to the new functionality referenced in the sample file. My only concern is that the structure exists in the code base which requires documentation in the Readme for how to get up and running. For projects I typically create a .env.sample or env.sample.yml so that people can see what environment they need to get up and running. The ideal is that they could copy and past .env.sample and it will work locally immediately (e.g. default postgres config and documentation in the readme for how to get postgres up and running in docker or some script that starts up an instance of postgres).
If by "wrong" you mean "with slightly more boilerplate". Hooks aren't really changing much other than reducing the need for class components.
That's fair enough. I don't think the hooks design is terrible by any means, it's just that there'll be two very different ways of doing things that makes me worried. It honestly looks like a different framework to me—it's that different. I'm surprised there's so much positive reaction (although I do see a lot of people being less than positive too). Surely a better solution would be to try to solve the problems you mention with HOC and render props, which I agree are issues. Although maybe there is no good solution.
if you want stability, you use the current stable versions of all of that, and none of this matters... in game dev, we have a saying "build with the engine that's available now, not the engine that will be available when you need to be done" . . . and that's how you get software that is released on time, unlike, say, Duke Nukem Forever. 
I tend to factor out state and logic into separate testable functions/classes and then just setup/tear down them in componentDidMount and componentWillUnmount. I feel that’s cleaner than hooks and less magical but just as testable and reusable.
Yeah, I'm not necessarily saying classes are horrible, hooks are purely additive and for some it'll be a more natural way of working. Class approach has its pros and cons, just like hooks have theirs :)
That’s fair!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
This community mania over a new feature is what drove me away from both the RoR and Swift communities. In my mind, software engineering is about building profitable businesses using software and Getting $h*t Done™️ is the most reliable way of doing that. It’s a warning sign to me when a community shifts too far into “oooh shiny” or “all the cool kids are building with this idiom”. I’m not saying that all hooks proponents are acting that way, the articles have actually been somewhat balanced in their tone, but beware ...
I like this proposal, but I feel that the simplicity of the api is lost when migrating to a more traditional functional approach. Seasoned functional programmers would probably be more comfortable with this, but a newer programmer may feel a bit overwhelmed. 
Not disagreeing, but it's still churn. "Idiomatic React" seems to be pretty fluid, which is in contrast to the React community's mantra of stability. Sure, it all works, but you feel bad because you aren't doing the current "new best practices". I'm not saying the changes aren't bad or welcomed, but the tribalism is interesting to watch sometimes. 
&gt; React Team should be improving performance instead of API. This is what they're doing. People talking about hooks, the real bomb that landed was suspense and time slicing - these things go further than anything we've had before in the web, it could potentially put native UI to shame in terms of performance. You can already switch it on and even on default settings it makes a noticeable difference: https://twitter.com/jlongster/status/1054554506736910336
But now you need to run them inside the functional component and their setup/invocations will still be side by side in the same scope ... 
Can you explain “render-props create wraps stretching your code”? I’m interested because I’m going to use render props in some GraphQL client code and want to understand your warning ... Thanks!
Interestingly, I liked React on my first try. I tried rebuilding a prototype previously written in AngularJS and it felt so much better in React.
I think part of it for me was that it was also my first dive into the reactive paradigm.
&gt; Redux, MobX both? I mean pick one...right? We use mobx + mobx-state-tree in production where I work...I am struggling trying to imagine a scenario where I would combine both Redux + Mobx ...unless it's just legacy reasons, I guess?
I don't know why I spent any time on this... Open the developer tools, paste the code in the console, start the game, and once the tiles are visible, run the script. You can later stop the script from playing by calling the function that script returns (i.e. in this example, `stopPlaying()`). var stopPlaying = (function() { let timeoutId; (function play() { if (G.curScreen.timeTf.text === '00') { return; } const blackTiles = G.curScreen.tiles.filter(t =&gt; t.highlighted); // click a random black tile blackTiles[Math.floor(Math.random() * blackTiles.length)].onClick(); timeoutId = setTimeout(play, 100); })(); return function stopPlaying() { clearTimeout(timeoutId); } })()
Well as someone trying to get friendly with functional programming... I'm overwhelmed!
Yea Dan even made sure to note its an additive api... I am not *totally sold* on hooks just yet, but seeing it reduce the LoC was impressive. And even with its extra magic, I think with a bit of 'getting used to' the syntax can be more expressive and semantic in many ways. So I will likely try it as Dan suggests and slowly try it on a few new components here and there on our production system at work once it hits a stable release in react. Classes aren't going anywhere though, and this isn't anything like Angular...I am not having to rewrite my entire application and this new API is more of an enhancement/alternative to the current one.
There definitely a lot of churn, and it's interesting because I think that what we've got now is, in some ways, a regression from some ambitious SPA creation tools that didn't quite make it. Cappuccino is one that comes to mind. It was neat in that it let you design your UI using OSX's interface builder. Heck, it was basically a port of Cocoa to the web. A bit of a downside was that the creators found that JS as it existed at the time was inadequate, so they created Objective-J. I use and enjoy React all the time, but in some ways it feels like cobbling an app together from sticks and stones compared to what was possible with VB6 20 years ago. I know that we're building complex, responsive user interfaces now. But to be honest, putting together a responsive UI in Webflow doesn't feel all that different from constructing a UI in VB6. Combine an interface builder like Webflow's with the ability to easily add code to handle events, and I think we'd have a pretty decent way to build a single page app. 
Yarn's "workspaces" feature doesn't care what repo you use, so this gets a lot of the benefits right up front. To automate publishing, I guess you could write quick a Node.js script to loop over all your package folders, bump the package.json version, and call `npm publish`. I'm not aware of any tools to do this in an automated fashion, but at least this is the easy part compared to what yarn is doing.
Is there anything more danish?
This refers to ["Wrapper Hell"](https://reactjs.org/docs/hooks-intro.html#its-hard-to-reuse-stateful-logic-between-components). Render props are components that allow you to take stateful logic and pass it to any component, but to do so it must *wrap* that component. This can quickly become "Pyramid of doom" looking if you start to use this pattern a lot. &amp;#x200B; i.e.: &lt;Wrapper&gt; {computedProp =&gt; ( &lt;InnerComponent&gt; &lt;Wrapper&gt; {anotherComputedProp =&gt; ( &lt;InnerComponent /&gt; )} &lt;/Wrapper&gt; &lt;/InnerComponent&gt; )} &lt;/Wrapper&gt; With GraphQL, each component that you want hooked up to your graphql backend must be wrapped in a component, so replace \`&lt;Wrapper&gt;\` with \`&lt;GraphQL&gt;\` and you see the code becomes less and less "flat".
Why choose between them? They work great together, one being a mocking/stubbing framework, the other making mocking/stubbing possible. 
Javascript of course. It is like comparing PHP and Golang. PHP here refers to Javascript, again.
Much of the point is to make this a declarative syntax and to group like concerns together. You have your data subscribe and unsubscribe together, for each service, not intermingled with each other in lifecycles. You don't even need to know about the component lifecycles for most uses now. 
Yeah. Companies like Apple, Microsoft, and even Adobe, have been working on how to develop GUI applications for decades. Async/await came from C# and data binding started in C# too if I'm not mistaken.
Nothing against them unless they're nested. render props &lt;GetHeight&gt; {height =&gt; ( ... )} &lt;/GetHeight&gt; hooks const height = useHeight() return ... 
Makes sense, I didn't want to use it when I first learned JavaScript either.
I don’t have the code in front of me right now, but I presume somebody at some point decided that redux was too complex and added mobx for the functionality they were working on. And now I need to explain to the client why I need to bill them a days work to refactor that code so that I can add the new features they want without adding a bunch of technical debt...
That will probably pass with familiarity.
Lol this is awesome :) 
After many year now that Javascript finally has a half ass class support, AND we have React working with classes, suddenly we decide to fo back to functions, because of 'wrapping hell'. And the cost for this is to have rules, conventions and some magic. And the worst of them is: people will start rewriting things. At this point React is on the blurry border of library/framework. Is that 'wrapping hell' really that much of hell that we need all these trade offs? You might think React is improving with each version and take Hooks as a good sign, I'd say from now to 2020 will be the golden days of React, and the the fall will come. I think the so called wrapping hell is just an excuse. Javascript community is never satisfied with whatever fucking language feature you through at them. Their goal is not stability, stability means a boring world to them that you have sit down, write boring code and get shit done. Their goal is to consume a shiny thing, and when that is finished, invent another shiny thing.
Maybe fastest, but not really the most efficient because of the unnecessary bloat. While Sindre has published a lot much of the packages are so simple they could just be done in a project and avoid the extra dependency + it's dependencies + the extraneous data such as the package.json and whatever .lock is used if any, and then unless he's using the package.json files entry all the tests + etc are also included when these are installed. Quality !== Quantity. I'm not saying he's not done any quality projects, but bolstering numbers with garbage is very misleading and should not have garnered so much positive attention.
there's no way I can disagree with that
Uh, so what's your point, it's still different than what angular did, obviously they have a transition path. Also writing your components this way helps optimization a lot, so you get a lot of benfits and can transition at your own pace. 
The template syntax is optional but makes reading and writing far easier. It encourages separating business logic from rendering. You can use JSX but you should know your argument can just as easily be applied there.
I've used Hotjar in the past and wasn't disappointed
I'd make a counter argument, but Sindre [already did that job for me](https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328) :) I think in the end of the day it comes to preference since any methodology has its pros and cons
so i should make components with functions instead of classes?
There are a couple problems there, including that you never call `.json` on the responses you're getting. Can you use `async` and `await`? If so, maybe you could do something like this. const doApiResuts = async (pageNum) =&gt; { const resp = await fetch(THE URL); return resp.json(); } const fetchMetaData = async () =&gt; { const promises = []; for (let i = 0; i &lt; 100; i++) { promises.append(doApiResults(i)); } return Promise.all(promises); }
can't quite grasp what that means but i will keep in mind that. thanks
Great Job! This will help me a lot! I wish this came sooner! Thanks for all the effort you put into making it!
Google Analytics? That's literally what it's for and it's free. 
Hi /u/BakaPuppy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sintern19, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
That the hooks must be initialized in the same order, outside of conditionals, is frankly absurd. Is this so the hooks internal state management knows which variables to use where? Why not require them to be given unique identifiers instead and let the component author decide how to maintain consistent references? This smells like moldy cheese, folks. I love React but am starting to wonder if a community that can embrace this kind of hack is the one I should bet on long term. The jury is out as this is still in experimental stage and I do hope it is not adopted.
Does google let me send a json payload to every event? Can I create a unique user with each session to assign the tracking to? Not sure why it didn't fit in the past 
think the main site got the hug o' death
Thanks, will check 
not sure how I missed that on the side bar, ty now I might get an answer
That hooks must be initialized in the same order and cannot support branching is very much a bad code smell. It's going to be the kind of thing that teaching react requires the teacher to hit the student over the head until they get it and don't screw up. It makes React all but require linting in order to be an effective tool which alone is enough to drive some people away. We will have people creating third party solutions that fix this problem which will compete for attention. It's frankly just a bad hack that it works that way, and that simply can't be good in the long run for a mainstream library to begin adopting bad hacks as gospel.
Lmao, I just read that recently for some reason. Very true; there was plenty I would agree with from both sides of the arguments presented there. So obviously this is just another thing where I don't know what to think myself and I should've shut up. Sorry I derailed your post. Thank you very much for sharing your project, and the insight :)
So basically creating HOC component that manages state. 
Yes that’s my approach as well. Then you have logic and state that’s testable using unit test at specific places. 
I haven't started yet, but I'll go with Max's course :)
I actually haven't seen a rapid pace of changing things so I guess ymmv... I mean class components I wrote 4 years ago would still work fine. I don't think adding a new way to write more optimized components is really changing anything.
Yep, except there’s no component at that point, just a function with some react calls.
Next step: an actual browser plug-in?
What do you want to track? Google analytics lets you add custom tracking code for events, metrics and dimensions but you aren't allowed to send personal data. Passing json is tricky. I'd recommend learning Google tag manager, putting the data in the data layers and parsing it with regex. Doing this will let you test and debug additional tracking code much faster than rewriting the Google analytics tag directly on your page. https://support.google.com/analytics/answer/6366371?hl=en https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits https://marketingplatform.google.com/about/tag-manager/
Lol, very cool
Rofl OP is only interested in arguments against js... good luck with flash.
The last time you used JS must have been 10 years ago. 🤷🏻‍♂️
Yes
Right, that's what I would expect from anything sane, and the main reason why I am terribly worried about this proposal being adopted.
Besides what /u/s_tec mentioned, this sounds like a great opportunity to contribute back to Lerna?
If your events can only fire once then a promise might make sense but if they fire multiple times you could look into using and event emitter pattern (similar to what the DOM, Node, or Angular provide).
[https://github.com/ScottyFillups/key-controller](https://github.com/ScottyFillups/key-controller)
I've used [Piwik](https://matomo.org/) (called Matomo now) in the past to great effect. 
I thought it was funny 
I recommend fullstory.com they record every event and show u a video, you can even watch live sessions
Only if you intend to use Hooks from the 16.7 alpha. Right now you can't make full components with functions.
its really simple. Each time a component calls a hook it gets added to an array of hooks to call for that component, when the component runs, it runs through that array, and returns the values in the order it runs. You can't have the internal name of the piece of state be used as an identifier, if you had a generic hook you wouldn't be able to use it twice in the same component.
All theory until it happens
It isn't a 1:1 comparison, but it's similar. You WILL need to rewrite your components to stay current, regardless of what the docs say.
&gt;Frameworks are frameworks, I don't pay too much mind to the framework wars. Until you work for 4 years at a company using Framework A, then start looking for a new job as most of the industry has shifted to Framework B (and they want senior candidates with professional experience).
For now it does not work because I have not implemented yet the getPrototypeOf instance :) &amp;#x200B;
If your group is making a new app or doing a rewrite, you have the choice of starting with Hooks or trying the faster Angular 7. Maybe your group won't stick with React.
That was theoretical.
Plenty of reasons: - Sharing global state - Keeping your state outside the component tree - Redux DevTools - Middleware - The rest of the Redux ecosystem I wrote a post earlier this year called [Redux - Not Dead Yet!](https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/). All of the points there still apply with hooks.
`useReducer` combined with `useContext` provides state across your app.
And something says to me that I can't becasue the proxy is in the prototype chain....mmmmh ahahhahaahah I'm done
But you don't need to rewrite to use hooks, you can write new components in hooks and keep your old class based components, nobody is saying you have to use them.
&gt;And something says to me that I can't because the proxy is in the prototype chain....mmmmh ahahhahaahah I'm done And something says to me that I can't because the proxy is in the prototype chain....mmmmh ahahhahaahah I'm done 
I wasn't saying that the rewrite was because of Hooks. You can decide to rewrite your app for a lot of reasons.
&gt;I don't doubt that recompose will be made largely obsolete by hooks when they eventually become a stable feature, but it doesn't seem to make any sense to give such a prominent deprecation notice so early in the process. On the contrary. I would be glad that a library is going to be deprecated as soon as the maintaner was sure that he won't be developed further. It gives a good time for anyone new to consider adding it to their own project and also maximizes the time for other maintainers to step in / forking it.
Yes I've read that and I get that it's just an array, and that is the criticism. As far as I can see, adding a unique identifier argument to useState would let hooks be used inside loops and conditionals, and the same hook could be used repeatedly for different purposes if just given a different identifier. In other words, simply change the storage structure from an array whose indices are dependent on execution flow (horribly, frankly) to a hash that is keyed by a unique state variable name.
`describe` is an optional construct that is really about sub-grouping tests and indenting the output from the test suite. In some unit testing frameworks the `describe` is required but for Jest it is not. From the docs: &gt;[describe] isn't required - you can just write the test blocks directly at the top level. But [describe] can be handy if you prefer your tests to be organized into groups. In general, I recommend using `describe` to help organize your tests in a suite but there have been a few cases where there are only a handful of tests for a file/suite and we just have a few `it` or `test` cases.
I'll be honest - Redux took forever to master, and I still don't like it very much. The React built-ins are simpler for simple tasks, and flexible enough to handle complex ones. The dev tools thing is a very good point, and you should talk to Facebook about implementing them for React's built-ins in React Dev Tools.
Nice, I made a chrome extension to do the same thing. It's using https://highlightjs.org/ for the syntax highlighting. I haven't made it publicly available, and haven't worked on it much besides just highlighting javascript code that's there on page load. Would need to update for after a comment is made. Also thought about creating a feature to have a little modal window popup for typing code in to with features of an IDE and auto insert in to the comment with the reddit 4 space per line inserted.
that works fine in your code hook, but in a 3rd party library, where you don't call control the call to 'useState', if you used that same custom hook twice, it would break. 
Thanks, I will dive more deeply into what Google offers 
Thanks, tats very helpful, I will take look
I can only recommend preact, check it out ;)
I'm kind of sad that Aurelia didn't take off. The idea of a pure JS framework is so cool. 
Redux is a non-Facebook project. Both of its original creators now work on the React team (Dan and Andrew), but Tim Dorr and I maintain Redux separately. The new Profiler mode in the React DevTools can _sorta_ show some of the progression in state over time, but not in the same way the Redux DevTools do, because Redux is entirely based on the idea that all state updates are triggered by serializable actions. It's theoretically possible for the React team to implement something in the React DevTools that shows what state updates triggered a re-render, but based on discussions I wouldn't expect them to add something like that any time soon.
Hard to give advice without seeing what you've got so far. In general, you'd want to have something like: entry : { public : "public/index.js", admin : "admin/index.js" } Webpack will traverse the import trees from each of those entry point files, and figure out what needs to go in each bundle. If you don't want Babel or Uglify, then don't add those loaders to the config.
Using `map` to return the JSX template doesnt make much sense to me. `map` should really be used to "set" the state, and after youve composed all of your side effects together, use something like `fork` that provides the effects to the JSX. It should be a one-way thing since there's not really a use case for repeatedly re-declaring your view. 
So it has nothing to do with hooks, just a random response to what I wrote about hooks. Either way after using both I wouldn't touch angular with a 10 foot pole even if it was marginably faster, which I don't think it is.
What is that for? I'm confused
&gt; In this particular example, if useCustomHook is meant to be used more than once within a single component, *yes, it should accept an identifier argument* to different its state from other calls to the same hook initializer. Absolutely. Add a parameter id to useCustomHook in that case and pass it along to useState. If the argument against this is that it's too much work for coders or too verbose, try Redux for a half minute and tell me its I maintain a multiple giant redux apps at work. I know about prop plumbing hell. The problem with making ids for hooks is that now you, the implementer, need to know every single piece of state that any 3rd party custom hook initializes to give them ids. That's disastrous. Using that same example, imagine a 3rd hook `useOtherCustomHook` that calls `useCustomHook` twice inside it, and use its own setState. How would you manage the Ids getting fed into that? &amp;nbsp; &gt; I'll also point out that this code is literally already violating the first rule of the Rules of Hooks: only call them from the top level of the component code. Thats only the first part of the hooks rules: &gt; * Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions. &gt; * Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. (**There is just one other valid place to call Hooks — your own custom Hooks**. We’ll learn about them in a moment.) *emphasis mine*
how do you do that? 
That's not a bad idea, maybe instead of mapping to jsx, every `ReactHook&lt;T&gt;` has a `.render` method which takes a `T =&gt; ReactNode` and returns a `ReactNode`
What about a search bar for the dropdown as well ?
Seems like a great job, I wish there would be a demo page instead of downloading and run locally 
Oh yes please! Seeking some feedback on how to improve... I've got a couple of projects: &amp;#x200B; 1. Run multiple R jobs in paralel using Docker [https://github.com/kurakuradave/tripler](https://github.com/kurakuradave/tripler) 2. Python OCR project – classification of rune characters from webcam images [https://github.com/kurakuradave/aksara](https://github.com/kurakuradave/aksara) 3. Crawl Amazon Product Review pages using Selenium and R [https://github.com/kurakuradave/rarazon](https://github.com/kurakuradave/rarazon) &amp;#x200B; Appreciate any feedback, thanks!
I disagree. "Hooks must be unconditional" is not a complicated rule.
It looks like it's a tool to generate the appropriate user agent string. 
Thanks! 😁 
I'm glad that you like it! 😘 
Demo site is [https://www.chunqiuyiyu.com/ervy/](https://www.chunqiuyiyu.com/ervy/), I leave it in README.md of github repo.
Thanks! 😄 
I am sorry about it. I don't know what's wrong with my website. 😥 
Well obviously I'm talking about when the concept is new to you, not after you already know it.
Lmao yep, exactly the same experience I had.
You know, sure you're getting down voted. And yeah, you come across reactionary and a little over the top. But you're also not completely wrong. In the early-mid 2000s, we finally started to approach stability and sanity. Standards-driven development. Accessibility. Inclusiveness. Progressive enhancement. Separation of concerns. Slim and performant. It felt like we were finally starting to mature beyond the Wild West stage. But it never ceases to amaze me how quickly we are willing to abandon all our long-held principles when something new and shiny comes along. I love the tools we have to play with (I'm on the fence about hooks), it makes my job hella fun, but this is an inescapable fact. And we always have an excuse or justification locked and loaded when confronted with it (or we just down vote). So yeah, in a way, I get where you're coming from.
Thanks for the history, very interesting. It's fascinating how much the languages themselves condition how we program and what we think programming should look like.
How would working with 3rd party libraries be possible at all? Wouldn't *they* need to know the order of fields in your state? Shouldn't you just be passing the value down to a 3rd party app, rather than the state accessor?
It's very hard to make it more explicit. A little verbosity (explicitness) need many more LOC, as I've tried here: https://github.com/reactjs/rfcs/pull/68#issuecomment-433994285 Though at least I'd like /u/deltadeep's proposal to add unique identifier throughout all hooks.
&gt; Wouldn't they need to know the order of fields in your state? No, the only thing that needs the order to be the same is react, in every render cycle. It doesn't matter what that order is. Any 3rd party lib can initialize their own state all day long, and they have to follow the same rules as everyone else. Don't render them in any other blocks besides a component, and another hook. Then every run through is always in the same order. The reason for the order is that react makes an array-like object for each component, and stores all the pieces of state in their own box. Every time it renders the component, it goes through the array, deals with each piece of state, and moves on. But it has no idea (and doesn't care) what you call that piece of state in your code.
Looking at the source code: https://github.com/zazapeta/sexy-user-agent/tree/master/src I'm gonna guess that either the author just wanted to use React, or the author didn't know how to build this without using a UI framework. Either way, it's a great example of people using bootstrapped code without actually understanding what it does. There's so much redundant code lying around; unit tests that don't do anything, code for service workers that's not being used, empty stylesheets. It seems like the modern day frontend developer is incapable of going back to basics, this tool is literally just a simple div, with some small pieces of JavaScript to get some browser information. (And yeah, I'm a bit grumpy because I need to explain this shit on a daily basis to two "senior" frontend developers who, without Angular, wouldn't be able to function)
Hey that's how I've been spending my day too! Also using pug. I haven't made much progress. I'm under the impression that it's not unusual to set up multiple configs to accomplish different things, like building for different environments or separating server and client dependencies.
&gt; They have no way to be unit tested. I don't think that's true.
On mobile so I didn’t dig super deep into the code. I was really turned off because I had to go digging deep into the docs to find out what the hell your project even does, and I am still not clear on why someone would want it over another option. I would suggest adding more details to your readme that better informs about your project. Also, if you want to be taken seriously take your readme seriously and drop the emojis. Not sure where you are from, but also on the taken seriously front a spell check would be in order. 
&gt; The problem with making ids for hooks is that now you, the implementer, need to know every single piece of state that any 3rd party custom hook initializes to give them ids. That's disastrous. I guess I'm a bit confused here with this bit - shouldn't you *always* know what bits of your component state are being altered by a 3rd party lib? If that lib needs it's own state, then that's a different thing, right? And wouldn't you just be passing it foo and setFoo rather than relying on the lib to pull those out of your component state itself using useState?
&gt; The problem with making ids for hooks is that now you, the implementer, need to know every single piece of state that any 3rd party custom hook initializes to give them ids. That's disastrous. [...snip...] Using that same example, imagine a 3rd hook useOtherCustomHook that calls useCustomHook twice inside it, and use its own setState. How would you manage the Ids getting fed into that? You just need to give the third party code a single unique id, and then it can use it as a prefix (or suffix, either way) when creating any number of additional state variables it creates internally. This way it can completely encapsulate it's own use of state, the identifier given by the caller would just be used to namespace that use of state. Your point is taken that the later rules do explicitly create a hole in the earlier roles for custom hooks, allowing them to be called outside the top level. However, I find this sort of thing needlessly finicky and error-prone especially when, afaics, a very simple solution exists that eliminates the awkwardness.
Unconditionality is not enough; they must also fire in the same order. Which is why there's a rule to keep them at the top level, so they don't end up buried in code that might run in different order. Furthermore, as far as I can tell, this can be completely eliminated if hooks just required their caller to declare a unique string identifier (a namespace, effectively) for the hook's use of component state, instead of pushing hook state into an array whose indices are determined entirely by execution order.
I now think the right term is a "namespace" for each hook invocation, where the given string is used as a namespace for all state managed by that particular hook instantiation/closure. e.g. `useState(namespace, defaultValue)` and `useCustomHook(namespace)` which would then call `useState` with branching on the namespace given, eg `useState(namspace+'2ndlevel', defaultvalue)`
I couldn't find the space on my phone
RxJS provides really nice functions for turning DOM events into observable streams 
&gt; You just need to give the third party code a single unique id, and then it can use it as a prefix (or suffix, either way) when creating any number of additional state variables it creates internally. This way it can completely encapsulate it's own use of state, the identifier given by the caller would just be used to namespace that use of state. Then everyone has todo this (all the way down), [so why not just do it implicitly](https://www.reddit.com/r/reactjs/comments/9ru41q/what_are_hooks_on_react_and_how_you_can_benefit/e8mkb5a/)? :) 
Aha! (comprehension slowly dawns)... I am starting to get it now. I've been thinking of this in the context of me still writing out a state object somewhere, and then having to ensure that all of my calls to useState maintain the correct association, but yeah, that's not how it works. The hook handles all of that for me. I still think there is a use case for naming those state variables though, but I can see why you would also want to be able to use it without having to be explicit. Thanks for your help!
[removed]
I added a code sandbox link, so you can play with it too.
Multiple inheritance actually seems to be making a bit of a comeback. Although -- ironically -- it's been mis-identified as composition. You may have seem code like this in a blog or two: const barker = (state) =&gt; ({ bark: () =&gt; console.log('Woof, I am ' + state.name) }) const driver = (state) =&gt; ({ drive: () =&gt; state.position = state.position + state.speed }) const killer = (state) =&gt; ({ kill: () =&gt; console.log('Ded') }) const murderRobotDog = (name) =&gt; { let state = { name, speed: 100, position: 0 } return Object.assign( {}, barker(state), driver(state), killer(state) ) } const bruno = murderRobotDog('bruno') bruno.bark() // "Woof, I am Bruno" The blog author probably told you this is composition. But it isn't. It's multiple inheritance. Using OP's library, for example, it would go like this: const barker = { bark: () =&gt; console.log('Woof, I am ' + this.name) } const driver = { drive: () =&gt; this.position = this.position + this.speed } const killer = { kill: () =&gt; console.log('Ded') } const murderRobotDog = (name) =&gt; { let state = { name, speed: 100, position: 0 } return Object.setPrototypesOf( // multi-inherit from barker, driver, and killer {}, barker, driver, killer ) } const bruno = murderRobotDog('bruno') bruno.bark() // "Woof, I am Bruno" cc /u/jfet97
As a matter of code hygiene, I'd suggest avoiding mutating (monkey patching) objects you don't own, such as `Object`. MooTools is the poster child for why [monkey patching is a bad idea](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#String.prototype.contains).
The medium article doesn't do hooks justice. I walked from the article thinking it was just another silly state manager. Only after I read reacts official posts on the subject did I realize how insanely incredible this is. It truly is game changing. https://reactjs.org/docs/hooks-intro.html P.s. it does not replace Redux, but it'll make it much cleaner to work with.
Maybe one of my libraries helps you: [https://github.com/ndabAP/plotly-js-material-design-theme/blob/master/webpack.config.js](https://github.com/ndabAP/plotly-js-material-design-theme/blob/master/webpack.config.js) There are two entries and two outputs. First entry point is ``${__dirname}/test/index.js`,`, second one is ``${__dirname}/src/index.js``.
It's definitely a tradeoff. It is indeed extra work to be explicit, but the cost of doing it implicitly is that it becomes brittle, can't be done inside loops or conditionals, substantially reducing its flexibility (you now need to create a new component and include that component conditionally, if you want a hook to be conditional). I disagree that linting is required "either way" and think the approach they chose here is one of undue reliance on linting. This probably reflects a broader gap in philosophy between myself and the React community or at least it's leadership. I don't mind linting to enforce style, but not to patch over substantial problems with the design of a framework API.
&gt; can't be done inside loops or conditionals, substantially reducing its flexibility You can't conditionally call `componentDidUpdate` or any other lifecycle hook either, it happens every time no matter what. Your conditional logic has to go inside of those call to deal with it. Hooks don't seem any different to me. I've read a few hooks examples that have started floating around (/u/charles_stover has been busy), and experimenting with my own codebases with hooks, and I haven't come across a non-theoretical problem this rule. I'm not going to say it doesn't exist, but so far I just haven't seen it.
How do you use it and what do you use it for, Watson?
You can't imagine a scenario where you'd want to conditionally invoke a hook depending on the value of a prop? Imagine an effect hook for showing if a friend is online as an overlay on their avatar. So, a UserProfileAvatar component that shows a user's avatar, and if the viewing user is logged in and friends with them, also shows an "online" status overlay. This is a hook you don't want to invoke when unauthed, which would be a prop the avatar gets either from Redux or whatever store your app uses for auth state. You'd need to use multiple components here, and conditionally include the right children in order to have the hook active or not as required. You can get around this limitation by nesting components and conditionally using children, but forcing a change in component scope in order to just decide if you want to use a hook seems to me like an awkward limitation.
Thank you very much for your feedback. You've got got a point, writing the docs is consuming too much of my time, I need to bring back the focus on to my readme.
There is monitorEvents function defined on global scope. Check it out https://developers.google.com/web/tools/chrome-devtools/console/events
Implement Segment.com and the forward to service of choice. Or try Amplitude, MouseFlow... too many to name. Looks like you are looking for something that tracks interactions and views. Or implement something like Keen.io which gives you full freedom (is similar to Amplitude).
Good one!
It’s bed time now, but I’ll build that hook tomorrow.
How would photoshop help you click squares?
Had enzyme but not react-testing-library 🤔... Also missed out TestCafe which is currently the most viable alternative to Cypress. We actually chose it above Cypress for my current clients project. Definitely don't regret it. TestCafe is amazing 🤩
Solved
Who writes code without any spaces?
Dont worry i would not use it if there wasnt any new features. Typescript setup with webpack. All modules sherlock. 
For node and web. Typescript setup with webpack. I also have read YDKJS. So, i think i know what i am bashing here Sherlock. What languages do you use other than javascript?
[removed]
Stop stalking 
You mean backend or frontend development? BE - expressjs (or something along this, i dont know much else) FE - React (my preferred), Angular or Vue. (do your research of theese 3 and dont trunst anybody)
Adonis.js is based on Laravel for the backend
WTF, why i didnt know this earlier? Thanks dude! (not very useable in my current react position, but generally in js very usable)
Why do you switch?
Well. Do you still wanna keep using Laravel for back-end? Then I'd say for with Vue.js for front-end as they are really good friends. &amp;#x200B; However if you wanna skip Laravel all together, then you could go the meteor route (though, I don't think meteor is under active development any longer)
Are you still talking about recompose? It's just a bunch of utility functions... it's not some core product that requires long term maintenance. As long as people still use its methods, people will make PRs. 
Express is pretty much the polar opposite of what they're looking for ffs
Meteor 1.8 litterally just came out.
Is there any drawback in using 16.7 ?
Genuine question, how hooks are similar to Mithril feature.
It's not bad. It's just have to be explicit. For example, you have package `A`. It relies on external dependency `B`. If you install B into root, you'll get package A working inside workspaces, but on install it will fail. All your dev dependencies, which is not called from workspace alone can be installed to root with no problems. For example, we have babel in every workspace (different versions in different packages), but have eslint in root. We're working towards unified build process, so babel will also migrate to root deps.
VueJS
Ha! I'm not sure how viable it is long-term to try and cater React towards the lowest common denominator.
Yeah, worked on a few peesonal projects with Aurelia and loved it. I would have loved for it to take off
But it's not as mature as Laravel, so just use Laravel
Not really. Skill set can be quite different and learning JavaScript to a basic level isn't that hard today 
Oh nice! I'm not so in to the meteor community. Last time i was interested in it, it hadn't been updated in forever.
Angular does know how to fuck with you. So I wouldn't dare to go that route.
Meteor is certainly still under development. I've moved to a new place using it, and whilst there's community grumbling about it, it is a fantastic tool for getting something quick out the door. Granted our challenges now are trying to migrate away from it, but it's an excellent start. 
Personally, i think becoming a tester is mostly detrimental for becoming a developer. According to my observations and experiences: \- good tester need vastly different skills AND personality than good dev. \- becoming a tester will make people around you (managers) solidify their mental image of you as tester. Then, it can be hard to change it so they perceive you even as a potential developer. \- skills are different. &amp;#x200B; From my point of perspective, best and shortest way to become a programmer is to start programming. Anywhere, anything. I would consider being a tester for a time only, if i lacked awarenes of the dev enviroment. I COULD help in rare cases.
Think you missed the point here, they are looking for a js framework, they already have laravel.
Why a PDF? This is what a form is for?
Downvoted for Medium Member Preview
Basically i would just say you just don't need to care about such things. Why would you?
I actually have, only they are in a different continent, and on the field :) 
Thanks, interactions and views is exactly right
Trial project for a job application. First time using redux. [https://github.com/Glinkis/work-trial-softrobot](https://github.com/Glinkis/work-trial-softrobot)
I am using [Smartlook](https://www.smartlook.com), it automatically tracks all events and also has session recordings and funnels.
Thank you! Very helpful.
I would uses modules option [https://babeljs.io/docs/en/babel-preset-env#modules](https://babeljs.io/docs/en/babel-preset-env#modules) Dont worry about targets, from docu: "Sidenote, if no targets are specified, @babel/preset-env behaves exactly the same as @babel/preset-es2015"
My gulp config was getting out of hand, and slow. An special pain point was the lack of coordination between nodemon an browsersync (and I persued every avenue about that: streams, callbacks, async, the stdout trick etc.). Also, more projects are switching to webpack which makes it probable that gulp will be the next grunt. And yes, even I think I did it for the good reasons, every brick wall I hit with webpack makes me want to cry back to gulp. No pain no gain though.
 Zip Codes Validation and Parse library: [https://github.com/vzhufk/z1p](https://github.com/vzhufk/z1p) 
Why is it a great oppurtunity to contribute to a project I wont be using at all?
Thanks. I will look more into this. 
Exactly. That's why I can't figure out why isn't this (better?) documented or mentioned in articles. And using pug, all I can find are ways to htmlfy them, but I don't want that. Did you make much progress?
Sorry, just added my webpack.config.js to OP. I was doing what you suggest here, so that's a relief. However, the "output" problem is not addressed. I'd need a bundle.js and bundle.css (or whatever) in the public folder. And the other respective two in the dashboard folder. How?
Angular + TypeScript are the best
Thanks. now i got it
Damn it !!! I confess, I failed to do the perfect clean code !!! I failed to reivent the wheel !! And I failed to use the goold old vanilla JS ... &amp;#x200B; But I guess, you missed the aim of this \*\*weird thing\*\* : only, and only, trying hooks in React. I do not care about the rest ;) &amp;#x200B; If you want a better world, make a PR/Fork. &amp;#x200B; \&gt; It seems like the modern day frontend developer is incapable of going back to basics It seems like the modern developer is incapable of going back to bascis : An Example is not a Rule &amp;#x200B; Btw, Thank you (really) for the feedback and time used for it. I guess, I'm going to clean this... or not ;) &amp;#x200B; Cheers ! &amp;#x200B;
It is defenitely Vue.js. The Laravel team recommends Vue as a frontend framework and have you covered with an example to get you going [Frontend](https://laravel.com/docs/5.7/frontend)
I don't think you'll gain anything though if all you need is just concatenate files.
If you want to be a dev, dive in and make the change as soon as you can. Don't wait a year to give it a shot. If you think the manager is good and would support you in the transition, make your intention clear up front and take the role. It's a logical change that I've seen a few people make. If you're happy enough where you are, keep doing that and apply for dev roles and build your skills/portfolio on the side. Also, let the devs you work with know what you want to do (unless they suck) and ask questions, read through PRs and maybe pick up a story or two.. Good luck!
Nice! Very creative project idea, too. 
You can also use codecafe as a Cypress alternative.
Not on GitHub, but on CodePen: https://codepen.io/jrop/pen/ZqdEQZ It's not very pretty, but there 'ya go.
Very interesting! Starred your repo for sure
&gt; In the Edge console, there are three errors and several warnings. But none appear to be related to the JS files in-question. They may appear not to be related, they may even not actually be related, but just in case, you _should_ include those errors in your description of the problem. Being that the problem is catastrophic (in the sense of no JS being executed at all), there is a fair chance that these errors may actually be related to the problem.
If your using webpack 4 you should export a function that returns an array. module.exports = () =&gt; { const config1 = { ... }; const config2 = { ... }; return [config1, config2]; }
OK you're right--good point. I've added that info to my original post, thanks.
OK OK, I'm willing to post any code that will help track down the issue. What code do you want me to post though?
10 questions my ass.
In your homepage, you have a `&lt;li&gt;` element inside a `&lt;select&gt;` element. This may be happening more than once. Do correct this before trying to fix anything else. Having such a malformed HTML may certainly be interfering with correct JS execution.
OK thanks for that. Would that be an Edge/IE-specific issue? Because the same code in Chrome/Firefox doesn't cause any JS issues. Also, there are other pages that do not have `&lt;li&gt;` elements inside `&lt;select&gt;` elements, yet the JS issue is still present ([example](https://www.horizonhomes-samui.com/contact/)).
How is AdonisJS not the only answer here?
That page does have that same problem. It's not exactly "Edge specific" but more of an issue with just how strict/loose browsers can be with your errors and what they can do to try to understand what you meant.
You still didn't **share your code.** You still seem to think we're **all fucking telepathic.** You **did not** create a minimal example of the code. You are being a **help leech.** &gt; Well I'm not sure my code is the problem You're not sure because you have made exactly zero effort. &gt; SCRIPT438: SCRIPT438: Object doesn't support property or method 'tweecool' If you had so much as done a simple fucking Google search you would have gotten an explanation for this error in the first search result. You have something with an id of `tweecool` in the DOM. You also have an global by that same name. One is overwriting the other. What have we learned here, /u/cag8f? - Don't write your code in the global scope. - Create a minimal, complete, verifiable example before asking for help. - Don't make assumptions about the cause of the problem is. 
&gt; That page does have that same problem. Are you saying that [this page](https://www.horizonhomes-samui.com/contact/) contains an `&lt;li&gt;` inside a `&lt;select&gt;`? 
[What is an MCVE](https://stackoverflow.com/help/mcve) - Identify the problem. Be specific. - Remove (comment off) small pieces of code until all that is left is the code that causes the problem. If you prefer, you can do it the other way around. start a blank project and slowly add-in code until you identify the problem. start by removing all your javascripts and just add a script that does an alert or a console.log and see if it is loaded. - When you have isolated the problem, share it, preferably in a [js fiddle.](http://jsfiddle.net/).
Thanks for the demo and tutorial. I used your example as the basis for the following game: https://www.levidromelist.com/levidrome-list/games/memory-game I had to make a few modifications because some of the code did not work on properly on ios devices.
OK yes, I see that now--my mistake. It's part of the mobile menu. I'll look into that, thanks.
You could also try put zone.js in your page. Through major hacking it allows you to hook into flow of asynchronous api in browser. Angular uses it, but it's a separate library. It might have api that allows you to run a function before any event.
OK. I will try to be mindful of that in the future. In this case, I now see that I could have carried out a few more MCVE steps. For example, during my testing I did not disable plugins, or switch to the default theme. I could have done those to eliminate possible sources of error and observed the behavior of the error.
My experience is opposite of this. Myself, as well as many of the QA I've worked with, are now devs. QA (white box) have intimate knowledge of the codebase and how it works and write code in the same language in which it's written, often knowing how to fix the bugs that get identified. It is seen here as a natural career progression. But i can see that not being the case everywhere (as indicated by parent's experience). I'm guessing for smaller companies that's probably less of a thing (?). Did some hiring not too long ago, and I'm not remembering any dev resumes having QA experience (other than indicating familiarity with unit testing frameworks etc., which is expected nowadays), so I'm guessing it's not a path people are actively pursuing. But if I did see that experience, it would not be frowned upon, at least not by me ;)
I'll preface this by saying I am not a JS developer... From just a cursory glance at AdonisJS, it is the only JS related anything that makes sense to me. With my prior knowledge of MVC via Rails and Laravel, I could pickup AdonisJS by looking looking at examples in their docs. So it is doing a lot of things right and in a sensible manner. As for the size of the community, I see that it is a good thing. Less opinions on how to do something correctly can be a good thing. Look at state management in React, it started with Flux, then the size of the community pulled it in 100 directions. I can be sure there are still viable contenders even after Redux won. And for the single developer, another good thing. I hate the bureaucracy of developing by committee, I mean, Rails turned out well, so did Laravel.
AdonisJS is an attempt at a direct copy of Laravel. Even their docs have the same exact layout and structure. I had to do a JS programming test a while back and I had never used a Node framework. I chose Adonis because I have used Laravel for years. Despite a few differences it was incredibly easy to learn and I nailed the test.
wait what? it wasn't required before? they don't have a reCaptcha or something similar on the login page?
Thanks for sharing! Thats why i stressed its only my thoughts, because i am not entirely sure how much dependant it is on my known enviroment. I am glad to hear, you have oposite experience than some of my friends :)
Forget the captcha, how do you make a POST request in a browser without JavaScript?
with a form
lol ez
&gt;reCaptcha They're iframes, so not technically part of the login page
reCaptcha had/has a JavaScript-less version; form with checkbox to select which images is `$OBJECT`, submit, get asked again or given an encrypted string to copy paste in the outside form. It wasn't elegant but it was working without any Javascript.
Wow. Parent makes me feel old, and scared of the damage that jquery has done.
say bye with API Unofficial
Two reasons. 1) It's "bad" if you are publishing each package separately. If you do that, then when you install it, a required dependency will be missing from its package.json. 2) If you are in a large company-wide monorepo (or any monorepo large enough that it has several separate teams working on separate packages), then upgrading a top-level dep that everyone depends on can be very difficult to land, since it may require code reviews from dozens of people, and the diff may break people's packages in ways that tests may not catch (and that's without counting things like packages that no longer have active maintainers). Having deps in the top level is a strategy known as locked dependencies and it does have some theoretical benefits (e.g. only a single version of every direct dep, and thus faster installs, CI, etc), but in practice, it's very expensive to maintain, compared to the unlocked dependencies strategy (no deps at top level).
Hi /u/awayofhappening, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mixedfeelingz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/zazapeta, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/perfectpileofpickles, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
While generally speaking, I don't have a problem with this, javascript isn't the problem here. it's a big giant multinational conglomo requiring it that's a problem. it's like a bank saying "i don't have a problem with people", yet having to sift thru 'people' to find bank robbers. We all know that, at some point, googles javascript requirement is going to try and "rob the bank".
Let me know if you get stuck. Simo Ahava has a great blog about gtm that covers many examples like yours. 
That's a good idea; I might add that in next!
That's only if you're minifying for ES5. If your app's browser support matrix has native class support, it wouldn't be that big.
Hi /u/cag8f, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
no worries - looks cool i like cli art :D
Care to elaborate how you approached this?
Speaking from experience: Yes! It made me a better developer. I did this on my last job. I started as a QA engineer with dev experience. The product the company was building was in the telecom industry and was very 'hard' IT (protocols, real time stuff, etc..) . After 6 months I was promoted dev, so basically I used the testing job as a way to introduce myself to the telecom business and work myself up from junior dev to junior dev in a more challenging job where I could grow better. Besides being interesting for my path in the company, having some theoretical and practical testing experience made me a better developer, I a 100% sure of that. Developers without testing experience take so much for granted. Remember: "Pay attention to zeros. If there is a zero, someone will divide by it" If you can, take a simple theoretical course on software testing (google ISTQB) An important thing to keep in mind is that if you want to go back to dev, communicate it. 6 months to me was shorter than expected, but after a year without actual roadmap to dev I probably would have left or asked for a concrete roadmap. But I guess my boss knew that so gave me a challenging opportunity. A big pro in your job seems to be that you're going to do testing entirely in a programming language. Not some tool like SoapUI/postman or manual testing. So in essence you are programming, just not an end product but a test suite. I am actually not seeing the problem with that. I would much rather do that than be dev on paper but bugfixing legacy products, because the biggest part of a dev job in reality is working on existing company products, not new stuff.
I thought about making it a browser extension at first, but what turned me off from that idea is needing to pay a fee in order to be able to post it on the Chrome Web Store, as well as having to go through a testing process to post as a Firefox Add-on. I wanted to make something that I could use myself, as well as share with others right away. I might turn it into an extension at some later point in time.
I've done just that at my company! Are you using lerna? Or are you just doing the dependency resolution through yarn?
Thank you! It works on the redesign as well as `old.reddit.com`.
Sorry, I read the blog post, and you mention that Redux Team talks to Facebook sometimes, which is why I made that suggestion. It's really too bad that the React Dev Tools are so spartan. Someone should step up with a competing solution.
No, Angular has surpassed React for performance. Why is that surprising? Angular Team just focused on performance when they saw that performance was converting people to React.
.. I don't understand your analogy at all.
What?
Intuition, mostly. I looked at the global variables, found properties that weren't the built-ins, then looked at the values they contained. It was pretty clear that `G` was the game object once I looked at it. If there wasn't any state in a global, my next approach would have been to look at the sources, find the bundle, look for some initialization code, then add the game state object from there to a global. And if that didn't work, I would just pick a point in the middle of each square in the canvas and check the pixel color, then create a click event.
I have searched for this and not seen any benchmarks on the fact, so I just don't actually believe you.
&gt;bank robbers are still people? Bad-js is still javascript? but not all js/people are bad-js/bank-robbers? Was it really that hard of an analogy? I didn't think it was that hard.
Thank you!
The new API might change before it fully launches. So you might need to learn it and then re-learn parts of it. Not the biggest problem, as long as you don't mind that kind of thing.
I applaud and appreciate the encouragement. Currently, I have two other open-source projects I'm working on (including porting one to Hooks), but React DevTools is probably a better career piece tbh.
Thanks for the reply, what would you consider "JS Basics"?
Can't help.
When you were working on this for new code blocks did you consider using a mutation observer over the set interval method? I'm not to sure which one is more proficient. For the IDE, while it's not really needed for smaller code, I'm just spoiled by code suggestions, so I don't have to type out everything, lol. Could try to make something that allows you to also run the code as well, just shove jsfiddle/codepen in to a reddit extension. And, sorry, I haven't tried out your script, but does it do syntax highlighting as you type code when posting a comment?
You don't have to pay a fee to post it as a Chrome extension.
I didn't use a mutation observer more out of laziness than anything else, though I imagine it would be much more efficient that the interval method. I think I'm going to switch it over now that you've mentioned it. No, it doesn't highlight it as you're writing it; only after you've posted the code.
When you ship code tomorrow, you're shipping it with those polyfills, all for the class based api into react. There's a lot of boilerplate that every class needs for [es5] javascript because they aren't real classes. And, lets be honest, in es6 they aren't real classes either. Secondly, even when they are real classes, you still can't minify any of the class member names. Where as functions can be minified to the transpilers content. 
It doesn't feel safe anymore. Requests more tracking.
Are you sure? [This page](https://developer.chrome.com/webstore/publish#pay-the-developer-signup-fee) tells me that I do. Also, when visiting my Chrome Developer Dashboard, I get text at the bottom of the page saying: &gt; A one-time developer registration fee of US$5.00 is required to verify your account and publish items.
Currently, we have examples of just about every monorepo setup you could imagine (some react-component-only monorepos use lerna, some use yarn workspaces), and one does locked dependencies (without workspaces due to hitting performance ceilings in yarn resolution). One setup has a CI job that stitches several repos into a "monorepo" of sorts in docker to run tests w/ linked deps. The majority of projects (some 800 of them) are still in separate repos. The company-wide monorepo is still in the planning/research stage. The plan right now is to build tooling to facilitate greenkeeping in the current multi-repo world and then leverage that tooling to ease the transition for all the projects into a single monorepo. We're exploring yarn PNP (among a bunch of other options) to solve scalability issues. BTW, if you're interested in working on this stuff and are ok w/ living in SF Bay area, let me know. We're hiring and we pay for relocation costs :)
&gt; When you ship code tomorrow, you're shipping it with those polyfills Not necessarily; I have had projects that didn't support IE, and all evergreen browsers have very robust ES support. &gt; all for the class based api into react How can you be sure the rest of your app doesn't include a class polyfill? My apps have hundreds of sub-dependencies. I've also written open-source libraries which include them.
&gt; How can you be sure the rest of your app doesn't include a class polyfill? My apps have hundreds of sub-dependencies. I've also written open-source libraries which include them. You're right, I can't assume that. *all* is not the right word. My mistake. There is a lot of boilerplate code shipped with react apps for the each class that is transpiled, and I do think that most of the code from hooks, will be smaller than the same implementation as a renderProp or HoC. 
&gt;The Web Component specification, whilst powerful in its own right, seems to lack some of the elegance of React or Vue code. Yep, and you don't get any of the automatic performance optimization or helpers that those frameworks provide. The platform should stop trying to provide these high-level solutions, because committees can't compete with the market on those terms. Give us super low-level access to the device, within the bounds of the security model. Web components need to die already.
I know you're saying comparable, but in what sense? A backend framework for NodeJS, or a front-end framework that works similar to laravel (maybe something that handles SPA stuff for you?)?
This is actually pretty great, but it needs to be simplified. It isn't the kind of API that lots of people would eagerly adopt. The Web is popular because of its ease of development, for the most part.
yeah, but the iframe still contains js
People learn frameworks nowadays, not how the web, http or browsers woek.
Im still learning JavaScript. How am I supposed to login?
A simulation of webOS's service bus and a few services, to run/test webOS code without running it on a hardware device: &amp;#x200B; [https://github.com/ericblade/webos-service-stub](https://github.com/ericblade/webos-service-stub) &amp;#x200B;
They do indeed, but how's jQuery at fault here? 
This has been a pet project of mine for a while now – just published a major update that I'd love to get feedback on. You can check it out on GitHub [here](https://github.com/zachwinter/kaleidosync). Hope you like it! 
Hey! Yes, you can open issues directly on the repo :)
By it's mere existence. I'm not saying it wouldn't be something else if it wasn't jQuery, nor that jQuery did anything wrong, but the fact is that it was the lowest pole on the totem makes jQuery a part of the problem.
Agreed. Are we idiots?
&gt; But, because it may save bandwidth or help pages load more quickly, a tiny minority of our users (0.1%) choose to keep it off. Wow. Why do they have to take a jab at people who don't want to use JS for legitimate reasons?
Just use jQuery, great tool when you're still learning JS.
I downvoted for Medium self-promotion in general.
This is pretty cool!
The reason is that the clientside began taking over a lot of work that was traditionally backend, and HTML was not even remotely capable of handling this. That's why Angular exploded (supercharged HTML), and why React did too (makes HTML available to your procedural logic).
I'm looking forward to seeing how big of a difference it makes. If the API remains this weird when 16.7 launches, it will need to be justified by performance.
*Richard Stallman triggered*
You can mitigate those A LOT with Ublock Origin
Fix your css and optimize used js please. It’s lounge enough to load and then you can scroll horizontally on phone. 
It's almost like the internet is built in layers of protocols and functionality, like any software stack, enabling users and developers to interact with the features and pros/cons there-of most relevant for them. Wouldn't that be a lovely world?
i will say the pie chart is a little wierd. i realize [this](https://imgur.com/a/5SwSiGQ) is trying to represent 4 equal 25% peices... but it doesn't, at first glance, appear that way. 
Actually a plausible thought in today’s world.
thanks!
Thank you. 
You shouldn't use jQuery until you learn JavaScript properly. Otherwise you become jQuery developer and then can't shift to modern UI tools like Vue or React as they require complete vanilla JS knowledge. 
most sites just get sooo much better with out javascript, like Medium and most new's sites (unless you enjoy popovers and unrelated floating video news)
Woah wasn’t are of this at all, thanks 🙏 
I like it, thank you. One comment I'd have is, for the &lt;select&gt; on Chrome 69.0.3497.100 all the non-hovered &lt;option&gt; are white background and white text (so can't be read). Hovered &lt;option&gt; is blue background and white text.
So does that mean you're serving the pug templates and having them render with pug in the browser? In that case you could probably use the raw loader to send the templates as strings, or you could use the file loader and send them as individual resources, but that sort of defeats the point. Imo, using the pug loader with HtmlWebpackPlugin to render them into HTML before sending is probably what we want. But I'm pretty inexperienced with all this so idk.
Thank you! And omg, please do! 
I'm guessing Google is just like "If we can't mine all of your data, then what's the point of serving you"
Yeah, I guess a lot of sites do. I use the internet more for functionality than consuming articles, which I tend to see using Google AMP. But for anything functional, everything has been moving towards JavaScript-based applications. But since those are usually behind authentication and not add supported, they tend to be cleaner and less reliant on shit loads of popups and content interruptions. 
I highly recommend investing time to learn GraphQL and use the Prisma framework/library. GraphQL makes understanding your API simple, and frontend developers can easily discover all of the types that are available for them to query. They then construct arbitrary queries using the very flexible GraphQL. Prisma greatly simplifies backend development by automatically generating database tables from your GraphQL schema. There are quite a few benefits to this approach, if you're interested ask more. I've been developing web applications fullstack for a few years now, and going from raw SQL to ORMs to Firebase to GraphQL with Graphcool and finally to Prisma, I've yet to find a more elegant approach (granted I've worked on small to medium sized applications that haven't yet needed intense scaling).
I'm surprised more people aren't talking about jsverify: [https://github.com/jsverify/jsverify](https://github.com/jsverify/jsverify) and property-based testing. For many of my use cases so far, property-based testing is superior to traditional unit/integration testing in so many ways. Why would you create individual, one-off test cases when you can create a model of your inputs, create some property checks, and then generate an arbitrary number of test cases? I've used property-based tests to great effect in this compiler for a markup language called AssessML: [https://github.com/Prendus/assessml](https://github.com/Prendus/assessml) With about five tests, I'm extremely confident whenever I make changes that I haven't broken anything. If I'm not mistaken, I haven't found a single bug in the compiler since implementing these property-based tests. I know all of that is pretty anecdotal, but I highly recommend looking into property-based testing.
I would find a job that is willing to mentor you or give you the time you need to figure things out. It might not be the most glorious job with the best pay, but getting paid anything to learn your craft is probably going to be very rewarding. That's my personal advice, go straight to getting paid to do what you want to do, even if it isn't glorious at first. It's worked out very well for me.
Hah, small world! I'm on the 555 market office, so not right next door, but close enough. We should definitely get some coffee some time. Btw, do you know Angus Croll? He used to work at Twitter and he sits right across from me.
True, I use both.
How is it a jab?
Good point! How would you make it simpler, or what parts seem complex?
I'm kind of tired of the game changing. I'd like to play the game I learned before the rules change again. I wasn't really having problems with the current game.
A-hem: &gt; **document.ready(function() {** &gt; $('#Google').hack().transferMoney(56545225).fadeOut() &gt; **})**
That's complete nonsense, modern UI tools like React strongly discourage direct DOM manipulation in the first place, it doesn't matter if you learned to do so with or without jQuery because with React you just won't do it. It doesn't matter if you ditch `$` or `querySelector`. &amp;#x200B; Using jQuery requires "complete vanilla JS knowledge" as much as React does, probably even more so, because with jQuery you still manipulate DOM. &amp;#x200B; Learning jQuery might be a waste of time if you then land in a project that doesn't use it, and there are more and more of them, but saying that it somehow makes switch to React harder is pure BS.
Actually, I misinterpreted it :)
Why the hell is this even news? Just one more site to whitelist if you are turning off JS. 
Nah man, you do it in the browser console (document already loaded) They'll never see it coming
Hi /u/Kilawaga, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dakruchko, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/arnauda9, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/PM_ME_YOUR_PIXELART, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
thanks
&gt;$('#Google').hack().transferMoney(56545225).fadeOut() You forgot to cover your tracks though. `$('#Google').hack().transferMoney(56545225).deleteIPAddress.fadeOut()` &amp;#x200B;
Cool project! Do you have some debugging display? I'd love to see how "accurate" this is. I made some visualizer in the past with three js but could not get spotify integration to work as you are not allowed to audiodecode the songs. Your approach is very interesting however!
I'm surprised this didn't happened earlier...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [zachwinter/kaleidosync/.../**spotify-connect.js** (master → 07b8e16)](https://github.com/zachwinter/kaleidosync/blob/07b8e163725dcdf17528bbfa4aa234ad54f44945/public/js/kaleidosync/spotify-connect.js) ---- 
I tend to use the convention: function Foo(...) { return {...} } interface Foo extends ReturnType&lt;typeof Foo&gt; {} namespace Foo { export function of (bar: Bar) { return Foo(...) } } export default Foo 
$('#boobsbr').woosh()
That's why you block some of the JS but not all of it
The project has progressed to a alpha, and we've changed the business model. I'd love to know what you think of the new model: [https://javascriptpractice.com/](https://javascriptpractice.com/)
Would you mind checking out the alpha and letting me know what you think of the new business model?[https://javascriptpractice.com/](https://javascriptpractice.com/)
As far as I know the JavaScript spec still refers it as a variable even if the const declarator is used. A variable in JavaScript is named reference to a value. Perhaps it's not truly a variable in the mathematical sense, but in JavaScript that is still the nomenclature, AFAIK
The project has progressed to alpha. Mind checking it out again and letting me know what you think? I still haven't fixed the input issues in FireFox, but a lot of other stuff has changed: [https://javascriptpractice.com/](https://javascriptpractice.com/)
So, we've changed the business model quite a bit. It's quite novel actually and I'd like to know what you think: [https://javascriptpractice.com/](https://javascriptpractice.com/)
The Primitive data types section has been fully fleshed out, I'd love to know what you think now: [https://javascriptpractice.com/](https://javascriptpractice.com/)
Thanks for the contrast. 
Hey, I've changed the business model quite a bit. I've moved on to alpha, mind taking a look again and letting me know what you think? [https://javascriptpractice.com/](https://javascriptpractice.com/)
Yeah I couldn’t really tell he was joking or being sarcastic. That’s one that needs the /s
lolwut
JESUS CHRIST I'll be right back
WE USE JQUERY IN THIS HOUSE!!!! $(document).ready(function() { $('#Google').hack().transferMoney(56545225).fadeOut() }) 
Well maybe. I still don't know what's going on. 
Facebook will never pursue this social network.
Because ironically it's mostly developers who hate Javascript the most, so are keeping it turned off.
thats how i read it..i wouldnt be suprised if some google engineer is now working on this
i think we just have a low opinion of google.
A-hem: ahem: ``` $(function() { $('#Google').hack().transferMoney(56545225).fadeOut() }) ```
&gt; trying the faster Angular 7 1. I don't believe Angular is actually faster 2. Why would any team comfortable with React that has all the support in the world with tones of supporting packages want to switch to the ever changing `built with consulting in mind` Angular framework? 
Probably BS by the Angular marketing team. They need something to trick enterprises into signing consulting contracts. 
I mean who doesn't use Javascript in 2018?
Because you can't install database with zip codes from npm :D
What drives you to be such a masochist? Working with JS in PDF is a pain. The standard Adobe Reader does not even support JS Debugging. Additionally they only support a subset of ES5.
Thanks for your support.
Indeed, because of cli, Code calculation lost accuracy And legend number is percentage.
There are a number of corners of the internet that are better with it turned off. But most sites are fine with it on.
I see your point on the community, but I think having decent developer mindshare and active package development is an important factor in whether to use a framework. On the mindshare front - it's easier to hire Devs when the framework has a large pool of users. It *is* fairly easy to pick up if you come from rails or laravel (which is why I use it on personal) but it does mean that you're hiring from a smaller pool, or one that has to get up to speed. As for a single developer - politics aside, having a single developer means that we're waiting for bug fixes, features and releases with different maybe different priorities from the users. It also suffers from the bus problem - if the guy disappears then the framework dies. Having a committee *can* (read: not will) lead to incessant bike shedding, half baked features and bloat, but it can also help steer the framework towards a greater use cases and different applications. Having multiple perspectives to a problem can only be beneficial, and having poor requirement and stakeholdee management should not be seen as a benefit.
Why former?
Try this: https://github.com/getify/You-Dont-Know-JS
That’s basically the goal of my books (most of which are free to read online, so you can check if they suit your taste): http://exploringjs.com
all good as long as his beard color doesn't turn pink
All point of writing to url is history, so why do you write it to url if you don't want the navigation.
some time ago I did some research when I was deciding if I want to use discord at all or not (I ended deciding to not use it). during my searches I bumped into the fact that discord is officially hostile towards third party clients. did things change in this regard or you just don't care and focus on the coding aspect?
css problems.
Ah I'd love to! However, I'm inside the EU... Well, until Theresa May pulls her finger out anyway
Ah I'd love to! However, I'm inside the EU... Well, until Theresa May pulls her finger out anyway
Stupid question, but is it possible to have a login page without JavaScript?
You can use `history.replaceState` to not create a new entry in the history list.
Yeah that’s in accurate. People still use a lot of html / css and their counter parts in app development. So for electron, probably Vue or another js framework would best suited.
Awesome. Well done man! 😊
Thanks to both of you for contributing with content that has \*zero\* value in the context of OPs post. 
I have the same problem. I've always used self hosted gitlab
Didn't they give you a challenge or a problem to solve instead? It would seem fair to give you a chance to prove yourself....
 No, when I asked the reason, I also ask for the engineering interview, but they just told me my github didn't convince them. It's a pretty big company so I guess they don't have time for that :( 
You dodged a bullet. Working for those asshats wouldn’t have been worth the money.
I have been in similar situation as well, but I was always offered to solve a problem the company had to prove the skills. required for the job
Arf, don't know, the company looks pretty cool, but thank you, that kind of cheer me up.
If you don't feel your Github accurately represents your work, don't advertise it on your CV. If you have public repos on your Github that don't serve any particular purpose or use to anyone and don't show good quality code, take them down or hide them. Honestly they might not have liked your Github just because it was messy.
You Don't Know JS is the best series to go through in 2018.
I think you shouldn't dwell on this too much. The grass is always greener ;) good luck!
Interesting point of view. But I think the github link was required for applying. And I would say 75% of the company I applied for required a github link. 
thank you :) 
I say it's good you did not end up working there. Dev or any other job you take is spending your life with certain people. It has to be fun on at least most days (if you can afford to work in such environment). The way they rejected you might mean that its a place which will repeatedly make you feel insecure. You might know or not know a lot of things, but if you feel a lot insecure you definitely won't learn a lot of things. Find a better place to spend one third of your average day's life. Don't be frustrated. &amp;#x200B; &amp;#x200B;
Yeah, I think I needed to hear that but it's just seems so hard sometimes. I am very confident about my abilities to produce high quality code, but not very confident on other stuff such as I will ever find a company that will value my skills. I always worked for "bad" companies and was highly underpaid, and I guess I'm struggling giving my career a new dynamic. 
Wow, noob - have you not read about the jquerys in-built hacking code? $.getGooglesMoney(“your-btc-address”)
Don't let yourself down. One of my lead said a nice thing most of us work for 25-30 or more years. Its a Marathon and not a 100 mtrs dash. So need to hang in and finish the race and there will be high energy and low on energy times in race. Keep the skills up and contribute to companies growth. I founded two startup and was a founding member in engineering team of 3rd. All three were disasters for various reasons. One raised a fund of 1.2 M GBP as well. But all into dust 8 years of time. And it's okay now.
Just get involved in a few open source projects, contribute and they'll surely know they missed a good one!
Of course. The Internet operated this way for many years successfully. HTML, from the very early days (think 90s), and HTTP had forms and the POST method to enable transmission of form data (such as user names and passwords).
Yeah I guess I should, but my personal project use a lot of my time right now. And I honestly doesn't know where to start. I read few posts about how to get involved in open source, but that doesn't really helped me. Any advice maybe ?
Of course. The Internet operated this way for many years successfully. HTML, from the very early days (think 90s), and HTTP had forms and the POST method to enable transmission of form data (such as user names and passwords).
Hi Reddit! &amp;#x200B; My name is Maksim and I'm here to present you my second launched project - Taggy. I was going to do the same with my first one, DailyQ, but unfortunately, I shut it down right after launching it. But hopefully, I'm not going to do the same with the current project. &amp;#x200B; Taggy is a desktop application for fast saving texts, links or images using only shortcuts. With Taggy you don't need to copy-paste anything or even open an application. Everything you need to do is copy whatever you want to save (any text, link or image) and press a special shortcut for saving. That's it, easy huh? &amp;#x200B; And after you finish working, reading or whatever you were doing, you can open an application, open tab 'Unsorted' and sort everything how you want - you don't have to worry about it while you are focusing on something else. &amp;#x200B; Let me know what you think about Taggy and how you think I can make it better :)
I won't be reading it. I watched one of the presentations for the book ([e.g.](https://www.youtube.com/watch?v=Bl7pZ9kbenI)) and it didn't convince me at all. From Crockford's own explanation I get the idea that: - The book is not at all about _how JS works_ but about Crockford getting cranky with every single thing in the language. - It is _clearly_ a "book with a mission", and that mission is to push for certain ideas. Ideas which Crockford has already tried to push for. In some cases he pushes for things which not only I don't share, but I also believe it's _not_ a good way. It's getting tiring because of his insistence on going against the current _just because_, with no real argument about it being actually "better" in any particular way. - In a number of cases, it feels like the book is Crockford _catching up_ with a number of things. To include now a full chapter on "purity" feels weird. - It also feels like a mishmash of subjects. A chapter on _Date_ and one on _JSON_, one on _Testing_? It not only feels like a bag full of odds and ends, but also subjects with _wildly different reach_.
Vanilla JS &amp; a responsive CSS framework is perfectly useable. There's no actual need for a CSS framework even, but of course it would make life easier.
Just for clarification: The problem was that you have no or little content, or that they saw what you have and didn't like it?
I didn't have the chance to know :/ 
This is one of the reasons using it. Semicolons raise the information density and I don't see the advantage in adding extra characters I don't need.
Check out rule number three.
I consider a good github a bonus when looking at candidates, not a requirement. I know some amazing devs that dont even like git let alone github that much cause they were doing alot of solo jobs. Like most people are saying, you dodged a bullet, and that engineer will slowdown/undermine the company in the long run. &amp;#x200B;
Show us your github. That's the only way we can judge.
[https://github.com/tomquinonero/](https://github.com/tomquinonero/)
So I get that a html form can I have a on submit action to POST a login, but when the response is received how would a page be refreshed/updated with js? What happened on the response to the POST request?
awww man don't worry about it, big company or small it could have been some engineer that has 0 hiring sense/skills and just wanted to get back to coding. Im saying this cause i know engineers like this. They intentionally do a bad job so they can just go back to coding and not be asked to get involved in the hiring process again. 
I see. I think there are various approaches. One is to completely get rid of your Github profile as something to include in your resume. I know many companies ask for it, but it is one option. You may simply explain that you were not allowed to publish code at your previous job. It is a valid explanation. It is, in any case, a risky solution. You could add some _different_ content. You may, say, use your Github account to publish your blog or to store some katas and exercises. This is pretty easy to set up and fill to an "adequate level". You then have the explanation that, yes, you do have a Github account and you do have content on it, but because of your former employer's rules, you use it for these. A blog, if you write well and about interesting things, can be a nice substitute. Exercises allow you to actually show some code, and let's them see your style and abilities, while being something you can do without much effort. Pick up a number or _typical_ exercises and solve them in a nice and polished way. You can even pick up a couple of typical _interview challenges_ and do them. That way, they may see you already have something similar to what they would've asked you. They may still ask you to solve their particular challenge, but it still gives them a good impression. I think the main point is: - Choose whatever approach you feel comfortable with and makes you feel confident. If you don't want to write 20 open source libraries just to have something on Github, that is _perfectly fine_. - But, on the other hand, when talking to a company, always explain the circumstances. "Sorry, but my employer didn't allow me to publish code", "I have a Github account but I only use it for exercises", "You can browse _this_ and _this_ repo; the rest is some unfinished project I didn't have time to continue"... Whatever the reason, it is IMHO perfectly valid. But you need to explain that reason so that they don't jump to a different conclusion.
I can't believe nobody asked this before!
Thank you for this pretty complete answer 😊 I think I want to keep my github but you right I should explain that my former employer didn't allow me to publish code there. 
There are a few things you never share with any prospect employer: 1. Your code 2. Your pay check If they ask to see your programming you simply tell them it's all closed source proprietary work and you can't share it. There is no reason to share your Github profile either, because those silly questions you asked 2 years ago might bite you in the ass. Or that one quick project you did for fun a while back is shitty code and they'll judge you on it as if it were your professional work. Pay check: also simple, they aren't sharing what they are paying your colleagues-to-be, do they? There is not a single reason for you to want to share that information. I've been asked to bring a copy a few times and I replied: "Sure, that makes sense, can you also share a copy of all salaries of yourself and every team member I'd be working with?" Their answer is always "no". In any case, My dude, You dodged a bullet.
\&gt;I refuse to use anything owned by M$ and this right here is a good reason to reject an applicant.
For all we know his GitHub was full of Nazi references and CP! But yeah, it looks fine and perfectly normal.
Still, that's not public. For my last job I gave access to the repo, but that's a painful thing to do. 
They dont know what they are doing, feel happy you got out that fast
Was thinking you were the guy who used machine learning to uncensor hentai. That would affect your interview for sure. 
hahahahhaha 
&gt;I refuse Indeed, that is the kind of statement that would lead me to think 'this dude may be very obstinate and hard to work with'
I believe what you are looking for is the "You don't know JS" collection [https://duckduckgo.com/?q=you+doiunt+know+js&amp;t=ffab&amp;atb=v140-7b\_&amp;ia=software](https://duckduckgo.com/?q=you+doiunt+know+js&amp;t=ffab&amp;atb=v140-7b_&amp;ia=software)
If you add a definition of "the entirety of javascript" in your description, I think more users would be able to help. There's JavaScript the language (i.e. ECMAScript), JavaScript the ecosystem (e.g. npm), JavaScript the runtime (e.g. V8). There's no single book that covers them _all_.
But what causes the redirect if it's not JavaScript?
Unfortunately this another form of snobbery that we have to deal with. Just like some won't hire people without degrees, some people won't hire without GitHub. It's frustrating but you probably dodged a bullet as the company obviously measures value In a different way to you or I.
hahaha solid point.
Dr. Axel Rauschmayer is one of the best authors / bloggers. You should also follow his blog (http://2ality.com/) and read his other books :p
The action attribute in the form. It would have the relative url for the receiving end of the data. Thr redirect starts as soon as u click a submit button inside the form. Think of it as when u click an anchor tag u are redirected to another page, there is no js involved there as well
by all means contribute to open source if you enjoy it but do not feel pressured to just for hiring sake.
Good that you're continuing the trend just to showcase your superiority. 
What's the leading theory on how this guy could comment on a 2018 reddit post from 1998? I'm assuming he's living in 1998 with that obsolete view of an arrogant Microsoft (even the $ instead of S is so 90's). I'm genuinely curious. Maybe he's a time traveller? Perhaps a wormhole opened up in his computer when he defragged 7 times in a row? Did he beat the game built into Excel? We need answers o_0
&gt; do feel more companies should care about open-source contributions The should, but if your previous work was all closed source then there is nothing you could have done and you shouldnt be punished by it.
Hi, my 2c. I run a tech company, and I hire the devs. We ask salary expectations of all our candidates. Everyone has happily shared what they make. Have you ever heard of the term the “awesome asshole”. Your phrase asking about salaries of the company falls into that category. Awesome assholes are weeded our of companies the fastest as they destroy culture with remarks just like that. Maybe give your approach to interviews a little adjustment. 
I am one of the senior engineers conducting interviews and whenever we are hiring new engineers, having a GitHub or BitBucket account with some public code in it is just a plus but never eliminatory. If it comes to reviewing your git you would have already been invited for an on-site tech interview 
wait what? you have a good amount of activity. 
[removed]
What the fuck were they expecting more than this? I'm a professional web dev with 8 years experience and my github has a lot less than yours. You dodged a bullet here.
GitHub as hiring reference is - in my personal opinion - an overhyped thing. My GitHub ( and StackOverflow ) is full of stupid unfinished projects and dumb questions because both accounts are made when I was 12 years old. They wouldn't hire a 12 year old, so they shouldn't look at the stupid questions / projects I was doing when I was 12. If they didn't hire you because of your GitHub account you wouldn't want to work there as well. So good for you they didn't hire you. 
I just started [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript) and then Google and Stackoverflow are your friend. I found it helped to have a "real" project to work on, as I had a problem to solve. 4 years later and still a noob....
So are you still looking for a job? If you're ever interested in working as a front-end dev in the Netherlands I can hook you up with an interview.
What "data" could they possiblity get via JavaScript on the login page? The user is literally logging into the most reliable identifier imaginable, their google account. I'm not sure what else they could want.
It's a good thing trust me, judging someone from their GitHub activity is foolish and stupid, if someone has contributed to a lot of open source projects it's a good thing and I'd definitely take that in to consideration when hiring a candidate but to make that the sole factor to judge a candidate is unethical. Don't let yourself down you deserve better.
The browser just does that
This sounds like it could be useful, I semi recently released an open source Chatbot framework which was built as the client didn't want to use any cloud services, https://github.com/jackdh/RasaTalk/ I know I'm lacking enough test coverage however would love some feedback on it!
I have to say all comments here make me feel way better :) I'm not a long time reddit user, but that feels really good to have a place to share these kinds of things.
do you know "Wakatime" ? it's a editor plugin that records you're coding activity and shows you graps over how much time spend coding dayily and what files/git repo you use the most. it's kind of fun but could possibly work as o other "metric" of you're work ethic with out showing code you don't own 
How would this add "more tracking"?
Yup
If I were making a hiring decision, I won't be looking for 10k stars on your projects, or that there are a lot of OS projects. I would just make sure you have a few projects so that I know you _care_ about OS. So I definitely won't set you aside based on your profile. Another thing to remember is that the feedback companies give you isn't always the accurate one. They may have other reasons they are not sharing and saying "We don't like your GitHub" is just their standard response.
I didn't but thanks :) Just installed it on VSCode! 
Eh that wasn't a great call on their side... I mean there are a whole bunch of ways to test a developers skill level. Stackoverflow points, a personal portfolio website, a personal blog about code, give the developer a project to complete or as you have said a technical code review. A persons skill level is important sure, but I think something that is as important is whether that person will fit into the team personality wise and their career goals are aligned with the companies. Doesn't sound like a nice company to work for tbh.
I wouldn't look at it as a 'punishment'. When a company assess you, and when you assess a company, it's all about fit. I understand not everyone can, but some companies want to see that you do coding in your spare time. They want people who code _all the time_, and so they expect your GitHub to be filled with personal projects. Obviously, these sort of companies are not for everyone, but it's not uncommon (from my experience). The company OP applied for maybe this sort of company, so it's just not a good _fit_. Even OP said the company sounds decent, and maybe it is, but it's not the right _fit_ for OP, and OP may not enjoy working there anyways. And that's OK, there are many great companies who don't judge you on your GitHub.
Nah dude I think you still misunderstand. It's not a question of semantics over salary vs paycheck, it's a question of salary vs salary *expectation*. It's perfectly fine to give your salary expectation but not want to talk about your current salary. I agree that asking to see everyone else's salaries is a stupid response to that question though, even if it is facetious.
What makes asking about the company salaries a awesome asshole? Why is so destructive to the culture? I don’t see the relation. 
Why don't you consider putting your personal project on GitHub instead of in a private BitBucket repo? Fair enough if it's just too sensitive to put out in the open.
Were they a Rails shop? If not, maybe they have a chip on their shoulder about the Rails part of "Rails and Vue?" People tend to make simplifying assumptions about a lot of things they shouldn't, and hiring is one of the worst. Also, Java sucks. ;-)
That's cool, we're not open to remote work right now though. Maybe in the future :)
Yeah that's not a lib or something, that's a website. And I will post it soon on reddit by the way :) But yeah not something that is meant to be open for everyone to see.
Did it... Work?
Allright, thanks anyway :)
Hmm but what is it about the website code that can’t be open to the public? If it’s the data on the site then maybe consider separating your concerns. So you could have the frontend/backend in a publicly accessible repo and any sensitive data in a database or something like that. Anyway, I get there are many reasons to use private repos but I’ve found, over the years, that I kept way more things *secret* than I needed to and that ultimately nobody cares about stealing my code and if they did I would take it as a compliment.
Agreed, this point can't be stated enough
No I feel I should contribute, because I'm sure that will make me a better dev, and I will discover a lot of nice patterns. I just never did it 😕
&gt; Their response is still that of the “awesome asshole” lol, you are calling him an asshole because he refuses to concede an unfair advantage in salary negotiations. In the industry we call this behavior "Pathetic asshole".
"Everyone has happily shared what they make" Are you sure they didn't feel pressured at all?!
I would hope the amount of activity is not _that_ relevant. If they didn't like their GitHub, perhaps they didn't like the coding style or quality or something?
Nice ones are: * [https://eloquentjavascript.net/](https://eloquentjavascript.net/) * [https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read) That is not about "entirety of javascript" (frameworks, tools, architecture, ...) though, only about javascript as a language.
It request to be put on every page even no form. 
Leave them a rightful review on Glassdoor and google. Honesty, so at least others will be wary of this 
Everyone is terrible at negotiating
Yeah I just removed unused repo on my github. Thanks!
People generally dont unless they are new to the job market. Everyone i know pads up when asked as have I
Go check out "Two Minute Papers". Where we are with AI filing in the blanks is crazy. 
Thank you! :) Nope, not right now :( Right now you can only assign different tags to them. For example, for articles about javascript - #article #javascript, for articles about css - #article #css.
I’ve started doing the same thing on and off. Where did you start? What programs did you use?, what sites did you use?, what’s your approach on learning yourself? Always nice to see how other people are doing it. Maybe learn some new things.
[removed]
Honestly, I had a co-worker who got turned down for a job he really wanted. The next week he went to a conference and met the hiring manager there. He asked to meet him, understand why he was turned down and explained why he was the right person. He got the job and he's now a senior manager. What have you got to lose? If you like the company, explain and ask to share more of your work. 
You clearly didn't look at his Github profile properly or don't know how to understand a Github account because it's literally devoid of anything meaningful. He has a bunch of projects with virtually 1 commit *from several years ago* and then the other half all have basically 2 commits from the past two weeks... Or in other words, he has virtually no commits on some repos that are *very very sporadically* created.
Well I’m any case it’s illegal to ask salary where I live now. There are legitimate reasons to not want to share your salary. For instance, maybe the first job you took was way lower paying than industry standard, but was a really good learning opportunity. Does this mean you should be required to have a slower climb in salary because the next shop only wants to give you a certain percentage more? Before it became illegal to ask, I had a lot of success politely explaining that I don’t discuss exact figures but I’d be happy to provide the average salary range for this position in this area.
I'm just going to be bluntly honest to save you grief down the road: Your writing skills need work. Your article about JavaScript was difficult to read in some parts either because you used the wrong grammatical syntax, or you misspelled words to the point where it became difficult to figure out what you were trying to say. That alone may have been the reason they disqualified you. Developers need to be able to effectively communicate with one another, especially in writing. Many employers are very critical of communication skills for this reason. If what you write isn't easy to understand, particularly that which is critical to effectively communicating the minutiae of complex code, you won't be earning yourself any points. I'm not trying to tear you down, but help you identify something that might be holding you back that others might be too scared to point out. As a senior developer who helps make hiring decisions, written communication skills are something that I want in a prospective teammate. Reading poorly documented code is a nightmare, as any developer will tell you.
Regionally where are you located? Are you near tech hubs? Very curious. Thanks for the response. 
They are allowed to opt out and it doesn’t reflect negatively at all. We’re very upfront about this. It’s to gauge where you think you fall, not where we think you do. 
Trust me. We know when you pad. 
I think it takes an awesome asshole to classify others as one. 
I didn’t call anyone an asshole. I merely stated his type of reply is categorized in this persona. Should google around it’s a very common way to describe this type of response. It doesn’t make him an asshole by any means. It’s merely to describe a persona that does not fit well inside tech companies. Literally decades of research into this. 
It’s not about asking, it’s entirely about how you ask. Gods words imply highly defensive reactions to being probed. And then immediately goes on the offence. This is a huge red flag. Never be combative in an interview. 
Lipstick on the pig 🐽 
Thank you for that feedback. I agree, as you may notice English ain't my mother tongue. I wrote that JS stuff for notes but also as an exercise. I understand how important this is, and I think I should continue in that path and I'll make progress. 
Hey, thanks for the tip. I'll check it out. Also yes it was me and I'm glad it introduce you to that great course :)
[removed]
Interesting. Thank you! 
I am in the same path. Reading some books, following some tweets and reddit communities, talking with coworkers and asking them for help as mentors. Next step I am planning is to write a simple crud program ("the little blog thing") using different frameworks to see the differences between them and to get my feet wet. It's ok to fail and to take wrong ways in the beginning. This is all part of the learning process I guess.
If they made that mistake you can bet they are making many more mistakes running their company.
Exactly it looks cool, it does not mean is going to be cool. Just a question, was it a start up?
No because he can read their minds. Don't you know anything about mind-reading?
Also known as “Brilliant Jerks”, “Brilliant assholes”, https://www.arcules.com/brilliant-assholes-need-not-apply-how-were-breaking-the-industry-mold-for-hiring-developers/
I would say it's a startup turned adult, as they are around 500 people working there.
I firmly believe these types of requirements should fall under discrimination for the exact point that you made about your previous employers not wanting you to write open source code. Not everyone has the same opportunities to demonstrate their work (e.g. through GitHub).
If I were to judge a candidate's GitHub profile I'd look for the following things: * How do you communicate when you report an issue in someone else's code? Is your feedback constructive? * Do you recognize and follow the existing coding style when you contribute to someone else's project, or do you just do your own thing? * How do you react when someone tries to improve your code? * How do you communicate when someone contributes to your code but you're not totally happy with how they did it, or what if it's shit? Basically, I'd want to find out whether you have an unnecessarily huge ego, and whether you're a huge ass when you can hide behind the Internet. Because that's bad and hurts teams and companies. In no way would I judge your abilities based your repos. GitHub is for developers to host and share their code and collaborate. It's not a showroom or a portfolio. If GitHub is no longer a place where we can put _all_ our code then it's basically useless. GitHub is where we share some of our best work and some of our worst. It's where we try out new approaches and tech, and we might ask questions that seem obvious to someone with experience. It's not fair to judge someone based on what they play with, but it's okay to judge how they play with others. If I want to learn about your coding and problem solving skills I would give you a small problem to solve where you can show me your best work. 
Interesting read, there is a link in the article that doesn’t work. Takes you to a google book that seems to have expired or something. Not sure if it’s just me. 
As a CTO i had to consider HR risk. I knew we needed React skills. If I hire for PHP and react my price point goes up. If I hire a frontend JS and. backend JS person, I can cross train them more easily and reduce my risk. Plus, we built our whole AI pipeline in lambda functions to save cost. It’s been great. 
Their official stance is that, howeer, you can use this with a bot token, as it is intended, and it's 100% compliant with their ToS (Even tho their ToS doesnt mention anything about third-party clients as far as I'm aware).
All depends on the level of the role you're looking to apply for. I was lucky enough to take an apprenticeship using Angular with only knowledge of python, so there's always a place to start with limited skills. The best way to develop your skills is to spend a while thinking of an app idea, and select a framework to develop it in. After a while you will naturally feel more competent and you can start building a portfolio of code for employers to browse. I'm now React/React Native junior dev on £20k and only knew angular! Hope this helps.
Of course you do. Bless your heart. 
They literally said so in the OP. Reddit is loaded with people with strong opinions and little knowledge. 
If you really like the project and want to make it better for you and youself, contribute. Learning is an okay motive but there are plenty of other ways to learn stuff. If its just for getting hired, you arent doing it for the community of the project, you are doing it for just youself in mind. Don't be that guy.
You don't know how he asked or what his tone of voice was. He could have easily used those words in a tactful way to show the company that was a ridiculous question. Or maybe by that point he didn't really care about the job and didn't care if they thought he was an asshole. Either way, you're just making assumptions. 
Companies putting weight on how green your Github commit history is, are 100% full of shit, *no exceptions*. Their loss. 
I’m being downvoted to oblivion today. 😅 If a developer pads their salary beyond what is reasonable for their current accomplishments it’s rather apparent. A senior developer who says 170k vs 150k it’s not so unreasonable. If you’re a 100k dev on paper and through conversations but say 150k. It’s a huge red flag 🚩 you’re lying. 
Well of course I’m making assumptions 😀 All I have to go by are words on the screen. If any candidate used that as a response it would be an immediate no from me. You don’t challenge the company about their other employees salaries, full stop. Tacit or defensive/offensive responses, you’re not winning points and are airing your dirty laundry so to speak. Culure in a company matters above all else. 
Hi, my 2c, too. I run a 17 year career as a developer. And I said *pay check*. Don't give employers your physical pay check. I never said anything about not giving salary expectations. Of course you should. And I have no idea what an "awesome asshole" is. I'm definitely an asshole, but awesome..?
true, only when you can afford to not pay some bills can you exercise this rigidness and even then it can just be tricky to work with someone like that. This reminds me of this zen monk thing ## Live the Buddha’s middle way The Buddha's 'middle way' is a principle which essentially refers to the fact that in all things in life we shouldn't remain in the extreme either way. We should live in the 'middle way' of things. [https://buddhaimonia.com/blog/be-like-a-zen-monk](https://buddhaimonia.com/blog/be-like-a-zen-monk)
Hi thanks for the clarity. I’ve never ever heard of anyone having to be asked for a physical pay check so my apologies for starting up the hornets nest. 🐝 I’m sure you’re lovely. 
You're fine. Screw that company, unnecessarily elitist. Unless you wrote on a resume that you wanted them to check it out, that is just horrible for their company brand and image.
Well sure, there are reasonable people like you out there :) If the applicant provides it willingly then I'll expect that they are at least proud of their work there. I mean, even if all they did was update documentation for open source projects, that's amazing and shows a level of commitment and willingness to contribute. If they only or also wrote unit tests for open source software: brilliant. You have a guy who does the work most people avoid. If they tinker away with a bunch of projects they decided to make publicly available: GREAT! Even if their code is crap I'd forgive them for it. They probably learnt a lot writing it. But there are also a lot of employers out there who will not be forgiving or accepting or understanding *at all*. They would burn your 3 year old hurried personal project to the ground, or use it as a reason not to invite you. Just for that reason I wouldn't put it into my resume. I would advise anyone to not put it in their resume, either.
Eloquent JavaScript :) https://eloquentjavascript.net/
If you have projects without tests, you should hide them.
The company cares about github and for whatever reason they didn't find yours impressive. Some companies are extremely picky. A solid github is an indicator to me that the person is passionate about engineering, is able to collaborate with other people they have never met, and shows self motivation. Most companies I know either don't look at github or look at it to the extreme (need popular projects). Ultimately the company cares about something they didn't see in you. They might have been right or wrong but there's not much to do besides move on.
Oh no worries man, I'm definitely an asshole :) I'm not even kidding. My impulse control is broken due to a brain injury. I'm being treated for it. So that was spot on. I've had the question several times. I would tell them my salary expectation during an interview, and they would ask me to provide proof of my current/previous income. It's more common than you might think, unfortunately. A lot of developers fall for it, and their employers simply abuse their trust with offering a minor salary increase.
I interview lots of people. I usually ask if they have a GitHub account and what they have there. It’s usually good for checking the level of complexity of the projects that candidates have worked on... That being said, it does not define anything. I’ve actually hired someone four months ago that did not had a GitHub account at all. I agree with the other user who said you dodged a bullet. You were working for another company. They did not have open source projects, which is fine. Unless you had some very bad stuff on your GitHub (hate speech, racism or similar stuff), that should not be a decisive factor. Good luck on your job hunting!!
Wow, those guys were just being petty - your account is fine. 
That's incredibly confusing.
While having a rich github account is usually a _good_ thing, not having one is *never* a _bad_ thing. Some of the smartest and most talented engineers I’ve ever met have absolutely blank GitHub accounts. It’s common to understand that someone’s GitHub doesn’t correlate to their performance, so if a company will go as far as to reject you for that, then that’s a place you don’t want to be. Sounds like you dodged a bullet.
Based on that thread only this sub defaults to something? "perceived"? Didn't they straight up tell him why he wasn't picked? What do you think is a matter of perspective there?
When I hire someone (CTO here), I have my managers do a problem walkthrough (instead of a whiteboard puzzle). This is essentially "Tell me about a complex problem or stack you worked on what you thought was neat or cool about it." Then for a code review they can either submit a sample or submit new code against a problem. I certainly don't go looking unless they ask me too. I have tons of terrible code on my github and everything else is private. This company you were interviewing sounds like it is being run by an asshat of an engineering lead.
Depends on who's doing the hiring and to do what. In the land of the blind the one eyed man is the king and all that, but it also means that in the land of the unemployed people who know more than you do (nevermind how much that is) you don't come out as a prospective hire. So it depends a lot. It's an uplifting **fact** for you that there are a lot of javascript devs out there who haven't and who couldn't code a space invaders game :).
Ill rephrase it: do you think companies would want to hire someone with my skills? Btw I do have professional experience in CSS, just not with JS.
This nonsense makes me so mad. Making a final call on someone's suitability for a development job based on their Github profile is all sorts of stupid. There are 100 factors that affect someone contributing (or not) to OSS and their traffic through GitHub. I understand how the rejection might impact how you see yourself, OP, but forget it and move on. As so many others have said, you dodged a bullet. This is not somewhere I'd be interested in working, regardless of how attractive it looked from the outside.
Doesn't matter what people on here think unless they're hiring JS devs. Talk to people hiring JS devs. They'll tell you if they want to hire you or not. Not sure if you have a portfolio or a blog where you talk about programming, but that's the best resume.
This. I'm a senior engineer right now, at a non-profit in a lower-paying industry to begin with. I love my job but when it's time to move on, I know I'm worth at least $30k more on the open market. No way in hell I'm sharing my current salary and inviting lowballs.
It were multiple companies, actually. Usually the 3rd talk. First talk is an intake, personality match test. Second talk is a chat with technical people. Third talk is generally with someone from HR signing contracts and such. It's usually before the 3rd talk that they ask me to bring a previous pay check with me. Which I always decline. It never gave me any issues. As for tech tests, I've done interviews myself. I usually task a dev to write me code that draws me a square. Then I want to draw a cross in the square. See how they work that out. As a front-end dev you could do that with HTML and CSS. Or you can whip up a quick SVG. Or use JS to console log a square+cross. Et cetera. But you'll also learn how they think: do they ask "what is it for?" and "where is it going to be used?" and "only squares or also rectangles?" etc. I love simple coding exercises :D You learn so much from someone by just adding to it. There are rarely wrong answers, the biggest failure is no communication, usually..
The employer I work for now did not test me on code, look at my code heavily. I was hired purely based on my personality being a good fit with everyone I met with and the senior dev knowing I could easily learn stuff. &amp;#x200B; That is the place you want to work. A place that believes in you completely vs the people you interviewed with. 
Thank you. The last part was reassuring. I am actually even planning to add some rpg elements to that, but that would be a whole separate project within a project. By the way guys, i am currently actively applying for JS dev positions so only time will tell for sure if i am hirable, i am just trying to scout out how much hope i have.
Ignore them and move on. This requirement to have a github account with zillion lines of code, 50 projects and multiple frameworks is just lunacy.Most people want to have life outside their job so expecting them to code for many more hours after that is just stupid.Yes,some people do that but most don't. I remember seeing some stats, I think it's below 5% of all devs that have public repos. I'm trying to imagine how this would work in other fields: sales guy is being interviewed: so, how many business books you wrote since you graduated last year? what do you mean you don't have your blog about sales? ...
try to rock another company)
you could stub the document object. global.document = {}; document.createElement = () =&gt; { return { innerHTML: '' } } const ele = createContact( ... ); expect(ele.innerHTML).toEqual(...)
&gt; They told me the engineer didn't like my Github. So I'm far more frustrated now. In my oldest companies, they were pretty against writing open source code and all was on a private repo. So no trace of my amazing code. Basically the TS of that topic was judged based on something that isn't relevant to his professional quality of code. So, bullet dodged, because the tech lead(s) at that company apparently have a very weird way of qualifying their applicants.
Thnx i will try.
&gt; I agree, as you may notice English ain’t my mother tongue. Corrected: I agree, as you may have noticed, English is not my mother tongue. Or I agree. As you noticed English is not my mother tongue.
I got a lot of shit on my github because I use it for small hobby project / testing new things. Why should I hide that? If a company can't understand that some hobby projects are just for fun we'll sucks to be them I will work somewhere else
Same. I use bitbucketa private repos because no random people forking my job. Hate to hear that happened to you. Best of luck!
I was going to write you a good comment but I decided not to move forward with it after viewing your GitHub 
?
Sorry, bad joke I guess 
Yeah already started on this. What i am worried about is the stability factor that my resume will show to the future recruiters. Few small tenures speaks out that the person is not someone who will hold on to them. This might a negative the recruiters in near/far future will point at. I hope you are understand the point.
Thank you. I'm French and I guess we love to wrap conditionals and stuff around our sentences to make them sound less direct :)
Thank you. I'm sure I'll be fine! I was just low on confidence after that email but y'all cheer me up :)
I got blocked by doing all the answers on a tech test. I only had to do 4. They didn't like how I wrote a recursive function. I had informed them without details on the environment (which I had asked for) that my solution prevents "too much recursion" error (I had done some early node). They rejected my application because the one answer they didn't like but the other 3 were fine. I should have done the minimum. They were a pretty awesome company. Honestly I am happier where I am now. It's a young company and it's we poach their devs now.
Not bot detection, Recapthca. It is not a requirement but they suggest it. "THEY SUGGEST TO INJECT THEIR SCRIPT EVERY PAGE YOU OWN". They can't identify if you use a blocker like disconnect. Recapthca different situation. 
Did your github account contain (somewhat) relevant code to the job you were applying to? Was it (somewhat) recent code using (somewhat) recent/modern tech/tools? 'The engineer didn't like my github" doesn't tell you *why* they didn't like it. I wouldn't really obsess over it, but with that feedback I'd take a critical look at it. You might find yourself removing a project or two and making a new one. Or doing nothing and getting a job elsewhere. It can go either way.
There's [just the readme](https://github.com/SilencerWeb/taggy-desktop-releases/) 🤷
Right, so it doesn't block the main thread on heavy loads, which is good. If React doesn't make strides in speed, it is not going to be chosen over faster frameworks for many projects.
lol, it is just a repository for releases
Exactly this. The company just warned you that they're fucked.
&gt; I don't believe Angular is actually faster According to these benchmarks, it edges out React, overall: https://imgur.com/a/Qe5r8Yr And Ivy is going to make this advantage quite decisive.
According to these benchmarks, Angular edges out React, overall: https://imgur.com/a/Qe5r8Yr And Ivy is going to make this advantage quite decisive.
I want to work for you haha
Allowing some fuck-stick engineer to make a totally uninformed judgement call based on arbitrary data stinks of shit culture. You dodged a bullet OP. Keep your head up and believe in yourself!
I mean the first interview wasn't with a tech person. It was more a company presentation, and availability check. Maybe the personality. But I like to think myself as a cool person and easy to work with :) 
Yeah, that definitely sounds like it was a personality problem. 
Agree. Canvas-rendered threejs always has had terrible performance and I can't think of a use for it.
I don't think the point of that was to have my personality judged. I was looking or advice, and how to improve my github for being able to be happy with me and what I do for a living. You don't know about me, what I've been through or how hard it is for me to interact with people. So I will kindly ask you to keep your bullshit/stupid joke to yourself.
If you are applying for jobs I have one piece of advice. Try to avoid online applications at all costs. Your resume will be one of hundreds in a pile. When you see a job opening, try to find folks that work for that company (in the same area, so likely other devs) and ask them about the company, the job etc (LinkedIn, or local meetups, local slack channels, etc). Once you have established a dialogue, ask them if you think your skill set is a good fit for the job. If they agree, send that person your CV directly and you will have a much stronger chance of getting an interview.
Yes, unlucky in this specific interview because you got stuck with this specific person interviewing you. It's probably not even company policy to rely on looking at your github to decide hiring outcomes - it's just this one douchey brogrammer who felt that was the best way to measure your proficiency - which is just plain dumb of them to do that. My guess is if you had another person at the company look at your resume, they may not even consider your github at all and you'd get a technical interview. It's just that you got unlucky and your resume was given to a jackass brogrammer who measures their dick size with github. 
I prefer $('#Google').hack().**stealMoney**(56545225).fadeOut() **})** 
Agree. The “coolness” is usually a manufactured facade spearheaded by HR. Free snacks, “work life balance”, ping pong tables and similar “perks” right on the job posting is like me including my cs:go ranking in the skills area of my resume. These things are not an instant red flag but definitely not an accurate indication of how much you’d enjoy working there.
By the sounds of things, [OP didn't get the chance to talk with a technical person](https://old.reddit.com/r/javascript/comments/9tibag/i_had_an_interview_and_they_put_me_aside_before/e8wz2uo/).
I have also had this asked of me. My response has always been that my previous salaries have no bearing on what they are willing to pay for the position. I haven't found a nicer way to convey this, but they usually get a little huffy if not visibly baffled by my non compliance. 
still a damn pig! &lt;('' &lt;)
Timestamp your data. Data is stored along with the last time it was _verified_. When you send an operation to the server, you send along the timestamp you have. If data is more recent on the server, you return an error.
Keep a WebSocket open, so the server can notify the client updates have been made.
Good point. Next time we'll say "You are a fucking disgrace, sort yourself out!" Thanks for the heads up
I agree. I am criticizing the technical person for asking the wrong questions and doing so prematurely and without explanation
Ah, sorry about that!
https://github.com/pakastin/testicle 🍒 (I know, it’s terrible name 😕)
Apparently the server doesn't support WebSocket, but thanks for the idea!
Some thoughts on this: * synch more often (best: every time something changes) or when user leaves window * synch in background, where slowlyness is not a problem * synch smaller parts for faster synching… which maybe is a bit hard to do, without the possibility of making changes to the server side.
Changes are pushed to the server any time something changes, but I try to make GET requests much less frequently as they're kind of slow for some reason. However, I could pull data from the server any time the page is focused from another tab or window. This shouldn't happen too often, I think?
Solid comment. Thanks for your contribution. Lemme give it a TL:DR, nothing. 
As someone who had to go through 100's of CVs in days, I found that glancing over somebody's Github/Bitbucket/Gitlab profile was an excellent way of seeing what they did. In many cases I didn't see any open source contributions to major projects, but forks, or perhaps just tooling you wrote for yourself. That in _itself_ says a lot about a developer. In my opinion it shows interest and being keen to show your work, even if it isn't that great. Writing small pieces of working code, that look good are almost mandatory. Because in the end, even developers need portfolios to show others what they can do.
I'm sorry to say but in a company do you know how little time you have to go over literally 100's of CVs? You need to make decisions fast. And of course you can't be right but you go with the data you are given.
London is totally ridiculous. I live in Essex which is still worse, but as a 21 year old, my friends are working up a debt at uni, and others are unemployed/part-time. The way I see it, I'm on the ladder at an early age and I'm working up a very nice lather paying little on rent. 
Proxy is only to observe changes. This is just an showcase of a pattern with hooks.
But lipstick...
That is exactly what I was looking for! Thanks for sharing. I will be getting the paper version. I wish that the ES2016, ES2017 and ES2018 were available in paper version too
I don't think you need to clear any intervals. Just have one running, and make it use a value that you can update when new helpers are bought. 
I dunno, seems to me that if you had a good explanation for why you quit, it won't be a problem. "Well I left because the company culture was such and such and incompatible with my values . . ." Just make sure that there aren't parallels with why you left that company that might be true about the culture of the company you're interviewing with.
I have a feeling there wasn't even a technical person involved until OP asked why they didn't get a technical interview.
In what way does that apply more to users of r/javascript? Also, have you heard of browser bookmarks? 
This is your chance to contribute! :) 
I can only speak for myself, but I give final tier technical interviews to prospective devs and couldn't disagree more on the GitHub/Bitbucket thing. If you have no GitHub/Bitbucket code and you struggle on a short programming test, you're out. If you DO have those repos one of two things will happen: 1. You'll pass the test, and I won't hold what's in them against you 2. You'll utterly fail the test (you're out) 3. You'll struggle on the test. Here's where your GitHub/BB repo can be huge. If it's got some good stuff in there, I may stop and go through your repo with you instead to make sure you actually wrote it and get it. If so, I may chalk up the struggles to not coding well on tests (which is fine). In a less hot market where I'd have a lot of devs to choose from, I'd also immediately give preference to folks with good repos. TL;DR A decent GitHub repo is like extra credit if you're interviewing with me.
&gt; If you have no GitHub/Bitbucket code and you struggle on a short programming test What if you just don't have a Github/Bitbucket account? Do you still test their skills? &gt; In a less hot market where I'd have a lot of devs to choose from, I'd also immediately give preference to folks with good repos. That's incredibly weird. Most devs that I know have no public code out there. All of their time is spent in private repo's. You risk missing out on a lot of great developers just because they don't have public code? You're the red flag we're talking about here.
Steem is better tho. BTC is awesome.... If you're larrping the Wright brother's first flight. 
If you say "ain't" in English it makes you look uncultured/poor/stupid/ignorant (take your pick). Never use that word again. The correct form is "isn't"
Yeah those companies can fuck off lol. Job market is way too tight to put up with that crap. Its not 2008 any more
Right. I'm saying OP was rejected before the engineer was involved and his github was just an excuse. 
Just because a company didn't choose to hire you doesn't mean they're asshats. Reviewing a prospect's GitHub is a common practice. This won't be the last time you are passed over because yours doesn't show much activity or give them a chance to review prior work, but you may not know about other rejections. So...update your GitHub.
Version/tag the session state. Every time it changes, that's a new version. Validate that the version you just received a state change from is the latest. If it's not, reject the change (and refresh it).
Talent acquisition does not like gaps in your work history. It's considered a minor red flag. Remember that a lot of places will ask for references from your X most recent jobs, and will contact them for feedback. Leave on good terms. Keep contact info for any PMs or coworkers you get along with to use them as references.
Keep in mind, that it may not be reflective of the **company** as a whole, but the individual. I work at a very large company, and I can tell you, many of us look at GitHub in several different ways, especially when hiring candidates. For me, your GitHub is your technical resume. It can say a lot about an individual. Great way to start a conversation, but certainly not end one dead in its tracks.
Sure. Thanks for the advice.
People in tech move around a lot and it's very common to read LinkedIn employment history which shows a held position for 3-6 months. Working years for a company doesn't translate to "loyal" or "hardworking" like it did generations ago, especially for some shitty tech startup that has a high turnover. If you're not currently working in abusive or other conditions that is causing you mental anguish, I suggest that you stay until you find the next job instead of quitting.
You could fall back to a "long poll" method, the way such things were done wthout WebSocket. In fact many libraries that wrap/extend/polyfill WebSocket support implement this for you. There are a few situations where long polling doesn't work well so you have to get really nasty and short-poll, but those are few and far between (if you experience one, you probably have a significant design problem overall).
If all of your jobs only last 3 months then it may be you. But if it’s only this one off job, then it shouldn’t be a big deal. You could make a pretty simple case that the expectations of the job/culture turned out to be far different than how they were communicated to you during the interview/acceptance process. For ex, I had a buddy leave a job almost immediately bc he was told he would be working 40 hour work weeks and agreed to a salary aligned with 40. then pressure was put on him to work 50-60 hour weeks. When he asked for a salary increase they said no, so he said bye. 
You sure are! Good job on that. I haven't been to London (and the UK) yet, but reading about it always felt like it lives by its own rules when it comes to housing :P
Thanks for the advice. I ll think about your views and give myself some time to get to a decision. Thanks a lot
This is beautiful right here. Humans coming through for other humans. All the best to you and your company, and OP.
when they mention your github, are they referring what what you have done on github, your behavior/comments on github? seems a little odd that they fixated on that. I understand if github is their git of choice, and want to make sure you know how to use it. are they open source advocates and want a candidate who has participated in other projects? do they feel that not having a presence on github means a lack of experience? seems like you kind of dodged a bullet. i've had some odd interviews in my time, and all of them raised red flags for me, mostly: whats going on in this company that this person was choosen to do the interviews?
Is this a js library?
Can you link your game and website?
Anything about you online should show you in a good light - if you don’t have good things to show on your github, make them private
And even more ironically the web gets more unusable with JS turned off so their rage fuels itself. Poor souls.
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest That's probably as far as anyone should be willing to help without getting in the way or your learning.
Work life balance is a good thing to have. I don't want to constantly work 50-60+ hours a week. I also like having work timeboxed so that it intrudes into my personal time as little as possible. I also don't want an overly restrictive policy in place around how and when I schedule my paid time off. As for things like ping pong tables, video game consoles, etc...I guess they are okay if people want to play with them during lunchtime. For the most part though they don't really do anything for me. These days I usually just sit at my desk and eat while watching a couple YouTube videos. I do enjoy free snacks and drinks though.
At my last job I used the GitHub to excuse a bad test, because I figured they may have been nervous. I think a GitHub is important to show off, because an interview is short. IMO all high level programmers should have a lot of code in the public space, but if you can mail the technical interview every time perfectly then maybe you don't need the public GitHub repo.
I meant specifically this issue: https://github.com/pakastin/testicle/issues/3
Add nap time and I’m in.
Out tech interviews usually last AT LEAST one and a half hours 
This is all a bit of an illusion. I only just learned about PDFs having any sort of support for JS. What I demonstrate here is the use of pdf.js to interpret the PDF as a HTML page rendered with canvas, and overlaid with an OCR layer built from HTML elements (I think it's all just div elements). Having converted it to a JS DOM, I have access to all the browser JS APIs, complete with debugging. &gt; Actually part of my job is analyzing PDF Scripting of our Clients. This is what nightmares are made of, trust me. No Debugging, no Stack Trace, no Variable Viewer, it is like you are back to programming in notepad.exe Wow, I feel really out of the loop here; I suppose it's no surprise that this tech is in commercial use – just had never heard of it. Very cool to here that you work in this area! My day job is programming in TypeScript for Smart TVs that don't expose a debugger/console, so I empathise with the black box situation completely.
&gt; Everyone has happily shared what they make. Having the candidate state desired salary expectations is fine with me. However, I am more than happy to lie in a job application and interview about the salary I currently make in order to get a bigger pay bump. YOU may not do this, but there are lots of places that will use that provided salary information to lowball the applicant during salary negotiations especially if the applicant is underpaid compared to market compensation. For anybody else reading this...research market salaries on Glassdoor before throwing any numbers out there. If you're going to lie about your salary, it needs to be reasonable and believable. Saying you make $100,000/year when most people in your area with your experience make $70,000/year is stupid and greedy. Additionally, you can look up the salary ranges for various companies on Glassdoor. If you're lucky there will be data there about the position for which you are interviewing, and you can use that information to know what kind of a desired salary range they would deem acceptable.
The modularity of the renderer system will be good if/when something replaces WebGL (perhaps a Vulkan-like standard).
Bice! I have to know now. What company?
I guess i am not alone who feels like this about work culture. Its intoxicating and adds mental stress. Hopefully we all will live and work in a better place. Pleased with all the advices. This chat had reduced a lot of pressure.
&gt;I felt that I wasn't judged on my skills but on something that doesn't depend on me. That describes about 60% of all my interviews.
Few mails dont leave us till the eternity. Few even the ones i have sent.
They don’t deserve you 
To answer your question: yes it is bad to call thousands of interval callbacks, as opposed to just one. But, ultimately, you should only be updating the screen when changes occur, especially when using an HTML-based interface (as opposed to, say, WebGL). You should use a subscription/dispatch solution so that the game only tries to update data when the user has done something that updates it.
Yeah thats the problem there are great developers and yes many !!! So employers have this kind of mindset.."if not you(employee) i(employer) have someone else is already waiting for this position also on a low pay." Most but not all employers have this kind of mentality. Also We share same mindsets. :)
It is inefficient, but a few thousand intervals shouldn’t be a problem if all they do is incrementing a variable. 
You can google about Adapter, Decorator and Facade patterns mostly used in writing wrappers.
[removed]
1 year in the first isn’t terrible. 3 months in the second isn’t good. But, if you’re willing to take the risk of being discarded as a “job jumper”, then be prepared with a strong, positive reason for leaving the current job. Don’t say “my boss was a jerk and the hours sucked,” say “I’m looking to grow my skills, but the work was not challenging enough.” Of course, find a real reason along those lines that you can speak to honestly And positively. I did this recently. Have had two positions, both shorter-term than I wanted. The first hired me for work they didn’t have, didn’t get, and placed me in a field I don’t care for. So I presented it as “the work was not furthering my expertise in &lt;X&gt;, as the contract they bid me for fell through.” The next as the challenge reason above. Both were true, and I have plenty of examples to speak from if they ask “what do you mean?” The truth is anyone can find a reason to discard your resume, job jumper or not. It’s all about picking your battles, and knowing you won’t have the chance to fight sometimes, so you have to accept that. So if you think it’s the right move, go for it!
How about changing your function to accept (document, contact) as a parameter? &amp;#x200B; Then you can do &amp;#x200B; const mockDocument = jest.fn().mockName('mockDocument)'; createContact(mockDocument, contact); expect(mockDocument).toBeCalledWith(...)
When webpack bundles the code, it marks any unused functions/modules with comments. These comment are then used by uglify to strip them out.
Yeah i have strong reasons regarding me not of my boss so i guess ill make out of it. Ill let my mind relax a bit and start to make a move later this year.
I don't think anyone will disqualify you for fun projects but they have to be named properly and described. If Readme states this repo is an experiment I'll just skip it to see if you have something more applicable to work environment. If however you have a project you started with description indicating some grand goals while all you've done is initial commit long time ago that'd be a red flag for me personally. 
OP didn't make it past HR. &gt; I mean the first interview wasn't with a tech person. It was more a company presentation, and availability check. 
Is there a way to phrase this without using in a sexist cliche (namely that women who wear makeup are deceptive)? What about, like... “cool company culture is often a distracting veneer covering up deeper problems”?
In 'src/containers/App.jsx' it feels a bit weird that you do it like this `if (users.length &amp;&amp; items.length) {` `// return main content of component` `}` `return null;` Feels better like `if (!users.length || !items.length) { return null; }` `return (` `// main content` `);`
Consider yourself lucky. I promise you that place is a douchebag factory.
Looks like that old Dean Edwards Packer code obfuscation. There's a decoder somewhere out there.
Why not simply throw a dice. It's faster and just as reliable.
I'm pretty sure OP's guess was right: &gt; I felt that I wasn't judged on my skills but on something that doesn't depend on me. They didn't reject him because of his skill set, they rejected him.
I learned while working for "bad" companies, but in an unexpected way. Did you learn something working for those "bad" companies or do you just think they were bad? &amp;#x200B; And do you feel that your learned something about being put aside that way? Does it stimulate you for doing something about it?
have a feeling their work life balance is off and you'd be making minimum wage after you consider how many hours over 40 you would be putting in
&gt; you simply tell them it's all closed source proprietary work and you can't share it. personal experience, I was scoffed at when I said this. Even though I agree with the sentiment, it really depends on who is interviewing you an dhow they will take it.
Use `requestAnimationFrame`. You could create an object that will collect all the tasks and run them in a single frame. But remember your calculations should not take longer than duration of a single frame (1000 ms / 60 FPS ~ 16 ms).
This is crap advice and amazing it got so many upvotes. Any employer worth a shit will always want to see code samples and a salary history. You clearly haven't worked in the industry for very long.
Go to school and study hard 
Wow, really? I’ve NEVER heard of them asking for a paycheck... who even gets checks anymore? 
You can’t just say that you wont share it you have to tell them that you are not the owner of the work and cannot legally provide it, BUT, You can discuss it in depth with them.
He might need different intervals if he has auto-clickers that don't click every second, but say every 60 seconds or every 5 minute. Other than that and you can just add to the initial setInterval a higher value to increment per second.
Where are you that a senior dev can make 170k? 
Eeeeh... that sounds like maybe a made up reason to hide the real reason. Who knows though. 
Pretty common for a few years now. However it varies on how you handle it... I was in charge of technical interviews for a massive consultancy company in Sweden and the way I handled it was if you didn't have any public code to show I would always make you do a few simple code logic exercises during an interview (fix some failing tests, explain your code). If you did have public stuff though I'd ask you to explain your thoughts behind some of it and how you could have done it differently etc. To be completely skipped for lack of a public profile though is unfortunate. There's plenty of work out there for developers, maybe consider joining a consultancy firm to build up your portfolio a bit? Alternatively, keep trying and somebody will recognize your skill and hopefully also enable you to create a public profile. 
People keep saying it's normal for people to move around in tech like it's no biggie, but the places I've had several interviewers express concern that I've been through 4 consecutive jobs that I left under 2.5 years each.
"Looking cool is not the same as being cool."
Canada eh? Ah well. Too cold up there. 
It depends. Some companies can be really good places but they cannot accept people doing open source, period. Don't believe folks that are trying to sell world view where you have to write open source and we live in anarchist utopia. People that are making loads of money and not having github/bitbucket/other repos are plenty. If you read internet forums and stuff that is not representable amount of people for entire field. Remember that people who post are most vocable, people who do open source are also outliers, it is not a norm. There is much more hidden people just like with tip of the iceberg that is above the surface of water. Those guys that lurk below the surface are not visible and they program probably a lot more things than those guys that are visible on reddit/github/forums. &amp;#x200B; Maybe skip your github for some other company and see how it works out, then try again in the same company after some time like 6 months.
I have a few thoughts about this: * I do think it's good and not that strange to switch jobs every 2-3 years. * With my interviewer hat on, I think I _would_ slightly prefer a candidate for whom I felt that they had the intention to stay with us for longer vs. us just being a pit-stop. * If I were to see 4 consecutive jobs in 2.5 years on somebodies resume, I would ask them 'why?' regardless. This might come off as concern, but I would be genuinely interested in why as depending on your reason it could mean a few different things.
ah. Cool. Got it.
If the position you were after is for a junior or mid-level Id say its probably above average. If its for a senior position Id see why they might have had an issue. There are some pieces of code that I would question whether a senior or mid-level developer would make even on a personal project. e.g, [https://github.com/tomquinonero/whiteLabelShop/blob/master/src/partials/Cart.vue#L47](https://github.com/tomquinonero/whiteLabelShop/blob/master/src/partials/Cart.vue#L47) [https://github.com/tomquinonero/whiteLabelShop/blob/master/src/partials/Cart.vue#L58](https://github.com/tomquinonero/whiteLabelShop/blob/master/src/partials/Cart.vue#L58) &amp;#x200B; There some sprinklings of poor formatting and unconventional es6 syntax that may lead one to believe you are not "mid" or "senior". &amp;#x200B;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tomquinonero/whiteLabelShop/.../**Cart.vue#L58** (master → 8b93647)](https://github.com/tomquinonero/whiteLabelShop/blob/8b9364775098961e96ec4f3c55dbeaceb3bbab94/src/partials/Cart.vue#L58) * [tomquinonero/whiteLabelShop/.../**Cart.vue#L47** (master → 8b93647)](https://github.com/tomquinonero/whiteLabelShop/blob/8b9364775098961e96ec4f3c55dbeaceb3bbab94/src/partials/Cart.vue#L47) ---- 
I’m having some trouble visualizing this. So on the browser when the client makes a change you send the request to the server and if it’s successful you increment the version locally? How does the other browser session know about this unless it is calling out to the server?
One day on reddit and already a complete cunt, nice.
Security model of the web will probably mean for an API with such low level hardware access will never see wide adoption sadly. Maybe it would be somewhat safe on scripts from the same origin, assuming https, or maybe restricted to installed PWAs. But Vulkan in its current form wouldn't be a good fit for general web use. No-one wants to let any old tab on your browsers possibly read memory isn't not supposed to, crash your machine, etc. It's only suitable for situations where speed is more important than sandboxing.
It's the label for the thing that gets you your money. Could be a PDF attachment in your email or whatever. Basically a proof of income.
You can use [this](https://github.com/zendesk/cross-storage) or something similar. &amp;#x200B; Basically what happens is that you have a intermediate server/app that holds the localStorage data, and then all other instances query this app via an \`iframe\` and \`postMessage\`.
first of all you dont need to apologize for yourself and what you have done. We can all improve on what we have done of course, but if you get rejected from a job for a bullshit reason, well its nothing more than a bullshit reason. 
That's true, I could have misinterpreted their interest as concern
If I was judged by my GitHub I'd be screwed. My interesting code is in a self hosted instance of gitlab.
No problemo. Good luck!
Batching is, indeed, a valid strategy here – as the numbers show.
That’s on you. Can you imagine hiring any person who posted their ‘work’ online that sucked? Photographer, painter, chef, dancer, writer, etc. Would you accept their excuses? It’s def a bummer but you have to remember that it’s a repo with your name on it in the public view. How else should someone interpret it? If you don’t want to be judged for it shut it down or do some gardening and get it right. 
I handle hiring devs and get plenty that submit their GitHub links. Most, but not all, usually fall into 2 categories: no content or 6+ months old content they did as practice projects. Neither are all too helpful, but I've never used GitHub content (or lack thereof) as a reason to turn down a candidate. That's not fair to the candidate and could definitely end up costing us a very promising new developer. Better companies are out there; just keep looking and good luck!
Might have been judging you by something else, or the engineer who judged you woke up on the wrong side of the bed that morning. I definitely would go with the top “asshats” comment in this thread. Their loss. Accept the implicit challenge in this and review your open source code. See if there is anything that could be done differently or better. Unfortunately, optics matter too much in the first interview. And they may have “liked” someone else better, perhaps even with less skill.
Damn I'm sorry about that... this is something I've worried about a good bit as a lot of places (not just companies) ask for stuff like this on applications.
I agree with top comment. One, try and get jobs directly, not through recruiters who take a cut of your pay, or who place you without taking a full picture into account. Third party recruiters are far too motivated by commission than by getting you a good fit. Many recruiters are also very non-technical. Both make a very bad mix. Two, tech is competitive, top tech talent knows what it is worth and will work for the right place for the right remuneration. Three, top tech talent makes companies money, lots of it and can save them a lot of money. Hiring talented and reliable tech is kind of like hiring a good lawyer on retainer. Anyone can find “a developer” anywhere, but’s it another to find one who can solve unknown problems quickly, or foresee issues or solutions the business does not yet know. And so a company is indeed paying a “fee” just to “have you” These things make your pay not just a reward for your time, but the overall value your offer to one company and not to a competing company. And the company that does have you, they are paying for more than just the lines of code you write. 
Right.. I can appreciate that it's a good signal of things like code quality where you'd otherwise have no info.
Replace eval with console.log to see the code that your friend wrote.
Good job. :)
What are the requirements of the language switcher and what is responsible for localization? Would a user expect to see their chosen language if they sign in from a different computer or browser?
What you should do : Grow some balls .. build a character , learn to take "no" as you appreciate a "yes" (I learned this one quite the hard way and I lost 10 best years of my life because I couldn't take a no and forced myself in) Maybe you got it the wrong way , maybe it's not what you really should go for .. I mean , give others a chance nobody knows with those people .. I'm in tech myself btw.
Where did they get a link to your github? Why are you job-searching without a public-facing portfolio of your public code?
I think setInterval just waits and adds things to the message queue (see here: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Adding\_messages](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Adding_messages)), so if you have a bunch of stuff waiting to be added... looping through each callback and adding them separately seems like it might have some impact on performance to me. And aha I'm imagining a toddler angrily telling his parent "But dad, the *real* Cookie Clicker games don't use clearInterval()!!"
they're called 'hiring practices' because nobody knows what the hell they're doing
&gt; There are a few things you never share with any prospect employer: &gt; &gt; Your previous code Why would anyone _not_ show an employer what they're capable of? 
In the front-end I use the language to change the language of the content, in the back end I would use it to switch the language of the sent mails to the users so I have to either send it from the front end or store the language in the database from the beginning.
&gt; I would say 75% of the company I applied for required a github link. Where the hell are you applying? I've never had them mandate a github link specificaly.
So you've never worked on a personal project? How exactly did you learn to code in the first place?
Why wouldn't you have public-facing examples of your work while job hunting? Having a portfolio to show off your skills is arguably the most important thing you can do when applying.
Consider combining the approaches. First, read the language that the user already chose in their browser. Every browser except Safari lets the user choose a preferred language. Safari chooses the language of the Operating System. That choice exists prior to the user ever visiting your site. Do read it, do comply to it, unless they override their own choice with a language switch on your website or in your app. That choice is respected out of the box by many existing web servers, like Apache. All it takes is configuration and supplying the site in multiple languages. If you're working with a custom web server developed in Ruby on Rails or rust, chances are that the developer didn't consider this feature and you're out of luck. Then you can keep the override in a cookie. The benefit of a cookie is that it works both with and without javascript: a server-side script also can set cookies, in response to a html form submission. Cookies are cheap storage. An alternative is the local DOM storage. You can use that if you already have established that the user has javascript activated in their browserbof choice. The beauty of the local DOM storage is that it's more flexible and powerful than cookies, and again: it's cheap, because just like cookies the information is stores in the user's browser. And finally, if the user expect their override to be remembered on the site for the next time they return, also store that choice with their user profile in a back-end data store. This has a benefit over local DOM storage: it also works if the user browser your site with javascript disabled.
Your profile pic isn't the most unprofessional I've ever seen, but it definitely doesn't say "hire me."
Neither one of these is grammatically correct. You need a refresher course on comma use.
That ain't always true.
&gt; Just like some won't hire people without degrees, some people won't hire without GitHub. This is a field where you get hired (or not) based on your ability to showcase your skills. If you have no public-facing code, how are you doing that?
Features: * Smooth scroll inside any element in any direction * Center elements * Scroll to and offset scroll position * Extremely precisely * Handle multiple scroll animation at the time * Cross-browser compatible (tests with Browserstack) * Performance aware * Detect onScroll events and differentiate between user and utility scroll * Customize easing function used to animate the scroll * Typescript support
If only they could ask me to prove my skills in some way...some sort of, test? Maybe even an interview of sorts? 
You can do whatever you like - but the drawback of having a slew of `setInterval` setup is eventually they will be delayed in firing. If it's been setup for say 1 second, and there are millions of them - you'll see that they do fire, but not every second.
If you use that language in mails you send then you’ll want that in your backend. It is highly unlikely you want to build a web app that tries to get the user’s machine to send a mail for you.
But it's the bare minimum which everyone has. I'd be worried if he *didn't* have that. If you're excluding someone based in their Github profile, it's probably because you expect significant OS contributions, and OP doesn't have that. I hear where you're coming from though.
Not that they’re gonna send it, they will just send the language in the request body that triggers the mail sending in the back end, so I’ll have to attach the language with every request with the language needed in the back end, otherwise I can store the language once in the db
hackerrank and simikar services 
This is basically Object.assign() but in a simpler way. I am using this util in a personal project for a simple way to get a value from multiple objects. A working example here: https://repl.it/@mariolo/PiercingForsakenStructs
now it works with bigger areas &amp; can use custom images for agents, unlike version from a few months back
so what do you think the takeaway is here when you say everything you ever worked on is top secret and you cant go into detail and you have no sample of your own code you're directly comparable to someone who has never programmed anything, probably worse because they can have the excuse that theyre out of school while you just make no effort to display your profeciency, its strictly a net negative: if you and someone else were equally qualified and they had a portfolio demonstrating their work, who gets picked 10 out of 10 times?
Before you know it your grandma is contributing to your github repository
Please send them an email calling this out. Link them this thread to see the community reaction. A lot of places in this business don't have their hiring practices nailed down yet and this might be a revealing experience for their hiring folks. They may not know, for example, that it's utterly bizarre to dismiss someone over their github, and they might talk to their engineer. Or if they weren't honest with you and they didn't think you were a good culture fit, maybe they can see the confusion they caused when they lied to you and said that it was about your github. I've done this before when I've had questionable interviews - hiring managers are always thankful for the direct,unsolicited feedback because they usually don't get any.
It's like you're *trying* to whoosh as hard as possible
Great post. I feel alot of people are focused on beer, ping pong, and equity. Focus on the important stuff : smart and humble coworkers, good benefits, 401k 
Is there a way? Sure. Am I going to do that? No.
Yeah. Get a new job before you do anything with your current. 
This worked! Thanks so much :)
Plenty of places in the US too. 
Besides the west coast? 
NY, and possibly Atlanta if you find the right company. $170k is rare, but not impossible by any means. The cost of living is also much cheaper though, so it evens out. 
Uh... that's pretty standard stuff. In fact, we had to get legal involved when a candidate *did* put previous employer code on her github because us even looking at it is a legal liability to us. Only a start-up doing really shady stuff would want to see code written for another company unless it was released by the company under an open license. 
Basically, that's the kind of extra stuff a younger dev could use to show off their skills, but for us older devs there are plenty of people who don't spend their time doing personal projects. I sure as hell don't, I'm busy spending time with my family, coaching soccer, volunteering at the school, spending all my money at home depot, etc. 
Seems like something one could "enhance" in photoshop... I always assumed they got the figure from the previous company's HR department. 
I'm in Atlanta, never seen anything that high though. I'll have to keep an eye open, I'm above senior and I don't even make that much! 
The people we hired are absolutely amazing. I seriously couldn’t have asked for better employees. We value culture above everything else and ensure that everyone is heard and provided equality. I honestly don’t believe our hiring strategy is broken, I’m willing to accept it might be, but admittedly we’re still growing and have no attrition yet. I love feedback, maybe I was too harsh with my comments about awesome assholes, even though according to the OP I was correct. I accept the downvotes I earned. 
Perhaps I'm wrong, but I think they did mention Canada at one point too. So of course $150k CAD would make more sense. 
We're a small company out of the northeastern US called Coria. It's not Google, but we have a pretty good time and, most of the time we're building challenging, fun stuff.
Playing devils advocate to hopefully help you in the future. The reason you gave for your lackluster github, your old job and your use of private bitbucket repos, are reasons you know and can understand, but not something publicly known or something a company can easily come to know about you. You were judged by your skills, you had subpar code public posted under your name for all to see. How would any company know just by looking at it that this wasnt an example of your true work? They wont and moreover they are lazy so they wont look for an answer, explanation or excuse from you, they'll just move on to the next candidate. Artists shouldn't show the doodle they made in kindergarten without explanation when they are trying to sell themselves because that might be the first image a perspective client might see. If you aren't proud of something online dont have it up for all to see and dont show advertise it on resume. Imagine the most cynical, lazy person and imagine how they would pick apart and misinterpret your online identity and then fix that identity in away to limit misinterpretation. Super devils advocate. Just hoping to give you something constructive out of this shitty experience. 
Thanks! I'm a long time Reddit lurker. It's just an interview, but despite all the angst, interviewing well is a skill that most people can acquire. Most interviewers suck. I should know, it's something I'm particularly awful at. :-)
Dude this is awesome. I could totally see building a "sim city" like game on top of this for anywhere in the world. Out of curiosity, what's the maximum number of "agents" do you think this could reasonably handle? 
Well `redux-actions` allows you to use the same handler function for multiple action types, while `redux-concise` not only does that, but also provides those handler functions up front. Also, `redux-concise` allows you to include your own handlers as well, so you still have complete freedom and aren't constrained to the default functionality. You can check out this [gist](https://gist.github.com/bheberer/a737f7adc3830231fc63d80842b17833) to see a practical example. It shows a counter reducer copied from the `redux-action` documentation, rewritten with `redux-concise` in two different ways.
Thank you! I tried to make it general as possible for any sort of city simulation. It depends what the agents are doing. I've gotten ~200 to work well when they're just moving around. I added an option to lower the animation update rate so that you don't have to update hundreds of SVG elements on every tick, which is pretty costly.
So thousands of agents is out of the question then huh lol. Now that I'm looking at it I see that each little agent is an individual SVG path being moved around which would definitely be taxing.
I'll definitely look into that, thanks! One other thing I just thought of would be making use of features on an existing map. For example: https://www.mapbox.com/mapbox-gl-js/example/queryrenderedfeatures/ With mapbox you can determine the features of the map that are under the mouse cursor. You could then go the extra step of applying fills to that specific feature. You could also do something like combiing the display of buildings in 3d: https://www.mapbox.com/mapbox-gl-js/example/3d-buildings/ This doesn't have much to do with your project I'm just riffing, but it got me thinking of what could be possible so thanks haha.
That's a perfect example and comparison of the two. I tend to judge any magic right away -- but this is sensible. gg
Women reporting in - women who wear makeup ARE deceptive. Makeup = disguise of imperfections.
A square and rectangle right? This is obviously going in your system disguised as an interview question - how much will you pay me for it?
#It works the other way around too! I got a previous employee to leak the code to me for a place I was interviewing at - so I could see what I was working with. It took a while to figure out if I wanted to work with that steaming pile... but I was well forwarned!
Normally, one would read the Accept-Language http header, since that ties to the user's OS internationalization settings. 
I see. Well their loss. Keep trying, I am quite sure you will find better options. Good luck!
But the hair...... I don't know about the hair - he may not be a good corporate fit.
You cheated with a static code analyser?
Something something enterprise platforms on pastebin something something
I have done node.js course with Andrew, and before that Colt's web dev bootcamp (the first one, not the advanced one). Now I'm taking Grider's courses and realize just how verbouse both Andrew and Colt are...... Yes Grider dives right into the deep end, but builds real things (youtube clone, weather forecast charts (talking about React here)), while Andrew dwells and dwells on todo list and note-taking app. These are the two apps you will spend all 30+ hours on (which will translate in a month or 2 of learning). Looking at Schwartzmuller, and seeing 35+ hours now gives me a pause, as well, but his other courses have a bit higher reputation, so what can go wrong. 
Can you show before/after examples to demonstrate the naming problem?
&gt; Can you show before/after examples to demonstrate the naming problem? ```js // Before useEffect(()=&gt; { // stuff on mount }, []); // After const stuffOnMount = ()=&gt; { // stuff on mount }; useEffect(stuffOnMount, []); ``` VS Code will show you `stuffOnMount` in its various object browsing views, but not `useEffect()`. &gt; What setup code do you need to run on mount but not updates? Just event handlers, so far. ```js const image = useRef(); // DOM node. const imageDims = useRef({}); const handleViewportResize = ()=&gt; { const {left, top, width, height} = image.current.getBoundingBoxClient(); imageDims.current = { origin: [left + (width / 2), top + (height / 2)] }; }; ``` As I wrote this reduced example, I realize perhaps I should just accept `image` and `imageDims` as arguments to the handler, and define the handler itself outside of the body. It might be a good rule of thumb to treat one's module as the prevailing component body for anything that doesn't create a hook. In the past, I've done as much as possible within the component definition itself.
I wish america offices had those nap tubes I've seen in japan. Work would be so much easier if I could just grab 40 mins of sleep.
IDE problems will definitely go away when hooks become stable.
I think this the issue I'm describing might actually require an extension.
Start looking for a job and find one before quitting if you can. As soon as you have one give notice and just let them know that you did not feel like it was a fit and you are moving on. You don't have to say much! Remember, if they were dissatisfied or if business conditions dictated it they would can your ass in the blink of an eye. If it is super intolerable and they can't fix it then walk out unless you think you can keep it limping along until you find replacement job.
How / please inform how?
Click the link
What's your design intension here to start with?
Looks like a closure scope thing.
It's the link linked from the next resit post. Essentially switch to another map provider
Thanks! But it is quite slow, so I'm looking for ways to improve it ;)
First, when you do this: class Test { constructor(data) { this.foo = data; // [*] } //... } Doing `this.foo = data;` does **not** make a copy of `data`. So, later, as you are using... const initialData = { bar: [] }; ...the same `initialData` object on both instantiations: const a = new Test(initialData); const b = new Test(initialData); ...then both `a` and `b` are referencing _the same object_. So, naturally, when either of `a` or `b` modifies that object, it affects both. This is how the language works and it's not really even related to classes or constructors or anything. Consider: const data = { bar: [] }; const a = data; const b = data; a.bar.push(1); Or... const data = { bar: [] }; const a = { foo: 'baz', data: data }; const b = { foo: 'baz', ble: data }; a.data.qux = 'meh'; b.ble.bar.push(1); When I make the assignment `a = data` or when I do `b = { /* ... */ ble: data }`, it's _never_ making a copy of `data`. If you _need_ to have your own copy of something, you'll need to actually make a copy of it.
Which would mean it will sit at an abstraction layer above both. It will probably have more runtime validation checks than either, so it is likely to be much slower. This would also mean Vulkan is never going to be a "write-once, run everywhere" solution.
&gt; and if it’s successful you increment the version locally? The tag/version/timestamp is **always** generated on the server. Server: Has data, with tag1. Client A: loads page, receives data with tag1. Client B: loads page, receives data with tag1. Client A: sends data modification, along with the tag it has: tag1. Server: Ok, tag1 is the latest one atm. Runs modification and generates tag2. Sends back tag2 along with success response to client A. Client A: updates its local copy with the response from the server. Client B: sends data modification, along with the tag it has: tag1. Server: Nok, tag1 is outdated. Sends back error. Client B refreshes to get new data and tag2. Optionally (but it is _very_ convenient and pretty much always recommended), when the server sends back the error, it will send back the current data with tag2 and the client would be made _clever_ enough to not simply show an error and require a refresh and doing the modification all over again, but instead show the user that there have been modifications while they were working, what those modifications are and ask for confirmation if they still want to go ahead with their modification. If so, client B already has tag2 and can indeed send a new modification request with the current tag. (The system might even be clever enough, _in some cases_, to reconcile both modifications automatically, but it is generally a good idea to have user confirmation anyway.) Notifying all clients about all changes other clients may be doing does not really completely solve the problem. If I'm in the middle of a modification (I have typed in maybe half a form of changes) and my session receives a notification that some changes have occurred I, as a user, would really like it very much not to automatically have my work undone. I would still want a notification and the option to decide if I want to keep my changes or not. Even if I haven't made any changes yet and I'm only reading, I wouldn't like the information to suddenly change without any notice. So, the difference is only at what moment I will be notified. In fact, it is a good idea to still use the tag/timestamp even if you have a parallel notification system. You should _not_ compromise the consistency of the data by relying on clients receiving (and correctly managing) a notification that there's more current data.
Web isn't about fast... 10 years ago all I wanted to do was rotate a single fucking image, that's how WebGL came to exist. Brandon made it happen, and that's how history is made.
It's because you're passing the same reference to initialData in both cases, and your class mutates it, so both instances are mutating the same initialData. The reason that cloning probably doesn't work is I expect you're doing a shallow clone. So although the top-level initialData is a different object, the value of the property inside it won't be cloned. You have two options with your current code. You can deep clone your data on the outside or deep clone it in the constructor. Having said that, I've been writing JS for years, and deep cloning was a thing I used to have to do, seemingly quite often, whereas now I couldn't tell you the last time I cloned something. Having a class that mutates data you pass in is not a pattern I would advise. I would advise you instead looking into a functional approach of doing what you're doing. So instead of cloning, storing and pushing, you instead use an immutable append operation. Look into a library called ramda for examples.
You are passing the same initial object to both functions You left a comment in the code that it doesn't work if you clone the data either; that's because you're cloning the modified object (which includes the changes you made to it in the first initialization) 
If only there was a way to click links on reddit.
Good app. Will use it. Thanks! 
“JavaScript for impatient programmers” may be enough for you. It’ll come out on paper in 2019. You can read half of it online: http://exploringjs.com/impatient-js/toc.html
thanks, would love to hear your feedback :)
Oh, that one. ;) And there I thought you meant something like getting one of the older frameworks to work nicely with modules. :P Anyway, I added my proposal as well.
Try either /r/LearnJavascript or /r/LearnProgramming
\#homework
You can tell it's an array by the way that it is.
So according to to the MDN documentation an Array is: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array#Description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Description) &amp;#x200B; and and Object is: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Object#Description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#Description) &amp;#x200B; According to the docs that I linked, in JS an Array is a list like object, the length and type of elements stored are not fixed. It is also not guaranteed that it will be dense ( i.e. there can be elements in the array with nothing stored in them). Array has it's own prototype methods to perform traversal and mutation operations, Also according to the docs I linked: An object is basically a dictionary of key value pairs. It's prototype has lots of useful methods. It's length is not fixed, nor are the contents that are stored in it. &amp;#x200B; More importantly, the other comments are right. **Do your homework OP**, this is an easy one. Just read the two links that I posted above and you should be able to answer this question easily. &amp;#x200B; P.S. don't try to submit what I wrote because it doesn't answer your question. Just read the docs. If you want clarification once you have about a specific piece, come back to this subreddit and post another question. Good luck 
Webpack creates an abstract syntax tree (AST) that starts with your entry paths, it marks unused pieces that it will later throw out via uglify. This is called tree-shaking. There are rules actually, but it's too complex to break your head over it. There were older module approaches like commonJS which it can't tree shake. Even in ESM there are situations where it doesn't shake just to make sure. `test` is simple regular expression that ties file-extensions to a loader. In your case you route every file that ends with ".js" through babel (which then transpiles your code to es5 so older browsers can run it). You may feel like it's all a bit overwhelming at first, you'll later notice quickly how much time and frustration this saves you over having to manage dependencies by hand via script tags and CDN's with out-times. What you know now is enough to get going, you'll likely want to spend some time on optimization later, especially split bundles, where parts of your app can be loaded on demand without affecting the main-bundle (this is done automatically once you load modules via the import(url) statement.
I did not thing about all these important things. Ill keep them in my mind.
What
I'd recommend **OrgChart JS** \- BALKANGraph &amp;#x200B; It is simple to use [https://balkangraph.com/OrgChartJS/Demos/BasicUsage](https://balkangraph.com/OrgChartJS/Demos/BasicUsage)
Sorry, i read a title **recaptcha 3 released** and ended up writing comment here, my mistake.
Arrays are circular data structures that contain pointers to the previous entry in the data structure, looping round on itself. They are expensive to search through, cheap to insert and cheap to delete. &amp;#x200B; Objects in JS are the underlying data structure that all primitives (except arrays) extend from, i.e. a string is technically an object, as is an integer and a boolean. Each primitive adds its own "characteristic" onto the abstract Object class, such as "isTrue" and "isFalse" for booleans.
 typeof [] // “object” Arrays are objects.
Yes that’s what I do now but the issue is when you need to know that language in the back end so you have whether to send it with every request or store it in the db
\`\[\] instanceof Object; // true\`
Tbh im 26 trying to self learn js ( has a first language) That subject didn’t settle down to me..
I made a NativeScript app (Using NativeScript-vue) (Its a javascript framework/library i think) The app is called roverhub where users can see all of the photos that have been taken by the Curiosity Rover on Mars. (As of now, the last picture taken is on 01 November 2018) &amp;#x200B; So basically, users search using sol (Its a 1 day defined by Mars) &amp;#x200B; Heres the link: [https://github.com/renabil/roverhub](https://github.com/renabil/roverhub) (npm install nativescript@next) then follow the instructions on README.md
[Objects](https://youtu.be/CXnnw9rQH5I) and [arrays](https://youtu.be/rTK0Gmf57jE) 
That still means it’s homework. And I still don’t completely believe you because if you can’t tell the difference between an object and array from the infinite examples online then you aren’t going far in any language. An object is a hash, or a dictionary, where you define values for explicit keys. var obj = { “key1”: “value1”, “key2”: “value2” }; console.log(obj.key1); // value1 An array is a sequence of values. var arr = [ “value1”, // 0th index “value2” // 1st index ]; console.log(arr[0]); // value1 You can access obj data with brackets too. obj[“key1”] // value1 What’s the difference between objects and array? Not much. An array is an object with special functionality to accommodate the assumption of a sequential list of data.
I think what he might mean by "the real Cookie Clicker game doesn't use clearInterval" is that it actually ticks faster with more upgrades, as opposed to always only updating once a second. That's important for an idle clicker game because you get a better feeling of progression. You can achieve the same effect while using only one timer. Just need to figure out how many times it needs to fire in 1 second, and then divide the 1 second interval by that amount. If the rate is 1 per second, it should add 1 every 1000 ms. If the rate is 2 per second, then it should add 1 every 500 ms, etc. 
Easy maaaate 4 steps.. 1. Read this https://www.amazon.co.uk/Making-Games-JavaScript-Christopher-Pitt/dp/1484224922 2. Make a simple game 3. Find a more in-depth book, read lots of blog posts, emerge yourself in the game making scene 4. Get good at it with all your years of experience, make the bio game, profit! 
How accurate is the simmulatior going to be? Are you simply going to simmulate the bacteria as points in a grid or are you going to elaborate on the detail of each organism? If it is the former, then you really only looking at a slightly edited version of Conway's Game of Life, it it's the latter then you're going to have to figure out a way to simmulate a bacteria and the process it takes to multiply itself. Either way, you probably wanna create an array to keep track of the location of each bacteria then create rules and conditions dictating the evolution of the bacteria. You can probably figure out the rest by consulting your friend and work what he says into your code.
Ok, would I use p5.js for example?
Alrighty!
I have in all honesty no Idea, I usually don't do graphical operations with JavaScript, as I find C++ OpenGL much more suitable. 
Ok
Hi /u/skatedc4455, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/MattimeDan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/silencerweb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/flipside92, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/silencerweb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Indeed, it is more suitable and very performant but it is quite hard to learn about the graphics pipeline, fragments, shaders, buffers and all that as oppose to starting with something like p5.js &amp;#x200B;
It's fine as long as they all execute fast enough to not drop frames. In JS you have 16ms to execute JS and render, and you start dropping frames if your code runs beyond that. Out if that 16ms, you can assume you have about 10ms for just, and the rest reserved for rendering, so you'll be good as long as your callbacks are executing in 10ms or less. If you have multiple stacked callbacks and they take longer than 10ms to execute, then you'll start dropping frames and running into problems.
Argument can be anything (Object, Function, Integer, String, Boolean....) and String is always String 🤔
How is your LinkedIn profile? I don't have a public repo due to my company, but I made sure to write a very well detailed description of what I do. I'm forever getting offers to attend an interview and I'm not even looking. 
Might sound annoying as an answer but: - it’s relatively easy to slowly switch to typescript - you’d waste your time on jsdoc typing that nobody else would use, even you - when u switch to a new project - ts would give u much more than just known methods 
Arguments are parameters to a method. A string is a data type. At first I thought I was in /r/dadjokes. 
I build this experimental drawing app, with Next.js, socket.io and p2.js. https://convos.now.sh/room/showoff It's an collaborative experience, you share a canvas with other users and draw in it. You can only control your brush but you can throw or push yours into others. The round button in the lower right opens a side drawer. Change colors, shape and other things there. It's intended to be used fullscreens on mobile. 
Those are called [Life simulation games](https://en.wikipedia.org/wiki/Life_simulation_game), the most famous of which is [Conway's game of life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) [skeeto/webgl-game-of-life on github](https://github.com/skeeto/webgl-game-of-life)
IMO the best resource to learn the TDD mindset is still [Kent Beck's TDD by Example](https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/). I also like [Joe Rainsberger's TDD Course](https://online-training.jbrains.ca/p/wbitdd-01). I wrote a [blog post with the 3 books about software design](https://guifroes.com/3-books-that-will-take-you-to-the-next-level/) (very much related to TDD, IMO) I recommend the most. Hope it is helpful.
I'd argue the opposite. Tldr: it's probably better to have more setIntervals than less, because less work over more frames is almost always preferable to more work over less frames in JS. In-depth explanation below. JS runs at 60 frames per second, so you have 16ms to execute JS and render in each frame. You start dropping frames if your code runs beyond that. Out of that 16ms, you can safely assume you have about 10ms for JS, and the rest reserved for rendering, so you'll be good as long as your callbacks are executing in 10ms or less. This can be checked with the performance related tabs in Chrome devtools. Long frames will show as red in the timeline and the little snapshot image will also have a red tag in the corner for long frames. Having fewer setIntervals can be worse, since you're still bound by the 10ms rule, and it may be more difficult to finish your work within that limit if all of your logic is crammed into a single callback. In that case, it's better to spread your work accross multiple setIntervals so you do less work in multiple frames vs more work in a single frame. If your callbacks execute at about the same time or you have &gt; 10 callbacks per-second, then they are likely to execute on the same frame semi-frequently. In the case all the callbacks must execute within 10ms combined time.
React Native. Strong framework, good support, easy native integration, native performance.
It doesn't really matter how many setIntervals you have as long as you're not dropping frame rate. Frames are 16ms long in the browser, including both JS execution and any rendering/painting, so you usually assume 10ms for client JS to be safe. You're good as long as the all the callbacks on each frame execute in a combined time of 10ms or less. Multiple setIntervals with shorter duration callbacks are preferable to fewer setIntervals with longer duration callbacks, since you're beholden to the 10ms rule either way. You can check this in Chrome dev tools performance tab. Long frames will be displayed as a red mark in the timeline and the screen grab thumbnail will show a red mark in the corner.
Arguments and parameters are separate things ;) Arguments are the values passed into a function when its called. Parameters are optional identifiers defined in a function signature. When a function is called, argument values from that call get assigned to the parameters which can then be used in the function body to access those arguments.
Why not use the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) instead. Its' API is quite a bit more friendlier.
Thanks for the help, and for both resources. The book looks pretty comprehensive, I'll look into it :)
Well, those are completely different things. Exporting a frozen object means you cannot change that object. A variable declared as \`const\` cannot be reassigned, but if it refers to an object you can freely change its properties. &amp;#x200B; So basically you need to know what you want so you can use the appropriate feature.
I'll just try to make use of what I've learned so far, and hopefully, with time it'll be a bit less confusing. I know it can be a very useful tool and worth learning, so I'll stick with it! Thanks a lot :)
Well, Cordova has much the same - except performance, which is not the most pressing thing in a music player. I know that React native is good on its own, else it wouldn't be as popular - but does it fit the task better than all other technologies?
Having worked with both stacks, Cordova produces weird, unexplained errors, has lacking and outdated or straight up confusing documentation. React Native is relatively cleanly documented.
Thank you for explaining. When you say “notifying all clients about all changes other clients may be doing” and “even if you have a parallel notification system” do both these things mean something like realtime updates with websockets or did you mean something different?
`test`
Do you have access to the app's files?
commenting to remember to come back. pretty sure you can reverse md5
To be honest, I've seen lots of small web agencies do this in an attempt to push their "dev culture". It's a big red flag. Fortunately as a developer you won't have much difficulty finding a better place to work in (due to the high demand).
There’s 2 different things at play as someone else alluded to. Object.freeze will make the properties on an object immutable. This is useful for common.js and other module systems where `exports` is just a plane ol’ object. Freezing the `exports` object gives you some of the same “safety” that es6 modules do. Once you start using the module syntax, you’re in es6 land, where modules are first class, not just plane ol’ objects. You can not change what a module exports after the fact with es6 modules. The real big difference between the two cases you give is whether or not the exports are named. Only named exports can be imported with destructuring. It looks like the rest of your team has not really internalized that es6 modules are not just objects like they are in every module system preceding es6. That syntax: export Object.freeze(exportsObject) Is dumb and should just be: export default exportsObject; And even better, in the same module you can export named things too!: export default exportsObject; export function utilFunc() {} // can be imported with destructuring. 
md5 is one way encryption. Your best bet is to try to brute force it.
You can't, but you can use a rainbow table
"as you may have noticed" is a subordinate clause, and the preceeding comma is the joining of two complete sentences. Either way, conversational English as I learned it as a native speaker. Hooked on Phonics worked for me.
Thank you /u/hodgef
I've updated my virtual keyboard package, [simple-keyboard](https://github.com/hodgef/simple-keyboard). It now has module support, allowing for new features like autocorrect. The module-loading logic could be better though. If anyone has feedback on how to improve it. I'm all ears! **Module logic:** [https://github.com/hodgef/simple-keyboard/blob/master/src/lib/components/Keyboard.js#L580](https://github.com/hodgef/simple-keyboard/blob/master/src/lib/components/Keyboard.js#L580) [https://franciscohodge.com/projects/simple-keyboard/modules/](https://franciscohodge.com/projects/simple-keyboard/modules/) **Demo**: [https://franciscohodge.com/simple-keyboard/demo](https://franciscohodge.com/simple-keyboard/demo) **Repo**: [https://github.com/hodgef/simple-keyboard](https://github.com/hodgef/simple-keyboard)
Is there an quick and easy way to do this? 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hodgef/simple-keyboard/.../**Keyboard.js#L580** (master → 701db33)](https://github.com/hodgef/simple-keyboard/blob/701db33ab115084f4324509c734b3c6e5de7012a/src/lib/components/Keyboard.js#L580) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e8zfozd.)
Is there an quick and easy way to do this? I've been cracking my brain trying to figure this out. 
it calls obfuscation, "encryption". This is never good.
You can download software that can brute force it or just use an online "cracking tool" - I tried this but no results. It's probably something to do with the workplace. You can download a brute force tool, plug in a load of terms related to your work place and let it run.
A rainbow table is basically all the hashes pre-calculated so you just look up the index and voila theres ur result. Also theres a couple sites that have dbs of pre cracked md5 hashes, I was not able to find your string however. 
Some googling suggests https://hashcat.net/hashcat/
Brute forcing is the easy, but not quick way to do this. Most likely this is not the intended solution however. 
&gt;ES6 named exports cannot be bound to a different variable after being exported, so there’s no danger of a consumer trying to reassign it. `export const foo` cannot be reassigned, but `export let foo` can even from other modules. I'm not sure how class and function exports work though.
You need to describe more how it will look, how it will be used, and what rules will apply. Noone will be able to help you if you don't give more info - unless someone is already an expert in building bacteria simulators. And even then, it can take many different turns..
I think the branding is good. Reserving your [js.org](https://js.org) domain (e.g: [plazar.js.org](https://plazar.js.org)) wouldn't hurt. The Readme could be improved like so: I would drop the lengthy intro and put the usage code right below the installation instructions. A concise formula can be: 1. Logo of your project 2. Short and memorable sentence describing your project 3. Installation 4. Usage 5. Docs 6. Demo Other sections can be linked in your README, but the bulk of the text moved into Wiki. Also, I wouldn't recommend completely dropping the emojis in your README though, they can make it easier to read provided you don't abuse them. You could limit yourself to one per heading like so: [https://github.com/hodgef/simple-keyboard](https://github.com/hodgef/simple-keyboard) &amp;#x200B; Keep up the good work!
1. Try googling for the 32 character hex of the hash. There’s a good chance it’ll show up as a hash of a common password somewhere. 2. Lots of people have used md5 poorly over the years so there are lots of publicly available listings called rainbow tables the map user inputted strings to md5 hashes. Here’s a link I found to a defunct project from which you might find such tables https://benramsey.com/projects/md5/ 3. Md5 has some severe vulnerabilities and while it isn’t strictly reversible, I know I’ve read papers and blogs where generating multiple strings with he same md5 hash was generated. Since the world has largely moved on from md5, I haven’t found anything directly useful in the couple minutes I’ve spent looking on my phone, but the folks saying “md5 is cryptographic and therefore irreversible” weren’t around when the internet figured out md5 wasn’t good enough. But yeah, it’s a challenge from work, it’s probably just “password.” I’d start with a little bash script like this probably: while IFS=‘’ read Word; do H=$(md5 &lt;&lt;&lt;$Word) if [ $H = “that hash”] ; then echo $Word fi done &lt; /usr/share/dict/words And again I’m on a phone and bash syntax is what it is so I make no promises that that even runs. But after googling, do try and brute force it with some source of common words or common passwords. 
[Encrypting vs Hashing](https://www.securityinnovationeurope.com/blog/page/whats-the-difference-between-hashing-and-encrypting) MD5 is hashing =&gt; Not possible to calculate the real value back. Can be brutforced to get a matching hash.
Forget it. Wasted time. Switch to TS. JSDoc is just a crutch for something TS already solved
It's probably a combination of words, though. A dictionary brute forcer would be a lot faster.
This is a super common way to encode the next level url in CTFs, the reasoning is that you can't guess the url of the next level by looking at the code since it's comparing against a hash. What this means is that the password must be obtained by other means, if I knew what kind of CTF this is I could probably give you a better hint. The md5 js code seems legit, the logo PNG could contain the password (but I have no idea if it's different on the other levels) but it's unlikely
Behind paywall. Please don’t post unless it is free to view.
How?
I tried OpenStego to try to see if the logo.PNG had a hidden message with no luck. 
Here's an example of level 1 [Level 1](http://sp-challenge.sensepost.ninja/level1-5c2bafdbb727dbbf2d40338e8823aba5.html) The answer was quite straightforward as you'll see in this snippet. function Try(passwd) { if (passwd == "give me the keys to the kingdom") { alert("Well done! Take a screenshot and let's go to the next level."); location.href = "level2-" + md5(passwd) + ".html"; } else { alert("Nope..."); } } &amp;#x200B;
It's really two different problems. Tagging/timestamping solves the problem of the consistency of modifications, that is, that you are not allowed to make a modification if you're not using up to date data. On the other hand, there's the problem automatic notification of changes. If you need that, then no, a tag or timestamp will not solve anything there. You will need some sort of communication mechanism. (A bit more on websockets below) The real point of this is that they are two fundamentally different things and so they solve different things. Tagging/timestamping the information is just "more information", it's additional data. In that sense it works in the same way as a signature or a hash. It's metadata that helps you verify your data. Meanwhile change notification is not really metadata, but a communication infrastructure you implement. In fact, that mechanism doesn't really care about what data it is transporting, just that it gets the appropriate data to the appropriate client at the appropriate moment. ---- A bit more on the communication mechanism: Websockets are _one_ way to do it. It's probably the cleanest, but it's also somewhat _costly_. You need to keep a permanent connection open for each client. As someone already mentioned, you can use polling (i.e. making the client ask every so often. The advantage is that the communication is not permanent. The disadvantage is that you get a potential delay, i.e. if you check every 4 minutes, then you might not see an update until up to 4 minutes after it has happened. but then again you can use this as an advantage: By adjusting that frequency you can fine-tune your system's load against the delay of notification. Some times it may not matter so much to have a delay of one minute or even five minutes, other times you can't allow this.
[Crossfilter](https://github.com/crossfilter/crossfilter) easily handles 10000 and much more records. Guess it all depends on what kind of analysis you're actually planning on doing.
Attaching a window resize handler. Yes that’s a bug if it is never removed on unmount, but since the handler’s work doesn’t care about props or state changes, it doesn’t need to cycle on render. 
I have never come across a need to know what kind of iOS device my visitors use. There probably are reasons, but for what it’s worth distinguishing safari from normal browsers is enough.
Oh thanks for sure I will look at it. I dont think my anaysis is complicated. It will be filtering, sorting, counting etc. Not AI ;) so it seems that crossfilter can be more than enough.
Oh thanks for sure I will look at it. I dont think my anaysis is complicated. It will be filtering, sorting, counting etc. Not AI ;) so it seems that crossfilter can be more than enough.
&gt; the preceeding comma is the joining of two complete sentences. A single comma is insufficient to join two complete sentences.
Crossfilter doesn't do sorting, it expects an already sorted dataset. For sorting, use [fast-sort](https://github.com/snovakovic/fast-sort). They're not lying about their performance, it sorts really REALLY fast even when sorting on multiple fields.
Crossfilter doesn't do sorting, it expects an already sorted dataset. For sorting, use [fast-sort](https://github.com/snovakovic/fast-sort). They're not lying about their performance, it sorts really REALLY fast even when sorting on multiple fields.
Yeah. I can see it being interesting for analytics, but even then I don't see why it'd actually matter. Maybe there's some novelty use for it, though?
thank you sir :). i'll try
In 2018, data is considered an asset even without a hint of reason to collect it. Pairing this with the thankfully-deprecated Battery Status API and an IP address practically negates the needs for tracking cookies.
I'm in the exact same situation, having just finished Andrew's course on JS, which was great, and now looking to learn Node. My choice fell on Max's course just because it's newer and he seems to be a good instructor. I've just started but man his accent is quite heavy. That comment above about Max in the office, "Please take a s(H)it"... ROFLMAO.. 
I’m in a similar situation. For 15 years I build websites with PHP in my SQL as a hobby and passion, and about five years ago I got hired on with an energy technology company to do web work. During my four years there I learned Python, bash and JavaScript - specifically node and react. The last six months of my time with this company I was working on a react native application to support the companies newest hardware invention. While I have 4 years of actual industry experience I find it difficult to get interviews. From January to July of this year i used indeed.com - I applied to three and for places per day while on breaks before work after work before bed etc. that entire seven months earned me three interviews which were all Kind of awkward and strange, the interviewers all seemed unsure of what they were hiring for. A month ago I switched over to ziprecruiter.com - which landed me six interviews and a couple of those I got to second interview and even a third interview. But still no job. Now I go to ZipRecruiter and I don’t see any react or react native jobs in my area that match my skill set. It’s worth noting that the company that I last worked for laid everyone off at the end of June due to financial trouble. I feel like my skill set is relevant and that my work experience his relevant. During my time working I also learned Python and worked extensively with the beagle bone black and beagle bone green running Debian Linux. I build data visualization tools, IoT tools, sales tools and a customer-device “health reporting and remote access” platform. I am literally two months away from losing my current living situation, and my wife who has a chronic illness has very involved needs which are difficult to accommodate while staying with friends or family. I feel like these next two months will make or break my future and I feel very stressed about the whole thing. But despite how I feel I know that if I can just get those interviews that it’s a numbers game and I will eventually succeed. There IS an opportunity ahead of me that will match my skill set close enough and it will work out. I tell myself that every day. And you should too because even if you might feel worried or down, there is something that will work out for you. In your case if you’re having trouble trying to just get the interviews I highly recommend trying different job application sites, and even investigating job placement agencies. That’s where I’m at this week too - gotta find a new source of interviews. Another suggestion that I may look into this week myself is to find an online school that can give me any kind of computer or software related degree - Sometimes, from what I understand, you can get a degree for give or take 200 bucks and you might even be able to challenge the course, putting some kind of computer or technical degree in your hand sooner. It doesn’t matter what the degree is so much as they see a degree from a technical school. However it all works out I wish you luck. Maybe we should stay in touch so we can throw each other leads when we find something that works.
u/th3originals this is great. Very simple to follow. It'd also be great to have an implementation of the state matrix for this.
Made a light lib for retrying async tasks, based a one of my reddit comments. https://github.com/clemyan/sisyphus-retry
I can't recall specifically what however I have had a need to in the past simply because there was a bug that affected 2 (of the older) iOS devices differently and each fix would break the other. Apart from that I don't think theres much other use than data collection.
I detect it for package depictions on my Cydia/APT repository to tell the user if the package is compatible. It also detects the iOS version.
Broadly, a good place to start is by reading the API docs for the service you want to integrate with: [https://bandcamp.com/developer](https://bandcamp.com/developer) &amp;#x200B; but from a quick look, I don't know if they allow for what you're trying to do
If you make an iOS app, you'll be very interested in what devices people are using. &amp;#x200B; This could let you compare the population of people who look at your app, with people who actually use your app.
I wish you luck in your search as well! and thank you for sharing that with me. I will look into it, i found a couple agencies with recruiters, but they are horrible in my area, lot of ghosting going on, they always find me on linkedin and then ask for my resume, i send it to them and they never return my calls or messages. I was "Sold" this product with high hopes and its not returning any profit. im not trying to complain, i just didnt know it was this Dry right now, well maybe my state. When i made the choice to go down this road jobs were high, but seems like i was at the end of the stick when i signed up and missed the rush lol. &amp;#x200B; but I'm going to keep pushing through it, i found a passion that i love and i enjoy and want to make it a career and take my family down that road. &amp;#x200B; Keep your head up! i think we both hit that wall and are trying to climb over it, life dealt its cards :( but like my wife tells me all the damn time, worry about today and let tomorrow take care of its self (which is hard for me) 
The biggest thing for me that made TDD "click" was using it when I was totally stuck and did not know how to get started implementing a feature. If you think of it like making a "todo-list", where you write one test that is something you need to do, then write the code for it, that is also very beneficial. I wrote about this more in a post called [Tried TDD and didn't realize the benefits? Try it the next time you get writer's block](https://www.coreycleary.me/tried-tdd-and-didnt-realize-the-benefits-try-it-the-next-time-you-get-writers-block/)
What happens if you use these urls instead: https://koudroidz.github.io/mario.obj https://koudroidz.github.io/mario.mtl
 [great stuff from his new course :)](https://www.youtube.com/watch?v=xF2yuOs96Dc&amp;feature=youtu.be)
When making native apps you don’t need to do this to find out what device they’re using... you can get these metrics when people download your app
Eww
I made a app to [view your top spotify tracks](https://bonganimbigi.com/spotifytoptracks/) and gives you the ability to create a playlist from it.
Uncle Bob 
I made a NodeJS website called [MazeBattles.com](https://MazeBattles.com) where users race one-on-one against their friends to solve mazes as quickly as possible. The site uses randomized DFS to generate mazes. GitHub Repo: [https://github.com/HenryDavidZhu/MazeBattles.com](https://github.com/HenryDavidZhu/MazeBattles.com)
Seeing as fetch is [well-supported](https://caniuse.com/#feat=fetch) in all modern browsers, and can be polyfilled in pretty much any browser that doesn't, I really can't see much benefit. Also, "where you should start learning about ajax requests" seems like nothing more than a subjective opinion, or was there something other than "that's how I learned it back in the day" to it?
thanks!
What's the benefit of using fetch vs XMLHttpRequest? I have nothing against fetch, it just seems that there's more abstraction vs the latter.
Precisely. Why would you use a more barebones/lower level API, when there's a much friendlier alternative which gets the same job done. Even [aborting requests](https://developers.google.com/web/updates/2017/09/abortable-fetch) is solved, which was long cited as the bane of fetch request. (Not that I would think that's in any way relevant to learning how to fetch a json document from a URL.) With XHR, you would need to learn to: - create an XHR instance - attach the event listeners (and handle the events correctly) - send off the request - use closures and callbacks - parse the json vs. - send off the request - ask for the response to be parsed and returned as json In the interest of working with legacy codebases and perhaps just to expand the general knowledge of all things JavaScript, there is ultimately some benefit to learning to use XHR, but not as a starting point imho. There's a reason why jQuery hiding away all that complexity became so immensely popular :-)
I guess we just disagree on how this kinda stuff should be learned. I think it's valuable for the exact reasons you say it's more cumbersome. In the process of learning about ajax requests you learn about(or begin the process of learning) all those things you mentioned as well. /shrug I do agree it is cumbersome, no chance in hell I would use it right now lol, because I know what's going on under the hood. From a learning standpoint though, that's where I would recommend ppl start. 
Aren't Safari's webkit implementations the same across different devices, only differing between iOS versions?
hi, just a question, what makes vanilla js special and does it rely on the dom?
Oh, I've heard Max's courses are hands-on as well, I want to purchase mine in a week or two. How far in did you get?
I mean it’s JavaScript, couldn’t you open the JavaScript console and execute “window.md5=()=&gt;’xxx’” change xxx to the particular hash and then click the button??
is there galery example. like drag and drop new node/block onto canvas?
Can I have a sauce for learning?
Hey it's not so bad if you want basic cross browser functionality. &lt;old guy
This is used in the codebase when defining constants in a file specifically for constants. Rather than define then as a const which is "name exported". They are all properties of an object which is the default export. I get what they are trying to do. But does that really make is safer? I feel like it's a bit redundant and overly verbose. 
I don't care about the use case. This is cool and clever. Good job!
I've created yet another "framework" for building user interfaces, because there were things in both react and angular that I didn't particularly like and I just didn't have the energy and motivation to learn more frameworks I decided to roll my own. I've created a bunch of projects (even professional) with it and I've gotten great pleasure working with it. I was curious to get other people's honest opinions though. [https://github.com/luri/lib](https://github.com/luri/lib)
I've created yet another "framework" for building user interfaces, because there were things in both react and angular that I didn't particularly like and I just didn't have the energy and motivation to learn more frameworks so I decided to roll my own. That was quite some time ago and since then I've created a bunch of projects (even professional) using it and I've gotten great pleasure working with it. I was curious to get other people's honest opinions though. [https://github.com/luri/lib](https://github.com/luri/lib)
What a content free post!
Yep, it was smooth sailing up to this point. 
I think [this](https://stackoverflow.com/questions/44073718/edit-existing-pdf-in-a-browser) answers your question with a cautioning "don't try this at home" since it involves manipulating the structure of a pdf file in the browser for which there is no available library. Even if you could just extract the image tags and replace them with compressed versions, you would still not be able to manipulate signed or encrypted pdf files
Nope, but here's what I think: * You already crack an easy hash on a previous level, and you already disable a javascript event (the one with the alert) so this has to be more complex * Everything on the page is exactly the same as previous levels, so we can discard most of it as clues * Level 8 is the final level * Url structure for every level is exactly the same, levelN-password, however, the location of level8 seems to be just the password; I think this could be a clue that you have to crack a hash with a prefix of "level8-" which would explain why no online resources have the precalculated hash (it's too long) * Meow is a clue, but for what? If you do have to crack the hash, it could be referring to hashcat (the best tool to crack this kind of hash) (cat=meow) That said, I quickly tried a dictionary attack on the hash using level8-, final- and finalpage- as prefixes and it didn't work. 
Where are the PDFs being uploaded? Could you use a Lambda to watch an S3 bucket and then compress them once they’re up?
Triple backtick does not work on reddit. Use indentation to format as "code". --- # Untyped arrays const { performance } = require('perf_hooks') const start = performance.now() let untypedArray = [] for (let i = 0; i &lt; 98304; i++) { untypedArray[i] = i } const end = performance.now() console.log(untypedArray.length) console.log(untypedArray[untypedArray.length - 1]) console.info(end - start) // ~2.792820000089705 # Typed arrays const { performance } = require('perf_hooks') const start = performance.now() const buffer = new ArrayBuffer(393216) let uInt32View = new Uint32Array(buffer) const length = uInt32View.length for (let i = 0; i &lt; length; i++) { uInt32View[i] = i } const end = performance.now() console.log(uInt32View.length) console.log(uInt32View[uInt32View.length - 1]) console.info(end - start) // ~1.569806999526918 
Hey, thank you. Regardless of this, I still can see the code highlight at my post.
Agreed. A few years ago I spent a lot of time adding just such JSDoc to my code because WebStorm, my IDE, used it to show me type hints. There were so many problems though that I switched to Flow to get actually working types. JSdoc sucks, also because it is very poorly maintained (i.e. not at all, practically, both the tolls, mostly jsdoc3, but also the "spec" behind it), so you have to live with what there is, including all the many, many shortcomings and issues. IDE makers know there is Flow or TS so they won't invest too much time into creating a third type system based on JSDoc, it will always be just 0.1% of what Flow or TS can do. 
Probably get smaller files by reducing jpg quality rather than changing color palette. Many JavaScript image processing libs will do this, eg: https://xkeshi.github.io/image-compressor/
The traversal at the generation phase seems to give hint on how to find the solution path. The only challenge is just speed of tapping the keyboard. 
Try allocating the untyped JS array at the size too, \`let untypedArray = new Array(98304);\`. It should close the performance gap quite a bit.
They are being saved to a private cloud. The nature of the documents are such that they cannot exist outside of national borders.
This is a really good solution for Image compression. Thank you.
Much appreciated! Having hard time what actually to use overall.
Because of the memory allocations during iteration without it - good point!
Cool concept. Finding the correct path seems rather easy, all the alternative paths end very quickly and there's very few of them, making it very easy to see which way to go. Also having to smash your keyboard gets a little tiring. I would make the maze much bigger, make the wrong paths longer and more frequent, and change it so you can just hold down the keys to move, but with limitations so smashing and holding are equally fast. Unless the point is who can smash their keyboard faster.
What you want is a `typedef`: /** * @typedef {import("../../foo/user")} User */ 
As long as you're aware of it. That's the first step to improving, right? Have a good one 😉
`const` means that variable cannot be reassigned. `Object.freeze` means the object stored in that variable cannot be modified. These are not mutually exclusive. // This is fine (and common): const x = Object.freeze({foo: 'bar'}); // You cannot _reassign_ a variable declared const const x = {foo: 'bar'}; x = {foo: 'baz'}; // Exception // However you can modify (mutate) it fine const x = {foo: 'bar'}; x.foo = 'baz'; // Fine // Unless it is frozen const x = Object.freeze({foo: 'baz'}); x.foo = 'baz'; // Exception So, `const` and it's friends `let` and `var` are used for controlling whether the _variable itself_ can be completely reassigned, and the usage of `Object.freeze` is used for controlling whether an _object_ can be modified. Two very different things. 
Very good answer! However, doing the following keeps the ES6 modules syntax but still makes it safer, doesn'it? export const a = Object.freeze({ some: 'stuff' })l export const b = Object.freeze({ other: 'export' }); At least, it helps a lot when using Flow :) (gives you strongly typed constants)
That's premature optimization.
Today people uses JavaScript frameworks(libraries) a lot, more than that some people get to learn them, even if they don't anything about JavaScript.
Any idea how many characters the password is? It's part of a URL, so there's some restrictions that apply which will limit the complexity. Get an md5 rainbow table, grep for the md5 string, apply URL restrictions and you'll have a list of strings that'll be manageable. If not manageable write a bash (or whatever floats your boat) script and wget every URL while saving the response code. Grep the resulting codes for "200 ok" and it's winner winner chicken dinner. Shouldn't be more than 45 minutes, the hard part is finding a large enough rainbow table for free. 
It depends. If the purpose of the exercise is to teach all those things, then yes. Nor am I disputing the usefulness of learning those things, on the contrary, they are essential skills. I'm simply saying they're unnecessary "side-missions", when the goal is to load something over the network. Don't eat the entire cake all at once. But, as you say, we'll just have to agree to disagree. There's always more than one way to skin a cat, and so on.
this is what happens : Failed to load resource: the server responded with a status of 404 () a blank page as usual :(
Yes, you can convert a base64 string to a blob and upload that via Facebook’s image uploading API. Amazing that you researched this quite a bit and still had to ask, because a simple google search would have provided dozens of solutions for tackling this very problem. 
The ocean doesn’t render at all on an iPhone. 
Good overview.
I didn't mean to upload it using the api, as in order to do that I would have to request for the appropriate user's permissions. Please disappear, I'd like to pretend you don't exist.
I tried out using the raw canvas but it lacked some features. Rather than writing a bunch of that myself, I reviewed Paper.js / Fabric.js / Konva. I eventually went with Konva for our app, but you might want to check these libraries out if you're considering working with the Html5 canvas. [http://paperjs.org/](http://paperjs.org/) \- [https://github.com/paperjs](https://github.com/paperjs) [http://fabricjs.com/](http://fabricjs.com/) \- [https://github.com/fabricjs/fabric.js](https://github.com/fabricjs/fabric.js) [https://konvajs.github.io/](https://konvajs.github.io/) \- [https://github.com/konvajs/konva](https://github.com/konvajs/konva)
That's a good point. If they have many applicants they might not care enough (yet). Since you pointed this out: What kind of traits do developers who you like to work with have? 
I don't think this is possible. Facebook will need to fetch a public URL that contains the image you would like to share. https://developers.facebook.com/docs/sharing/reference/share-dialog
What makes people obligated to help you with this kind of dismissive attitude?
The Vue CLI documentation has a section called [Configuration without Ejecting](https://cli.vuejs.org/guide/cli-service.html#configuration-without-ejecting). The [Configuration Reference](https://cli.vuejs.org/config/) would also be a good place to look.
Mucho thanks
Yep, guess so. Ty
It's definitely an improvement! I find the intro a bit too long however (despite the cliffs/tldr). I would just put "Plazar is a lightweight, un-opinionated framework for Javascript." Then head over to the installation and usage instructions and then give a longer explanation on the "Docs" or "Features" section. Not a big deal though! Another thing is the "plz.define...". Is it intentional to be read as "please define?". As a more serious touch I would change that to pz.define. Most of these are nitpicks as you can see, which means you've done a good job already !
Hi /u/WeakCommunication0, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Lol no wonder you posted there here instead of somewhere appropriate. Anywhere else that kind of response would get you banned in an instant.
Thanks! Yes, I thought that people might think that "plz" stands for "please", but this was not intentional . "plz" is just a shorthand of "plazar", nothing else. I will consider changing it.
That will export 2 named, immutable references, that are each to objects with immutable properties. If what you want to export is two distinct objects that are both frozen, then yes, do that. I typically find that if I’m exporting named things they’re all functions or scalar constants. Otherwise I’m usually just exporting default and it’s a class, or an single instance of a class defined in the module that I intend to have mutable properties. I’ve seen lots of different conventions though. I have a colleague who likes to export mutable scalars like: export let haveNewThingsThisFrame = false; export function makeUseOfNewThings(...) {...} Which still makes me uncomfortable for lots of reasons, but I can’t deny it’s really clear and understandable once you really buy into es6 modules.
So, what is discord, and what do I get when I join? 
Uhm, please read my comment again—I'm talking about *comparing* the people who visit your site, and the people who install the app. It's not a particularly good example, either, but clearly there are things to be done. Instant negative feedback always saddens me 😔
Firstly it’s not negative feedback from me anyway. Not everything posted here has to be super useful and I think it’s cool. The problem wit your comment I think is that you put a double line break between your two paragraphs which made me only read the first paragraph as the second one seemed like it was part of another comments Apologies for misunderstanding you anyway!
Same on Android/pixel2
Same on Android / pixel 2
&gt;https://www.youtube.com/watch?v=TBb9O-aW4zI RE: multiple models: I thought this was an annoyance at first. The 'dashboard' is a great example. In most cases - you can use the route nesting for the actual app data levels - or load many models [https://emberigniter.com/load-multiple-models-single-route/](https://emberigniter.com/load-multiple-models-single-route/) \- or grab data (with straight fetch etc.) in various component for grabbing data that isn't going to be edited (such as a stock price or news feed). BUT that's where the 'attitude' might appear... Because there are often application level Design concerns that ~~should~~ could be changed... and THEN it all works. Ha. People (myself included) want to learn a framework - but it might be their first. If you don't know JavaScript design patterns - *people aren't going to know that*... and your(my) questions are going to sound totally out of touch (to the people who have been building the framework for years). It's a big system... and I think it's a disservice to act as you can just learn how to build an app with just *a little* understanding of HTML, CSS, and JS. You probably shouldn't be using Ember until you've hit a wall with Vue. I think there could be some improvements in how we teach Ember - But - *in general*, this thread is shocking to me. It seems like a thread *from 3 years ago* but only 4 months old! This is a bummer. Most of my experiences with the community have been wonderful. I like Vue for projects where I would have sprinkled in Angular 1.5 years ago. Legacy apps. Laravel/PHP app UI. Small targeted apps. Once you need to build your own ecosystem view starts to feel a little *shakey*! In theory... loading models in an ember-data way saves you sooo much grunt work. I used to be afraid of it - but then I read [https://leanpub.com/emberdatainthewild](https://leanpub.com/emberdatainthewild) and it's not very scary. I'm just kinda reshaping an object - like a filter. I'd say that Ember doesn't know how to make itself "Cool" - because it wasn't ever trying to be. Maybe I can help! : )
Contribute to the project submitting your own animations.