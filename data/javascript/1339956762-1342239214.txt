Yep, exactly. Glad to hear I helped. :)
After they press enter, just add the following code to the event handler. In jQuery: $('#inputbox').focus(); In pure JavaScript: document.getElementById('inputbox').focus(); Hope that helps!
thanks a lot :) I am able to implement it, thanks a lot for your help.
Although I've never used it, I was under the impression that backbone.js was an actual web server implemented in JS that runs on the server side. Which I think is what node.js, but I might be wrong about that too. But backbone.js apparently runs on the web browser just like any other JS, but it helps to fetch data with AJAX and combine it with HTML templates... right? So it's not a replacement for a server side language like PHP, but it can complement it.
In this case, I wouldn't make Crawler an object at all, I would make it a function, like crawl_url(url, callback). The callback function would receive a CrawlResults object.
You need to think how people will use the API. Will the public ever call getPage()? If it's private, there is no good reason for it to take the internal state, I think it would be stupid to pass it around if it's available already. 
&gt; What is harmful about having an easy way to test the type of the object? It's not harmful per se, but it often makes the code less reusable. Let's say you have a method that receives an array as a parameter and adds some value to it. If you just check that the object supports a `push` method, the code will work with any implementation that has the method. That's duck-typing. If instead you test for the concrete type, it will only work with this type - it's less reusable. Ok, my example is bad, but I hope you get the idea. &gt; What I mean is, how would you not create a new getName function every time you instantiated a new NamedStack? You can't. You'll have duplicated instances of all your functions, but the only downside of this I can think of is memory usage and I've never found this to be an issue. However, if you think that's a problem, you should use prototypes. Same for `instanceof`, for me this is not important, but if you need to use it - use prototypes. The prototype-based approach is not perfect, but it can address all the issues you mention and it even can be done in a reusable way. I'll be talking about this in subsequent articles, but if you want you may look in the implementations of [YUI][yui], [base2][base2], or see what CoffeeScript is generating. Or just use CoffeeScript instead. Also similar patterns to the ones used in these libraries are described in these books - [JavaScript Patterns][jspatterns] and [Object-Oriented JavaScript][oojs] both by Stoyan Stefanov and [Secrets of the JavaScript ninja][ninja] by John Resig. However, my point is that it's helpful to know these patterns, but it's often easier to write cleaner code without trying to force features that are not part of the language. [yui]: http://yuilibrary.com/ [base2]: http://code.google.com/p/base2/ [jspatterns]: http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752 [oojs]: http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/ [ninja]: http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X 
Hello, I realized that, but I couldn't insert the code into Reddit, it wasn't really clear how it worked, thanks a lot for your help.
You really should try and stay on top of this stuff or you may old school yourself out of a job.
Thank you very much for your extensive answer :-) I seem to deal ok as long as the "program" or API fits in my head, and with subsets like html5 canvas, JSON, etc. jQuery was a *bit* of a leap but I got that down. And yes, I started when Netscape 2 was hot and frames were a neat idea.. is there a simple framework you would recommend I pick up to start learning these new concepts in? Or should I really get a better idea of what the whole MVC thing is first, by diving into CakePHP or similar? (I tried to write a few myself, but quickly got lost in the architecture..)
Yep, in fact, you have to use either jQuery, Zepto, or Ender with it in order for it to work.
I have yet to see this happen. 
There isn't enough internal state and logic to really go full oop here. But then, you always can: * Only pass arguments to a function if they have no connection to the internal state of the object. If they change internal state, use a setter instead. * Avoid function parameters, since input values might need to get checked and people can't easily remember arguments lists. * Put the callback function in its own class and pass an instance of that class, if you think the callback doesn't really belong into Crawler and want to go full java oop... * If you expose the callback function to the consumer, you might as well wrap this all up in another class EasyCrawler * Use composition to build Crawler up from several smaller classes. Then have methods to invoke different behaviour. * Control flow should be in it's own function, or even encapsulated in another class (AsyncCrawler). Unless the object relationships are simple. You want to use classes to do some of the following: * model entities and their relationships * encapsulate state and behaviour * build an intuitive, expandable, self-documenting no-surprise API What's your use case? Are you going to crawl multiple web pages? Do you have multiple callbacks per page, or only one? Do you always extract links? I like to hide implementation details, like fetching URLs, caching pages and using regexes to scrape stuff from html: c = Crawler.new(url) for link in c.getLinks(); for image in c.getImages(); 
Extremely thoughtful reply. I'll power karma you for the rest of the week, although it looks like you haven't posted much lately. btw: [which version](http://en.wikipedia.org/wiki/JavaScript#Versions) of javascript really split off towards modern javascript?
Looks cool. Is there any performance hit?
Same problem here on my HTC sensation. Total bummer because I am really excited to check it out.
Well, [this](http://jsfiddle.net/fmVPg/) works :), so probably the element with id you are providing doesn't exists. Also check for duplicate ids in HTML (DOM elements).
So basically these new js based frameworks first create the problem and then they "solve" it by rendering html on the server-side which is exactly what most of the frameworks have done since the beginning of the internet :)
 function toggleGirlQuestions(elem) { $(".girlspecific").attr("disabled", !elem.checked); }
Here's a weird old programmer secret. You know, like the one for smooth skin that makes dermatologists hate you. Are you going to use the crawler yourself? Instead of focusing on writing the code for your crawler class, do it backwards. Write a whole bunch of code using your (still imaginary) Crawler. Write lots of pretend code. Try out a few scenarios. Try different styles. Just make sure that you write it in the way that pleases you and supports your typical use cases elegantly. Pick you favorite(s) THEN you make the objects, classes, functions that you need to enable you to write in the style that you like. Bonus - you've accidentally written test cases. 
Actually you'd want.. function toggleGirlQuestions(elem) { $('.girlspecific').prop('disabled', !elem.checked); }
For fun, [I did it with CSS](http://jsfiddle.net/qcJjj/1/). (only cool for browsers that support pointer-events)
well damn. that sounds awesome~ thanks for explaining! :)
Maybe it isn't supposed to work with Chrome but those elements remain disabled regardless of appearance.
[offtopic] CakePHP is a bad choice. Try Silex http://silex.sensiolabs.org/ — it's newer and much simplier. And when you'll start to feel comfortable with it, take a look at it's bigger brother Symfony2
This is exactly what I needed! Thanks!
Not a bug, wtfmf's solution never removes the disabled attribute from the elements, so they stay disabled regardless of appearance.
Yes, I'm clearly an idiot. I forgot to remove the disabled attribute. I should really pay more attention to what I'm doing first thing in the morning.
Great topic for discussion! I'll try to answer your questions as best I can. &gt; What practices are critical to writing better javascript? * Avoid polluting the **global scope**. * When you declare your variables always use the **var** keyword to avoid unintended globals. * Split code into modules (whether AMD, CommonJS or a simple [IIFE](http://benalman.com/news/2010/11/immediately-invoked-function-expression/)) based on responsibilities and explicitly declare your dependencies. * Learn the difference between **Isolation (Unit) Tests** and **Full Stack (Integration) Tests** and how/when you should use each. (I use [Jasmine](http://pivotal.github.com/jasmine/) for unit testing my JavaScript and typically avoid integration tests, however both are valuable). * Use a static analysis tool like JSLint (or, the more sane [JSHint](http://www.jshint.com/)) and have it run automatically in a continuous integration (CI) environment or when you run your unit tests. It will catch lots of little errors that can trip up older browsers. * Understand [event delegation](http://www.nczonline.net/blog/2009/06/30/event-delegation-in-javascript/), event bubbling and event propagation. &gt; At this point in our education, would adopting a framework like backbone.js facilitate or inhibit our growth? * This is entirely subjective based on the collective experience of your dev team. I've found that backbone.js has a bit of a learning curve because it is the least opinionated of the front-end MV* frameworks so it doesn't prescribe a lot in the way of how to structure your code. The nice thing about backbone is that you can start by using only a small portion. * A great place to start with backbone is by refactoring all your manual DOM manipulation out of jQuery and into [Backbone.View](http://documentcloud.github.com/backbone/#View) classes. Strive to understand how the [Backbone.View.events](http://documentcloud.github.com/backbone/#View-delegateEvents) hash works and how event declaration with it works using delegation under the hood. * Treat "Refactoring" carefully, start with a small chunk and don't bite off more than you can chew, so to speak. &gt; How have you succeeded in legitimizing javascript at work? How have you failed? * This is tricky, but I would say the most important aspect to **legitimizing** the front-end in general (including javascript) is by treating it with an engineering mindset. * Server-Side (aka: "Back-end") devs are traditionally more well versed in engineering approaches but it seems like the lack of knowledge about engineering practices in the front-end coupled with some of the horrible warts that exist in JS cause people to hack at a lot of front-end code. To combat this you should understand all the things I listed in answer to your first question. * Hold open meetings at your workplace and poll devs for what they don't understand about JavaScript. Then go and research those topics and host Lunch-And-Learns (also called "brownbag sessions" in some circles) where people can come and eat and learn. * Understand the [tools and techniques](http://paulirish.com/2012/talk-tooling-the-webapp-development-stack/) available to you on the front-end. * Pair with people! Don't just tell them what to do or read, take on a mentoring mindset and go sit down next to them. Pick a problem they are having and strive to solve it with best practices and tools. Hope this helps, there are probably lots more tips but I think I've given you some low hanging fruit to pick to get started helping to reduce the amount of debt you have :) 
This is fantastic. I'm going to point my team at your response. Thank you!
Nice. Haven't heard of Jasmine. Will check it out. Great answer.
Former back-end (BE) dev that's doing front-end (FE) work pretty exclusively for the past few years here. davemo's post is awesome. Good advice all around. The only thing I would add is how I put today's FE work into perspective for BE devs: Don't think of the FE simply as output. Start thinking of what HTML, data/json and CSS gets delivered as an initial application state. Such a view lets them bring all of their application best practice concepts (like clean scope) to bear.
You are correct, wired's article just has a still image.
It looks like in the baseline that the DOM is only getting hit once -- if that's correct, then it's going to be hard to beat that, especially if you're trying to test performance WRT touching the DOM. The rest of the techniques look like they all touch the DOM more than once, and so of course those are going to perform worse. You could probably speed up the baseline by replacing `$('&lt;td /&gt;')` with `$(document.createElement('td'))`, among other things. Also, and I'm not sure if this has anything to do with anything at all....but in `Benchmark.prototype.setup` you have `.html('')`. I'm not sure that doing that will remove `.data()` that you may have set, though I may be wrong. This could invalidate some results, if so. 
I think moving from jQuery to Backbone has drastically improved my code organization.
Everything that davemo says is absolutely fantastic. A few things I'd like to add: * Split your unit tests into regular unit tests, where you test specific functions in your code, and functional tests, where you test how a user would actually use your JavaScript on your site. Good tools for automating functional testing include [PhantomJS](http://phantomjs.org/) and [Selenium](http://seleniumhq.org/). * We use [Travis](http://travis-ci.org/) for continuous integration since I work on an open source project, but some kind of CI is important if you're working on larger projects with multiple developers. [Hudson](http://hudson-ci.org/) is also a pretty common standard to use. * Use some sort of API documentation tool and proper commenting in your JavaScript too. [YUIDoc](http://yui.github.com/yuidoc/) is highly recommended, and if you're familiar with Javadoc, it's pretty similar. It generates some [pretty nice web documentation](http://yuilibrary.com/yui/docs/api/classes/Model.html) as a result.
&gt; * When you declare your variables always use the var keyword to avoid unintended globals. A good way to enforce this (and a bunch of other good practices) is to use the `"use strict"` pragma at the top of each script to make the browser run it in strict mode ([MDN](https://developer.mozilla.org/en/JavaScript/Strict_mode), [spec (informative part)](http://es5.github.com/#C)).
This seems to be relevant: http://blogs.adobe.com/bparadie/2012/05/07/the-pew-pew-manifesto/
Hire a Front-End Engineer. Someone who's only focus is Javascript and front-end code. Someone who knows the DOM on multiple browsers inside-and-out. It's taken a while for companies to come around to the notion of specialization in web development. I've never known a back-end programmer who does front-end code as well as they do back-end. It never works out well. It's a different mindset and different skill-set. 
If you've gotten very good with HTML and CSS the only jQuery you'd need to know would be $().addClass() or $().removeClass() .. or in vanilla javascript .className You'd style everything normally, then add display:none; in the css. Then make a class called .on { display:block; }, add that class via js to stuff to show them. Add transitions if you'd like to get fancy.
I guess it depends on what you guys do, and what server side platform you're using. If you are developing a product, with new versions on a regular basis etc... then I think you should take the time to come up with an architectural plan. Step back, take a look at the frameworks around, like backbone and others, look at what's specifically available for your server side platforms. If a couple of options stand out, come up with a prototype and go from there. It may be that nothing suits your needs then come up with your own architecture. You just need to make sure that whatever route you take will leave you with the most flexibility for the future. If you're more into a web agency situation where each client gets their own site, the idea is the same but your priorities should be different. You need something that can be used as a base to get you up and running quickly. In the end though, you and your team know better than anybody else what you need so don't simply pick a solution because it's popular. Take the time to figure out what would be best for your circumstances. Someone posted a link in this thread to that Pew Pew Manifesto from a few days ago. I think it's an excellent read and if you're making a product and your back-end uses c# or java, It is well worth it to consider compiling to JS from that language. I saved myself tons of headaches and dramatically improved my productivity a few years back when I started to use Script# to compile from c# to JS, I never looked back. Recently a friend of mine released [his own](https://github.com/vannatech/blade) c# to JS compiler which is even better. It may seem like a heavier involvement at first over simply putting .js files on your site but it's worth it.
Are you in Seattle? :)
Thanks. Exactly what I wanted.
&gt; Use a static analysis tool like JSLint (or, the more sane [3] JSHint) I would say use JSLint until you understand why you don't have to follow every little nitpick and the risks involved not following them, then move to JSHint if you so desire. I work with a large dev team and a large share of the time when I or my peers ignore best practices recommended by JSLint we get burned by them so even though they seem like little opinionated annoyances they tend to be right. For example, we got burned by the ++/-- ignore rule and some 3rd party dev wrote a peice of code like: `$('someEl_' + ++this.id + '_id')` and the minifyer end up writing `$('someEl_'+++this.id+'_id')` which is a syntax error, and since we only minify in QA/Production it wasn't caught in dev, QA missed it and it got released, thankfully the functionality was turned off for further testing on production.
Nope :'( Do you folks do relocation?
It's a better idea to avoid inline javascript and to have html fallback links, like [this](http://jsfiddle.net/KWjVp/8/).
Excellent to hear a back-end devs perspective and you are absolutely right, having an "application" mindset when dealing with HTML/CSS/JS (and JSON) helps shape the way you build things.
Just saw in another comment that you're also a Mosher. Cheers distant-cousin :) -Bryn Mosher
I will keep that in mind next time and THANK YOU so much jsjunky... helps so much! 
I'm not completely sure what you are trying to accomplish. I think that you are trying to use javascript to add the html that you have between the comments. No matter what, your example of what you have tried will not work because you are overusing double quotes on line 8. The syntax highlighting provided by pastebin demonstrates this. There are a few different ways to accomplish this: 1) Use single quotes around the value in the assignment: divTag.innerHTML = '&lt;a class="sidetab" href="#tab_dynmap" id="tabhead_dynmap"&gt;&lt;img src="Images/DynMap.png" alt="DynMap" /&gt;&lt;span&gt;DynMap&lt;/span&gt;&lt;/a&gt;'; 2) Use single quotes for attribute names: divTag.innerHTML = "&lt;a class='sidetab' href='#tab_dynmap' id='tabhead_dynmap'&gt;&lt;img src='Images/DynMap.png' alt='DynMap' /&gt;&lt;span&gt;DynMap&lt;/span&gt;&lt;/a&gt;"; 3) Build all of the elements using DOM functionality (woqe covered this method) The next problem that you will face in your code is that line 10 attempts to append the divTag to the body element. The [appendChild](https://developer.mozilla.org/en/DOM/element.appendChild) function "adds a node to the end of the list of children of a specified parent node." This means that your divTag will be added to the bottom of the body tag (at the end). However, line 75 of your HTML shows that divTag should show up in the middle of the div with the id, sidetabs. Woqe gave you code that will add your divTag to the specific location that you specified. If you don't care about the position in the sidebar, then you can use this on line 10 instead: document.getElementById("sidebars").appendChild(divTag) That will add your divTag to the end of the sidebars. I could go on and on...ask more questions and clarify the requirements.
I upvoted thejsjunky's version, which is really helpful. Here's my shorter version: $(function(){ $('#treemenu1').find('a').each(function(){ // For each 'a' under the element with an id of 'treemenu1', if (this.href==location.href){ // if the current 'a' has an href equal to the current page URL $(this).addClass('Active'); // add the active class on that 'a'. }else{ // Otherwise, $(this).removeClass('Active'); // remove the active class. } }); }); Here's the same code sans jQuery, for modern browsers that support querySelector[1] (IE8+) and classList: document.addEventListener('DOMContentLoaded', function(){ // wait for DOM structure to be ready to edit var aNodes = document.querySelector('#treemenu1 a'), // grab all the links under #treemenu1 currentPageHref = location.href; // convenience/semantic variable // note: alternatively, use native forEach or Object.keys for(var i=0, length=aNodes.length; i&lt;length; i++) { // for each 'a' DOM node if(aNodes[i].href === currentPageHref) { aNodes[i].classList.add('Active'); // tip: if this is the only link with this href, you can probably return early here by uncommenting this: // return; } else { // is this code necessary? (do the links have the 'Active' class on them by default?) aNodes[i].classList.remove('Active'); } } })(); Even simpler, alternatively you can take advantage of CSS attribute selectors, which are supported in browsers IE7 and up. This is probably what I'd implement, because it's the cleanest, hits the DOM minimally, lets CSS take care of the exact conditional styling we want, and doesn't have any loops: document.addEventListener('DOMContentLoaded', function(){ var style = document.createElement('style'), // programmatically create a new inline CSS stylesheet currentPageHref = location.href; // convenience/semantic variable // fill in our inline style with one rule targeting the element we're interested in style.innerHTML = '#treemenu a[href=' + currentPageHref + '] { //copy and paste the "Active" CSS styles here }'; // add the style to the HTML head document.head.appendChild(style); }); [1]. An alternative to querySelector is this: document.getElementById('treemenu1').getElementsByTagName('a'). But it's recommended that you add a check for the existence of the 'treemenu1' element before trying to use methods on it (i.e. don't chain it like I did).
This might work also, always good to try and refactor code. $("#treemenu1 a").removeClass("Active").filter("[href='+location.href+']").addClass("Active"); 
It's one of the better questions I've seen in a while. It's why I joined many of these dev related subreddits. Questions like these are what keep me from clicking the unsubscribe button.
IIRC, the difference between var foo = function () { ... } and function foo () { ... } is that, if these lines occur inside some other function, then the second one _also_ defines foo in the global scope as a side effect. So I always use var foo = function () { ... }. (function () { ... })(); Just defines an anonymous function and immediately calls it. That way you can use local variables inside it and they will be gone after the function runs.
One of the reasons (the only reason?) you might want to name the anonymous function is to enable recursion inside it, e.g.: window.globalThing = function bar (arg) { if (arg) { console.log('recursive call'); } else { console.log('direct call'); bar(true); } } Here, you might not want a reference to the global name inside the function body.
If you wanted to call foo.bar(), here is one way (using *object literal* notation): var foo = { bar : function() {...} }; 
There are two ways to create a function: a function declaration and a function expression. A function declaration is always the first thing on its line - in your example, it's this one: function foo() {} The effect of running the above code is that a function named "foo" is created and assigned to the variable name "foo" in the current scope. Note that, using this syntax, the variable name and function name are always the same - that is not the case with a function expression. A function expression looks very similar to a function declaration, but it's actually a different type of syntax altogether (as is illustrated by the fact that "function () {}" is a valid function expression but not a valid function declaration). A function expression cannot appear as the first thing on a line (to avoid confusion with a function declaration). In your example, both of these lines contain function expressions: var foo = function () {}; var foo = function bar() {}; Both of these lines create a function and assign it to the local variable "foo" - the difference is what the actual name of the function is. In the second line, it is given the name "bar" - but on the first line we've left out the name, resulting in an anonymous function. The function's name, when declared in this manner, can't actually be accessed in the current scope. So the only difference between the two above lines is that, if you write the second line, then within the function that you create you will be able to reference that function by the name "bar". Now we get to this: (function foo() {})(); As we've already established, there are only two types of function declarations - and since the word "function" is not at the first character of the line, we know that this is a function expression. The function expression, "function foo() {}", is surrounded by parentheses only to prevent it from becoming a function declaration - "!function foo() {}()" works just as well. Which brings us to the last part, "()" - which, as you know, is how you invoke a function. So what this line is doing is creating a function via a function expression and then immediately invoking it. This syntax is more often seen in this form: (function () { // var x = ... })(); Which is called an IIFE (immediately invoked function expression). The purpose of it is to create a new scope for variables declared inside, so they don't conflict with variables in other parts of the program. They are usually anonymous functions, as it doesn't make sense to call them more than once. There's just one last subtlety: what's the difference between these two lines? function foo() {} var foo = function foo() {}; We know that they both create a function named foo, and they both assign that function to the local variable "foo". But there is a difference: function hoisting. Function declarations (not expressions, only declarations) are "hoisted", meaning that they, like variables, aren't actually declared where they are written. Instead the interpreter declares them at the start of their parent function. This code illustrates the difference: alert(foo); alert(bar); function foo() {} var bar = function bar_fn() {}; alert(foo); alert(bar); The alerts will be: "function foo() {}", "undefined", "function foo() {}", and "function bar_fn() {}". Notice that "foo" is defined even before it is written - this is because the declaration is automatically hoisted to before the rest of the code. Also note that the first "alert(bar)" returns "undefined", and does not throw an error. This is because variable declarations are hoisted as well - but the variable names are set to "undefined" until the line they occur in the code. In other words, this is what the above code does, in the order the browser executes it: 1. creates the variables "foo" and "bar" and sets them to "undefined" 2. creates the function "foo" and assigns it to the variable "foo" 3. runs the first two alerts 4. creates the function "bar_fn" and assigns it to the variable "bar" 5. runs the last two alerts **edit**: There is, technically, a third way to create a function, and that's with the function constructor: var foo = Function('alert("hi!");'); var foo = new Function('alert("hi!");'); // exactly equivalent to line 1 This takes a string argument and parses it into a function, which can be useful for loading and executing additional scripts from the server. However, it is far less efficient to parse a string into a function than it is to declare one explicitly, so you should never use this syntax for functions that aren't loaded dynamically.
They key part is that bar() is only accessible inside the scope of the anonymous function. You could call the anonymous function 'me' and it would not conflict: window.globalThing = function me(arg) { if (arg) { console.log('recursive call'); } else { console.log('direct call'); me(true); } } http://jsfiddle.net/Q4ayY/
Thanks - what does "not act like a normal function" mean? Can you elaborate?
Thanks - that's what i thought. Is this syntax used to limit the scope of the function i.e. execute some logic but don't mess with anything outside this snippet?
Thanks, I'm glad it helped.
Didn't know that! It can be pretty useful in some cases. On a related note, an anonymous function with a name will get a `name` attribute of the same name. Edit: yonkeltron already wrote about `name`, damn
Without the opening parenthesis, the JavaScript interpreter will try to parse the function keyword as a function declaration statement. When you add in the opening parenthesis, it is recognized as a function definition expression.
This is incorrect. The first set of parenthesis actually do nothing in the provided example. Putting parenthesis around function expression is just a convention which makes it easier to tell that the function expression will actually be immediately invoked. var a = function() { return 'foo'; }(); var b = (function() { return 'foo'; })(); a === b; // true These are both perfectly valid function expressions. Parenthesis are only required when using a function declaration that immediately invokes itself. (function () { // body... }()); The following generates a syntax error: function () { // body... }();
Uh... An incoherent list of premature micro optimizations and language basics. And I can't even think when #8 is ever relevant.
When [this happened](http://i.imgur.com/sGbEL.png) just because I had my browser at less than 1000px wide, I closed the page.
There is no difference. The extra parenthesis are a convention to illustrate that a function is being run as it is declared. It is used because the variable braces may be off the screen in a long function.
Great advice, local meetups offer a great spot to connect and also find some talent. I run a local meetup in Saskatoon called [Sask JavaScript](http://www.saskjavascript.com) and it's been a great experience learning from the experiences of others.
It's not a convention, it's the hack that tells the interpreter "treat this function as something which can be invoked, not as a function declaration. edit: oh, in this case it's just convention because of the = doing the same thing. Also, ~~#2 is a syntax error~~ TIL.
Is #2 even correct? I was under the impression that using 'new' was a superfluous step. [Here](http://stackoverflow.com/questions/7375120/why-arr-is-faster-than-arr-new-array) for example.
oh pretty code :) (mine looks ugly) but thanks this has helped me understand how to form javascript a whole lot better :) thanks again
You are correct, I am trying to use javascript to add the html that I have between the comments Oh that makes sense, I'll have to remember that in the future. Heard someone say escape the quotes. If you have time how is that different then this? So woqe showed me how to build elements using javascript, after you have everything built, you just have to get the javascript to write to the page once you got everything built? So random question can you getElementById of div that is like 3 levels down from the body? But what I'm trying to do is get a script that will write some code to the page. I need a script since I can only edit the header and I really am trying to get it to be external so it doesn't make the code ugly. (since its already a massive page) So yet another question... sorry for 20 questions.... How do i get an external script to load when DOM is ready and not right when the page loads? I have jquery and .ready() might be what I need. I have a workaround where I have put the script at the bottom of the page. 
I find this overly cumbersome and what when I suddenly want to export more than one global? Often you don't even need to export anything. I have lots of scripts that just enhance the given markup and need no access from the outside, or outside code just needs to listen to custom events they fire. (function() { var privateItem = 10; function privateFunction() { return privateItem; } this.YourModule = { DoPublicStuff: function() { return privateFunction(); } }; })(); "this" in this case would be the global object that is used to keep the globals. This will be "window" in a browser context, but might be something else in server-side js. 
Really poor written, with some sparse grammar and punctuation errors.
Nope... (function(l) { if (l &lt; 5) { arguments.callee.call(null, l + 1); } alert(l); })(1); The only reason I can see is that you want to have speaking names in stacktraces during js debugging / development. 
I love 20 questions! &gt;Heard someone say escape the quotes. If you have time how is that different then this? Yes, you could also escape the double quotes inside of the string: divTag.innerHTML = "&lt;a class=\"sidetab\" href=\"#tab_dynmap\" id=\"tabhead_dynmap\"&gt;&lt;img src=\"Images/DynMap.png\" alt=\"DynMap\" /&gt;&lt;span&gt;DynMap&lt;/span&gt;&lt;/a&gt;"; Personally, I find that to be ugly and a nuisance to maintain because I always have to remember to escape the quotes. The browser doesn't care if you use single or double quotes, so I usually use single quotes for attribute values inside of a double quoted string. All of the different methods that I outlined are valid and acceptable though. &gt;So woqe showed me how to build elements using javascript, after you have everything built, you just have to get the javascript to write to the page once you got everything built? Yes, that's the short version! &gt;So random question can you getElementById of div that is like 3 levels down from the body? The [getElementById](https://developer.mozilla.org/en/DOM/document.getElementById) function can be used to get a reference to any DOM element that has an id attribute. There is no limitation on how deep in the DOM the element can be. &gt;So yet another question... sorry for 20 questions.... How do i get an external script to load when DOM is ready and not right when the page loads? Your current method of adding the script to the bottom of the page is perfectly acceptable. The code will be executed as the browser encounters it in the page. In some situations, this can be the preferred method of running the code. I have a case where I needed to execute an AJAX callback as soon as possible. I placed my code directly after the DOM elements that the AJAX callback would modify. jQuery's ready function will do exactly what you want: $(document).ready(function(){ //add your code here }); That code will execute the anonymous function *function(){ //add your code here }* when the document is ready. If anonymous functions are too confusing, then this is functionally the same: function myFunction(){ //add your code here } $(document).ready(myFunction);
\#2 Is not a syntax error. Did you try running it? The function is already being treated as a function expression instead of a declaration because it is being assigned to something. In this case, the extra parentheses would be purely conventional.
Thank you as well! Are variables hoisted as well if you don't put a var keyword before them? The interpreter seems to only complain about bar not being defined in this code snippet: console.log(foo); console.log(bar); var foo = 1 bar = 2 console.log(foo); console.log(bar);
Well it is nice that it isn't attached to a server-side framework (which, if you think about it, is a bit silly for a client-side technology). Now we just need to see if this gets any traction. I like the concept though.
oh yeah - missed the =. So i can't call either of those functions because i don't have access to them outside YourModule (they're essentially private).
http://ejohn.org/blog/javascript-pretty-date/
*edit: rabidcow is right, my mistake.
Precisely. You need to actually return the functions from the `function() { ... }` in order to get a handle on them outside the closure. (edit: or attach them to the global namespace or another object which is defined in a parent closure to this one.)
If using the module pattern is overly cumbersome, then yes, use a different pattern. If you want to attach more stuff to global scope (which is supposed to be a bad programming practice), then you should pass the global scope object into the closure. (This also helps out with the module pattern, I believe). You gotta be careful with `this`, since it changes so often depending on context. (function(global) { var privateItem = 10; function privateFunction() { return privateItem; } global.YourModule = { DoPublicStuff: function() { return privateFunction(); } }; })(this); P.S. Indentation, son!
[First hit I got](http://www.javascriptsource.com/navigation/connected-dropdown-box.html) when searching for "javascript connected dropdown"
You're doing it a little bass-ackwards and mixing up different patterns. What I gave you earlier is the module pattern. What you're trying to do now is the constructor pattern with a dose of module pattern mistakenly mushed in. function AnObjectType() { // constructor function this.stuff = "things"; var privateThingie = "private"; this.AFunctionWithAccessToPrivateStuff = function() { return privateThingie; }; this.SetPrivate = function (val) { privateThingie = val; } } AnObjectType.prototype = { AFunctionForThisType: function() { return 1; }, AnotherFunctionForThisType: function() { return this.stuff; } } var anObject = new AnObjectType(); // invoke the constructor anObject.stuff == "things"; // true anObject.AFunctionWithAccessToPrivateStuff() == "private"; // true anObject.AFunctionForThisType() == 1; // true var anotherObject = new AnObjectType(); anotherObject.SetPrivate("hoopla"); anotherObject.AFunctionWithAccessToPrivateStuff() == "hoopla"; // true anObject.AFunctionWithAccessToPrivateStuff() == "private"; // true anObject.AnotherFunctionForThisType() == "things"; // true anObject.stuff = "heyo"; anObject.AnotherFunctionForThisType() == "heyo"; // true anotherObject.AnotherFunctionForThisType() == "things"; // true If you're using the constructor pattern, YOU HAVE TO **new** YOUR OBJECT UP. --- It's possible to add private variables to a type's prototype functions like you're doing, but they'll be shared across ALL instances of that type. Good for utility functions, bad for private "member" variables. It's easy to get sloppy when you're doing it that way and screw stuff up in obscure ways. Another caveat: for values/objects (not functions), don't put them on your prototype unless they're static. --- Recommended reading: [Learning JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) and [Douglas Crockford's JavaScript: the Good Bits](http://javascript.crockford.com/)
Bearded coders would argue that anonymous functions can still be called recursively without language tricks by using a [Y-combinator](http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator) pattern. The practical value of using that rather than just naming the darn function is dubious, but it's there anyhow. 
p.s. i'm reading Pro JavaScript Techniques and am getting more lost, the more i read :) Also, appreciate your help.
This is how you do private variables with the constructor pattern: function AnObjectType() { // constructor function // private variable var privateThingie = "private"; // public function this.AFunctionWithAccessToPrivateStuff = function() { return privateThingie; }; // public function this.SetPrivate = function (val) { privateThingie = val; } } var anObject = new AnObjectType(); // invoke the constructor anObject.AFunctionWithAccessToPrivateStuff() == "private"; // true anObject.SetPrivate("heyo"); anObject.AFunctionWithAccessToPrivateStuff() == "heyo"; // true If you have "static" functions or ones that touch `this.publicVariables`, you can add those inside the constructor as well, or, when you're feeling more advanced, stick 'em on the prototype (which makes for a pattern fusion). (There's also a convention of `this._privateField`, making it accessible from outside but still indicating "this is supposed to be a private field".)
As far as I know, leaving out the var keyword will cause the variables to become global scoped and they will be hoisted to the start of the global scope
&gt;Right now the var window = http:// is throwing an unexpected token error in chrome and in IE9 it expected a ; I see two problems there. Well one problem and one bad idea! The problem that chrome and IE are complaining about is that you forgot to include quotes around the string. Lines 2 - 4 should be: var window = "http://mc.zephyrgaming.net/Dynmap/"; var tabname = "Dynmap"; var imgloc = "Images/map.png"; The bad idea is that [window](https://developer.mozilla.org/en/DOM/window) is an existing object that is rather important, so you shouldn't override it! Use another variable name instead of window and you'll be fine. On line 12 you are setting the image src attribute to the string "imgloc". What you want to do is set the image's src attribute to the value in the variable imgloc: img.setAttribute("src", imgloc); The same problem exists on line 13, 16, 20, 21, 35, 36, and 39. Lines 20, 21, 35, and 36 are slightly different because you want to mix string values and variable values. For this, you need to use string concatenation: //lines 20 and 21 link.setAttribute("href","#tab_" + tabname); link.setAttribute("id", "tabhead_" + tabname); //lines 35 and 36 tabdiv.setAttribute("id", "tab_" + tabname); tabdiv.innerHTML = ("&lt;h3&gt;" + tabname + "&lt;/h3&gt;"); The final issue that I see is on the last line, line 53. You are trying to append the *tabdiv* to *tabs*. However, *tabs* is never defined! You either need to define the *tabs* variable with a getElementByID: var tabs = document.getElementById("tabs"); tabs.appendChild(tabdiv); or skip the variable completely: document.getElementById("tabs").appendChild(tabdiv); 
Indentation is supposed to help semantics, not being bound to syntax. why should I pass the global object in when it is already passed into module? If you really access it often, you might benefit from having a local alias (like passing in undefined), but since using the global object is only a last resort, the number of accesses shouldn't be that high that it matters. (Note that there is no difference in using a top-scope var to using "this.xxx" -- both end up as member of the global object).
You need to work with the change event fired by a select when a user selects an option. Then you can use the options array and the selectedindex proptery to figure out which value you have and load the appropriate list. 
Yes, and your indentation confused me, which is why I complained about it. I'm not a CoffeeScripter, but I expect everything within { } to be tabbed in once. As I see it, the advantage to passing in the global object is that you can more easily control what the "global" object is within the scope. It's safer than using `this` -- consider the future, where your function may get put inside a module that is invoked with a different `this` than the global namespace. At that point, doing a `s/this/global` may clobber instances of `this` where it'll refer to "the current object" rather than the global object. Using what I wrote, you only have to fix the `this` that's getting passed in as the `global` parameter and everything is copacetic.
I don't trust third-party code, therefore I don't expect `this` to always be the global object. There's no guarantee that `window` will always refer to the actual window, either, since you can override that name in local scope. There's also no future guarantee that your code blurb won't get copy-pasted into another context, where `this` definitely wouldn't be the global object. tl;dr: Third-party code doesn't have to observe Ecmascript spec Why not stick in an easy tweak to enable a loader which may be broken by your standards, if it makes your code easier to maintain later? There's decent precedent for it, jQuery being one example.
Some versions of IE consider properties added to a function (`bar`) as separate from properties added to a var referring to that function (`foo`). If you add a property to `foo` like so: var foo = function foo() { foo.x = 100; }; So after calling this function, `foo.x` = `100`. If you run, say, Google's Closure Compiler over this, which renames it to: var a = function b() { b.x = 100; }; Even after calling the function, `a.x` will be undefined in affected IE versions. My solution has been to always use the var and include an actual function name (always different from the var name) only for debugging purposes.
Ah yes, of course. Although worth noting it's not supported in ie and deprecated in modern js http://stackoverflow.com/questions/6735931/does-internet-explorer-support-arguments-callee-name
Aren't function declarations inside of other functions nonstandard?
I haven't fiddled with d3.js myself yet (it's on the to-look-at list), but [this workshop](http://bost.ocks.org/mike/d3/workshop/) (slides only) seems to be fairly effective at explaining some of the things you can do with d3 and how you'd use these features.
Wow, that pattern is a real mindfuck. But in the end it amounts to passing an anonymous function to a function that gives it a variable name and refers to it by that, so it's not actually black magic.
I agree that using callee is a bad idea, but it's not only named functions that can be accessed recursively. Any function assigned to a variable name in the parent scope can be accessed by the function - when I run your first example it actually works just fine.
Correct. This distinction between function expressions and function declarations has been posted at least 5 times in this thread (by myself and others), so I hope the OP understands it now :p 
It sounds like the affected versions are IE8 and below, and they actually can handle it, but they do so in a buggy and inefficient way. So I agree, it's probably better practice (when you need IE8 compatibility) to give function expressions either the same name as their variable name or no name at all.
If you want foo.bar, you have to do something like this: var foo = { bar: function(){ ... } }; Other than that, you forgot new Function('...', 'argument', 'argument2'); And with ES6 there's another new way coming to define a function: var foobar = (x, y) =&gt; x*y; Not that this would work in today's browsers, but tomorrow will be there soon enough.
 (function () { // var x = ... })(); Oh noes! The dog balls!
I ... I have no idea what you are saying. I'm sorry. *edit*: oh. Yeah, I'd actually heard Crockford say to put the invocation inside the parens before, I just hadn't heard him call my syntax "dog balls". Here's my take on it: first off, despite crockford's recommendation, plenty of other reputable sources recommend the way I'm doing it. And second, this makes more sense to me. He talks about the IIFE like it's all one unit, but it's not. You're creating a function, then executing it, and your syntax should reflect that. Besides, ")(" is a clear visual break - it allows you to mentally process the code in two chunks instead of one. And that syntax is also more unique than the Crockford approach, allowing you to more quickly recognize it as a IIFE. I've probably given this way more thought than I should have ...
Well, I do usually do this and leave it at that for "due diligence": (function (window, undefined) { .... })(this); The point is, my way is much easier to adjust than using `this` all over the place to refer to the global object and having to edit all of those if necessary. edit: Also, this is mostly to support people who are consuming your code, which may well be future-you, so telling someone to limit themselves is not necessarily a solution.
The ".name" is not supported in IE. arguments.callee itself is. In the future it might of course be easier to use the named function feature -- as soon as you no longer need to care about backwards compatibility. 
Haha, no, no annoyance at all. I like to receive feedback on my style, so I can work towards something better. About that "!" key, I've seen it used, I think at twitter.com, just to save a byte in some minified code. But I think it's fugly too, don't worry.
It is really cool to see how the coffeescript code base, by being well written, easy to read and easy to change, has gotten a ton of people into writing new languages :) Reading the coffescript code base got me started at a JS port of the OpenSCAD 3d language, to allow in-browser CAD work, a project I've really enjoyed working on.
Maybe you can add the color parameter img.png/#fff/300x200 [edit] Just saw that you have that, maybe you should add it to the example code on the main page.
While reading the first half I was trying to work out 'how the fuck is this different from coffeescript'. While reading the second half I was trying to work out if this will replace coffeescript. I decided it wont.
Good point. I've added a note in the beginning for people familiar with CoffeeScript with a link to skip ahead several sections. I don't intend to replace CoffeeScript - but merely to provide a more powerful alternative for people looking for one.
Crockford idol worship needs to stop. You can take most of what he says with a grain of salt. 
Assuming the comment doesn't throw a syntax error, which it probably will as it is a one-liner and you've commented out everything after //, they are equivalent.
Ok all problems fix, script is working exactly how i want it :) Yeah i should've known to put quotes around strings, stupid me. Also knew that window was an important object just wasn't thinking :D Oh so thats how you do that, quotes are for inserting that word, no quotes are for a variable. :) Thanks for showing me how to do all this, this has really helped me get my head around javascript :D and how to use it correctly Final code http://pastebin.com/HHCvXvLw
This returns undefined: function a() { return 'a'; } This returns the function a (function a() { return 'a'; }) So what happens with anonymous functions? This is invalid because it doesn't have a name: function() { return 'a'; } This returns undefined like the named version: var a = function() { return 'a'; } But this returns the function just like the named version: (function() { return 'a'; } Wrapping a function in parenthesis forces it to run as an expression, returning the function. Without the parenthesis it follows normal binding rules. If it doesn't have a name then it needs to be assigned to something or else it will throw an error. Check out emcascript 10.5 for more information. 
This also helps to spot gotchas, and functionality you just don't need. Some of the most intelligent code I've written I've deleted after I started to actually the use library (because it was never used).
Just be aware of filesystem and or webserver differences in handling case sensitivity. Example: On most UNIX-y systems you can have 'TitleCase' alongside 'titlecase' - they're different. On Windows they're the same. On OSX/HFS Bob's your uncle.
Great info again. I realized the mistake on the second example after I posted it. In terms of strict languages, prototype seems to be like a final or defined class variable rather than an instance variable. Obviously it could also be a function but i'm thinking it is best used for things like defining the value of pi in a Math object (for example).
While it would work just fine for that, it seems like overkill when you could just use a variable. I think the real beauty of prototypes comes in when you use it with functions that access "this". For example: function sum() { this.total = 0; } sum.prototype = { add: function (n) { this.total += n; }, toString: function () { return '' + this.total; } }; var a = new sum(), b = new sum(); a.add(2); a.add(3); b.add(1); console.log('sums are ' + a + ' and ' + b); Of course, the perfect large-scale example is jQuery. Every instance of jQuery (created every time you call $()) has a whole slew of functions, all of which operate specifically on the object you called them from, yet those functions are never duplicated. And thanks. I'm glad to be of some help.
Hrmm, I'm at best ambivalent about all these changes. It's all well and good to say "We're not breaking anything." but these are huge changes, and they will drastically alter how JavaScript is used and written. Indeed, it will mean that code generator created JavaScript will be completely impossible to understand by someone who writes JS by hand normally, because the code generators will be using features that are not used otherwise. It could easily get to the point where code generated JS and even minified hand written JS no longer appear to be the same language. It seems to me they are adding too much. On the plus side that will open the door for something cleaner and leaner to come in.
I wish I could retarget the compiler to elisp.
This looks like the language CoffeeScript should have been. Great work!
Glad to help. Now that I've let you trudge through the raw JavaScript solution (an important first step), I'll let you see a slightly shorter version that uses jQuery: http://pastebin.com/UMmUEdqk
This is happened to me as well, many times :) 
nice technique 
There is a comment in there about strings being passed by reference? Strangely enough, the example you give shows exactly the opposite. In JavaScript *nothing* gets passed by reference. Even objects are passed by value -- the value being a pointer to the object. In the 'Writing your own classes' section (and really you mean objects, there are no classes in JS) you are suggesting that //local (private) members var bool = b; Which is a bit misleading. That variable can't be seen by any other methods that you've defined on the object's prototype, or any method you've defined outside the constructor function. I'd say skip that whole section and go straight to prototypes. It gives a JS noob the impression that there is such a thing as a private / public / protected member concept on JavaScript objects, and there really isn't. But anyways, good job, i'm sure some people might find it helpful. 
[Test in Firefox 13](http://imgur.com/KqWmP)
Although I won't argue about what the "primary" purpose of require is (I assume you're right about that), one of its features certainly is to lazy load modules or groups of modules in your production code. The r.js optimizer allows you to go into quite a bit of detail about how to split or group your modules when building. Now, I'll agree that almond.js is useful when you're only compiling down to a single JS file, and consolidating to a single file is often the best option for a lot of scenarios. But for large apps that prioritize quick loading of initial screens, or that have features that don't make sense to load right away, or that include lots of compiled templates in the JS, it may be better to have the code split into sections. It's a neat feature because the lazy loading is configured at build time, and your code doesn't have to change as a result (besides having some visual loading indicators built-in, perhaps), and definitely an advantage of require.
I've had quite a few images fail. This is a very fun project, but the algorithm needs a bit of work.
Fails to recognize 3 out of 5 cats from a [wikipedia image for cats](http://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Cat_poster_2.jpg/250px-Cat_poster_2.jpg)
[Here's mine](http://www.tenthcirclesound.com/sympyrean/#0111110124310234013427012343021)
Split your string into an array on spaces then add the lengths of each element of the array until you pass 990. Subtract two, splice the array and join it on spaces. var words = 'this is my really really really really long string. It keeps going and going'.split(' '); var lengthSoFar = 0; for( var i = 0; i &lt; words.length &amp;&amp; lengthSoFar &lt; 990; i++) { lengthSoFar += words[i].length; } var stringThatIsLessThan990Characters = words.splice(0, i-2).join(' ');
I've modified the tutorial to reflect the fact that JavaScript is class-less, thank you for pointing out that mistake. But I did already mention that: &gt;Any variable defined using `var` is private, and is inaccesible outside of the constructor function itself. and // {ClassName}.prototype allows you to define public functions // which only have access to public members of the class I do like your suggestion of how to better organize the tutorial. I'll see if I can move some stuff around.
I get the error "`file is undefined`" at line 64 of demo.js, using Firefox 13.0.1 on Linux. I tried both the test images and one dragged from my file manager.
Is there any benefit to using [curl](https://github.com/cujojs/curl) over RequireJS?
I am disappointed that it does not recognize [upside down cats](http://i.imgur.com/83M9x.png).
[edit] Apparently I don't know how to format code on reddit. We tried out curl as well. Curl is more lightweight and in general is faster than requireJs. However, RequireJS isn't for production. After building your modules and using almond, Require is faster. Also, Curl shares the same ugly syntax as Require. Using the array of dependencies as the first argument to your require call, and listing the variables as arguments in a function. Awful. Just Awful. Require has an alternate solution: define(function(require){ var depend1 = require('depend1') , depend2 = require('depend2') , depend3 = reuqire('depend3') ; }); This is so much more clean than the way Curl enforces you to define modules. *Also*, Curl doesn't have NEAR the support as RequireJs. That's really the nail in the coffin. The community is behind Require, therefore it will most likely get the most attention for improvements.
Thanks for the feedback. I've tried drawing the level on an separate canvas and drawing that in another game but I didnt find much of a performance boost. Perhaps I was doing something wrong. I might try again with this one since I'm hoping it will work well on mobile devices. 
That did not work very well: http://imgur.com/DTXRZ
You could put a class on the popup div, say ".popup". When you click an image the first thing you do is remove any popups, then open the new one. Assuming you're using jQuery, it could be something like this: $('img').click(function (e) { // First remove any popups $('div.popup').remove(); // Now display the new popup // Code to display popup });
https://github.com/rhysbrettbowen/PlastronJS - though you'd have to buy in to using closure tools (though with backbonejs you have to buy in to underscore &amp; jquery, same with most MVC). The models don't have a reference to a collection and mvc.Store gives you a central place to get and create models to put in collections (so that the collections will have the same models). It was built so that different collections could share the same models (i.e. that a model can be in more than one collection).
&gt;[]+{} is "[object Object]"
Well, I certainly understand the "issues" they have. I have written one HTML5 game http://magigames.org/runestone_defense.html and have just started on another. They run very slow on my iPhone 4s. They run fine in a browser on a computer. If HTML5 is "supposed" to be for mobile, it's really not there yet. That said, I do enjoy writing in Javascript, and having my games be cross-platform, at least as far as computers go. It's also very hard to monetize an HTML5 game. There already exists an infrastructure to monetize flash games. If you are looking to make a little cash, I'd go the flash route.
Good book, pirate link.
The canvas element is very analogous to a real world canvas. Once you draw something on it, you cannot move it. In order to move the image to a different location on the canvas, you have to re-draw the canvas.
Not to harp on this again, but require *is* for production. almond.js is an optional replacement *only* if you choose to consolidate to a single file. It's smaller/faster than require since it leaves out the code to load additional js files remotely [(source)](http://requirejs.org/docs/faq-optimization.html#wrap). I know that the majority of people will choose to consolidate all their js to a single file anyway (making almond.js an easy choice), but both require and almond can handle this in production. Regarding the ugly requirejs format, I agree that it's a bit clunky. One solution that the [SoundCloud programmers came up with](http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/) (under the "Modular Code" section) was to write their code using the commonjs format since it was cleaner and easier to work with, and then write a script to convert it to AMD (requirejs) format upon build. Seems like a cool idea, except that they didn't release the code they used. Also, indent your code with four spaces to format it properly =)
Okay, thank you!
Well, you can move the canvas... but true. You can have layered canvas elements that do various things. Everything from parallax to simple character animation without having to redraw the entire background.
Unless you are doing this for learning purposes, there's no need to reinvent the wheel. There are several open and closed source libraries that will handle canvas images, animation, etc for you. I use JawsJS: http://jawsjs.com/ it's open source (LGPL)
Actually it's Iceweasel, 13.0.1 32-bit on Debian sid. But it looks like a general problem with the HTML5 File API, on [this demo](http://html5demos.com/file-api) I get the message that the API is supported, but when I try to upload an image I get another error ("`Component returned failure code: 0x80004003 (NS_ERROR_INVALID_POINTER) [nsIDOMFileReader.readAsDataURL]`"). [This one](http://html5demos.com/file-api-simple) works fine though.
this
Check this out: http://ludei.com/ Met the creator at e3. Its basically a phone-gap like program which boasts better performance.
Awesome, thanks for writing this. Those are exactly the frameworks I've been eying for my next project.
This is sort of true... While this is still redrawing the canvas it might be helpful in the long run. http://www.kineticjs.com/ -- The world of tomorrow, today! :) 
Thanks mate. I appreciate it. If your interested I can put it up on github for you. 
something bothers me greatly about their claims on their website: they talk about publishing easily to iTunes and the Play Store -- but half of their own games [see this page](http://ludei.com/games) seem be iPhone only. That doesn't bode well for their platform/tools.
Thanks, great blog.
Nice! It seems counter-intuitive to scroll backwards like that, however. It might also be nice to retain some of the momentum after the user lets go of the mouse like a mobile touchscreen device would.
Very nice!
Counter-intuitive to me. I drag left and the images move right. The threshold for the image snap needs adjusting. I think the slide animation should trigger if the user drags over a quarter (maybe less) of the images width rather than only if it passes the halfway point. Otherwise nice. Personally I'd use CSS3 transitions if available and fallback to jQuery. You could switch the transition-duration time to 0 whilst dragging and revert back on release.
I really nice decision to take the advice and switch the way the slide works. It makes a lot more sense now. I'd still note that pulling the first slide to the left advances you to the second slide though which still seems awkward. Also, I couldn't advance past the last slide. Also, I might suggest that you load the images in a wrapper that hides the ones below the first. That way the user doesn't see them load and then wonder where they went when all the JS loads. On the same note, you may want to consider some arrows or instruction so people know there is more to do. Really nice implementation though. I really like it! +1 for a little quality JS :)
I have been working on the same idea. Mine is a bit more geared towards the mobile environment though. http://jsfiddle.net/m742a/ edit: http://www.reddit.com/r/javascript/comments/vfs7v/fnswipegallery_a_jquery_swipe_gallery_geared/
I hadn't given CSS3 a thought, I know that I'm behind the times! Working for companies who require IE6 support has made me wary of using newer tech for production. That said I'm more than interested outside my line of work, could you recommend a well written resource for CSS3 transitions? 
Firefox is currently the only browser that supports the [css element() function](https://developer.mozilla.org/en/CSS/-moz-element). Feedback and criticism welcome! Happy Friday everyone! :D
Works better than OP's, but still a few glitches, e.g. if I start drag to the left, then change my mind and drag right before releasing, it will continue sliding to the left instead of the right.
&gt;FTFY http://jsfiddle.net/6ZuJZ/13/
Right on. Yeah, I thought you would be able to load in other modules with almond but apparently it's not really recommended. As far as the production thing, I had done a lot of reading on RequireJS the couple days before writing these comments. Reading all of the back and forth between the haters' blogs (I was initially a hater) and the supporter blogs. Lots of the statements nonchalantly stated that using RequireJS in production by itself without build tools and such was stupid. While that isn't saying that RequireJS isn't for production, I incorrectly formulated my unfounded stance of "RequireJS isn't for production" based on those comments. That was dumb of me. As far as lazy-loading modules though, I still think I would rather use some other loader in production. Require is just so damn big. :\
Probably would have been better to link to the Home page, rather than the Guide page. My first question upon hearing about TaffyDB isn't "How do I use it?" but "What is it?"
Since everyone else is talking about the functionality I might as well chime in about the code itself (note this is only criticism, not the good parts, most of it looks good): - You seem to like to save characters by using non-human-explainable names. If I saw liL and liW without looking at the rest of the context, I'd have no clue what they meant. - You should probably have some comments around the math part to explain what is going on - You unbind mousemove on the document but don't specify a function to unbind, so if I had bound something else to it, it would be removed too. 
About code: concise, pretty, easy to read, and easy to understand. 
By the way this has a few configurable options. reveal - how much of the next and previous photos will display spacing - how much spacing between photos threshold - how far a user must swipe to trigger a photo change.
I like it - but it's super flickery for me in Chrome 19.0.1084.56 m
Flickers in chrome and FF13. It's quite noticeable, and looks bad. Otherwise, it's pretty cool, and the flickering shouldn't be too hard to fix. Also, the loading is not great.. having to wait for all the images to load while they show on the page before they go into the scroll box area... not optimal. Needs some polish, but keep at it, you're on the right track OP.
It's cool and all but making it a "jQuery plugin" seems counter-intuitive as the purpose of jQuery is to make code work cross-browser, and this is obviously not a cross-browser capable feature. I can't think of a reason to use this on any production site if it only works in FF.
It should advance to the next slide when you click it. Here's the rationale behind that thought: When using a mouse, clicking to progress is the expected behavior. "Dragging to advance" isn't an intuitive action in this environment. Whereas swiping is very intuitive on touch screen devices. Trackpads fall somewhere in between. Allowing the behavior to meet the interaction expectations of various platforms would be ideal. 
Fickers in Mint/Debian Chromium 18 is noticeable as well.
Not touchscreen friendly. Flickers when release mouseclick over the image. Inverted dragging, meh. Sorry to shit on your hardwork, I would say it's pretty damn cool when/if you get these issues resolved. I'd help but i work to damn much, i need to drink and catch up on my redditing.
I've been looking for something like this for the last couple of hours. Reddit to the rescue. some other systems I found (similar): [royal slider](http://dimsemenov.com/plugins/royal-slider/) and [photo swipe] (http://www.photoswipe.com/)
I don't think that's the only purpose of jQuery. Yes, you wouldn't use this in a production site. It's just a use case for a particular interesting feature. I just happen to use jQuery to put it all together...
dude, very impressive!!
This is fantastic. Great work. Be sure to submit it to /r/gamedev for maximum karma (also they would love to see it).
Cheers!... and I submitted to [/r/gamedev](http://www.reddit.com/r/gamedev/comments/vh2jy/building_an_outrunstyle_racing_game/) as well (I didn't get to submit this one to /r/javascript - someone beat me to it.)
If you read the "dictionary" (the var definitions in the beginning of the function) first, the "labels" (or whatever makes sense to you) are actually catchy - they are easy to remember (due to the fact that they are associative), and easy to deconstruct... liW makes total sense to me even though I would not have named my variables in such fashion. If you read definitions first, code totally makes sense and is readable. Similarly, reading a book from the middle never makes sense, but (if of decent quality) makes absolute sense if read from start.
Fantastic work. So good it made me miss [the original soundtrack](http://www.youtube.com/watch?v=hwg-MkQeG98).
So many blue vws in my way! Nice work though.
Don't code in german, stick to english or at least be consistent. Declare all variables with var, it is super confusing when reading the code and then a variable mL pops up, where it is declared? localy or globaly? what does it mean? and so on. Also use variable names that someone else can understand, I don't want to do code forensics when I see variable names like ul, li, liL, liW. 
Don't people hate w3schools because they're outdated?
Thank's for the link. I will investigate the topic.
Have you got a link to the gamedev post?
Thank you. I dont have the time for it any longer, too many other ideas in the hopper. Im looking for help at this point. 
Closest I ever came to driving a Ferrari.
I was trying to figure out why this thing was so stretched out. Apparently it was designed with a 4:3 aspect ratio in mind. IDK if that's a limitation of Canvas or something. It's really good, i'm having a look over the code now.
Thank you. If you turn off fullscreen (the menu on the right) it will render in the original aspect ratio (320x240). I built the drawing engine from scratch so I have complete control over the way its drawn. I draw at the original aspect ratio and then (basically) canvas.scale to fullscreen it. 
“The menu on the right” was completely invisible until I stretched my window to full screen; may I suggest defining its initial position from the right edge rather than the left?
Sorry, I'm an idiot. I've never made this type of post before. Thanks for the info.
Hey, mediafire sucks for code sharing. Use gist.github.com :)
Thanks, I'll keep that in mind! [HERE](https://gist.github.com/2980312) is the github link
Thanks, but I haven't the slightest clue what to do with that information...
Hi there. I was obsessed with Sonic the Hedgehog for about 10 years of my life. I will help work on this. I know what it's like to try to get monumental projects finished without help, especially when they're as cool as this. Just let me know what I can do :) Do you have it up on github?
Thanks. I've emailed Louis to let him know about the broken html.
put the video in a &lt;div&gt; and move the location of the div with JS, so yes.
Awesome! thanks!
Oh that's cool,i can do it with CSS3? :) Nice.
You're in the correct subreddit. Javascript allows you to edit style and content on the fly, so not only can you script things to slide across the screen, but you could also script them to fade in and out, change color, disappear and reappear, expand, and with a little AJAX magic, you can have them change to reflect updates in real time. Javascript isn't just for popups and marquees anymore.
Thats awesome! Thanks dude!
Wait, 2013 you said?
Do you have a working example up somewhere? It'd be much easier to help if we could see/debug it in action. Maybe put it up on something like this: http://tinkerbin.com/
That's awesome. There is a very nice windows client now assuming that's what you use. I've always struggled with the maintainability of my javascript code so I'm looking forward to how you lay things out. 
Sorry for the slowness, database is hosted remotely atm -.- it was my one day app and i'm burnt 
Thanks. I tried this and it changes the time to the wrong amount, and still in a 24 hour cycle. Also tried changing a few other things (blindly because I have no clue what I'm doing) and, as expected, they didn't work either... :-/
Well hey, if it's working well - congrats on getting that far! Javascript is huge, if you're testing the waters... I say dive in! As far as warming your mac up, you most likely have an infinite loop somewhere that either needs to be slowed down or eliminated. 
Still getting used to JavaScript myself, but if you are writing a game my guess is you are writing it in one big loop to keep the screen refreshing, calculate what is happening and generally keep everything up to date. Have you got any delays set on this loop? I would use the setTimeout() function to make sure the script isn't doing more work than it has too.
Upvoted because this is the single most important JavaScript concept (async vs sync) for people transitioning from synchronous languages, which I constantly find myself having to re-teach aforementioned people.
When I read the title I thought this was shittytechsupport!
use chrome to look at the performance of the script. that will lead you to the expensive parts of code; from there you can determine the best way to optimize.
Aw, thank you! :D I love writing in JavaScript. It's not to anvanced, but still a bit challanging :) I have a setIntervall loop that is set to 50 fps. But maybe I shouldn't have that? Could be better to call the loop whenever something is happening in the game. But, then again. that might be a bit hard when I am going to put enemies and animations in there? Im not sure. hmm. 
I use chrome. The debugger is quite smooth :)
More details of the road's hills and turns would be fantastic. =)
The *main* problem is that you are setting the interval countdown each time through the game loop. This wouldn't be a problem if you were using setTimeout but with setInterval, you are basically setting a timer for 50fps then drawing an image, then setting a second timer for 50fps (running at 100fps now) then the next frame you are trying to run at 150fps and so on... The other problem is your zany use of *this*! You never once create an object by calling a constructor (use the *new* operator) so all you are doing when you do *this.that = 0* is set *window.that = 0* because *this* is equivalent to *window* in the default context. So all those variables are global which is bad. The third issue is that when the *bg* and *player* functions are called they create a bunch of functions *every frame* and then destroy themselves. Ideally, they should be fully-fledged objects created once with the *new* statement. The fourth thing is that you do a resize of the canvas (without resizing it at all) to clear the canvas between drawing phases when that is what *context.clearRect()* is used for. Everything all together along with some other minor fixes can be seen here: http://plunker.no.de/edit/jk4QWm
not trying to mac-bash, but if your mac is a laptop, then getting hot isn't totally abnormal as they don't have the best cooling systems. My macbook gets quite a bit hotter than my HP laptop; although the HP can be noisier, it has better cooling.
Holy cow! This opened my eyes like crazy! I didn't know that I was doing that many things so wrong! Thank you so much!!!
:) 
_Everyone_ does at least four things wrong their first time, so don't get discouraged.
The resizing the canvas to clear thing is actually a faster way to clear the canvas than using clearRect on some browsers!
It's a bit strange that the background moves when you drive into a turn, even if you're driving straight. The background should only be moving as the user steers left or right.
Although this is a shameless plug. I would like to know your opinions, and mostly if you find a tool like this useful or not.
Why the fuck is it that I always ask a question and then immediately the solution comes to me????? onsubmit="return validateForm(exampleName, exampleEmail)" 
It currently removes console.log(dir|time…) statements (which do affect performance) and doesn't mess at all with 'debug' statements. It also allows to remove predefined snippets of code, as long as that code is between two comments, e.g.: //&lt;performance&gt; heavy.code.performance(); //&lt;/performance&gt;
Thankyou for this, but what is this witchery at jsfiddle ;)
Thanks. I never actually tested it on linux desktop (only win7 and osx) so good to know that it kind-of works - at least in chromium. 
In the snippet you've got there, you've commented out the line: &gt; //server.setAttribute('style', 'position:absolute; left: 243; top: 168'); Then, you set the top and left in server.onload - however, you don't set the position to absolute.
thanks for the response, but could you explain further why i would have to check if they're null if the only way these can be accessed is by me chucking a non null input type into them? be gentle....
This did it! Thank you so very much. :)
&gt; var server = document.createElement('image'); There is no element "image", it's named "img". &gt; server.setAttribute('type', 'image'); There is no *type* attribute to set for images like that and if there were you'd specify a proper [MIME type](http://en.wikipedia.org/wiki/Internet_media_type). I'd suggest starting anew [learning HTML](https://developer.mozilla.org/en-US/learn/html) and [learning JavaScript](https://developer.mozilla.org/en-US/learn/javascript)
[Comments from the /r/programming post](http://www.reddit.com/r/programming/comments/vhmrt/fuckitjs/)
http://www.stackoverflow.com/
Don't forget your semi-colon, bruh.
Agree on the === But you can just do that server side, if people I gonna mess with you the JS validation doesnt matter anyway. Or am I missing something?
Forcing the awful `mm/dd/yyyy` format on everyone is evil. [The rest of the world (all 6.whatever billion) does not write dates like that](http://en.wikipedia.org/wiki/Date_format_by_country#Map). If you're going to privilege one specific format, at least go with ISO 8601. For something that claims to be keyboard friendly, I found it very disconcerting that I could not shift-tab out of the "Image:" field in the demo, unlike every other field.
Closed as not constructive.
I wrote an HTML5 game over a year ago that uses the same technique. The source is up on GitHub for anyone to play with: https://github.com/Ventajou/Space-Dinosaurs. The game alternates between car race and side scrolling shooter. I've never really finished it but it still gives a good idea of what can be done with HTML5 these days. You can also try it on my page: http://www.ventajou.com/spacedinos/ The code is actually c# compiled to JS using a tool called Script#, but I'm planning on rewriting the game as a sample for the new [Blade](https://github.com/vannatech/blade) compiler that my buddy wrote. I'm fully convinced that compiling a strongly typed language into JS is the way to go for large projects. 
I guess you had to be there.
Are you sure they just didnt forget to add "http://" to the link? Cuz if you forget to do that, the browser interprets the link to be relative to the page you're on and will just append it to the current URL.
 /^(?:[a-zA-Z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/ Oh boy. The email validation doesn't work correctly. Not having a dot after the '@' should be perfectly fine. I'd go with something simple like `/[^@]+@[^@]+/`. I.e. something which isn't an @, an @, followed by something which isn't an @. Yep, it's simplistic, but it's still better than the thing above. &gt;~~License: GPL~~ ~~Thanks for wasting my time. GPL'd libraries are completely useless. :/~~ \*whine\* \*whine\* **Edit:** Now also available under the MIT license. Woo!
How the hell did this get here.. I always heard IRC were like 2 ships crossing a channel! http://www.youtube.com/watch?v=O2rGTXHvPCQ theres no evidence unless you catch them live!
I don't appreciate my copyrighted pun getting published without my permission. You'll be hearing for my lawyer!
very funny, shared with my friends on IM. 
I like both JavaScript and things that are funny. Not this though.
I've seen that one several times and it always cracks me up!
Little rough, especially if author is an esl, but amusing nevertheless.
I didn't down vote you btw.
Looks awesome! Any chance for supporting other log functions? Mine are namespaced (for protection on browsers where console is undefined), so I'd like it to strip stuff like "myLib.log"
This is pretty nice! There seems to be a bug in the select element, where if you type "wa" for washington, it selects Washington first, then Alabama. It should probably have a time falloff for the typing, or if it continues to match the selected item, stay on that item. Nice stuff overall!
I just grabbed another regex from http://www.regular-expressions.info/email.html. According to the source it says it matches 99% of valid emails. You can always create you own filter. `filters: { myEmail: { regex: /^@]+@[^@]+/, error: 'My error' } }` What's worng with GPL?
The date format can have any custom delimiter and order. For the other thing, you just found a bug. I fixed it a few minutes ago. Check the demo, shift+tab should work now on file inputs. Please report any future bugs on the github page, as it's the fastest way to get my attention and get these things fixed.
Oh I see what you mean...Yeah I didn't think about that. I usually default to GPL for most stuff I do, but you're right that there are some grey parts with GPL and scripting languages on the web as I just read...I'm ok with MIT too. I just updated the site to reflect that.
Yup, that bug is in my TODO list.
Try adding a README so people who come across your repo understand what they are looking at: About project, requirements, how-to-install, demo page, license, video and/or screenshot. Also make sure to link back to your plugin at the Chrome Webstore so you can track stats on how many downloads, etc.
Give me some music theory behind the demo, 1 challenge with writing the code, 1 happy accident that came out of building the app
Let's say I wanted to do something like this - [0]ipaddress, longname, shortname [1]ipaddress, longname, shortname etc. and this would be a list of devices' ip addresses and their aliases
kind of like a spreadsheet i guess
I hope there will come a day someone convince me that classes in JavaScript have **any** sense. Frankly, I think it would be better to teach people, how to code with functions and prototypes instead of putting classes into the language. 
Sounds like you want objects? var things = { "X.X.X.X" : { shortname : "x", longname : "xxxx" }, "Y.Y.Y.Y" : { shortname : "y", longname : "yyyy" } } var search_for = "X.X.X.X"; console.log( things[ search_for ].longname ); // ^^------outputs "xxxx" You could even get fancy and use a function to construct the objects: function entry( short, long ) { return { shortname : short, longname : long } } var things = { "X.X.X.X" : entry( "x", "xxxx" ), "Y.Y.Y.Y" : entry( "y", "yyyy") } var search_for = "X.X.X.X"; console.log( things[ search_for ].longname ); // ^^------outputs "xxxx" Or even use a constructor: function Entry( short, long ) { this.shortname = short; this.longname = long; } var things = { "X.X.X.X" : new Entry( "x", "xxxx" ), "Y.Y.Y.Y" : new Entry( "y", "yyyy") } var search_for = "X.X.X.X"; console.log( things[ search_for ].longname ); // ^^------outputs "xxxx" 
I'm curious as to why you made such heavy use of the JSON object.
Looks like you can store objects {} inside objects?
Yes, objects in JS are just groups of key/value pairs. The key is a string and you can look it up by doing either: object_name.key_name or: object_name["key_name"] The value can be any kind of value, including Objects. Arrays are also Objects, they just have some helper methods like length, pop, push, etc. You only want to use them when you want key names that are numbers.
When I hear key/value pair, it implies just 2 items. I guess that is what ~~confuses~~ confused me.
It is just 2 items. One is a string and is a name, the other is a value. The value can be a Number and then it's a String and a Number. The value can be a String and then it's a String and a String. It can also be an Object and then it's a String and an Object. **Inside** the "value" Object there might be more pairs, or nothing. It doesn't change the first pair being a pair.
Array of objects (object literals to be exact). var arr = [{ prop: val, prop2: val2 }, { prop: val, prop2: val2 }]; 
What a mess... edit: I guess I can add something constructive... I'm not against adding legitimate classes to JavaScript, but this syntax is an ugly, muddled mess. What the hell am I looking at right now. If this is supposed to be a unifying alternative to the various existing patterns then why make it just as complicated...? People who already understand how to implement proper OO patterns in JS may or may not like it (I think it sounds like a load of crap obviously), but it probably doesn't look a whole lot easier to beginners.
I have been using XDate for date and time formatting/parsing. It doesn't cause any problems with the native JavaScript Date object. Link: [XDate](http://arshaw.com/xdate/)
Why not?
Thanks sort of been thinking the same thing myself about the name element. Noticed one or two sites dont even seem to validate on simple inputs like mine just check for blanks on all inPuts and thats it.
Cheers for making me laugh!
As i said i cannot view the code correctly but how does the function get called by the click event **edit been a long time since i last coded but im sort of understanding your code which is listening for an event without having to be called is that right??
Figured I'd shoot you an update. I didn't have quite the time I thought I would saturday night to do it. It's mostly working, but rendering is a little slow, and I didn't have time to work that out. Figure I just need to break the map down to individual chunks and draw visible chunks, but haven't had the time yet. I opted for 2x bigger rects while fooling around with it, but might as well get it rendering fast for that since if you go for 2x bigger maps you'll get the kind of decrease in speed I'm seeing.
US is likely better. I've met a few European developers that stick to US keyboards because punctuation used by programming languages is more easily typed.
`addEventListener` registers an event listener on the element. In this case, when a `submit` event occurs on the form element, the event is dispatched to the listener, `validateForm`.
Well I think it's nice to validate, as you're going to need to do it server-side, and doing it client-side as well just saves the user time (and you bandwidth). I would just be sure my first priority is staying out of the way of legitimate input.
You get less line noise, and a standardised way to build classes instead of the 100s of alternatives we have right now.
I agree, at the very least I'd prefer 'this.private.whatever' instead of making private look like a function call.
&gt; we no longer have to result to using the revealing module patter and it's derivatives which are plain ugly and not to mention difficult for beginners to understand. Not to mention break inheritance and 'instanceof'.
I agree with the `private(this)` bit. It's indeed damn ugly and super weird.
As a js dev scrub, I do'nt even know what return private(this).health &gt; 0; does. Is `this` scoped to the getter (which I see as a function) or to the class? Logically its the class, but a.) that means that the "javascript is functionally scoped" statement isn't really true anymore? What scope does javascript follow now? When doing x, this is so and so, except under y circumstances? b.) whats the point of private in that context? surely the class *knows* that this.health is private?
&gt;they hide the hash behind right-Option 3 This drives me crazy. Also CMD instead of CTRL is another pet hate
Map CTRL to Caps Lock. :) Modifier key remapping is built into OSX. 
Thanks for the update. I'm looking forward to seeing your changes. Are you using github? Btw, my email address is glen.arrowsmith@gmail.com. Might be easier to talk on email. 
Oh so are you suggesting building your own framework? Since the Jedi's had to build their own light sabers and all.
I just released another build. The changes might make your refactoring easier. Here is the change log: The car coordinates are pixel (not canvas pixel) with the origin (0,0) up the top left of the map. Detection and penalty reenabled when offroad. You cant drove off the side of the level. Spawn point and direction is set with a combination of a red and green pixel on the level. 
Is this an open source project? This looks like a startup and a commercial project, so am I fucked if I try to build a commercial app using this?
hey, this is not an open source project. Its from a startup and as a developer you can surely use it for a commercial app. Just share with us what ever you build and let us know if you need our help in anything.
Hey, I'm possibly interested in integrating this with our new virtual tabletop, Roll20: http://roll20.net . As with wavephorm, though, I don't want to build something and then later get in a situation where I'm depending on something that becomes too expensive. What's your monetization strategy?
Although this is what he's asking for, I don't think this is what he's looking for.
Hi, Roll20 looks cool. Will love to help you integrate it with Kinesis. The monetization strategy is still in beta :) as we are just a month old but 1 thing is for sure it wont be expensive and we will only charge if you will make profit. So no worries!
Learning proper JS and not relying on libraries to do your handy work isn't a waste of time really. I can see where jQuery and other frameworks have their place as I also use jQuery. My comment was really pointed out to call yourself something like a js jedi (I equate it to guru) you should probably be doing more with vanilla JS than jQuery. Regardless of what anyone says though, its never cool to include 2-3k lines just to make your code a tad easier to write.
You can bundle our SDK using a bootstrapper or you can offer it as separate download. The point of simulator is too help you build an app even if you don't have a kinect by mimicking the gestures you will need or you don't have to get up from your seat every time you test the app. If it works with the simulator it will work with real Kinect. The SDK supports windows as of now, MacOS support is coming shortly. We use the Microsoft drivers for Kinect to support the current SDK version 
It's akin to actually getting stuff done and having it work reliably on all browsers. Browser compatibility is hard and often counter-intuitive. 
&gt; You can bundle our SDK using a bootstrapper Under what kind of license? Will there be royalties involved? If you're a startup, how do you earn money from this project? Aren't you worried about some open source project coming along and doing all this under an open license? DepthJS is one I know of, but it's AGPL though so can't be used commercially.
* Completely agreed on the first point. Very sloppy on my part and I don't know why I would expect other people to give a damn about my project if I can't show that I give a damn. I will add a readme, clean-up the code, and comment the code more thoroughly this evening. * I work inside Visual Studio at my job. We design a web application with a back-end in C#/MVC. I'm more comfortable using Visual Studio, but I can totally remove all the hints that I use it from the github project. Perhaps it is worth branching out and learning sublime text, but intellisense can be useful. * Why should HTML files end in .html? I base my preference on the fact that the .htm extension is shorter, but unambiguous. http://stackoverflow.com/questions/1163738/htm-vs-html * The unit tests folder is empty. ;_; I really did try to start, but everything is dependent on loading the player first. I am not experienced with writing tests and it seemed like a huge challenge to set that up. I want to try at some point, though. It totally is my pet project for now, but I want it to be so much more. I've been learning a ton about JavaScript. I have never really written any OOP-JavaScript before and am trying to use this side project as fodder before I bog down company code with bad JS. Thank you so much for your input. I will try and address all your concerns and come back with an updated project ASAP.
A proper business model will be up on the site along with the newer SDK with a lot more features, platform support and various plugins in about a months time. But the current version of the SDK will remain free for any type of use. We are not worried about other open source projects and may be make a open sourced version of SDK too. Currently we are just focused on the adoption. 
Yeah that sounds like a good route. I'd be happy to pay $100 for an SDK as long as I can bundle the prerequisite libraries and drivers along with whatever application I build. As soon as my users have to install something on their own, or if I have to pay a % royalty things get way too complicated and I'm going to look for alternative solutions.
The other thing is, Github can already ZIP up (or tarball) the repo for anybody who wants it, and sneaky bastards (probably not you) could put malicious things inside an archive that aren't actually what the code next to it represents.
Ugh! I've already spent so much effort figuring out the best way to do this with ES5.
This is a [link](http://www.mediafire.com/?k5wcri19t4ul086) to the whole package file. Everything included. I haven't the slightest clue how to give you a working example though...
This. I've always thought about making something exactly like it but they actually did it. Awesome job silverlight &amp; Co.
I see no support for: $('a.button1') .jfsm('step1', function() { $(this).someActionOnEnterState(); }, function() { $(this).someActionOnLeaveState(); }); Why must we be restricted to only setting properties or some complex method to handle fades when you can just run an anonymous function in the scope of the object being state changed?
This is not hyperbole, just the nature of getting your feet wet with javascript. :-)
I've seen this idea around, and it's an interesting one...but I just don't see the uses. The fact that the example code is messy (classes as ids, references to elements that don't exist in the example code) and so minimal make it hard to see a case. I think for most simple uses it's cleaner without using jfsm, and for more complicated cases it's worse than other solutions. There might be a sweet spot in there somewhere, but I don't see it. I think this is doing things backwards. The logic is attached to each element. This spreads your state code all over, and if you add a new state you have to find each element related to the state and change it's settings to that state. It makes it very easy to forget to add a state value to an element here or there. It's also not very dry. I can't really tell what the example is going for, but it seems maybe it's supposed to be part of some process, say filling out a form, that's broken into "steps". In that case, why is each step not contained in some element? Then it's just a simple matter of: var step = 0; $( "#button-next" ).click(function() { step = step + 1; $( ".steps" ).hide(); $( "#step" + step ).show(); } You could also just group individual elements together in a class, etc if you want to have elements be part of more than one "state". In other words, if you have elements grouped together in some "state" like in the example, it's more cleanly expressed via the DOM. If for some reason you can't do that, things should be grouped together as a state, not attached to individual elements which spreads your state logic all over the place. var state = createStateThing(); var state1 = state(), state2 = state(), state3 = state(); state1.init = function() { // show some form elements, do whatever } state1.validate = function { // validate elements // if valid, return true, if not display why and return false } state1.done = function() { // hide elements } // etc $( button_next ).click( state.next ); $( button_prev ).click( state.prev ); This makes changes/additions much easier. If I need to change something a state, I don't need to hunt down every element involved. I just go to that state's section of the code-base. If I need to add a state, I again don't need to look all over, just add a new entry. If I'm curious about what element_foo is doing during state_y, I just go to state_y. In more complex examples, it depends...but you probably want to use either some sort of MVC framework or implement each state as a widget that uses pub/sub to tell either the other states or a central authority when it's done.
Agreed. I like the idea, but the OP's implementation makes me shudder; more obtuse and more code than the original code IMO. In thinking about this problem previously, the ideas I've come up with more closely resemble yours -- essentially, decoupling the notion of state from the implementation in your client code.
JavaScript variables are scoped to the function that contains them, or if they're not in a function, they're global. The boundaries of that scope are determined by the function's curly braces. The reason foo is not available inside f2 is because f2 is outside of f1's scope, and foo is declared inside of f1. I hope that is clear enough to help.
That is basically the same at my first version except: console.log(foo); ..is incorrect. It would have to be: console.log(this.foo); 
You could do it like this: var myObj = (function() { var _foo = 'bar'; var f1 = function() { _foo = 'baz'; f2(); }; var f2 = function() { console.log(_foo); }; return { f1: f1 } })(); myObj.f1(); myObj.f2(); // no method console.log(myObj._foo); // undefined If you want public access to either f2 or _foo, then you can return them from the function in that object as well. [jsFiddle Link to code](http://jsfiddle.net/4tFFX/)
&gt;Ps: How did you format your code? Start every code line with 4 spaces.
If you need to overwrite *f2* in *myObj2* and *myObj2.f2* still has to access the value created by *myObj2.f1* which is "inherited" from it's prototype - *myObj* - then you must use the first style I showed you. Messy or not, you need to make the variables part of the object if you want any objects based on this one to be able to see the values. isometriks's comment would work right until you try to make a child of *myObj* and access the *_foo* variable because *myObj2* wouldn't have access to the closure in which *_foo* is defined. 
You need to declare the variable within scope of both functions. The simplest modification that doesn't change your object is: var foo, myObj = { f1: function () { foo = 'bar'; this.f2(); }, f2: function () { console.log(foo); } }; However, you might be concerned with foo now being externally accessible. The solution to this is to wrap it in an immediately executed function, returning the object you wish to use: var myObject = (function () { var foo; return { f1: function () { foo = 'bar'; this.f2(); }, f2: function () { console.log(foo); } }; })() Now foo is private and your object works as expected.
I can't see any code to convert it back? Don't you need somthing like this in the cancel and save functions? document.getElementById("desc" + number).innerHTML = "&lt;p onclick=\"edit(0)\" title=\"Click to edit\" id=\"desc0\"&gt; + description + &lt;/p&gt;"; This is hard to debug because you are mixing html with javascript. Separate them and you will probably find the problem. This would be much easier with jQuery, but you could just do it with a native class selector function. Here is how I would do it with jQuery. If you are not familiar with it then where you see jQuery(".."), substitute document.getElementById("..."). You can't really do this because it won't work with classes, but it will help you understand the concept. If you don't want to use jQuery then see [this stackoverflow question](http://stackoverflow.com/questions/3808808/how-to-get-element-by-class-in-javascript). It shows you how to do class selection natively. css: .hide { display : none; } html: &lt;div class="task"&gt; &lt;p class="description" title="Click to edit" id="desc0"&gt; description &lt;/p&gt; &lt;input class="edit hide" type="text" value="" /&gt; &lt;input class="cancelEdit hide" type="button" value="cancel" /&gt; &lt;input class="saveEdit hide" type="button" value="save" /&gt; &lt;/div&gt; javascript: // Click event for all edit buttons jQuery("input.edit").click(function(){ var jq_edit = jQuery(this); // Wrap the edit button with jquery functions. var jq_task = jQuery(".task", jq_edit); //Wrap the parent task div with jQuery functions. jq_edit.addClass("hide"); // Hides the edit button. jQuery(".description", jq_task).addClass("hide"); // Hide the task description. // Copy the contents of the description div in to the edit input. jQuery(".edit", jq_task).value(jQuery(".description", jq_task).text()); jQuery(".edit", jq_task).removeClass("hide"); // Show the edit input. jQuery(".cancelEdit", jq_task).removeClass("hide"); // Show the cancel button. jQuery(".saveEdit", jq_task).removeClass("hide"); // Show the save button. }); // Click event for all cancel buttons jQuery("input.cancelEdit").click(function(){ var jq_cancel = jQuery(this); // Wrap the cancel button with jquery functions. var jq_task = jQuery(".task", jq_cancel); //Wrap the parent task div with jQuery functions. jq_cancel.addClass("hide"); // Hides the cancel button. jQuery(".description", jq_task).removeClass("hide"); // Show the old description. jQuery(".edit", jq_task).addClass("hide"); // hide the input. jQuery(".saveEdit", jq_task).addClass("hide"); // Hide the save button. // Get the id from the description id. var number = jQuery(".description", jq_task).attr("id").substr(4); writeTask(number, jQuery(".description", jq_task).text(), daysLeft(number)); }); // Click event for all save buttons jQuery("input.saveEdit").click(function(){ var jq_save = jQuery(this); // Wrap the save button with jquery functions. var jq_task = jQuery(".task", jq_save); //Wrap the parent task div with jQuery functions. jq_save.addClass("hide"); // Hides the save button. // Copy the new input text to the description paragraph. jQuery(".description", jq_task).text(jQuery(".edit", jq_task).val()); jQuery(".description", jq_task).removeClass("hide"); // Show the new description. jQuery(".edit", jq_task).addClass("hide"); // hide the input. jQuery(".cancelEdit", jq_task).addClass("hide"); // Hide the cancel button. // Get the id from the description id. var number = jQuery(".description", jq_task).attr("id").substr(4); localStorage["todo" + number] = jQuery(".edit", jq_task).val(); writeTask(number, jQuery(".edit", jq_task).val(), daysLeft(number)); }); Your html and javascript are now separated and the javascript is encapsulated, making it all much easier to debug. One final point. When you add a new task these click events will need refreshing to catch clicks from the new task. Either encapsulate the above in a function and call it when you add a new task or change the click events to jQuery 'on' events.
Thanks a lot for your help! :D
How about passing 'foo' as an argument for 'myObj.f2'?
So cool.
Iterate over all `td`s of that table and add a class depending on its content. It's pretty easy with jQuery: $('.foo td').each(function () { var td = $(this); if (td.text() === 'Online') { // the text may require some trimming td.addClass('online'); } else { td.addClass('offline'); } }); Something like that. It's better to do this kind of thing on the server-side though.
Thanks, I haven't learned jquery yet but once I'm more advanced with website development I will try this.
Exactly what I was looking for, thanks.
Man, I am 100% new to Javascript/HTML/CSS. I usually work with Android but anyway I just wanted a table that I could use to show some friends/co-workers which applications that we had made were up/down/suspended etc. and thought the coloring would make it tons easier to read. If it's applicable and not too much trouble what do you mean when you say I should make a class that generates a table?
:|
Thank you tremendously for the help already. If anyone is still willing to help, say I expanded my table a small bit as following... &lt;table border="1" id="apptable"&gt; &lt;tr&gt; &lt;td&gt;App1&lt;/td&gt; &lt;td&gt;Online&lt;/td&gt; &lt;td&gt;6/25/2012&lt;/td&gt; &lt;td&gt;XXX&lt;/td&gt; &lt;td&gt;XXX&lt;/td&gt; &lt;td&gt;50%&lt;/td&gt; &lt;td&gt;50%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;App2&lt;/td&gt; &lt;td&gt;Offline&lt;/td&gt; &lt;td&gt;N/A&lt;/td&gt; &lt;td&gt;XXX&lt;/td&gt; &lt;td&gt;XXX&lt;/td&gt; &lt;td&gt;TBA&lt;/td&gt; &lt;td&gt;TBA&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; Would I need additional code? I tried plugging in the JQuery and Javascript to the above code but it didn't seem to work. Here's my CSS btw: .online { background: green; } .offline{ background: red; }
They are obviously completely out of tune with what people have come to expect from from OOP in the last quarter century if they think changing how "this" works is the biggest problem on everyones mind.
[Rickshaw](http://code.shutterstock.com/rickshaw/) is another noteable d3 graphing library. But i agree, i really like these. 
Confusing? What I want, is to create, an array of click handlers to html elements. So that. &lt;button id=1&gt;&lt;/button&gt; &lt;button id=2&gt;&lt;/button&gt; &lt;button id=3&gt;&lt;/button&gt; var t = { one:function(){ /* code */}, two:function(){ /* code */}, three:function(){ /* code */}, array: [ {element:'1', method: one},{element:'2', method: two},{element:'3', method: three}] } so that I can $.each(array, ... ) - and assign the function "one" to click for each element [1,2,3] so when you click button "1" - click (one) gets called, clicking button "2" calls function (two) ect...ect... I updated the fiddle to show more less confusing example of what I am trying to do. I had stepped through this, that's how I found out that in the function assignment in the array I'm getting back 'undefined.
Tons of possibilities if you use jQuery $("td:contains('offline')").css('color','red'); $("td:contains('online')").css('color','green'); But if thats the only thing you want to use jquery to, I would suggest to go with a clean javascript code - no reason to load lots of extra javascript code to do this very simple thing
&gt; &lt;td class="offline"&gt;online&lt;/td&gt; Heh...
fixed :)
Better add CSS classes, you really don't want to search for color codes in your JS files two weeks later.
I cringed on the 'red' CSS class, always name them after what they represent - not what they look like. Calling it 'offlineIndicator', makes it longer - but you rather want to search for that, instead of 'red' in your CSS.
"NO TABLES", well - OP does not seem to use them for styling content but to shove data into it - they were meant for exactly that.
Just here to mirror this is a misuse of JavaScript and that you should add a class to a &lt;td&gt; while building up the a class online or offline. You know when you are binding data if something is on or off, so that's a much simpler way to add a class to an element.
This is what he means: http://jsfiddle.net/4vKQ3/ The CSS on the top right should ideally go in a separate file, say "style.css". I'll assume that you put the file in the same directory as your index. In your HTML you link to it in your &lt;head&gt;&lt;/head&gt; tags, like this: &lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My title&lt;/title&gt; &lt;link href="style.css" rel="stylesheet" type="text/css"&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="online"&gt;online&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="offline"&gt;offline&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;​ &lt;/body&gt; &lt;/html&gt; CSS is all about styling elements (Cascading style sheets), so ideally you'd use CSS instead of Javascript. EDIT: Seems like you've got it.
Yes, that would be pretty cool - I'd also love to do a day/night cycle and maybe some weather (and tunnels and road splits and .... ) 
Thanks whoever you are, you made my Wednesday :) Oh, and semicolon :3 
jQuery is an incredibly small library and if you are using google's cdn, most people will already have it cached.
Tables still make the best tables.
Please don't leave out the quotes in your html attributes.
I would assume you would want to ask this question in an actionscript related reddit. This is the javascript reddit.
&gt;an array of click handlers Why do you want an array of click handlers? If they all do the same thing, there should be just one of them. The `this` inside the handler is the element which triggered the event. If there are minor differences, make this part data-driven. You can, for example, add some extra data to each element with a data-*whatever* attribute. http://jsfiddle.net/pZ2AZ/ You can also use one handler which invokes different functions: http://jsfiddle.net/6vGpK/
Is there actually any performance benefit for storing $(this) in a variable inside a jQuery each() loop? I get why that would be good practice if the selector was an actual DOM element, but isn't the "this" keyword already cached inside each iteration of the loop? Obviously you could have done that just for code clarity, so there's nothing wrong with doing it that way in and of itself. Just curious if there is an actual benefit or savings to this approach?
Came in here to say 'use css if you can'
Without looking at the code, this seems to be: * Bind an event handler for on an arbitrary element * $.trigger('event') triggers the handlers for that event on *all* elements, rather than harnessing the DOM event model that jQuery extends (This seems like a classier version of `$(document.body).bind('event', $.proxy($arbitraryElement, function(e) { event handler })`). Do I understand correctly? 
... Don't you love when it is something so simple, that you assume it can't be the problem? And then it is? I crack up at my own idiocy every time. Thank you so much. I owe you one.
Love the T&amp;C's haha
If you are going to make 2 obj you might aswell use a constructor. function Obj() { var foo = 'bar'; this.f2 = function() { console.log(foo); }; } Obj.prototype.f1 = function() { this.f2; } var myObj = new Obj(); ​myObj.f2();​ Or something along those lines, I dont know exactly what you are trying to do.
As this is my first foray into Javascript, I'm not surprised that I'm doing everything all wrong. I think your guess is probably correct. I'll have to try to find a way around it when I get back home. Thank you!
That is what writeTask does. It completely obliterates the innerHTML with the task. I really appreciate your help. You and the others all helped me find what was wrong.
checkout this example [http://jsfiddle.net/gxhtj/](http://jsfiddle.net/gxhtj/) &lt;input type="button" id="button1" value="Button 1"&gt; &lt;input type="button" id="button2" value="Button 2"&gt; &lt;input type="button" id="button3" value="Button 3"&gt; &lt;script&gt; $(function(){ $("#button1").click(function(){clickHandler.button1(this)}); $("#button2").click(function(){clickHandler.button2(this)}); $("#button3").click(function(){clickHandler.button3(this)}); }); var clickHandler = { button1 : function(el){ alert($(el).val()); }, button2 : function(el){ alert($(el).val()); }, button3 : function(el){ alert($(el).val()); }, } &lt;/script&gt; 
Why? It's perfectly valid and allowed in HTML5.
Just because they are allowed doesn't mean you should. It's likely just a backwards compatibility move. There are no reasons to lose the quotes and there are many to include them. A few quick ones off the top of my head: * Readability * Consistency since you would have to quote any attribute with spaces/equals/prob a few others. * Better compatibility with editors.
I'd recommend starting to use jQuery straight away, it will help you learn JavaScript in many ways because it hides the hard bits. It's also very easy to pick up because it is only jQuery('selector').command . The are hundreds of ways of selecting and hundreds of commands but you can learn them as you need them. I can't think of any good tutorials about encapsulating your JavaScript, but it is a fairly simple concept. Whenever you would normally use an event in the html instead use one in JavaScript. EG element.onclick in the JavaScript instead of onlick= in the html. Another good topic for you look up would be the [singleton design pattern](https://www.google.co.uk/search?q=javascript+singleton+design+pattern), which get you started on object oriented JavaScript and help you structure your code.
My problem is I have too much data, here's a small subset of it -- http://c.sente.cc/YnzV/indexall.html I don't know the best way to elegantly handle a huge graph, this is in part why I was asking to see if anyone wanted to handle the front-end side of this. In a nutshell the application builds relations from wikipedia, currently I'm looking at philosophers.
I'm curious as well, is it faster?
Maybe the simpliest path would be to use GraphViz + something like Zoom.it? I've made things like [this graph](http://zoom.it/pNiU) in this way.
This is a daily event for me. Or pretty close to it.
Ah, good to see my interests in graph visualization and DF cross paths.
Too much data? Use a Cray! http://www.yarcdata.com/press-release-6-5-12.html
Haven't tested in IE. It probably doesn't work haha.
Or ArrayBuffers apparently: https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer
How did you generate this data? Could we get a list of philosophers with their birth and death dates included? The problem is that there is a huge amount of data to display all at once. If we can cut the problem down, say by selecting a subset of data over a specific span of time, it may be doable.
&gt;who would want to build a slick/simple site with me? (prolly a couple hours, tops) Nice try; if you can generate the data, you can write the god damn interface. Get back to work, Chicken Little.
The HTML id attribute should be used to style and/or identify a specific element. Using data- attributes better separates out the behavior from the semantic structure. Also, if you want to have valid HTML, there should be only one of each id; with data- attributes you can use the same value in multiple places. 
Twitter is migrated away from this pattern because of how slow it is. http://news.ycombinator.com/item?id=3614037
I'll check out the updates this weekend, and see if it makes the refactoring easier. Any chance you use msn or anything? I tend to forget about checking email haha If so my msn is valvry (at) hotmail.com
Try using Bundler to combine your scripts. https://github.com/ServiceStack/Bundler Edit:typo 
Thanks for the input... I dont know if I need an extra package like that for what I am trying to do... Can't I just have an if-else go through each span.(span class here) ???? 
I only glanced at it, but move each part of the code inside a: $(document).ready(function() { }); into just one of them... it doesn't look like there is even anything preventing you from just literally cutting and pasting each into one.. 
Ahhh ok ill try that out... 
You can also make it a function an just make multiple calls: $(document).ready(function() { myTip("span.pptanomtt","&lt;p&gt;The precipitation anomaly values represent the percent of the normal precipitation for a given month based on the 1981-2010 normals. &lt;/p&gt;"); //repeat myTip calls here function myTip(selector,message){ $(selector).hover( function () { $(this).append("&lt;div class="tooltip"&gt;+message+"&lt;/div&gt;"); }, function () { $("div.tooltip").remove(); }); }); } }); I'm really impressed that you made a custom tool tip. If you need more features (and get lazy), checkout [qTip](http://craigsworks.com/projects/qtip/). Good luck.
Yes, I mentioned that with &gt; identify a specific element However, an id has all of those responsibilities you quoted from the spec. That means you have to share a namespace with everyone else that wants to use an id. While it’s not as important when doing a small project, as soon as you start working within a team, or sharing code across teams, or trying to play nicely with other third party scripts, this distention becomes quite important. An id will work just fine. Start working on those best practices early though so you don’t hit as many walls when trying to scale out your solution. 
That philosophy.json file is getting a bit big. Have you considered storing that thing in a database? I'm using OrientDB for something else entirely, but I understand that it's brilliant as a graph database.
You might want to try /r/forhire
For 50 good luck my friend
I'm not sure about this change. Sure, it'd be nice to use it as a way to put pressure on the change to modern browsers, but for me jQuery is the way I interact with Javascript without thinking about the user's browser. I'd love to have a minimal jQuery library that supports IE7-8, and then extend its functionality with the plugins I choose.
Yeah, but multiple unnecessary script elements in the DOM looks messy, and likely adds a little bit to the page rendering/JS execution time.
There's a note in the post about that: &gt; **Why not make an “oldIE plugin” for jQuery 2.0?** Special dispensations for oldIE are sprinkled throughout jQuery. Refactoring the code to provide enough hooks so that oldIE support could be added as a plugin would complicate the code for the modern browser case. Plus, developers supporting oldIE and using a public CDN would then need to include two files (jQuery 2.0 and the oldIE plugin) instead of one.
You can still have that: &lt;!--[if lt IE 9]&gt; &lt;script src="jquery-1.9.0.js"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;!--[if gte IE 9]&gt;&lt;!--&gt; &lt;script src="jquery-2.0.0.js"&gt;&lt;&lt;/script&gt; &lt;!--&lt;![endif]--&gt; 1.9 and 2.0 will be API compatible, new functionality work will be concentrated on plugins. I presume this is a move in the direction of the [microjs](http://microjs.com/) approach.
Yeah, but he used the term `oldIE` which is specific to the text of the article AFAIK; I took his comment as "I could read it but not comment".
This is great news. [The future is invented by the people who don’t give a shit about the past.](http://www.randsinrepose.com/archives/2012/06/28/someone_is_coming_to_eat_you.html) And if you need to give a shit about the past, 1.9 will stay supported.
Why do I find this hilarious? :)
that's fine but it doesn't distinguish jQuery from any other library that has a "lightweight footprint". anyone can make any type of library that has a "lightweight footprint", but they may not be libraries that abstract DOM programming, but that is what jQuery is.
It'll still "support" [downlevel revealed](http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment) comments. Taken from the post: &lt;!--[if lt IE 9]&gt; &lt;script src="jquery-1.9.0.js"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;!--[if gte IE 9]&gt;&lt;!--&gt; &lt;script src="jquery-2.0.0.js"&gt;&lt;/script&gt; &lt;!--&lt;![endif]--&gt; As far as the HTML parsing algorithm is concerned, the second script element is not in a comment. This is how it's always been so that you can target non-IE browsers. IE10 will act like a non-IE, and in this case that's the behavior you want (since we're only interested in bifurcating between oldIE and "everything else").
TBH The more modern the browser the less I care about libraries. This seems like a good prompt to go to no library at all for later browsers. 
IE7 will not be around forever... Eventually you will be able to switch to jQuery 2+. In the mean time you can use legacy support releases to support your legacy users. This process is how software development has always been, and will continue to be.
When jQuery was created there were already other DOM abstraction libraries in existence which were more feature rich than jQuery itself was. What put it ahead of the others was the use of css selectors to target elements. It was a new innovation that made it a lot easier for non-coders to work with the DOM, and **that** is what made it take off in popularity. Even still to this day there are a lot of things Prototype and MooTools do that jQuery doesn't even try to do, and there are new libraries such as Underscore and Ender which work even better with a smaller footprint, but none of these libraries have the existing codebase and community that jQuery has developed. &gt; [it] just happens to have a lot of plugins written for it And PHP just happens to be supported by thousands of web hosts and has hundreds of thousands of developers. jQuery has achieved critical mass; it has reached a point where its popularity is what keeps it popular, and that, in my opinion, is the library's main selling point today.
TBH this probably means 2.1 is not something I am never going to be concerned with. 
XP will be around for some considerable time, and IE9 is Vista+ only, so IE8 is going to be a concern well beyond 2013. Dropping support for 6 and 7 I can do and would willingly embrace, but 8 I *have* to suppport. 
I use jQuery as little as possible, mostly for things that are just convenient. It has a bit of a performance hit depending on what you do with it, so I try try to avoid it in favor of DOM where possible.
Sorry, no, I'd sooner not be caught off guard when John Reiseg stops downing WHATWG cool-aid and decides to go Webkit only or whatever. jQuery has dropped one of it's core benefits as a goal, and can no longer be trusted. 
Boo hoo. ONLY COOL BROWSERS ALLOWED demo stuff has it's place, but for work I have to support technology while the user base supports it, that's how I get paid. Sorry if needing reliable tools for that inhibits your "progress".
Like I've already told you, I understand why we need backwards compatibility. I've had to support IE fucking 5 before. It still inhibits library usability to have to support these shitty legacy browsers. You need reliable tools? This library is one of them. Over time, jQuery has grown an order of magnitude in size. Mostly due to all the bullshit code needed to support these ancient versions of IE that you seem to love so much. This new version isn't going to pop your comfortable little bubble. It's paving the way for a smaller, faster jQuery. The development team don't display the level of incompetence you are, they're not going to leave you high and dry. 
Sure mate, I *love* them. That's why I need a library that means I don't have to think about them. (Or have to think about them a little less) (And that's only for JS... CSS, oh boy, that's a whole other pile of crap)
Your worries sound a bit hyperbolic and alarmist. It sounds that they intend to keep jQuery useful with normalizing JavaScript across *current major browsers*, i.e. what 90% of people will be using. You just sound butthurt because you're gonna hafta do some extra work with not getting 2.0+ updates or having to keep around 1.9 for legacy support shipments. Like Jedakiah told me, that's what you have to deal with -- especially if you're supporting corporate, which is often a version or two behind on everything.
I appreciate the fact that many people need a JS framework that supports IE6-8. And jQuery has that framework: 1.9. For those of us who have the luxury of not needing to support those browsers, why not create a version without all the legacy cruft? Why not add new features that they never could have while supporting the old browsers? With different projects that I work on (yes, for a living), I am in both of these boats. I love that 1.9 will work with IE6-8. It has a rich, powerful toolset that does a great job of abstracting away the browser. But I'm also excited that they're pushing forward with 2.0 and doing things that we never could have done before. And if you really need new features in jQuery that work in IE6-8, then edit the 1.9 source yourself. Or write a plugin. What jQuery has done here is really the best of both worlds.
&gt; And if you really need new features in jQuery that work in IE6-8, then edit the 1.9 source yourself. Or write a plugin. Well, if you've not got this from my other comments issues of fragmentation and having to use workarounds are exactly what I am concerned about here, and jQuery has previously been a way to avoid those problems rather than a source of them. But you are right to say we'll have 1.9, and hopefully that will be a good a stable version of jQuery. It better be, because many developers will not be going beyond it for quite some time, if at all. 
yay! I would love to use jquery for more of my mobile projects and this would be awesome. Give me the choice to include IE support, awesome!
Presumably, 2.X's features wouldn't support IE6-8 anyway so you're not missing anything. On top of this, people can keep extending 1.9. Stop acting like it's the end of the world. There's only so much progress you can make on a library designed to support legacy browsers. Why do people act like there can be infinite progress on it?
I totally understand. I've done work that had to support IE7 and 8, but this still excites me. 1.9 will still exist. All the features we know and love will still exist. Why so pissed about them wanting to work on features that IE8 and older won't support by forking the versions?
Well, I think the downsides of fragmentation and being locked into an earlier version are pretty self evident. I've worked places where they've settled on an older version of jQuery and are reluctant to upgrade it out of stability concerns and it's always been a frustrating experience. Let's flip it around: what is the upside here that could not be got by other means?
&gt; 1.9 will stay supported. So 1.9 will be like Python 2? Adoption of Python 3 has been....... very slow.
People who aren't tech savvy and don't have tech savvy friends, and people at jobs that don't pay enough attention to their electronics. I actually had to use IE6 yesterday for the first time in at least 5 years. I was working on updating a client's database, which is essentially 50MB of inconsistently formatted plaintext that I'm going to have to regex the shit out of. It's stored on a machine running Windows 98, with the floppy, USB and CD drives broken. I used IE6 to try to upload it somewhere, but every website I tried was broken in IE6. I ultimately succeeded by finding a website that wasn't too broken and entering a little javascript in the url bar. So, that's when people use IE6. And I'm glad jQuery is dropping support - the people who use jQuery don't support IE6, so jQuery's support has been worthless (for most people) for a while.
I didn't know it queued them, up that's pretty neat. Idk if you looked at the source, but this definitely doesn't appear to be a time where it's beneficial. I will definitely keep that in mind though.
Filesize is a fair point, not so much on desktop but on mobile certainly. Browser specific new features however I think would be better handled by plug ins. 
It's completely arbitrary -- you can call any function you want every frame at certain time intervals (function A from 0 to 10s, then function B after 10s, etc), which can leverage the waveform and freq data any way you'd like. The demo uses Three.js for WebGL objects, and I'm working on having it manipulate a shader.. also comes with simple plugins for visualizing waveform and FFT on 2D canvas. Most of the work doing a winamp style viz system would be writing the visualization, plugging in audio data to that will be (or should be!) relatively simple. If you notice any weirdness or have any questions, be sure to drop it on the github issues board!
How feasible is it to migrate from using jQuery everywhere to another framework? That sounds like more of a burden than keeping jQuery 1.9 around.
I crawled wikipedia with python, using lxml to extract data. I've extracted all the data from each philospher's InfoBox - http://i.imgur.com/SYuNB.png. This isn't really all that specific to philosophers either, I've done similar things for all of congress, all past/present presidents, vice-presidents, j udges of the Supreme Court, etc.. here's a silly way to visualize the SCOTUS Judges -- http://c.sente.cc/xNzK/judges.html -- created with way too much bash-fu
Does someone more knowledgeable than me want to explain what is so bad about using inline javascript in html? It seems like one main point I take away from this is that I should *always* be using jQuery. So I get that jQuery makes a lot of things easier, but if I dont need to use it then why should I bother? Am I not simply adding weight? I'd be interested to see the exact justification.
Yeah, I agree, want to avoid the ragequit!
I've used a unix OS for the last 5+ years, I've built my own kernel, I've used Gentoo, Redhat, Ubuntu, CentOS, Arch, and I've had pizza with Greg KH. I understand what it means to be a command-line hacker. That doesn't mean that I haven't put together websites using ExtJS, Mustache, jQuery, and other libraries I can't recall. Don't make excuses, learn something new. Become the master of all: the front end AND back end hacker. In the mean time, if you want something slick, read http://clientsfromhell.net/ and realize that design is a process, just like development, and if you want something better than automated layout, it'll take more than "a couple hours, tops".
It's been 20 fucking years. If IE can't get their shit together, and it's obvious that they can't. Fuck them.
I think being forward thinking in terms of standards is a good thing. It's like looking at Mac vs Windows. Windows is a legacy supporting OS at heart, while Apple has a cycle of obsolescence. This allows for them to force standards without having to worry about supporting legacy hardware/software down the road. Like all Macs support Bluetooth. Pretty soon they will push out Firewire entirely. Going forward all of them will support Thunderbolt. Seeing as how the problem is caused by Microsoft's IE, it kinda makes sense when you think about it. Chrome auto updates. Firefox and IE do this now as well so legacy support will be a thing of the past after a certain point. I don't think there's anything wrong with trying to be forward thinking. There's nothing stopping people from using both libraries.
 /shrug. If I could press a button and magicaly upgrade everyone to the latest version of their browser of choice I'd do it and everything would be great. But since that isn't going to happen I find this a disturbing development and wish they'd gone some other way. 
That's not a voice of reason. The guy he was replying to said that 1.9 will still support the old browsers. It's more reasonable to be happy that they are supporting old browsers while still looking toward the future. Saying that everyone that works for a living doesn't give a shit isn't reasonable.
Why does it bother you that much? The existing library isn't going away. There is even going to be a new version coming out (1.9). Hell 1.8 isn't even out yet. It's ridiculous to act like this is the end of the world that they want to look forward rather than constantly cater to legacy browsers with all future development.
That does not exactly look like too much data... but too much data for the algorithm. My guess is that for each iteration every node gets compared to every other node in some way. As the number of nodes increases, the time taken to do various calculations increases faster. If it's just about the drawing speed, then the slowdown would be linear rather than logarithmic, meaning that half as many nodes means it takes half as much time to draw and is twice as smooth. If it's a logarithmic slowdown like I expect then having the number of nodes would have the effect of cutting the time taken to calculate their positions by a factor more like 4. I have an idea for handling a graph of this size. That is to calculate the positions of the points before they reach the front-end. They would not be seen springing into place but that effect could be added later. You could run a Force Directed Graph or other algorithm (a Genetic Algorithm would work too, maybe faster) on your server or development machine, and use the results of that for displaying the graph on the front-end. I think the slickness that you (or we) are looking for could come from being able to zoom / navigate about the graph quickly rather than seeing them springing into place to begin with. I don't think it's sensible really to run this algorithm many times on client machines as it really is quite a lot of data crunching. More information about how you want the points to be arranged on the resultant graph would help me. It seems like the links are as if they are made of an elastic material that pulls related items closer together, the end result being that the total distance of all links on the graph is minimized, but with there still being a minimum possible distance between any two nodes. In my opinion a Genetic Algorithm would be able to produce a good end result in less CPU time than the Force Directed Graph, and may be the appropriate way of doing this should the number of nodes increase still further, perhaps into the 1000s (though I don't know how many nodes are in your system at the moment). I'm pleased that you have asked for help to get the front-end system working. You must have been busy making this system rather than learning about the intricacies of front-end development. My opinion is that good progress can be made through specialization and cooperation, and I'm keen to help with this. I'm working on a load of JavaScript code which handles data efficiently (especially in terms of maintaining sorted/indexed collections). A back-end system is still getting built, and I am keen on getting on with some front-end data visualization work done. Essentially, I think more should be done on the back-end to prepare the large (but not huge in my opinion) graph to be visualized on the client. With the right algorithms and Client-Server Architecture it will be possible to display this data nicely without demanding nearly as much processing power on the client.
Because you're being a dick about your opinion. "Enjoy all your handjobs from hipsters."? Yeah because everyone that enjoys the progression of technology are hipsters. "I work for a living" as if people that look forward to this don't work for a living. That's ridiculous. Just because your clients require legacy support doesn't mean all of them do. Many people work for forward thinking clients that don't care to support legacy browsers. Some retail sites even charge customers more for using legacy browsers due to the amount of extra work that needs to be put in to support them. I understand that legacy browsers are a problem but shitting on people that want to look towards the future is retarded. Fragmentation isn't going to be as big an issue as you make it out to be. Browsers are becoming more and more similar and most of them are forcing upgrades automatically. 2.0 is basically supposed to support all those browsers while 1.9 supports those. There are still features they are adding into it. And for people that want to extend 1.9, there will be a niche for that too.
It again looks like running a Force-Directed Graph of that scale on the client would not work. I say that in reference to providing an interface that someone could comfortably use on a notebook or maybe tablet / mobile device, rather than some of the very impressive examples of what could be done with GPU acceleration. I simply think that the arrangement of the graph does not need to be calculated on the client. I'd be happy to advise on constructing the Genetic Algorithm that would arrange the points on the graphs, maybe to write a bit of Python myself too. 
I'm sure I'm not the only one who primarily uses jQuery for compatibility reliability... weird they're gonna fragment that core benefit they provide.
When features and compatibility don't matter, lightweight footprint is easy. My 11 year old can accomplish that.
The abstraction layer jQuery provided was a primary benefit to me. Not having to use if statements on browser detection and change methodologies is kinda a useful thing. Now they are recommending we do that... seems like a strange direction to go in.
Exactly. 
That is exactly what they are not recommending. Please read the article before commenting. 2.0 and 1.9 are exactly the same, except one has oldIE support and is thus bloated/slower. If you need oldIE support use the all encompassing 1.9.
most likely a css issue.
I looked into that but I don't look at it enough to see if it had robust enough behavior to handle what I needed. But this link is a better explanation that what I found. Edit: That would have been a better way to do it. Just insert a style sheet that overwrites other styles with that tag. Thanks.
Unless you're privy to info not listed on the site, there is a grand total of 0 differences in the featureset between 1.9 and 2.0. Perhaps in 2.1+, but even that is speculation. And probably years away (2.1 is never even mentioned in the blog post). This is getting ridiculous, did _anyone_ read the blog announcement?
I see. You're an alarmist person who can't answer a simple straightforward question. As a web developer we use whatever tools we can find to get the job done, no matter how obscure or arcane as long as it gets the job done and works well then we've done a good job. You're complaining about something that hasn't even happened yet and think there's something extremely wrong with fragmenting code. Guess what? A lot of sites still run jQuery 1.4. A lot still run 1.6. It's not a problem. The existence of 2.0 doesn't change the fact that 1.9 will exist and will fit all your needs as well as 1.7 and 1.8 if not better. So again, why does it bother you so fucking much that you're being a dick about your opinion? It's really NOT THAT BIG A DEAL to fragment the code. We've dealt with it and it's not really been an issue. They will still support legacy browsers. They just won't add new functionality to it after a certain point. Given that jQuery pretty much does amazing things now why is it a bad thing that we can start working on code and plug ins that support features in newer browsers? Down the road we might see a decent amount of XP use but I don't see it as that big an issue. That number can only shrink and with more and more people moving to mobile, it makes sense that a library made to support major browsers (and one that is constantly growing) cut out the support for legacy code for a smaller footprint. Or do you think it should also support IE4 and 5?
It seems you understand why some want jquery 2. Think zepto.
And I suppose that implies *we* don't. Who invited the .NET guy?
What seems to be missing from all these module definitions floating around is thoughts on multiple modules in a single file. While this might not be useful during development, in production most JavaScript code is concatenated and minified into a single file, which can contain multiple modules. AMD supports this quite well, but the ES6 modules seem to have a fixed relationship between file and module. This means that minified code cannot be used in ES6, or the minifiers have to become more intelligent so they can compile the module JavaScript files to be plain old JavaScript files.
Keep it as it is for current projects. Use a different library in the future.
Why are they not adding said features as plugins? To me, jQuery is getting too big for its britches and is trying to change the world. Good on them for trying, but practically speaking it's simply a bad move.
It uses them in a way that works without requiring support for them.
I'd sooner see that achieved in some way that isn't the beginning of the end for support for a 2009 browser in a time when I'll probably still have to support it. TBH If the announcement made was "hey, jQuery now comes in stripped down mobile flavor!" we probably wouldn't be having this conversation. 
*cough*mootools*cough*
I charge more for old IE compatibility; it's actually getting me paid more.
You are looking for Mootools.
Ten keep the old large code base. Seriously, how hard is this really? If you run a team of JS "engineers", you should understand how software development and technology progression works.
Easy, don't rely on JS so much. In my, and many other people's opinion, JS should be for progressive enhancement, not required.
Why? JavaScript doesn't play video. It sounds more like you coded yourself into a corner.
I'd say it's more pragmatic and practical than moral. But I agree with the overall sentiment. Look forward, not behind. Skate to where the puck is going and all that.
You shоuld know thаt SubredditDrama hаs written about you. [Minor upheaval in /r/web_design about whether developers should release libraries that don't support old versions of Internet Explorer.](http://www.reddit.com/r/SubredditDrama/comments/vua8k) As of now, your comment has a score of 13 (25|12). The submission has a scоre оf 190 (199|9). Although SRD offіcially bans coordinated votіng, threads linked by them have a tendency to suddenly acquire dіsprоportіonately large amounts оf votes, as well as deraіling comments directеd at those ЅRD decides is іn the wrong.
You need to post some code man. Create a JsFiddle with your code so that folks can take a look :) (it's a little difficult to figure out what you need based on just a description) http://jsfiddle.net/
If you're using jQuery, just change the CSS property of the body. You could probably animate it using jQuery as well.
As an idea, I think it's very good. Regarding the code, I'm not familiar with node.js enough to give you input, but otherwise it's fairly clean.
That does sound like a problem on the server side. Like maybe the server is trying to parse the user agent string for some reason, and you having one that says Linux instead of Windows is tripping things up. Have you tried spoofing your user agent?
What OP is saying also makes no sense since variables are set for equality in a left-to-right fashion: D=8
Thank you very much everyone who try to help. I gave up.
There's about 5 or 6 ways of creating objects in JS... look through them all, and stick to 1 or 2. =)
Well then I suggest you to learn to program. If you know all HTML, CSS, and JS, you're going to be more valuable as a designer. These days people often jump right in to jQuery but they're more likely to produce messy JS codes. Just take your time, mate. It's worth it :)
There is only SunSpider running on outdated browser versions. This is completely useless.
If your purpose is to learn, copying code will get you no where, if its just to get a gallery on a web page working then go for it. I wouldnt say Jumping straight into jQuery will lead to messier code, but having a good understanding of one programming language will give you the structure you need. If you have no clue then as Fadiawan said, focus on JavaScript first but be wary on how inconsistent it is on different browsers. You also do not need to know a lot about Javascript to learn jQuery, it does most of the leg work for you (which has its pro's and con's like anything). I started with the mindset of focusing on Javascript before moving onto jquery BUT time constraints ment I had to dive stright in Just focus on little steps, keeps you motivated and in a positive mindset and before you know it your be coding with the best of them.
As far as I know a method is a function
Well, I'm not sure if it's a sensible way of doing sandboxed file system for Node.js Is any of your stuff open source? I'd love to not have to write this myself :)
window.location.search
This makes a lot of sense. It all depends on what your end goal is. If your end goal is to be a good programmer and be flexible as possible then by all means learn to write your own code. On the other hand if you are only doing one off things, then find a plugin to do what you need. Learning a language in and out is invaluable but it may not be practical for everyone.
Oh &gt;.&lt; you're right How do I get the text entered in the form into the url src for the iframes?
This seems completely at odds with real world usage. For me Firefox's JS perf. seems slower than anything with the recent versions.
Ah, my bad. I totally stopped reading after the word 'dictionary'
*dumb moment* just relooked and realized that a higher bar is worse lol. so yea the graph does seem to be along the lines of what real world usage feels like.
An API based solution is probably the best bet. While the query time would be longer, and possibly more restricted in terms of search parameters, it would certainly be the easiest way to go.
Should be noted: &gt; "This benchmark tests the core JavaScript language only, not the DOM or other browser APIs"
I wrote a response to a HackerNews article regarding Codecademy getting $10M in funding [going over my experiences](http://news.ycombinator.com/item?id=4133708) with online programming education, specifically with JavaScript. I got a few responses from people who are involved with the more funded ones (Treehouse, CodeSchool, Codecademy) and a few from people who are trying to create their own tools to help people educate themselves. None of them are perfect yet, but your experiences may vary based on what you've already gleaned, so I'd encourage you to try them out and see if they suit your learning style. 
Give your iframe and input ID's first. This will allow you to reference it via javascript. Jquery method $('#iframeID').attr('src', $('#inputtext').value()); 
I'm actually really surprised there isn't a JSON file of a dictionary somewhere. Check these out http://stackoverflow.com/questions/5160615/english-language-dictionary-api http://developer.wordnik.com/docs#!/word/get_definitions
 $('#iframeID').prop('src', $('#inputtext').val()); attr will not always execute the correct loading functions. JQuery prefers that people use prop now. Sometimes attr does work better than prop for retrieving attributes, so be aware of that situation. Also, it's val() for retrieving the value. Simple mistake.
Oh! I did not know about the teletype history. That makes perfect sense, really. Thanks for the link!
or just do it for every iframe and also you would need to use ".replace" to replace the {customURL} part with the input value. jQuery method: $("iframe").each(function(){ url = $(this).attr("src"); newurl = url.replace("{customURL}", $("input[name=customURL]").val() ); $(this).attr("src", newurl); }) 
I'm a bit too used to jQuery but I believe that: 1. "id"s must be unique. Making everything "lunch" may return the value of the last element with that id (not saying that it couldn't work -- see #2 -- but, at the same time, using the same id multiple times is not valid and, thus, could work in *some* browsers). 2. You'll need to use document.getElementByName("lunch"). This will return a list, not a single element (the list of all elements with that name). You'll need to iterate through the list to get the one where ".checked" is true.
regardless of whether there is anything wrong with using document.getElementByName, it is incorrect for two or more elements to share an id. http://www.w3.org/TR/html5/global-attributes.html#the-id-attribute
What you say equals to: take someone experienced in C and attampt to explain how functions work in Haskell. Haskell has functions as well as C and the C guy will tell you that Haskell functions are crazy and useless and should be tweaked (it's a funny experience btw, to tell very C like friends about different functional concept - they always tell you it's useless and can be achieved with just 30 lines of do-while loop). Returning to JS - it's a *functional language* with screwed *prototypical inheritance* model. The model itself is brilliant, but some design decisions made it hard to use and understand. Please, keep in mind JavaScript is a **Scheme** derivative and has nothing to do with classical object-oriented model. "My solution" would be - add an introductory chapter to *JavaScript Definite Guide* that would be a basic Scheme tutorial or convince people to read *Little Schemer* or *HTDP* before missing classes. 
Is there an easier way to do this with jQuery? 
Can I stick that into my javascript as it is right there? Don't I need to put the fancy jQuery bracket/paren' stuff in? **Edit:** It worked without the fancy jQuery markups! Thanks bear!
Thanks for the help Juliob! You'll always be number one in my book!
If your site / app uses a lot of JS you really want to concatenation and minify for the sake of your users (speed), hosting bill (data transfer), and server load (# of requests). It's a good practice and it really isn't difficult to integrate it into an existing deployment strategy. Your app server just needs to serve separate JS files in development and the minified script in production. Pro tip: I also have a debug_js config option that lets me serve separate JS in production. Combined with error reporting from the browsers I get emailed stack traces when something goes wrong.
Yes, it is. For those of us that work on websites for the masses, we have to worry about IE6,7,8 regardless of whether jQuery thinks they matter or not. It used to be that you could just use jQuery, and you could forget about oldIe, but those days will now be gone right? This is very simple my man --- this move DOES create fragmentation and force people that previously used jQuery to ignore xbrowser differences to expand what they consider. You can assert that the extra work is minimal and 'worth it' but you can't deny that this creates fragmentation.
In JS objects are a lot like structures. Conceptually, not with respect to performance and efficiency. What do you miss about structs and pointers? Stuff gets passed by reference so you just don't have explicit pointers or pointer arithmetic (good riddance). And the preprocessor... I'll give you that but I'd rather have something less fragile like a Lisp macro. JS is already so lispy, macros would fit in nicely aside from the syntax. I like C quite a bit, although I've never written any professionally. But I haven't missed those things very often. I did write a struct class for Ruby because I was outputting ELF binaries and needed such a thing. Obviously it just described a struct I could serialize and deserialize and didn't behave like a struct itself.
[Homage paid](https://github.com/robatron/loo.js/blob/master/loo.js#L21) ;-)
Sorry. Was out and on my phone.
This is... interesting, but I'm a bit skeptical. Much of the advice is personal preference or debatable, and I can't get away from the idea that the OP is just doggedly trying to turn (dynamic, weakly-typed) Javascript into (static, strongly-typed) C/C++. He even says "you shouldn’t deploy production code unless it’s been compiled", which is deeply arguable, and depends entirely on your workflow and the scale at which you're working (Google will see some benefit from compiling their JS... my personal blog with three readers, not so much). This is a common thing that almost *every* developer does when learning a new language - they write the code in the way they already think, rather than idiomatically to the language. However, I thought it was generally agreed that it's *good* to write idiomatic code - if you learn C and then as much as possible write C-code-in-C++, C-code-in-Javascript and C-code-in-Ruby you aren't really learning anything and haven't benefited from learning the new languages. Conversely, if you learn C and then learn *idiomatic* C++, Javascript and Ruby you'll be exposed to a lot more new ideas, and will have a lot more tools in your mental toolbox, deriving real benefit form learning those languages and making you a better programmer in *all* of them, even your original C. I'm not claiming the author isn't learning anything, and I might be overstating the case, but this article seems to be half "sensible but personal preference" guidelines that have debatable applicability to others, and half trying to turn Javascript into C *just because that's how the author already thinks*. Static typing/annotations, compilation and compiler directives (sorry: compile-time defines) are great for them as likes it, but they're not particularly idiomatic, or generally a good idea for everyone. In particular annotations *may* be useful in some situations, but also discourage your ability to use parametric polymorphism (pretty vital in a language without function overloading), which is one of the main strengths of weakly-typed languages. The author doesn't seem to "code like an old man", so much as to code like a C/C++ programmer who switched to a new language but *never left their old assumptions and habits of thought behind*, and that's very different... and arguably not a positive thing. I first learned C/C++, then moved to Perl, Javascript, Java, PHP and Ruby. And I have to say, if I was coding any of those languages as much as possible like I coded C I wouldn't be *proud* of it - I'd be seriously wondering if I'd completely wasted my time learning them. :-(
&gt; and its lack of clearly defined rules (semicolons, whitespace) They're very, very clearly defined. Excruciatingly, in fact. ASI (which I'm guessing covers both your issues, as outside of ASI there's nothing special about whitespace handling in JavaScript) is defined in ECMAScript-262-5.1 section 7.9. An other source of annoyance, automatic type conversion, gets a whole section (9, ~7 pages) to define the various *conversion primitives* (internal abstract operations of the ECMAScript runtime), and expressions are then defined in terms of those primitives (in section 11). Also, &gt; This is simple enough, butkitty could be anything. Cat could be giving us a number, for all we know. I prefer this: Yeah, about that? js&gt; var kitty = new Cat(); js&gt; kitty instanceof Cat; false The only thing `new` tells you is the context in which the constructor will be executed, for all you know: js&gt; new Cat(); 42 and `new` is hell to use with varargs provision (`Function#call` and `Function#apply`), and plays fast and loose with object chain (`new` take any expression, but stops at the first parenthesized call in the chain, so `new foo.bar().baz` will instantiate `foo.bar` and return its `baz` attribute, but `new foo.bar.baz` instantiates and returns `foo.bar.baz`)
There are a few things that I really missing in JS: * True classing -This pseudo-classing that JS does really bothers me. I know there a libraries that get you around it. You can use the clunk method of create a function has sub functions. But the whole things is just that, clunky. * Data Types - A really int or string would just help * Function overloading - Again I know there clunky workarounds 
Thanks for this. First, I hadn't realized that my reporting-up-top-date FF was actually an older version - I'll fix that and update the data (and do a similar check on the other browsers, while I'm at it). Second, I'm very interested in more benchmark tests, and hadn't known about some of those you mentioned. Do you know any others?
* true classing: JavaScript is a prototypal language deal with it. * real int and string: like in C ? What do you mean by real string? Something like char* ? BTW: https://developer.mozilla.org/en/JavaScript_typed_arrays * function overloading: like in Erlang? Don't forget that JavaScript is weakly and dynamically typed (http://en.wikipedia.org/wiki/Type_system). Every arguments is an object and you can pass 10 args even if the declaration defined only 3. It's a feature, not a bug :-)
Get off your lawn?
Pretty much. I feel this is going to happen more and more the older I get. "Grampa, for some weird reason when I'm selecting these options in the VR System, this arrow follows my hand, I think it's a bug." "No that's your cur- huh, you know, never mind." 
I was talking about ~~this~~ the flip side of this with some fellow twenty-something geeks over the weekend. We're all planning to get the neural-computer interfaces installed when that's "the thing" (although I'm planning to wait until it's mainstream enough for someone to make an adblocker app). I'm hoping our generation's saving grace in forty years will be that we grew up with keyboards and mice in hand, so it'll be less of a conceptual jump to another control interface that's based on different technology. Alternatively, the mainstream stuff won't change interfaces *too* quickly because it'll just be gradually building on the existing technologies. e.g. the "windows management" GUI paradigm and mice technology haven't significantly changed in the last thirty years, they just have more bells and whistles now. That said, I should probably go buy a Kinect so I don't get left behind -- and I can explain to my nieces and nephews the historical design decisions behind that little arrow. edit: now more topical!
Perhaps I could have worded it better. Whitespace and semicolon rules are indeed clearly defined by the spec, but they are poorly understood in the community and a lot of confusion and derision results from that. I don't want to start another ASI war, I just like semicolons because I think they make code easier to read. Regarding your second point: Yes, while "new" does not guarantee that you will be getting a new instance of an Object, it goes a long way towards implying the intent of the code. When using someone else's API, I suppose there is always some degree of blind faith involved. I just like constructs like "new" to help communicate to the reader what I was thinking. 
For what it's worth, I didn't always write JavaScript this way. It took a lot of iterating to arrive at a style that I liked. I wrote in a much more JavaScript-y way before adopting this style. Regarding static vs. typed, I won't go so far as to say I don't like dynamic typing. Rather, I prefer to keep dynamic typing at arms length. What I mean by that is that code can quickly become an unreadable mess if type changes are not carefully managed, and the annotations I wrote about go a long way to keep the unpredictability out my code. 
I write JS for a living and wihle I wholeheartedly agree with most parts of your entry, I disagree on your take on the "new" keyword, especially for shared code that is used by different parties, because it is so easily forgot and then hard to debug (if the error pops up somewhere else). I use the following pattern to allow using the same with or without "new": MyClass = function(options) { return this instanceof MyClass ? this.init(options) : new MyClass(options); }; MyClass.prototype = { ... }; This way, if someone forgot the "new" initialisation, the code still works as expected.
3 is correct for 7 urinals. o o o o o o o x o o o o o o x o o o o o x x o o x o o x All three people followed the protocol exactly. Take the urinal which leaves the most room between peers (peeers?).
you're getting 4 for n=6 because the protocol calls for base 2. Javascript does base-e. Fix the code and it works right.
Ah, I understand it now. Still, I believe in pre-optimization so the third user should've used the 3rd urinal (instead of 4th) to give space to another user. This goes against the far away as possible rule though... hmm.
up voted just for this: true classing: JavaScript is a prototypal language deal with it.
I'm all for keeping the onslaught of constant jokes and memes out of a subreddit, but even r/askscience (the most closely moderated large subreddit I know of) allows the occasional joke through as long as it is relevant. This submission is definitely a joke, but has actual javascript code and the comments have a micro-discussion about the base used by Math.log, so I see no problem with the post.
It also seems ridiculously complicated considering it's just using localStorage. The "compiled JavaScript" is 464 lines with minimal commenting. There has to be a better solution somewhere.
You use the phrase _compiled binary_ a few times when referring to the output from what I assume is Uglify.js? Pretty sure that's not binary format -- just text.
Article is inaccurate. &gt; If you leave out the selector parameter, the behavior will be the same as .live() This is incorrect. jQuery.fn.on() behaves as jQuery.fn.bind() if you omit the selector.
Merged. Thanks!
Reminds me of [The Urinal Game](http://www.ticalc.org/archives/files/fileinfo/218/21832.html) for TI graphing calculators (created back in 2002)
I like the sounds of this - Is there any way I can use the API to build my own database? I'd like to pull all words from the Wiktionary and store them on my server. Using MongoDB
So you want [LLJS](http://mbebenita.github.com/LLJS/) then?
The things I liked about structures are that they made the structure of my data explicit, and allowed it to be easily addressed as a whole. They avoided the need for irrelevant indexes, by allowing me to point directly to the object. Now I often have multiple hashes using the same key, or hashes of hashes and arrays of arrays, where that's not how I conceive of the data. The one advantage the modern languages have are associative arrays. I haven't written a binary tree since I left C. &lt;G&gt; But, maybe you're right and I should look more carefully to see if JS objects could allow me to write JS more like C. &lt;G&gt;
I *knew* there was a reason I liked javascript.
if this was posted to a funny subreddit it would be lost because no one would understand it. I think programming humor fits best into it's languages reddit.
That's a good pattern, but I prefer to write code that does only what is needed. The client of an API has a responsibility to use it correctly. 
The key is the if statement. Since you're subtracting 1 from exponent every time, you will** get to 0 eventually. When you do it returns 1 instead of calling itself again. This causes everything to roll up back to the original call. ** The exception to this is that we're not checking to see if this exponent is an integer. If we were to call it with something like: power(4, 0.5); Which should return 2 in a real version of power (As 4 ^ 0.5 == sqrt(4) == 2), in this one it will run forever because it will keep subtracting 1 and never equal 0 (it will pass it on the first subcall).
This is called recursion. A recursive function always has a base case where it does not call itself (recurse) but instead returns something else. In this case the base case occurs when exponent is zero. If you trace through the execution of power(10, 2) you can see it goes something like this: power(10, 2) = 10 * power(10, 2 - 1) = 10 * (10 * power(10, 1 - 1)) = 10 * (10 * 1) = 10 * 10 = 100 However this particular function is buggy and if you call power(1, -1) it will in fact loop forever.
This is called recursion, see [wikipedia](http://goo.gl/NqR3L). The function will keep calling itself until it reaches the base case. In this function that case is when exponent = 0. If the base case is never reached it would loop forever. 
Recursion. The function calls itself until the exponent equals zero at which point it is done adn returns a 1. So, in the first example power(2,4): exponent = 4 so it returns base "2" * power( 2,3), which returns base * power (2, 2) , which returns base * power (2, 1) , which returns base * power (2, 0), which returns 1. So, the final equation is base * base * base * base * 1 or: 2* 2 * 2 * 2 * 1 
Ah thanks, I'll have to remember that for the future. 
Glad to help. Running through the execution in that algebraic way is often useful to understand what exactly a function does.
As andytuba pointed out, a better way is to to use a backslash to escape the closing paren. Much less janky-ass.
Nice! Very nice!
Do you write tests for your code? Have you considered that Javascript is a functional language, and you should write it like a functional language? Have you read the books : "Javascript: The Good Parts" and "Pro Design Patterns in Javascript" ? Both these books should absolutely rock your Javascript world.
A recursive solution can sometimes be ridiculously simpler than a procedural one. This is not really one of those cases. There is very little difference between then loop function and the recursive function. They may even be compiled into to identical machine code in many languages. Or, to be clearer, your loop function will return the same result. It's just a conceptual choice. Loops become very difficult to work with when you start trying to do things with trees, which tends to happen in HTML. Often you'll find the recursive solution is not much more complicated than this power function, but the procedural loop solution requires three or more inner loops plus multiple branching conditions that depend on all the loop counters. It helps to think of the recursive function "collapsing" at the return statements. The recursive returns chain together until you reach the "boundary condition"—the case when the function does not recurse. I have on occasion beat my head against the wall on a procedural solution for hours, only to reduce my monstrous two page function to a six line recursive function that I can understand at a glance. 
Yes that's so awesome - how could you possibly fit more than 80 chars on the screen. If only there were some way to enforce that the color of the text always be bright green or yellow.
Hm, I thought all js was open
By the way, this is a shameless plug. (I wrote the code.) Glad to answer any questions.
Did it stop sorting correctly after you fixed the performance? The final list shows: e, f, e
Hello Z. I would recommend making a dynamic calculator. or perhaps some sort of "online" registration/login thing. Or if you feel up for the challenge, make a 4-in-a-row game. Best Regards, Marcin Kossowski 
Really impressive! One thing I would consider is adding `user-select: none;` (with the required vendor prefixes, of course) to the elements containing text, because it kind of ruins the futuristic effect when you accidentally click somewhere and all your controls are selected.
No article on jQuery Events that is written today should even mention *bind*, *live*, or *delegate* except to say they are outdated. All you need is *on*.
JavaScript is one of those languages that can end up frustrating you if you don't take time to learn about it behaves and it's "Good Parts". It's all too easy to simply jump in the language and start programming as if it were one of the others you mentioned above (I've programmed in all of those). A lot of people, including myself, are guilty of this. Don't do it - you'll get burned. If I were learning the JavaScript all over again, I'd spend time learning about the language, how prototype chains work, and especially functional programming. Then I'd start attempting something serious. You'll get far more out of it and be far less frustrated later on.
There is actually a great project near the beginning of the book "JavaScript: The Definitive Guide" that teaches you to make a loan interest calculator and makes use of the canvas element to allow you to draw a relevant graph. It might seem a little complex but when I first followed the tutorial I was surprised how much of it made sense.
Well yeh that's pretty damn cool.
Just to clarify, `new Cat()` couldn't actually return 42 or any other primitive type, such as a string or a bool. When you call a function with new, if it returns something other than an object or a function, it's return value is replaced with the this instance. for example: function Cat() { return 42; } var cat = new Cat(); typeof cat &gt; "object" cat instanceof Cat &gt; true Cat.prototype.isPrototypeOf(cat) &gt; true Here `cat` is an instance of `Cat`. It's an empty object, because we haven't added anything to it, but it's still linked to `Cat.prototype`. However, if instead we have: function Cat() { return new Number(42); } var cat = new Cat(); Then `cat` will be an instance of `Number` and `cat.valueof()` will in fact return 42. However, the reason for that is that it's still an object. typeof cat &gt; "object" cat instanceof Number &gt; true cat.valueOf() &gt; 42 
Oh. One more thing. I didn't read your code carefully last night. For the loop, you'd actually want to do something like this, instead: var power = function(base, exponent) { var accumulator = 1; for (i=0; i&lt;=exponent; i++) { accumulator = accumulator * base; } return base; }; Basically, you don't want to return in the loop or you won't be looping. Your proposed function always returns base * base, no matter what the exponent is. You can start to see the complexity building up already, a little bit.
Great advice! It's added now :)
I will follow what you say and will again go back to learn the basics. Can you tell me what all i could start in when we get serious ?
thanks for the info :)
It's not Open Source if all you have is the minified version that's been stripped of all comments, formatting, and meaningful identifier names. To quote the [Open Source Definition](http://www.opensource.org/osd.html/): &gt; The source code must be the preferred form in which a programmer would modify the program. Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed. 
I would rather just use the actual reference: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/
Sorry, if it looks like I was correcting your example, I wasn't. That's why I explicitly said it's a clarification of what's really happening. I imagine if someone is not that familiar with the rules that govern what a constructor returns (which frankly are quite confusing) it may look strange, especially with the implicit `toString` call. If someone just try to return 42 from a constructor it won't work, I just wanted to make it clear when it does and doesn't work and why. I wouldn't say that's *entirely* irrelevant.
That's great, I'm so glad I was able to help :)
Another piece of advice would be to learn the language from the very beginning. While it's syntax is similar to other languages, it does behave rather differently (closures and prototypes come to mind). Learn the little things and build your way up.
Why not use canvas? seems to be much more suited for something like this and is faster.
ok, figured out a really hacky version, but with how I write my constructors I should be ok... function ( class, args ){ var inst = new window[class](); window[class].apply( inst, args ); // reruns the constructor, prototype chain was set up before return inst; }
pretty much the same thing I came up with, but I think your method breaks the prototype chain. Didn't think about the arguments part, that's a nice touch and I might add that, but I do like the look of the arguments to be passed in nested in their own array. I am also adding a call back function as this is being tied to an autoloader.
This is badass on so many levels. Nice job.
One option is to have all of your constructors ensure new on themselves, then you can apply them. function SomeConstructor(expectedArg1, expectedArg2, etc) { if(!(this instanceof SomeConstructor)) { return new SomeConstructor(expectedArg1, expectedArg2, etc); } else { // Normal constructor logic } } function factory(class) { var c = class.apply(null, Array.prototype.slice.apply(arguments, 1)); return c; } factory(SomeConstructor, "hello", "world"); Why are you using this factory function? I'm not sure what situation would require it.
man I wish Firefox &amp; IE supported this... so cool.
I'd love to see something like this hooked up to my server status...
Thanks for your response. I can imagine the onaudioprocess callbacks as being a huge bottleneck, nice job in working around that. I'd love to see the ability to create an audioContext within a web worker. Heh, I also ran into that bug when I first started messing around with the api. Took me a while to figure out what the hell was going on. Anyway, great work man. Thanks for sharing!
I believe this example in MDN does exactly what you want: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply#Using_apply_to_chain_constructors
now load it in a webkit browser...
Well you have to use is right, as explained [here](http://www.onaluf.org/en/entry/13). I know this is not how you are supposed to use a canvas. But it is fast.
I'd suggest some reading. I am currently reading and enjoying: [JavaScript Patterns](http://shop.oreilly.com/product/9780596806767.do) [Professional JavaScript for Web Devlopers (3rd Ed.)](http://www.wrox.com/WileyCDA/WroxTitle/Professional-JavaScript-for-Web-Developers.productCd-1118222199.html?utm_source=Pleisty&amp;utm_medium=W_891&amp;&amp;utm_campaign=Pleisty+%5Bdxtl%5D) Finding both to be really well written.
Oh. Way different.
Thank you!
I wish more developers would do this. It's been around for eons, and most developers either don't notice or don't care that their nice webapp gets unusable at the slightest touch of a mouse. 
It's got double servings of awesomesauce in webkit. :)
I agree. Bind, live, and delegate where documented in the article to serve as context of what .on is doing. The last paragraph explains to always use on. It's tough to get someone to change their habits without some explanation why. 
Ya that whole center piece is alive multidimentionally. Quite appealing.
Don't blame the browser just because the developer is too lazy to search &amp; replace. Both [CSS 3D Transforms](http://caniuse.com/#feat=transforms3d) and [CSS Animations](http://caniuse.com/#feat=css-animation) are available in at least some version of the major browsers and has been in stable Firefox for some while.
Except for the part where Firefox's CSS 3D support is crappy and buggy and slow. I've opened relevant bugs on bugzilla, no change in months.
Or your ID conflicts.
Which bugs please?
That doesn't appear to be the problem. I created a simpler version of the code that doesn't use the cookie-creating functions, so it'll be easier to read. The code is here: http://jsfiddle.net/AYsHX/ This new version still doesn't work right, so obviously the problem isn't in the code I deleted.
In addition to the others mentioned, these are also well worth your time: [Eloquent JavaScript](http://eloquentjavascript.net/) [JavaScrip: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) (This one is essential) As far as functional programming goes, google "functional programming in javascript." There are several articles on the subject and you'll learn some very useful and interesting techniques. Using a functional style in JavaScript can be extremely rewarding and not to mention a lot of fun!
MSIE 10 had better support this stuff, so we can all make some pretty impressive interfaces work across *all* tablets, including that Surface thing.
Canvas is nice and all, but you'll be programming an entire 3D graphics driver for it. Also, the CSS3 stuff has nodes that actually live in the DOM.
I'm just getting into javascript and I think what I loved the most about this source is just how little there is, and furthermore it's REALLY easy to understand.
Huh. Well that settles that, for personal projects I'm done limiting myself to cross browser compatible stuff, I just want to play with cool bleeding edge HTML5/CSS3 toys like this.
This snippet defines a function '_new' that should behave similarly to the 'new' keyword. It takes two arguments, the constructor and an array of arguments to pass to it. i.e. new Foo(a, b, c) is similar to calling _new(Foo, [a, b, c]) var _new = (function () { function Dummy() {} // shim for Object.create function create(proto) { Dummy.prototype = proto; return new Dummy(); } return function (Constructor, args) { var instance = create(Constructor.prototype); var result = Constructor.apply(instance, args); // You may want to set the constructor property // instance.constructor = Constructor; return result != null ? result : instance; }; }());
Excellent. Truly excellent. You've done a solid job of clarifying the one thing I've found hardest in coming to OOP in JS from other languages (even after reading Crockford), which is why one would use new() and .prototype at all. After all, one could just make a function that returns an object literal for one's "parent class" that contains all of the properties and functions that a parent object should have. You could then "subclass" it by making a function that first calls this "parent constructor" function, takes the object literal that is returned from it, and then overrides specific properties and functions, before returning this "child" object. But what you've successfully pointed out is that prototype chains are useful in that they maintain a living connection (so that you can change descendant behavior and properties even after instantiation by working with their prototype), they allow for multiple levels (so that it isn't just a question of whether you use a child's or parent's version of a property and/or function), and they allow you to *stop* overriding a property or function (when you delete it in the child, you allow the parent's version to shine through -- whereas with object literals, deleting a property would just make it go away). Thank you!
Is 'use strict' worth mentioning? ~~I ask as I noticed you mentioned using 'delete' which is not allowed by the strict syntax.~~ * https://developer.mozilla.org/en/JavaScript/Strict_mode * http://perfectionkills.com/understanding-delete/#es5_strict_mode EDIT: better links, and maybe I should understand my own suggestions before mentioning them ;) 'delete' is allowed in strict mode, but in a more restricted capacity.
Thank you so much :) You are absolutely right that patterns involving inheritance are not well covered, but the post was already too long, so I decided to leave these for the next part, which will be dedicated to using constructor functions. By the way, showing some examples of actual implementations that are used in popular frameworks is a great idea! Thanks! I'll definitely include it in the next article. Beside Backbone, what other frameworks do you think are worth mentioning? I think JQuery doesn't really use these mechanisms that much, but maybe Prototype or YUI? 
Thanks for the update. I mentioned `delete` mainly to enforce my suggestion that JavaScript objects are more similar to dictionaries than objects in class-based languages, but I wasn't aware at all about the restrictions on it in strict mode. I thought about adding a note after your original comment, but maybe it won't be necessary now. Good to know anyway. 
"Creating" in what sense? How to write the actual code to achieve it, or how to include and call a pre-written jQuery (or other) library or plugin to do it for you?
Does anyone know of one that will work for plain arrays? As opposed to their example, I'd like to just use: var song = new Backbone.Model({ title: "Lucy In The Sky With Diamonds", album: { title: "Sgt. Pepper's Lonely Hearts Club Band", release: { year: "1987" } } }); yet I still have issues with this. 
Don't know of any tutorials... but... If you're talking about scrolling content where the container has scroll bars, I'd use the jQuery plugin called ScrollTo. If you're making a carousel/conveyor of some sort, I'd use CSS (overflow:hidden, left, transitions, etc). I think the CSS route will produce the smoothest scrolling.
Cripes, I might have to take a refresher course in CS so I can properly understand all the nuances of this discussion. I kinda neglected the more abstract concepts back in school.. the hazards of getting a BA in comp sci. "Jack of all trades" kind of degree.
 birthDay = parseInt(prompt("Please enter your day of birth here")); while(birthDay == Nan) { birthDay = parseInt(prompt("Please enter your day of birth here")); } would be better as do { birthDay = parseInt(prompt("Please enter your day of birth here")); } while (isNaN(birthDay));
You can just throw a + in front of prompt("Please enter your day of birth here") instead of parseInt, that will convert it to a number aswell.
The correct answer is to use 10 as the second parameter to parseInt, in case the user enters "011", it will become 11 rather than 9.
The `parseInt` function will be better if you pass the radix to make sure that it'll be converted to decimal: birthDay = parseInt( prompt("Please enter your day of birth here"), 10 );
You could also try to get the date in one go. This is an elaborate unnecessary way to do it (don't get scared, had to google some of it myself). var currentTime = new Date(); var birthDate; do { var input = prompt("Please enter your birthdate here"); birthDate = new Date(input); } while( !input || //if the user pressed cancel Object.prototype.toString.call(birthDate) !== "[object Date]" || //is it of datetype? isNaN(birthDate.getTime()) || //is it a "real" datetime object? birthDate &gt; currentTime || //is the person from the future? birthDate.getFullYear() &lt; currentTime.getFullYear()-200 //is the person older than ~200 years (todo:make ajax call to guiness to get actual oldest person data) ); 
Btw i wasn't tryin to be a tool. This is very awesome.
Thank you! The first part worked great, but I got confused with the second part (I am still an amateur with JS), can you explain the loop and what would go in the .etc? 
I was considering doing it this way, but got lazy. I wasn't sure if you could put var before temp and it still work, since I know you can't put it in if statement (e.g. if (var temp = $("test"))). for (var x = 0; temp = $(".w" + x) &amp;&amp; temp.length; x++)
They're essentially the same thing, but graffilicious' for loop creates the same jQuery object twice (once for the .length check, once to do the .etc stuff). Mine re-organizes the structure a little bit, so you only make the jQuery object once--because that can be the most expensive part of this loop--and saves it in a variable. If there's none of that element, then (just like graffilicious version) it quits the loop.
Okay then, all your highlight classes start with 'w_' so if we want to select all o those the neccessary jQuery selector looks like this $('span[class^="w_"]') "class^=" has effect on all classes **starting** with "w_". The ".hover" of course is simple, it's just a jQuery function doing something on hover / undoing it if the mouse leaves. Now that we call our hover function on all our highlight classes, we get the class of the element that is hovered (e.g "w_one") prepend a "." to make it a valid selector and change the css on all elements that have the same class as the hovered element.
That would also work. You could make it even a little terser, at the risk of obfuscating what it does: for (var x = 0, temp; (temp = $(".w" + x)).length; x++) { temp.etc.(); } because in JS, assignment returns the assigned value. (That's how you can do `a = b = c = 10` and everything gets 10 assigned to it.) An exercise to the reader: what will var a = 1, b = 10, c = 50; a -= b -= c -= 100; return?
&gt; when you create an object with new it will inherit all properties and methods of the prototype of the function used to create the object. This is misleading here as well as in other instances where you say "function's prototype". Make it clear you mean the `'prototype'` property of the function. I've had to explain this point to newbies multiple times and the confusion always arises because they cannot distinguish between `Foo.prototype` and the `[[Prototype]]` of `Foo`. &gt; Because the prototype is just another object the procedure repeats itself recursively – first it looks for the property on this prototype object then again it finds its prototype and so on until either the property is found or the prototype chain ends and we arrive at Object.prototype. This is usually true but not a given. The prototype chain ends when some object in the chain has a `null` prototype. It's possible that this is not `Object.prototype` because you can create objects not inheriting from anything using `Object.create(null)`. &gt; instanceof is also an operator, but it has two operands – an object and a function. It can be used to determine if the object was created using the given function. This is not quite the case. `a instanceof B` checks whether the *present* `B.prototype` exists in the prototype chain of `a`. `B.protoype` could have been reassigned since `a` was constructed. Or `a` could have been created directly using `Object.create(B.prototype)`, in which case `a instanceof B` is true even though `B` was not used to construct it. You should mention `Object.getPrototypeOf` as a newer standard way to access an object's `[[Prototype]]`. I would also mirror the opinion about mentioning `'use strict'`. Otherwise, good job. Your article is very informative.
fyi this will break if OP adds more classes to the .w# elements. to fix this, OP could set a .data('wordnum', x) when attaching the hover handler, then use $('.' + $(this).data('wordnum')) to get the right class name. then the handler could be refactored out of the for loop into a named function.
Thanks for pointing that out, I'll see what I can do. I think I'll have to use the `scale()` function to distort the circles and make them ellipses.
haha brilliant. I believe we have achieved optimal awesomeness with this script.
JavaScript: The Good Parts is a good book. Read it. And I would avise that you follow Crockford's advice and actually use JSLint, your code is much more readable and you catch more errors earlier thanks to JSLint's analysis.
Your link to the reddit JavaScript page goes to /r/programming shouldn't it be /r/javascript?
Thank you!
Thanks for the tip. It's not entirely unformatted - most fields can be extracted via substrings and abbreviation mappings. It's just a few fields that are scrawled inconsistently and aligned with whitespace. What I've got so far is mostly a real parser, with a little regex thrown in.
You are welcome :)
It does look interesting, but I don't have any experience with it (actually I'm looking at it for the first time now), so I am not sure if I'll be able to write something about it.
Jslint is based too heavily on how crockford writes his code. If you are interested in a js code quality tool that analyzes code smell but not code style, check out jshint.com
It is biased towards Crockford's style, but you can turn off things you don't like. Turn off whitespace checking and you'll be fine.
what is huge? our app now stands at close to 40k LOC. we use google closure, the full works, so templating, library, the compiler, gss. gives you full OOP, type checking, it has compile time variables that you can pass in, it resolves dependencies and eliminates dead code. edit: because of dead code elim and compile time vars we don't require pre-processing.
Nice one, but on my chrome it doesn't find the cursor in the right spot. It thinks it's about 15 pixels lower.
&gt; Sometimes you have dependencies between different files like file A needs B, B needs C, but also D needs C and A needs D. If you have circular dependencies, you should refactor your code.
I really dislike all these Three.js posts that gloss over all the details and just highlight library and/or plugin functions. The section about making the character move was okay, but what I thought was going to be the main part of the article - modelling and texturing the character - was entirely missed by referring to a premade plugin.
no, god. we have a crap load of files. when we build for development we include all the depedencies and write multiple script tags, based on what the dependency analysis tool provided by the closure tool set gives us. for production all this code gets compiled into one javascript file. dependencies get managed in closure via goog.provide('path.to.your.class') and goog.require('path.to.your.class') closure compiler not only minifies, it optimises and gives type checking based on your annotations.
take a look at closure, it has a steep learning curve, but it is incredibly powerful, especially check the Bolin talk he gave at I/O a few years ago. we build with ant scripts (which we actually wrap in maven). Everything I described here is part of the closure toolset.
because... meh... dontwanna... I experiment with webgl and so the performance of my app is important to me. I saw this [video](http://www.youtube.com/watch?v=UJPdhx5zTaw) which show what javascript JIT compiler do to optimize code. Now there is without a doubt nothing faster than inlined code, but what require.js does is checking every time if a certain js files is already loaded and loads the code dynamically. I don't know how fast that really is but I imagine that the JIT will allways fall back into interpreted mode when something like that is happening. Also when you create a library you want to ship it as a single file. Another issue is loading time. Loading 20 1k files is slower than loading 1 20k file, because you spend most time waiting for the request to open and close. So compiling my project to one single file makes a lot of sense to me. 
ok I will check it out. 
That could be nice. I'll definitely look into it!
IE9 also not working
I'm currently using Jasmine, and quite enjoying it. 
see the [impress.js](http://bartaz.github.com/impress.js/#/big) demo... Code is on github 
I like that a lot! Why haven't I seen this before?! Thanks! EDIT: Quick Question: Do you know if this would interfere at all with the background parallax?
love the url, seems like a lighter alternative to keyboard.js. ill check it out!
Just what the world needed...
Jasmine works fine for me. It's probably about as good as it gets. It runs tests, the test code is very readable, and the BDD vocabulary gives you a gentle nudge in the right direction. You describe thingies by listing the things it should and should not do. That made so much sense to me. Many years ago, when I tried "classic" unit testing, I didn't really get anywhere. In retrospect, I can tell that the main problem were the slightly too abstract words it was using. I also like working with that usual BDD/TDD cycle. Write a test, check if it fails, write the code to make it pass. Or: there is a bug, replicate it with a test, fix the code to make it pass. I'd like to do something with that [Gherkin language](https://github.com/cucumber/cucumber/wiki/Gherkin) at some point. It's that "as a *X*, I want *Y*, so that *Z*" and "`given` *some precondition*, `when` *some action by the actor is performed*, `then` *I can observe something*" stuff. I really like the idea of having something like that which can be proofread (or even be written) by domain experts. I also like the idea of using this as the functional specification. That would completely and utterly destroy any kind of uncontrolled feature creep. Want some extra crap on top? Sure thing. Let's write a separate specification for that. \*ka-ching\*
That statement will be better when it's broken up in to separate statements. do { birthDay = prompt("Please enter your day of birth here"); birthDay = parseInt(birthDay, 10); } while (isNaN(birthDay)); And now we can see that it's better to move it out to a separate function. function getBirthDay() { var birthDay; do { birthDay = prompt("Please enter your day of birth here"); birthDay = parseInt(birthDay, 10); } while (isNaN(birthDay)); } ... birthDay = getBirthDay(); And now let's simplify the function. function getBirthDay() { // for simplicity, keep the prompt result in separate variable var result = '', // assigning a value to birthDay help remind you of what type of value it should be birthDay = 0; // a while loop is easier to read than a do loop // because you can more easily tell what it needs to do // simplify the test, which works with both 0 and NaN while (!birthDay) { result = prompt("Please enter your day of birth here"); birthDay = parseInt(result, 10); } } Which leaves us with function getBirthDay() { var result = '', birthDay = 0; while (!birthDay) { result = prompt("Please enter your day of birth here"); birthDay = parseInt(result, 10); } } ... birthDay = getBirthDay();
Ok, I didn't manage to do it yesterday, but I just added an update now. I made some clarifications here and there based on your feedback and the comments in the article and also added an update section to talk about `Object.getPrototypeOf` and `__proto__`. Turns out `__proto__` may get standard with ES6, didn't know that. Unfortunately, what I wanted to say about `Object.create` got quite long, so I decided to leave it for the next part. Anyway, thanks again!
I knew there was a reason why I chose to read before I opened the link :) Thanks for the warning.
Thanks! I just thought it was interesting discussion and people here might be interested in seeing it.
Very cool. A few suggestions: For code style I'd suggest using a name other than 'create' for your particles. You are essentially defining a class, and it should have a name that matches the type of object you're creating. It's common to capitalise the names of constructor functions too. `var Particle = function(){...};` and `circles.push(new Particle());` Also you shouldn't use setInterval for animation because on slower machines it can cause events to back up. (Which could be what that shaper guy is crying about) Either use setTimeout at the end of the draw function, or ideally use requestAnimationFrame so the browser can do some optimisations. Otherwise fairly neat! Keep it up! 
 Array(16).join("lol" - 2) + " Batman!";
Calling it *mouse*trap when it's a library for keyboards seems rather unintuitive.
Not everyone who uses a programming language uses it by choice.
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!"
try it now, it will not kill your browser now :)
yes. I am here because I work in web development which involves Javascript among other atrocities. I also like to hear about cool projects, frameworks and advances in general, I love programming.
... wait, what? your response does not parse.
I know, right
get rid of the mouse :)
You can try something like this (you may need to tweak it). But what this code does is - adds a timestampt to each new image so that the browser **has** to reload it (otherwise it might cache it). I also cleaned it up a little bit so if you have a question let me know. &lt;script language="javascript" type="text/javascript" &gt; &lt;!-- var steamUrl = "&lt;?php $stream1['cam1']?&gt;"; function ChangeMedia(){ var camImg = document.getElementById("camara1"); Pixastic.revert(camImg); camImg.src = streamUrl+"&amp;t="+new Date().getTime(); Pixastic.process(camImg, "blurfast", {amount:2}); } var reloadcam = setInterval("ChangeMedia()",5000); --&gt; &lt;/script&gt; &lt;img id="camara1" width = "100%" alt="Fred is working, his stream is currently unavailable. Please check again soon!"/&gt; &lt;script type="text/javascript"&gt; ChangeMedia(); &lt;/script&gt; PS: by convention ChangeMedia should be changeMedia since it's a function name and not a class name.
Here's a tutorial about smooth scrolling to anchors: http://www.learningjquery.com/2007/10/improved-animated-scrolling-script-for-same-page-links
1/0 is `Infinity`. 'i' base 19 is 18. 'n' doesn't exist in base 19. Therefore it and everything which follows is silently discarded. If you divide by 0, you need to pay more attention. If you pass a number to `parseInt`, you are fucking stupid.
There could be some ridiculous way to circumvent logging in (but it would be a terrible idea to try...) but I think you're going to be stuck logging in somehow because you're trying to display data that belongs to a specific account on google. One thing you might be able do is share your analytic info with various accounts and allow your sponsors to log in with their account to see the visualization
possibly, you can load id into a different image then process it then replace the image, i'd have to play around with it. One thing you can try is setting up the Pixastic to work with CSS as per documentation http://www.pixastic.com/lib/docs/
Of course, because this is stackoverflow, the question's been closed, and I'm sure it will be deleted within the next few days.
Yes. If you did var_dump(1/0/0) you would get bool(false). False becomes zero if you do ~~many~~ EDIT:math or comparisons with it. 
You might run into some problems since you can't legitimately start a class name with a number. That being said, if all you wanted was to wrap all the words in spans, you could write a regular expression that looked for [word boundaries](http://www.regular-expressions.info/wordboundaries.html), and then loop over the array of matches to generate your html with javascript's [String.replace()](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace)
Do what this guy (girl?) said. Mine is way too complicated.
Users.
[You should be.](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/)
Since the first letter is capitalized it's a constructor. Call it with new and see what comes out.
&gt; Each candidate is a possible point of media reception http://www.cs.columbia.edu/~kns10/software/libnatapi/IceCandidate.html What this means is when you instantiate a new IceCandidate, you are providing a mechanism to access the media content. I couldn't find any conclusive definition though, so don't take my word for it.
Javascript: The Good Parts really is one of the best programming books I've ever read. 180 pages or so and after you've read it you can program in JS pretty well. 
I learned JS from that book and that book only. It's very nice - it reads like K&amp;R. Only thing I regret is not bringing my copy to Crockford when he visited my school years ago.
Haha. You sir deserve an upvote.
Actually I'd still go with a regex - Pyro's solution will fail for sentences with punctuation, and would require a little more code.
Hilarious! "I can’t even say what’s wrong with PHP, because— okay. Imagine you have uh, a toolbox. A set of tools. Looks okay, standard stuff in there. You pull out a screwdriver, and you see it’s one of those weird tri-headed things. Okay, well, that’s not very useful to you, but you guess it comes in handy sometimes. You pull out the hammer, but to your dismay, it has the claw part on both sides. Still serviceable though, I mean, you can hit nails with the middle of the head holding it sideways. You pull out the pliers, but they don’t have those serrated surfaces; it’s flat and smooth. That’s less useful, but it still turns bolts well enough, so whatever. And on you go. Everything in the box is kind of weird and quirky, but maybe not enough to make it completely worthless. And there’s no clear problem with the set as a whole; it still has all the tools. Now imagine you meet millions of carpenters using this toolbox who tell you “well hey what’s the problem with these tools? They’re all I’ve ever used and they work fine!” And the carpenters show you the houses they’ve built, where every room is a pentagon and the roof is upside-down. And you knock on the front door and it just collapses inwards and they all yell at you for breaking their door. That’s what’s wrong with PHP."
Hi, I added a tentative support for HSL in the development version. It's not at GH pages yet. Available through the repo, though. It should be easy to add other colorspaces there now as well. Just need some inspiration. Munter (another dev) promised to integrate his color lib to this picker. That'll likely help in this effort.
&gt;you can't legitimately start a class name with a number You can. &lt;div class="1"&gt;...&lt;/div&gt; .\31 {...} or .\000031 {...} Here is a good overview: http://mathiasbynens.be/notes/css-escapes
Also if you don't pass a radix you're just asking for unexpected results.
To be fair, that's a defect of the implementation. I consider it to be broken. It should not switch to octal if there is a leading 0. That behavior is just plain weird. It's a string. It's apparently user input, not a numerical constant in your code (ES5 dropped octal constants, by the way). Fortunately, JSLint catches this.
Fwiw, it is meant to be brief...but believe me it is dense with goodies and really helps you have an appreciation for the language.
CMYK is realistic. The lib we are going to integrate next supports it. So at least we can provide CMYK fields for you if nothing else. I set up [an issue](https://github.com/bebraw/colorjoe/issues/9) for this. Feel free to participate if you have any specific ideas.
Thanks for your help spamhammer! The issue I have is that I will have two or three different paragraphs where the words need to match each because selecting one word will do a special effect for the other words with the same span. Thus, it isn't just creating spans around every word without meaning but each word will need to have a specific span. That is why I was thinking numbers would be the easiest way. Maybe I could start it with a letter? Like x1, x2, etc. 
I believe it provides some kind of decoding for ice-cast streams(shoutcast iceycast etc)
are you saying every word needs a unique span, or there are types of words (ie verbs, nouns, whatever) that need to be grouped? Or that when you do something with the word "llama" then all the other instances of "llama" do something at the same time?
Presumably what comes out will be an Ice Candidate. :P
Cool. Just added support for CMYK fields btw. :)
Haha, yes, you're definitely right. They're far from a panacea, especially if you aren't quite sure how to write one. As you said, it depends on the problem.
I think this spec is a bit unclear. For example you say "eat" and "consume" should be the same class, but then you also say the words won't be in the same order in the sentence. How do you plan on matching those words then?
Correct me if I'm wrong here, but in your MVC the model does not seem to store any information or interact with any data source. Also, in "real MVC" the model is not an object , but a layer.
There's too much SEO going on in this title. I'm undermining it out of principle.
I think it's actually just meant to be passive aggressive. Some folks think that the MVC being pushed by certain java frameworks is not true MVC.
Another one? *Sigh*.
Wow that is really neat! jQuery is awesome :) However, that is not what I am looking for exactly... please see below if you would like to help out further as I am still looking on how I could do this. 
The intention of that line in the README is to make it immediately clear that Maria is a true MVC framework. The many existing MV* frameworks for JavaScript all have positive points but they aren't quite MVC and that has lead to confusion to newcomers to the MV* architectures.
Forget what I wrote before. This is better (http://jsbin.com/ivomuw/edit#javascript): var str = "Hello there Reddit, how are you? Hello there Reddit, how are you?"; // set up a dictionary, and maintain a count to have a unique key for each word var dict = {}; var count = 0; // use string replace with a word boundary regular expression to map over each word // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace str = str.replace(/\b\w+\b/g, function (word) { var key; // if the word is not in the dictionary, add it and update the dictionary word count // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/HasOwnProperty if (!dict.hasOwnProperty(word)) { dict[word] = count++; } // the key will be the value of the word property in the // dictionary key = dict[word]; // return the wrapped word return "&lt;span class='word-" + key + "'&gt;" + word + "&lt;/span&gt;"; }); console.log(str);
Then I hereby retract my down vote and then give an up vote to make ammends.
Well I guess I don't know what makes it real or fake, but I do know there are quite a lot of client-side MVC javascript frameworks. http://addyosmani.github.com/todomvc/
It will take more than just the README to explain how best to use Maria. I'm working on more documentation. For now the example applications and code comments are the best places to start. Then questions to the Google Group or on IRC. Traditional Smalltalk implementations of the view layer do not automatically update the view. The application programmer has to decide what needs to be updated. In many places, the Maria code is a line-by-line port of the Squeak Model, View, and Controller classes. The controller is there to implement the strategy pattern. If sending messages to the view is part of a strategy then that is the right thing for the controller to be doing.
I'm working on more documentation. For now the example applications and code comments are the best places to start. Then questions to the Google Group or on IRC. There are a lot of options out there in the MV* framework field. Maria is the only MVC framework I know of.
PAC : Presentation - Abstraction - Control MVC: Model - View - Controller 
[Here are 10](http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/)
&gt;actually PAC, that's the gotcha Could you explain the difference? Based on ocrow's expansion of the acronyms below, it seems to me that M=A, C=C, V=P, although I'm assuming I'm wrong since they have different names.
I am not the author of this. To contact him, visit [this](https://github.com/mikeric) 
In the original MVC, every single item on the screen had its own model, controller and view. So if your app's screens had a few hundred widgets, you'd have a hundred controllers, etc. In what people call MVC nowadays, the whole system has one controller, the whole business layer is called the model and everything to do with UI is called the view.
Aware of [Chirpy](http://chirpy.codeplex.com/)?
I just use a .bat file to build my JS projects. Here is the build script from my Quby compiler: @echo off copy /B .\..\license.txt ..\dist\quby.js type ..\src\lib\*.js &gt;&gt; ..\dist\quby.js type ..\src\*.js &gt;&gt; ..\dist\quby.js @echo on rem ### Build Done! ### Each file is then built as it's own module, within a self executing function. In testing I include it as multiple script tags, and in production I use just one. It's dirt simple, and works great.
I also tried to answer this on stackoverflow/exchange.
I tried what you said, but it just made it worse. Now the balls are not even visible. I think I misunderstood you. Have a look [here](http://cssdeck.com/t/dcebfocu/5).
They are in the MV* realm but they are not MVC.
It doesn't tackles the dependency issue by having all the JS files bundled together. The list can be static but it can also just take everything in a folder. The approach makes new users download a big bundle on first visit but then it's kept in cache and nobody has to worry about it. With a dependency-aware bundle, a new bundle could potentially be downloaded when going from one page to another. For your needs, I don't really see the need for a VS extension. You could read the JS files on runtime much like Bundler, read the dependency codes you've defined, build a dependency tree and feed each request depending on what it needs. Heck, you could couple it with another bundling system and create the bundles dynamically. 
This has the information for collision detection. I can already detect the collision, the only problem is resolving the collision in which some balls overlaps each other.
TDD is often akin to premature optimization. If you spend time writing test cases for software that is constantly changing and evolving, you constantly have to update the test cases as well. It's easy to spend half your time writing test cases while your competition is bringing features to market. Half the dev team where I work is obsessed with writing unit tests but they so often fail because our functionality changes so frequently that the testing 'fails' go largely ignored because changing feature X causes test Y to fail and that was expected, and they don't always have time to fix all the tests. This happens daily, and it amazes me that they still try to write all these tests without questioning the usefulness of spending half their time writing tests that they are just going to ignore anyway. For some types of systems writing tests seems to work well, but from what I've seen of web application development in a start-up environment with limited funds and tons of competition, it isn't always the case.
Frankly I wouldn't use the VS-style JS intellissense thing and come up with my own way to do it to prevent confusion both to intellissense and users.
Could you paste some code?
 $("#test").mousedown(function(e) { var bx = e.pageX; var by = e.pageY; var barray = [bx,by]; return barray; }); // I want to use barray outside of the function, how can I catch the value? $("#test").mouseup(function(e) { var ex = e.pageX; var ey = e.pageY; var earray = [ex,ey]; return earray; }); // I want to use earray outside of the function, how can I catch the value? Ultimately I want to find the value of ex-bx, and ey-by to find the distance that the mouse has moved while it was pressed down. My problem is that I'm really new to JS and have no idea how to access these values if not inside the function.
Yup, makes perfect sense. Thanks, I really appreciate it.
I guess the next question is if it really matters they aren't pure MVC. Is MVC is the best architecture for most projects? Probably not. Don't get me wrong, I would like to see more peer-to-peer development, with MVVM/MVC/etc being used in the browser, moving away from client/server request/response architectures.
I was wondering if there was something out there like this... so far I have been building my own each time.
Set the array on the window obj for the equivalent of the global in PHP or omit the "var" before array. window.mousedownCoords = [e.pageX, e.pageY]; or mousedownCoords = [e.pageX, e.pageY]; 
And I wonder why would anyone need this? I mean, once you catch your page loaded/rendered event, can't you just request any data you need by Ajax?
I still don't see any reason why can't I perform all that stuff you listed, by Ajax. And, additionally I see it as a problem on architecture level. Web server is intended to respond on the requests clients can perform, this is the nature of HTTP. You utilizing it wrong.
There are some libraries you can use for this. One i've used before is [jQuery BBQ](http://benalman.com/projects/jquery-bbq-plugin/).
This is perfect, his [hashchange](http://benalman.com/projects/jquery-hashchange-plugin/) one is tiny in size and does exactly what i need it to. Thank you.
Since the initial question has already been answered, a little more information for you: The function that you give to mouseup and mousedown is now a "callback." jQuery will store it and call it when it handles those events. Therefore, your function is returning its value to the *jQuery* code, not to your original block of code. jQuery expects your function to return something [truthy](http://11heavens.com/falsy-and-truthy-in-javascript) (or nothing at all) to indicate whether to continue or (for a falsey value) to halt the presses on this event. From the jQuery docs on event handlers: &gt; Returning false from a handler is equivalent to calling both .preventDefault() and .stopPropagation() on the event object. .preventDefault does pretty much what it sounds like: jQuery is supposed to tell the browser to not do its regular thing (submit a form, follow the clicked link, etc.). .stopPropagation() means that any other event handlers higher up the tree will not get called. (There's also a .stopImmediatePropagation(), which does the same thing to any event handlers on this same element which have not yet been called.)
Fascinating. How did you end up finding the code itself? I imagine it would be stored in a cookie locally or something? or perhaps when the form is submitted?
That's actually two separate debates that get mixed up all the time. 1. Because we tend to combine many different javascript libraries, having everything pollute the same global namespace is a problem. Having each library use their own namespace, is a good way to minimize collisions and best practice. This isn't really a debate, and there are even "outside" solutions such as scriptloaders that load a script into a qualified namespace. 2. Using variables outside of a class, is not pure class based "OOP". This is no longer about the global namespace, but the whole concept of storing variables anywhere outside of a class, even in a qualified namespace. The most commonly suggested design pattern is a singleton class, if you really need it to exist only once. This is very much an open debate. And splitting your codebase up into 100 classes is just another way of pollution a namespace, if you ask me. **My suggestion to the OP** Here's the minimalistic proper way, with nice formatting. We essentially add two walls around all of your own code! You pick a namespace, in which you put things you want the outside world to have access to. I've picked the namespace "drew" [drewchambers.js] /////////////////////////////////////////////////////////// var drew = {}; (function(){ // THE NORTHERN WALL /////////////////////////////////////////////////////////// /* DEFINING PRIVATE THINGS these are not available outside of your walls */ var karma = 26; function tellMeMyKarma(){ alert( 'My karma is ' + karma ); karma = karma + 1; } /* DEFINING PUBLIC THINGS these are available outside of your walls */ drew.love_interest = "Felicia Day"; drew.callMe = function( your_name ){ if( your_name == drewchambers.love_interest ){ alert( "yes!" ); } else { alert( "maybe.." ); } } ///////////////////////////////// })(); // THE SOUTHERN WALL ///////////////////////////////// The idea is, that because only "drew" is now part of the global namespace, you won't collide with other globally defined functions and variables. 
if you use jquery you might see that the .offset Function can provide some insidght. they use a single object {left: (number), top: (number)} 
Here is the cleanest way to do this in JS without polluting the global namespace (as discussed in other replies)... (function(){ var downX,downY,upX,upY; $("#test").mousedown(function(e){ downX = e.pageX; downY = e.pageY; return false; }); $("#test").mouseup(function(e){ upX = e.pageX; upY = e.pageY; $("#distance").html((upX-downX)+","+(upY-downY)); return false; }); })(); I wrote this as a jsfiddle so you could experiment with it. You can find it at http://jsfiddle.net/xCZnj/. I couldn't test the mousedown/mouseup events as I am writing this on my iPad, but it should work... Maybe... The important thing to understand and to which others are alluding is that JavaScript has two scopes, global and function. Variables defined without the var keyword are defined in the global scope. Variables defined with the var keyword are within the scope of the function that they are created within. We can then exploit function scope by creating a wrapper function and executing it right away. This is done thus: (function(){ // our code goes here })(); Then, any var created within that function, so long as it has a var keyword, will only be visible to things within that function, including other functions created within the first, outer, function. So, we can also do our jquery handler functions inside of our outer function, giving the jquery handler functions access to the variables defined within the outer function. I'm pretty sure I explained this really poorly, so I suggest you go read Crockford's book... It's a short read that should be mandatory before you are allowed to use JS. You can find it on Amazon (JavaScript: The Good Parts, by Douglas Crockford) or you can just visit his site and read his blog posts which mostly cover the same thing: http://javascript.crockford.com/ Good Luck.
yup my link has implementation for format and a link to an implementation of printf. It would be nice if we didn't need to write this function ourselves and was defined in the ECMA standard.
Is there a way to deliver an installer that will install the app w/o the user having to separately install node?
Node.js should be portable, just send the necessary files together with your application. The node.exe file is here: http://nodejs.org/dist/v0.8.1/
Describe exactly what it is you want to do. If you want to know if you can update a tag's attribute from JavaScript, then yes, you can use the DOM - here's an example which updates the href attribute of a &lt;base&gt; tag while as the page is initialising, to loa: https://github.com/insin/insin.github.com/blob/master/newforms/tests.html
Works for me. I copied your markup to a .html file and loaded it in my browser. A Share on Twitter link appeared top center. I then added text immediately before and after the script tag and the link appeared between the text. 
Opera sadly does not support [SVG images as source for input elements](http://0x2620.org/html/bugs/input_image_svg.html). A lot of the interface elements depend on it. We filed a bug with Opera about it, there bug database is not public so can not link to it. (You can click on the icon to open the page in Opera anyway)
* DSK-349776 img elements with svg do not fire onload ([example](http://0x2620.org/html/bugs/OperaSVGonload.html)) * DSK-368674 input with svg src not working ([example](http://0x2620.org/html/bugs/input_image_svg.html))
It works fine for me too! Just tested by adding the code on one of my coded websites and I saw the button with rest of the sites loaded. I am using Chrome v20 on Win 7
just do a view source on any major website, including this one :)
Hey Mike! Let me add that we'd really like to support Opera (especially now that debugging facilities are somewhat on par with Webkit/Mozilla), but the SVG bugs have been a show-stopper, so far. It's not the only issue, but we're going to work on the rest once we know there's hope for proper SVG support.
SGTM, feel free to email me at miket @ opera.com for any future issues. Cheers.
Do take a look at this though: http://wiki.ecmascript.org/doku.php?id=strawman:string_format_take_two
Hang on
Chrome for OSX doesn't have this feature. I've been using this shell script from Lifehacker to create a Chrome SSB: http://lifehacker.com/5611711/create-application-shortcuts-in-google-chrome-for-mac-with-a-shell-script Though unless I need an extension that isn't available in userscript form, I've been using Fluid for better memory usage. 
[I messed up the first image post.](http://i.imgur.com/MP3Ce.png)
Yeah, I did catch that, so it's mostly the thread title that's a bit misleading. Still makes me wary, though. =]
Well that's just lame. I was all excited here.
I think if the shoe fits, wear it - if JS to native makes sense for your application then, well, I see no problem with it.
And not least, Windows 8 and Metro style applications.
I disagree with the notion that it’s all about the looks. An OS (and its toolkits) provides more than a window frame and a close button. Here’s some random things I expect of Mac apps: * There’s a useful menu bar that’s at the top of the screen. * A multi-window interface, at least for document-oriented apps. * Clicking the Dock icon opens a blank, unsaved document. * Clicking the down arrow next to the document title in the title bar lets me see the version history of the file. * Content is indexed by Spotlight. * A useful Dock menu. * Music keeps on playing when I close the window. All these things come for free (mostly) when using AppKit. Now I don’t care if you use Objective-C, JavaScript or Brainfuck, but apps should work in a consistent manner on any given platform. You can’t package a website and call it an app.
'pushing information from the webpage to the javascript' ????? Please explain this. If you want to embed any type of data on the webpage at load time, then why would you need a javascript library to do that? I'm not sure what this is attempting to do but it seems like a solution in search of a problem. 
I managed to make a version of clone that accepts objects containing cycles without attempting to perform infinite recursion. The algorithm can clone the following object for instance: var original = { foo : true, bar : { h:null, arr: [1, 2, 3], deep: 'unchanged' } } original.bar.parent = original; I consider the way your function doesn't copy null-valued keys to be an error. The presence of a key even if it's value is null could have some meaning to a script. My version is a drop-in replacement for your script. The only problem with my version is that it isn't so small! I managed to come in at under 200-bytes but I don't know how to shrink it anymore. You are welcome to try your hand: function c(t, a, g) { var e = t.constructor(), i; (a=a || []).push(e), (g=g || []).push(t) for (k in t) t.hasOwnProperty(k) &amp;&amp; (e[k] = (l = t[k])?(i = g.indexOf(l)) &lt; 0 ? typeof l == "object" ? c(l, a, g) : l : a[i] : null); return e } And minified: function c(t,a,g){var e=t.constructor(),i;(a=a||[]).push(e),(g=g||[]).push(t)for(k in t)t.hasOwnProperty(k)&amp;&amp;(e[k]=(l=t[k])?(i=g.indexOf(l))&lt;0?typeof l=="object"?c(l,a,g):l:a[i]:null);return e}
Here is a specific example of something I wrote which needed this: I work at a university where I help maintain the main website and several department sites. We use a CMS which allows the departments to maintain their own content using content classes which we maintain/create. I was tasked with making a new content class which displayed items from a feed. This feed might be from twitter or a blog or whatever, and in the form of atom or rss. I used the Google Feeds API and needed a way to accept in the feed url as an argument so that I could pass that in to the Feed API and then output the results using a Soy template. The JavaScript and templates would be compiled. I did this by creating a JavaScript object on the webpage below the dom element the feed was supposed to be displayed in, which then had an array as an attribute to that object, and I would push the arguments (feed url, how many items to get, the id of the dom element...) into that array. My script would have an object of the same name, with the push function overridden as a prototype of that object, and when that push function is called, the script starts. There might be several of these on a page, so I needed to iterate over each object which was received and make sure it was all in order before trying to output it. This is pretty much how this server2.js works, only with more features, such as garbage collection, the ability to add more than one "hook" (which is their equivalent of my "push"), etc. tl;dr: It's useful, and I've had to some shenanigans to get the same result. edit: I accidentally a word.
Fortunately AppKit exists then
Okay, so brief refresher here because I suspect it might help... In JavaScript, functions are first class objects, just like every other variable. This means they can be assigned and passed around just like any other variable. Consider... var f = function() { // do something }; In this case, f is a variable that contains the function. You can execute the function by saying... f(); To illustrate the point further one could also say... var g = f; g(); And produce the same result. Now back to our question... In jquery, the mouseover and mouseup functions take as their first parameter a function. As noted above we can define our function this way... var f = function() { // do something }; $("blah").mouseover(f); Thus passing our function f as the parameter of mouseover. We could also, if we wanted to save a little bit of code, write it this way... $("blah").mouseover(function(){ // do something }); The two expressions, outside of assigning it to f, are computationally similar. Now, the mouseover function as defined by jquery will execute the function we passed into it whenever the event "mouseover" occurs. Jquery's documentation (http://api.jquery.com/on/) goes into this but somewhere in there it says "Returning false from an event handler will automatically call event.stopPropagation() and event.preventDefault()." (This was also discussed in andytuba's post above.) This basically says that by returning false in our handler function, we want to stop any other event handlers from running (that's the stopPropogation bit) and also prevent the default browser event behavior from running (the preventDefault bit). So, at long last the answer... I return false to stop any other mouseover event handling, including the browsers default behavior. Is it necessary, perhaps not, but it is cleaner. Hope that helps. 
The main thing here is the fromISO8601 method. Everything else is just convenience methods. I few years ago I was working on a project with a lot of date manipulation going on. I got fed up with dealing with dates, so I wrote this little library (SpeedDate) that did all the things I needed to do. I'm also a big fan of the ISO8601 standard, so I took an existing (reasonably good but incomplete) implementation and expanded upon it. My favourite is var myDate = Date.fromISO8601("2012-07-01T10:00:00.000+1100"); *Mmm, standards. *drool**
I don't see any information about whether or not this allows you to access native APIs. Without that, there's almost no point to this existing. There's already a nice packager out there that lets people run apps cross-platform - it's called a web browser. There's only two reasons to create a native app over a web app: you need performance, or you need access to native APIs. Unfortunately, the hard part is providing cross-platform and intuitive access to those APIs, which is what Appcelerator is trying to do.
I wrote this for my own projects, and I do not flippantly extend native types. The functionality of the Date native is detailed [here](http://ecma-international.org/ecma-262/5.1/#sec-15.9), and all browsers implement the type correctly, so there's no real risk in extending the Date native other than developers accidentally creating two functions with the same name. There is, in theory, a future-compatibility risk, but at the end of the day it's not a huge library; if you dislike extending natives, feel free to move the functions to a custom scope. Also, while I don't believe modifying non-DOM-related native objects constitutes bad practice, you make a good point in that the community at large is averse to modifying natives, so I will write a version that does not modify the Date native.
We really need a date object that can handle resolution down to nanoseconds- has anyone made such a thing? Note we don't actually want to do any JS timing in nanoseconds, but deal with, format, and compare date/time stamps including nanoseconds.
I hate to post this to a random Opera dev, but with no public bug tracker or other way to find out anything, there isn't much of an alternative. I'd like to ask first about a bug I reported over 6 months ago, which still affects Opera 12, and Opera Next. The width of spaces in monospaced fonts is incorrect, when you are not at a 100% zoom. If you go look at some ASCII art online, and then hit ctrl+plus, you can see it all gets messed up. Why is this important? There is an editor called [Ace](https://github.com/ajaxorg/ace/) which is used by a bunch of sites. It's the only real competitor to Code Mirror, the successor to Mozilla Bespin, and it's totally unusable in Opera if the user ever zooms. Totally unusable. I use Ace on one of my sites, and I have had users file this bug to me, so it does happen in the wild. Ace works fine at different zoom levels in other browsers, including IE 8. I've had to tell users not to use Opera, which clearly isn't acceptable. Separately, there is still a bug with 'instanceof Image'. This replicates the issue: &lt;!DOCTYPE html&gt; &lt;script&gt; var img = new Image(); // errors in Opera alert( img instanceof Image ); &lt;/script&gt; The above displays 'true' in Chrome, Firefox and IE 9, but errors in Opera 12 and Opera Next. The workaround is to use 'HTTPImageElement' (or it's called something like that), but using 'instanceof Image' is an easy trap to fall into when writing HTML5 canvas code.
That's very nice! Although I must point out that my script will copy null values. My code stops it *recursing* on null values, not stopping null values completely. This is because `typeof null === 'object'` so you have to do some filtering otherwise you will get mixed up as to what is an object and array. You can tell the difference between and array, object and null value with [something like this](http://codepen.io/Wolfy87/pen/better-type/5). 
You might want to take a look at SquishIt just because you can write your own bundling code easily. It won't do the dependency thing right out of the box, but it does have an easy syntax for using, when you can't use bundler, or Cassette, if you have some MVC going on.
There's a problem : "k" is not a private variable ! Here is another "127 bytes" version with private variables : &gt; function c(e,t,k){t=new e.constructor;for(k in e)e.hasOwnProperty(k)&amp;&amp;(t[k]=e[k]&amp;&amp;typeof e[k]=="object"?c(e[k]):e[k]);return t} But I created an even smaller version : 122 bytes with "k" as a public variable : &gt; function c(e,t,j){t=new e.constructor;for(k in e)j=e[k];e.hasOwnProperty(k)&amp;&amp;(t[k]=j&amp;&amp;typeof j=="object"?c(j):j);return t} 124 bytes with k as a private variable : &gt; function c(e,t,j,k){t=new e.constructor;for(k in e)j=e[k];e.hasOwnProperty(k)&amp;&amp;(t[k]=j&amp;&amp;typeof j=="object"?c(j):j);return t} and it is faster ! Good job for the work, I wouldn't have been able to write this one without you !
Finally! We now have the technology to emulate windows 3.1 screen savers! Do starfield simulation next! 
Also, just checked on the instanceof Image bug (CORE-32979) --and that was fixed in core integration point 319. Right now Opera Next is at 310 (check the Presto part in the UA string, e.g. Presto/2.11.310). These should be the results when that fix lands in Next: `(new Image) instanceof Image -&gt; true` ` (new Image) instanceof HTMLImageElement -&gt; true ` ` Image === HTMLImageElement -&gt; false ` ` Image.prototype instanceof HTMLImageElement -&gt; false ` ` Image.prototype === HTMLImageElement .prototype -&gt; true ` ` HTMLImageElement.prototype instanceof Image -&gt; false ` ` document.createElement("img") instanceof Image -&gt; true`
Awesome! Thank you.
Done.
Not beautiful yet - but how far could this go with a great designer?
Very nice. only fails in IE9: SCRIPT438: Object doesn't support property or method 'getContext' all.min.js, line 1 character 206046 SCRIPT438: Object doesn't support property or method 'getContext' all.min.js, line 1 character 206046 
If you have some specific suggestions as to how to better accommodate middleware I'll definitely try to add it in. I'll look into it in general.
You think there are more people interested in Javascript work among the 17k subscribers to /r/forhire than among the 20k subscribers here?
Too bad it's GPL
Hiring people to do ....
Incredible work, but I'm not ever going to create UI's in a non-declarative way. Creating a good-looking, custom UI with code like this would drive me absolutely crazy: var root = (new zCanvas(400, 400)).root; root.setBorder(new SimpleBorder(SimpleBorder.SOLID)); root.setLayout(new BorderLayout(8,8)); root.padding(8); var tf = new TextField("Hi ...\n", true); root.add(TOP,createImageLabel("Title",zebra.ui.get("icon.excl"))); root.add(CENTER, tf); root.add(BOTTOM, new Button("Clear"))._.add(function() { tf.setText(""); }); 
That doesn't change the fact that they are offering to hire people. You don't see general programming job offers in /r/programming do you? There is no discussion of the JavaScript programming language here, just an advertisement. For a definitive answer, the mods would have to decide if this is acceptable or not.
If we have a glut of these posts that becomes annoying, I'll do/say something about it. For the meantime: we barely ever get these, and he's not trying to sell anything so I don't consider this "spam"... Clearly people are interested based on vote totals (although now that I see the Aug 1 deadline I feel sorry for whoever might take this on)...
Warning: Firefox has a bug in the way it grows the heap that causes it to eventually hit the 2gb limit (32bit versions) and crash the browser. [More info](https://bugzilla.mozilla.org/show_bug.cgi?id=765435)
I was a bit skeptical at first and voted "No", because I think a lot of the language's flexibility and expressive power comes from the fact that you can easily extend objects and create objects on the fly. Then I realized it only talks about objects created from classes, so I'm guessing if you create an object with an object literal it can still be extended. Is that right? If this is the case then the proposition is more acceptable, but still, is it necessary? You can always call `Object.seal` on the instance if you need to. What problem does this solve? I feel like it's just trying to make JavaScript look more like a "standard" language than solve anything.
I think we're all aware of how conditional comments work. The reason I claim it IS relevant to the discussion is because the jQuery team implicitly recommends using them. I don't care that they WORK, I care that they are being USED at all. In short: jQuery is recommending the use of a deprecated feature in order to address the fragmentation they are creating (which it appears the fan boys are unwilling to admit). 
It really depends on what a 'class' is supposed to mean in ES6. Really, the class keyword doesn't need to exist at all as you can get the same effect with the more verbose syntax, so that means that the keyword is just for saving syntax and little else. In which case it should behave the way that it will be used in the majority case in the way it was intended to be used. After all, what's the point in making a syntax shortening keyword if you still require extra syntax in the majority case? The minority case can be supported by the more verbose function prototype building syntax.
You have to use the menu up top to select a model. I know that the interface isn't the most intuitive at the moment. It was a quick demo build a few folks on IRC wanted to see.
Haha I learned this the very hard way.
Nevermind, I didn't see the menu at the top and was trying to click on the blue text.
Sorry, but 3 weeks is a deal breaker for me.
Yeah, you sure can. That's exactly what it's for.
That and no info on any game framework, languages (no server-side stuff?), supported platforms (because hey, HTML5 works the same and great everywhere, right?)
Best piece of js technology I've seen to date.
JavaScript actually has very powerful methods of doing things like this. Closures are very powerful in the language and useful for isolating things / making them private / preserving the scope.
Then [try this](http://madebyevan.com/webgl-path-tracing/). If you understand what this is, you will be amazed.
How much are you paying?
Thanks for the link! I am (slowly) working my way towards a real path tracing implementation. There is something of a gulf between intersecting a ray against a couple of dozen spheres and planes and intersecting a ray with 500k triangles (I have a model that size that I test against but left it out of the demo because it is &gt;81mb and I didn't think I could afford the bandwidth!) A trivial path tracer can be implemented as a webgl shader or opencl\* program by simply intersecting the ray with every object in the scene (because GPU's are fast at math and orderly memory reads) but a GPU-based path tracer that works on hundreds of thousands or millions of primitives needs to perform massive amounts of trickery (because GPU's are terrible at branchy code and random memory reads). This is still very much an open area of research. With Flux, I set out to make a more *general renderer* that could handle nearly any kind of traditional wavefront object or scene and it's materials and textures. For this reason, I have avoided using the GPU - at least for now. Unfortunately for me, web workers are also pretty useless for this task in their current implementation. \* I helped out with the opencl based toy path tracer, [kajiya-gpu](http://code.google.com/p/kajiya-gpu/).
Better for you to keep it here. Better for this subreddit for you to delete it so it doesn't encourage others to inappropriately post job adverts to a subreddit that should be for discussing javascript the language.
The trouble is that by the time it's common enough to get annoying the trend usually has too much momentum to be easily stopped, and every criticism is met with "well all *these* people did it without getting stopped...". The time to pick up litter is when you see the first few pieces, not when you're already knee-deep in it and people are already in the habit of thoughtlessly tossing it away.
[This](http://arturadib.com/hello-backbonejs/docs/1.html) is one of the simplest backbone tutorial that I've seen.
Neat. Also, love the in-memory map/reduce example you did there. :)
pastie.org would be a nice start asshole.
Hey!, Don't worry about it! I remember when I first started putting my css files in a sub-folder and spent 3 hours working out why the images were not showing! Getting it wrong first time is in my opinion better than getting it right as you learn more from it. Would you be against using a JavaScript framework like jQuery? It probably will help you out a lot by helping you focus on the what and cover the cross browser pitfalls which could get dispiriting quite quickly for someone as new to it as you. The best way to check your code is running is doing a check to see if the document has loaded using an alert or console.log for multiples. put in a descriptive message and if you are expecting answers or changes throw them in as well. Try and use external scripts, it might seem a little more hassle but will get you in good practice and will help separate mark up and logic. If you want to try some things out quickly or get help from others a great place to start is getting what you think should be done on http://jsfiddle.net/ Then others can see what your talking about and give you pointers. Sorry if that's not very helpful but without knowing a little more about what you are doing and the direction you have gone its a very open ended question. Hope it helps,
For posterity, there is also this: http://fitzgen.github.com/wu.js/ Also, I believe that generators and iterators will probably be coming to ES6: http://wiki.ecmascript.org/doku.php?id=proposals%3aiterators_and_generators
Thanks for telling me about wu.js (I should really look these things up first) — it seems to have a lot more functional programming features (pattern matching, currying, composition) than sloth.js supports, whereas I was just aiming for a library of composable iterators in the vein of Underscore.js (but lazy). As for ES6 generators and iterators, sloth.js is designed to complement them by providing facilities to assemble lazy pipelines of sorts — they're even supported right now, if you run the tests in any recent Firefox.
It seems like rather than the engine doing this for you, if you wanted a class that's instances were sealed by default, you could just add Object.seal(this); To the end of the constructor.
Works pretty well on my 4s. I do miss the natural keyboard key popup effect when you type. But colouring the key does help to see what I pressed. In terms of the code, perhaps post on github? :)
Thanks agmcleod! You're a star. Yeah sounds like a good idea, there's a few edits I'll need to do first (hacked in 2 lines into the keyboard library for the heatmaps it creates). But yeah I'll happily do that if there is some interest :) Thanks again, really do appreciate it.
I also prefer require.js in my apps as well. 
Yeah true true, I use to write basic introduction canvas isometric tutorials which have been linked quite a bit from reddit/stackoverflow which looked great to employers (got a job lined up in CA for when I graduate). Sadly stopped writing them as work/university took pretty much all of my spare time. But I've still to properly finish a piece good enough for open source but maybe this could be it :). Would be a great feeling to see it being used.
Would you like another test round or are you ready to begin? Yes...
Oops - thanks for picking up on that! Rephrased to: Good Job! Would you like another practice round? Press No to begin the test. Thanks greyscales
I just realised my statement looks like crap. Damn auto correct. Editing it now. :)
A good boilerplate for these: https://github.com/tbranyen/backbone-boilerplate
Well, the larger thing is, it's obvious that the OP has zero understanding of the complexity involved nor any grasp of scope. My advice to anyone looking to follow this up is to run like the devil is after you. 
Actually, it's not too bad. Most of the games we've completed so far only took a week or two. First week was implementing functionality, the second week was tweaking parts to tighten up gameplay, pacing, etc. You shouldn't have to kill your self. Remember, all art assets and animations are already complete. You just gotta implement.
I do this sort of work for a living, and I can say with confidence that most anything created in a week or two could not be sufficiently tested, tweaked and reviewed for any of the clients I've done work for. That being said, we generally work with medium to very large sized brands, so perhaps we hold ourselves to a different standard.
Our test audience (a group of 1st graders) had no problem figuring out how to play it. Even the ones that didn't read the instructions. Fortunately, most of the games re soft-intro'ed by the classroom instructors, which helps.
Trying this under Jelly Bean (Android v4.1.1) on a Galaxy Nexus was rather difficult. Trying to type the word "this" resulted in the output "thiis". No matter how many times I tried, pressing the "i" key resulted in a double entry, (It almost seemed that the letter was added to the field on both key down and up, rather than just key up). Nifty test, but I could not make it usable. 
The wrapper for the games provides an API that handles all the server-side stuff. That part is done. You only have to worry about making the initial call to servers up the educational content and the call at the end of the game to report on the player's score. We'll provide sample code showing you how to make the API calls and parse the results. Target platforms are iPad (iOS 5+) and modern PC-based browsers.
Pretty nice sample, worked well on the 4S! The second keyboard is killer surprised I managed above 10% accuracy!
Ah, did it completely lock up or was it just impossible to see the text appearing under the keyboard? The set full screen settings from the dynamic canvas creation was meant to remove any top URL bars etc so that text would be viewable - however I didn't consider the possibility of other bars being there. Out of interest what is that Optimal button? 
Or just use a more structured, object oriented framework that is more suitable for building large javascript applications. It will be more maintainable, easier to test, and gets in your way less. http://mootoolsvsjquery.com Edit: I guess this is what happens when you identify flaws in the *cool* framework.
When building larger applications in JavaScript, consider using ExtJS. It has a very rich API, it is easy to use and extend. I've been working with it for the last three years and absolutely love it!
Not sure if the submitter is the owner of the story, but please consider using a different background that's not so repetitive/tiled.
ExtJS is a decent framework, but it is GPL, so you need to either buy it or release your code under the GPL. I ran away from ExtJS after they pulled the nasty bait and switch years ago where they tried to change their license from LGPL to GPL. It was a move of questionable legality and it screwed over a lot of their supporters. I was using the framework in the corporate world at the time and was considering licensing, but after that fiasco and how terribly they handled it I stayed far away from that company and encouraged other people to do the same. EDIT: Their current pricing is insane: http://www.sencha.com/store/extjs/ $329 for ExtJS. EDIT #2: Here' s a great reason not to use ExtJS from their FAQ: &gt; **Can I start my development with a GPLv3 version and then buy a commercial license before I want &gt; to release my application?** &gt; No, the terms of our commercial license do not allow this. You must choose which license you wish to &gt; use (commercial, GPLv3, or OEM) at the beginning of your development lifecycle. This is very strange and runs contrary to the reason most companies with dual licensing do it. It also means that if you are an open source user you won't be able to get a commercial license for your project at a future date. I have trouble wrapping my head around why they would want to prevent a sale. 
Thanks Tattoo__, actually getting results and your feedback about the survey makes it all feel worthwhile. Will no doubt have a slight bounce in my walk to and from the kettle for the rest of the day. 
I just posted [this stack question about a scalability problem with most Javascript architectures/frameworks](http://stackoverflow.com/questions/11425328/class-based-frameworks-in-javascript-cause-browser-to-hang#comment15073528_11425328). While I agree with your premise, jQuery is about the only JS framework I can find that does not have the frailty I am finding with Backbone, EXT and others. 
That's because jQuery is not a framework.
Awesome! I missed that sloth.js will use native generators/iterators in Firefox. That's cool!
It depends on what is meant by "framework," but I understand what you mean I think. It's not MVC and doesn't have a built-in templating engine. Is there some other aspect that makes it "not a framework"?
I prefer a physical keyboard. The screen keyboards drive me crazy. Completed your test on my BB Torch.
It has nothing to do with MVC or template engines. A framework is a structured environment which dictates the way a developer organizes their code. Frameworks provide abstraction and foundation libraries which you use to build your application upon. They dictate where your classes go, how they are named, and how they are invoked. Frameworks are often composed of multiple distinct libraries which serve individual purposes but cohesively work together. ExtJS and Sencha Touch are frameworks because they dictate how classes are made and how your objects are organized. Prototype.js and MooTools are frameworks because they provide class structures and abstraction of common data types. Backbone is a framework because it dictates data models. - jQuery does not dictate code structure (with the exception of jQuery Plugins). - jQuery does not facilitate the creation of objects (it barely provides helper tools for working with arrays and callback functions). - jQuery doesn't care anything about your code. - jQuery is only a single library for a single purpose: DOM traversal and manipulation. AJAX is added on as an aside. jQuery is a library.
&gt; There is no question about the enormous positive impact jQuery has had on front end web development. Wrong. The library itself has had an enormously negative impact on the front-end community. It now allows Web designers and developers alike to pretend that they know anything about the DOM API. &gt; It removes all the pain of the terrible DOM API Subjective. Perhaps if one were to study the DOM API, one would then conclude that implementation is the problem, not the API itself. &gt; ...and provides utility functions for just about everything small applications need. Therein lies the problem. The “team” is finally realising the utter stupidity of requiring hundreds of abstractions. This is where Zepto stole some of its user base (not that it's any better). &gt; But when your application starts to grow, you need to structure your code in a more organized way to make sure things are testable, maintainable, and that features are discoverable to both new members of your team and your future self, who may not be able to discern the business logic of your application from looking at a slew of selectors and anonymous function callbacks. Which is one of many reasons why one should eschew jQuery for hand-written code, or an API built with some degree of sanity. &gt; Although jQuery has many facilities, its main purpose is as an abstraction layer to create a single, developer-friendly API that hides the ugliness Note how the DOM isn't mentioned here. &gt; ...of bad APIs There it is again. Is JavaScript a poor language because browsers implement it inconsistently? Of course not. &gt; ...and browser implementation quirks. Now you're catching on. &gt; Because most of its methods involve selecting A needless abstraction for novices. &gt; ...traversing, and manipulating DOM elements Which should be the heart of the API, but isn't. &gt; the basic unit in jQuery is the selector. Thereby proving that the API's focus is not the DOM, but CSS emulation. &gt; While this has the benefit of making DOM interaction simple and easy for beginners to learn Subjective once again. Try prying a novice developer off of selectors and see how much they've really “learned”; this applies to the entire API, really. &gt; it has the unfortunate side effect of making people think that anything but very trivial amounts of JavaScript should be organized around jQuery selectors. Again, because the API does not draw a line between the DOM and JavaScript, novices are left confused. Some even refer to jQuery as a programming language. &gt; In a very simple application or basic web page, e.g. a WordPress blog, tiny snippets of jQuery or a plugin dropped into the page may be appropriate. 250kB is not tiny. WordPress is already a hog. No need to complicate matters. &gt; But if you're building something with an amount of JavaScript even slightly larger than that, things will get difficult to maintain quickly. ExtJS and Dojo come to mind. &gt; Think of jQuery simply as an abstraction of the DOM API Again, the focus is not the DOM API. This is a misleading assertion. &gt; ...and a way to think about Internet Explorer less often. Funny, because developers using jQuery seem to think more often about IE than those who don't need it. &gt; The problem is that jQuery tends to make the target of an action the focus and not the action itself. The problem is that jQuery is obsessed with setting the `this` value. Ever wonder why it will never work beyond IE 6? Take a look at how many times `Function.prototype.call` (introduced in JScript 5.5; available for IE 6+) is used. &gt; `window.FOO = {` Do not augment host objects. Use an explicit global variable instead. For example, code such as: `var global = this;` in the global scope. &gt; For even better object-oriented abstractions, consider using a library like Backbone Which ties itself to jQuery unnecessarily.
It will never really fit the bill though. For any serious web application, the app framework should be on both sides. If you're doing MVC, for example, it is really helpful to have very similar abstractions of your models on both ends so that you can always deal with them in a consistent way. This is the kind of thing that jQuery and mootools do not provide. (Don't get me wrong, I think mootools is great.)
How? It has a proper OO model with binding from the start. 
I love your response and thank you so much for providing it. My only concern is that it sounds like you are saying that all frameworks are class-based. Is it not possible to have a functional framework?
Samsung Galaxy Blaze (Android Gingerbread): keys frequently duplicate, meaning when I want to type "e", I get "ee"
Which would imply to me that you spend more time reading marketing than code. Ever wonder why Prototype is dead? The code stunk.
&gt; Is it not possible to have a functional framework? It is possible to have functional micro-frameworks, especially in server-side JS where everything is asynchronous. However, as JavaScript is inherently an OOP language, you would be doing yourself a disservice to completely ignore that. You wont find many functional javascript frameworks because the people likely to be building a framework in JS are going to be taking advantage of that quality of JS.
You debate by insulting people. I'm not feeding anymore.
I've read so many JS tutorials my head is spinning, yet none of them break it down in a way I seem to be able to understand. That is, I think I understand what's happening with the basic color-changing script I'm trying, but the script doesn't work--it's driving me a little crazy. Here's a link to the code if you're interested in taking a look: http://jsfiddle.net/57kK3/2/ Thanks!
Another stupid question, but how do you get to see Firebug working through the script? I know the very basics of looking up DOM elements with Firebug, but that's about it....this is day 3 of my adventures in JavaScript, and I've been adventuring all by my lonesome.
A little off topic but I seriously dislike looking at that website, no matter what is written.
http://jsfiddle.net/57kK3/4/ So..I basically made 'change' a global variable by leaving off the 'var' keyword (not recommended, as you'll load up the global namespace and likely have conflicts at some point..but that's another thread altogether :)). For some odd reason, jsFiddle did not want to see your "changeColor" function, even though it (seemed) to be in the global context/namespace. Hence the variable of "change". Once that was done, I updated how you got the color. You got the element, which was good, but you needed to access the selected element's value. I actually had to google how you did that :). I've relied on jQuery too much. Almost wrapped the change function in an anonymous function to use it with jQuery, but thought that may make it more complicated than it needed to be. Hope this helps - let me know if you have any questions. Also, I hear you on JS tutorials. I am reading "Professional JavaScript For Web Developers 3rd Ed." By Nicolas Zakas and it is proving to be awesome. He explains, in depth, how JavaScript works - rather than just giving tutorials on how to build X, Y, or Z. Happy coding :)
Pretty great! I tested on a iPhone 3G and feedback was slow to the point of non-existence. The wrong keys were almost always trailing, or the wrong key highlighted. However, I could reliably jam through a sentence the same way I could on an iphone keyboard, and I generally got it correct. On the qwerty keyboard on iPhone, I felt that the space bar was awkward in the safari browser due to it's proximity to the Safari option button. I kept accidentally hitting that option button, and having the pop up come up. I could not use the Pearl keyboard, maybe because the feedback was so off, but double tapping keys to get to the second character did not work consistently at all and I could not get a full word typed out. 
I have one of these available to me: http://www.elotouch.com/Products/LCDs/1515L/default.asp Do you want one of those in your study, or are you only aiming for phones
Hey joeframbach, the thesis revolves around elderly input on mobile devices so the data is more focused on that. However it would be great if you ran a test on it, just to highlight the versatility of the developed keyboard. Many thanks!
Brilliant crilen, good to have another phone model testing it. Thanks for running it.
Hey Xlator you're one of the first I think to say you didn't find the Pearl layout a nightmare! I think most people that have tested it so far have had little experience of it or never heard of it. I'd been looking at it for quite some before I felt I could use it without having to think. Thanks for the thorough feedback. I'll see about cleaning up the code a little more and removing the little hacks I did near the end to get heatmaps working and so on and getting it up on Github as suggested earlier! Thank you for both your interest and participation. 
Thanks zoby, been getting a lot of responses about that Pearl/Compact Qwerty. Cheers for taking the time to do it.
Np. Some of my entries ended early when I accidentally hit the RET by accident, and also I hit shift nearly every time I wanted to press A.
It looks like you just cherry picked some quotes from the article, looking for small missteps the author had made in writing it, and to nitpick the things you don't like about jQuery.
Wow! I actually understand most of what you did there--thanks! That being said, I do have many questions, and if you feel like answering any/all of them you will have even more of my undying gratitude, for whatever that's worth... 1) can you parse this line for me: selColor.options[selColor.selectedIndex].value; I think the first part (selColor) refers to the variable, not the html object (right?), and the last part (value) simply refers to the value of that variable (which we got above through the getElementById tag/process), but can you break down the "options[selColor.selectedIndex] for me? 2) Why does the "change" variable in the html code still have the parentheses (i.e. in the line: "&lt;select id ="selColor" onchange=change()&gt;")? Does every JS reference in the html need to contain these, or is it because the value of the change variable is a function? I had thought the parentheses were only used to denote functions.... 3) I still can't get this to work as an html file on firefox or chrome. I've used the other necessary tags, marking the script off in the header (I also tried storing the js in another file and linking in the header), but nada. Thoughts?
&gt; However, as JavaScript is inherently an OOP language, you would be doing yourself a disservice to completely ignore that. I don't believe that functional programming implies the exclusion of every OOP principle. It might mean that objects don't have private properties though.
Holy Jesus. After copy-pasting your pastebin file and checking it line by line against my file, I think I discovered the major source of my problem all along--when I copied from the eBook I was learning from, my text editor put in "smart quotes" instead of straight quotes, causing problems from the ids to the value options in my html code. I feel very small right now, but lesson well learned. Thank you very much for your time and assistance--I learned a bunch. The introduction to the select box (still a lot to figure out there) was awesome. Now onto the script I actually need to write--I'm sure I'll be back here in another day or two!
Yes, it is a scope probleme. When you write: (function () { ... }) you do create a scope. In your code, variables such as buildInterface are declared inside, so they can NOT be accessed from outside. Anyway, that should work: [http://pastie.org/4239995](http://pastie.org/4239995) Did I help you ?
&gt; so perhaps we hold ourselves to a different standard. If you look at the code quality and bugs like the bottom half of the progress bar disappearing when you reach ~50% (at least, in the latest version of chrome), I'd say that's a fair assessment.
THanks--got this part figured out, but your perspective shed some new light on a few areas. I'm already running into more problems with the script I actually need to write--I'm going to try tackling it myself for a few more hours, but I'll probably be posting again later tonight. Thanks again for the assistance!
I've actually quoted most of the article in the post. Some sections, such as most of the code, were omitted to prevent the post from becoming too long.
I get that a lot. However, I am a separate human being. I just tend to agree with his sane, common-sense approach to Web development.
Ipad 2 running Chrome. It missed a lot of my keystrokes when i was typing fast with the qwerty kb.
There's no need to be upset 🐵
Works for me, bro... what browser are you testing that in?
are you calling it with f1 or f1() you need the parentheses to have the function execute
downvote. next time go to SO and start by explaining your problem.
you SHUT YOUR MOUTH mister man!
If you want a very jQuery-oriented framework suitable for very large apps I highly recommend http://www.javascriptmvc.com
Seriously. I'm also red-green colorblind and I just spent about a minute live-editing the styles on that page so I could read it. Better be worth it... EDIT: Totally not worth it. 1. Who the hell thinks the jQuery is an architecture? 2. Using namespaces and the model pattern isn't an architecture, it's a technical design decision EDIT 2: module* pattern
Works fine. call it like this: f1() 
Worked well on Opera Mobile 12 on my Nexus S... but then I accidentally hit page refresh halfway through. :(
Am I the only one who had an issue using it? I've got a Droid Incredible 2, which is decently powerful, but there was so much lag with the animations that it made it almost unusable. If I slowed my typing speed down, I could just barely get out a readable message. If you are able to look through the results, mine is the one that has messages like: "baaattmmann werf aa cvaapp" edit: I like the idea, and I'm impressed, but wanted to give you my experience. Also, are you using SVG? might make the lines cleaner.
The [Zap Colors bookmarklet on this page](https://www.squarefree.com/bookmarklets/zap.html) has been my constant browsing companion for the last 7 or 8 years. I'm not colorblind at all, but it greatly reduces the pain of reading on badly designed websites with a single click. ETA: The website hasn't been updated in a long time, but I haven't found a browser yet where this doesn't work. Ignore the compatibility chart.
&gt; However, as JavaScript is inherently an OOP language Not sure i agree with you there. Its JS's functional nature (ie passing functions around as variables) that allows us to simulate OOP concepts like methods within objects.
You're right, [this](http://en.wikipedia.org/wiki/Architecture) is architecture.
I think to support your point ,say *why* the code was bad is better than just "the code is bad". I never used prototype myself, I do not claim any expertise. A well thought out response as to why prototype had problems would be useful to me as a casual reader here - if only as a place to start. So for my sake, care to elaborate? 
 &gt;sentence fragment Snotty Reponse &gt; dependent clause Snide remark &gt;Herp herp herp Derp derp derp. **Okay, this is not a format condusive to actually communicating Ideas, and usually leads to strawmen:** Just type what you need to type as a cohesive paragraph.
The function just defines code that is to be run at some later time. If you want the code in the function to run, you need to call it later on from outside of the function, preferably below it. // define the function here function f1 () { ... } // and then invoke (call, run, or execute) the function here f1(); 
thanks for sharing, didn't know this one
Thanks for taking the time to try it netinept. During dev I mainy tested on an iPhone 4gs and my desktop so wasnt aware just how intense the image overlay press effects had made it. I'll see if I can repeat the effect but with less drain for when I setup my next layout. I went with canvas for it though I'm guessing SVG would be viable, not sure on how cross platform supported it is though? I've only seen one SVG project and I remember browser issues between Firefox and Chrome. Many thanks for takin the time to give your experience!
Thanks miketaylr, can list that as another problem that occurred! Thanks for taking the time to trying it out though.
I'm a strong believer in progressive enhancement, even though it may not be as popular nowadays. People without JavaScript enabled should still be able to use your application at least at a minimum level. The better thing to do, imo, is to render the page server-side on refresh. pushState should be used to enhance your application, but not to have all routing redirected to it.
what features does it offer over underscore? besides the speed comparison. is there a list of the functions it provides?
This should be the top comment.
Been looking at [this](http://www.schillmania.com/projects/soundmanager2/), but haven't tried it yet.
No problemo. Hit me up if you want, and I'll be happy to give rev.2 a go. I only threw out SVG as an idea, as in, looking at vector-based graphics... I don't know how your current one is set up, but it just looked "ok," but not as crisp as it might have been, I think.
thanks, beginners mistake
thanks, beginners mistake 
thanks, beginners mistake 
&gt; [Insert javascript library framework here] is not an architecture **FTFY**
Sorry, I neglected to put up [some documentation](http://rfw.github.com/sloth.js/). sloth.js, in fact, only provides a subset of what Underscore does, but unlike Underscore, sloth.js is designed mainly for working on lazy and/or infinite sequences ­— for instance, this function can be repeatedly invoked to yield an infinite sequence of numbers, counting upwards: var makeCounter = function(n) { return function() { return n++; } }; var counter = makeCounter(0); Using sloth.js, it's possible to lazily apply a function to only a subset of it without having to have the entire sequence up front: sloth.ify(counter) .map(function(x) { return x + 1; }) .filter(function(x) { return x % 5 == 0; }) .take(5) .force(); ... and that's what makes it super neat!
This actually looks mighty useful. I hadn't really heard of any backbone boilerplates, but I'd been looking around a lot for some good examples of backbone application structure that I can imitate in my own apps. This is a great example, so thank you :)
I prefer AMD-style, dojo comes with a nice implementation. 
[marionette](https://github.com/derickbailey/backbone.marionette)?
Just tried it, and I'm impressed. A couple of thoughts: - Some kind of caret to indicate position would be nice, it took me a while to see whether I had successfully typed a space or not. - On the space button: I had some problems hitting space, since the button sits directly over the iphones share button, which would get triggered a lot during typing, although I dont know what you can do about that. - What was missing for me was the iphones sticky-shift-key-toggle mechanism. - Some way of indicating the button timeout for the pearl doublepress functionality, maybe a timed fade to the default color from the active one or something like that. The timeout length felt natural though, and didn't really pose a problem.
I follow this too. It's not even a case of catering to those without JavaScript enabled, it's ensuring that even if your script breaks your site performs it's fundamental task of delivering content. Lest we forget the Gawker outages of 2011.
I don't think it was intended to come off that way. The sentiment rmurphey is trying to convey is: 1. there's a shitload of JavaScript misinformation floating around, much of it from like 10 goddamn years ago when everything was different; 2. when misinformation spreads, it's hard to correct, and further taxes the brave souls who hang out in IRC and on StackOverflow giving JS help; thus 3. it's important to get this stuff right. I don't think any of that necessarily gives off an "I'm smarter than you" vibe. And, as rmurphey explains in comments, she wouldn't have bothered if this were just on someone's blog, but when a tech publication puts out an article it's fair to assume they're claiming authority on the topic. The message is not just "here is what the article got wrong, happy to help"; it's also "by the way, articles like these need more rigor before they're published." The author of the article seems like he's been quite gracious in making changes, but I think most of rmurphey's frustration is directed at .net magazine for not giving the author the support he needs (i.e. tech review).
And I think she pointed those out, too.
TBH, the width doesn't bother me. I understand the issue some people have with scanning back and forth on long lines, but I see longer lines as less scanning and therefore easier to read. That and I feel artificially limited pages actually hurt readability because you now have to scroll to see more information. Also, if you want shorter line lengths, it's as easy as shrinking your browser. The background is a bit more challenging.
And heck, if you want more familiar scoping, CoffeeScript exists (no block scoping, but saner function scoping)
If you pretend that you have block scoping, you'll just shoot yourself in the foot. If you manage to not shoot yourself in the foot, you'll shoot others in the foot. Yes, it makes JavaScript look like a slightly better language. However, it isn't a slightly better language. It's still ECMAScript &lt; 6.0. &gt;I like to declare one use vars inside the block of usage in order to determine if that var can be factored out (9/10 times it can.) JSLint tells you if there are any unused vars. It does this faster than a human, it doesn't ask for a paycheck, and it also does this with unmatched precision. You can't compete with that; no matter which metric you choose. &gt;What I hate seeing is one time use variables all declared at the top of the scope with no thought into their need or uses. There is a positive effect though. People are encouraged to write smaller functions which focus on one specific clearly-defined task. So, even without unit testing in place, you usually end up with small focused functions.
Chrome 20, Windows 7 x64: Non-cached was marginally faster.
The point isn't to pretend to have block scoping, it's for better readability.
&gt; Yes, it makes JavaScript look like a slightly better language. However, it isn't a slightly better language. It's still ECMAScript &lt; 6.0. Indentation, naming conventions, camelCase, UPPER_CASE_FOR_CONSTANTS (even if they aren't really constant), and plenty of other conventions have no effect on JS, and make the language no better. Does that mean we should stop using any of those?
I'm with you on this. I like to declare things near their first assignment because it means I don't have to look as far back to determine whether a statement is an assignment or a reassignment. Further, it declares intent. I try to limit the number of vars someone reading my code needs to keep in their head. If a var is declared half way through the method call, that means the reader didn't have to think about it for half the method. If it's declared in the block, I don't intend for the reader to worry about it after the block. If for some reason the variable is used outside of the block, that should seem fishy and the reader should investigate and probably clean up the code. It's easier to lose track of exactly what's declared / initialized when that information is far away from where it's being used. It's much harder to, for instance, leak a global variable when you're expecting to see `var` very near the first assignment to a variable. Wrong code should look wrong.
Unfortunately, many people seem to be seeing my review as some sort of ivory tower pontification; it really isn't. Technical depth requires pedantry. If I were to generalise the review into paragraph form, important pieces would be omitted. What ever happened to appreciation for constructive criticism?
You always have to decide at what level to write your code for. Personally, I choose to write my code at a level where people understand that javascript doesn't have block scope. I think this provides much easier to read code, as your variables are then declared where you would expect them logically. This also lets me immediately see if this is an initialization of a variable or setting an already known variable. I guess this also goes with my practice of heavily disliking undefined variables. I prefer to almost always initialize a variable when I declare it, which wouldn't always be possible in a top of function declaration.
&gt; Using constructs which do not reflect reality is something entirely different. 'const' isn't supported by IE, so instead I do: var WIDTH = 100; ... and act like it's a constant. Since it doesn't reflect reality, is this also a bad? Sometimes I create objects, like colours and locations, and pretend they are immutable by never changing their contents. Should I not do this since it doesn't reflect reality?
&gt;Unfortunately, Actually. &gt;many people Could be nonpeople. &gt;seem to be seeing unless they have screenreaders! zing! &gt;my review Reddit post &gt;as some sort of ivory tower pontification; pon·tif·i·cate (pn-tf-kt, -kt) n. The office or term of office of a pontiff. intr.v. (-kt) pon·tif·i·cat·ed, pon·tif·i·cat·ing, pon·tif·i·cates 1. To express opinions or judgments in a dogmatic way. 2. To administer the office of a pontiff &gt;it really isn't. Yes it is &gt;Technical depth This is the subject of the sentence. &gt;requires pedantry. pedantry [ˈpɛdəntrɪ] n pl -ries the display of useless knowledge or minute observance of petty rules or details &gt;If A common control statement &gt;I Or anyone &gt;were as in werewolf &gt;to generalise who said you have to generalize &gt;the review you mean reddit post. &gt;into paragraph form, or at least somethign cohesive &gt;important pieces would be omitted. You are incorrect. Rather, you'd stop obcuring meaning and sounding like a pedant, whilst arguing against your own straw-man of an argument in some pathetic circle-jerk display of ivory tower armchair internet self pleasure. &gt;What ever happened to Snide remark &gt;appreciation for Herp. Derp.. &gt;constructive criticism? I like constructive criticism. Just organize your damn thoughts and don't argue against non-points! For example I am not criticing the fact you are offering constructive criticism.. I'm arguing the format of it. The format makes what you have to say sound, angry, pointless, drawn out and hard to read. 
&gt;You always have to decide at what level to write your code for. I don't. I always try to write clean code which reflects the way it actually works as accurately as possible. You won't get any bonus points for writing "clever" code. It don't do anything tricky. My code should look as simple as the problems it tries to solve. &gt;where you would expect them logically I expect them at the very top of the innermost function, because that's where they effectively are. This is how it works. This is reality. My code shouldn't obfuscate this fact. Yes, putting them wherever I want makes typing a bit more convenient, but this isn't really much of a bottleneck. Even in a whole year you aren't writing all that much code. This isn't something you should heavily optimize.
I am just informing you of my opinion, I loved math blaster as a kid and some other games where I learned. If you can make a mystery game with math where you have to solve math problems to solve the mystery or something that would be freakkin cool.
&gt;`var WIDTH = 100;` That's a convention. You capitalize everything to signal other humans that this should be treated like a constant. That's a very different thing. It's like a comment which explains some of your intentions.
Thank you good sir, Sink.js is exactly what I was looking for :)
I hear ya, man. Unfortunately, the educational content comes down to us from on high. Us lowly developers can only implement. Edit: I accidentally a word.
Are you using the jsperf above? That's not what I'm seeing in the table, though I do see it for version 21.
I think I'll need to try this substance.io service in general, actually.
Yes.
yea... *sed* and 10 other 1 lines could fix this pretty quick.
You're both right. Dereck Bailey's 2-part article explains why; Part 2 contains a brief section on how to serve your backbone app using Rails [http://lostechies.com/derickbailey/2011/09/26/seo-and-accessibility-with-html5-pushstate-part-1-introducing-pushstate/](http://lostechies.com/derickbailey/2011/09/26/seo-and-accessibility-with-html5-pushstate-part-1-introducing-pushstate/)
I've never seen a javascript introduction that claimed that putting a variable in all uppercase would force it to be constant. The many that recommend putting constants in uppercase specifically note that it is just a convention. Therefore, in javascript, all uppercase does not indicate a language-enforced constant, but rather a convention-enforced constant. This is true even of languages that have real constants - most of the time they allow lowercase constants, but the convention is to put them in uppercase for the sole reason that it improves readability.
I love the bible quote. Finishes it off perfectly
Thanks for the link. Not what I'm looking for, as I have seen the ToDo MVC project before. It is what actually led me to Backbone. :) Thanks!
socket.io and be done with it.
Unfortunately neither of these are the one I found. They do warrant more investigation though; I like the sound of the second one in particular. I'll certainly have a gander. Thanks Edit: That first one ended up being the Bocoup one I found. :)
Really? I think that's completely fair. I've used a lot of jQuery in a couple of projects, but almost everything that I do in Javascript is interacting with jQuery or jQuery plugins. There's a big Javascript ecosystem outside of jQuery and a lot of Javascript functionality that I've never touched. I would not feel comfortable saying that I know Javascript. (That said, the reason I'm here now is that I want to expand my js horizons a bit and I'm thinking about starting a project with knockoutjs, backbonejs, or something similar.)
I don't think he's a troll, he's just fucking insane. EDIT: And/or mentally retarded, no wait that's offensive to retards.
I'm glad I don't have those plug-ins installed on Chrome... It wanted to run Java too! 
Except then you're stuck using dojo.
Can't believe my browser still runs this... Need more updates!
ah :/
Anybody catch his user name? [Yahweh]. I read the bug report and said to myself "good God!" Then I noticed his username. It was oddly appropriate. 
You should cross-post this to [r/web_design](http://reddit.com/r/web_design) and maybe [r/webdev](http://reddit.com/r/webdev). I'm sure they'd appreciate it.
So, ah, his whois data is "public" and with the proper tools I found the domains that he has and have taken a look. they are ALL equally as bad as the others, if not worse. The guy needs to stop tripping.
&gt;If you implement browser prefix properties you should always include the non prefix version, What's the prefix version?
As an aside, I find that this form of argument/discussion on the internet is most prevalent in the "veterans", that is, people who remember fondly the old BBSs and other pre-2000 forums. Makes me wonder if this is cognitive bias or the world really was a worse place back then. Your satire is bang-on, just by the by. /derail
It's that "-moz-" placed in front of the opacity. Apparently years ago he used it and now that prefix has been phased out, which he doesn't think should ever happen, haha. 
&gt;I should add that it wasn't a github page either, though it may have been available through via github. The site also had text talking about how it used R.js "for you" or something along those lines. It had build scripts and everything provided. Bocoup's (really Tim Branyen's) boilerplate does all of this for you. It's really a pretty excellent setup, a bit hard to figure out at first (documentation is lacking, but he's been working on it) but after reading the code it should be pretty self-explanatory. I've been using it for a project and liking it a great deal. Also, you may be thinking of Brunch or Chaplin.
I need him to be a troll.
Not sure if this is a troll or not (web site)
What's Ang... Oh wait... no, I'm sure it's something I don't want to have memories of.
I love seeing sites like that still maintained in 2012, makes me feel like kid again. Stuff used to be so common, every geocities webring had at least one or two sites like this one. Even the favicon is animated, how awesome is that!
If its just one at a time, then just have a standard way of starting (like a main method), and a standard way to stop (such as returning 0 for no error). If you want multiple processes, you could build a simple event based system. You still have a main function, and then it hooks it's self into the events, and they get called later. For example when input is given by the user or piped in. As long as applications play ball, and don't contain any infinite loops, it'll work fine.
This is called co-operative multitasking -- and it generally works terribly.
take a look at the [second link](http://cssdeck.com/t/view/xatdrdxz/10). It's not Geocities anymore. Welcome back to 2012 with canvas. :D
Looks like it breaks out the cookies, sticks them onto the end of a filename and fetches that "image" as a piece of JavaScript. It's a cookie-scraping exploit, basically. You'll want to get rid of that code, and get rid of "/images/house_outdoor-s.jpg" which is probably a JS file.
code example: var x = [1]; x.remove(1);//should 'delete x', currently, x = [] Array.prototype.remove = function(value){ this.splice(this.indexOf(value),1); if(this.length == 0) //delete item referenced by 'this'; }
You could try and use workers for parallel processes. There is a limit around 16 workers per domain, though.
[JSBeautifier](http://jsbeautifier.org/) should help make it readable.
I simply want "x.remove(val)" to do the same as "x.remove(val); delete x;".. so if you wish to be technical, i wish to delete the reference "x", from inside the remove method. Then the garbage collector can do its thing. So i guess what i need is a way of getting the variable name sent to a method. ??
What he's saying is that `delete x;` doesn't do anything. The closest thing you can really do is set `x` to `undefined`.
great library, any change it will support touch events?
Well yes, that is essentially what 'delete x' *does*.. (and since nothing else refers to the value x is holding, the gc will delete that in memory). I would happily set x to undefined, but the same problem remains that i need to get 'x' and not its value. PS: how do you do the inline code?
Potentially. Touch events are kind of a different beast, it may make more sense to make Fingers.js or something.
He's not a someone? Does that make him a nobody?
Your best bet is something like: Array.prototype.remove = function(value) { var pos = this.indexOf(value); if (pos === -1) { return this; } this.splice(pos, 1); if (this.length === 0) { return undefined; } return this; }; var x = [1]; x = x.remove(1); alert(x === undefined); P.S.: To inline code, write: \`code here` (backticks around code)
Yeah, this is an awesome site.
I feel stupid asking, but, is there a demo? I don't follow what's happening here.
Aha.. got it i think. Thanks! So, basically you just need to create a name-space (if that is the correct term?).. which in my case i usually already have.. then i could do: Object.prototype.removeFrom = function(key, val){ var pos = this[key].indexOf(val); if(pos !== -1) this[key].splice(pos, 1); if(this[key].length === 0) delete this[key]; } x.removeFrom(3, 4); This seems pretty good code to me? at least if i put in some type checking etc. e: Array -&gt; Object
I really like this idea. I'm very interested in what you come up with!
Yeah, that works.
Hey, sorry about that. I thought I followed up with everyone. Shoot me an email at benjamin.n.blake@gmail.com. Easier to keep track of. Also, if you have a CV/rez send that too. Thanks!
Bear in mind that, while the interpreter doesn't care about these things, it subtly improves dev happiness and bug quality if code style is standardized (especially during maintenance/bugfix time). Because I'm working at a Microsoft shop, we usually rely on the IDE auto-styling code on a period basis, which allows me to write using my preferred style (`statement { \n code \n }`) but commit good-looking code. It helps that my team lead is more concerned about using the same design patterns across the project, than about niggly stylistic details. These two factors together work nicely. tl;dr: yeah, it's probably a good idea to run a prettifier during commit.
I'm sorry, but you have no idea what delete actually does. Use this code as an example: (function(){ 'use strict'; var x = { y : 1 }; delete x.y; delete x; }()); One does not simply delete x.
&gt; while the interpreter doesn't care about these things, it subtly improves dev happiness and bug quality if code style is standardized And that is an explicit goal of mine, relieve the devs of this burden. If they decide they don't like the style, they can alter it locally (which of course would be 'fixed' once committed). &gt; Because I'm working at a Microsoft shop, we usually rely on the IDE auto-styling code Yeah, in the past we tried the IDE route with PHP, but the problem there is that opinions on IDE's are almost as varied as they are about coding standards. Couple that with the fact that there's no way to apply formatting standards in a universal manner, and the idea falls flat. Not only would we have to require everyone with a different IDE to manually setup their rules, but not all features are supported by all IDE's. Additionally, it's just another step that new devs have to go through when setting up their environment. Seeing as you're a MS shop, this is probably not as big an issue though, since I'm guessing you're almost exclusively VS.
Yep, I only see VS2010 or Sublime Text 2 here. Makes it much easier to maintain code standards. Occasionally somebody'll bust open NetBeans or something to handle one of the PHP/Java plugins for interfacing with other systems. Since everybody is on different IDEs, then doing beautification at the commit step seems the most logical place because it's a common point that none of the developers has to worry about.
UT?
Wish I could bill MS for all the time i wasted getting stuff to work in IE over the years, though. Then again, we bill that time to our clients, so doesn't really matter.
Perhaps i don't, but it seems to work to that effect without strict mode.
It's the right-clicking bit that sneaked past me. Thanks for your help.
You would do it by scheduling functions via setTimeout(). Windows way would be a better metaphor. DOS way was to assume it was always ok for a process to soak up 100% of the CPU whether or not it was doing anything, which would be very unpleasant in a web browser. You want something event-driven.
That's deep, man. 
Unit Testing.
Oh, yes. Helpful for tracking down niggly syntax and scoping errors 
I wish.
Sorry, it was very late when I posted. The forum is at http://bestcafes.com.au/forum -as mentioned you can't see chat unless you're logged in. I'll get code once I'm back at the computer.
 var f = navigator.userAgent; var a = false; if (f.indexOf("Firefox") != -1 || f.indexOf("MSIE") != -1) { a = true } if (a !== true) { return } The fail is strong in this one.
also change passwords to something more secure on the server. This kind of stuff is usually done by bots that brute force servers, get in, then go through files adding this stuff to anything with a .html, .php, etc.
Not in all browsers, correct behaviour according to ecmascript docs is that delete x return true and do nothing http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf 1. Evaluate UnaryExpression. 2. If Type(Result(1)) is not Reference, return true. 3. Call GetBase(Result(1)). 4. Call GetPropertyName(Result(1)). 5. Call the [[Delete]] method on Result(3), providing Result(4) as the property name to delete. 6. Return Result(5). You shouldn't rely on undocumented behaviour so you shouldn't use delete x.
Don't start a name with a Capital unless it's a constructor.
So this is pretty bad javascript practice. There is only one Object.prototype and its applies to all javascript objects. Strings, Arrays, Document, etc etc etc. By doing this you are attaching a function to every single object that is created from that point forward. That makes children cry. instead try using a closure to create a javascript object var MyCollection = function(){ var self = this;' this.removeFrom = function(key, val){ if(this[key]){ var pos = this[key] ? this[key].indexOf(val) : -1; if(pos !== -1) this[key].splice(pos, 1); if(this[key].length === 0) delete this[key]; } } return this; } myCollection = new MyCollection(); myCollection[1] = [1,2,3] myCollection.removeFrom(1,1) &gt;&gt;myCollection[1] &gt;&gt;[2, 3] 
You're on the right track with your solution (#megamenu_first and #megamenu_second). I'd look at whether your elements are correctly defined (are you certain about the identifiers). Also... you don't need these in two separate script blocks... both can fit in the first $(document).ready(...) invocation.
That's good to hear. I do have it in line to check out.
Really like it. Mind telling us more about what you are doing? I see you are using the webkitaudiocontext, but, well... explain everything! :0)
Which part the "method to call"? And how might I change it? Sorry, I'm pretty ignorant in regards to javascript. Me messing with the code is like a monkey with a typewriter. Eventually something happens if I edit/delete/replace different things enough times, but I really don't know what is happening... 
Try starting here: http://www.html5rocks.com/en/tutorials/webaudio/intro/
Compare YUI to jQuery UI, then you will learn it's more popular. YUI is a "widget" framework but jQuery is a lower level framework that is more flexible for custom build widgets. 
I messed with the source and made it sound like a demon. When I have more time I want to tweak it to sound dissonant. 
If you are locked into using YUI2 like we are in our project you can use something like this. var SELECT = YAHOO.util.Selector var DOM = YAHOO.util.Dom var hiddenStuff = SELECT.query('.hidden')
I'm going to respectfully disagree with you, but to your credit that is a common misconception. To explain, YUI at its bare-bones core, is just a no-frills JavaScript library. You really don't get much by loading in yui.js. But once you have the seed, it opens up a lot of possibilities because it comes with a module loader, and modules are where all of YUI's functionality is bundled up in (300+ core modules) This modular architecture has made it extremely flexible and allows it to run inside of any JavaScript engine on various devices. For example, when node.js came out, it was relatively simple to get YUI running inside of Node without any issues. As of 3.5.0 (released in February), Node.js is a first-class environment for YUI, meaning it is just as much supported &amp; tested as the various Web browsers are. This is important because it's one of Yahoo's major development platforms going forward (see: [Mojito](http://developer.yahoo.com/cocktails/mojito/)). So having said that, it's about as low-level as you can get with JavaScript libraries. Where you get into the higher-level widget-land is when you start loading in the UI components. All YUI widgets are developed with customizing &amp; flexibility in mind. This is because our primary developers (Yahoos) rarely use them straight out of the box, and product requirements necessitate customization. If you take a look at YUI's [Rich Text Editor](http://yuilibrary.com/yui/docs/editor/), it require a bit of work in comparison to some jQuery plugins to get it exactly as you like. But, you get the piece of mind knowing that this is the exact same editor Y! Mail is using, and it makes use of all the other goodies in YUI (widgets, events, attributes, etc.). **TLDR**: At first-glance, YUI would appear to be a high-level "widget" framework, but widgets are only a small portion of the modules. YUI is about as low-level as you can get, but also as high-level as you want to make it. It's all about customization.
(Note: I work on YUI full-time at Yahoo) My personal opinion is that I think YUI is popular, but that's of course a relative term. Popular in comparison to jQuery? No. The developer base for jQuery is enormous. Nothing is "popular" in comparison to jQuery. But I do think YUI is popular enough that it warrants a mention as one of the top-5 used JS libraries. Accurate statistics are very hard to collect, so sometimes you'll see it as the #2 or #3 library, other times you'll see it as the #7 or #8 library. Some stats: - The yui3 repo has 1,839 watchers on Github - ~80 contributors, and that doesn't include some interal (Y!) contributions that may not be tracked by Github. It's probably over 100. [1] - 200+ pull requests on Github [2] - The yuilibrary YouTube channel has 2,408 subscribers and 336,472 views in the last 10 months since we launched the channel. [3] - 475 hosted "Gallery" modules (the equivelent of jQuery plugins) - YUIConf, our yearly conference typically draws 200-300 developers. - #yui on Freenode typically has ~100-200 users in the channel. - If you use the Twitter accounts as a means of measuring popularity (not a very accurate way) @jquery - 74,979 @mootools - 6,535 @yuilibrary - 5,764 @dojo - 4,634 @prototypejs - 1,563 @scriptaculous - 899 So, I'll let you decide if those statistics make it popular or not. &gt; How much usage does it get outside of Yahoo/Flickr? We don't track who is using it where, so we can only go off of those who file bugs, issue pull requests, and attend YUIConf. Some notables include NFL.com, SmugMug, Mint.com, Wells Fargo, duckduckgo.com, Canonical, and there are quite a few others. Some companies like it because it offers a structured methodology to developing large scale web applications. But we also have quite a few casual developers &amp; consultants that just like the modular nature and appreciate the knowledgable &amp; active community. &gt; but I feel like I've NEVER come across anyone who uses YUI Come to YUIConf and you'll meet tons of us. :) We also hang out all day in #yui if you wanted to learn more about the community and ways to get involved. [1][ https://github.com/yui/yui3/graphs/contributors]( https://github.com/yui/yui3/graphs/contributors) [2] [https://github.com/yui/yui3/pulls](https://github.com/yui/yui3/pulls) [3] [http://www.youtube.com/user/yuilibrary](http://www.youtube.com/user/yuilibrary) [4] [http://yuilibrary.com/gallery/show](http://yuilibrary.com/gallery/show) 
A simple tutorial on what you are doing here? It is amazing!
Actually sounds really cool, would love to program a song with this using setTimeouts or something
Thanks! I'll write something up tomorrow!