C/C++ via Emscripten
Fair point. Depending on your build tool, you may also find the WebPack ProvidePlugin useful.
If you want semicolons everywhere have your IDE add them. If you don't, have your IDE remove them.
[the discussion where relevant in ~~2013~~ (Sorry 2012)](https://github.com/twbs/bootstrap/issues/3057) i don't think this in something we should tackle as a community but let it be up to the team that needs to work with it. i use semicolons at work, not because i prefer it that way. [but because the coding style says to.](http://i.imgur.com/2Ny6lxa.jpg) now i read it faster with out semicolons and i like being lazy so personal code don't. now bringing a topic from 2011/2012 back up after virtually all tools now agree on implementing ASI, and bringing no new examples or new points to the discussion feels moot. whats next? "let's stop using eval"? 
The real reason you should be using semicolons comes from Brandon Eich, the creator of Javascript... &gt; ASI is (formally speaking) a syntactic error correction procedure. If you start to code as if it were a universal significant-newline rule, you will get into trouble. ASI is "Automatic Semicolon Insertion" There you have it. The creator of Javascript himself has said that the omission of semicolons is an error, and that the only reason you're able to do that is the language itself is able to recover from errors. Source: https://brendaneich.com/2012/04/the-infernal-semicolon/
Not every project needs a linter. Sometimes you are coding a simple function in the console, sometimes you're writing a bookmarlet, sometimes it just doesn't make sense to use a linter. You should know the language and where the semicolons are really needed, instead of depending on a linter. 
It's almost as if reddit were comprised of *individuals* with their own opinions.
I used to feel this way, before I started linting all my code as I write it. To each their own.
&gt; instead of depending on a linter. Almost all used editors support plugins for linters to run automatically. You never have to add the linter as a dependency on your simple stuff.
Truth be told, I'd be more worried about seeing that code than whether or not they used semicolons.
bothers me to but music isn't my key studies so I try and forget about it xD haha, holding of the note would be a great idea, slowly but surely making progress on it. I'll implement this idea man :)
Yes, but they use standardjs.com linter though.
Haha! Nobody is paying you more to know the edge-case rules about ecmascript semicolon insertion. If that's where you want to invest your learning hours, so be it. Not me, though.
Well if you don't want to then don't. I'm just saying it because I see a lot of people who haven't even tried something like standard badmouthing it. For example, i am currently working on a codebase with about 15000 lines of code in JS. There are currently 4 semicolons in the entire codebase, and they are all from .spec.js files because i used something like this: ;['user1', 'user2', 'user3'].forEach((user) =&gt; testFunctionHere()) Give it a shot on a toy project or something, and see how you like it. I ended up enjoying it a lot, and i'm not the only one, but as long as you are consistent it's fine.
Download Process Explorer. Search for open file handles.
Where did you get the audio files? It might be nice to have several variations where the user can choose the type of piano sound. Perhaps even have a canned tune/demo, something simple like the [Close Encounters of the Third Kind melody](https://www.youtube.com/watch?v=AphKxQ2NsQo). Ideally, the corresponding keys would respond/highlight while it plays.
Uhuh.
The thing about a language where this is enforced syntax (e.g., python) is that it expects this and there is no ambiguity. JS, however, was designed to terminate statements with semicolons, and doesn't really pay attention to whitespace. Python can translate newlines and indentation to short form separators when it compiles into bytecode, but when you minify JS, it gets a little more hairy and can't even make a contextual guess as to where one statement ends and the next begins, unless it's got the semicolons. A smart minifier might try to guess where to insert semicolons based on how the interpreter perceives the statements to be separated, but why make it guess? To be absolutely certain your JS code will run the way it's meant to, use semicolons to terminate almost every statement. I say almost because there are some where a linter might raise hell for using a semicolon (end of a named function statement, for example.)
Sorry, but that's no reason at all. No matter what the initial goal was, the feature is here, is well defined and work consistently across all Javascript implementations. That means I can use it if I want to. It's maybe not Javascript as it was supposed to be, but it's still valid and running code, and that's all that matter.
&gt; No, I cannot live without webpack, gulp, babel and eslint. Are you serious? If you're not just exaggerating some inconvenience, I feel like that's deeply concerning. 
Why not both? Don't be reckless.
Personally, I prefer this one-liner: https://github.com/mklement0/n-install
caniuse.com to know what features your target browser supports and MDN to know how to use those features. Don't try to bypass security in such an environment you can end up in deep shit. 
Thanks! I will look into that, have been preparing to switch to webpack for quite a while
Much appreciated dude, can definitely learn a few things from this
riggity riggity rekt, son!
It works too, but it's not necessary.
It's not only convenience, it's a major productivity boost. Like, massive. That's why I think not using these tools is like going back to the stone age.
Whatever the pro's and con's are, I think it's more important to be explicit. A semicolon is just that. Use it I say. 
[BroccoliJS](https://github.com/broccolijs/broccoli) is another big one.
Like i said in another comment, in my current ~15000 LOC codebase it only shows up 4 times, so it's not like it's common. And to be a bit cheeky, semicolons at the end of the line would get rejected from our code review! :) In the end it's mostly subjective, and we decided to go with "standard" as our code style. That doesn't mean you have to as well, but i'd urge you to at least try it one time before you knock it, i was pretty against it at first but now i love it. Edit: y'all take code style way too seriously!
Obviously you are confused about what I'm talking about.
use strict + jshint and you catch a lot of these issues before wasting time. 
This is one of those things I need to look into more, because it has been a source of irritation throughout my learning. Every source I use for learning seems to use or not use them in the same places for no discernable reason. Nothing makes learning easier and more fun than a lack of consistency. :)
&gt; it's still valid and running code, and that's all that matter We should value idiomatic code because it allows others to more readily collaborate on OSS projects and reduces ramp-up time when joining a new team. Unfamiliarity brings cognitive load. I read the results of a community survey a couple years back (can't find it now) that put semicolon usage at ~90%, and that's reflected in a [recent survey](https://docs.google.com/forms/d/18NrIRCIW4UoFq377thPOF7JxoxNQQenl_5uZ7Ag4pHo/viewanalytics?usp=form_confirm ) on /r/javascript. Using semicolons is idiomatic. Idiomatic code is good.
Where does Babel factor in to this? I write ES6 consistently without commas, mostly A.) because Babel will add in the semicolons and B) it saves time/allows me to skip the extra keystroke, which often sees me erroneously hit another key. 
And ASI is a basic language feature too, yet here we are. Discussing semicolons or not.
And english isn’t even my native language -.-
Well a semicolon is definitely correct after some brackets. Don't need it: for (;;) { // also: while, do } if (bool) { // also: else if, else } function foo() { // but only when declared like this } Should have it: var obj = { // as this is an assignment statement }; var foo = function() { // this is as well }; And the last case especially, because if you do this: var a = function() { console.log("a") } (function b() { console.log("b") }()) You'll get &gt; &gt; b &gt; a ...because the interpreter passes function `b` into `a` as an argument, and invokes `a` as an IIFE as well. Along with the `return` bug, this is the other biggest issue with ASI.
There is one exception, and it's pretty easy to spot. And while you won't get an exact line number, it's pretty damn obvious what happened in my (somewhat limited) experience. The other thing that I still haven't brought up is that code linters are very easy to write for this single exception and will give you a big red warning when you have it. I don't want to start a holy war, because to be quite honest i don't give a fuck what you use in your projects or on your team. I'm just saying that if you haven't given it a shot maybe try it out. You don't need to convert everything to it right away (or ever), but give it a try before you go on a crusade against it (and maybe don't do the crusade anyway, just let people format their code how they want...) 
Using semicolons is not [standard style](https://github.com/feross/standard).
That "claim" you don't understand is an opinion. Semicolons, much like deciding where braces go, and tabs vs spaces are all style choices. They are opinion. There are tons of people on either side of the fence for all of these, and that's okay. The only important details ate that you have an educated dev lead to choose, and that once a style is chosen for a code base, that you follow it.
Just because the project is called "Standard JS" doesn't mean it's standard JS. If only 10% of people rely on ASI it's hardly standard. Dan Abramov [sums up my frustrations with the name](https://github.com/feross/standard/issues/78#issuecomment-85660078). [Airbnb's JS style guide](https://github.com/airbnb/javascript) seems to be closer to real-world JS idioms. It certainly has the most developer agreement than any other JS style guide I've seen.
Sounds like you need to use some more frameworks and plugins to streamline your code.
What exactly wrong about them terminating license for those who sue them?
it can be a completely unrelated claim. One example was if you lobby for software patent reform, it invalidates the react patent license.
I’ve spent the last month working on a deserializer for a binary network protocol in Java (not JS), but what you suggest doesn’t help the people who actually write the libraries. Even in JS, someone will end up writing the library, and will probably end up using strict mode with semicolons to reduce the chance of mistakes.
It is always so satisfying seeing something so ridiculous execute succesfully
I wholeheartedly disagree with basically everything you just said, but that's your prerogative.
&gt; it only shows up 4 times Therefore your codebase *is not consistent*. In one comment you stated that consistency is the most important thing, and in another you admit that your methodology cannot possibly be consistent. By your own logic, you need to start putting semi-colons everywhere.
I was being sarcastic actually, I should've put a /s
bike-shedding at its finest.
Lol it's code style, calm down there with the multiple angry comments. I never understood why people get so angry about stuff like optional semicolons, tabs vs spaces, tab size, etc... It's all subjective, maybe learn to be a bit more flexible.
I think you're the one who doesn't get it. 
I feel that the time spent ensuring all lines are terminated in a semicolon would be better spent writing unit tests. 
The minimalist rules for semicolon placement are simple too - Im sure you know and understand them. They are not quite as simple as 'place after every statement', but still very simple. Compared to the complexity of Javascript scope/ pattern options I find the semicolon issue incredibly trivial. I like being able to leave them out of my own code as im familiar with a few other languages which don't use them and it didnt take any time to learn when they are superfluous in javascript. I find code slightly more readable without superfluous punctuation.
I'm glad you enjoyed it :). 
Once you learn ASI rules and try no semicolons you'll never want to go back.
What implementation are you using? This at least works in the current Edge: `Array.from(new Set(myarr))`, I feel like it should work without new though...
I use semi colons. But who gives a shit what people do in their code? Simply enforce linting in your open source projects if your narky about it. No need to write a blog post telling people what to do about it.
What issues are you running into?
globals.js? You'd be lynched at my current job if you tried pulling some shit like that.
JavaScript developers have unlimited energy to debate trivial stuff like this. "Hey, I know one thing about this language, so I'm going to be extremely vocal about it". The main reason to use semicolons is to avoid ending up in constant debates about semicolons. Pick your battles.
Do you have a resource that talks about the difference in type systems between TypeScript and Flow? When we looked into it a few months ago they seemed pretty similar outside of better inferencing on Flow's part, but maybe we missed some things.
&gt; Multiple statements on the same line are considered bad practice anyway A for loop is effectively multiple statements in one line. You instantiate a variable, compare it against something else, and then execute some logic that will change the outcome that comparison, all on one single line. An anonymous function used in a callback is a function call, and a function definition, on a single line (though admittedly this is not great practice for complex callback functions, but for your simple purpose built list filter, it's probably fine). Declaring multiple variables on a single line are multiple statements on a single line. In otherwords, there are many reasons to put multiple statements into a single line so saying flat out "it's bad practice" is not really true. What is better to say is if the statements are somewhat unrelated to each other. In the case of the for loop, the three statements work in tandem with one another. As for Javascript, semicolons are indeed important. This is because newlines are ambiguous in javascript. Ambiguity is bad practice. Python has done away with a lot of syntactic cruft like brackets and semicolons though, because newlines and indeed, whitespace in general, is not actually ambiguous and has specific meaning in python.
Agreed. Now that I've experienced the revelation that is ES6, I fucking refuse to write any nontrivial amount of ES5 ever again.
Well, this is /r/javascript, you never know.
&gt; If you think #1 is even possible, you haven't been programming long enough. Check out Go's gofmt.
It's funny. In my point of view, length should be read only. But setting a value to it actually changes the array.
It's biggest benefit is polyfilling WCs, and while it's a great view technology future will belong to those frameworks that go beyond just model-views but instead provide more structure to webapps, tools to store and manipulate the data and interfacing with backend, at least in mainstream.
You don't have to write blog posts about this. Put lint rules in the project and be done with it.
Thanks for the feedback. We'll definitely review the copy and try to come up with a better wording. 
At my work, before I started, they were already not using semicolons. Before I started I was in the same camp as you. In keeping consistency, I've been not using semicolons too. We use lint tools to ensure consistency as well. After not using them this past year, I really cannot stand them now. They aren't necessary for writing clear concise code. It's just different. I can read and write code with and without them. It's really no different to me either way anymore. It's just an extra character to type. But lately for my personal projects, I've been omitting them. In the last year of development, I haven't had a single issue with omitting them. Other than the down votes I get here for trying to have a discussion. 
I had to work on a codebase once where there were no semicolons. We ran into a major bug once we turned on Cloudflare, because we set CF to automatically minify and concat our JS files for us. The reason this caused major issues is the code used a regex, which wasn't terminated with a semicolon and wasn't in any other container (wasn't a string, for example). This meant that once the code was minified, the site assumed that like half our code was a single regular expression and just... gave up. And because we were using our cdn for the minification and not build, and we were new to CF, this happened on production.
&gt; Dan Abramov sums up my frustrations with the name. And [Max Ogden responds with the reason we use StandardJS](https://github.com/feross/standard/issues/78#issuecomment-85597345).
I'd argue that if you switched to using semicolons on a daily basis you'd go back to liking them after a while. People tend to like what they're used to. Your workplace style guide is doing you a disservice by getting you used to a style that is not consistent with the majority of code out there.
&gt; The main reason for me is consistency between all the C-style languages. I don't have to adjust to different styles unnecessarily. So much this, and it's consistency between languages when you are developing between them as well as when you transition from one language to another just due to preference or stack changes or what have you.
Hi /u/robertojd, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `stormpath.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [stormpath.com](/search?q=%28and+site%3A%27stormpath.com%27+author%3A%27robertojd%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|14|100%
Hi /u/orizens, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `orizens.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [orizens.com](/search?q=%28and+site%3A%27orizens.com%27+author%3A%27orizens%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|83%
The style guide itself is fine, but I find the name misleading.
&gt; So, we have promise based pattern, where you execute one task and then make a chain of .then()'s returning another promises in way. This of course helps, but it is still not very readable Really? I wouldn't say so. getListFromServer() .then(dedupeList) .then(renderView) .then(writeToDOM) &gt; I would really prefer asyc/await or generators vs promise chains. The latter will be much more familiar to most developers. I like the `await` proposal too, but it's nothing more than that - a proposal - and the details of the implementation might well change between now and ES7's finalization. You shouldn't really build production services against 'moving target' language features, because if the `await` implementation _does_ change then you're going to find your application trapped on a legacy runtime. And that can be toxic. You're going to have to deal with promises at some point anyway. The asynchronous functions that you `await` still have to return them. The only thing you lose is `then`, and moving to Typescript is probably too high a price for that. &gt; Everything will be hosted from one directory, using latest stable Node.js for server and webpack with babel-loader for client. This allows me to use certain modules both in server and client. Honestly, I'd say there are only two instances where you can really re-use much code between your backend and frontend - 1. You're writing a React app that's rendered on the server first 2. You're using an isomorphic framework like Meteor that lets you marshall parallel domain objects on the client and server Otherwise the benefit is overstated somewhat. You might have some shared code for form validation and the like, but that's about it. Sharing templates might be handy, but you don't need a JavaScript backend for that. &gt; but having everything contained into single server really simplifies things Only in the short term. There is a reason the rest of the world is moving to microservices - monoliths are brittle and hard to scale. 
## **But this isn't a real web standard!** Of course it's not! The style laid out here is not affiliated with any official web standards groups, which is why this repo is called `feross/standard` and not `ECMA/standard`. The word "standard" has more meanings than just "web standard" :-) For example: * This module helps hold our code to a high *standard of quality*. * This module ensures that new contributors follow some basic *style standards*. Source: http://standardjs.com/#but-this-isnt-a-real-web-standard
What you can do is set up an `else if` block, like so: if (condition){ ... }else if(condition){ ... }else{ ... } You can repeat the else-if part as many times as you like, as long as the first block is `if` and the last block is `else`. I suggest you read through at least the first book of [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS). It's a great resource for learning Javascript, and hopefully will answer any similar questions you have.
I still think it's misleading. But much like ASI, we don't have to agree on everything :)
I think Java is misleading too because it's not actually coffee. It's not about the exact definition, but the definition in context. Java in the context of computer science refers to the programming language and not coffee.
Explicit is almost always better than potentially vague. 
Your first problem is that you are using javascript in unity
The reason is this line: &gt; Those of us that do use it don't want to argue about semicolons. it's a waste of time Also note, the response about function definition and variable assignment was to retort the parent op's argument about including semicolons everywhere was easier than remembering where to not use them and where to use them, because magically everything works as long as the line ends with a semicolon. And Max showed code that would break if a semicolon was used, bringing parent ops argument to a state of uselessness.
And this is how you get sucked into reading hours of [wtfjs.com](http://www.wtfjs.com/). 
It's setting a component of the kitten's physics body to a negative value that's got you. So, kittySprite.body.setSize(120, -128) is giving you trouble. I can't say I looked too closely at the problem, but a quick blast at JSBin and the removal of the above line (which defaults the physics body to the same dims as the Kitty sprite), restored the collision detection.
Everyone says this, but I'm never confused as to where the end of a line is, are you? 
but do u know how to fix it? do i have to go to c#?
Religion ist heilbar.
UX is lacking. At the least I would add some sort of loading/progress bar. I thought it wasn't working at first. I'd also put a yellow background (or some highlighting effect) on the mp3 name that displays on the page when you drag on a file (which replaces **None Selected**). Basic simple visual feedback stuff.
If you're open to a few general comments. * Decouple the game from the display. By that, I mean, don't make your responses written in HTML. Just pass regular strings to a function and let the function turn them into HTML as needed. * `document.write` is almost always the wrong choice. In this particular instance it may almost work, but it won't work in other situations. Once the page has fully rendered, `document.write` nukes the page and starts over. * `prompt` is a poor choice for input. Use regular HTML and use JavaScript event handlers to look for changes and respond to the. 
Okay buddy.
The `document.write()` is outside of the loop, so it's only going to be run once, printing one thing. Also, you have invalid syntax as the for-loop requires three semicolon-delimited fields. You have a comma where a semicolon is required. Your loop sets i to the values of 1, 2, 3, and 4. But you use `i + 1` when performing the multiplication, so this is calculating `2 * 3 * 4 * 5`. It would be less confusing to just start the loop at 2 if that was your intent, rather than having that extra + 1 term. 
I'm confused as to what you want. If you are having problems running your code, it may be that you are using a comma instead of a semicolon inside your for loop declaration (right beside your `i=1`). That comma should be a semicolon: var fact=1; var i; for (i=1; i&lt;5; i=i+1) { fact = fact*(i+1); } document.write("fact is: " + fact); If what you want is for each iteration to print the current result with a "fact is: &lt;result&gt;" then all you have to do is move your document.write inside the for, not outside. Like this: var fact=1; var i; for (i=1; i&lt;5; i=i+1) { fact = fact*(i+1); document.write("fact is: " + fact); } This is because the loop finishes before the rest of the code is executed, so once the `document.write` line is reach, `fact` has already the result from the for loop. Moving your `document.write` inside the for loop will execute it for each iteration, giving you the current result instead. If what you want is for your results to get the ones you gave (2, 6, 12, 20) then your formula is wrong. As it currently stands, you get 2, 6, 24 and 120. You need to revise your formula if this is the case. If there's something else, then I'm at a loss. 
Keep in mind that a function declaration cannot be made conditionally in most browsers; that is, it will be hoisted to the top of the containing function, outside any blocks it may be in. This is changing with ES6, which allows "block-level function declarations"; Mozilla browsers long allowed this sort of thing and called it a "function statement." For non-Mozilla browsers that don't yet support block-level function declaration, the solution is to use a `var` statement to set a variable equal to a function *expression* (which is not hoisted). The only other construct I am aware of that can be hoisted out of an `if` or `else` block is a `var` statement, but that's only the initialization part, while the assignment stays where it is in the source code. Anything else (like array and object initializers, regex literals, loops, and conditionals) is parsed, but the in-memory representations of arrays, plain objects, and regexes aren't created until the statements in which the array initializers exist are executed.
I know it's just a demo, but simple visual feedback would make it more friendly.
not my code, it's a study guide for an exam. The comma was my mistake. I'm just supposed to find the output, but I dont have the answers. So since the `document.write()` is outside the loop the output would only produce `fact is: 2` ?
Yikes! Your comment kind of makes one wonder who the "angry basement dweller is" is here.
Thank you for your thorough answer. It is on a study guide so my mistake on the syntax. My question is , as it currently stands, why is the third iteration 24 and the next 120? I am confused on the logic. 
Because math: fact is 1 1st iteration: i is 1 fact is fact * (i + 1) fact is 1 * (i + 1) fact is 1 * (1 + 1) fact is 1 * (2) fact is now 2 2nd iteration: i is 2 fact is fact * (i + 1) fact is 2 * (i + 1) fact is 2 * (2 + 1) fact is 2 * (3) fact is now 6 3rd iteration: i is 3 fact is fact * (i + 1) fact is 6 * (i + 1) fact is 6 * (3 + 1) fact is 6 * (4) fact is now 24 4th iteration: i is 4 fact is fact * (i + 1) fact is 24 * (i + 1) fact is 24 * (4 + 1) fact is 24 * (5) fact is now 120 ... Each time we go around the loop, we get a result by multiplying the last result by an increasing number, so the difference between each iteration grows larger and larger, faster and faster. 
Thank you!
Something I created for the National Contest of Informatics in Germany. Therefore it is commented and labelled in German (Sorry for that), a translation will hopefully come soon. It will also become integrated into the rest of the website and other creations will soon follow!
FWIW, that's exactly what I meant by exaggerating the convenience. e.g. there are things like Flow and Typescript that solve(-ish) real problems in Javascript development, and yet I'm sure you survive just fine, just like how you survived before ES6 was a thing.
You're multiplying 1 by 2, then 3, then 4, then 5. 1* 2 = 2 2 * 3 = 6 6 * 4 = 24 24 * 5 = 120
Not after I review it. But a semicolon acts as confirmation, which speeds things up.
Ahh, yeah, in that case it won't work because `{3: 'thing'} === {3: 'thing'}` is false. IOW, objects are compared based on reference rather than structure.
It's much slower than expected and the CPU usage is very high. I suspect it's because you're using a table with a gazillion cells instead of a canvas. Try using canvas instead. Browser support is very good nowadays. http://caniuse.com/canvas
&gt; Which still stands with what Max said that you have to remember where semicolons are needed or not anyway. Right - see [my previous answer](https://www.reddit.com/r/javascript/comments/3wd0do/a_plea_to_use_semicolons_when_writing_javascript/cxvt5in). ;-) Semi-colon placement is not "arbitrary" at all, and frankly anyone who can't remember the difference between a function definition and a variable assignment expression (let alone gets confused between the two) is such a terrible javascript developer they really have no business even *holding* strong opinions on things like coding style - let alone confidently posting them all over github. &lt;:-)
It did cause quite a stir at my place of work :) But best practices need to be periodically challenged and reevaluated to see if they're still (or was ever) valid
Why is it a nightmare? Can't the minifier just insert semicolons using the same rules as ASI?
I really wish strict mode turned off ASI.
Yes, almost a year ago there was a debate about the exact meaning of their PATENTS file, with some lawyers (but by no means all) agreeing that it was too sweeping. **And then they changed it**; the language described in the link is gone. This link is badly misleading and should be removed.
Meh.... Maybe a little bit of that paired with a little peace of mind.
Actually python can also use semicolons
'Jiff'... Yeah fuck that.
I had part of my colon removed. 
Official announcement [here](https://code.facebook.com/posts/1639473982937255/updating-our-open-source-patent-grant/) and HN discussion [here](https://news.ycombinator.com/item?id=9356508). Note that OP linked to a discussion on HN 260 days ago; the change happened 245 days ago, ie, 2 weeks later. It's all been resolved for quite a while now.
Looks good! To reset your interval just call `setInterval` again! Happy coding =D
[Yup](https://github.com/npm/npm/blob/master/lib/bin.js).
i am getting error while executing ./configure --prefix=${NODE_PARENT} please help.
That's a concerning example for me. I'm pretty sure I call `map` or `forEach` on a literal array a *lot* more than once every 4000 lines.
It's a longshot, but is it possible that ASI would be removed in something like ES2020?
Primitives (string / integer / Boolean) are passed by value to variables in JavaScript. Variables only hold a reference to objects though. An array is an object in JS. var helpfulBob = [1,2,3]; var helpfulWill = helpfulBob; helpfulBob will tell you were [1,2,3] is. helpfulBob tells helpfulWill where [1,2,3] is and now both know where to find the same [1,2,3]. **I suggest you give [EloquentJS](http://eloquentjavascript.net/) a read through. It's free and it will get you started properly.**
If you assign an array to some other variable, it's still the very same array. It's like that with all objects. You can create a copy of an array via "slice" or "concat". &gt; var a = [1, 2, 3] undefined &gt; var b = a.concat() undefined &gt; console.log(a, b) [1, 2, 3] [1, 2, 3] &gt; b[0] = 'foo' "foo" &gt; console.log(a, b) [1, 2, 3] ["foo", 2, 3] Note that this is a so-called *shallow* copy (as opposed to a *deep* one). If the array contains references to other objects, those objects won't be cloned, too. &gt; var a = [{x: 'a'}] undefined &gt; var b = a.concat() undefined &gt; console.log(a, b) [Object {x="a"}] [Object {x="a"}] &gt; a[0].x = 'b' "b" &gt; console.log(a, b) [Object {x="b"}] [Object {x="b"}] While these two arrays are separate arrays, they both contain references to the very same object.
That's because we have ASI
A quick trick could be `array.slice(0)` which will shallow cone the array. 
Interesting. I was ready to disagree on yet-more-special-syntax, but this seems more reasonable than I expected. That said, I personally would object to `|&gt;` in the language without also adding its counter-parts for composition and partial application. http://stackoverflow.com/questions/10091185/piping-composition-and-currying
just use `del` as most major javascript libraries use
All modern browsers got auto restore tabs if we activate it.
&gt; Array.prototype.uniqueMembers = ... Yea... let's not do that. http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/ This signature: uniqueMembers(checkSortedArrays) Doesn't tell me anything whatsoever. I'm also not sure what your code is supposed to do. It looks kinda silly at a glance. If you want to check if all items are unique, you can use something like this: let allUnique = items.every((item, index, array) =&gt; array.lastIndexOf(item) === index); If you want to make them unique: let unique = [...new Set(a)]; Or just use a set if you actually want a set.
wo, wtf, Angular + Redux? I'd like to hear some more.
Commenting "This...", the new upvote.
Could you, please, give me some examples of that if - else - var?
We don't need another fancy feature in JavaScript, we need to keep it simple and add only necessary things. I feel like the proposal process is too liberal and ES2016 is turning into mess.
This is really nice so far, actually. Would help a lot to have a prebuilt binary though.
Yeah, React has lots of nice features. Some of those nice features are also available in other frameworks, but React has them all. It's just all round niceness :-)
Check your browser's request and server's response.
As I checked the code you provided (just the JS), all seems to be fine, look: http://jsbin.com/gexuqojaxa/edit?js,console,output So, I suppose there may be a problem with your document.ready, for example you've missed to close it properly, have a look at this topic: http://stackoverflow.com/questions/3983088/javascript-error-uncaught-syntaxerror-unexpected-end-of-input
It parses the syntax, but it doesn't allocate values in memory or anything like that. It does this so that it can hoist variables and functions, to determine which functions are optimizable (for modern engines like V8), and so that it can terminate script execution early if syntax errors are found. As an example of optimizability, if a function contains a `debugger;` statement, even in an unreachable part of code (like in an `else` clause for which the `if` condition is always truthy, or right after a `return` statement), the function is considered not optimizable. As an example of improper syntax, the following snippet, if found anywhere in a script file, will render it non-executable: if (false) var; This is because `var` requires an identifier after it (the name of the variable to declare). However, it doesn't actually run code in code-paths that are not reached; for example, the following snippet will do nothing: if (false) for (var i = 0, arr = []; i &lt; Math.pow(2, 32) - 2; i++) arr[i] = Math.random(); This is even though, without the `if (false)` before it, the snippet would fill a new max-sized array with random numbers that are at least 0 and not greater than 1; the JS engine just checks that the syntax is valid, but does not actually run the statement following `if (false)`.
I don't have anything against React, it's great and it's a standard de facto. But it has its downsides. For instance, the size is too big, non-standard markup language, mixing code and markup in one place. Anyway, I don't want to turn it into competition "my favourite framework against yours".
You're conflating a couple of things about Javascript: First, the fact that if `a` is falsy, neither `b` nor `c` is evaluated in `a &amp;&amp; b &amp;&amp; c` is known as "short-circuit evaluation" of an expression, and it's slightly different from the grammar of statements; next, it's just called a "block" and not a "function block" (the difference is important when it comes to variable scope).
My JSON is a bit big? Are you referring to this line: data: {"game": getParameterByName("game")}, I don't see how that is big... or are you referring to the response? But that doesn't explain how it's fine in incognito mode and not in normal mode.
I will have to disagree with some of the comments here. I find the pipe operator a very welcome addition to the language. Having done some Elixir, the pipe operator is just amazing to work with, it allows for much more readable and composable code, and will most likely lead more maintainable code, with less boilerplate. Having said that, i also acknowledge the resistance, as there is already ways to do this in JS, and as the author noted Object.prototype could be augmented with a new "pipe" method. However i find this a bad idea, since its hard to add stuff to the prototype without breaking existing code. Secondly, i dont see any benefits in adding the "pipe" method, because its already implemented in so many libraries, and can be polyfilled easily. Finally, because the pipe operator exists in many (functional) languages its already familiar, and its also a very simple way of understanding how to code flows.
I wrote a starter repo to quickly jump into new react/webpack/Babel/eslint/jest projects. Holyfuck my productivity went up so much. Maybe it's not writing function(){} as much, or maybe it's something else, but I'm definitely never going back. 
The very last line "`});`" is extraneous and causes a `SyntaxError`; remove it and your script should work; consider a tool like Atom, Brackets, Sublime Text, or SciTE with proper syntax highlighting, and also using a linter like ESLint or JSHint, the latter of which is available as a Web service: http://jshint.com/
Thank you!
It looks like the poster was embarrassed enough to delete his or her account. :-(
Ok for everyone.. here is complete code: I have edited it as krefik said: var J; J = [...about 40 elements...] var M; M = [0, 1, 2, 3, 4]; var K; K = [..just a lot of things here..,]; var N; N = [...another bunch of things....]; for (var j = 0; j &lt; J.length; j++) { for (var m = 0; m &lt; M.length; m++) { var kyselina3 = "H2" + (J[j]) + "O" + (M[m]); if (x.includes(kyselina3)) //HERE!! There is high chance (+- 50% that this and only this is true) but yet it continues checking upcoming content which is useless in 50% { y = d + (J[j]) + "O" + (M[m]) + " + H2O"; break; } for (var k = 0; k &lt; K.length; k++) { var kyselina2 = "H" + (K[k]) + "O" + (M[m]); if (x.includes(kyselina2)) { y = d + (K[k]) + "O" + (M[m]) + " + H2O"; break; } for (var n = 0; n &lt; N.length; n++) { var kyselina = "H" + (N[n]) + "O"; if (x.includes(kyselina)) { y = d + (N[n]) + "O + H20"; break; } } } } c.innerHTML = y; }
Thanks for the tips! Will apply to the slider. Why are some people downvoting you answer tho?
I think this is a server problem i have already had before. I'm on mobile right now so I can only give you a summary of my problem : Long story short php doesnt read application/json requests properly, you have to do something to get it, like that : $POST_JSON = json_decode(file_get_contents('php://input'),true) ; And then you can work with post_json like it was the $_POST object. Hope that is your issue and that helps.
Hello! First of all, thank you for this really helpful answer! About your first point, I see you r just passing a function pointers, but this mean they all have to follow a specific rule (accept single parameter from previous promise and return another promise). This is OK but basically whenever you would want to put one more step in your chain, you will have to change your method definitions, right? Lets say you have to 'ask' some 3rd party api about something and then inject these in your "writeToDom" while still conserving data from "renderView" - so you must modify 2 or 3 steps in your chain as renderView as it has to return different data for writeToDom now. For example this is an action of my controller in express: http://pastebin.com/2dy6fCpg I know that code is low quality, but this is my first real step in node.js and I am just trying, playing around and so :) I'd love to see how would you refactor this into more readable thing. I agree about await/async as it may be trap. Even though I believe that benefit of async/await is too large for this not being added into core ES7, there is still a risk. I am not really scared about promises, I just prefer code flow that is easier to follow up. :) I dont really understand this one: &gt; The only thing you lose is then, and moving to &gt; Typescript is a hell of a price for that. Is moving to TypeScript a bad thing? Because I've already developed a cordova app using TypeScript and I think that if you have a lot of own code and not much 3rd party code (for example real time games?) then it is great choice for me. Of course whole definition thing in TypeScript is pain as even jQuery is not 100% prepared to use with TypeScript requiring some hacks here and there. About reusing source, in real scenarios yes I agree that there are not much benefit of sharing this. This also would make more sense in real time games to reuse modules both server and client side but if we talk about typical scenarios, well validation, i18n and some helpers (like a tool for formatting prices?) is the only thing I can image now. Still if it does not "cost" too much, I'd love go a way to have app with reusable modules. &gt; Only in the short term. There is a reason the rest of &gt; the world is moving to microservices. Monoliths are &gt; brittle and hard to scale. Could you explain this a bit? Anyway thank you for your answer and I'd love to see some good resources about microservice architecture you stated before. Do you have any resources that cover these topics? Thank you!
Unfortunately still doesn't work... this issue is really really strange. Still have to take into account the fact that it works in incognito mode but not in normal mode.
I don't think this is worth an argument because in one command I can format my javascript in various ways. Everyone is happy.
Seeing as it works in incognito mode and not in the regular mode, I would compare the responses from the server in both cases. Content, headers, everything. Got a feeling you got some weird cache action going on.
First, move all array declaration to function front. Redeclaring them on every iteration is costly. Second, with break in your if(){} block, you don't need any else. Else is almost never neccessary. In your case, it does nothing apart of obfuscating code.
Is there any other way that you could think of to call the moveLeft() function after the moveRight() has been executed then run the moveLeft() and so on? 
Have you error display enabled in PHP ? Your script might crash in the first case, but you don't get to see what the error is. What is the status code in both cases ? 
There were no errors in the PHP page, status code is 200, status text is "OK", although its not ok
It seems that the moveRight() function is called but the moveLeft() isnt called after execution?
I see. Thanks. I will try that and share the difference. Edit: Yep, it is much faster like this. Thank you so much ^^ 
If I were you I would try to echo/log everything on the server side to see what happens ... I heavily doubt it's a client side problem, my bets are all on PHP.
As stated elsewhere the issue is in the output of your update script being returned. Capture or generate some sample input and use a tool like the Postman extension for chrome to manually check the output. It's sounds like something isn't being properly encoded on the server end.
Could you elaborate? I can't just put echo / print s everywhere in the PHP file else it will think that I'm returning the ajax request with those values... I think it might be client side, because it works on incognito and not in normal mode...
Will try out that extension, not sure how to use it though :D
As lewisje said, the last line is extraneous. Furthermore if this is the entirety of your script it may be executing before the DOM has loaded. So I would put it inside: window.onload = function() Block
https://www.reddit.com/r/ionic/comments/3rr9wd/google_to_compete_with_ionic_in_crossplatform_mobile_apps_with_flutterio/cwrhghm
It answers OPs question. How do you make it stop looking? Read the question. A switch runs sequentially but breaks as soon as it finds the value. Also looks nicer for multiple if statements.
I think we said the same thing in your first clarification! :p Or at least, that's what I was trying to say. Yeah, sorry about me throwing around terms like that :c
i cannot access js math library, is this intentional or am i screwed something up?
&gt; About your first point, I see you r just passing a function pointers, but this mean they all have to follow a specific rule (accept single parameter from previous promise and return another promise). You can pass a synchronous function to a _then_. It needn't return a promise. &gt; Lets say you have to 'ask' some 3rd party api about something and then inject these in your "writeToDom" while still conserving data from "renderView" I'm not really clear what you're asking here... Each _then_ can be comprised of its own promise chain, so if you need a step to perform an asynchronous action itself, you can always just nest the promises. &gt; I'd love to see how would you refactor this into more readable thing. Well, how about this? Promise.all([gatherBudget(), gatherPosition(), gatherUser(), gatherItems()]) .then(()=&gt; res.send(response)) .catch(error =&gt; console.log(error, error.stack)); function gatherBudget() { return getBudget().then(budget =&gt; { response.budgetMax = budget.content; }); } function gatherPosition() { return getPosition(req.user).then(position =&gt; { response.position = position; }); } function gatherUser() { return getUser(request.user.id).then(user =&gt; { response.budgetUsed = user.budgetUsed; response.shoppingTime = user.shoppingTime; response.score = user.score; response.hasShareCard = (user.shareCardUsed !== true); }); } function gatherItems() { return getItems(request.user.id).then(items =&gt; { response.items = items; }); } You kick off asynchronous functions for gathering all the various bits of data to your response, and you trigger a send once all of them have returned. Each one itself triggers an async action and waits for the response. This is fine, though, because the vagaries of whether `getUser` or `getItems` is async or not is confined only to the functions that care about them. &gt; Even though I believe that benefit of async/await is too large for this not being added into core ES7, there is still a risk. It's not that I don't think `await` will be added, so much as that the semantics and the exact behaviours might change. Think of how early promise implementations disagreed whether calling `then` on a promise that had already returned should run immediately or not. Those kind of subtleties could get you trapped on a runtime, which might become an albatross over time. &gt; Is moving to TypeScript a bad thing? No, but it does come with costs, and you have to weigh them up carefully. TS is a great language, but as you recognize, interop can be a pain (you will be working with a lot of third party code in Node, because the environment is so thin), turning off static typing everywhere must add a lot of boilerplate, and it's another part of your build chain to worry about. To be honest, if I were going to take on those costs, I'd be tempted to just write my Node app in true, typed TS anyway. &gt; "Monoliths are brittle and hard to scale." &gt; Could you explain this a bit? When you have a monolith, your surface area for failure increases. If your application does lots of blocking calls to external services, for example, it will always run as fast as the slowest of those services. If any one of those calls fails, your entire application goes down. And if you need to scale just part of the application, you have no choice except to clone your entire app across your infrastructure. Your CI suite takes a long time to run, because you have to test a big suite against a big application for every release. And you can adopt a mosaic of technologies across your various services. It does add some costs, though, and it's probably not something I'd do for something really small. Exactly what are you building here, and at what scale?
And thats exactly why i made this thread, to learn tricks and how to write better code, so I thank you=)
I read the question, and your response didn't address his *actual* issue, which is that somehow, code written where the execution path doesn't reach manages to slow down the app; whether `switch` or `if`-`else` is used is immaterial.
It's gonna happen, so why not go all in! /s
I don't like that react kind of mixes object-orientation, state, use of this and functional stuff. To me it seems like react laid the groundwork for more coherent frameworks like cycle.js to be conceived
Read through NPM coding style. It is very consistent.
[This](https://youtu.be/Qlr-FGbhKaI) is a great video to get your feet wet. Also brings this comment thread into perspective.
[Meteor.js](http://meteor.com) might be worth considering. It greatly simplifies writing full-stack JavaScript applications. Meteor is built on Node, so you can also use NPM packages in any Meteor project.
Well, the Ionic world has anyway. But ionic 2 will be open for the developer to choose the framework. 
Why do you write versus like that? Not trying to be a dick, just curious.
* figure out your medium. they have a bunch of divs in a grid, you might also use a background image * continually poll mouse input to determine where the cursor is in your screen space * calculate the amount of distortion as a function of distance from the mouse * distort the background based on the number calculated from the above step. they use css3's [perspective origin](https://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin) by applying an inline style to each div. You might also look at css3 transforms The calculating distortion is where most of the math will be, I think. The distortion radiates out in a circular pattern, which means you'll have to do some trig to get angles and distances.
It depends on many factors. If you consider battery life and raw performance native apps are always going to win out. The drawback is they take more time and resources to develop. If you have limited development resources native apps may be too expensive to develop, or take too long. Sometimes being first to market is more important. Battery life and performance may be irrelevant for your app, in which case it would be a waste of time and resources to develop a full native version. 
Yep, that's a fair point.
Reminds me of street fighter days !
Also, includes() tends to be much slower than plain indexOf() !== -1, and not available everywhere - look http://jsperf.com/str-indexof-vs-str-includes - on Chrome performance of includes() will be slightly off, on FF difference will be much bigger, and on IE's it'll float belly up, and you have to shim it. EDIT: belly up, not down, obviously ;-)
First I have heard of flutter.. Have I been under a rock? 
Yeah, it's probably not related. I just remember I had the exact same symptoms. And the error was caused because the server actually sent me html (which I couldn't inspect for some reason in dev-tools), which caused the JSON-parser to throw the error you are having. The weird thing was that when I tested it with postman the server actually sent the correct JSON, I only caught it after I used postman to intercept the requests and responses I was having with chrome. Anyway, the underlying issue was that CORS was incorrectly set up on the serverside, causing it to sometimes work and sometimes not.
Honestly you sound kinda stuck up
I think it's more of a factor of how big the company is. If I'm hiring Engineer #1, I want to make sure he's full-stack and can write HTML/CSS as necessary so I don't have to sub-contract design right out of the gate. As the company and engineering team grows it makes sense to hire/contract lower-paid designers to do design and let the engineers focus on development. But as a developer/engineer there's always going to be a minimum required level of HTML/CSS knowledge: When a customer logs an issue of weird element spacing in version X of browser Y, you're the one who's going to have to troubleshoot and fix it. It's hard to tell from a job posting or position title how much of your time is going to be spent vertically centering a div in IE8 versus implementing 4-direction infinite scroll.
$ are faster, duh! *heavy sarcasm*
I'm a front-end engineer. I don't do design, we have a designer for that -- the designer sends me comps and I implement them according to the spec. That doesn't mean I don't work with HTML/CSS. Those are still a part of the front-end stack. If you don't want to touch CSS, work on the back end.
Basically I am going to need access to the values first, last, and email outside of the functions. Could I add each value to local storage and then in the identify function return the items in the storage?
You didn't add var when creating your variables, they are all globals so it shouldn't be a problem. identify can reuse all these variables unless the page is reloaded.
The timeline for the project is 6-8 weeks but the project will require maintenance and expansion for the next few years.
Alternatively, use a node module that has tests and is open source and easy to pull in via npm.
The parts that were copy and pasted were things I did not implement. I had my own implementations of the modify and remove methods, using document.getElementById as you mentioned, and it didn't work. Basically much question is how to I modify the items that were selected from the drop-down and how to I remove them from the display? Any advice would be much appreciated. Thanks!
I'll be taking a look at this a bit more, but I've found that accessibility is almost always overlooked at companies, which leaves developers without enough time to properly design and test sites to be accessible. I'm an angular guy, so I'm definitely interested to see how it can integrate.
Author of the proposal here. First let me say thanks for writing this post. The more discussion, the better :) I love function programming, and (of course) that's where I got the inspiration for the pipeline operator. The reason I think `|&gt;` is better for piping is because there is less cost to write a composition function than there is to write a pipe function. For example: wrap(10).pipe(f).pipe(g).pipe(h).value is already 7 function calls, when there should only be 3. Contrast that with the pipeline operator: 10 |&gt; f |&gt; g |&gt; h //=&gt; h( g( f(10) ) ) Because it's purely a syntax transformation, there is no longer any performance overhead to worry about. With that said, it's easy to get "almost" the same function composition behavior you wrote about, in quite an elegant manner, using this small function: function comp (...fns) { return (x) =&gt; fns.reduce( (subresult, fn) =&gt; fn(subresult), x ) } With this you can write the following (taking the example from your blog post): ns.filter( comp(toNumber, Math.round, isPowerOfTwo) ) .forEach(console.log); The reason I say "almost" is because of that pesky keyword `this` – you wouldn't be able to compose, for example, `console.log` so easily (in the browser, at least). I *would* very much welcome a composition operator in JavaScript, but as it stands, `&gt;&gt;` and `&lt;&lt;` are already taken for bit-shifting :( 
I can't even parse that incredibly bulky run on sentence. 
To you.
Stuck up because I don't like to design? I don't see how you get that vibe from my post.
How much are you working with HTML/CSS on a daily basis? 
Maybe I'll write an proposal for the &amp;&gt; operator, too ;) In seriousness, I agree with the comment /u/hahaNodeJS had. It makes sense to create operators for composition and partial application if the community goes down this route. I see the value in the pipe operator as you have defined it, but I see greater opportunity for expressiveness with a function/object composer.
I agree that composition and partial application are important, but I think composition is easy enough to do without new syntax. Syntax support for partial application would be wonderful. The question of *how* to do it is a highly debated topic, mostly due to the complexity that the keyword `this` brings =/
**Cordova**: You have an existing mobile website that you want to expose as an app, and don't want to deal with (or don't have the budget for) cross-platform development hassles and hiring separate teams for each major frontend platform. You don't care much about butter-smooth animation, deep platform integration, or having the best possible UI. Often best for apps that are a companion to some existing offline business. **React Native**: You have a team of Javascript developers that's willing to learn native frameworks, but don't want to hire dedicated specialist iOS or Android developers. You'd like to use the same language (and framework!) for the website, mobile app, and server. You want a slightly better user experience than Cordova, but still don't care about the absolute best performance &amp; platform integration. **Native**: You want the absolute best user experience. Usually best for apps that *rely* on the latest features of the platform as a competitive differentiator, eg. you aren't going to make the next Uber or Snapchat as a Cordova or React Native app.
No, he's referring to the actual JSON returned by the server. That line isn't even JSON; that's just regular JavaScript. &gt; But that doesn't explain how it's fine in incognito mode and not in normal mode. As he said: &gt;&gt;That implies that the server gives a bit of a different response because of different request headers from your Ajax client. 
Take a look at [Vue.js](http://vuejs.org/). It's influenced by Angular 1.x in many aspects, you'll find a lot of similarities. However, it's much cleaner, lighter, more structured and elegant.
&gt;actually engineering
Hey folks! I have been thinking a lot about a way to make gulp tasks fully reusable lately and that's what I came up with. I'd really appreciate any feedback. I might have miss something or maybe there are easier ways so please let me know :)
I didn't see an example of any of the "problems" mentioned. Seems fairly risk-free?
I didn't see the first version of the code, but I have the impression that the OP suffered from the [XY problem](http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem) and my advice in this thread didn't address the actual issues with the code.
That's an impossible question to answer for any front-end dev, because there's no one answer. Are you implementing components for existing CSS? You are probably doing a lot of HTML and JS. Are you writing a full-scale web application from scratch? You are probably doing everything. Designers do the design, but you absolutely will be doing the HTML and CSS on a frequent (probably daily) basis. Like /u/Magnusson said, if you don't want to work with CSS/HTML then you absolutely need to avoid front-end development. 
How are you liking the library? Is there something that could be improved?
Personally this is something that happens before the interview process even happens most of the time. As a JS/front-end developer living in London there are tons of job offers, generally you can weed out some jobs before you even reply to the emails. 
I know. This is more about curiosity than guidance.
I love the idea of components and React is at the top of my list. Mithril is a close second and Polymer isn't out of the question.
On a side note, based on what you write you sound like someone who's just done some Angular tutorials and deems himself worthy of a job at the next big startup. If you want to do front end there is no way to avoid doing a lot of HTML/CSS before people are going to take you on. In interviewing for mid-level JS developer jobs most questions will have HTML/CSS questions. If you've not put in the hours you can memorize some of it, but you'll never be truly prepared.
I remember bumping into Meteor but for some reason it slipped my mind. Looks awesome and definitely something I'd consider investing serious time into. I guess that's really why I posed the question in the first place. It's going to be a big project and I'll need to dedicate a lot of time to learning whatever tools I decide on. I'd hate to dive head first into a framework only to find out it's not what I needed for this job. But I'm aware there's only one way to find out: trying.
you know what's a great internal function that not many people use consistently.. .hasOwnProperty() 
So far it hasn't had any major hurtles I couldn't cross. I like that I can integrate npm packages into my project, as well as supposedly native libs too. It's also a native app, so your not tied to the browser like Cordova is. That said, they said there's still a 10+% performance hit compared to writing just fully native apps. 
I would not hire a front-end engineer who didn't want to (or was unable to) do work in HTML/CSS. This is coming from a guy who is actively hiring front-end engineers.
Maybe React Native took off (stole the show with native powers) and reapp needs more time to go stable.
Not really sure how to answer that. I work mostly with React now, which means I'm creating components and there's less of a separation between JS/CSS/HTML than ever. My "HTML" is JSX, which is in my JS file. I write CSS (in the form of SASS/CSS modules) for React components every day, although I sometimes use inline styles in my JS file as well.
I've linked to the stackoverflow page where I've explained the game, but heres a codepen to: http://codepen.io/anon/pen/objWKN Im doing LDjam and im lost on this, so any help is greatly appreciated. 
Just a correction for readers, it doesn't really compile down to native code. The js executes native code for you. This is the reason you can update apps without actually updating the installed native app.
Or you can use npm v3 which has flat dependencies and not have this problem at all :)
Love it
http://codepen.io/anon/pen/ZQbyeP
Source: We made a plugin that managed a native WebView within Cordova and wrote a small API that managed that native WebView. https://github.com/tgardner/cordova-androidwear Here you already have a plugin for Cordova. This way you can make an Android Wear application and use Cordova to communicate with it. With Cordova it's pretty easy to combine native and web.
Use something which isn't broken, with a future which isn't hamstrung by the choice of dumbed-down market.
 console.log(Math.random()) This code should work.
Yeah - this has been a life saver, but I wasnt aware of it when it occured. I was confused initially when I opened my node_modules folder expecting to see 6 folders &amp; instead saw 40.
For Angular I was using [John Papa's styleguide](https://github.com/johnpapa/angular-styleguide) - would you know of anything similar for React?
Building a node js app would be a first good step
Oooo my mistake. Thank you for the correction. 
I have used React and I have no problem using HTML. It's just the styling that I have zero interest in. 
english.
Nice! 
Not as far as I know. It can only communicate with the Android Wear application (which you need to make separately).
I assume only Native Java apps run on Android wear at the moment. 
Then I don't get why you're trying to do front end work. 
What does React Native give you that you don't get from just using the native frameworks, in that scenario? My understanding is that React Native gave you: * A FRP-based framework for laying out views and managing state in a UI. * The ability to build your app with Javascript instead of Java/Objective-C/Swift. When you don't have a UI and instead are stringing together a number of hardware functions to send data to the network, what's the benefit?
(Co-creator of React Native here) The biggest principle behind React Native is that you shouldn't be able to tell that it is not a native app. If I hand you an app written with React Native and you are able to tell that it's not a native app, like I can instantly tell if an app uses a webview, then this means that the project is a failure. The goal is --not-- to be a cross platform project for cheap apps. The goal is to produce the best possible apps. I believe that React is a better paradigm than what the iOS and Android frameworks implement. Writing code using React should make it easier to write higher quality apps. Please don't take my words for it and download Ads Manager and Groups apps from Facebook. I think that we deliver on the vision for those two apps.
Yup. I see it all the time. A return value that doesn't contain a property, and then code that doesn't check for its existence causing failure. 
That's the point of why I am doing this, I am learning Mongo and how I learn is by playing around, since it's easier for me to learn that way. 
Something's up with your "poll" example. Missing some code or something. It's the same on the page dedicated to polling: https://davidwalsh.name/javascript-polling function poll(fn, timeout, interval) { var dfd = new Deferred(); var endTime = Number(new Date()) + (timeout || 2000); interval = interval || 100; (function p() { // If the condition is met, we're done! if(fn()) { dfd.resolve(); } // If the condition isn't met but the timeout hasn't elapsed, go again else if (Number(new Date()) 0; }, 2000, 150); It's incomplete.
Not a styleguide specifically, although there is [Awesome React](https://github.com/enaqx/awesome-react) which contains links to many resources for learning React, at both beginner and advanced levels.
I enjoy working with frameworks and solving client side problems. 
This code looks outdated at best. A lot of the questions are never answered in a Q+A style like the deconstruction question
Writing CSS based on a comp is not programming either, what would you call it, styling implementation? I do not enjoy adding shit and refreshing for changes. There is no logic involved with CSS! 
Which is a shame because I would love a generalized polling function.
Sorry, I don't have a perfect term for exactly what I'm doing at the moment I am writing CSS. FWIW I haven't written plain CSS, as opposed to SASS, in years. And true, it's not exactly programming, but it's certainly programming-adjacent.
Ancient history.
Yes, it's possible. We wrote the infamous Travelocity popunder somewhat like that. Don't do this though unless you want your users to hate you and never come back.
Plenty of frameworks on the back end. Have you heard of Rails? Laravel? You're not making a lot of sense. 
You need to decide if you want to get the project running or play with the latest tech toys. If you want to get the project running, you need to focus more on your goal. There are different ways to do that. I suggest you read up on things like Scrum, Minimum Viable Product (MVP), Getting Things Done. Those are about getting things done and you might be able to use those as a way to focus your own work. I have a hobby project of my own. My goal is to get it to Mac App Store. I use a prioritized backlog (TODO list) to focus my work. I've simplified it from previous versions by reducing the functionality to bare minimum while still being very useful. I'm doing it first in Java (which I know very well) to get it running and to get feedback from my friends. Then I'll port it to Swift and that version is going to be released. Coding is just a small subset of the whole project, so investigating a new language might derail me before I have a working tool.
This is all pretty damn terrible.
Well turned out to be a utf-8 issue, safe to say that this is now solved :)
you mean you can't understand that sentence which is not entirely well phrased grammatically with a distinct lack of punctuation when posted on the javascript subreddit even when it exists and even perhaps doesnt make any sense at all?
Front-end engineering is the job I dream to do. Could you give me an advice to be more in touch with the profession ?
On the frontend you will almost universally be hitting CSS. Designers aren't going to build CSS without also building the HTML and JS, and most always they're going to focus on making good designs rather than writing any markup. Try out backend stuff, or learn the entire JS stack and eventually you'll just be building systems on the backend that push out json or stubbed frontend react apps. No more browser compatibility nonsense or shitty DOM interaction. Tldr, yes web engineer might be better though because yeah, lots of app logic is moving to JS on the frontend but if you want to do that competently you'll need to bring in some DB and backend knowledge. Depending on the size of your shop you can pass off the style implementation to a junior or frontend focused dev as well as long as you provide a basic HTML component for them to work with
if you use lodash there is a 'get' function that accomplishes this
I remember finding a program called "Path Too Long" but it's good to have an open-source way to fix paths that are too long.
I don't think lodash is relevant for the kind of functions the article talks about.
I am a front end engineer and I do very little html and CSS. We have a designer who delivers html and CSS to me. I make it work in the framework. This was the case at my last job as well. I do some html and CSS, but especially the CSS is more 'owned' by the designer.
I'm sure this'll get picked apart by those better versed in JS than I, but here is a rudimentary poll function: function poll(func, timeout, interval) { timeout = timeout || 2000; interval = interval || 500; var context = this; var intervalId, timeoutId; var tick = function () { if (func.call(context)) { clearInterval(intervalId); clearTimeout(timeoutId); } }; intervalId = setInterval(tick, interval); timeoutId = setTimeout(clearInterval.bind(null, intervalId), timeout); };
It's been an option since version 4 iirc
Do you have an example? Regex start and end with / unless you use the constructor in which case it's a string. How can you rely on a new line? 
Bit too broad of a question -- there's been job advice elsewhere on this sub though, or I could help if you ask something more specific. 
Adding pipe to object does NOT achieve the same thing. First, you can't pipe strings and numbers. Second, it has a runtime cost whereas the operator does not.
Hi /u/plywoods, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `codingsight.com` and `codingrefs.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [codingsight.com](/search?q=%28and+site%3A%27codingsight.com%27+author%3A%27plywoods%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|10|67% [codingrefs.com](/search?q=%28and+site%3A%27codingrefs.com%27+author%3A%27plywoods%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|33%
Yes, but if you use babel to compile, you can run jsx in .jsx and .es6 files so it's really arbitrary. Also, jsx isn't another type of code, it's just javascript.
The OP had code that essentially looked like this: var res; for(...) { if(someCondition) { res = something; } } return res; except as soon as `res` was set, it could have broken out of the loop. The issue was that OP let the loop continue running and executing the conditionals instead of breaking out of the loop.
Safari just implemented shadow DOM a while ago in nightly builds. They pushed for webcomponents right after the shadow DOM api was finalized. I believe this statement was pulled out of your fingers.
As far as I'm aware, the reason people name files .jsx (or occasionally .react.js) is so their editor/linter understands what the file contains. Some are capable of making this distinction from the file's contents, but if your expectation is that *any* editor/linter is going to pick the file up appropriately on its own, naming it .jsx or .react.js does the trick. You get weirdness either way. If you're using the .react.js syntax, you don't have to specify the extension, but you will have to specify the .react part. If you're using .jsx, you have to import the full file name. But, I'd rather specify .jsx on my imports and not have to fight my editor. It's less work in the long run. There's also the argument (and one I think is worth considering) that there's a point to naming files that can't be interpreted without transpilation with a different filename than .js. This is why some people name ES2015 files .es6 instead of .js. I don't personally take things that far, but I do see the argument.
I find it much simpler to use the native MongoDB driver instead of Mongoose.
nice. If you have not already made a yeoman generator or slush config for this it might be good as a barebones scaffold for spinning up fast. 
But in that case, it's enough to do a simple truthy check, like `if (object.myPropertyIHopeExists) then...`. **EDIT: But proceed with caution, see reply below.** `hasOwnProperty()` is really mostly useful when iterating over object properties in a `for..in` loop, so you don't pick up inherited properties (for which you can also use [Object.keys](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)
With the rise of SPAs, a lot of stuff that was part of the back end is moving to the browser, and there's certainly room for developers working on the front end but specializing in "traditional" backend tasks. That being said, you're still writing code to run in the browser, and that means that the DOM and CSS are at least *somewhat* unavoidable. The app your working on is slow, or is rendering wrong. Why? It's your job to at least figure out the problem. Plus, while React is a joy to work with, JSX makes designer types break out in hives. Someone needs to actually write JSX, and that's going to be you, not the photoshop jocky. My current job is something like what you're looking for; I was upfront in my interview that while I know CSS, I'm not very good at it, I don't enjoy working with it, and any UI I'm responsible for making will look like it was designed by a dyslexic, colour-blind squirrel. And maybe...90% of my time is spent writing "pure" JS code. But sometimes I get a PS mockup from the designer and I need to get stuck into screwing around with columns and padding and margins and box models, and that's just how it is. So...yes you can find a job where the focus is not CSS. But you are going to struggle to find one where you never EVER need to touch CSS, and I don't know if you *will* find one where you don't need to even know it.
good idea! (although a bash script would be more suitable i think)
&gt; you can't pipe strings and numbers You can in strict mode. &gt; it has a runtime cost The ES guys are ok with this, see `Array.prototype.map`. That said, you can reduce the runtime cost to near-zero by implementing as `pipe(x, ...pipes)` instead.
It is NOT fine. It is STUPID, you moron. If by "fine" you mean it works you are right - many things "work". Hitting you piece of shit on the head sure *works* in stopping stupidity.
First and foremost, do NOT use `setInterval` for animations. Use `requestAnimationFrame`like any normal and reasonable programmer. Courses (by W3C no less) for you, since they seem to be necessary: - [HTML5 Part 1: HTML5 Coding Essentials and Best Practices](https://www.edx.org/course/html5-part-1-html5-coding-essentials-w3cx-html5-1x) - [HTML5 Part 2: Advanced Techniques for Designing HTML5 Apps](https://www.edx.org/course/html5-part-2-advanced-techniques-w3cx-html5-2x)
&gt; if requestAnimationFrame is unavailable. Are you fucking stupid? Who let all those morons out today? You mean if you write animations for IE 7? How about you just don't, because those old browsers already are slooooooow enough without having to handle animations? Which on those browsers are unlikely to have any actual purpose but "show", or do you claim anybody writes games for IE 8 and earlier? http://caniuse.com/#feat=requestanimationframe
Object.keys forever
You might want to look into a mapping library like OpenLayers or LeafletJS, I assume Risk uses a proper world map? You can use a mapping library to load vector data (you'd want a World Boundaries geoJson file or similar) which will then allow you to interrogate individual shapes/countries. 
you're right, i'll probably re-implement it as a bash script lol. this just took a short amount of time
Your best bet would be to draw your board as an SVG, with events attached to individual polygons. You could do this in either D3 or Raphael.js (the former is more commonplace, but the latter supports legacy browsers). You could also just have a static SVG image with the shapes already drawn, and bind them to your application with ng-clicks. Not sure what would be the best way to draw the pieces in an Angular app, though.
Cool stuff. Going to do some reverse engineering=)
Now everyone knows the OP's identity
Where the fuck is your problem man? .animate uses "requestAnimationFrame". Worst case in this code is that the interval-function is not called every X seconds, which means that it would not reach the end before turning around, if you have the tab in the background. Yes, it *is* fine. And I've written *very* animation-heavy code in JS. And you are the one insulting me. I am sorry if I hurt your feelings, but what is the exact problem with this code that you call me "a piece of shit" over it?
Not equivalent/enough for properties with falsy values. var foo = { myPropertyIHopeExists: false }; if (foo.myPropertyIHopeExists) { console.log('hello, world'); } if (foo.hasOwnProperty('myPropertyIHopeExists')) { console.log('hello, world'); }
I don't really see how else this could work. You want people to be able to click on each county, yes? So that means defining a shape that matches each country. You could also overlay low-fidelity polygons over an image, I suppose, but the user experience might be icky. Perhaps you could find an open source RISK SVG in the wild.
That sounds a lot like what companies describe as "Javascript engineer"
GetAbsoluteUrl can cause memory leaks on some browsers, DOM elements created should be attached at some point to the DOM. otherwise they could dodge being GC'd even if there are no remaining accesible references to them. Then again this is harfly a problem unless you regularly execute this function or do so within a loop
Or you could open a text file called "Notes".
I honestly don't remember it off the top of my head, this is from about 3 years ago. 
Ah, there's a standalone port option. I changed package.json to: "scripts": { "start": "webpack-dev-server --port 8010", "build": "webpack",
Looks great! How did you do this?
Took my words out of my mouth!
Well, to use this method I'll need all countries in the world, scaled properly and in separate files. Maybe this'll work, I'll look into it! Thanks! 
This looks like Java, not JavaScript. Though it is a script...written in Java.
Well according to [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) there aren't any special cases that I see where a newline/semicolon is required to terminate a regex. There are the two main ones, `/abc/` and `new RegExp('abc')`. I've been working for an entire year (at my job) without semicolons, and all my personal projects as well. I use lots of regex all over, and experience no issues.
I would be jsx syntax will get standardized in ES2017-2020 so I write everything as js, no need to change my file types just because I am using react. 
JavaScript takes time. I've been using it for 3 years and only now feel fairly comfortable with it. Just keep practicing. Look through github projects that use JavaScript. Learn the design patterns like IFFEs and Modules. Really understanding context (`this`) is pretty huge. 
A few things... 1) I think you meant to post this to /r/java 2) Your 'count' variable is incremented before you get to your statement saying "perfect now enter a number", so that line of code will never be executed. 3) In your if statements, you're testing to see if inputScanner already has a token available as input to test, rather than what the user will type next. 4) In your 'error' section for 'else', you're going to want to stop the loop. To do so, you should put a 'break;' statement after printing out "error". In loops, "break" will exit the loop, and "continue" will start the next iteration of the loop. 5) I'm not sure if your professor has gone over this or not yet, but these statements should really be in a try / catch vs if's / else's. If you guys haven't learned that yet though, don't worry about it for now, it'll come later.
Make a slideshow of motorcycle images. (Add jQuery to your page plus a carousel plugin and it'll be one line of js)
You're looking for a JavaScript Developer role, not Front End Engineer. You are still expected to have excellent CSS and HTML capabilities, but I doubt you'll be doing much styling. https://www.spotify.com/br/jobs/view/oZV71fwM/ If you're interested in working on the *client side* then I doubt there are positions that have no styling involved. Honestly, you should consider a Software Engineering (*actual* engineering, as you bolster) role or Back End role if you want to avoid styling.
thank you!
According to [mdn](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval#Ensure_that_execution_duration_is_shorter_than_interval_frequency) it's safest to just use setTimeout here, and skip the setInterval entirely. Also their code example is significantly simpler.
It is **A** future, not **THE** future.
Blog spam? Check. Shitty list "article"? Check. Worth a click? No.
Considering the direction the language is heading, very unlikely. The kind of language that would rather create a new keyword for defining variables, than to introduce block scoping into existing vars, is not going to break all scripts that don't use semicolons.
Start with a small HTML game, like rock paper scissors ? That was one of my first JS project. After this, I did a minesweeper game.
You might want to start with a good overview of the language then. try reading [this](https://github.com/getify/You-Dont-Know-JS/blob/master/up%20&amp;%20going/ch2.md) intro chapter on You Don't Know JavaScript. It's a good book series that might help you get oriented.
this looks really good thanks!
that sounds feasible, I think I tried that before in the JS tutorial at codecademy but I was just regurgitating at that point.
Most apps are going to use async/await** simply because you generally don't need much in the way of asynchronous control flow. For the times you do need the control, Rx has a wonderful set of features. I'm still not completely convinced it'll be the future simply because of the size of the library. The 5 alpha is better than the previous versions but it's still in the 100kb range, which is fine for the core DOM abstraction but heavier than I'd like for an async abstraction. I kind of like [flyd](https://github.com/paldepind/flyd) but haven't used it in anger. I do like their marble diagram test framework. I wrote an app in Bacon last year and it would have been really useful. ** I'm still annoyed TC39 decided to copy C#'s async/await instead of F#'s async computation expressions.
[removed]
Well, after doing Codecademy, I got immediately into ITSM platform development (which was probably the most lucrative and lucky move I have ever made in my life). I was lucky though, as I already had strong experience with relational databases, SQL, C# (and a half dozen other related languages), and a bunch of other related stuff. It also helps that I have a heap of certifications, several of which are in information security from Symantec - which also happen to be the certs that I wrote myself; both the training and the exams for. So in an interview, I always get to humble-brag about that, like: "In the interest of full disclosure, several of my certifications in information security from Symantec are ones that I wrote myself, so I don't know if I can count those." Anyway, I recommend building a simple interface in an HTML webpage that has a few fields and buttons, and then building a big script include that you can leverage to do some work. With that basic template, do some stuff! All kinds of stuff. Whatever kind of stuff you like. Here are some examples: 1. Output a 3x3 board, and build a tic-tac-toe game. 2. Make a morse-code translater that turns any input text into its' morse code string equivalent. 3. Build a function that parses the email addresses out of a string (here's a regex you can use to determine if a string is an email address): https://jex.im/regulex/#!embed=false&amp;flags=&amp;re=%5E((%5B%5E%3C%3E()%5B%5C%5D%5C%5C.%2C%3B%3A%5Cs%40%5C%22%5D%2B(%5C.%5B%5E%3C%3E()%5B%5C%5D%5C%5C.%2C%3B%3A%5Cs%40%5C%22%5D%2B)*)%7C(%5C%22.%2B%5C%22))%40((%5C%5B%5B0-9%5D%7B1%2C3%7D%5C.%5B0-9%5D%7B1%2C3%7D%5C.%5B0-9%5D%7B1%2C3%7D%5C.%5B0-9%5D%7B1%2C3%7D%5C%5D)%7C((%5Ba-zA-Z%5C-0-9%5D%2B%5C.)%2B%5Ba-zA-Z%5D%7B2%2C%7D))%24 (this sub won't let me use url shorteners, and won't accept a url containing parentheses). 4. Build a game. Start with a really simple version of a resource management game. [Something like this](http://wahming.itch.io/spaceminer-alpha), but way more simple. Then as you learn more and think of new features, add on to the game! Sometimes you'll realize that you've done something in a way that makes it hard to do other things that interact with it -- for example, if you saved all of the resources into static variables in a certain scope, and you can't access them from other functions or something -- this is okay! Learn as you go, and don't be afraid to re-write stuff! Nobody is judging your code, except you; and you're learning! Edit: Here's [some of the code](http://static.itch.io/game.min.js?1449999416) for that game. If you use a good editor like notepad++ or "Visual Studio Code", you can paste it in and beautify it a little bit. Don't be scared of the wall of text. Pick a small portion and see if you can figure out what it's meant to do. Remember that huge projects are built modularly, one tiny piece at a time. Finally, if you need any help or have questions, I'm available to assist. Message me if you'd like my skype or Google Hangouts address. 
Which leaves the majority (4) of the functions. And those are pretty browser-specific and not covered by lodash. Sure, you can get `once` and `debounce` from lodash. But those are really the less interesting functions mentioned in the article.
I've come up with this, based on that article. This one calls immediately as well, which my previous attempt did not (I'm still learning :)): var poll = function (func, timeout, interval) { 'use strict'; timeout = timeout || 2000; interval = interval || 500; var context = this, total = 0; function ticker() { total += interval; if (!func.call(context) &amp;&amp; total &lt; timeout) { setTimeout(ticker, interval); } } ticker(); };
Use [nvm](https://github.com/creationix/nvm).
Corrected and fixed thanks for pointing that out.
Coming from a react perspective... To me this seems like something solved by flux? Especially when using redux - your reducers handle the business logic. To me this actually holds business logic in the sense it's querying to the store to decide whether to show part of the component. 
To install in global paths, you have to either have root/sudo access, or change the permissions on those global directories (not advised). The workaround would be to install it locally in your homedir or somewhere you have write access.
I wouldn't consider this a workaround. This is how you should install devtools on your computer. Are you sharing your computer with someone else? Probably not. 
NPM has some info on this: https://docs.npmjs.com/getting-started/fixing-npm-permissions I have also encountered this problem, and I linked the article I used to set it up on my Mac at the bottom, but I would check out NPM's resource first. As other have said its because the default global location requires sudo privileges to write to. The best solution is to setup NPM and Node to use a custom directory in your home folder. The downside is that other users in your system won't be able to read/write and probably note exec. But I don't know a lot of developers who have this problem locally. If you're trying to do some server level stuff then yea, you may want to leave it and change the perms on the default directory. Here's the article I used to set it up on my Mac: http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/ 
You can! You just have to set the global install directory to be somewhere you have permissions on. npm config set prefix /Users/ExNihil/npm
You typically don't call Babel directly in your source anywhere, you run it as a preprocessor before executing your code at all. The setup page covers most use cases: https://babeljs.io/docs/setup/
So, is Babel to JavaScript kind of what Sass and Less are to CSS?
Sure, you could look at it like that.
There are lots of options - but in you would start by installing node js and npm, then install babel with npm. Then you can [compile from the command line](https://babeljs.io/docs/usage/cli/). For a more advanced setup you could use gulp or grunt. I have gulp set up to watch a folder called /ES2015, compile any files that change in this directory with babel and save them to a folder called /scripts. It's a little more complex to set up than I can explain here, but there are a lot of tutorials online. I recommend gulp over grunt as it's syntax is simpler. You will probably have to set aside a day or so to get up to speed on all of this, but ultimately it's worth it. My setup compiles any es6 or scss files I save, combines and minifies the files, and automatically reloads the page whenever I change files in the project directory. It's a huge time saver, and has more than paid back the time I put into learning the system.
Just babel and babel-cli Edit: I'm not sure of how to answer your second question.
So, how does one go about learning security?
Both of you are right. Coming from the MeteorJS perspective where Flux has not been adopted for the UI Framework Blaze, I think the action module pattern described here is fitting to separate view and logic. But having used ZenAction in a flux implementation let me describe to you the flow (this is in a MeteorJS reactive context mind you) Store dispatches action. action hits the reducer. based on the action type reducer hits the ZenAction. ZenAction creates a new state and updates the store automatically thanks to Meteor's tracker library. The key here is in Meteor, Stores are reactive...so there is no need to listen to them via callbacks. 
You need to first tell Babel what it is going to do to your code. See [these instructions](http://www.2ality.com/2015/11/configuring-babel6.html) for a quick discussion.
Yeah, im with you there. This is solved by flux...but there is no requirement you have to use a dispatcher at all. nor redux. As long as you can have a unidirectional flow in your app, this should work fine 
I've read that, and it doesn't really clear things up; in fact, I might say that it probably confuses matters a bit more. I'm not sure where precisely this configuration file should exist within my file hierarchy--whether maybe it should exist within my .vimrc or whether it should be a file within the project's directory. I'm not sure. Despite that, I still am missing the babel command from the command line.
&gt; Well, no, you can name your files as you want and give them any extension you want. What does that have to do with anything. Sod off with your strawman argument. &gt; If tools that you are using written in such way that they cannot be told to process files despite that extension does not meet their expectations, that's a problem of a tool. What the hell are you talking about. &gt; We (humans) do use extensions to mark content of the file, in this way we can simplify file for other humans or make a suggestion to a tool how to treat such files, but it is only convenience. Yeah no shit sherlock. It's more than just a convenience - it's common sense. Why would you have audio files with text extensions? You wouldn't. What are you arguing about and with whom? Are you high? &gt; Yes, I would unpleasantly surprised, if I've found html in file with json extension, but it does not make this file invalid. What the fuck are you talking about. Seriously. Nobody is arguing about what file descriptors are and how they work.
Of course it "works" - nobody is arguing that - but jsx needs to be transformed and having files with jsx in them with a .jsx extension makes a lot of bloody sense.
I think op meant that the API was written in JavaScript, so it still fits, I think.
Hey Doonka, I understand that your life is miserable. I went through your profile and all I could see was negative comments . You know what? Internet is the life for you. Trying to be the hero of the Internet , trying to prove yourself? Well I understand the spam part so I agree on that. But the list can be a good start for a beginner or maybe not but its not for you to decide. Something that might look good to you can be the worst thing for someone else and vice versa.All I am saying is that you can throw your opinion and others can too but just relax , this will not end the world. I have used GSAP , Vivus and Favico in a few of my projects and I would suggest other people to use them too. Btw you can get rid of that kind of negativity , It won't help anyone :) . 
Tossing my own out there: function pollUntil(fn, cb, delay, endTime) { delay = delay || 1000; endTime = endTime || Infinity; var wrappedFn = function() { try { if (fn()) { cb(); } else if (wrappedFn &amp;&amp; (Date.now() &lt;= endTime)) { setTimeout(wrappedFn, delay); } } catch (e) { console.error('Poll Err: ', e); } } wrappedFn(); return () =&gt; { wrappedFn = null; }; } var isAjaxDataLoaded = () =&gt; { console.log('Waiting for data...'); return !!document.getElementById('ajax-data'); } var cancelMe = pollUntil(isAjaxDataLoaded, () =&gt; { console.log('Data Loaded!'); }, 1000);
Whether it benefits the client or server is entirely up to you. Node.js is slowly adding support for ES6 features — for example the fat arrow feature is available in the 4.x branch and the spread operator is available in the 5.x branch. If you want to use one of those features in code that you write that will run on the server, then you have the choice of either using one of those newer versions, or if you're stuck on the legacy 0.10.x or 0.12.x versions for whatever reason (e.g. that's all your host offers, or you're just conservative) then you'd need to use Babel. Or maybe you want to use an ES6 feature that isn't supported in any released version of Node.js yet. Most JavaScript projects already make use of a build automation tool like Grunt or Bower. This is particularly the case for code meant for client-side use, because there's a whole laundry list of things that need to happen: static analysis (e.g. JSHint), bundling, minification, source map generation, compression, etc. Adding Babel to transform ES6 to ES5 is just adding another step in the existing workflow.
In short: no it is not the future. RxJS is bloated and comes with a significant performance impact. However ideas found in Rx are making their way into Javascript the language. In particular observables that makes up the foundation of Rx is available in ES7.
My posting history has nothing to do with what's clearly the truth. You posted garbage and you got downvoted - suck it up and wipe away the tears. But nice try at deflection, asshole.
Yeah that's kind of the only thing I was coming up with. Though I'm not sure how to implement it, I'm sure I could find some instructions somewhere on google.
On mobile, so linking is hard. Google for jQuery and add that to your page (it'll look like `&lt;script src="http://cdn.blah.com/jQuery.min.js" &gt;`). I think the name of the plugin I was thinking about is `cycle.js`, but I could be wrong. If you run into trouble, search on Google and stackoverflow. They'll have the answer!
Oops, you're exactly right! I was viewing the site on my phone and didn't notice the Github icon. It does look like the API source code is on Github. Sorry!
Babel always looks for a configuration file (e.g. `.babelrc`) relative to the file you want to compile. Possibly helpful – the CLI command `babel-doctor`: http://babeljs.io/blog/2015/11/03/babel-doctor/
The babel command doesn't exist at all. :-\
ES2017 isn't javascript!
ES2017 isn't javascript!
So what's the problem? It seems like you have the resources to do this, so what is your question?
&gt; more or less the final story as far as JavaScript view libraries go Literally stopped reading after this. What an idiotic thing to say. Something better, faster, simpler, securer will always come out. 
this is pretty cool - thanks!
I think since you're only calling generateFaces() it doesn't run the for loop. Put the for loop inside the function and then call it.
Ok so I ended up going with slick: http://kenwheeler.github.io/slick/ I followed the instructions but have no idea what I did wrong: https://www.lampbusters.com/squeezit/cis233da/final/picturegal.html Help :(
https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
Huh. First time I've heard of [fetch(url)](https://developer.mozilla.org/en/docs/Web/API/Fetch_API).
LocalStorage can only hold strings. If you want to store more than one item on a single key, you can use `JSON.stringify` to turn your object into a string. When you load it, you have to call `JSON.parse` on it.
**edit:** apparently I lack basic reading comprehension. use JSON.stringify and JSON.parse for your needs.
http://arstechnica.com/information-technology/2015/06/op-ed-safari-is-the-new-internet-explorer/
I was wondering if someone could point me in a better direction for what to do after the folders are checked for changes.
Is there an actual practical use for this?
Yes when working in an environment that has access to it. But small client side apps do not have this its a hassle to copy past that into your code. And besides that is it makes you code look ugly.
It's so much nicer than XHRs!
Object.observe() is dead, it's not going to be part of javascript http://www.infoq.com/news/2015/11/object-observe-withdrawn
Object.observe !== Observables
And your search ends here: [Eloquent JavaScript](http://eloquentjavascript.net)
Using MaterializeCSS and I can't seem to get the select box working as it should. http://materializecss.com/forms.html
Working on a yeoman generator at the moment. I've never made one before so it's a bit of time getting familiar with what to do. 
you need to initialize select $(document).ready(function() { $('select').material_select(); }); [jsfiddle](http://jsfiddle.net/0gwftbnv/)
Same story as usual: you should not manipulate the `prototype` of any built-in object because it often breaks stuff.
FWIW, Rx5 is set up so that you can just grab the parts you like - `Observable` by itself is ~10KB unminified. You can then pull in in the individual operators as you like, either by patching the prototype, calling `operator.call(observer, fn)` or (my favorite) ES7 functionBind.
Neat!
i've tried a few functional reactive frameworks for javascript and like https://github.com/cujojs/most most. it's nice how they integrate promises and a very lightweight and performant set of frp primitive operations. rxjs seems bloated to me
https://github.com/cujojs/most
I believe he's asking for the proper syntax to follow.
Alright, well both are technically correct in terms of syntax. And even though != and !== behave differently, I think in this case they would produce the same result. I'd still go with !== because I think it is marginally faster. 
re: "interesting numbers at 29min" - here's Paul Lewis full talk from #ffconf last month in which you can find more detail on them: https://www.youtube.com/watch?v=_yCz1TA0EL4 
Batman! I'm so sorry, but I couldn't help reading your title that way.
! isNaN( NaN ) ? https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/isNaN Also.. Array(16).join('wat' -1) + " Batman!"
Looks nice enough. I'd like to see a nested/tree example
The OS X app that inspired Zeal is Dash: https://kapeli.com/dash
O’Reilly offers DRM-free PDFs. Books on ES5: * [Nicholas C. Zakas has written a few good books](http://www.oreilly.com/pub/au/3902) * “[JavaScript: The Definitive Guide](http://shop.oreilly.com/product/9780596805531.do)” by David Flanagan * “[JavaScript Patterns](http://shop.oreilly.com/product/9780596806767.do)” by Stoyan Stefanov * “[Speaking JavaScript](http://shop.oreilly.com/product/0636920029564.do)” by me ([check it out online for free](http://speakingjs.com/es5/)) The following are books on ES6 that are free to read online, but also available as PDFs, via either Leanpub or O’Reilly: * “[Understanding ECMAScript 6](https://leanpub.com/understandinges6/read/)” by Nicholas C. Zakas * “[Exploring ES6](http://exploringjs.com/es6/)” by me * “[JavaScript Allongé, the "Six" Edition](https://leanpub.com/javascriptallongesix/read)” by Reg “raganwald” Braithwaite * “[You Don't Know JS: ES6 &amp; Beyond](https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20&amp;%20beyond/README.md#you-dont-know-js-es6--beyond)” by Kyle “getify” Simpson 
Q: does riot.js still use dirty checking? (If so what was the decision behind that, except IE 8 support - if supported)
That works. Awesome. Thanks for the help. Also fixing the checkNumber definition.
According to reddit, you MUST use all these things. I get downvoted into oblivion every time I say otherwise. And I've been saying otherwise for years.
Anything that has "plugins of the week" are nothing anyone needs.
The older I get, the more I've come to loathe everything "smart" or "clever". Code should be as dull as possible.
If you read the spec, == does a lot of of type checks to allow cross type equality. Same is true for + and the relational operators. Try + versus - for example. 
I did watch Chris' presentation. There isn't a lot in the presentation to talk about. He covers his background, browser evolution, complains about library complexity, etc but I didn't find any of his observations more insightful than the same observations made in random internet threads on javascript which make the same complaints. I don't see the proliferation of frameworks as being "about cool things", though there is a degree of that. It's a monkeys-on-typewriters approach to finding the "right" way to build web apps. Each successive generation of "hot new framework" has resulted in a smaller application state space. Progress is being made. You specifically called out the chart at a point in the presentation as interesting, which IS about React.
I want to know about what's hot in companies regarding javascript. I want a job where I focus on code, that's all. So if you know about this... I'm a student, I do freelance, I don't want to start a company, get a tax number, care about zillions of stupid administrative things, search and meet clients.
Just use babble 
Thank you for your encouragement ^^ I prefer to use the variable.method(parameters) syntax when possible.
If you're into design patterns, this is the best free resource I could find. [Learning JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/)
I like reading/listening to his material, but I always take these browser devs and dev relations people with a mountain of salt. I think they lay it on really thick and their advice mostly applies to organizations that have dozens of developers and budgets in the millions. Overall in smaller places, I feel like you choose between doing 10 features that work for 95% of users/cases, 8 features that work for 99%, or 6 that work for 100%, and they say if you don’t do the 100% one, you’re a horrible monster. Give product/business owners that choice and see what they say. All about the users, but when the users want more features out of the web, like they have on native apps, what do we do? We add them via JS, and then we’re "Breaking the Web" and we "used things too early". All about the users, but then completely dismisses IE with a "Internet Explorer is dead. windows 10 is free and the browser is evergreen". How does that match up with your experience? Can I support them with polyfills? Nope, that goes against his rants about twitter doing that with their button. "Don’t fix problems before they happen", but if you have a node solution that works for you and your 5 Mac developer team, you’re "terrible" and you have to spend time fixing a problem you don’t have. Make it work on windows, you monster!
Here's an ES6/Node version. https://github.com/n3dst4/twelve-days-of-xmas-kata/blob/master/src/twelve-days-of-xmas-kata.js Can install with npm install @n3dst4/twelve-days-of-xmas-kata@latest -g and run with n3dst4-twelve-days-of-xmas-kata There's a test too, if you rummage round the repository.
Cool! I would love to see a blog post with some real-world examples. Thanks!
Here's my shot at it: https://gist.github.com/jhixson/7294fb508ebb2e578906 You can run it with `babel-node` or paste in into the [Babel repl](http://babeljs.io/repl/).
Netflix has put out a lot of content about RxJS as well. Check Youtube &amp; Egghead.io for videos by Ben Lesh, Jafar Husain, Paul Taylor, etc....
Upvote for capitalizing FIVE GOLDEN RINGS :)
&gt; Like String.prototype.myMethods.trim ? how do you access the string when you do that? String.prototype.myMethods = { test () { return this; // returns the myMethods object } };
I really enjoyed [Secrets of a JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X) by John Resig, the main person by jQuery. I found it to be really helpful as someone that was comfortable with JS and wanted to know more, but if I remember right the beginning of the book went over some more of the fundamentals.
If you have a global installation of Node, all your global npm installations would end up in other directory except your home directory. This is bad. Use nvm as the good man said, or install manually under your home directory.
I really dont like that the industry hasnt seemed to make the distinction between javascript (what i would call client-side) and html/css/styling (which i would call front end). Its pretty typical for a Ruby on rails dev to be competent in javascript that most RoR jobs are called full stack simply because its backend and 'front end' even though its really backend + clientside. With the pretty deep dependency on js frameworks these days i really hope the distinction between front end and client side is realized sooner rather than later. 
I think we agree that ambiguity is bad. Consider an engineer who says "For code style, our team uses standard JS". The statement is open to more than one interpretation due to the name of the project: 1) Their team follows a code style that is idiomatic, hence "standard" 2) Their team uses the code style project Standard JS People who have heard of Standard JS (the project) might know to ask a clarifying question, but others don't have that context and have to interpret the sentence as "idiomatic". Ergo, "Standard JS" is a poor name choice.
if still stuck, give me a shout. Just done this myself =)
The WebKit runtime alone is about 30mb even after UPX executable compression. Does this mean I have to package a 70mb installer on top of my existing app payload?
He's not writing JavaScript, though. He's writing CoffeeScript. And CS doesn't afford function hoisting.
CoffeeScript does not allow function hoisting. You have to think of each function as though it were being declared as a variable. Sorry.
Ah haaaaa. Thanks.
Thanks. I definitely want to look into ES6 anyway, so maybe it's time!
To be blunt, I can't see why anyone would even start a project in CS these days. You have all the same costs as using ES6, TypeScript or ClosureScript - transpilation, niche tooling - but none of the benefits. You're not investing in something with an obvious future payoff (ES6/7) and you're not really gaining much language-wise. It's a dead-end platform.
yes that's a tradeoff but that's not that important today. If you scroll down one page in apple's website you can download almost 20 MB
Thanks for sharing this. Taking time out to share knowledge is always appreciated.
dear god... another one. looks just a shitty as the rest. http://riotjs.com/guide/#tag-syntax yes, so intuitive and revolutionary. when will the JS community learn? please stop reinventing the wheel every damn day. &gt; Inline tag definitions(in document body) must be properly &gt; indented, with all custom tags equally indented at the lowest &gt; indent level, mixing of tabs and spaces is discouraged. lol, significant whitespace in my html files... the best feature of Python brought right to your markup language! 
* [Blog post on it](http://blog.rangle.io/managing-state-redux-angular/) * [sample app for a conference talk](https://github.com/e-schultz/ng-summit-redux) * [slides for the conference talk (PDF version is under releases)](https://github.com/e-schultz/ng-summit-slides ) * [ng-redux - Angular bindings for redux](https://github.com/wbuchwalter/ng-redux) It's not as popular as it is in React land, but I've been enjoying it.
Thanks for the reply. How can I check if an exception is mine on window.onerror event? Bind my listener to onerror and check the stacktrace each time to make sure first call is made from `app.bootstrap.boot` method? IIRC, checking for stack traces is costy on backend languages, not sure about Javascript.
this is 100% a reinvention of features of react, web components and angular. try reading the first paragraph on their homepage. &gt; Why do we need a new UI library? The frontend space is indeed crowded, but we honestly feel the solution is still “out there”. We believe Riot offers the right balance for solving the great puzzle. While React seems to do it, &gt; they have serious weak points that Riot will solve. let me translate that from JSHipster-speak. "After learning many frameworks, we fell out of love with them and decided to write our own, and THIS TIME it will be perfect". https://xkcd.com/927/ let me re-caption this xkdc. &gt; "Situation: There are 14 competing JS Libraries" &gt; "14?! Ridiculous! We need to develop a simpler library that finally solves this problem!" &gt; "Situation: There are 15 competing JS Libraries". 
Anyone who hasn't heard of Standard JS wouldn't even _know_ that they should research the project because "standard JS code style" sounds like "idiomatic JS code style". So the onus has to be on the speaker to say "We use this code style project called Standard JS" to avoid this ambiguity. It just seems like an inefficient name.
X-Post referenced from /r/node by /u/snollygolly [Koa.js/Passport/Handlebars/Bootstrap Starter Kit](https://www.reddit.com/r/node/comments/3ws8za/koajspassporthandlebarsbootstrap_starter_kit/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
Can someone explains me why its so much perfomant compared with knockout computed?
riot.min.js: 18K riot.route.min.js: 3K
Only about 6kb once minified and gzipped, too. 
I've been curious about the micro frameworks that are out there. Everyone seems to talk about the big ones (React, Angular, Ember) but not a lot of talk about the smaller ones that may be a better fit for smaller projects/teams. Anyone have any preferences in this realm? Riot, Mithril or others?
I want the barrier to entry for my users to be as low as possible. That means, ideally - 1. I want my payload to download quickly for real people across the world, whatever their connectivity may be; 2. I would rather eschew installers in favour of self-contained, portable applications; 3. I don't want users to freak out when they see a 120mb download for a lightweight GUI app. And that's what I'm likely to be bundling with this, because if I wanted to write a huge, rich native client, I probably wouldn't be writing it in JavaScript anyway. I just can't see myself ever using this.
`let` and `const` do not create closures, they just follow different scoping rules from `var` and `function`. **EDIT**: They do, and I had just thought a `return`-type construct was needed to create a closure; instead, just re-defining a variable from an outer scope can make a closure.
I thought the `error` event on `window` could only be listened to with the old "DOM0" method and not via `addEventListener` or IE's old `attachEvent`, because the function has a very different signature from a typical event handler. Also, I'd think a better idea would be to set up a function like this, in case the client has an error-handler too: var custErr = window.onerror; function ourErr(errorMsg, url, lineNumber, column, errorObj) { // do your logging } if (typeof custErr === 'function') { window.onerror = function (errorMsg, url, lineNumber, column, errorObj) { custErr(errorMsg, url, lineNumber, column, errorObj); ourErr(errorMsg, url, lineNumber, column, errorObj); }; } else window.onerror = ourErr;
Nananananananananananananan Batman!
Anyone know of any resources for someone that is completely comfortable with JavaScript but is completely lost with all of these tools you all talk about? I am looking at a rewrite of one of my apps I wrote before all of the .js and .io things existed and figured I could use the opertunity to get up to date, but I'm completely lost on how these things all work together. From what I can gather most of these are preprocessors, so I imagine there is some kind of build process to deploy it to a test / production server. Grunt, gulp, react.js, bower etc. Looking at the documentation for any of them it seems like here was a prequil that I missed that had a bunch of important information so the one I'm reading makes sense. Is there any kind of 'getting started' with all of these things to get an environment set up to get a working site? I'm also not clear on how many of these things only apply to node.js sites, it seems like several run in it.
??? Babel has nothing to do with modifying prototypes.
The main benefit of it being on the prototype is chaining. [1, 2, 3, 4] .map(x =&gt; x + x) .filter(x =&gt; x &gt; 2) .reduce((curr, next) =&gt; curr + next, 0); The syntax without chaining is much harder to read: reduce(filter(map([1, 2, 3, 4], x =&gt; x + x), x =&gt; x &gt; 2), (curr, next) =&gt; curr + next, 0); The other benefit is that it is more familiar with people coming from other languages, in particular java and .NET. The fact this article was named "extension methods" should be some kind of clue that the author saw this as a parallel to the .NET syntax.
[setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout) is your standard delay function in JavaScript. But it would necessitate that you put all your other code in a function so it can represent the block of code that happens after a delay. function startGame () { var cabin = prompt ... } setTimeout(startGame, 1000); // 1000 milliseconds or one second delay
Any reason you aren't comparing it to Vue.js?
The main optimization is that callbacks are lazy instead of eager. The meat of the implementation is in [cell.js](https://github.com/Riim/cellx/blob/master/src/Cell.js). The handler callback happens in the [`release()`](https://github.com/Riim/cellx/blob/master/src/Cell.js#L60) function and the trigger for this particular test is in [`set()`](https://github.com/Riim/cellx/blob/master/src/Cell.js#L558) which happens on nextTick. In the 1k layer demo, it's evaluating 4k functions for updates and 4k for handlers for a total of 8k function calls. By comparison, [knockout](https://github.com/knockout/knockout/blob/master/src/subscribables/observable.js) executes every cell on every set, which is 4 x 4000 x 4000 = 64M function calls.
preach it brother
I'd really like a second opinion if possible..
First off none of these methods in the article even have to do with chaining as they do not return `this` to make chaining work, and they're all simple things that honestly doesn't even need rerolling, just use lodash, which has a chaining method. Your argument is invalid.
I do actually tend to use vanilla JS, personally. But I can see the value in frameworks &amp; libraries, and I am interested in smaller-scale ones without as much of a footprint or technological buy-in as angular or react.
This is a bit like a browser-based version of Zeal or Dash, relying on the browser's persistent storage: http://devdocs.io/
Some websites are big and slow, so let's make our *desktop applications* big and slow too! /s
Kudos on that test case! Yeah, I really think the concept of lexical scope and closure are the single most important things to grasp for people who want to understand this language. Everything is based upon this including prototype resolution... and thus inheritance.
The "unknown reference pdf" is the Apress *JavaScript Programmer's Reference* (2013) by Thomas Valentine and Jonathan Reid, not to be confused with the much larger and similarly named references by Wrox in 2009 (by Alexei White) and 2001 (by Cliff Wootton); the 2001 edition is highly confusing, but it is worth a read if you feel like supporting old versions of Windows that won't even run IE6: It's how I learned that IE5.5 was the first version of IE to support `Function#apply` or `Function#call`.
I seem to recall that you can use backticks to include raw javascript in your coffeescript, like so: do -&gt; 'use strict' return angular.module('app').directive('loading', loading) `function loading() { }` You won't be able to use coffeescript in your loading function, but it should work the way you want (other than having to revert to javascript for that function.)
So you still use mosaic browser then?
It's been years since I've worked with Knockout so I'm not completely sure the semantics match but it looks about right. I think cellx is still more aggressive at eliminating work but it should reduce a lot of the difference. The [deferred updates plugin](https://github.com/mbest/knockout-deferred-updates) looks closer at a glance. 
Also check out FRZR: https://frzr.js.org 😉
If you have not been working with `node` and `npm` for too long, I would try [nodeschool.io](http://nodeschool.io/) to practice working with packages like `express` and `async`, and then `react`. The lessons there are really helpful and educational. IMO Its really about choosing a few tools to learn and becoming very comfortable with their ecosystem. Babel is pretty much mandatory right now so that is a great place to start once you are comfortable with node + npm.
Check this out: String.prototype.buzz = function() { return 'buzz'; }; 'something'.buzz().trim().upper() // 'BUZZ' No `this`, anywhere. The important part is that you `return` something, not that you use `this`.
I'd love a comparison between this and Vue.js
Pretty awesome. I had to write something similar for a project I'm on, since animating SVG is a total pain. Why didn't you choose to include Promise support? This would align better with existing tooling (jQuery, StateMan, etc), standards (WebAnimations), and allow async/await in the future.
[This](http://riotjs.com/examples/plunker/?app=live-filtering) one and [this](http://riotjs.com/examples/plunker/?app=router-complex) one have nested tags. Edit: stupid plunkr and stupid me not noticing...
This is because the term "micro-framework" is not typically applied to these projects, rather, the term "library" is much more appropriate. For example, knockout.js is a library for two-way data binding, but it doesn't really do much else besides that. Riot.js is more like a "prollyfill" library than a framework to me, assuming that the Web Components thing is going to actually happen. This would make it more similar to libraries like Babel or System.js, which also implement functionality that will soon be native to the browser. **Rant Time:** If web components do end up being a thing, I think it will be the first step toward eliminating this chaos of frameworks that JS is going through right now. Programmers simply seem to be looking for reliable, consistent, and enjoyable APIs to get the job done. In my personal opinion, this boom of JS frameworks causes severe analysis paralysis for teams, and discourages younger developers from learning what I believe to be one of the most rewarding and fascinating languages I have ever learned. Maybe that's just because JS was the first language I could really get things done in, but I find it so fascinating that it doesn't work like everything else and has its own "place" in the world. It's even more inspiring to see the community and its creators attempt to improve the most confusing parts so that new developers can jump in faster, in addition to making new performance strides and opening the Web platform up to other languages which may someday compete with JS (and, who knows, maybe even replace it as the Web's lingua franca?).
There's also [livescript](http://livescript.net/) if you're not feeling up to a huge rewrite from CS to ES6. Livescript is (mostly) compatible with coffee and has what you need in this instance: function util 'available above declaration' becomes function util() { return 'available above declaration'; };
In strictly-math terms, this makes sense; one element outside of a given set is not necessarily equal to another. Put another way, just because -1 is not a positive number, that doesn't make it equal to -6000.33 With that said, it *is* really inconvenient for programming.
Vue doesn't use the Virtual DOM, which adds more startup time, but apparently does its own optimizations when updating the DOM that makes it faster than other frameworks. https://raw.githubusercontent.com/lhorie/todomvc-perf-comparison/gh-pages/Chrome.png Supposedly this caused a lot of drama and everyone just agreed that benchmarks don't really mean anything in the real-world: http://vuejs.org/perf/ Not sure how fast Riot.js is...
I've been rewriting [Astral](http://astralapp.com) in RiotJS and I'm loving the experience so far. I have a really nice workflow going on using Browserify for modules, and Jasmine/Karma for tests. It feels a lot more organized and modularized than the old Angular code. 
aaand.... that was dumb of me. I've fixed them :)
Once a Firefox user, always a Firefox user
Here's the problem: I'm in the process of building the &lt;select&gt;&lt;option&gt; that's being put in a cell of a table that's also being dynamically generated. So at the time of generation, the table doesn't exist in the document yet. 
edited the op.
Hi /u/nightman, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Another thing is that Riot has official support for server rendering.
What's wrong with the official docs? They're great.
But look at the top of the list, Mithril.js, which does use a virtual dom, still won.
Kool :D
Note: This post is not an official entry for the [Best of 2015](https://www.reddit.com/r/bestof2015/comments/3wuhna/best_of_2015_awards/) festivities, though feel free to offer suggestions here for categories (best new project, best framework, etc.). Official posts will be stickied &amp; flaired, and hopefully will be up within a week or so.
This is the least of your problems. You should try .1 + .2 === .3 It's false, in case you were wondering.
Wherever the resource (file) is, Apache might not have correct permissions to access and read it. Or might be something to do with not having correct file/mimetypes set. 2 guesses off the top of my head.
You can do this, but it is sub-optimal. If I knew how to use call, bind or apply properly, I'd have a better answer. String.prototype.myMethods = {}; String.prototype.myMethods.titleCase = function (str) { var i, result = str.charAt(0).toUpperCase(); for (i = 1; i &lt; str.length; i++) { if (str.charCodeAt(i) === 32) { result += " " + str.charAt(i+1).toUpperCase(); i++; } else { result += str.charAt(i); } } return result; } var a = "salut c'est cool"; console.log(a.myMethods.titleCase(a)); //Salut C'Est Cool
Ah, React is the first framework that I've enjoyed learning and using. I couldn't get into Angular and strangely felt like less of a developer for it. Studied it for 2-3 weeks and just ditched it. In hindsight, I'm so glad I didn't invest a lot of time into it. But now I've jynx'd myself and something will take over React in the coming year :p 
Can you compare it to most.js? https://github.com/cujojs/most/tree/master/test/perf
Spawing a bunch of setTimeout (as noted by this KO plugin author) is not as elegant as a defering mechanism being well designed from scratch, for sure.
&gt; type="text/ecmascript-7" Is this a thing now?
Look at this thread: https://www.reddit.com/r/javascript/comments/3vwr9e/using_jade_with_browserify/ Unfortunately You cannot use 'pure' Jade on client side.
True, but my developing workflow uses RequireJS, so everything before the build is compiled on the client. It's either JSTransformer or live transpiling with babel, but the latter hasn't worked for me in this specific scenario. The build goes fine either way and the only bloat it gets is reactjs itself, which I still feel is a lot of overhead for a few input boxes and radio buttons.
Yeah, about that, it seems that server side rendering now means to use `fs.readFileSync` to grab the contents of the tag file. `require.extensions['.tag']` doesn't seem to work anymore as of Node.js 4. 
Weird, works fine for me on 4.2.1.
No, i connect babel for browser and apply it to these scripts.
Many alternatives — also good)
Because Javascript is very popular and its very easy to share code. Its okay, you don't have to learn every framework. If you focus on learning Javascript itself, and learning fundamental programming principals and software architecture patterns, then you can pick up frameworks as you need them.
Javascript world is unlike other programing cultures in that there are many redundant libraries that are all "good" and you don't need to learn them all to be effective.
This is an interesting framework, but I don't see many similarities with React. Rista uses 2-way data binding, templates, is a full framework and uses component message passing parent -&gt; child and child -&gt; parent. I guess you are just saying that because React is a popular library? Rista is much closer to a framework like Angular
Immutable.js has become a very welcome addition to the project I'm working on. It's tough to say whether it is the immutable data paradigm or the package itself though since both are new to me but I find the api in immutablejs to be quite nice.
awesome! great work :)
For a second there I thought it was [Riot.js](http://riotjs.com/) - "lightweight alternative to ReactJS" vs "A React-like user interface micro-library".
Can someone provide a TL;DR of what this lacks compared to React.js? I've read through the docs of at least 3 libraries that had similar promises. None came close to doing all that React.js does. It's as if people think all it does is virtual DOM, and these libraries should be labelled as such, instead of "React alternative"
Wait to generate this content until you have something to anchor it to or hang on to the selectList variable until your table is ready.
There is already something like this with awesome lists (e.g. https://github.com/enaqx/awesome-react). You should contribute to awesome: https://github.com/sindresorhus/awesome
Overall the increase of FRP type concepts seeping into frontend. They've made me a much better developer, and a lot of the cool tools/frameworks that are inspired by the concepts are awesome to use (React, Redux, RxJS, BaconJS, Flow, TypeScript, etc etc). Excited to see if /r/elm picks up traction as the more I find myself adding tools to get closer to a fully functional JS experience, I keep thinking why not just use a FRP language if it's easy :P.
My goal is more to have a small list. After you read/watched every entry, you should be good to go to develop. Not more, but also net less. Those huge lists are just what they are: huge. 
I have used your perf framework to test my observable library. I am surprised that my library takes 0ms on 25000 case. Here is my library: https://github.com/hackwaly/property If you are interesting in, I'd like to make a pull request to add my library into your perf framework.
Side-effect is a term that basically means calling a function or importing a module will mutate some application state. It's better to build "pure functions" and modules without side-effects. Cluttering globals increases chance of collision, makes the code harder for others to read ("Where did this non-standard function come from?!"), makes it harder to work with new language features (String#includes() was named so that MooTools' String#contains() won't break), and generally causes surprise (most devs won't expect you to mess with globals). One huge problem with this approach is dealing with multiple conflicting versions of a library. Say v1 has the signature `foo(a, b)` and v2 has the signature `foo(b, a)`, then all the code that relied on the old version would be broken. Whereas, with pure functions and pure npm modules, this wouldn't be a problem. 
Why do you think you need anything? Cause you read somewhere you're supposed to? Or because you see no other way to do it? If there is no other way to do it, how did the writers of those 'things' do it?
Really good set of links. Again, thanks for sharing.
That's right and exactly the point. It's safer. 
I hope to be proven wrong, but I doubt it. MSO has been typically supported only VBA. If anything you might find .NET. That said, who knows with future versions. Once the cloud versions take off all bets are off.
It's about optimizing time spent developing and looking for bugs. SASS makes me write CSS cleaner and faster, browsersync makes me see updates faster, a linter tells me about mistakes I make as I write code, a MV* framework helps me create good code instantly. 
You use it for partial function application. var items = [1, 2, 3, 4]; function deleteItem(idx) { items.splice(idx, idx+1) return items; } for (var i = 0; i &lt; items.length; i++) { var deleteCallback = deleteItem.bind(null, i); setTimeout(deleteCallback, i * 1000); } You can use `deleteCallback` anywhere and it will always delete that particular index (which might not be the item but it's a stupid example). It's particularly useful with dom event handlers if you're templating out your DOM either via actual templates or via React. You tend to have the id of the item when you're templating it out and it's more annoying to determine at the time of the event, so you can bind the id at template time. function handle(fn) { function handler (e) { e.preventDefault(); return fn(e); } } &lt;button onClick="handle(deleteItem.bind(null, 2))"&gt;Delete 2&lt;/button&gt; Edit: Also, it doesn't override the first parameters, it fixes them: function fnA(a, b){ console.log(a, b); } fnB = fnA.bind(null, 'b'); fnB('a'); // 'b a' Alternatively: var fnA = console.log.bind(console) var fnB = fnA.bind(null, 'b') fnB('a')
Well, yeah. Try this: function fnA(a) { console.log(arguments); } fnB = fnA.bind(null, 'b'); fnB('a'); And you'll see: &gt; ["b", "a"] So it's not overriding your argument(s).
Thanks for the feedback. TypeScript is also clients requirements. I plan on using es6 modules syntax but not sure if I should compile it to commonjs or amd. Or maybe use systemJS? Right now I found a nice and simple boilerplate that uses npm and webpack as buidling tools. Usually for my non-Angular and Angular 1.x projects I used Gulp so I'm quite familiar with it.
We decided to go with Angular2 (Typescript) here where I work despite the fact that it's still in alpha. In my experience so far after about 2 1/2 months of using it, it has been very easy to migrate code. They make their breaking changes very plain and the gitter channel (gitter.im/angular/angular) is very active and full of Google Engineers that can help you. I think for this panel you should be fine, just read the breaking changes on the changelog. Edit: As for build tools I use webpack and it works out very well.
Html validation is not an important driver these days. 
Also nice when you want to pass in arguments into a function in a callback. So $('a').on('click', myCallback.bind(null, argument)) rather than $('a').on('click', function(e) { myCallback(argument); }); I use it all the time in knockout.js
Thanks! Could you tell me what module loader do you use? I've seen few boilerplates that use systemjs but I myself am more familiar with commonjs (browserify).
I use webpack so anything is possible, but I try stick to ES6 module loading when possible. Edit: I think you meant what I transpile to - right now I transpile to commonjs@es5.
This is an easy problem to replicate on [codepen](http://codepen.io) or [jsfiddle](http://jsfiddle.net). Dynamically create a table, and when you get to a cell, try to add the select tag code. Reproduce that for us, and share the URL back here and we'll look at it. 
Fair. I personally use Jade's Grunt plugin to generate my static HTML or even PHP pages, since I really like the syntax and the data hooks.
Thanks for sharing! I tried to honor the [old demo](https://scrollrevealjs.org/legacy) with the [new demo](https://scrollrevealjs.org), but I also put a lot of work into making the new [documentation](https://github.com/jlmakes/scrollReveal.js) as clear as possible. Gives me all your feedbacks!! Happy Tuesday!
You probably confused me with OP
I think the biggest difference is handlebars is a text templating system that can do HTML, but it can also do plain text, LaTeX, markdown etc. Jade, on the other hand, is only for HTML and XML. The loss of portability to other formats is definitely a downside to Jade; however, this focus does allow some nice benefits: * You physically cannot forget to close a tag * Separation of output formatting to code (easy minification) * Mixins * Nice shorthands (`p(class=[1, 2, null, undefined, 4])` will translate into `&lt;p class=“1 2 4” /&gt;`) The last example is actually hugely important: without a helper function, this is actually pretty awkward to get working in handlebars—and you’ll need more helper functions for other cases. However, aside from the lack portability between output languages, Jade also requires you to format all your code in a non-standard language: most painfully, no copy and paste from the Bootstrap documentation. It is also worth mentioning that there are many other text-based templating systems (Jinja etc.), and also other templating systems that focus solely on HTML and XML (React’s JSX is one example here, and there are a few other small projects too).
&gt; who knows with future versions In recent AMA, they said they are implementing it!
Framework churn is a real issue in JavaScript. It is moving too fast, seem like by the time you get a project done in Framework X the hive mind has decided that Framework Y solves all the problems of X. That being said, React ain't bad. As you surmised, the real skill a web developer needs today is fast adaptability. Even if React goes by the wayside, learning it will help you learn the next one quicker. Its worth learning Node, eventually any application of significant usefulness will need to talk to an API somewhere, Node and Express can help with that. Node has also emerged as a premier environment the build systems you will certainly need if you are going to do React: Grunt, Gulp, Webpack...
Wow, that extremely stupid of me haha
Nice, but &gt;Making the Angular CLI usable end to end throughout the development process. This is the deciding factor for me.
My current build takes around 10 minutes and it's only going to get slower. This is exactly what I was looking for, thanks! :D
I am an idiot... Thank you for your help!
I'd probably use Python with gspread personally, but it looks like there's some solutions you can do with node: https://github.com/theoephraim/node-google-spreadsheet
When you get some interesting results, you might want to share them with /r/cellular_automata :)
Thanks! I won't be working on it anymore tonight, i will fiddle with it tomorrow.
Excellent suggestion, thank you. I’ve updated the demo page and the [documentation (Tips 4.2.)](https://github.com/jlmakes/scrollreveal.js#42-improve-user-experience) to encourage this practice.
Meh
What I mean is that if you want to generate non-HTML files (e.g. markdown), you can use handlebars to generate the code. The same cannot be said for Jade. It may or may not be an issue—depends on the project.
People struggling with front end churn are struggling because they don't have any way to distinguish between genuine advancements and follow-ons. In my case, I move frameworks when I find one that reduces the size/complexity of state in my application. The most important thing that junior developers don't learn is the concept of state. The easiest way to learn state is to learn functional programming. Recognizing it and learning patterns to work around it should come naturally as you get more practice writing functional code. I tend to recommend Eloquent Javascript, which is free and has a nice chapter on functional programming. I've heard good things about JS Ellonge and about [this course](https://frontendmasters.com/courses/functional-javascript/) ([youtube](https://www.youtube.com/watch?v=eV_PVk6027M&amp;list=PLkV4EIdAf8XC7HjdhQONzevIVKuAKXsqr)) but haven't actually gone through either. React is easy to learn. Read the tutorial, read the thinking in React page. That's basically all there is to it. It's a fancy templating engine. As for internships, worry less about their tech choices and more about picking a place you want to work. Unlike the people working there, you're not stuck with their tech choices beyond your internship and youll run into both Angular and jQuery again in your career at some point. Learning server side JS isn't going to help you learn client side code beyond practice in the language. Guide to picking frontend frameworks: For javascript libraries and frameworks, there are four main categories: browser normalization (jQuery), model+template (Backbone), component (Angular), and vdom (React). Browser normalization is much less important with IE8 out of the picture so it tends to be on a very focused problem (polyfill) and you know if you need it. I know that model+template is a flawed paradigm (idempotent update problem) unless it's using a vdom renderer for the template so those get rejected outright. The decision between component and vdom frameworks is a choice between wanting your components to be independent or wanting state control. I think the best component library is Polymer, the best general purpose vdom library is React (community, compatibility) and my preferred micro vdom library is Snabbdom. I value state control very highly so I almost always pick React over Polymer. Together, this makes the decision whether to care about a framework a simple is it better than React/Polymer. I generally read through the source for ideas anyway but it's optional. The only other real consideration is whether I'm going to be on a team with a mixed range of developer skills on an app that will have to be maintained for a while. In that case, Ember is best because it tells you exactly what to put where and having everybody on the same page is more important than the marginal benefits of other libraries over Ember's equivalent choices. I tend to not pick Ember because I know exactly why I'm making my choices. If you don't, all of Ember's choices are reasonably good and the community/documentation/infrastructure easily makes up the difference. For the architecture on top of React, Redux is winning. It's not the final evolution of the "elm model" but I do think it'll be the winning model. The main competing patterns are event-on-change (e.g. Backbone/Flux Store) which is straightforward but not that great and the pure-functional Observables pattern (Cycle, Yolk) which I think are a step too far into the functional world to be widely adopted. I actually write clojurescript full time and re-frame is a better take on the "elm model" than Redux but re-frame is also not the final evolution and needs an extension to incorporate the ideas from Falcor and Relay. This should settle out next year. Beyond that the only motion client side is going to be the migration to async/await and a battle for widget framework organization and mindshare. Expect to see a lot of "react-like" frameworks. You can pretty much safely ignore them all unless you're mining them for ideas. Guide to picking node server frameworks: Express is popular because it happened early. It's also low level so if you use it you'll be re-inventing a lot of wheels. Your app is not going to be a unique snowflake, pick something that lets you model resources easily and compose routes. I like hapi but I'm not actively tracking this space. Guide to build tools: There's only one thing that matters: does the tool do topological sorting of build dependencies and partial rebuilds. Grunt, Gulp, and jake don't and that's why they suck. If they'd done it right there wouldn't be churn in this space. Beyond that, just go with whatever's popular since, again, your app isn't a unique snowflake and you want an ecosystem where someone has solved your problem so you don't have to. I like webpack and broccoli.
Too late.
[Mithril](http://lhorie.github.io/mithril/)!
Well, I'm glad they bothered to keep upgrade paths in mind. That was one of my biggest concerns from the 2.0 announcement. [ngForward](https://github.com/ngUpgraders/ng-forward) looks especially interesting, particularly for those who are still stuck with IE8 support. However, I don't think I'll see myself using angular 2.0 personally. After react, mithril, riot, etc. I just don't find the boilerplate you have to use with 2.0 very attractive.
i agree angular may never recover now.
Sorry to bother you would you have a link explaining this possibly /u/senocular
Agree. I'll add that I don't like checking in dist/ for internal projects as a part of the idea of reproducible builds. If suddenly the build process gets fucked between commits, one of our developers will catch it right away and (hopefully) fix it.
True that you cannot use Markdown out of the box with Jade, but you can use filters and installed JSTransformers to do so. *Ninja: I see what you mean now, you can create `.md` files from handlebars.
I thought it was actually defined in the floating point spec that NaN==NaN is false. I thought that the spec defined this because the only float not to equal itself is NaN, therefore giving you a way to check for NaN. I read this on a random stack overflow post though a long time ago so it could be wrong! But it does sound kind of reasonable.
I agree on the boilerplate. Compared to React, it just seems like I'm having to tell my components *a lot*. I'm also not super on board with TypeScript. It isn't that I think it's a bad idea. I'm just hesitant to jump in bed with anything that isn't vanilla ES2015. I also thought JSX looked like the most heinous thing in existence at first though, and now it's completely normal, so who knows.
I understand where you are coming from. And writing code like that is not for everyone. To contrast your example with Mithril, I feel a lot more comfortable writing explicit code like Angular2, rather than trying to grok everything going on in that feature packed Mithril example. The thing with making something so explicit is that you can later add some more sugar to it and create even more conventions that you don't need all the boilerplate. You could easily write your own decorator which extends the `@Component` decorator to make all of that less boilerplate-y. I was listening to a live video chat with the Angular2 team saying that one of their team members, Viktor, is working on something like that already. Making a "shorthand" version to write components where you'll need the implicit knowledge of what's going on. As of `alpha.43ish` they automatically include the core directives now, so no need to provide them.
document.write is meant for writing content into the document as it loads. If you try to run it after the document has loaded, it will replace the document with what you gave to `write()`. Since you're looking for a delay, you're waiting is allowing the document to load which is causing the wipe. Here's a quick example using what I suggested: https://jsfiddle.net/fkmnqbxa/
After using typescript for the last year... I can't see going back. It has caught so many typos for me, and code completion makes things go so much faster.
React is nice and simple. And is only concerned with the view. Use whatever you like elsewhere. 
Option 2. There is no reason not to be using SSL in 2016.
Right, but it's definitely taking a backseat to TS. I'm sure documentation and everything else will catch up, particularly now that there's a beta release, but right now it seems like not getting in bed with TS will make learning it harder.
Oh that's pretty fantastic. Using it as ES2015 plus decorators and then moving on from there is definitely appealing.
Agreed on using bind for ES5. However for ES6 I actually prefer the arrow functions for binding to events. $('a').on('click', () =&gt; myCallback(argument)); It's just a whole lot clearer of what the developer is trying to achieve. When using bind I am questioning whether bind was used for the "this" binding, or for the partial applying of the function. Maybe both.
that's a nice news! But I mean c'on who got the idea of `[(ngModel)]="yourName"` they are kidding do they?
I agree completely, and I've been watching things. To be honest, I'm leaning harder at going to React over Angular 2.
&gt; I've started wondering.. is it worth using Angular2 for small-scale apps? This is exactly what I'm doing: using ng2 for a small scale app. I don't see any problem with that.
I was under the impression that your mithril example was analogues to the Angular2 example. The `@Input` and `@Ouput` setup the interaction for the component that is being created. So assumed that what you wrote did the same thing, which is why I thought it was more implicit than what it is. We both obviously prefer different things, which is cool :).
My vanillaJS app is smaller than minified ng2+es6 shim+System.js :/
Never liked .jsx, but I guess I gotta check it out. Flux is something like M/C, but its bound to V right?
For me, my typical ui library is installed with JSPM. Therefore no `dist` is needed, because JSPM/SystemJS takes care of it for every developer who wants to use my library. For a trivial example, see https://github.com/capaj/weakee
This is exactly what happened to me, however I'm glad react is fucking great. 
Please don't force another project on angular. If Aurelia isn't stable enough for your needs choose something else, but on behalf of your team, please not angular. 
I think you already have the best answer: "Don't think too hard". I'll stay with React since is something different and since you like challenges.
I'm not sure. I've been using it for at least a year though. Hold on... Aha! http://www.interhacktives.com/2014/04/17/codepen/ &lt;-- looks like since 2012.
no, not harder. Just remove types (you don't need to use them in TS) and you'll get (almost) vanilla es6. Initial code conversion is as easy as changing file extension from js to ts.
http://www.commitstrip.com/en/2015/09/16/how-to-choose-the-right-javascript-framework/ 
Once you actively use JSX, I think it becomes a lot less weird. I still wish conditionals in it were first class citizens, but it's never stopped me from getting stuff done. Comparing React to MVC is always a bit weird. People say it's the V, but components can have any kind of logic in there you want. You can retrieve data when the component loads, bind it to the view, send AJAX events back out when you update data, et cetera. There's just no strict pattern to it. You're doing all of that in plain old JS, and React is really just responsible for rendering what you do and providing some life cycle hooks. The Flux pattern solves a lot of problems you end up with when you do this, like sharing information between components, and organizing code in a way that lets you make your components dumber (which makes them easier to reuse). I highly recommend just playing with vanilla React for a bit. It's super fast to learn, enjoyable to use, and you will quickly figure out why patterns like Flux exist. I had no appreciation for all of the extra files and boilerplate of Redux until I started building something in React, and suddenly it all made sense.
Angular had its run. I use React for components and Ember for full-fledge SPA's. Angular v2 just took to many twists and turns for me to try to follow it.
What are your gripes with Angular? Granted the syntax is semi-cryptic, but if you just navigate away from controllers and stick with directives, services and factories, I don't find it cumbersome at all. Out of curiosity, what have you been using lately? It open season right now, the architecture is just being spec'ed so all opinions are welcomed. 
Have you tried running the install with `--verbose` for maximum output? Depending on which version you are using, NPM 3.x seems to be known to be very slow: https://github.com/npm/npm/issues/8826
Anyone remember the times where saying ANY of the things ITT resulted in downvote brigades? 😄
Agreed 100%. JSX is weird for about 5 minutes or so. Another advantage of it is that it demands a proper build system which will also pay dividends down the line.
is anyone jumping on the riot bandwagon? Aside from that blog post I haven't seen anything about it. I get that JS is changing quickly but in my mind things are settling down as tools get more mature.
Cross posting from /r/angularjs This is awesome. I really like what I have seen so far of Angular 2. I have a couple of concerns though: 1. == The upgrade path seems very messy. ___ Earlier on in the development of Angular2, there basically wasn't one. The advice was to componentize your 1.x app, and that would make it easier to upgrade to 2. **This is what I did**, and I know other Angular devs who did the same thing. The thing is, I feel as though this was the right advice! I now have an Angular 1.4.x app which I feel as though I can rewrite in 2.x, without too much pain, having followed the early advice of rigorous componentization (although time will tell). I think that creating a new project for your 2.x version and actively developing it, while putting your 1.x app into maintenance-mode, is the correct advice here. Especially if you followed the advice given earlier on about componentization. Instead what we seem to have is a system where you load Angular 1.x alongside angular 2.x, alongside a third bridging library potentially, and upgrade gradually. That is at least one more, fairly heavy (even when GZipped) HTTP request when anybody lands on your website. It also makes everything much less simple, and I have the impression that many developers will begin to upgrade their apps, but never really see it though, leaving them in a bit of a limbo, which really bothers me. 2. == The name! ___ Because it has very little in common with 1.x, I feel as though it should have been given a new name. 3. == 3rd party libraries. ___ This follows on from point 2. When looking for 3rd party libraries, especially the less well known ones, it is going to be really unclear which libraries are compatible with 1.x, which with 2.x, and which with both! Both frameworks are incompatible with each other, but yet a search for *angular markdown editor*, for example, will in the future return a mix of results for Angular 1 and 2. I can see a lot of developers finding this frustrating (especially new ones) and eventually throwing in the towel and giving up. 4. == Third party libraries (again). ___ Another point about third party libraries is that there are a lot of them, and many of them are really good, and essential to our apps. I know that the team behind Angular Directives for Bootstrap are [working on a version for 2.0](https://github.com/ng-bootstrap/core) which is awesome, but what about other 3rd party libraries, such as TextAngular, or Angular UI Router, or the many many more? When a really good 3rd party library is a key part of your app, but the project is a bit stagnant on Github, it makes upgrading to 2.0 that much more difficult. 5: == Routing ___ What is the deal with routing in the beta? I have been following the development quite closely of Angular 2.0 and I don't have a clue, can somebody bring me up to speed on that? That is all == Just wanted to share my concerns as a regular Joe AngularJS developer. In general I think it looks great, very excited to dive into TypeScript, and happy to see that a lot of the more cumbersome aspects of 1.x are gone, but still a few key concerns. Cheers
Angular2 is dead on arrival. Everyone is moving away from angular to react and aurelia.
You seem to be a bit confused. Server-side rendering is nothing new. It actually pre-dates client-side rendering by nearly a decade. If you've ever seen any PHP or ASP or Java or Python or Ruby backed website -- that's pretty much just that. The difference of React isn't that it can be rendered on the server. Or that it can be used to build interactive apps on the client. The difference is that it combines both and allows you to use the same code to render the app on the server and then "breathe life into it" on the client. This actually makes your server-side logic easier because you can just use the same HTTP API you would use on the client-side (assuming you put the node server that does the actual rendering in front of the one providing the HTTP API). Ideally you not only send the rendered HTML to the client but also a serialized version of the server-side state used to generate that HTML. React is clever enough to simply re-use the existing HTML on the client if the state is identical (assuming your components are pure). This is fairly straightforward if you are using Redux because Redux only has one central store and the state can be regular JS that can be serialized to JSON. With multiple stores (as in various Flux implementations) it can be a little more difficult but the idea is the same: 1. Determine what data is necessary to render the view 2. Fetch the necessary data via server-side HTTP calls (REST/GraphQL/Falcor) 3. Feed the data into the store(s) on the server 4. Render the view with `renderToString` 5. Send the HTML and serialized state to the client 6. On the client: feed the state back into the store(s) and render the view again
right, but the first link mentions pushState not hash
Funny, I say the same things about react and get the downvote brigade. 
Are you turned off purely on looks, or have you actually used it for a project? I thought it was really silly until I actually put some time in with it. Now I think it's fantastic. I do think there are some parts, particularly when it comes to JSX and conditionals, that can make things less clear / weirder than they really need to be, but everything has its pain points.
Its unlikely that it'll become a relevant framework unless its blessed by some kind of authority.
Mostly react but I'm starting to see job descriptions with Aurelia. Someone is paying attention at those companies.
&gt; What are your gripes with Angular? These might have changed in Angular 2: * Application state is distributed between scope and components * Components perform DOM manipulation and have to handle setup/cleanup * Directive syntax is cryptic * Reinvents a lot of wheels: scopes, expressions * Dirty checking isn't particularly efficient and fixing poor performance is involved. * Dependency Injection is solving a non-problem * There wasn't a good server side rendering solution when I dropped 2 years ago and I haven't heard about something since. If you don't have a very specific idea of what you want to use or your team has mixed skill levels, pick Ember. I prefer a different set of choices but all the decisions they make are pretty good, the patterns lead to a working app for almost everybody, and they've done a good job of project stewardship over the last few years. If you don't like Ember, Polymer is a cleaner version of the ideas behind Angular. I use [re-frame](https://github.com/Day8/re-frame/) but a switch to Clojurescript isn't in the cards for most organizations.
Really. I'd be interested to hear how React handled input sanitization, xss security, routing, service decorators, inversion of control/dependency injection, abstraction of browser globals to enable better unit testing, and maybe about 100 other things we're using in our Angular 1 app, because I haven't seen any of that stuff in the React docs.
Dropdown? Like a dropdown menu? That is indeed there and has been for quite a long time.
Being able to ditch Gulp and Grunt completely is probably what I liked the most about 2015. Flow would be a close second.
IF you're looking for an upgrade from Angular 1.x and not loving 2.x, might I suggest Aurelia? It has a lot of the same things, is (IMO) cleaner to work with and actually beats React in rendering performance.
I'm with ya.
I use PHPStorm... WebStorm has it too.
Pretty much everybody agreed with you when they first saw React code. [Watch this video.](https://www.youtube.com/watch?v=x7cQ3mrcKaY) Use it to build something. Compare it to frameworks you've used in the past. Your opinion will probably change, for the most part. React is the one frontend framework I've used extensively that I don't dislike yet.
OP, can you post more about your process on js webgl game dev? Also please consider posting on /r/gamedev and any links related to your game.
You can start with [virtual-dom](https://npmjs.com/package/virtual-dom) and [main-loop](https://npmjs.com/package/main-loop) to use some good ideas from react in a piecemeal way. Each of these tools is small and does one thing, which is good for learning the concepts and also for flexibility later along.
Well of course, that's how the JavaScript world works. If you think about something and point out problems with it you "think you're smarter than the *library developers*"; if you jump on the newest shiny, build your entire company around it, then go down in flames because of it, you have "real world experience".
What do you use instead of Grunt?
The JSX syntax itself has VERY little to do with what makes React great, and proper React is actually highly structured and not at all messy. https://medium.com/@dan_abramov/youre-missing-the-point-of-react-a20e34a51e1a#.a0z35rz2k https://egghead.io/series/getting-started-with-redux 
Except you're wrong. Tons of companies still use it. There's a place for both. 
I've been casually interviewing the last 6 months and every single company. Around 20-30 is moving away from angular 1 to react. They are not even considering angular 2. A few are looking into aurelia for the next year. 
&gt;There are plenty of companies that use all Apple devices. Are you saying they just have completely insecure networks? Yes. &gt;You're saying that a network is not secure unless you can control software installed on the devices on it? That's correct as well. If users control their devices enough to install software, your network is insecure. Full stop. 
I haven't been writing React code for terribly long, but I had to write in a templating language the other day (Dust) and the supposed separation of concerns felt contrived and just... odd. React has really, really changed the way I think about DOM.
More interested in Angular 1.5 than Angular 2 Beta...
When I first saw the JSX syntax, I was appalled. For years we had been taught to separate our style, data and view layers from one another. But here JSX was encouraging the use of inline styling and this weird XML like HTML. Going against everything that we had been taught. Then you actually build something with it. You realise you didn't need to look through pages of documentation or install 30 dependencies via NPM to make it work. Then you realise it can be rendered both client and server-side (something a lot of client-side frameworks do not support) and around this time, you realise that React is amazing. Don't judge a book by its cover. After you build something with it, I am sure you will be like everyone else here and learn to love it. You'll realise beauty is more than how it looks, it is how it works.
Ooh. Gamedev sub. Good idea, thanks. I'll write up a nice Readme today and throw the project dir online. 
thanks :)
I am going to take a wild guess and assume you are on version 3 of Npm which is notoriously slow due to the new flattened dependency tree. Also, some Npm packages have dependencies which will be built from source if your machine has the appropriate stuff installed, like node-gyp. Sadly the issues in Npm 3 show no sign of being fixed. The long running issue about the slowness has been around since July this year and nothing has really been done.
Javascript taking a back-seat to Typescript? You're joking, right? Typescript is overkill in many cases.
&gt; 0ms on 25000 case Very strange time, the calculation result coincides with the results of other libraries? &gt; If you are interesting in, I'd like to make a pull request to add my library into your perf framework. Yes, will be interesting to see). 
Thanks a lot, this explains almost everything. I am familar with the concept, but maybe my head is still too much into SAP. I have one last question: When I deploy, do both (client/server) be on the same server? I still don't get how to deploy those apps. Where are the endpoints? 
Not sure what he uses, but I'd recommend webpack.
The current problem with frontend web development in a nutshell. No one can commit to anything. Everyone wants to use the 'cool new thing'. It's partially a problem of a quickly evolving technology, but more I think a problem of it not being 'real development'. I know that is an unpopular opinion, but the fact is that it is a lot easier to get into frontend programming than it is to get into more involved programming languages like C#, Java, C++, etc. Is it as easier to be really good at it? No, of course not. But that doesn't matter. Technology has always evolved at a rapid pace. But there has been much more commitment to 'real' programming languages and frameworks, even when they were the cool new thing, than there ever was in Javascript. Angular 2's decision to break compatibility may be the right path for what they want to do in the future, but the decision sacrifices everything they currently have and turns it's back on everyone currently using it. It's not a good thing. The one nice thing about react is that Facebook is using it production in a lot of consumer facing sites like Instagram, which services millions of people and requests every day. They are also committing to react native. Using their own product is a good sign. Google only uses Angular for a youtube PS3 app, parts of their internal CRM, and bits of their double click product. They have hardly committed to it. That's not a promising sign. Until Angular is used on the Google home page and they make promises that they won't break compatibility again, Angular can't be trusted and it's no more than a toy.
So did all programming languages, as well as mathematical notation, at first.
Just think how much better Angular 1 could be by now if they had spent the last 2 years making it better instead of abandoning their entire user base. Edit: A word
Seems like a lot of work on a dead framework.
No. It uses a virtual dom now and does not support IE8
I am a bit oldschool but I still prefer using KnockoutJS alonside with Attribute Binder and Knockout Punches modules :)
Why should one use this? To me, it doesn't look any better than React without JSX and the benefits aren't clear.
I read that as javascript taking a back-seat to typescript *on angular 2*.
&gt; I still wish conditionals in it were first class citizens Check out https://github.com/AlexGilleran/jsx-control-statements (disclaimer: self-promotion)
@thzachary - you answered all my question and everything is clear for now :) we will use angular2 for fronted and sails for backed. i will drop passport for now and it should be great journey with sails :D If I can ask - how do you handle advertising? And did you think about BTC implementation? 
You aren't the only one, friend. I understand what makes React great. It's a perfect tool for leveraging all those nice functional patterns. But I can't enjoy it, it simply feels wrong.
This comment is fucking retarded. Did you bother to stop and think that maybe all that junk shit you mentioned isn't needed in react?
My bad. Thanks for notifying. I've modified the paragraph.
Would really like to do something like this but no idea where to start. Thought about blogging your process? edit: Looks very cool by the way!
Which an IDE like WebStorm catches too, so /u/kenman's question still stands.
&gt; WebStorm has Typescript completion It has "completion", period. Quite a few bugs previously, I submitted many bug reports to Jetbrains, but as of the current version 11.0.2 it seems to work very reliably. And by the way, WebStorm recognizes inline JSDoc type hints (in additon to all the normal JSDoc): let /**string[]*/ a; From now on this is an "array of strings" (I prefer the short notation over `Array.&lt;string&gt;`) - for the code inspections as well as for completion. If you want types, with WebStorm and an IDE and/or tools recognizing JSDoc type info you get them with regular Javascript.
Isn't Ad Words using angular2 with dart? That's a pretty big property.
The pull-to-refresh is really nice!!
Upvoted because the responses are fantastic, not because I agree with OP. On-topic: the breakthrough moment with React is when you understand that JSX is not a templating language. No string-mangling happens. It's just an alternate, declarative syntax for writing React component calls.
hey @Bloompire, Ive never rEaLly used either, but Ive looked at both alot and played with both a bunch....but havent looked at knockout in years. But I recently played with... https://mweststrate.github.io/mobservable/getting-started.html ...loved it and think you might wanna look at it. I have a shocking memory but this reminds me of the way it was done in ko. React purists would prolly hate this thing as Im sure its going against react ideals, but I love it!!
http://www.danyow.net/aurelia-dbmonster/
I'm interested to know more about the underlying tech and browser support. I assume it just uses local Storage or session cookies? Edit: I suppose I could look at the source, but on mobile right now. Either way, a neat solution to something I've run into lately working with a new node API. If you can add a feature for time based expiration, you have a winner! Ex: {expire: 300} passed in to Smartjax so for the next 5 minutes, regardless of tab or page change, the call will hit cache.
Can you please raise an issue regarding the same on github. Will do that in next release for sure. You also can contribute and make a pull request if you want
Gulp instead of Grunt. Webpack instead of Gulp. Also what many people are starting to realize the power of npm scripts, or how they are enough and gulp/grunt is overkill. Read [this](http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/) and [this](https://medium.com/swlh/you-might-not-need-gulp-js-89a0220487dd#.vudsqslk9) Npm scripts go well with or without webpack.
Caching POST requests seems counter productive, and the browser will cache GETs if you configure headers properly. Seems like this lib is for those who don't understand how HTTP should work
Whenever a framework introduces a radically different philosophy for building an app, our initial instinct will be "that seems wrong" until we play with it enough to see the benefits. 
Yeah we still use Angular. We also still use Cobol.
lol. I tend to avoid the newest shiny for that exact reason. 
For what function? When I've been playing around with it -1 was yesterday... 
Kyle Simpson is great, those videos really helped me get into JS and Node.
Which function were you calling to get -0? Think it could be getting some number less than 1 and rounding up/down to -0? 
I have recommended this series in the past. Always my goto resource when learning new concepts or if I need a refresher.
I took a workshop with him last year at ForwardJS, it was full of those moments!
I suggest you checkout [this weekly series](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q). His videos on [reduce](https://www.youtube.com/watch?v=Wl98eZpkp-c) and [object composition](https://youtu.be/wfMtDGfHWpA) were definite "aha moments" for me.
yes as well as Google Fiber's site
IE11+ http://dailyjs.com/2015/01/27/aurelia/#comment-1820080752
a.diff(b, 'days') with two dates generated via iOS datepicker.
&gt; Isn't a higher order function a function that outputs a function? It can also mean that it accepts as input a function. Or both at the same time.
As another comment says you don't need most of this shit in React. React doesn't need an headless browser in order to run tests for instance, unlike AngularJS 1.
I wouldn't expect it to be the next big thing. If you look at things that got big in the past few years (first jQuery, then Angular, now React), they all brought a fairly radical new way of programming to the table. Riot only has, AFAICT, things with the level of impact of a different syntax. The only thing presently available that I've heard of and see as having a small chance of becoming a game changer is [Cycle.js](http://cycle.js.org/), but then again, that might still be too similar to React.
+1 for Code
I am a .Net developer. I hate Angular 2. Loved and exclusively used Angular 1.4. Angular is dead to me.
With `sessionStorage`, you can also cache the api responses for the session duration. Might be interesting.
Follow him on Twitter too. https://twitter.com/getify
The tab level caching feature in smartjax is doing exactly this :)
I got partway through this course and still need to finish it. He managed to explain the JS compilation/execution process in a way which actually made sense, which seems like a big accomplishment to me.
You can restrict executables as well. 
Love this series, really helped me a lot! 
Ok. Sounds like a great approach. 
Nice write-up, thanks!
Yeah! :)
Kyle is awesome. I attended a two-day ES6 training course with him. Highly recommend.
thanks!
Advertising is really just whatever works for you. I don't believe you can use adsense because they strictly forbid gambling of any type. As far as BTC, I can't really disclose that, but for the moment it's unsupported.
Oops, I didn't realize that. I automatically thought it was his own channel, didn't check it out, though. Let's hope, that what little exposure he is getting from this, sells at least a few books of his. Now I have to buy one, too. 
obligatory "React is not a framework" comment
Kyle Simpson's JS stuff is the best — *highly* recommend [the You Don't Know JS Series](https://github.com/getify/You-Dont-Know-JS/blob/master/README.md)
Its actually fairly common and there is really no reason to question it when you see it on youtube. If you don't have a pluralsight account, shoot me a DM and I can get you a thirty day pass. 
Is it just me or did all the videos get deleted just this moment?
All videos have been deleted
+1 for pluralsight being a great resource with stuff like this
Ah, TIL :)
They aren't even considering it. Aurelia is still beta but they are consider that over Angular and react because the trust was lost when Google abandoned the Angular 1 and made everyone's applications unable to upgrade.
[removed]
+100 
&gt; But there may very well be reasons why you'd want credential authentication without SSL in production that I'm not aware of. Maybe if you have to work with legacy or embedded systems, but if you are just talking about a web app there really isn't anymore. It used to be expensive (in terms of certificates and hardware), but that is no longer true. Further to your question, Digest authentication isn't really secure. The digest is a MD5 hash of the string "username:realm:password" (in the most basic form). You know the username and realm, so to crack every 6 letter password would take less than a minute.
&gt; Wordpress is GPL WordPress isn't a JS library. GPL is fine for applications like WordPress or Inkscape. If you want to rip it off, you have to create a fork which is publicly available. This makes perfect sense. But you really don't want that kind of license for smaller libraries. If the license makes some lib unusable for some projects, you'll need an alternative library for those. Naturally, you'll just use the library with the more permissive license for everything. This way you won't have to get familiar with two different libraries which pretty much do the same thing.
could u post sample code?
I'm using Windows
Would there happen to be a way to demo the material before signing up or paying?
Sure, if you are interested I can get you a 30 day pass. Shoot me a DM. 
I know I'm checking it out on my pluralsight account now, I assume they don't get residual checks for these videos though. 
It's not just you, don't worry in a year or two everyone will move onto the next shiny thing. 
The original talks were done through frontend masters: https://frontendmasters.com/courses/ I'm guessing Marc (the guy behind frontend masters) licensed the videos to pluralsight to reach a bigger audience. Source: [I'm in the intro](http://imgur.com/mRB34ci.png), and you can hear me win a book at during Kyle's "Website Performance" course.
The first example uses GNU utilities, which are not available natively on Windows; use GNUWin32 for that (it's unmaintained but the best we have IIRC): http://sourceforge.net/projects/getgnuwin32/files/getgnuwin32/
I think your command example needs to be `node ./file-filter.js ./links.txt youtube.com &gt; ./youtube-links.txt`
thanks
This doesn't have anything to do with "today" or "yesterday", as the title suggests. What's happening here is that you are diffing two moments which are on the same day, and asking for the difference in days. And the docs state that if your moment is earlier than one you pass to `diff()`, [you get a negative result](http://momentjs.com/docs/#/displaying/difference/). You can see this more clearly if you ask for the difference in minutes, for example: var start = moment('2015-01-01'); var later = start.clone().add(5, 'minutes'); console.log(start.diff(later, 'days')); console.log(later.diff(start, 'days')); console.log(start.diff(later, 'minutes')); console.log(later.diff(start, 'minutes')); (Tried posting this to jsbin, but their console converts `-0` to `0`) If you're getting *yesterday* coming out as -0 in relation to *today* then something is wrong - you might be encountering a timezone issue. It would be handy to see the actual dates *Edit*: On second thoughts, `2014-12-31T23:55` is not 1 day before `2015-01-01T00:00:00`. it is 5 minutes before. so if you ask for the difference in days, the value will be `0` or `-0` depending on which way you call it. you need to diff the start of day if you want the difference in days. var start = moment('2015-01-01'); var earlier = start.clone().subtract(5, 'minutes'); console.log('yesterday 23:55', earlier.diff(start, 'days')); // -0 console.log('yesterday 00:00', earlier.clone().startOf('day').diff(start.clone().startOf('day'), 'days')); // -1 This could explain why a date for yesterday is -0, and the day before is -1 -- likeley you're comparing to `now`. But I wouldn't rule out timezone issues too. They're always fun...
&gt; Most of the GNU project is GPL it doesn't stop businesses from using GNU libraries. To be specific, they use *LGPL* libraries; in fact, the LGPL was created precisely so that closed-source software could link to open-source libraries. BTW the AGPL goes the other way, it was created so that creators of open-source software for cloud services could require all modifications to be made open-source too, even if those modifications are not distributed but simply made available to end users through a cloud service (the GPL only requires open-source licensing for modified programs distributed to other people's computers).
I got a free 6 month subscription to PluralSight from this [reddit thread](https://www.reddit.com/r/gamedev/comments/3v7iub/free_pluralsight_plus_for_6_months_if_you_have_a/). Not sure if it's still active (the post is two weeks old), but it's worth a shot. I've found it to be a great resource so far. 
Yes, the first command probably won't work on Windows. The second example is a Node.js script that: - Reads the input file (./links.txt) - Filters the file content to only include lines that start with "youtube.com" - Spits out the filtered content
map, reduce etc have all been functions of underscore/lodash. I eschewed using them after seeing the staggering performance degradation vs using a plain old loop. (we're talking like a power of 10) C# has something like this called LINQ, has this functionality been incorporated into the language without a library?
Yes, at least in our company this is common. Is it the coding that makes you feel difficult? Or the tests in general? If it is the coding, it might be a good idea to try “writing” tests without coding, just by capturing the actions you want to test and let the tool do the rest. An example for this type of testing tool is [Ranorex](http://www.ranorex.com/automated-gui-testing-tools.html). It can be used for both testing with coding and without. 
Thank you, it worked for me. :)
Microsoft is giving away 6 months of pluralsight here - make sure you sign up before the 31st! https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx
&gt; In a shopping cart results page, you apply the filters, which generally is a POST call Then you are using HTTP wrong. Yep, you can generalize like that. And sure, working with someone else's crap is a sad reality, but it's still a valid comment. Look at section 9.5 of RFC 2616 (HTTP/1.1) &gt; The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a uniform method to cover the following functions: &gt; * Annotation of existing resources; &gt; * Posting a message to a bulletin board, newsgroup, mailing list, or similar group of articles; &gt; * Providing a block of data, such as the result of submitting a form, to a data-handling process; &gt; * Extending a database through an append operation. &gt; The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database. &gt; The action performed by the POST method might not result in a resource that can be identified by a URI. In this case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response includes an entity that describes the result. **TLDR:** Post is mainly for *manipulating* and *providing* data, not to *request* it. You *post* something to the server, you don't *get* information from it. 
Pluralsight Authors get royalties based on viewership. So he gets money every time someone watches his course. --Source, I am a PS Author... 
Thank you so much! 
It go down in the DM
Great code mate! I looked in it like 20 seconds, and found this: /* This method removes the unnecessary properties from the request object which are used for smartjax operations only */ getOriginalRequestObject:function (requestObj) { If this method modifies your state, you usually shouldn't name it **get**. But the documentation says otherwise: That it **removes** from the request-object. So first I think this function doesn't change my requestObj, since it uses get. Then I read the documentation, now it does. But if I look at the source, it doesn't! var request = $.extend({},requestObj); delete request.store; delete request.force; return request; Instead if copies the request. So it doesn't give me the request-object, and doesn't modify the object, despite claiming so in the documentation! And this is literally the first function I looked at. In this case documentation is worse than no documentation. This is one of the only methods that you document. 
Good to know.
You're going to be disappointed later 
This is awesome! Thanks!!!
Ah.. thanks! :D I'm still working on the textures.. hard work for someone who knows fuck-all about photoshop. Suffice to say, there's still a long way to go.. glad you like it, though! I'm a terrible writer though.. so probably no blog posts. I'll throw the code online with a primer once I've cleaned up the code a bit :)
Design is solving problems.
This doesn't affect the applications which are using it. MongoDB is a separate application.
I'm not entirely sure what your point is. MongoDB is mixed license, offering a commercial license. http://www.mongodb.com and http://www.mongodb.org are different. As well, MongoDB is a platform. Using and incorporating it into your project as a platform, won't violate the GPL. In otherwords, MongoDB and whatever product is using MongoDB are still maintained as separate entities (aggregates according to the FSF). You can be closed source and use and even distribute MongoDB as long as you've made no changes to MongoDB nor attempt to relicense it.
This series is also on pluralsight for paid members. Fortunately, you can sign up for six months for free [here](https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx) (only valid for about two more weeks).
All videos are deleted, fuck whomever this is, I like that guy Banas. His videos on programming are great, he also has a bunch of JavaScript videos really well made and he shares them for free on YouTube. 
Awesome! Thank you!
This does the trick, tho, there is something else, when all the links are copied, they are close to each other so the result is like this "youtube.com/..youtube.com/..youtube.com/.." Is there a way around this?
Wow, this is so great! I've written my own micro view library, called FRZR (https://frzr.js.org). After reading your code, I realized I have a ton to optimize with helper functions. Even though my library is also relatively small (&lt;7kb). Actually using those helper functions should even make the code run faster at the same time.. Nice job - gave it a star! 😉
yes, and that's to remember that on Windows, the newline is `\r\n` rather than the Unix-style ending `\n`; I have edited the above code accordingly (or you can open the file up in a modern text-editor like Notepad2 that recognizes the Unix-style line endings)
Well sadly the "dependency flattening" stuff caused a pretty massive change in NPM. Before they could request all data in parallel, but now they need to check in serial for the most part. While some of that can be fixed, the fact that it's mainly serial doesn't seem to have an easy fix.
Great!
90% of the time its Webpack. Can't speak highly enough of it once you get past the wordy yet thin documentation. You can spend 30 minutes reading it and actually be dumber. Just takes experience. For more complicated build stuff I use broccoli, but that's mostly for custom enterprise stuff. For node projects its just straight npm. I'm actually not as high on it as others are, but it works. 
I was excited about VS code, until i opened it and saw that they put the tabs down the side. EVERY other IDE puts tabs across the top, why did they have to go and change that? I'm sure its configurable but cmon man! I closed it in disgust and haven't opened it again since.
Map, reduce and filter have been standard functions of Array.prototype for ages.
Tim without quotes is a variable, with quotes is a string. You're getting undefined variable "Tim" because isn't defined. Try nameString('Tim')
... How would you use integers to represent floats? I mean you could express it as a fraction, but then you'd need 2 integers.
The denominator and numerator would be stored as integers, and the result shown would be a fraction, which would be formatted to decimal by the vm.
You're the best! Thank you so much!!
Another good one I found and loved was 'JavaScript the weird parts' on Udemy.com, $10 when it goes on sale, which it does a lot. Kyle also has a course up there.
Thanks! I wish I could upvote more than once, this is a really insightful post and more than I asked for. The only thing I'd ask is if there are any ways to develop a meta-understanding the way you have, besides accumulating lots of real-world experience. Like the way you can see the patterns behind everything or understand the why and when behind frameworks, etc. Preferably in the context of client-side JS. Are books on design patterns a good start? Maybe I'm too early in the game to think about these things, but I generally like to know why things are done the way they are, why this goes there, and how to make intelligent decisions about these things. You know, things to think about and consider, as I progress. Perhaps reading/understanding others' good code is the way.
Thanks for your insight. What skills do you believe translate well to adaptability?
Because JS had to be designed in ten days "or something worse would have happened": https://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/
Integer values can be accurately represented up to 2^(53). If you use [bitwise operators](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators), the numbers will be converted to signed 32-bit integers. That's why "| 0", can be used to truncate numbers (which fit into signed 32-bit integers). Internally, VMs will use actual integers whenever they figured out they can get away with it. There are also [typed arrays](https://developer.mozilla.org/en/docs/Web/JavaScript/Typed_arrays) and [SIMD](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD) (ES7) which let you work with actual integers. ES7 will probably also include 64-bit integers.
This actually isn't the reason. The reason is because Javascript was designed with beginners in mind - from a novice perspective a number is a number, the distinction between floats and integers was deemed an unnecessary complication. 
Get out of town, I love the irony....Reddit is the internets solution to piracy and half-truths (as seen on wikipedia).... OP thought he was helping out spread the word....ended up helping out clean up the internet...an interesting twist of fate.
^ this. I just had this exact same edge case today. It's described very well here: https://github.com/moment/moment/issues/2503
I do, but browsers like to prevent people from detecting that key when interacting with fullscreen. I just want an all around good way to force certain code to run when fullscreen is turned off
How do you find the performance of Cordova? Can you tell it's a webapp?
It's good to see in 20 seconds you reached to the 178th line to check your "first" function. *get* is there because it provides me a modified request object. Actually, this misconception happens when one is busy judging in 20 seconds. Patience my bro, patience. 
You are using the apis of a shopping cart portal (suppose S). And that portal internally uses some other user management (suppose U) apis (eg stormpath). In that case if you make post call to modify your user data, S will somehow provide you the object of U, which is very much necessary cause S doesn't know or doesn't wanna take responsibility for how exactly U saved it. This is a very common scenario in cross api portals. And "working with someone else's crap". It's not crap, the companies who sells apis, doesn't make api for just a particular client. And there are so many api selling companies. 
&gt; Are books on design patterns a good start? It's not bad to skim through them to get ideas but I don't think really investing in them is a good idea. The problem with Design Patterns is that they're [steeped in OO thinking](http://blog.cleancoder.com/uncle-bob/images/fpvsoo.jpg) and I'm in the camp that thinks OO is a flawed idea. I vividly remember being in your shoes in 2000 and decided to find "the way" to write software and I've spent at least an hour on it every day since. I got pushed into functional programming in 2003 when Intel hit the clock speed power wall and I knew that multicore would be the future. I went through a bunch of languages but it wasn't until I watched Rich Hickey's [Are We there Yet?](http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey) (most people find [simple made easy](http://www.infoq.com/presentations/Simple-Made-Easy) more accessible) in 2009 that the things I sort of intuitively had figured out crystallized into my current design philosopy, which is basically that state is THE source of complexity in programming. I visualize state as a gas that expands out from a variable through every line of code that could possibly affect it and call that (my own term) the state's surface area. Understanding a program [starts with state](https://www.google.com/search?q=Show+me+your+flowcharts), writing stable systems involves minimizing state to the degree practical, and virtually all patterns/best practices/wisdom are specifics on reducing the surface area of a piece of state in a program. The problem with objects is that the surface area of all the members extends to all the methods of both the class and all its subclasses, which gives it more surface area to leak out into the rest of the program. FP isn't immune to this, if you pass mutable stuff around everything starts leaking into each other but at least it leaks in chains instead of blobs. As a specific example, I'll give the progression of popular JS architecture. Before 2007 people were pretty much just trying to get all browsers to work consistently and jQuery won that battle. With jQuery, you put state in the DOM. You can see it with the `data()` method and `data-` attrs and whatnot. You also get state in your JS through ajax calls and you have to reconcile the two. The result is that state snakes through the JS and through the DOM and literally anything can affect random parts of the DOM so you wind up with jQuery spaghetti. Then in 2009, Backbone popularized the idea of an evented model. Instead of putting your state in the dom, you keep it in your model so it's in one place. It's still pretty global but at least there's a single source of truth. The idea is that your event listeners modify the model (there's still some coordination here) and when the model updates you `render` it using your templates and innerHTML it into the DOM. The problem arises when you have state in the DOM (attached event handlers, jquery widgets, text fields) and you can't innerHTML anymore. This always happens but it's sneaky and only happens when you're well into your project. Meanwhile Knockout and Sproutcore (which eventually forked off Ember) chose to minimize state using data binding. By keeping both the DOM state and model state in sync, you reduce coordination errors and don't necessarily reduce the surface area but you reduce the number of possible interactions. This approach hit the mainstream with Angular in 2011. In Angular, each component sort of forms its own little state bubble. There's still state but it's in smaller pieces. Finally, in 2012 (though it didn't really catch on until last year) React introduced the vdom rendering model. It's pretty much the same as the render part of the Backbone model but it actually works. From the app's perspective it's a pure projection from input to a correct DOM. This means there is no state inherent to the abstraction which allows FP concepts to be brought to bear. You can track a similar development in the path from FB Flux to Redux. This isn't the only thing to know when designing a system. The main thing it won't help you with is looking at a problem and cleanly slice apart the concerns (pure experience, read code and think about the abstractions). I also don't recommend being over-zealous about it as you can take it too far (IMO Cycle is too far, compare to Redux) and you'll learn counterexamples and nuances that I don't want to get into here. After separation of concerns (most important but I can't teach it) and state minimization, the last piece of my philosophy is what I call locality of reference. LoR is the idea that when you're working on a piece of code, you should only have to think about that piece of code. Facebook values this highly so a good example is JSX versus separate templates while one I think goes too far is the CSS-in-JS thing they do. If you don't consider LoR, you'll fall in the trap of writing code that is completely DRY but you have to consider chunks of code in 6 different files while you're working on this one. That's my philosophy. I've taught it to a couple junior devs and it usually takes a number of chats pointing out examples in their code over 2-3 months for them to really get it. Once you get it, picking the better choice is easy but picking the right choice is harder because the community (and generally your team) will only move one step at a time so you can't go too far.
Closest I can do right now: http://codepen.io/anon/pen/eJJqOa
I think you should answer these things: 1. Which platforms do you want to support 2. Long-term for those ones 3. How long will it be required to finish
Wow that's incredible, thanks!
&gt; But is it really the most widespread meaning? I’ve came across this concept a lot in several programming language, they they all call them “function objects.” "functor" and "function object" are the same thing in all those languages.
Clone a copy of the original object and if they revert replace new object with original one. 
He is also publishing his books in the open for 'free' https://github.com/getify/You-Dont-Know-JS
What are good sites that are cheaper?
It's more of a slight annoyance that js does not use integers to represent floating point values, but instead does it the other way around. With integers, you can use 64 bit int to represent whole numbers up to (2^63 - 1), instead of 2^53 that floating point values in js have. The extra 10 bits in integers potentially could be used if current encryption standards expand to calculations that are larger than 2^53. Sure, it's just an extra three zeros or so, but it will provide us with some buffer before we have to use larger data types. On top of that, if integers were used instead of floating point values, then programmers could just use fractions as a way to represent decimals. This way they won't have to deal with the potential of the loss of accuracy in their calculations (up to 2^63 - 1). Plus, it isn't that hard for newcomers to use integers, because they would have already thought about using integers to represent fractions and decimals in their calculations. I mean, there's nothing *inherently* wrong about floating point values, but I do not want to deal with the accuracy loss in calculations that **require** unique values that are more than 2^53 , and that have to be implemented in js because my boss says so.
I think for now, react hasn't supported Android yet. So if you want, Ionic is better choice
It says that it's available through the 31st, with 3 months available thereafter. If I get the code now, can I use it after the 31st for 6 months?
Filters should be part of a GET request, anything that doesn't modify some sort of server-side state should be a GET. GET is for retrieving (including filtering) resources while POST is for modifying/creating a resource. Blanket caching of POST requests doesn't seem like a great solution, BUT... it seems like you are working with some poorly planned/implemented APIs that DO use POST for retrieval, so maybe this is the right tool for your job. I would just make POST caching "opt-in" and GET caching "opt-out". So POSTs are NOT cached by default, while GETs are cached by default.
&gt; if current encryption standards expand to calculations that are larger than 253. Crypto is one of the main applications which use large (integral) numbers. They've been munching on numbers up to 2^4096 for quite some time. (Wasn't 4096 the maximum key size allowed in PGP? I'm not sure.) 
https://en.wikipedia.org/wiki/Fixed-point_arithmetic It would be a pain in the ass to use in JS though. 
You didn't pass it as a string. Without quotations it fires as a variable. To go more in depth, you're firing off a variable that hasn't been defined yet. 
Needs more love, a very interesting project
Titanium is another option. Pure Javascript and a really nice module system. Also you don't have to use their stupid eclipse based IDE, you can configure everything through npm modules. It's a little tricky to get set up but then again so is all native dev, what with all the SDKs you have to install and link up together. You can also throw [tishadow](http://tishadow.yydigital.com/) into the mix with [genymotion](https://www.genymotion.com/#!/) which will give you a not-shit android emulator with live reload and a pretty nice debugging server. My experience with cordova hasn't been great. Ionic is really very good but I doubt it's ability achive the same results and flexibility of something like Titanium or React Native. I don't know about nativescript. Another option if you're not married to Javascript would be Xamarin. I've heard good things about it but I haven't tried it. I think it may also tie you to VisualStudio. Edit: Should also mention titanium can compile to windows phone and apple watch.
Immutable data structures. Hold your whole app state in one structure. Each update creates a new copy of your app state but doesn't destroy the old one. Keep a list of old states and undo is just moving to one of the previous states. This seems to be how everything is done in Clojurescript, and best practice with React is to get the same result by using immutable.js
Awesome, thanks.
That as an engaging read.
I wouldn't say it's a sign of an expert, but it's really the sign that this person is self-confident in his/her skills and it makes me trust them much more. 
Hi! Thank You for answer. Your idea is similar to what is used already. This module is at: https://github.com/cachaito/components/blob/master/scripts/modules/validation.js 
That's what I meant to say. I agree 100%.
You absolutely right, sir.
Bravo sir. This was a great article. Now you just lack semicolons at in your code samples :P
Unless you are over 40. Then forget it.
I think he means a flow where they can use ES6, edit files in their favourite text editor, and not have any build steps that need to run before they open on the browser. So the browser is doing all the ES6 transpilation as part of loading the modules, rather than a watcher task transpilation the files to disk and the browser loading the transpiled files. I've not tried it like this as I just have a watcher compile the files, but I'm sure it's possible.
we have our own site as a playground for people to play with. we want all the transpiling ,etc to happen browser side (never mind it is slow). The pastebin that I posted illustrates the way we are achieving it today. however, we are obviously using outdated babel. "babel-browser" has been deprecated... the only flow now is a build based flow (https://github.com/babel/babel/commit/c0afdfd1a83aab0c25a1fc23cee0b09d560f4d35) I'm wondering if there is an alternative.
[removed]
Traceur seems to offer what you need: https://github.com/google/traceur-compiler/wiki/Getting-Started However, babel.io has an online REPL, you might check out how it is implemented.
For what reason do you think that? Do you somehow forget how to curry functions or create y combinators when you reach the vast age of 40? I've been using JavaScript since the beginning of the web. I grew up in a time where the web was BBS on command line interface at 9600 baud. I honestly think this is a bit of a golden age where all the technologies that were ham-fisted crap bags when first created have become deployed across every imaginable context. And it's still nigh impossible to find candidates for positions that can reliable explain when to use bind, call or apply. I don't think there is an age limit to understanding code. I've never found code to be difficult to grok. Why would that change unless I have a stroke? 
I'm not a fan of the last line. Producing `null` values and passing them around is always super iffy, because that's the first step for creating an NPE. Empty arrays are usually the better option. Iterating over them is a no-op instead of an error.
&gt; It's more of a slight annoyance that js does not use integers to represent floating point values, but instead does it the other way around. I'd say it's pretty convenient that you can write something like "1 / 5" and get 0.1 in return instead of 0. Having to do some acrobatics for basic math would have killed JS.
Someone told me Traceur would produce more code. And as far as I remember you always have to include the runtime.
Click bait title 
While we talk about Job Market - what are requirements for Junior web-dev (especially Javascript) in London area? I *might* move to London from my eastern-europe country in half year or so(Yes, I'll have place to live at. Good friend of mine said she will be more than happy to let me stay there).
First off, let's try and specify things clearly. Your app has a state S^0, and you are applying a series of actions A^1 through to A^n, such that the state S^n is the result of applying A^n to S^n-1. So for a simple app that doesn't need to interact with external systems, you could simply store each state, and a user can undo or redo by replacing the current state with some previous saved state. If your state is very large and complex, this may be impractical either do to the amount of memory used, or to the slowness of serializing and de-serializing the state. A further problem arises when you want to talk to an external system, ie, to persist something to a database. Possible solutions: 1. If your app is very small, you could simply serialize the entire state and send that. So user performs A^5 and A^6 so you send S^5 and S^6 to the server. User hits undo, so you re-send S^5. 2. This will not scale. So the next solution is to implement your entire state/action/undo system twice, once on either end of the network link, and just send actions back and forth. So user performs A^5 and A^6, you send A^5 and A^6, and the server applies them to its existing state to (hopefully!) get S^5 and S^6. Then when the user clicks undo, you send an undo event, and the server reverts back to its stored S^5 which (hopefully!) matches yours. Sync issues will be an issue, plus this is still slow and resource heavy. 3. So the next interation, if you can pull it off, would be to formulate every action A^n with it's inverse A'^n, such that applying A'^n to a state S^n will return you to state S^n-1. So if a user's A^5 action is to set the name on a contact record which was originally 'Bob' to 'Robert', then the A'^5 action is to set the name back to 'Bob'. Now you don't store states, you store A's, and you can send those across the wire. User performs A^5 and A^6, you send A'^5 and A'^6 to the server, which stores them. User hits undo, and you pop A'^6 off the stack and perform it. If you think about it, you'll notice that this last option requires the least about of serialization and deserialization, the lowest memory usage, and the least network traffic. It's still prone to sync issues, but you can issue "checkpoint" updates, and if you ever detect a sync issue just do a full re-sync from whichever side you trust more, the server or client. On the other hand, it's probably the hardest to implement. And some corner cases may be very hard to deal with. For example, the inverse of deleting a 5 gig file is creating a 5 gig file, which means, naively, your action would be 5 gig. Not really the right approach. Or you can, as you alluded to, just avoid letting actions hit the network until they've aged out of the undo stack, but I think you'll find this doesn't really fit with how people want/expect programs to work. :)
Yea I see what you're saying. I wasn't really thinking about this from the javascript/linking context, but my understanding has always been derivative vs. non-derivative has different requirements. I can see that, since this is difficult / confusing, it's probably just not worth the hassle for the developer.
Yea, I hadn't considered that JS is "released" code when the browser runs it. I was assuming the closed-source project wouldn't be released to anyone, which I'm fairly certain doesn't hit the GPL's requirement to release your entire project, but yea you're right here. If your code links to the library but you in no way release your code, then I don't see and have never known the GPL to require you to release that closed-source part. I actually don't think the GPL requires you to release your modifications to the GPL'd library if you never distribute your code/binary (server code).
IMO to be a junior web dev you must know CSS and HTML well. You must be able to convert a PSD to a HTML template. You should also know jQuery and basic DOM manipulation, some concepts like XHR. You don't really need to know much more to be a junior web dev. The skills you mentioned are more for senior roles. 
"Forget the Click Bait." /proceeds to write clickbait headline
This is a great read and matches with what I've learned and noticed in the job market for the last 5 years or so. 
Yes, but the difference is, that FRZR is super fast with DOM reorders as well (React is one of the slowest doing reorders..) and views are actually mutable, even though they also support immutable data.. But still you don't have to maintain state, because only changed attributes/classes/styles are triggered to the DOM.
All good headlines are clickbait, that's the whole point of a headline.
The ability to detect real irony is actually a sign of intelligence. 
&gt; As a Dev its your responsibility to always know what's new and to learn every day. You should learn a new language or framework every year at least. If a person decides this level of mental effort is not something they can do all their life - being a Dev is not something for them. Bingo. I say this all the time. So many people complain about things such as Angular 1.x and 2.x being such big differences and the requirement to learn the new stuff. Seems as if they want to learn one thing and have a long lasting career on the knowledge they learned years ago and not have to learn anything new. I would never hire anyone with that mindset.
It's very interesting that V8, Firefox, and Webkit all switched to Xorshift128+. Does anyone know if Chakra also switched (or will switch) to Xorshift128+? [CC /u/bterlson_]
&gt;And it's still nigh impossible to find candidates for positions that can reliable explain when to use bind, call or apply. In day-to-day web dev, when would you use it?
There is no singleton pattern in JavaScript. You simply use object literals for one-off objects. The end. The singleton pattern is a workaround for languages which don't let you do that kind of thing. In Java, for example, everything must be inside some class. You can't just create some kind of object without a class. So, if you want a single-instance object, you have to create a class which can be only instantiated once and you make sure that it's only instantiated once via the singleton pattern. Anyhow, there are many people who believe that singletons are an anti-pattern and that the should be avoided in general. http://c2.com/cgi/wiki?SingletonsAreEvil
Do be sure to note the mention that the new algorithm is not considered a cryptographically secure PRNG. Also because the specification has very little by way of requirements in that regard, no matter how good *some* implementations may be you should always assume you code may end up being used in an environment where Math.random() is no better than the worst generator you can think of. If you need specific properties in your PRNG then you still need to provide something in place of Math.random().
This is the biggest thing people just need to accept. We are in a perpetual deprecation industry. Every language and framework is always in flux because it's vibrant and active. That's not scary - that is an opportunity. You get the privilege of living in a time where any new work is available to you to inspect from the bottom up. It's encouraged to hack. If you don't have the desire to dismantle and understand everything - then I can't imagine this work would even be appealing. But I personally really love looking at something that looks insane and grokking it. It's all just abstractions on flipping switches anyway. Are people going to let some mealy machine rule them? Or do you dig into the guts and learn the machine to become its God. This is a golden age. These guys with the blackout attitudes should consider whether they really even want to do this. 
So, pretty much I've enough knowledge. And they ask for goddamn university-diplom for webdev positions in my city of 10000 (you've to study abroad, since you cant get one in my country). And tbh I'm more worried about fact what I would be foreigner for them. According to my friend some places literally worship foreigners(especially eastern-europeans), and others dislike us. Thanks!
Perfect! Thanks a lot
That's pretty disappointing to hear about the Junior Dev situation and lack of mentoring. I got completely turned off from Comp Sci in college because I just couldn't get over the plateau where I knew plenty of syntax, could figure out the "tricks" like list comprehension in Python, and was grasping pointers and shit in C++. But I felt like I was competing with people who were in much smarter than me in the theory department and so were acing the exams. When I pair programmed with my roommate though, who was an actual programmer with people skills and the ability to explain things, I understood things in leaps and bounds. (not trying to perpetuate the introvert programmer in a basement with no people skills.... but... ) It's hard to parse the jumble of free internet tutorials, impossible for me to afford the paid classes online. I need some people looking to foster future developers, and I can't believe there isn't more of a community for this. EDIT: sorry that was very ranty
Thank goodness. I mean I get that the simple practical working solution is what the world needs but somethings require specialization. There are always drawbacks. 
This doesn't seem sketchy at all ...
Bind is incredibly useful in functional contexts since it's basically a partial function call with a scope attached. Even outside of functional contexts, bind is nice for keeping code concise. This is especially true during async or anytime callbacks and involved where you need to carry state around with a function to multiple places. I used to use call and apply commonly for inheritance chains in objects, although with the ES6 sugar it isn't really needed but still good to understand. I can't think of any other examples off the top of my head at the moment, but there are times where being able to call a function with a different context is helpful. Especially when writing a framework. Also, apply won't be relevant once ES6 is the norm due to the spread operator working with call. One less thing to remember. 
yo thanks for the heads up, this is siiick.
He mentioned the two pillars... and he is entirely right, **but he failed to elaborate**. Most of us really don't know what a good developer looks like until we work with them and most of us completely fail to realize we are actually just average shitty developers and why that is. A great developer is capable of architecture, which is often less about writing code and more about asking the right questions. An average developer completely lacks this ability. Part of this is driven by experience and part of it is driven by personality. You can't be a trend whore and be independently critical enough at the same time. A good developer understands how the most basic and primitive concepts work with a deep intimacy both practically and theoretically. It is only from this strong foundation that a great developer can see through all the irrelevant (often trendy) bullshit and really focus on simplicity. This is also why many companies fail to hire good developers, because they are generally average people looking for trendy bullshit. Shit (or rather average) developers, conversely, prefer easiness over simplicity and can't tell the difference. Simplicity means doing more with less. Easiness means your primary goal is hoping somebody has already solved your problem for you. This line of thinking is applied in various different ways at various different levels from selection of framework to the style of code. A shit Java developer forced to write in JavaScript, for example, probably can't live without ES6 classes and Angular. The fastest way to identify the difference between a shit developer and a good developer is which one eventually poses the question: *"Why the fuck are we doing this?"*. A shit developer will never ask that or if they do its completely within the context of wanting something to make the code less simple (like an even bigger framework).
That's cool - those are the few off the top of my head as well, especially the typical `$('.thing').click(handleClick.bind(this));`. I also saw a pretty cool use involving currying from [an article](http://krasimirtsonev.com/blog/article/a-story-about-currying-bind) posted not too long ago. I don't really use currying much day-to-day either, but maybe in my own projects I'll start.
Hmm, a Virtual Reality Markup Language. Interesting idea.
It's kind of a paradigm shift. I havn't found functional concepts that useful unless you completely subscribe to them. I started using Redux with React, and now a LOT of functional concepts I've known but never been able to connect are starting to make a whole lot more sense. It has some massive debugging benefits though, like being able to print out a previous state, and being able to print out the actions to arrive at the current state where the error occured. I don't care what anyone says, that's insanely useful.
I agree. Have you looked at the time travel debugger ( on phone - no link ). It's fantastic to be able to record and playback state transitions and see exactly what happened where. It simply would not be possible using imperative structures. 
Mouse input is much smoother in Chrome. I really wonder what Firefox is doing wrong there. Even in demos which run at 60 FPS, the mouse input always feels very jittery. **Edit:** https://jsfiddle.net/156h3jaq/ My mouse is polled at 500 Hz. With Chrome, the IPS stay above 490. With Firefox, they occasionally drop down to 350. With IE11, the IPS are glued to 500. Firefox appears to drop these events quite easily.
This is eric elliot, so ... [Must see javascript dev tools that put other dev tools to shame](https://medium.com/javascript-scene/must-see-javascript-dev-tools-that-put-other-dev-tools-to-shame-aca6d3e3d925#.i2y86426a) [The single biggest mistake developers make every day](https://medium.com/javascript-scene/the-single-biggest-mistake-programmers-make-every-day-62366b432308#.q89uphm61) [10 Interview questions every javascript developer should know](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.1yxdgtj9p)
No. It's saying that you can mutate objects stored in Mobservable directly. Redux, for example, requires that all your data be handled in an immutable fashion. Even if you don't use something like Immutable.js, any modifications your reducers make have to be done by cloning the existing objects and returning the modified copies. Mobservable, on the other hand, somehow instruments the objects you've stored, and allows you to write something like `myObject.someField = someNewValue`. I haven't yet played with Mobservable myself, and the fact that it's basically a one-man project concerns me, but the author IS very active in the Reactiflux chat community, and the code looks like it's a pretty well-thought-out implementation. Certainly doesn't have the mindshare that Redux does right now, but worth a look.
It's just amusing when the title says "Forget the click bait", yet is still clearly click bait. 
And we have "mentorships" like this in other trade fields such as with plumbers, electricians, masons, etc... You have a master and an apprentice. The apprentice learns the "tricks" they can't teach you in school because you only learn them from practical experience. Then you become the master and learn even more tricks from mistakes you made during your career, and you pass those on to your apprentice. inb4 programmers need to be certified and join a union
1. Define the goal of the application. In a single statement what is the one problem this application will solve. There can be only 1 primary goal. 2. Define your technical requirements. What specific actions must the application do to accomplish the 1 primary goal. 3. Define your verification process. How do you know once you have accomplished a technical requirement and not destroyed other technical requirements? This could be unit tests or it could be something else. 4. Write code. Solve one technical requirement at a time, write a verification of the accomplishment, and add the verification to the verification process. Once that is done you can focus on secondary goals that extend the 1 primary goal and repeat these 4 steps for each secondary goal.
was this post made using the extension? 
I havn't had a chance to. I am working on a giant presentation for work to switch to a Webpack pipeline from an integrated solution (Our front and backend are tightly coupled currently). Further, I am trying to push React with Redux simply because we have complex real-time apps and have run into multiple issues where just finding a re-create is near impossible and managing two way data binding in a complex real-time app is a nightmare. So I am taking my time learning each technology so I can properly explain why we need to use this. I have heard of the time-travelling debugger and it is near the top of my list to check out next.
Here are the semicolons from each of the code sample. I didn’t use them. Feel free to take these spare semicolons. ; ; ;;;; ;; ;;;; ;;;; ;;;;; ;;;;; ;;;;; ; ; ;;;; ;;; ;; ; ;; ; ; ; ; ; ;; ;
&gt; And it's still nigh impossible to find candidates for positions that can reliable explain when to use bind, call or apply. That is a pretty crappy litmus test. Those 3 methods only exist to supplement the definition of `this` (although I know people use them for more than that). In other words, they are work-arounds. If you can't program without those then you probably don't understand inheritance as well as you think you do in this language.
Isn't supporting multiple different module systems the purpose of the UMD format? It can support browsers, requirejs and commonjs. I can see this technique being used to create multiple versions of a package for different browsers, eg. one for IE and one for !IE though.
Meandering drivel. But at least they call out Mashable for the garbage they are.
very cool!
These Top 20 Click Bait Headlines Will Make You Hate Click Baits. You Won't Believe Number 7!
But the point is you know they exist and you know why you would choose not to employ them. It's just an example. And it's not like a hard and fast rule. But if you are in this language - imho - understanding these sorts of things is something I would look for in a Dev. Open source projects are another thing. If I can see the person can think in code - I don't care if they can't answer trivia questions. 
Successful bloggers used these top 10 headline hacks to boost their readers, and you won't believe what happened next.
NOTE: this is about as foolproof as [Donald Trump's plan to close off parts of the internet](http://time.com/4150891/republican-debate-donald-trump-internet/). Trust me, it works. I also [tweeted about this](https://twitter.com/seiyria/status/677538787904253952).
I've tried it once, and it's so awful. Half of time code giving **correct* result won't pass for unknown reasons.
&gt; A shit Java developer forced to write in JavaScript, for example, probably can't live without ES6 classes and Angular. Agree with the Angular part, disagree on ES6. A shit Java developer is not writing his JS in babel. Hence no ES6 classes available for him.
In my experience, the most useful tool to make this setup work is actually a human :) The scrum master/project manager/lead/client, whoever is managing it, makes sure that all the requirements go into tickets, all the tickets are assigned to the right people, monitors progress, expectations, release timing, etc. Its not fun job (for me) so when someone isn't in charge of that, and the roles are split, it doesn't run smoothly for long.
How do you make a decorator without `apply`? var rate_limited_function = rate_limit(your_function, 100);
[The decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern) allows you to extend functionality of a component by wrapping it or otherwise merging into it capabilities of another component. Its one of the core patterns of the single responsibility principle. I would recommend studying and learning about [design patterns](https://en.wikipedia.org/wiki/Design_Patterns). They really help to both classify types of problems and allow effective communication of strategies with other developers. 
Np, I was just about to buy a month of plus and saw this. Saved me over $40 a month (created a plural sight account with a ten day trial and saw this awesome deal and extended my membership to six months of plural sight plus).
Every development team I've worked on is at least 50% non British. We're an industry that accepts we need to look for people further afield. Also, I know a lot of people without any qualifications. If you can get past the HR people that can't see past your lack of degree you should be OK. Writing a good CV should help that. Most developer CVs are atrocious so that shouldn't be too hard!
Thanks.
Meh, I'd say mid-level not senior. Seniors are the people who know why you should use one over the other and what the trade-offs are for your given situation. A mid-level should know how to use them day to day.
I think the idea is they're relying on outside libraries/non-standard features to make their life easier instead of learning how to do things on their own in the best way possible. (I.e. "I want angular cause it does all the work in a SPA and i don't want to learn how to do these things on my own", and "I want es6 classes because I miss my Java OOP and don't wanna learn proper prototypal inheritance".)
&gt; Reordering 50 000 elements (Chrome, MacBook Pro 2011) This touches on the point I was trying to make. From my POV, this is an unrealistic use-case. How much memory is all those elements wasting? The fact that it takes `1830ms` should be a sign that the solution (DOM-based re-ordering) is probably wrong because it's already more than `1s` too slow, so it being faster than everything else doesn't really matter, IMO.
&gt; He mentioned the two pillars... and he is entirely right, but he failed to elaborate. The two pillars he mentioned are prototypal inheritance and functional programming. There are many useful things to know about programming in JS, but IMHO neither of those is anywhere near the top of the list. OOP is terribly over-rated and always has been (edit: and inheritance is probably the most over-rated part of OOP) but in any case it's perfectly possible to create successful, large-scale JS projects while hardly touching prototypal inheritance. This is more true than ever now that we have tools for actual modular design and, with ES2015 and transpilers, for coding in the often more familiar class-based style. Obviously anyone programming JS seriously needs to be aware of how prototypes work, but calling PI one of only two pillars of the language seems wildly overstated. Functional programming is an interesting and often useful style, and some of its ideas have been working their way into mainstream languages over the past few years. Unfortunately, JS is a pretty awful language for serious functional programming. A lot of the way JS is used idiomatically is about as anti-functional as you can get. Where higher order functions are used, which is far from the only defining property of functional programming, JS syntax is all kinds of clumsy. So again, knowledge of these tools is useful, but I'd hardly say they were one of only two pillars of the language.
Could you possibly tell me who he is and why people on Reddit seem to have strong opinions about him? Never really read anything by him before this and I feel like I'm /r/OutOfTheLoop 
Yeah I found it yesterday and will definitely play with it when I have time.
SQLite, MySQL, Oracle, Postgres, DB2, all natively accept and return JSON too, though. How does Mongo's handling of it differ to native JSON in the popular relational databases?
I would upvote this a 100x if I could.
&gt; He mentioned the two pillars... and he is entirely right, but he failed to elaborate. I'm going to do the thing where you take a huge post with a ton of valid points and only respond to one. For anyone who wants to dive deeper, the author is referencing his two (very good) posts: * [Prototypical Inheritance](https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3) * [Functional Programming](https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4)
I'm sorry if my answer isn't as robust as you might like, but I only have experience with Postgres and working with JSON there feels clunky (lots of supporting functions but not native functionality). There are a lot of "row-to-json" and supporting functions to memorize, whereas MongoDB supports it natively so you don't have to think about formatting it, which leads into... MongoDB uses a flexible schema which fosters quick, iterative development and less time spent formatting tables and creating supporting tables to join on. The ability to use nested JSON objects in MongoDB without any supporting functions also eliminates the need for complicated JOINs and view layers. I also like the [query system](https://docs.mongodb.org/v3.0/reference/operator/query/) for Mongo. You pass a "selector/query" object (also JSON formatted) to the query method which makes it really easy to call Mongo from Javascript (which might only be useful if you're using Javascript on the backend, like me).
Why is it that publish needs to churn for 2 solid seconds? Is there a way to not have it need to do that?
Mongo allows to have nested deep structures without defining relations and such, it is just really "native" to javascript as you just pass around your model values. It is also really fast.
So publish is from ROS, it's just sending a message saying what velocity the robot should move with. If you perform it the robot will, for a short amount of time move with that velocity. I can't find the documentation for how long it officially does move, but &lt; 1 second. The "block" that I'm implementing is to move the robot for a chosen amount of seconds. The nature of publish kind of explains my desire to have some sort of wait between sending messages, I think. Again, setInterval works fantastic for this, providing there isn't any blocks after it, but as soon as more blocks of movement come into the mix it's all messed up.
Hype and first-to-release, really. MongoDB (the company) has been sponsoring hackathons left and right, and publishing lots of buzzwordy blog posts (often with questionable or even outright false claims), and has gained a lot of popularity that way. Additionally, they were the first with a workable module for Node.js (from what others have told me), which gave them an early-mover advantage. Lastly, because they've made a lot of effort to make it *look* easy. I emphasize "look" there, because it's really anything but easy - it is very deceptive, and forgoes long-term maintainability and time-saving in favour of a short-term advantage. It's actually [really quite terrible](http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/), and a dangerous trap to fall into.
&gt; which are very easy to work with in Javascript as they are natively accepted Javascript objects and therefore can be passed as arguments and returned by functions That is false. JSON does not exist in Javascript any more than in any other language - and it's serialized and deserialized like any other kind of string-based serialization format. A lot of people mistakenly call JS objects "JSON" because the syntax looks similar, even though the two have nothing to do with each other. If it isn't a string, it isn't JSON. &gt; It removes a middleman translation layer that is normally required when dealing with relational databases. It doesn't, for the reason above. And removing the modelling layer is not a feature, and will bite you later.
&gt; The ability to use nested JSON objects in MongoDB without any supporting functions also eliminates the need for complicated JOINs and view layers. It doesn't, for the majority of applications. [This](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/) is why. &gt; I also like the query system[1] for Mongo. Keep in mind that it has an unfixable injection issue. &gt; You pass a "selector/query" object (also JSON formatted) to the query method which makes it really easy to call Mongo from Javascript (which might only be useful if you're using Javascript on the backend, like me). If this is what you're looking for, you might as well just use a query builder like Knex for an RDBMS of choice.
It sounds like you don't need to call publish as fast as it seems like you're trying. You should be fine breaking that up into a setInterval or requestAnimationFrame callback and be ok. I guess I'm not understanding how later blocks of movement cause trouble. Is this something that needs to happen after the 2 second loop completes? Or does it need to interrupt the loop, cutting it off, performing something new?
I'd be willing to concede that first point if you can produce an example where a JSON object can't be passed to an Javascript function. I still think it's important to have a midlayer (I use Meteor for it), but I still don't think it's a requirement.
You're right - I'd like to be able to call it every 100 ms, or some other interval, ideally so that I'm not sending too many messages. Using setInterval means that my code classes the function move_forward_time as complete once the interval starts. So if I have another block after it, it will start performing that one. The problem here is that from one block to another I don't have control over how they interact. Here is an image for an example: http://i.imgur.com/Itwpgbr.png If I use setInterval, it will set the interval for moving and move on to the rotate left block. Trying my best to give as good an explanation as possible, again feel free to fire any questiosn you think might help you in understanding the real issue here. Also, thank you very much for taking the time to try and help!
&gt; It's not. It requires you to think a different way as you model your data, but once you understand how to model relationships and use denormalization sparingly it's just fine. No. MongoDB has a *fundamentally* different data model from an RDBMS, and one that is unsuitable for most applications. Your data model isn't a choice - it can only follow the shape of the actual data you're working with. Doing anything else is going to lead to endless headaches. [This link](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/) that I also posted in another comment, goes into more detail. If your data is relational, then *at best* you're going to be reimplementing JOINs, models and data constraints in your application - which is the wrong place for them to be, and is going to lead to data inconsistency issues down the road, as your application grows and gains more moving parts. It is simply not viable to store relational data as a flat document. This isn't something that any discussion or "opinion" can be had about - it is just flat-out not technically viable, because it is a fundamentally different model. &gt; The read speeds are insanely good and only get better once you implement a replica set/operation log. Write speeds are the biggest bottleneck, but there are ways to improve write speeds (like sharding). There is exactly zero evidence of MongoDB outperforming PostgreSQL, to just name an example. Feel free to show otherwise. It's all unfounded marketing claims. EDIT: Which I also address [here](http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/).
Have you seen Facebook's open source experimentation project, it could be helpful: https://github.com/facebook/planout Webpack could also be helpful, have a look at codesplitting: https://webpack.github.io/docs/code-splitting.html I'm the cofounder of a startup specializing in full-stack online experimentation, if you'd like to discuss more you could send me an email: shalom@digitaloptgroup.com
Eric Elliot has always struck me as a smart guy. I read pretty much anything he writes that isn't behind a paywall. But, with that said, I almost never agree with him. He's a staunch supporter of Prototypal Inheritance. His work experience has "taught" him that Classical Inheritance leads to complex refactoring because you can misunderstand your class taxonomy in a way that writes you into a corner. He also thinks that a lot of the complaints about PI or OLOO (objects linking other objects) is that the syntax is less pleasant, and he thinks that's stupid. There are lots of people who echo his thoughts, both from the PI/OLOO world and from the functional programming world. But that's the great part about developing software--there are lots of patterns and lots of people who find benefit from them. If you were looking for reasons why those approaches are "bad," you'd find people who write classes that think classes are the best thing ever. Anyway, bottom line is, I disagree with him on this. I think a better approach might be to hire someone who is either *flexible* or understands both approaches and has a chosen preference. Hiring someone who is unwilling to bend, rather than choosing the appropriate pattern for your team/project/etc, is a bad idea. But I feel like his approach and choice to assume they aren't capable of coming over to his side of the fence is short sighted.
This debate is getting really pedantic really quickly, so lets agree to disagree. MongoDB works for me. I model relationships with it. I use it to manage users. I use it because it's intuitive and it makes development fun for me. It makes one-man web development as a hobby viable and cuts down on the amount of time required to make a finished product. I use PostgreSQL for work, so don't feel like I'm being left in the dust by choosing to develop with MongoDB. I don't need to see the light, or be converted. I have a personal preference and that's okay. And Meteor split itself into several separate and optional modules within the past year, but I agree it was monolithic before then. 
If you load any page i.e https://deckable.com/livedeck/star-wars , view the source, see all the rendered content. Once you navigate to other pages, the client side JS takes over. We're using Fluxible by yahoo fluxible.io - Happy to answer any questions for those who are interested in this or are having issues.
Ah, I get you now. So you have the operations you want to perform listed synchronously, but you want to perform them asynchronously. What you'll want (or at least one way to do it) is a queue - an array of operations that your loop (setInterval) can process as it loops. Once the first operation (move) has run its course (1s), get rid of it and work on the next operation (rotate). Just going off the top of my head, a real quick example would be: https://jsfiddle.net/11m83wh7/
See http://mrale.ph/blog/2012/12/15/microbenchmarks-fairy-tale.html and the his related talk https://www.youtube.com/watch?v=65-RbBwZQdU
The reusable `rate_limit` function which returns a rate limited version of `your_function`.
Note: Eric actually likes to use inheritance. What he likes to call "composition" is multiple inheritance. Composition is about having objects own instances of other objects. So, please take that piece of advice with a shovel of salt. See also: https://www.reddit.com/r/javascript/comments/3oy9c3/composition_vs_eric_elliott/
Thanks for the response; would this be similarly achievable without pre-emptively creating a queue of tasks? As my reply to /u/senocular conditionals that rely on real time information make a queue worthless for anything other than the timed movements
&gt; At the very least you can choose OOP or Functional Programing This has nothing to do with your data model whatsoever. &gt; and there are many different ways to create abstractions And none of them is appropriate in every usecase. &gt; It seems to me you don't actually have experience with document-based storage and instead are relying on anecdotal evidence and failure stories. No. I understand the designs, the tradeoffs, the data models, and how things are accomplished in various different storage models. This is a technical argument - I don't care for anecdotal evidence alone. &gt; Here are plenty of examples of MongoDB working in production environments[1] . 1. Marketing material from MongoDB itself, so already from a dubious source, because they clearly have an interest in portraying their software as being great (even if it isn't). 2. [Appeal to popularity](http://www.nizkor.org/features/fallacies/appeal-to-popularity.html) 3. None of this actually gives you a realistic representation of what issues they have run into, how or whether they were resolved, and what the developers think about it in the long run, taking into account maintenance. &gt; Idk. I'm having a pretty easy time of it. To me, this sounds a lot like a case of the [Blub paradox](http://c2.com/cgi/wiki?BlubParadox). &gt; I never claimed MongoDB outperforms PostgreSQL. I just answered OPs question as to why I, a full-stack javascript developer, prefers using Mongo. You claimed that it was "really fast". There is no hard evidence that confirms as such, and quite a bit of evidence that shows otherwise. PostgreSQL was simply one example. Don't make performance claims if you don't have the hard numbers to back them up.
Have fun writing device drivers in javascript because your homepage's carousel is a jQuery plugin
He explained in the quote you posted why he says this. But as to why using inheritance (in any language) might be looked down upon is because we should "prefer composition over inheritance." ( https://en.wikipedia.org/wiki/Composition_over_inheritance ) the only example I know of where inheritance offers an advantage is in the form of lower amounts of typing when creating definitions for classes that naturally have a hierarchical structure that does not change over time. Such classes are exceedingly rare. There might be some memory usage advantages to using inheritance in some languages, but not sure, and some languages require inheritance outright, or require it for certain preferred code forms (method chaining comes to mind). The cost of inheritance usage is greater maintenance costs, inappropriately placed behavior, unexpected and non-intuitive behavior sources, behavior collisions, and loss of flexibility. Testing is harder too, because every derived class inherits some or all of its behavior from other classes.
&gt; This debate is getting really pedantic really quickly, so lets agree to disagree. MongoDB works for me. I model relationships with it. I use it to manage users. I use it because it's intuitive and it makes development fun for me. It makes one-man web development as a hobby viable and cuts down on the amount of time required to make a finished product. I use PostgreSQL for work, so don't feel like I'm being left in the dust by choosing to develop with MongoDB. I don't need to see the light, or be converted. I have a personal preference and that's okay. It is "getting pedantic" because you are using the wrong terminology, and as a result, your argument is flawed. None of what you said here contradicts that, and none of it really has anything to do with the arguments being made - it's just a reassertion of what you already said before, with no supporting evidence. You are free to keep using it, of course. But if you make fact-like claims that are wrong, then I *will* correct them, simply to avoid others being misinformed. &gt; And Meteor split itself into several separate and optional modules within the past year, but I agree it was monolithic before then. That it is split into modules does not automatically make it modular - if it is still tightly coupled and the parts still depend on each other, it is still monolithic. I don't follow Meteor very closely (because of said monolithicness), but I have not seen anything to indicate that it has become any less tightly coupled.
&gt; with a shovel of salt. And, if you intend to apply it, a prefrontal lobotomy.
How does he plan to make money? While the site is pretty cool I can't see the security in leaving his job for it. 
I already conceded so now you're just being inflammatory. Tact can go a long way in life, but no hard feelings. I appreciate when someone more knowledgeable can step in to help clarify things or articulate points others can't find the words for. Thank you for pointing me towards Knex. I'm going to check it out. Meteor might be worth looking into again even if just to have a finger on the pulse of the state of things. Like I mentioned, they split off a bunch of what used to be required modules into optional modules (~1.1 I think) so that they're cohesive, but not coupled. The front-end is also interchangeable now, with official support for Angular/React in addition to their in-house template engine, Blaze. It's been on the roadmap for a while now, but Postgres still doesn't have official support. The ecosystem is doing well though. That said, I've been looking into [Phoenix](http://www.phoenixframework.org/) for my next project.
I am hoping that when ES6 modules finally get here we can finally disregard OOP and inheritance entirely. OOP Inheritance really does make it stylistically easier to decompose logic into smaller pieces that can be stored in separate files and easy reassembled without additional work to the application logic. In my mind that is the only reason left to ever consider applying inheritance. The two pillars approach is a simple way of describing how JavaScript works for people who have absolutely no idea, but probably understand the concept of inheritance well enough. You could just call it what it really is, *lexical scope*, and teach it all as a single unifying concept... but that scares the shit out of people who are only really awesome at writing Java classes. The concept of lexical scope really is the single most important concept to understanding how anything works in this language. &gt; JS syntax is all kinds of clumsy. Yeah, if I could do it all over again I would avoid things like ASI, operator overloading, optional curly braces, white space as syntax, and all the error-prone incompetence toleration.
"Really fast" is obviously very subjective. Looking at my app's performance monitoring I can see that the live search on my app queries &gt;2000 documents in an average of 32ms. That's really fast to me. It's no Facebook, but it handles several hundred users simultaneously with no problem. It caters to a niche community, so it'll never be much more than that. 
Yeah, I went to art school. I can't really relate to what a computer science program is like. As I grew interested in things like compilers and other languages I just naturally pulled in the relevant text available online and through books to come up to a reasonable level of understanding of some of it. But the landscape of information is vast and rapidly expanding. I don't think most schools are capable of keeping up. So they teach you the fundamentals. They might've focused on C# but the ideas they were trying to communicate were an understanding of loops and variables - functions and algorithms. You aren't learning how to create a link to list so much as learning that such a thing can exist. One must experience and AVL tree to truly understand it. I think school is supposed to do that. I assumed that's what it did for people that went through it. But as time has gone on I have seen a lot of kids in computer science programs that never seemed to get beyond the basics. Things like dependency injection, design patterns, and FP apparently are not covered. But we live in a golden age. All the information in the world is available for free online. It does seem like you're trying to drink from a firehose. In a way that is true. But the best way to handle it is to embrace it. The smartest people realize they are only touching the surface of a mountain. They know that no matter how much they know there is always a little bit more to know about a little bit more. As long as you express that level of curiosity and exploration to an interview or I can't imagine people thinking that kind of an attitude is anything but positive. 
I heard they've gotten a bit better over time with that. I learned JS through them back in 2012, and while it was suuuper rough in some places, I got through the vast majority of it. It was the first time JS really "stuck" with me, and it's because they have an awesome format - learn a bit, write a bit, repeat. But yes, last I checked, their execution left a lot to be desired.
A heartfelt thank you to you then, I ran accross this right when I started spending time on Meteor, and this was before I understood why NPM or Node was such a big deal. As silly as it sounds, I can attribute a lot of why I know what I know today to this article, otherwise I'd still be pretty far behind on current age JS happenings.
&gt; what do you think? I think it's a neat web application, but I don't understand why someone would leave their job to build this. Why not spin it up as a side project and see if it flies first?
This depends on how that loop functions and how it interacts with time. The loop body has a "move for 1 second" with the loop being dependent on some value of "front laser distance". Does the loop wait for the 1 second to move before it checks its condition? Or does it repeat arbitrarily until that condition is met? I'm guessing if it did the time wouldn't stack, so any additional evaluations of move for 1 second don't become 2 then 3 then 4, etc., since that could mean moving well beyond the time you'd like. But does that last pending second remain too or does movement stop altogether? My guess is that it would stop, and really all the one second represents is a maximum allowed time between iterations of that loop. In that case all you'd need to do is adjust the condition through which the current queue item is considered complete. Right now there's a check for elapsed time that completes, and removes the item from the queue. This could also be altered to include the loops condition of checking front laser distance. https://jsfiddle.net/11m83wh7/1/
It's a love-hate relationship for me. I love making these revelations, trying out concepts, figuring out how to improve my learning abilities, etc. But it all stresses me out. Every second I feel like I fall further and further behind the curve. There are hundreds of frameworks out there, how can I choose the right one for the job from the hundreds? If I had known about the history of programming, I could have been better prepared for these trends. Should I instead spend my time looking into the history of programming instead of current trends? Is there an ideal balance? Every question I answer spawns 5 more. Again, don't get me wrong I love it, but I just get physically ill sometimes trying to rush as fast as I can to answer each question. I wouldn't have it any other way and I love that I can sit on my comfortable couch, doing research with the ease that people 20+ years ago could only dream of. It's just a balancing act I haven't quite mastered yet. And don't get me started on how people can write articles, books, or libraries/tools. That boggles my mind. There's so much to know, how can you know what you are writing is correct? Putting your word out there like law seems incredibly arrogant for me, even with decades of experience. Maybe that's something I'll grow out of thinking though, I don't know. 
I think you were heading in the right direction with the HTTPServer module for python. You're going to want to look up information on "REST API" or "REST Endpoints". You will call your server from Javascript via the REST Endpoint which is located at a URL/path. Think of it as making a long distance method call.
I suppose the things you want to google for is tutorials on making REST (post/get/put) calls with javascript to a backend. On python side you can use simple frameworks to get you started ala bottle.py or flask to handle the REST, on the frontend you might start with JQuery for the simpler ajax calls. I'm sure if you include REST in your search for tutorials that you'll find useful resources 
In this example it would, ideally, in each iteration perform the function move for one second, then after the second has elapsed, return to looping. This specific task would be better implemented with a "start moving" block, then loop until the condition is met, then outside of the loop "stop moving", but in the program this implementation should also be available. Essentially what I need overall is a setInterval loop that doesn't move on to the next piece of code until it's complete, that would be the ideal solution. Again thank you very much for the code snippet but the issue I'd have would be pushing finishWhen: laserIsClose to the queue because the the loop in my image is handled completely separately, I have to treat all of my blocks as if they're standalone and don't interact with each other unless they're bridged with a loop, like in the image. 
First, some background: * HTTP is a plaintext request-response protocol that lets you send a single GET, POST, PUT, DELETE, etc. request to a single resource (URL). For each request, you get a response, and the connection is terminated. * When you loaded this reddit page you sent "GET /r/javascript/comments/3x9hkr/....." to `reddit.com:80`. (If you're unclear on how this works, try running `telnet reddit.com 80` in your console and actually typing `GET /` and pressing enter.) * When you submitted your post, you sent "POST /r/javascript" and a bunch of specially encoded data that contained all of the form fields you filled out. [A POST request looks like this.](https://en.wikipedia.org/wiki/POST_\(HTTP\)\#Use_for_submitting_web_forms) * With HTTP, by convention, you want to use GET for reads, POST for writes. There is more to it than this, and it is only a convention, but this is enough for 101. * AJAX stands for... actually forget what it stands for. AJAX lets you make asynchronous HTTP requests within JavaScript. Asynchronous meaning sending the request and handling the response happens in different places at different times. This was invented in 1999 by Microsoft and made popular in 2005 by Google Maps. Before AJAX, every time you clicked a link or button, the entire page refreshed. * jQuery is a JavaScript library that runs in the browser that smooths out cross-browser inconsistencies. It is primarily used for DOM manipulation (this means adding, removing and manipulating HTML tags on the fly). It also includes an ajax utility function. * Flask is a very light-weight Python HTTP server. Unlike something bulkier like Django or Rails, you can write a single `.py` file that contains an HTTP server that responds to all sorts of GET/POST requests to all sorts of URLs. * JSON is a serialization format whose syntax is compatible with JavaScript native objects. [Here is an example of what it looks like.](https://en.wikipedia.org/wiki/JSON#Example) So, given all that. You'd write a Python application that uses the Flask library. On the server: You would write the appropriate Flask code to respond to a GET request, like `GET /widgets`. and your Python application would grab the widgets from the disk (or DB, or whatever), [turn it in to a JSON string](http://stackoverflow.com/a/13089975/19779), and then send the JSON over the HTTP server. You run the server, which listens on port 80 (or whatever port you want), and it serves requests when they come in. On the client (web page): You would write an HTML file that includes the jQuery .js file and a custom Javascript file that you write. In the custom Javascript file, you would, using JQuery, tell the browser to initiate an AJAX (POST) request to your server when the page loads, and display that somehow by manipulating your DOM elements. 
&gt; I'm basically learning JavaScript in a vacuum That can't be helpful; how do you breathe? &gt; I would absolutely love some knowledgeable eyes on my code, especially on project one, to tell me how I can improve my approach. Looking at your bowling game, there are three things you could start doing: 1. You need to pull things out into functions. At the moment, you have these huge chunks of code that handle all these different concerns. It's tough to get a handle on what's going on. 2. You need to separate your concerns. You have functions that handle both game logic and DOM manipulation. The result is that code that handles either is scattered through your application, and that neither your view code nor your model logic are easily replaced or augmented. 3. Use objects to hold together related data. Don't have the player's data scattered across various arrays - just have a player object. Don't have naked data structures manipulated by every part of the application - use objects which hide away their internal details and provide a limited number of meaningful methods to access them. 
&gt; so I don't see why you're so dramatic about the subject. I don't think I'm being dramatic. I simply trying to tell you that your benchmarks are unrealistic. I already told you why: that number of elements wastes a lot of memory. If you insist on loading that much crap into the page you're hurting user performance and you don't seem to understand that, so good day.
That's all extremely helpful advice. Thanks! I hadn't really considered DOM/logic as a divide in the purpose of parts of the code, which I suspect is because I had absolutely no idea what DOM meant before I started this project.
&gt; argh, it's this kind of crap that makes me hate reading anything by Eric Elliot. most of his articles are just advertisement for his business, he uses these controversial statements to make it work and get some traffic from twitter, reddit etc.
if you push to a branch called `gh-pages` you can get your stuff to run in the browser on github. The bowling game would be https://acrimer.github.io/bowling
If you look at the spec, ES6's classes are defined in terms of prototypes. That's true. However, there is a `class` keyword and, under the hood, engines create actual classes for performance reasons. If you use the `class` keyword with V8 (or follow specific prototype-centric patterns), you do get an actual class which is used to stamp out the instances. It's drastically faster this way.
Thank you for this very helpful response! I googled for Flask, AJAX, and jQuery and found [this resource](http://code.runnable.com/UiPhLHanceFYAAAP/how-to-perform-ajax-in-flask-for-python). It was exactly what I needed!
Facebook flow. Type safe javascript is a huge leap in productivity, code reliability and readability. Forget about "undefined is not a function" and friends; get a clear picture of the data flow in your application.
MongoDB is easy to use for quick and dirty prototypes. It's use in production is pretty minimal (and for good reasons). I wouldn't say that the JS community "prefers" mongodb; more that it has some visibility in our community as one of the first popular, easy to use DBs with strong support for JSON documents.
As someone who only knows that Rust was created by Mozilla (right?), someone not terribly familiar with low level implementations of classes, and this is a JS subreddit, can you give me a summary of what you're talking about in more generic terms (not Rust)?
I can relate to that. Class inheritance is for people who need to appear smart, or write books about how clever they are. People who want to make things happen, don't need that. I like to talk about inheritance with my gay friends, but when in shop, I don't give a shit.
&gt;Companies often pass on very good prospects due to popular but worthless techniques like whiteboard coding challenges or puzzle problems. But you need to know the [formula for triangular numbers](http://cubedrone.com/comics/c/cutting-the-gordian-knot) to excel in a programming job, right? RIGHT? D: &gt; prototypal inheritance and functional programming. Both are used extensively in every large JS app I’ve ever seen. Ugh. Is it because you built them? Prototypal inheritance is the worst. &gt; Uber is already putting a huge strain on the global taxi industry. Oh god, the future is nobody but software developers and capital owners getting paid enough money to live, isn't it. &gt; *furious masturbating to JavaScript* Hmm.
&gt; who 100% agree with him Do they really? He's actually in favor of using multiple inheritance, not object composition. Concatenative inheritance is form of multiple inheritance. It's not composition.
FYI: AJAX stands for Asynchronous JavaScript And XML. It's a reference to the object used to make the request, ```XMLHttpRequest```. Back when it was first implemented in IE by Microsoft it used MS's XML DOM library to make the request in the background without living the UI. This was before the days of JSON when XML was king. In fact, there's even a property off the response object named ```responseXML```. If it detected the response was XML it would parse it for you and you could have access to the XML DOM immediately.
Yeah, but... 1. The class keyword is sugar for particular form of prototypal inheritance 2. What Elliot advocates for using instead is a very slightly different form of prototypal inheritance 3. Elliot has never tried to explain why his form of prototypal inheritance is better; he instead argues that composition is better than inheritance which is arguably true, but *nothing he advocates is composition*. So saying "he's not irrationally afraid of the 'class' keyword, he's irrationally afraid of the 'new' keyword" is arguably correct, but it doesn't help. Why is inheritance okay if you avoid the new keyword? Why is it okay if you're inheriting from what he calls an "exemplar object", but not if you're inheriting from a "blueprint object", despite the fact that the two are logically and semantically the same? His article [here](https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a) is just *weird*; full of sweeping assertions that apply as strongly to what he advocates as to what he criticizes. For example: &gt; Using concatenative inheritance, you just copy properties from an exemplar object to a new instance. [...] Class inheritance by virtue of its mechanisms create class hierarchies [which] lead to arthritic code (hard to change) and brittleness (easy to break due to rippling side-effects when you modify base classes). Ignoring his persistent tendency to invent new terms, what he's saying is that if I inherit using the class keyword from a base object, then change the base object, my code may break (correct!), but if I inherit using anything other than the class keyword from that base object, and then change the base object, my code will not break because the underpants gnomes will refactor it for me. (Sorry, it's hard to take his argument seriously. Or: &gt; Prototypal inheritance does not necessarily create similar hierarchies. I recommend that you keep prototype chains as shallow as possible. But that applies just as strongly to protoypal inheritance using the class keyword (or as Elliot inexplicably calls it, "classical inheritance"). If you're arguing for A over B, but your arguments are just as correct if you swap A and B, you may need to rethink your arguments.
In my experience most of the people who find Elliot laughable are very experienced JS developers from a functional background who hate inheritance and deep hierarchies. On this subreddit (and even in this very thread) Elliot is mostly being criticised for being an advocate of inheritance *at all*. To dismiss his critics as C# developers with a love for inheritance is...misguided. In fact, I personally find that Elliot's few fans tend to be the biggest advocates of inheritance and deep hierarchies.
&gt; Neither Kyle Simpson nor Ashley Williams specifically call out anything to do with composition. So, they don't actually 100% agree with him? &gt; They both embrace OOP via prototypes, because this is the way object oriented programming in JS works. Doing exactly what `class` does would be fine for as long as you do it manually and don't use the `class` keyword? I can't agree with that. &gt; I think you guys are really just nitpicking here. This isn't about a tiny insignificant detail. That inheritance is the devil is Eric's main point. So, that he actually does use inheritance extensively is pretty important, I'd say. &gt; aka delegating properties and behaviors to other objects [which] is fundamentally different from class-based OOP in other languages. The semantics of the language are like that, but it's not necessarily what happens at runtime. Modern engines do use actual classes and you don't actually travel down the prototype chain all the time.
In LinkedIn or angel list you can do a search by location and include the remote option 
Odd, like half our engineering is 40+. 
 try(thisOneWeirdTrick){ document.querySelectorAll('.ad').click(); } catch(e) { document.querySelectorAll('.ad').click(); }
Nothing that /u/joepie91 said was incorrect or even approaching pedantry. You said specifically that "(JSON strings) are natively accepted Javascript objects" which is factually incorrect. It's just as wrong as saying that JavaScript natively treats XML, or any other string based serialization format, as JavaScript objects. Every string based serialization format will have to be deserialized into a JavaScript object before JavaScript will treat it as such. Here's the code to prove that JavaScript will not treat a JSON string like a JavaScript object. function logA (o) { console.log(o.a); } var jsonString = '{"a": "1"}'; var javaScriptObject = JSON.parse(jsonString); // deserialize JSON into a JS object. logA(jsonString); // undefined logA(javaScriptObject); // 1 Edit: Perhaps what's confusing you is that your Mongo drivers are automatically deserializing the JSON that MongoDB returns, and you've conflated this with the fact that MongoDB returns JSON into one incorrect understanding. 
Are you doing this to experiment/learn or to actually use? If you're learning, it seems neat but like it'd be more overhead than a non-promise alternative. If you're doing it to actually use, you should be aware of: * https://github.com/paldepind/flyd * https://github.com/cujojs/most * https://github.com/Reactive-Extensions/RxJS * https://github.com/Riim/cellx * https://github.com/zynga/atom
I find myself thinking the same thing about every web based IDE/editor - how would you write a graphical application? How would you write a game? I guess its possible to install X on the remote and then somehow stream video over the wire but that seems like a chunky experience. I guess that's the difference between these and traditional solutions, in a web based IDE you can only write text based applications.
So actually, I will be implementing this, but I am using [BluebirdJs](http://bluebirdjs.com/docs/getting-started.html) as my promise library. I love using them and while using callbacks may offer some performance gains, I feel that having the clean syntax and portability of promises is a decent tradeoff.
London really is a city of job opportunity. I've worked at many places and I can say generally people do not care your background/sex/race etc etc. What people DO care about is you attitude and work ethic. Basically even if you don't have the required skills, if you can show you are willing to learn and to adapt, then the job is yours. And those people are better candidates than those who have the skills and experience but have an arrogant attitude. It's actually rather hard to find people really willing to learn.
Well written. 
That has to be the weirdest way to create an object that I've ever seen.
Anyone who writes something as pretentious as that article is not someone I would want to work with (or for). I remember reading this a few months ago and being pretty turned off by how hypocritical it was.
Hi /u/a0viedo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/senfkatze, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Same. On top of that many of them lack a lot of features, that even something like sublime or atom provides either out of the box or with extensions. 
Isn't this what the pure render mixin is for? https://facebook.github.io/react/docs/pure-render-mixin.html It works very well with redux assuming you use dumb components with your state tree. 
/shrug. I don't feel bad about getting blatantly pirated content off the web. 
You probably could if you were better at javascript. I kid, I kid.
Not seeing anyone touch on what I think Eric's real point is here. The kind of people who like ES6 `class` keyword will try to apply it to every single system they need to create, regardless of if it is the appropriate tool. Classes become their one-pattern-fits-all and they wield it like a hammer. These people create code that is often overly verbose and can be extremely hard to maintain. That said, I also think Eric is engaging in hyperbole. He doesn't literally mean never hire someone who uses classes. His point is more that you should be wary of someone who is in love with a single pattern, especially something that has been foreign to native JS for 20 years. As an aside, Eric isn't the only long time JS dev who dislikes classes. Douglas Crockford has LONG been very vocal against using `new` and `this`, and Kyle Simpson doesn't use them in his work either.
"responsive editor", to me, means... * a text writing program that changes to fit the space i give. [Example](http://wrapbootstrap.com/preview/WB0412697), change the width of your browser window and watch how the stuff on the page changes. * a person that modifies print before publication, who will answer the phone when I call. you want a text writing program for 7 days? No that can't be right. so you want a person? for 7 days? on *hourly demand?* . . . During xmas, when people are usually on holiday? That can't be right either. In other words, your post isn't clear. 2ndly . . . As someone that, in a loong ago passed life, did print design freelance work, here's my professional opinion about your post: 1. It sounds hurried, like this is something that you want done *yesterday.* **Red flag.** 2. Even after multiple readings trying to decipher perhaps accidentally dropped words, or maybe English-2nd-language, I still have no idea what you want. **Red flag.** 3. After one ~~agency~~ group of people passed on your query, you immediately went to another ~~agency~~ group with the exact same text, complaining about the previous ~~agency~~ group. **Red flag.** Your posts, both of them, have "headache client" written all over them. True or not, I'm just tellin you it's what I see. It's probably not a unique perception either which is why nobody has bothered to respond. I, however, am different. Where most freelancers assume that people are assholes and are always trying to get over on them, I assume that sometimes people just *don't know* and that when given an opportunity, they will learn. So, take a moment, and a couple of paragraphs, to explain what you're after. Or you can just say "fuck it" and go to fiverr.com, upwork.com or guru.com and find a freelancer. I wish you luck.
No, good headlines inform. For example a newspaper: They are informative, and just by reading the headlines you get a rough idea of what's going on. A headline describes what's in the article, and gives you an information if it's worth your time. They don't pressure you to read the article, since the journalists / editors / shareholders don't get more money because of click-baity headlines. A bad headline disappoints a reader, and is more or less the worst thing you can do. In the online-world they do, because a baited click = a ad impression. It doesn't matter if it disappoints the user. 
what is 3rd party pup?
Hi @acemarke, Your explanation on mutability is indeed correct. For future stability and future maintenance I can assure that at Mendix we are using Mobservable in production on large projects and even distribute SDK's to our clients that are based on it. I know for at least some projects that they use Mobservable professionally to build their apps. See for example: https://discuss.reactjs.org/t/redux-or-mobservable-what-to-choose/2453/7?u=mweststrate
Crockford's factory functions are 100% untoolable and they require quite a bit of boilerplate. Even the signature is completely unusable. "Spec", it says. Very funny. And there is no advantage whatsoever. It's pretty much the dumbest shit I've ever seen. Crockford certainly has some good ideas, but this isn't one of them. Kyle Simpson does use `new`: https://github.com/getify/asynquence/blob/master/asq.src.js#L23-L30 I'm also pretty sure that neither of those guys agrees with Eric's definition of composition. See also: https://en.wikipedia.org/wiki/Argument_from_authority
I base all my future learning on what I see in film and tv, that's why I write all my GUI interfaces in Visual Basic. [http://youtu.be/hkDD03yeLnU](http://youtu.be/hkDD03yeLnU). On a serious note I think it's perfectly healthy to spend some time with a FP language just to understand how problems can be solved in different ways. 
Not if you use incognito!
I just don't get this "IDE Anywhere thing". If I'm actually going to be doing something, I'm going to do it proper and will be at a machine setup to develop. If that's not my laptop, then it's probably a machine that I would have SSH access to. Even without SSH, I would just use a text pad while in a bind.
&gt; They agree about adding classes to the language being a huge mistake, yes. The details matter. Ashley thinks class is a mistake because "it obfuscates the underlying implementation." A sentence or two later, she also mentions arrow functions as something we should avoid because it's "magic." It's kind of an explicit vs implicit, abstraction vs concretion sort of argument. Personally, I don't agree with her conclusion, but at least her arguments make sense and are factually accurate. Kyle's argument is pretty much the same, that classes make it harder to understand how things work. Then there's Elliott. He blames classical inheritance for deep hierarchies yet ignores the fact that prototype chains and his stamps are just as capable of deep hierarchies. He argues we should avoid inheritance altogether and instead use composition... except, as I hope we all know by now, what he calls composition is actually multiple inheritance. So his alternative to inheritance is... still inheritance, but worse because people are led to believe they're "favoring composition" when in fact they're not. He also delves into many more bogus claims, such as that class violates the substitution principle and the open/closed principle, neither of which is true. In short, Elliott's claims, arguments, and conclusions are pure bullshit.
It's ironic that you talk as if your a great developer yet you don't realize ES6 classes are no different from the existing inheritance patterns in pre-ES6
That couldn't be further from the truth in my experience. Look at the react/redux community, for example 
Your arguing against a straw man point. He literally said *apps* which are not device drivers. Clearly he's talking about web apps. Of course there are valid arguments to not always use universal javascript for web apps, at least make an argument against what he actually said.
&gt; plenty of syntax, could figure out the "tricks" like list comprehension in Python, and was grasping pointers and shit in C++. My Comp Sci was more abstract algebra, combinatorics, information theory, fake assembly programming (MIXAL), algorithms, linear algebra and a bit of programming in there. 
so what would you use as a production database? Say you built an app with a MEAN stack or Flask/Mongo/Angular... what would be the best alternative database for say, for inventory management or reddit style web applications?
Yea. Maybe I'm just not the target market, but this seems like a solution looking for a problem.
postgresql
I'm actually going to ignore this comment-chain from now on. What you and the other commenter "disagreeing" with me apparently missed in my post was that I was merely using es6 classes as an example of the broader issue mentioned by the top of this comment chain: &gt;A shit Java developer forced to write in JavaScript, for example, probably can't live without ES6 classes and Angular. I was legitimately just addressing that. I didn't weigh in on the value of es6 classes qualitatively *at all*. So have a good night. PS: "It's ironic that you talk as if your a great developer" is a realllly shitty, condescending way to start a comment. Being that antisocial, antagonistic developer-guy will not get you very far. Best of luck.
Well for starters, ES6 classes don't offer true class inheritance anyway. It's just sugar on top of prototypes. But really, if you're looking for advice on interviewing, it shouldn't be this type of advice. 
ES7 decorators lets you do both classical inheritance and object composition at the same [time]. I love it.
A totally great way to save you 2 seconds of typing and waste 10 minutes of head scratching to most people reading your code later.
&gt; so what would you use as a production database? PostgreSQL would my first choice, but you can do perfectly fine with MariaDB too. I'd also think carefully about Rethink; I've heard a lot good about it. &gt; Say you built an app with a MEAN stack or Flask/Mongo/Angular Not the best idea, but luckily it's not hard to replace Mongo with a more production-ready DB; your app just relies on a rest API serving up JSON and you could use **anything** to serve that up.
Operator precendence: !(--pending) Is it not obvious, now?
I agree with your thought process in principle, but in this case, I gotta say probably need to brush up on your code reading skills if this confuses you for longer than five seconds, at worst. And once you've seen it once, you've got the pattern down. This is not confusing.
That's some heavy paraphrasing. Here's a breakdown of their cons for native languages. - They were unsure C# C++ would be easier to develop with for this application. - If the time took to learn C# C++ would be useful for them in the future. - C# code could be decompiled to view source. - "C++ more difficult to learn than some other languages" That's 1 out of 4, and to top it off some native language code was still used (Golang).
Very interesting article, thanks!
You can sign up in lest then 5 seconds, just an email and password and thats it, also you can use oAuth as well :)
We are doing our best!
OCamlPro just released a binary version of Flow v0.19.1: http://www.ocamlpro.com/pub/ocpwin/flow-builds/
yuck
I really like this one here: http://eloquentjavascript.net/ There is also a print version
You said it yourself &gt; or follow specific prototype-centric patterns It's an implementation detail and is nothing new in JS engines or compilers/interpreters in general. There's a reason you might hear the saying that going something like: write simple, obvious code instead of trying to outsmart the compiler. 
I agree that code should be kept as simple as possible for the reasons you state, and others. But in this case I think this may actually be the most readable option, or at least close enough to not matter. If your vendor takes a long time to figure this out, they'll have trouble with so much code that this will be a grain of sand in their desert of incompetence. Better sacrifice that grain and make it easier to read for people like us, where it might actually save a few seconds when reasoning about the purpose of the counter. But, hey, it's a taste thing, I was just trying to say that I don't think it's one of those egregious examples of hard-to-read code that really needs to be pointed out. This stuff is not the spaghetti code crap "readability" concerns should be raised about, IMO.
Personally, I just think it's easier to read. Traditional mathematical syntax is `value 1 -&gt; (mutate by) value 2`. By writing `pending -= 1`, you're basically saying 'take pending, reduce by a value equal to 1'. It just makes more sense than reading 'not reduce reduce value'. Some people will argue the semantics of code aren't too important, but I firmly believe that reading and adhering to a style guide can really increase productivity on a project. I've been sticking to Airbnb's [Javascript style guide](https://github.com/airbnb/javascript) since they released it, and I find code much easier to navigate now that it's uniform and I know what to expect. With regards to if-statements, I prefer to omit the braces and inline it if the statement only contains one expression. if (a) doSomething(); if (b) doSomethingElse(); 
A style guide for a team is important. That said, we lint our code on git push to adhere to the style we defined; all the code in the repo has the style we agreed on. Personally I don't really care much what styling choices are made. There's just one thing I absolutely abhor: function monkey () { ... } Obviously that needs to be: function monkey() { ... } But opinions are... just that ;) As long as the team has one standard code styling agreement I'm all good. Edit: Also! This shit: if(18 === age) That's like saying: "if old is the man" instead of "if the man is old". The word "old" cannot be "man". The word "man" *can* be "old". I'm not even sure how to describe that lunacy. I feel it might be a cause from different languages. I know only Dutch, German, and English. And in those languages the subject comes first, the property of that subject comes second. Not inverse. I'm guessing in Spanish and/or Italian it's more sensible, though. It absolutely needs to be: if(age === 18)
Put down your pitchfork, mate.
To be fair I didn't know and I'm a developer of some year, though I'm not routinely in Javascript. If you think of it in terms of it being two operators **!** and **--**, you can reason about it and figure it out and as you say if you've seen it before, then it will be reasonably obious and will be muscle memory. If you think about it as it's presented in the question as a single operator, then it could really mean anything. I'm a little bit conflicted on this one, but I do think it's better to be obvious and explanatory in your code so I think I'd agree with tententai. Especially as the use of -- or ++ is frown upon by some anyway, due to the lack of understanding by some in how they work differently as a prefixed to and expression vs how they work as a suffixed to an expression.
Attribute binder?
You really don't have an event system here; it's more of a promise queue. For each event you're being required to add a new handler. With the standard observer pattern, a single handler responds to multiple, reoccurring events. Promises are also inherently asynchronous which can complicate how handlers respond to events. // pseudo: addHandlers() dispatchEvent() // ... // normally the handlers would have been called by now // but with promises what was synchronous is now async // and the emit() would likely have to return a promise to // allow its caller to know when all handlers have been called 
Personally, I would write that with a statement above like if pending &lt; 0 that logs an error (like: 'Found a negative value for pending, correcting') and sets pending to 0 to avoid catastrophic code failures if pending is accidentally decremented too far. Obviously you'll need to work out how pending got below zero, but it will stop the code from entering what could be an infinite loop. 
I thought that's easily covered by JSbin &amp; friends? The W3C course on edX for HTML5 (parts 1 and 2) uses this method.