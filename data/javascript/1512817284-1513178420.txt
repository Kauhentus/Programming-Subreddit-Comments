The curry and composition ones are super useful, I usually have to google these, although I understand how they work. Thanks for sharing!
This is priceless, as I never really remember how to write this. Great resource!
Interesting. I quite like this to be honest, I'll give it a shot sometime.
Don't use the code outright. Read it and learn it then take the ideas that fit what you want. 
Yes please!
From the [subreddit's FAQ](https://www.reddit.com/r/javascript/wiki/faq): * **Should I ask for help here or in r/LearnJavascript?** In general, if you're asking for help _with_ JavaScript, you should go to r/LearnJavascript. This is specially true -but not limited to- if you're asking for basic help, help with an exercise, an error or some similar situation. If you're asking more for general opinion, a code review, or more advanced questions, you're welcome to post it in r/JavaScript. In case of doubt, probably post it to r/LearnJavascript, though if you do post it here and it isn't appropriate, don't worry, the mods will tell you and no harm is done. ---- That said, I'd suggest you'd need to think... When does a raindrop hit the character? When the raindrop's `y` coordinate reaches a certain point _and_ the raindrop's `x` coordinate is the same as the character's current `x` coordinate. That's the condition, so, for each drop you draw, check whether that happens or not.
All the installation and setup process is explained in the readme. I don't think you need much knowledge on anything to do that... But if you want to tweak or change anything you need to know some node js as zakphi mentioned. Have you tried that? 
I'd just use a library for this. 
I noticed some slight scroll laggyness on my workstation on the demo page; a quick profile confirms that there's a lot of processing going on just scrolling the page with [frequent FPS dips](https://i.imgur.com/mynl7nU.png). This really shouldn't happen when just scrolling the page. I'm not sure if this is caused by the demo page or the library itself but I would definitely check performance in close detail before shipping anything with this library. If it lags slightly on my workstation, then it would definitely have problems on low-end phones and laptops.
Drag does not work in ff mobile. 
At a cursory glance i didn't seen any mentions on how to perform thread safety, no way to do locks or mutexes?
More specifically: no need. Everything is automatically thread-safe thanks to JavaScriptCore’s concurrency model. Read more here: https://webkit.org/blog/6161/locking-in-webkit/ 
I also copy things from my previous project (or even file: new react component? I create file and I for example copy `import React from 'react'. But these are things that cannot be abstracted. If something can be abstracted (like logic), then why not create own helper library? (I sometimes create ad-hoc helpers and save in files like `utils.js`). On the other hand I don't feel a need to abstract everything. Various array operations. I often write them from scratch because they are often very specific - even if I copied them from my other project than I would had to rewrite them to fit my needs. So it still faster to write them from scratch for 2-5 minutes than search in my previous projects and then still needing rewriting. Writing from scratch is also faster for me than look up internet 15 minutes, stack overflow, lodash documentation etc. only to realize that: 1. lodash has no utility for what I want right now. 1. stack overflow has an answer, but code is somewhat ugly. Besides there are four competing answers and don't know which one is the best ("StackOverflow fatigue"). &gt; prototype very fast when prototyping I even do bad things (for example copy-pasting whole React classes just to change few lines) although this is just spaghetti code I willing to write (I mean in serious programming I'm a little bit more cautious).
Hey everyone. This is an article I wrote about how using React's life cycle hooks will change when async rendering is enabled. You'll find it informative particularly if you don't know whether you should be using hooks like `componentWillMount` over `componentDidMount`. I've also included links to two recent proposals: changes to the Context API as well as new life cycle hooks! Hope you enjoy the read!
I don't PHP but: `return preg_replace(['/[άἀ-ἇὰάᾀ-ᾇᾰ-ᾷ]/','/[ΆἈ-Ἇᾈ-ᾏᾸ-ᾼ]/','/[έἐ-ἕὲέ]/','/[ΈἘ-ἝῈΈ]/','/[ήἠ-ἧὴήᾐ-ᾗῂ-ῇ]/','/[ΉἨ-Ἧᾘ-ᾟῊ-ῌ]/','/[ίϊΐἰ-ἷὶίῐ-ῗ]/','/[ΊΪἸ-ἿῘ-Ί]/','/[όὀ-ὅὸό]/','/[ΌὈ-ὍῸΌ]/','/[ΰϋύὐ-ὗὺύῠ-ΰῦῧ]/','/[Ύϒ-ϔὙ-Ὗ]/','/[ώὠ-ὧὼώᾠ-ᾧῲ-ῷ]/','/[ΏὨ-Ὧᾨ-ᾯῺ-ῼ]/','/[ῤῥ]/','/[ΫῨ-Ύ]/','/Ῥ/'],str_split("αΑεΕηΗιΙοΟυΥωΩρΥΡ"),$text);` 
I've been working on a Node/React/Chart.js demo app. It charts bond yields from the treasury, and allow you to animate them over time. Here is the site: http://yield.io/ Here is the code: https://github.com/baus/yieldio 
THANKS!
I see what you did there... I think
:D
Leave
Is this replacement for node js?
DRY (don't repeat yourself) - you repeated three times exactly the same piece of code (almost): Advertiser.find( { THIS_IS_CHANGING} ) .then((advertisers) =&gt; { response.advertisers = advertisers res.send(response); }) .catch(next); instead you can do: router.get('/advertisers', function(req, res, next){ const response = { // I recommend using `const` over `let` (of course if you can) status: "ok", advertisers: null }; // version 1 const selector = {}; if(req.query._id){ selector._id = req.query._id; } else if(req.query.agency_id) { selector.agency_id = req.query.agency_id; } // version 2 - should works too, but not sure const selector = { _id: req.query._id; agency_id: req.query.agency_id; } Advertiser.find({agency_id: req.query.agency_id}) .then((advertisers) =&gt; { response.advertisers = advertisers res.send(response); }) .catch(next); }); of course it's still not complete solution, please remember about validate (and eventually parse) inputs - `req.query` object in this case
Would that work even if a user passes in a non valid query url along with some valid ones? For ex: ?_id=6768g890&amp;name=hoops**&amp;garbage=trash**
Depends on what you mean by replacement. It certainly won’t take over the server-side JavaScript market overnight. But the idea is to use this for heavy micro-services. Where vertical scaling will pay dividends in performance thanks to the utilisation of logical CPUs with JavaScript running almost on bare metal. (and in the future, GPUs, since I plan to add WebCL support at one point) I originally built Nexus.js as a platform for real-time, time-critical applications, like live streaming/transcoding and machine learning. Those are the use-cases where node comes short. My main goal was to cover them. If people want to use it for more, then sure, by all means. :) 
Ah, names. Could be a conflict here with nexus-js, which has a not insignificant following https://github.com/nexus-js
Can you spell this out? Because from my reading, that link doesn't say anything about JavaScriptCore's concurrency model, or how it somehow makes nexus automatically thread safe. It's talking about how a lock implementation.
I’m guessing there’s enough of a disparity between both projects that we can coexist in peace. Nexus.js (this project) has been around since early 2016. Apparently Nexus-UI has been around much longer. 
There is a better multi-threaded runtime made by Microsoft called NapaJS: https://github.com/Microsoft/napajs It uses the more efficient V8 JavaScript engine.
&gt;Pythagorean theorem: √(x² + y²) [Math.hypot()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot) 
Basically, and from direct observation: any two contexts accessing the same variable will contend for access. All variables (objects included) act atomic in the case of contention. You’d generally want to avoid concurrent access though, this is why globals are a bad idea (performance-wise). In short: As long as you’re using promises and not modifying arguments or accessing globals, you’re good. No contentious will ever occur. 
Wow, I didn't know this. Thanks.
I’m sorry, how is V8 more efficient exactly? JSC has 3 different JIT engines (DFG, FTL, and now B3) that kick in for different levels of optimisation depending on function call profiles) and an initial interpreter to cut load time. JSC only locks contexts (a context is basically a state of execution — a stack pointer and packaged closures), so that calling unrelated contexts on different threads results no contention. Unrelated calls will happen in parallel and at full speed. V8 uses isolates to lock the entire virtual machine to all threads every time you call into it, no matter how simple the callee is, and regardless of whether or not the closure variables would cause contention. A simple evaluation of 2+2 will lock the entire virtual machine to all threads for the duration it executes. So, how is V8 more efficient?
I am not a specialist when it comes to JS engines. I merely took the words of most JS developers and speed comparisons.
I am not a specialist when it comes to JS engines. I merely took the words of most JS developers and speed comparisons.
Well, there is this: https://arewefastyet.com JSC and V8 come about equal in performance overall. With JSC beating V8 by leaps and bounds at the sunspider test. The real advantage comes when dealing with a cooperative thread pool and shared mutable state though. Not single-threaded benchmarks like these. Thanks to the way JSC works, Nexus can execute JavaScript in parallel on logical CPUs. So you get (almost) double the performance on a single processor with HyperThreading, at the very least. The problem with Napa.js is zones, you can’t pass things across the memory boundary without serialisation/deserialisation as far as I know. Of course, I could be wrong here, but I think that’s the case.
Thanks!
You surely are more into this topic. Performance really depends on the current development. Thank you for your professional response, I would be really interested in a speed comparison between Nexus and Napa. It would be nice to see a comparison on them in the project README.
You’re welcome! I will add that to the to-do list. I’m certainly interested in this as well. :)
Would be great to see some comparisons between node and nexusjs on the specific types of tasks you believe it will handle better. But the project looks great, super impressive for just one person as well!
Thanks! To be honest, I had been avoiding the performance comparison with Node because I’m trying to avoid the controversy. But I do plan on doing some basic benchmarks/comparison at one point or another. Hopefully without triggering a flame war as a result. I’m being careful because this has already happened when I posted about the beginnings of this project on stack-overflow last year. 
The difference is clear. Agree 100%
Not really.. I doubt asyncle person would want to use it
&gt; I’m trying to avoid the controversy. You cannot really.
&gt; As long as you’re using promises and not modifying arguments or accessing globals, you’re good. No contentions will ever occur. That kind of sounds to me like 'it's thread-safe, so long as you don't do anything that's not thread-safe'. I'm not trying to be difficult here, but I'm not following the reasoning.
i mean, am i wrong? there's that quote that's something like 'you can't know the value of an abstraction until you feel the pain of not having it' - if you (like me for most of my life and tons of devs out there) are just learning, or are a hobby developer or a solo freelancer, all your code is vanilla JS or jquery organized the way that makes the most sense to you. of course frameworks are going to seem worthless, you've written your own DOM manipulation / http / etc abstractions, why would you need to use a framework? 
Okay, I’ll try to summarise it in a simple statement: it will never deadlock or crash as the result of concurrent access to global variables, but it is indeterministic, and if you share a global it’s up to you to ensure its state. Concurrent access to primitive values (incrementing or decrementing a counter, etc) should cause no problems. Appending data to an array in parallel will work, but the order in which your items will be appended is indeterminate. Same applies with objects. This is subject to change in the future as I add new features, synchronisation primitives are a certain possibility. 
I guess not. I just hope people can accept something new. :)
I don't know...I can already feel await come off my shoulders. 
Looking very smooth. Great work!
Bwaahhaha, where can I go to see your live show?
A game framework i have been working on for the last month. It's heavily inspired by Game Maker Language and based around the canvas element. Made with almost no html. All made in pure javascript, no libraries(for now). [BitBucket](https://bitbucket.org/jkism332/ancore)
LOL I chuckled at that too. I don't think I've actually heard someone say the term imposter outside of saying imposter syndrome. 
This is good and I would suggest trying to keep your route 'controller' thin and devoid of any logic. It'd be great for testing if you made a service so that your controller called out to. router.get('/advertisers', function(req, res, next){ res.send(advertisersProvider.get({ id: req.query._id, agency_id: req.query.agency_id })) });
Every day we stray further from God's light.
A simplified command line toolset for the parse-framework application - https://github.com/Unibeautify/parse-framework/blob/master/services.ts
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Unibeautify/parse-framework/.../**services.ts** (master → 6519cb6)](https://github.com/Unibeautify/parse-framework/blob/6519cb6539b7d52dffcf644b423025e276a539cc/services.ts) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I think you’re probably right, just go to be aware of I guess.
You could Probably use Peterson’s. 
Your route handler can be reduced to this: router.get('/advertisers', (req, res, next) =&gt; { let find; if (req.query._id) { find = Advertiser.findOne({_id: req.query._id}); } else if (req.query.agency_id) { find = Advertiser.find({agency_id: req.query.agency_id}); } else { find = Advertiser.find({}); } find .then(advertisers =&gt; res.send({ status: 'ok', advertisers })) .catch(next); }); 
Okay, that sounds like a great model!
[Use the native way.](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior)
You can test if an object has a property with the "in" operator: 'age' in object Property accessors (object['age'] or object.age) are safe to use even if the property doesn't exist. It will return undefined.
Right. But how would the object['age'] actually be searched? Would it search with a for-loop, going through all the properties of the object or will it use a hash table or soemthing? :)
&gt; "they are probably cheating by **predownloading** and specially compressing dependencies since they control their servers" &gt; "I then found that **lodash is preinstalled** on page load." &gt; "I opened a project and immediately added a lodash map operation to the code WITHOUT installing lodash as a dependency NOR importing it in the code. **Instead of getting an error, the map function operated as if it was already available**." You are preloading lodash and leaking it into the context of the application code. See image: https://imgur.com/a/Z5jtk &gt; "they are probably cheating by predownloading and specially compressing dependencies since they **control their servers**" &gt; "you are downloading my other test, seamless-immutable, from unpkg, **not your own servers**" The Lodash JSON file you referenced in my video is coming from your servers, not a third party or the original source location. I don't know if you're modifying it or not on the way to my browser, but your dependency manager is definitely not operating independently from your IDE's servers. See image: https://imgur.com/a/8yocy &gt; "The **lodash code never came down**, only a description of the request." On this, I was wrong, and I apologize. Lodash **is** coming down a second time when loading it as a dependency, albeit as a string inside a JSON request from your own servers. As the video below demonstrates, devtools does not fully show the source of this JSON, so it didn't look like the full source of the dependency. However, dependencies other than Lodash that I tested (seamless-immutable) create an additional request to obtain the source code from a third party source (unpkg). This is what I expected Lodash to do: for it to act like any other dependency installation. However, it does not. I do not know why Lodash operates differently in your IDE than other dependencies I tried. Video demonstration: https://www.youtube.com/watch?v=f782njyZ_vU
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/OhlRyNx.jpg** **https://i.imgur.com/6qBzA0Y.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
 &gt;Appending data to an array in parallel will work, but the order in which your items will be appended is indeterminate. Same applies with objects. In my experience, this is actually where the majority of programmers accidently introduce bugs when dealing with concurrent systems. They're often more subtle and difficult to diagnose. Without locks/mutexes, how would you implement a thread safe concurrent array manipulation in Nexus? I'm thinking of a basic producer/consumer type scenario. 
Vanilla js is a library in itself. Whenever you write String.split().map().filter() etc, you are using a library, even though that library is part of the language. Would you ever consider to implement these functions yourself? It's a waste of time, as they're already there.. Anyway, if you're good at vanilla js, you will have no problem learning to use a framework/library.
Use promises? `await Promise.all(inputs.map(item =&gt; dataProcessor(item));` Promise.all will preserve the correct order for the returned values. Another approach: ``` const array = []; function generateAndAssign(n) { array[n] = generateValueFor(n); } for(let i = 0; i &lt; 10; i++) Nexus.Scheduler.schedule(generateAndAssign.bind(null, i)); ``` 
See `Array.prototype.some()`, it does exactly what you are looking for. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
I think what you need is the high-order [some](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/some) function: var result1 = [1,2,3,4].some(function(v){ return v==3 }); // returns true var result2 = [1,2,3,4].some(function(v){ return v==5 }); // returns false In your case: var foundItem = arr.some((v, i) [=&gt;](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions) (v.section == i));
Ahhhh thank you! I never used arr.some so i didnt think about it. Was about to use .filter but .some sounds way better
Yup. exactly was I was looking for. Thanks!!
&gt; But the idea is to use this for heavy micro-services. Not sure how this would help with micro-services? Should services already be running in their own instance?
&gt; loop through the array to see if there is an item in said section Which property should be checked, exactly?
That is up to the JavaScript engine to decide, but a for-loop is a must whether the search uses hash table or not. If hash table is used, the for-loop is used on the hash table itself.
Good code is the one that you made for yourself. Nothing more, nothing less. If you use code from others, they may not be sufficient enough for you, or they may be overkill for something you need to be done which can cause overheads.
Yes, now imagine a containerised micro-service: it runs a single instance on a quad-core CPU. You host it with Node using the `cluster` module, forking the process into four distinct in-memory images, each one handling a single core. Node is single threaded when it comes to executing JavaScript, and thus will use a single thread to execute JavaScript and another for background I/O on each core. If you host it with Nexus, you will start a single process. It will run 8 JavaScript threads (compared to Node's 4), that's assuming HyperThreading or a similar technology is present, and double the computing time, thus serving double the requests. Moreover, instead of four processes, with each consuming god knows how much memory, Nexus will combine resources: * Each in-memory function will be compiled once by the JIT. (Each Node process will have a separate copy of each function!) * Variables are shared in the monolithic Nexus process. (Each Node process will have a unique copy of every variable in memory) * File/Socket handles are shared. * A single garbage collector will be managing the entire address space, allowing for further optimisations. Basically, a micro-service that consumes 1 GB of RAM per process will use that 1 GB of memory with Nexus, while with Node, you'd have to start 4 separate processes, each consuming 1 GB, for a total of 4GB.
I think some people are reading my original post as complaining abou these frameworks, but I'm not. I do some AngularJS at work (and I'm the one who decided we should use a framework for my project). I'm simply saying that I often see job postings that seem to require very specific frameworks and libraries, and I feel as if companies should look more for general programming skills than experience with XYZ.js . I totally understand requiring React or Angular because of their prevalence, (and their ecosystem makes them pretty much a core requirement).
Absolutely.
With all due respect, this has nothing to do with micro-services. Based on your description of things, I have some deeper concerns about how this is implementing under the hood. &gt; Each in-memory function will be compiled once by the JIT. (Each Node process will have a separate copy of each function!) I don't understand how this is a true benefit. Even if we have four instances where looking at something O(1n) vs O(4n) - both of which consolidate to O(n). &gt;Variables are shared in the monolithic Nexus process. (Each Node process will have a unique copy of every variable in memory) Are they shared or are they copied between processes? &gt; a micro-service that consumes 1 GB of RAM per process will use that 1 GB of memory with Nexus, while with Node, you'd have to start 4 separate processes, each consuming 1 GB, for a total of 4GB. I'm pretty sure that's now how this works. Sure, there may be some saving on the size of the actual executable, but surely this isn't accounting for run-time memory consumption (e.g. the unique data for each request). ----- I think there's a place for multi-threaded JS, but I'm not really understanding how this implementation actually accomplishes that. It seems like a great proof of concept, but is lacking some proper architecting and use cases. 
 Object.keys(object).indexOf('key') &gt;= 0 `Object.keys(object)` will return an array of all the keys in the object.
&gt; I just hope people can accept something new. With all due respect, people aren't going to "accept something new" simply for the sake of accepting something new. You need to demonstrate meaningful value to them. Based on your discussion here, I've seen some great, but naive approaches to addressing these solutions. I'm extremely hesitant that this can actually accomplish the real-world benefits you're claiming. I've seen several things that simply move the abstraction point (each using Promises for global variable access) or introduce dangerous behavior (indeterminant access to shared/globals). 
Objects in JavaScript are hash tables. There are many ways to implement a hash table, and the exact implementation probably depends on the browser/runtime, but a [general description](https://en.wikipedia.org/wiki/Hash_table) can be found on Wikipedia. Basically, when evaluating `object['age']`, the runtime feeds `'age'` into a hash function which returns a (hopefully) unique number that represents the string `'age'`. Then it may use that number as an index in an array, where the value of `object['age']` is stored.
&gt; I don't understand how this is a true benefit. Even if we have four instances where looking at something O(1n) vs O(4n) - both of which consolidate to O(n). Here I'm talking about memory, not speed. &gt; Are they shared or are they copied between processes? They are shared in Nexus' case. In Node.js case, forking causes the *entire* address space to multiply by the number of forks. &gt; I'm pretty sure that's now how this works. Sure, there may be some saving on the size of the actual executable, but surely this isn't accounting for run-time memory consumption (e.g. the unique data for each request). I'm actually talking about run-time memory consumption. That HTTP benchmark I ran with 1,000 concurrent requests? It only consumed 240MB of RAM maximum at any given moment. I'm not sure how much memory Node.js would consume with a forked process, but I guess the load from the requests would also be distributed across the processes. So there's that. &gt; I think there's a place for multi-threaded JS, but I'm not really understanding how this implementation actually accomplishes that. It seems like a great proof of concept, but is lacking some proper architecting and use cases. You have no idea, I really wish the cavalry would arrive. I'm exploring uncharted territory and I don't like doing this alone. Some guidance (and any form of design doc) would be great. For now, I'm modelling the interfaces after boost (the C++ library); because it has some very well established patterns. I borrowed the concept of the I/O primitives (the Device, Filter, and Stream) from there. I certainly hope I can attract enough attention with this to warrant further investigation of the prospect by other devs. I'd love it if I woke up someday to find an open issue on GitHub proposing a design or requesting the formalisation of a feature. 
A d3-based npm project I have been working on with a friend just released 2.0 last night. npm-introspect. [demo](http://npm-introspect.z3d.tech) | [github](https://github.com/Nohmapp/npm-introspect) A browser-based and command line tool for analyzing the quality of your projects dependencies. Upload your package.json and click through your dependencies until you get to a blank node. It's really satisfying.
Hi /u/ejprado, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
.hasOwnProperty(name)
&gt; I'm actually talking about run-time memory consumption. That HTTP benchmark I ran with 1,000 concurrent requests? It only consumed 240MB of RAM maximum at any given moment. I'm not sure how much memory Node.js would consume with a forked process, but I guess the load from the requests would also be distributed across the processes. So there's that. Please benchmark this against Node.js. I feel like you're running into the wind blind and hoping you end up at some point miles away. ---- Again, everything seems to be focused on memory consumption. As far as I care, memory is about the last thing I care about in my application. I'll just use bigger boxes until I have an explicit need. ----- &gt; You have no idea, I really wish the cavalry would arrive. Look, you seem passionate about this, but you seem a bit misled. There is no cavalry, because this isn't something people feel worth fighting for. It seems like you're building a round hole when everyone has a square peg. If you want this to succeed, you need to take a step back from purely technical arguments and understand why people use JS. In particular, understand why people really, really, really like the single-threaded nature of JS. In general, JS works well because it's very easy to write safe code in a concurrent environment. You have a really interesting concept here, but your driving arguments don't seem to be inline with real-world needs. If I'm going to be building multi-threaded, I'm going to use a true multi-threaded language from the start. If you want "the cavalry to arrive", you need to show the cavalry why they should come fight for you. You can't just say "I'm better than X, Y, Z", you need to actually show them. As far as I'm concerned, the points raised on your [SO post](https://softwareengineering.stackexchange.com/questions/315454/what-are-the-drawbacks-of-making-a-multi-threaded-javascript-runtime-implementat) are valid, but still remaing completely unaddressed. The features and drawbacks you've discussed simply don't lend themselves to general purpose use. Non-determinant access, requiring significant syncing work on the behalf of the developer, etc. Sure, these may all be problems you feel you can solve, but until you solve them - they are still problems.
More generally, does this have the potential to be used for a vast swath of usecases, or are you already aware of disadvantages that will necessarily keep this as a specialized tool for high concurrency applications?
If you're considering ideas for a next post, I would really love to see a concrete implementation of the read side of CQRS with even sourcing. From creating events in the REST API to fetching a new entity. From professional experience I feel this is the hardest part for people to grasp and usually I just see CQRS implemented as separating Command and Query objects to a traditional SQL DB instead of an event log. Another thing that I really appreciated is the entire list of events, it's actually complete, how trivial some may seem. I recently had a hard time convincing someone at work on the merits of this approach, more specifically it had to do with authorization roles. People are usually pretty unaware of the 'events' of the systems they build, they just thinks well.. we're doing CRUD.. so that's all. In your case with all the events listed (well, the commands at least) it would be very easy to implement auth roles as aggregates of allowed actions. Instead of the approach we will probably take, fixed predefined auth roles that will certainly 'never change' and will end up as checks all over the place. Anyway, best of luck on the project! And don't give up because people are certainly watching :) 
well that's what happens when it's hanging by a thread
Hi /u/faratay, For javascript help, please visit /r/LearnJavascript. Thank you!
Please no more js frameworks. Lol.
&gt; Please benchmark this against Node.js. I feel like you're running into the wind blind and hoping you end up at some point miles away. Again, everything seems to be focused on memory consumption. As far as I care, memory is about the last thing I care about in my application. I'll just use bigger boxes until I have an explicit need. Will do, eventually. I was hoping to avoid comparison for now. As for memory: try forking 64 times on a Xeon Phi server, you'll see what I mean then. &gt; Look, you seem passionate about this, but you seem a bit misled. There is no cavalry, because this isn't something people feel worth fighting for. It seems like you're building a round hole when everyone has a square peg. Thanks for being candid. My belief is that every new technology is a round hole against the world's standard square peg, until the round peg becomes widely available. I understand that this project may not be desired at the moment, but there will come a time when it's just another tool in every developer's toolbelt. &gt; If you want this to succeed, you need to take a step back from purely technical arguments and understand why people use JS. In particular, understand why people really, really, really like the single-threaded nature of JS. In general, JS works well because it's very easy to write safe code in a concurrent environment. I've heard that argument before; and here's my counter: I'm not building a sandbox to make everyone feel safe. I'm implementing a true-to-god *performant* JavaScript environment, where not a single CPU cycle is wasted on any core deployed. The operant word here is *performant*, not user-friendly, although I don't see why not both. &gt; You have a really interesting concept here, but your driving arguments don't seem to be inline with real-world needs. If I'm going to be building multi-threaded, I'm going to use a true multi-threaded language from the start. That's how you see it, what I see is wasted potential for the language to grow and encompass fields it never had the chance to compete in before. Why start learning a new language from scratch just to use parallel/multi-threading patterns? Why not bring the technology to the developer, instead of the other way around? &gt; If you want "the cavalry to arrive", you need to show the cavalry why they should come fight for you. You can't just say "I'm better than X, Y, Z", you need to actually show them. As far as I'm concerned, the points raised on your SO post are valid, but still remaing completely unaddressed. I understand that. This is why I work hard every day from dawn to dusk on my projects. Something will give, eventually. &gt; The features and drawbacks you've discussed simply don't lend themselves to general purpose use. Non-determinant access, requiring significant syncing work on the behalf of the developer, etc. And that's up to the developer to decide and battle their way through. Not being offered the power is not the same as declining it with one's own volition. &gt; Sure, these may all be problems you feel you can solve, but until you solve them - they are still problems. Yes, that's true. But hopefully I'll solve them like I've always done: one at a time.
I'm aware. As I've stated before: I'm developing this for machine learning and realtime applications. Everyone is free to use it as they see fit though.
&gt; I'm not building a sandbox to make everyone feel safe. Then you need to be crystal clear with this. Right now, you're marketing this for general use. Sounds like you might have machine learning in mind for this? Great, focus on explaining this in that context. In the context of machine learning or extreme performance, it's a lot easier to understand why you've made the trade-off you have. Imagine if someone started claiming that Fortran is a great general use language - everybody would laugh. On the other hand, nobody will bat an eye if you talk about Fortran in the context of physical simulation. &gt; I understand that. This is why I work hard every day from dawn to dusk on my projects. Something will give, eventually. Things don't "just give". You have valid criticisms. You either need to address them or clearly demonstrate how they are outside the intended use case. &gt; And that's up to the developer to decide and battle their way through. How can developers do this if they don't understand the tools or battle they're fighting? This isn't on developers for not understanding, it's on you for not showing them they're bringing a knife to a gun fight. 
https://javascript.info/
This is not a framework, this is a run-time environment. :)
They don't say anything about one of most difficult topics: memory model, concurrent memory/object access. Is this a global lock? If not, how does it work? How does it work on different CPUs?
Thanks for the reply, and love the project. Maybe my question didn't come through so well: to me it seems like this could be used for many general usecases and can eventually be a straight up competitor to node. Do you already know of existing/potential issues that will likely keep this specialized (as you seem to be selling it), or does it have an honest potential to take over? More simply, are there any weird concurrency issues related to js that are different from the regular multi-threaded vs single-threaded debates?
I just learned this by writing code and reading the Node API documentation.
&gt;Everyone likes to hate jQuery these days. I had one of those stupid “take home tests” trendy tech companies use for hiring these days and it said I could use literally anything except jQuery. That's not because they hate it. It's because it makes the test too easy and they want to see if you know anything at all. jQuery and React are completely different things. One is a library and one is an entire framework.
Sorry, I misunderstood your question. [Here](https://v8project.blogspot.com/2017/08/fast-properties.html) is a great article explaining how Chrome's JavaScript engine implements fast property accessors.
If you are not going to use the returned object for saving use ‘lean’ operator. It makes things faster.
From an employer o team leader point of view: you need to fill an empty position, you have a stack, a project up and running, so I will list all of that in the job description. If I get lucky one guy that knows all of that will apply. But it is OK to apply if you have a solid FE experience and not that much (or none) with XYZ.js 
What's a lean operator? 
A few suggestions: - http://javascript.info/ - http://eloquentjavascript.net/ - https://developer.mozilla.org/en-US/docs/Web/JavaScript You might also want to check out https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1 and https://github.com/grab/front-end-guide .
I've been through this. Its really slim pickings. You also start to notice that every time you search on a it most blog postings are from around 2012-15 where full stack node was the new hotness. Same with a lot of the npm packages. Its like coming across a debris field. I'd say look into hapi.js, look into express.js, and look into koa.js and see where you want to go from there. Oh and check out feathers.js too.
http://mongoosejs.com/docs/api.html#query_Query-lean 
See questions #4 and #5 in the [FAQ](https://www.reddit.com/r/javascript/wiki/faq) regarding both where and how to ask questions :) tl;dr: You want to go to r/LearnJavascript
Thanks :) Actually, I’d bought Elequent Javascript book month ago, that’s way I’ve posted this question - want to be sure from where would be better to begin and what path to follow.
Thank yoi very much! :)
Comparing apples and oranges. Also: * jQuery is more reliable: Uses a doubtful definition of "reliable". (Old does not mean reliable.) * Being trendy can be bad: Possible that we are going to see those horrible sites, but that is only a speculation. * jQuery is cheap: A good software developer will cost good money, no matter the technology. COBOL developers are among the best paid. If you want a jQuery developer, because they are cheap, you will most likely just get a cheap developer. * You don’t even need React: Often true. * Why does everything have to become about trends: Like the jQuery trend a decade back? jQuery had its time and it was a very important eye-opener that brought the web forward to where it is now. It success is its demise, let it rest in peace.
React is not a framework. It is also a library.
Hi there, I worked on this for the past weeks. It's a map editor to create pokemon-like games. It's written in Javascript without using any dependency and uses WebGL to render the maps. Things like the pokemon icons and the animated pokeball in the loading animation are extracted from the a provided Emerald ROM file - In order to use this editor, you need to drag a Emerald ROM file into the browser's window.
Author self describes as 'Top writer in Women In Tech', there is so much stupidity over there.
In my defense I have never liked jQuery. My opinion isn't some moving trend.
Grats, man. Looks like a good start. I wish the best for you on it! Keep pluggin away at it.
Ah, thanks!
I agree with the other commenter on being DRY in your code. I also try and avoid mutability (i.e. reassigning variables) wherever it is possible without harming readability. In general this makes code easier to reason about (for me). There are a couple of newer language features you can take advantage: destructuring variables, lambda (fat arrow) functions, and async/await (node v7+ only): // Async function using lambda syntax router.get("/advertisers", async (req, res, next) =&gt; { // Try/catch block is needed instead of Promise.catch try { // Destructuring assignment const { _id, agency_id } = req.query; // await is equivalent to promise resolution const advertisers = await Advertiser.find({ _id, agency_id }); res.send({ advertisers, status: "ok" }); } catch (e) { next(e); } });
Did you mean `return`?
The React ecosystem is a pseudo-framework; React alone is a view library.
Thanks for the post, very informative. &gt; ### So what changes with async rendering? &gt; To get right to the point: many of your class component’s life cycle methods can fire more than once. This is because Fiber’s reconciliation process allows React to yield the work it is doing, allowing the main thread to handle something that needs to be displayed urgently: like animation. This can involve throwing away already completed work, potentially including invocations of the constructor, componentWillMount, render, componentWillUpdate, and componentWillReceiveProps. That sounds a bit nuts to be honest. Couldn't you instead serialize the current render state (call stack/children indices) and resume from where you left off?
Even if he doesn't discover the solution that the JS community will end up using in the future: His project is certainly in a state where the community can learn from his project and iterate on it.
That's great, I was thinking since it seems perform better than node as web server it will be a great alternative And do we still node runtime or there's runtime for it for all platforms? 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Introducing Ignite - A reproducible deployment, config, and development environment manager written in NodeJS • r\/javascript](https://www.reddit.com/r/webdev/comments/7iqvmq/introducing_ignite_a_reproducible_deployment/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
this isn't a job board. Go find slave labour somewhere else
&gt; "Plus if you’re really trendy you’re probably using vanilla JS ;) Or like me, retro DHTML." Honestly, I don't even see why I should bother responding, but I'll try anyway. - &gt; "jQuery is more reliable" No one hates jQuery because it's old. Nobody even hates jQuery. Just like any trend in our world of web, and just like in life - things change. New approaches are discovered, new paradigms make their way into our lives and jobs. It's not something to hate. Quite the opposite - it's something to love. -- &gt;"Being trendy can be bad" Well, I've been on the web for what, 15 years now? I'm pretty sure I've seen most of the abominations aspiring web developers can possibly do. What I haven't seen is a React app that was a total annihilation of every best practice ever known to any living developer. But as far as jQuery goes.. Well, I've seen way, way, way too many. Every new library/framework/idea starts slow. I can understand people who write bad code in React because they lack the familiarity with it to write something worthwhile. But normally it's something that fades with time, as you get to know your tooling (= React) better. With jQuery - It almost never happens. Always spaghetti code, everywhere, unless you -actually- know what you're doing, which requires knowledge in software architecture and design patterns. &gt; "jQuery is cheap" Which is exactly why WordPress is still haunting the web, and will probably never go away. See, jQuery is like WordPress. It was a huge 'invention', but newer and better tools are here to serve us - developers and users alike - better. Any React/Angular/whatever developer can be both cheap or expensive. It highly depends on the person's skill and knowledge, and the ability to learn. Reading articles like this one just makes the impression that the author isn't a learner, but a fixated person who just goes to the office early in the morning, does what they absolutely must do (because jQuery gets the job done, right?) and goes home. &gt; "jQuery is easy" Which is exactly it's weakest point. How many newbies have you seen that go "I know jQuery and some JavaScript"? I'm guessing quite a few. Easy isn't always better, but it is often addicting. Which is (again) why jQuery and WordPress are pretty much the Dynamic Duo. And by the way, React is pretty damn easy as well these days, with create-react-app. --- Honestly, the author reminds me of the folks at work. "I can build plugins in jQuery that act like React components". Well, sure you can. You could also use HTML4, inline styling and tables instead of divs. DHTML... ¯\_(ツ)_/¯
Well the read me explains how to set it up using cloud9 but it requires a credit card and I dont feel comfortable doing that so I was trying to use the twitch option mentioned in the read me. But there are very little resources online to guide me on how to actually set it up and use it.
I’ve been working on a super simple to use deployment, configuration and development tool that is universally reproducible, it’s brand new and has lots of work to be done, but I thought I’d introduce it to the r/JavaScript community! https://www.npmjs.com/package/ignitejs https://github.com/ignitejscl/ignite Let me know what you think! :) 
No! `process.exit()`
Console pane?
Single-threading might sound limiting alone, but it works well on a machine with other services like nginx and redis running. 
I doubt people realize how much reliance they have on node’s C++ bindings. 
Seems like weak devs care a lot more about this shit — arguments about performance (that they’ll never achieve in their apps regardless), type safety (they’ll still bring entire systems down with NullPointerExceptions), languages (they’ll still code in 500 lines of nested if statements regardless of language), and threading (they’ll fuck up either the event loop or thread pool regardless). Good devs see value in technologies and, while they may not dedicate their lives to evangelism to weaker devs, still clearly make an impact in the long run. No amount of crying on Medium will change that. And there sure seems to be a *lot* of time for crying for weak devs. 
Looks great. Too bad it isn't accessible, otherwise I would have considered it for a project I'm working with.
It’s a troll article, folks. 
There is the Front-end Developer Handbook :D https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details
Textured raycaster use WASD to move, L/R to turn, and use the sliders at top to manipulate some of the wallls
TL;DR; Service workers Browsers can make all sorts of requests and give that information to the user. Browsers will not give it to *you* though.
Guys, [Manta is now on Product Hunt](https://www.producthunt.com/posts/manta)! If you find the product useful, an Upvote 👍 would mean a lot to me. 🤗 Thanks! 
Haha, that huge switch statement in the key check
Improving the unofficial Archillect API https://github.com/lndgalante/archillect-unoffcial-api and working on this repo where I have all my katas solution from CodeWars https://github.com/lndgalante/codewars-katas
Holy crap! Cool! I did not know this existed, thanks! I mean it's pretty over my head at this point, but maybe down the road sometime...
Right. I know. But I'm still at the "hundreds" stage, not the "thousands" stage. I want to look at good code at the level I'm at...
Sounds great, but I've got no idea what to do with this... 
Thanks! I don't know Node yet, but I'll keep this in mind for when I start on that.
Looks interesting, at least in terms of being very well structured. However I'm totally clueless with what one earth this is or how one would go about using it. Apparently it has to do with some framework or something?
This was my initial thought too. I'm not sure if you've watched Lin Clark's cartoon intro to Fiber, but if you haven't, I should point out React doesn't throw away literally all the work it's done. If it's finished some branches of the tree, those are marked as complete, as are leaves that have finished rendering / updating. It'll only throw out the work done on a node that's in-progress, I think, so the amount of work lost is actually quite minor. More problematic is causing side-effects, multiple times, when you don't intend to. 
Probably need more information about the table, SQL? 
You should know that a cell points to a single cell. A column may point to multiple cells belonging to multiple rows. `deleteCell(0)` deletes the first cell of a table row (the first column of that row). To delete the last cell of a table row, you can use: theTableRow.deleteCell(theTableRow.cells.length - 1); 
/r/node would be a good place to start looking for resources you could do the learnyounode npm package, along with many other available from nodeschool. all good things. freeCodeCamp also has a back end section that points to some really great resources and projects 
React had the same curve. HyperHTML is the original idea, lit-html is Google trying to steal the credit. React is gone, it's obsoleted by the native functionality of Javascript template strings. Why have JSX when Javascript can do it as part of the language now?
Could you elaborate on how this relates with service workers?
You should go to r/LearnJavascript for this type of question. And when you do, remember to include in your question a better description of what you were expecting to happen vs what happens. Saying "this does not work" does not help. That code _does_ work. It makes `b`'s value `"skrtblah"`. If you were expecting something different, you should explain what it is.
I made this little video about how to transform and project 3D points to a screen. I thought this was super interesting to learn myself so super excited to share!
This is a solid place to learn for free! https://sabe.io/classes/javascript
I hadn't looked at the end of the talk where update priority and the hooks are mentioned... It looks like any hook that's already fired in a low priority update that's interrupted by a higher priority one will re-fire (or its corresponding update-time equivalent will if it was a create-time hook). The possibility that the pre-commit phase can be aborted seems pretty error-prone for users... What kind of update cannot wait for the current render to finish?
Thanks 
Thats so cool man ! 
I will defenetly work with read models, no matter what the project direction will be. The other thing I also want to experiment with are process managers and how they are used. As for a list of events, I'm glad you can appriciate it, because as you may have guessed, it was really not trivial to define entities and their events. Bu as I said, at the moment I'm taking my time to define a project core domain. I have some ideas on where I can take the project, so I will present them soon. But, thank you for taking an interest in this :) 
&gt; Objects in JavaScript are hash tables. No. You don't know how a JavaScript object is implemented. It may be implemented with a hash table, or it may be implemented in other ways. In fact, the very same object may _change_ implementations between a hash table and a more efficient "hidden class" structure at runtime, as the JavaScript engine decides based on how the object is used. This is all transparent to your JavaScript code; the object's implementation can change while you use it and you won't know it happened. You just don't know what the underlying implementation of an object is at any time. To the OP: You may find [this old article](https://www.html5rocks.com/en/tutorials/speed/v8/) interesting, along with a search for [javascript hidden class](https://www.google.com/search?q=javascript+hidden+class).
A JavaScript object may be implemented with a hash table, a hidden class, or whatever the JavaScript engine decides on depending on how the object is used. There may be no looping involved at all if the object is implemented with a hidden class. When you reference a property of such an object, it's a direct lookup without any loop.
In the readme he is explaining the setup of variables and update node to version 8. You can do the same thing in your local machine without third party companies. After the setup he uses cloud9 just as a place to run the code (unless I have missed something). Preparing a node environment is really easy, just install node, clone the repo, in the repo folder run npm install and finally npm init. You will need to follow the configuration steps on the readme. I will try to do it later and I will get back to you with more info
Nothing really, it’s all down to the way the developer will use it. Each use case is different, so it all depends on the problem you wish to solve. Example: If you pass `--concurrency=1` on the command line it will run with a single thread. (This parameter defaults to the number of logical CPUs) This can come in handy if you just wish to use the API without worrying about the parallel aspects of a Nexus environment. 
`{mode:'no-cors'}` is useful if you want to send a "fire-and-forget" cross-origin request. For example, if you want to send a ping to a third-party analytics service, you don't really care if the request succeeded or not. With XHR, you would have to use a CORS-enabled request because the browser can't know if JavaScript would be using the request's response or not and potentially get access to sensitive cross-origin data. As a workaround, people would use images instead to send these pings: new Image().src = "http://example.com/ping?some=data"; With fetch, you can now explicitly indicate that you don't care about the response, so the browser knows that it won't leak sensitive data between origins. `{mode:'same-origin'}` always errors on a cross-origin request. This is useful as an extra security check: if you accidentally end up with a cross-origin URL where you didn't expect it, then the browser can prevent leaking request data to a different origin. `{mode:'navigate'}` will only appear in the context of Service Workers. It's used when the browser navigates to a page within the service worker's origin, allowing the service worker to intercept the navigation request. JavaScript code on a web page cannot create such a request.
Even the `constructor`can be called multiple times? How does that work? If constructors runs, I see my component and then it can run again re-rendering the component?
No need for Node. Nexus is a stand-alone application runtime. :)
Yeah, but with Nexus you’re basically doing your own in-process load balancing, across all CPUs. You’ll only need nginx if you plan to scale horizontally using multiple servers. Otherwise, you just run it in a stand-alone docker container and you’re good.
The reason is backward-compatibility with constructor functions (which were the most popular way of implementing object factories before ES6). I would have preferred ES6 classes being syntactic sugar for _constructor objects_, but backward-compatibility was considered to be more important (which is reasonable). This is what constructor objects look like: https://github.com/rauschma/proto-js
Shared mutable state, where every variable acts atomic on concurrent access. JSC doesn’t lock the entire virtual machine when you make a call. It locks the contexts (executable state with a stack pointer and packaged closures). What this means in practice is that any two contexts can run in parallel at full speed, and with no contention; so long as they don’t share access to the same closure variables. If both contexts share a variable and try to access it, one will acquire the lock while the other will wait, resulting atomic behaviour. I’ll write another article that explains all of this soon. 
Ok.. so it means it's not a global lock, but has finer granularity, moving the performance to expect above python levels to "heavily-synchronized Java" levels. 
Yes, this is why it’s better to avoid globals and adopt a producer/consumer pattern using promises. Using globals and shared variables won’t cripple your application, but it’s against the spirit of the cooperative model I’m presenting, at least performance-wise. 
&gt; Yes, this is why it’s better to avoid globals and adopt a producer/consumer pattern using promises. Well.. some instance has to manage all the production and consumption..
An animation update needs to occur once every 16ms. In an interactive tutorial I'm putting together at the moment, one of my components takes 200ms to render, which would be 12 missed frames.
Not quite. I haven't read throught the Fiber source code, but since the `constructor` is being thrown away it's safe to say that the component's instance is tossed as well. That means you wouldn't see your component at all until it succesfully completes the next time around. 
Is the animation vdom-managed? part of the same tree as the slow component. If the animation is part of a different tree, I'd understand how slicing the update of the slow work helps keeping a smooth frame rate, but if it is part of the same tree, the work on the slow component would have to be discarded for the fast update to proceed, shouldn't it? Otherwise you'd enable potential race conditions... Then you're back at square 1 with 200 ms of work to do... I'll probably have to look at the implementation to grok what's at stake here.
This is actually a really good question, I hadn't thought it through. If I had to hazard a guess, I'd imagine that the actual rendering process could be progressively saved particularly since it's creating numerous DOM elements. 
Look into D3JS and drawing graphs with it. You can use it to parse out all your nodes and then your links, then define how to draw them. D3 has some built in graph layouts too like force directed graphs and whatnot. 
Because the OOP aspects of the language (classes, prototypes, inheritance) are a secondary reference chain in the language after the primary scope chain. This secondary reference model must be extended in ways that are backwards compatible and do not violate considerations of the primary reference model. For stylistic reasons additional keywords are also heavily looked down upon as making the language more verbose and Java-like. This language wants less of anything to do with how Java looks or behaves.
Why are you using file names like "@enemy.js" and class names like "enemy$"? Why are you using snake_case for some functions? Eval for concatenation? (AnCore.js:444) I highly recommend to use requestAnimationFrame instead of setInterval. It's also probably not a good idea to use setInterval anywhere else. The main loop should pass the elapsed time to "update" and everything should use this timing information. If you cap this delta at 40 ms, the game will slow down if the frame rate drops below 25 fps. This is an easy method to prevent objects from warping through other objects. E.g. if a wall is 32 units wide and something moves 32+ units per frame, they could pass straight through it. Or imagine garbage collection (or whatever) causes a large 1+ second lag. Everything would go apeshit if objects jumped thousands of units ahead. Capping the delta isn't the most fantastic way to tame timing based movement, but it's probably the easiest one and good enough for single-player games without recording/playback capabilities à la Quake.
I created a small 3D dice roller system with Ranger and Babylon.js: https://codepen.io/tero_koodia/full/MONRvw/ Programming was done using the new multiplatform language Ranger with 3D engine operators and compiled to JavaScript: https://github.com/terotests/Ranger/tree/master/examples/3D
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [terotests/Ranger/.../**3D** (master → 39730e4)](https://github.com/terotests/Ranger/tree/39730e4359ca23c103d5dedae8a148867011c490/examples/3D) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dr1a0ks.)^.
&gt; React is fine, React is the best solution for some things, jQuery is the best solutions for others. How about not using React for every single thing just because it’s trendy? This sounds too reasonable for trolling… I imagine it isn't a tooling at all, but you're off course free to argue that this just makes it more *subtle*
Probably because I started learning JS 1.5 months ago. But thaks for the advice, i'll check it out.
A game engine in a month and a half? Nice work man. 
And sorry, the example source in CodePen is long, because I had to fix one small bug from the Babylon.js procedural texture generators and include the fixed version in the pen.
Well before JS i programmed in python for a few months , so i got the concepts of programming language there.
Update 2: fixed CORS so that the dice texture can be loaded.
It was the top article in this week's JS Weekly. 
[removed]
But why did they move away from the prototype paradigm at all? Why did they say, that "classy functions" were needed? What's wrong with Object.create?
I really really like that React takes a wild west language like javascript and creates a framework where the only way of using it is by preventing shooting yourself in the foot (with the way data flows, functional thinking etc.) even if you desperately want to shoot yourself in the foot. Vue is a lot easier to get into because you can use your imperative antics and it will just work and sometimes that is what you need in a prototype. Still, I'm uncomfortable by the amount of gotchas in the library as a whole. When you learn it well, you probably won't notice anything is amiss but still, all leaves a bad taste in my mouth.
Because there are no classes in Javascript, one has to mimic them one way or another.
The whole point of the prototype based OO paradigm is having no classes. Why do you design a language with a paradigm at its core, which avoids classes just to add them in 5 versions later?
they didn't "move away" from the prototype paradigm, they just gave some syntax sugar to devs so they could stop writing those awful pseudo-classes.
But why do they write pseudo-classes? Just delegate objects or even use concatenative inheritense. Which genius had the idea to start writing pseudo-classes in a prototype oriented language?
She seems to be discribing a website developer; someone building small, public website with a smattering of interaction. And for that, I’m sure JQuery is fine. However, if you’re a software engineer whose concerned with managing complex state, working across the stack, testing, etc than there are a lot better tools.
https://www.reddit.com/r/javascript/comments/7imprk/z/dqzv629
Does Vue acommodate async rendering? I don't know enough about Vue to compare them. However, as far as the discussion relates to the article, I don't think you pin React with faults because it's enabling much desired performance flexibility. The gotchas I've discussed in the article more or less boil down navigating the scheduling of operations in a single threaded environment. Instead of doing this by hand with APIs like `requestAnimationFrame` and `requestIdleCallback`, you have this handled for you. Again, I can't speak for Vue because I haven't used it, but Vue can't magically avoid tackling this, and I'm guessing at the moment the library doesn't attempt it at all. Sure, it's simpler not to have the option whatsoever, but there's absolutely no way that this is an objective benefit. If it were, we wouldn't use any view libraries at all. 
Oh that's even cooler
Just so Java "engineer"s could feel better about themselves, pretending away the prototypal nature of JS.
[removed]
This does not seem like an intelligent long term move to me. 
How are people answering this with no other information? A cell from what? What library(s) are you using? Do you have some existing code we can see?
This is the best answer of anything I've ever seen. Thank you.
I think you're looking for a [force directed graph](https://en.m.wikipedia.org/wiki/Force-directed_graph_drawing). I did a project based on them a few years ago, I think both cytoscape (as you mentioned) and d3 have implementations. For what it's worth, I wound up going with cytoscape. Basically each line is modeled as a spring that was to contract, where the strength of the spring's pull corresponds to the similarity of the nodes it connects. Each node also has a repelling force so they don't all wind up in top of each other. When you say you're using node, what are you trying to output? Do you want a client side site, a static image, or something else? Also, like I said I think cytoscape should work, where did you get stuck with it?
Use fixed timestep instead of variable timestep. 
so we're clear, this is the pattern we're discussing: ``` function Klass(prop) { this.prop = prop; }; Klass.protototype.foo = function() { /** code **/ }; var klass = new Klass(); function Klass2(prop, prop2) { Klass.call(this, prop); this.prop2 = prop2; } Klass2.prototype = new Klass(null); Klass2.prototype.bar = function() { /** code **/ } ``` i feel it should be pretty clear why that pattern was dominant in a pre-ES6 world for taking advantage of the prototype chain
What you described sounds like it would work. I was stuck at the point where I wasn't sure HOW to make the image using cytoscape. Sure, I can make nodes and whatnot, but I didn't see the "springs and repelling force" implementation. I was trying to come up with a way to calculate the distances by using trigonometry and lots and lots of if statements but I figured "Someone's had to have done this by now." Do you have any minimum working examples of that type of graph in cytoscape? I've never really made a program that generates any.... image before, so I'm kind of at a loss there. By the way, I'm using node because it happened to have a package that I wanted to use (last.fm api) and it was an easy way to run javascript through my command line. That's... pretty much all I know. None of this will end up on a website, I'm just running it on my computer. I probably should have used a different language. :)
Not that js is my main/only language but it seems to be doing just fine to me! Seriously though maybe it's because the designers want developers to have a choice? Maybe in the long term they want the language to be used as classed based OO from not on?
Sure, that's what we need - another layer of configuration. And it doesn't replace creating config in any way - it just moves it behind the curtains and that means if we need some changes that "easy command line interface" does not support we need to dig into yet another config file. Yuck.
There are two points that haven't been brought up yet. Inheriting from built in objects with "magic" behavior, such as arrays, required some special handling in the construction process, so the standard prototype assignment couldn't work. Also, the class syntax, like functions themselves, can be used both as declarations AND expressions. The `object.create` method requires a series of statements, which means little in standard situations but makes certain things- such as `anonymous classes` or dynamic classes more difficult.
Hi /u/Bar771, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
That's literally what switch statements are for
See this is the crazy thing about Reddit users I was having a laugh because I understand, because I connect and relate, and here you guys are to be shitty assholes because you assume about everyone. What is wrong with you? Why are you constantly trying to make enemies out of everyone?
with calling anonymous functions this becomes a non-issue. &gt; (function(){... your setup goes here ... return whatever})()
Do you really want to get into this? Ok. 1) Your original comment comes across as you laughing *at* the OP. 2) My original comment is a straightforward statement about the purpose of switch statements. 3) You're reading a lot into it. Like, a lot. I can't tell if you're projecting or just paranoid, but it seems like you need to take a step back and think about how your comments might be perceived as well as how you might better understand the intentions of other comments. Just since you asked. Feel free to ignore me and keep being weird.
I think node is a fine choice here, was just curious about your needs. That said, if you find it's not working the way you want my guess would be that python would also have some good libraries for this sort of thing. With force directed graphs it's pretty common to randomize the initial placements. I think both libraries optionally take initial coordinates if you wanted to get fancy, but otherwise they'll randomly generate starting positions for you. Here's an example from [d3's docs](https://bl.ocks.org/mbostock/4062045) and one from [cytoscape](https://github.com/cytoscape/cytoscape.js/blob/master/documentation/demos/initialisation/code.js) (more cytoscape [on their homepage](http://js.cytoscape.org/), there's an example of one using weights [here](https://github.com/cytoscape/cytoscape.js/tree/master/documentation/demos/cose-layout)). It looks like both d3 and cytoscape have some degree of support for running on node and outputting images, though you'll probably see mostly DOM examples for both.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [cytoscape/cytoscape.js/.../**code.js** (master → 933af57)](https://github.com/cytoscape/cytoscape.js/blob/933af573e8af329d039cbbf63f5418988a4e5fa7/documentation/demos/initialisation/code.js) * [cytoscape/cytoscape.js/.../**cose-layout** (master → 933af57)](https://github.com/cytoscape/cytoscape.js/tree/933af573e8af329d039cbbf63f5418988a4e5fa7/documentation/demos/cose-layout) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
if you can write javascript for the web, it's not hard to write server side javascript. personally i have learned a lot of serverside javascript from this guy: http://shiffman.net/a2z/server-node/ it's all free and he explains it in a good way. For databases i would say try a view things in sql it's quite easy to use.
You have your AWS details in plaintext here: https://github.com/pRoy24/tokenplex-core/blob/master/utils/ObjectUtils.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pRoy24/tokenplex-core/.../**ObjectUtils.js** (master → e5e85a4)](https://github.com/pRoy24/tokenplex-core/blob/e5e85a4eb77e6866982956221980d4f1e944246d/utils/ObjectUtils.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dr1jefd.)^.
Haven’t gone much deeper than this boilerplate yet. I’m interested to get a full application running and test joe parcel works.
ohh thanks haha..long expired though for the curious :)
Just checking, didn't want you to wind up with a $10k AWS bill from cypto mining bots :) although at this point I imagine you would have seen it already if they'd stolen them. If you're working with AWS credentials (or anything like it) as a developer, you can add them as environment variables and access them as `process.env.MYVARIABLE` :)
FWIW, Brendan Eich, the inventor of the language, was dead against it. As were (are) some heavyweights like Crockford. But the committee included bods from Microsoft and Google and god knows who else - you know how it goes when corportates are involved... they tend to do things that look good to their peers.
https://stackoverflow.com/a/9642858/2623144 `this.getField("DriveLocation").value = this.getField("InvoiceNu").value` or if you need to append it `this.getField("DriveLocation").value = this.getField("DriveLocation").value + this.getField("InvoiceNu").value`
Redux is simple, don't be afraid of it. It has 200 lines of code (without comments) and it has 3 methods - getState, subscribe and dispatch. You can learn Redux for 15 minutes. If you like, I can show you my codebase, where I don't use React, but still use Redux for the whole app state management. Redux is really cool way to build apps and I recommend you to learn it instead of avoiding it. Good luck :)
I don't know how not learning something will ever help you but if you don't want to learn it then don't. No one can predict the future for you. If you want to be competitive in frontend then learning React and Redux will help a lot. If don't want to be competitive in frontend then don't. It's possible and likely that whatever comes after React and Redux will be influenced by those things, even if it takes an opposite approach. So it seems like knowing them would be beneficial. Having said that, Redux becomes rather simple once you wrap your mind around it. I always recommend people go through Dan Abramov's Redux tutorial on egghead.io. It's really good. https://egghead.io/courses/getting-started-with-redux
You can be a frontend dev without knowing React/Redux.
the coding train lol i love that guy
I have a similar background, I started in gamedev then moved into webdev (though I started in web doing server-side.) I do mostly front-end work these days, which I find a lot more interesting. I'm fortunate enough to be able to choose my own tools so I generally use Mithril instead of react and haven't needed redux. I think that redux may not be as useful anyway if you're doing a lot of canvas/animation/audio stuff with say a React UI. (How would you rewind your state machine to a point where some transition animation is 25% complete, sound A is 50% played and sound B is looping...?) If you haven't looked at streams yet (eg. RxJS, flyd) I think those are a lot more interesting and you'll probably see those benefits more easily, especially with games/multimedia. And streams are not a replacement for redux, they tend to work together. What I've done for now, wrt redux, is stick a pin in it. I put my global app state into its own module(s) and export functions to manipulate the state (instead of reducers). Generally I export state itself as streams rather than plain objects so I can map (subscribe) to changes in components/views. It's not as disciplined as redux but it requires a lot less boilerplate and serves as a decent placeholder should I ever want to add it later. Overall I don't believe the redux story is over yet. A lot of people have gripes with the amount of boilerplate required, or even if it's necessary for their apps. I think it's a concept that will continue to be refined. 
lol, seems like a well coded api... can't wait to install it and get my information stolen
OP removed the credentials from the source, you can easily hide the keys from the source code or run it in a sandbox and not get anything stolen. Take a look through the source if you think there’s a problem. 
Neat! Thanks for the info.
Take your own advice, it would be extremely useful.
What? Hash tables don't need for loops
Or use the dotenv library.
Any reason over just an environment variable? If you’re storing 2 keys in env vars a library is overkill. 
I've adapted composition over inheritance which may be a better coding style anyways even if javascript had proper classes. Inheritance can get mucky sometimes. function MySuperClass(){return{ baseClass:null, init:function(baseClass){ this.baseClass=baseClass; } }} function MyClass(){return{ superClass:null; init:function(){ this.superClass=new MySuperClass(); this.superClass.init(this); } }} new MyClass().init();
Key paragraph in the article that I think people are missing: I’ll stick with React for some things, jQuery for others. I’ll pick which I use based on what the project I’m doing needs, not based on trends. 
Can you describe the question?
really cool, simple beautiful user interface. 
Great project. Can't wait for days in the near future where you can choose you JS runtime e.g Nexus.js or Chakra Core depending on performance needs. 
oh it's more of a hypothetical situation. I am just saying in that type of atmosphere, is an interviewer expecting the use of one of the other ?
In a real interview situation, you should definitely ask before starting to sketch out your solution. It not only shows that you're familiar with new-fangled ES6 things, but you're actually thinking and conversing about the problem.
I know this is kind of a non-answer but it honestly depends on the context. If you aren't sure, a safe bet is to ask the interviewer if they have a preference. 
excellent, thank you 
yep, makes sense...thank you!
If you're building this with javascript, you can do collision detection by calculating the distance between two objects. I've used two different approaches in the past - for roughly circular objects, I would measure from the center, and for rectangular objects, I would measure from each of the sides. You can figure otu all the relevant info from `someElement.getBoundingClientRect()` (https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect). If the distance between two round objects is less than the sum of the radii, then they overlap. For rectangles, you need to calculate in both the X direction (left side of one, right side of the other) and the Y direction (top of one, bottom of the other), and see if any of those values is 0 or less. 
Author of Muuri here, thanks for reporting this! Can't believe this slipped off my radar. Really glad to get some help with testing :) Created an issue to the repo about this also: https://github.com/haltu/muuri/issues/122
Hi, author of Muuri here. Thanks for reporting this, I'll try to investigate the issue. In theory Muuri should not be the cause of the fps dips unless you're dragging a Muuri item while scrolling. Muuri only binds scroll listeners for the duration of drag. Performance has been one of my top priorities when building Muuri so I'll make sure this one gets fixed asap if it is caused by Muuri.
This was recently posted in this subreddit: https://www.reddit.com/r/javascript/comments/7h5ssp/collisions_a_2d_collision_detection_library/
Thank you!
Thanks for the link. Lots of useful info.
You're welcome, glad you found it useful! Some of these web APIs can be quite daunting at first, especially if they're as fundamental and advanced as `fetch`. It helps to have some example use cases to see how it all fits together. :)
It was my idea and it indeed was developed like that :| So far it's been mostly just me doing the coding and since I haven't had any troubles keeping the codebase in a single file nothing's been done about it. I'm all in for making the codebase more modular though. The first step is for someone to create an issue about it and plan the refactoring there. Then just making it happen and sending a PR.
If those are the only two keys, and this is a personal project with no or few devs, and those values are unlikely to change, and you only have one environment to worry about (or one set of keys), then sure. It takes nearly zero effort to use `.env`, and it's just mighty convenient to not have to pollute your local env.
I've been working on a side project for an alternative syntax for WebAssembly text format, I called it Walt. A stripped down version of JavaScript with types. I've finally managed to get higher level syntax worked out like object types and memory access patterns. It's slowly but surely becoming its own language and I managed to write a canvas demo with it! Check it out: * GitHub repo: https://github.com/ballercat/walt * Demos: https://ballercat.github.io/walt/ I've had a lot of fun learning about language parsers but mainly about how WebAssembly works. I'm always looking for help, drop me a message/open pull request if you're interested.
Parallel coordinates module with in built GUI where the business logic is only expressed within the passed JSON. Features an iOS like friction based drag selector on the left. Written in vanilla JS and D3. v3 and v4 available. Git: https://github.com/IbrahimTanyalcin/lexicon-rainbow Npm: https://www.npmjs.com/package/lexicon-rainbow
Please do not take it *so* serious. It's very imortant to experiment with new ideas in every aspect. Arguing about purely unnecessary statements does not help us to understand it better.
i may look at the source now, and you probably are right, but i'd have to keep looking at it every time there's an update
&gt; Just delegate objects ES6 classes *do* delegate objects. Using your example code, `a` delegates to `A.prototype`, which itself delegates to `B.prototype`.
It's not quite that clear cut, and classes are implemented in a variety of ways across a variety of languages. In Python and Ruby, for example, a class is itself an object (a building, not a blueprint), and inheritance is implemented using delegation. If what JavaScript provides doesn't qualify as classes, then neither do Python's or Ruby's implementations qualify as classes.
Is ok. Plz have a lihapiiras for me. 
A quick note on the UI: use a sans-serif font, it will look much better.
It’s usually the better choice now (because you are not mixing data level and program level). But the interviewer may explicitly want you to cope with the challenges of simple objects. BTW: Object.create(null) works best as a hashmap: http://speakingjs.com/es5/ch17.html#dict_pattern
The AWS keys feature is for server side rendering of graphs and upload to S3 server, you can run an application server without entering your credentials.
`Object.create()` was introduced after constructor functions (with ES5). It exposed more of the protoypal foundations. IIRC, Eich would have introduced classes, but was told not to turn JS into a Java competitor. Hence constructor functions as “almost classes”. Constructor functions are unnecessarily complex, but only w.r.t. to setting up an instance. Once it’s set up, you do have simple prototype chains.
I think that's a great suggestion..I need to put in some work with the fonts and the UI :)
Thank you I will try in the meantime as well :) I appreciate your help!
The issue was in the first version which was based on both a prototype chain and some kind of class (new+constructor), without elegant way to use either. They then gave us the proper tools to use them: `Object.create` in v5.1 and `class` in version 6/2015.
"I know you are but what am I" hasn't been clever since third grade. 
Isn't it `var a = Object.create(A.prototype);`. I don't know because `Object.create` is quite recent and not that often used. Pre-ES6 user would either use literals, maybe some user-space class implementation (e.g. YUI), or constructor if they were quite advance JS programer (before nodejs and evergreen browsers there were not that many programers having JS of their primary language). ES vendors gave us `Object.create` (ES 5.1) because that's the correct way to create a classless prototypical chain and they gave us `class` because there's plenty framework and programs built around constructors. JS evolution has been pragmatic.
It's not a bad UI, but even changing the `font-family` property to the default `sans-serif` would make a big difference, trust me.
ps: and we could have got `class` earlier if there wasn't that breaking the web issue.
Whatever makes you feel good about yourself I guess.
oh interesting...doesn't `foo = new Object()` accomplish the same thing as `Object.create(null)`? I don't quite get the differences. 
Posting a bit out of my depth here* I imagine the reason they failed is because IOS doesn't support them, however some guy made a viral twitter post on the issue and as of a month ago Apple have added implementing PWA's to IOS to their ToDo ist, so maybe they might finally start being a viable option 
Realistically, they're not all that prevalent, but I wouldn't say it's because the hype train has rolled on past. Some very notable companies have them (Twitter immediately comes to mind), Google is still trying their very hardest to promote them (seriously, just look at how much of [this conference](https://www.youtube.com/playlist?list=PLOU2XLYxmsIJz-cYWfjQP8SV7n8C-PTVm) was PWA-related), and, possibly most importantly, they're going to become increasingly interesting to a lot of people the more PWA features work on iOS, which is slowly beginning to happen.
Although I havnt used Puppeteer nor Phantom JS, I have used most of the options, Nightmare, some other less popular alternatives, and Selenium, and in my opinion they are all terrible and behave in some bizarrely unexpected ways, especially Selenium
Is the `btoa` function strictly necessary?
That looks horrible imo...
I think so... I made the request on postman and it showed Authorization: Basic YWRtaW46YWFh, which is the same string I'm getting when I use "Basic " + btoa(username + ':' + password)
So if you change that line to: req.setRequestHeader("Authorization", "Basic YWRtaW46YWFh"); What do you get? 
Not functions?
no I have feeling objects have major role, It's just my feeling!
same error :(
Alright, then are you sure that `"Authorization"` is the right header? Any chance you could screenshot what works in Postman?
I think it's safe to automod away any posts with 'Angular' 'Vue' and 'React' in the title
Thanks for sharing that with us. Looking forward to your feedback when you try your first cigarette or your first cup of Kopi Luwak.
&gt; Kopi Luwak Isn't that the insanely overpriced coffee that gets pooped out by a rainforest cat?
Twitter PWA is pretty good IMO. I ditched the native app and used it for months, the experience is great. As an user a PWA also mean less storage usage, less abusive tracking, data usage ; overall a more respectfull experience. PWA have been misunderstand from the beginning, it is not designed to compete against native apps. They're just websites optimized for mobile with few helpers for a better integration than before. And what you loose in native feature and performances you gain in cost reduction and control over delivery and updates by not having to deal with app stores. In my company we've done some, the reasoning for choosing PWA was somewhat like this : "Mobile first UX ? Yes. Native features required (notifications, sensors, ...) ? No. Let's do a PWA" I should mention that our company is a B2B software editor which mean that our clients are acustomed to learn to use our products and ask how get them. Wich remove the need for store presence and promotion. For me if you're doing something simple, a PWA / mobile website is the way to go. 
100% agree
It should be https://i.imgur.com/1ItDzi3.png
The browser is doing a preflight OPTIONS request before the GET. Did you write the rest api? Is it handling the OPTIONS request correctly?
This is a great idea and many thanks to Derek for putting it forward. I did have issues with the install though which I was able to quickly solve on my own. I documented them here in case anyone else has trouble: https://github.com/derekstavis/touchrunner/issues/1
I do agree with you on this, I would even go further as saying that a dev should be able to switch from stack and position without being seen as a junior again. But in reality I also get that the fluency in a framework will insure the employer that you'll be profitable by just having intagrated the standard of practices. 
With a `CORS` request, browser will perform two requests - first is a preflight `OPTIONS` request -- and this is the one that is failing - and the subsequent `GET` won't ever fire. I'm not sure what you are using for the the API but it is probably configured to throw back a 401 on the OPTIONS call. If the OPTIONS came back with a proper response I imagine it would work. See the following SO: https://stackoverflow.com/questions/19234892/xmlhttprequest-based-cors-call-with-basic-auth-fails-in-firefox-and-chrome the client-side code here looks good, so it's probably the server that is failing.
I don't know how to do that... We made it using spring so a lot of things are configured automatically :/ Can I change something in js so that this doesn't happen? or do I have to configure the API? If so, how should I handle the OPTIONS requests? Also it does seem to work without req.setRequestHeader("Authorization", "Basic " + btoa(username + ':' + password)); But only in form of a popup... The only reason I'm trying to do it with setRequestHeader is to be able to use the html input fields like a normal website
yes!
thanks for the reply! I'll continue tomorrow :)
Oh one thing, do you know why this doesn't happen when I dont set the auth header on request, like described in the post?
If you're [targeting IE6](https://github.com/melissamcewen/jQuery-Equal-Heights/blob/master/jQuery.equalHeights.js) jQuery probably is better.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [melissamcewen/jQuery-Equal-Heights/.../**jQuery.equalHeights.js** (master → 1ff5f77)](https://github.com/melissamcewen/jQuery-Equal-Heights/blob/1ff5f77b7447c8de6b4566865fcb2698d1acd120/jQuery.equalHeights.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Oh one thing, do you know why this doesn't happen when I dont set the auth header on request, like described in the post?
What do you recommend?
You mean after you login? I'm not sure what your server code does to recognize someone as logged in - but my guess would be that once you have an authenticated session it won't worry about the basic auth - both OPTIONS and GET come through and you're off to the races.
I mean why am I able to log in like that in the first place but not like I actually planned to :D Not a single OPTIONS request is handled in the api... 
Not enough information to answer effectively. All you've provided is some front-end code performing an XHR. I'd need to see the back-end handling to see what it means to "login" and how that information is persisted.
Just use classes and composition in the ordinary way. class MyNonSuperClass() { constructor() { // ... } } class MyClass { constructor() { this._composition = new MyNonSuperClass(); } } new MyClass()
I see, I wasn't aware this was common, apparently since 2015. Better refactor my code.
Thanks for answering. I was mentioning the file structure because it would be a pretty big barrier to entry for anyone trying to use or contribute to this project. At least you seem to have a good amount of tests running, so props for that.
Thank you. I am eager to try it now.
Good work man
I already posted it earlier today, but I made an Angular boilerplate using the Parcel bundler, just to see how it worked. https://github.com/JackDeMeyers/angular-parcel I was very happy with how simple it was to get a TypeScript Angular application running with hot module replacement.
I don't see why not. You get access to the element it is firing for via `event.target`, so you can call into `removeChild`, e.g.: event.target.parentNode.removeChild(event.target) It should be noted though that Mutation events are (1) exceedingly slow and (2) deprecated. You might considering using the [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) api instead.
Hey, thank you! I appreciate it.
Are you looking for feedback?
Have you set origin cors?
Certainly, any valuable feedback is welcome, just note that I am still new at this and learning!
I like it! Could I submit some pull requests? 
I would say something along the lines of "so the obvious answer is to use the built-in map, but if I had to implement an equivalent myself, I would..."
I would probably bind a function to the input event. https://stackoverflow.com/questions/26946235/pure-javascript-listen-to-input-value-change
Nice work! I like your coding style. A few pieces of feedback: * You usually don’t want your callbacks to block the UI (think about a scenario where 100 list items were subscribed to the same topic), so I’d recommend wrapping your callback firing code with `setTimeout(fn, 0, ...args)` or similar. * Using a standard license is actually more helpful for usage. * Kind of a personal preference, but if I need to check something before doing it, I like to save the result to a variable before the check so that its result can be used for the “doing” part without re-calculation. In your code, you’re doing `arr.find(foo)` in an `if`statement followed by `arr.indexOf(foo)` in the body. Instead you can just save `arr.indexOf(foo)` to a variable and check against -1 in the `if` statement. 
- It's a bit noisy. For applications with a lot of events, it might get out of hand. An option to control the log level would be nice. - Erroring out completely if the event is not found is kinda harsh. - The whole emit function is doing a lot more work than it needs to. `handlers` is an object/map so you don't need to loop through every key. Also, the use of index is odd when you could just check for `handlers[name]`. - It's nice that you've commented the code, but I would try to avoid writing unnecessary comments that can be easily derived from the code ex. `// Length of handlers Object`. - Readme code snippets could have some js syntax highlighting. https://help.github.com/articles/creating-and-highlighting-code-blocks/
Thank you! &amp; feel free to! I actually haven't had a pull request before on GitHub so I'd like to see more how it works.
See [this Stack Overflow answer](https://stackoverflow.com/a/30810322). You need to initiate the copy as part of an event handler triggered by a key press or a button click. Working with the return value of `prompt` doesn't count as user action by the browser, for whatever reason.
Yes, that's right. But, when your app highly depends on the ready code and If the goal is to develop and deploy an app in a short-time for which Ionic would be the best choice.
Heh, functions are objects, too...
Hi there, I don't disagree entirely with your point, but why did you PM me this response instead of responding on the post I made?
Just outsource it to india and give them a deadline of due date-30d. Fyi the time difference is a bitch and some have really thick bolkywood accents.
but why does JavaScript force classes on me? I mean honestly, you can not write exclusively prototypical code in it. 
&gt; Can I somehow get the scroll location on click, and set the page scroll to that location? Well, yes you can do that with [element.scrollTop](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop) - but it is still going to jump to 0 and jump back... To do it right you're going to have to figure out a way to not re-render the whole page for every click.
Unless there's something I've missed, I believe what Apple is starting to implement is Service Workers. Definitely a feature needed for PWA's to properly function, but they are not synonymous with PWA's.
Do you have an idea on how one would go about doing this and not having to re render the page?
Well you could use react for instance. Or, why not only modify/add/remove the elements that actually change, instead of setting the entire innerHTML?
Well its hard to know exactly what you're doing from a ~20sec video, but it looks to me like you're just swapping pictures, is that correct? If that is the case then it would be something like * Give each picture slot a name * Have either an array or a hash table object that correlates to your picture slots. * Write a function that will change the src attribute on each image tag as needed
Nice! I just noticed a typo and an extra word: &gt; The Shrink component **is** shrinks and **disbales** its children depending on an if statement. Should be: &gt; The Shrink component shrinks and disables its children depending on an if statement. 
There's no swapping of pictures. If youve ever played any RPG games, you level up and get skill points to allocate into a skill tree. So each time I click on an image, I add 1 to that specific skill objects level. When you hover over the skill, it displays the skill information such as its level, skill description, etc. It then loops through all skills and checks if any new skill is unlocked. If it is unlocked redraw the whole page so that skill isnt greyed out and available to click.
I thought about that and I already have some experience with react but whenever I do finish this project, I would like to upload it to specific sites as well as my own (on github pages) and as far as I know, using react would require a server and that's not something I want. I would hope to solve this problem with just simple JS. I know there can be a way to do this. The only information I need to change is the tooltip to render updated information. As I am typing this out, I am slowly getting an idea of how to do this which requires just the changing of CSS and not rewriting the whole page... 
If the keys are non-nullable strings, `Object.create(null)` works fine. Map, on the other hand accepts anything as key. `5` and `'5'` are different keys. `null` can be used as key, too. And WeakMap unsurprisingly only accepts non-nullable objects as keys. 
&gt; If it is unlocked redraw the whole page so that skill isnt greyed out and available to click. Well maybe swap isn't the correct word - but what you have is 'application state' - Your picture is greyed out or not. You can click it or not. The skill level can change... These are all things that can be changed without re-rendering the whole page. Another person mentioned React, that is because React forces you to think about this application state while you're making the app - but you can definitely do it with vanilla JS, jQuery, or anything else.
Yea as I was replying to that question I slowly got an idea of how to do it. I realized the only thing I really needed to 'update' was the tooltips that display the information onhover. The lines connecting the skills as well as the opacity of each skill can all be handled with just CSS without needed to update the whole innerHTML. Still sitting on this idea as there would be a bunch of chagnes I would need to do but I think this is the only way.
You don't need a server to use react at all. React is a frontend framework. Just include the file as you would any other JavaScript. You could also opt for vuejs, which you can just include and use without having to use Babel or anything like that, which isn't as easy with react.
Oh wow im dumb. For some strange reason, I thought I needed react/express/node etc etc react to work but youre right. Its just a framework. But at this point, I would have to refactor a bunch of code and troubleshoot my beginner react skills... I believe I have found a way to solve my original problem but if everything doesnt work... React it is.
Then you should really take a look at incrementaldom. You can more or less use it to replace the innerHTML assignment, but it will figure out how to update you Dom node in the most efficient way.
Depends on what you want to animate. If you want to make it as if it was drawn while being loaded (or once you set a class, which would then require JS), you could just use CSS animations and animate the stroke-dashoffset attribute.
Looking into it as we speak. 
fun to play.. probably need to add logic for increasing difficulty with advancement, also maybe I lost too many points..but how does it end? 
Alright. Good luck :)
They're just a bunch of helpers, some of them rather useful. Behind the PWA term is Googles weird agenda for Chrome/HTML/webviews everywhere, and feature regression. I wouldn't mind them, they're stuck with the archaic idea that this is truly the way to go. Use the primitives that you need, that's fine. And if any app needs performance or access device functionality you render natively or go native, simple as that.
One thing that would be helpful is "saving" emitted events. Say you emit an event "dataLoaded". If you now subscribe to that event **after** if has been emitted, the new subscriber won't get notified. Sometimes this can be useful, especially with one time events 
Just the chart element really, I can make the rest of it fade in or something with CSS animation too. Not really used stroke-dashoffset thanks for that!
Are you sure this is not the case of using anchor tags as buttons and the page is just scrolling back to the "top" after you click it?
How about you show us your code ?
This is also what I was thinking. You can see a hash in the URL. OP are you preventing default on those click events?
Gebruikersnaam = usernaam wachtwoord = password and the alerts and console.log are dutch sorry
Hiya, interesting! Your SSL cert for the domain is invalid though, might wanna fix that :)
Does it suit you: const parent = { foo: 1, bar() { return 2; } } const child = Object.create(parent, { baz: value(3) }); function value(value, prop = {value, configurable: true, enumerable: true, writable: true}) { return prop; }
It looks nice and understandable! Quick note: using "bro" is probably not going to go down well these days (that discussion is probably not appropriate here, but you might want to consider how your language choices make you look). More technically, it might help to understand the performance of your implementation vs. others - I wrote a pubsub years ago for my own use and [published these metrics](https://github.com/ahri/upubsub/blob/master/benchmarks/results.txt), so perhaps that helps as a starting point.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ahri/upubsub/.../**results.txt** (master → ed1ffb6)](https://github.com/ahri/upubsub/blob/ed1ffb676858812be82e9174bf009f266976766d/benchmarks/results.txt) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
&gt;Basic libraries like jQuery are fine (if, you can squeeze it inside the 20KB limit that is). I don't know who wrote this, but that guy is nice.
Login is an object, not an array. You save info as an JSON object and in else block you retrieve it. So you don't need for-loop. Login.gebruikersnaam should do it. 
Where would place this Javascript? You mean it like a browser extension? Var myarray = []; myarray.push (document.getElementById ("iknowthis").innerHTML); This should do it, but myarray gets redefined everytime this runs, so unless you plan it like a browser extension and bind it to page reloads, I don't how you'd keep the list.
Chartist.js
Chartist doesn’t seem to support that graph type. 
Honestly you don't need a library for this, you're just drawing partially stroked circles. Do it in canvas or svg, you'll learn something too :)
20k is pretty damn small. Especially if he's suggesting using OpenGameArt. Really, you'd have to use almost no graphics, no framework, no libraries, etc. 
On datepicker close button doesn't work. Or it is just me? I can't close datepicker 'till I choose date :&lt;
Hey drowsap. I'm sorry for the misunderstoodment I've commited when answering your question. Thanks to it and other feedbacks, I wrote this article during the weekend that might be useful for people to understand how to extract the most out of Reshader: https://medium.com/@chiefgui/managing-scalable-consistent-colors-in-your-css-in-js-app-with-reshader-ab29f03f1a35 Hope it clarifies things to you. Cheers!
You can try to use D3.js 
💁 See Medium post for introduction and reasoning behind: https://medium.com/dailyjs/js-in-css-df4cf8b9b96c
Ohh, why, thank you :)
That's why I called it a "challenge" :)
P5?
You can write your own simple libs for simplistic engine. What I am not sure about is how are you supposed to script AI into this?
+1 on writing simple libs (or just inlining stuff, whatever is shorter). Ad AI: please note I do not mention anything about AI in the rules, so there are multiple ways to approach this topic.
I've updated the tests and I'm still not seeing any difference in Chrome/Firefox/Safari.
Take a look at Trkl - it's an observables library with computeds that only weighs 400 bytes: https://github.com/jbreckmckye/trkl
You could save it to browser store?
I would probably use D3 or perhaps Snap.svg. You could also have a bash at creating an animated SVG in React.
&gt; You usually don’t want your callbacks to block the UI (think about a scenario where 100 list items were subscribed to the same topic), so I’d recommend wrapping your callback firing code with setTimeout(fn, 0, ...args) or similar. This (although I'd use [requestAnimationFrame()](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame). Also the callbacks need to be wrapped in a try/catch block to prevent that an error in one callback will cancel the rest.
That's right, good catch.
Why not just use the CSS generated from Photoshop?
I did notice a distinct lack of bales on child elements using the shrink component. Perhaps it's correct?
What are you looking to learn exactly?
If you run the code that I provide, with the explanations, you will see a difference. Unless you use different browsers (or node.js) than me with different runtime engines....
I like this idea, I wanted to make games for years, but right now I got back from project that cost me 5 digits, moved out of the country, sold everything, to find out my partner has very dodgy attitude suddenly. So I gotta go build everything from the ground again.
 Oh, maybe php framework, or c# basics. It depends on your interests man. I want to expand my knowledge of english, so i'am ready to learn and discus any topics u want. So what do u thinm about it?
A sens-serif font option ;). Also, it wasn't very clear to me that hitting 'save and preview' would get rid of the current invoice. Being able to edit and preview before finalising it would be nice, but it's not a big deal once you know how the app works.
Well hello there. I'm just starting my self; so far I only know HTML and CSS, but my plan is to do JS starting next month. I'm just a beginner. We can be friends, I guess. I suppose I could learn a lot from you. 
I was planning to use local storage and the stringify method, but as a chrome extension might be better! Thank you for helping me out! :)
&gt; I don't know what code *you* wrote and run Here it is https://async-await-stack-demo.glitch.me/script.js
Yeah, bro ofcourse we can. I can give you a lot I think. Also, i've some projects that i've already done that will help understand js better. How we can connect?
I can PM you my WhatsApp and WeChat, if you have those. Otherwise email. 
Yeah, go to WhatsApp, I'll download it now
Actually, [that’s a bug](https://github.com/hql287/Manta/issues/55) and I also like [the workflow that you described](https://github.com/hql287/Manta/issues/74).
Pls....no more frameworks....I can't keep up!
OK. I'm sending you a private message 
So, I downloaded it. How can I find u and add to friends there?
Search for me using the number I sent to you
The main thing being solved is having a _consistent_ and _right way_ to do ui. By consistent, I mean there is a defined flow to how you write the code, draw the ui, and update it. By right way, I mean it's a methodology that a community has agreed on. Software is very opinionated, and there are lots of people who think react or angular aren't the right way, and that's fine, but it does bring in a sort of standard that the community can use, regardless of library X being the best. In terms of how things are solved, react and angular are considerably different. From last I checked, angular 2 is sort of a web components based approach, which is a w3 proposal (maybe past proposal at this point?). React takes a more [functional](https://en.wikipedia.org/wiki/Functional_programming) approach. I think both have pros and cons, but I don't want to get into a which library is better discussion, just a what do they solve, and generally how do they solve it. In either case, if you haven't used a _modern_ javascript UI library, you're also going to come across webpack, browserify, system-js, babel, loaders, and other things that you'll need to have a basic understanding of to get off the ground.
Thank you very much for your answer. As I'm a freelancer working alone, I don't feel the need of a consistan way to do things, as I don't share my codebase with other people who work on it. Most of my code is a function wrapping "document.createElement" "dom.addEventListener". From my understanding of your explanation, this libraries would just provide me with an other way to do the same thing (which is not surprising they are based js code anyway) but in a more consistant way across my code.
Hey, good job. You obviously put a lot of time and effort in, and it looks nice. My only gripe is that a lot of the animation seems sudden. For instance, with the date picker, I don't get a chance to see the date get picked when I click, and the modal(?) instantly animates to hide. Maybe have an option to not auto-close would be good enough? Don't have time to go over all the components, but I suspect I'd have similar comments about sudden/unexpected animations. It's nice though, and has a consistent feel.
yeah, forEach is not a operator. But the '+' operator is a function with syntax difference of the usual functions. + act like a function. Why "NO WAY" i can make analogous between both???
I used to be in those shoes and had a similar opinion. The thing that changed my mind was when I had to go back to a client who wanted something updated a year later, and I had to basically re-learn the code I wrote. Also, these libraries use a virtual copy of the DOM, because doing things like querySelector/getElementBy* are slow, and writing to the DOM is slow (ie innerText/innerHTML = "..."). With a virtual DOM, the UI library engine is able to make smart choices on what needs to be updated so they are much faster. If you aren't doing a lot of xhr requests and having a dynamic page, you may not need to bring a library in, too.
So and now try my example, that's why I provided it. I also tried your original example, adding the `wait` function from my example. There is too much stuff in your current file, seems overly complicated to me. You can shorten mine by leaving out one of the middle functions that I only have in there to create a longer stacktrace.
Sounds fun, but I haven't played any turn-based games like X-COM. Created the AI sounds really hard. 
I would be careful with `requestAnimationFrame()` as applications who require it to do timely animations may end up losing frames if the code here ends up too expensive to run. `setTimeout()` is likely okay though, if possible, `setImmediate()` or some other alternatives (post message) may be better alternatives. As always compare multiple solutions :)
Nice first project 👍 Any plans to support non-ES6 or is this strictly for learning / using ES6? I ask because many people, like me, are stuck in projects that can't support beyond ES5 (ain't that fun?). Some feedback: - This is _very_ similar to node.js's [Events](https://nodejs.org/api/events.html). Granted your solution also works in a browser but it may not be the worst idea to take a look at how that API works. - As others pointed out synchronous may not be the best pattern for event emitting but it's a good start 👍 - Perhaps tone down the `console.log` statements? I typically expect libraries to have _zero_ `console.log` calls unless there is an explicit way to enable them. Chatty libraries can create a lot of confusion when you're debugging your application. - Unit tests? You should look into testing 🙂 I love pub sub. It's such a cool pattern. I wrote a pub sub library a while back called [msngr.js](http://msngrjs.com). One of the most popular pub sub libraries is [postal.js](https://github.com/postaljs/postal.js). You know, if you're interested in how others have created APIs around this same type of pattern (msngr.js is, out of the box completely asynchronous whereas postal.js is synchronous much like your solution but they have also a way to do asynchronous).
&gt; All those "tests" seem to be independent from one another.... what are you trying to accomplish? `test2` is the same as `test1`, except it uses `return await`. Same goes for `test4` vs `test3`, and `test6` vs `test5`. The difference between the groups is the function they call. From what you're saying, I should see a difference between (some of) the pairs, but I'm not. Your examples use `return await` in a try/catch, so it isn't relevant to the OP. &gt; Note: Outside of try/catch blocks, return await is redundant. I'm fully aware that it's useful within try/catch. What I'm looking for, is a case where `return await` makes some meaningful difference outside of try/catch. I haven't been able to find one myself, but I'm open to an actual example.
They both help with component state. When something happens in the state of your component, they provide mechanisms that update your UI instead of having to do it manually. It's kind of one of those things where until you see it and understand it, you may never go back. I've used Angular and React extensively, and I prefer React because it just feels a bit easier. I'm not a fan of the whole Angular digest-cycle stuff, rather the explicit state updates of React. And, like another comment in here... consistency is a god-send when you gotta go back a year later and figure out how some component works. Having a component that is modular in every way, including its CSS, helps you reason about problems that may arise and basically allow you to rule out entire sections of code as literally being impossible to have caused the problem. I would say in a medium to large scale JS application, a framework is ideal.
Your tests don't create an asynchronous call hierarchy, they are useless for this discussion. My example demonstrates EXACTLY what I said it would.
"The main thing being solved is having a consistent and right way to do ui." Right way? Yeah, that's right.. that's why Angular 2 was a rewrite.. I am not going to say anything about whether using a framework is good or bad. I do think the reason why people are so fond of frameworks is that when devs get hired, they are required to learn one --&gt; - the one that the previous team build the stuff on - the new 'cool' framework that just came out. - And especially when 10 devs have to work on the same project, it can be difficult to guess what the other one intended. If you know the foundation of JS, ES5, read about ES6 and have done heavy weight projects and know what you are doing, I think you can go about the way you want. Learning one framework is good though, it can't hurt you, given that you have time.
Good documentation.
All of the `return await`s in your example are inside try/catch, so they're useless for this discussion, which is about cases *excluding* try/catch.
Let me quote my previous comment, since you seem to either read them not at all or way too quickly: &gt; My example demonstrates EXACTLY what I said it would. Maybe you should have read my comment(s), here and those coming with my example. 
Hey there, I'm not the author but I thought I should share this with you :)
This is an example of how React might be hurting the open web by encouraging monumental, collective effort to port web standards to the React/jsx DSL.
yeah, i've pretty much stopped programming for web
Let me quote my previous comment, since you seem to either read them not at all or way too quickly: &gt; My example demonstrates EXACTLY what I said it would. Maybe you should have read my comment(s), here and those coming with my example. For your latest reply I can simply refer back to the comment you replied to, since I already answered, because your latest reply is no different to what you wrote before :-) . The current runtimes "optimize" a `return await` away it seems. This makes obvious sense, since the only function of such a construct would be to add the location to the stacktrace. This in turn would be part of a larger effort to better support asynchronous stacktraces. Therefor the only reason for the runtimes to really keep the calling function's context around is when there is a try/catch that tells it that the exception is handled in that function.
&gt; pick the content of a div What kind of contents? If it's elements, you can use this: //put it into a new array... var divContents = Array.slice.call(theDiv.children); //append it into an existing array... Array.prototype.push.apply(divContents, theDiv.children); If it's the text, then you can use this: //append the rendered text into array... divContents.push(theDiv.textContent); //append the HTML code into array... divContents.push(theDiv.innerHTML); 
Thanks for the feedback! * Could you explain to me a little bit more about "log level"? Not familiar with that term. * I hear ya, I made this decision to try and make the debugging process easier, if an event doesn't exist on emit(), I wanted to reduce the amount of head scratching done to find why, and especially if it's a spelling error. * I'll look into making emit() more efficient. Syntax highlighting is coming next, thanks for the feedback.
var array = []; array.push(document.getElementById("divname").innerHTML; This is how I would have done it.
its just a demo so i didnt put a lot of thought into it
Hmm, I can only repeat myself really: this discussion is about whether `return await` is useful outside of try/catch. The OP makes that pretty obvious I think. Are you saying that `return await` is redundant outside a try/catch? Because, if you're saying that, you're agreeing with me, but you're doing it in a very odd way.
Haha it's not meant to be serious, any instance where I could provide some levity I like to :), and can you elaborate a bit on how you tested the performance of your pubsub a bit? Thank you!
The JS TinyRenderer one.
Hey thank you. Could you explain further why wrapping a setTimeout (or rAF for that matter) can help? It is about giving each callback a budget (of 16.6ms I'm assuming) so that it doesn't take a noticeable dip in performance? Also just added a standard MIT license so that is fixed :) . Also thank you for that tip I will definitely look to implement that!!
If you've written custom wrappers for creating elements and adding events, take a look at [hyperscript](https://github.com/hyperhype/hyperscript) and compare the approach.
D3js
How can you possibly compete with what's already out there?
Awesome, thanks for your suggestion. My next venture is diving further into Async programming so I think there are many places in this project where that can help.
The reason you haven't gotten any responses is because your code is too complex for the question. You need to reduce the problem to the bare minimum that shows the issue.
Prepare JSFiddle or Plunkr, regards
This looks sweet, I'll take a closer look after work :)
d3.js
The constant whining about "standards" is getting boring. For over a decade we're shoving more and more complexity into document primitives, forcing complex applications around it that need constant mending and fixing. Vendors do what the heck they want with the platform, forcing their short-sighted ideals onto the ever growing pile of backward compatible browser-tech. Do as you wish and pretend it's all going to be fixed. Don't expect anyone else to just sit down and accept artefacts like css without second guessing. It will be replaced for certain outside of the vendors scope, it's only a matter of time.
They help solve spaghetti code in the frontend.
It’s because it causes the callback to happen asynchronously Also never tie your code to a specific frame rate or frame time
A pub-sub should never notify a subscriber of past events, that would be a side effect
HighCharts is a bit heavy, but easy to use once you've put two or three charts together. 
Hello :)
Sounds fun, I will se what I can make 🙂 Now to figure out how the hell I fit music in with 20kb limit. 
The purpose of react or angular is to provide a client side application rather than a server side one in something like Symfony. That is, the logic and ui application layers are handled by the client, instead. It’s a principle difference one might come across in distributed computing, and your decision to use one or the other stems from your need to provide a thick or thin client. 
Thank you! This was mostly for learning purposes but I'm not against it :), my assumption is anyone who adds this would have their own build process in place that can handle ES6 imports and such. At my job I'm limited to ES5 and it kills me too haha. * I'll take a look at node.js events! * I'm still very new to async programming (only really touched on promises), once I learn more this will definitely be a place I will be looking to improve. * Noted on the console.log statements * Can you give me any of your favorite resources on unit testing? I've looked into Unit Testing a bit, but have my plate full already with all that I'm learning * Certainly noted, due to the decoupled nature of having a pubsub system, I wanted to see if there was anything I could do to help the debugging process. I love the PubSub pattern too. It's the first design pattern that really clicked with me. Also I will definitely check out msngr.js and see what I can learn from it :) and I have definitely checked out Postal JS before. Thanks for your feedback, it's really awesome
You can turn it around and make the subscriber say if he wants to get a notification of an event
yeah, the toggle button looks [buggy](https://imgur.com/dkpu74Z)
That's exactly what's happening
Let's not steal anything from this generous op 
There are libraries like https://www.npmjs.com/package/npm-completion which let you add command line completion of any NPM commands. This will allow you to type `npm run abc`, hit tab, and see all of the commands defined which start with "abc."
React: why can't I write JavaScript like I write my PHP? Just kidding, its not really like that. Angular: why can't I write my JavaScript like I write my Java? Just ki… hmmm, actually…
your object with .status class is too generic and every iteration is adding to all the .status classed html objects you need to make the status into something specific to the stream so it can be unique if (data.stream == null) { $('.streamers_logo').addClass('off'); $('.status').append('OFFLINE' + "."); console.log('Streamer is offline...') } else { $('.popover-body').addClass('on'); $('.status').append('LIVE!'); console.log('Streamer is live!') };
js, es6 and especially es5 offer no help when it comes to managing state, informing and creating dynamic views, scheduling read/writes, etc. All of this you'll have to re-implement by hand. If you, you made a framework. If you don't the app will [turn to mush](https://pbs.twimg.com/media/C7eEVWJVUAA8era.jpg:large). There's no "best practice" that would otherwise solve you from the very real problem of having to render this piece, that relies on that state, which in turn relies on something else, etc. You'll sling wires around and blow state into dom nodes and classes.
"Yo Dawgs, I heard you like js in your css and your css in js."
&gt; Can you give me any of your favorite resources on unit testing? I've looked into Unit Testing a bit, but have my plate full already with all that I'm learning So, this being JavaScript, there are essentially a limitless amount of ways to do unit testing. Personally I like to use mocha and I like to use the GO language style way or organizing files. So, typically, you'll have a folder in your project called `./tests/` where all tests will live. The GO style is to put the unit test _next to_ the file it tests, which is what I love to do. That would look like this: `./TinyPubSub.js` `./TinyPubSub.spec.js` (Unit tests in JavaScript typically end in `.spec.js`). But like I said everyone has their own opinion on how to unit test in JavaScript. If you're interested in my way `msngr.js` is setup this way. But there isn't anything wrong with going other ways. You can use mocha the normal way. There is also Jasmine. There are tons _more_ but those are probably the two most popular. &gt; Certainly noted, due to the decoupled nature of having a pubsub system, I wanted to see if there was anything I could do to help the debugging process. Fair enough. One option here is to have your `console.log` statements but use something to enable or disable them so they can be disabled by default but anyone can enable them if they have an issue. ``` const Events = { debug: false, emit(name, ...data) { this.debug &amp;&amp; console.log(`${name} testing`); } }; Events.emit("test1"); Events.debug = true; Events.emit("test2"); ```
Hello =)
I find the most value in frameworks in that they let you write and reuse components as opposed to a mess of monolithic apps. They have ways of making components nearly completely independent of each other and communicate through a defined and consistent way. The biggest problem it solves is being able to reuse the same UI component across many apps.
Well you kind of make it hard for anyone to help you - do like the rest of the world
I don’t think you ever should for a past event If you want a history of events that should be its own archival system, the pub sub should ideally have no memory
Sorry, my comment wasn't meant to mean "the universal right way" but instead, it was a way to describe the library authors idea of the right way. In fields like software, sometimes there are multiple right ways, but a team will decide on what the right way is _for the team_.
If only it were that easy haha. No, they arent anchor tags.
As a bonus, creating a minimal working example will often make the issue more obvious and you'll be able to solve it yourself.
I haven't personally tried doing this where the user can arrow-up/arrow-down to select, but I think I remember learnyounode doing that. But I have made something like this &gt; Which platform would you like to build for? * 1 : browser * 2 : ios &gt; Enter your selection _ It was a combination of console.log, readline, and child-process.exec 
He's changed them, I commented this a few minutes after his submission so it was an early catch :)
I dont mind but its not the greatest code and kinda messy: https://github.com/iSyn/More-Ore
The thing is i want to be able to subscribe to an event, and I dont care if that is going to happen or already happened. 
See, I've troubleshooted that and looked very closely at what was happening in the DOM and saw that exact thing happening. But I'm not sure if making a loop to create an individual class/id for each user is going to look the prettiest when I've already done that for each modal display earlier in the code. I think that's my only option. xD Thanks for the feedback.
The main problem that they solve is when you have a web application and the entire page has to reload off the server for every user interaction. This becomes a much bigger deal when you have a UI that requires a lot of user input and feedback to that input. In the past this was solved by having small pieces of your UI as a JavaScript widget that updates itself from the server over AJAX. This made the page much quicker to interact with, but making these AJAX widgets was pretty time consuming. React and Angular give us a standardized way to very quickly make pages that are driven primarily by JavaScript where we can build complex UI interactions that communicate with the server over AJAX and build them in record time. Say goodbye to unnecessary full-page reloads.
I thought AngularJS/Angular doesn't use virtual DOM? 
AJAX is just asyncronously loading resources, so no proper framework, especially not a SPA one, will get rid of AJAX. They'll call it different things, but it's still AJAX.
Which is one reason I like Vue's Single File Components. The markup is basically web components. The js is js. And the css is just normal css, optionally scoped to the component. You can use jsx or pug if you want. You can use coffeescript or typescript. You can use less or scss. Whatever, it doesn't matter. Sure Vue uses a dsl (jsx is a dsl). But I prefer that. Vue specific stuff uses Vue specific language. Everything else is just html, js and css pretty much. And they completely separated. Every vue file has three distinct sections. I can't wait till we all start to get legacy react codebases in a few years each using a different css in js solution.
that's why i made https://github.com/kapouer/node-webkitgtk. It works pretty well... though i'm far from being proud of the code. It's really easy to install on popular linux distributions - in particular, it doesn't require rebuilding a browser or installing untrusted binaries.
Also, the .status class isn't permanent because it only appears in the DOM when hovered over. (it's a popover) so assigning a unique class name to each .status would still work?
Awesome list! Great idea to compile common snippets so you don't need to rewrite them every time. Every JavaScript student should do this.
I understand making a sandbox for playing around with it would be ideal but it took me days to figure out how to work with the twitchAPI and I have no idea where to start to figure out how to implement it into jsFiddle or any other sandbox :\ -- I was hoping that this was just something that I overlooked and was hoping someone might've just had a quick answer.
Yeah very easily with stroke-dashoffset, explained here https://css-tricks.com/svg-line-animation-works/
Thank you all for the great insights! currently I have: - Fix documentation typos - Date-picker fix close button. - Show selected element on dropdown title. - Show selected animation before closing dropdown. - Fix Toggle animation. The only issue with not instantly animating on selection is that now I have to forcibly delay a user input just to show the selected animation... at the same time a visual cue is important for the user. 
I got into angular 1.x about 3 years ago because I wanted a better way to bind data from the server to HTML elements than what I could get with JQuery. Worked fine, but saw limits when I got to nested directives. Then about 2 years ago got into react, and since it's components all the way down, no more problems with nesting anything. That's probably not a problem with angular anymore either, but react offered it first. I also liked the JSX approach better than templating.
- I did not say frameworks are bad. But I do not like the fact that they are shoveled down the throat of every dev that want to get on the tech stacks nowadays. - When the bandwagon joins the framework train, all the basics are obscured away from them. They do not know how the underlying tech works--&gt; - When some new stuff is pushed , they cheer as if it did solve something that could never been dealt with before. Take for instance promises. I like promises but people cheered it like 'AAAAhh no more pyramid of doom!'. Wtf is pyramid of doom??. I never had pyramid of doom when I chained those xhttp, or other function calls. You could have wrapped them inside an object or rAF with some flag wathcers. What's the big deal? - React's event delegation. I could attach the handler on the parent node and look for event.target 10 years ago. Ok it's good react does it. But what's the big deal???? - You can use vanilla JS, and wrap your business logic inside an object that takes care of DOM nodes, attribute nodes, text nodes etc.. - I say again I am not an anti-framework, but I do not think they make things significantly easier in the long run. I see some people's work built on existing components and stuff--&gt; The amount of machinery that needs to get it working is sometimes insane and does not look optimal to me. Who knows maybe I'm completely wrong. What do I know after all..
Add a [natural compare sort](https://stackoverflow.com/a/15479354)
 try this: function cloneElement(data) { for(var i = 0; i &lt; data.channels.length; i++) { var statusClassName = 'status-' + data.channels[i]._id; var name = data.channels[i].display_name; var game = data.channels[i].game; var logo = data.channels[i].logo; var follow = data.channels[i].followers; var commas = new Intl.NumberFormat().format(follow); const sourceElement = document.querySelector('.list-group-item'); const destination = document.querySelector('.list-group'); const copy = sourceElement.cloneNode(true); copy.setAttribute('id', 'main_streamer-' + i); destination.appendChild(copy); $(copy).text(name); $(copy).popover({ html: true, placement: 'right', trigger: 'hover', title: '&lt;p class="text-center"&gt;'+ name +'&lt;/p&gt;&lt;b class="'+ statusClassName +'"&gt;User is: &lt;/b&gt;', content: '&lt;p class="text-center"&gt;'+ game +'&lt;/p&gt;'+'&lt;p class="text-center"&gt;Followers: '+ commas +'&lt;/p&gt;'+'&lt;img src="'+ logo +'" alt="streamers logo" class="img-thumbnail streamers_logo"&gt;' }); } } var twitchId = []; for(var x = 0; x &lt; data.channels.length; x++) { twitchId.push(data.channels[x]._id); console.log(twitchId) } twitchId.forEach(function(stream) { // Second AJAX call for searching specific streamers var streamURL = 'https://api.twitch.tv/kraken/streams/' + stream; $.ajax({ url: streamURL, type: 'GET', dataType: 'json', contentType: 'application/json', headers: { 'Accept': 'application/vnd.twitchtv.v5+json', 'Client-ID': 'm6dsm7dm7pd4ltqh3nd82g5nudjbu2' }, success: function(data) { // Check if streamer is live or not $('.list-group-item').on('shown.bs.popover', function() { if (data.stream == null) { $('.streamers_logo').addClass('off'); $('.status-' + stream).append('OFFLINE' + "."); console.log('Streamer is offline...') } else { $('.popover-body').addClass('on'); $('.status-' + stream).append('LIVE!'); console.log('Streamer is live!') }; }); console.log(data); } }); }) 
That seems like an anti pattern, it sounds like you want to be checking the state of the application instead of going through past events What is the situation? Maybe you can just make an enhanced pub sub pattern that is doing what you want 
&gt; any instance where I could provide some levity I like to :) Oh, I get it, just giving you a heads-up. Just mentioning that the way you portray yourself has an impact got me a downvote, so people get angry about this stuff ;) &gt; can you elaborate a bit on how you tested the performance of your pubsub a bit? Sure, let's see if I can remember! I have a directory [full of them](https://github.com/ahri/upubsub/tree/master/benchmarks) so what I was doing was encoding how many local (l) and global (g) subscribers I was testing in various libraries, and how many arguments (a) also - so those are the letters in the filenames. It looks like I was comparing against [events](https://www.npmjs.com/package/events) and [eventemitter2](https://www.npmjs.com/package/eventemitter2) since the former is the default one that Node provides and the latter was a popular alternative (at least, at the time - I have no idea these days). I used [benchmark](https://www.npmjs.com/package/benchmark) to actually execute stuff since they take away all the extras you have to deal with (warmup, timing, etc.) to get helpful results, and made tweaks to my implementation on that basis, which taught me a lot about the internals of JS and its various engines; trying to get something working quickly on multiple browsers is... interesting! If you have a quick look at the source you'll see that I ended up making compromises I wasn't happy with so I [branched my library](https://github.com/ahri/upubsub/blob/3fc3444867e67179ebc9d22a205dc8aebc5b8c4b/upubsub.js) into dev/production with the same API in order to hide some of the insanity of tuning.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ahri/upubsub/.../**benchmarks** (master → ed1ffb6)](https://github.com/ahri/upubsub/tree/ed1ffb676858812be82e9174bf009f266976766d/benchmarks) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
webpack: "yo dawg I heard you like css so I loaded your css with decss so you can import css in your js while you css in your js" 
true.
Could be that it has been like that. It was with Angular for sure, and you're right of course, it sent so many projects into rewrites. We went through it as well. I don't think newer frameworks are comparable. Nothing's obscured or kept from you except things you could care less about, optimizations mostly. Picking up a framework made me a better javascript developer for certain. &gt; but I do not think they make things significantly easier in the long run I think they most certainly do. The patterns we have evolved it isn't the framework that matter, but the paradigm inside. The paradigm doesn't care about the browser. Hence, i can transfer my knowledge and leverage it just about anywhere today with similar semantics. &gt; The amount of machinery that needs to get it working is sometimes insane and does not look optimal to me I think that's also mostly sentimentals. The amount of manual labor in the old web was intense. Yet no one seems to think of what it was like chasing dependencies by hand, having weird scripts that knew jack of how the project works but nonetheless had to be fiddled around with constantly. Yet today - when did you last touch your webpack config, 4 months ago? Half a year ago? Yet you added to your code, gave it new dependencies, you debug and hot reload in ways that would make native tooling melt. 
When working on a small code base it might not be as noticeable, but compared to rolling your own DOM manipulations, React offers better performance, component based views that are easy to reason about and compose to form more complex views, and when paired with Redux, a single source of truth for your front end application state and easy to reason about flow of data from the store to your components. Again, I will emphasize that for smaller applications where you may need a few DOM manipulations here and there, it's not worth it to bring in a framework. It's probably overkill. If you are, instead working on a very complex, interactive UI that needs to re-render potentially thousands of elements based on any number of user interactions - a framework like React is a lifesaver because (if done right) it keeps your logic structured, testable, less error prone, easy to debug, and easy to update. On top of that, the framework heavily optimizes DOM manipulations so it's only doing what is necessary rather than blowing everything out every time you tell it to render. 
I'll check it out. It seems like a good fit!
jQuery AJAX request just makes the syntax easier as well as using parseXML on the result. You could do it with pure JS too if you wanted using XHR requests and writing an XML parser. 
Dude, thank you so much. This is exactly what I've been trying to do for the last couple days now. Makes so much sense. THANKS!!! &lt;3
I was wrong, and you're correct on virtual dom for angular. Angular/React/Vue are mostly for rendering, and not necessarily for data fetching. Angular provides a [standard way to do requests](https://angular.io/api/common/http/HttpRequest), my best guess is to ensure there's a standard interface between server-side rendering and client-side. React and Vue don't provide any standard xhr interface, but some popular options are [superagent](https://github.com/visionmedia/superagent), [axios](https://github.com/axios/axios), and [fetch](https://github.com/github/fetch).
Well I guess there are enough points lying around for the OP for sure. When you mentioned dependencies my mind involuntarily wondered into the json config files and the plugins for each module etc..I found myself saying "nothing does sh*t out of the box anymore.." :) But I thank you for the points. There is certainly truth to some of the things you say.
perfection
&gt; I've learned authentication and how to use things like PassportJS &amp; Stripe Once you get past the basics it's probably time to actually put all of this to use by making a bigger app. You'll run into problems that you have to solve, and you might even end up having something that makes money when you're done. If you have no ideas, FreeCodeCamp's full stack projects are a good start.
thanks a lot! What exactly do you mean though, do you mean the projects FreeCodeCamp has under `React Projects` for example? Or am I missing something?
Ah thank you so much for your help, it really makes a huge difference. I've heard of Jasmine before, it looks like I'll be taking some time to sit down this week and get really acclimated with unit testing. Also for debugging, that looks like the best way to go about it, let the user decide if they want console.log statements. I'll definitely be adding that! It's sort of a funny thing, my background is in communication design, but I love coding. &amp; this year I really tried to ramp up my Javascript skills. I don't really come from a programming background, so I try and take it one step at a time so I don't overlook anything important. Thanks again!
Well those too, but they have things like a Voting App, Pinterest Clone, and some other ideas. Its been a long time since I looked at the site but they used to have like a JS section, React section, some easier backend stuff, then some full stack projects
alright, cool, I'll have another look! Thanks a lot!
You could spend some time learning advanced React component design patterns. Some good ones are: - Render props pattern - Higher order component - Compound components You could also learn about React's experimental Context API. Learning all of these things, the pros and cons, and when to use them would definitely up your React game significantly. The aforementioned design patterns are used commonly in many popular open source libraries :) You could also learn some more general things like: - Unit testing in Jest - Trying out css-in-js solutions like styled-components or css modules - Learning about observables in JavaScript If I missed anything I'm sure /u/acemarke has covered it in his [extensive list of React/Redux/JavaScript topics.](https://github.com/markerikson/react-redux-links) Anything else like best practices and stuff you'll learn by doing. Find a project idea and make it a reality! Hope this helps!
Thanks.
amazing, thank you so much!
&gt; Also, these libraries use a virtual copy of the DOM Well, react uses a virtual dom. Angular does not. 
This is great, thanks for sharing. I would add “idiot-proof” versions of the snippets with type and null checks. If used verbatim, most snippets would fail miserably when the input isn’t exactly what’s expected.
Part of the whole idea is to write code that's easy to understand and deals with pretty simple things. But, sadly, you have a very good point there. Safety measures like an `alwaysArray` method that would convert anything into an array and things like that could be quite useful to remedy this, I think. I'll try to figure out what's needed.
I totally get it, and that simplicity is what makes the list even more awesome. But there are a lot of developers out there who tend to copy and paste without giving it any extra thought.
Indeed, type sanitizers/converters/insurance will be added asap. I just tested a few things and now I feel like this is a glaring omission on my part.
Array.from() ?
Something like this? ``` var arrayFrom = (...values) =&gt; [...values]; ```
Great introduction. However, if I'm not mistaken, the author of the article forgot about securely transmitting the public key. The public key can indeed be public, however, the recipient of the public key must know absolutely sure that the retrieved public key belongs to the expected sender. In the [setup described in the article](https://blog.patricktriest.com/building-an-encrypted-messenger-with-javascript/#4keyexchange), the WebSocket server can replace the public key with its own, and as a consequence, can send messages to the recipient without the recipient knowing he is being mislead by a man-in-the-middle.
Haha no worries. I'm pretty dumb myself! Also, I used to use: [].slice.call(arr) 
Hi /u/Jamessono, For javascript help, please visit /r/LearnJavascript. Thank you!
Log level meaning the amount of "console.log". So for example if someone is using this library and has 10 events per second happening, they would end up with a crazy amount of logs. Log level just means how many "logs" you are producing. So for example, only outputting error logs instead of ALL events. I agree you should try to warn the user that their message was not captured by anything, but does that really need to stop the whole app? I would personally log a warning instead of throwing an error in this case. (This could tie in to the first point about log level)
Absolutely. You will still need an *architecture*, but because that architecture will be customized to your needs for limited applications it can be much simpler than a full-blown front-end framework. For example, I used the Flux.js architecture pattern with vanilla JS to build a payment flow with 20+ possible states that was 20% the size of the original React version. For DOM manipulation, as long as you don't care about ancient versions of IE it's actually really simple these days: http://youmightnotneedjquery.com/ The biggest concern is that it means you have to get all of the security right yourself.
you have fat arrow functions ... a good collection would also have pre-ES6 code snippets to get large base adoption.... just saying ...
Considering you want easy to read snippets, why do you use ternary operators?
Ternary operators are dead simple to understand and one of the most common features in most languages. I wouldn't expect a lot of people wouldn't understand what they do. Plus they are a lot shorter than `if else` statements, which helps make snippets short.
That's a really good point. I have already considered adding a secondary list in the project for pre-ES6 versions of everything. I mean arrow functions are nearly universally supported already and most developers use Babel, but this is a very immature assumption on my part I feel.
Shorter yes but if else blocks are way easier to read.
Calling a function (in your case, calling the callback) adds the function to the call stack. JavaScript processes all user interaction through the event queue (including things like MouseMove and MouseClick), where events are pulled off the queue and added to the call stack for processing. The big thing to remember is that the JS engine only starts to process the event queue once the call stack is empty. So, if you’re running through 500 function calls without deferring them to the event queue, those user interactions (moving the mouse, clicking things) won’t get processed until after the function calls are all done. To the user, this will look like the app is frozen. Using setTimeout with a 0ms delay will throw your callback to the back of the event queue, so the callbacks will execute in between user interactions, preventing any appearance of the app hanging. 
Thank you for this. I always hear people saying it's [insert year here] we shouldn't support anything below [insert standard here], but in web development you have to keep the dinosaurs in mind if they're a singificant portion of your clientele.
The preflight check is handled transparently by the browser on the front end and by your HTTP server on the back end so you don't have to worry about preflight requests unless you're using a server that doesn't support CORS. By default, “credentials” (like cookies and HTTP Auth information) are not sent in cross-site requests using XMLHttpRequest. In order to send them, you have to set the withCredentials property of the XMLHttpRequest object. Which you have done. Try this to see if you can make a CORS request to a site with basic auth. See instructions at http://httpbin.org var btn = document.getElementById('btn'); var username = "name"; var password = "pass"; var req = new XMLHttpRequest(); req.open('GET', 'http://httpbin.org/basic-auth/name/pass', true); req.withCredentials = true; req.setRequestHeader("Authorization", "Basic " + btoa(username + ':' + password)); req.onload = function(){ console.dir(req); } req.send(); Make sure you make this from a page running on a web server and not from localhost / your desktop. Requests from localhost won't be cross-origin and Chrome doesn't allow CORS requests from localhost (unless you disable security). 
Excellent collection of snippets. Since you're using ES6, I'd suggest using the built-in Math.hypot to calculate distance between points via `Math.hypot(x0, y0, x1, y1)`.
Yes, it could be done differently. The situation is i have a core module and several other modules that get plugged into that. The core module does some data loading, processing etc. some of the modules depend on data/processed data from the core module. But modules a lazy loaded, so i need to know about past events. Thats why added this functionality. I could also set a flag or just check if objects is null, but doing this over pubsub seemed better to me
This is a great competition! My favorite game genre, and the constraint is a really good one. I've written turn-based tactics games in AS3 before, but not JS. What can I even fit in 20KB? Already my mind is full of ideas. Thanks for the inspiration!
Good call, I will fix this asap!
Oops, forgot how it works--should be `Math.hypot(x1 - x0, y1 - y0)`
&gt;fat arrow functions Found the coffeescript user!
one big thing that commenter missed is **testability**. angular built its own dependency injection system to allow for unit testing and mocking. react's virtual dom let's you use tools like enzyme to run unit tests against a real DOM element and let's you interact with it in unit tests without ever touching a browser. the important of this can't be emphasized enough and it's a requirement for any large-scale enterprise application 
Do you have some code you can share so we can check what you've came up with already? Overall, if your slideshow is a one-page app (no refreshes), you can store the user input simply in a javascript var, in an array for example. Moreover, these use cases are more easily solved when working with something like Vue.js, Angular, React etc.
for URL parameters, can't you use URL.searchParams.get()?
Support is not yet ideal, so there's that.
Babel? 
It might be beneficial to comprehension to provide example input and output for each snippet, so you can see the expected results of a transformation alongside the code that performs it
To be fair, a good practice is to write code using the current standard and compile to a specific target. This allows you to consistently polyfill where needed and not burden yourself with remembering all of the quarks and one offs.
I think it would be better to include a blurb up front about compiling with Babel and retain the ES6 syntax. It helps move the whole community forward and enforces smart development principals (like writing once and compiling for specific targets, which is far less error prone).
ng1 did not, but ng2+ does (think React wrapped in all that horrid angular-specific boilerplate).
Take this for example var gcd = (x , y) =&gt; !y ? x : gcd(y, x % y); The non ternary version would be var gcd = (x , y) =&gt; { if (!y) { return x; } else { return gcd(y, x % y); } } Now I've been programming for 5 years, and the non ternary version isn't easier to read at all given how it's 7 times as long
I like this idea. I will get a disclaimer added at the very top, making sure people know what to do with these! ;)
That is not a bad idea to be honest. After all, leafing through these in a hurry takes me a good 10 seconds until I find what I'm looking for. 
I feel exactly the same, `if else` takes too long to read and honestly if you are doing only one thing inside it, you might as well use a ternary operator as it is a lot easier to read and keep track of.
That's what tools like babel are for though. It's much easier to transpile new to old then the other way around (although these are one-liners so it doesn't really matter that much).
Nice collection! I've got my own library that I've been building up for years that I re-use in many projects (as I'm sure is true of any developer who's been using a given language for many years) but there's a few here that I'm going to... ahem... "take inspiration from" :) Actually, now that I think about it... what does the MIT license mean for taking PARTS of something? Is attribution still required in that case?
I love ES6 and use it as much as possible. Does it break every once in a while? Yes! Are there ways to fix it? Hell, yeah and pretty much everyone knows about Babel nowadays. Still, this doesn't mean that we shoulnd't strive to support as many platforms and users as possible in our code. Especially when it comes to projects like this, which are essentially a learning tool for people.
Nice content thx for sharing. It will help learning js to a coworker !
You can certainly write your own function using Js (D3) or canvas. I have one project coming like this but I already have one dashboard I've made not exactly like yours but more or less the same 'message' at this gist: https://bl.ocks.org/ibrahimtanyalcin/808237e5729ba4720f437fda4eab8085 You can(will) find some more here: https://github.com/IbrahimTanyalcin/LEXICON Good luck
For capitalizing a string, you could use String.prototype.replace(). var capitalize = str =&gt; str.replace(/^./, i =&gt; i.toUpperCase()); 
The MIT license states: &gt; Permission is hereby granted, free of charge, to any person obtaining a copy &gt; of this software and associated documentation files (the "Software"), to deal &gt; in the Software without restriction, including without limitation the rights &gt; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell &gt; copies of the Software, and to permit persons to whom the Software is &gt; furnished to do so, subject to the following conditions: &gt; &gt; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. &gt; &gt; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR &gt; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, &gt; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE &gt; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER &gt; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, &gt; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE &gt; SOFTWARE. The **TL;DR** version is you can copy and use anywhere you want and you don't have to credit the original author(s). So feel free to "take inspiration from" this list. After all, that's the main purpose of it - to help people get started with JS. :)
It’s not, you should be using an application layer like react/Redux or some state manager, not reinventing the wheel here Having your app components parse through past events to setup their state is not a great idea 
Someone already submitted the `capitalizeAll`, it's being reviewed and ready to be added. As for the other one, it seems elegant. I'll most likely switch the current one to this one, as it is shorter and easier to read.
*cough* hot-seat multiplayer *cough*
Best of luck!
Awesome! Good luck!
Yeap and i will add go to nodeschool.io web site wich got really nice tutorials
Can you elaborate on the security part? I ask because I've never have a big enough project which I think justifies a framework and it's worked out fine. But I have the same concern, namely security. 
I am actually using mobx :D but that pubsub thing is still some legacy code from before i knew much about mobx/redux. But i still dont understand why you think this is such a bad idea. Care to elaborate a bit(more)?
The MIT license is supposed to include who the originator is. As it requires you to redistribute code with the notice, you do actually have to attribute the original author. If you truly want them to be able to copy and go with no worries, you want to use something like CC0
In all honesty, attributing the original author is common courtesy and people who use the MIT license don't usually get too mad if you redistribute some parts of their code without attributing them. That being said, the whole point of this list is to grab what you will, so I might actually switch licenses to make sure people can grab anything they want without hesitation.
Yeah, that's all I was trying to say. Technically someone could get in trouble if they got code from the repo but didn't attribute it. Might not even involve you. Say a code review somehow made that connection. I don't know how, or why, but that's the situation. Under MIT, that person could get in a ton if trouble, potentially involving the legal department (not nessecarily courts or any such thing though). Under CC0, they'll only get in trouble if it's a bad use of code. Or if the company is draconian..
Great point. I'm not a license guru, so CC0 it is then. 30 seconds of code is a free learning resource and I want people to copy and use anything they want. Thanks for letting me know!
The most compelling reason is that this functionality has been already built in libraries that are not nearly as naively implemented This isn’t meant to be an insult, it’s just that this is basically a first effort, year 2 CS sort of thing, and while I applaud his effort, this is not something you should be using in any production or prototype For example, he’s created his event storage as an analogy to a hashmap, but in his naivety has created only one bin, I believe, because of the way Javascript handles objects as keys. Every event will be listed under the bin “[Object Event]”. It also won’t be very performant, since his hashmap means a full O(N) retrieval as pointed out above, and the excessive logging will slow it down
No problem!
hey man im sorry, didnt mean it as wanting to get free work out of people, i am wanting to learn and see if anyone wanted to start up a server, jesus! just trying tp be friendly and meet people, then there are people like you that exist. nothing like this in the pcmr.
Github supports [the Unlicense](https://github.com/Chalarangelo/30-seconds-of-code/blob/master/LICENSE) which feels like pretty much the same as CC0, so I went with that. I think this is exactly what the project needs, right?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Chalarangelo/30-seconds-of-code/.../**LICENSE** (master → 6b2b0cd)](https://github.com/Chalarangelo/30-seconds-of-code/blob/6b2b0cd50cdb5dd3694a982d3b2185ad7dbc7a9b/LICENSE) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
No, Angular does *not* use a virtual dom. https://stackoverflow.com/questions/39739648/does-angular-2-use-shadow-dom-or-a-virtual-dom
Last I checked, Unlicense is actually void in some countries, such as ones where you cannot give up all rights. CC0 fails gracefully, is recommended by CC as the only CC license applicable to software, and is recommended by GNU over Unlicense. Also, I can't do a full check now, but a quick Google search CC0 is, or at least was, a GitHub option. 
This is the development side of things though. You really shouldn't be teaching people a standard that's three iterations out of date except explicitly as legacy code.
Don't use regex for something this trivial. The slice version is nearly twice as fast.
I disagree. Lots of people's brains shut down the instant they encounter a regular expression. `"What does that ^ symbol mean again?"`
These are nice, I like the simplicity of the scroll to top one, perfect use of recursion and clean practices with request animation frame
I can't find it right now, but I'll recheck later. For anyone reading, treat the project as if it is under CC0, I'll figure it all out soon, sorry for the inconvenience!
Well, regular expressions are quite elegant, fast and work better than brute forcing code like I did. Explaining the regex in the description could help people get used to them a bit more, I suppose.
Rxjs
This is actually an app I could build, but I've never seen this type of request for an initial screener. Is this like what major SV companies ask for?
I guess that's where we disagree! I've heard "any non-trivial regular expression is indistinguishable from the result of a cat having walked across a keyboard." I think they're great for medium-sized problems. If it's small, just combine a couple of string functions. If it's a large problem chances are your solution is vulnerable to DoS attacks. I did a perf test on the regex solution vs. the slice() solution and found slice to be almost twice as fast, so I'm not sure why you say it's fast and works better :)
It's a reasonable expectation except insofar as it's not really "front-end." The bit about thread-safety is interesting too since that's not something you'd have to worry about if you built it in Node.
Alright, this is a topic where a lot of opinions will be thrown around, so I guess that I should set up some guidelines for what is best for the list. Alternatively, I could keep both solutions, marking the regex one as such, so that people can make up their own minds. That's probably the best option, right?
what is it you're doing and where are you? I've been thru that kinda thing... had 2 different supposed partners in 2 different aspects of a business I ran, and both turned out to be shitty at my expense... and I'm not just talkin about $$ either.
You eat the overhead necessary for creating an instance of the Array class. Not huge, mind you, but as with anything, it depends on the number of times you use it. A better way is to capture the function in a local variable and reuse that. var slice = Array.prototype.slice; slice.call(arrLike); You can save a trivial amount of bytes being sent to the client by using your method: var slice = [].slice; slice.call(arrLike); but this way you're only eating that "spin up" cost once and recycling the reference to the function (which is what you're really after).
From [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) &gt; The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. Apparently "described by the string" can be a lot of things. Somehow the system thinks the string describes an instance of a temporary object I created in a completely different scope. Could this happen because of the "name" field? It seems to be a reserved field in some javascript objects.
Good point about Node. And yeah, i guess it is more of a js engineer position, but was listed as front end. Just seems strange to me to have this be the initial screener before even an introductory phone call. The market is great for devs right now, so not sure why spending a few hours for just getting to first round interview would be reasonable. Guess i was wondering if this was a scam or something, like free work (it's not for a major SV player, just a finance company).
Interesting stuff, never seen this happen before and can't replicate it either. Would you perhaps be able to make a test sample for others to try and replicate (assuming you can make this happen consistently on your end, ofc)?
It’s going to be 0(n) if it’s unsorted. You will need to loop over the array members and store the length and index of the longest word. Then it’s a simple comparison.
&gt; 0(n) Big O, the letter, not zero. Otherwise, yes.
When you open up an object in console it's values are determined at that point, so highlight was added on later somehow in your code.
You sure its not being added after the log? The contents in the tree represent the state when you expanded the node in the console, not when it was logged.
yeah - i'd try and console log the property right after parsing it. 
Why can't you use replace or sort? You could do something like: strings.indexOf(Math.max(...strings.map(str =&gt; str.length)))
OP should stick them in a library or push them as a PR to lodash
Submit these as a PR to lodash, those that you haven't duplicated anyway, it'd be valuable
Professor won’t allow us to use those two, no clue why, want us to do hard way first but only lectures so it’s hard for a first year student in java
This is such a wholesome thread but quite off topic; you may find more help at /r/learnjavascript/ or /r/learnprogramming/ Most of all, don't give up and good luck.
That should not be too difficult, you can simply use AJAX to POST the form data for each image when the use click next. Assuming there are no page reloads, and assuming you know how many images are on the front you can use a simple if to check if you are on the last image and swap the next for a done or whatever. No need to blot something that can be done in less than 100 LOC with any frameworks or libraries, even jQuery will be excessive for such a small requirement. If the field and button is in a form the onSubmit can ref a javascript function which makes an ajax call to POST the form data, and in the done/success handler you can move over to the next image as long as the user is not sitting on the last image.
Where are you from? I’ve did some projects too. Could be helpful if I could learn a thing or two from you and vice versa 
[Angluar option](https://swimlane.github.io/ngx-charts/#/ngx-charts/gauge) based on D3 ( so you could easily do a non-Angluar one )
This is a picture of the code https://i.imgur.com/4vE66gn.jpg 
This is the code https://i.imgur.com/w8ki7ug.jpg 
Have you read [this](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) article? I found it super helpful to understand the unidirectional, virtual dom + immutable data approach that's popular in many frontend frameworks these days. Basically, the problem a lot of these frameworks solve is a big spaghetti salad of different callbacks updating the DOM in different ways. A pure render function from app state to virtual DOM makes things so much easier than remembering all the callbacks that might do different things and modify the page state in different ways.
I took a closer look and this was indeed the case. Feeling pretty stupid now. I hate weak typing.
👍🏻👍🏻
Yeah. Typed on my phone and messed up. 
``` var gcd = (x , y) =&gt; { if (y) { return gcd(y, x % y); } return x; } ```
As a developer more used to working primarily in Java and C# and have been wanting to push more into pure JS development, I will definitely save this post, thanks OP.
&gt; You could spend some time learning advanced React component design patterns. I am using most of these patterns. But I haven't done anything with context at all. Any use case for using context?
This all seems overkill. Attribute what? This is like Apple patenting the swipe gesture or something. These snippets are fun to have around, but they are very basic and virtually anyone could reproduce them and probably already has a version of something like this in their code. I have a personal library with 80% of the things on this list.
I use this one pretty frequently - use GreenSock to interpolate two numerical values: TweenLite.to({val: 1}, 1.0, { val: 100, onUpdateParams: ['{self}'], onUpdate: ({target: {val}}) =&gt; console.log(val), }); 
Why do you prefer using var over let or const?
Pretty much this... No IE support, only recently got Edge support (17+) in the preview channel. Unless you specifically don't support MS browsers, you're out of luck, unless you wanna go the polyfill route.
Is that allowed?
Very cool, I had no idea something like this existed in Bend! I'll tune in for sure and hopefully join the Meetup in person soon.
that is the contest host lol
Oh yes I fully agree. But like, it doesn't hurt the project, so why not? And if you want to do something, do it right. 
I used it the other day to allow two child routes access to objects/models in the parent route. Seems the react router v4 `Route` component was overwriting `props`. I could be wrong though. Still new to react and learning. 
You're right! Anyone in full control of the server could intercept both public keys and replace them with their own, inserting themseles in the middle and effectivelly compromising the encryption. It's often considered more secure to exchange public-keys out-of-band (outside of the app, via email or in person or whatever), and to sign encrypted messages with your private key in order to prove their validity. I can't think of any way to securely exchange public keys through an untrusted intermediary, if that itermediary is capable of intercepting and replacing messages. It seems that this question might be relevent not only for this tutorial, but also for mainstream end-to-end messengers like Telegram and Whatsapp that use internal public-key exchanges as the basis for their security. SSL handshakes even require a trusted CA to verify the server certificates; I can't think of any protocol implementations that can be completely secure and also self-contained. Perhaps a decentralized P2P based key exchange mechanism would do the trick, which would be cool but maybe a bit outside the scope of the tutorial. Any ideas?
Will there be any non-typescript js topics?
Would be nice to have a shuffler of lists! [from a quick Google](https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array) Sorry, didn't really check out all your snippets, still on phone. Hope you don't have it in there already ( ͡° ͜ʖ ͡°)
Can you please share the link? I've tried but I can't find this section of their website and Google links consistently links to student blogs detailing their experiences with free code camp.
Can you please share the link? I've tried but I can't find this section of their website and Google links consistently links to student blogs detailing their experiences with free code camp.
Can you please share the link? I've tried but I can't find this section of their website and Google links consistently links to student blogs detailing their experiences with free code camp.
Hey bro, I would wonder to have a chat with u. I am from a Russia, and u? This is my whatsapp, write there +79052012432
damn where to start ?
Your "randomize order of array" function [is not actually random](https://bost.ocks.org/mike/shuffle/compare.html). You might consider a [Fisher-Yates implementation](https://bost.ocks.org/mike/shuffle/) instead.
If only I had read a little about callstacks before I posted my previous comment. Anyways, unless you are animating, in which it is imperative you are doing everything you can to stay inside that magic budget
It's not angularjs. It's just angular. Angularjs is the official name of the 1.x framework.
Also just a note -&gt; I've made an update that should make it more performant, since it's not looping over an entire event object anymore
Nice!
No reason to specify a budget so high if you’re animating or simply working headless
Start here [https://www.freecodecamp.org/challenges/build-a-voting-app](https://www.freecodecamp.org/challenges/build-a-voting-app) - then click the 'next challenge' button to see the rest - Keep in mind that they have a whole bunch of easier stuff too if you aren't quite ready for these.
Hi I never tried this. I think watching this will give you the idea. https://www.youtube.com/watch?v=CAwksUqlZQU&amp;list=PLfdtiltiRHWHHYWSsb_0V3k6CFxDhjFtS
That is a good idea - I have had a ton of people ask me how to 'actually' put a CRA online. I see that you have us-west region hard coded, maybe having an optional flag to set the region would be nice? But I guess your target audience is people who don't really want to think about stuff like that... Nice work.
RemindMe! 6 hours
I will be messaging you on [**2017-12-12 11:52:23 UTC**](http://www.wolframalpha.com/input/?i=2017-12-12 11:52:23 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/7j37iu/i_have_been_collecting_useful_javascript_code/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/7j37iu/i_have_been_collecting_useful_javascript_code/]%0A%0ARemindMe! 6 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
powerset is so dangerous. in this one application, we had a search that did a powerset on the entered words.... but we didn't put any limits on the user-provided input. long story short, if a user entered more than a few words the server would burn cpu &amp; eventually run out of memory. &gt; powerset('abcdefghijklmnopqrstuvwxyz'.split('')) &lt;--- Last few GCs ---&gt; [6000:000001AAB28807F0] 206911 ms: Mark-sweep 1407.4 (1450.4) -&gt; 1407.4 (1450.4) MB, 1445.8 / 0.0 ms last resort GC in old space requested &lt;--- JS stacktrace ---&gt; ==== JS stack trace ========================================= Security context: 000003ED8B625E91 &lt;JSObject&gt; 2: map(this=00000087F31E0751 &lt;JSArray[8388608]&gt;) 4: /* anonymous */ [repl:2] [bytecode=0000026C0C370FF1 offset=27](this=000001B7E7306301 &lt;JSGlobal Object&gt;,a=00000087F31E0751 &lt;JSArray[8388608]&gt;,v=000003FD8D990501 &lt;String[1]: x&gt;) 5: arguments adaptor frame: 4-&gt;2 6: reduce(this=00000214C00B9CB9 &lt;JSArray[26]&gt;) 8: powerset [repl:2] [bytecode=0000026C0C370CE1 offset=19](this=0000... FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory
Your "draw" method clears the canvas and you're using setInterval in the constructor. Have an "update" method which updates this ball's position. Have a "draw" method which draws the ball at its current position. Put the ball instances into an array. Inside a requestAnimationFrame-based "loop", iterate over the ball instances and call their "update" method. Use fillRect or clearRect to clear the canvas. Then iterate over your ball instances and draw them at their current position.
Actually Node.js's plans for CommonJS is that by default `import`-ing it will store the `module.exports` object as the "`default`" export so this is how you'll `import` fs, or lodash, etc: import fs from "fs"; import _ from "lodash"; // use _ and fs as normal You can already try this to see that by using `node --experimental-modules` in version 9. In fact the real pain point is exactly the opposite way around, for an arbitrary CommonJS module you won't be able to `import` named members e.g.: // commonjs.js module.exports = { x: 10, y: 20, } // esm.js // This doesn't work because in all regards `module.exports` // is just a plain object import { x, y } from "./commonjs.js" Now there's probably going to be opt-in [pragmas](https://github.com/bmeck/node/blob/named-export-core/doc/api/esm.md#use-exports-) so that CommonJS authors can opt-in to replacing `module.exports` with a Proxy that allows for treating the names as ESM names but it's still early days.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bmeck/node/.../**esm.md#use-exports-** (named-export-core → 431abad)](https://github.com/bmeck/node/blob/431abad45de315b8f32843fa9cbe1d3e878194c3/doc/api/esm.md#use-exports-) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
... you want a *complete* list of snippets? ... huh. 
Even title of the article lists out as "Angular" Fuck /u/Ameliapro for mixing it up! 
For "count occurrences" i would propose: var countOccurrences = (arr, value) =&gt; arr.reduce((counter, next) =&gt; counter += (next === value) ? 1 : 0, 0) ... you're not afraid of using reduce for things that aren't obvious reductions in other places, but aren't using it in places where it is more obvious. Using filter creates a temporary copy of your array that isn't needed. 
Are these things cool to use? : http://js13kgames.github.io/resources/
Btw it is really unsafe to store passwords this way
Bad habit. Snippets will be polished up over time.
thanks for the reply, Read the blog your point will be clear :)
Why I should use this instead of something like heroku ?
Published [worka 3.0.0](https://github.com/GrosSacASac/worka) , easy web workers
Exactly!
Are you aware of print-screen functionality?
Think: how do you, as a human, find the longest word in a list of words? Let's imagine that all words are pretty huge and that it's handwritten which means it's not obvious which one is longer just by its length. You acually have to count the characters. You **go through each word** and count the characters. If the characcter count is **larger** than the previously know largest word, you delete what you previously thought was the index of the longest word and **write down** the newly found index of the word you're on. If you keep going like this, in the end you'll be left with the index of the longest word.
 class Foo { toJSON() { return 42 } } const foo = new Foo() JSON.stringify(foo)
That does not answer the question, though. Try doing `JSON.stringify(JSON.parse(object))` to see what it is REALLY at the time of logging it. Mouse over the blue "i" icon that appears next to the object to see what senocular is talking about.
``` var powerset = arr =&gt; arr.reduce( (a,v) =&gt; a.concat(a.map( r =&gt; [v].concat(r) )), [[]]); ``` cool, took me a while to figure that one out.
So where is the framework, is it published on GitHub or something else ?
Took me even longer to write it! :P
Some of them yes. Please keep in mind these rules though: &gt; The game cannot ... use a dedicated game engine (like RPG Maker, Unity, Unreal Engine, etc). Basic libraries like jQuery are fine (if, you can squeeze it inside the 20KB limit that is). If in doubt, ask in the comment section. &gt; If you are using assets/sfx/music/etc created by someone else, please make sure its license allows you to use them for commercial purposes and redistribution. Please note that some licenses require proper attribution - be sure to meet these requirements. If you have any specific resource in mind and are not sure, feel free to point to it and ask (if you prefer not to ask publicly, send me an e-mail or message on reddit). 
Yes, that's fine.
const longestword = phrase =&gt; phrase.split(' ').findIndex(index =&gt; index === phrase.split(' ').reduce((a,b) =&gt; a.length &lt; b.length ? a : b, 0))
please press on title to see the code.
The main thing is that they make a lot of complex thing easier. And changes to code will usually be easier afterwards. If you're only building a very small app and that app will never be updated then a framework may not help you much. If you're building a medium or large app it may save you a lot of development time and it will probably be much easier to make changes to the functionality without introducing bugs. They are generally also targeted on apps, not web sites. If you have a web page and need a little script on it then pure js works great and may be your best bet.
Not OP - I see people do this, but if you're going to push to heroku you should be making an Express/KOA/etc server to run it. If you just naively push it to heroku it will work, but then you're running webpack-dev-server in production. For a frontend-only app you might not care, but thats just bad practice.
the factorial one can be done more simply. const factorial(n) =&gt; n &lt;= 1 ? 1 : n * factorial(n - 1)
I thought the recursive version would break due to to much recursion before the array-based one I implemented, but testing shows that this is not true. Also, at around the point where errors start being thrown around, the result is already `Infinity`. I will update the snippet or you can submit a PR if you like. **Make changes to the individual snippet file, not README, if you do so!**
alright, ill do a pull request :)
This is definitely a confusing feature of devtools that values printed earlier will update to their current state rather than displaying a copy, but you know there's advantages to live update as well so it's hard to say what they should do.
I might push a few of them as a PR to lodash, but I wouldn't want to take full credit as a lot of people have contributed to them. The reason I am not making them into a library is that I want people to get the ones they need and understand how they work in the process. Plus, there's plenty of libraries like lodash that have 90% of the things that are on the list and I wouldn't want to compete with them at all.
I already have. This was pointed out before that my technique (for lack of a better word) just confuses the sorting function. I'll keep it as a proof of concept under a different name most likely and put a Fisher-Yates implementation in its place.
There is a shuffler implemented, but it's pretty bad right now. I will get a Fisher-Yates one added soon.
 var startingNum = 10; function countingByTwo(num){ var answer = []; for(var i=0; i &lt; startingNum; i+=2){ answer.push(i); } // End of for loop return answer; } console.log(countingByTwo(startingNum));
Thanks!
It might help that you clarify a little bit the question. I wrote something based on some assumptions I made. For instance, in the function *countingByTwo(num)*, I assumed that *num* is the upper bound of your count (Meaning, if you call the function with *45* as argument, it will count by two and stop at 44). var startingNum = 10; //I'm going to assume `num` is the number you //want to end with (or the number you shouldn't go over) function countingByTwo (num) { var counter = startingNum;//initialize with the knwown starting number. for (counter; counter &lt;= num; counter += 2) { console.log(counter); if (counter + 2 &gt; num) { //this ensures that you return a value that's //not greater than `num` return counter; } } //in case we never get in the loop, it will //just return the starting number `startingNum` return counter; } var result = countingByTwo(22); console.log("And the final result is " + result);
* Callbacks are very easy to learn and a core technique. do learn them. * Promises are the foundation of async functions (async/await), so you should definitely know them. * Async functions are brilliant and easy to understand. They shouldn’t present much of a challenge, once you know promises. 
I hate screener questions that ask you to build something. You're literally wasting hours of your candidates' time because you're too lazy to interview them properly.
I think you should start with understanding callbacks first and then work your way from there. Promises were designed to combat issues with the callback pattern (ref: callback hell and error handling) and async/await was designed to make promise handling easier to follow and code. Directly jumping into async/await would prevent you from understanding all the historical context of where it even came from. 😄
Would be cool to hear from OP. As most of FE applications do use some sort of web server, making this choice absolute compared to better ones that already work.
In your function, `biggestWord` is the length of the longest word. Instead, you should set that to the actual word itself (here I renamed it to `result`), then simply check if the length of the word in the array is greater than the current biggestWord you set. function longestWord(phrase) { var words = phrase.split(' '); var result = ''; for (var i = 0; i &lt; words.length; i++) { if (words[i].length &gt; result.length) { result = words[i]; } } return result; }
If something off the wall is happening like this in a core piece of widely used technology it's your fault, 99.99% of the time. Don't jump to the conclusion that JS is broken. In this case I think you just don't understand that chrome logs the actual object, not a snapshot of it.
This is very inefficient. 10,000 words takes 3 seconds with this approach, while a for-loop takes 0.3ms and map + Math.max takes 2ms on my CPU
That’s a full stack test. 
Wtf. Why would anyone ever run webpack-dev-server to serve files from a server? Servers can already serve files.
What's your question?
Would you accept this change as a PR?
Did you hear of the WTFPL license? I think it would be a perfect fit for your case :)
If you can convert all snippets to use `const`, I'd gladly accept it. **Make changes to individual files, not README.** I have limited time to fix everything and this is a community-driven project, so any contribution no matter how simple/small/trivial helps. 
I will happily do so. 
jQuery is an alternative you can use to issue AJAX requests to your server. With all the current capabilities of browsers, you don't actually need to use it anymore. You can just use the 'fetch-api' in your browser. https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API Keep in mind, all these are async, it's not like jQuery is not async, or that any of the alternatives is superior, it's just you don't need to use that library.
Hey guys I got plenty of time recently so I decided to learn JavaScript. A quick question though. I started studying JavaScript in codeacademy and the introduction to JavaScript in there seems different from W3Schools. For example, printing in codeacademy is something like console.log('Hello world!'); while I can see that the one in W3Schools is more HTML based. As my end goal is to use the knowledge of JavaScript for creating websites, I want to know, is it much better studying the one in W3Schools? Why is there a bit of a difference in the codeacademy version and the W3Schools? Thank you very much in advance for those who will reply. 
async programming doesn't necessarily have to be about server requests - though those typically are that way - and even then, you don't necessarily have to own/provide the server, you can try querying some public API, like get weather data from somewhere or something like that. But Aysnchronous programming is in general about everything that's not synchronous - so in terms of javascript, any user interaction can be handled that way. As for your question: Well I suppose it makes sense, but it's in no way necessary.
Hi everyone! Built this as a side project to learn React VR and bitcoin. This runs entirely in your browser (websockets + redux + React VR) and honestly is a testament to the awesome work the ReactVR community has put in. We actually finished building it 3 weeks ago... just in time for the massive explosion in bitcoin transaction volume. We had to redo pretty much our entire Redux state management to prevent us from crashing everyone's browser. We're still halfway through, but thought we'd share it quickly and get comments/feedback to improve on!
make drawing the scene (not the individual ball, but the overall scene) independent of the scene's objects (in this case, the ball) - things like clearing the canvas shouldn't be part of the ball class, neither should any intervals be. maybe have a 'scene' class, that does the interval stuff, that you can "add" balls to, and that clears the canvas and draws all it's balls each interval. an array of balls would be helpful here. ...and yea, replace intervals with an requestAnimationFrame loop.
You're trying to load `bestgoals.json` but it doesn't exist? The JS panel is where you put your javascript code (i.e. the code between your &lt;script&gt; tags) A little more info on Ajax on CodePen can be found via https://blog.codepen.io/2013/09/23/ajax-codepen/
Stupid and weird things can still happen, especially in javascript. Usually it's not even about the language being broken, it's just how the system is specified to work. But in this case, it was indeed about chrome. 
...tbh even a screenshot of code seems a bit silly. code formatting on reddit or something like github's gists exist for a reason.
I am 99% sure that is you having messed something up, not JSON.parse per se.
jQuery is NEVER the only way, as jQuery is just a wrapper that makes many common tasks (like ajax requests) easier than they USED TO BE (but most of them are just as easy without jQuery these days)
You don't need jquery for anything. All you need is fetch and support for promises and/or async/await. Babel can help you out with enabling async/await on older browsers, fetch and promise polyfills you can get everywhere. async function run() { const response = await fetch('https://jsonplaceholder.typicode.com/posts/1') const json = await response.json() console.log(json.title) } run()
I'd heavily recommend ALWAYS to name your stuff in english, not in your local language. It might not be the case now, but it easily can be the case in the future that you got to work with other people, often even people from other countries, and this is just a very good practice to follow. code readability really is what makes the difference between a good dev and a great dev. however, I like the debug notation in front of your console.logs :P Storing passwords or other sensitive data unencrypted in localstorage or sessionstorage is a very, very bad idea though as those are more or less publicly readable und thus completely unsafe.
Have you tried ```.outerHTML``` instead of ```.innerHTML```?
In the first week it had the same curve. Probably not even that. At the end of 2017 react gets 1.800.000 downloads a day, growing rapidly. lit and hyper between 400 and 1000? Not having made the slightest progress. That is what you call "gone." I know this will be hard to process, but why would anyone use a *string*, bound to a single platform, when we can have faster, declarative, functional components that are cross platform, can be native, and feed from an eco system that is self sufficient. No one care what javascript officially can do or not, it can execute a function that's all React asks for.
Yes gives the same error
If that JavaScript is being called from within the iframe, I don't think it will know about it's ID from the parent. Try just using document instead.
React is nothing special, HyperHTML is the minimal implementation for what does the job. Google aren't stupid, that's why they're trying to grab the credit with lit-html. HyperHTML is not a string, it relies on a very interesting property of templates where only the array is the variant and not the original string.
Love the list, but the one thing that sprang into view is the strange parameter structure you use in your timeTaken() function. Why not use a simple callback instead? 
As I understand this introduction, the private key from the private/public key pair get's only saved on the clients pc. This is good for security, hence nobody else will have easy access to it, but detrimental if the user looses this key or the access to the system. How would I save the private keys server side but still keep them secret from the server owner/admin?
I might have been influenced by some coding style somewhere. If you think it feels strange, please submit a PR (modify the individual snippet file, not README) and we can figure it out. The community is extremely active, so there will be a few people stating how they feel about this.
React is 2kb. It is the minimal implementation of what allows true cross platform apps on any platform and knowledge transfer while applying the eco system (example: [react-motion driving blessed in a console shell](https://github.com/gaearon/react-blessed-hot-motion). I don't see anything like [react-reconciler](https://github.com/facebook/react/tree/master/packages/react-reconciler) in hyper/lit, and this is the actual breakthrough. How a component is rendered, no one cares. hyperHTML can handle JSX btw, and most would surely use it like that.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/react/.../**react-reconciler** (master → 7299238)](https://github.com/facebook/react/tree/72992382788a46e901f257c8314d30cce57ce0e7/packages/react-reconciler) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I don't have an immediate response to your point, so I will look at your links. And then I will crush your balls if you're misleading me because I don't care how long it takes me to come up with an analysis. Thank you for the new information, see you soon.
what happens is the user presses the [Admin panel] button that calls the iframe, then when they login and click submit the fuction login starts and they look if the password is a match then the iframe drops but it gives the error iframe = null 
Hello everyone! After a month of coding we've finally finished this little but (I hope) useful lib If you have any questions - I'm here and ready to answer! :)
Add the script “now-start: serve -s build” Install serve locally Install now globally Run “now” in your project directory. Boom done. Served globally with build logs and all the other badass ZEIT tools. 
It was evident right from that point forward this was either a) not for a front end only sort of position (more full stack), b) written by someone who doesn't understand JavaScript, or c) written by an asshole who enjoys throwing red herrings in just to trip people up. (A) is really the only acceptable answer, if it is (B) or (C) then run from this job. It's not a place you want to work.
You can always call back and say you would like to find out more information about the position and company before you spend the time to complete the exercise. 
Also learning `fetch` is going to be by far far more similar to async interfaces you'll be encountering moving forward since it uses promises.
you should learn it, and its not hard at all. There is very good, free and short course about it on edx from microsoft. It will make you able to read and understand what actualy is going on in frameworks. So yea, just do it!
Try removing it from the DOM var frameid = document.getElementById("iframeLogin") frameid.parentNode.removeChild(frameid); You might have to add it again if you need it again.
Worked for a couple seconds but then the numbers got reset to 0 and no balloons are appearing, using latest Firefox
It's tricky to do that securely, but there are still a few approaches that you could take. One option could be to prompt the user for a password during key generation and to encrypt the private key with that password (using a symetric crpto algorithm such as AES-256) before sending it to the server. The encrypted password could then be relatively safe even if stored online, and the user would just need their original password to recover it. Another option could be how WhatsApp does it - generating a new keypair when you switch devices. In this case, you could link the new keypair to an existing user account - older encrypted data would not be recoverable, but the user could still keep access to their account.
This is outdated stuff. For example, it relies on function.length, but with ES6+ function.length stops "counting" when it enconters a parameter with a default argument or rest parameters e.g. var f = (a, b, c) =&gt; {}; f.length // 3 var g = (a, b=1, c) =&gt; {}; g.length // 1 var h = (a, b, ...c) =&gt; {}; h.length // 2
I think you mean learn actual asynchronous coding, I think some people here assume you mean async/await which is a new feature Yes learn Jquery for sure, a lot of code you write in Jquery is asynchronous but it is so easy you dont even know your writing async code $("button").click(e =&gt; alert("clicked")) 
Makes sense for boot camp candidates and fresh grads. For someone who's actually working? No way Jose. Not unless you're paying me for my time.
One might make a strong argument that you should go ahead and learn asynchronous programming and how to interact with APIs. For one thing, async doesn't just refer to making remote requests. Sure, that's going to be a huge use case, but it also may include (but not limited to): browser based events, setTimeout, setInterval, communicating with web workers, scheduling multiple tasks via Promises... the list goes on and on. Another reason would be that understanding API design as a consumer of APIs will make you a stronger backend developer. Interacting with an API is a great way to start. Here's a fantastic free API I've stumbled upon: https://newsapi.org/. You can learn about [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest), use the [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) API on modern browsers, or even use [JQuery ajax](http://api.jquery.com/jquery.ajax/). Don't let people tell you JQuery is out of date. Just understand it's not the _only_ way to do things.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/amaaggregator] [Live WebAssembly AMA this Thursday. Ask about JS!](https://www.reddit.com/r/AMAAggregator/comments/7jba6q/live_webassembly_ama_this_thursday_ask_about_js/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Standardization is common and necessary in all forms of engineering
Damn thanks for this!
Governing of the spec is both a community and committee approach (basically, any public member can propose changes/spec/etc, but committee has final call). You can see "ordinary" members here: https://www.ecma-international.org/memento/ordinary.htm. You can also find details on how an item is proposed, stages it will go through (e.g. public review processes), etc here: http://exploringjs.com/es2016-es2017/ch_tc39-process.html. In terms of browser adoption; each browser has its own set of developers, many using their own JS engines. Consequently, browser developers develop their JavaScript engines to ideally satisfy the existing spec (often there are some small errors/gaps/bugs or intentional omittances to the specs that certain developers will do, leading to minor behavioral differences between browsers). The only way to answer "what was available in each browser at the time specs were release", is to go back through their release notes and see what features they actually mentioned/etc at the time of those releases. There are numerous polyfills and also numerous transpile tools (such as babel) that started to support these concepts 6 or so years ago - documenting the history of that would be very challenging. Keep in mind many browser developers are either members and/or contributors to existing specs, so they are often doing parallel work with the evolution of the spec. Regarding your last question, class is just syntax sugar, so you've been able to do prototypical design for a very long time now - that being said, polyfilling or transpiling the class keyword has been around for years. Your question is a pretty lengthy one in terms of discussion, so I would just recommend googling a bit more - the answers are out there :D.
No problem, just make sure you use the correct formula instead of the one I first posted ;)
I had a feeling that would be the case. I wish that Javascript would allow you to update a String character via it's index instead of it just being read-only. Then we could just do `str[0] = str[0].toUpperCase()`, which would be my ideal capitalization method. My gripe was just an aesthetic one, and in Regex just saying "match the first character, and uppercase it" seemed more straightforward sounding. Though I knew the performance issue would be something that came up.
Hmm oh dear. I'll look at the logs!
Hi /u/NikitosGolubev, never reveal your own personal information in a comment. I've removed it for you now.
Both. The answer is both. If I remember correctly (I did both these courses a few years ago) Codecademy focuses on language structure and basic coding concepts within JavaScript. It goes more in depth into loops, conditionals, objects, classes, and data types, similar to how it does so in Ruby, PHP, etc. This is important both to understand and write more complex code and to be comfortable on the back end, with nodeJS or another language if you end up going that direction. W3Schools focuses on DOM manipulation, a very important part of front end development. It has less substance (or at least did) but focuses on common ways JavaScript interacts with the browser. If you plan on pursuing Web Dev you'll probably end up using one or more front end frameworks or libraries through your career to make this easier but you'll have a leg up if you understand the ways native JS achieve these things. 
Sounds like a pretty damn good idea!
Really great list! I'm going to submit a PR in a second. :) I appreciate that because the code style focuses on brevity it's easy to copy and paste stuff. That makes things harder to understand, though, particularly for beginners, and these are an awesome learning opportunity. Think you could include both a "long" and a "short" form of each snippet? I noticed /u/evenisto saying "took me a while to figure that one out," which concerns me. Curious if others have the same concern?
I think fizzbang is fair, like with a fiddle, codepen, as a screener. And for something like a 3rd (x) round interview, where it's evident both candidate and employer are showing interest, then i think it's fair to ask for a multi hour solution. But as an initial screener, i agree, these tasks i've been seeing seem overly presumptuous.
Have you used Heroku? 
I am working with the community to hit the sweet spot between readability and brevity, by changing variable names and improving snippets, along with adding examples for each snippet. This should help alleviate the problem a bit. Some snippets (like the anagram one) are very complex and hard to explain even if a longer version is included. I'll see what can be done.
In a game, you'd usually keep the distance squared and omit the comparatively expensive sqrt call. If you want to check if there is a collision, the exact distance isn't needed. You only have to check if the squared distance is smaller than the squared sum of the radii.
https://caniuse.com/#feat=es6-class Click "Date relative" to see the adoption dates in different browsers.
&gt; Is it valid to say that the ES6 class keyword has been a viable option for enterprise app design "for the last couple of years"? If you use Babel or TypeScript to produce ES5 code, yes. It still doesn't work and will never work in IE11.
At what point does the client no longer have the ability to do this on its own? In general, if a client can perform an operation on its own it should in order to reduce the complexity within the service. Sorting and filtering may be something that the server needs to handle at the outset since you don’t want to fetch data you don’t need and so you’ll need to have the database perform the search and sort for you, assuming you’re using a SQL database.
Very nice! One nitpick, though. I see that you've got a couple spots in your reducer where you're generating random values. That _works_, but it technically makes the reducer impure. The "right" approach for handling random values in Redux is to generate them outside the reducer and pass them in, or possibly pass in a seed value. See [Roll the Dice: Random Numbers in Redux](https://daveceddia.com/random-numbers-in-redux/) and [Random in Redux](https://blog.ohlman.io/random-in-redux-b6b9932ad061) for examples of how to do that.
Thank you so much! We honestly just learned Redux for this project, and are still figuring out how to think in a more FP way. Thank you so much for the links - will probably find a time to fix and improve it this weekend!
In all honesty, the `sort (random order)` seems pretty unbiased and shorter in terms of implementing. I'll probably stick with that for practical reasons.
&gt; At what point does the client no longer have the ability to do this on its own? Therein lies the question.
I always assume that data may become too complex/large to aggregate from the client side and bake aggregation into the server side. That said, I add the ability to control how much data will come down per request, so if I wanted to, I could set the `per_page` amount to some silly large number, i.e. 1000000000 and handle everything locally, or I can set it to 15 and use as expected.
For searching, sorting, and pagination it’s not that deep in most cases. Would you need to request a lot more data than needed in order to perform these operations? If so then the server should handle it. If the client would request the same data even if it didn’t need to be sorted and filtered then the client should handle it.
The last time I was on the market, I was also in a 60-70 hour a week time crunch with my existing employer. No way I'd have had the patience to do something like this.
yes you do need to learn it. jQuery is just a library (a useful one), that you should be familiar with, but don't substitute jQuery for learning the fundamentals. jQuery is just a wrapper that makes doing those fundamental things more convenient. on a fundamental level you need to understand what an AJAX request is, and how the client-server communication model works for moving data around. finally, the A in AJAX stands for "asynchronous" but there is a lot more to async programming then just making AJAX requests. in general, understanding callbacks, event handling, and the Promise API is really important. that will come later. don't rush into because it's a lot, but you will need to know this eventually. 
Agree. But even a screenshot is a great step in the right direction. 
preloader+justified-xxl-text+fixed-header;dr
Is an iframe with the ID attribute iFrameLogin already in the DOM? If not it isn't going to place the iframe in an element that doesn't exist.
[removed]
&gt;Does ECMA have some type of general council with representation from Google, Microsoft, etc, to help establish consensus on the latest ES(x) spec? Yes. See here: http://www.ecma-international.org/memento/members.htm &gt;After the ES6 spec was published in June 2015, I'm assuming that all of the browser makers created a roadmap or plan for how they intended to fully support all of the defined specs/features down the road. Is this correct? I'm assuming that there may have been some concurrent browser development to support ES6 standards as the ES6 standards evolved. Is this correct? Yes and yes. Many features have been introduced by companies with a personal stake in the future of JS, browsers, the web, etc. As such, you'll also often see features implemented in some form before official spec is finalized. It's not uncommon for 1-2 browsers to implement a feature even years before finalized in spec. &gt;Were there any particular polyfills that were popular with the js dev community, which were intended to provide ES6 browser compatibility as the browsers evolved? Babel was and probably still is the most popular polyfill / backwards compatibility tool out there. It was originally called `6to5` actually, because it was focused on allowing developers to write ES6 code and compile it to ES5 for backwards compatibility. &gt;How soon was the class keyword available for use in the different browsers? According to MDN... Chrome 49, Edge 13, Firefox 45, no IE, Opera 43, Safari 9. I will not go through and determine when those version numbers rolled out. &gt;For example, was the class keyword available in all major browsers by the end of 2015? Not sure. Feel free to Google it. It definitely wasn't implemented in IE though. &gt;Or was there a particular well known/regarded polyfill that provided ES6 support for all major browsers by the end of 2015? Yes. Classes, to this day, are just syntactic sugar over prototypical inheritance. Most compilers / polyfills just fall back to this. &gt;Is it valid to say that the ES6 class keyword has been a viable option for enterprise app design "for the last couple of years"? Not sure why enterprise is a specific focus of this question, considering enterprises are generally behind the cutting edge. Anyway, ES6 features have been a viable option for any developer for the last 2+ years, especially when using a compiler, transpiler, or polyfill. If you're in Node world, almost all of ES6 was supported by mid 2016. 
&gt; It's not uncommon for 1-2 browsers to implement a feature even years before finalized in spec. IIRC sometimes it's *required* to even get the spec finalized (Stage 4 to published or w/e) because there needs to be some "in-the-wild" use of the feature.
I did not know that, but that is not surprising to me at all. Would help work out the kinks and "gotchas" of the spec before finalizing.
Hello everyone! React Tabtab is a mobile support, draggable, editable and api based Tab for ReactJS. This package make you use tab in zero configuration and support lots features other react tab packages don't support. Mobile supported — Touch support. Easy to use on mobile device Draggable tab — Support drag and drop tab Add &amp; Delete — Tab can be added and deleted Customizable style — Based on styled-components, super easy to customize tab style API based — All actions are controllable You can try it! Welcome any feedback : )
Sucks to hear that. I do IT stuff, basically I did everything from installing office computers to whole server infrastructure to developing custom product tracking system to mobile app (and everything between). A lot of work in short amount of time for no money and severe health issues.
What's your current or new gig?
Lol yeah i was pushing a 50 hour work week and I got an interview where they asked me to make minesweeper with React/Redux and write unit tests for all the components in a day. I was like no thanks
what do you mean by use console sorry. 
I don't see why it wouldn't work. Are you getting any errors?
It's not about the syntax, it's just that functional paradigm is not always instantly comprehensible. I sometimes need to write it out to figure out how data flows through the functions to get a good understanding of what's going on, that's all.
Done. Since I don't have access to my Linux right now, I had to go through the whole fun ordeal of setting up git on Windows first. Worth it though. Looking forward to the feedback, and I hope I didn't screw up in some way. T'was my first pull request.
Has it really been that bad? I am sorry about that. Right now I have vacation until I figure out what to do next. What about you?
There's nothing wrong with it per say, you could totally disable the rule and have no side effects, but by returning the promise instead of the value, you can use Promise.all and other utility functions. You'll have to await on the async function anyways, so its usually better to let the outside function wait instead of the inside one. https://jakearchibald.com/2017/await-vs-return-vs-return-await/ was posted recently with a lot of good information about this very topic.
Just keep up, you're doing great! :) 
&gt; This is doing exactly what I think it is doing - await waits for a promise, and then returns the result of that promise. Almost, but not _exactly_. It waits for the Promise that `bar()` returns to resolve, it then gets that result and then, _because you are in an `async` function_ that result is wrapped again in another promise to be returned. So, the effect is that you're still returning a promise, but you're waiting until the promise is resolved to return a resolved promise. Now, it is true that... async function foo() { const x = await bar(); return x; } ...does the same thing. But if you're doing that explicitly, either you are doing something else in there or you're explicitly doing it on purpose.
I'm mostly curious what problem this solves? My best guess is that webpack has a rather big setup cost when a project may only be bundling two files. Are there other goals? I see type/flow in your roadmap, but I'm more curious about your big picture.
Most of them work in IE. Pretty good!
ahah, we had only Edge nearby :D Many thanks!
I agree. I've just run into too many situations where budding developers thought `short code == good code` and were very discouraged. I think a junior developer taking the time to translate these into long form would be a very good exercise, but yes, it's probably not the responsibility of the repo owner.
Exactly. /u/150738274937250 run this code snippet in your browser console... const endpoint = 'https://jsonplaceholder.typicode.com/posts/1'; const bar = () =&gt; fetch(endpoint); const foo = async () =&gt; { const x = await bar(); return x.json() }; (async function test2 () { const result2 = (async function test() { const result = await foo(); console.log({result}); return await foo(); })() console.log({result2}) })() …and you will see that `result2`, the returned value of `test()`, is a Promise when returning an await.
What would I have to do to get the shortest word?
Gotcha, so to clarify, things under the "Micro game engines and boilerplates" heading, would fall under the category of game engine? 
Why use C++ examples rather than TypeScript examples? Couldn't this be better explained with generics in TypeScript?
This concerns me greatly, erm, I mean `$(this).concerns('me').greatly()`
I think it's very similar for: DejaVue + Vue Devtools (google chrome extensions) Vuetron starts web server to debug &amp; communicate with vue app. Why not extension (simpler communication)? 
 try { to.give.a('fuck') } catch(err) { return dont.give.a('fuck') }
Not all. I can tell you on a case-by-case basis, but I would prefer not to review all of them from that list ;)
Fair point. It looks like TS supports not only type parameters but also constraints on those types. I'll start rewriting the C++ examples to TS.
You are going to have to set cross domain policies more than likely. Check your dev tool's console. If this is the case it will let you know. Tamper Monkey will inject your scripts but it doesn't circumvent Chrome's cross domain security protections.
Thanks!! (I'm the other collaborator with onggunhao) It's been an exciting project to work on. During any Bitcoin price surges, the screen would completely fill up with Zeppelins!
the naming decision from google was dumb enough as is, please don't perpetuate the confusion further in your titles.
Much appreciate the feedback! I looked at both Firefox mobile and desktop and the visualization doesn't work as well as on Chrome or Safari. We've updated the warning ribbon to reflect that for now and will look into why this week! Keep the feedback coming!!
Been coding for a little under two years. Have shipped several production apps built in react. I skimmed the readme for a couple minutes and still have no fucking clue what a tab is.
this is so last week
Fair enough :), when I have some free time and better sketch out what I plan on creating, I'll see if I want to use any of those resources and ping you then. Thanks for quick replies.
You can use Promise.all() with non-promises. Same goes for other promise stuff. A non-promise value is treated as a promise that resolves instantly with that value. Second, you don't *have to* await an async function. It's usually what you want, but not mandatory. An async function will return a promise. What you want to do with that promise (await its result or do something with the promise itself) is up to you. Third, there's no guideline about letting the outer function doing the awaiting rather than the inner one. Feel free to do it at any level you wish, as long as it works as intended.
Learning async is async so start now and you'll understand later :D
Functional Programming from a Functional language for developers of a Hybrid language in an Object Oriented language! Perfect!
In that case, set `result` to the first element in the array then switch the comparison. function shortestWord(phrase) { var words = phrase.split(' '); var result = words[0]; for (var i = 1; i &lt; words.length; i++) { if (words[i].length &lt; result.length) { result = words[i]; } } return result; } 
Is there a node JS subreddit? Maybe try there, or I'd assume Google/npm has some guides on this as it has to be a pretty big thing
Right, I was thinking about Promise.race, which would bail out of the list as soon as one resolves. It works out to be the same thing, it just made more sense to me that the promise is resolved at the race() level, but since its going to end up being the same in the end it does't matter.
Neither of them is acceptable *as written*. The first case is acceptable if you intend to do something with x before you return. If you want to compare it, or use it, or modify it, then yeah, you need the actual value. But if you just return it immediately it's basically the same as the other case. async's job is to wrap a function in a promise, so any async function will return a promise. The confusion stems from the fact that the actual function foo() you wrote, and its return value, is not the real function that will be used, and its return value is not (necessarily) the value that will be returned. In technical terms, it's actually a generator's declaration. It will be wrapped by async in something completely different, and only used as the generator's step-through list. await (optionally) unpacks promises to obtain the value inside. In the example you have, bar() returns a promise, you wait for it and get its value, then async wraps that value in another promise, effectively undoing your work. Since you declared foo() async then you must've intended for it to return promises, so then why not just return whatever bar() returned, which is guaranteed to be a promise? async will see that it's a promise and let it through untouched. You save a couple of steps that cancel each other out. Now, async and await are perfectly fine pieces of syntactic sugar on their own. So why did they make it mandatory to only ever used them together? That's because behind them both is the same generator. async declares it and await yields (in addition to the promise wrapping and unwrapping). In fact that's exactly what async/await is: syntactic sugar over a generator that generates promises. If you understand generators it becomes obvious why return await makes no sense, because it's the same as return yield. You're pausing the generator one more time before exiting the function, but that is a useless action. The only thing you accomplish is that you keep the generator around for a few more clock ticks, wasting memory, and the wraparound code will have to do a bit more work, wasting CPU. The end result will be the same in either case. The only reason I could imagine where this would be relevant is if you were tracking the state of the generator somewhere else, and it were important that it should not show as finished just yet. But if you're writing that kind of code you're most likely using carefully crafted actual generators, not async/await, whose role is to be a much simpler tool. That's why eslint is saying that it's far more likely you don't understand what's going on under the hood.
Yep, TS's generics are actually quite powerful!
Whenever I do this the return is blank?
Nvm got it working thank you sm
Can you be more specific ? Are you talking about printing a website to pdf or manipulating a pdf using javascript in Node ?
you know when you use 'inspect elements' on a page to see the code? Look at the top of the "inspect elements" and see the line of tabs. Next to elements is console (:
Nah, we took the reddit source code and selected part of it as the banner. I was hoping for something a little more up to date, but alas, here we are, jQuery spaghetti.
I believe part of the process for approval is that during stage 3, there needs to be actual implementations in browsers. Often behind flags. This is so that people can use the spec for a while and garner feedback. As for how it works in practice, modern workflows use the latest spec, and often stage 3 proposals (this is the general rule for typescript) to develop their applications in and then transpile to whatever target they need for their customers. There are a few different offerings for this, but babel and the typescript compiler are the two main ones. Beyond the review period, I don't think the spec authors expect a certain date for compliance. And with modern workflows, it is largely irrelevant. You can also think of it as a separation of concerns. There is the concern of building the app efficiently and clearly, which is best addressed by using the latest spec, and then there is the concern of the actual deployment environment to actual clients, which is abstracted by transpilers. There are some polyfills that one might use separately. Web components comes to mind, but in practice, the tooling usually provides the canonical polyfil depending on how your set your compilation target.
from what i've seen, it's a wrapper around rollup and, like rollup, it's focused on bundling libraries, not apps. rollup is fairly low-level, in terms of giving you raw tools for bundling ES modules. microbundle is basically a pre-configured rollup installation with a nice name and some branding.
Nvm I got it thank you so much it works 
I would suggest looking into accessibility i bit more. Semantic markup. `div`s and `span`s should not be used as the default element, since none of the have any semantic meaning. And you probably need som WAI-ARIA in there as well if you want it work for everyone. Included some examples of how this could be achieved; [Example 1](http://accessibility.athena-ict.com/aria/examples/tabpanel2.shtml) [Example 2](http://heydonworks.com/practical_aria_examples/)
Long story short - if you want to return a value, which is promise itself, you don’t need to wait for it explicitly, because async function will return resolved value for you, as every other promise work. you should just write return bar();
Add this just before the `void(0);`: setTimeout('popw.close()',60*1000);
So if I understand correctly, then, given a (synchronous) function which returns a promise, like: function bar() { ... return new Promise(resolve =&gt; ...); } Then `return await` unwraps the promise, and returns a new promise, which just wastes time: async function foo() { // do other stuff for side effects return await bar(); } Instead, you should just return the promise directly: async function foo() { // do other stuff for side effects return bar(); } Unless you want to do something with the result of the promise, like: async function foo() { const result = await bar(); // do stuff to result return result; } Is that the gist of it, or am I missing something else?
The Hindenburg. Totally worth the wait. :D 
That's the correct behavior. If you actually rendered the quotes, your meta content property would be cut off. Using the html entity `&amp;quot;` solves that.
Tonight is mainly typescript but they'll be talks on all sorts of things in the future!
Hope you can come make it sometime!
That's it. Only one observation: if you're not using await at all in a function, don't declare it async. Using async will make it a promise generator, but if you don't use await then you're wasting both the generator's ability to pause and the promise wrapping.
You still should do it! Just add a library scoped to your NPM username. That way you can easily access all these without having to manually copy/paste code, and it gives you some additional experience in maintaining an OSS module/project. I'm probably going to do the same thing with util functions I often use.
Look up dangerouslySetInnerHtml()
Prototypal would mean “relating to prototypes” but it’s a very rare word so it’s not surprising that people would generate prototypical in its place. Though, it’s always a jerk thing to complain about improper usage when the intent is clear.
&gt; Just add a library scoped to your NPM username. How would I do that exactly? I am already maintaining a reasonably large OSS module - [mini.css](https://minicss.org) and a couple of other minor ones. 
Js people can be kinda snobby so I wanted to make sure that I was saying it correctly
Based on some googling I thought that "prototypal" was the more common descriptor.". If you think that "prototypical" is more more common then I'm guessing that the terms are considered either/or in most circles.
"Prototypical inheritance" would probably technically be the the first system that other inheritance systems are based on. I'd suggest you aim to follow the [robustness principle](https://en.wikipedia.org/wiki/Robustness_principle). Say the correct thing when you speak, but let it slide when someone says something slightly off.
&gt;You can use Promise.all() with non-promises Not quite, `async` functions just always return a promise. I use `async` on any function that returns a promise, even if they don't use `await`.
I don’t know which is more common. I say prototypal when I need to say it but that is, admittedly, pretty rare. If someone is being a snob about it feel free to ignore them because it’s really just not worth the time.
When you render your table, you need to add css classes to the rows that need to be nested, which you know from the json data.
Well sure I'm not a snob about that type of thing but I want to be prepared for others that are
Ok I think I'll go with "prototypal" for now. Thanks.
The thing about it is that the data can nest deep dynamically. So parameters array objects can also have parameters arrays. I don't know exactly how deep it nests, so in other words I need to build a recursive function that flattens the array, but don't know how to do it.
Just do `return bar()`, it's the same thing given the fact that it is inside an `async` function. &gt; Why is const x = await bar(); return x; acceptable, but return await bar(); is not? It is not acceptable. However, I don't think eslint can catch that. `async` function always returns a Promise, so trying to unwrap a single promise with `await` before returning it without modification is useless.
Javascript has had prototypal inheritance from day 1. ES6+ supports the `class` syntax. Typescript likely compiles to ES5, and maybe compiles to ES6 if you have the right settings.
Demo pages seems to be down i guess. But looks nice will try them tomorrow!!
Not a bad idea in theory, but kinda seems like overkill to just upload files (especially since most CI like Travis include deploy tooling which handles deploying both static files or a full server). 
Both are OK. Prototypal seems to be used more often, though.
Rule of thumb: as soon as you have users who can partake in assholery that provides a hearty slice of “Denial of Service” to other users, you have a strong case to move everything server-side. TL;DR always paginate/sort/filter server-side. 
I see someone has updated this using a similar example, that would actually work :-D i didn't actually run my code, and was falling asleep when i wrote it, so i would've caught that normally. :-D 
Why? What use is async without await? As you said, you don't need async to be able to return a promise.
Your tapping game is very addicting 😌
It makes ensures your function always returns a promise so if an error throws you can Promise#catch it.
There's really not enough info to answer your question here. But for the future, give this a read http://sscce.org/ You're going to find a lot more help if you make it easy to give help
I can see where you might've got that idea, but it's wrong. You're confusing async with
Do you know any links where I can get a fetch from RSS with Javascript code?
I can see where you might've got that idea, but it's wrong. You're confusing async with Promise.then(). It's true that then() catches exceptions and sends them to Promise.catch(), but async doesn't. If anything throws inside an async function, you get an exception. You are working with promises and generating promises but async code is *not* inside a then() (unless you explicitly do an await inside an async then() handler; I haven't tried, I'll have to see what happens). What probably confused you was that certain async implementations, most notably Node.js, chose to emulate the "soft fail" approach of promises and instead of letting the exception crash your app, they catch it and issue a warning, but let your code continue, which allows it to develop all kind of weird bugs. My advice, if you work with Node, is to use process.on('uncaughtException'), log the exception so you can see the message and the stack (for some reason the warning doesn't), then *crash your app* with process.exit(). Then learn to catch exceptions yourself if you really want to handle them, or let them crash your app, because that way you will notice and fix problems instead of getting weird bugs. This is actually the whole reason that async and generators don't catch exceptions for you, so they can bomb and slap you hard if you have unhandled fault scenarios in your code, and also let you can with them with the usual methods, with try, catch and crash. This weird soft fail approach isn't doing anybody any service.
It's an not error; it's just unnecessary.
You should be able to do something like `$(".parentDiv").html("&lt;div class='row__inner'&gt;&lt;/div&gt;")`
I posted the info wrong. Here it is correct: Create a function called countingByTwo that takes in a number as an argument, and then uses that number to dictate how many times the computer will count by two. Your function should run a for loop and should loop as many times as the number argument, and should do the following: For each loop, add two to the startingNum variable. For each loop, log the value of startingNum to the developer console. After all the loops (but still in the function), return startingNum. Here is my code: var startingNum = 0; // Create a function that uses the above variable to count by twos. function countingByTwo (num) { for (i=0;i&lt;num; i+=2){ startingNum.push(i); console.log(startingNum); } return startingNum; } console.log(countingByTwo(10)) 
Here is the corrected question and my progress: I posted the info wrong. Here it is correct: Create a function called countingByTwo that takes in a number as an argument, and then uses that number to dictate how many times the computer will count by two. Your function should run a for loop and should loop as many times as the number argument, and should do the following: For each loop, add two to the startingNum variable. For each loop, log the value of startingNum to the developer console. After all the loops (but still in the function), return startingNum. Here is my code: var startingNum = 0; // Create a function that uses the above variable to count by twos. function countingByTwo (num) { for (i=0;i&lt;num; i+=2){ startingNum.push(i); console.log(startingNum); } return startingNum; } console.log(countingByTwo(10))
It's a close description, but I wouldn't call it accurate. It describes the how, but not the why. Q: Why would you want to use polymorphism? A: To reduce the amount of conditional branching in your code. Consider a tagged union type - a type consisting of two subtypes, let's say we have "Success" and "Failure" for example - each encompassing both sides of a pretend "Result" type: class Success { constructor(value) { this.value = value; } } class Failure { constructor(value) { this.value = value; } } If we wanted to create a generic `map` function that transforms the value inside a `Result`, but we only want to transform the `Success` and not the `Failure`. We'd have to do a conditional branch, checking with `instanceof` so we can ignore a `Failure`: function map(result, fn) { if (result instanceof Success) { return new Success(fn(result.value)); } return result; } This is a little dirty and slow - a better way would be to implement a `map` method on each type, and just delegate to it in our generic version - so we refactor: class Success { constructor(value) { this.value = value; } map(fn) { return new Success(fn(this.value)); } } class Failure { constructor(value) { this.value = value; } map() { return this; } } function map(result, fn) { return result.map(fn); } This is far better, because there's no conditional logic. We're simply delegating to each type's `map` method. But there is a lot of duplication going on. We can remedy this with *catamorphism*. If we create a base type and allow a simple method for catamorphic transformation (which simply does a dictionary lookup of the subclass type), then we can remove the duplication: class Result { constructor(value) { this.value = value; } cata(typeDictionary) { return typeDictionary[this.constructor.name](this.value); } map(fn) { return this.cata({ Success: value =&gt; new Success(fn(value)), Failure: () =&gt; this }); } } class Success extends Result {} class Failure extends Result {} This is probably the closest you can get to a true tagged union using a JavaScript `class` - it solves our problem of deduplication, removing conditional logic and the generic `map()` function will still work as intended. All that's going on is a simple dictionary lookup - we inspect the type definition passed to `.cata` and match it against the name of the constructor for the value we're calling `.cata` on. Since our dictionary contains functions, we're able to call the function on the value contained inside the correct type, without performing a conditional check. Which means that anywhere we can use a dictionary lookup to replace conditional branching, we're using polymorphism. Something you might be more familiar with is a Redux reducer which contains a conditional `switch` statement: function counterReducer(state = 0, action) { switch (action.type) { case 'Increment': return state + 1; case 'Decrement': return state - 1; default: return state; } } We can remove the amount of branches in the condition by doing a performant dictionary lookup instead: function counterReducer(state = 0, action) { return ({ Increment: state + 1, Decrement: state - 1 })[action.type] || state; } That is essentially polymorphism at play.
Correct me if I'm wrong, but isn't polymorphism in JS like in any other language? There's nothing more to it, nor nothing less. 
Butt hurt incoming : )
Since JavaScript is a duck-typed language, you don't need classes or overriding to get polymorphism. const dog = { sound() { return "bark"; } } const cat = { sound() { return "meow"; } } const cow = { sound() { return "moo"; } } function speak(animal) { console.log(animal.sound()); } speak(dog); speak(cat); speak(cow); The speak function can polymorphically operate on any animal (or anything that makes a sound, really) without any classes or any overriding.
Did they not ask about Coffeescript? I have to imagine it still has a pretty substantial share of users.
Can anyone loan me a blimp thx
Glad to see Vue getting more exposure and recognition. It's such a pleasure to work with. 
ES6 is a library???
do yyou think react or vue will be the winner in the future? 
Coderbyte: https://coderbyte.com/editor/guest:First%20Factorial:JavaScript
No. 
&gt; Rather than a free standing function named fmap, we could instead expect types to implement a method named fmap But then we can't write Functor typeclasses for types we don't own. For example, if we wanted to write `map` for native `Promise`s, we couldn't...
Typescript is great, but it's impossible to encode a Functor typeclass since it doesn't have higher kinded types
i dont see either one completely edging out the other. But i think people that are coming from angular have two avenues to explore now but Vue may be more familiar to them. 
Neither. They are essentially interchangeable today. Something that is not React/Vue will come along that is superior to both and replace the current generation of tools. 
I don't know man, Coffeescript is pretty dead right now https://trends.google.com/trends/explore?q=coffeescript,typescript
How can I add this : &lt;div class="tile card"&gt; &lt;div class="tile__media"&gt; &lt;img class="tile__img" src="image_de_lartiste" alt=""&gt; &lt;/div&gt; &lt;div class="tile__details"&gt; &lt;div class="tile__title"&gt;Nom de l'artiste&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; to an other div ?
I just landed my first 6 figure job, it's gonna be all in Vue
That's awesome! Congrats. Let me know if they need another vue dev ;) 
i'm OOTL here. Isn't Electron made for desktop apps only? Ever since when is there mobile support for Electron?
I'm not seeing the benefits that you're outlining. React isn't 2k, that's only the initial stub that does nothing before including the client plugins like ReactDOM which is 46k. Your point about the ecosystem is true, there is certainly a lot of stuff out there, but this is something that builds up around anything that is popular. I spent most of my time on react-reconciler, trying to understand where this is the breakthrough... however this is very new and would not be part of the initial React. Nevertheless, this looks equivalent to embedding another template literal inside of a template literal, so HyperHTML has this too. So all I'm really seeing here is that React is very complex, gets large when you include nice features, and it's all an overhead. Whereas with HyperHTML, I include 4k of "get this DOM crap out of my face", and all the quirks in DOM simply go away. HyperHTML is very clean, simple, and does precisely one job.
Are there any features that coffeescript offers that es5/6 doesn't? Anyone who wants a more up to date or "future proofed" version of javascript tends to use typescript or es7/8 with babel.
``` $(".someDivClass").html('&lt;div class="tile card"&gt; &lt;div class="tile__media"&gt; &lt;img class="tile__img" src="image_de_lartiste" alt=""&gt; &lt;/div&gt; &lt;div class="tile__details"&gt; &lt;div class="tile__title"&gt;Nom de l'artiste&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;') ```
For Salesforce applications I have. Why?
As per the other person, both is the answer. You'll need the fundamentals of Js (JQuery probably), HTML5, CSS3. Then many of the flavours of these. ES6, SASS, some actual Js framework (vuejs is a great one to start with). And lots of HTML/CSS work. Animations, transitions, mastering flexbox and relative-&gt;absolute positioning. Frontend dev is insanely broad, you'll have to get good at learning many different things from many places.
Oh I’m definitely not a proponent or anything, but it was the Rails default for years. I am sure many stacks still use it.
You could try Exercism: http://exercism.io/tracks/javascript/exercises
Surprised to see quite negative result for Cordova/PhoneGap in mobile category. http://stateofjs.com/2017/mobile/results With very good browser components on both platforms (webview on Android &gt;= 5.0 is Chrome and is kept-up-to-date) I thought that hybrid apps would finally be coming into their own. 
I had a very bad experience with ionic Cordova recently. And still sort of am. Moving an ionic 1 app to ionic 3 is such a pain. 
Yay for Typescript!!! **Uncaught TypeError: Object Typescript may only be an Object or null**
Nice, good idea!
Thanks!
Actually there are workarounds to get higher-kinded types in TypeScript. See [fp-ts](https://github.com/gcanti/fp-ts/blob/master/README.md).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [gcanti/fp-ts/.../**README.md** (master → 9648479)](https://github.com/gcanti/fp-ts/blob/9648479366402dc12edb8020c4df6b38eebc5fee/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
HKTs can be encoded through some hacks https://github.com/gcanti/fp-ts
Observations: * Hardly any (if any) newcomers to the survey results, which indicates to me that the tooling is maturing. Surprises: * I'm surprised that `yarn` only got honorable mentions. * Shocked that `babel` is nowhere to be found in these results. * Everyone's using `async`/`await`, but there's no mention of ES7 anywhere? * Where is `eslint`? * No mention of `lerna` or monorepo structure.
&gt; I don't disagree entirely with your point Can you please give some reasons for that? 
Been using cordova for about 4 years. The most frustrating thing about it is the support for the official plugins keep changing, sometimes they just don't work at all.
&gt;yarn &gt;babel http://stateofjs.com/2017/build-tools/other/ &gt;eslint http://stateofjs.com/2017/other-tools/ No mention of es7 honestly surprised me Lerna seems a bit too small for this survey, it mainly gets used by other projects.
The de facto JavaScript spec for algebraic data types is `fantasy-land`. [Here's the spec for a functor.](https://github.com/fantasyland/fantasy-land#functor) If you want JS examples of functors, [Chapter 8](https://drboolean.gitbooks.io/mostly-adequate-guide/ch8.html) of *Professor Frisby's Mostly Adequate Guide to Functional Programming* has implementations of `Maybe` and `Either`. 
thanks. My is allowing me to train in between projects. I also want to create an app. would learning react js help me with learning react native? 
Reason devs are rich. Who knew?
Yes, definitely. 
The essential goal of the Node.js project is to give a JavaScript-based web and mobile application development system that is current, reliable, steady, faster server tools and network applications.
From my understanding CoffeeScript never really offered any features, it just has a simpler syntax.
Yeah, rails is dead too buddy. I do it at work and wish I wasn't.
I'm confused by the statement "Altough the fight is far from settled, Jest and Enzyme do stand out from the pack with very high satisfaction ratings. " Looking at the graph it seems pretty clear that **Mocha and Jasmine** are the two with the highest satisfaction ratings. Am I just reading the numbers wrong? 
What are your qualifications for dead? Waning interest? If so, then half of the stuff that’s hot today will be dead in 1-2 years.
Things that stood out to me. * The huge number of people using Vue in China. The circle is almost as big as React! Why is that? * The huge number of people that recommended lodash under utility libraries. I need to look into lodash it seems. * The number of developers recommending VS Code. I've heard of it, but I've never seen it. I use IntelliJ/Webstorm right now, but maybe I should take a look at VS Code if I ever get tired of my current development environment.
Thanks! MIT
Who does this advantage? Not dismissing, just honestly curious who benefits from these specifications?
I thought it was great code. I personally like spaces in the spreads (gotta complain about something lol). But yeah, looks great.
many thanks! I've already got up and will try to find out the issue :)
Wes Bos got quite the plug in the recommended resources.
Vue got an advantage because it's awesome and also because of the react license hype. Lodash is important in every nodejs development. I've never used it, I hope to sometimes soon. VS Code is the boss, highly recommended 
Oh, you should see it when it hits an ATH (all time high). All of a sudden, 20-30 of the hidenburgs would appear. Makes you intuitively understand how small we are compared to the whales... and the financial transactions that happen quietly
Why is Lodash important in every node.js development?
It caught on big time in China. It’s interesting how Evan You grew influence in the JS community there.
I correct myself, it's probably not as important with the use of typescript or ES6. But I believe it has some good that you can read about (here)[https://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting] 
Not who you responded to but I look at a lot of lodash as "this is the stuff I want if I designed a library for myself." Except it's well tested, tons of eyes on it, and a bonus is you can import just the function you need instead of using the entire library... Oh and better than I have. I can write quick versions of most of the functions there, and so can the majority of devs. But there's is always solving edge cases the will throw most devs (including me) into the Google rabbit hole. Plus dropping it in for a replacement for underscore gives immediate speed improvements... Honestly I consider it one of my first go-to libraries. I will say though, Typescript is making it less important.
vue all the way.
As in Elixir and Phoenix are the rails and Ruby of 2017. And yes, by 2020 they will be irrelevant. That's the life of a web developer.
A bunch of the big tech companies in China use Vue, and Evan You (creator of Vue) is Chinese(/of Chinese descent, can't remember which) and is connected to the tech community there. I think it's like how React caught on in a lot of places and is now the goto for a lot of people because it's what they're familiar with now. Highly recommend trying out Vue if you haven't before, it's really great to use.
memory
Satisfaction rating would be calculated by (I've USED it before, and WOULD use it again)/(I've USED it before). Not (I've USED it before)/total, which is what you might be seeing with the colors. By that calculation Jest has ~94% satisfaction rate and Jasmine has ~80%.
Wtf does typescript and es6 have to do with lodash? Absoloutly no relation.. one is a code specification, the other is a library. Is this sub just a bunch of 18 years olds studying CS?
Lodash has a lot of helper functions, everything it does can be done in vanilla js (and a lot became obsolete with es6) but it is very practical. I was 'anti lodash' for a long time because people were using it for one thing and you end up with a pretty big lib floating around, now we use 'lodash-es' that allows cherry picking so you just bundle the ones you need and that's pretty awesome. I am a complete VS code fan, I went from "no way microsoft" to "this is freaking awesome" and every monthly update gets me excited like a little kid. I can do everything in vs code, integrated terminal, integrated git workflow, integrated debugging tools... I have addons to make fake API calls so it replaced postman too
Er... Mate? You're setting the source of the script to a random non-existent url.
https://eugenechien.neocities.org/
You're not getting it
yup, im not lol elaborate please
gats.io is what i want to modify
&gt;now we use 'lodash-es' that allows cherry picking so you just bundle the ones you need I don't know if this is the same thing or if lodash-es6 is something specific, but if I did "npm install lodash.isarray", it would bundle half of the entire lodash library because the inner dependency tree was so complex. Yes, 100 kB to check if something is an array.
Most companies don’t completely rebuild their stack every 3 years. And if they do, they’re probably just chasing the hot new thing. There are a lot of great developments being made in many different areas. And a lot of those new developments suggest or require using new tools. E.g. Go is incredibly popular for many services that heavily depend on multi-threading or benefit from low-level control. React and Vue are great for building composable component-based front-ends for highly interactive and real-time-varying user interfaces. But to suggest that most companies are just going to immediately shift seems unlikely. Giants like AirBnB and Dropbox are going to continue using Ruby and Python respectively for huge chunks of their applications. I’m sure as their services continue to expand over time they’ll reach for these more applicable and newer tools (they’re already doing it!). But for tons of projects, Rails will continue to be relevant. Perhaps not as relevant as it was in its heyday, but certainly still practical in its proper use cases. 
Such low numbers for moment as a utility library - I suppose some people luck out and don't have to deal with dates.
So sorry! Not sure what happened last week ;)
Very cool project! Maybe it'd be overkill in your case since it's a tiny app but I'd definitely break down your store file into smaller files. 
I can edit this with a more comprehensive description/how-to, but about to go to sleep. Basically, this would be `@your_npm_name/your_package_name`. It's a recent feature on npm 5, and prevents name conflicts, eg you could create `@johnsmith/jquery` if you wanted to. I actually haven't used this feature yet myself.
Sort of... in the same way that ES6 didn’t add any features (because _technically_ most/all of the features could be implemented already in a more verbose way). CoffeeScript had a class syntax and “fat arrow” functions before ES6 introduced it to JavaScript, for example. 
Thanks! Yes - will work on it this weekend, together with making the store not have random number side effects!
Cool! I'll check it out!
*per se
http://prntscr.com/hmuib8
Yeah it's better to install the whole lodash/lodash-es and do: import isArray from 'lodash-es/isArray' Ideally you would just use named-exports and let tree-shaking handle it, but the result isn't great, which is why something like [babel-plugin-lodash](https://github.com/lodash/babel-plugin-lodash) exists.
A $5m transaction happened while I was using it.
Keep in mind the `class` syntax in modern JS is still prototypal inheritance under the hood, it's 'just' a different syntax for the same thing. &gt;Do you know if Typescript transpiles this to a prototypal implementation for maximum browser compatibility? That depends on what the `target` you've given your TS compiler (through a flag or a `tsconfig.json`) is. If it's `ES5` or older, then yes, it'll compile it to the old syntax because it has to.
What addons do you have to replace postman?
China is big on "homegrown" alternatives in general.
People prefer other libraries like Luxon
The backend "Other Answers" would suggest otherwise, in fact it's higher than PHP and Java there. I just think most Rails devs dropped Coffeescript in favor of ES6+ (or maybe Typescript). Plus backend devs in non-JS languages are probably less likely to participate in a survey about JS.
The baseline is 2kb. Adding a dom reconciler isn't much more. Aliasing React for instance to preact-compat (which has a very slim dom reconciler) and you're at 4.5kb all included. react-dom is a little heavier (react+ react-dom = 29kb) because it ships browser shims and repools events. A lighter reconciler would cut that down. The reconciler is maybe the most important aspect of react. This is what allows it to render everywhere. React-native was just the first out. It steadily produces renderers now, some of them even made by [platform vendors](https://github.com/Microsoft/react-native-windows). shell consoles: https://github.com/Yomguithereal/react-blessed word: https://github.com/nitin42/redocx pdf: https://github.com/diegomura/react-pdf samplers: https://twitter.com/GabeRicard/status/911989894267973633 mobile: https://facebook.github.io/react-native/ 3d: https://github.com/Izzimach/react-three windows: https://github.com/Microsoft/react-native-windows macos: https://github.com/ptmt/react-native-macos sketchapp: http://airbnb.io/react-sketchapp/ keynote: https://twitter.com/nishb1/status/913744410537537536 VR: https://facebook.github.io/react-vr/ hardware: https://github.com/iamdustan/react-hardware These are only a couple. But the eco system still works on either one. You could render in the web, VR or whatever, but still use react-motion to move things around, etc. As for React itself. It is not complex. It is perhaps even the least complex. The cognitive overhead is way smaller than hyperHTML for instance. 
It has to compile to JS at the end of the day. List comprehensions are one of the things I liked that never made it into ES.
JavaScript doesn't really work the way you're trying to write it, or at least not fully, but you're close. I'm guessing that all the show_bomb etc. are global variables, so what you could do is the following: const getPlayer = player =&gt; ({ name: player.name, dead: player.dead, team: player.team, id: player.id, flag: show_flag ? player.flag : null, bomb: show_bomb ? player.bomb : null, ... }) Be aware that the above is using modern JavaScript features like arrow functions and const, and thus doesn't work in browsers that are not compatible with those things. 
Depends on what you mean by "feature", because it has to compile to JS at the end of the day. List comprehensions are one of the things I liked that never made it into ES.
I use [Rest Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client), our CTO (who does the backend) picked it up and set it all up too (I don't know if it's a pain to do or not). He just had to show me how to use it, basically you write your mock requests in a file then you can hover the POST with your mouse and a 'send request' pops up, pretty awesome.
All of this is fixed with the '-es' package, We have a 8kb or so lodash package in our prod bundle with just the 2 or 3 helpers we need.
That sounds very nice. Might just give it a go again!
If you had all of your "show" booleans in one object then you could iterate over them, filtering only those that are true and then assign them to the player's equivalent var show = { flag: false, bomb: true, tagpro: false, grip: true, speed: false, isHonking: false } function getPlayer(player) { var state = { name: player.name, dead: player.dead, team: player.team, id: player.id, }; Object.keys(show) .filter(item =&gt; show[item]) .forEach(item =&gt; state[item] = player[item]) return state; } 
Project Euler, maybe. But be aware that the difficulty may be a bit higher than FizzBuzz.
There are no "subclasses" in JS. There's only the prototype chain.
Something like this? const showFlags = ['flag', 'bomb'] const getPlayer = ({ name, dead, team, id, ...other }) =&gt; { return { name, dead, team, id, ...showFlags.map(flag =&gt; other[flag]) } }
You can use the spread operator and the &amp;&amp; operator to conditionally add properties to the object: function getPlayer(player) { return { name: player.name, dead: player.dead, team: player.team, id: player.id, ...show_flag &amp;&amp; {flag: player.flag}, }; }
`class Car extends Vehicle` also works in ES6. Of course TS transpiles to prototypal inheritance, it has to, that's what JS uses. Don't be afraid of it, learn to embrace it!
In the end no matter what it transpiles to a prototypal model, ES6 hasn't really changed that except for providing some syntactic sugar
&gt; Js people can be kinda snobby no more and no less than any other developer, what are you on about??!?
You worry too much about unnecessary shit. If you really think it's _that_ important, say "Prototypical or, as some say, 'Prototypal'" (or vice versa) and forget about it
Haha, thanks!
Good point. I didn't consider the accessibility before. I can enhance this feature.
I think WAI-ARIA is good for people with disabilities. Some government, organizations' websites would support it.
We've been using date-fns for what we we're using moment for, especially as moment does not bundle up well last time I checked.
Yup. That too. A friend of mine recommended it ober momentjs. 
People moved on to date-fns or luxon, moment is 300kb+ and is not actively developed anymore.
Might be because Facebook is blocked by the Great Firewall
I just started learning it. I like it a lot.
See https://github.com/eslint/eslint/issues/9695 for discussion on this eslint rule.
I generally agree but hardly anyone is using Elixir/Phoenix. At least that I've heard of anyways, I'm not sure if there are any metrics out there but Elixir is still quite underground, though it looks like it's getting more traction by the month. Sites like Discord and Pinterest use it, but not many others, and Discord only uses Elixir for their back end. 
Do Advent of Code!!!!!!! Lots of bite-size problems that will get you thinking and whose solutions will definitely make you a better developer. There's a subreddit for it: /r/adventofcode
As far as I know, it's actually impossible to do `map` for native `Promise`s. Because `map` nececitates the posibility of having `Promise&lt;Promise&lt;Foo&gt;&gt;`, yet the built in promises automatically collapses that into `Promise&lt;Foo&gt;`. This is probably the biggest issue I have with JS promises.
Hi /u/samuelalake, if you don't get any replies, you might want to try /r/learnjavascript also. Good luck!
Thank you, this is what I was looking for, it's clear and doesn't leave unnecessary *null*s or *undefined*s. I guess that makes me a perfectionist
An interesting article, but when I click on his link to download Chrome 41 for testing, it takes me to a directory for *Chromium* that contains multiple files with no clear correct choice. In any case, I've tried both `chrome-win32.zip` and `mini_installer.exe`, and both *did* get me Chromium 41.0.2272.0. However, on opening, the browser automatically installs an extension McAfee WebAdvisor. I would just uninstall this without complaint (although it is really dubious), but attempting to uninstall or even view the description of the extension on chrome://extensions causes the browser to totally freeze. It just hangs, doesn't crash. The entire window becomes completely unresponsive, and the only way to close it is via task manager. Any clue on what's going on here?
Yep. That is my qualification for dead. You have to move on.
Proxies can't be implemented in a more verbose way.
*sigh* Please stop assuming you know what I do or do not know. I absolutely can’t stand that. Titles like this scream, “I need to show my intellectual superiority by insulting my reader!” I’m not going to read the article just because of the title, but I’m pretty sure your title is wrong, and I know indexing perfectly. I would have had read it anyway, if your title was not as derogatory, because I know I don’t know everything, and there’s a chance I could learn something, and I generally just like to appreciate people’s work, and maybe I can give positive feedback. But now? No, thanks.
If you're paying for Webstorm and can still afford it, I would always go for that instead of VSC. I used PHPStorm and switched to VSC when I couldn't afford the license, it's a great program to use, but doesn't come close to any IntelliJ program.
I agree, title is super-clickbait. I found it weird, given that article actually has OC and not your typical "10 tricks with CSS that you just HAVE to have under your belt! [PHOTO] [VIDEO]" type of article with shitty titles for collecting ad clicks. I guess the author was trying his best to draw people to it, but overdid it?
People use VSC because it's free. It cannot match Webstorm. If you already own WS, worry not, _they_ are the ones missing on WS by using VSC.
 Cannot read property id of undefined.
Angular is performing terribly. Shame. I'd like to see the breakdown of frameworks, but only for people who used at least two frameworks regularly. If you're using only framework XXX for a long time, of course you're going to keep using it. Because you're not even aware of alternatives. Then we'd see REAL numbers. This is like voting on scale without knowing what's the scale.
Thank you for your answer! I prefer the first option because I don't want the user to loose something of their saved data. I was thinking about the following approach: I take the password and build a secret key with pbkdf2. Then i will use this secret key to encrypt the private key of the key pair. For a better UX i would like to give the user some feedback, if the entered password is the right one. Since I don't know the password, I would like to hash the password client-side the first time it is entered and store this hash together with the key pair and transmit it on follow up login attempts to provide this kind of validation. Would this be bad practice? (I know, it will allow some kind of brute-force attacks, because the server now has as well the private key as some kind of information how to decrypt the key... however, if I choose an interval for the hash process that is long enough, it should be unpractical to do so?!)
JavaScript has "prototypal inheritance." A class which inherits from another class is referred to as a "subclass." 
Plenty of people care about it. Honestly speaking if you have never had to care about accessibility (or internationalization, or localization) you simply haven't worked on a project large enough for those things to matter.
Also it's not only disabled users who use screen readers, use their keyboards (tab key) to navigate sites, etc.
My buddy said it was interesting and nothing like what I thought it was going to be, so I probably would have learned something. Still, it just bugs me when people assume things about me. To me, titles like this make me feel like they’re saying, “You’re an idiot, and I’m a genius.” There’s no need for that. Hopefully this trend will die soon.
Are you asking for someone else do a job for you for free that you are getting paid for ?
Here's some hints: document.querySelectorAll, Array.from, .click, .forEach
I'm actually happy with Angular 5 with a redux architecture. It has everything built-in for an enterprise application.
So you would just do the following? ` import { uniqBy } from 'lodash-es' ` 
Just what I thought also. Exact combination.
Yarn doesn't have many advantages over npm since npm 5.
Thanks. I'm on my way to r/learnjavascript right now.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
It's also because the English and Chinese documentation are almost always in parity!
Cordova is absolute garbage. Very outdated, sometimes incompatibile. Unless you're fine with writing plugins in Java/Swift from scratch I wouldn't recommend it.
Yeah Vue is great. 
I'll assume that I'm the butt of a joke for asking a stupid question in a stupid way. $10 PayPal reward to anyone who is willing to provide a solution.
Ah yeah, I wondered if that might be the case but I wasn't sure. That definitely has to make a lot of difference.
You think chrome could do something similar so Electron apps weren't so slow to start?
WebStorm doesn't even auto complete the lifecycle methods in a React class component. 
It's still way faster though. 
$15? No no no…
ES6 is commonly used as an umbrella term to also include ES versions that came after, since most of the new stuff came out in ES6. I personally say ES6+ if I remember to.
May need to check that out.... does it do time zones and date formatting with locales properly? I.e. correctly ordered date parts?
Stupid typo.
Canvas.