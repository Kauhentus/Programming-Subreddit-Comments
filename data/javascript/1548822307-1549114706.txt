It sounds like you're starting down the right path but there's more to becoming a professional developer than learning a language. Udemy and online sources are more than sufficient for the language part. &amp;#x200B; The other parts you'll need are similar to going deeper in learning a foreign language: 1) Learn the culture and idioms. i.e. pick a handful of GitHub JavaScript repos, learn to read (not just write) and really understand a body of code. Maybe even contribute changes to a repo. 2) Go live in the country i.e. pick a problem you think you can solve (even a little one), build a web page, app or library to solve the problem, document it and publish it somewhere (GitHub, a blog, wherever). 3) Become a "translator" for someone else i.e. ask friends, neighbors, family for a problem to solve for them and build the solution for them as if they'd hired you professionally. &amp;#x200B; \#3 is kind of critical to anyone wanting to bootstrap a development career. Anyone thinking about hiring you will want to know that you've done more than learn something fed to you in a course or passed a skill exam. They'll want to know that you've built something complete and functional, applied design thinking, and overcome problems, etc. That's why building something for someone else is essential. If you treat the project seriously and pseudo-formally, acting as if your end-user is your client/boss and respecting a deadline, the project will not only be something you can put on your resume but give you real substance to talk about in a phone interview. I've seen this strategy work for degree-less people I've mentored and I've hired self-taught developers (over people with Master degrees) who showed exactly this kind of initiative, enthusiasm and hard-won knowledge. I'm sure you'll get there. &amp;#x200B; &amp;#x200B;
Wow, thank you for this awesome reply. Firstly, how you wrote that connected so well with me and was just super understandable and relatable so thank you. Also thank you for giving me ideas of projects that I will be able to preform to better myself and make myself a better prospect. One project I had in mind was creating myself a website, I fairly talented photographer (I test with the modeling agencies where I live) but this isn’t enough to sustain the kind of life I’d like for myself. But I am definitely going to get on git hub and see what I am able to do there after I learned the language. I am also planning on learning REACT mostly because of a person I know that is helping me, is kind of gearing me up to work for his company. Is this a fairly popular frame work to learn?
[http://www.shrugguy.com/](http://www.shrugguy.com/)
Not sure what you mean but any line is sugar too me, so I share!
This is for you bro: freecodecamp.org
IMHO the best way to accomplish this is to maintain a render Array of the elements to be drawn on the screen,then in the draw function redraw the array with the elements for your custom graphic appropriately manipulated ie. position updated.
u/TyMeador Definitely reach out to Edgar, he does great work! PS: u/ItchySensation Sent you a PM, see you around :)
Hitch your ride to another promising wagon to start, one with the need for secure transactions and horizontal scalability. I mean you can do it on your own first, but most underestimate the capital, time and resources needed to bring an MVP to market. Finding ways to minimize cost on the way series a is key.
what complexity? Can you elaborate?
Are you planning on releasing the source code to the public to contribute to everyone. Looking at the cover of your book, it might be very interesting for a lot of people!
Slicc!!! What lib you used for the fade animation while navigating between screens? 
That would be amazing. 
Are you writing native CSS? Or using a CSS preprocessor? I find it a lot more.. bearable using one.
If I'm not mistaken RN allows you to do both ios and Android app, why not release also the android version? Seems amazing though! Did you document some kind of your journey in a blog or something? E.g. the maps features (routing etc.) is interesting..
How big is your node modules?
Yes, but there are tons of optimizations and differences that need to be accounted for. Such as the UI design relying on glowing shadows for interactive elements that aren’t supported on android, and multiple components that are iOS Native Components need to be switched out for Android ones. No I did not because I really wanted to rush it to market, and now I also have to deal with cleaning up spaghetti code and adding comments lol. I’m going to begin documenting from now on though, you can keep up on /r/officialtourapp
A custom transition animation for react-navigation.
No we aren’t sorry, it’s a startup. But I am looking to open source a lot of the components that I made for it. I’ll post them here and on /r/officialtourapp soon. 
I see things in both your perspective and theirs. Ive liked tutorials, especially written ones, because I can learn concepts while typing out code to solidify that knowledge. But past a certain point, tutorials can only teach you things that are limited to the scope of the tutorial project, so it becomes a waste trying to fit it to your needs. Nowadays, time is better spent reading docs and design concepts. My lazy reader habbit naturally wants easily digestible content though, so I tend to extract what I can from it, but I learn far more from just exploring well-written documentation. 
It's not realistic to become fluent javascript programmer through online courses. It's not realistic to become a 'fluent' programmer through online courses in general to begin with. It's not realistic to become a really good programmer by working as freelancer even if you're doing it for years. That being said, you don't have to be a very good programmer to land a job where you could become one through work experience. You'll do plenty of research and studying during the time too. Don't make a mistake, don't opt for freelancing, small agencies or half baked start ups. Look for corporate / enterprise. I'm lazy to go through the reasons, here's Frederick, really given all the 'lean to code crash course' bs on youtube is one of the guys who's actually from the industry sharing experience, I wish I had such guy on my radar when I was learning / searching for the job: [https://www.youtube.com/watch?v=kSirn\_2mf6U](https://www.youtube.com/watch?v=kSirn_2mf6U) Generally, corporate will have good proceedures in place and codified practices. They will also have people who's priority is to teach / coach newbies as the planning is more strategic, unline agencies / half baked start ups who are beholdant to investors / third party clients. And you as a newbie will be expected to preform right away and won't be seen as a priority. Good luck! 
Impressive concept!!
Happy Cake Day!
This post nailed the thread. Everything else is just background noise.
No there is win update i think its in insiders for now 
The eco system has stabilized in over half a decade now. If framework disappears is no much different than your colleague who wrote code and left the job disappears. &gt; How is an ecosystem this diverse supposed to survive the test of time? It's not that diverse. Everyone are embracing React like pattern in developing UI's. Even web assembly based frameworks essentially do the same. Web Standards embraced web components. Even if specific technology disappears supposedly, the patterns will continue to propagate. Currently React is the enterprise standard. And it's been like that for a very long time.
Use onclick event to reroute them
The ecosystem has been mainly React, Vue, Angular for a long time from my understanding, and those aren't that likely to disappear soon
Not op, but codecademy.com has 2 great interactive react courses.
So good. I am thinking about re building my app with naked react-navigation instead of react-native-router-flux only for that. 
Awesome excellent work
No fucking operator overloads.
This is all nonsense. Frameworks have established stability that's even hard to find on the desktop, and they're being used now to create not only web apps, but desktop and mobile applications, because native toolkits have started to rot. Take React for instance, which is the biggest framework, it's been stable for 6 years now. It did this by establishing a paradigm, it can go tomorrow and over the next decade we'll still use its principles. Frameworks give you unprecedented freedom of expression. It's funny to me that when i saw your post just a line above [was this one](https://www.reddit.com/r/javascript/comments/al2vxa/after_learning_js_more_than_a_year_ago_and/). When i started out, doing something like that in a year was not possible. And over the next decade even thinking about being able to one day share the same code cross platform in a viable way, where components are self sufficient and run everyone, it would have seemed like a joke. 
Isn't Minecraft Java?
Yeah
Frameworks like React have solved this once and for all. There's no distinction between apps and websites any longer. Both are composed of components. These component can come from the server through SSR, locally, a router, lazy loaded through the import() statement, etc. It just makes no sense any longer introducing arbitrary solutions, fishing out dom nodes through query selectors.
Nice writeup, it was super interesting :) 
What do you mean?
If you want to improve your UI/UX design skills, browse dribbble often and try giving design blogs a read like https://uxplanet.org.
600.3 MB and growing.
Yes it is, doing so I think polishes your skills and allows you to release stuff on android and consequently, react web too.
Funny thing, I'm working my ass off to get into college and do AI theory lmao.
Java and JavaScript are two totally different programming languages. Minecraft is made with Java then the mod API is adapted to Java. However, I think some mods exist that offer you a mod API in JavaScript and they will be able to translate it into Java.
[removed]
Yes I do, started out doing car and product design when I was 15 and UI/UX when I was 17. Now almost 19.
React Native, Redux, Firebase.
Most of them are custom made, the only ones that use a library are the fade-in/out of buttons and stuff using [react-native-animatable](https://github.com/oblador/react-native-animatable).
react-navigation, super smooth and easy to learn api too.
Watch out for when we launch the full release on the app store. Hotel booking coming next week, and flights by the end of Feb. I learned JS using [Treehouse's full stack js track](https://teamtreehouse.com/tracks/full-stack-javascript).
I learned JS with[Treehouse's full stack js](https://teamtreehouse.com/tracks/full-stack-javascript) course a while back. React seemed easier and simpler to start off with, Angular seemed to have a higher barrier of entry at the time. I never had a job, this is my own startup I cofounded.
Damn, if that's true then I might make Tour's webapp with it. Looking to start work on it around the same time as Android.
Man you’re a professional now. To get into AI you’d have to spend 3 years doing BS classes(engineering physics and calculus and social science and humanities) until your first class in AI. It’s up to you, but personally I would just self teach AI theory and continue what you’re doing now. Idk, I don’t feel like the time or money I’ve invested into college has really served me anything. Ive learned more in 6 months on Team Treehouse than 3 years of CS has taught me. 
Nope, I had a prior background in UI/UX before I started software development. My advice is to browse Dribbble often and even steal some of the designs on there. Read through UI/UX blogs too, they helped me alot when I was starting out: Uxplanet.org
Native anims, react-native-animatable, and some clever illusions lol
I've updated the guide based on your feedback: https://github.com/ehmicky/portable-node-guide/commit/a700ce74d8dfcc8d7634015647032022a30a4169
JS GOD. :))
Is there an example of usage? I've never used a search engine before. If let's say I use MongoDB, should I first query MongoDB to get some results and then search inside? Or should I use it another way? Curious if one of you has a demo app using this search engine to see a real-world example
[removed]
One word. AWESOME
I’m basically doing it because I want to do research and specialize directly in AI. I’m also not a US resident and would need a bachelor’s degree to even get a work visa. In the end I’ll probably teach everything myself two years before my first class in AI lol. 
I've started using less, and it does make the css experience a tad bit more pleasant! Don't think I've explored all of less's functionality, though, so I guess I have a lot to look forward to as far as CSS goes :)!
We make a commission from flights and hotels booked via the app. It is not an on-top fee, the commission is included in the price and taken from the hotel/airline though, not from the user, the price will be kept the same as any other site out there. We want to keep the app completely free on the app store and advertisement free too. I absolutely hate ads with a passion and think it completely ruins a user experience.
Should I hurt ur feelings like ur username is asking me to? /s Anyways, probably immense practice and free time. Also the fact that I am never satisfied with stuff and love redoing things from scratch.
Haven't sent it to app review for the app store yet, this is only testflight beta.
Nope, but I'm looking to make a ton of the components open source and maybe code some libraries too.
`ifrm` is from your own code. It should be whatever variable name you used to contain the reference to the IFRAME element.
Just a GENIUS! Nice one!
You have to start solving problems. Do a project, guides will help you but most of the time you have to solve certain problems by yourself.
Shouldn't it rather be ugly duckling childhood friend that grew up into a swan?
Amazing!! you have proved that experience would not be counted on years. what have you used for the animation? react-spring, motion or anything else? and for drag-drop also?
Thanks a ton!
Most of the animations are hand-made using plain Animated.Values and interpolations based on the scrollOffset. Some of the fade animations use react-native-animatable. Drag drop is all hand coded from scratch too.
In pure blunt honesty, rich parents. They invested in this startup and paying for everything. Its an advantage that most people sadly don't have though. I have one friend who does react native too but is from rural Thailand, he has to take crappy freelance jobs to be able to make ends meet at the moment.
Yep, react, styled-components, and also momentjs.
That's actually in our road map! We're currently on 0.5.4 but 0.7.0 will include travel options between activities.
Isn't that the other way round, I think I need to get on your level lol
It's a startup I'm doing with /u/2001kraft actually, so it's all private. I'm looking to open-source some components and make some things into open-source libraries soon. We're going to look to hire some people to help us with getting it on Android and possibly a webapp after I get it out on the iOS App store.
Thanks for the heads up, we'll be on our game and look our for when you launch. /s Just joking, I feel that most of the solutions out there have crap UX, which led me to make this. If you ever start yours out feel free to ask me anything.
Instead of divs and html elements, react native uses native `View` and `Text` components along with inline style. Other than that, it's very similar.
I started my coding journey exactly 2 years ago (21.01.2017) and got into RN a year ago. Finally, I have released my third mobile app called Mood Pixel. ​ I challenged myself to code it in under 2 weeks and ended up coding the app in 10 days, including the second update v1.1. I would love to get any feedback possible on the design and features I could implement. The app is 100% local so no API request is ever made and the data is just saved locally on your phone. ​ The app consists in tracking your mood over time (you get daily notification reminders) and helps you get insight into how you feel throughout time. I know there are apps like these out there, I just really did not like any of the designs out there. ​ iOS: https://itunes.apple.com/us/app/mood-pixel/id1450736806?ls=1&amp;mt=8 Android: https://play.google.com/store/apps/details?id=com.moodpixel Btw today I'm launching v1.2 that adds a Journal Mode, better layout for iPhone X and phones w notches, different color palettes. Resources used: ​ Built on the React/ReactNative framework as well as the following amazing libraries ​ "moment": "2.23.0", -----&gt; To handle dates. A lot of dates in the app. "react": "16.6.3", "react-native": "0.57.8", "react-native-calendar-picker": "5.22.0", This calendar appears when you press Pick-a-Date "react-native-fbsdk": "0.8.0", -----&gt; For the upcoming release I am integrating Facebook Login (only if you want) to backup your data. "react-native-firebase": "5.2.0", ------&gt; To store said data as a backup. Also, I needed RNFB for the scheduled notifications. Their library is pretty up to date and is being maintained. "react-native-linear-gradient": "2.5.3", -----&gt; Gradient colors. "react-native-router-flux": "4.0.6", ------&gt; Manage navigation in the app. "react-native-splash-screen": "3.1.1", ------&gt; Splash Screen duh "react-native-svg": "9.0.0", ------&gt; Added this lib but I havent implemented it yet. Its for the upcoming mood-charts "react-native-swiper": "1.5.14", ------&gt; To make the swipe effect when inputing emotions and moods. "react-native-vector-icons": "6.1.0", --------&gt; Icons "react-native-video": "4.3.1", ------&gt; Background "react-redux": "6.0.0", -------&gt; Handle App State "redux": "4.0.1", "redux-persist": "5.10.0", ---------&gt; Persist the app state (i.e.your data in your Phone using AsyncStorage) "redux-thunk": "2.3.0" --------&gt; Implemented for the async dispatched that are coming with the next release. 
And here was I thinking Java was shorthand for JavaScript. Welp.
How did you do the animations? Just Animated API?
Nice!!
thanks
You're right, somehow it's trending now.
Well, you're wrong about how it works.
Better than useless replies on Reddit and HN right? lmao
Not fucking bad aye. Nice work!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Hello in the spirit of equality can you also draw JavaScript but it's a ripped dude hanging serious dong? 
Smooth af!
Actually didn't know about that, that's amazing. Thank you very much, I will definitely use this function!!
Great job on this.. Kudos to your work. Fyi, I am learning JS as well. 
What do you mean by custom made? Is it using native modules? Or the React Native Animated API
Hey there! If you like programming in JavaScript as a hobby then you're probably going to do really well. Best advice I can give you is to learn by any means (udemy is fine!) but most importantly in my opinion: do projects! Not for your resume, not for monetary gain, just for fun! You'll encounter the same obstacles in JavaScript that you will encounter in the real world as well. This is for me, the best way to start your programming career. Best of luck to you!
Sorry, build from scratch using the React Native Animated API.
Looks pretty good, will try this out! I love lightweight tools :-) kudo's for the name by the way, FAT while it's lightweight, made me giggle hehe.
Sadly, I found it looking through the settings trying to figure out if I had accidentally clicked something, because document.addEventListener('resize'...) wasn't working. After looking through all the settings and getting frustrated, I finally realized it's window.addEventListener('resize'...). I felt not smart after that, but finding a built in fps counter was worth it. Cheers! 
Thank you very much! And the best place to find these projects would be github? Or can they be self driven? A couple of things I want to do is, make a website for myself and then also a mobile app for people to share photos.
Are you high? Of course a lot of frameworks exist. Only a handful ever gained any real traction with developers. The fact that countless others exist does not dilute the quality or popularity of the few that actually see heavy use in production. No ecosystem has ever failed because developers built too much stuff for it. M
How do you make the animations? It’s amazing!
Oh my god. That’s awesome. 
Have you had mentor? It looks amazing and nearly impossible to make as beginner.
I can feel you
Hey y'all, what do you use to handle drag and other user interaction operations with anime? (for eg: card drag but only applied to X direction) 
[removed]
hmm... when I use it with javascript itopens up another copy of the same file as well as the doc in the second window. the newly opened version of the file is focused on. When I tried in JSX nothing happened. Looks promising, something I could see myself using. 
Not sure if this will be seen. How did you design the UI for each screen? I hate designing. 
This is awesome OP! I would totally use this! When you release it I’d love to know where to get it. Are you going to release as a mobile web app or a native app?
It'll be released as a iOS native and Android native with a webapp soon after. You can follow us on our social media, you can find them here on ProductHunt: [https://www.producthunt.com/posts/tour-by-monos-digital](https://www.producthunt.com/posts/tour-by-monos-digital) or on /r/officialtourapp
This is great! I will use this probably every day!
The third argument to XMLHttpRequest.open sets whether it's async or blocking. Since the code sets it to false, it's blocking.
Awesome thanks for sharing and keep up the excellent work!
This is the correct link: https://www.youtube.com/watch?v=uMuYaES4W3o
Very nice! What would you say was the most difficult part of using the Animated API? I would suggest a blog post on the ups and downs of doing Animations for RN, whenever you get a chance :)
Any way to add page caching with an expiration date? F'n awesome btw.
Just sent you a DM about a question I have 
Agreed. That's exactly how I use tutorials. For example, I've been learning angular and their intro tutorial is fantastic for getting a grasp of the framework. After that, when you reference the docs, it builds on that. Not everything is as elegant, but good docs should be all you ever need, whereas a tutorial should be a good intro to convey the idea and get you interested in learning it, at least for me. Thanks for the resources! I'll check them out when I have a minute. I'd love to step up my UI/UX game. 
*triple dipping, he posted it on both react subs lol
For me they are always self driven but I recommend trying both contributing to GitHub repositories and working on your own projects. These projects seem pretty cool, I suggest start working on them as soon as you can :-)
You're welcome. &amp;#x200B; React is good. Geekflare says these are the [10 Best JavaScript Frameworks](https://geekflare.com/best-javascript-frameworks/) and my opinion of a couple: 1. **AngularJS** \- Most likely to appear in job listings 2. React 3. Ember.js 4. **Vue.js** \- My choice for personal projects. As powerful as Angular (IMHO) but much cleaner, easier 5. Backbone.js 6. Mithril.js 7. Polymer.js 8. **Node.js** \- Becoming core technology for building web app back-ends and command-line tools in minutes. 9. Meteor.js 10. Aurelia Even if you don't develop anything *in* Node, you won't be able avoid *using* Node (or being asked about it in interviews) because it is the basis for most production JavaScript tool chains like Babel (compiler), WebPack (packager), Mocha (testing), and many more.
Awesome stuff, it's very inspirational. Hope you manage to go on and launch a start-up from this!
with the help from other forum, i have changed the code and it seems to be working as expected. setTimout call the function recursively hence polling every 2 milliseconds. const addr = "http://localhost:8080/action" function poll() { (async () =&gt; { const response = await fetch(addr) const data = await response.json() console.log(data) setTimeout(poll, 2000) })() } poll();
i have changed the code to use fetch instead. 
I wanna learn react share some code please
https://github.com/prettier/prettier-eslint
&gt;shorcuts-js Hi, I'm aware of this (also found out about this the hard way), I will be finetuning the implementation over time.
2000 is in milliseconds so you're polling every two seconds.
I think it can be done, will probably do it in future updates
seems bug, will try to fix it asap.
Cool idea but just because it’s normal to use UpperCamelCase in C# doesn’t mean you should use it in a JavaScript library.
Thank you for that list. So currently I am using node.js on my mac to run the code through terminal, but haven't gotten in to it any further than that. Still not even sure what the frameworks do, i've just been told i need to learn them so I have them on my list.
This pisses me off. At work we use yarn but we also use an older node version because that's what our projects are on. Using --without-node is literally how we installed yarn on our computers. This will be a big problem for us going forward.
thank you for this! I am definitely moving on this after I finish my udemy course, since I feel that the person that does my course is pretty good.
Thank you for your insight, I definitely prefer corporate at this point in my life. I have had some really bad experiences with smaller businesses, but with that being sad. I have a very good friend that works at agency and helping train me also. and gearing me up to work there. He has explained the benefits of being able to work at home, work in another country if i want to travel and work at the same time, so this is definitely on my radar for starting spot, but I will also definitely check in to corporate. also thank you for the youtube link! i appreciate it and the advice you have given me
No, it does not allocate memory for additional indices. You will just have an extra key in your Object. The underlying type and prototypes do not change when keys are changed.
This is my second React app. Learned a ton so far. :)
Have you considered looking at docs? J/k. Cool idea! 
sorry, my mistake. 
That’s what we’re working on :) Very happy you like it!
javascript and css ^^
We plan on taking commission from hotel and flight booking, as well as some other potential revenue sources in the future. Doesn’t translate to end user because it’s a business-side agreement, so it’s pretty great :)
So I already have a code to find the difference I just need the code to alert the user
Can I ask you what course you’re doing through Udemy? Does it happen to be The Complete Web Developer by Andrei Neagoie? I was looking at it yesterday from an I article I was reading. 
this is the course I am doing https://www.udemy.com/modern-javascript/ also I do have a little bit of background with c++ not much, but enough that it made the basics easy for me
There are two main ways to do this. The easiest way to do this is to define a function using JavaScript, and then assign in to a button using the onclick HTML attribute. Here’s an example: (I typed these examples on my phone so sorry if there are some errors) &lt;button onclick="logHello()"&gt;Click Me&lt;/button&gt; &lt;script&gt; function logHello () { console.log('Hello!'); } &lt;/script&gt; The other way is to add an event listener to the button, which can be done entirely in JavaScript. In this example, well give the button and id of `clickme`. &lt;button id="clickme"&gt;Click Me&lt;/button&gt; &lt;script&gt; var clickme = document.getElementById('clickme'); clickme.addEventListener('click', function () { console.log('Hello!'); }); &lt;/script&gt; You can also use this method to assign an event listener to multiple buttons. Say, all buttons with a certain class. For example, let’s say I want to click a button, and have it log its text. &lt;button class="clickus"&gt;Button One&lt;/button&gt; &lt;button class="clickus"&gt;Button Two&lt;/button&gt; &lt;script&gt; var clickus = document.getElementsByClassName('clickus'); for (var i=0; i &lt; clickus.length; i++) { clickus[i].addEventListener('click', function () { console.log(clickus[i].innerText); }); } &lt;/script&gt;
I am loving the UX in that gif! Congratulations on a job well done!
but\_why.gif &amp;#x200B;
For what it's worth, frameworks are also the garbage of the present, and of the past! As others have mentioned, things in the JavaScript world seem to be asymptotically approaching a steady-state right now. I'm not sure if this will change too much. In the decade I've been doing this, I've noticed that things tend to settle down and seem calm. But occasionally, a seemingly small change kicks off a series of bigger changes, and then everything is chaotic again. From a technical perspective, this means it is probably smart to try to make sure that your app logic and business rules live in code that's not tied to a specific framework. That way, if everyone suddenly starts using FooBarDoodle.js as their front end framework, you're not looking at a complete rewrite if you absolutely need to move to the new framework. This means you're not really locked into a framework. Yes, moving to something else would be annoying, and potentially quite time-consuming, but if your app's core logic and state don't live inside your view framework, moving to a new view framework will be an achievable task. As for having code in a framework that no developers remember - well, if you're willing to pay enough, you'll find someone who can do the work. I did a lot of Angular 1.x in the past, and although I don't remember it all that well now, if I were taking on a consulting client I'd absolutely consider doing Angular 1.x maintenance. The client and I would just have to settle on a price that costs less than the business value the client will derive from the project but is still high enough to be worth my time. The fact that I'd have to spend some time getting back to the point where I'd be able to write excellent Angular 1.x code isn't really the client's problem since I wouldn't be billing them for time and materials. The situation would be similar if you had an ancient J2EE application that needed work done on it. As a developer, I think it's useful if you can find a way to ensure that your reputation isn't based entirely on what frameworks and tools you know. Most software development work is part business analysis, part implementation. You're solving business problems, and you just happen to do it by creating software. Over time, you'll find that your business analysis skills become at least as useful as your coding skills. And having these skills helps to insulate you somewhat from the ever-changing nature of dev tools and frameworks. 
I haven't tried it but it seems a bit clumsy that you have to type it inside the editor. Why not integrate it into quick open bar? Just hit CMD+SHIFT+P and type "mdn \[api\]" and hit enter to open it in editor tab.
github?
Thanks, appreciate the tips and good luck with your startup.
Yeah I'm seeing the same thing. It'd be cool if you could configure the files in which it will work. Like .vue single file components. Right now I think only JS files are targeted.
Hi /u/hittom, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/cheerfulboy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/dearkitect, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/TheArduinoGuy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Jtp508, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Kaylors, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/endrilickollari, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
BooYeah!
Hi /u/d0lb33, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/MrBeh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Contrasted94, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sayanmallick, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ArtySpectrum, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/ifsnow_dev, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Thanks!
Using Vim AKA kicking your own balls for fun and profit.
This looks exactly like the travel manager I’ve been looking for after trying pretty much all of them. Joined the TestFlight!
I think your question is more about whether functional programming is worth it, because currying comes with that whole package. Curryng allows you to create partially applied functions, basically reusable building blocks, you can easily compose. Plus piping and composing only really works when the functions have only one argument. But functional programming is difficult to master, and while it's goal is to be more readable, in my opinion it ends up doing the opposite for those who are not familiar with the principles. So I guess the answer is, it depends. If it's a professional environment, and many other people work with your code who might not be fp experts, then it's probably not worth it. But if it's for a personal or even open source project i think coding in fp can be a lot more effective and, at least for me, more fun, but only if you are familiar with the concepts and practiced them. Also if you join a project that doesn't use fp then it's best not to start it and vica versa. I don't know hoe familiar are you with functional programming, but if you are a beginner i van recommend the book Functional Light JS by Kyle Simmons and after the Professor Frisby's Mostly Adequate Guide to Functional Programming. Both are great, free and open source!
I made a stupid Firefox extension which adds a menu button to search the selected text using the Private Mode ( ͡° ͜ʖ ͡°) https://github.com/MarcoLucidi01/privately-search-selected https://addons.mozilla.org/en-US/firefox/addon/privately-search-selected/
Yeah this is dope AF. Js Goals
Start building and stop learning tutorials if you’ve been doing it for a while 
I have never used it, nor seen it used in our code base. I think it's overcomplicating and just a long way to write functions and the time spent doing it is not adding any value. In addition, it makes the code less maintainable since it is just a mess of why did the original writer make it this way. &amp;#x200B; Would love to hear a counterexample.
Can you elaborate on the benefits of functional programming from your experience?
Ok this is pretty cool! Lots of potential here.
Thanks for theses ressources, I will definitly check. I know functional programming from Ocaml, still worth it to check your ressources! Are you saying that we must be FP users to maintain FP code? I thought JS FP code was hard to write but easyer to maintain? 
I agree that the mehods in javascript should begin with a lowercase, but the library is intended primarily for people who come from C # environment.
I don’t know why people are downvoting this correct. 
You're losing context with your `newGrid` function. To fix this, make it an arrow function.
No thanks.
From my little usage it tends to force your code to be split in little reusable function, preventing code duplication when using rightly. I will be glad if someone can demonstrate this!
In my project Ive started refactoring some of code with functional programing, because I hate coming up with temporary variables when manipulating data, and in my opinion its more explicit what the function actually does. heres a little snippet of the refactored code: const combinePositionFilter = (mainPosition, positionIds, positions) =&gt; ({ mainPosition, positions: groupBy(compact(positionIds.toArray().map(id =&gt; positions.get(id))), 'name'), }) which turned into: const combineStationDetails = ({ stations, positionDetails }) =&gt; ([mainPosition, distances]) =&gt; ({ mainPosition, positions: flow( curry(getStationsDetails)(positionDetails), compact, curry(enhanceWithDistance)(distances), enhancedStations =&gt; groupBy(enhancedStations, 'name'), )(stations), }); BTW its a bit longer as I've added extra field, and had to define two additional methods, but at least to me its more readable to the human eye
Feels like adding Vim to everything has become a meme at this point 
It takes 3 days to memorize vim commands, and whole life to convince other people that Vim is convenient))) I’ve been using vim as my ONLY coding editor for about 5 years and can’t imagine more powerful coding tool
It's similar to other coding conventions. Using a set of rules and principles the code is much more concise, and as I mentioned earlier readable to the initiated. Example from one of the books i linked: FP: ` // match is curried match(/r/g, 'hello world'); // [ 'r' ] const hasLetterR = match(/r/g); // x =&gt; x.match(/r/g) hasLetterR('hello world'); // [ 'r' ] hasLetterR('just j and s and t etc'); // null filter(hasLetterR, ['rock and roll', 'smooth jazz']); // ['rock and roll'] const removeStringsWithoutRs = filter(hasLetterR); // xs =&gt; xs.filter(x =&gt; x.match(/r/g)) removeStringsWithoutRs(['rock and roll', 'smooth jazz', 'drum circle']); // ['rock and roll', 'drum circle'] const noVowels = replace(/[aeiou]/ig); // (r,x) =&gt; x.replace(/[aeiou]/ig, r) const censored = noVowels('*'); // x =&gt; x.replace(/[aeiou]/ig, '*') censored('Chocolate Rain'); // 'Ch*c*l*t* R**n' ` Traditional (imo): ` 'hello world'.match(/r/g); // [ 'r' ] // Imagine if word is undefined const hasLetterR = word =&gt; word.match(/r/g) hasLetterR('hello world'); // [ 'r' ] hasLetterR('just j and s and t etc'); // null ['rock and roll', 'smooth jazz'].filter(hasLetterR) // ['rock and roll'] // Imagine if strings is undefined const removeStringsWithoutRs = strings =&gt; strings.filter(hasLetterR) removeStringsWithoutRs(['rock and roll', 'smooth jazz', 'drum circle']); // ['rock and roll', 'drum circle'] const noVowels = (replace, string) =&gt; string.replace(/[aeiou]/ig, replace) const censored = string =&gt; noVowels('*') censored('Chocolate Rain'); // 'Ch*c*l*t* R**n' ` This example focuses on currying. Currying is all about being able to use one function for different purposes by parially applying certain arguments, thus preparing different versions of the same function without having to write a new one. Of course largely thanks to the =&gt; operator this alone doesn't make that big of a difference. However it plays nicely with composing functions. ` // unique only lets trough unique items // words only lets trough words // shortWords only lets trough words below a certain limit (curried) const uniqueWords = pipe(words, unique) const onlyShortWords = pipe(uniqueShortWords, shortWords(5)) const evenShorterWords = pipe(uniqueShortWords, shortWords(3)) // == const onlyShortWords = shortWords(5, unique(words(arg))) // This is still composition just without fancy helpers // traditional: function onlyShortWords(list) { return list.filter(s =&gt; ) .filter(unique) .filter(shortWords()) } ` Both accomplish the same task with the same amount of complexity but the thing is that with first one, you get an extra reusable block `uniqueWords` and you can easily tweak the parameters of `shortWords`. With a more complex example this would be much more apparent, but ive spent way too much time writing this already. But if its still unclear please let me know, ive been told im not a very good explainer 
Hi ScrappyBox Search the whole internet on how to use Scrollmagic and anime.js together! didn't find nothing! except for this comment. could you please tell how to use them together, by sending me some js files the you probably have made or a codepen link? please?!
Falling in love. React Native. Choose one :)
lol ok man, first off there is a lot of reasons to save code, especially in front end development where bundle size is important, you certainly don't want to create a ton of different components that do the same thing, for the same reason things like code splitting is important. I am saying JS is a dynamic language, and understanding how it works you can create DRY reusable code, which you seem to be arguing against? Developers are not writing 50 lines of snippets to animate a tool tip anymore? What in the fuck are you even talking about here. I am pretty up to date on latest technologies, especially since I have been writing code recently in React Hooks, which doesn't even have an actual release ye, and next.js/apollo-client and sercer/graphql stack. If that isn't bleeding edge than I don't know what is. My only point was that you can create utility libraries like moment/date-fns would be an example which have a single entry point function taking lots of different types to create a consistent output, where in that example I could pass in a string to be formatted, an epoch int, nothing at all, or a date object and have the same consistent result all through my code, which when you have coded JS for many years and understand how things work, it makes coding nice, and is why many people prefer it. So get off your high horse, you sound like a fuckin joy to work with.
 Yeah you don't have to be an fp expert to be able to maintain fp code, but you have to know the principles. I was talking about people who've never seen any fp code, and have no idea about currying and stuff like that.
I fixed those issues and now works with file .js .ts .tsx .jsx and .vue and yea thanks for feedback
Yes previously i only targeted js files now it works with other extensions like .js .ts .tsx .vue
Let us know what you think! We love to see feedback and suggestions
Sorry, it’s a startup so we’re keeping it closed for now. We plan to open source some components on our subreddit /r/officialtourapp
Yea! that seems great, will try to add it. Thanks for the suggestion
My comments are only on syntax, so i'll keep em to myself, haha :D Let us not start a religieus war &lt;3 Nice work mate! Fun little plugin
My Javascript is rough but from what I remember, you want to grab the value from your text input field. Right now I believe you're trying to submit the entire input field object... I'll try to find an example
Hi /u/MasterWizard123, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Fasyx, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/IvanQuinn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Personally, I think currying is one of the bad parts of functional programming. Bad because: 1. The "data last" requirement imposes an unnatural and unintuitive parameter order. 2. That same unintuitive, data last order still won't be the right order for all situations. 3. It makes optional parameters harder. My go-to example is the XHR.open function. XMLHttpRequest.open(method, url, async, user, password) If we re-ordered these parameters to be curry-friendly, it'd probably be something like this: XMLHttpRequest.open(password, user, async, method, url) That's weird and awkward and unintuitive. It also assumes I'll only ever want to partially apply user and password and supply the URL last. But what if instead I want to partially apply the URL and supply the user and password last? Or what if I want to partially apply just the method? Or what if I don't want to supply a user and password at all? Currying is arbitrarily restrictive, and there's no benefit in return. I think it's better to use ordinary partial application by writing ordinary functions on the occasions that you actually need it. const withCredentials = (method, url, async) =&gt; XMLHttpRequest.open(method, url, async, "admin", "P@ssw0rd"); const googleIt = (method, async, user, password) =&gt; XMLHttpRequest.open(method, "https://www.google.com/", async, user, password); const getRequest = (...args) =&gt; XMLHttpRequest.open("GET", ...args); 
No.
Completed my new portfolio with ReactJS a few days ago. Would love to get reviews on the design etc. rishichawda.now.sh Thanks in advance! Do let me know what you think about it. Will help me improve it.
You win bro. Lol. I'll give you credit for that in the next series
Can it identify a hotdog?
Harsh words. Stole someone's work. 
Thank you :P
oh, ok. ill do that
What's the reason for not having an android app?
Not helpful. You can create a scene with JavaScript. 
How long did it take you to make this?
About 1 month to release v1.
wow, and this is an addition to a full time job? how do you balance life, friends/family/hobbies with this?
I think currying can confuse things in javascript codebases where return types aren't always clear, but in typescript the typings can overcome this issue. In plain js docblocks can mostly achieve the same thing. That said, I think there are cases where currying is absolutely worth the trade off even in plain js, such as in highly reusable composable utility libraries like ramda (check out [sortWith](https://ramdajs.com/docs/#sortWith) for a wonderful example of how currying can produce clear, declarative, reusable interfaces). I recommend [this fantastic talk](https://youtu.be/m3svKOdZijA) which shows how useful currying can be when compared to regular lodash.
I have no idea 😂 I am using an API which provides the image recognition functionality. It is far from 100% accurate, and it cannot even recognize every type of food
Nope, this and test prep and college applications.
Well, I started off with iOS because I've always been an iOS guy and never had any Android devices of my own. I do acknowledge the significance of Android though, and will get to work on it ASAP.
Yes. I recently made the switch going away from Intellij. With the right plugins it’s so powerfull and now I miss my vim stuff even typing emails
Most of the animations is an interpolation off of the ScrollView. The dragger is pure Animated api, and on screen transitions the fade in/out of some components use react-native-animatable.
How did you make such nice transitions with RN?
Thanks! I started out with React on Treehouse after I finished the Full Stack JS track, then the rest was just playing around, moving fast and breaking things. Specifically, I already had a background and prior experience in UI/UX , so I just started building my designs.
glad you liked it =)
For smoothness, by having all the processes that would lag the animations run after the animations are completed using `InteractionManager.runAfterInteractions()` and using `useNativeDriver` wherever possible.
Exactly, I absolutely hate watching tutorials, the only way I can tolerate them is if they're written and not video ones. I learn the exact same way you mentioned, breaking things.
Most of the animations are hand-made using plain Animated.Values and interpolations based on the scrollOffset. Some of the fade animations use react-native-animatable.
I first planned the UX flow out, then I started building layouts for each screen in Sketch and contemplate whether it was as simple and intuitive as can be. Then I started coding it.
I'm looking to share some components and possibly code up some libraries soon. I'll post them here and on /r/officialtourapp.
This isn't a bug, it's a thought experiment about a standards change.
Man is this thread ever a trash fire of shitty takes. Currying is an intrinsic part of functional programming and point free style is beautiful. I’d take some time to learn what it’s all for though - your example suggests you’re trying to do a thing just for the sake of it.
Very cool. I took a picture of my Diet Cole and it thought it was wine. I’ll play with it more when I get home, cool idea!
Hi /u/Ganskoff, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Seems fine to me. One thing though, why not just make this as generic as possible? So you don't have to worry about how many elements are returned from `service.create`?
Hey, thanks for the heads up on the arrow function. I switched it over and used set interval to call it every second. Works great !
What a terrible idea. Here's to hoping for a swift WONTFIX
This would be a good feature, but personally I don't like having to open the command pallet every time I need to do something. I quite like the idea of "no distraction" programming like this where if you get stuck doing something or need to know something about a particular API you don't need to move away from the text editor to find out that information, it's inline.
The latter seems like the worse option seeing that it already doesn't do what you mean. It awaits an item from an array returned synchronously. You want to do (await service.create(data))[0]
For me I don’t like putting irrelevant text into my source code. You can easily forget it there and it can end up in version control. Also I don’t wanna open editor tab just to open another tab, personally I think it’s a bad UX. But hey why not have both. 
Yeah i know i made a mistake, hopefully the other syntax will be possible since its more readable.
Glad to hear it :)
Well `service.create([data1, data2])` returns `[responseData1, responseData2]` `service.create([data1])` returns `[responseData1]` So you always know how big the array is
got some excedrin and a mayo packet, bout to make some espresso cookies. https://imgur.com/a/a7FNq5E
Right, but what happens when you hit `n` number of things being created? Surely you wouldn't be doing `[respondeData1, responseData2, ..., responseDataN]` would you?
LOL
Not hot dog. 
By the power invested in me by Google, I pronounce that [IT CAN BE DONE!!!!](https://www.w3schools.com/howto/howto_js_filter_table.asp) &amp;#x200B; Sarcasm aside, I was just about to research how to do this myself :)
That's why i specified singltonArray, which only contains one element, for other requests were n &gt; 1, i would not deconstruct the array.
Also, use the codeblocks and table features that Reddit provides us. It makes things soooooooo much more readable. &amp;#x200B;
Thanks, I've wanted something like this for awhile! Any plans for future mobile/iOS versions? That might be the feature preventing me from completely switching over from the Notes app. I'd be fine with html/javascript wrapped in a webview.
For me the fun part was building this app. I didn't actually code the image classification algorithm. I used a 3rd party API. I wanted to make something interesting, even though I knew it won't have any real world value because the predictions are to often wrong. In a nutshell, the image classification algorithm that is used sometimes outputs predictions with really high classification errors, and the results can be partially or completely wrong, even funny (it detected a picture of my baby as beer, tea, pizza) 🤣. Unfortunately this can’t be helped by simply adjusting some query parameters... The API used in the app uses a predefined, conceptual Food model, which is trained on a certain number of pictures of food. The algorithm behind this uses convolutional neural networks, which take the picture as a whole and extract patterns from it. It doesn’t detect specific objects by rounding them, like face detection algorithms do. It often cannot detect every food object on the image, or when it does detect an object it get's it wrong... This is especially true if you intentionally take a picture with no food on it. It will return nonsensical results. Sometimes the curves, shades, colors etc., located in certain pixel grids, get interpreted as something similar to a food objects. For example, maybe instead of a car it will classify the object as peach, pizza, beer... 😂
Yeah developing a web-app is probably the next major feature I'll work on, [check this](https://github.com/fabiospampinato/notable/issues/353).
https://github.com/tc39/proposal-global
Always suprise me how far JS has come, really good stuff. 
I am rewriting some of my code to see if it is worth it to have it as a convention in my project or if it is just for some part of it. So you are right, i wrote it just for the sake of it.
Looks really good, the image under 'about me' is not resized on mobile.
Enhancements are tracked with bug ids. This has nothing to do with standards.
FP/point free style can take a while to get used to - you kind of have to write upside-down logically to how to do in imperative style e.g. start with the smallest possible parts and compose together that her than starting with a a function decoration which is then fleshed out. The transition time when you’re first learning it is (perhaps obviously) challenging - but it definitely pays off. Even if you don’t end up doing FP all the time, the change in paradigm is really useful in terms of seeing problems in a different way 
If you don't like it, don't use it. I use thunks fairly often (common for React codebases), which is kind of a currying pattern.
Did you read it? The reporter is describing a constraint where a page should only be allowed to show ads if the total amount of javascript-used memory is less than a megabyte per page. He's suggesting a browser standard.
With ya on this one. However, it seems that with more powerful client devices and more demand for data intensive UI's, a lot of back end programmers begun to do more work at the front end. And.. probably started to smuggle their language features into javascript, regardless if it fits or not. Hence we are ending up with some sort of frankenstein. It's like TypeScript is not enough. Javascript has to be just softer version of it. Lets port all the bloatware.
My eyes are watering. 
This is awesome! Good work!
Thanks!
take it :) [DataTable](https://datatables.net/)
great app , any course or good tutorials you recommend for learning react.
What platform/framework/libraries did you use to build this? I ask because I can’t tell by looking at the source. I’m mainly a c# api guy
It's built in TypeScript on top of Electron using React. [Electron](https://electronjs.org) is pretty awesome for these kind of apps.
Not everything a browser does has to be a standard, plenty of browsers have the ability to enable/disable/limit images &amp; JS as is without the feature needing to move through a web standard body...
Very cool! How easy would you say it is to go from making web apps using TS to making electron apps? What the biggest change?
Unpopular opinion: when currying your functions by default, you will end up with a _lot_ less of a mess since you don’t have to write additional functions for simple compositions. Ie it simplifies your code. It comes at the cost of unfamiliar syntax for most js programmers. Syntax however is easy to learn, while complex code always will be complex.
I never said anything about the web standard body. He's suggesting a standard for browsers to use. That's it. Anything can have standards. I have standards. Example: `maxNumberOfRepliesToFrivilousInternetArguments: 2`
Just to note that using curry on some uncurried functions is not the same as currying your functions by default.
Only done a bit of electron but seems like its pretty much the same as regular web dev except u get access OS apis. 
Massively informative post, thanks! Could you elaborate on how site speed impacts ad auction prices? 
Interesting. I’m just diving in to TS. Do you get the declaration files for the OS apis?
Can I change the font?
I'd say it's pretty damn easy. You can start by basically making a website, but wrapped around in an Electron shell (in fact there's a tool, [nativefier](https://github.com/jiahaog/nativefier), that does just that, for any website), and then start incrementally adopting the cool features Electron gives you. I haven't really encountered any significant challenge. The app is built using [electron-webpack](https://github.com/electron-userland/electron-webpack) which I barely had to configure, that gives me a cross-platform _auto-updating_ app almost for free. This is pretty much as good as it gets.
I mean that if the second pattern is prone to errors, you should probably prefer the pattern where expected operator precedence order matches actual operator precedence rules.
There are basically no settings yet, but you can open the dev tools and change whatever you want.
Nice. Thanks for the info. That’s several google searches I don’t have to do
No problem, in case this may be helpful to you I also have a tool for starting new projects quickly called [template](https://github.com/fabiospampinato/template) and a template for making Electron apps too called [template-electron](https://github.com/fabiospampinato/template-electron). With a few commands you could have a simple hello world-like Electron app.
Very nice app. Congratulations! It seems that the export to pdf doesn't export Katex/AsciiMath or mermaid. Is that in your 'roadmap' or is that out of reach?
Yeah I noticed that earlier, that is definitely something I'd be interested in fixing.
Yawn ... but I'd still rather see a boring release with minimally useful enhancements then see half the stuff currently in the pipeline get released (hash-based private fields I'm looking at you).
inb4 electron hate
Sounds perfect. If I change it there, will it revert to default the next time I open the app? &amp;#x200B; I was thinking of using the Sans Forgetica font (it's a font designed to make you remember your notes better). &amp;#x200B; [https://sansforgetica.rmit/](https://sansforgetica.rmit/)
Just what I need, an afternoon of fighting with the browser to get a dev build running because it surpasses some arbitrary resource limit...
&gt; Sounds perfect. If I change it there, will it revert to default the next time I open the app? Yes. I'm planning on adding persistent custom CSS/JS, as well as plugins, but that ain't implemented yet.
Do you have a background in design? If not, who did the design work? Or did you sort of just wing it? I ask, because I'm a big fan of minimalistic design and trying to get better at it. The hard part is making features obvious for the user to discover and use without cluttering the UI.
Hi /u/uuuzzz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/samudranb, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/IdoitfortheCode, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/weavermjordan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Ha ! It's really cool ! I needed that 2 month ago haha
What are you using now? :)
Inline Latex like stackedit has would be awesome. I would instantly use it as my main note taking app then
Originaly it was to take quick dev notes in my new team and as the subject grew into something more of a collaborative documentation, we ended up using Bookstack. But i'm going to keep an eye on this project for personal use ;)
By your logic what feature wouldn't be a standard then?
Btw, was I right? You're mainly a back-ender right? ;)
Any idea when the dark theme will be merged into a release? That's the only thing stopping me from using this.
Dont use jQuery lol
great, kuddos for providing an appimage.
I plan to implement it in the [next](https://github.com/fabiospampinato/notable/milestone/1) iteration. Right now the priorities are fixing bugs, switching to Monaco and adding a dark theme.
Would love to have my new app reviewed: [https://www.github.com/bgrgndzz/bloom](https://www.github.com/bgrgndzz/bloom) 
Really cool!! Nice to replace Boostnote for a while! 
I don't really have much of a formal background in anything, I kind of learn as I go along. This is not the first project where I had to use some design skills though, I think with time I'm getting better at it. Also often times I take tons of inspiration from already existing projects. Yeah I like minimalism too. IMHO a couple of important takeaways for achieving a decent design are: - Only display something if that's useful to a large portion of the user base. - Only show the same piece of information in 1 place a the same time.
Does it support Tables? I’m sorry, terrible joke
Inline LaTeX (and AsciiMath!) is already support, just wrap your formula in `&amp;..&amp;`.
Thank you kindly!
Cool! I'm actually going to make a Notable-as-a-service at some point in the future, in case you guys are open at reconsidering your notes app choice I'd be happy to hear what kind of features you guys are looking for in such app, feel free to contact me at spampinabio@gmail.com in case you want to give me some feedback.
No it's not-able ;)
What kind of hot key/shortcuts functionality does this have?
The available shortcuts are mentioned in the tutorial notes, and [here](https://github.com/fabiospampinato/notable/blob/master/resources%2Ftutorial%2Fnotes%2F07%20-%20Shortcuts.md). Unfortunately they aren't customizable yet.
Hey this looks awesome . What would make it for me is if it supported importing word documents! Taking the text content and observing the design headings in word to convert them to md as well as basically text formatting. Images could be imported as attachments as well? This would be amazing as I could then import my existing notes and move to this.
I've just created an [issue](https://github.com/fabiospampinato/notable/issues/382) about this, thanks for the suggestion!
For what it's worth, one reason I've been looking for a file-based note-taking app like this is to get away from "managed synchronization" apps. I hate that that is the way everything has gone these days with monthly paid subscriptions. I much prefer to just pay for the app (and a mobile app), sync via Dropbox, and control all my data. &amp;#x200B; &amp;#x200B;
Any plans on opening up some sort of plugin system? It'd be cool to have a sync server, since using Git for notes is less than ideal.
Download, imported all my Evernote stuff - perfect! I've used loads of different note tools, this is great. Much cleaner and less bloated than anything else out there
And you can absolutely do that with Notable. But in order to provide built-in synchronization, a web-app that also works on mobile, and potential future features (collaborative editing? team data directories?) we need to integrate the storage part into the product.
Definitely, check [this](https://github.com/fabiospampinato/notable/issues/135).
I'm glad you like it too :)
👍🏼
Anything preventing this from running as a normal webapp outside of electron?
Right now it assumes it has access to the filesystem. But there are plans on making a [web app](https://github.com/fabiospampinato/notable/issues/83) out of this.
On the Google ad market, each url is assigned a mobile speed score between 1 and 10 (a hyper-distilled Lighthouse audit of sorts), representative of its performance. It’s a factor in the real-time bidding process along with other factors such as keywords, channel, etc.
That's cool, I understand. But my enthusiasm is dulled a bit since (for my personal needs), I'm not sure at that point it will be offering me anything I'm not getting with the built in Notes mac/ios app. And I'm a little hesitant to move everything over if at some point it'll go "integrated storage", and I'll have to migrate back.
href has a tick at the end, not an ' Also, you might want to look on how you put that string to your document.
[https://github.com/zsoltc/worley-noise](https://github.com/zsoltc/worley-noise) Old project resurrected. Would be happy to hear feedback. Thanks. &amp;#x200B;
There's no plan to disrupt the current experience, but to enhance it. Everything that you can do today you will be able to do after the web app and everything else is launched. In fact you could also get the code from GitHub today and never update the app.
Yup, I write Java for work an C for fun.
Thanks! Definitely interested in making this happen since this is kind of a dealbreaker for me - will be following these threads. I'm sure this has been considered, but I could see a sync server being an oss effort
Yeah check [this](https://github.com/fabiospampinato/notable/issues/353) too. Plugins are going to happen regardless of how much traction the app will get as they would be awesome in a note-taking app.
I hear you! I had a group of friends plan out this whole thing but never came to fruition. I’m so glad it’s in the wild now because I have an upcoming trip and will love to use this. Remind me when you have funding for hires. ;)
You're already better than a good chunk of Microsoft's user interface designers, so good going.
Apparently the NBA API has been updated to a new schema, so I'll probably be using it as a base for converting the Football API over soon™. Will look to do so in a way that makes it easy to implement for NBA
Fabio Sir, you sir are awesome. Thank you.
no-table
Would you add sketch functionality for an IOS app? The ipad pro users desperately need an app that can handle both Sketching AND typed text well. So far there’s only One Note that gets even close to that. What gives ? :(
This could be implemented in a very far feature, but at the moment there are way more pressing issues, and I don't own any iOS devices.
Glad to be helpful :)
Very cool. I’ll be including this little gem in my dev-deps on projects. Thanks 🙏 
Export options would be useful like to pdf or word. Looks good though 
Great to hear, keep up the good work. Excited to try the next version.
There's already support for exporting to markdown, HTML and PDF.
For me, I always try to at least have a solid tutorial project to at least reference when building my own. Nothing is more annoying than doing incredibly tedious work, only to find out later that there is an incredibly easy solution. 
That’s interesting I didn’t know that. I thought it was a 2 in one kind of deal. If you say the iOS app took you 100 hours (for arguments sake) how long would it take you to do the Android one by comparison? I have clients ask about cost difference between 2 native apps vs 1 RN app so be good to know. I think clients think it’s a holy grail that doesn’t add cost which is obviously not the case!
Fabio, encryption would be great. I would pay for that. Sync is being handled by g drive and it works. I dont know. I might donate even now. Because its really good.
If you come from a Java / C++ background, learning TypeScript will feel like home. It is a superset of Javascript, and compiles down to JS. You can use node.js and write in Typescript to create an API interface to your backend: * Use `express` to set up endpoints that the client would call * Use `axios` as an http client to your backend services Then, when writing your client, a super-simple approach would be to build a static HTML page that has your CSS on it, and use (I hate to say this) jQuery to do the API calls to your node.js server and render results. This would spare you from having to learn a client stack (eg react + webpack, etc).
There's an [issue](https://github.com/fabiospampinato/notable/issues/7) tracking that. Thanks for your support :)
OP wouldn't even need jQuery for the AJAX requests. Fetch is fine for that. 
Gotcha. Thank you for the info. I have zero background or knowledge but I’m very interested in learning. 
... My question is: &gt; Buttons on the webpage to open/close the garage door (this would only need to insert a row into a table, gararge program would do the rest) You want to expose the ability to open your garage door to the internet... are you sure that's a good idea?... Or is this an intranet site? &gt; I have taken online course covering HTML/css/jss - but I'm stuck with client side access to the rdbms vs. server side access. I've looked at node and run into some issues, and I'm just not sure if I'm heading in the correct direction. There's no such thing as "client side access" to an rdbms, database access is always handled server side, just coincidentally in your case, the server and client(interface) happen to be the same machine (think X11). &gt; What technologie stack should I be using??? I get confused with java script vs. php vs. ??? Seems like your stack has been overloaded i.e. you state you have: &gt; - php admin webserver &gt; - pyton applications to monitor &amp; save temps and garage door statuses. you already have 2 runtimes up, and now you want to add nodeJS for javascript? Simplify your stack, pick 1 server side language. Since you're going to be using JS on the client side anyway, you may as well rewrite all the server stuff to JS as well (which is the appeal of nodeJS to begin with i.e. only having to know 1 language).
flat, flatMap, and fromEntries are going to be great. 
I'm not sure if I will just access my infra-structure website via a vpn. I definitely don't want to expose my garage door to the world... This is definitely low priority.
I think it depends on how you prefer to do it. I do not see a need to use any client-side coding JavaScript at all if you do not want to do that (except for Highcharts). If you do want to use JavaScript for the non-charting stuff, that's great. If you don't feel strongly about including JavaScript, I would code it server-side with whatever you feel more comfortable with, either PHP or Python. You actions like opening or closing a door could just submit a form action to the server. You said "client side access to the rdbms" -- I'm not sure that's whats you meant to say, because obviously the browser can't connect directly to mysql. Node.js, Python and PHP are all perfectly usable approaches for the back end. Python and Node.js would mean eliminating the Apache server. (Technically these days Apache is usually replaced with Nginx and PHP-FPM but that's actually not important for most projects). If it were me, since I am most familiar with Node.js these days, I would use that for the back end and have a dynamic front end in JavaScript. If you want to add login functionality to Node.js (this may be the most challenging part), I would actually recommend not doing what most people tell you, which is to paste a bunch of boilerplate for Express and Passport. Rather try to find a module that handles authentication for you with mysql. You will want to search on npm for some modules to help with authentication. Maybe this one will work https://www.npmjs.com/package/simpleusermanager. I mean Passport.js will work, it just seems like a bunch of boilerplate and reinventing the wheel. But 10 million people have happily done that so it is always an option. Another one I just found: sql_user_manager/sql_user_auth. You can also probably find the mysql passport boilerplate code in a blog somewhere by googling for 'mysql passport'. If you want to do something easy but fairly unpopular you can install MongoDB and use my thing `login-mongo`. 
Thanks for the reply, I'll try to answer what I can... \- Currently just an intranet site. \- client side vs. server side \-- If I write a simple .js script, ============================= var mysql = require('mysql'); var con = mysql.createConnection({ host: "localhost", user: "&lt;user&gt;", password: "&lt;pass&gt;", database: "mysql\_dev" }); con.connect(function(err) { if (err) throw err; con.query("SELECT \* from v\_combinedTemps order by pollingTime desc limit 1", function (err, result, fields) { if (err) throw err; console.log(fields); console.log(result); }); }); ============================= I can run this via node. &amp;#x200B; $ node test.js \[ RowDataPacket { pollingTime: 2019-01-31T02:30:00.000Z, insideTemp: 66.65, garageTemp: 33.575, outsideTemp: -21.325 } \] &amp;#x200B; ============================= But I can't access this javascript code from the server var requirejs = require('./scripts/requirejs'); function fetchInsideTemp() { var mysql = require('./mysql'); var con = mysql.createConnection({ host: "localhost", user: "&lt;user&gt;", password: "&lt;pass&gt;", database: "mysql\_dev" }); &amp;#x200B; con.connect(function(err) { if (err) throw err; con.query("SELECT \* from v\_combinedTemps order by pollingTime desc limit 1", function (err, result, fields) { if (err) throw err; console.log(result); }); }); } I can't seem to get past the requite step...
I'm sure it is something stupid that I am missing - in fact I will guarentee it... &amp;#x200B;
Thank you for going through the website. Can you send me a screenshot of the about me section, please? I couldn't reproduce it on my mobile. 
I would just use the html built in date picker. `&lt;input type="date"&gt;` then read the value and put it into the list like you read the other input 
Solid if ya want to collaborate let me know I have been doing tons of react/react native these days and have been digging it 
Nice would be cool if you also calculated the distance times between the events via however way you want to set (walking, car, parked rental car). Another cool feature would be an option to see suggestions on what to see/eat next based on what's near the last location. Say if I have time to spare and want to check something out, show me a page of things nearby that are good to checkout :)
For sure I always am referencing example code. Usually not a tutorial but an open source project. Learning by example is by far the best way for programming, in my experience.
no way lmao. Thank you, you're right. Great catch. 
novice here too, i would add this to the form above the item, &gt;&lt;input type="date" name="due\_date" id="dd"&gt; then your existing - input &lt;input type="text" name="item" id="item" placeholder="Add New" /&gt; the list entries can then include the date as &gt; *date = document.querySelector('#dd');* &gt; &gt;form.addEventListener('submit',function(e){ &gt; &gt;e.preventDefault(); &gt; &gt;list.innerHTML += '&lt;li&gt;' + item.value + *' '+date.value* \+'&lt;/li&gt;'; &gt; &gt;store(); &gt; &gt;item.value = ""; &gt; &gt; },false) hope that helps
"*If you build a Single Page Application (SPA) and you split the CSS bundle per page...*"
His course will still be a great learning tool, I definitely recommend it. I do wish he taught a little bit more formatting in the basics, but other than that it’s great
Nice vid, was well put together and interesting. Just thought Id show you another way of dealing with the fractional chunk sizes.... var numberOfChunks, contentLength,mod,chunkSize,firstChunkSize; numberOfChunks = 4 contentLength = 11 mod = contentLength % 4 chunkSize=(contentLength - mod) / numberOfChunks firstChunkSize = chunkSize + mod; &amp;#x200B;
Nice! That is definitely cleaner with the mod operation. Thanks for watching!
Are you referring to the Modern JavaScript course you took? Or the other Udemy course I asked about?
Javafx just got a lot better tbh.
I'm an Evernote user but I've also been looking for a note taking app that is code friendly, this may be exactly what I wanted: the Evernote fundamentals (notebooks, tags, search) but with code syntax highlighting. I'll be sure to try it, thanks!
I haven’t taken a modern JavaScript course, all JavaScript I have learned has come from this udemy course. But in two days my knowledge in JavaScript is about where my knowledge of cc++ was in 2 months of college classes. 
This fucking language did not move for a good 2 decades, now it's changing so fast that they append the year to its name. There should be a point that it needs to stop. It cannot get more optimum with more features. And, I do not have time to keep learning new shit just to read other people's code.
yep, like \`Object.freeze\`
Except, all the changes this year are pretty boring. Like, you can write `try {} catch {}` now. Such rapid innovation! Before this change you had to have a `catch (e)` even if you didn't want the `e`. Looking at the list of features added over the past four years, it seems like mostly trivial maintenance &amp; polish stuff gets in, as if the project was nearly perfect and just putting the finishing touches on. The big jump was in 2015 with ES6. The only big feature since then has been async / await.
Holy shit THANK YOU. this is what note app i looking for.
Lisa!!
You probably should modify your require line and instead of require(./mysql) use require('mysql'), I am assuming this is npm package and not something you have written yourself. Just like in your simple script. Also how are you running this code that does not work? If I were you, I wouldn't expose database access from backend to client side javascript, I would rather create simple rest api and use that. 
This looks amazing. Good job! Suggestions: - If I tap on February 1st and there's no entry, show me the "How did you feel today" screen directly. Would be a little good improvement on the UX. - Ability to create moods. That's about it. Honestly it's very well done. Inspires me to learn React Native in the near future. :) keep it up! 
If you want to work with it, use their developer docs for how to fire events. If your project is to analyze it, then you shouldn’t be asking others for their work. 
https://twitter.com/jerem/status/1090813173203054592?s=20
Just had an idea for the app that does the exact opposite: you take a picture of any dish, and it will show you a list of all ingredients, as well as the recipe that was used to cook it.
What plugins you running? I dropped Evernote for a Dropbox folder of `.md` files edited by VS Code.
Thanks
I'd love to have git-like change history and diffs.
[removed]
He seems to be a beginner when it comes to front end facing things. My intent was to give him the path of least resistance. Sure you can mention security but you can also mention a ton of other things which will just overwhelm the OP. I wouldn't even recommend fetch because the response API isn't very user friendly.
BundlePhobia does this as well, and doesn’t require you to install a package to do so...
Google today is like Microsoft in the nineties. It is bad for the web and bad for the freedom that a new browser monopoly exists. After Microsoft has given up, Mozilla is the only rival defending an open web.
I knew it had significant SEO impact, but not on this! Thanks for the explanation :) 
lol what?
[removed]
Very slick, and almost what I've been wanting for ages, since I gave up on Treepad. If only it could be cross-bred with https://stackedit.io so it can be used via the cloud across multiple devices, but not in the direction that app.thoughtplan.com took (i.e. no local storage). 
Puff puff opera pass
Yup! React's hook does that.
Thanks mate, really good points. I had actually recently bought both Max's and Mead's course, but just got a refund for Max course. Although I prefer his Node course to Mead's, I agree with you that Mead generally is the better instructor of the two. Thanks for your input!
``` function foo () { console.log('Amazing, I love it!') console.log('It was the brackets, and 8 spaces :P') } ```
This is quite fun, I can see potential to make an angry birds type game where you have to slosh liquids towards targets, especially given different liquid properties (density, viscosity, flammability) and environmental hazards (cold, holes, plants). Falling sand games were similarly fun. 
based on the threeJS [protoplanets demo](https://threejs.org/examples/webgl_gpgpu_protoplanet.html), added viscosity to the shader and made a function to turn geometries into GLSL distance functions. 
Fetch should really be all you need: &amp;#x200B; [https://developer.mozilla.org/en-US/docs/Web/API/Fetch\_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) &amp;#x200B; It's just making some rest calls, not sure it needs a big 'framework' as such.
Node.js does not support WebWorkers. But there is a new "flexsearch-server" node package which gives support (based on Node.js cluster).
Opera already swallowed the pill and uses Google's Blink browser engine.
Support object-structured docs with custom weights is noted on my todo list.
This is now supported in v0.3.4. https://github.com/nextapps-de/flexsearch#exportimport-index Also there is a new node package named "flexsearch-server" which supports clusters.
While he's at it: can he take those FUCKING UGLY ROUNDED CORNERS back and leave them where they came from: his stupid as Firefox Browser.
I realise this is a cliche argument against electron, but at what point does a note-taking app consume too much resources?
Axios is a solid library for fetching JSON from any back end... but that's literally it. I'm assuming you wanna do more than just that. Want components? Data binding? Routing? There are *countless* front end frameworks/libraries that'll do all of it for you. And here's the kicker: It doesn't matter which one you use. I'd recommend either React or Vue. If you go the React route, use the [create-react-app](https://github.com/facebook/create-react-app) project as a starting point. For Vue, I'd recommend the [CLI](https://cli.vuejs.org/). The rest, I think, will boil down to what feels right for you. Feel free to message me if run into anything fucky. 
Nice hint, I will provide a small demo for an autocomplete. Related to your use-case, whenever you saving content to the DB, add the same content to the FlexSearch index. Initially you have to load all contents (which are going to be searchable) from the DB to the FlexSearch index once, then keep it in sync. The new package "flexsearch-server" provides a persistent model.
Chrome is going to be the new Internet Explorer, same incentives to break compatibility and lock people into their ecosystem. 
Ok I just noted down point 1. I am actually working on a Mood Creator, where you can create new moods and use different systems to display them. DO IT! And let me know :) Thank you!!
Both Redux and MobX, for instance, are framework agnostic. They are not tied to React itself, there's another package with makes them compatible, so you can use them without needing to move to React if you don't want to.
So here's another way to write the same thing using FP-style (sorry for psuedo-code - limited on time): &amp;#x200B; `cont totalAdjustment = reduce(add, 0, this.adjustements || []);` `const totalPlusAdjustment = ({ orderItemUnitTotal, quantity }) =&gt; (orderItemUnitTotal * quantity) + totalAdjustment;` `const makeTotal = compose(` `reduce(add, 0),` `map(totalPlusAdjustment)` `);` `return makeTotal(this.orderItems);` &amp;#x200B; In English: &amp;#x200B; 1. Calculate the total adjustments one time 2. Add a function to get the total price for a given orderItem 3. Compose those functions into a new function which given a list of orderItems will calaculate the price of each and them sum them (note that **compose** goes right-to-left) 4. Call that function on your data. Simple, beautiful and every part is theoretically individually testable and/or reusable. &amp;#x200B; &amp;#x200B;
Opera has been based on Chromium for almost six years now.
I totally forgot that Redux was not tied to React (have not used MobX yet). Thanks for the help!
[React](https://reactjs.org/) is very popular now. For simple project you can use [create-react-app](https://github.com/facebook/create-react-app), or advenced usage you can look [react-boilerplate](https://github.com/react-boilerplate/react-boilerplate). These two boilerplate are very popular and have large community.
What is a "multiple board"?
[https://lodash.com/docs/#get](https://lodash.com/docs/#get) is a good idea if you are willing to add a dependency. Another pattern could be: `return json_data &amp;&amp; json_data.optional_data_1 &amp;&amp; json_data.optional_data_1.optional_data_2 &amp;&amp; doStuff();` &amp;#x200B;
What about Angular? It offers a powerful [HTTP client](https://angular.io/guide/http) 
I have this CLI framework/builder for NodeJS that I built which has an similar approach as Express. First time I did it in Typescript too so feel free to review mine [https://github.com/nedpals/kumander](https://github.com/nedpals/kumander)
I made an [online webpack config tool](https://webpack.jakoblind.no/) that I think is useful for you to get started on your project. It gives a minimalistic config based on exactly the features you need.
We seem to have a battle for what will be the best/worst imitation of IE in the V4..v6 era: * Chrome for making use of and feeding into Google's significant growing monopoly * Safari for not implementing/fixing things in a timely manner, forcing devs to avoid (or implement workarounds the absence of) new toys because of Apple's control over a significantly sized and very vocal minority (I'm calling Safari users a minority based on CanIUse's current stat of \~13.5% globally tracked use, the same stats put Chrome at \~63% if you similarly count both desktop and mobile - opinions on how valid this analysis is will most likely vary widely!)
Pretty sure Peter Molyneux created Fable.
thx. I will have a look at lodash, this could be promising and I may can use it for other data handling as well. 
I take it you never looked at Firefox in the last two years.
I take it you haven't looked at Firefox in the last two years?
I take it you haven't looked at Firefox in the last two years?
&gt;I hate that that is the way everything has gone these days with monthly paid subscriptions. If there is a F/OSS version of something you want, you could always self-host on your local machine and have the same control over your data as a desktop app gives. Though obviously you've now got some infrastructure to manage instead of just an app to run...
I take it you haven't looked at Firefox in the last two years?
Who gives a fuck? FF originally had those ugly rounded corners first. I dont care if and when they ditched them again, I want Chrome to drop them now.
Hehe true bro. Btw, I read in Mead's Node forum that he is reworking on his Node course and will soon release a complete reshoot of the whole course. This I believe will be top of the line since he's acquired quite some experience since the last update. 
&gt; Who gives a fuck? I was under the impression you did
few months from now: "Mozilla developer releases new Angular renderer because Google decided to delay Ivy instead of fixing a Google site"
If the data structure is not too deeply nested, i like to use this pattern: `(json_data || {}).optional_data_1`. You can repeat this for all optional fields, however if the data structure is nested too deep I also suggest https://lodash.com/docs/#get
Curious question: what else would you use to build an application instead of Electron?
https://twitter.com/jerem/status/1090815354731868160
Sure...except Chromium is an open project. Whereas IE was not.
Except it's open source. Unless they make it closed source it's not going to be a problem.
Did you try googling for it? This is the first result I get https://stackoverflow.com/questions/6654958/make-body-have-100-of-the-browser-height Same issue as you, solved by min-height 
[nested-property](https://www.npmjs.com/package/nested-property) npm is another option.
While Chromium is open source it's still controlled by a single company. If Google doesn't want to support add-ons like uBlock Origin they can just block it. Sure people can make forks, but those are a pain to maintain and won't get (security) patches nearly as fast as Chromium.
Being open source may mitigate some of the harm, but it doesn’t eliminate it. Open Source is the worst way to monopolize the browser market, except for every other way. 
It doesn't matter if its open or closed, its still proprietary and its the copy that they distribute that matters.
Doesn't keep them from randomly breaking things. Touch events on the window chrome (minimize/maximize/close), at least on Windows, have been broken for months, and they fixed it once and then almost immediately regressed it and ignore any reports on it because they have a closed ticket on it.
Isn't Safari based on Chromium?
You could argue the same for safari on a lesser scale, of which I've had significantly more annoyances with over the years. I'd say both of them pale in comparison to what IE was trying to do to control the spec.
No
If only we had some sort of group that would get together and recognize that browsers are crucial, and that the underlying technology/engine shouldn’t be left for random companies to control, instead left public, open, and non-proprietary. Oh well. 
Why do you attach "onclick" twice to the #openmenu element? It's been some time since I touched raw DOM/VanillaJS but you should do: document.getElementById('menu').addEventListener('click', e =&gt; { if(e.style.visibility == 'visible') { e.style.visibility = 'hidden'; } else { e.style.visibility = 'visible'; } }) &amp;#x200B;
Safari uses WebKit. Chromium uses Blink, which is a fork of WebKit.
The Blink engine in Chromium is a fork of Webkit's WebCore module which is used by Safari. That's where the similarities come from.
Doesn’t matter if Devs reward Google for adding non-standard or non-ratified features. 
OS-native SDKs? I don't understand your question, it's like asking "what else would you use to build a web app instead of React". By the way, I'm not hating on Electron at all, I like it for what it does and I've built a couple of apps with it myself. I'm hating on the Electron haters that inevitably turn up in threads like this.
Hi /u/KraZhtest, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
This is cool. At work I've had to do a lot of markdown wikis and as I got used to writing in Markdown, I thought it would be awesome to have a simple not taking app that used it. I currently pay for Evernote because of their bs where you have to pay to sync more than 2 devices which is total crap. Maybe this can replace it 
Thanks! Making a web-app and built-in synchronization is a planned feature.
Definitely, there's an [issue](https://github.com/fabiospampinato/notable/issues/116) about that.
Oh ok. I misunderstood your original post. Apologies. I do want to try Electron for an app that I've been working on , but it will require a connection to a Mongo database. I've seen some solutions out there but have yet to try. 
Yep - the whole front end side of things is new to me. Most likely access will never expand out of my own intra-net.
Well an electron app is literally a website with some bonus APIs. So if you can write a web app you can also write an electron app.
So I modified a couple of things. In my index.html file, I have a button defined with an onclick action &lt;button class="btn default" onclick="fetchInsideTemp()"&gt;close garage&lt;/button&gt; Then in my app.js file, I have the following code function fetchInsideTemp() { var mysql = require('mysql'); var con = mysql.createConnection({ host: "localhost", user: "&lt;user&gt;", password: "&lt;pass&gt;", database: "mysql_dev" }); con.connect(function(err) { if (err) throw err; con.query("SELECT * from v_combinedTemps order by pollingTime desc limit 1", function (err, result, fields) { if (err) throw err; console.log(result); }); }); } Reloading the page, looking at the console log, I get the following errors app.js:4 Uncaught ReferenceError: require is not defined at fetchInsideTemp (app.js:4) at HTMLButtonElement.onclick ((index):30) 
https://jsfiddle.net/40symwrh/ -- I have made a useless test example for experiments with cloning, but how do I assign those normally-non-copyable values to the original *a* element to then try to deal with them?
Yeah, I knew there was some commonality. Thanks!
Frameworks usually worry about creating the view, the visible frontend. If you're looking for one, the most obvious choice is React. The browser has an api to deal with rest/json/binary requests otherwise called fetch. It's often all you need, and in the case you need more there's libs like Axios.
TIL bower is still a thing
We use Redux at work on a node backend server. Redux in combination with immer (so that you don't need to write out pesky reducers) is a nice choice in my opinion.
You are correct, floating point coordinates will have an effect on performance. From MDN: [https://developer.mozilla.org/en-US/docs/Web/API/Canvas\_API/Tutorial/Optimizing\_canvas#Avoid\_floating-point\_coordinates\_and\_use\_integers\_instead](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas#Avoid_floating-point_coordinates_and_use_integers_instead) it looks like they recommend calling \`Math.floor\` on coordinates before drawing. If you were to do it when calculating the coordinates, I think it might have an impact on your animation. There are some other performance enhancement tips on that page as well.
Try using code https://codesandbox.io, It’s very cool. :)
Flexbox is your friend ;)
Framework == handles the viewing of data What you need is something to fetch the data, the "best" option is probably axios (https://github.com/axios/axios) However, you don't need a full library for fetching data. You could use the build in Fetch API (https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or the older, more browser friendly one, XHR (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) If your app is going to be quite large and you need to work with the data, then for sure use a framework like Vue or React (angular is pretty much legacy these days, please hate on me &lt;3) But you'll still use Axios, Fetch or XHR in order to fetch the data. The question really is how complicated you think the app is going to be. Like really, you could just make a index.html add some &lt;script&gt; tags and be done with it. Unless you really wanna go the full route, then yeah. Install node and `npm i create-react-app` or `npm i vue-cli` ;D Have fun mate &lt;3
Mithril is great. Recent project at work I did the Api in python and flask, frontend done in Mithril. So far so good! 
500k weekly downloads from npm ;-)
Once I learned about flatMap, I magically kept running into situations where I really needed it.
&gt; I do not have time to keep learning new shit Take up plumbing or something. Still decent money.
Lodash is so useful that I typically end up including it in every project. There is a `lodash-es` version which is written in pure JS modules, so it works more effectively with tree shaking.
You can use optional chaining. It’s still in stage 1 I believe https://github.com/tc39/proposal-optional-chaining
Came here to suggest vue and axios.
Bleep bloop, I am a bot. I like turtles and am here to collect some metrics. I will only comment once in every sub, so do not be worried about me spamming your precious subreddit! Goodbye, and have a nice day.
While this works, I think a more efficient way would be to add/remove a class that handles the visibility. on your `onClick` listener, you can then use `e.classList.toggle('is-visible')`. More about `classList`: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
Mobx-state-tree is really intuitive to use. Works great with React, but isn’t tied to it.
You can use [store.js](https://github.com/marcuswestin/store.js/) which can work with session storage, local storage, in memory storage, etc. But last time we needed something simple like this, we built our own using RxJS in about 5 min and it worked amazingly well! 
This is about Fable the F# to JavaScript Compiler :-) But maybe the title could have been better!
Chrome is based heavily on Chromium, which is FLOSS and maintained by many vendors. Honestly y'all are just fear mongering and spreading nonsense.
&gt; If Google doesn't want to support add-ons like uBlock Origin they can just block it. Sure, and then lose a ton of market share to Firefox. Chromium powers a lot more than just Chrome, and Google would be pissing in a lot of people's cornflakes if they did something like that.
Could just learn vue... and use &lt;v-if&gt;.
Lodash-es is nifty idea!
Couldn't he try..catch this?
Well I mean he could have fixed a firefox bug, but what's the point working on a browser that nobody uses?
Nice job. Just got done with a business trip and would’ve used this for sure. If not in it a nice feature might be a way to share it or clone it to another person. At least for business travel. Could share or have colleagues clone it to their app instance so they know what is going on on a trip. 
Weird flex, but ok bot
Lodash is amazing. It can be big, so I always only install the specific fns I need, eg `npm I lodash.get`.
Holy fuck, man. This looks like *exactly* what I've been looking for for years, ever since MonkeyPirateTiddlyWiki's tagglytagging feature failed to catch on anywhere else. I've even considered making this exact application many times.
Most of them are oudated, Just a word of warning.
Hi all! In my free time I made this simple SPA, written in Vue, for beginners who want to learn to develop Single Page Applications using Vue, Vuex and Vue Router: it's a simple Tic-Tac-Toc game. I used some methodologies I adopted in my daily frontend development (Atomic Design and BEM). Feel free to clone it, study it, open PRs or giving me some feedbacks. 🙏
There is no way to get a complete copy. Event listeners, for example, are a black hole that you can't carry over into a clone. I'm not sure exactly what you mean by JS properties, but I'm assuming you're referring to non-DOM properties you've added directly to the element? That I think you'd have to do manually. Or if you keep data in the `dataset`, it would get carried over automatically in the clone. jQuery has a pretty capable clone, though it too assumes element data is being kept in its dataset-like data() api. jQuery does the extra step of copying (via option) event listeners as well - this assuming you added them with jQuery. It can do this because it tracks event listeners independently of the DOM api so it can do things like copy them in clones and automatically remove them in remove() calls.
If we were talking about the renderer wouldn't he name the renderer as the project he worked on as opposed to the app? Because based on this tweet I have every reason to assume the bug was in the ui, or the add-on api, or the net code. That downvote button is not the button that dispenses you're missing social skills or a patch to fix your statistically guaranteed tendency to make shitty assumptions, y'all
Could you say which are still useful?
None
Partner spam, visit the site directly
Depends, things like regular expressions won't change. But for example the css cookbook is ancient. Your money is beter spenderen buying some courses on doe example udemy.
We're expecting a large company to do what large companies have done. 
The bash cookbook is still good. I have the JS one and still use it occasionally but it stuck in ES5 days. That Docker one is probably mostly useless since Docker evolved pretty fast.
True, event listeners is a lost cause, and this is why I have to use *cloneNode* to save the original node along with its event listeners because otherwise I can not recreate them (in the real case they are not mine by belong to YouTube's script). And it does work as my test example in JSFiddle shows: I can recover the original node along with its event listeners with no issue. What I did not expect is that a copy of the node I get via *cloneNode* fails to copy all of the node's property values as in case of YouTube's thumbnails (I can not reproduce it for JSFiddle, though as I would probably need to install Polymer somewhere, then import it, create objects, bind them to DOM, and so on; it is easier to see just inspecting actual YouTube's Subscription tab's page). Developer in the linked discussion claims it is possible to copy element values that are not copyable by regular *cloneNode*, but I personally do not know how. Especially since in the YouTube example the uncopyable values are not *dataset*, but just regular *src* of an *a* element. I could make a function that after *cloneNode* iterates-in-recursion through the original node and tries to see properties that were not copied and then add it to the tree of copy of the node to add everything omitted. But I wonder if there could be some better way to deal with that. So far it looks like there is no such thing, so I will try to do it this "manual" way.
To be clear: I haven't been assigned this task to analyze their code as homework. I doubt any college would assign something as complex as that. It's my own initiative. I have an idea for a personal project: a browser plugin that, instead of blocking tracking functionality of spyware modules like the Facebook Pixel and Google Analytics, would obfuscate a user's browsing habits by making it seem like that the user visits different websites, scrolls through them, clicks them, when in reality (s)he is not doing any of that. All the obfuscation behavior would be generated by phantom "users" in the background without any participation from the actual user. Rationale: privacy protection. It's an ambitious idea. At my student level of knowledge I would probably be not able to realize it unless FB Pixel code is available in a readable form. And of course I understand that FB themselves wouldn't release de-obfuscated code. I was curious if some 3rd party with a bright mind has already done it for the rest of us, mere mortals.
Hi /u/Mitchyyyy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
I'm not seeing the behavior with src in the youtube example. I tried copying the img via the console and the clone retained the src. What specifically are your steps to reproduce your issue there?
Hi /u/truestbriton, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/gerg-a-lerg, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I've heard this exact comment multiple times, I'm glad to find more people that like Notable :)
i ran across this a week ago and wanted to love it by the syncing with gist was very slow and it looks like development has slowed on it: [https://hackjutsu.com/Lepton/](https://hackjutsu.com/Lepton/) ill give notable a try.
 const get = (object, keypath) =&gt; keypath.split('.').reduce((obj, key) =&gt; obj[key], object); Should get you down the road pretty far... const obj = { a: { b: { c: 'ok' } } }; get(obj, 'a.b.c') === 'ok'; get(obj, 'asd.dsa.das') === undefined;
Redux in a nutshell: // library function reduxy(root) { let state = {}; return action =&gt; { state = root(state, action); } } // your code const dispatch = reduxy(root); function root(state, action) { return {a: a(state.a), b: b(state.b)}; } function a(state = 0, action) { return action.type === 'a' ? action.a : state; } function b(state = 0, action) { return action.type === 'b' ? action.b : state; } dispatch({type: 'a', a: 1}); dispatch({type: 'b', b: 2}); 
this
 const get = (object, keypath) =&gt; keypath.split('.').reduce((obj, key) =&gt; obj &amp;&amp; obj[key], object); Should get you down the road pretty far... const obj = { a: { b: { c: 'ok' } } }; get(obj, 'a.b.c') === 'ok'; get(obj, 'asd.dsa.das') === undefined;
Nice. Unfortunately copying over my markdown with latex from stackedit resulted in different (wrong) outputs and some stuff seems to be unsupported. Stackedit is using KaTeX. Does noteable use some other library?
Hi /u/Infinite100p, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This Violent (or any other) Monkey script reproduces the issue once I hover over thumbnails in "https://www.youtube.com/feed/subscriptions?flow=2" -- the image disappears as the cloned node do not have *src* filled any more: // ==UserScript== // @name TestYouTube // @namespace Violentmonkey Scripts // @include https://www.youtube.com/* // @grant none // ==/UserScript== window.addEventListener("mouseover", function(event) { var e = event.target.closest('a[href*="/watch?v="]'); oldE = e; // needed to restore the original node later newE = e.cloneNode(true); e.parentNode.replaceChild(newE, e); e = newE; // to work with the cloned e }); If you do not have this, maybe it depends on specifics of the browser (I have FireFox 66).
Hi /u/dominic_l, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Herdeir0, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Farmerobot, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; Sorry its not really a javascript question. Just looking for fast help. Going to put you on a short time-out since you knew this was the wrong place to post, and you posted anyways. There's _so_ many more appropriate places you could've posted, and yet you chose to still post here?
Thank you for the pointer. I was under the impression that, since I am not asking how some stupid question how to declare a function or do recursion, for example, but rather a very complex question that could benefit professional developers too, I was good to go. Apologies if I violated some kind of rule. You are welcome to delete the topic if it's against the rules. I don't think I'll get any help anyway.
Well done! One thing I notice while using it is that if you explode the figure and then randomize, the expression no longer gets randomized.
Well done!
Is there an Official release of info like this one? One that comes from the people that make these decisions? This is the thing that bugs me the most about JS: the esoteric and scientific nature of the Official Information, and then the next thing you see is a random shitty blog post that has filtered thru it for "the important stuff". Even MDN doesn't tag features with their release version. How about ALL the stuff from the release released in a documentation form? "MDN is a wiki. Just do it yourself." -- I'd be happy to, if i could find an understandable and complete version of release info as a source!
I would want a web-based hosted version, thanks.
This is just a list of links to other articles. Zero effort.
I respectfully disagree that it's "a very complex question"; rather, you asked simple questions about a complex subject. Asking, _"what's the meaning of life?"_ is not a complex question, despite the possibility of the answer being quite complex. p.s. it's trivial to de-obfuscate with tools like http://jsnice.org/, etc.; asking if anyone has done so is not really a valid question, much less a complex question, since anyone can do it. sidenote: `fbevents.js` is not obfuscated, just minified.
From legacy projects ?
Hi /u/ndrw17, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
That's pretty incredible. Was any program used to generate the CSS? So many gradients.
I see now. Its cloning a tree with a custom component parent. I was cloning the image directly. Yeah, the custom component behavior is different. I don't know what kind of rules are being followed for that. 
I don't get it, if you can load it in script tag, then you can just read source code, or am i missing some detail?
We are using KaTeX too. Sounds like a bug, feel free to open an issue on GitHub about this, I'd be happy to look into it.
Most of it seems to be trying to protect your API on a client's site (or your own site) against Javascript that has been injected on the site. This is a losing battle. There is *always* a way to defeat your protections if it's client-side. Instead, focus on preventing script injections in the first place, which is something that can actually be done.
Thanks! We're actually adding a share feature soon, you'll see it by the end of February before the app store release. We're also planning group trips with multiple memebrs after app store release, which would be perfect for business trips with colleagues.
Well that's tons of fun, love it! 
Made this simple jquery plugin but solved my day-to-day use case called "jquery-metal-clone" to easily clone HTML element. Appreciate the feedback :) [https://github.com/metallurgical/jquery-metal-clone](https://github.com/metallurgical/jquery-metal-clone)
I love it, well done! One note and I'm not sure if this was done on purpose, but when you click explode then randomize only the upper- and lowerbody get assigned a random color while the head remains the same.
So it is because of the custom *yt-img-shadow* tag element wrapper around the *img*? I can not even "re-engineer" it normally since Polymer projects compact their JS code into gibberish.
Not mobile friendly. Close though.
yeah, pretty sure. It doesn't seem to happen with arbitrary custom elements, but for whatever reason yt-img-shadow isn't letting its child attributes get cloned.
Hi /u/livingorundead, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/HTMLN000B, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I am working on reusable components library internally at my work. This was my first time and it seemed an uphill task since i didn't really have an understanding of nuts and bolts. I spent a lot of time looking for boilerplates and literally discarded each one of them because they weren't perfect for my set of requirements. I was forced to build one myself however i learnt a lot in the process. It was totally worth it, in the end. I wanted to share my knowledge so i put it in the writing. Any feedback is appreciated.
You might also want to post a link to the actual code.
Done and thank you.
How it responds with the correct answer? It says "That's not between 1 and 1000" which is needed.
If it's over 1000 it works but if you insert a number under 1000 it doesn't. It has to be something in my while loop. But i don't really know what exactly I did wrong.
Great! Thanks for the hard work!
Ahh, you meant that it works well when the number is above 1000. I thought it was guessing the number that you typed correct :D &amp;#x200B; I'll check and report if I get some opinion.
The head is still randomized actually, the lego figure is just surprised that you exploded him. When you unexplode him you see the new face. A small but awesome feature. haha
Thank you so much.
lol now I appreciate it even more!
My favorite resource is the [TC39 proposals GitHub project](https://github.com/tc39/proposals). Here is where you can see all the proposals as they move through the process. The [finished proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md) link on the main page takes you to all the proposals approved by year. Proposals move from stage 0 ("just an idea") through stage 4 ("going into the next version").
&gt; There is always a way to defeat your protections if it's client-side. That's... not really true. It's entirely possible to build jails in client-side JS land that are resistant to malicious actors, even though (as the article demonstrates) that can be __very__ difficult by the very nature of JS. And besides, why _not_ build a more robust API that reduces your attack surface?
Are you talking about reading the malicious source code, or the malicious source code reading your API's source code?
Works decently on iOS. 
Well, I figured out that you are trying to set inner HTML to an undefined object (line 22, 26, and 30). You don't have any object having "output" id. When I add a `&lt;p id="output"&gt;&lt;/p&gt;` to the HTML, it doesn't respond. Just freezes. I've modified your JS a little bit. Check it out here: [https://jsfiddle.net/melindacrimi/onc2qz1f/#&amp;togetherjs=Iv4aQh22eL](https://jsfiddle.net/melindacrimi/onc2qz1f/#&amp;togetherjs=Iv4aQh22eL)
\&gt; The first victim of a bloated node\_modules is your developer feedback loop – unless your build system can cache dependencies your feedback loop just gets longer and longer. Developers should not have to wait more than 10 minutes for build feedback. This is terrible for your DevOps journey. \`npm ci\`
+1; that said, I don't recommend using the Fetch API without a polyfill.
+1; that said, I don't really recommend using the Fetch API without a polyfill. And at that point you're already including (x).kb in extra code to support a lower-level API that lacks the feature set of something like Axios in the first place. I do like Fetch though. 
Hahah lamao, perfect answer ... 
I think YouTube still uses shadow DOM v0.
Not sure have a mobile, mate. Works fin on Android and iOS here
I have the same feelings about OOP! Weird! In my experience, the joys of currying in specifically or FP in general is this ``` // some business logic and mapping // from providers to internal services // or from deps to non-deps const massageFromAToB = ... const doSomethingWithB = ... const massageFromBToC = ... const doSomethingWithC = ... // usage of business logic // file1 const myActualBusinessLogic = compose( doSomethingWithC, massageFromBToC, massageFromAToB ) // file2 const myActualBusinessLogic = compose( doSomethingWithB, massageFromAtoB ) ``` It's just a way to separate the _what_ from the _how_, the polar opposite of OOP where you would group those two things.
Yeah, I imagined as much. But I was also interested in the Perl book.
This is interesting, and brings up many good questions about the way packages are published to npm. Namely: &gt; It's filled with fluff that shouldn't have been published, such as documentation, build files, and test code. Perhaps we need a shift towards only publishing those files that are integral to the execution of the package being installed, instead of essentially cloning the git repository.
React official documentation is pretty good. It includes a tutorial in building a tic-tac-toe game
Hey, that's awesome. I haven't tried `npm ci` too much yet. This technique doesn't really touch on the install time. It's more about reducing final artifact/image size.
Definitely agree with you, the first step is not to publish unused files to begin with. But it might not happen because the incentives aren't aligned. A package maintainer doesn't pay the cost of bloating up your artifacts or delivery pipeline. So IMHO it's unlikely to happen at a large scale. Maybe we could convince some the more popular packages but that's about it. It really depends on the structure of the package too. If you have a universal JS package like React which has both browser and server code, then you have no choice but to download everything. Unless the React maintainers decide to split up the package then you need something like refining to delete unused code.
[https://i.imgur.com/J7ImBj5.png](https://i.imgur.com/J7ImBj5.png)
###### From a user perspective: ### Empty search -&gt; Show all When I add a book, the list is repainted showing all books. But Once I make a successful search, there's no way to go back to seeing the full list. You could either make it so that an empty (all fields empty) returns all books and so shows the whole list, or add a button to "show all" with the same goal. ### Related Usability Stuff While that one is the thing that one notices immediately, there are other related smaller issues. For example, the search is _too limited_. If I want to search by title, I need to input _the exact title_ for the book. The same for the author. This is far from ideal because, since I am _searching_ I probably don't remember the exact or full title. Ideally, you'd want to have some combined search that allowed me, e.g. to type either `lord rings` and have it match `The Lord of the Rings`. But at least, you'd need to allow inputting `lord` and have it match `The Lord of the Rings`. Less important but a nice touch, would be to paint on the list which filters are active on the results shown. Maybe also with the total number of results found ("Showing: 3/28 books" or whatever). ### As part of a portfolio... As part of a portfolio, you _might_ want -but it's not terribly important depending on the type of jobs you apply to- brush the interface a little. More importantly, you may want to have it load some sample list of books. This helps enormously understand and appreciate in a glance that this indeed works. Otherwise someone may try to search for books without having added any and get the impression that it's not doing anything. In fact, this reminds me: You _need_ some feedback when no result is found at all. If you had that "Showing 0/28 books" indicator that would help, but even better if you make it pulsate on each search or something so that the user notices that yes, the search was performed but sorry no results were found. ###### About the code ### onload Avoid setting event handlers like this `onload="setStorageAndTableData()"`. Instead, in your Javascript, just do: document.addEventListener('DOMContentLoaded', setStorageAndTableData); But then again... ### Be consistent On the one hand, you're waiting to call `setStorageAndTableData` until the `onload` event, which is good, of course. But then again, you're running these... document.getElementById('addSubmitBtn')... document.getElementById('searchSubmitBtn')... document.getElementById('bookList')... ...as is, simply by relying on having the JS file load at the end of the HTML, which, again, is not bad in itself. The thing that is not so nice is that you do it both ways and so you end up with _two_ different initialization mechanisms. It is generally advisable to have _one single initialization function_, particularly given that the code is not really large or complex. You can then call this function _either_ by using the `DOMContentLoaded` event _or_ by relying on loading at the end of the `&lt;body/&gt;`. I would personally prefer using the event, but the important thing is that, whatever you choose, you do it _one_ way. ### Classes and structure You have this class, `UI`, and it is a class but it's not really a class. Or it _doesn't need_ to be a class. It's actually just five functions that are mostly unrelated and each does its own thing. One could try to argue after a brief look that maybe those 5 functions are all doing things on the UI. But even that is not really true. You have `clearSearchBookFields` which isn't even used, and you also have `deleteBook` which, well, removes a book from storage, so what it does is not really about UI. In fact, it feels kind of weird to have `deleteBook` on `UI` and `addBook` on `Book`. They are both very related operations and it would feel much more logical to have them both under the same thing. But back on `UI` for a moment. One of the things that really should make you think that it's not really a class -at least not as it is now- is the following: Each time that you want to call one of those functions, say, `deleteBook`, you create a `new UI()` which in itself does nothing interesting, and then you call the function you want, and then discard the `new UI()` you just created. That is, because you put all that into a class, you're now creating `UI` objects and then discarding them before and after each operation you want to make. the creation of the `ui` object does not really have any goal in itself other than letting you call the function. With the `Book` class, the problem is not exactly the same, because you do create an object which holds the book's properties. But it still feels fairly unnecessary. The only thing you do that for is to immediately call the `addBook` function and then discard the created `book` object. You could just have a `function addBook(title, author, owner) { ... }` that does the same thing _without_ having to use a class and creating a `book` object each time just to immediately discard it. ### On the search function Looking at the code, I noticed [this part](https://github.com/chrisYoder/libraryApp/blob/d866c47166e493b70b97e1bb8fab4d813a8a3d0d/main.js#L186-L198), which is the function that is making the search, and... I think it could be improved a lot. I mean, not the code itself, but the way of doing things from the user perspective. The problem is this: You're offering the user an interface where the user can try to search by _both_ title and author, or title and owner. ("Oh, yeah, that book Michael had... something like... blabla Flies...") The interface doesn't give much indication on how the search is performed. Instead, as it is now, with three available fields and one search button, it suggests you could indeed search by filling to or even the three fields. But then, not only is it a lie, but the user has no way of knowing it is until the perform the search and receive conflicting results. I search Title: Flies Owner: Michael, and I also get all the results for that huge collection Linda has about insects, instead of just The Lord of the Flies that Michael has. There isn't a single solution here, of course. You might simply not allow filling more than one field and be done with it. It's a valid solution... provided you indeed make it so that the user interface does not allow it and the user understands that they can't do it. Or you could build a more sophisticated search that allows filtering by multiple properties. You can choose whatever you prefer, but I think _something_ should be done. As it is now, the interface produces the wrong impression and is in conflict with how the code works underneath. And that's not good from a user perspective. If you use this in your portfolio, most potential employers will look and maybe try the application rather than look at the code (they may look at the code, sure, but later), so the user perspective is indeed quite important to give a good impression. ---- **Please understand that all of the above is not about you or your skills, but about your code. It is also meant to help you make it _better_ but that does not mean what you did is _bad_; anything can be improved. In any case, good job! You did a thing! and the thing works! Great!**
I don't mind some "fluff" coming with packages. For example, I would generally prefer that unminified source code, and build scripts are published. Two reasons: 1) If I am having an issue with the library it is much easier to go and inspect source code than minified builds. Of course one could go to the repo to do this, but then I need to work out which commit in which branch corresponds to the version of the package I have installed. Not always easy, often time-consuming. 2) Theoretically, it should be possible to run the build scripts and ensure the output is the same as the published built files. This provides some safeguarding against code-injection attacks. Without both the source and the build information (hopefully the build tools are specified as dev dependencies), this isn't possible. Similarly to point 1, it is also much easier to look for security vulnerabilities (intentional or otherwise) in source code than minified. I entirely get where you're coming from, and as a user of Docker on Mac with volumes my life would certainly be nicer with smaller node_modules. Perhaps some way of specifying "core" files would be useful. When installing packages we could then choose if we wanted only core files, or all files. The other point raised is that the state of the JS module system causes some of this. Having 3+ large compiled files for different environments is a killer. I would like to see npm get smarter about this, and allow installing e.g. only UMD bundles.
Man, this sub has really gone full retard over private field syntax.
I should have looked closer! Thats great news, going to start using it this evening.
Still waiting for [custom resolvers](https://github.com/Microsoft/TypeScript/issues/18896), Daniel ;)
Pure genius.
This is awesome!! I noticed when you explode and implode the head goes behind the neck. It should go in front of the neck for a more seamless experience.
Definitely agree. The advantage of a black box technique remains though. It's a hard check on your own system against the unused files. IMHO it has a similar role as CI: you can trust the source code or package but this will verify it.
&gt;At the same time, without this, JavaScript offers a new, unique way, of doing Object Oriented Programming without classes and inheritance. I guess you can make anything sound good with well structured sentences lmao
It's because of the lock file. If you update or install a package using one utility, the lock file will not be updated in the other.
Awesome, a year well invested.
Yeah I mean I'm not sure how I feel about the hash syntax but I'm very excited about JS getting proper private member support. As someone who has in the past made liberal use of IIFEs to scope some variables, it's about damn time.
damn this is cool. well done.
[React Easy State](https://github.com/solkimicreb/react-easy-state) is a practical state management library with two functions and two accompanying rules. 1. Always wrap your components with `view()`. 2. Always wrap your state store objects with `store()`. This is enough for it to automatically update your views when needed. It doesn't matter how you structure or mutate your state stores, any syntactically valid code works. Check this [TodoMVC codesandbox](https://codesandbox.io/s/github/solkimicreb/react-easy-state/tree/master/examples/todo-mvc?module=%2Fsrc%2FtodosStore.js) or [raw code](/examples/todo-mvc/src/todosStore.js) for a more exciting example with nested data, arrays and computed values.
Sweet stuff. I only glanced through the code quickly, but I noticed that you keep on creating a reference to the input element over and over when you could just assign it to a variable, say at the top of your script file, like this: ´´´ const input = document.getElementById("input"); console.log(input.value); ´´´ For the sake of maintaining a separation of concerns, I would also abstain from changing styles directly in the JavaScript. For a small app like this it's no biggie, but if you want to create something bigger, mixing layout with business logic quickly becomes a pain in the neck. So to hide an element, you could go about it like this: ´´´ css: .hide { display: none; } JS: element.classList.add('hide'); ´´´ Sure other people could provide additional feedback, but having said that, nice work and welcome to the world of JavaScript :D! 
pretty sure its not just reddit, there's quite a lot of issues in the github repo about it
I haven't looked at it but I've got to give you kudos for how much work you've put into the project so far and how much you've listened to people asking questions and mentioning bugs on here :) Side note but is it snowing in Germany? We've been hit by arctic conditions here in the UK and no one is prepared for it!
Outside of the lockfile, there's also the fact that Yarn and npm have different feature set. For example, if you have a project that uses workspaces and try to install it with npm, it won't work. Same thing if you use the offline mirror or the resolution override. Note that it's not only between different package manager: it's safer in general to use the exact same version of a same package manager, for the same reason (Yarn 0.1 doesn't have all the features available in the 1.0, for example). To help with this Yarn ships with [yarn policies set-version](https://yarnpkg.com/en/docs/cli/policies) which enforce the package manager version on a per-project basis.
I’ve yet to see a single complaint about it anywhere that didn’t boil down to aesthetics.
Then you can't have looked very hard. The Github issues are filled with concern about how it interacts with proxies.
Love it! 
&gt; When TypeScript has a union type A | B, it allows you to access all the properties common to both A and B (i.e. the intersection of members). So a typescript "union" is actually an intersection? Am I just stupid [1]? &gt; This behavior should feel intuitive – you can only get a property off of a union type if it’s known to be in every type of the union. Well, the behavior and notation looks intuitive, but calling it a Union type instead of an Intersection type is quite unintuitive. [1] https://277dfx2bm2883ohl6u2g3l59-wpengine.netdna-ssl.com/wp-content/uploads/2014/10/UnionInsersectExcept.jpg
This is what Simple Pjax does, right?
I want to thank you for your response. I do have some questions for you but I am on a break at work so I don't have time to pose them right now.
Ok, my mistake. There are kinds of complaints about private class fields: people complaining about the aesthetics and people being ridiculously melodramatic over nothing. GitHub issues for this proposal are *not* “filled with concern” about how they could interfere with proxies, although I will concede that is has been brought up from time to time over the years. This complaint, while valid, has nothing to do with the *syntax* of private class fields, however.
It's a union in that the set of valid objects is the union of the two types. But you can only access properties that are in both, so it's the intersection of their sets of properties.
Also available as a [desktop app](&lt;https://devdocs.egoist.moe/&gt;).
I recommend hosting for free on heroku :) not many people will click on an IP address URL 
It’s a union of the types because all As are A|Bs, and all Bs are A|Bs. If being an A requires a ‘color’ property, but being a B doesn’t; then A|B don’t require a color property, and it isn’t safe to assume it’s there. With intersections, each A&amp;Bs must be both an A and a B. If As need a color, then so must all A&amp;Bs.
Haha thank you, I’ll do that instead. :)
You can set up automated build and deploy super easy too! Check out my package.json [here](https://github.com/Larkenx/Rotten-Soup) for an example. 
It seems like they’re using sliders to generate the HSL color values, no gradients required.
Thank you so much! Really appreciate you taking out time for it! Thanks a lot! 
Just some additional notes mostly opinion based but the type of things I would drop on a code review in my shop. * You seem to use `let` and `const` inconsistently. To a person reading the code they convery different messages. When I see `let` I expect to see the variable reassigned and in the case of non primitives, the reference changed. Airbnb released a javascript style guide that has some good guidelines for stuff like this. https://github.com/airbnb/javascript#references--prefer-const * I notice in the search class the functions instantiate a variable called index, but the value is not used anywhere else. Perhaps this is remnants of prior code? * The search class has 3 functions are almost a 1 for 1 copy of each other. This is a code smell (https://en.wikipedia.org/wiki/Code_smell). You can abstract them to one function with some parameters to input. Something along the lines of: ``` search(elementId, field) { let books = JSON.parse(localStorage.getItem("books")); let filteredBooks = []; let searchValue = document.getElementById(elementId).value; books.forEach(book =&gt; { if (book[field] === searchValue) { filteredBooks.push(book); } }); localStorage.setItem("filteredBooks", JSON.stringify(filteredBooks)); const ui = new UI(); ui.render(); localStorage.removeItem("filteredBooks"); } ``` and then call it in each function like: ``` titleSearch() { this.search("sTitleInput", "title "); } ``` Benefits are are shorter code and then something in the search function needs to be changed, you have 1 place to change it not 3. * On that same note, in each of your search class's functions there is an empty array initialized and then a forEach done to do what `Array.filter` was made for. You can place this after the `searchValue` is populated in those functions but I would change it to: ``` const filteredBooks = books.filter(book =&gt; book[title] === searchValue); ``` so that whole class can be written as: ``` class Search { search(elementId, field) { const books = JSON.parse(localStorage.getItem("books")); const searchValue = document.getElementById(elementId).value; const filteredBooks = books.filter(book =&gt; book[field] === searchValue); localStorage.setItem("filteredBooks", JSON.stringify(filteredBooks)); const ui = new UI(); ui.render(); localStorage.removeItem("filteredBooks"); } titleSearch() { this.search("sTitleInput", "title "); } authorSearch() { this.search("sAuthorInput", "author "); } ownerSearch() { this.search("sOwnerInput", "owner "); } } ``` Which if you have to maintain this down the line, would be much easier. There's some other minor or opinionated things, but what the above poster shared and this is what jumped out at me. I also want to echo what they said. This doesn't mean what you did was bad, but there's an opportunity here to improve and learn.
Works great on my Pixel
Works great on my Pixel
Not very mobile friendly but very impressive!
@Op you did an awesome job! :)
Are you asking or sharing your blog post?
Ah, i see the problem. You're trying to figure out what `this` is. That knowledge is only for the old gods to know.
Not this `this`, this *this*
Reminds me of that dinosaur minigame from firefox when your connection goes down. I could see kids really digging this once it's done and published. 
I’m really glad to here that! :) ty
`(z.b)()` still retains the context of the method call. You're not getting `(b)()`, you're still getting `(z.b())`. Single expression parens will retain these kinds of associations as it also allows operators like `delete` to work when using them. For example: a = { b: 'b' } delete (a.b) // works rather than being seen as delete('b') a // {} Same applies to calling functions through parens. Note, however, that if use a comma-separated list within the parens, the comma operator will evaluate your expression returning the value. a = { b: 'b' } delete(0, a.b) // fails being seen as delete('b') a // { b: 'b' } Same applies to calling functions... z={a:1,b:function(x){console.log(this);this.a=this.a+x;return this.a}} (0, z.b)(5) // window So that's an option. Might be clearer to just save it off as a variable, or use `call()` to explicitly show what you're expecting as the context of the call to be. z.b.call(window, 5)
This is awesome OP. Great job.
Thank yoiu for the explanation. &gt; `(z.b)()` still retains the context of the method call This is the part that makes me confused. Which expressions retain method call context and which do not? Is there a rule for that? Also, what is the benefit of preserving such context for such a limited number of expressions? I may understand special casing `delete (a.b)` so that people could think of `delete` as a sort of built-in function, at least on a syntax level. But saying things like `(z.b)()` clearly means that the property value should first be extracted and then called as a function. This is all completely theoretical at this point. Practically speaking, I agree with you, `z.b.call(window, 5)` is the best way to say it and that is what I would do if I had to do it. I discovered this effect while debugging something else and it just bothers me because I do not understand why expression (0,x) is different from (x)
Hi, thanks for the suggestions. We’re adding distance/time calculation and some transit options in the update after the next one. Will note the suggested activities, thanks for the idea :)
I shared my blog
I use this with babel, it’s great apart from the lack of editor support 
Hi /u/ndrw17, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/0li4, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thanks for sharing this. And thanks for this great library, I‘m using it in a personal project and it really plays to its name- it’s easy! Great job!
That's pretty neat
I can recommend you this babel macro: https://github.com/dralletje/idx.macro
Webstorm supports this I think
Hi I think that for now the "easiest" way to upload images with ajax is to encode/decode them to base64 string. So on the frontend you need to encode your image to base64 string and send it as regular string to the server. You can do this with canvas API(Yeah, veeery "easy" way ...), here an example: const imageToBase64 = imageSrc =&gt; new Promise((resolve) =&gt; { const image = new Image(); image.onload = () =&gt; { const { width, height } = image; const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d'); canvas.width = width; canvas.height = height; ctx.drawImage(image, 0, 0); return resolve(canvas.toDataURL('image/jpeg')); }; image.src = imageSrc; }) &amp;#x200B; In your express app you can decode base64image to binary image with next function: const decodeBase64Image = image =&gt; { const matches = image.match(/^data:([A-Za-z-+/]+);base64,(.+)$/); const buf = Buffer.from(matches[2], 'base64'); return buf; }; &amp;#x200B; You can try to upload both base64/binary formats of the image to cloudinary to see what will work for you. &amp;#x200B; Hope it will help you :) 
The mechanism behind this is _references_, (object, property key) pairs which are not affected by parentheses: http://2ality.com/2015/12/references.html Note that in strict mode (which is on by default in ES modules), a function call is equivalent to `.call(undefined, 5)`.
Sure. Ask any questions you have.
503 Service Unavailable
Hi, it's a digest, which means it's a selection of links with the most recent news and updates. And well, it takes time and effort to analyze and pick just the most relevant updates and not spam readers with useless articles.
Type theory is very closely related to set theory and logic. A JavaScript object is an example of a [product type](https://en.m.wikipedia.org/wiki/Product_type) because it is the combination of other types in a structure. Product types correspond to [logical conjunction](https://en.m.wikipedia.org/wiki/Logical_conjunction) through the [Curry–Howard correspondence](https://en.m.wikipedia.org/wiki/Curry–Howard_correspondence). Union types, logical disjunction and the union of sets also correspond. This means that the standard rules of logical conjunction and disjunction also apply to types. In this case the confusion is caused by the distrbutive property of logical disjunction, which says that the disjunction of two products distributes: `(A&amp;B) | (C&amp;D) = (A|C) &amp; (B|D)`. A typescript example would be the union of two objects. // a typical product type type T0 = { x: string, y: number } type T1 = { x: number, y: string } type T2 = T0 | T1 // should be { x: number|string, y: number|string } declare const obj: T2 const y: string | number = obj.x Type this into vs code and verify that the result type checks. The author of the article probably should have explained this at least a bit, because I've seen this same confusion by multiple people on multiple threads today. Most programmers don't know the link between types, logic, and sets, but knowing really helps in understanding your programs.
Desktop link: https://en.wikipedia.org/wiki/Product_type *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^235537
Traffic maybe. kindly retry sorry
Assuming you have your anime.js animation (autoplay: false) in a variable, you can build a scene like this: animation.pause(); const scene = new ScrollMagic.Scene(sceneParameters) .addTo(controller) .on('progress', function(event) { animation.seek(animation.duration * event.progress); }); } 
For the same reason that DRM is very dubious: It's impossible to get perfect, and you're probably better off spending your time on something else. In this case, the "something else" is preventing script injections in the first place.
Fantastic work!
so basically it's exec(ssh-keygen) with unsanitized input?
&gt; I'd like to have some feedbacks. I played it and after three O in one row it said "X wins". That's Tic-Tac-Toe with a plot twist.
Yeah, that ain't gonna help. It reads like a monad tutorial, which is beautifully written for someone who already knows monads.
This is really well made, the JS is concise and easy to understand. &amp;#x200B; It just irritates me that the hips don't line up with the torso
\`text.replace(/(\\d\\d\\/\\d\\d)\\s+\\d\\d:\\d\\d/g, '$1')\` should do it. To break this down, you're using String.prototype.replace(Regex, string). The regular expression you use wants to capture all occurrences in your string, so it should be global i.e. /regex/g. You want to capture two digits, a slash, two digits (\\d\\d\\/\\d\\d), then one (or more) whitespace characters (\\s+), then two digits, a colon, two digits (\\d\\d:\\d\\d). You want to replace all of this with just the date section, so you wrap it in brackets to make it a capture group. You can then reference this capture group in the replacement string as $1 (the first capture group). Hope this helps.
Thank worked, thank you :)
No worries - for situations like this, I highly recommend using [regex101.com](https://regex101.com) \- you can enter a regular expression, set the flags and enter a test string, and it'll break down both exactly what your expression is trying to do, and what each match/capture group is from the matches string. You can also switch to Unit Test mode, which lets you run the same regex against multiple input strings to make sure it works in every case for which you need it.
Great stuff 👍
Definitely instanceof. Although I have experienced some weird behavior with using instanceof in the past and had to resort to using the constructor.name. I don’t remember right now why that was the case. 
Ill try to update it as soon as I can to make it more understandable and beginner friendly. Thanks for the feedback though. Cheers!
Since I've seen extensions that can export files I imagine its doable. You'd need to save every page load for the entire duration of the session, or maybe in the chrome browser store (for extended logging) and then export it on request. Google around a bit how chrome extensions are made, recreate one of the timer ones and add the export feature. Friendly tip - chrome can be a snowflake when it comes to the way tab DOM and the extension communicate, just have that in mind
Chrome isn't OSS at all. Chromium is. While Chrome and Chromium are very closely related (Chrome is essentially "Chromium plus bits") and it wouldn't make sense for them to diverge at all on things like rendering behaviour, we have no way of accurately knowing exactly what differences are\[n't\] in the source that is used to build Chrome beyond the published and otherwise obvious differences. There is nothing to stop "Chrome is essentially Chromium plus bits" really being "Chrome is essentially Chromium plus bits and other significant changes" if Google so desired.
Nobody can explain monads. The moment you understand monads, the mental transformation means you are then incapable of explaining monads.
What does this offer over `ssh-keygen`?
It's as if author of this article she showed us how to use bucket to remove water from sinking ship instead of fixing holes
Nice. I like it. 
Holy shit snacks!
Can't really decide if I should be happy or scared. 
I'm not sure what I should think about Play store PWA's. On one hand, I'm working on a little personal project and I could (relatively) easy publish it in the store, that's cool. But some other guy can do that too, so there will probably an influx of a lot of fluff apps. My personal project could be fluff also haha. 
Google's grip on the web grows stronger by the week
BTW, does anyone know how to get a full list of a DOM node instance *properties* (not to be confused with *attributes*)? E.g. `Object.keys(document.body)` does not return anything even though if you unfold the DOM structure it will show that the object is ultimately inherited from *Object* and hence *keys* should work. I have browsed this for a while but still could not find anything of use, but maybe I am missing a big time? One mention though: I want to iterate through a concrete instance's list of properties, not through a list of properties of the *Node* object class (prototype) or the properties it inherited from its superclasses or amended by its subclasses. Usually, such list would coincide but Polymer library sometimes generates nodes that are not an instance of any standard DOM objects anyway. 
Exactly... :(
Personally I let the backend provide user friendly error messages, and the frontend behaviour change if the response 4/5xx, with a fallback case of unknown error. I don't want to accidentally let any bad error leaks to the UI
This is cool. It's also a blog post describing how to open yourself up to remote code execution. \`/eval while(true);\`
Well done, it's so cool!
Its a good sentence but i disagree. I prefer: If you can't explain it simply, you don't understand it well enough.
I think my project is far enough for some review now :) Any Vue.js developers out here? It is a static website for managing/viewing an interactive organization chart. [https://github.com/Hoogkamer/vue-org-chart](https://github.com/Hoogkamer/vue-org-chart)
Dan Abramov has a great blog about some of the inner workings of react: https://overreacted.io The react code base is open source and extremely well documented if you want to go poking around. They also have advanced documentation at their reactjs.org site that is super quality. 
They want to take 30% cut from PWA too???
google dont own the pwa concept what should scare you is a million shitty web apps on the playstore
Which means no one I've ever talked to about them understands them well enough. 
JavaScript really is taking over. 
It's web technologies they are taking over.
Why would that scare me? There's already a million shitty apps on the webstore. 
&gt;what should scare you is a million shitty web apps on the playstore It does. The million shitty native apps on the playstore are already bad enough.
Thank you for comment and please share any and all feedback that you have. These are all great learning opportunities.
This tutorial shows you how to build a simplified react making dom nodes out of a vdom: [https://blog.javascripting.com/2016/10/05/building-your-own-react-clone-in-five-easy-steps/](https://blog.javascripting.com/2016/10/05/building-your-own-react-clone-in-five-easy-steps/) &amp;#x200B; Next step i guess would be learning about the reconciler: [https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5](https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5) (the update pretty much is what you're after). &amp;#x200B; This knowledge isn't for nothing in the end, you can now create custom renderers - or make your own lib.
\-1 for "joi". There guys were trying to invent it's own declarative validation language and they failed. You can try to declare strong validation within multiple overlapping fields. You will feel the same pain that I have everyday when I have to work with this "joi" projects. Please do not start new projects with it.
It's a non issue. The rating system does a good job of hiding shitty apps
Phonegap/Cordova lowered that gap way before React Native was a thing.
The better technology gets, the shittier people are writing code. We got to the moon on significantly less RAM than a single chrome tab. Trends of bad design and inperformant code across the industry is bad news.
Which in the case of PWAs, is mostly JS.
PWAs are a set of open standards. They're not owned by Google.
Well until Web Assembly comes along and everything changes yet again. I hope that happens even though I strictly code in JS nowadays (Node and Browser) 
For now this seems like a bit of a hack, as you're essentially just manually replicating what Chrome does when it generates APKs on the fly from PWAs. I'd love to see this get native support from the Play Store, so you can (for example) just paste a URL to publish a PWA instantly.
I started out using different error classes and `instanceof`, but for various reasons that I don't want to go into changed to only using the standard JS Error classes. However, I use tiny functions named like `decorateAsFileNotFoundError(err: Error): Error`. The error object itself is create when the decorator function is called so that the stack trace is clean (if I created it in the decorator function it would appear in the stack trace). The decorator function 1) changes the `name` property (e.g. to "FileNotFoundError") and adds any custom error properties that I want to have on the error object.
What it means is this. Take `await` for example. If you use `await` inside an async function, then `await` is understood as a keyword. But if you're _not_ inside an async function, then `await` is not a keyword and you can use it as a valid name for a variable. That is, the following code is _valid_: function f() { let await = 7; console.log(await); return await; } f(); Why is this so? To avoid potential backward compatibility conflicts. Should you, today, name a variable `await`? No, you should not.
For the worse
Of course they will 
Well you know who make those standard? Basically what is implemented in Chrome is standard now a day. And guess who own or at least maintain Chrome and Chromium?
You have to have an `if` statement or some other type guard to access properties that are only available on one or some of the types in the union, but you can access without a the guard those properties that all of them have in common. That's quite common sense and logical I'd say? :-) After all, "union" means you could have any of the types in the union. So you need to have code that checks which of those types you actually got, during runtime, this is not a decision that can be made by the type system during a static check. After all, the static check is deliberately kept vague by using the union instead of a specific type in the first place.
he said, in /r/javascript
&amp;#x200B;
Cordova wasn’t as good imo. 
&gt; essentially just manually replicating what Chrome does when it generates APKs on the fly from PWAs Is that was Chrome for Android does when you "Add to home screen"? 
&gt; We got to the moon on significantly less RAM than a single chrome tab. That doesn't really mean anything, it's like saying we created the atomic bomb with the same metal casing that is used for soft drink cans, lol. Missing a whole lot of context around each example. Specifically how computers have advanced many times over since the 1960s due to advancements in science and electrical engineering and so nobody can reasonably expect to achieve anything in 2019 with only a Chrome tab's worth of RAM to spare.
It is not _redefining_ `let`. The thing with `let` is that syntactically, by looking at the place where it is used, you can clearly distinguish both usages.
okat, that make sense to me, thanks. so \`let\` is not a keyword as \`var\` ? 
I'm a noob, where can I learn to write Vanilla JavaScript in module/React style?
Yes, that's what I'm referencing.
Definitely not but it pretty much got PWA's/Web apps onto the store before now and is something that can be put onto the App store until Apple tells us all that they've created PWA's.
Your false equivalence makes me think you are half as smart as you think you are. Mr Code Genius I suppose. 
It wasn't, but you could EASILY make a web app and push it though the store via Cordova. 
https://www.ecma-international.org/ecma-262/6.0/#sec-keywords That is the list of keywords. Notice the note: &gt; In some contexts `yield` is given the semantics of an Identifier. See 12.1.1. In strict mode code, `let` and `static` are treated as reserved keywords through static semantic restrictions (see 12.1.1, 13.3.1.1, 13.7.5.1, and 14.5.1) rather than the lexical grammar. Also, in the next section: https://www.ecma-international.org/ecma-262/6.0/#sec-future-reserved-words
The standards are maintained by the W3C, an industry consortium composed of a large number of different companies, individuals, developers, and browser vendors. https://www.w3.org/Consortium/Member/List "Implemented in Chrome" isn't enough to make something a W3C standard (though I believe having at least one real-world implementation is one of the minimum requirements).
Oh god no
This is really cool, but I don't wanna mess up my contrib graph! :D
Well, Microsoft Store has done this better. You can access all the APIs available in Windows, and do whatever you want through `Windows` object. In Android, you can not do anything except pushing poor notifications lol. 
I do full-stack and love JS (TS is even better). The web stack of today is however just not compatible with native. Google are just pushing the PWA narrative so hard because web is their strong point. It does solve a lot of problems, but it's just not native. Quality will suffer greatly.
It doesn't matter if it's native. Apps are here for users. That's the point. Native, web, it really doesn't matter. You go with what gets your app done, that your users need/want/like, and you go from there. It just so happens to be easier to make a PWA than a full-blown native app for every platform, so we'll keep investing in the web for that purpose.
Thanks for the first link. The first two articles (from the bottom) explained most of my pending React questions.
Lets hope that WebAssembly takes over or JS is gonna eat the Web Application ecosystem
That’s the feeling of macOS users seeing Marzipan apps.
It’s a language rule. The reasoning is that calling `super` ensures the base class has been properly constructed and you want your base class to be constructed before you start using anything from it.
Excuse me? You're not making any sense. As technology has improved software has also become bloated, in part due to being lax with easier requirements.
`super` needs to be called first because it needs to appropriately initialize the object being constructed. If you extend Object, an Object needs to be created. If you extend Array - a special kind of Object - an Array needs to be created. This won't happen until `super` is called so you need to call `super` before you can access the new instance object. In fact this behavior helps allow objects like Array to be extended now with the class syntax because it allows the instance to be an Array with its internal slots initialized before available as `this` in the child constructor. Before, or in using the older constructor function syntax, you'll always have an Object object as `this` in your constructor, and you're manually responsible for making any kind of super-like call.
You need to learn class (or prototype if you want old-style JS) first. &amp;#x200B; Then you create a boilerplate class (Component, in my case), which does all the logic (well, most of it, at least). Here is the Component class. If you have any questions, shoot: &amp;#x200B; [Framework + Example](https://pastebin.com/dfedV8PT)
Classes are part of the language. This code doesn’t use JSX, it use template strings to create an HTML string that one would presume is then set using `innerHTML`.
sad, just sad. 
Even with this standard around. There are still a bunch of CSS or even some JS functions that work or not work on different browser. And btw I don't think the w3c is followed strictly by everyone https://stackoverflow.com/questions/5645258/google-doesnt-follow-w3c-standards-whaaa So basically if you have Google with web services like youtube, gmail, and other doesn't follow standard then other browser will have to implement them then it become the standard. Which is why I think Google actually have big control over the standard now.
&gt; Specifically how computers have advanced many times over since the 1960s due to advancements in science and electrical engineering and so nobody can reasonably expect to achieve anything in 2019 with only a Chrome tab's worth of RAM to spare. That's nonsense. Great acheivements have been done with far less. But now as general bad practices have led to less care about memory, we are in a shithole. Just see Electron. It is a great concept, but uses far more memory than it should. Simple text messaging apps like Discord and Slack shouldn't use up the majority of RAM on a system. Other people have decided to be smart regardless: https://youtu.be/ZWQ0591PAxM Because we've gotten used to large capacities engineers have gotten worse about minimizing resource requirements. And that's a bad thing.
What makes you say this is vanilla? You’re using some library to set click handlers, CSS, and render. Is learning that library first really that much better than learning React especially when you’ve gone to some extent to make your code look like React?
Such a frivolous and surface level analysis, but go on please, seems like you have all the answers 
Haha, you only live once, go for it 🤙
There are about a million new apps added to the store every year. I'm not sure how different it would be if there were 10 million.
From an inheriting point of view, it completely makes sense. My question is what if in a condition such that my sub-class need not inherit properties from the base class? Calling `super` here doesn't make sense since I'm not inheriting anything from the base. Which means I should get away easily by using `this` but instead get an error `Error: this is not defined.` This contradicts with the `new` operator of JavaScript. Which says it [creates an empty object first with the context `this`.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) 
My code looked like React before that framework even came to be. I am not using any external libs, as you can see [here](https://pastebin.com/dfedV8PT). I didn't post core engine features in the main post because I wanted to see whether people will understand what components does on first look.
cool. I did not know that. Was wondering how PWAs worked exactly but that makes sense now
Yes, not every browser fully complies with all standards. That's not related to PWAs though; PWAs _are_ a W3C standard (or rather, a set of W3C standards).
&gt; This won't happen until super is called so you need to call `super` before you can access the new instance object. But the new operator does [create an empty object first with the context `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). So, I can access the new instance object. 
It's very hard to know what exactly is the matter with some example code if you do not show such example. If I run this: class P { constructor() { }} class C extends P { constructor() { this.a = 9; } } new C(); The exact error I get is nto about `this` not being defined, but very explicitly: ReferenceError: must call super constructor before using |this| in C class constructor (Firefox) Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor (Chrome) So there is no contradiction. `this` is not undefined, but you can't use it before calling `super()`.
What do you mean by 'the majority of RAM on a system'? Discord is currently using 150Mb. There are so many other processes, interactions, and things happening in a modern application, that I don't understand how you expect today's apps to run on yester-years RAM/CPU. Now, I'm not arguing that there aren't terribly optimized and horribly designed pieces of software out in the world, but that's a very different story than 'two of the biggest applications for communication are using more RAM than computers did 30+ years ago'
How could they take a cut in my app if it's a subscription based web app and not something you pay for up front? I feel like loads of PWAs would also have this model.
JS is growing rapidly despite popular alternatives like Python. So I don't see WASM changing that trend. 
They can reject your app from their app store.
The bridge between native and non-native mobile app performance is thinning. React Native keeps getting performance boosts, so does flutter, I don't see why PWAs can't do the same. 
&gt; My question is what if in a condition such that my sub-class need not inherit properties from the base class? Then it's not a subclass.
What I understand is that this creates incredibly non-secure html that's just asking for some injections into whatever site uses it.
I'm sorry but I don't see how is this not related to PWA? To me PWA are just fancier Web App. They still run on the browser. Maybe they look and feel more Native and work offline but they are still web app. So it is directly related IMO.
The original comment I responded to was this: &gt; Google's grip on the web grows stronger by the week That's not applicable to this development, since PWAs are an open web standard maintained by the W3C. Unless you can point to some specific part of the standard Google is implementing incorrectly here, there's nothing in this article that tightens "Google's grip on the web".
`super()` can technically return a different `this` value, which the child constructor must use.
I see some React-like component there using jquery and weird html templates that wouldn't be composable. So yeah, writing a React-clone is normally what "vanilla" is supposed to mean i guess, the exact same happened with todoMVC-vanilla. I just don't see the point. I don't think anyone ever claimed that learning React before javascript makes any sense. It's usually the web-api for composition they're referring to and they are mostly right, it can be utterly useless.
Yep, I know. Why is this dude even creating a subclass when he's not inheriting properties from the base class. I was just trying to understand the underlying working of JavaScript.
Hi @smurfpappnenene, I didn't mind any single of your words. I was just trying to prove my point, and I agree with a lot of your points, and thank you for the conversation. BTW I didn't author that library. I'm just a fan of this library. I also use Svelte and Vue, and I love those. Things like Unpoly or Stimulus are for programmer's happiness and productivity. Of course they won't be as performant as Vue.js on desktop computers or phones of reasonable power and memory, and won't be as performant as Svelte anywhere. But using Unpoly will make your life a lot easier if your application is simple, and you want to minimize the labor as much as possible. 
Im not sure how Google is implementing their PWA based services, but as you acknowledge that W3C aren’t being followed by everyone there is no saying that Google would just go doing their own stuffs in their Chrome browser and then just call it standards.
This articles section on Monetization with the Play Store didn't really explain how Google intends to take their cut from a subscription based web app.. if I don't charge an upfront download cost and handle subs through my own mechanisms like stripe, how would Google attempt to get their cut? Is the $25 publishing fee enough for them to be satisfied?
With older style constructor functions, yes. But with classes, the base class is responsible for creating `this`. If not in the base class (instead in a derived class - a class that extends another), `super` needs to be called so that the base can create `this` before it's used.
The code style is fine, you’re just missing all the stuff behind the scenes that React gives you. The virtual DOM and the reconciliation between different states of the page, for instance. However, I don’t think it’s correct that vanilla and React are an either/or thing. You can write React without knowing vanilla, I guess? But it won’t be nearly as good, and inevitably you’ll run into something that you wouldn’t be able to solve. 
That's not what's happening here though. PWAs are a W3C standard. Google implemented the standard. There's no point in criticizing Google over completely hypothetical scenarios that you just made up on the spot. Concerns about Chrome's market share are valid, but I don't see how they're related to an article talking about how Google implemented an open web standard in Chrome on Android.
Maybe try recreating something you've made previously with Java using Node.js and when you get stuck, look up the equivalent code on StackOverflow, Node.js Docs, MDN etc.
The two languages don't share much beyond some syntax decisions and the name. I've always liked [eloquent javascript](https://eloquentjavascript.net/) as an intro to the language. I'm sure others have different preferred books.
Sorry about that error message. I've edited my comment to highlight the correct message. The thing is now if I try to replicate the same class behavior using normal functions, I can make it work. ``` function P() {} function C() { this.a = 9; } C.prototype = Object.create(P.prototype); C.prototype.constructor = C; new C(); // C {a: 9} ``` Please correct me if my replication of `class` behavior is wrong. From what I know it's just syntactic sugar. I'm still trying to learn JS. 
In that regard you are right, but things like Objects, loops and variables are used in programming in general and that is my "issue" with the tutorials I've seen. but thanks a lot for the book recommendation, gonna take a look at it!
Thank you for the talk you shared, I watched just the first 5 minutes of it, but I loved it and saved it my watch later collection. There is a solution for this JavaScript frameworks' war Adrian mentioned about. Elixir community developed things like [LiveView](https://elixirforum.com/t/phoenix-liveview-blog-posts/16527) and [LiveEex](https://elixirforum.com/t/livecoding-eex-template-improvements-twitch-livestream/18116) which will make 95% of (phoenix based) projects ditch JavaScript altogether. 
If you want to look into the underlying working, you'll probably want to go beneath the veneer of classes and inheritance (they are just syntactical sugar) and consider how objects link to other objects, forming a prototype chain along which behavior can be delegated. In JS, behavior is not shared, (as in all instances of a class have their own copy of method) rather it is delegated up the chain. If the object up the chain (to which one wishes to delegate behavior) had not been created, there is no objection to hold the method. 
From what I know, I think each sub-class constructor has its own `this` context. So yes it differs from parent to child. 
Well that would be rather hard as havent really created any programs so far. Up to this point we did a lot of computer theory and programmed things like finding the longest plateau, where you would read a number like 11122234111133334 and had to find the longest "string" of numbers
Hi /u/Marv_tron, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/Riyenz, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `codedam.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [codedam.com](/search?q=%28and+site%3Acodedam.com+author%3ARiyenz+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|15|83% [self.learnjavascript](/r/learnjavascript/search?q=%28and+author%3ARiyenz+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|2|11% [self.javascript](/r/javascript/search?q=%28and+author%3ARiyenz+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|6%
MDN Docs on JS were the best for me.
could you explain what you mean?
However, the hypothetical scenarios did happen before as shown earlier that Google and others do not strictly follow the standard for their service. If they do not follow it before what make you think they will strictly follow it in the future for PWA? How are they getting more control over the web? As you can see now they want to regulate PWA by having an App Store for Android PWA now. Which mean that’s now they have the right to say what is ok and what is not for all those PWA that want to be packaged and sell in the PWA App Store. If these PWA do not comply to their rule then Google will just reject the app and the app developer won’t get access to all the Android users. Of course they can just go the route of running on browser paths, but that isn’t the objective of PWA is it? To make it as native as possible. Plus I bet that they will also try to get the 30% cut like they do on their play store. This make is so that the devs will likely want to comply and do things Google way and those way will be push to standard due to popularity regardless of them being good or now. I will admit that I don’t know much about PWA and from what I read from articles they are just fancy web app that look and feel native.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide
ahhh thanks!
That's even cooler.
In JavaScript, `super` refers to the parent class constructor. You can’t use this in a constructor until after you’ve called the parent constructor. JavaScript won’t let you. There’s a good reason for why JavaScript enforces that parent constructor runs before you touch this. Let's consider using this before `super` call is allowed: class Human { constructor(name) { this.name = name; } } class PoliteHuman extends Human { constructor(name) { this.morning(); super(name); } morning() { alert('Good morning!'); alert('My name is ' + this.name); } } `this.morning()` is called before the `super()` call, that it's where `this.name` is set up. So `this.name` isn’t even defined yet. To avoid this scenario, JavaScript enforces that if you want to use this in a constructor, you have to call `super` first.
I was just reading this from https://javascript.info/class-inheritance &gt; The difference is: * When a normal constructor runs, it creates an empty object as `this` and continues with it. * But when a derived constructor runs, it doesn’t do it. It expects the parent constructor to do this job. and your comment, and finally both makes sense. So old-school constructor functions to create the prototypical chain and `class` (the new syntactic sugar way to replicate the behavior) works a little bit different when creating the `this` context. The latter former's sub constructor can create `this` in its present context with the `new` keyword but the latter doesn't and hence relies on the base class to create the `this` context. Did I get this right?
It's the same value, but the super-class is allowed to return an alternative `this` that the sub-class must use. A code example makes this behavior clear. Class syntax on the left; the equivalent ES5 on the right. The sub-class constructor needs to respect the `this` value passed from the super-class. [Playground example](https://typescript-play.js.org/?noEmitHelpers=true&amp;target=1#code/MYGwhgzhAEBCYCdoG8BQ0PQJYXggkgHYQAuYhwAptALzQkICulA3KgL6qqiQwBiAewHRKADxKVCAExh4U6TMAHEGjYCQEIAFAEp5mA9AiMADpW062BzgZyCBRUuSq16TVhy4AzRhRJZlOEQAJl19TAB6COgAYWVSJnVNaARKEkYEYmgwEAlMsH8AN2oAAxIACxwShQxU9MyUHDxgxzIKSgAuN2Z2Nk5ucChoe2CRcUkZIIRRtAMlFUSNC3DDI1NzXStMG0w7IVbnajpVD3YgA)
Oh my god !
I'll be honest here. Everything went out of my head. 
Yeah sounds about right. I think its easy to get caught up in the "`class` is just syntactic sugar" hype, when that's not exactly the case. There are other inner workings at play that create some fundamental differences that go beyond just using constructors by writing them differently in code. Construction and super are the key differentiating factors. With constructor functions, the instantiated class (the class called with `new`) creates the instance, and its always an Object object, and applies the basic proto association with that class's prototype. Any association made with a super class has to be managed by you, and this usually means taking two steps (assuming "Sub" is the subclass and "Sup" is the superclass): 1. Prior to construction, update the derived class's prototype to inherit from the superclass's prototype. Old school ways had this being done with `Sub.prototype = new Sup()`, though that has shifted over to being `Sub.prototype = Object.create(Sub.prototype)` or better yet, Object.setPrototypeOf(Sub.prototype, Sup.prototype)` as the latter retains the `constructor` reference (though you can always fix that in the others) 2. During construction, run the super constructor against the already created subclass instance to initialize that instance through the superclass, usually always via `Sup.call(this)` `class` definitions instead depend on the super classes, specifically the base class, to create the instance, and then passes it down to the derived class(es). So instead of starting with an instance and (optionally) passing up, as is with the case with constructor functions, you (not optionally) invoke up, and depend on the superclass(es) to provide you with the necessary instance coming back down. All of the other stuff around inheritance - such as prototype association, and even more - is handled automatically by using the syntax.
I didn't like that sort of stuff either, but at the same time it's not exciting to me to not work with a UI. It's like, I like theater and acting for the interactions even if I don't personally want to do costume and set design that's still necessary for a show. Perhaps you can get into a similar position to mine: We have a corporate UX design team that provides our components libraries (albeit, with typically limited APIs and little framework) that handles all of CSS and most of the HTML beyond our scaffolding. I work on the UX of a product implementing these components. Most of the work is maintaining existing pages, which often amounts to JS bug fixing. When we do create a new page, there's typically a pattern to follow so the HTML work is minimal and the CSS is almost nought, though sometimes we need to make our own little tweaks. If we do need an entirely new pattern, we can ask our design team for advice and they typically provide a layout. I appreciate this, but at the same time I would prefer to be wellrounded so I can start working on my own full stack projects and have more transferable skills. I suppose my advice would be to suck it up and start by using frameworks with existing component libraries. They'll handle most of the design-based implementation details and leave it to you to more or less drop components around and otherwise focus on JS. At the same time, it'll keep you dabbling in design and help you grow more comfortable. Likewise you could participate in open source projects and focus more on the engineering side of it. Perhaps some day once you find yourself better at design, you might actually learn to like it, designing your own components with custom CSS. 
Hi /u/monkeyguy2017, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Having PWAs on the Play Store doesn't give Google any additional control over them, as PWAs can be installed directly from the web. Having them on the Play Store just makes them more discoverable for some users.
There is an ideology espoused by Cockcroft and Eric Elliott that classical OOP inheritance is bad and prototypal inheritance is the only way - one should never use `new`, `this` and so on and that multiple inheritance is apparently an anti-pattern. This all may well be true, but in the real world, this isn't how people do stuff. It's only when writing APIs in Express that I can manage a pure functional project. For me, coming from university in the early 00s where OOP was the most important thing ever and we did everything in Java it is very difficult to get into the pure functional mindset. I've never used Java on a 'real' project in my life, but that was three years of my life. I understand the religions of immutability, pure functions and avoiding side-effects, at the same time, I just honestly don't know how to scale a massive extensible project without inheritance and only composition. Yes lambdas and scope are amazing and that it is all very well; there's also smaller issues, like, how do I make promises and await and async functions without `new`? These articles write about how classical OOP is bad and why the prototypal approach is the only way, try and make sense of them if you will. To me it seems ideological more than anything. [https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3](https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3) [https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4](https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4)
Are you implying you can't write insecure code using React / Angular / Vue?
No, I'm saying that by design it's a lot safer. The way you're creating HTML means that the programmer has to manually escape everything before passing it in. When a component creates HTML, it should do it properly, with proper escaping. It's not even just a security thing. If you pass something that looks like partial HTML to any of those variables, you'll break the whole page.
I don't think there is a one-size-fits-all solution here. I do like a psuedo-enums solution where applicable: const OPTIONS = { one: { stuff: 'cool', thing: 1 }, two: { stuff: 'neat' thing: 2 } } const condition = 1 &lt; 2 const key = condition ? 'one' : 'two' const data = OPTIONS[key] 
The virtual DOM is missing, but it can be very easily created, I just don't feel the need to use it, as I use getters and setters to target spans / divs and, while incrementing specific number, also edit the element there directly without having to re-render the entire components. &amp;#x200B; set quantity(val) { this.quantity = val; \_('some\_quantity\_id').html(this.quantity); } &amp;#x200B; I had a shit ton of snippets like this a lot of years ago when I was trying to create an incremental game, and it worked pretty well. On a website, however, I don't find it often that I need to actually do that (maybe sometimes with Cart, as the snippet above suggests). &amp;#x200B; as for the reconciliation between different states of the page, if I believe I understand what you mean, I write that from scratch for each app. Code looks similar tho, using history.pushState and popState for navigation (thats what routes.push() and view are for, in my first post snippet) &amp;#x200B; If I was building apps with over 100k, or even 1m lines of code, sure thing, I'd use React or Angular. But having only 5-10k lines in my apps this framework does the job pretty well. Only thing is, you gotta be careful with inputs, but node validator does that for me so it's all ok. &amp;#x200B; Thanks for the replay. Seems like the only one that isn't unbiased here.
If you haven't really made any actual programs, even simple ones, in Java then just pick up any tutorial out there. There are very good ones online to help learn the basics of JavaScript. Learn the language fundamentals first, then move on to things like nodejs and various frameworks.
On the implementation side, your link isn't wrong [but there are more details](https://github.com/tc39/ecma262/blob/master/workingdocs/ES6-super-construct%3Dproposal.md). In particular, 'class X extends Y' means that your blank object's constructor is Y, not X. 'super()' is how you bring the constructed Y into your subclass. If you do have a reason not to do that, you could just work on a different object and then 'return' that. Without a super() call, the Y would never be constructed, so you're not losing performance. That said… I'm not sure why you'd want something that 'extends Y' without actually extending a Y. 
&gt;unsanitized Nope, its creates keys based on the username provided which is taken by CLI interface !
I don't know why you would learn React without learning javasceipt. React sits on top of JavaScript. So learn JavaScript first. One day React won't be popular (just like jQuery is no longer cool) - but you'll still know JavaScript so can learn the replacement much quicker. Especially if you're using es6+. It has a lot of features that will be helpful or become clearer when you learn react (or Vue or whatever becomes the standard in the future). As for the component you posted. I can see what it does. However it looks like a cross between jQuery and React. So I wonder why you'd write all of that instead of just using one of them? You clearly know JavaScript so this feels like a lot of extra code that you have to maintain. Just curious why you went down this route?
Timely post, we're working on a design system and in order to move at a reasonable pace we've used the \`any\` type quite a bit. I just grepped the source and I see it showing up 24 times. I bet most of that could be fixed by switching to \`unknown\` and rethinking all our existing interfaces and types.
You can use a ternary: var intVal = booleab ? 1 : 0; An alternative could be a bit operator: +true ===&gt; 1 +false ===&gt; 0 So, I guess in your code `+msg` could do the trick. 
&gt; `this` is marked as uninitialized if the constructor body was defined using a `class` definition that has an `extends` clause. This is the answer to all my queries and doubts. Thank you very much for the link. 
So here it is: 1. After creating ssh keys using keygen, need to `cat ~/.ssh/id-rsa.com.pub` to paste it in required service. If you have extensive set of keys like i do for work and personal for all the services, maintaining keys is really really hard ! so this creates keys by your username of the particular platform and host as a name, so that you understand easily, 2. Not only that will Also support for the self hosted instances of gitlab ? You can also created keys for custom domains. 3. SSH Keygen does't print key after generation, but this does. 4. Thers is alot in the roadmap, like updating the keys directly to the platform selected. 5. No hard feeling if you like SSH-Keygen, This is just a wrapper of that which does use ssh-keygen internally.
Thank you very much for this. I appreciate your effort for such an elaborated explanation.
Does 'having fun' count? I'm not making this framework for everybody to use and freak out about, I'm doing it cuz it's fun. I mean, that's why we are all programmers right, because solving something hard feels good. But if people start pulling packages from npm and doing same old every day, then they are no better than construction workers carrying the same weight over their backs every day back and forth, just knowing where to put the bag and the rest is done for them (by others, or by a framework, could it be a machine or something, he is not aware, he just knows how to carry that bag from place a to place b, and bam you got a building) &amp;#x200B; My grandfather told me before he died, that he regrets the most working a job he never liked just for the good money. My father does that too, and he doesn't seem very happy either. For me, building stuff like this makes me happy. Heck, I even rolled some websites for free, because if somebody likes the stuff that I build, that's fucking money to me. I know I went a little off topic but, I hope you get the idea &amp;#x200B; PS I'm not very comfortable using my framework either. But it's getting better day by day, and I am introducing new features to it as I need them. 
Publish as much as work as possible on github. Refer to it in interviews. I feel like that’s a more realistic scenario and shows what you can do. I think complete projects are worth much more than answering questions. 
Follow up question: If super needs to be called in order to initialize the object property, why does it still work if the child class has no constructor (and therefore no explicit call to super)? Is super call implicitly in that case? 
Be great at something and apply it. Make a portfolio on github and codepen. My guess is node.js is your next natural progression 
Circlejerking is taking over
But I am giving my best for that to never happen. Every input element that gets sent to the server and back to the client is checked with validator on node.js, so a &lt;script&gt; tag will never land in my DB. I've tried manually adding a script directly into MongoDB but when (for example username), gets added to the DOM the script isn't executed. I am planning to switch to document.createElement so I can properly do this tho, for now, I don't know how to make tagged template literal do this for me. &amp;#x200B; You know, &amp;#x200B; const render = (a, ...b) =&gt; console.log(a, b); render\`&lt;div class="hello"&gt;${world}&lt;/div&gt;\`; &amp;#x200B; This kind of syntax. For now, I'll just be very careful with what I put into my DB &amp;#x200B; I believe that, if somebody wants your site down, he will do it no matter how hard and deep you try to secure it. If someone tries to pass html into inputs and into my DB and if he succeeds, all that he can accomplish is make the website break for him only. But I understand your concerns, and I am working towards fixing that particular problem
It does suck. * You can't paste image from clipboard * Attachments and tags are hidden inside popover. What an awful UX decision. * So called notebooks are just nested tags, to place your note into notebook you have to **manually type** "notebooks/&lt;notebook\_name&gt;". No autocomplete supported. * Wanna move your note to another notebook? No, you can't just drag'n'drop notes between notebooks, again they're just nested tags. Remove old tag and type a new one. * You can't change neither font nor theme FYI, Boostnote has all of these features. &amp;#x200B;
My JavaScript books are for people who already know how to program. Most of them are free to read online: http://exploringjs.com
Yes. &gt; if a `class` extends another `class` and has no `constructor`, then the following `constructor` is generated: ``` class Rabbit extends Animal { // generated for extending classes without own constructors constructor(...args) { super(...args); } } ``` https://javascript.info/class-inheritance 
There are issues tracking all that, keep in mind that this is a very new codebase. Last time I checked Boostnote didn't support attachments at all, am I missing something?
thank you very much!
Study the things they failed you on. This should be an obvious place to start. If you want further feedback from them, ask them. They might be willing to let you know what you were missing, but they might also not have that time. Worth a try. Be humble about asking, make it clear you understand you were lacking in this case, but want to improve yourself.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I operate a flight award search tool, that does a lot of simple date math (mostly calculating the difference between two dates in days) but was finding moment.js to be a bottleneck, and couldn't find a library that did what I want, so I created one! Was very interesting learning about the math behind Julian and Gregorian day numbers, and hope this can be of help to someone.
Keep interviewing, and don't give up! As an engineering interviewer myself, not all qualified candidates will pass a tech screen (part of the challenge being an interviewer, is trying to separate the people who can whiteboard well vs do well in real life on the job). Even myself, I've failed interviews because the interviewer happened to ask a question that I just was not familiar with, or they may have been asking questions that didn't correlate well with my strengths (often a good sign that this job might not be a good fit for you anyway). Always helps to brush up on some basic computer science before an interview too (which would've probably got you past the DFS problem). Even though you may not use these concepts in daily life, it's kind of a lingua franca between interviewers and candidates, so think of it like prepping for the SAT's, just one of those things you do to show them you're serious. Likewise, using online CS exams is a good way to gauge how prepared you really are. Good luck!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
This is so true, even after several years of JS programming I must visit MDN like 10-20 times a day. Books / online tutorials were good for the initial baby steps, but the real breakthrough for me was when I just started trying to build something, and using MDN to lookup anything I wasn't sure about.
done, get lost
Actually vm2 protects against this. 🚀 
How is this different than date-fns? 
Sorry, no offenses, you've done a great job, but the post title is a bit provocative. Yep, Boostnote supports attachments, they just didn't implement file dialog (like Notable), but you can drop your file directly into editor and it works. Although considering attraction of Boostnote maintainers to weird UI decisions I won't be surprised if they will decide not to implement attachment dialog at all.
The sentiment is there. JavaScript apps _should_ be as lean as they can be for consumers sake. But pushing an arbitrary limit upon how much JavaScript can be loaded is not a good solution. Computing power is great enough now that for the vast majority of apps it's not going to matter. Not that that means you should be writing inefficient code, but just that it's not worth worrying about.
I completely disagree. If anything, some common development tools and resources can feel like boat-load of fluff sometimes (e.g. endless node modules) but generally the end user gets a pretty lightweight application. Sure, we could write every web app in C or Assembly and just send small executables to the client and and remove browsers and JavaScript engines from the equation. But then imagine a small team of developers trying to support thousands of different machines all at once, and then maintaining that code base... We abstract code to higher levels to make our jobs easier. Nowadays, from a business perspective, it’s way more important to have human-readable easily maintainable code. Code optimization is becoming more automated every year, with better compilers, transpilers, and interpreters. Why waste valuable time and cognitive overhead on micro-optimizations?
oh ! it's adapted to JSON and json is the preferred exchange format for the web.
Are you referring to UWP apps? I would like to learn more about those because it seems that MS has a good platform for all that with .NET and Visual Studio, but it does seem as if Electron apps are more popular for making apps for Desktop OS's out of web technologies like HTML/CSS/JS. 
I like your attitude, listen to your grandfather! I am doing something similar to you right now, and have made the whole thing reactive with: ``` const onChangeRenderView = objToWatch =&gt; { const handler = { set(target, property, value) { view.renderPage(view.pageTemplate, model, view.mainContentElement); return Reflect.set(target, property, value); }, }; return new Proxy(objToWatch, handler); }; const model = onChangeRenderView(modelInitialState.data); ``` This takes the `modelInitialState.data` from an imported module and wraps it in a proxy to make it reactive. ``` renderPage(template, data, element) { element.innerHTML = this.pageTemplate(data); }, ``` This function above is called on state change. ``` pageTemplate(data) { return String.raw`` ``` And this is the template literal format above. Now I just push to the state object and the page re-renders. The only setback is that the state can't have nested objects, if you want that then it gets more complex, but someone has done all that work for you https://github.com/sindresorhus/on-change. A little tip, if you use VS Code and https://marketplace.visualstudio.com/items?itemName=bierner.lit-html you can not bother with lit-html and just use `String.raw` and get all the formatting, code completion, syntax highlighting etc for template literals :)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Ya ya
What they are doing is making pwas discoverable via the primary place people look for apps on Android 
WASM will fix that
So....you think you need a barrier to entry that’s marginally better than what you get with PWAs?
Sure, that's how all these frameworks came about, some developer had a blast creating it. It's the agendas that make it bitter (vanilla vs xyz), but that's just how i read it.
new is not dependent on classes. 
It'll be an overkill to write layouts/UI in web assembly. I think it'll be best used by libraries where the overhead of communication is worth the perf benefit, which probably means games, video/image editors and professional apps like that. I expect one to still use basic HTML CSS and JS for content driven websites.
I get your point. I'm just not sure about if pwa apps are a good idea or not and I'm having a hate/love relationship with apple and how strict they are with app admissions. I like the (psychological) barrier of not doing something like online banking on a pwa.
`finally` is fairly new. Do you know that the report came from a recent version of Firefox? There's nothing wrong with your code (other than 'finally' not being a callback - but it wouldn't cause the error you're describing in a browser that supports finally)
Yeah, you're right.
If you do not already know how to program, I would try to focus on learning that over learning a particular language. Since JS has your interest, look for 'learn to program with JS' type offerings. Many tutorials assume the viewer knows how to program and thus focus on how to do x, y, z in a given language. Those are unlikely to serve you well in the long run unless you already understand programming. On the other hand, if you are already s programmer, or only want to know a few techniques using JS, then carry on... ;-)
according to "[caniuse.com](https://caniuse.com)", finally has been supported in Firefox since v. 58 (released Jan, 2018) I'm testing on \`64.0.2 (64-bit)\` (latest is version 67)
I ran it through firefox and see no error.
thank you, I appreciate you checking. What version are you running?
Solved! Found the issue... it's not Firefox, it seems to be a \`core-js\` issue. I noticed that on \`about:blank\` in FF, that the test line of code worked fine. And then my co-worker found this comment when googling: [https://github.com/vuejs/vue-cli/issues/2012#issuecomment-410369818](https://github.com/vuejs/vue-cli/issues/2012#issuecomment-410369818) 
This is JavaScript, not python. Use camelcase.
You are right. That's exactly what web assembly was created for. Yet many people think it is for using c++ for what js can perfectly handle.
&gt; If your app is not free to download, there will be no easy way to validate that the user has actually paid for it (at the end, your content is just a URL) There's no workaround for this? Maybe I'm not understanding the features available but surely if you can talk to the native app you could ask it if the app has been paid for?
Good Bot (license added)
&gt; Boostnote supports attachments, they just didn't implement file dialog (like Notable), but you can drop your file directly into editor and it works Oh nice, I didn't even know about this, I'll have to update the comparison table. 
Performance, mainly. I updated the benchmark to include date-fns, there's a 3.5x factor in speed. Also, timetable-fns exposes the day number, which is useful for certain algorithms. For a lot of people, date-fns should be fast enough (or even moment.js), but if you're doing a lot of calendar math or need to access day numbers, timetable-fns might be a better choice.
Thanks! Sounds interesting. I will definetly look into that.
Don't let the constant use of x+digit variable names throw you off. They are legitimate names, even if they are hard to follow. After that, start with the only function call, and follow its argument :back' through all the other variables and functions required to execute the function. Once you then values of each of the required variables, use those to determine to return value of the function. 
Javascript FTW!
Node.js or, if you really want a good front-end framework, React.js. You're not going to really being able to serve up back-end API or do a lot of other cool stuff most modern web-apps can do without learning Node.js. Stick with JS for now if you want my opinion. The more proficient you are at JS the easier you can pick up other languages. Plus, if you can debug something in JS, you can debug something anywhere. I just learned Python after really only knowing JS and it was incredibly easy.
The same way you learned java
Codecadamy is a fairly good website to learn the basics. :) What’s your nationality? I still have some school exercisers I could share with you, but they might need translating.
Don't care about the credit, "bro". Quit being a shady writter and do the right thing from the start.
&gt; programmed things like finding the longest plateau, where you would read a number like 11122234111133334 and had to find the longest "string" of numbers That's a *small* computer program.
Hi /u/therandombiker1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
They are a good idea. It broadens the access to applications and standardizes deployment processes. It’s closer to write once run anywhere as is probably possible, where the more end point resources you need to tie into the less platform agnostic you can be in your front end development.
64
Three rejections is honestly not too bad. That's only one days work and not every day is your best day! Study where you felt a lack of knowledge and keep you eyes on the prize :) &amp;#x200B;
Why would a PWA be different from a web page except you can tie into biometric resources on the device.
It looks cool, is there any usage for it ?
Because web is completely disconnected from native primitives, where as React Native actually has true native bindings. React Native has absolutely nothing to do with web, it just uses the same lifecycle API and JSX as React.js.
You can not write a web app without javascript. DOM manipulation will always be a js thing.
Anyone wanna ELI'm a junior dev?
Wow you have a real talent here! I will aim to create something like that some day.
but you only "sanitize" it by checking that it's not empty, which is not sanitized at all consider using execFile or spawn instead, with argument list and shell disabled.
Skeptical... no discord with 7000 members could be considered friendly beyond the core group
Sooo..? 
You could always tell the difference between Cordova and native apps
&gt; What is the alternative to dependency injection in the functional programming world? I would say passing an argument to a function maybe?
But now people who were running PWAs in Firefox for Android or some other mobile browser will download them from the app store and run them in an no-interface chrome tab. 
There is an inherent benefit to that, though, which is that it would allow us to break free of JavaScript's inability to make breaking changes to the language. For as much as it gets better, there are still some hideous design decisions that are incurable.
Ideally Firefox and other browser should be able to provide their own no-interface tab system. Not sure if the necessary Android APIs to enable that exist already, but if not then they should.
No it isn't. I didn't say it was, but we're told that the new keyword is bad (Cockroft, Elliot et al.) How does one make a Promise and make use of await/async without new? Or are Promises and await/async bad and we should go back to 2007 jQuery style callbacks?
I feel like JS is pulled in so many directions right now, with so many different voices shouting about what's good and bad. My personal opinion: I hate that it's shoehorned by devs into everything (desktop applications, mobile applications, etc) so if that's the way devs are going to develop JS moving towards adding tooling to help achieve that is a good thing. That said, if people left JS alone as a scripting language for browsers, fully functional would imo be the way to go.
UWP is dead. Like Windows Mobile, it got made toxic by Windows 8.
Exactly what I’ve been saying for the last 3 years. The web is the platform, an application would be a seam-less download and fully integrates into existing services or local storage as needed. This may sooner than later be a method of game delivery imo, as web tech evolves and more games are made, soon a console won’t have any physical games, it will all be download on the fly.
Doesn't Chrome's mobile app use the device's internal version of the V8 engine? If so, couldn't they have a mobile V8 version that exposes some web API's to the native layer that could help bridge that gap? I'm probably WAY over simplifying it, but I know our browsers sort of do something similar with our OS.
Not that I think knowing algorithms is a *bad* thing (I think every dev would ideally know their shit in regards to time complexity and algorithm analysis), but in what situation would knowing DFS ever actually matter for a front end dev?
https://javascript.info/
So...you have written a program. It doesn't have to be big to be a program. Do the things you've done in JS, now. 
Ugh.. "technologies", that word again &gt;:-E
wasm is a welcome addition for low level. what's wrong with javascript otherwise? 
Yes that is the mechanism of DI but not it's purpose. It's purpose is inversion of control, how do you ensure a method receives the right type of class (which could be one of many so long as they are parametrically polymorphic) with non-classical OOP?
Are you sure it bundles up an APK? I was under the impression it just added a shortcut to Chrome in the app menu, and registered a pseudo-app in the system to separate statistics from regular Chrome processes.
React native uses platform primitives through bridge, Flutter draws it's own widgets like game engine does, web is bound to it's shitty language and runtime embedded into browser.
What's the difference? The "pseudo-app" is a 100% real application as far as Android is concerned. (Provided the site you're adding to your home screen is an actual PWA and not just a website.)
I agree that OOP (classes, inheritances, project patterns...) always will be useful just like FP (pure functions, lambda functions). But what is the better solution? It depends on the problem you are facing and on your skills. Actually, any kind of comparison between programming paradigms does not make sense for me. Certainly remove OOP statements JavaScript will be a regression.
I think this is great! real time collaboration on javascript should save hours.....
&gt; Historical dates are handled correctly, back to the year 0, although using Gregorian rules (the Gregorian calendar was not established until October 1582). Does this mean you're not using [Proleptic Gregorian](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)? I wonder how many people are affected by dates before 1582, tho.
One would argue that the features of Puppeteer are 10 times better ; not even mentionning its API.
camelCaseIsExtremelyHardToRead. I\_prefer\_underscore\_for\_that\_reason.
Yup, and that "pseudo-app" is a valid, bundled apk. Built &amp; signed server-side by the Play Store, not by Chrome, though (afaik).
Also, there is no year 0.
People really suck at interviewing.
Right, with the new system. The original comment implied the standard "Add to home screen" feature generates an APK. That's what I questioned. Even if the PWA is installed as it's own app separate from Chrome, that doesn't guarantee that an APK is created.
Google and Apple taking 30% seemed ridiculous to me too. Now I’ve dealt with a payment gateway and merchant account, and you see the fees from the merchant account, transaction fees from the gateway, and chargebacks, it’s not so unreasonable.
On mobile if I double click right/left it zooms in and prevents me from seeing enemies. Pretty annoying but not a real issue. Btw nice game, keep working on it!
Yea unfortunately there is no real way I can fix this :( When/if I port it into an app, that problem will 100% be gone though.
That's fair. Do you actually transfer schema definitions via HTTP? Does your client request schema definitions from the server? Sorry to sound like a salesman, I'm just curious because I never quite understood why the benefits of JSONSchema were worth the limitations
Styling: `cursor: pointer` on Start, Highscore and Credits, to clarify it's clickable, maybe light green on hover, I tried `#00b400` it looked pretty good, the hover background should cover about 200px, Credits with capital C, it looks more professional when it's unified, Game: some in-game score counter would be nice to feel satisfaction during the game, I wasn't sure what was the point of the game during my first playthrough, then I assumed you have to run away from everything that's moving, correct me if I'm wrong generally speaking, the game felt simple and addictive, if you develop it a little bit further, I believe it will be playable
I'm pretty sure you already did your researches and tried different things, but in case you didn't I would like to suggest you something like this https://stackoverflow.com/questions/4472891/how-can-i-disable-zoom-on-a-mobile-web-page Not sure it works, but may be worth giving a try
Yea haha, i had actually tried that. It does work, but it'll crop the game to fit the full size of the phone, which leaves cuts out certain important parts.
`return someCondition ? { stuff: ‘cool’, thing: 1 } : { stuff: ‘neat’, thing: 2 }` I prefer this kind of formatting. It makes it really easy to see the consequent/alternative relationship.
...I'm actually impressed! 99% of unit testing articles talk from the point of view of a single library, while this covers multiple! \_and\_ it doesn't repeat the unfortunate habit of Karma calling everything "acceptance" tests. 
Yea the start menu is pretty bad right now, I expect it to look nothing like it looks right now when its done. That should get a full makeover :) And i agree, currently the score is the wave your'e in, but idk if thats the best way to go through it. Do you have any suggestions on how the score should count? And im glad to hear that! Still got a bit to do like you said, I'm just at the point where i dont know what to do next. lol
Good effort. A couple of points: 1) In `logChoice` you are getting handles to several elements on the web page. Why not get the handles outside the function i.e. in the global scope. This means you only need to get them once. eg. `const userScore = document.getElementById('yourScore');` 2) In `logChoice` use `const` or `let` rather than `var`.
I recently left my job. I did about 15+ interviews before I found a position/team I actually wanted to join, here are some very common things I found which are completely out of your control: -Sometimes people will not like you and you’re declined because of that. You wouldn’t want to work with someone who doesn’t like you anyways. -Sometimes people cherry pick responses and want the interviewee to answer exactly how the solution is in their head. These people are squares you also don’t want to work with. -A lot of times, people literally want you to be an assembly line coder. If you have any creative thought or mind of your own, you’re out. -Sometimes people are busy and literally feel that if you don’t blow them away immediately, you’re a waste of their time (Sometimes referred to as interview fatigue - I’ve been in this position and it usually means you’re overworked). Don’t take this one personally. -Sometimes people don’t want competition, so they will not recommend you because they don’t want to ruin their current situation. -Sometimes it’s your age (young or old, depending on team and perspective). Those are just off of the top of my head, but I’ve experienced those at least 2+ times every time I was looking for a new gig. 
U
It's a good question, I'm not sure if the results prior to 1582 are in agreement with Proleptic Gregorian or not. The author of the algorithm only advises that the results are correct from October 1582 onwards.
You know how to listen for the event? Then it's as easy as checking the key code: https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
I meant that in the most literal sense, such as a date like '0000-01-05', this would be an accepted date and yield a valid day number. Anything outside the range of 0000 - 9999 will be rejected by the library.
This is a great start! What I've done here is a pretty substantial refactor, but I'll walk you through what I've done so you can understand some of the choices I've made. const choices = ["ROCK", "PAPER", "SCISSORS"]; const userChoices = document.querySelectorAll('.choice'); userChoices.forEach(choice =&gt; choice.addEventListener('click', logChoice)); // abstract repeated actions into functions for reuse function updateText(id, text) { document.getElementById(id).textContent = text; } function getText(id) { return document.getElementById(id).textContent; } // get rid of all the if statements and determine winner programmatically function getWinner({user, comp}) { const beats = { "ROCK": "SCISSORS", "SCISSORS": "PAPER", "PAPER": "ROCK" } if (beats[user] === comp) { return "Win"; } else if (beats[comp] === user) { return "Lose"; } else { return "Draw"; } } function logChoice() { var userScore = getText('yourScore'); var userIntScore = parseInt(userScore, 10); var compScore = getText('compScore'); var compIntScore = parseInt(compScore, 10); var userAnswer = this.textContent; var compAnswer = choices[Math.floor(Math.random()*choices.length)]; var winner = getWinner({ user: userAnswer, comp: compAnswer }) // simplify IF statements into switch/case statement and update score and text programatically switch (winner) { case "Draw": updateText("changeText", `YOU both chose ${userAnswer}. It's a tie! Please try again.`) break; case "Win": userIntScore = userIntScore + 1; updateText("yourScore", userIntScore); updateText("changeText", `YOU chose ${userAnswer}. COMPUTER chose ${compAnswer}. YOU win! Press a button to play again.`) break; case "Lose": compIntScore = compIntScore + 1; updateText("compScore", compIntScore); updateText( "changeText", `YOU chose ${userAnswer}. COMPUTER chose ${compAnswer}. COMPUTER wins! Press a button to play again.` ); break; } } I'll point out a few things, starting with the least complicated: document.getElementById('yourScore').textContent = userIntScore; You have stuff like this all over the place. Finding an element by ID, and setting it's text content. It's repeated all over the place. When you find yourself writing the same code over and over again, think about if there's a way to turn it into a function that you can reuse. In this case, the only elements that are changed are the ID and the textContent. So we can turn this line into a function: function updateText(id, text) { document.getElementById(id).textContent = text; } And we use it by simply invoking the function and providing the arguments: updateText("yourScore", userIntScore) The next thing is determining the winners. What you've done is listed every possible combination and outcome. Notice that in your long if/else statements that, we go through the same process for winning/losing/tying regardless of the choices. So that's screaming out for simplification. Wouldn't it be better if we could simply A) find out who won and B) generate dynamic output based on the inputs? That's what I've shown you here. function getWinner({user, comp}) { const beats = { "ROCK": "SCISSORS", "SCISSORS": "PAPER", "PAPER": "ROCK" } if (beats[user] === comp) { return "Win"; } else if (beats[comp] === user) { return "Lose"; } else { return "Draw"; } } In this function, we return "Win" if computer's choice is the losing value to the winner's choice. We return "Lose" if the opposite is true, and "Draw" if they are the same. How do we use it? Here I use a switch/case statement. switch (winner) { case "Draw": updateText("changeText", `YOU both chose ${userAnswer}. It's a tie! Please try again.`) break; case "Win": userIntScore = userIntScore + 1; updateText("yourScore", userIntScore); updateText("changeText", `YOU chose ${userAnswer}. COMPUTER chose ${compAnswer}. YOU win! Press a button to play again.`) break; case "Lose": compIntScore = compIntScore + 1; updateText("compScore", compIntScore); updateText( "changeText", `YOU chose ${userAnswer}. COMPUTER chose ${compAnswer}. COMPUTER wins! Press a button to play again.` ); break; } Now, instead of 9 scenarios, we have just 3 scenarios: Win, Lose, and Draw. No matter what the specific choices are, we can update the score and text dynamically, using string interpolation to put the user and computer choices into the string we want to show after each move. Also, I removed the stuff on the bottom cause it was buggy and didn't have time to debug that part for you. Hope this all makes sense! &amp;#x200B;
something time-based would be nice my suggestion is 100/second, your score would continuously grow which would be a good form of motivation to keep going, if you want lower number it would be fine but the score should grow as you play to know that your survival is counted
Classes in JS are largely syntactic sugar for what you do using prototypes. You can think of it as making things look nicer for people more used to the classical style of programming. So JavaScript doesn’t have classes, which means there is no debate between classical and prototypal inheritance, because JS only has one of those. Are you asking about how to do things that you would do in other languages, in JavaScript? (like classical patterns) Or are you asking about something else? The post is jumping all over the place imo.
Hi kenman, Thank you for your understanding. Ill make time to read the rules and guidelines. I apologize.
Woho that's incredible man! 
Pardon my ignorance but what is a "marzipan app"? 
Because you’re applying for engineering roles - you’ll have to know algorithms, system design, AND front end. You might get “lucky” in that a companies interview only asks you to build a complicated front end widget - but without asking them in advance most of your onsites will include algorithms of some kind. You’ll be asked a lot of js/es6 questions for phone screens (promises/callbacks - this - hoisting - closures)
Have you ever considered that developers are people too and that these tools often make their lives far easier? Also - modern operating systems are well equipped to swap that supposedly excess RAM to DISK without the end user ever noticing... 
I see it relies on moment for a couple of functions. Are there plans to remove that dependency?
That isn't correct. It's trye that people can just run PWA off their web browser in Android like regular web.The PWA still run on browser and guess who make the most used browser in Android? It's Chrome. So it's Google choices now to let people run their PWA as native app on Android chrome without regulations, which is a security concerns. Additionally, there is already an article saying that PWA submitting through play store have more advantage that it have more permission to the native features namely widgets and others that will not be available browser experience. So when app developer want to give their customers the best experience they will still have to go through Play Store. 
I agree that Im pretty sure there are a lot of other fee that I'm not aware of. But 30% seems a little high IMO. When you have other companies like Steam taking 20% I believe and Epic taking even less. And I believe Amazon app store is 10%? Not too sure tho, but the 30% from Apple and Google and seems like because they Monopoly the platforms to me.
The difference is that there's no APK involved, as far as I know.
Funny, I was writing native applications on the old Palm/HP webOS platform back in 2009, where web tech was literally the native platform. Made some good pocket change back then for what was then just playing around building a full-fledged streaming audio player. 
Dependency injection is a design pattern in classical languages that helps you get around the problem of tightly coupled classes. This is a trivial problem in JS. You can pass whatever kind of object you want into a function and use that to set the properties of the resulting object.
I use both Java and JS, and the best advice I can give is to forget about almost all* Java paradigms when you switch to JS, and vice versa. They do have more in common than just “some syntax and objects”, but the 2 languages have very different models of handling concurrency/asynchronous operations and solving problems. If you try to solve problems with Java conventions using JS, you’ll spend lots of time yelling at JS and wondering why anyone bothers with a language that’s so weird that it must suck balls (classes aren’t really classes in the usual sense???!). If you try to solve problems using JS concepts in Java, you’ll end up yelling at Java and wondering how the hell such a heavily used language can be filled with idiotic obstacles and lack commonsensical features (template literals from JS STILL has no equivalent in Java). Next, you’ll want to know about ES5 JS because well, lots of code out there is still written in that, and even though it sucks, you still need to know it, like how JDK 8 and earlier standards are still heavily used even though JDK 9 has been around for ages and the current LTS is already JDK 11. But you should primarily learn and write ES6. For online resources, MDN in general and the official NodeJS docs for well, NodeJS. If you’re just starting out, these should be all you need. I’d be wary of blog articles, but you seem to have that figured out. *some things are universal, like exception handling. If you handle exceptions with universal try-catch Exception blocks that swallow the thing silently, you’ll be yelled at, whether it’s Java or JS.
I love it! I had a time counter set up, so I’ll get into implementing that! Thank you for the advice :)
Ayy man, thanks for posting that. I've re-written my Component class a bit. Instead of returning a string inside html(), now it returns a tagged template literal, which sanitizes all the variables from that string properly. And thanks to lit-html extension (which I didn't even know existed), HTML in that string is a lot readable too. I don't think that I need to sanitize the vars tho, since every input that gets sent to node runs through validator and if it's not alpha or alpha/numeric it throws back an error message. But you never know what can slip up I guess. &amp;#x200B; Tagged template literals are so OP. I've just started playing around with them, and as I can see possibilities are endless as what you can do with them. &amp;#x200B; As for the state management, I don't see the use cases for that yet, unless it's an incremental game like I mentioned I was making (or did I?) or something, where clicking on one element (buy upgrade) changes a lot of other numbers (damage, cost, etc) n stuff. But even then I had no issues because getters and setters did the trick for me just fine &amp;#x200B; set damage(val) { this._damage = val; document.getElementById(`${this._id}_damage`).innerHTML = this._damage; } now imagine a class Upgrade, and an instance, lets say, Laser Gun where I can do game.upgrades.laser\_gun.damage = 10; from any other class or code block, and this.damage = 10 inside the Upgrade class block, and it updates the DOM as well. It is heavy manual solution, but it's simple and I like it that way. I hope you understand what I mean &amp;#x200B; Maybe I'm wrong but I don't see how re-rendering the entire component is faster than re-rendering couple of numbers in the DOM. Or maybe when people say "faster" they mean I don't have to code all the setters manually. &amp;#x200B; Anyway, thanks again for opening my eyes. Last thing I came up with was css() function inside my Component, and it was almost a month ago, and ever since I was feeling stuck. Now that I learned about template literals, things are becoming interesting again. Have a nice day!
Honestly, not surprised. GPU libs have been out for a long time, top it off with more hardware API support every year almost. Saw this coming a mile away.
Funny, I was writing native applications on the old Palm/HP webOS platform back in 2009, where web tech was literally the native platform. Made some good pocket change back then for what was then just playing around building a full-fledged streaming audio player. Back when WebSQL was still a thing (that eventually was backtracked as a possible standard). Here’s my old walkthrough of the app, Radio Hibiki: https://youtu.be/eSltHhNQITM I could have made some better architecture decisions upfront, but damn if it wasn’t fun to build. I’m still amazed to have figured out a way to poll and pull the metadata straight out of the audio bitstream using JavaScript XHR alone. Didn’t even need a framework per se; Prototype.js (offering Class syntactic sugar like ES6 did years later, ES5-spec JS, and the SDK basically laid the foundation to build some really cool shit. Other than that, your basic HTML, CSS3, and WebKit-based browser. And it was performant. Much more than you’d expect on a smartphone in 2009. You’ll note in my demo I was pulling over 3,000 stations in one generic search and iterating/rendering the list without crippling the device. What people are doing today isn’t far removed from those days. Hell, if it weren’t so old and didn’t rely on some webOS platform APIs, it could have worked just like a PWA today with a little effort. That and my licensing agreement with the streaming service ended years ago. Palm was way ahead of its time embracing the Web Platform as Native, and the people behind it are now at...Google and Apple. Polymer, Material Design, and Android’s aesthetic comes from ex-webOS heads; same for significant parts of the iOS experience (such as the notification and card metaphors, which is still increasingly looking just like webOS with every update).
Yeah, the entire point of this post was to see whether people would understand what that specific component from my framework does on first look, without looking at the rest of the source code, and all I wanted were some recommendations on how to improve it. I don't know why people got so offended, I almost feel like everyone here thinks I posted something like "yo react sucks check out my framework is 20x better l2p noobs", but then again, maybe I just badly formatted my question. Guess I need to be more careful in the future, seems like people on the internet easily get offended...
It's frustrating when going through it, and the modern day front end engineering interview can feel like a quiz bowl, but stick with it. You gotta bomb a couple interviews as a dry run to actually get comfortable with those types of questions. Dig around searching for "common interview questions for engineers", etc...chances are the engineers interviewing you found the questions they are asking off a site somewhere. I know I've used this one https://github.com/h5bp/Front-end-Developer-Interview-Questions I'm a self-taught developer, transitioned from the design end in the Flash days, then transitioned into PHP / JS when all the Flash people went iOS. For the first 18 years of my career, most of my interviews were informal, but after taking a couple years to work for startups and being out of the full time with benefits role, and now having kids, I had to really try to interview this time around. I definitely got rejected from a couple of phone screens, made it through to a couple of final rounds when I thought I had no shot from the phone screens. The places I did the best with offered take-home assignments as part of their interview process, as opposed to whiteboarding in person. Definitely prefer that approach better. 
tbh I always feel a lot of guilt when using some external library. I use a lot of those in node.js (express, [socket.io](https://socket.io), mongo, etc) but I don't really like dealing with back-end nor I wanted to learn node, I just went with it because I needed to setup a quick server and since I knew JS node was my go-to. I'm front-end dev, but I work alone so I guess i need to do back-end stuff as well. &amp;#x200B; With my own front-end solution, I understand every pixel of that .js file, what it does, and why it does it the way it does. I feel a lot more flexible than I felt when I was doing some React and Angular. Feels like those frameworks really force you to write stuff their way (well, angular does that more, react is kind of unopinionated but still). This is good, because it forces you not to make mistakes, but feels kind of... How do I explain this, feels kind of caged. Everything outside the cage is lava. And, unless you are a huuuuge thing like Amazon, or Facebook or something, you probably wont even need 50% of what those frameworks offer all of the time (say you pull 1000 react's dependencies to build a 4 page blog app). It would be like writing 1000 lines of functions in a 2000 lines of code app, that just sit there, and are never used, and this is where my guilt kicks in. &amp;#x200B; But I guess it's a little different with node.js frameworks because most of them just do 1 specific thing (like validator, or jwt, or socket.io), and have 2-3 functions that you use. Front-end frameworks are different. It's like learning a whole new language (well it actually is new language since you're writing JSX / TS / whatever and compile it down to JS after, so) &amp;#x200B; My friend says I should switch to C++ because he believes it matches my style (low level). I'm not trying to mimic react nor jquery, as I said in my previous post my code (even tho was spaghetti back in the day) looked just like React does now, (no back ticks then so I had to concat strings with + and \\n but it did the trick) but I can't say that those frameworks didn't help shape my coding style.
An app that is compatible with both iOS and macOS that uses the same/a similar codebase on both.
This is really useful. I just wish typescript had better error messages. The errors can be really cryptic specially when you start getting into more complex types and structures.
Crockfort = Douglas Crockford
&gt;Right, with the new system. The original comment implied the standard "Add to home screen" feature generates an APK. That's what I questioned. New system? It's like that for more than a year now. Tapping the "Add to Homescreen" banner will create &amp; fetch a bundled apk from Google's servers. (called webAPK) &gt; Even if the PWA is installed as it's own app separate from Chrome, that doesn't guarantee that an APK is created. Only if the PWA misses some criteria (no icon, not cached for offline use, etc..) or you're not using Chrome but some other browser (like Edge, Samsung Internet) you will get a normal shortcut on your homescreen, otherwise: APK it is.
And even if it did, why would you be in such a hurry that you couldn't look it up? An internet search to make sure it's the best approach for your current problem seems like a reasonable thing.
I really wish reason would grow in popularity. It's big enough an improvement over typescript to make up for the learning curve. Perhaps a way to generate ts type definitions from reason would also help adoption, specially for library authors.
Dope
You can't charge for PWAs, cause they are all websites
Sure, if I can figure out a way to provide the moment.js convenience functions, without actually requiring the moment.js library... would have to think a bit more on how to accomplish that.
Hmm.... _can_ you install an app without an APK being involved? I know there are apps out there that will extract APKs from installed applications, what happens if you use one of those on an installed PWA?
In fact you can. If course you can't enforce it if you want PWA to work as websites since users can just access it through browser. But thats not what PWA is about isn't it? PWA aim to bridge the gap between native app and web. So the developers need to submit their app through the Play Store to get access to the native functionalities and guess who run the play store. Even when subscription based app can get away with it by having user pay in web browser a lot of apps like games cant do that. That's where they can charge their 30%
I wouldn't mind an eli5 either
This is great, thanks for sharing
I vote not to overcomplicate things. Personally I'd probably just do ``` return someCondition ? { stuff: 'cool', thing: 1 } : { stuff: 'neat', thing: 2 } ```
Ryan's idea about this is simple: 1. Design something that alleviates Node problems 2. Would be nice to be able to run TypeScript without user config So generally the TypeScript part is more or less a bit "sugar" on top and never the goal... It is still a JavaScript runtime, with a completely different internal and API design. The TypeScript part is more or less a better "ts-node"-like wrapper, which, since the compiler is snapshotted directly onto V8 heap, would spin up much quicker (since skipping the parsing and optimization step of the TS compiler code) than that of ts-node, while still caching compiled code so a second run of unmodified files would be very fast (directly running the cached version) &amp;#x200B; AssemblyScript is nice, but is still far from maturing though, especially on problems with things like garbage collection. There are already suggestions to design a simple way to import WASM modules written in AssemblyScript to Deno directly though.
How important it is (in your opinion) to have no dependencies today on new project like this ? are you a big believer of that or you prefer to go deep in dependencies / frameworks / modules etc
Why would you need dependencies on what is essentially an object with a bunch of functions that calculate basic math? 
Stream is taking 30 and epic is taking 20
Just looked it up. Stream is 25% and Epic is 12%
Hella
steam takes 30%, then it scales down to 20% as more copies of the game is sold, while yes I was wrong about epic, epic takes 12% 
You were right, I misread the article. Steam do take 30%. But IMO I still think Google 30% is a little high especially when Google is known to not review the app throughly as Apple.
yeah I agree, google is taking waay too much considering, most of the payment gateway services charge around 3-10%
How could you know if a result is 13 without IsThirteen?
How do you date a commit to be in the past or future?
How come it's using methods on an instance rather than just standalone pure functions? The constructor isn't passed any arguments
KeyPress event is invoked only for character (printable) keys, KeyDown event is raised for all including nonprintable such as Control, Shift, Alt, BackSpace, etc.
Yeah the constructed object doesn't even have state. It could've been a collection of utility methods, no need for the class. Oh well
&gt; The library is built on pure JavaScript without any dependencies Is that legal?
Personally I tend to do 0 deps just for the cheer challenge, even on bigger libs. It forces me to think and makes sure that I understand every nuance of the project. How ever if I do end up using libs then the number of libs quickly skyrockets. It's quite rare for me to have a project with just 1 or 2 deps. (it's worth noting that I'm only referring to runtime deps, not development deps) 
That's purely subjective. What is objectively hard to read is non-standard naming.
Thanks for the reply - that makes total sense. 
😂😂😂😂😂
In software development, security is of the utmost importance. Every line of code must be checked and triple checked, including the dependencies. There have been known hacks added into dependencies and subdependencies compromising the entire application. Do you, as a developer want to be responsible for adding a compromised dependency, even by mistake? That simple mistake will get people fired because of loss of revenues. 
It’s called Object as Namespace 
New was a problem because you could forget to add it and silently break things. It's not really a problem now that strict mode is available, and especially since we now have modules which default to it.
Could you make moment.js a peer dependency? 
Yes, but you could do Finance.function() rather than new Finance().function() / keep around an object. And better yet, with ES modules, import only the functions you need from the package and let the bundler remove the rest of the unused code.
Since the “composition over inheritance” video got prominently splashed, its worth mentioning that the author of that video got composition completely wrong, and actual composition never once made an appearance in that video. [More details](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/)
Why are the function names all abbreviations? I don't want to memorize what all of those mean or have to go looking it up when I'm debugging, use some longer and more meaningful names.
no I mean new project in general not just this one
OP made it legal
I'm sorry, but I don't seem to understand how these things are directly related to DI. What I hear you saying is "How do you ensure the functions get an argument of the right type in JS", which seems to be a question of its own. Have you seen how AngularJS DI works? Can you please elaborate your question?
If you’re in finance then you’ll have memorized all those abbreviations anyways. I think it’d be more unnatural to not have abbreviations. 
The git CLI has a --date option while committing ^^'
You need to assign the json data to an object, fruitTable = JSON.parse(jsonfile); Then reference that ... Fruit:fruitTable\[xmlOrder.Fruit\]
And you may need to load the json file from a location via a XmlHttpRequest. You could use axios or fetch for this. ‘ axios.get(‘/data.json’).then((stuffs) =&gt; { const data = stuffs.data; // data has you json for reference }); ‘ This code isn’t safe, but you get the idea.
And don't forget to put the JSOn.parse into a try/catch block
Hi Thank you, i tried this an im getting through the "2" rather than banana? &amp;#x200B;
Can you show your actual code?
I work on financial related products (insurance industry) but first and foremost I am a developer, I am not "in finance", I'm in software, so these aren't things I'd have memorized that well. I think the same would hold true for most anyone else, we're developers not accountants, and financial calculations are a small part of the product, and one of the least error-prone since math usually just works as expected. So the parts of the code that do the calculations are rarely touched. But when they are I want names that I can grep for and Google, not 2 letters.
You should use as few outside libraries as possible. If you need one function from some library, just write the function. 
// separate json file { "1":"apple", "2":"banana", "3":"orange", "4":"grape" } \--------------------------- &amp;#x200B; async save (xmlOrder) { let ref = JSON.stringify(reference) let customerOrder = { ID: xmlOrder.ID, Name: xmlOrder.Name\[0\] , ItemCode: xmlOrder.ItemCode\[0\] , Fruit: ref\[xmlOrder.ItemCode\[0\]\], created: new Date().toISOString() } return message }
Does it help with box spreads ? s/
I'm confused with the async call and no await , but a return message? in the function. If you need to access the 'reference' data in the function that should be passed in via the attributes, eg (xmlOrder, reference), and only parse once when loaded no each time you need it. The reference should be good but without actually looking and doing a trace or console log each value it's hard to tell. 
One of my favorite things about working in javascript is this approach to variable names, I hated the accepted c/c++ fs.mv junk It's 2019, we have high resolution screens and good human interface systems, let's name our variables and functions well for fuck's sake (or maybe fk's sk?)
Exactly what I was looking for earlier when browsing VS Code extensions but not being able to find a good solution. Have been getting very tired of choosing between (a) Google and make sure to school to the second or third link sometimes because W3 Schools is always at the top and (b) using MDN's (in my experience) not-the-greatest search box. 
Of course the library itself is a dependency (a black box) you will have in your project. But it’s only finance, it’s not like we are dealing with money or something important like that.
Looks good! How do you think this compares to using a generic rate-limiter solution like [https://github.com/jhurliman/node-rate-limiter](https://github.com/jhurliman/node-rate-limiter)?
wooosh
`Object.fromEntries()` looks really nice, I see myself using it. It's the reverse of `Object.entries()`, and looks like Firefox already implements it.
I've taken the view anything advertised this way is likely to have 6800 bots and a few people talking about Javascript bot development.
Added 2 new templates for email signature - https://github.com/antonreshetov/mysigmail Work continues on open source task manager on Vue/Vuex/Express/MongoDB stack - https://github.com/taskill/taskill
I made a browser-based [Korg Monotron Duo clone](https://elas7.github.io/monotron/) with React, Redux and Web Audio. You can play it with a QWERTY keyboard or with a mouse. It also works on mobile (with multi-touch support). This means that you can play a note and move the knobs at the same time, in any platform. I tried to keep the audio generating logic separate from redux. Basically, the state of the knobs and keys are stored in Redux, and a function is called to update the audio every time they change. Here's the [source code](https://github.com/elas7/monotron). &amp;#x200B; &amp;#x200B; &amp;#x200B;
This was specifically created for socket.io, and thus a lot more convenient to use with socket.io, (IMO), since implementing and then rate-limiting new socket events just requires you to add the normal listener and a "rate-limiting config" for it. My module also doesnt use timeouts, I'm not sure whether that makes it better in particular, but I have seen other modules being advertised with "not using timeouts". The module also makes it possible to group your socket events and pass an user object to your listeners, (which obviously is not supported in a generic rate-limiter), but this maybe removes the requirement for the user to write their own "manager" that handles socket events.
The signature generator looks great! Does it handle the quirks of some email clients like Outlook?
I don't really have the time to go through it, but I casually found this. [There's an unstated coupling here](https://github.com/bgrgndzz/bloom/blob/8e8b9527937b23d70bcf7bb5a5afeb15791b35ab/server/controllers/user/user.js#L13) between server and client that might lead to a subtle bug. The problem is this: You're relying on the client [to always send the _page_ argument](https://github.com/bgrgndzz/bloom/blob/8e8b9527937b23d70bcf7bb5a5afeb15791b35ab/client/src/Main/Profile/Profile.js#L93), but you're not checking for it in the server -like you do e.g. with the _user_ a few lines above-. This seems like an unwarranted assumption, as it would be fairly common for a client to assume that if they don't send the page number it's because they just want the first page and they may not even know if there are multiple pages yet. So, it is perfectly reasonable for a client to try to access `user/someusername` instead of `user/someusername/1`. What happens if the client does so and doesn't send the page argument? `parseInt(undefined)` is `NaN`, and then, `.slice(NaN, NaN)` [here](https://github.com/bgrgndzz/bloom/blob/8e8b9527937b23d70bcf7bb5a5afeb15791b35ab/server/controllers/user/user.js#L52) means an empty posts array will be produced. This does not seem intentional. I mean, it _may_ be fine to not return posts when no _page_ is provided, but then again it would be pretty wasteful to actually go and retrieve the posts from DB only to discard them all. You might want to add some default so that when no `page` is informed, a value of `1` is assumed.
Thank you for your helpful comment! I initially designed that endpoint to disregard requests without a page param (as can be seen at server/routes/user.js). I tried to use minimal code because I also design the client to match the server’s requirements. Is adding that check even though it is not possible for a request without a page param to be passed on to the controller a better practice for api design? Do you know of any resources that I can read to learn about api design conventions? It would also be great to chat about the rest of the code whenever you have time. Thanks again!
As i think it works well if it is a informative site .... for E-commerce or Shopping i have never seen working well.
https://css-tricks.com/reactive-uis-vanillajs-part-1-pure-functional-style/ https://css-tricks.com/reactive-uis-vanillajs-part-2-class-based-components/
I read about `Array.prototype.flatMap` long time ago, and ever since I have not found a use case for having it as one method instead of doing `.map().flat()`. Can someone give me realistic use case?
Define "Black Box"
Of course I do understand using flatMap is equal to map().flat(). What I don't understand is why was flatMap created and not sortMap, reverseMap or any other merge of 2 methods. All of them seem to be equally often used. So why flatMap?
*whoosh*
Because Object Oriented Programming™! Seriously it makes me laugh because classes are just syntax sugar for functions anyway
Glad I could help in any way! I can see that getters/setters are in one way simpler than using the Proxy object to re-render the entire DOM on state change. They also increase performance as you are only updating what is needed. My thinking about doing it reactively rather than getters/setters is: 1. No need to have everything using getters and setters and the duplicate code `document.getElementById(`${this._id}_xxx`).innerHTML = this._xxx;`. How many lines of this until it would be less lines to do a proxy object? Maybe 9 or so? If you know there will never be more than that then that is a plus for the getters/setters. 2. If the project gets big then I would use lit-html, and then re-rendering the 'entire' DOM is very performant due to the way it automatically only updates what is needed. I started my current project with lit-html, and then removed it. If I keep on using the Proxy object rather than getters/setters I could put it back in very quickly if needed. I hear your cry premature optimization! Maybe you are right and I should just use getters and setters for now, but I am really still teaching myself and experimenting. I am doing this project to learn all about the best way to deal with the front end. I know that a job will want React, but I would not feel comfortable using React if I did not really understand what it was doing any why. The main thing I dislike about React is JSX, if it used template literals like lit-html I would be much happier. People defend JSX, but mark my words it is just a load of legacy cruft that will soon be forgotten. Step one people will integrate lit-html into React, then React will do their own version, then JSX will die. Official language standards ALWAYS win in the end, it is just the way of the universe :) If your project has a public repo would be cool to know where to check in to see how you are doing it. 
Not the author, but give me a little time and I'll address the following: * Why are the function names abbreviations? * Why not standalone pure functions? * Working tests and CI pipeline (assuming that it doesn't cost me money to run it, haha)
Hey friend! &amp;#x200B; I've made a silly little app that maps lat-lon points for volcanic eruptions and earthquakes that took place over the past week to a globe using three.js and some simple mathematics. You can check it out [here](https://the-geo-bulletin.herokuapp.com/). You will find the code [here](https://github.com/TheHappyKoala/The-Geo-Bulletin). If you have any questions regarding the code, feel free to ask. It's simpler than what you have in mind, but maybe it will get your started! &amp;#x200B;
Yawn
I went through a discord community kick one weekend. Basically how every discord I found works is that there is a group of 5-20 regulars that mostly talk to one another while everyone else is disregarded. 