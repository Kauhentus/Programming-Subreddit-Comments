That's obtuse and dismissive of legitimate crtisism with the language. There's no having it both ways.
I don't disagree with you that there currently are way too many useless libraries and some can be put into a single one. But since there are so many use cases with what people are doing, I don't think its weird to have lots of packages installed, regardless of whether you are using it. And sure dependencies can break stuff, but overall it will be somewhere down the node where things get replaced or rolled back to older versions. A problem I see is that some packages get way too much baggage with their own testing suites and whatnot that you don't need. For most packages a distributed file is more than enough but they only do their source, which for many of the major packages is a bad thing because you will never need them (like that) and it only makes the download much bigger... The bigger packages that most people use nowadays should be better looking at what people use them for and what is not needed to be included. Even fork packages that don't work well with major systems.
&gt; the cognitive overload, the mental gymnastics of having to deal with all those types, extensions of classes, implementations of interfaces, hierarchies of inheritance, union types etc. If your data/application needs those things in order to be well modelled in TypeScript, that means you're already dealing with them in JavaScript, so the overhead is there regardless. If you don't need class hierarchies in a JavaScript codebase, you don't all of the sudden need them in a TypeScript codebase. That's the whole point of TypeScript: add types in a way that reflect how people use JavaScript.
Don't think so, at least compared to Python :P it wins most benchmarks.
Then that's a legitimate solution. If you are incapable of memorizing function signatures, have the manual open and use it. It's made for people like you. Also, PHPStorm (which is de facto the standard PHP IDE) will have the signatures inside the IDE itself, so you don't even need to take 5 seconds to look at the browser tab.
Same here. Working with JS after being in the back end for too long is like breath of fresh air!
Afair, you can access response headers before the response body is fully transmitted. Thus you use two awaits - first for headers, second for actual data.
It's not about memorizing the signatures. It's about having consistent and reasonable features and functions of a language. Yes, an IDE or the website or whatever can tell me the signature. That doesn't mean the problem doesn't exist.
The initial response resolves after the headers of the response are received, but not necessarily the response body. Basically fetch resolves at two different points of the download, the first time after the headers are received (the promise fetch() returns) and the second after the data is received (the promise json()/text()/etc. returns).
I don't think I'm missing the point entirely, or even a little. Crockford wasn't either. I understand perfectly well the idea that TypeScript communicates intent and that is one of its major selling points. The other point that you're dismissing is \*also\* one of TypeScript's major selling points, as is the ability to correct problems as you're coding because of type mismatch errors, as is enhanced IDE support. As I said, I spent a long time leading a team that used TypeScript extensively, because a few other senior devs I trust a lot were pretty high on it, even though it worked against my instincts. To me, the calculus is simple: The amount of time I spend adding TypeScript into my code, including cognitive overhead, is far greater than the amount of time I lose by not having TypeScript. It's not even a close contest. And most of the people I know, including the devs who recommended it to me, feel similarly and have at best cooled on TS saying it's situational, and at worst outright refuse to use it anymore (like me).
which one is the better and newer way?
[Here is the page about forEach array prototype function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach). As you can see, to call a forEach function on an array, you need to write arr.forEach(function callback(currentValue [, index [, array]]) { //your iterator }[, thisArg]); I find this syntax to be a clusterfuck compared to a clean foreach($arrName as $key=&gt;$value){ } Does this mean Javascript is objectively a bad language when it comes to iterating arrays?
Hrm, I don't think either of them missed the point. Saying people are good at language X is not a reason to move away from language X to language Y which is a superset of X. If I have people who are Java devs and I make the decision to move to groovy, yes, that will be easier than if I did it with a bunch of C developers, but that doesn't mean it's easier for them than working in Java. It just doesn't hold up as a rationale for switching to a new language and, as /u/british-out pointed out, ew73 is begging the question by implicitly using his conclusion as his justification.
and that's fair. I'd hope that people embraced new languages and/or their team showed them paradigms in the new language, but I guess reality is reality,
I think js gets a lot of hate for a subset of its developers though. I don’t know if I’m just swayed because pcj has a hate boner for Golang and JS but I’ve seen so many posts by devs in them that were awful. Also you gotta admit that parts of it are straight insane. Any language where ‘is-even’ is such a popular module means you’ve gotta be doing some dumb workarounds to make up for the language itself.
Hi /u/Goyaladi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/donkrieg1011, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That's the extent of your complaint?
Hi /u/shasimal, this post was removed. `404` Well, this is awkward. Whatever you did is so uncommon that we don't have a canned response for it. It's also possible that you broke several guidelines. Either way, please have a good look over our guidelines (linked below and in the sidebar). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rasha__Essam, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Man do I remember those days. I also remember reading JavaScript: The Good Parts and having my mind just completely blown.
Hi /u/Alokat7r, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I haven't really heard of anyone needing to do that since most APIs either succeed with 200 or fail with 400/500. Non 200 status codes usually mean retry or display an error. A simple if statement handles that fine.
I'd like to know this too. Maybe u/Doctor_Spicy was referring to tools like `axios`, but i fail to see how adding 4kb is worth the benefits it brings. 
Again, you are comparing apples to oranges. Groovy is not a superset of Java. A valid Java program is not necessarily a valid groovy program. Where as any Javascript program is a valid Typescript program _with out any modifications_. This is what being a superset means. If you want to compare Typescript to _anything_, it would be a static version of PHP with Type annotations, or Python with type annotations, not Java to Groovy, or switching from swimming to white water rafting. The point is there is no real language shift. You can use everything from the javascript world in your typescript projects, including javascript that you wrote before. The only thing that changes is that instead of using babel to transpile your es6 into browser compatible javascript, you use `tsc` to transpile your ts/js into browser compatible javascript. And now you don't even have to do that! Babel supports TypeScript out of the box now: https://babeljs.io/docs/en/babel-preset-typescript You both are arguing about some language shift that doesn't exist
Hi /u/moneymakingmiguel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
True that
Yeah, the analogy doesn't hold up **as I said**, but we all get what he **means**. Why is there an implicit need to go to Typescript, Python, or Go for future code or refactoring current code? There is this assumption here a change in language is required and this is what is confusing the hell out of some of us. Why not refactor and extend in JS? That seems far and above the most logical solution based on the very limited situational data we have.
The solution to bad UX is not to force people to read manuals. It is to improve the UX.
Dude. Groovy may have corner case syntactic incompatibility with Java on things like method overloading with null values, but by and large it was designed to be a superset of Java, or at the very minimum, that was how it was all sold to us ~15 years ago. I'm not going to sit here and have the two of us go back and forth saying "No, it's YOU who doesn't understand" because I think we damn well both know that the point of what all three of us are saying is that having a team that is versed in JavaScript is not a valid argument for switching from JavaScript to TypeScript.
So if I get a 404 and I want to do one thing and then a 422 because User passed in bad data and I want to tell the user that how would I do it? Not all errors are the same. Or try this a user got banned because he / she did something bad now server responds with 423 I want to show that his / her account got locked.
I find both hideous. I much prefer the Ruby way, \`arr.each {|v| do\_something(v) }\`
I'm not even saying one is better than the other. I like both PHP and JavaScript. I have my frustrations with both.
This is why everyone else hates JS. Y'all clearly don't even know the vocabulary of the tools you use, lmao. Type system soundness has a formal meaning and TS doesn't qualify.
You're really arguing the minutia of this into the ground when the key question is still left unanswered, why make a change in language/environment at all? You've got a JS project, sure it will run in a TS environment, but the optimal environment for a JS project is a JS environment. We've added a layer of complexity to the project by moving to TS with 0 justification as to why. &gt;I demanded Typescript for two simple reasons: &gt;The developer resources available to me were well-versed in node, and the general javascript ecosystem. The transition to typescript has been much easier than to some other language like say, Go or Python would've been. No. 2, fair enough at least there is a justification there, but No. 1 is completely nonsensical as a stand alone reason and could only possibly server the purpose of facilitating the second reason... 
Yeah I agree. This kind of JS complaint feels more from developers from another language looking at JS and picking it apart without properly understanding what's going on. &amp;#x200B; I can give you as many examples of "weird behaviour" in C++ as you can give me JS. &amp;#x200B; And like you said, it's rare i've come across these issues writing code.
This. I don't know about the `plugin for visual studio` bit but it was Microsoft's chance to get their feet in the mud as they were being left behind by Google/Facebook in terms of developing rich media interfaces. 
&gt; However in the modern browser fetch should be mostly natively supported. I still see a lot of people rely on libraries like axios, eventhough axios can be nice, why add a dependency to your app when you can just use the native fetch API built into the browser. Says the amateur developer who's never worked with real business (or worse, government) clients stuck on IE 11 at BEST. I'm so sick of articles touting the assumption that we're beyond supporting old browser APIs. Maybe in your little hipster world, bud.
You're missing a word in the first sentence. "If you're a JavaScript..."
A [fiddle](https://www.jsfiddle.com) would be most useful, kind redditor.
In Ruby, you can easily do [1,2,3].map.with_index {|a, i| a + i} =&gt; [1, 3, 5] &amp;#x200B; Which is still map, just with a twist. &amp;#x200B;
Telephone-ts is a "Event Emitter-less" TypeScript Event Architecture. Without the use of the 'events' module from node, Telephone-ts is an OOP message bus that allows developers to easily register their TypeScript Event Handlers to listen to when an Event message is "Shouted" on the telephone line! &amp;#x200B; You will register a handler to a specific interface. When a class event that implements the same interface the handler was registered to, can take the instance and handle it. &amp;#x200B; Please let me know what you think guys! Star if you like it! 
Wasm isn't quite there yet, but I agree. Once other languages get good state-based frameworks in browser with templating ala JSX, I will completely reevaluate. 
After years of working with fetch api, I must say I completely despise the fact it does not throw on &gt;=400, but it does on network error etc. It's easy to handle but I'd rather have it out of the box.
I wrote a blog post for the first time about Infinite Scrolling using JS, here it is: [Custom Infinite Scroll](https://medium.com/@rasha.essam/custom-infinite-scroll-b7c9a9232d1a)
There are some uses for it. Your mention to skype just makes my awfull expirencens of the phone beeing "frozen" while in a skype call a justification. However, for a really small nonsense project (and assuming you don't know the native tech) it is worth a go. Not for full enterprise or serious projects.
:D (y)
1) Many of these devs don't actually know javascript, as they never took the time to actually learn it. 2) These same people resent having to use javascript in the browser, and to be fair, it had/has been a major failing of the web platform having forced a single programming language onto people. 3) Javascript is the highest performance, most widely used interpreted programming language. It is closer in speed to statically typed, compiled languages like Java/C# than it is to it's more closely related dynamic and/or interpreted brothers like python/ruby/php. This is not because javascript is designed particularly well (it is in many respects), but because there has just been so much more mindshare working to make javascript perform that allows it to perform so well given what it is.
I am a web developer with low lever (assembly and C) background. I am an ICT systems engineer and I know about +20 languages. (Not including declarative languages like HTML, CSS, MarkDown, etc). I can tell you JS is trendy and so its his ecosystem. Do you know svelte? no? Do you know react? Yes? react is from facebook and trendy. Svelte is from a single guy, compiled, faster and smaller in size with the same features. The justification to use wrost tech is trends and fame.
You don't need Moment for this. You can make a simple calculation for the time left to midnight, and then use setTimeout to change the date. 
Updated main post, here is the link as well: [https://jsfiddle.net/u62jgea1/](https://jsfiddle.net/u62jgea1/)
Typescript !== Javascript... But, yes it makes for better JS when used.
It depends on what you are comparing it to. JS came from a dynamic/scripting language background and compared to its peers there, JS performance is fantastic. V8 and its JIT push JS an order of magnitude faster than CPython or the standard Ruby interpreter. 
Thank you for the explanation. I didn't new that as I'm brand new member and this was my first post.
Oof OP hates promises and is getting pummeled in this thread. 
Hi folks, I want to share with you how I implemented the infinite scrolling technique. It would be generous of you to give me your feedback. And we could discuss how to implement that in other ways or how have you already implemented that before. Honestly, it's the first time for me to write or share something on the internet, so this is my first article ever. I got inspired by one of my friends who told me that every developer should write about his work and what he/she learns. And how that is important for the development community and for the developer himself as his understanding goes deeper the more he writes.
Hi /u/agray_dot_tech, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
what do you mean by adding 4kb is not worth it? 4kb is the size of axios ? 
Instead of response cloning, isn't it faster to `just JSON.parse()`?
I mainly get downvotes from fanboys that only know JS and are angry because their language is not the best outisde of the browser's client side (where there are no other choices tbh) :c
I work for a company that's from the mid 90's and serves around 100m monthly visits. We're as legit as they come. And I haven't had to think about browser support for ages. We have a deployment pipeline and proper transpilation tools that mean that 99% of the time no one has to bother with thinking about browser support. [Set up your tools and stop yelling at the sky](https://imgur.com/gallery/91sn32Q)
Uhh, yes, I know all of that. But we still end up needing to use JavaScript because people want the apps working in browsers...because their clients want to escape needing to install shit. But we still missed out type languages, which is why people made Typescript and Flow in the first place. This is as close as those people could get. You go to battle with the army you have. 
Problem is that all languages have their drawbacks. I mean look at Javascript... In all seriousness, you can write a perfectly maintainable application using PHP, C#, Python, Ruby, etc.
Doesn't make it suck to work with any less.
Could improve "complete"-ness by mentioning use of iterables in array/function call usage.
Ah yes, the classic "subjective" issue of consistency in a programming language. What a pipe dream to expect a tool used for expressing logic to be logical. You mention PHP's history, and that's exactly why it's so bad. Lerdorf never intended it to be a fully fledged scripting language, just adding some dynamic features to websites. As it became more popular, more features were added. That's how you end up with inconsistencies in the standard library, and insane things like some functions returning false if an error occurred but others throwing exceptions. Those kinds of things aren't "fashion", they can cause bugs because of those inconsistencies. The one thing you harped on is actually subjective, but having inconsistency like that can slow down development. e.g. "Is this value a primitive, so we have to call a length function on it or is it an object?" "Is the function for joining an array by a string called something logical like 'array_join'? Oh, it's join, okay. No wait it's implode. No wait it's both" 
&gt; It was a pain to deal with, instead of focusing on making good tests, I spent the time making the compiler happy even when the data was good (didn't accept the types). Hate to break it to you.. but your data wasn't good.
Hi /u/BurritoBashr, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That's OK. There are women who want to marry incarcerated murderers, too.
TypeScript = JavaScript + Types
I mean, that's a pretty strong opinion to hold when there are large enterprises using RN and other hybrid frameworks in production. Why are you so sure you know better than some of the very experienced Microsoft employees who work on ReactXP and Skype? Are you sure you know better than the CTOs at Facebook, WhatsApp and Slack? The latter two both use electron for their desktop apps. In my experience, Skype has been great both on Windows and Android.
I may be wrong, but I interpreted what Spice MD said as referring to `async/await`.
Most definitely they are referring to promises or async/await. 
&gt; Can you explain to me how it’s better for someone who’s been used to using jQuery.ajax? C'mon people, he asks a question, don't downvote because you cannot answer it.
Do explain. I'd be happy to correct myself.
Would you mind giving a code example of what you mean, OP? I'm intrigued...
I'm not disagreeing with that, I'm saying don't blame CSS. Blame the terrible implementations.
ITT: OP gets on the defensive
&gt;You know \`${whatever}\` Backticks brother
Promises. Promises are better and newer than callbacks.
You can do this with promises or async await. Await the result, look at result.status exactly the same way. 
 (function(){ fetch(“url”) .then(res =&gt; return res) .catch(err =&gt; return err); })().then(apiResponse =&gt; console.log(apiResponse.statusCode)) catch block only occurs on network error, 404 still goes to “then”. 
Hi /u/BurritoBashr, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;more clear, easier to understand, and has less noise Those are the same basically
&gt; 4kb is the size of axios ? Yes - https://bundlephobia.com/result?p=axios@0.18.0
Dude... This is so off base it's hard to even get started with an explanation. Promises dramatically simplify code specifically for making network calls and other async tasks. That is less noise by definition. My sense from your posts is that you don't understand promises or how to effectively use them. A bunch of people are disagreeing with your assessment. There's a reason promises and the async await syntax are used in modern webapps. 
I guess you're right, that's been best practice for anything that's Promise based ever since `async/await` came out 2 years ago. You still use the Fetch API though. I'd add the use of `try/catch` to the cheatsheet.
I used promises and async await in my blog post. The commentor asked me for one case why I didn’t use promise to handle response from the server. I replied because for that case callbacks with an object and me as the developer specifying what happens if server responds with different states is easier than using another promise / async await. I already got the final state of the response now I need to handle that next so I used callback pattern and basically everyone tells me I’m wrong. I asked people on here to come up with a better solution all I seem to get is more people telling me I’m wrong with no one telling me a better solution. No code example just more people telling me I’m wrong. So yeah...
Absolutely, this *really* threw me when I started using fetch. I'm puzzled why the standard was done this way, given the defacto standard from the past god knows how long in JS development had XHR fail on 4xx statuses.
is promise different than async/await?
...but callbacks are LESS clear and MORE noise. Plus since fetch already uses promises you're actually making it more confusing by introducing another patter into the mix. It's easier to understand when it just uses one pattern the whole way through.
Axios or die
&gt; The best tool for the job of running code in a browser is currently JavaScript. Defining "best tool" in that way is like saying that if you have to slice bread and your boss mandates that you use a hammer to do it and only equips their employees with hammers, that the hammer is the best tool for the job. It's like saying that if you have to unscrew a screw and don't have a screwdriver that a coin is the best tool for the job. Even though you "have to" uses a hammer or a coin in those cases, nobody would pedantically tell you that those were the best tools for the job when you tell them that you're frustrated because the best tools for the jobs were a knife and a screwdriver. "Best tool for the job" is an aspirational phrase that is often used to specifically criticize limits being placed on the set of tools you can choose like the opinion of others or your current inventory. Obviously when people say/feel that JavaScript isn't the right tool for the job they are speaking of what should/could be because obviously JavaScript is basically the required language for that purpose. People come from other areas where they are able to pick from a wide variety of languages with a wide variety of tradeoffs and the obvious reaction to a place where one single language is required just because is to recognize how substantially your ability to choose the right tool for the job is being hindered.
JQuery.ajax returnes a promise as well. &gt; The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise https://api.jquery.com/jquery.ajax/ That's how I've been using them for at least 3 years.
You get used to it. It’s easier to follow along with ideas and more complicated to complete tasks on your own. For every hour you spend watching videos spend an hour or two doing. When you hit a wall while programming google everything. People who only watch videos can’t program well. On the other side of the coin people who don’t watch/read educational materials tend to make the same mistakes and not advance. Continue to do both and over time you will see marked improvement. 
Hi /u/caio-ribeiro-pereira, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Two reasons fetch adoption is "low" that come to mind before difficulty of the API: 1. Requires a massive polyfill on many browsers 2. People already using another HTTP client (e.g. from their framework) 
TLDR: SB5 is our biggest release yet; hope you find it useful! - 🎨 Gorgeous dev experience - 📚 Redesigned sidebar, toolbar, addons - 💻 Editable keyboard shortcuts - 💅 Theme-ready component library - 🛠 Expanded addon API - 🖼 Brand new website
Hi /u/FlorinPop17, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlorinPop17, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. **This is your last warning, further infractions will result in your content being blacklisted.** Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jjbewildered, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
X = Y + Z Z != 0 Therefore X != Y
Hi /u/Mike-Harper, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/PositiveAttempt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is a good beginning article to fetch. Next add in arrow functions and talk about promises. It IS a lot to do introduce fetch AND promises AND ES6.
Hi /u/sobolevn, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This isn't math. The point is that TypeScript really just another tool in the JavaScript ecosystem, not a completely different language like Dart or ClojureScript.
But we're not talking about syntax, we're talkingabout consistency. All of JavaScript's methods for arrays take parameters in the same order (current, index, array). Imagine if a couple of the functions took parameters with index and array in the reverse order. There might be small bugs because you assumed that the language was designed competently, only to find out that certain functions take parameters in different orders for no reason.
I'm java programming and i really love java and spring, but today i'm little hyped learning js, specially now that i discover i can incapsulate things with closures xD
now handle 3 different error states. 403, 422, 423 in your catch.
I think part of what explains what you're saying here is that JavaScript is a language that can be engaged with on many levels. Some people are non-programmers who mainly work with HTML and CSS and they are looking for quick and easy one-liners or things that they can copy and paste to let them do a few things that are just out of their reach. For these people, they might be doing dumb things without really understanding them and they do engage with the language a lot more like a "toy" language. Other people are programmers who write large programs and have experience and education in software engineering, algorithms, programming paradigms, security, the DOM, HTTP, etc. When you're looking for books, tutorials, scripts, advice, libraries, etc. it's hard to filter out either category of people. It's easy as a serious programmer to run into threads or articles that are mainly the former group and thinking that the language and community are no good. However, the latter group is a gem that's out there if you look hard enough and can help you see that it can be engaged with in serious ways.
Async/await is just sugar over promises.
I don't claim to understand it, but it's the only way I can explain what's going on. Show me another platform where developers come in, refuse to understand the programming language, invent another language, transpile it to the real one, and pretend that everything is ok.
But if people choose to make 10 different implementations for the same thing and some modules use some implementations and some others, how can you fix it? Force everyone to use a certain module? Reject modules from entering the NPM? How would that work?
Pretty sure he is not.
But OP does use async/await.
No I don't hate promises. In the context of the problem I'm trying to solve (which is in the last solution on the post) I pass in a callback object with uses pattern matching to respond to the final state of the response and in that particular case I don't need promises so I didn't use it. Apparently that isn't well liked. In my wrapper solution I used async / await which is even better. Then I pass an object that basically responds based on how I want to display the result to the user like this ``` get(url, { 200: body =&gt; doSomething, 401: body =&gt; somethingElse, 422: body =&gt; anotherThing }) ``` Apparently Reddit wants me to use Promise for that. I don't see why I should since there is nothing async about it I'm just returning a result based on the outcome of the async/await.
Wouldn't you just use a status code map un the final then? Sorry, I'm kind of confused on the whole debate here..
hey, hope you didn't want to read code samples. this hand icon showing how many meaningless claps this article got is covering up the content yolol. https://i.imgur.com/QpvCP3y.png
As someone who writes both PHP and js professionally, php developers don't have the right to call js a shitty language, they suffered from very similar issues. Both are fine nowadays though
It's pretty simple, JavaScript was invented inside browsers for browser stuff. Porting it to the server side is blatantly done by frontenders not wanting to learn an existing server side language. It seems an easy route, but ultimately it is a waste of time, because you screw around way more trying to get your server side browser engine to work with the weird bolt on server APIs than you would have if you just learned an existing language. That is dumb.
Now read up on fetch. It seems like you didn‘t really grasp the Promise concept yet if you think that it‘s somehow worse(?) than callbacks or you can‘t handle different status codes. You argue about handling status codes which is exactly the same, whether you use Promises or Callbacks. The difference is merely in how you make the request and how you describe (in code) on how to handle what comes after it‘s finished, when the network somehow failed and additionally, fetch can abort requests. Also, chaining then requests for processing the response in some way is really convienent and easily readable. Whether promises or callbacks, handling different status codes is basically a switch or if condition checking which status code you got back. Example with fetch: fetch() .then(processResponse) .then(response =&gt; { switch (response.statusCode) { case „423“: doSomething(); break; case „422“: doSomething(); break; case „403“ doSomething(); break; default: doSomething(); } }) .catch(() = { // Handle network error }); Example anything else with a callback: makeRequestWithWhatever(function(response) { response = processResponse(); switch(response.statusCode) { // ... } }); The fact that you want to handle multiple possible status codes has nothing to with the way you actually make the request. Sorry about the formatting, I‘m on mobile. 
The signature for Array.prototype.map() is: map(callback(any, int?, array[any]?)): array[any] and for parseInt() it's: parseInt(any, int?): int So a compiler like TypeScript would see nothing wrong with using parseInt as the callback parameter for map() because (any, int?) is perfectly compatible with (any, int?). It has no business knowing what the 2nd parameter does and that map() puts there the array index and parseInt() expects a radix. That's the programmer's job.
&gt; This isn't math. It's logic. &gt; The point is that TypeScript really just another tool in the JavaScript ecosystem, not a completely different language that happens to compile to JS like Dart or ClojureScript. Just because you can find languages that are more different from JavaScript than TypeScript doesn't mean that's TypeScript isn't a distinct language. It's a distinct language by definition and that's relevant to this conversation because many of the people OP is talking about might dislike JavaScript but like TypeScript.
The title is misleading. The described `&lt;Provider&gt;` is *not* from React, it's from the React-Redux library. In addition, this post is from 2015, so it's rather dated. Granted, the basic concepts are still roughly the same, but the implementation details have changed quite a bit. I wrote a post a few months ago on [The History and Implementation of React-Redux](https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/) that goes into considerably more detail on how it works.
It's not the JavaScript language it's the JavaScript community that annoys me
This is the right answer. Keywords: babel-env and babel-polyfill.
Programmatically inserting the script tag like this also prevents the parser from recognizing the URL ahead of time, so this can lead to delays if you need to open a connection with a third party, especially if a SSL handshake needs to take place.
H o w a b o u t n o ?
&gt; I recommend trying to code in ES6 and use some type of packager (webpack, browserify, etc.) to handle the shimming for you. &gt; &gt; I use es6 (i prefer arrow functions for surer and const is life), babel, and webpack. But if you are using react it seems like it's the standard to go with babel and webpack.
Yeah which is what I did in the final solution. Oh and I used async / await not promises.
Async/await is promises though
I think the philosophy behind it is that it just literally has to *fetch* and when *fetching* fails, then it should throw. When you get a response with status code 500, something went wrong on the server, but the API still succeeded at *fetching* something from that server.
Might need "return false;" in the button onclick.
I did not say i know better. You dont need a computer degree to see the ram usage and performance issues of those things. At the cost of faster dev speed. Also, they like to be the trends, in the end it's free advertisement to know that x fw is used on y company. Those big companies got some good follow ups, since they have such a strong control over people opinion, they can create trends really quick.
Yea I don’t think what you’re doing there is that crazy really. It’s not pattern matching, you’re just storing a hash of operations indexed by the response status code. But you could just as easily put that in the then block of a promise too. Either way people are bikeshedding you.
Hi /u/2774a29a6a5b9b08000, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for letting me know.
It just lets me click on it and nothing happens ! I’m new to JavaScript so any other suggestions would be awesome! 
Yeah it's not. I didn't think it was crazy. I do realize that I could have used `Promise.prototype.then()` to do that as well. But I was showcasing `async/await` which worked in my browser out of the box and I thought it's nice. But apparently I just named the argument as `callback` and I guess my choice of `async/await` over promises and naming the argument `callback` made it all blow up.
IMO the hardest part of getting a11y right is just learning the best practices and why. Once you know them, implementing them really isn't that difficult or time consuming. So it's really just a matter of being educated, which is well worth it because you do that once, then have it for years to come, and just have to keep up on the evolution as the tech changes.
Pour some sugar on me!
`resp.json()` doesn't return a promise, however! `.then` takes in a callback and returns a promise
button.addEventListener maybe? Does the console says anything? 
If size and speed are important for you, then consider Preact (3KB), Hyperapp (1KB). Preact gives you compatibility with React and is faster than React Fiber. Hyperapp gives you the Elm Architecture for state management, along with a performant virtual DOM in 1KB. 
Yeah, i know there are alternatives but you know. Trends :'D
1. For the same reasons that there is so much hate between android and apple fanboys, between conservatives and liberals, between this tribe and the next. Tribalism can make many people crazy. That tribalism is very prevalent in the JS community as well. Go say that Vue is better than React (but make popcorn first). Even your second question is inherently tribalistic. "Why do X when I'm doing Y And they could do Y too!" 2. JS's popularity has less to do with quality and more to do with monopoly. WASM will hopefully open the gates to a variety of languages. Python is &lt;3 my friend and the minute I can write proper webapps in python is the minute I give up on JS ;) 3. JS is an interpreted language and thus falls under the "fast enough for 80%, and the 20% is written in C" rule.
PHP is just a versatile configuration language for a blazing fast library written in C. Your Swiss army knife for getting the job done. So often I've seen teams so deeply stuck with trying to achieve their programming utopia. I'd introduce PHP just as a POC solution to try different things and make some quick progress. Get the project up to speed. It would easily outshine their purist solution in so many ways. Simpler code. Better performance (if you use it wisely). Instant compile time. Easy deployment. Even still the purist team would port the code back into their environment. This approach with using PHP as a POC environment would still provide the quickest progress.
I think the confusion originates from the specific example in your blog post. In your blog post it says: ``` const get = async (url, callback) =&gt; { const response = await fetch(url) const status = await response.status if (callback) callback[status](await response.json()) } ... let myData = {} get('https://api.github.com/repos/frontojs/connect, { 200: body =&gt; { myData = body } }) myData.id ``` The problem with that example is that you can't execute that in one go and that that example *only* works in the console, given that each line is entered executed one by one and the fetch call is fast. It's a weird combination of async and sync. If you wanted to do something like this in actual code: ``` let myData = {} get('https://api.github.com/repos/frontojs/connect', { 200: body =&gt; { myData = body } }) doSomethingWith(myData) ``` that would just not work. Instead, what you *could* do is (pay close attention to all the modifications): ``` const get = async (url, callbacks = {}) =&gt; { const response = await fetch(url) const status = await response.status if (callbacks[status]) { await callbacks[status](await response.json()) } } ... (async () =&gt; { let myData = {} await get('https://api.github.com/repos/frontojs/connect', { 200: body =&gt; { myData = body } }) await doSomethingWith(myData) })() ``` This way the 'async'-ness remains. It doesn't switch from async to sync anymore.
My biggest issue with PHP is inconsistent argument ordering. I'm guessing they'll never fix it though :(
Sure, there are trends, but that's the same for any programming language. I'm sure no C, C++, Java programmer is using the same libraries and frameworks that they used in the early 90s. Languages acquire new features over time and libs and frameworks get updated to take advantage, or for bug fixes and optimizations. That's just the life of a developer. It would be disastrous for software development if languages, libs and frameworks didn't evolve. The only real problem I see is the pace of evolution and innovation of all things Internet related, where an Internet day is equivalent to 3 seconds on Instagram, lol.
I want a standard library that's actually good and robust, then you won't need to either implement simple things over and over again or download a fleshed out stdlib in the form of 7900 packages.
[https://github.com/lilliputten/jsrtf](https://github.com/lilliputten/jsrtf)
I understand your not defending this behavior, but maybe if these people don't like the language they shouldn't have went into web development? IMO it's the devs fault, not the language. &amp;#x200B; I wouldn't go into game development if i didn't like working with C++ for example. If make a compiler that convert JS into C++ though and start making games, would that be because C++ is an inferior language or is it just me being a dick?
Fetch is still considered experimental and the standard may change in the future according to mdn. So if you use it in a project, you may have to rewrite portions. Also, internet explorer does not support fetch at all.
If you're new, I would seriously recommend using a different browser, rather than get tripped up by IE idiosyncrasies. 
Hi /u/karanvalecha, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Basically, that's the major issue and the fact that in this really small interval another TRENDY_FACTOR * NUMBER_OF_FW_DEVS frameworks appear to solve the same issue in the same timelapse. C++ for instance, have a library / fw called boost. Sure boost is great, but few to no alternatives exists for those things. If there are alternatives however, there might nore be more than 5. That's how it allows it to evolve. Give it competition but at the same time, other coders contribute to the source rather than create a new one.
Hi /u/ed-r-2087, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don’t know how to do it on my phone...
At first glance I'd say it's `remove()`. Checking... https://caniuse.com/#feat=childnode-remove MDN has a polyfill: https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove Don't know if that fixes everything, but its what caught my eye. 
Actually you are correct. I will update the post.
Nothing from the console! The button is just clickable! 
Hey first of all ...big kudos for ur first article...it's really nice and to the point. I know the amount of preparation and brainstorming that goes behind even on simplest of things. Also I think its always better when we present our ideas with some examples or case studies. Help other ppl to connect with whats being explained.
start by forking the repo, fixing the problem and sending a PR. be a good open source citizen. while you wait for the PR to be merged, you can use npm to install directly from github. `npm install mygithubusername/myfork#branchname`. npm v6.9.0 (still in prerelease, I think) has support for package aliases, which provides another way to approach this problem. 
If you mean object literal syntax ,eg. `{ type: 'cat', feet: 4 }`, then yes destructuring is similar, and on purpose, because it's sort of the reverse of object literal syntax. Consider: const type = 'cat'; const feet = 4; const cat = { type, feet }; // Before ES6 that would be { type: type, feet: feet } vs. const { type, feet } = cat; type; // 'cat' feet; // 4 The first one is putting multiple variables (ie. name/value pairs) into an object. The second one is extracting multiple variables *from* an object. Their syntax is deliberately similar because they're meant to be seen as inverses of each other. Hope that helps.
Thanks for additioanal info. I know almost nothing about react was just googling "react is not hard" or something along the lines just for fun and this article came up. I like that the author dug deeper to explain what tutorials often miss and new people can become easily confused by "magical" components and syntax
I removed the .remove() and it clicked after two clicks but the program didn’t work as planned. 
Hi /u/ed-r-2087, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Tbh I don't get this either. I dislike Javascript as a language (it makes up for it in other ways) but also dislike using Python for much the same reasons. Honestly it's probably more the case that people who use python end up investing time learning how to work with it. With Javascript you can do a lot more with less and not invest time to learn how to work with it. I wonder how all of these people hating on Javascript would feel about lisp though. Talk about freedom to shoot yourself in the foot there! 
Hi /u/KurokoOverWatch, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DomRao04, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Fetch is not experimental, it is a living standard as per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#Specifications).
Does fetch allow me to set commonly used headers for every request? I suppose I could just include a config module everywhere and reuse a variable, but i have APIs,that require a number of headers on every request to be set properly. Seems like fetch isnt very DRY... ? It's basic, and functional. But so is a model t 
Hey, you know what would help to avoid all of this. Compile time types! 
because array\_map accepts however many arrays you want
Oh my God stay back, he knows 20+ languages! It's not like the fact that Facebook is behind a project guarantees a better quality and maintenance compared to a random lib written by one guy. Imagine having to choose between two libraries doing the same thing (or similar) and not considering the fact that one of the two is developed (and above all USED) by Facebook, while the other is developed by a single guy. But hey, it's "faster and smaller in size". That kind of reasoning makes me not trust you as a programmer, honestly. Oh and knowing a language doesn't mean being able to write a simple hello world example. Stop bragging 
Everything compiles to machine code, therefore all languages are the same CMV
True, but also irrelevant. ClojureScript compiles to JS but it's not part of the JS ecosystem the way TypeScript is.
CoffeeScript is JavaScript CMV
For the purposes of most discussions, JavaScript simply isn't TypeScript. To assume the two are synonymous would be stupid.
The response isn't only decoded when you call res.text, it's actually downloaded first, then decoded. It's part of the HTTP flow control. First receive headers, then the body, only if you care about it.
I didn't say synonymous. I said JavaScript + Types. You don't think that's a fair description?
Ergo TypeScript !== JavaScript
To play devil's advocate, you say parsing a DSL at runtime is bad, but you're not being very upfront about what an alternative would be, given a problem domain. Doing it statically? Well, some system do just that just fine (e.g. graphql integration for vscode), regardless of it being a tagged template. Is something like JSX an alternative? I guess, but it isn't Javascript(tm) and if you're parsing ASTs anyways, it's entirely feasible to drill into tagged templates as the graphql vscode plugin does. Hyperscript? People complain their designer can't read it. Object literals instead of style component tagged templates? You get people asking about triple nested quotes for `:after {content: "'"}`. SQL ORMs? Only take you so far. The argument that some libs use regex under the hood isn't about tagged templates, it's about regex abuse. Such a lib could just as well use a proper parser. Something that this opinion seems to ignore is that this is Javascript, a language primarily used by UI people: people who want things to look "nice", and tagged template serves that purpose nicely when what you need is a complex DSL that doesn't jive well when transliterated into an API.
I'm happy to share with you my oppinion, but you kinda look like a JS fanboy. Of course facebook maintainance will be better, after all, they are in control of how it evolves. You happy with it? Cool! Does it make it the best tool? no. So let us all stop using PHP please. Hack is better because it's used by facebook and facebook does it all good!. Hey, you see, google made angular, lets all use angular because hey google? Regarding to the languages issue, I'm sure you miss out a lot of oportunities just because of the egocentric "I only use tools backed up by large companies and avoid other things if possible". The fact of knowing (and not just the hello) many programming languages let's you see diferent ecosystem and how they work so you may compare it. Starting with https://nim-lang.org/ or https://crystal-lang.org/. Yeah, it's not like rust beeing backed by mozilla, so it must be garbage, let me stay away... You're the one I would not trust as a programmer, because what you trust in is in big companies ruling the internet. Now they will not only rule the internet but the programmer's tech on the internet. Devs use .dev to develop. Google buys that and sells for 12€. Good, go buy one. Google even set a domain web.dev to claim it's the way to go. Do you think they will inspire react in there? Oh hell no, look at this shinny project polymer, web components bro, look, they are good! The fact that google, and facebook build things for the web, it does not make them the best tools. Look at vue, do you like vue? how many people use it? Hey, who made it? A single guy from china? Wotofok, better stay away. ??¿¿ Go play big companies's game. I certainly won't.
All of this focus on promises and no-one is even going to draw attention to the fact that OP doesn't know what a cheatsheet is! ^/s But for real, way to much hate in here for a sub about programming. Chill the fuck out y'all!
Why is Infinity too clever? And how is mutating the array in place within a `while(true)` better? You should use the native Array#flat method. Pass it the depth that you want to recurse to. Whether that's Infinity to flatten everything, Number.MAX_VALUE for the same thing but using an actual number, or an arbitrary depth if desirable.
True but misleading. It's like saying JSX !== JavaScript. See my point?
No. JSX isn't JavaScript either. `const element = &lt;h1&gt;Hello, {name}&lt;/h1&gt;;` isn't valid JS
Yeah, but if in the context of a discussion about JavaScript someone suggested using JSX and you responded by saying: &gt; JSX !== JavaScript Don't you think that'd be a little misleading?
Fair enough. Although I would still prefer that the language runtime strictly enforced the signature of the callback function instead of treating the index and array parameters as optional. I've spent a whole lot of time with ActionScript, which does this. The strict enforcement of types and method signatures not only removes a whole class of subtle bugs, but it also makes refactoring and static analysis a lot more efficient and productive.
Point taken, I'm a young dev without a formal CS degree and JS and the internet were my teachers and I didn't know soundness was a legit term in the context of types. Regardless, yeah it's not 100% sound but like someone else said, when targeting the browser it's about as close as you can get. Maybe Elm or another alternative is closer to being a sound system but they don't have the community or accessibility of TS. 
Man I was talking about the specific example you brought up, stop it. It's you which sounds like a hater, since I'm more than happy to use Java, JS, Go, Rust, C++ or any other language, given they are the right tool for the job at hand. But if you're happy using Svelte in production apps, enterprise-level apps, go ahead. If you work in a sane team, every single one of your colleagues will ditch your idea even before you finished stating it to them.
Thank you so much.. Brother
Casually suggesting the use of JSX isn't useful either. It'd be like suggesting someone buy a new car when they're asking about troubles with their current one. A decision to use JSX and React is going to go in to the planning phase of a project and require a team that's savvy in React. That's a huge decision, and often won't be relevant for most discussions about JavaScript. TypeScript isn't *as* heavy a decision, but it definitely changes the dev and build environments, and will eventually require the entire team to come up to speed on TypeScript as well.
Ha ha...brother, i said i learned the beginning javascript that a beginner should know first for starting with JavaScript...
Update: I upgraded the model to 93% and fixed a lot of false positives!
Model updates rolled out today, can you try your puppies again?
please try again. I updated the model
Wanna try on the new model? I updated it with less false positives so far.
Yeah, you are absolutely right. I guess watching video actually become drug to me..Whenever i stuck in a problem i try to solve it by watching video and then relax... 😫
Sort of. Async/await is the same concept as Promises but taken another step further/
&gt; You dont need a computer degree to see the ram usage and performance issues of those things. Chrome has terrible ram usage but it's still the most popular browser.
Okay, that's a reasonable distinction. I guess short, low-effort comments like "TypeScript !== JavaScript" and "TypeScript = JavaScript + Types" didn't really carry enough nuance on their own to accurately convey our underlying opinions. I'll try to be more precise when expressing myself in the future.
Yep you nailed it, that was definitely what people got hung up on. A few of your comments about promises adding noise and confusion didn’t help, though, it did sound like you were just anti-promises
I literally just used `Symbol.for()` as an object key on `global` to keep track of a singleton in an app we're working on. That's (one reason) why. 
The tribesmen are out
I’m kidding
I guess you got this from the ES.Next newsletter as well. If so, should give credit at least. If not: What a coincidence 😎
He is only 1.4% porn right now! 😁
Been using he for half a year and cant complain. When I checked, others didn‘t fulfill my needs.
Don't get me wrong. I also use React or Vue. The idea however, is that there are alternatives (not yet mature) that the idea and implementation behind it are much better than the current tech. Yet people look at it like garbage.
Teehee, that tcls
Chrome is popular. People who use computers and have no idea how they work don't care. They don't even know what ram is. They know that there are chrome and firefox. Chrome hoever, is backed by google, who everybody (except few of us that use duckduckgo or others) uses. They trust chrome. Chrome could perfectly be mining monero or bitcoins at 1% CPU usage and nobody would notice it, nor care. However, the idea of having a very large and bolated browser in every app delivered is kinda crazy. If you need to develop a desktop app. Choose your path. But C / C++ will most likely pop for a cross compatible and fast solution. I would basically invest in the right tech rather than using some bolated thing not born for that purpose... Web had flash long ago, bolated big apps, slow, etc. Desktop have electron now. Just let it go away till some good project using a better base comes into place and beats it's ass...
Thank you very much for your comment. It is the first comment I receive, so it means a lot to me. You've encouraged me even more. I wrote it the way I would want someone explain something to me. As you've said when you know the case study you got more engaged to the idea and it reinforces a deeper understanding.
Yeah man for sure there are better products out there in the wild! But as you said, they are just not mature enough to use in production. We can kinda see them as a tech demo.
A tech demo to the future tho. But I kindly think no big tech will invest on them having other options, so it's a shame.
The chart you posted shows "Experimental. Expect behavior to change in the future."
&gt; Hate to break it to you.. but your data wasn't good. Hate to break it to you.. but you have no idea what you're saying.
Some good reasons, some bad: - JS was designed in haste and has some really strange issues that can’t be solved without breaking compatibility; e.g. ===. - JS used to be a lot worse than it is now, and some aren’t familiar with recent improvements. - JS takes dynamic typing to an extreme, e.g. with prototypal inheritance. That makes it hard to debug, and also supports different programming styles than many programmers are used to.
https://medium.com/@jeffrey.allen.lewis/http-requests-compared-why-axios-is-better-than-node-fetch-more-secure-can-handle-errors-better-39fde869a4a6
&gt; If your data/application needs those things in order to be well modelled in TypeScript It's well modelled in JS without those. Data is fine. Having: `type Props = AttributesInterface | HooksInterface | ReduxInterface` in the project with definitions of attributes which mostly are functions has nothing with bad data and everything with making the compiler not bitch about types. And, yes, you all of a sudden need them because library writeres just went at it. And no, we're not writing "Hello World v2" named "Simple ToDo Application" to kid ourselves that &gt; That's the whole point of TypeScript
Many things wrong. That it's better than the previous version, doesn't absolve all of it's pain points.
Respectfully I disagree. Our experience is that TS is an upfront investment that pays off in the mid- to long-term. By investment I don't mean in terms of writing code (I would 99% guarantee you that I am a faster and better developer with TS than without), but in terms of onboarding new devs. We have found that it slows people down for about 3 months, then is neutral for 3 months, after which the pace of development is higher than without types. Some of the benefits are amplified depending on other parts of your stack. For example, we use GraphQL extensively, with type generation. If I need to modify the gql schema, then I just re-run the type generators. If there are any type errors as a result of the change, TS lets me know. The though of making changes like this without compiler guidance gives me nightmares.
You can't love JavaScript if you don't hate it first. It's that, some people just never go pass the hate, they're filled with love of something else: hate for JavaScript.
React and TS can be challenging together. One of the biggest hurdles is the quality of the types of your dependencies, and we make a conscious effort to factor this into decision making about adding new deps now. Most of our types aren't written by us. Lots are generated (graphql queries -&gt; TS interfaces), and lots are inferred by the compiler. Pretty much we just write prop/state type defs.
&gt; but that just looks like C. That's the joke. WebAssembly is exactly what the names says: Assembly i.e. it's a compilation (transpilation) target for software written for x86 etc. in C/C++ and other "classical" ones
100% behind this. The only issue is I've found many npm packages to have one-off publishes and the developer is absent/unresponsive. &amp;#x200B; That said, I still think fork+PR is the best solution, though - you can make a note in the PR for people to use your fork directly if they encounter the bug you have if the original author isn't available.
What do you mean? Sites that let you write js online like codepen? 
But you could have just used a string instead right? And your app would have continued working the exact same way?
Yes, we do have TypeScript and other languages that are objectively better and compile down to JS. Therefore, JS is hardly the best tool for *any* job given that you can work on a better language instead.
Mostly, yes, though as a Symbol, it doesn't show up in `Object.keys()` which is part of the reason we went that route.
Okie dokie. 
I rewrote fetchival using newer syntax and did some minor improvements. I released it as `esfetch` and it's around 500 byes minzipped.
Looks great! Can't wait to roll this out in my org 
Check out esfetch! It's a minimal wrapper (~500 bytes minzipped).
It depends on what you're doing with it. In the end, the web is just text, so using some script to respond to events makes sense. But somewhere along the line it got Frankensteined into a UI language that, like the monster, is very difficult to (source) control. I'm not a big fan of relying on the client to do all of that work anyway. Building juicy HTML is a servers work IMO.
Weird... It says status is Living Standard, but in the chart, for Basic Support, it has an icon indicating Experimental. I guess it's both?
Controversial opinion here: If you need to ask why Symbols are necessary you're probably not part of the intended audience. Like iterators, they offer low level access into JavaScripts inner workings and are very useful if you're developing frameworks or libraries which will be used by others. 
Project Page (?): https://github.com/avolpe/develop *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah sure, let me throw some random pics at it :)
But you also could have just excluded that key from anywhere that iterates over the object right? Or you could have just put all the iterable properties on a sub-property (ie. instead of iterating on `foo`, iterate on `foo.iterableStuff`)? Or you could have just not blindly iterated over the object altogether, and given it a method (or even an iterator property) for getting it's iterable stuff?
Yes, though, then any code that consumes or iterates over the object has to know to exclude such things, or use that method, or sub-property. When using a Symbol those keys become what amounts to .. instance-level (object specific maybe? I'm making up words here) private properties. Consuming things need not know or care that my random-ass property exists and can go on doing what it does. Symbols also, by their nature, are unique; `Symbol("foo") !== Symbol("foo")`, so even if another developer comes along and tries to cram a new key in there under "foo", it's going to be a different property. The only way to get back at it is using `Symbol.for("foo")` which in turn implies some intent being getting at _that_ specific Symbol. What this article didn't go into, and one of the features that we're not using is some of the more interesting things Symbols allow you to do. Take a look at the MDN on the topic: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols
The point in my original comment was that OP is using this *modern* API (fetch), then proceeds to use old and clunky methods such as callbacks. Since the API has native support for promises, why not make the cheatsheet ^(if you can even call it that) as good as possible? Not using arrow functions and callbacks will just be a bad example for people to come back to, as a cheatsheet. TLDR; if you're making a cheatsheet, make sure you follow best practices.
I've tested with some regular pics and NSFW pics everything identifies as a drawing Blurred this one manually: [https://i.imgur.com/ZWAmgtU.png](https://i.imgur.com/ZWAmgtU.png) (sfw) &amp;#x200B; These also show up as a drawing: (links are obviously nsfw) \- [https://www.reddit.com/r/gonewild/comments/axjsxm/slowly\_undressing\_for\_reddit\_is\_fun\_i\_could\_do/](https://www.reddit.com/r/gonewild/comments/axjsxm/slowly_undressing_for_reddit_is_fun_i_could_do/) \- [https://www.reddit.com/r/gonewild/comments/axjsxm/slowly\_undressing\_for\_reddit\_is\_fun\_i\_could\_do/](https://www.reddit.com/r/gonewild/comments/axjsxm/slowly_undressing_for_reddit_is_fun_i_could_do/) \- [https://www.reddit.com/r/RealGirls/comments/axk841/hey\_yall\_2\_for\_tuesday/](https://www.reddit.com/r/RealGirls/comments/axk841/hey_yall_2_for_tuesday/)
Hi /u/obionekanobi88, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
So this is less about hooks and more about styled-components. It's neat that you've used hooks, but they play a much smaller role than the actual styling, and I think it makes the title very misleading. React hooks didn't solve your light/dark theme issue, styled-components did, and you didn't even mention that in your title.
OK, I'm intrigued, can I have a Vue component along side an Angular component in an encompassing React navigation without iFrames ?
Probably more accurate that people decided to be programmers and were forced to be web developers (and thus forced to use javascript)
Callbacks are fine *if* you're making a single simple request, but as soon as you start trying to keep track of multiple requests they become a mess. Try solving these problems with callback (and don't forget about error handling): - Take an array of URLs, GET all of them in parallel and return the array of responses. - Do the same, but run them in a sequence instead of parallel. - Make 5 requests where each request depends on the previous response. All of these problems are trivial with promises: ```js // parallel const responses1 = Promise.all(urls.map(url =&gt; fetch(url))); ``` ```js // sequence const results = []; for(let url of urls) { results.push(await fetch(url)); } ``` ```js // Dependent requests const firstResponse = await fetch(url1); const secondResponse = await fetch(getUrl2(firstResponse)); const thirdResponse = await fetch(getUrl3(firstResponse, secondResponse)); ``` With callbacks, you either have to write a bunch of buggy stateful code to solve these problems or use some kind of callback utility library.
While it is a nice reference - it is 7 pages when printed (maybe 5-6 after stripping out the headers and ads). There is a lot of text, explanations, history and reasonings. I would definitely not call it a cheatsheet. More of an article...
It was actually in my original title, then after asking for feedback I've noticed that the style-component part is just an implementation detail. You could remove the styled components and themes and use let's say purely inline styles and it would work the same way. The hooks part might be a bit light indeed, it was more a way to show how we can use them for styling purposes, and use this as a quick introduction to build custom hooks (like the useTheme or useDarkMode one).
I can dig respectful disagreement. I’m also not using graphql and could see where typing might begin to feel more important there, although it wouldn’t be enough to convince me to go back (you know, probably, at least that’s what the tea leaves say). Anyway although we disagree take my upvote for civil discussion. 
As far as `fetch` is concerned, if it succeeds in sending the request and succeeds in receiving the response, there is no error. It's up to your application to define which statuses are errors. It's also not always as obvious as it seems; for example if you fetch `/api/post/10`, and the post doesn't exist, should you get a 404 that throws or a 404 that resolves `null`?
Could be standardised but not implemented 100% so it's still experimental?
God damn mobile client. Somehow it moved my reply elsewhere and I’m not retyping it. Anyway +1 for civil discussion. 
But I want to use proxies and CSS grid in IE8
Someone should be looking at your function signatures.... Major code smell there
&gt; Yes, though, then any code that consumes or iterates over the object has to know to exclude such things, or use that method, or sub-property. You can achieve exactly the same thing with strings by marking them as non-enumerable... like /u/ghostfacedcoder said, "all they do is give a slightly more elegant solution to a very specific problem."
Isn’t this the JavaScript subreddit? Lol
Well, yes, but actually no.
I don't think the intended audience is only library/framework developers. Most people probably ask "why" because a lot of the use-cases for symbols are also covered by strings and objects, so most devs won't understand why because they've already solved those problems using strings and objects. Similar to sets and maps, I'm sure a lot of folks ask "why" because to them arrays and objects are good enough even if their use-case would be better suited for Map/Set.
The only reason TS is unsound is for compatibility with JS code and "you don't need it" JS features. There's plenty of languages with sound type systems (Kotlin for one, Java for another) that compile to JS just fine.
I fully understand how symbols work, and I stand by my "slightly more elegant solution to a specific problem" assessment of them. And that's really the point I'm trying to make. ES6 was for everyone. Every developer in the land, literally tens if not hundreds of thousands of people, all cried out as one "thank you for arrow functions!!!!" when ES6 was released. In contrast everything the working group has released since has been a pet feature: it helps someone with their specific problem, and does jack for the community. Whether you're ok with that larger concern, there's a smaller concern that newer devs see these features and think "oh, I should use them", when they really shouldn't. So my pushback on symbols is very deliberately aimed to push back against that mindset, and reinforce the idea that strings (or even strings marked as being non-enumerable) are a perfectly valid option for most devs.
Hi /u/gkarwchan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Well, you certainly don't have to use them if you don't want to.
Lol works for me!
And TS wouldn't exist without JS. The superset is always useful if the subset is as well. Don't even know how you think TS being useful means vanilla JS isn't, lmao. 
I use them to create Enums for switching my FSM in a game loop... what do you think of that? ``` this.SCREEN = { TITLE_SCREEN: Symbol('TITLE_SCREEN'), GAME_SCREEN: Symbol('GAME_SCREEN'), PAUSE: Symbol('PAUSE'), GAMEOVER_SCREEN: Symbol('GAMEOVER_SCREEN'), }; ``` ``` switch (state.currentScreen) { case state.SCREEN.TITLE_SCREEN: // Do something break; ``` It seems the right thing to do as I want a totally unique value for each Enum.
Eh, I wish symbols had a special syntax for them like in ruby
I know that and I understand the logic behind it. I don't necessarily consider it a bad design decision, I'm just saying that having implemented clients based on fetch from the ground up in several decently-sized projects, I would rather have it reject on HTTP errors. The error handling code is usually the same no matter the type of error, so I almost always end up with a wrapper that basically checks the response code and rejects the promise if it's not 200 (also, I just realised what I actually meant in my original comment was rejecting, not throwing, it's a subtle difference but a difference nonetheless. Sorry about that). It makes the calling code neat and organised - then for success and catch for error handling, which I think makes a lot of sense. My point is I would prefer to not have to write wrappers in all my fetch code to achieve the behaviour I described, that's it.
Yeah I get what you're saying. It's a matter of convenience. I use axios in all my new projects to avoid writing wrappers and running into common gotchas like forgetting the `Content-Type` header.
&gt; All they do is give a slightly more elegant solution to a very specific problem. Isn't that most of what ES6 was?
No, ES6 was slightly more elegant solutions to very general problems.
The problem as always is, who writes the standard is not the one who owns it. The standard is owned by the ECMA but written by many people and a commitee containing all important users (read as vendors) of ECMAScript. AFAIK even Adobe did write EcmaScript a long time ago since ActionScript was based on it. Apart from that there are other standard organisations involved. For many ECMA standards the DIN contributes a lot, even though I doubt that for EcmaScript. Often the ISO contributes too. One thing many people like to confuse is JavaScript and EcmaScript, they are not the same. EcmaScript is a standard for a general purpose language, whereas JavaScript is an implementation of that language. Other implementations are for example ActionScript or QtScript. They are not compatible to JavaScript though, cause JavaScript extends EcmaScript with a really full blown standard library.
Except it's also very useful for most casual users of JavaScript, like implementing custom iterators on classes for example.
I haven't read the whole article nor the comments so far. I just want to thank on behalf of past me, all the examples I looked at the time just `console.log` the response. This article first example has just what I needed at that time. It's simple but past me thanks you
Hey, Thanks so much for your time in writing this detailed answer(s). Very helpful. I now understand fully. Though, the last one was still a bit confusing but that’s probably because I don’t know how to incorporate/imagine having a imaginary y and x axis into the canvas...but at least guessing is viable. I honestly thought I was the only one who guess for the position of placing certain things like shapes etc..but glad I’m not the only knly one and it is normal thing haha. If it’s alright , may I PM you sometimes if I need further help? I’m practicing on drawing with shapes but when it gets to stuff like arcs and lines and curves, those I feel will need lots of attention along with animations...I also understand that you may have ofher important things to do but I’m happy to leave the PM and you can repmy whenever. Sorry for the inconvenience and nuisances
Inside your function you're getting the div element and not the paragraph so, it has to be `$('#paragraphtextform p')`. Next, to put the value of your input into the HTML you have to get the its value: `$('.textinputform').val()`. And it will be `$('#paragraphtextform p').html($('.textinputform').val())`.
It's just sad to see this results. All the noise was cause it was really bad but apparently no one in the JS engine vendors care about community. This is a shitshow!
hard to tell as Reddit has screwed the formatting of your code, but probably change: `$("div#paragraphtextform").html("input#textinputform)` to `$("div#paragraphtextform p").text($("input#textinputform").val());` 
Wrap fetch to reject for 4xx and 5xx. If you want to handle that error you can otherwise pass it up the stack.
Usually what I use symbols for, if I'm using TypeScript I'll go for the native enum tho
There was also a Microsoft project to transpile C# into JavaScript. But the only group I saw using it was the SharePoint dev team (I knew some of them at the time). But for the rest of us, it wasn’t worth effort.
not happening, should i replace form with buttons and textareas?
You say textinputform is a class but reference it with a # which is used for id's Use input.textinputform
Not in Storybook, in two different ways: 1) SB uses iframes to isolate your component 2) currently SB only supports one view layer at a time (will support multiple at some point, but no timeline for that yet)
changed it back to id and also made a var submittedtext = $('input#textinputform).val(); that i summon back with .click in $('paragraphtextform p').html(submittedtext);
right i messed big with ; but I think I have it clear enough to get going thanks
Good news: he's only shipping 40kb uncompressed worth of JavaScript. Bad news: 68% of that JavaScript and CSS is actually unused! So he wastes about 70-100ms (normal connection) of initial load time (and 3x that on slow devices). Too bad he didn't use any "magic" to code split all that unused JavaScript/TypeScript to make it load faster! 
Are you joking? If you know 20 languages then you will know why I have bad impressions on JavaScript. If you compare LLVM internal and V8, then you know why people prefer web assembly. 
Nice article and I partly agree. However if you compare the investments of building JSX from the standard agreement, changing parsers, build tool adoptions, and tooling adoptions the investment is massive. Any developer can create a very simple tagged template literal for their usecase without needing to change the language specification.
Async/await are literally promises.
TypeScript's slogan is "Javascript that scales", and it's described as a _superset_ of Javascript. That means when you're writing TypeScript, you are writing Javascript + TypeScript's features, so "TypeScript = JavaScript + Types" is actually in line with how TypeScript describes itself.
&gt; I hate it, but its tough to legitimately vocalize why. from https://blog.codinghorror.com/the-php-singularity/ ... &gt; &gt; I can’t even say what’s wrong with [PHP](http://en.wikipedia.org/wiki/PHP), because – okay. Imagine you have uh, a toolbox. A set of tools. Looks okay, standard stuff in there. &gt; You pull out a screwdriver, and you see it’s one of those weird tri-headed things. Okay, well, that’s not very useful to you, but you guess it comes in handy sometimes. &gt; **You pull out the hammer, but to your dismay, it has the claw part on both sides.** Still serviceable though, I mean, you can hit nails with the middle of the head holding it sideways. &gt; You pull out the pliers, but they don’t have those serrated surfaces; it’s flat and smooth. That’s less useful, but it still turns bolts well enough, so whatever. &gt; And on you go. Everything in the box is kind of weird and quirky, but maybe not enough to make it completely worthless. And there’s no clear problem with the set as a whole; it still has all the tools. &gt; Now imagine you meet millions of carpenters using this toolbox who tell you “well hey what’s the problem with these tools? They’re all I’ve ever used and they work fine!” And the carpenters show you the houses they’ve built, where every room is a pentagon and the roof is upside-down. And you knock on the front door and it just collapses inwards and they all yell at you for breaking their door. &gt; That’s what’s wrong with PHP. 
You missunderstood my point ^^
Yeah I realized that but it was too late. I already hit send 😂. It’s ok though I realize now this is reddit and I should be more careful.
This is awesome! I can totally see this being picked up on the play store or the app store :D
You answer it.
I'm not the one downvoted questions. This sub has gotten rather weak and juvenile. 
Agree, I don't know why today people are using tech doing the same thing just following trends in web development, there a few programmers would take a deep looking in framework internal. But this phenomenon not common in native app development. 
Agree, I don't know why today people are using tech doing the same thing just following trends in web development, there a few programmers would take a deep looking in framework internal. But this phenomenon not common in native app development. 
Agree, I don't know why today people are using tech doing the same thing just following trends in web development, there a few programmers would take a deep looking in framework internal. But this phenomenon not common in native app development. 
Yep. It has done since v1.8 which was released in 2012. Promises aren't a new concept and ignoring them is going to be more difficult in future.
I didn't know it had beautifier functions...but I did see so e GitHub issues about auto replacing dictionaries with maps on the terser GitHub and it got me thinking that it's a powerful project. That and it being a default for webpack means it's got basically a powerful force behind it already
What do you get if you try it in something like Insomnia or Postman? 
Is [Moltin](https://moltin.com/developer/javascript-ecommerce-platform/) sort of what you're after?
Press F12 console.log($("div#paragraphtextform")); Look at what is printed out. Explore the object and see where the data is you're looking for. My guess is it's innerText or innerHTML.
Is it open source?
Make sure the location.address parameter is being used correctly. It may be pulling the location from the browser location API as opposed to the parameter you passed in. Open an incognito tab and try it that way and see if you still get the same results. 
Tried with Postman, no luck, just the same results
Just tried this, same results unfortunately, I'm beginning to believe it's a problem with the API itself as iv'e tested the query in multiple different ways and they all seem to work perfectly fine outside of the application but fail when they're used with AJAX and JS.
The real issue is none of this. The reason the JavaScript ecosystem is the way it is is due to one thing--money. The people who pay for frontend work want everything done as cheaply and quickly as possible. This forces developers to looks for quick solutions to their problems. Hence the vast proliferation of libs on npm with questionable quality. That being said, when you want to download anything form npm, it gives you certain metrics, such as number of downloads a week. Another metric is code quality. npm scans all packages and rates them by their criteria--does the lib have uptodate tests, is it being maintained by the owner or does it have a lot of undressed issues or neglected pull requests. Does the code follow best practices or is it sloppy code. If you look at those metrics you can make a better choice about which packages to use. However, most devs are pressured by unrealistic schedules for deliverables that force them to make a lot of bad choices. When the chaotic nature of front end development as it is today. The fault is the employers to continue to make unrealistic demands on developers. I've been through it many times.
[Reaction Commerce](https://www.reactioncommerce.com/) AFAIK, it is based on meteor framework 
Try inspecting the network requests when it works and check what's going on. Could it be that the location is expected in a lng,lat format?
Don't give up, if the browser can do it you can get code to do it. Have you ever used Burp Suite? It is basically a tools that lets you intercept the requests being made by the browser, and replay, modify, and etc them. Set it up, capture the calls made when you browse to the page, and the one it makes when you use the AJAX call. 
Yikes, my bad. Try [GenStore](https://shopygen.com/nodejs-marketplace-software/). This one I believe is open source.
Iv'e tried this, and it doesn't seem to be expecting any specific format or parameters, it just doesn't recognise anything that is put it. I haven't heard of Burp suite but i'll definitely look into it, thankyou!
Sure, but it doesn't mean that it can't cache the body after it has been fetched. Why can't it return again in another way?
All these examples make me glad axios exists. Some stuff I like off the top of my head. \- Throw on errors unless you don't want it to. \- Cancellation support \- Interceptors if you want to do stuff like retry on certain errors
IMHO API clients should only throw exceptions if the request failed, or maybe if you have some sort of client side validation that fails. Otherwise, we’re conflating “negative” HTTP responses with actual JavaScript errors. And that’s making an assumption about the users of your library. This is why, for example, the fetch API or pretty much every JS HTTP client does not throw errors if a 404, 502, etc comes back. Those responses are treated like 200s, and the user has the choice of how to handle that response based on its status code/body.
&gt; The process of selecting names and profiling candidate names in engines was performed without community knowledge Can you provide citation to this claim? I was fully aware of this proposal for a year now. 
And all of that describes a different language. It is a distinct language that you can introduce into a workflow that needs JavaScript as an interface. A super set that has distinct features not in JavaScript which are encoded into the language itself is a different language.
As you're talking about `JEditorPane`, I imagine you want to be /r/java or /r/javahelp . Java and JavaScript (although they share a common name) are very different languages. Looking at https://docs.oracle.com/javase/7/docs/api/javax/swing/JEditorPane.html though, it appears you need to use HTML and do something like `&lt;span style="color: #f00"&gt;Hello world!&lt;/span&gt;`.
Yes, and what is your point? Typescript is JavaScript + extras. I think you’re being overly pedantic and dishonest with yourself if your point is that they’re totally different and it’s irrelevant to the conversation. If you’re writing Typescript, you’re writing JavaScript. If you want to improve JavaScript’s typing, you might consider Typescript. Nobody said JavaScript === Typescript, but Typescript contains the entirety of JavaScript.
As you can see im a noob. Thank you. Either way i have tried that and it just doesnt work for some reason :(
What is beautifier in this case? Indentation?
Good to know thanks
The reason why is you have to buffer the entire response for that to be possible so large responses would be more resource hungry. A small annoyance of having to make a single extra call to clone a response is a small price to pay to optimize runtime resources.
I'm adding `/// &lt;reference path="./types.d.ts" /&gt;` to the top of .js file with `types.d.ts` containing `interface Window { NewProperty: any; }`
Promises are preferred as they are more flexible. Let's say I need to get the data from two separate URLs here's what you would need to do with your API: get(url1, { 200: json1 =&gt; { get(url2, { 200: json2 =&gt; { .... } }); }); Besides being ugly, it's impossible to start the fetch of the second url until the first one complete. First let's drop the callback: const get = async (url) =&gt; { const response = await fetch(url) const json = await response.json(); return [response.status, json] } Now we have a lot more flexibility. We can use await and get the serially: const [status1, json2] = get(url1); if (status1 == 200) { const [status2, json2] = get(url2); if (status2 == 200) { ... } } We can use Promise.all to run them concurrently: const [[status1, json1], [status2, json2]] = await Promise.all([get(url1), get(url2)]); if (status1 == 200 &amp;&amp; status2 == 200) { ... } Basically, it's a much more flexible design. It also is clearer to the caller that the result is asynchronous. All in all, I can't see a single reason to design the API the way you did. 
You are assuming I need to make nested calls. I just want to return the result. I don’t need to make a subsequent call. Yes if i need to make another async call inside another one I will do it like how you’ve laid out. You made an assumption that I needed something more complex than what I actually need that is the problem with your solution.
Storybook is a great piece of software. Can't wait to check out the new release, congrats!
Oy vey. More of my stuff is out o date. Sigh. 
Okay, sorry about that and thank you for explain me about the guidelines!
Hi /u/Grehjin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Why the fuck are you posting this in a JavaScript sub ? There is nothing worse in the dev world than doing JavaScript in WordPress, I'd rather relive walking in on my girlfriend fucking my roommate than ever do JavaScript in WordPress again. (For actual helpful and less angry advice try /r/webdev or /r/Wordpress or /r/forhire)
To "who owns web standards," the cynical answer is "Chrome." This has bothered me for a long time, ever since I read [this fight](https://github.com/whatwg/url/issues/118#issuecomment-217866196) between Chrome and `curl` about URLs.
I feel like that probably violates Geneva conventions, or at least it should.
The web/DOM remains the Wild West 25 years later: *Geneva convention* - so funny!
Yeah, no way that's legal
[I assume this was your comment](https://old.reddit.com/r/javascript/comments/axcgl3/why_so_much_hate_toward_javascript_from_c_java/ehvb45o/), for the record.
IMO, the most important thing is not to be afraid to admit that you don't know something. It's not just about junior devs, it's about, well, everything. Also, don't be afraid to show your line of thoughts. Abd good luck! 
Save your oys and your veys! No one is forcing you to update. The ability to upgrade to something better is awesome though.. I'm sure you would do it to your RPG character if you had the chance!
Thanks so much! Definitely advice I’m taking to heart. I’m confident in the things I do know, and comfortable with the fact that I have a whole lot to learn. 
Ya
Yeah, I guess you're right.
[c]: https://cezerin.com [Cezerin] [c] build with React, Node, Mongo
I hope i can use this with react native. 
1) Most important: you pay for lunch, no matter the price! I'm not kidding. You need realized there is a hierarchy, that he is above you, that he is doing you a favor - honor it. Yes you are stroking his ego, and yes it works. 2) Be enthusiastic, likeable, sharply dressed, and 10 minutes early. You will mostly be judged on whether he wants to work with you + how you will contribute to the team, not on your tech skills. If he says "the job is 90% shoveling shit, 10% fun", your response should be "I love shoveling shit! Its my favorite thing in the world!" 3) Be honest. Don't bluff. If you don't know something, say so. 4) At the end of the interview, ask for his advice on how to achieve your career goals. Ask how he got to where he is. Ask what he likes about his position.
first, biggest hurdle is you have steady influx of newcomers, some without college on computer science who are being forced into this mainstream over the top algebra. second, GraphQL is just a SOAP with different name, which was RMI with different name, which was... Every bad and abandoned technology will over the years be re-introduced by a different name (and now with JSON maybe instead of XML). There was a reason it didn't work then (tight coupling), and there is a reason it's being pushed again (big corp interest).
Ok.. But why would it? Couldn't I just combine map with merge instead?
Hi /u/24ismyspecialnumber, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
'Experienced !wp dev' === 'Experienced not wp dev' 
That is one of the reasons it lead to the situation you and I explained yes!
The trait I look for most is an eagerness to learn. Ask lots of questions! Ask about the patterns and frameworks that have worked for him. What hasn't worked. Ask him what he wished he was told when he was just getting into programming. Let him mentor you. Listen more than tell. We all want to work with friendly teammates that share our passion for code and are eager to learn from each other. Be genuine and be ok being "junior" but show you'll grow quickly because you're eager to learn. 
Fingers crossed for you!
Now I understand the issue...you did not realize that async/await deals and returns promises...
I’m assuming this is a lunch in which you’re looking for a job and they’re looking for people to hire and not a lunch where you’re just networking. When I’m on the side as your senior developer my goal is to both learn about you and to sell you on the position. Even if you’re a junior developer you’re likely talking to other companies. Interviewing people takes a lot of effort and so I start selling you on the position immediately to maximize my chances that you’ll say yes if you get an offer. For you, ask questions about the position. Try to find out if it’s actually something you’re interested in and it’s a company you’d want to work for. If not, there’s no hard feelings to not continue with the interview process. The lunch is as much a time for you to learn about the company as it is from them to learn about you. Be honest about your goals and what you’re looking for. Have some examples of things you’ve worked on in mind and be ready to talk about what things worked, what didn’t, and what you learned.
It looks nice, but Mongo is not suitable for ecommerce. 
Merge will overwrite duplicates
&gt; When I’m on the side as your senior developer my goal is to both learn about you and to sell you on the position. The Sr. Dev might be getting a headhunter bonus as well. So he may try to up-sell the position. &gt;Try to find out if it’s actually something you’re interested in and it’s a company you’d want to work for. If not, there’s no hard feelings to not continue with the interview process. This. Be ready &amp; willing to walk away. Just coming into the interview without the stench of desperation on you can go a long way.
plan A will require something like this if (response.status === 401) { // try getting the new access token and repeat the same request } This is OK if i have one request, but in the long run, as my app grows, and i add more and more fetch requests, it becomes unmaintainable. I'm basically duplicating this logic all across the app on every request. is there a better way to repeat the same request without having to include the code in all api calls? 
Unless you’re amazon, it’ll be fine.
&gt;is there a better way to repeat the same request without having to include the code in all api calls? You want to write some middleware that'll handle this functionality for all API calls. &amp;#x200B; I implemented this stuff in a react/redux app last year -- here's the [auth middleware](https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/auth.js) that looks for an access token in \`localStorage\` and adds it to the headers of every API call; here's the [refresh middleware](https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/refresh-middleware.js) which checks for an expiring token, and if necessary queues the requested action while it refreshes the token.
I have something similar in a Postman collection that I use to test some APIs and ended up with the following: Get the access token from /token endpoint Store the access and refresh token Store access token expiration time If access token expired, get a new one using the refresh token Store all the values again This if code runs for every request. You could store the tokens in cache and do a lookup before to avoid unnecessary calls. You're going to have to authenticate either way, and I guess having an actual front enf your approach needs to be different. Basically the user will have to re-authenticate once those tokens expire, else make the calls grab from cache. Theres many solutions to this but you have to consider all of the flow o the request and then decide based on that. Plan B sounds like the best way to go, just keep in mind the whole request flow and user interactions and you'll come up with something appropiate in my opinion.
Actually mongodb is way better than a classic relational db at managing products. I'm working with Magento and Mysql and I need to use EAV. You can imagine how big and slow a query can grow with a large number of JOIN... With a documental db you can store the whole product in a single document with obvious benefits. https://docs.mongodb.com/ecosystem/use-cases/product-catalog/
Product catalog is fine - but for actual stock levels and transactional data - acid compliance is an absolute must. As for your big sql query the problem is you are using magento which is written like hell on steroids 
&gt; is there a better way to repeat the same request without having to include the code in all api calls? Yes, if you want to go this way. One simple way would be to write a function that invokes your HTTP-request function, does this error handling, and then returns the result. Like so: function apiFetch(...options) { return fetch(...options).then(res =&gt; { if (res.status === 401) { return refreshAccessToken().then(() =&gt; apiFetch(url)); } return res; }); } `apiFetch` can now be used just like `fetch`, but it'll always try to refresh the access token if it gets a 401. Of course this could lead to infinite recursion if `refreshAccessToken` doesn't work, so you'd want to add a retry limit and handle other causes of 401s, but you get the idea.
I could use a retry limit to avoid the infinite recursion, but it just doesn't seems like the right way to go about it. I was wondering if there was a standard way of handling this problem
if I want to go with the middleware approach that will be similar to the plan B right? 
plan B sounds good I could store the expiry time in a cache, so I don't have to make database calls to check if the token is still valid. if only jwt tokens have an option to set sliding expiration to true. that will just save me from all this implementation
&gt; In practice, despite everyone's incontestable best-intentions, the design and evolution of ECMAScript is hostage of the "self interests" of engine makers. Same as it ever was.
What's the point of the useEffect in useEffectDarkMode? Isn't reading from localStorage syncronous? You should be able to just use the value from local storage to set the initial value passed to useState, and furthermore not need to worry about whether the theme has loaded or not.
I just tried the vue slow start, and i still don't get what i can do with this. 
It never made sense to me that electrons charge was arbitrarily assigned a negative value and that they flow from negative to positive. I think we should now change this so that electrons are positive and protons are negative and electrons flow from positive to negative. We can even call protons negatrons to make it more clear. This would make it more intuitive for future generations. Nevermind everyone and everything that relies on this current standard.
https://www.mongodb.com/blog/post/mongodb-multi-document-acid-transactions-general-availability BTW I hate Magento but it's one of the most popular tools and I didn't choose it. 
I believe styled-components includes a Babel plugin that can actually detect these template literals and extract the CSS at build-time. If you use that, you avoid the run-time penalty the linked article talks about. In that sense, the little backtick characters are basically saying, "Hey, here comes a DSL." You *could* parse this stuff at runtime as the article complains, but you could also write tooling to give a JSX-like developer experience, including prettifiers, linters, build-time transforms, and the like. It's a lot more work, but not impossible. If you make a new language dialect like JSX, you have to do tons of work up-front. If you use tagged template literals, you can hack something together in a weekend and do the other work on an as-needed basis. It's a very "worse is better" approach to the problem.
I work for a mid sized eCommerce company. We played with the idea of using Mongo but things got really stupid, really quickly, when we tried to figure out how to integrate it with our reporting platform. For example, we have a SQL query which looks at yesterday's orders from the orders table, pulls in the products against those orders from the product table, and then uses that information to figure out which brand performed the best by using the Brand Id linked to the brand table. An easy couple of joins in SQL but very messy in Mongo.
Every time you get a new access token you could save the new refresh token, so everything is updated until the refresh token expires, then you ask for re-authentication. The actual code is not that hard, go plan B, write down all your requirements and flows then expand on that I'd say.
I don't know the details so I can't tell nothing about your work but working with Mongo (or any other non relational db) requires a different approach on how data should be structured. You could achieve the very same results with a single query on a single collection if you put the data in a single document (obviously this can have downside).
the actual code is not hard, I'm just looking for the best implementation, seems like plan B is the way to go
Given that you Gulp 4 digests functions you don’t really need this. 
Developing hard to reach components is one use case. Could for example be a settings page for a specific type of user only shown under certain circumstances. If you’re just working on your frontend, that gets way easier with Storybook. Another use case, one that we use it for at my work place, is as a style guide. A place where you can show off components that are available for use and how to use them. Facilitates code reuse. And a third use case, from what I’ve heard, is testing. There are addons for testing accessibility and you can set it up with something like Jest. 
Relational DBs have JSON columns these days, EAV hasn't been necessary for this sort of thing in a while. Your problem is Magento, not the choice of database.
A fourth one: [you can do automated visual regression testing](https://twitter.com/VincentTunru/status/1095278685463212033) on many different states of the same component.
You don‘t even need an npm package for that. Just bash your head into your table repeatedly until you become unconscious, then dream about a better world where websites don‘t need support for a program that, by pure luck, is able to parse HTML and call itself „browser“. Sometimes.
had to change the button to button type not submit
input.textinputform referenced a class not id @_@
had to change submit to button button and fix class references to id ones #_#
tried, it is working. But the assets required for the page too heavy. It even has an JS file more than 1MB. try to keep this low at less than 200kB.
Sure thanks, I'll update it
I couldn't agree more - i tried using tagged template literals in a big project, and came to the same conclusions. Thus i made a declarative templating language for merging data into DOM: first the html is parsed into DOM (using native html5 parser), then the DOM is traversed and data is merged according to the (quite simple) directives. It's not quite a full DSL at that point, all logic is pushed back into client "filter functions". Though it's not yet as easy to use as it should be: [https://github.com/kapouer/matchdom](https://github.com/kapouer/matchdom) &amp;#x200B;
Project Page (?): https://github.com/vladocar/femtoJS *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
A lot of js framework people participate at tc39 meetings. I know at least ember and angular have members
As someone fairly new to React, Storybook has also helped to get me into some good habits: * Writing stories promotes writing well defined components, in much the same way as unit testing promotes writing well architected code. You will immediately start thinking differently about props and state and start writing more reusable components. * As an extension, if you use Redux, Storybook really promotes separation of components into simple props-only components and "container" components that bind to the store. * It also promotes styling of components in a very modular way. If you've never worked with something like CSS modules, Styled Components or Emotion, Storybook will really demonstrate the appeal to you. I always tended to think about my React projects in a very rigid fashion (each component had a very specific place in the tree). With Storybook, I instead build up a collection of fragments which then get composed together by a different set of components, which get bound to data by yet another set of components.
Actually when you create a new particle, for each particle you can tweak the X and Y coordinated. I know this from C#/VB where we can easily do object.location.X = currentLocation + (some number). *The Coding Train* youtube channel has some tutorials where he teaches particle positioning &amp; also speed changes. He's the creator of p5js.
 true
Good! I've been wanting to get rid of jQuery, but I got so used to the (usually) shorter syntax! 
Sponsor Visas?
`var offset = (v) =&gt; {for (let i of s) offset = i.getBoundingClientRect(); return this}` killed me.
Just curious, is a pay scale like this (per day) normal in the UK? I'm a reasonably experienced JS dev and here in the US I wouldn't even look twice at a job quoting a per-day rate. We deal in per-hour or salaried (per-year) positions here, so per-day looks a bit sketchy.
Hi /u/noaai29, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For contracting this is normal. For permanent employees it would be per year.
This is embarrassingly amateur... :s
We go by day rate for contracting and annual salary for full-time positions. Most developers prefer to work as contractors because of the tax advantages (think 45% vs 15% total tax burden). The reason we use day rates in the UK is that full-time and contractors get a lot of the same benefits and same protections (but not all) so for example they cannot be asked to work for more than 39 hours a week. Here are examples of day rates being quoted [job](https://www.indeed.co.uk/viewjob?jk=1afa0e219f0feeac&amp;tk=1d59h10ge17n9002&amp;from=serp&amp;vjs=3), [job](https://www.indeed.co.uk/viewjob?jk=6d7e6c383270bacc&amp;tk=1d59h10ge17n9002&amp;from=serp&amp;vjs=3), [job](https://www.indeed.co.uk/viewjob?jk=84fdd6f2891af73a&amp;tk=1d59h1j6u17n9003&amp;from=serp&amp;vjs=3).
I’ve tried just changing the point where the particle is generated, but it doesn’t turn out good, because you’ll still get a straight path from that point and towards ‘the screen’. And, you won’t correct all the other particles this way either, so it will turn out quite chaotic... I guess the only way of doing it would be ‘proper 3d’ where every single particle will be projected based on both a velocity matrix and a camera matrix at each render,and instead of moving the stars, I guess the camera should be moved instead... ...but I never came that far... 
I'm a front end javascript developer, here are a few places you can find guys like me: - React/React Native meetups - Any new tech meetup, these days the buzzwords draw quite a few of us in - Codesignal - This subreddit - Stack exchange - Linkedin
Can you explain why, so that I can learn something? 
Hey I’m in Manchester and just completed northcoders Bootcamp in full stack JavaScript. Are you looking for any junior developers?
Unfortunately we need someone in ASAP and sponsor visas aren't available for contractors but as a long-term strategy when we bring someone in full-time that may be an option. We can currently employ from the other 27 EU nations without a visa (for at least the next few weeks, who knows with Brexit).
I thought native base was listed
So insane, we literally just had a big meetup last night where we discussed Storybook with around 100 engineers. Would have loved to know that we could have gone to the website and shown off the new major version!
Unfortunately not right now, but well done on completing the bootcamp. I can put you in contact with someone that can find you a contract pretty quickly. PM me your email address and some work/CV.
&gt; Most developers prefer to work as contractors because of the tax advantages Post IR35, that's no longer really true. Most "contracts" are now "inside IR35" and the financial advantages are minimal. It's all about freedom and not being an "employee". Or at least it is for me. &gt;cannot be asked to work for more than ~~39~~ 48 hours a week FTFY I suspect your problem may be that there's a smaller pool of available developers "up North" combined with the fact that strong Node experience is still relatively rare compared to say PHP or C#. I might be interested, but I'm 250 miles away (Dorset). 
Ok so viewing the full source: [https://github.com/vladocar/femtoJS/blob/master/src/femtoJS.js](https://github.com/vladocar/femtoJS/blob/master/src/femtoJS.js) 1. All of these functions are available on the global object, instead of a singular exposed $ function acting as a namespace. That's why returning \`this\` is working, because it's just returning the global object (window in a browser) which all of the "chained" methods are available on. This is bad because of namespace pollution/conflicts 2. It's keeping around a global \`s\` variable (the list of elements) after calling \`$\`, absolutely no encapsulation - bad for the previous reasons stated. It can be overwritten easily and cause problems 3. The offset function is just ... what? It's overriding the function with the last list element's ClientRect. How is that even related to \`offset\` anyway? 4. Missing necessary arguments like event listener options. Very likely many edge cases not accounted for 5. Missing many important DOM APIs in general. Would rather just use the vanilla DOM API and know nothing is missing. Or just use jQuery if I was going to bother using a DOM manipulation library in 2019 &amp;#x200B;
I'll check Codesignal, I go to the Angular meetup but it hasn't been on for a while now :(
 const $ = el =&gt; document.querySelector(el) But really, just get rid of the cancer once and for all.. :D
\- He's applying shit to the global scope without consideration \- He's Mixing ES5 + ES6 and not transpiling it. defuck? \- He's not using a linter (fugly code) Probably more stuff I've forgot :-D
Thanks.
I haven't contracted anyone inside IR35 yet. I highly recommend getting a good accountant if you want to stay outside IR35. The changes coming in this year only affect people working in large companies, SMEs aren't affected. We don't know what the future holds. Even my CEO pays himself minimum wage with dividends. The other advantages are registering for flat VAT at 20%, and only having to give HMRC 16% which is totally legal. Sadly we're not looking for remote but if you'd move to rainy Manchester we'd love to interview you.
Because JS is a later interest for most people. And when they do get interested, they still hesitate, because to them JS is a toy language. &amp;#x200B; For us, it's everything, it's our passion. They'll never understand :(
why is finding non shitty javascript employers so difficult?
&gt;I haven't contracted anyone inside IR35 yet. Hmm, I wonder if that's "OK"? The IR35 changes I'm talking about happened 15+ years ago. And basically if you look like an employee due to the "shape" of your role and HMRC start digging, someone is going to end up paying the back taxes on all those dividends which should have been salary. Remaining outside IR35 when you go to the same office every day, work for the same one client for months at a time, get paid by the hour/day, use the clients equipment, assume no business risk etc etc is quite a trick. &gt; move to rainy Manchester haha, not really happening, sorry. Actually, I like Manchester and if it was't such a long "commute" from my friends and family then I'd be interested. Totally get why you wouldn't want to do remote though.
I see what you mean, we're looking for someone in a temp-to-perm role, we work through a very large respectable agencies and are acutely aware of how to avoid working inside IR35. In reality you can get away with working for a company for two years, but we use 6 months before we offer them a full-time role, as a rule of thumb unless they're a part-time contractor.
Native base is a component framework, these are starter kits, the author intends to share boilerplate like setups to help people create apps, not ui kits
Hi /u/ZestycloseChocolate, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
that's very interesting, thanks. good luck with your search!
Java !== Javascript
Hi /u/sidi9, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bert2131, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nitty727, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/orangemonkeyj, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thegeekybitch, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Netescape, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sarah3128, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JamieLiftsStuff, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_bolum, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rana_ali_raza, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/alreadyreddit1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DerNalia, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/william_o, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Writing something amateur isn’t embarrassing
That's an equally good question.
God forbid someone writes something at their skill level and doesn't know everything. The post above has a breakdown of issues in detail, and strays from attempting to insult the writer by pointing out their code is "fugly". I hope others see this post of yours and look back on it when writing criticism for another's code, as a good example of how not to write constructive criticism.
Found the author!
Just wanted to say that your (actual) constructive criticism is refreshing to see. Not everyone is at the same level in terms of skill and knowledge, so it's nice to see the actual issues pointed out rather than simply saying "it sucks". 
Heh, no. I just find it annoying that people would rather simply dump on another person's work than provide actually constructive criticism.
Yeah, was just being cheeky. :) I agree, constructive criticism is better than simply trashing.
&gt; Beautification has been undocumented and is being removed from terser, we recommend you use prettier. 
Problem I have with adding a shortcut like that is it's a bit misleading when switching between projects that have/don't have jQuery. $('div') could be using jQuery or it may not - you have to understand the project and it's shortcuts. For the sake of interoperability and muscle memory, I find it's simpler just to type it out in full.
Personally, all the utility functions in the frontend serve two purposes: managing state and normalizing the data you want to send to the backend, so it can be read into valid API calls without excessive parsing by the server. But all the heavy lifting like math calculations or string composing (which aren't purely there to paint the GUI or manage local state) I do on the backend.
Hi /u/Jeromechevalier, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For a frontend-heavy app, you usually want your backend to be as dumb as possible, within reason. So, in situations where some logic _could_ be implemented on either side, you should default to implementing it on the frontend, unless there's a good reason that would be a bad idea.
Not in and by itself, no, but publishing it for others to use does make it kind of embarrassing.
This is just a thin wrapper over native dom functions. And to boot, it absolutely litters the global namespace with variables, and depends on returning the global namespace on each function call in order to chain functions. Don't use this library.
I hope the browser vendors implement a standard API for using native AR capabilities. I doubt that any JS or WASM implementation will catch up to what proprietary/native products like Vuforia can do. For most AR applications that people want these days using symbol-based markers is too crude. For us this is one of the few kinds of apps we still need to build as a native rather than for web.
Or you know, you could just see what the value of `$` is. Pretty easy to differentiate a `jQuery` instance from this function. 
You are extremely nonstandard in your approach. The recommended way to use functional components is without any prototype or this manipulation (that's the idea behind functional programming) and doesn't use `this.render` either, but instead something like this. export const MyComponent = (...args) =&gt; { ...code } And just use it to the final App component which you call via `ReactDOM.render `
&gt;”Would rather just use the vanilla DOM API and know nothing is missing.” This is so important. There is absolutely nothing worse than building half of a web application, and then realizing your primary framework simply cannot accommodate a key feature that would ordinarily available to you with vanilla JS. This is especially true for a DOM manipulation framework, where bypassing the framework’s API to handle edge cases will likely lead to “multiple sources of truth,” along with a cascading series of bugs down the road. For this reason, it’s often much smarter to go with one of the popular frameworks on the market. React, Angular, jQuery, Vue, and so many more to choose from. Might as well use something that’s well-maintained and well-documented. That being said, I think it’s awesome for people to try building a comprehensive framework for DOM manipulation, or at least a working library to streamline it. It will definitely help clarify the problems all these frameworks are aiming to solve. I have to say... coming from a guy who has tried earnestly to reinvent the wheel here, it’s so much better to let the pros handle it.
This is such a bad piece of code it actually hurts. What is this even supposed to do? 😂
Then give it a different name? const el = document.querySelector.bind(document) const els = selector =&gt; [...document.querySelectorAll(selector)] or something similar
Yup. And writing const checkResponse = response =&gt; { if (response.ok) return response throw response } and chaining that function to your `fetch` calls really isn't that much hassle.
Last year I was teaching a basic web dev class and had the students using github and github pages to submit their work. Stupidly, I didn't write this (all three lines of it) until long after I stopped teaching, but it's still pretty dang useful.
Author here .. happy to discuss and get feedback!
Wtf is this shit
Hi /u/Zotti_Br, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Agreed. Clarity &gt; brevity.
Part of this course can be found on YouTube for free. I have watched that one about a year ago when I was pretty fresh into JavaScript and I must say it’s nothing short of fantastic. Really helped me out a lot and I’m confident watching it again would be very insightful/helpful still. 
Affiliate advertising. 
Or type it with a shortcut and use find &amp; replace to expand—as a post-processor, if warranted.
Is it still as relevant now that we're in the days of ES6+?
\+1
You might try providing constructive criticism.
Hi /u/WhoSherlock, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iamshyami, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nobrandheroes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sorry for my harsh words. I had 1 minute on the toilet-break :-D Tho, someone had to point it out in order for the author to make sure he uses eslint on his next project :D But yeah, your right. I could have done it in a nicer way (a)
Hi I'm the author of this project. I think I need to clarify some things. First take a look into my previous project nanoJS [https://github.com/vladocar/nanoJS/blob/master/src/nanoJS.js](https://github.com/vladocar/nanoJS/blob/master/src/nanoJS.js) it takes more classical approach and works in IE9 and later. Your concerns with femtoJS: Pollutes the window object with global variables It's true, it does. I know, this is not best practise. In the classical approach the methods are stored inside object.prototype and probably that is the best solution. I decided to store the methods inside the window object for a simple reason you can make jQuery like library with 2 lines of code. I did this project to prove that you can make DOM manipulation library with very little code, yes and I sacrificed some common sense best practises in order to achieve this. &amp;#x200B; Why not use some VanillaJS? You can. But I find it repetitive declaring same stuff over and over again. &amp;#x200B;
Thank you. I don't use linters for my projects because I don't like how annoyingly perfect it wants everything. My code is generally readable without linting. You don't need to lint to have effective or readable code. Would I recommend it for someone that has bad writing habits? Yes. It's a good tool for encouraging better writing. I assume this is what you mean when you talk about someone pointing it out so the author uses eslint next time.
&gt; If you’re a Javascript you likely make It looks like you a word there. It also looks like you submitted this same thing -with a different link title- [just yesterday](https://www.reddit.com/r/javascript/comments/axjfal/techniques_for_fixing_npm_packages/) which is a rude thing to do.
Where have you been all my life?
Yes!! I actually wasn't using a linter for the longest time. But I've always been a "code-nazi", at least that's what my co-workers call me :D I used to hate linters (because of the weird configs, looking at you airbnb), but when I found StandardJS I haven't looked back. It was nearly 95% of what my code already looked like. just minor things to keep a _standard_ And honestly, I would never go back. It really catches everything, all the weird spaces that VSC adds and all of it &lt;3 So yes. if you do know your code. Do whatever you please. If you don't know it, or have to share codebase with others. Please for the love of god, just pick one and stick with it. that's my actual two cents on the case ;)
If you don't publish it, how are you supposed to get feedback and criticism? If only there was a magical portal for uploading your code in a public domain for others to see, use, and review... &amp;#x200B; It's not embarrassing to learn and grow. Every single programmer started out at the same place.
Your library is shit. Get over your line count fetish
&gt;I did this project to prove that you can make DOM manipulation library with very little code, yes and I sacrificed some common sense best practises in order to achieve this. if you want to do that then better to keep it for yourself instead buzzing it
Really small/tiny/minimal DOM manipulation library #1167.
Great Idea, I'm learning react now and I'd love some pointers from you. [https://github.com/MichalTomczak/moodiary/](https://github.com/MichalTomczak/moodiary/) It's a very small project which I'm trying to develop in my free time, I'd love to learn what I should improve.
I think he was hinting on that the user posted a separate post instead of posting in the weekly WTF wednesday thread, where we all gladly review each other without being \_too\_ critical &amp;#x200B; However, posting it like this might occur some harsh critisism (As you know, I'm one of them :D) Cheers again mate &lt;3
i'm not sure I understand what you're saying here?
I 100% agree with the author on JS code in template literals, but CSS? It's not programming code! Who cares if it's parsed at runtime or build time, as long as it's performant enough? Styled Components may or may not be the "correct" solution for CSS for React components, but if not it's not because they use template literals; that part is a clever/elegant solution to a problem.
Hi /u/angeloghisi, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I mean this in the nicest way possible, but ... the world probably doesn't need yet another framework built by an individual programmer who thinks they've discovered The One True Path.
quick tip for this thread : if the Github repo is an Angular project, you can use [http://stackblitz.com/](http://stackblitz.com/) before the repo url to launch the project immediately. &amp;#x200B; Exmaple: some Github repo url: [https://github.com/username/repo/](https://github.com/MichalTomczak/moodiary/) with Stackblitz: [https://stackblitz.com/github/username/r](https://stackblitz.com/github/MichalTomczak/moodiary)epo/ &amp;#x200B; (maybe works with other frameworks too....)
I think the way it's titled matters. Here, it's being proposed like any other library that's perceived as legitimate and taken seriously, which warrants criticism. If he posted a thread requesting feedback and admitting he's not experienced, it's would be less embarrassing and people would not be so judgmental.
Sounds like a PR begging to be rejected
that's bullshit so all the amateur bands out there should stop performing because they aren't pros?
Disagree. Even in application-level code, name-clashes are a real thing. It is true that as a part of a dev team you have ways of preventing it that library-devs don't, like communicating with teammates, but then again if I considered talking to people fun I would have choosen a different career. So go `Symbols`.
amazing work! Any progress on bootstrap-table-editable for Bootstrap v4?
I spent a lot of time in college building linked lists. I've been programming professionally for 20 years and have never once had the need or desire to build a linked list for a real project.
I'm starting to get more and more into a function style of programming and I wrote a little (kind of) pattern matching function (think of it as a more capable switch statement) based on functions. Would love to make it better / hear some possible improvements (things I might have missed). So would love to have some feedback. [https://gist.github.com/rolandpeelen/1137865565d349caf8262ed6f5504aaf#file-match-js](https://gist.github.com/rolandpeelen/1137865565d349caf8262ed6f5504aaf#file-match-js) &amp;#x200B; A little write up on the why can be found here: [https://medium.com/@rolandpeelen/pattern-matching-in-javascript-235961f97497](https://medium.com/@rolandpeelen/pattern-matching-in-javascript-235961f97497)
That's fair
Ah, yes. Working with others is definitely a good use case for linters. Keeping a standard is important when sharing. I don't normally work with others so I don't experience this issue. Thanks for that
Yeah. I can see how it would be perceived that way. All good. &lt;3
Why can you only get the offset once?
Hey man! Looks good, just looked at App.js; Some things I would change; \- Have \`defaultMoods\` into a separate file as a constant and export / import it (makes the file a lot shorter) \- Try to keep variable naming consistent, in App.js for instance - \`currentDate\` is camelCase and \`Today\` is PascalCase \- this.setState({moods: moods}); can also be this.setState({moods}); (might be even easier to read \- \`setToday\` and \`populateStateFromLocalStorage\` can be done from a constructor and then you won't need setState (see below) \`\`\` import defaultMoods from './defaultMoods'; constructor(super) { super(); this.state = { moods: JSON.parse(localStorage.getItem(this.state.currentDate)) || defaultMoods, currentDate: new Date().toISOString().split('T')\[0\]; } } \`\`\` \- selectMoodHander mutates values locally. Within this function I wouldn't consider too bad, but there are ways to make it not do that (\`setState({moods: \[...moods.filter(moodId =&gt; moodId !== id), {...moods\[id\], selected: true}\]}\`) or something similar would do it as well :)
I never said anything like that. 
I agree, but this project is clearly presented as a product and not a learning experiment. 
very cool, could see this as a "hand raise" feature in online meetings/classrooms to ask questions or see who raised their hand first 
For personal projects I'll agree that it's not necessary (although I do because I cba to manually reformat when refactoring), but anything which someone else will potentially contribute to you definitely should - because you don't know what kind of code those monkeys are going to write
 Making a tiny version of jQuery doesnt mean that you need to simplize it in a totally different way like this. JQuery’s code structure and organization is (probably) best practice and following it certainly won’t make your “library” become heavier but more well-organizing. We’re working in Javascript and namespace/variable name pollutions will be a big trouble to deal, especially when you want to make it a library to publish to everyone. At least, you should optimize the ways you naming in library, i.e add your prefix to namspace like ‘f$’, ‘fCss’,’fHtml’,.... In addition, you said it’s a library that take advantage on ES6 and you used nothing from it, coding like exactly VanillaJs
It lets me know I can still feel something. 
There is removeClass, toggleClass, but no addClass. What?
Yeah, you might as well tell me that ability to write bubble sort algorithm on white board isn't required for front-end developer, right? © Most of goddamn interviewer for every goddamn tech jobs
You should make a version that doesn't use the global window object. No one will want to use this library otherwise, doesn't matter how small it is.
send it as JSON Object through the web socket? for ex.: { slider1Value: 0.5, slider2Value: 1.0 } then parse it with JSON.parse?
"Trust me, ya'll are going to use this! All the time!" Am I? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Really?
There are ... Lambdas. So that's basically all es6 /s
Sorry I can't reference the OP since it was removed but as I recall, yes.
Nope...i mean he didnt even use a signature feature of ES6 is class/object for code structure. Lambda is just a shorter ways to code and I’m pretty sure that I can rewrite this library in VanillaJs within 0.3kb size increment
yeah it was removed, but thanks anyway
&gt;the world probably doesn't need yet another framework... So? At the end of the day, if OP learns something from building it, then it's a net win. Nobody is forcing you to use it.
Hi /u/NaxeyOffman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/elie2222. Feedback: don't repost.
Pornhub should implement this so they know what you're doing... 👀
Absolutely! That definitely makes sense. 
Hi /u/elie2222, this post has been removed. I left a comment why on the post for the first time you submitted this, yesterday.
Why wouldn't you just upload directly to S3? Why wouldn't you just invoke the lambda directly instead of going through API gateway? Why do you have to enable CORS for a lambda to write to an S3 bucket?
That's fine, but that's really besides the point. Linked lists are dead simple, and they teach you about a wide range of concepts, so as a learning mechanism they certainly have a place. I do think, however, that less emphasis should be put on their applicability in real world situations, but they're useful nonetheless.
 A UI Based interface to guide you to exact web api - http specification status your server should return for any request. 
You shouldn’t try to justify being so petty.
Doubly linked lists are great to build an LRU cache. It's a very basic and simple data structe that few will ever need to implement in practice but boy am I glad to have learned about them in school.
I author! This isn't directly related to your handtracker, But I'm looking to track 2 people (the fencers on the screen in a clip like this https://actions.quarte-riposte.com/storage/bout/NG8cgGQ6x9c/clips/417.mp4). I don't care if it's real time or not, but I'm only really knowledgeable in web languages (PHP and JS). I don't really know where to start on it. I've noticed that most tracking libraries only track one person at a time. Since you've managed to tack 2 hands, I was wondering if you could give me some quick tips on * Where to start looking? * What kind of tutorials or pre-requisites I should look into? * Anything else that you think I should know before diving into object tracking in javascript?
They already know it and measure it :)
Hands down the easiest way to murder client's computer :) On a serious note, this is really cool. I would highlight the client side effects, like how much does the library weigh compressed, same for the model.
I think the problem is that the THEORY is to use them as you describe: to teach a wide range of concepts. The REALITY is that they are used as an interview gateway. They are rarely taught with the goal of the concepts rather than the narrow specifics. Even more rarely are they used as an interview question to see if those general concepts are understood (even if the interviewee knows the concepts but has not coded a linked list before). &amp;#x200B;
In this article, I used NodeJS and some reverse engineering to see how I can mess around with the Stats of a Medium article. Purely exploratory, feedback welcome.
Hi /u/iEngineer404, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/izaacjb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If all OP wanted to do was learn they could keep the project private. By announcing it publicly they're clearly trying to get others to adopt it. I'm just trying to temper their expectations.
Concave - tiny 1.4KiB JavaScript library for building web applications. https://github.com/concave-org/concave
Doubly also can be used in feature like undo/redo and react hook also use singly linked list i think. 
&gt; You are extremely nonstandard in your approach. You can say that again :) However, the above is _not_ a pure component. I has state and lifecycle hooks. The reason I even started looking for an alternative to the `class` constructor was that I really hate binding helper functions in the constructor. I know that there are various babel add-ons that can clean up this syntax but I also like to keep my build process as clean as possible. I test my component with node-mocha-enzyme so my javascript code needs to run in node (uncompiled) and in the browser after webpack gets finished with it. But, once I put together a project like this, the code made a lot more sense to me. I'm pretty dyslexic so code that "looks" clean is a huge win for my productivity. I should try to recreate the bugs in the article this way. My guess is that it will have a different semantics than if the lifecycle functions were defined on the prototype. I should also point out that I only do this on **solo** projects. For team projects, I like starting off with pure components (functions not classes) and then creating a separate higher order component for any state or lifecycle. I also use redux on all team projects so components tend lack any state anyway. So, the HOCs are just for lifecycle hooks.
Nice shilling udemy with a redirect link. Who would pay for this when the You Don't Know JS book is free and probably better than this course?
Plus they are the basis for trees and graphs which do have some good real-world uses. Of course not in every application or website, but it definitely comes up.
You might want to add instruction to also just add the `javascript: ...` as a "new page" in the bookmarks. Just an easy way to make it a button, of course.
&amp;#x200B; Yeah .... it does need a bit of horsepower. * library size - 810kb. Mainly because it bundles in the tensorflow.js library (theres some open issues with recent versions that break the library.) * Models - 18.5mb. This is what causes the initial wait when the page is loaded. TF.js webmodels are typically sharded into multiple files (in this case four 4.2mb files and one 1.7 mb file.)
I wonder what it's like working there.
Probably pretty boring, just another high profile startup if you are a developer. Fixing buttons, scaling issues, 1:1-s, endless code review and pull request. The "const dickSizeSlider" variable jokes get old quick. Migraing databases :D https://static1.squarespace.com/static/54dcf7d9e4b0d8fb888159f4/t/55d62938e4b0f5f10add5d3e/1440098616969/
but it has a logo and everything
Generally, Deep learning methods work well for pose detection or person problems like this. * In the broswer - definitely try posenet from Google. [https://github.com/tensorflow/tfjs-models/tree/master/posenet](https://github.com/tensorflow/tfjs-models/tree/master/posenet) * Python - * Realtime Multi-Person Pose Estimation - [https://github.com/ZheC/Realtime\_Multi-Person\_Pose\_Estimation](https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation) * [https://github.com/kentsommer/tensorflow-posenet](https://github.com/kentsommer/tensorflow-posenet) * Prerequisites .. * [https://www.tensorflow.org/js/tutorials](https://www.tensorflow.org/js/tutorials) * All the other stuff on the tensorflowjs website.
Error handling and execution guarantees should be enough of a reason to use promises and avoid callbacks. It's a native language feature at this point and has syntactic sugar with async/await. Promises aren't going anywhere and it's the recommended and preferred way to develop in JS.
My hero
Aren't they a leader in video content delivery or something though? That's what I heard, that youtube, netflix and pornsites push the internet forward.
Hey! Very cool work :)
there's a playbackRate propriety that you'd attach to your stop button before you do the video (with a timeout)
Hi /u/RaffertysDog, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
https://github.com/vladocar/femtoJS/blob/dc91db3a78bb23111a9c95e35305365dd49e0f26/src/femtoJS.js#L20 🤔
How good is that book series these days? I imagine the paradigms have changed a lot with ES6+ becoming way more common.
You don't use stacks or queues? 
Not mentioned in the docs though.
yeah i think that will work too. But when the camera position changes in 3d, scene for all particles will change. Same here, not done 3d yet in js, but done that in c# unity. Takes up too much browser memory.. I guess WebGL is the way to go for it then.. 
What language do you work in that you need to build your own stack or queue from scratch? Odds are someone else has made a nice library that you can just use.
Right - these are useful questions to ask more junior engineers to test their grasp of fundamental concepts and general 'techiness' and ability to think/learn. Senior engineers? Experience probably counts more.
Pornhub is a leader in it, you may also be thinking of the old saying that porn drives humanity forward
I don't want to sound like a jerk but this looks stupid as hell. Props to anyone who finds it useful
Hey! Thank you very much, I really appreciate it! I'll take care of those things tomorrow
Stacks and queues are just interfaces for collections and can be implemented with arrays. 
sure, I can write an application in the world in 1 line of code, just make a wrapper class and call the entry point into the 3rdparty library which has a billion lines of code... 
Hi /u/prdniminakuro, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/teriologia, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
My point being that linked lists or variations of linked list are the most common data structures used in programming. 
Come on, you know (I hope) that those are for figuring out if you know how to program and to see how your mind works and how you approach a problem. And the really hard ones are really about seeing how you interact with the interviewer and whether you ask for help. (I'm not counting companies like Google who can afford to ask really hard questions just for shits and giggles, I mean regular companies.)
Meanwhile, in another thread: "why does my node modules have 700 packages and 2 GB?"
Why would it take up more memory? In this case it will be the same data, just more math before putting each particle on the screen. 
I'm aware that stacks and queues come in multiple forms and can be implemented using arrays. Arrays are usually used for convenience and are suboptimal as you trade constant time insert/delete for linear time. 
Are arrays Turing-complete? 
Or don't use the Entry key.
Literally none of what you said applies to showing interviewers you know abstract concepts, such as bubble sort and linked lists. If interviewers want to see how you program, they would ask you to prototype an actual program.
Hi, i have rewrote the TodoMVC example in pure JS. And i would love to know why we don't code just like this: [https://github.com/mr21/todomvc-vanilla/](https://github.com/mr21/todomvc-vanilla/) Like I say in the README, the entire production version weighs **5KB**, and 25% of this is the favicon. I didn't recode my own framework for that and the code looks perfectly maintenable to me. So what is the problem with this way to do vanilla components? I use native proxies, i use CSS to avoid the maximum JS etc. does it looks over complex to you, or unmaintenable?
Asking someone to regurgitate a well known algorithm out of a list of possible algorithms is simply checking to see if you've memorized useless shit, and a demand that you jump through hoops. It has nothing to do with determining if you have problem solving or algorithm building skills. It's just a more advanced "Sing me the ABC's!"
&gt; react hook also use singly linked list i think Any blog post on that or do I have to dive into the source code?
Ah, thanks!
Yes. I mean unity3d plugin in browser. Js is good :)
To be fair if you don't know what a linked list is (highly unlikely) you should be able to implement it in no time just from the description. People asking this likely want to see if you can figure our all the edge cases on an abstract problem, a linked list is an easy one. No one will ask you to write a red-black tree.
Hi /u/EJX-a, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
great read. step 1: write small functions to help V8 step 2: use Google's Closure compiler that will undo all your hard work and inline all your small functions into too-big-to-optimize functions. true story.
&gt; Plus they are the basis for trees and graphs Not necessarily true - graphs and trees have a wide range of implementations, nodes and edges could easily be implemented as two arrays / dictionaries, for example. But I would say there's definitely merit in the linked list approach, as nodes linked as they are in a list are very close analogues to visual graphs.
https://www.reddit.com/r/learnjavascript/
PC.CPU() runs, combines them to a string, and returns that string. That string is then lost, because you don't do anything with it. &amp;#x200B; You then log PC, which is an object, so you aren't going to get useful output from it. if you did \`console.log(PC.CPU());\` you would log the string that was the return value of PC.CPU(), which sounds like what you want. Alternatively you could assign the result of PC.CPU() to a variable, and then log that variable. If it is important to have \`console.log(PC)\` work, you can define a toString() method of the PC object, but frankly I recommend against that - that can easily lead to confusion because you'll have some value somewhere and not realize it is an object, since it will console.log() like a string.
yeah, i just figured out you can't log strings made in functions in an object. i got around it by making a variable that makes the string and having the pc object call that variable. now i just need a way to let the user change with object the variable is pulling info from.
Hi /u/SumAlias, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/EJX-a, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/trakam, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
With function declarations (the second version) the function itself also gets hoisted. So one might use function expressions to prevent confusion by enforcing a syntax that doesn't allow the function to get hoisted. Expressions are also safer in blocks if not in strict mode. See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#Block-level_functions_in_non-strict_code If using ES6+, you can also use an expression to make sure the function can't be redefined. This would require using `const` instead of var. function test () { /* ... */ } test = null // OK const test = function () { /* ... */ } test = null // Error 
In most cases none. That's just trendy way of writing things for no good reason. The only actual argument which has some substance behind is that variable needs to be declared before it can be used, unlike using named functions. Which kinda helps to avoid unpredictable behavior. But that's a non issue in proper code bases where we separate our modules so... ? no. That's ultimately not an argument. There are however downsides. As you may know, arrow functions do not have "this" context which can be rather needless confusing. Which makes arrow functions ideal for call backs and quick calculations. However, function not being bound also means that it's being reinitialized each time it's being called as it's not preserved in memory. So technically you're producing needless overhead. That's why you'll notice that a lot of non trivial projects will have a convention of using named function declarations over arrow functions. For example Deno.
Linked lists are different from arrays, both are two different data structures for different purposes. You write linked lists when you want something to be in a perfect sequence which recognises the next entry. Arrays are just a collection of data.
Looks fantastic! Definitely have to check this out! 
Yes. One you use daily in real-world applications and the other is CS textbook fodder.
I think a majority of what is covered is still valid.
Isn't inserting a new node O(1) if we just make the new node point to whatever next node head points to then move head's next to point to the new node? Why is he going through the entire list looking for a next that's null for insertion?
Wtf are you talking about. Linked lists are designed to be sequential, one-after-the-other. If you want real-world use cases then why not a choose-your-own-adventure type of application where chapters are linked. Literally anything where one piece of data is linked from another piece of data. You write as if you don't appreciate programming and how different data structures have their individual benefits.
I'm not sure I fully understand what you're trying to do but it sounds like maybe you want to be thinking about constructing the whole PC object dynamically. You could just have something simply like a createPC function which returns a new PC object based on the components you give it. function createPC(CPU, GPU, RAM) { // Calculate performance before creating the new object const performance = calculatePerformance(CPU, GPU, RAM) return { CPU: CPU.model + " " + CPU.make + " " + CPU.series, GPU: GPU.model + " " + GPU.make + " " + GPU.series, performance, } } const PC = createPC(CPU1, GPU1, RAM1) console.log(PC) const anotherPC = createPC({ model: 'something', make: 'something', series: 'something' }, GPU1, RAM1) console.log(anotherPC)
No, I'm saying, in _Javascript_ (because that's where we are, by the way), `Array`s provide all the functionality I'd ever need to borrow from the theory behind a linked list. I'm saying that, in _Javascript_, I do not need to implement linked lists. I'm saying that, in _Javascript_, real-world applications use Arrays and textbooks demonstrate linked lists. I'm saying that, in my decades as a software developer, I've yet to see a linked list make it into production code, as it is always more complicated and bug-ridden than simply doing it with primitives like Arrays or simple lists (depending on the language). And finally, almost invariably, in modern software design, your in-memory data structures aren't that complicated and you're relying on external things like databases or caches to handle your relationships between items, not a linked list. But you go ahead and continue to be upset, I'm not really interested in arguing with nerds on the internet right now.
Lmao
*Hi human!* It's your **1st Cakeday** everydayNG! ^(hug)
We are only generating pre-signed URLs through lambda and returning it not uploading objects through it, so we have to enable CORS for pre-signed URLs to work. How else would I invoke a lambda function from the front-end instead of going through API gateway?
It's good to understand these things, but if you're doing Javascript, you're probably either working in or looking for web developer type roles (by that, I mean writing code for web applications, be that Frontend, Backend, or Fullstack). That's somewhat different from a traditional software engineering role - if data structures and algorithms are not really relevant in more traditional software contexts, they're even less so for web development. I've interviewed a fair amount, and the traditional white boarding problems I've seen have been very basic. The interview questions I have seen are more language, framework, and experience oriented. In particular, pre-interview homework assignments (where you make an MVP) are pretty popular. 
Hi /u/luiscislaghi, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
@ew73 your point is totally valid with respect to your experience. Also, linked lists can be useful in other cases, which might even be applicable in JS. Not purely CS textbook fodder. For example \- removing an element in a LL is a very cheap operation, and independant of the length \- LLs can have loops, which might apply to your problem Lastly, probably not doing us all a favor by using the word "nerds" as an epithet ;)
lol
Excellent point.
I'm still in college, and I realised that I have never used linked lists for a long time. The last time I've used it was in the class learning linked lists.
Deal with in what sense? Unicode is unicode.
I couldn't think of a better way than creating a lookup table. const lookup = {"０":0,"１":1,"２":2,"３":3,"４":4,"５":5,"６":6,"７":7,"８":8,"９":9}; const convert = str =&gt; parseInt(str.replace(/[０-９]/g, c =&gt; lookup[c])); console.log(convert("２３４１５")) 
It's still sometimes important to understand the difference between an array and a linked list from a memory and performance stand point. While most languages have implementations of common data structures as part of their standard library, knowing these differences can help you choose which data structure to use in different cases.
Have you tried debugging? Here are some questions to answer: - Is the key press event being called? - Is the key code if statement running? - Is the class list actually changing? 
I'm not quiet sure how to debug this. I am running this script on a different website and what I did was I used their html code for their label and the id for the label was called btn-no. I think the problem is the key code statement is not running but I do not understand why. &amp;#x200B; Thanks again for your quick response!
People used to run a small flash program that perform long running http connections. The technique is called comet or long poll. The server side works fairly similarly to websocket daemons: Keep track of all the live connections and push content appropriately using a global queue system.
There are some things that you cannot reasonably program without using a linked list, it doesn't need to be on the hw level. They were not invented just for fun, or just to make programs run faster. And I've found the complete opposite in terms of bugs. Using a linked list between references over relying on arbitrary indexes can only make your abstractions less leaky.
Giving away trade secrets 😝 Flash - the most vile web secret no one knew they were using until Apple came along and ruined all the fun.
No, JavaScript primitive values are not objects.
i thought of that but i also need the object to contain a method for my assignment. i also need the objects properties to be able to be changed by the user. i managed to get it on my own just a little bit ago by using a variable that prompts the user with a list to chose from. takes the option chosen and fetches the data related to that option. then an if statement that checks takes that data and sorts it into the proper functions for the PC object to gather the final data from. Now i am building a table that the PC object will output to. That should be easy though. it's a bit of a mess and takes up 100 lines, but i'll figure out how to clean it up later.
Are you supporting modern browsers? You should be using [String.prototype.normalize()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) What you want is defined as part of [Unicode normalization](https://unicode.org/reports/tr15/). The applicable forms are the ones contain "Compatibility Decomposition" (i.e. NFKD or NFKC) &gt; '１２３４５６７８９０'.normalize('NFKC') '1234567890' 
Hi /u/Mootando, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
/r/learnjavascript
Hi /u/marc1210, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BritishGotTalentSCAM, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I think you should start doing courses for javascript on khan or code academy or if u wanna watch videos watch “the coding train”.
Fun fact: linked lists look super stupid when converted to JSON.
+1 for codegolf se
I'm just here to voice my displeasure that someone decided to create a format called AV1 in a world where AVI is a commonly-used format.
PostgreSQL’s internals make heavy use of linked lists. 
Notice in the reduce example how the combine function is called: current = combine(current, element); So `count` is initialized from the value of current while `[from, to]` is initialized from the value of element using [array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring). In the first call, `count` will get the starting value provided to reduce. In the second call, it will get the value returned from the first call. In the third call, it will get the value returned from the second call. 
Bad example. Why not just use an iterator in this case? And unless your choose-your-own-adventure has tens of thousands of chapters that your player is advancing through hundreds of times a second, your choice of data structure isn't going to mean jack anyway. &amp;#x200B; The \_only\_ thing a LL is optimized for is insertion and deletion. That's it. And you sacrifice access speed (and often readability) to get that. As the user you're responding to has said, there are almost no circumstances in Javascript where that is ever worth the tradeoff.
Doesn’t work on iOS, apparently.
Oh, man, now it clicked! Thank you for the explanation. The whole `(count, [from, to])` before the arrow describes the arguments of the `combine` function itself, because IT IS the `combine` function that I'm providing to `reduce`. That's a bit obvious, but it was hard for me to really see it. Thanks again!
That particular reduce() argument is called the "accumulator". In this function, it serves to increment the count, and is returned from one iteration, and passed to the next, so forth, so on. It's not immediately obvious that in the function call for 'reduce', you have actually given it an initialized accumulator of zero(as previously mentioned, that 'starting value'). That doesn't have to be a number though. It could be an array, that you just push to, or an object. More interesting uses, are when you need to reduce say, a list of things, down to a column. You might do it like this: ``` let mySpecialBucket = {} let someData = someList.reduce((bucket, listItem) =&gt; { bucket.something = ...some_expr; // Or maybe bucket.someArr.push( ...some_expr ); return bucket // note that: By returning the value here back to the reduce function, that supplies it as an argument to the next iteration }, mySpecialBucket) ``` Doing it that way, gives you a way to 'reduce' a list of objects with complex properties down into a single record.
When I hire someone and I want to see if they can program and handle the job I: Give them a problem to solve that is similar to a problem I’ve solved on the job. I give them access to documentation, and I ask them to talk me through what they’re doing. I offer help if they ask. The retention rate of people I’ve hired is far above my coworkers who do algorithm whiteboarding. I’ve met tons of people that know algorithms very well, but can’t do any real sort of implementation. I know people with CS degrees that can’t make an api. The software hiring process is broken and don’t believe that you honestly think it’s not. 
Sure, but to OP's point, you don't need to build them, you can use a language construct 90% of the time. Yes, you still need to know when to use the right tool for the job, but you don't have to manufacture the tool yourself.
The biggest barrier to AR is the fact that you need individual apps for each one. If there was a single app to handle all AR stuff (like Spark through Facebook for example) the it would explode. A web based version would be HUGE. 
I hate Microsoft and thus typescript too. — wounded browser war veteran 
Nice article! I'm a casual JSer and learned some stuff. I think there's some ambiguous usage of words for concurrency (queued actions with independent progress) and parallelism (running at the same time in multiple CPU cores)
Because it's a shit language that I'm forced to use to write anything that runs on the web. Why do people even like this language? I really believe that majority of the people that like Javascript are people who learned Javascript as their first language. Javascript is extremely appealing as a first language because it's extremely loose. You can write almost anything and the browser will often find a way to just make it churn out a result, even if the code doesn't make any logical sense in another language. Whereas in other languages, you will have the compiler complaining about missing semi colons, numbers and strings that look similar but aren't actually similar, things that you have no idea what it means like can't call non-static methods from static methods. You can cobble some code together and it will run. However this doesn't make the Javascript engine actually smarter. In other languages, if you throw garbage at it, it will throw it back at you and say "this is garbage, I don't understand it, please re-write it in a way that I can understand it." In Javascript, you throw garbage at it, it willingly accepts it, then spits out garbage back at you and you are left trying to figure out why it went wrong. This is why people from other languages hate Javascript. In other languages, you have the proper tools that will prevent you from writing majority of the garbage. It's hard at the beginning, but it pays off as your application gets bigger. In Javascript, it's easy at the beginning, but the garbage just accumulates as the app gets bigger.
Removing an element is not always cheap, it depends on whether you are already holding a reference to said element or not. If you do, it's O(1) but if you don't it's O(n).
Very true! 
Strong disagree. Linked lists were a solution to how to manage a list of data of variable size in a language where memory allocation was difficult, like C. Can you share an example of an application of a linked list that can't be handled using arrays in js?
Flash was not vile and was the precursor for so much web technology we enjoy today (sockets, single page apps, video conferencing, etc) Many people that worked on flash moved on to HTML5, unity, and mobile platforms. Nothing was vile about flash
Nice article. Thanks. A common thing that happens in some of these walkthrough of the more difficult aspects of JS is people often use the same words to explain the words being presented in the programming language concept. For example, if one is teaching the importance of the resolve() callback, it is far more helpful to explain that callback using any other words than “resolve”. I like how Wes Bos / Scott Tolinski explain the concept of promises using an “IOU” note. Point being: let’s teach advanced concepts of Js without relying on and circling back to the very word that is critical and used in the concept/syntax one is learning.
I'm sorry the sarcasm wasn't thick enough. I, too, used to work with flash. Everything from clipboard access to video streaming... The web world is much nicer, and the last 3 years have been a wonderful transition. Flash was relied upon for a lot of "hacks" though... 
Well everyone who worked with Flash loved Flash. Its only when Jobs decided to say it sucked that the non Flash people started to hate it. GotoAndPlay ("sad_song");
Ehhh... Flash loaders and all flash pages were just too much. It was not a good direction for the web imho. Flash games will be missed a bit... The rest I am kinda glad to see go...
I'm getting sick of these sites that have a white background with gray text.
Hi /u/theolympicdream2020, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It would be great to see Chrome shipped with TF as native. It's written in C++ after all, so wouldn't be too difficult. Would also love to see this kind of system contribute to deaf assistance technologies.
Due to the overwhelming responses against me using callbacks I've added a promise based solution at the end as a choice for the reader. I want to keep the callback solution for the fact that I don't know where they are coming from, maybe seeing how the callback solution compares to promises make it easier to understand and adopt promises.
This is a great intro to Linked Lists; however, most programs shouldn't even use a linked list. Memory locality makes arrays and formal List types a lot more effective.
Would be great if this article described the version of V8 this applies for. The V8 team is known for identifying slow hot code patterns and optimizing it in a new release. &amp;#x200B; \&gt; Given what we learned before about the 60 KiB limit in TurboFan &amp;#x200B; I'm not familiar with this specific limitation, but I doubt it's going to remain static if the majority of the people write bigger functions (I don't think I've ever written a 60kb function).
I mean, if you’re capable of writing a linked list, you should be able to implement a red black tree data structure given the spec. 
Sure, I’ll give you an example. A program that needs to be fast enough such that it needs to be developed in C. Also I would look into how sequential arrays are JIT’ed in JS. If the JIT compiler is sophisticated enough, it could theoretically take a highly sequential set of array operations and populate what is effectively a linked list (at the machine level). Sometimes layers of abstraction aren’t helpful because they make you forget how to write a performant program. JS isn’t a great example language when you’re looking at time complexity of data structures because things like BSTs and LinkedLists and ArrayLists rely on references and amortization, things that JS isn’t capable of at the implementer level. 
A lot of you guys are complaining about how impractical it is to use a linked list is over an array. That's true, but it's important to realize that sometimes you have problems that are actually a lot like a classic CS data structure like a linked list. For example, a bunch of objects that are linked together is basically just a slightly more complicated linked list. And the links don't necessarily have to be memory addresses -- they can be anything that acts as a pointer such as an array of strings or URLs. It's not super important to be caught up in the details of a linked list implementation but if you know what kinds of problems it solves and how you can apply something well studied into new designs, it can be the difference between clunky and intuitive code. Particularly if you're fooling yourself into thinking you're doing something novel when really you're reinventing something and then making up esoteric nomenclature for it.
Off the top of my head, malloc, cons cells, any sort of lazy data structure, activation frames, streams, are all linked lists. It's unfortunate that schools only teach linked lists in isolation. They're really powerful in the right context.
[Newgrounds.com](https://Newgrounds.com) is probably still around. That shit was great.
Hi /u/HopOpJouKop, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; The V8 team is known for identifying slow hot code patterns and optimizing it in a new release. This article is written by a member of the V8 team.
Oh haha. Interesting twist of events. I still stand by my comments (regardless who wrote it). 
Lol funny you say that as the current enterprise Javascript project I'm working on at the moment uses LinkedLists. 
ActiveX? Java Applets?
I think taking the time to unwind is perfectly acceptable; you're not a computer, you need to rest. As for the guilt...I can't say that I feel particularly guilty unless I feel like I've broken my usual routine, e.g. if I normally do work 5 days a week but then suddenly stop because of a game, I'll probably feel guilty. I personally do this for a living so I don't really feel that way anymore. I'm sure when you feel like you've "made it" you'll also feel the same. I think it's somewhat of a good thing you have that guilt, but don't let it kill you!
For really old IRC programs, [here's a protocol spec](https://tools.ietf.org/html/rfc1459).
It's definitely not uncommon. Especially with front-end, it's a constant struggle to keep up and not become obsolete, but at the same time you cannot risk getting burnt out. I have an extremely obsessive inclination when solving problems, so I tend to bang my head against one for hours, only to walk away for a short while and solve the problem easily once more relaxed. When I first started getting into coding a few years ago, I was too invested in learning everything I could. You know this effect when if you focus one a task too long, it leaks into your dreams? Yeah.. that's certainly the case for programming. I got burnt out and had to take some time off of work. Anyway, I guess my point is to make sure to balance your life. All work and no play makes Jack a dull boy.
The most popular ones were Flash, ActiveX, Java Applets They were basically browser plugins (not extension) which acted as a container within a html page to load programs written in those certain technologies/languages
"Made it" I think this will be the key. It will be a huge weight off the shoulders. Appreciate your reply
Thanks mate, good to know other people are similar. I think I will continue my routine and I do plan to stick to one area and try make it happen, I have read that advice a few times now so it must be true. Appreciate your reply 
This isn't exactly correct. Flash supported sockets. Comet was the term for long-polling, bidirectional browser communication with the server which was way after the 90s. XMLHttpRequest (or XHR) didn't come into use until the 2000s and that predates Comet. There were 3 kinds of chat rooms you could have in the 90s: * Java applets * Flash (either full UI in flash or just the tcp socket communication) * Web pages in an iframe that would refresh every N seconds, adding any new text on the refresh.
Hi /u/devbilt, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Agree with the other two comments - started my first device job last year and leave at 7, get home at 7 with little energy to do much in the way of studying. Especially since I like to work out and need some downtime afterwards there would be barely any time anyway! At the end of the day you do it all days 5 days a week, so that in itself is solidifying skills. In terms of learning new release of packages/staying up to date I just browse Reddit on my commute and read an article here or there. It's enough to stay informed and get enough of an overview to recommend/implement it at work.
[removed]
Is building a linked list not a good way to help a student understand how a linked list works, why it performs the way it does and what kind of data it might be good for? The code to build and interact with one is pretty short and straight forward. Just seems like a weird thing to be against learning.
You then must love google then since they used to be pretty cool. And Facebook are just some college students making a website, what's wrong with that? ^(Stop living in the past.)
Well I used and loved Flash. It was both an awesome and shitty technology at the same time. The web today is cleaner, stronger and more mature. So... In the end, Jobs were right.
IRC didn't run in web browsers, until near the end.
I see what the confusion is. I wouldn't hold it against an interviewee if they didn't know off the top of their head, by name, algorithm X. But it would be a warning flag if they couldn't sort an array (in any way), and it would be a big plus if they could walk me through several methods of doing it, explaining the pros and cons. To be absolutely clear it would be the explaining that would be the plus, it's a big asset for a programmer to be able to convey their reasoning to others. It's true that in "the real world" you're likely to just use one of the language's premade sorts. But at the end of the day programming is about manipulating bits of data efficiently, and an array sort is as basic as it gets. I would very much expect a candidate to be familiar with the concept and to be able to offer *some* implementation. Just in case you're curious, my favorite opening question is to compute the factorial, in any way, and I will happily explain what factorial means of they don't know. It's a simple problem and should not take more than a minute tops.
People who can implement the basics by hand can learn how to make an API. People who can use a ready-made framework but can't do a sort are more problematic. I tend to prefer the former.
My experience is the opposite but you’re welcome to your opinion just like I am.
Haha sounds nearly identical to my day! Leave at 7 home at 8. 4 hours of commuting a day. Some days are just web browsing other days I study. I plan to stick to one area and not try to learn everything else. Less stressful and probably more successful.
Sure, Say you have a set of arbitary data in a database. As a requirement, you must be able to retrieve and store the changes to this data, and the order of changes. You must write a webservice to return a json string in the shape of an array of arrays of objects for each stored entity. This is a generic solution for use with tables you do not own and cannot guarentee the structure of, other than the existance of an immutable primary key. In my mind, the most straightforward solution would not to query the table this data belongs to, but to create a new table which contains foreign key references to those original records, and a foreign key reference to itself pointing to the next recorded modification. This fundementally would be an implementation of a linked list. I use a database as a more realistic scenario, but there is no reason this couldnt be implemented in-memory as some kind of object history manager or something in js. As long as you write a referencing and dereferencing mechanism for it. Given the constraints, I dont think using the base Array type would be apporpiate in this scenario. But could you? Well, yeah, obviously, but I also feel like it wouldn't be nearly as robust, but maybe i'm wrong, wouldnt be the first time hah
I see what you mean. I agree that they shouldn't just fire questions about this and that algorithm. But there's going to be some actual programming, and it's going to be done on paper or whiteboard, I hope you agree. There's no way anybody's getting past a programming interview without writing code. You say that not knowing about linked lists doesn't prove anything, but by the same logic neither does not knowing React. And here's the thing: of a person can string together some linked list code, I'm confident in their ability to learn React, or whatever framework. Not so confident the other way around.
Flash ran like garbage and pegged your CPU on everything but Windows/x86. Mac/PowerPC? Garbage. Linux/x86? Garbage. I'm not saying there wasn't anything good about it, but I'm glad it's gone.
I didn't say you should never learn it, I said there's really almost no reason to have to implement one yourself in the real world.
Very clever. You may be interested in http://livescript.net
Very clever. You may be interested in http://livescript.net
Yes, that requires AV1 decoder polyfill since iOS currently lacks one. Same for Safari and Chrome for Android.
I remember when we wrote linked lists in C, you had a pointer to the first and last node of the list. We also needed to implement an iterator for that list
I think this is very common. I’ve been working as a frontend dev for a year now (self-taught) and I constantly have the same feeling. I do have periods when I come back home from work and study a bit every day, but not too frequently. It’s hard balancing your life as a dev, cause you have to learn something new all the time to stay relevant and marketable. I used to learn stuff during the weekend, but man if you even have somewhat of a social life it’s very tough. Nevertheless, I believe the best programmers do study after work though, as it seems there’s no other way to get better. Would love to hear thought on this from experienced devs.
I thought the whole point of this was that it WAS the polyfill.
Here's my take on what React is, and how Hooks fit into that: https://overreacted.io/react-as-a-ui-runtime/ I understand I likely won't change your opinion but maybe this helps other readers conceptualize it.
It's a bit difficult to follow your description of the operation, but I think you're suggesting making the operation "prepend" (à la \`Array.prototype.unshift\`) instead of "append" (à la \`Array.prototype.push\`). In that case, yes, that is an O(1) operation. This is actually pretty common; probably more common in a basic linked list. One down side though, is that your list ends up reversed from the insert order.
Why are you commuting 4 hours a day? I'd be more worried about that than anything else
Yes. What I learned in CS50 was newnode.Next
executing buildApp.exe
Haha not wrong! What I had to do to get into the industry. Nearly been 7 months now. Mostly train time though. I plan to change this soon as it is taking it's toll. 
/r/programmingcirclejerk 
&gt; if you don't know what a linked list is (highly unlikely) I keep seeing lots of candidates who can't solve very basic problems, or don't know the basics of the programming language they were interviewing for. [Jeff Atwood's question](https://blog.codinghorror.com/why-cant-programmers-program/) is very much still valid today. 
Then let me clarify where the line is drawn, just in case juniors are reading this. I won't ask a candidate to define a directed acyclic graph or explain Big O (even though you *do* run into these concepts every day, in spite of what you're thinking). I also won't necessarily expect you to know any frameworks or tooling (although it would be a plus). But I do expect you to be able to code (on paper or whiteboard) a couple of different solutions to Fibbonacci (I will even provide the definition for it). Also will expect the candidate to know stuff like what ```this``` does in JavaScript, and how to write an object constructor, and variable scoping, and whether function parameters are passed by reference or value. I will also expect a junior to know their CSS and HTML and answer questions like "describe the box model". I don't want them to know stuff *by heart*, you can always look up the docs for that, and some people have bad memory, and there's a lot of stuff to remember. But I need to know that the person knows wth they're talking about. Junior doesn't mean you get to learn the basics on the job.
I am not sure about the exact backend architecture for a game, but you want something VERY fast. I don't know about the reliability and speed of rails, but I do know that that fastify claims to be much more performing than express. So if you decide to go with a js backend framework, look at one who wraps up fastify instead of express. As for the actual architecture and system design, maybe ask at r/gamedev. Tbh I am also interested in the answer. 
lolz
but it's not even JS?!
You are wounding only yourself.
So all we need is Avengers JS, which recovers the deleted files, through some yet-unknown mechanism.
A common workaround to this used to be to `setTimeout` on a XHR-fetch. So you pull down each 10 seconds or so to make it "feel live". This was a horrible way of doing it, and you often ended up DDOSing yourself :-D &amp;#x200B; &amp;#x200B;
I'm trying to achieve the same, except with much lower numbers; with your numbers, I think you want something a bit faster on the websocket side. Nodejs is cool and all, but you'll have to worry about latency and delivering up-to-date information to more than a handful of clients - node will only be able to handle that if you go redis and multiple servers speaking together
Good one! 😂
&gt;run a small flash program that perform long running http connections. The technique is called comet or long poll. While Flash is one way to do it, and logical if you were using Flash for something else as well (audio, animation, video, ...), you can do long-poll using Javascript and a iframe. I used the method for a few bits &amp; bobs, including my own chat/messaging app, back in the day. It was pretty common for such things.
Well, with angular and angularjs it's quite easy, you either use folders per components or per type with angularjs (services, controllers, views, etc) and feature modules for angular. With react the thing gets for me a little harder, but I've found the ducks approach to be somewhat good 
I'm getting a feeling that debugging logical problems lately have been pretty hard for me on Javascript.
The _idea_ of pattern matching is interesting. I find a couple of problems with your particular implementation/approximation. The first one is that it requires a lot more boilerplate, and _particularly noisy_ boilerplate. I mean, it's not just visual boilerplate but semantic one. All _actions_ are treated as predicates. So, not only is there the already mentioned problem of not being able to produce _falsy values_ as a result -which is already a big problem-, the actions are required to produce a value to signal success. It does not feel like a "more capable switch statement", but a _quirkier_ one with _different_ capabilities, not necessarily "more". The lack of separation between _match_ and _action_ makes for poor semantic writing. Secondly, related to the previous one, I have some concern for efficiency. You're running the match and the action together. This raises means that all functions -up to the matching one- will be run. Not just the matching but the action too, because they are a single thing, of course. The concern here is, naturally, that those actions can _potentially_ be expensive. They may or may not be, sure. But you are now forced to consider it, to take it into account in order to decide if it is appropriate to use this construct. Finally, as a tangential comment, I think it would be **much** better for the explanation in the article to actually go the whole way and provide _complete examples_. I mean, on both examples you give, you only show the construction, but not the actual usage of the matcher. I know it's fairly easy to _imagine_ the usage, but then again, you're trying to _show_ things, you're explaining it. The added effort to include usage is minimal, but the explanation would be much more solid to the reader.
&gt;I spent a lot of time in college building linked lists. ... never once had the need or desire to build a linked list for a real project. That just means the arenas you have worked in haven't required it. Simple linked structures are all over the place in system designs and libraries - while probably consuming those systems and libraries you aren't working on engineering and creating them. Not that I'm saying what you do is any lesser, you are just working in different areas. College and university courses are trying to train everyone, not just people exactly like you (or me). Also, lined lists are the simplest of that sort of structure. You work on those initially to be taught the simple stuff before moving on to analysing other linked structures (simple trees, graphs, tries, b-trees, ...). You might not have created them yourself much either, but even if not you will have interacted with them and needed some understanding of their abilities, constraints, and performance profiles. You might equally say that you've never used long division as an adult (many haven't, I'm sure, especially these days with a calculator in every pocket and on some wrists), but the process of learning the method will have helped your young mind form in a way that aided it in learning and reasoning about the more complex algorithms it has since encountered or needed to create.
Well, that’s one of the things where ember.js takes the cake. It’s entirely clear how to structure a project, up to the point where you can look at a third party project and immediately find everything.
/^[^A-Za-z]/
This is actually pretty funny and quite clever. It shows just how useless Thanos’ idea was 
Bro mitigate that somehow. Work odd hours to avoid traffic or gym in the evening before getting home. Seriously, this will burn you out before over working.
My god, finally that actually worked, thank you so much!!
Use external software to sync and merge them together?
The key is the leading caret which means "match the beginning of the string then match"
&gt;**can learn how** to make an API You make an allowance for someone to learn how to make an API if they don't already know but you don't make an allowance for another person to learn how to do a sort? Or do you mean that people who learn frameworks first tend to have difficulty with learning algorithms later?
Oh so the leading caret is specific for beginning of the string only?
This one popped up on my front page just now: https://www.reddit.com/r/javascript/comments/ayahbr/how_to_render_3d_in_2d_canvas/
&gt;I'm not really interested in arguing with **other** nerds on the internet right now. FTFY
https://en.wikipedia.org/wiki/Pomodoro_Technique I use this since college and it works great. The small intervals are enough for a bathroom break, get a drink, or even play a small game or something.
Yes
So can it work like this `if(str != /^[^A-Za-z]/ ) {}?`
This is fundamentally broken and not ready for production. This is not how disk space works, 50% of the files is in the range of 99.999...% to 0.0...1% of the disk space.
While you're 100% correct, arrays in Javascript aren't a primitive type, nor are they really even arrays. They're almost a God-like data structure that acts as a: * ArrayList * Stack * Queue One use-case where linked lists (well, just links, but whatever) are useful is in the implementation of binary trees and other graphs. You *could* implement a binary tree with an array, but it becomes trivial if each node maintains its own references. Many of us use at least one tree everyday (DOM). With that said, I find it incredibly difficult to disagree with your overall sentiment. Hell, I had to move the goal post and bring up trees to try to prove that linked lists are useful.
Thanks for the feedback! Definately some points I didn’t consider. Will update article with some better examples!
I can't host large files. The popcorn.js script works, but only if the video file has an audio track.
reminds me of [this](https://phpsecu.re/nohtml.php) (Firefox required to see a non-blank page) 
Not only is that cool but the author took the time to just about ELI5. Thanks!!
I did some tests some time algo: http://tamats.com/apps/raster/ but because canvas2D doesnt allow to disable antialiasing for shapes it is impossible to get good results.
&gt; You make an allowance for someone to learn how to make an API if they don't already know but you don't make an allowance for another person to learn how to do a sort? Exactly. If you don't know how to make a sort you're not a programmer, so there's nothing else to talk about. (Or you're completely unfamiliar with the language for the position you're applying for, which is just the same). We stop the interview and thank you (not) for (wasting our) time.
You can checkout the popular repositories on GitHub and do the same. Also link on [React doc](https://reactjs.org/docs/faq-structure.html) some suggestions.
This is cool as a demo but the reality is that WebGL is infinitely more optimised for this. I understand that it’s a whole new way of thinking compared to 2D canvas but it’s absolutely worth it! 
It's hard, yeah, until you settle on a naming scheme. &amp;#x200B; [https://hackernoon.com/the-100-correct-way-to-structure-a-react-app-or-why-theres-no-such-thing-3ede534ef1ed](https://hackernoon.com/the-100-correct-way-to-structure-a-react-app-or-why-theres-no-such-thing-3ede534ef1ed)
Good post. thanks for putting examples in the readme.
KeyboardEvent.keyCode is depricated. The javascript MDN says you should use KeyboardEvent.key: [https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code) &amp;#x200B; if (event.key.toLowerCase() === 'n')
Cool! First seen this effect on [rectangle world](http://rectangleworld.com/demos/DustySphere/DustySphere.html)'s blog, the author likes to experiment with visuals in canvas so I recomend checking (his post about the process)[http://rectangleworld.com/blog/archives/298]
Nothing new. The knowledge for rendering a 3D scene with a perspective camera on a 2D plane, which is basically described in this article, is around for decades.
One benefit of having HTML, CSS and JS separate is so they can be worked upon by several devs in parallel. What you're suggesting might not do so well in that sense. I'm interested to see where this goes though.
[removed]
r.i.p
OP you're reinventing hyperscript and existing css-in-js solutions. You can already develop a purely JS application today. A combination of a virtual dom library and a css-in-js solution will do the trick. More full featured would be something like React + StyledComponent. If you don't want to have a build step, you can use `htm` to do jsx transformation very efficiently and without much overhead at all. If you don't like jsx, then you can roll with hyperscript which is nearly identical to what you proposed in your post. All this being said, you've come to the same conclusion that a lot of people in the community have.
Welcome! To Zombocom!
I work from home so I have it easy in that respect. My usual day consists of waking up and checking on things, running backups or updates I need to do, house keeping shit. Depending on the day I might code, or end up in meetings, but sometime between 10am-1pm I just need a break, so I usually fire up some shooter and devastate some shit for a time. Now my brain is ready to go and I get 5 more things done then I would have if I just kept trying to work.
A non-enumerable property would also work in that case.
You would have a continuously refreshing frame sending javascript back and fourth or that is one way it was done.
Turns out the only way it could work is `if(test.search( /^\w/ )){ //First character found is a word)}` You can add a ! symbol at the start if you want the first character to be anything other than a word.
found the problem is was because of I had set the .wrapper to overflow: auto
It's literally black on white?
Phaser is great and gives you all the tools you’ll need to create a radical game. Pixi is also really good as well. In terms of webGL and Cordova - its all a web view so you have access to webGL. Granted the web view that Cordova is using isn’t the same engine as normal safari on iOS it still has the power to run webGL no problem.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [Decoding the Front-End Interview Process - New Blog from JavaScript Works](https://www.reddit.com/r/reactjs/comments/ayci3h/decoding_the_frontend_interview_process_new_blog/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Not really. Adobe did release flash for Android and it was terrible, proving Jobs' point. Apple was able to work with the open web spec enough to make iOS Safari 1.0 viable on a tiny screen... with a slide out keyboard, data-type specific inputs, inertial scroll and zoom, fullscreen video, etc. Flash on the other hand was a pixel-canvas-as-a-black-box whose behavior was all baked in and where every site was a unique special snowflake. Flash wasn't built for a multi-modal, multi-resolution, multi-device world, and it showed.e
This is literally what 3d is, though. Using math to make shapes that we humans perceive as three dimensional. :)
nice post, thank you.
You can come sit in my home office for 5k/week and I'll teach you ;)
Only if you provide refreshments and cold cuts.
I am currently doing my thesis work about PWA apps and have read about Cordova and React Native. I have also used CocoonJS back in the 2015. What I understood (Source crosswalk) is that Cocoonjs or Crosswalk is not needed anymore as Cordova uses native chrome in the background in the newest version. Before Crosswalk was needed to update the Cordova webview with latest chrome but now it is native so both CocoonJs and Crosswalk are not needed in Cordova builds. This answer is not a fact but my guess how it is. So if you game runs fine on Chrome browser in Android it probably runs as fine on Cordova. 
You can unlimited tea and 2 pack of biscuits per week subject to fair usage agreemenr
I'm so glad xkcd-37-bot didn't hear that.
Oh it uses image detection - Have you seen the demo of this being done with just a microphone? 
 `if(test.search(/^\w/) == 0) {//First character found is a word}` This works better somehow.
[https://developer.mozilla.org/en-US/docs/Web/API/EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource)
Your css is just css, with an extra colon. The html is html except written in a more verbose language. And their are other frameworks that already do this. I appreciate your attempt, I love seeing new ideas. But you still need to know html and css to use this, you’re just abstracting it into a js object. Please keep trying, keep innovating. I love the effort and the high level concept. 
I see lots of HTML and CSS, you've just dumped it all in the JS file.
You can also use [`RegExp.prototype.test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test): const pattern = /.../; if (pattern.test(someString)) { // ... }
Hmm never thought of using that. Thought it was some higher level regex stuff, wanted to keep it simple. Looks pretty easy tho, thanks.
Throw in one more biscuit and we've a deal.
That's a decent scenario, I'll give you that
Been there to it's hard. My advice is rather than studying 'abstract' or more theoretical concepts which is probably what you've heavily done to try and break in the industry is to do stuff that you actually find fun and interesting. For instance, work on a little side project, try make a game or write a Chrome extension or something that's very different from your day to day. Use a different language, do something that will feel very different. These little projects can be good fun and you will broaden your knowledge and can have big returns for little time. You can even try pick up something like VIM as you're watching TV to make you more productive. 
I agree, this is like an extension of a chapter 2 exercise in any decent graphics programming book. The sphere is a neat feature, but these perspective calculations have been around for a long time
Hi /u/unitedpartners, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/csl3arner, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That is true to an extent. But for some complex 3D game engines, there is some 3-dimensional data modeling happening under the hood. Technically data isn’t 3-dimensional, but but if you have a structural model with 3 coordinate planes describing 3-D space, then it’s close enough.
Hi /u/mintwurm, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
nope. don't blame the victim asshole
Hi /u/Pmoney4life, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/perpetualpain, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/karna007, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
no i hate those companies too. but microsoft is the worst. their stuff sucks, except for maybe IBM is even worse.
Hi /u/Chainlist, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shnigi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Hafidh24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/invest-learn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Beerato123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/djrasmusp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/knervous, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Zipdox, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Beerato123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Exploree1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you, but i wonder what can i post in this subreddit?
Hi /u/adamthompson922, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/proustibat, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pupet, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
performance on latest chrome on mac is flawless, performance on latest firefox on mac is bad, noticeable pause every 1-2 seconds anyone know what's up with that? I looked at the linked TweenMax page and it's examples and noticed the same thing there, every few seconds it will simply drop a few frames in a row just recently switched to firefox for all my work :/
Agree in part, but also this type of separation has created problems in the past, namely that the two couldn't interface and getting stuff in sync was hell. It's actually the v-dom stuff and the removal of that separation that allows for stuff like \[Framer\]([https://www.framer.com/](https://www.framer.com/)) where developers and designers can interface with working prototypes. 
Thank you for sharing this excellent collection. Most books about programming for the web (particularly JavaScript) are rubbish, but that pill is a lot easier to swallow when you don't have to pay US$35-$50 per title to find out the hard way. I found two titles particularly interesting: * Building Front-End Web Apps with Plain JavaScript by Gerd Wagner * The Offline Cookbook by Jake Archibald Wagner's book provides me a valuable example of how the model-view-controller folks structure their web apps. I learn faster and more completely when I'm given a complete working example to dissect, and wagner provides one, a book library database in plain JavaScript. First class. Jake Archibald's contribution isn't a book, but a blog posting from 2014 in which he laments Google's abandonment of offline APIs after beating that horse to death, and describes alternative methods for persistent caching and other techniques used to make web apps stand alone. I've only just scanned Archibald's article and who knows what must-have and will-abandon features Google has shoehorned into HTML5 five years afterward, but I'll read it for the schadenfreude even if much better facilities are available in browsers today. 
lOl
Fair point - "primitive" is the wrong word here. "Built-in"? "Comes-for-free-with-the-language"? 
That particular scenario seems needlessly complex. In the financial industry (at least), the solution to this problem is to use database triggers and a second audit table that not only preserves order, but preserves the changed data, as well. Occasionally, depending on the use case, you just create an event source-style schema and build that functionality into your data from the ground up. 
Ok, old man. You hate everything, everyone sucks. Thanks for contributing.
Haters gonna hate
That is definetly not a beginner question....
You millennials don’t have the benefit of hindsight yet so you are easily influenced by shitholes like Microsoft 
I think that is the point however OP did say something about the annoyance of 3 different syntaxes so a bit contradicting for sure. I think this could be a great idea for people who only use the ‘triplet’ and not other libraries. 
Yeah we should instead ignore all the new technology, build our own computers and make our own programming languages because every corporation has done something shitty in the past.
so eazy....just need to learn maths ... /s
Well, I am not surprised that the same idea has already been realized. I didn't know exactly what to search. Thank you very much for the inputs. Will look those up. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [Can anybody get this jfiddle working on their machine? \[Help\]](https://www.reddit.com/r/learnjavascript/comments/aydpjw/can_anybody_get_this_jfiddle_working_on_their/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Not that I'm disagreeing with you (I do agree), but I think the concept of a "primitive" in JavaScript is interesting and kind of odd, so I'm using this post as a springboard for some thought on the subject. Often you see them described as, as is the case with this article: &gt; "Primitive data type means when you create a variable, store a value of any given primitive data type in it, then declare another variable which is assigned (with the value) to the first variable, the second variable receives only a copy of the value from the first variable." Basically, assigning primitives creates copies, not references. But is that really true? If you've ever "copied" a large string primitive over and over again in JavaScript you may notice that your application memory doesn't explode. This is because internally, the string is a reference to the same set of character values in memory and your "copy" in JavaScript land is ultimately just a reference to that place in memory. The details of the memory are not exposed to the language and instead are handled internally by the runtime, so really, there is no real transparency into what is copied memory-wise. But any decent runtime isn't going to copy strings like that. If we try to take runtime implementation details out of the picture, what would a copy then mean? How would one know if an assignment in JavaScript, given the language alone, is a copy? For both objects and primitives, assignments appear to have the same effect: a variable is given the value of another variable's value. After assignment, both variables contain what appear to be the same values and are considered equivalent. var primitive = "string" var primitiveCopy = primitive primitive === primitiveCopy // true var object = {} var objectCopy = object object === objectCopy // true There isn't any real difference, and in fact you'll sometimes see people refer to object reference assignments as copies as well, since you're copying the reference. From here, one could argue that by adding a property to `object` and mutating it, that you'd be able to see that both `object` and `objectCopy` would reflect the change. var object = {} var objectCopy = object object.prop = true objectCopy.prop // true While this is true, this is only because `object` is mutable and none of the primitive types are. But you could just as well create an object "type" that is also immutable. And with an object that can't be changed, would there be any difference? function ImmutableObject() { return Object.freeze({}); } var object = ImmutableObject() object.prop = true // like primitives, not allowed One could then argue that primitives have literals that share identities whereas this is not the case for objects. 'string' === 'string' // true {} === {} // false And this is true up to a point, but not all primitives have literals, not as of ES6 with the introduction of Symbols. Symbols are unique in that, not only do they not have literals (though they very well could have), they're also represent unique values when created. Their creation, in fact, is not unlike `ImmutableObject` from the previous example: Symbol() === Symbol() // false ImmutableObject() === ImmutableObject() // false Both are created from functions and do not share equality when compared against a similarly created value of the same type. At this point, there really is no difference between a `Symbol` values and an `ImmutableObject` values as far as copying goes. So if one were to provide a definition for primitives, I don't think describing copy behavior is the approach to take. Given this, could primitives really just be very specific kinds of objects? They apparently can behave the same way, at least as immutable objects. And like objects they can have properties and methods called from them as defined by their respective types... 'string'.charAt(0) // 's' (from String.prototype) ({}).toString() // '[object Object]' (from Object.prototype) Even `typeof` (ignoring the `null` is an "object" oddity) doesn't report "object" for all non primitives because functions, which are objects, has its own type as "function". What about `instanceof`? `instanceof` is where we start to see a break in the primitive behavior and exposes a little of what's going on with the _primitives act like objects_ behavior above. Specifically, primitive types are not instances of their respective object type constructors (those that have them). 'string' instanceof String // false 1 instanceof Number // false Symbol() instanceof Symbol // false These primitives can have object variations, but then they're no longer primitives, just objects wrapping a primitive value. These values do pass the `instanceof` test. var string = new String('string') string instanceof String // true The fact that primitives are not instances of their object types but behave like objects of those types reveal the autoboxing behavior, where primitives are temporarily wrapped in their respective object versions when members of their respective type are accessed. 'string'.charAt(0) // temporarily becomes new String('string').charAt(0) // or more generically Object('string').charAt(0) But is `instanceof` enough to verify this? Again, thanks to ES6, we see the cracks open up with the exposure of `instanceof` implementation through `Symbol.hasInstance`. Going back to `ImmutableObject` we can create a similar `instanceof` experience there. const ImmutableObject = (function () { let canConstruct = false; function ImmutableObject () { if (new.target === ImmutableObject) { if (!canConstruct) { throw new TypeError('ImmutableObject is not a constructor'); } } else { canConstruct = true; const instance = new ImmutableObject(); canConstruct = false; return Object.freeze(instance); } } ImmutableObject.prototype.isImmutable = function () { return true; } Object.defineProperty(ImmutableObject, Symbol.hasInstance, { value () { return false; } }); return ImmutableObject; })(); ImmutableObject().isImmutable() // true (inherited method called) ImmutableObject() instanceof ImmutableObject // false But we're closer to the truth now, because the fact is, despite all its masquerading, `ImmutableObject` _is_ still an object and not a primitive. Though `instanceof` has let us down, the fact that no autoboxing occurs when `isImmutable` is called is key. Since the instance being created is already an `ImmutableObject` object instance, that method is readily available and no conversion to an object is needed. More specifically, `ImmutableObject()` is already its version of `Object(ImmutableObject())`. And here we have our difference. 'string' === Object('string') // false var symbol = Symbol() symbol === Object(symbol) // false var immutableObject = ImmutableObject() immutableObject === Object(immutableObject) // true So what does this mean as far as describing what primitives are? Is it just "primitives are not objects"? Does that really do them justice? The [spec (2018) refers to primitives](http://www.ecma-international.org/ecma-262/9.0/index.html#sec-primitive-value) as &gt; "A primitive value is a datum that is represented directly at the lowest level of the language implementation." And you'll find a similar [mention about primitives on MDN](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) (probably pulled from some version of the spec). But then we're back to implementation details. So what is it? Do we just say primitives are a bunch of _non-object immutables_? &lt;/wake up morning rant&gt;
Open source was popular long before Microsoft joined the movement. They fought it for 20 years. So fuck em. 
Don't include node\_modules in your repo; that's what package.json is for. You're also calling functions before they are defined. Not good practice. Some values don't change - such as `queryStr` \- use `const` rather than `let`. Look into `try/catch`. Try prettier or a beautifyer for the code. Spacing is inconsistent. 
Hey fellows! I've working on XML parser in TypeScript ([https://github.com/vitkarpov/fast-xml-parser](https://github.com/vitkarpov/fast-xml-parser)) and wondering what are applications of it, in other words, how would you use an xml parser in your JS apps? Do they really need one nowadays?
And now they are one of the biggest contributor. Are you also refuse getting a cure to cancer if Microsoft has a hand in creating it? This is idiotic and you are more childish than the millennials you so much like to look down on.
What's wrong with the JsFiddle ? Everything look good to me, please explain a bit more.
```javascript var newData = this.state.data; newData.push(edgeData); this.setState(Object.assign({}, { data: newData })); ``` You aren't actually changing the state since `.push` mutates the existing array. Additionally the `Object.assign` isn't necessary since you're building a new object anyways. Either of the below should work ```javascript var newData = this.state.data.slice(); newData.push(edgeData); this.setState({ data: newData }); ``` ```javascript var newData = this.state.data.concat(edgeData); this.setState({ data: newData }); ``` Can also use Spread if your project supports ES6 but since you're using `var` I'm not sure. ```javascript const newData = [...this.state.data, edgeData]; this.setState({ data: newData }); ``` 
Great API and documentation! I am trying to build something similar with the fantasy baseball API but I'm stuck on accessing private leagues. In your documentation, you mention setting the required cookies, but how do you programmatically login to get those cookies? I was attempting to follow the requests for login flow =&gt; OPTIONS then POST requests made to [https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/api-key?langPref=en-US](https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/api-key?langPref=en-US) to get an api key followed by the login OPTIONS then POST requests to [https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/guest/login?langPref=en-US](https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/guest/login?langPref=en-US) but i always get an error response stating the apikey is invalid.
Change the source URL (in the application GUI) to: &amp;#x200B; [http://files.openvidu.io/video/filter/puerta-del-sol.ts](http://files.openvidu.io/video/filter/puerta-del-sol.ts) 
It's definitely a support issue.
Thanks!
Hi /u/Stiff_M3ister007, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/43northwebdesign, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Beerato123, this is your last warning for support posts.
I hope my comment didn't come across negatively. It actually shows you're solving problems the right way given that you came up with this stuff on your own! It may already exist, but you discovered it all the same 😄
Hmm, that's interesting. I've never thought about doing it that way. I've not written a trigger in years, but my recollection is that they are controversial as they (potentially) couple biz logic to your database (Not always a bad thing, mind)? At the end of the day though, you're absolutely right that that for everyday coding, especially on the web, arrays and maps are enough, and it will always be more work to be done if you choose something else. I'd not go so far as to say that using a a more sophisticated collection type over maps/arrays leads to more bugs, but I would say they should be used *sparingly,* and only when appropriate. Especially when you're on someone else's time. It makes me a little sad to see people seem to dislike using them so much and as something only CS students and professors should use. From my POV, they from time to time can potentiality present a straight forward and natural solution to a problem that could be, but should not be, overlooked.
Hi /u/Alexhind87, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Every time it guesses your next input correctly, you lose $1.00, and every time it guesses wrong, you get $1.05. With random choices, the expected value of you winnings is $1.025. But in reality most humans tend to repeat certain patterns, and the script uses it to its advantage, so you end up losing money. This was inspired by http://people.ischool.berkeley.edu/~nick/aaronson-oracle/
Name one good open source project Microsoft has. 
&gt; Using webworkers for applying the whole matrix calculations could result in a descent performance. Better yet, use GPU.js, which basically implements compute shaders.
A brief article of accessing the desired component inside a HOC.
Really interesting! Experimented with many different patterns, and to my surprise, it learned really quickly!
A brief article of accessing the desired component inside a HOC.
&gt; browsers? You can use String.prototype.normalize(). &gt; &gt; What you want is defined as part of Unicode normalization. The applicable forms Beautiful, exactly what I was looking for - thanks.
Hi /u/--__ab, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For audit stuff, it is intentionally separate from the application code, as the app is what is being audited, after all. In my experience, triggers are fine as long as the application doesn't need to care about them, i.e., they're transparent. They should **never** alter data from something like a query, for instance.
Hi /u/CodeDuchess, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ericbunese, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I actually searched for the guidelines prior to posting but I couldn’t find them on mobile
I find that I tend to be more random when I press the arrows slowly. Once I start typing fast, it all turns into rather repeatable patterns such as 101010101...
Note that NFKD and NFKC are not "safe conversions" (potential information loss). NFC is the prescribed safe conversion w/o information loss, but that doesn't do what you want. You might want to consider this for overall software design (e.g. use NFKC for comparison, but NFC for storage). You can look at these [figures](https://unicode.org/reports/tr15/#Singletons_Figure) of their behavior. 
We're not here to do your homework.
Do your own homework. You are only cheating yourself.
Jeez sorry, just asking for some help cuz I can’t seem to understand how to edit String arrays in General. 
I’ve worked on them for a long time. These are the three out of the 30 I am really struggling on. I don’t know how to edit strings in array and I also don’t know how to evaluate if there were no occurrences of 10 in the entire array. Sorry tho 
You have crazy blinders on if you can't recognize them yourself.
Gerund, not Gerand.
You must be fun at party’s. 
Parties, not party's.
No, you didn't ask for some help. You asked for someone to do the work for you. If you had asked for help, _you would have shown what you've attempted already, and told us where you were stuck_.
Damn, you got me there. Good play.
What’s got all you guys so mad? Chill out, I was just asking jeez. Don’t you have anything better to do?
Copy/paste your attempt here, and maybe we can help you understand what you are missing.
I think it's great you take a proactive approach to your children's education. Looks like a useful tool, doesn't matter what the UI looks like! Great stuff. 
Java or JavaScript?
Thanks man 
I don't really know if a good text resource off the top of my head. The best one I can think of is freecodecamp.org. Its not going to go super in depth into every topic, but it will get you to building this in react pretty quickly. Things like design patterns you will pick up later. Trying to tackle that now if you are just learning is probably going to cause more harm then good. If you were to build a house, you would need to learn how to use the tools and about all the material first. Design patterns teach you how to build factories that make thousands of houses efficiently 
Well I just solved the second one. I was just being stupid. And I’m still stuck on third right now. It’s hand written so I can’t copy and paste. For the third one I literally have everything except for I can’t figure out a way to return -1 if there is no occurrences of 10 in the string. And honestly on the first one I don’t know where to begin because I don’t know how to edit string elements. For(int
I recently started learning intermediate CSS , I would love to create a catchy UI it would help me practically apply things to learn more and help children as bonus .If you are interested please DM or reply
Yes you are right sorry.
Definitely all DM as soon as I have some time 
Java
What's got us so mad is that lazy people like you think you can coast through without having to learn a damn thing, and then we end up having to interview crap developers who couldn't write a line of code to save their life because all they've done is copy/paste shit from reddit and stack overflow without ever understanding what the hell they're doing.
Man, my goal is to be a full-stack junior as fast as possible, but I want to focus on the back end. Is it a good idea then to leave design patterns aside? Especially since I want to make things more difficult with framework.
I don’t have aspirations to become a web developer. I’m not even in college this i a high school class. I’m just having trouble understanding how to go about these three questions. I was just looking for help. You don’t even need to tell me the answer you could just point me int he right direction.
I understand where your coming from though. I actually enjoy coding the programs that we are assigned. I’m sorry 
I would for now until your at a point where you feel like you can build something. Once you get a few small projects under your belt, go back and refactor them using design patterns. 
You could try it with CanvasKit-wasm which is the backing drawling library behind Canvas in chrome, AKA SKia. It allows you to disable anti-aliasing on paints. [https://www.npmjs.com/package/canvaskit-wasm](https://www.npmjs.com/package/canvaskit-wasm)
Then you should have asked for guidance, rather than asking for answers.
[https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript) \- plenty of language options. 
I don't know how it was before the fast typing part, but by the screenshot, it still kept incredibly accurate (56% by the end). Thanks for sharing!
The survey is meant to find what type of code suggestions and transformations developers find useful. We'll share the results in about a month. We are a small startup funded the National Science Foundation to explore ways to improve program transformation. We're not selling anything and the survey does not contain a link to us, so hopefully it's not too self-promotish :-)
I'm not sure, but I guess Kumon is a global franchise (if not, it's some kind of math school). I used to study there when I was a kid and the basic problems were exactly like your software - which concludes to: Great work! I also hope you had a good time developing it :)
Oh, I forgot to ask, what was your criteria for difficulty?
Yes I did I love coding {}
Hi /u/marcosr00t, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Squillioom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm pretty random lol 46% $1020 by iteration 130 but I stopped being random and it got the last 10 correct... I'll take my payment in cash, thanks. ･｡ﾟ[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]｡ﾟ.*
Hi /u/arshamash, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Squillioom, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
My first try: R R R R R R L R R R R L L R R Correct guesses: 0 On longer runs it catches up to about 53% for me which is a bit better than just random guesses, I guess :D 
Opposite experience for me, button mashing made me more random
Well, check this job offer https://www.42jobs.io/react/jobs/1185-frontend-developer
Hi /u/Yachtman24, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Doesn't work on my phone? Can't scroll the demo page :/
Reminds me of a fencing exercise where one person would attack either left or right (parry 4 or 6) and the other would have to guess and block in that direction. There's a surprising amount of skill in it. Plenty of people fall into certain patterns (alternating too often for instance) and plenty of defenders try to "catch" themselves by switching at the last second (which is worse than just guessing wrong).
Thanks for the heads up! will send over tomorrow morning - sorry for messing that up. I even read the rules and then was just an idiot
My "high-score" was 1027.35 on guess 110... pretty cool and interesting!
but I wanted it for the web...
&gt; they told me the expected behavior of a linked list is to do the insertion at the end of the list Yeh, This might be true in imperative languages. Most of the linked lists I've dealt with are immutable/persistent data structures (e.g. Haskell, Lisp). In that case prepending (`cons`ing) is much more common. &gt; They also said that if I ever get to make a linked list in an interview to ask for clarification on "what they mean by insertion". Good advice - without context I would have assumed insertion at an arbitrary point. Neither prepend or append that we've been discussing.
This works in the web, that's the beauty of WASM. Many commercial tools already use it, like 2Dimensions.
[https://www.reddit.com/r/PublicFreakout/comments/ajrafl/when\_people\_tell\_me\_im\_posting\_in\_the\_wrong/](https://www.reddit.com/r/PublicFreakout/comments/ajrafl/when_people_tell_me_im_posting_in_the_wrong/) But really - you are right :)
I don't get it… Why start a new project rather than build on the existing one, especially since Microsoft now own Atom? One of the main issues with open source is that too many people insist on pushing their own vision and in the end none of the solutions are optimal. I'm also getting fed up with these Electron applications due to their size. This thing is 200 MB, Atom is 500 MB… I'm don't have much experience with it so if you do, is it really necessary? What takes so much space?
VSC and Atom - two editors with the biggest community and features set today. Another are died or stagnated. Don't like Electron? Go use slow and shitty russian products built on Java. 
Looks like maximum possible digit
using a WASM implementation of Canvas2D to reach a simple feature not supported by the standard... I just stick with WebGL for rendering 3D, but thanks for the link
&gt; VSC and Atom - two editors with the biggest community and features set today. Another are died or stagnated. Many people still use Sublime Text (which is actually capable of handling big files without crashing) and various other IDEs but my whole point is why build this thing when Atom is based on the same philosophy and was the first? They could have just joined the development of Atom rather than release essentially a competing product and split the former Atom camp into two. &gt; Don't like Electron? Go use slow and shitty russian products built on Java. How about doing it the old way and use C++ or Objective-C? Or perhaps Go for modern multi-platform support. Tinkering web developers wouldn't be able to write bloated buggy extensions but oh well…
Try to spread out the questions more. Make it fit on an 8.5x11 sheet of paper, and scale the problems depending on the number of questions so that the writing space/bottom padding is still the same size but the problems are smaller. Try to add a logo, url or short url, and problem description (Addition: Highest number 5, 1 digit top, 1 digit bottom).
I think I know what happens. When the 5-gram buffer is initialized, it contains 01010 or 101010 — sorry, I'm too lazy to look it up :) So when you press you first key, the stats for one of these patterns is updated in the database. The same thing happens for the next 4 keys you enter. So the model becomes trained on this "bad" data, and depending on the inputs, it can end up with 0 guesses as a result. It takes a bunch of keystrokes to drown the "bad" data and make the model more accurate. I did most of my testing with about 200 inputs. 
Interesting. I wonder if there are certain factors that affect how "random" a person can be. For example, would a musician be more inclined to produce predictable patterns?
How many warning did I get for this to be my last warning?
I am very sorry about that. Would you mind telling which phone you have? I've tested this script on an iphone, and it worked ok. I suspect a couple of possible issues: - the plotly.js library didn't load and messed up everything - I have a bunch of `.preventDefault();` under various events to prevent double-tap zoom when touching the buttons. Maybe this also messes up scrolling.
Are you even aware of the timeslines of the two products and the acquisition of GitHub by Microsoft? If not I suggest you do so and re-read your comments, see if they make sense.
&gt; My guesses are correct 47% of the time (overall) Memorizing a hundred digits of pi has paid off!
Thanks all take into consideration your advice 
I know about it. Atom still alive and probably will 'cause has much better Github integrations and some unique addons. 
( Math.Random() * difficulty ) I know the name doesn’t really explain it I just couldn’t think of a better name bout what it does is it allows higher numbers to show for example if you set it up to 3 only number from (0 to 3 ) will be used hints the difficulty I’m bad at explaining thing to people so hopefully this will answer your questions.
Or maybe shows society is not made of tightly dependent source files... In distributed systems, like Google search, Amazon, Netflix, you can easily lose half the servers and keep the service running. 
Suggestion. Put an animated gif of it on action in the readme. I found doing this with my projects helped increase usage.
&gt; Many people still use Sublime Text Many people still use PHP/emacs/vim, it doesn't make the difference. &gt; why build this thing when Atom is based on the same philosophy and was the first? 'Cause Atom was slow as shit (now is faster a little) and written in JS, they want to promote TS. And competition is great by nature. &gt; How about doing it the old way and use C++ or Objective-C? Good luck to compete with VSC, which has 500-700 commits per week in general, with C++/Objective-C project. I'd like to see any real VSC rival, but nobody cares.
Yes, I am quite aware. Atom: Initial release 26 February 2014; 5 years ago. Available from the start if I'm not mistaken, left beta on 25 June 2015. VS Code: Initial release 29 April 2015; 3 years ago. Available to the public since 14 April 2016. GitHub acquisition: October 2018. I asked why not just start contributing to Atom back in 2015 rather than start direct competition from scratch and make it look and feel almost identical. The design philosophy is virtually the same, as is the product (a ‘hackable’ Electron-based text editor with many community-maintained extensions). It's the iPod v. Zune again, except now Zune isn't total crap as usually when Microsoft does things without a monopoly and major subsidies. Now you try to re-read your comment and see if it makes sense. If you're confident it does, please try to explain why you think I'm wrong rather than being a smartarse.
Nice cherry-picking there, mate!
Hi /u/AkumaMaster191, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You really shouldn't need _any_ warnings, since it's stated both in our [guidelines](http://www.reddit.com/r/javascript/wiki/index) (which you are responsible for being knowledgable of before posting), and in the pre-submission text that appears when you make a post (which you're also expected to read before posting, but which you've ignored twice now).
TypeScript is basically syntactic sugar without any consequences. So yeah, I agree with your colleague, use the "real" language for the tests. On another note, there are actually languages that compile to JS which actually do type checking during compile time, but TypeScript doesn't.
Top of the line iPhone 5c :D
Well i'm sorry, but that rule wasn't clear enough. All it said was uninteresting help request, try learn js instead. No clear statement that no help posts were allowed.
Loosely put: - The built-in React "test renderer" is kind of low-level. It works, but it may not be easy to work with - Enzyme wraps the React test renderer, and adds a lot of APIs on top of that for interacting with the component tree - React Testing Library, on the other hand, actually renders your components to an in-memory DOM node, and wants you to make assertions about the _rendered output_, not specific bits about the components. Enzyme is more popular, but the React team is [loosely recommending folks might want to try RTL](https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks) going forward: &gt; To reduce the boilerplate, we recommend using react-testing-library which is designed to encourage writing tests that use your components as the end users do. 
+1 for the interesting response. I like to think of them as simple values, as opposed to objects which also have methods and all these special, often hidden properties. We are naturally inclined to think otherwise if we are used to the autoboxing behavior, and don’t program much in lower level languages, but JS simply isn’t pure objects all the way down. I think JS would be more like Smalltalk if not for the fact that having this ugly primitive value/object distinction gives us a huge performance advantage. There is a reason Java did the same thing, even though it was the premier object-oriented language of its time.
I like these kinds of exercises that try to deconstruct normally complex tasks
Why contribute to atom when they clearly made a superior product on their own?
&gt;Developing a calculator isn’t easy, but I make this super simple by using the **eval() function**. Urgh. &amp;#x200B; Try this tutorial instead, it's more up-to-date and is far more descriptive: [https://freshman.tech/calculator/](https://freshman.tech/calculator/) &amp;#x200B; For `.contains(...)` replace with `.includes(...)` &amp;#x200B;
I also can't scroll. Galaxy S7, Firefox 65.0.1
I alredy submitted that code, that being being the main reason i asked here for help instead of altering de code. But I'll watch it anyways maybe it will help. Thanks. 
It's not very practical but just for a fun research project. There are a lot of really neat things you can do with CanvasKit that you can't do with a regular 2dCanvas. 
It's polyfills all the way down.
If you work together on that, you could take advantage of the `@media print` selector to automatically format when printing. e.g., hide headers and footers, increase font size, add a special watermark/note at the bottom
You clearly have reading comprehension issues.
Lol maybe I do. Can you let this slip away because i'm considered disabled? :D
It’s definitely cheating lmao
No worries, no action has been taken right now, just please don't post any more help questions :)
The opinions on which editor is superior differ and are mostly a matter of preference. VSC isn't _that_ much faster compared to Atom and clearly inferior to Sublime Text. All of them have their strengths and shortcomings. Nevertheless, the reason is that they could have made it even better because although the relationship between the amount of effort and quality of software isn't linear, developing two virtually identical products side-by-side is a waste of resources and leads to compatibility issues. Competition in open source may be desirable, but it should be internal and partial rather than two companies working on their own solutions to the same problem based on the same philosophy and using virtually the same tools.
Hi /u/AkumaMaster191, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rt_phondents, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GrohsFabian, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
 Hi all, I received a feature request for another of my projects to add a phone/country input field. I then investigated a bit and did not find one that convinced me. Therefore i thought this can't be so difficult and made my own implementation with around 300 lines of code. Feel free to clone, fork, use, star, etc.. Happy hacking :)
I won't, thanks for informing me. Sorry, i did not mean to argue, just got a bit confused.
I started at 42% and ended at 56%. Pretty interesting.
Society is definitely made of lots of tightly coupled and highly interdependent “modules.”
What spoke against the input type tel? And you should replace the globe.png with an svg. Apart from that looks good. How does it handle validation of mobile phone numbers and numbers in different numbering plans?
Yes.
yah, if stremio wants me to write stuff for them, or come up with ideas, they can just pay by the hour. thanks.
That's a good point, I'll have to try giving triggers another a go in the future, thanks :) It does sound like a very straightforward solution tbh
hahaha, that is amazing. kudos for you pal! I won in a short run so that's another lesson for you kids: quit while you are ahead.
spam
You did just fine, thank you for your time, patience and effort.
That's an excellent idea, thank you! Would you recommend any particular utility for recording a gif? I can capture stuff with quicktime and convert, but the quality suffers a bit. I wonder if there are better options out there.
Very cool, reminds of the similar thing from Khan academy.
If you know rust or go we can think of something.
Are you interested?
Thanks, actually it is of type tel, on mobile phones the Dropdown-Menü switches to a select and since it is of type tel it shows you the number keyboard. Regarding the png, I first tried with an svg but rollup gave me some trouble, therefore I changed to png
That is not a bad idea I really don’t have lots of experience with @media print selectors I’m going to have to study up on that 
What about the validation? I couldn't find anything about that in your code. Without it, it just relies on type tel, which would remove the purpose of actually using a different language.
No, why spam, that's true. We have started developing Stremio in 2013 and decided to with node.js. Not many project used it back then. It was funny because the same people who told us we're crazy came for a piece of advice afterwords :) We feel like we took the right path. You should check our node.js SDK [https://github.com/Stremio/stremio-addon-sdk](https://github.com/Stremio/stremio-addon-sdk)
I see. I tested it on an iphone 6 (ios 12) before, but I just fired up my old iphone 5 (ios 10), and yeah, no scrolling on this page... I'll try to fix it. Thanks for pointing out the bug! PS Confirmed `document.ontouchmove = function(event){ event.preventDefault(); }` is the issue. I need to replace with something else to prevent double-tap zooming and general bouncing without disabling scrolling.
So most people still end up around 50%. Wouldn't you get similar results of you just coded it to pick at random?
Good point. In my case I _want_ to convert them to their ASCII counterparts and then apply regular digit regex to them so it works out nicely!
The phone number gets validated and formatted by libphonenumber.js.
&gt; Why start a new project rather than build on the existing one You're about 4 years later with this complaint... It's not a new project anymore...
Ah ok. Will it highlight the input if it is invalid?
I very obviously meant the time when the development of VSC was started and Atom was already a year older and released to the public…
Until recently Atom was very slow. I don't think it was architected for speed in the beginning (originally it didn't even use windowing for large files - it just rendered everything and let the webview deal with it.) It was originally written in Coffeescript. Extensions could do pretty much anything. Given Microsoft's approach to VSCode (Typescript, optimized for speed from the start, restricted sandboxes for extensions) I can see why they wouldn't want to use Atom as a base.
No, but it is build so that if a more detailed validation is needed any one can implement their own. Using yup would be one way 
Ok, I would highly recommend to add the validation to the input. It would really enhance the component.
Maybe but then again countries may change theirs number format and then adjusting validations may result painful, also like it is it makes it quite easy to implement it with other libraries like Formik, and with Formik you use yup validation Schemas 
Unfortunately, it's a static website, and I don't have any server where I could save the data to collect user statistics, but I did seek feedback from a few friends, and their averages were between 55 and 60%. If the program was guessing randomly, it's success would follow a binomial distribution. For n=200, p=0.5 the probability of getting more than 55% right is about 7%. So it's not impossible to get this kind of result by guessing randomly, but it's pretty unlikely. If I were to guess at least half the testers get over 55% on average with 200 inputs, so there is definitely some degree of non-randomness involved.
I assume you're not on Linux but for anyone else who sees this, I think [peek](https://github.com/phw/peek) is pretty good!
Finally some legitimate arguments, thank you. I'm wondering if there was any communication between them and the Atom core team. Speed optimisation has been one of the priorities for Atom and rather than building upon Atom, they could have joined forces and rework the project from the ground up.
I'll give it a try, thanks!
What do you mean "technically data isn't 3-dimensional"? Of course data can be 3 dimensions. For instance - `class Point() { float x; floay y; float z; } ` Want 4 dimensions? Just add another variable. 5? Same thing. In fact, I'd wager that all, not just some, "complex 3-D game engines", model their data in this fashion. Ultimately at some point the data makes the conversion from 3-D to 2-D in order to be displayed properly as pixels. But that doesn't make the data any less 3-D. Sorry if I've misunderstood the point you were trying to make. 
Well in a sense they did collaborate. Electron was originally developed for Atom. Microsoft used Electron for VSCode and contributes quite a bit back to the Electron codebase if I'm not mistaken.
Tiny suggestion for mobile... Use touchstart to speed up the interface. (onclick forces 300ms delay for event on mobile). Fun tool. Any theories on why the Aaronson Oracle had better predictive abilities...they claimed 70 to 80% as avg.
Open console. pickfn = function (){if ((Math.floor((Math.random() * 10)) % 2) === 0) { $('#left').click() } else { $('#right').click()}; setTimeout(pickfn, 100);} pickfn() Profit!
Live fiddle: https://output.jsbin.com/licugik/1 Source: https://jsbin.com/licugik/2/edit?html,css,output HTML: ``` &lt;div&gt;Header for both print and screen&lt;/div&gt; &lt;div class="print-only"&gt;Header for print only&lt;/div&gt; &lt;div class="screen-only"&gt;Header for screen only&lt;/div&gt; &lt;div&gt;Content for both print and screen&lt;/div&gt; &lt;div class="print-only"&gt;Content for print only&lt;/div&gt; &lt;div class="screen-only"&gt;Content for screen only&lt;/div&gt; &lt;div&gt;Footer for both print and screen&lt;/div&gt; &lt;div class="print-only"&gt;Footer for print only&lt;/div&gt; &lt;div class="screen-only"&gt;Footer for screen only&lt;/div&gt; ``` CSS: ``` .print-only, .screen-only { display: none; } @media print { .print-only { display: unset; } } @media screen { .screen-only { display: unset; } } ``` 
This is blatent miss-information. The entire point of TypeScript is to preform type checking during compile time to catch potential errors. It's certainly a lot more than "syntactical sugar". 
Oh fuck, just noticed my mistake. Yes compile time, I meant runtime. I will correct myself.
`function iWin() {` `let left = document.getElementById('left');` `let right = document.getElementById('right');` `let evt = new MouseEvent('click', {bubbles: true, cancelable: true, view: window});` `for ( let i = 0; i &lt; 10000; i++ ) {` `let rand = Math.floor(Math.random() * Math.floor(100));` `if ( rand%2 === 0 ) {` [`left.click`](https://left.click)`(evt);` `}` `else {` [`right.click`](https://right.click)`(evt);` `}` `}` `};`
Amazing work btw. I agree, that vanilla is capable of maintainable and reasonable code. All frameworks are written in vanilla JS anyway. It’s a problem when you have to build fast and extendable code base. That’s when you end up reinventing the wheel. At some point you start appreciating decisions made by frameworks for what they are and see thru the hype. A challenge in your project would be trying to decouple Todos with each other. E.g: your todos should have deadlines. You should be able to move one todo to a future todo list. What about communication btn different todo lists?
Musician here, I'll try it now
!! This is an awesome project. I'm a big fan of technology + art. I tried replacing the image with another image that is arguably lower in quality. That broke all the effects. Any thoughts on why that might be? I'm thinking there is a some sort of config for the image dimensions
Eh I pressed over 100 times quick randomly and it guessed correctly 50% of the time
Tried it, pretty cool! Overall, too much effort to try and trick it. You have to constantly be changing time, and constantly changing when you change time. It was pretty easy to guess which one you'd trick it on( if you do 5 L and then 1 R, the R was an easy win), but ultimately, it would figure out the pattern too quick to get an edge on it without doing massive changes. You could try posting it to a drummers subreddit and see if any of the really talented guys could try and trick it up. 
Use reduce, and don't add the item when it exists already. 
Thanks
I just can't even right now. There nothing special about this; it literally has a 50/50 chance of guessing right. My fucking cat could do this
If the app is written in typescript, write your tests in typescript. Typescript _should_ limit your thoughts about tests. It's basically testing your code for you—you might as well focus on other forms of test and code coverage.
Did it guess 100% for you or something? Why so sour? It's something that was made for fun.
[https://imgur.com/a/lpToMcy](https://imgur.com/a/lpToMcy)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/7yULP3S.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ei1jr9g) 
That's really cool!! How experienced are you in web dev? Suggestions: 1. make it an open source project on github. 2. add a feature that allow us to get the solutions. 3. It would be cool to be able to chose the number of exercises in the page.
[https://i.imgur.com/7yULP3S.png](https://i.imgur.com/7yULP3S.png)
Great job! I did something similar when I was first learning. I used Google Apps Script with Sheets and Docs to do some things like this. My first ever project was a gradebook. I liked Apps Script because I didn't have to worry about ui/ux stuff so I could focus on getting the logic done.