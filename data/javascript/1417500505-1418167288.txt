Use a closure (preferred): var setColorFn = function (evented) { return evented ? function (event, color) { color = color; } : function (color) { color = color; }; } Or use the arguments array and get the last value: var setColor = function () { // Can be (event, color) / (color) color = arguments[arguments.length - 1]; } Really depends on how you want to handle optional arguments that precede required ones... Your answer is not wrong either.
Nice entry post. I do feel like you are little late to the game here on these tutorials :P but more power to ya with putting them out there!
Someone just posted a solution about how they handle this situation that you might be interested in...it kind of adds type checking to the params in a way. [ this is posted on the subreddit already but heres a direct link ]( http://kolodny.github.io/blog/blog/2014/12/01/handling-optional-args-in-js/ )
Uh.... no. You write highly scalable and maintainable javascript with a proper module system. Not some hack.
I don't think they would learn javascript in elementary school
Whoops, the other guy posted 12 hours ago. Must be a common issue
Site source code and developer tools built into your browser. Dedicating yourself to reverse engineering source code will ramp up your learning curve but you'll learn more, and learn deeper. 
&gt; It's not like every new feature added to a language is guaranteed to be a good idea. Sure, but in this case `let` has had a ton of design effort put into it. It's tricky retrofitting it into an existing language but from what I can tell, it's sound. &gt; Sometimes new features are just as short-sighted as the old features they were trying to fix, at the cost of making the language more complex as well. `var` was short-sighted. The ECMAScript committee definitely did their homework with `let`.
 function setColor(event, color) { color = color || event; ... } selector.event(setColor(event, color)); Also, event will be an object while it looks like you expect color to be a string, this could cause a headache later if you forget that you've done it.
why dont you go read it before telling what it covers and what it don't?
No kidding, it's amazing! I'm now learning METEOR.JS and getting really excited about the possibilities.. 
It sounds like you want this to fade in this pattern: Light-&gt;Dark-&gt;Light or more detailed: Darker Light -&gt; Dark -&gt; Lighter Light There are two CSS properties you can use to do this. Opacity &amp; Contrast. Since you said "Light to Dark", we'll start with that example. var tween = { begin: 17, end: 6, property: "opacity", start: 0, finish: 1 }; var span = tween.begin &gt; tween.end ? tween.end + 24 - tween.begin : tween.end - tween.begin; var steps = span * 60; setInterval(function() { var d = new Date(); var result = 0; var interval = (tween.finish &gt; tween.start ? tween.finish - tween.start : tween.start - tween.finish) / steps; result = interval * (d.getHours() * 60 + d.getMinutes()); var img = document.getElementById("darkImage"); img.style.opacity = result; }, 60000); If you layer the dark image on top of the light one, and start it's opacity at 0, the code above will do exactly what you describe. 
Sure you're not the first person asking for it. There you go https://docs.google.com/document/d/1dZdq2L8EkzimgvU93ypLF9GJpdzD2jjm08Zal6sfxMQ/edit?hl=en&amp;forcehl=1
I do not like you pattern because it uses more parentheses to do the same thing.
When the Dojo team named hitch they were lacking the clairvoyance needed to look into the future and see what everyone else would name their implementation. 
I'd recommend using ``` &lt;title ng-bind="title"&gt;My Website's Name&lt;/title&gt; ``` so that search engines and such will pick up "My Website's Name," but it can still be dynamically set.
I'm not sure that 20 different choices is a good thing. I was pleased that perl generally had a few good choices of library for a given task with one library that ended up being the standard choice. Python seemed to have lots of fractured half-finished libraries (this impression may be very out of date now) and JavaScript certainly has too much choice and very divided effort. I'd rather see one solid library with lots of devs on it than 20 libraries started by individuals and dropped. Still I'm interested in your opinions, do you think js is getting good collaboration? Are the libraries (apart from the big 4 or 5) getting maturity. Also are you seeing a big difference between frontend and back end?
&gt; someone figures out cool new ways to render faster without even touching the DOM and then JS ( the regular way / direct dom interaction ) suddenly drops off from being the shiny, cool thing Some one already has: http://www.zebkit.com/ JS is an okay language (it is bound to reinvent strong typing, namespaces, modules, threading, etc) The DOM is generally not okay. It is slow, and no other programming language has ever used anything like it, and it is was never designed for apps. The "2000 bindings" limit of Angular is fine for web pages, but as we move towards things like IndexedDB, Firebase, and Meteor, 2000 "things" is going to be way to limiting. DOM performance is bound by the number of "things" total, whereas traditional window managers are bound only by the number of visible things. I don't know if it will be 2 years or 10, but I'm betting on the death of the DOM.
Thanks for sharing! :) ECMAScript is a truly expressive language after everything we've seen from JavaScript and ActionScript. Atwood's Law expresses the nature of JS precisely.
Make event the second argument and use .bind in your event handler assignment. el.addEventListener('click', setColor.bind(null, 'blue'))
It takes like an hour to read. We aren't talking major time commitment here.
Javascript web apps will cause operating systems to shrink? Hmm I think you have been drinking way too much JS Koolaide. Javascript is a problem, not a solution.
Just don't do that. Write a function and call that function from the event handler.
&gt; The DOM is generally not okay. It is slow, and no other programming language has ever used anything like it That is complete nonsense. Tons of software uses things like the DOM, except that it is often called a 'scene graph' ( https://en.wikipedia.org/wiki/Scene_graph ). The DOM is the scene graph of the page inside the browser. What makes the DOM different than most other scene graphs is that it uses a fairly hairy layout algorithm which makes partial layouts and updates hard to optimise. Secondly, it also has a rule based styling engine (CSS) which can also be expensive to recompute when the rules change or when nodes are moved around in the document. If you are doing changes to the DOM and mixing in measurements of these computed properties, then the performance is terrible as the browser has to relayout and recompute the styling multiple times. Any system which has these kinds of computed properties is going to have the same challenges w.r.t. changes mixed with measurements. I strongly suspect that there is a set of features which when used give the browser the best chance of doing efficient partial layouts and scalable performance. ('float' is most likely *not* on that list of recommended features.:-) ) It would be nice if the browser makers could give us some more info about what to do and what not to do here. Regarding zebkit, it appears to combine the power and control over rendering of Flash with the web integration of Flash. Zebkit works as an isolated island on the page which poorly supports standard browser features (and things like screen readers) and doesn't integrate easily with things written the standard way using JS/HTML/CSS. It also has no choice but to reinvent a lot of functionality which is already in the browser (styling anyone?). It's a dead end. The DOM isn't going away, but it will be much better when Web Components fully arrive. That is my prediction. 
Thanks for the reply. I'll try to get my hands dirty with prototypal inheritence. I really love RequireJS (went through docs, never used) but I'll not be using it before I can understand what it does in the core. What is RequireJS's trick to load modules? In backend, we can include/import/require things, use an autoloader/dependency manager etc. Yes, most stuff will be instanced only once. They're just a basic abstraction layer, which gives a bit more sense to my code. (e.g some people may not understand why we check document.domain, but they'll understand environment.isLocal easily) Also, trackers such as Google/Facebook recommends their tracker script to be put at the `&lt;head&gt;`. Do you move those tracker scripts to footer as well?
&gt; Some of Crockford's stylistic preferences are, well, debatable. But, but, *dog balls*!
Look at John Resigs books.
Not for everyone, but you can DIY with libphonenumber https://code.google.com/p/libphonenumber/
good point! thanks for sharing.
The Other category was about 25% for this. That is a big blind spot. 
I am _hugely_ enjoying the JavaScript community right now, as someone with a background in many languages. I see some innovation, but it is not clear how much. What _is_ clear is that there is: * a huge interest in JavaScript * an incredible amount of activity * some very interesting pioneering (like Meteor) I do not love the language but I am enjoying developing in it a lot right now! I think this is thanks to the community and the ecosystem.
I'm personally a fan of [Dexie](http://www.dexie.org).
thanks for correcting me! have updated the post.
do you have an element with the id myDiv somewhere? (&lt;div id="myDiv"&gt;&lt;/div&gt;) The rest looks fine from the first view
I read it last year after christmas as it was a gift. It was pretty informative. A lot of stuff I knew, but somethings I did not.
Check the order of the arguments. They look reversed to me. By the way, since javascript doesn't provide any overloading facility, polymorphic functions are quite bad (they are complex and cannot be optimized).
Oh man, thanks so much for that. Please forgive my ignorance, but I'm pasting the script into the scratchpad in Firefox at the [website](http://www.statcan.gc.ca/eng/sc/video/cpi) and when I click "display" and I get "undefined". What am I missing? Thanks again for your help.
This. Also you're using 'getElementByName' and there's no such thing. You can use getElementsByName (plural) which will return an array that you'll have to get the appropriate index of your I frame to operate on, or give the iframe an ID and use getElementById (https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById) to find your element. All that said -- why would anyone want to use javascript to do this instead of just the target attribute? If this is for a class then it feels like bad exercise. We shouldn't be teaching people to reinvent wheels with javascript -- that's how stupid shit gets made. If I received this assignment in a JS class I'd be inclined to turn in a link with a target attr and no JS. Of course I'd probably get an F for doing so ;)
This always separate events from lower level logic.
You're right about the order of arguments, I've fixed the code to now use splice instead of unshift
And is it a bad thing?
I don't. Should I put in in the p tag? Then this is where the moreinfo node from the json file will go when the button is pressed? 
&gt; Zebra development is much closer to software engineering where you write well structured, supportable, extendable code Incompetent programmers, my most hated frustration in this field. The Zebra project is saying that DOM is bad because its not OOP at its core. A common delusion supplied from CS education is that the proper way to program is OOP, so therefore proper programming === OOP. **epic fail** Web technologies are largely based upon lexical scope and functional programming concepts. This includes XML/HTML and thus DOM as well as JavaScript. If you are unwilling to accept this you will be a shitty web developer. I commonly see this from properly educated Java developers who are forced into client-side development and they fail at it so badly. Small children can get this stuff right and very quickly while so many educated adults fail to learn this stuff and so badly.
Yeah, clearly missing some given the number of other responses to that one. I would expect Atom especially to be more common than many of the options they provided like jEdit. (They probably meant for Webstorm to fall under IntelliJ though, since its a focused subset of that IDE)
Some are debatable, for sure, but stuff like "Egyptian brackets", and putting the var at the top of the function do help you avoid bugs. 
When this comes out of beta, it is going to be an awesome tool. Hard to say about the usefulness without trying in practise, but in theory, this is a tool you cannot live without.
Thanks for the link. I'm siding with the DOM not going away within 20 yrs :P ( random arb. number the point being not any time soon and I'm not smart/informed enough to know what could replace it ). I will say that there are definitely improvements being made to the DOM even now. Famo.us is doing interesting things with a different type of engine for more performant animations as an example. I'd like to point out that I'm not anti-DOM hah I really have no issues with it. I use the api professionally everyday. I can see in SOME ( non-majority ) apps where DOM performance could cause an impact ex. hybrid mobile apps but I think thats why the likes of famo.us have come about :)
Yeah I tried that suggestion and this is what I ended. I got to the point where the button can't be clicked unless you check the box, but then when you do check the box and press register, it loads but goes no where. Before it went to the account page. [Screenshot](http://i.imgur.com/BwjgLOB.png)
Thank you very much for reading and replying. Thank you for responding. Sorry, I should have been more clear and not assumed. Here is what the Freebase API's JSON I'm getting stored in the facts parameter looks like: * One topic with a /common/topic/description key: http://i.imgur.com/sEzrs87.png * The second of the three topics without a /common/topic/description key: http://i.imgur.com/kGPzH6U.png I hope you can help me? Why would I use an external templating system if I can do the same without one?
hah Speaking as a formerly educated Java developer I guess I can see what you are saying. Though incomponent programmers !== the people who have opinions about something and create something. Those are generally the innovators or the better programmers. Also who are you quoting?
Great article. I vastly prefer Backbone + Marionette to Angular, writing it just feels more natural in JS.
 var cardsHTML=''; for(var c = 0; c&lt;topics['candidate'].length; c++){ cardsHTML+='&lt;div class="dataCard" data-cardNumber="'+c+'" style="-moz-animation-delay:'+0.2*c+'s; -o-animation-delay:'+0.2*c+'s; -webkit-animation-delay:'+0.2*c+'s; animation-delay:'+0.2*c+'s;"&gt;&lt;img src="https://usercontent.googleapis.com/freebase/v1/image'+topics['candidate'][c]['mid']+'" /&gt;&lt;h1 class="abTitle"&gt;'+topics['candidate'][c]['name']+'&lt;/h1&gt;'; if(topics['candidate'][c]['notable']!==undefined) cardsHTML+='&lt;h2&gt;'+topics['candidate'][c]['notable']['name']+'&lt;/h2&gt;'; $.getJSON('https://www.googleapis.com/freebase/v1/topic'+topics['candidate'][c]['mid']+'?callback=?', {}, function(facts){ console.log(facts); /* // string concatenates here. Just isn't stored in variable cardsHTML console.log('&lt;p&gt;'+facts['property']['/common/topic/description']['values'][0]['value'].split('.')[0]+'&lt;/p&gt;&lt;p&gt;&lt;span style="display:none;"&gt;'+facts['property']['/common/topic/description']['values'][0]['value'].split('.').slice(1, facts['property']['/common/topic/description']['values'][0]['value'].split('.').length)+'&lt;/span&gt;&lt;/p&gt;');*/ try{ cardsHTML+='&lt;p&gt;'+facts['property']['/common/topic/description']['values'][0]['value'].split('.')[0]+'&lt;/p&gt;&lt;p&gt;&lt;span style="display:none;"&gt;'+facts['property']['/common/topic/description']['values'][0]['value'].split('.').slice(1, facts['property']['/common/topic/description']['values'][0]['value'].split('.').length)+'&lt;/span&gt;&lt;/p&gt;'; } catch(e){ cardsHTML=''; } }); cardsHTML+='&lt;/div&gt;'; } //according to this console.log, everything is being added to cardsHTML except what is in the try. console.log(cardsHTML); document.getElementById('main').innerHTML = document.getElementById('main').innerHTML+cardsHTML+'&lt;div id="left" class="column"&gt;&lt;/div&gt;&lt;div id="right" class="column"&gt;&lt;/div&gt;';
Okay, fair point. Scene graphs may be an existing concept in things like games, but all of the UI toolkits I can think of (WinForms, WPF, Swing, Flex) work differently... they have some form "descriptor" (in Java TreeModel, GridModel, etc). Regions of the window are invalidated, when the next vsync hits the window manager interrogates the model and draws only what it needs. This has 3 advantages: 1. It is fast 2. Its time complexity is bound only by what is visible 3. It is almost infinitely extensible To my knowledge every window manger since Xerox Parc has worked this way. To illustrate where things break down, say you were asked to write Excel in a web browser using the DOM. Perhaps users are interacting with it in real time over websockets. If it has even 1000x1000 rows, it will cause browsers to choke. You can work around this issue by hiding offscreen elements from the DOM (like google docs does), but then I would argue you aren't really using the DOM anyway, or at least not how it is intended or searchable. The DOM also necessitates two models being stored in memory: your actual object model, as well as the DOM itself. This is the cause of all the modern databinding headaches, from Angular to Knockout to React. This is a classic list synchronization problem: if you have two copies of the data, keeping them in sync is a problem. Finally, even games don't track everything in the scene. They have spatial indexing to ignore parts of the map that aren't currently visible. The bottom line is that having everything in memory doesn't scale. Sooner or later things break down, and you have to be able to query indexes to achieve better-than-linear time. This is not a problem for web pages, or even most web apps, but as they come closer to implementing desktop style functionality, they will run into the same problems and (most likely) find the same answers.
Kennman, I just would like to apologize 2 times: 1) Because I didn't see your comment. I'm a very beginner with reddit... but I'm not looking for an excuse. 2) I thought that my post was of interest for devs that uses famo.us. But after reading your comment, I fully understand your statement. It's crystal clear. I should better use reddit. Anyway, thanks for your feedback. It's appreciated.
&gt;... in my 20 years have I seen this much choice around one programming language. It's one thing to have a lot of stuff. It's another thing to have quality stuff. 80% of all that is not quality stuff.
Not really, because it's more about what not to use, and that limited set of Javascript is largely the same today. 
when you have 20 solutions to the same problem, that is no longer innovation. One should not conflate NIH with innovation :/
As I suspected, there lies your problem... As you probably know an XHR call -the `$.getJSON()` call- is asynchronous. You correctly used it doing... $.getJSON(url, function(data) { // do something with data }); But that call, as I said, is asynchronous. So, your function, where you process the data, will be called when the response arrives. If you do a loop, you will make a number of asynchronous XHR calls, but when the loop ends, most (or even all) of those calls will have received no answer yet. So... for (var i=0; i&lt;n;i++) { $.getJSON(url, function(data) { // [1] }); } // [2] ...at point [2] you can be certain that not all calls will have been answered yet (in fact, probably none will). So you can't do this kind of thing in a loop and expect stuff to be available when the loop ends. You need to either wait until all calls have been answered or add each result as it arrives. The second option could be something similar to this: function insertCard(number) { return function(facts) { // add this card $('#main').append('&lt;div class="dataCard" data-cardNumber="'+number+'"&gt;' + '&lt;p&gt;'+facts['property']['/common/topic/description']['values'][0]['value'].split('.')[0]+'&lt;/p&gt;' '&lt;/div&gt;'); }; } for(var c = 0; c&lt;topics['candidate'].length; c++) { $.getJSON('someurl', {}, insertCard(c)); } } The first option would be done by using promises. With jQuery you could do something like this... // launch all requests and store the promises in an array... var requests = []; var cards = []; for(var c = 0; c&lt;topics['candidate'].length; c++) { requests.push( $.getJSON('someurl', {}, function(facts) { cards.push(facts); // we store this particular card for later }) ); } // then wait until all promises have been answered... $.when.apply($, requests).done(function() { // now all requests have been answered and the cards array should have all the cards. }).fail(function() { // some request failed, cards may have some of the answers but some others will have failed. }); 
dom objects are easy, you can use jquery syntax to view them inside of console.log like console.log($('body)). Also all dom elements that have an id attribute are attached to the window object
I think your approach is best mikro. I've handled it that way before and upon further thought, seems the cleanest. I could also have the event handler be called "colorChangeHandler" and then just call setColor within that function.
Nice article. I also really like the Backbone + Marionette combo. To me it strikes a great balance between structure and flexibility. You're free to write your JS as you like, but you also have a sort of mental blueprint for where things need to go. I also found the ["gentle introduction"](https://leanpub.com/marionette-gentle-introduction) book pretty helpful when trying to figure out how to structure an app.
It takes you an hour to read 176 pages? http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
Thank you so very much! I need to learn more about synchronous asynchronous calls, and promises. So you know any good references? Is it in MDN?
No I don't wish to replace the paragraph. This is a paragraph. Then when the button is pressed the node should be added on, for example;: This is a paragraph. On reddit. 
Exactly what I think. An event handler is a different beast, and it is a sane practice to convey their nature using a different name. They are for side effects, since they return nothing (if you don't wrap them in some kind of monad implementing a reactive/streaming interface). Functions should be as pure as possible, composable and monomorphic (ideally unary).
Create an empty paragraph with the ID myDiv on the position where you want to have your moreinfo text. Otherwise you have to change your js code
I'm by no means an expert but I've been following the learn JavaScript properly course, and I believe that it's very good.. quite intense., there's a lot to cover and its not interactive.... But always an option. 
this has mostly been the case for several years. however recently, the quality of competing solutions has increased, so there's no obvious winner in any one category. now, it seems to be about finding the solution that best fits your project and style. the problem with major frameworks, such as angular and ember, is their "stickiness" once you've chosen them. in the case of angular, where the next version is so different than the previous, developers get caught between a rock and hard place. IMO, it's best to piece together libraries to create your own framework. that way, you can swap out components when something better comes along, or if the code is abandoned.
It's easier if you just append a new p tag, but appending content into the same p is possible just a bit more work (and not very easy to maintain later). Try this http://jsbin.com/meqasacuga/5/edit And btw, you shouldn't try to put a div inside a p because p should only contain inline elements, and div is a block-level element. Technically, you are not forbidden to do it (your page will still render fine), but browsers will render the div outside of the p nonetheless.
The way you've done it was similar to how I was firstly thinking about it and it works fine. The only issue is I wish to get the nodes from a separate file, you've got the new text stored in variables, var json1 and var json2. Thank you though, this implementation works perfect. I'm just dying to find out how to get the value from a separate file as I've been trying for a few days now :). 
Thank you. One more thing: I'm trying to implement what you said the promises are successful, the json is stored in the array, but when I try to traverse the json arrays, the catch is triggered and the error it is throwing is that the /common/topic/description is undefined for all three sample topics when it is there for 2 of the sample topics. * Here is what the json for the topic with that key looks like: http://i.imgur.com/sEzrs87.png * Here is the json for the topic without that key: http://i.imgur.com/imKoj3Z.png Here is the code: var cardsHTML=''; var requests = []; var factsJSON = []; var cards = []; $('#main').append('&lt;div class="loading"&gt;&lt;/div&gt;'); for(var c = 0; c&lt;topics['candidate'].length; c++){ cardsHTML='&lt;div class="dataCard" data-cardNumber="'+c+'" style="-moz-animation-delay:'+0.2*c+'s; -o-animation-delay:'+0.2*c+'s; -webkit-animation-delay:'+0.2*c+'s; animation-delay:'+0.2*c+'s;"&gt;&lt;img src="https://usercontent.googleapis.com/freebase/v1/image'+topics['candidate'][c]['mid']+'" /&gt;&lt;h1 class="abTitle"&gt;'+topics['candidate'][c]['name']+'&lt;/h1&gt;'; if(topics['candidate'][c]['notable']!==undefined) cardsHTML+='&lt;h2&gt;'+topics['candidate'][c]['notable']['name']+'&lt;/h2&gt;'; requests.push( $.getJSON('https://www.googleapis.com/freebase/v1/topic'+topics['candidate'][c]['mid']+'?callback=?', {}, function(facts) { factsJSON.push(facts); }) ); cards.push(cardsHTML); } $.when.apply($, requests).done(function(){ $('.loading').remove(); var innerHTML=document.getElementById('main').innerHTML; for(var i = 0; i&lt;cards.length; i++){ try{ innerHTML+=cards[i]+'&lt;p&gt;'+factsJSON['property']['/common/topic/description']['values'][0]['value'].split('.')[0]+'&lt;/p&gt;&lt;p&gt;&lt;span style="display:none;"&gt;'+factsJSON['property']['/common/topic/description']['values'][0]['value'].split('.').slice(1, factsJSON['property']['/common/topic/description']['values'][0]['value'].split('.').length)+'&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;'; } catch(e){ innerHTML+='&lt;/div&gt;'; } } }).fail(function(){ throw "no one likes someone who doesn\'t keep their promises."; });
Me too, the thing I dislike about both Angular and React is they mix markup with view logic and it just feels so *dirty*. I really love the philosophy of React but JSX just looks wrong to me. 
I had someone suggest to me NodeSchool yesterday. It's decent though, kinda abstract in some places for how it runs. 
Not a bad article, but I don't feel like you answered some of the things you admitted are problems. &gt; but it doesn't have any built-in utilities for handling nested Models or Collections. And if you want to nest your Views you're completely on your own So what was the solution for this? Being naive to endpoints that do not return a perfectly flat object is a major drawback, presumably Marionette fixes this. &gt; Backbone can involve a lot of boilerplate. Taking the naive approach, you could end up writing rendering code, View management code and event management code over and over again in every View. If you try to get around that using inheritance, you can end up with brittle designs that require you to make calls down to a Views prototype when you want View specific code. And how does Marionette save me from writing a Model, a View, a Collection, and a CollectionView just to render a single select element. Additionally I think Marionette does an incredibly poor job of pointing out when there is a *Marionette* way that supersedes a *Backbone* way. * Do I use ItemView instead of Backbone views? * When do I use a LayoutView? Unfortunately I find Marionette's continuing the Backbone/Underscore philosophy of acting more like a library than a framework detrimental. If you discover a new Underscore helper method halfway through your application lifecycle, that's okay, no big deal. However if you discover a new Marionette feature halfway through development you may have structured the application in a way that leaves you unable to take advantage of the features an application framework offers - meaning you have the choice of forging ahead without those features or rewriting everything you've done. On top of that I have yet to find a place that shows off well-structured Marionette apps. The one resource I see mentioned consistently is a paid e-book. The lack of resources does not give me much faith in the community, which is an important aspect for many, many developers when choosing a technology. 
With aggressive caching and hashed and audited versions it's not too different from downloading and running a program that does crypto from a package manager or project website. When the server can't just send whichever javascript payloads it wants and users opt-in to upgrades, you get at least trust on first use. With multi-party signed audits it could be even better.
Quite the opposite. I saw him twice around a month ago and he preferred let to var.
It looks like you're missing the index of the array `factsJSON` itself: factsJSON[i]['property']['/common....
&gt; &lt;p&gt;About: &lt;xsl:apply-templates select="//review[@id='1']//information"/&gt;&lt;p id="myDiv" &lt;/p&gt;&lt;/p&gt; More like this: &lt;p&gt;About: &lt;xsl:apply-templates select="//review[@id='1']//information"/&gt;&lt;p id="myDiv"&gt; &lt;/p&gt;&lt;/p&gt;
Sorry, could you explain that a bit more? It's after confusing me. I don't know how to do what you've suggested. 
&gt;So what was the solution for [nested models]? Being naive to endpoints that do not return a perfectly flat object is a major drawback, presumably Marionette fixes this. Marionette does not solve that particular issue. Mentioned it as a common Backbone issue that's conceptually related to dealing with nested Views. Marionette is not a cure all :) There are other small libraries that provide approaches to that problem though, with Backbone-Relational being the most popular I think. &gt;And how does Marionette save me from writing a Model, a View, a Collection, and a CollectionView just to render a single select element. If you're trying to represent a collection as a select element, you're probably best off using an ItemView (they can show collections as well as models and will be made available as `items` within your template) [In the docs](http://marionettejs.com/docs/marionette.itemview.html#rendering-a-collection-in-an-itemview) &gt; Additionally I think Marionette does an incredibly poor job of pointing out when there is a Marionette way that supersedes a Backbone way. &gt; On top of that I have yet to find a place that shows off well-structured Marionette apps. The one resource I see mentioned consistently is a paid e-book. The lack of resources does not give me much faith in the community, which is an important aspect for many, many developers when choosing a technology. That's a bit harsh, but I don't completely disagree. That's part of the motivation for writing this series, to clarify what it actually looks like to use Marionette in practice. I don't necessarily have all the answers to that, so this type of discussion is awesome. But I completely agree that more examples of well structured Marionette apps are needed. 
Types are overhyped
Yeah I spotted my error shortly after posting. When I run the project with these changes, I get this in the console: Uncaught ReferenceError: getJSON is not defined
http://jsbin.com/govejavufo/2/edit Take a look at the implementation for the first paragraph specifically.
No problem. Happens to all of us :)
Okay, that's cool. So where you have: $.getJSON("http://www.filltext.com/?rows=1&amp;text={lorem|10}" Instead of the URL, I'd have my json_info.json? Then, instead of : data[0].text I'd have: data.reviews[0].about.moreinfo ? Finally, one more issue. If I've multiple buttons, when I hit the button on one, the text will change on the rest, what if I want different text for each button? Would that just be a matter of changing class names? 
It's my experience that people who find it 'dirty' is because at one point in their career somebody very firmly told them you should never put Javascript in your markup because it is/was such a maintenance nightmare. Few years later people left out the maintenance part and now everything that looks remotely like mixing Javascript with angle brackets is still evil without any nuance. 
The bad programmers are those who propose helpful tools that are completely not helpful (probably harmful). This is bad because it does not harm the poor foolish programmer who doesn't know any better, but instead harms their users. In this case a team is proposing to inject rendered goodness into an HTML canvas because writing OOP for the DOM is hard when OOP may not be the ideal way to go in the first place. The quote came from that tool's homepage. 
I thought the exact same thing when I first saw JSX. Honestly though, it's really cool once you work with it a bit. Don't let it stop from diving in a bit more.
If you absolutely cannot achieve inheritance in JavaScript without *this* then you probably do not understand the language as well as you think you do. Typically, or at least in my experience in this language, people try to write OOP because they were educated in school that programming means OOP. OOP is an old idea that is trending out in language design, because there is too much convention and ceremony involved. Take the shackles off. When you do programming becomes more fun expressive, and a hell of a lot faster to write.
Then you first need to make sure the file is even accessible by visiting that URL directly from your browser.
Backbone relational and backbone associations are similar projects that try to solve the nested model problem, but they suck for anything resuable. If you have a pre-made model and want to add an additional relationship that the person who wrote that model didn't include then there is no good way to extend the relationships.
I toyed with RequireJS only a short time. Browserify is the major competitor. I can only tell you what I remember about RequireJS off the top of my head, which may or may not be inaccurate: RequireJS has an autoloading situation, where it can fetch modules on-the-fly. This isn't ideal, because you don't want to have to launch many HTTP requests for all your module dependencies. In addition to autoloading at runtime, RequireJS has a bundling technique, which basically concatenates all of your modules together into one minified file. I see RequireJS being rather inflexible in this regard. If you want a different page to have slightly different assets, RequireJS will either have to hotload them, or you'll have to start managing multiple bundles.. I built myself a simple PHP-based solution which looks for dependencies at runtime and idempotently (only once) prepends them for each load operation. So, in a sense, I have my own DIY javascript module loader. I'd probably suggest to you to go with Browserify for future endeavors, though it doesn't autoload (which is something to avoid anyways), and it suffers of the same bundling inflexibility as Require. As far as your trackers for Google and Facebook, just do whatever they ask you to do. They're totally separate from *your* code, so keep it that way. If they don't want to do the right thing, at least *you* can.
Thanks for the debugging tip. I went to: file:///C:/Users/Adam/Documents/NetBeansProjects/MyProject/web/WEB-INF/json_info.json And the file opened fine, in browser. 
I found that a very interesting talk, specially about the possibility of getting rid of the 'this' keyword. But would it be performant to create objects that way rather than using conventional prototypical inheritance?
A couple more links. These are about promises. This one looks ok: http://www.html5rocks.com/en/tutorials/es6/promises/ This one on MDN is a reference on the Promise object, so it may be a bit harder, but it's interesting to have a look at it: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise This one on David Walsh's blog is quite nicely explained and goes straight to the point. It uses jQuery and shows something close to what you were doing so you may find it interesting: http://davidwalsh.name/write-javascript-promises
The DOM doesn't need to be fast. *It needs to be robust.* And it is. You are correct, in that eventually, the day will come where developers will need a faster more optimal (and less robust) alternative to the DOM. Maybe it will be something like Canvas or WebGL -- maybe we already have it, we just need to start to leverage it for our super-fast mega-bloated applications. Maybe people already are recognizing this, and are already building beautiful games and applications in WebGL. As far as searchability, screen reader support, stylesheet support, table layout algorithms, forms, and ten million other features that the web as a whole relies on -- you have to go to the DOM. Yes, it's slow. It's also the most robust piece of technology out there. Do you want something fast, or do you want something capable of *everything*?
I suspect, that if we could visit the future 500 years from today, we'd be surprised about how much of the web -- the DOM, JavaScript, etc, remains in use and familiar to us. I think the people of 2514 will still be putting `&lt;a&gt;`'s in their `&lt;nav&gt;`'s.
Why not? There's a really good argument out there for teaching kids basic programming skills before teaching them mathematics. Learning logic and procedure is a better first step than raw numerical calculation. Math teaches you how to calculate. Programming teaches you how to solve problems. Learning the two together makes a lot of sense :)
Right - in the past, I used to make single functions callable in x different ways and it always became a nightmare to make changes. This is a simple case, but the single responsibility principle still applies.
&gt; *Javascript is a problem, not a solution.* Ooph, you chose the wrong board to hate on JavaScript ;) &gt; *Hmm I think you have been drinking way too much JS Koolaide.* My friend, I just found out that I can: - Easily support gamepads like Xbox controllers directly via JavaScript - Use RTCDataChannel to create an online action multiplayer game engine - WebGL can render on a similar level of graphical quality as Call of Duty 4 - Accelerometer and touch support for phones and tablets - Pointer-lock API for gaining raw mouse input (first person yes please) Suddenly, online multiplayer action FPS that is available on ALL platforms. Dude, fuck yeah, *I'm high as giraffe pussy* on this JS Koolaide!
arent there a half dozen or so libraries that do this already... :(
OK, you can of course access the file directly from the file system like that (file:///), but check your error message again: it says &gt; GET http://localhost:8080/MyProject/json_info.json 404 (Not Found) Notice the protocol (and the hostname) of the URL? It's "http". When you are accessing the file directly from the file system, notice the protocol for that is "file". Now check the documentation for [jQuery.getJSON()](http://api.jquery.com/jquery.getjson/), the method is used to &gt; Load JSON-encoded data from the server using a GET HTTP request. So what you need to do now is to make sure the file is accessible through your **server** via **HTTP** request. I don't do Java, and I have no idea how your server is set up, so I can't help you there. What you need to make sure is visiting this URL &gt; http://localhost:8080/MyProject/json_info.json should give you the content of the JSON file.
Although I think it's worth pointing out that Backbone/Marionette still couple their events to markup, it's just not mixed in the same file. While this sounds like a solution without drawbacks at first mention, the reality is a designer or even another developer could come in and change the class of an element for valid reasons and unwittingly break the application's functionality because it no longer targets the correct element. In the frameworks that "mix" it is obvious to anyone manipulating the markup that a piece of application functionality is bound to that element, preventing accidental disconnects. Pros and cons both ways.
This is great information, that I didn't know prior. The project is running of Glassfish server. I get a 404 when I go to that URL. Do you know what could cause this, seeing as the files are in the exact same directory? 
This is an excellent point, but in our team we solve it by binding to ids prefixed with js, for example #js-open-modal or #js-submit-form. Not foolproof as the library does not force one to use this method, but works fairly well. 
&gt; Suddenly, online multiplayer action FPS that is available on ALL platforms. Yeah, totally nice. And then the company decides that this multipalyer game is too expensive and will just shut it down and you can not play it anymore. Back in the days of quake and CS you really owned the game itself and you were also able to host the server own you own to make you totally independent of the company. The more we switch to webapp, the less we own the software and become more and more dependent on the goodwill of some random company. The best example is when Google shut down Google Reader. If it would have been an offline program (or provided in a way that you can host it on your own) then you could have used it even after shutdown. But since it was hosted by Google there was nothing you could do about it.
&gt; we solve it by binding to ids prefixed with js I like that solution, will have to keep it in mind the next time I'm working with others on a Marionette app.
I'd recommend reading that article: https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3
you dont get the fraud/bad number validation with that, last I used it it doesnt normailize to numbers you can call either (i.e mexican mobiles needs a 1 inserted after country code etc. 
Maybe. I suspect that a lot of our "innovation" is just slinging the same shit into a slightly different-looking sack.
Hah, cool. I'm currently working on a multiplayer version of breakout, using smartphone gyro / accellerometer input with my creation - the Sway Interactivity Platform (https://github.com/JimAnkrom/sway). We get past the major latency concerns by having all users connect to the same wifi; no apps required either - accommplished by sending people to a specific web page. This is going to be a public art installation called "Bleepout", shown at First Night (NYE) in Boston, as a project through the collaborative video art crew Video Bleep (www.videobleep.tv). We will be playing Bleepout in our immersive video dome with anywhere from 10-35 simultaneous players. Maybe when that's done I'll revisit this thread and we can talk about impromptu multiplayer pong on smartphones against strangers. :)
Google GO is really getting a push in recent months, and personally I think node.js is an amazing runtime. With the node-go-require project, you can now use google go code in node.js Who knows, maybe in the future node.js will host many different languages (today already coffeescript, typescript and others), all running with the v8 engine, just like the java jvm runs many different languages (jython, jruby, ....)
Even if an application is an HTML page, that doesn't mean it has to be hosted on the cloud. I dream of applications being HTML pages which you can optionally browse to on the cloud, or install locally for offline usage.
Just remember that instead of doing this like in [that example](http://www.html5canvastutorials.com/three/html5-canvas-three-js-wireframe-material/): // request new frame requestAnimationFrame(function(){ animate(); }); Do this instead: requestAnimationFrame(animate);
I too have been looking for a good CoffeeScript book ***with which to burn.*** Run from your new employer. *RUN!* *Edit:* Yes, I do realize that this was exactly the kind of comment you were attempting to avoid.. which is why I felt the need *to embolden it.*
No convenient bookmarklet for me to easily use? This conversation can serve no purpose anymore. *Goodbye.*
I'd recommend asking /r/CoffeeScript for obvious reasons, though you might take a look at [CoffeeScript Ristretto](https://leanpub.com/coffeescript-ristretto) by /u/homoiconic. edit: here's a few more [that have been posted](http://www.reddit.com/r/javascript/search?q=coffeescript+book&amp;restrict_sr=on&amp;sort=relevance&amp;t=all)
Granted I don't use coffeescript but The Little Book on CoffeeScript seems pretty popular so maybe give that one a look.
This is more an unobtrusive-yay-or-nay topic than a react topic, isn't it?
I'm a fan of the factory approach myself, but learning from others is never a waste of time. Thanks for the resource.
Webstorm would be included in IntelliJ, no? 
I use marionette at work, it's a really solid framework. I much prefer it over Angular, although I have a very serious love affair with Ember. 
I used to read ~200 pages per hour when I was younger. I think one hour is too optimistic prediction for most of people but two hours should be enough for most of educated people. 
This worked! Finally, but what I would also like, if possible is for a message to come up saying you must check the box. Is this something I can add easily or is it complicating?
I respect this view, but my workplace is completely incompatible with it since developers own JS and designers own markup &amp; styling. But also, it seems kinda shitty to me that you have to worry about accidentally using JS reserved words/keywords in your template. (That is apparently why you have to use "className" instead of "class", I don't know what other ones cause problems)
yes. Well i had already been doing the language for over 10 years, the margins are gigantic, and amongst all of crockfords criticisms, nobody says his writing isn't fast and easy to skim. It's probably one of the most fluid and coherent programming books I've read. Well structured, well organized, succinct, concise, and well-paced. 60 minutes may be somewhat ambitious for some, but a saturday morning shouldn't be. Also, we are talking &lt; $20. It's about as much as a main-course at a mid-scale restaurant.
I'm sorry, but most 'educated' people arent going to read ~200 pages of a technical book in a hour and absorb the majority of what was read. 
Thanks! This worked! I would prefer a message to come up and say to check the box or else they will wonder why they cannot continue. Would this be tough to accomplish or something quite simple. Here is what I currently have. It's a little bit of a mess but it works. [Screenshot](http://i.imgur.com/jKpjTeU.png)
Again, I don't do Java, so I have no idea. http://lmgtfy.com/?q=glassfish+serve+json
I started a project with marionette and was not a fan. I had to be aware of many low level things as if I was not using a framework. This took mental energy that I could have spent on achieving my project goals. I eventally chose angular. With angular I have never written less code to acomplish more. In addition I didnt prefer some of the patterns used in backbone. I never liked the models because they are not much easier than manually making the requests or working with an observer pattern. They do give you grief if you are not completely restful on your server. In the end I felt that marionette does so little that I might prefer to roll my own mvc pattern for the project.
I think part of the 'innovation' is the lack of a good standard library. I hate having to find and load a bunch of different libraries to do different things. It also sucks when you google something and you get 3 different answers with 3 different libraries. It would be nice to have a templating language included too. Everyone could contribute to the standard library instead of trying to make their own new library.
&gt; *I know what a bookmarklet is, why can't you make it a bookmarklet?* Primarily because: 1. I don't want to waste my time. 2. I don't give a shit. I'm just pointing out ways that this thing could be more interesting/useful/noteworthy/accessible. What am I, the light who's going to show you the way by leading with example? God no. Just no. 
i suggest starting your own project. think of something that could be useful for yourself. some web application. limit the scope at the start. there's so much good code out in open source projects and resources to learn from. if you don't need to earn money from the start why not work on a project of your own choosing.
Any reason you don't use JQuery? otherwise you could use the .hide() or .show() functions based off of your element. ---html--- &lt;button id="button" onclick="showParagraph()"&gt;click me&lt;/button&gt; &lt;div id="paragraphOnClick" style="display:none;"&gt;&lt;p&gt;paragraph info&lt;/p&gt;&lt;/div&gt; ------------ ---script--- $.getJSON("json_info.json", function(data) { $('#paragraphOnClick').html(data.reviews[0].about.moreinfo); }); function showParagraph(){ ('#paragraphOnClick').show(); }; ----------- I am no expert, just an intern learning and developing web-apps for a few months. 
Depends on your definition of _good_, I presume. Some judge by the ability to deliver working software on time, which for the business case, means getting it done by any means necessary. Sometimes you have to ignore long-term consequences in order to shore up short-term commitments -- it does no good to do it "right", if it causes you to violate your contract or go out-of-business. I'm reminded of the quote, _"You go to war with the army you have, not the army you might want or wish to have at a later time"_. That is to say, yes, it'd be much preferable if the original dev was proficient in JS and had used that, but lacking such skills, it's possible he was only able to deliver something that worked in a reasonable time-frame by using CoffeeScript. Overall I agree with you though: in a perfect world, it should be rewritten in JS. My main point though, something that I've learned along the way, is that one should try not to judge previous devs too harshly, because we often don't know the totality of the situation that led them to their decisions. In OP's case, it sounds like it was more of an issue of poor management than a poor developer.
I didn't know about this library - which is a little sad because it solves many of the problems I had that caused me to build jsObjDB. Having said that - I really enjoyed building jsObjDB. There are many points of similarity between DataCollection.js and jsObjDB. As an example: You use queries for cascading operations: For example: charDC.query().filter({first_name__in: ['Catelyn', 'Eddard']}).remove(); vs: (using cascading cursors) db.query().filter({ first_name: { $in: ['Catelyn', 'Eddard']}}).delete(); (shorter - using db.delete directly) db.delete({ first_name: { $in: ['Catelyn', 'Eddard']}}); Also very similar are indexes and support for nested objects. Nice! I notice you tend to return a query object using query(), then filter on that. I can see the advantage of that approach, because I need to offer query/filter/delete on both db objects and cursors. I offer insert and insertOne, upsert and upsertOne and so on. The reason is that sometimes you just want to work with an object and catch exceptions on failures. Other times you want large scale changes, with callbacks, async etc. Having both certainly made my code better in the project that used jsObjDB, but it has increased the API size. Also I notice you have a smaller api that requires the use of "values" to fetch an array of objects when required. I'm not in favour of your modifying the property name to add an operator: first_name__in: but my alternative isn't that beautiful either: { first_name: { $in: ['Catelyn', 'Eddard']}} One day I'll come up with a better way to do operators. Looking at your repo - its cleaner with a license file and Readme.md in the subfolders. I should do that too. Thanks for getting in touch. 
Having written a few small Backbone apps in the past, my move to Marionette almost a year ago for a fairly sizable app (~400 modules and template files) was an *extremely* pleasant experience. There were a few design choices that seemed questionable and confusing to me, but overall it solved a lot things that were always a pain with Backbone (mostly around creating and managing nested views). Also, the community on IRC (#marionette on freenode) and [gitter](https://gitter.im/marionettejs/backbone.marionette) is really small but really active, passionate, and helpful.
Because AMD is just an API specification and theres no reason not to create a loader that follows it for fun, or in this case to supposedly improve your understanding of how it works? I think its neat. Would like to see a sample of it being used.
Is the JSON in the XML or are you keeping it as a standalone JSON file?
I thought those code style questions were pretty well answered by this: http://sideeffect.kr/popularconvention/#javascript
They say imitation is the best form of flattery, but it's also great for learning. Try building a site from scratch based on one you've seen in the wild. It could even be as basic as a blog, where you'd learn about AJAX, user authentication, client-side validation, DOM manipulation, etc. The nice thing about recreating something that already exists is you don't have to spend much mental energy trying to invent something. You get to focus on just implementing a set of requirements that are practically handed to you for free.
I feel like the included example case is a terrible example. Or maybe I find this solution to be unnecessary. If they are going to be relying on a local library / data store filled with external data, like what is done with some single page applications, they need to be processing each JSON response and updating the local data store appropriately. If they are only relying on the JSON response for immediate use ie displaying a list of current users post then what are they doing storing the object locally. If it is for showing live posts in a thread then request the JSON at an interval and process the callback appropriately instead of assuming previously requested data is current...
&gt; Amen, my brother. &gt; &gt; You will soon learn that JavaScript is the language of your soul. That's how I feel. I'm a software engineering student and am happy to tackle a problem with a compiled language, but there's just something about Javascript. It makes development FUN!
This is more of a CSS issue than a JS issue, but I will answer anyway. It's a css trick called sprite sheets to reduce HTTP queries. In this example, they used an image that is 25px tall and 50px wide. They then defined an element that is 25px by 25px. In CSS the background-position property initially starts at 0,0 aligned to the top left corner of the element which is why it isn't specified (for brevity), so you are seeing the checkmark for true. False has an additional class that changes that background-position property to shift the background position 0,-25. In CSS: The id attribute selector is "#" and the class attribute selector is ".". Somewhere in the javascript code is a reference to the elements with id "stock" and "shipping", and their classes are being set to true or false.
But IntelliJ wouldn't be included in WebStorm.
Type annotations act as documentation and they make your tools smarter. Secondly, they are a lot terser than JSDoc comments. They do work exactly as advertised. Here is some copypasta example for you: JS: /** * Bogorizes the lazer shoe. * @param {number} x * @param {number} y * @return {boolean} */ function bogorize (x, y) { var z = x * y; // z is something ... } Dart: /// Bogorizes the lazer shoe. bool bogorize (num x, num y) { var z = x * y; // z is a num ... } TS/AtS: /** Bogorizes the lazer shoe. */ function bogorize (x: number, y: number): boolean { var z = x * y; // z is a number ... } I rather go with #2 or #3 *and* have vastly superior tooling on top of that.
It takes me an hour to read 10-30 pages of a technical book depending on how advanced/complex it is. But I'm an underachiever.
I was looking at it from my perspective of how I would use it for one of my many current projects. We have generated different database views to reduce bandwidth usage and request only specific data on initialization ( username, id, etc ) and request other data on intervals all joining back to a single object for UI rendering. Siesta will allow me to generate a single 'collection' object and then map my JSON responses to that collection. That seems pretty cool. I can see some edge cases in my current app that would not work properly with Siesta's hard coded mapping of data sources. For instance in the initialization response I include some data that will later be replaced by data in the JSON from the interval request. I do so to increase render times and reduce bandwidth since the app has different states where the user can dynamically request additional data.
IntelliJ is JetBrains Java IDE. WebStorm is a different product which doesn't have "IntelliJ" anywhere on its product website. Does IntelliJ even support JS? or does it just support everything JetBrains has? 
Set this up on [JSFiddle](http://jsfiddle.net/) and try asking on /r/LearnJavascript :)
Says the guy who uses php... :)
I didn't start with JavaScript, but I use it plenty now. A few things I should have figured out earlier: * Build and publish as many "toy" projects as you can. Employers really value being able to go on the Internet and fiddle with something you've done that has all the buzzwords they want. The more opportunities for other techs to break or critique your work, the better. Put your contact info all over everything. * Use personal projects to try different libraries and tools. When you're getting paid, you'll have a hard time justifying "education time." The decision might also be made for you. * Read the source code for your libraries and tools. This will give you super powers. You'll also end up making local copies with bugfixes or improvements. Submit those changes as patches, and eventually you'll get one accepted. Welcome to the open source community. * Don't fall in love with one language, especially if you make all your money programming in one language. Good ideas pop up in lots of communities. The languages that pay tend to fall behind, forget old stuff, and make people complacent. JS is in a great spot, in that lots of other language communities are spinning off JS-target cross-compilers (ClojureScript, Purescript, Dart, etc.). The only JS-specific point I might add is that there are a lot of relevant specifications worth reading (ES 5.1, HTML5, HTTP, etc.). That will also give you super powers. Personally, I haven't found reading implementations (Webkit, V8) worthwhile. Your mileage may vary.
To add, the correct (or rather, more idiomatic) way to set up inheritance would be: /* Constructor Calling parent constructor is optional, equivalent to calling "super()" in an initialization function in "Class-based" OO */ function Child() { Parent.apply(this, arguments); } /* Set up prototype chain properly using Object.create() Set the (automatically populated) constructor property back to the Child (for reference sake! not necessary, but good idea) */ Child.prototype = Object.create(Parent.prototype); Child.prototype.constructor = Child; Cheers.
Annnnnnd that proves my point. Lol. In order to submit data you can't use a static webpage. I'm not referring to your text editor. Drupal is a content management system which allows for server-side PHP. Wordpress on it's own serves up static page iirc but you can purchase plugins to allow people to submit data to it. A backend is not a text editor, its software running on a computer that actually serves the data to the end user. Until such time as you learn backend programming, unfortunately you can't add that kind of stuff to your website. Sorry, guy
I said it's how not to be a good *programmer*; being a good businessman is an entirely separate matter :) I've certainly made unfortunate compromises on code quality in the past, where time or money was limited. /u/kenman is right, one has to do what one has to do. I think many developers unfortunately bring along their old habits when learning a new language.
Much like myself in my "hamster" stage back in middle school, PHP was fat and ugly as a youngster: but it's really starting to grow up and mature into quite the sophisticated and capable language. Adopt PSR-4 autoloading, and you'll start to feel like a real professional again!
I am familiar with what you are describing and see the point you are getting at. Yes, the qualitative difference here is that in the browser you manipulate the DOM and browser renders that for you. When rendering on the desktop you can choose your own internal representation and you just have to be able to render it yourself when asked to do so. I don't think this is going to be a problem for the DOM in practice. The visual complexity of our desktop applications has stabilised over the years, and our computers are fast, we have plenty of memory and most importantly, browsers are evolving to run everything faster and make better use of multiple processors. In the case of the 1000x1000 spreadsheet, there are trick which can be used to make that practical and fast. Even in the case of desktop applications using a toolkit like Qt, you may have to resort to tricks to make 1000x1000 spreadsheet work (i.e. not creating 1 million input fields, but writing your own custom widget to render it). Also, for pure putting pixels on the screen, browsers also never repaint the whole page either, just the parts in the viewport. In summary, the performance of the DOM is improving faster than our demands of it. And I think that trend will continue into the future. 
I can always make a form submission using php and an array in a form of a displayed .csv file. All for free lol So it can be done, I just want it executed nicer
Ok cool sorry I thought you didn't understand how that stuff worked. Rockin. But then, what are you asking exactly? Your question no longer makes sense to me
Where can I find a form looking like in the link provided? Also how can I implement a voting system based on the data? Much thanks, cheers!
 node.style.cssFloat (float is a reserved word) 
You could put your filtering logic inside a web-worker, so that the event loop isn't blocked. This, as a first step, would keep the browser from becoming unresponsive to the user. After that, there is probably more than one approach to speeding it up. From the top of my head: you might want to reconsider your filtering logic to make it more efficient. And of course you could always just deliver the data in separate chunks, so that it seems super-fast, when in reality it takes it's time to compute stuff. :)
JavaScript is not Unicode aware at the moment. See: http://stackoverflow.com/a/280762/581796
You could look into using Datatables, it has an extension that allows you to load a large dataset and only renders what is required. http://datatables.net/extensions/scroller/ Edit: Just in case it's not obvious in this example, Datatables has filtering, sorting, pagination etc. It's just not enabled. This is an example of Datatables with default/zero configuration http://datatables.net/examples/basic_init/zero_configuration.html
&gt; it'd be much preferable if the original dev was proficient in JS and had used that, but lacking such skills, it's possible he was only able to deliver something that worked in a reasonable time-frame by using CoffeeScript. Highly doubtful. It is nearly impossible to become proficient with CoffeeScript unless you are equally proficient with JavaScript. CoffeeScript has almost all the gotchas of JavaScript plus quite a few of its own. And except for comprehensions and its funky extends hack, the syntax is largely only stylistically different from JavaScript. That is, CoffeeScript isn't doing anything special for you under the hood. It's just letting you use syntax sugar, but in order for that syntax sugar to be relevant you really have to understand the JS it's producing. In my opinion, the fatal flaw of CoffeeScript is in its tagline: "it's just JavaScript". That means that to use it well you need to learn both languages. So, more likely that the old developer just coded a bit faster in CoffeeScript, rather than not being able to write the same thing in JavaScript.
The JSON has it's own file. Then I'm trying to access a node from the JSON file from script within the XSL file. I've figured out how to do this. Now I get a 404 saying the json file cannot be found.
Hi! I work for a company that also has to manipulate and render big amounts of elements. In my case we need to render stack traces of people's Java applications, and these can become quite large. 1) Check that you're not modifying the DOM for every single result. So instead of this: var hugeArray = [ ... ]; var container = $(".array-container"); $(hugeArray).each(function(value) { container.append(value); }); Try this: var hugeArray = [ ... ]; var content = ""; $(hugeArray).each(function(value) { content += value; }); $(".array-container").html(content); Try to avoid using jQuery until the very last step. jQuery is incredibly flexible, but it's also very slow since it has to do a lot of things. 2) Try to avoid deeply nested DOM structures. So instead of this: &lt;div class="element-1"&gt; &lt;div class="element-2"&gt; &lt;div class="element-3"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Try using this: &lt;div class="element-1"&gt;&lt;/div&gt; &lt;div class="element-2"&gt;&lt;/div&gt; &lt;div class="element-3"&gt;&lt;/div&gt; It might not always be the best solution and you might need some work-around to achieve it, but when your objects have a nested nature and the tree goes deep, then you might need to consider this optimization. Don't do it if you think it won't have a big impact on your program.
That one only distinguishes between tabs and spaces, too. I'm talking about tabs vs 2 spaces vs 4 spaces vs other.
Unlike TinyMCE (which only sells support instead of the right to use it), Froala is a completely commercial product. Also, you've obviously choosen the ugliest TinyMCE skin to compare it to Froala. This really looks like you were paid to advertise for them.
'Symbol.iterator' :\
&gt; Every time you create a new instance of Thing, you are actually creating a new separate increment function! If you instanced 1000 new Things, you would be creating 1000 separate increment functions, wasting a huge amount of memory! &gt; Memory is cheap, developer time isn't. I much prefer the first option where the method is in scope, which easily and immediately displays what methods an object has and gives them access to scoped variables as well. 
What we usually call "JavaScript" is ECMAScript. "JavaScript" is the trademarked name (owned by Oracle). "ECMAScript" is the name of the standard. TypeScript will be a superset of ECMAScript 6. Right now, it's missing some of ES6's features.
So, if I'm building a web app I would be inclined to use Grunt for things like css minification, js lint, js minification, css/js concatenation, sass compilation, coffeescript compilation, etc. etc. I can also use watch to check if any of my css/sass/js/coffeescript files change, and re-compile/minifiy/lint/etc them on the fly. Therefore, if I'm building a web app with all the above but in a go environment, it's a bit annoying to have all these other things automated but have to manually restart my go service each time I change a go file. With these modules, go becomes just another thing that gets restarted when an appropriate file gets changed.
It seems the author's point is that the template and the code that uses it *do* collectively make up a single module. From that perspective, the argument that it is more cohesive to keep the code and the template physically together makes perfect sense.
Braces on their own lines? Gross :)
Liked '@@iterator' (string) better?
&gt; This really looks like you were paid to advertise for them I think that's the whole raison d'etre of the company. My favourite sentence from their site is this... "Streetwise Channels are our proprietary, native digital marketing product designed to create and share brand content with our audience, organically"
The "right" way to do this is on the server. Use "order by" and "limit and offset" in SQL and only send the results you need. Even in JS, 500 results should be able sortable and filterable in miliseconds. Most likely whatever you are using to do pagination is using lots of DOM manipulation (slow), or there is some terrible n^2 (500*500) time complexity issue in the filtering or pagination algorithm. Sorry I can't help more. Sounds like you just want a reference to a framework, not a comp-sci dissertation. I'm less up to date on JS frameworks.
i don´t want a framework and i can´t do it on server. Results are from different providers and if done server-side clients will wait 20-30secs for any results.
Yeah it does. Make perfect sense that is. Like - I say a little knowledge. Daaaaaangerous.
I dont have nested structures. My structure is something like &lt;div data-provider="0" data-price="13"&gt; ---info, images, prices... &lt;/div&gt; &lt;div data-provider="0" data-price="23"&gt; ---info, images, prices... &lt;/div&gt; &lt;div data-provider="2" data-price="33"&gt; ---info, images, prices... &lt;/div&gt; &lt;div data-provider="2" data-price="43"&gt; ---info, images, prices... &lt;/div&gt; &lt;div data-provider="3" data-price="53"&gt; ---info, images, prices... &lt;/div&gt; Most of my filters work like list.hide(); list = list.filter([data-provider="2"); list.show(); Maybe filter to data is slow and i´ve to change my filter code to childs elements. But probably my pagination code is very slow and touches a lot of DOM. Maybe it´s better to use a js list with only the data and use a js template to print on page? and filter the js list not the dom list?? 
Wow, that was an awesome explanation. Thanks so much and sorry if this was in the wrong subreddit. I thought I had CSS down but I guess I need to spend a little more time on it. Thank you PING! 
Not trying to be snarky, but it would be dumb to buy an angular book after the announcement that Angular 2.0 will not be backwards compatible. http://www.i-programmer.info/news/167-javascript/7932-angularjs-20-is-radically-different-.html
while I agree with what you said about developers sometimes pushing a whole new stack/lang to a project due to completely wrong reasons, you can't blame google go for it. you should be doing some order in your group. the purpose of this project, is the extend the node.js runtime to additional languages, not for a project to have 20 different langs in same runtime in parallel, but to allow groups to select node.js as their runtime regardless of the programming language they are using.
Try putting the diacritical characters first in the regex. They might "catch" before their unadorned versions. 
I've been looking at TypeScript today and my first impression of it was positive. I know C# so the syntax was familiar to me. Also I liked the fact that it was an extension of JS rather than a whole different language, making it easy to pick up.
Go through a tutorial and get the basics down if you want to get familiar with the 1.x series, but you may not want to study a technology that will be deprecated in the near future.
I think you'd gain some performance if you filtered before you added all the elements to the dom
[XRegExp has Unicode Support](http://xregexp.com/)
Thanks for the tip :) The big problem is I dont have any cool project ideas. Nodejs is pretty fun to deal with, I need just an idea that can improve my Javascript and algorithm skills. Maybe a Rest API project can push me forward.
although i like the idea none of the examples seemed really to show anything i can't do with html and css pretty easily. with everything in canvas you don't have access to some of the hardware acceleration of modern graphics cards. my third critique is that the ui elements in the demo all look a little outdated. i really like the minimalist flat direction the web has taken. that may be a matter of personal taste though
That's the opposite of Hungarian Notation (which is horrible).
Neither. https://www.codeschool.com/courses/shaping-up-with-angular-js for the basics and Google for everything else.
I'm sure it's corporate policy in fact.... &gt; _Article B-7:22: Only write high-quality code._
If everything is in canvas doesn't that make accessibility much harder?
Honest question -- why? I looked at the github page but I didn't see a reason.
yes, but if you continue to build functionality in AG1, when you eventually move to AG2, all old modules are frozen until they can be refactored. Unless you plan for your whole team to retain knowledge of two versions of the same framework. Personally, I call that a "sandtrap."
&gt; I see a lot of comments on this sub about the greatness of prototypical inheritance, especially as opposed to C++/Java's class-based inheritance Really? I don't see that many comments here talking about the greatness of prototypical inheritance in relation to C++/Java. Prototypical inheritance is being debated here more than compared to other langs. 
Prototype modification can be useful - since objects inherit from it by maintaining a reference to it, they will all - whether they have yet to be created or they already exist - use the updated version of the prototype's properties if the latter were to change. Also, it's not always a bad idea to extend built-in objects' prototypes - sometimes you need to provide methods which are defined in the recent specification, but not supported by older browsers (though you need to be careful and follow the spec precisely).
Yea, seems really unintuitive and non JavaScripty.
You can't rely on the built-in split function because characters like q̀ take up two "places" in a string. The built-in split function will split q̀ into "q" and an unusable code unit. Use a split function that is Unicode-aware. Here is one, (or you can just copy/paste one from Stack Overflow) https://github.com/essdot/spliddit
Less performant, but not by enough to make a real impact. I believe his point was computers and VMs have gotten fast enough that the slightly slower and more memory expensive objects don't make a noticeable impact on performance.
I'll pass, if I'm worried i'll write a test
I really enjoy their 'annotated source', more frameworks should layout their examples like that.
Update: I tried it in chrome and firefox console. It's returning 1. = / I think Hacker Rank is wrong. They should really go through and test their problems before posting it.. I'mma just go back and do project euler... 
Watch the video.
Dart is actually a lot closer to C# than TS is.
Well that's good. As far as the JSON file not being found, if your filesystem is case sensitive, make sure the path you are using matches the file's case. Also, you can use something like Firebug to inspect what file is actually being downloaded, which can help you find the problem.
Currently also touch events do not work, but the idea of the project has potential.
I agree that is probably not going to be a problem for simple applications. However, I'm still curious to understand how much more memory parasitic inheritance would use in case you have one thousand, one million or one billion objects created that way. Each object would have to have the data relevant to the object plus all of the function implementations. How much more space would it require? Are there any benchmarks in this sense? Do VMs like V8 have optimisations for situations like these?
Yes it's ultimately about flexibility. Prototypes allow you to change the object definition during run time which has all sorts of interesting consequences vs a class based object system. This flexibility can be seen based on the fact that we can effectively emulate classes and interfaces with prototypical objects (as typescript does) but we cannot easily recreate prototypes in a class based language. That being said, I'd argue that the community is currently more focused on moving towards mixins and traits vs pure prototypical inheritance but that could just be my experience (while certainly another good indicator of the flexibility of the language )
&gt; *Memory is cheap, developer time isn't. I much prefer the first option where the method is in scope, which easily and immediately displays what methods an object has and gives them access to scoped variables as well.* Look, I get the philosophy for why it looks visually cleaner to have everything that's a part of the Thing class to be within Thing's braces -- it's what other languages do, and just feels weird to declare parts of Thing from outside of Thing. I get that, it was a stumbling block for me too -- but listen: *it's just the way JavaScript works.* Ignoring optimization best practices because they appear ideologically ugly to you personally is a childish and unprofessional thing to do. Here's the good part: you're just looking at it wrong. `function Thing () {}` isn't a class at all -- it's just the constructor definition. That's it. In JavaScript, you just announce a constructor, then you announce some properties related to that constructor, then you announce some instance methods for it too. You just start declaring shit, in any order you prefer -- and that flexibility is *sheer power.* JavaScript is so simple, and so elegant, that it *doesn't even need* the `class` concept at all, which is why in my examples, we haven't needed to go even two indents deep. That's just not possible in other languages. JavaScript is fundamentally different, and that's OK. Understand those differences, and leverage them. Design patterns: JavaScript is extremely *flexible*, which allows you as a developer, to exploit endless opportunity to better structure your code in new and creative ways that make sense to you. - [**Check out this design pattern I've just created for you specifically!**](http://hastebin.com/qidatuyiji.js) Let me know what you think, but I think it's pretty cool. I bet you'll like it. I wanted to address specifically the problem of *access to scoped variables.* 1. Conceptually, everything related to Thing is fully encapsulated. 2. A special group of `privileged` methods are given access to an object full of `private` properties (this is accomplished in the constructor via function binding, `Function.prototype.bind`). 3. Static methods are expressed as properties attached to the constructor itself. 4. Instance methods (which only have access to public properties) are available publicly. I became so excited creating this design pattern, I actually skipped breakfast. So I'll get to that now. JavaScript is a beautiful language. The flexibility is amazing, you'll never have an excuse to stop learning how to become a better programmer ;) Keep on keeping on.
It is OK not to undarstand and it's the best thing you can do when lerning is not to understand. Start googling parts that are not clear. Start copying, modifying and writing own code and analyse results. It takes years to master one language fully. Don't drop books that shows you what you don't know, drop books that teach you nothing.
\&gt; ______&lt; Thank you. 
&gt; Zebra development is much closer to software engineering where you write well structured, supportable, extendable code basing on easy Zebra OOP concept. You keep distance from the mess of HTML, JavaScript code, CSS and DOM manipulation. This project is a mistake. Pretending that programming === OOP so therefore everything about the web is broken is a really poor strategy. There are alot of areas in the foundation of the web that could be improved, but favoring FP over OOP is not one of them. It is this willful ignorance that allowed Flash to be so popular for so long, except that Flash executes faster than JavaScript even after GPU acceleration. This approach will be slower. Browsers are incredibly well optimized to take full advantage of the DOM, because everything desugars to the DOM api methods. OOP is a dated concept that is trending down in language design really fast. All the momentum right now is towards functional programming. Even traditionally OOP languages have caught the FP fever with lambdas available in native C++ and now Java 8. I am not sure where this foolish programming === OOP ignorance comes from, but it is just so backwards. I can only guess it is some form of idiomatic ethnocentric like mentality originating from narrowly focused formal educational institutions. I can't help but think the people most supportive of such ideas are people who have years of programming experience and are forced into other realms where they lack confidence and competence, so therefore it is the rest of the world that is broken (not them).
Prototype inheritance doesn't work quite the same way as Java / C++ inheritance. For one thing, it's more like everything on the abstract class is a static. All concrete instances share the same member on the prototype. This is fine for scalar values but becomes problematic for reference types, like arrays, or functions with closures behind them (like privileged methods poking private variables, or functors, the funkiest of the data structures). Personally I prefer parasitic inheritance.
&gt; markup with view logic and it just feels so dirty There is nothing dirty about explicitness and concision. What's dirty is having strictly coupled markup and script files with no obvious connection to one another. Consider the following Knockout code: &lt;p data-bind="visible: foo.errors.length, forEach: foo.errors" class="error-list"&gt; &lt;span data-bind="text: errors.description"&gt;&lt;/span&gt; &lt;/p&gt; I know what that markup is for. It shows every error in foo.errors and completely disappears if there are no errors to display. Now consider the 'classic' way of doing this: &lt;p id="errorList" style="display: none"&gt;&lt;/p&gt; And somewhere in a random script file: $(document).ready(function(){ SOME.NAMESPACE.goShowSomeErrors(document.getElementById('errorList')); }); It's not clear from looking at the markup how it's going to behave at runtime. The only way I can discover what it does is by grepping my entire project for the string 'errorList'. This might not even work if that string is built by concatenation. Then I have to follow goShowSomeErrors through to see where it gets a template from, and what it does to it, and what other things share that template and need new implementations. That's assuming I even know the ID is the hook. It might be some xpath or something instead. The ID could have been used for styling (shudder). Worse, it could have been used as the JS hook, then *commandeered by a naive developer as a styling hook*. Now the styles are more specific and I have to work at decoupling them from the JavaScript. Really annoying! It's a lot more trouble, and it's all just a legacy of the days when people needed to be told to put complex JS in scripts rather than as inline event handlers. A totally different matter to do with maintainability, reuse and concision of markup that uses external scripts rather than any theoretical need to make the HTML agnostic of its runtime behaviour. Never feel guilty about implementing something in a convenient way. That's just being dogmatic. 
I got 2 when trying on chrome. var input = "4\n6\n1 4 5 7 9 12" processData(input) 
I prefer pure functional inheritance so that I don't have to use classes or prototypes. I don't have to use *this* or manually create any sort of inheritance model. Prototypes are nice in that the model of inheritance takes advantage of things like scope chains and other available prototypal inheritance, both of which are qualities that are automatically available without any manual effort.
[Pourover?](https://github.com/NYTimes/pourover)
In JavaScript, I assign methods to the prototype for memory. Let's say you have 50 Cat objects that look like this: { name: (...), dob: (...), age: function() { //calculate age } } Well you have 50 Cat objects, and 50 instances of the age method taking up memory. Instead, you use the prototype: Cat.prototype.age = function (){...}; Now you just have one age method on memory that all 50 (and future) Cat objects can access, without having their own.
Most modern browsers and graphics cards have hardware accelerated Canvas elements. Correct me if I'm wrong, but I'm pretty sure DOM elements are not 
You have no idea how much you just helped me with understanding why we use prototypes
Ah herp derp, I didn't really test my input like that. That's my fault not hackerrank or anything. I messed up.
[**@HubSpotDev**](https://twitter.com/HubSpotDev): &gt;[2014-12-02 18:13:34 UTC](https://twitter.com/HubSpotDev/status/539844839597436928) &gt;"Relieving Backbone Pain with Flux &amp;amp; [@reactjs](https://twitter.com/reactjs)" \[video\] [*dev.hubspot.com*](http://dev.hubspot.com/blog/moving-backbone-to-flux-react?utm_content=10229651&amp;utm_medium=social&amp;utm_source=twitter) [*pic.twitter.com*](http://pbs.twimg.com/media/B33qBXWIgAAqEt9.jpg) [^[Imgur]](http://i.imgur.com/j068NGO.jpg) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2o6u5x%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I don't understand this comment. You do realize that the Document Object Model (**edit**: the browser implementation) is, well, object oriented, right? document.body instanceof HTMLElement; // true document.body instanceof HTMLBodyElement; // true You know that every single time you write HTML, append event listeners, or deal with literally *any* UI element you're forcing a pre-baked OO framework to render and handle everything for you? You just happen to have a fancy templating system and layer of abstraction to help you forget (HTML). Nobody's "forcing" OOP to the web because they're misguided, web UIs (and many, if not most, other UIs) are object oriented because OOP is the best tool, conceptually, for the job. It allows for separation of concerns when rendering and dealing with user interaction events for each type of element. You're painting objects on a screen. And you're waiting for the user to interact with them. That's all you're doing. There are shared similarities between every object you draw (X, Y, width, height). There are shared events (click). Does it not make the most sense, conceptually, to have every element inherit from a base object that has the appropriate properties and methods? Have your opinions, but do your research and come back with arguments as to why you believe FP is superior for web development, *specifically UI implementation*. "Java has lambdas!" is not an argument for FP. Use cases and ease-of-development (both conceptual and time-constrained) would be valid. When it comes to UI design and UI interaction I think you're completely off-base. **Edit:** Doesn't help your case when you invent ad hominem strawmen to defend Functional Programming. "OO is bad because people who support it must lack competence" has no place in rational discussion. I *like* FP and FP concepts, but your attitude and the way you frame your arguments is something you could work on.
website is down for me
&gt;There are alot of areas in the foundation of the web that could be improved, but favoring FP over OOP is not one of them. how does the web favor functional over OO? DOM API is pretty damn OO if you ask me.
I see your point, but no. Filtering an array is `0(n)` worst case. It will take a check against each item for an `n` length array. Sorting and then slicing an array is `O(nlogn) + O(1)` best case and `O(n^2) + O(1)` worst case. For each item in the array, we would have to compare it to all other items which is `n^2`, but the sort method will try and perform in `nlogn`. So if you want the data sorted after the fact, sure sort and slice. If you don't want it sorted, then don't take this approach. 
I don't think logic in views should NEVER happen (I use handlebars with Marionette, that obviously includes logic). Things I don't think that should be included in views are event handlers or using markup as the templating logic (ala knockout and angular). The way I would handle your example in marionette is have a template that iterates over the errors, a region to display the errors, and logic to inject the item view to the region if there are errors to show. Any event handler to dismiss the errors would be placed in the item view. Now I can reuse this item view and swap out the template if I need different markup to display the errors in a different part of the app. There is no true wrong or right way, it is my preference to separate as much logic as possible from markup. 
the great thing about prototypical inheritance is that it is impossible to keep track of which objects come from where and what they do
He is not, he as since handed over Marionette to another developer to maintain. 
Dan and fc_s have the right idea, here's a little more: The number of repaints and reflows happening because of list.hide() and list.show() is astronomical. You need to avoid this. One way would be to filter the data, and rerender all of the html into a string or a document fragment, then swap the filtered results in all at once. Here is a really [simple example](http://jsfiddle.net/qbhgkxdc/2/) You could also attempt to maintain a dynamic style element that updates styles for entire selectors rather than hiding and showing each element individually... But I wouldn't suggest that here. EDIT: show and hide may be a bit more optimized than I thought, but it's still better to swap the entire change in at once.
Your problem is that you're delivering 500 results... with pagination?? Do you think any user would ever look through 500 results? when was the last time you even clicked past the first page of results on google (10 results)? 
Symbols are new, but they're the best solution for this problem. Adding symbol support for object keys make sure it remains backward (and forward) compatible. 
Im pretty sure pixi is the fastest
Stuff like lnkName or txtFoo was always called that in the VB era. 
http://www.reddit.com/r/javascript/comments/2o5q4y/zebra_html5_canvas_rich_ui_javascript_library/cmkbdm7
This was my first thought. I have found a lot of success using this library. 
Most modern browsers use the graphics card and GPU to accelerate the rendering of DOM elements and compositing the different 'layers' into what you see on the screen. 
&gt;At any rate the DOM reflects the functional inheritance state native to the markup in a OO means, because OO is more convenient for an API. Glad we agree. btw you are insufferably pretentious and pedantic. If you were my coworker I would never talk to you.
Learn about Cryptography! Make a browser-based client-side data vault with AES encryption! Install Node JS, and Gulp, and use it to minify your scripts!
Save words. Just say I am **mean** (bold for emphasis). 
dont forget selecting and copying text. this would really only be suited for flash-style microsites. It might be a good tool for those though.
Why did iterators make everybody forget about references? I mean stuff like this: Words.prototype[Symbol.iterator] = function() { var re = /\S+/g; var str = this._str; return { next: function() { var match = re.exec(str); if (match) { return {value: match[0], done: false}; } return {value: undefined, done: true}; } } }; Why are we recreating everything at the beginning of every loop? Why not put the commonality in a class and `return new WordIterator(this)`? Or even just `return {next: nextWord}`? Didn't we all learn about this in JS's stone age? I really hope iterators don't get a bad rep because of this absurd emerging anti-pattern.
Oh my good lord, I would lose it if I reviewed that comment... /////// NO NEED FOR THIS, WE CAN SEE COMMENTS /// /** * My thing is starting, it does: * x, y z **/ And I can't fathom why you wouldn't just do.. /** * We're going to do cool stuff. This function accepts * stuff to do cool stuff. **/ function(stuff) { // all the cool stuff }
It's probably too late for you to switch, but it's a good idea to use a module bundler like browserify. With watchify, browserify bundles can be updated incrementally during development, reducing the bundle time for each successive change drastically. I'm not convinced using a full ES6 transpiler is a good idea. Even if you don't have to support IE8 (probably the only thing keeping anyone from using non-shimmable ES5 features), some ES6 features can't be translated to pure ES5 code and need to be emulated. I'm not sure what the impact in your project would be, but it might not be worth it. There's certainly a place for using a subset of ES6 features, though. React's JSX transpiler, for example, supports a small subset (including arrow functions, variable decomposition, rest params, etc) that requires barely any overhead and works fine in IE8. These allow for more concise and occasionally more expressive code without requiring a full buy-in into ES6-land.
I tried the samples on Chrome + Firefox, 1/3 worked on chrome and 0/3 worked on firefox. :(
For me prototypes are best for passing data through with copy-on-write semantics, that allows for changing a value without the need for changing every copy of the value there could possibly be. However I've not found many cases where this was a needed idiom. 
It's too bad nobody ever cautioned against creating elements in your javascript. Marionette bothers me in that you can't use your tempting engine's loop; each view creates an element that it lives in. This means that you can easily end up with a thousand one line files and you can never get an overall view of your markup.
I think you've read the code wrong. It *is* only returning {value: nextWord, done: false} on each iteration. Remember it's the "next" method that's called on each iteration.
I actually haven't used it, but I've been looking for an excuse. Glad to hear it's useful.
Right, but can you give me a use case for updating an already-existing prototype?
If you're interested in learning Meteror, learn Meteor. In two or three years, you'll be in the same boat so it doesn't matter. There will be a reason everyone won't want to use that either.
AngularJS is 5th searched term on HackerNews. http://www.reddit.com/r/javascript/comments/2o6n3o/javascript_is_top_job_skill_on_hacker_news/
Good luck with that
Why is this like the 5th rock paper scissors post in this forum? What the hell is happening lol
Yes I saw that earlier, my reasoning is that since the new Angular seems to be completely different, is it worth spending my time learning the current one?
What's wrong with event handlers? e.g. &lt;button data-bind="click: refreshList"&gt;Button me!&lt;/button&gt; &gt; The way I would handle your example in marionette is have a template that iterates over the errors, a region to display the errors, and logic to inject the item view to the region if there are errors to show. This seems more roundabout than the Knockout way to me. &gt; Now I can reuse this item view and swap out the template if I need different markup to display the errors in a different part of the app. But then again, if the bindings are properly abstracted, and the templates are too (either through custom elements or server side templating - e.g. JSTL tags), isn't that still possible in something like Knockout? 
Is it better to learn another framework, say Meteor?
filtering and pagination in javascript is very fast - DOM manipulation is slow. what you want to do for large data sets is: * keep the data set in memory but out of the DOM * apply your paging and filtering in memory * once you've calculated the filtered page, present it in the DOM *afterward* here's a script that finds all items in a list of 100k whose id is a multiple of 17, and then gets the second page of 10. the filter/page aspect runs in about 10ms on my PC: function log(msg) { console.log(msg); console.log(new Date().getMilliseconds()); } log("generating items..."); var items = []; for( var i=0; i &lt; 100000; i++ ) { items.push({ id: i, name: "item " + i }); } log("filtering items..."); var matching = items.filter(function(e) { return e.id % 17 == 0; }); log("paging filtered items..."); var page = matching.slice(10, 20); log("done."); console.log(new Date().getMilliseconds()); console.log(page);
Why in the name of all that is decent and holy would I even *bother* doing UI in canvas? Why manually draw everything (or use a framework that does it for me) when I have a very rich (and infinitely more performant) UI framework baked into HTML? It sounds like somebody misses the days of Flash UIs, but I sure don't.
Most of the Angular crap recently was either * People who already disliked the framework having an excuse to yell and scream "I told you not to use it!" * A knee-jerk reaction by people who don't keep up with the development process of 2.0 I would recommend making your decision without thinking about what the next versions of frameworks may or may not change. Look at a few tutorials for both and make your decision on what most appeals to you. As another user said, in 5 years there's going to be another generation of frameworks to learn anyway. None but the most advanced positions are going to require experience with a specific framework - most jobs just ask that you have experience with *one* of the major frameworks. After that they know you are capable of working with a similar tool, regardless of which one it is.
II wouldn't get to grips with Angular until 2.0 is out next year. Itmay be quite different to 1.3 so perhaps it's worth waiting the nine months and skipping 1.x. Assess Angular again next Autumn (when theoretically another technology may have stolen Angular's crown). If you're interested in Meteor, though, go for it. It probably won't get you a job right now but it could still be fun and let you learn a bit more about back end development. Or you could always play with Node.js.
No. A hostile fork is the *last* thing Node needs right now. We already have enough trouble with the Joyent controversy. If Node starts to disintegrate we may as well all get Golang books for Christmas.
AKA: We're really scared that io.js is going to become a thing.
&gt;Zebra clearly says it supports clipboard integration hmm. ok i see it works on some things there. but not all, is it a setting? &gt;You can select text on a canvas natively? how?
I've had good luck with the List.js plugin: http://www.listjs.com/ Use the fuzzy search and pagination addons there to give you text filtering (instant search -- type and the results show up), plus pagination. As long as you don't have too many results per page (say, less than 100) it's all very fast, at least for lists of about 10,000 that I've tried.
I think s/he's recommending the "next" function being declared in another location because he believes it'll help performance.
None of these points address UI implementation. **Edit:** I updated my original post to include "browser implementation" since the DOM itself is indeed implementation-agnostic.
Hahaha! Ummm... no. Check out the article here: http://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/ The issue is churn rate. "The JavaScript world seems to be entering a crisis of churn rate. Frameworks and technologies are being pushed out and burned through at an unsustainable speed."
So I use transpiled ES6 code in about 8 production sites / apps. But it's all server side javascript. Basically we built a node framework https://www.npmjs.org/package/cs that implements googles Traceur project at it's core. Which gives us transpiled ES6 features. We are about to switch to ESNext in place of Traceur because ESNext is built for performance, whereas Traceur is built for accuracy of the spec. Experts on both sides agree that a transpiler is fine to use in production, but you'd be better off with ESNext as it's more performant. Side note: I LOVE writing ES6 code, and it's HARD going back whenever I have to. (We are going to update our framework to transpile our client side JS as well, so we'll be 100% transpiled)
 var oldDef = MyClass.prototype.def; // arity 2 MyClass.prototype.def = function (a, b, c) { // arity 3 this.c = c; return oldDef.call(this, a, b); }; MyClass.prototype.def2 = function (a, b, c) { // arity 3 this.c = a; return oldDef.call(this, c, b); };
Generators have changed my life. So +1M for them. Fuck Promises. Iterators are at it's core what made generators possible. Fat arrows are good sugar. Like var studentIds = students.map(student =&gt; student.id); destructors are very useful for parsing out object params we don't use modules because traceur didn't support them in the past. However ember CLI uses them. I don't like them right now. The spread is fantastic, but we rarely use it. We also use default params a lot, and ES6 classes are at the core of our framework. I wrote a little ES6 cheat sheet for our framework https://github.com/ConnectAi/cornerstone/blob/master/docs/es6.md
I am so stealing this. 
 look into ember.js too, and see if that piques your interest.
The Angular team has said 2.0 doesn't have many concrete decisions done let alone a release timeline or upgrade path, and the team has also vowed to continue developing and patching 1.x for some time after 2.0 release, as is pretty standard. There's plenty time yet to use 1.x and get a lot out of it. Whether you should learn it now depends on how soon you expect to be able to get good use out of it. With some dedication, 6-12 months is a good timeline for learning and developing something worthwhile in Angular, but you can use it in small ways in the meantime. As for app lifetime, there's little reason to expect most apps will have some horrible outlier bug years from now that no one but the official Angular team can patch for you. It's just JavaScript, and it's an open source framework. It's just losing official support is all. Finally, something I don't hear enough in this common discussion: No one knows what Meteor and other frameworks will look like by the time Angular 2.0 releases, and into their future beyond. They will also have a lot of ES6 to leverage, and may not grow gracefully. I have personally found it invaluable to learn Angular. I could have chosen another framework, but I still can. There's still plenty of intangible knowledge you gain in learning any framework, whether you ever actually develop in it. Learn a framework. Don't sweat the trends and the rabble so much. If you want to hear reasons why you should learn Angular in particular, I can try, or you can pop over to /r/angularjs. Good luck.
I've been in your position and have flip-flopped back and forth over the last 2 weeks learning (basic tutorials) Laravel, Node.js/Express and Meteor, and even started reading some Rails intro tutorials, and I'm thinking of going back to Meteor because it was really fun to learn and easy to get started. Out of the box, Meteor has support for real-time updating (when you want it, you don't have to use it), and you aren't forced to make a single-page application (with iron:router, you can make a traditional multi-page website). I think we are in a similar situation and could benefit by both taking up Meteor and communicating, at least for the sake of motivation. I believe that it is what I'll end up doing, in any case.
Like so: window.addEventListener('copy', function(e) { e.clipboardData.setData('text/plain', 'wow such copy so amaze'); e.preventDefault(); }); :)
might be handy in a situation, like making a ui for in a video game that is all canvas.
i asked how to select not how to copy
you may be thinking of emberscript
My bad! Was reading quickly. To that --- I don't believe you can. But you can easily write a selection implementation. :)
I doubt the high-level concepts will change that much. I think a lot of it was the specific HTML syntax they will be using (and feel free to correct me if I'm wrong here, not really an ng-dev).
Your description of prototype function lookup tables pretty much compares to how c / java deal with their class definitions as well. IIRC...
Could you provide a link?
Some of those butthurt people are prolific nodejs developers and open source contributors whose opinions I hold in very high regard. Nodejs isn't a language, nor does it compile JavaScript. The V8 engine, and those who continue to work on it, are responsible for nodes existence. The c++ layers and nodejs api - event, stream, servers were designed by someone very intelligent, but it's experimental and arbitrary. The current fork of the v8 nodejs supports is pretty much depreciated. Upgrading v8 means breaking c++ libraries in node. But what if you don't want to use them? Or only use one or two that can accommodate the upgraded v8. JavaScript is JavaScript, and if we want to program in modern JavaScript, we need modern v8. Forking node is nothing like forking ruby or Python. I'm not involved in this fork whatsoever, but it those 'butthurt' developers wanted to fork node, I would use their version over the official Joyent.
IronArthur, I definitely disagree with DocBrown. JS is JIT'ed and runs as fast as anything else. There is definitely something else going on here. 500 records are not the problem.
It's disappointing that iterators are stateful. If I have an iterator, and I call .next() on it, it becomes useless for anything else that wants to use the iterator. Similarly, if I pass an iterator to a function, I can't be sure that I can still use that iterator; it might have been "consumed". It would have been nicer to have something like Clojure's [seq](http://clojure.org/sequences) interface where an iterator has something like the following functions: it.val() // returns current iterator value it.rest() // returns an iterator representing the rest of the sequence You still get laziness, infinite sequences, etc. but you can treat iterators/seqs as normal values without having to worry about their internal state.
coffeescript is unrelated to ember.js. You can use coffeescript to write for ember.js (I do that a lot), but you can also use plain javascript.
&gt; We all agree we want a healthy and vibrant team Then stop having meetings about what your meetings should look like. There's so much bull crap in this update, between an "interim advisory board" and "discussions at the working group level" that I can't believe they actually managed to release a thing at all. I'm amazed that a community focused delivering fast and being okay with fixing broken things has so quickly attached itself to a tool seemingly-obsessed with rules, procedure, and stagnation.
I guess it depends greatly on the video game, but sure. For most games that would require the types of UIs they're demoing on that website, I'd just overlay an HTML form. 
yeah. I was thinking the table might be handy to save some time. Seems like I use those now and then in games, for like scoreboards or something. Or like radios for menus. You'd still have to put work in though to make it not look like 2007
No. Angular 2.0 is a complete rewrite of the framework and there will be no backwards compatibility. Angular 1.0 is essentially a dead technology at this point, given how toxic it's being treated by many web developers at this point.
meh. Why not just return the value?
I thought of this too. But I don't think they care so much about accessibility. It appears they are more interested in creating a UI framework that looks and works exactly the same in different web browsers without worrying about differences in feature support and rendering. Also, one that you can use entirely from Javascript and not have to deal with html and css. I could see this being useful in a scenario where you have a WYSIWYG form builder for some enterprise application.
You need to take gamble on learning a popular framework well. Back in 2005 I bet on Ruby on Rails. This payed off as RoR took off in a big way over the next few years. I bet on Angular about 2 years ago. Since then it's become huge. I am involved with and have spoken at the Angular Melbourne meetup (now the biggest tech group meetup in Australia ). We have about 150 people turn up. Considering the population here that is big. I am also getting calls about Angular jobs. I see some people are saying wait til 2.0. That's just plain dumb. Angular 2.0 will be significantly different because they want it align with ES6. Which is a very smart approach by the Angular team IMO. ES6 is coming. YOu can develop in ES6 now with Tracuer and other polyfils. There is no one framework to rule them all. Expect to learn several. This can only make you a better developer. Learning a framework on your own is fine, however working with it daily with other developers on a challenging project is where the real learning happens. Meteor is very cool. But very few jobs and no big company backing. I have built an app in it and while it worked I hated the template system. Oh and its a full stack framework whereas Angular is front end only and backend agnostic. So yeah Angular is worth learning. Do it. 
I can't take them seriously because their own logo is so incredibly bad. 
I think that illustrates just why this isn't a good idea. If you're having to re-implement basic functionality of the browser, then it kind of defeats the point of building for the web.
It's actually not completely different. They just got rid of some of the annoying bits. All of those changes are really great. The only thing people didn't like was the backwards incompatibility. I recommend to watch Miško Hevery's keynote from ng-europe 2014: https://www.youtube.com/watch?v=lGdnh8QSPPk Also note that you do not have to write your application in AtScript. You can use JavaScript, Dart, and AtScript. You can also use TypeScript, CoffeeScript, or any other language which seamlessly interacts with JS. You only have to use AtScript when you want to contribute to the project itself.
"Le3ve it to the pros guyz!1!" ... posts link to a generic logo factory.
We work on a huuuge js app on the client side, we don't need to support IE8, and we use browserify with the es6ify plugin (which is basically traceur). I encountered no problems with using this, on the contrary. The features that we use most frequently are fat arrows, destructors, spread/rest operator, default parameters. But we use other features too ocassionally. My advice is to go for it, I don't think you'll regret it. I don't.
But most JS HTML editors rely on contentEditable, usually but not always in combination with an iframe (which sucks, too).
I saw a couple of nice ones, still don't understand why node has to split tho, we have enough problems already.
Well… it won't. The closure allows the regex object to be created once per call to [Symbol.iterator], it allows the string to stored for that for loop (so changes to the string mid-loop don't break things). The use of closure there is very deliberate.
Rather than pass the iterator around, pass the object with [Symbol.iterator]. Calling that returns a new iterator starting at the beginning. Alternatively, you could hack it so ittr[Symbol.iterator] returns a new iterator, but that might be a bit weird.
well played PHP
Use what suits your use case best. It depends a lot on the project at hand, you might not need all the features of angular for a given project, but for an other, you might benefit from them. I have used Angular at work, because it gives us the most benefits for that particular case. For other project, some other framework might make sense instead.
Everybody is. Most of the good programmers go for backend, and there's a shortage of good front-end programmers. As a frontender, it feels like being a hot blonde at a bar. 
Will check ESNext out, thank you
The switch would be annoying but not impossible, will give it a good think, thank you.
What? Writing a select implementation is not easy. Look at this guy's [text area implementation](https://github.com/barmalei/zebra/blob/master/src/ui.TextField.js). It's already 900 lines long and he still doesnt have automatic line breaking, proper up/down arrow line jumping, double click word selection, alt-shift-arrow incremental word selection, etc..
Why not learn both as well as Angular 2 when it comes along? The experience isn't going to go to waste in terms of forwarding you as a JavaScript developer. Becoming moderately productive in each framework isn't a huge time investment in my opinion.
Did you evaluate 6to5? ESNext still doesn't seem to support `let` which is a bit of a bummer.
I thought people are leaving PHP for Scala these days.
Cobol on cogs
I get job offers for angular roles every day still. I think it will take a while for anything to change.
2.js
Haven't used eloquent but I'll recommend Head First and Jon Duckett's JavaScript and JQuery if you think you need something different. HF a little more simplistic in its presentation and probably doesn't go as deep as ducketts book but both are good imo
&gt; four of node's five biggest contributors are moving to the new fork creates a big uncertainty as to node/io's future. It's all about the money. A lot of companies are trying to monetize the ecosystem now, and some see Joyent in the way. Despite the rhetoric, that's what it really boils down to. On the one hand, I like that the node ecosystem is getting yet more investment. On the other, I really detest the drama it's causing as they fight over pieces of the pie. Overall, I think this might be the beginning of a bad thing. Joyent was about as benevolent as it's possible to be, since they seem more interested in making their money in the datacenter. With the new players we run the risk of repeating the UNIX wars.
didn't hear about 6to5, looks great.
The Ember.js website has a self-submitted list: http://emberjs.com/ember-users/ NBC News, Freshbooks, McGraw Hill, and Yahoo are a few others off the top of my head. At a large company you are likely to find a number of different JS frameworks in use, just as you would find a number of backend technologies and languages.
If I were asking myself the same question: 1. Is there a job market for it? What is the trend? 2. How do I feel personally about it as a framework? re 1: I think there are good job prospects with it, but they're quite tied in to the framework, and they seem to favour certain sorts of work. My experience is that it seems good for rapid prototypes and internal tooling - but starts becoming a bit clunky on more design led projects. In terms of job market, Backbone is still huge because (like PHP) it got bedded in at a lot of companies. Ember's not quite there yet IMHO (despite it's technical merits). re 2: Angular is pretty marmite, some of it is awesome but it plays pretty badly with other tools out there and it locks you in on account of it's very idiosyncratic approach to development. I've used it before, I grudgingly admire it, but I probably wouldn't pick it for a new gig (I'd use React + something*). Personally, I'd probably check out Backbone first if you've never tried MV*, it's very easy to pick up and give you a general overview of the problem domain, then take a look at Angular/CanJS/React+Flux to see how they have evolved from that point. * ReactJS is a great new technology, but there are no mature frameworks built using it yet, so you'll end up rolling your own pretty sharpish, or doing some sort of welding job into an existing one.
I know. That's why they mostly suck. Although there is a project, Medium.is, that apparently aims to wrap contenteditable in a sane way. I haven't used that particular library, though.
While we're talking about switching: consider React. Or Polymer if you don't care about legacy browsers. The great thing about those is that because they only deal with the V in MVC, you can actually use them inside existing AngularJS code.
IMO it's not worth investing in anything in Javascript except for Javascript it self. Why? Because each technology (framework) is replaced by something better almost each year (if not less). Some time ago backbone.js was on fire but then came others, Ember, agnular, etc... Now it's react that makes a lot of people change their preferences, soon it will be angular v2 (maybe) It used to be grunt as de facto build system for frontend, now more and more moves onto gulp. Frontend development is not about knowing single framework it's about knowing what frontend development is overall and the only thing that has not been changed yet is Javascript, even though ES6 is coming it's still the same Javascript. You can't and should not invest in one or another framework. Unless you are working on a project (and you are tied to some framework) don't bother learning something from A to Z just analyse how one framework does something compare it to others. You can't invest your time into single framework and expect that it will earn you money for the rest of your life. Right now angular is still pretty desirable skill so for 6 months to 1-2 years I believe you wouldn't have enough work with angular but definitely more (and better) frameworks will appear and that might change.
Yes, * 2.0 is still a long ways off * 2.0 is putting a big bet on ES6 being production-usable soon - or at least having good enough compiling with Traceur * 1.x will still be supported for awhile after 2.0 is released * Even once ES6 is 'production ready' for more of a consumer level - until Enterprise environments get fully onboard with evergreen browsers and don't force older versions of IE onto people - there will be a number of apps that won't be able to make the move to 2.0 for awhile, so there will still be demand for 1.2 apps for awhile - and there is an increase of 'enterprise' applications adopting Angular. * Some of 'crappy parts' of 1.x are getting killed in 2.0, and if you follow some 'good practices' - and avoid heavy reliance on those crappy parts, it will be easier (not trivial) to migrate once available * 2.0 feature set is still not set yet, so while it won't be a 'drop in replacement' - there is still a good chance of there being a viable migration path a TL;DR of 'how to not completely shoot yourself in the foot': * Minimize reliance on $scope, avoid it as much as possible - same goes for $rootScope * Use 'controllerAs' syntax ('if I don't have $scope, how do I get things up to the view? - controllerAs') * Keep your controllers as thin as possible - it should pretty much just be glue to your services, no business logic/etc. * Put as much as possible into services Following that - you can get a rather large part of your application that is looking like 'vanilla js' - that is not heavily reliant on Angular, and can make it much easier to re-use parts of that code without Angular, and could be used in other frameworks, on it's own, etc. 
I'll have a look at it.
Just informed for you. This should not be a problem. If you can talk code thats good enough. 
Does his name Dongface hinder his chances :P 
Great. Thanks guys I looked into Three.js and is actually not that hard to get started. The only issue that I have now is how the coordinate works. For example in 3D world Z is up but with Three.js Z is deep and Y is up. Am I doing something wrong? Also if I create a simple cube var cube = new THREE.BoxHelper(); cube.material.color.set( 0x9933FF); cube.scale.set( 5, 25, 5 ); cube.position.set(0,0,0 ); scene.add( cube ); var gridXZ = new THREE.GridHelper(5000, 30); scene.add(gridXZ); cube.position.set(0,0,0 ); is placing half of the cube under the grid and the other half on top of the grid. Why is that? should not 0,0,0 be placing the box just on top of the grid? Thank you 
You're going to have to explain your thoughts on promises. I think they're the best solution to writing async code after C#'s `await`, and a native implementation means less libraries and faster loading in the client. What else do you use? Nested callbacks? The async library?
No, unless his actually looks like a dong but that will probably increase his changes ;)
1) Backend stack doesn't matter too much. All it has to do is pump data to the client - as long as it can do that it's fine. 2) IE8 will be dead ([officially unsupported](http://support2.microsoft.com/lifecycle/search/?sort=PN&amp;alpha=internet+explorer)) in a year: &gt; Beginning January 12, 2016, only the most current version of Internet Explorer available for a supported operating system will receive technical support and security update This means only XP (again, dead) will be the only OS to support IE8. Just something to keep in mind. 3) Theres libraries out there to do the client side caching you're looking for such as [Breeze.js](http://www.getbreezenow.com/) 4) Keep your pages responsive from the start - will make using them on a phone easy. 5) Make sure to have a solid javascript foundation. These frameworks are to augment what's already there. If you don't know the basics it's going to make using a framework much more difficult and make things seem like magic. That being said there are a lot of valid libraries out there. As for full fledged frameworks [angularjs](https://angularjs.org/), [emberjs](http://emberjs.com/), and [knockout](http://knockoutjs.com/) + [durandal](http://durandaljs.com/) are all good. I personally like angular even with the 2.0 backlash. Then there's smaller libraries like [react](http://facebook.github.io/react/). You can pair this up with other libraries to build a SPA. Hope this helps.
I understand IE8 will be dead in 13 months. Right now we're running some business-critical software which only supports IE8 and I don't know the timetable for replacing that or what the replacement will support (new version, same vendor, they're...slow to adapt to reality). This is a constraint I have to live with for now. I think the big piece I need to get filled in here is which library for doing the data binding to the table that I ultimately present to the user.
[**@addyosmani**](https://twitter.com/addyosmani): &gt;[2014-12-04 15:30:10 UTC](https://twitter.com/addyosmani/status/540528497039380480) &gt;ES6 Object Literal Extensions in Chrome: shorthand properties &amp;amp; methods will save keystrokes! In FF35 &amp;amp; IE \(TP\) too. [*pic.twitter.com*](http://pbs.twimg.com/media/B4BQl6uCEAA41HE.png) [^[Imgur]](http://i.imgur.com/2nsqbUl.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2o9nms%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
If you just need to handle something like binding, react or knockout would be more than enough. All of the libraries/frameworks listed above support data binding in some way.
Sure. But the point is, do companies like Facebook, Twitter, Pinterest (but also smaller ones) use a javascript framework? Are they tested in large production apps?
Sure. [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) has a much better write-up. Categorically throw out anything from W3Schools.
&gt; Okay, that's Hacker News. But as much as I like Hacker News, it doesn't end up finding jobs for all that many people. Maybe so, but quality is a huge consideration over quantity here. I don't really care what most people are doing, I want a good job.
I use generators. run(function*(resume) { var x = yield db.call(resume); var y = yield db.call(resume); var z = yield db.call(resume); }); I have this one function that talks to the UPS API, and it does a lot things between making 3 calls to UPS, making PDFing calls, sending emails, making database calls. And the promise waterfall was unbelievably complex. Once I switched the code to generators, I save 63 lines of code that were only there b/c generators, and it's soo much cleaner. 
I'm in the process of making a YT video about this exact thing, when it's done ill let you know.
I don't know. I agree with the forkers that the lack of releases was causing instability, and though I know nothing elsethat Joyent has specifically done wrong, I also have heard nothing from Joyent to explain that big glaring problem. Perhaps four of the top five contributors know something about Joyent that I do not, but it's kind of a moot point. If they can deliver working software and regular releases then I am certainly on board. (For that matter if Joyent were to do the same, well, then I get a choice. I am definitely down with that.)
I agree, that seems like a terrible idea. Basically anytime the upside is "save keystrokes!!!!" it makes me want to jump off a bridge. Fuck your keystrokes, the rest of us have to read and debug your stupid shitty code.
Because eugheuhgh corporate governance! (People are so annoying yo, especially developers.)
Yea, seriously. Its 2014 (almost 2015) and we're worried about saving keystrokes? WAT?! Any decent text-editor/IDE should be able to autocomplete something like this, or at least template it. To create such implicit runtime behavior just to save keystrokes seems like a horrendous idea. Its going to make catching bugs much harder, definitely.
&gt; You will be working in our front-end scrum team Ugh. I'm actually looking for a job, either as front end or back end, but I will not now not ever be part of scrum again.
Just because somebody took 900 lines to do something doesn't mean you can't do it in less. Easy is relative. Selecting text comes down to: - Track the active UI Element (should be part of your framework) - determine element scroll position (same as above) - determine text position (including line breaks) with canvas's .measureText method (can do this with a loop in a fairly straightforward way and then cache the result in an array until the text dimensions change, if they do) - add click handlers to get x, y of mouse on mouse down, mouse move, mouse up and draw appropriate rectangles behind rendered text layer I'd argue that, conceptually, this isn't very difficult. Your line heights should be identical for every row of text making determining the y offset of the text relative to your mouse position easy. I mean when it comes down to it you're just drawing rectangles. ;) (though I guess when it comes down to it in programming, you're just smashing a keyboard and things are happening.)
W3Schools is a terrible "resource," often for this reason -- they rarely adequately explain things very well and are frequently flat-out wrong. In this instance, they get the possible return values right, but their descriptions are pretty far off the mark. See the Mozilla Developer Network's [entry](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Methods) on this for a better description. The return values from canPlayType() are pretty stupid, though, I'll admit. It's a function that answers a specific question with one of three answers. I can think of three useful return values for this, and they aren't strings. - 0: Nope. Browser thinks this will crash, eat babies and kill kittens. - 1: Maybe. Browser's willing to try it. - 2: Yup. Browser thinks it's all good. Most of the time if you're actually in a position to be asking "can you play this?", you're more interested in a yes/no answer than in the finer distinction of whether the browser thinks it's a good idea or not. So, if the function returned 0, 1 or 2, you could treat it like a boolean in most cases. "Hey, can you play this?" If you say "no," I don't try to play it. If you say "yes, and..." or "yes, but...", I probably don't care about the rest of your answer, and I'll just try to play it. Why they thought "probably", "maybe" and "" were reasonable return values is beyond me, though. That's pretty nuts. _Edit: /u/altintx beat me to it about W3Schools. What he said :)_
&gt; I was hoping for it to become popular among node.js/io.js developers in the open-source world. So far it has been slow. Your git repo is less than 3 weeks old and you have over 120 github stars. What are you hoping for?
Good answer. Think of it this way...frameworks contain other people's design patterns and shortcuts they developed while learning/using Javascript. By starting out with a framework you are outsourcing a chunk of your learning to someone else. You are saying, "hold my hand while I get this done because I really have no idea what I'm doing." It becomes a matter of plugging your functionality into the framework properly, and keeping *the machine* well oiled. What happens is that you get people who start using Angular and they go on to invent all kinds of weird design patterns and hacks on top of Angular to "make it work" or bend to their will, when they are probably just doing it wrong. You end up learning the detailed intricacies of a framework instead of learning *how to code design patterns yourself and turn them into a reusable system*. Isn't that what programming is all about? But if you just want to get work done, try a framework.
I ubderstand the majority, but big things such as creating tables in secret life of objects is a bit too complicated)
Well the took a free interpretation of scrum, yes we work in cycles but we do not obey to subtle control of management. We just use it as a ticket system.
When your company enforces an 80 character limit per line, a few keystrokes can make a difference.
Well, this got 1000 in two days, https://github.com/gajus/swing. : )
... wrap the line
Do post it to this subreddit!
Don't put your contradicting opinion in the title. Write a blog post or submit a self post.
The spec answers that question. https://html.spec.whatwg.org/multipage/embedded-content.html#dom-navigator-canplaytype
Wow. A lot of great logo designs. 
Removed, /r/javascript is not a job board.
&gt;You can't invest your time into single framework and expect that it will earn you money for the rest of your life. I agree with this. &gt; don't bother learning something from A to Z &gt; it's not worth investing in anything in Javascript except for Javascript it self. I do *not agree with this.* Learning how a framework, or multiple frameworks operate on a deep level is **only going to help you**. Even if a framework becomes obsolete, you will learn the next one more quickly having "learned how to learn" and noticing patterns emerge across many tools. Actually learn stuff. Don't simply adopt a highly topical "window shopper" level of comprehension of tools. Dig in.
You should know that your comment comes off a bit insulting and obtuse. Of course it's conceptually easy but that doesnt make it easy overall. I suppose you think building the great pyramids was easy? I mean it's just stacking blocks right?
Learn Requirejs. Learn Reactjs. Learn knockout. Learn the new promise API. Learn functional programming techniques. Do *not* rely on jQuery too much. Learn to build front-end applications without utilizing too much of it. I would not bet too much on Angular. I don't see it as the future.
Not my intention! Just being playful. Not everything has to be difficult or a fight. :) And c'mon. Writing a module to select text isn't exactly building pyramids (you'll also notice I made fun of my own comparison in my comment). Lighten up.
It's probably because it's so confusing and the documentation is so bad that people are constantly hitting walls and so have to ask tons of questions.
Thanks and the cool thing now is TL;DR =P 
I disagree with most style guides. I prefer autonomy of the developer over consistency across modules within a project. Or to put another way: - I hate being told how to format the code I write down to the letter. - I respect others to make their own decisions about formatting like I do in our respective sections of the code base. YMMV: We use Strong Ownership in our project, so this is admittedly easier to do for us than in a project where the culture demands Weak Ownership or Collective Ownership.
this;
Yea that's a likely outcome too.
http://norvig.com/21-days.html
complain to the directors of your educational establishment? You can't learn all of Javascript in a week - but you could use some of it. What's the actual problem you have to solve?
If he has an automated build then he could do that otherwise he probably wouldnt want to bother with such things :)
Ahh, ya beat me to it! These youngins gotta learn!
I don't mean to be rude but a lot of your questions should be pretty well answered at [wikipedia](http://en.wikipedia.org/wiki/Binary_search_tree). When you say traversal, do you mean doing an in-order-tree walk? An in order tree walk allows you to print out all the values in a BST in order and runs in O(n). It can be implemented like so: Function In-Order-Tree-Walk(Node): if (Node != NULL) { In-Order-Tree-Walk(Node.Left) //Print all nodes smaller than this node print(Node.Value) //Print this node value In-Order-Tree-Walk(Node.Right) //Print all nodes greater than this node } If you call that on the root of your BST you get an in order printing of each item in the BST (Note that this pseudo code is basically ripped off from my Intro to Algorithms textbook). If you meant finding a specific value or finding where to insert the procedure is basically this: Start at the root, is the value we're looking for less than the root or greater, if it's less then we need to investigate the left child, if it's greater we need to look at the right. You repeat this process until you either run into the value or a null which means you didn't find it. In terms of big O values for common data structures and algorithms I'd definitely use wikipedia, it almost always has a listing on the right. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Binary search tree**](https://en.wikipedia.org/wiki/Binary%20search%20tree): [](#sfw) --- &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), a __binary search tree__ (__BST__), sometimes also called an __ordered__ or __sorted binary tree__, is a [node](https://en.wikipedia.org/wiki/Node_(computer_science\))-based [binary tree](https://en.wikipedia.org/wiki/Binary_tree) data structure where each node has a comparable key (and an associated value) and satisfies the restriction that the key in any node is larger than the keys in all nodes in that node's left sub-tree and smaller than the keys in all nodes in that node's right sub-tree. Each node has no more than two child nodes. Each child must either be a leaf node or the root of another binary search tree. The left sub-tree contains only nodes with keys less than the parent node; the right sub-tree contains only nodes with keys greater than the parent node. BSTs are also dynamic [data structures](https://en.wikipedia.org/wiki/Data_structure), and the size of a BST is only limited by the amount of free memory in the operating system. The main advantage of binary search trees is that it remains ordered, which provides quicker search times than many other data structures. The common properties of binary search trees are as follows: &gt;==== &gt;[**Image**](https://i.imgur.com/SnsBnBv.png) [^(i)](https://commons.wikimedia.org/wiki/File:Binary_search_tree.svg) - *A binary search tree of size 9 and depth 3, with root 8 and leaves 1, 4, 7 and 13* --- ^Interesting: [^Self-balancing ^binary ^search ^tree](https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree) ^| [^Treap](https://en.wikipedia.org/wiki/Treap) ^| [^Splay ^tree](https://en.wikipedia.org/wiki/Splay_tree) ^| [^Optimal ^binary ^search ^tree](https://en.wikipedia.org/wiki/Optimal_binary_search_tree) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmlbxor) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmlbxor)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
There's no way for you to learn JS in that amount of time (sorry). Give an overview of your project and someone may be able to tell you the specific gotchas to get you by that project (then take the time to learn the language as it is rapidly gaining popularity).
&gt; the depth of a given pixel on a line can affect every pixel that comes after it in the same line Exactly. You can try it yourself with a repeating pattern of characters. If your pattern has, say 8 characters, when you delete one at some point, you'll get the next 7 characters pop forward one "level". In this example, I'll delete one **"** : !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( If you want less characters to pop forward, then you add a new character inside the "popped up" group to stop the popuppification, but then you have to add that same new character and delete the deleted character in the rest of the groups in that line, otherwise, you'll have some weird artifacts. Right: Deleted the **"** , then added an **X**, and that **!#$%X&amp;/** is my new pattern for the rest of the line. !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!#$%X&amp;/(!#$%X&amp;/(!#$%X&amp;/(!#$%X&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( Wrong: Deleted the **"** , then added an **X** , and then left the original pattern. !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!#$%X&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( !"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/(!"#$%&amp;/( 
You can also read about https://github.com/umdjs/umd . Regards
If it was never taught in class, or in provided reading material, than you &amp; other students should formally complain to either your dean or program coordinator.
I need pictures in a table of an HTLM page to pop out when clicked. I also need to save user answers from an HTML form in a cookie and then have have an alert box pop up after they hit "submit" that confirm their answers.
Ajax with JSON.
I have that part down. It's actually XML, I don't have control over the web service. I'm looking for more ideas on the front-end. 
but he specify said he has a final due next week, which means he doesnt have 10 years.
Service workers have a person 'owning' them (see here: https://wiki.mozilla.org/WebAPI/PlannedWork) however they don't have any progress towards getting a release in Firefox. They are also under consideration at IE (see: https://status.modern.ie/serviceworker)
I presume you intend to call your code through a button with the onclick attribute? Your function is executing onload because you're calling changeClr(); In your code on the last line. Try removing that and it should stop being called. 
that grain is insane!
Seems like you missed the point of my comparison. 
Meteor is not directly comparable with Angular, because it's a full stack framework. It runs on the server as well as the client, so it has to be used instead of or in addition to any existing back-end framework you have. You can actually use Angular along with Meteor as an alternative to Meteor's Blaze templating system (though I wouldn't recommend it). Meteor is also built as a package management system, with dozens of core packages that implement small, modular pieces of the framework. Future changes to Meteor will likely not require a comprehensive overhaul, but just refactors/changes/additions to its individual packages.
Doesn't the ESPN api get turned off next Monday?
cheers utuxia, sure thats not the actual object or values , just what im trying to accomplish. I dont want to push an object to my array , just the values of the properties. Actually each property is an input on a form and the value is "some text" + the value of the input. This make sense. Thanks again
If I did I'm thoroughly confused. Are we poking fun at Mr. Hates OO? Or am I totally lost. Forgive me. :)
&gt; I agree with the forkers that the lack of releases was causing instability Is there some actual evidence to support this claim? Is 0.10.33 unstable? I've heard some claim about V8 being old in the 0.10 series, which is anemic, since actual stability trumps theoretical. The thing about the forkers is that they were committing to node too. If there was a problem with node's releasing, _they're part of that problem_. Joyent isn't holding back 0.12 just because. So if there's a sin, they're just as guilty. No, this is ultimately an excuse; the aforementioned rhetoric. Any excuse will do, if people believe it and thus they can wrest node's future from Joyent, because money. What you're seeing is just the latest manifestation of what's been going on for a year or so now.
Very cool hah I remember in college someone did something like this for a simulation project. Yours is way better though :)
it would be nice to know the performance compared to other JS libraries. I understand that cannot compete with V8 but just to have an stimation would be helpful
But doesn't that rely on promises? The values you're yielding can't be the actual result unless the db call ia synchronous, and you're not passing callback functions... 
I have used jQuery, got any recommendations on good sites with lessons?
It looks like it's been the top skill at several points over the last couple of years. Its rise in the 18 months also mirrors that of many other languages listed on HN... I think this graph is a little misleading because it's an absolute number of references, not a percentage. 
I got bored today and decided to make this, I find my self slinging balls off eventually making an accretion disk, and then watching the mass of balls just orbit each other for 20 minutes. EDIT: I probably mathed wrong.... if anyone cares to check it. It feels "off" but it is fun to play with.
The shortcut for .querySelectorAll(selector) is $$(selector). (Sorry for the month later orange-red, but figured it would help!)
I've been using Backbone/Marionette for a front end Single Page Application that I am currently working on. It is a huge project, so the MV* structure that backbone can provide is nice, especially when it comes to the way it handles view templates and eventing. It allows responsive page design that doesn't need to be refreshed and works well with jQuery. I also recently built a smaller application similar to what you are describing in react and it was relatively easy to pick up and use. I understand it is similar to Angular, although I have no experience there. If you are looking for a small front-end framework I highly suggest giving react a look, otherwise you should try out Backbone (and Marionette if you want more of an MVC approach).
We've come full circle now that browsers are looking at jQuery for API inspiration.
I can't handle the commas at the start of a new line but can see how they make sense I guess , is this something I'll need to get used to?
yea I got that. its the same notation thing i dont understand. Im not asking you to explain it, ill no doubt come accross it more as i learn js cheers!
Removed, /r/javascript is not a job board.
This has already been blogged about 1000s of times already. With ES6 modules, CommonJS w/ browserify, and even requireJS... this entire approach is becoming increasingly irrelevant and backwards.
Can mods just remove these posts that have nothing but the name of a new hipster JavaScript library in the title?
Your actual stability is my actual core dump. I had a different experience and was very actively looking for Node alternatives. I'm very ready to consider this one on its merits after they get their first release out. 
For clarity, foo.x is the same as foo["x"]. The quotes are important.
woops, my bad. YES! Sorry for the typo
The only times I've seen node dump core since the 0.1 era was due to heap limitations (e.g. deserializing massive JSON files). If you have core dumps, I hope you've submitted a ticket. As for io.js, yeah, we'll see. Hopefully my fears are unfounded.
Well, I got distracted by how out-of-date things were after that core dump, and when a little Googling led me to think that I could probably fix it just by building a .11 version of Node from scratch - which, incidentally, I did not want to do... well, no, I did not submit a ticket. To be clear, I can't address whether your fears are unfounded at all. I can only say that, to me, the forkers' stated motivations seemed legit.
var balance, withdrawal, newBalance; balance = 1000; withdrawal = prompt ("enter withdrawal amount here"); var newBalance = balance - withdrawal; if (newBalance &lt; 0) { alert ("withdrawl denied"); } else { alert ("withdrawl accepted"); }
why did you put ** in the conditional part of ( newBalance &lt;0) ?
That was the issue! I accidentally left it there.
Got it! Thanks a bunch :) Just one question--how can I add more text to the alerts on a different line(Like if I were to hit enter on a word document)? I cant remember the tag for it.
Fuck that. My own repo is approaching 4 years old and has only 250 stars. But, I also get more than 20000 downloads per month on NPM and 16500 visits per month to the tool online. My number is stars is low relative to the rate of consumption, but people actually use my software. Businesses use it in their build processes and other tools uses as a build dependency. I looked up swing on NPM and it appears to not be so very consumed. I think the problem here is that: * You are setting unrealistic expectations. * You are not defining valid success criteria.
You can use lodash for this, https://lodash.com/docs#values, var a = { prop1: 'test1', prop2: 'test2', prop3: 'test3' } _.values(a); // ['test1', 'test2', 'test3'] It's stupidly fast.... Here's how it's done there : https://github.com/lodash/lodash/blob/master/lodash.js#L2668-L2678 `keysFunc` in this context is basically a wrapper to Object.keys
Calling this a "js library" is such an understatement. 
This thread has been linked to from elsewhere on reddit. - [/r/Citybound] [JS traffic simulator](http://np.reddit.com/r/Citybound/comments/2oc545/js_traffic_simulator/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
&gt;Never do client side validation &gt;You can check it in JS as well Maybe a better way to say what you said would be to just leave off the first part. &gt;You said this is for an introductory class so I feel the need to tell you this. Validation should always be checked server side. You can check it in JS as well, but you still need to recheck server side.
I've never seen anyone use \r by itself. I've seen \r\n, but most people just use \n. 
His point was that the title should be like what you said: Duktape - an embeddable js engine, written in C.
Having a policy to put a description in the title would be great. Until then, there's no way such an interesting link should be removed.
I wonder if they also use stuff like mouse movement patterns to determine if you're likely to be a human 
Who codes unresponsive apps nowadays.
This is good suggestion. 
Pretty sure they do.
Oh they'll still exist - seems to me like this is easier than ever for them since they are indeed humans.
The drag interaction is nice but not friendly... because of the navigation in the way. Maybe a mouse move would be better? Edit: wait... are you altering it as we speak? It just grew... how bizzare.
For me the reason to use JS is because the sintax is closer to C++ than LUA, and C# is too bloated.
Nope, they dont try to drive to the same place everyone :)
What would you do instead? I don't think this is an anti-pattern at all. In the above code, yes you create an object with a next method per start-of-iteration. If you return an instance of a WordIterator class, you're creating an object with a next method per start-of-iteration. The next method could be on the prototype chain, but that's a micro-optimisation given the circumstance. Too much attention is given to the looping method when it's the inside of the loop that usually eats more cycles.
There's a lot of progress in Firefox. Work is being done in a branch &amp; it'll hit the nightlies soon.
But are they dancers?
That's it. \n. 
Mas this is awesome! Really great :D Grats! 
Funny how you're upvoted and I'm downvoted. It's exactly my point.
Thanks for the explanation! So with the method you describe, you need not only an initial pattern (`!"#$%&amp;/(`, in your example) but also a reserve pattern, from which you'll draw characters (such as the `X`) when you need to reverse a popuppification. Right? I assume this is just because of simplifications you made to clearly explain why “a pixel affects subsequent pixels”, though.
I am also looking for this. There is much scientific code written in Fortran and it would make sense to offer some bits as webservices with a simple API. To have the calculation run in the users' browsers instead of on the server would make hosting much easier.
Is this real? It sounds reasonable enough, but I've never heard of it. 
Because you just complained and provided nothing useful, and managed to be a douche as well. He provided an alternate title.
Swing is frontend package. NPM is there only for convenience. Not sure how to check the number of downloads on Bower, http://bower.io/search/?q=swing.
It expands what you can do with a markdown document, e.g. adding {"gitdown": "contents"} anywhere to your markdown document will generate table of contents for that document.
Huh, they seem to have a strong tendency to change lanes immediately after going straight at a green light. Seen a few instances of both cars in each lane changing lanes simultaneously into each other right on the other side of the intersection.
It still asks the scrambled text after I click "I'm not robot". Perhaps I need a ct scan
Not possible on mobile sites. I heard suggestions that it may rely on all the other data that Google has harvested about you, eg. Google Plus account, surfing history as gleaned through Adwords, Android activity that you've agreed to be tracked on, etc etc.
I recommend the hack approach: 1. Open the jquery api documentation in a tab http://api.jquery.com/ 2. In another tab open google and search for specific stuff for your project i.e: 'how to make a table' / 'how to put pics in a table' / 'jquery how to click a picture' / 'jquery expand picture'. Anyhow, have a quick look on jquery ui and bootstrap too for popping out pics (modals) Good luck
I too broke it within 10 seconds, however you don't actually have to cross the intersections - it seems like just pulling one more than ~5 squares away will do it.
Been staring at and playing with this for ages.
You might want to look into Websockets for the larger projects that require a lot of database i/o. Sorry, this still doesn't answer which framework is the best. I'd like to know that too. I've been a vanilla JS person so far.
I-m gaving some trouble around here: http://i.imgur.com/HnhGv4b.gif
You only really need to know this stuff if you're designing systems that handle large data sets. I'll admit this is the dry academic part of programming and I certainly did fine without it for several years of my career.
Yup, asked me for traditional captcha when I visited in incognito mode.
I think I was a bit vague there, sorry! I'm not looking for a new position; just recently started in a new place I quite like. You guys do seem like you'd be good to work for though. :)
I think that's how it MUST work. particularly considering how they'll still make you do pattern matching on mobile.
*Right there*. That is the problem. With your swing package, I open the repo and I instantly know what it is about and what it can do. The problem with the Gitdown readme is that I have to read at least half of it to know what it is about and what it can do. The initial blurb &gt;Gitdown is a markdown preprocessor for GitHub. Gitdown streamlines common tasks associated with maintaining a documentation page for a GitHub repository. doesn't really tell much. The first thing one thinks is "uh? Github already renders MD, doesn't it?". And yes, I know Gitdown is not about rendering MD at all, but that is what people probably think at first. Then they may think "mantaining a documentation page? sounds like the Github repo wiki thing or something". It is not clear at all to which kind of *common tasks* you are talking about. And that is all the information one gets until they go down past usage, configuration, syntax... and finally get to features. What you need is a better introduction that explains in a short but complete way what is this for exactly. Also, is this actually tied to Github in any way? I mean, does the generated MD contain features that can be used only on Github? Note: it could also be that people don't find it useful, of course.
Hey there - I'd suggest using jsfiddle or something so that we can have a play around and see if we can get it working - I did have a little look though, so hopefully this is what it is. I believe the source of your problems is the for loop from line 183-199. What's happening here is you're firing off CompRun(), which then triggers the buttons - which then show on the screen and record to whichever array is suitable, based off: if(game.playerTurn &amp;&amp; game.init) { game.player.push(i); }else if(!game.playerTurn &amp;&amp; game.init){ game.computer.push(i); } The issue with this is that game.playerTurn will almost always equal true because setTimeout works asynchronously (it doesn't wait for the timeout to finish before it continues with the code). So the code will run through your entire for loop (line 183-199) before it even triggers the button pressing. When running through the last iteration of the for loop it sets game.playerTurn to true (line 193). A second or two later your code then triggers the button press which will evaluate the if statement above to true even though it's the computers turn. I hope this makes sense! If you make it into a jsfiddle I can help fix it up for you :) I've also got a few suggestions - don't capitilize functions if they're being used as normal functions- constructor functions are capitilized. Work on making some of your code less repetitive (line 58-118 for example). No need for the while loop on line 129. There is no need to set this.numBeeps on line 51 (this would only be useful in the context of a constructor function or object). When comparing numbers use tripple equals === instead of double ==. It prevents issues when comparing true/false Hope this is of some help! :)
I found this... oddly satisfying to dink around with. Would enjoy being able to draw my own roads, not just drag them around. Could be a neat extension of what has already been done. Have a toolbar with "road" and "intersection" parts that would let you connect them all together and create your little town or whatever. Nice work on this so far. I dig it!
After logging into the demo I see a 404 and no actual content to view or manage, nor do I see a place to create pages.
You can create roads! I completely forgot to mention it:( from https://github.com/volkhin/RoadTrafficSimulator: Mouse and wheel - scrolling and zoom shift + click -- create intersection shift + drag from one intersection to another -- create road
Great job
Sweet - maybe post a comment on your r/learnjavascript post letting people know it's been resolved (if what I've told you does fix it up).
Never trust client data. Whatever client-side script may or may not have done with it, data must always be validated server-side.
Now I get 502 Bad Gateway :( 
I disagree. With the old captchas, if you could type the numbers in, you passed. That's easy for humans to do constantly all day, like the spam companies do. The new method will be harder. It will know if you are signing up to hundreds of sites a day because it appears to take a much more holistic approach. It's not just about if you can type in the letters, but everything else Google knows about you goes into to deciding if you pass. I think that'll make life more difficult for people that sit there all day churning through captchas.
What a sane, rational response to these recent events. The commentary on /r/programming has just been mis-informed and childish. I hope with this fork brings more stability, features and interest to the platform as a whole 
'/r/javascript' !== '/r/programming'
Thanks for agreeing with me.
Good post, thanks for sharing.
Very level-headed response -- and as it points out, as a whole, this whole io.js thing has *also* been pretty level-headed. I'll be honest, the initial news really worried me ("can I still justify using Node to my boss's boss's boss?") but this is reassuring.
I really like Durandal. Check out John Papa's Hot Towel SPA Visual Studio template. http://www.johnpapa.net/hottowel/ You can also checkout TodoMVC to get a feel for the variety of MV* frameworks. http://todomvc.com/
 (["Node", "IO"])[Math.floor(Math.random() * 2)] + ".js" FTFY
Awesome. Will give it a look.
Does it have the capability to export settings and content that were entered in the UI and import them elsewhere? For example, in a CI process, automatically moving content and configuration through environments.
Thanks for heads up. I actually forgot to remove the user = userModule reference. Fixed it in the blog post now, so it won't confuse anyone.
No. I'm not proficient enough in JavaScript to write anything without reference code. I can write HTML and CSS, but what I'm trying to do neither of those languages can accomplish. My problem, and what I don't know how to do, is how to affect img 2, 3, and 4 when I hover over img 1. I found some code earlier that got me close but no cigar. If I hovered over img 1 I could change the img 2 3 and 4, if I hovered over 2, 3, or 4 tho I was unable to affect the images that came before. For example if I hovered img 3 i could only change 4 and not 1 and 2. 
That's true. But I like to write blog posts with my own words. This is a start of blog post series about patterns. And yeah, that's probably been written about 1000 times before.
I'm not sure what the first name of this pattern was. But I know it's called module pattern pretty much everywhere.
Yeah, I know. Perhaps I should write a blog post doing that also.
 (Math.random()&lt;0.5?"Node":"IO")+".js" (golfing, sorry)
http://css-tricks.com/sublime-text-front-end-developers/
I you a [small reference code](http://jsbin.com/sevexotigu/1/) that you can modify and try to understand. If you don't know what a function does look it up on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript). If you don't understand why/how it works, just ask. Edit: You should look at the CSS-only solutions provided in other comments. If you can solve a problem without JavaScript it's usually the better way. I feel a bit stupid for not thinking about that.
&gt; (Math.random()&lt;0.5?"Node":"IO")+".js" Gorgeous. A thing of beauty. Although it could be optimized just (Math.random()&lt;.5?"Node":"IO")+".js" Even that's cheating, though. God damn.
&gt; If node never releases again, we're stuck with the single-thread event loop, an API that is quite verbose, an IO streaming model that can bite you in the ass. Whether these criticisms are valid is debatable, but I don't think there are any plans to change these things on either side of the fork. Can you elaborate further on each item?
If the fallback for this is the old style captchas... And if you have no cookies you get the fallback behavior... Whats to keep the bots from just turning off cookies and doing it the old fashioned way?
Don't forget you can do nested modules as well to help prevent module pollution, since that will be the next issue. With nested modules it essentially becomes almost a proper class. (function(){ var module1 = (function(){ var submodule1 = (function(){ function method1(message){ console.log(message); } return { method1: method1 } })(); return { submodule1: submodule1 } })(); module1.submodule1.method1('Hello World'); })()
*slow clap* I just learned something. That's not cheating; that's a winner, sir.
No... for this I am trying first with an already existing game. On the side, I´m working on different games and different engines, and most likely will buy Impactjs next week. This one is a simple js, a css, and the html files with a few images.
SublimeLint along with SublimeLint-jshint
They don't seem to like anything that isn't C/C++ because it probably isn't hardcore enough for them. :(
http://mcdlr.com/i/fork-off.png
I made a mistake and wanted to delete a road.
(Date.now()&amp;1?'Node':'IO')+'.js'
 Date.now()&amp;1?'Node.js':'IO.js'
[css version](http://jsfiddle.net/9vs912hy/) doesn't work in ie8
Nothing wrong with reinventing / re-explaining the wheel, as its a great way to learn, but start with the patterns that are actually relevant today and going forward.
For your first question, preload all your images with their urls and have an object that contains the url corresponding to the actual image object. Something like var images = { 'images/ships.png': null, 'images/particles.png': null, 'images/enemies.png': null', 'http:/www.someimage.com/blabhablahb.png': null } for( var url in images ){ var img = new Image(); img.src = url; images[i] = img; } //then wait for all images to load before you start your game Now you can place the url of the spritesheet that contains your sprite into a new field called 'url' for each sprite you have defined above: var sprites = { ship: { url:"images/ship.png", ... }, ... } Then when you go to draw the sprite you can indicate what image the sprite is actually contained on. var image = images[ sprite.url ]; ctx.drawImage( image, sprite.sx, sprite.sy, sprite.w, sprite.h, x, y, sprite.w, sprite.h ); I'm not certain what you are asking for your second question. If you want to draw images as controls, then get rid of those 'draw_square' calls (whatever they do) and replace them with your own draw_image function, passing in one of your preloaded images from above.
Thx man! I will keep looking because it seems like I have a lot more to learn before I understand half of what you are saying!!
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Thank you so much, will begin cram session NOW haha.
there is module pattern and revealing module pattern, see my other post.
funny, I tried to search walmart on black friday and it was really sucky, now I know why :)
The `.then()` method doesn't act as a Promise. Most people will expect it to so you may want to change that.
A good number of JavaScript tools (read: require.js, angular.js, etc) have levels of indirection that make code completion extremely difficult... I haven't seen an IDE do a decent job at all. Basically: don't try to make it like an IDE; make it more productive for you. Head on over to [Package Control](https://sublime.wbond.net/) and take a look around for the things that will work for you. Here are a few of my favorites: * [DocBlockr](https://sublime.wbond.net/packages/DocBlockr) * [Sidebar Enhancements](https://sublime.wbond.net/packages/SideBarEnhancements) * /u/a0viedo 's suggested SublimeLint + SublimeLint+jshint Hint: Try searching 'js' in addition to 'javascript'- there are a lot of interesting tools and tons of snippets for specific libraries that'll crop up that way.
&gt; vascript: jsfiddle is the most annoying site on the web - jsbin &gt; jsfiddle
I just died a little inside.
Agreed. Been frustrated with the threads there. But it seems like *everyone* on /r/programming hates node and wants it to fail. Im not a node evangelist, I just don't understand why everyone feels so strongly. Is it just because its a hip new language with a lot oh hype?
I don't think this release indicates that the old way is less effective, just that this is easier for humans. 
I really really want to use generators but for the life of me can't find a use
If staying up for 72 hours consuming copious amounts of coffee and munchies counts as physical activity lol (hackathons)
You named all the one's I use. Here are the ones that are not really JavaScript oriented, but are nice in general: - Dayle Rees Color Schemes - Theme - Soda - Less - Emmet - Color Highlighter - OmniMarkupPreview (nice for Github README)
Languages must advance, or they will stagnate and die, with almost no exceptions. If Node.js doesn't keep up with the EcmaScript standard, it will die as a platform. Period. Full stop. If you look around, you can still find legacy code that uses Pascal, but that's what Node.js would become: legacy code. Also, pointing at C++ as a fine but stagnant language, just doesn't hold water. True, C++ went unchanged for a decade, but C++ is in a different position than Node.js is, AND C++ is starting to add new language features at a good clip with C++11, and now C++14. Node is fairly niche, so if we are talking about stagnation for a decade, we will start to see lots of security bugs that no one will fix on what has become a dead platform. And that's not to mention the huge performance penalty from having such an out of date compiler. There is still a lot of (relatively) low-hanging fruit for JS compilers, and so seeing a 50% performance improvement in a decade would not be surprising.
You can just do: div:hover &gt; img:not(:hover){ opacity: 0.4; }
I really like the logo! What are the advantages of using Popsicle instead of some other HTTP request library like [Axios](https://github.com/mzabriskie/axios/) for example?
&gt; I don't believe there are any plans to change the single-thread event loop, but I also wrote that from the perspective of "no node release ever again." Since that isn't happening, that leaves room for multi-threaded or multi-process JavaScript run times. I don't understand this. Javascript will never have any concept of a "thread" for the user, nor should it, it would be an insane change that would introduce a whole host of issues for the user. That is why there is an event loop... the model would break if the VM:EventLoop ratio wasn't 1:1. This doesn't mean that javascript implementations can't use "threads" under the hood. A lot of asynchronous stuff (e.g.. file IO in NodeJS) is delegated to an external thread or process of some sort.
Look at the x2js library. It converts XML to json very easily. Only limitation I've found is it doesn't support tag attributes. 
May I ask why you're curious? 
All of what you said is completely irrelevant to [the point](https://github.com/iojs/io.js/issues/28) of io.js in the first place; io.js is mostly concerned with pulling in v8 updates quicker than Node, and using semver. It's not about bloating features the way C++ has, it's about keeping current with optimizations. &gt;Languages must advance, or they will stagnate and die, with almost no exceptions [...] if we are talking about stagnation for a decade, we will start to see lots of security bugs that no one will fix on what has become a dead platform I disagree. Language features are something to be largely avoided. *Libraries* must advance, but *languages* should support libraries - not try to replace them. JS has a leg-up on a lot of other languages by being so spartan with the breadth of its syntax, yet allowing an excellent amount of expressivity. Better yet, Node has been experiencing an explosive growth of its library ecosystem and enterprise adoption - one that shows no sign of stopping. And that leads directly into security - the smaller and more bulletproof your core runtime is, the less attack surface an attacker has to exploit. Keeping Node (or io.js, as it were) small has major advantages for the future. *Libraries* should be the ones who bear the burden of security practices, which is what Node does.
They will. The point isn't to be more secure, but to be less of a pain when there's a high probability the captcha isn't needed.
No, but Alan Turing is said to have been fond of "Run around the house chess." Supposedly, you make a move, dash out the front door, run all around the house, and if your opponent hasn't moved when you return to the table, you win. Of course, the moment you arrive, your opponent dashes out, and now you have to make your move before they return. How well can you think when you're in oxygen debt? And how well can you pace yourself so that you can put your opponent under time pressure late in the game
looks like the entire program is in a single 20,000 line javascript file
I'm on my phone so I didnt run the code but just looking at it for a couple mins here are a couple critiqued. 1. Your are polluting the global/window object try looking into the module pattern for this. 2. Code organization is very minimal/non existant. Again, after using modules this could be cleaner or at least followable. 3. Try named functions as opposed to anonymous functions on your event listeners. This can promote code reuse and just cleaner code. 4. You should let the ajax be set to a function declaration and use it as a promise. That way you can call it via yourAjaxDataCall(params).then (datainitcallback, dataerrorcallback). This is in contrast to yours where you call it immediatly and set the data but you are not sure its set before you use it because not everything starts after the success func. Theres probably more but like I said im on a phone so im done. Also tbis might not be the right subreddit tp post this kind of thing. Sorry I didn't say anything positive yet... I really like the overall design and it's super clean. So that's a ++. I'd say this is good start to your portfolio and since you are only a couple months into JS I'd say this is a GREAT start :) 
This application is small enough where you can do everything with vanilla JS and the module pattern with namespacing. You do not need any plugins / framework for this situation. It would just be unnecesary overhead. Of course if you plan on expanding this form to be way more than that then maybe its worth it... In that case, I'd look into Ember. There are well established companies like Yahoo that are using it and swear by it. Its opinionated and will help guide you. For a larger project that requires a lot of database calls depending if its "real time" you may want to consider web sockets like someone suggested but you probably won't need it.
Marginal savings, but: new Date%2?'Node.js':'IO.js' 
&gt; commentary on /r/programming has just been mis-informed and childish It's either been crusty old neck-beards whose only experience with Node.js is [this video](https://www.youtube.com/watch?v=bzkRVzciAZg). Or idiot kids whose experience is based on trying to build an Adobe Photoshop clone for the desktop out of Node. Neither of these camps seem to use it for what the hell it was meant for!!! But that doesn't stop either side from arguing to the bitter end about it. Node is an air traffic controller not a number cruncher!!! To me, Node is like the [robot on the left](http://imgur.com/gallery/JPt4jMw).
It asked me "Captcha" continously after i refreshed the page for 6 times.
It seems you already verified yourself few time . (More than 5). And then you are still clicking the same.
You cannot, because Google starts tracking from the very moment visitor enters Google search. So Avoiding all google products is almost Tough job. but still your visitors will be tracked as they are using Google products.
Very true but, imagine one visitor of your site - only one -. I as afraid of google as I am and used alternative search engine and avoided all google products only to find he is still being tracked because you include google products in your site. Its not like you can't avoid google. * There are many visits tracking scritps that is not related to google (ex: phpmyvisits) * recaptcha is an obvious alternative to google's new captcha * facebook instead of google plus * avoid loading javascript files hosted on google and host your own js files 
Thank you. Yes, it is tied to Github, as very least with https://github.com/gajus/gitdown#features-gitinfo and https://github.com/gajus/gitdown#features-reference-an-anchor-in-the-repository, the latter being the reason for writing the library to begin with. What do you think about a description: Gitdown adds [additional functionality](#features) (generating table of contents, including documents, using variables, etc.) to [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/).
I have also added a cheat sheet, that gives a quick overview of the functions that you can use. https://github.com/gajus/gitdown#cheat-sheet
Can someone explain why you wouldn't just name the function?
That sounds awesome. And hard.
Crosspost. http://www.reddit.com/r/web_design/comments/2og4h9/is_there_a_way_to_enable_ecma_mode_in_firefox/
&gt; if string.contains() doesn't work in all browsers, then why does firefox allow it? I'm not sure you've really thought this through. Newer browsers should try to implement new ECMAScript features as soon as possible in order to increase the proportion of ES6 compatible browsers being used. This is because, once ES6 compatibility reaches critical mass, it becomes viable for web developers to use the new features. If browsers were to wait for these features to become available in all other browsers, nothing would ever happen because they'd all be stuck waiting for each other to support ES6. The real problem is that you're using the console as your API reference, not [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)
I would normally just name the function in JS, for sure. In scheme, there's more to be gained from this kind of structure since passing around higher-order functions is so much more common. But in all honesty, I haven't built anything complex enough in scheme to understand it that deeply and I'm still trying exploring the concepts myself. The ability to make combinators that handle memoization is interesting, though. That would mean you just have to write the memoization once for the combinator instead of separately for each function you want to memoize. Underscore's _.once() and _.memo() already serve a similar purpose, though.
yeah, the drivers a bit stupid, they pick a road and don't care much about which lane they should pick.
In EcmaScript implementation have right to extend or add almost any object or behavior.
it's a compiled file, you can check out coffeescript sources on github
It's sad that so many people read one line about node and dismiss it. Node is not truly single threaded. All asynchronous io is handled in their own threads. In addition it's trivial to employ webworkers and/or child processes. After reading some of these comments lately trashing node.. I feel like some of these people would expect us to develop a web api in assembly. 
any better than Google Webmaster &amp; Analytics ?
Most people there are invested in other technologies. 
Dom manipulation are expensive. Depending on how much html in each of these divs is it'll be really costy. When you said 'it stops working' i assumed your browser freezes. (if this is untrue also my conclusion is wrong). generally you should try to avoid dom manipulations on single items, rather wrap them together and perform them only once. Like saving the innerhtml in a variable and insert it after the loop. If this does still not work try debugging, look at your variables, do partially modifications like i &lt; 10, i &lt; 100, i &lt; 300 and extract the problem. Lastly try provide a jsfiddle/ codepen as this makes it more clear what exactly is not working and how this issue can be solved.
&gt; Or if you can offer some sort of debugging option that would allow me to debug these scripts running on a page through TamperMonkey Does it work outside TamperMonkey? Launch Developer Tools (Ctrl+Shift+I), go to Sources tab, go to Snippets tab, right click on the empty space and select New. Paste the javascript source code on the editor, click on a line number of interest to set a break point, then hit the play button on the right panel. This might help you debug it step by step. You can mouse over the variables to see their values. My first guess would be childNodes[1] might not exist.
Unfortunately this is not the answer. The browser does not freeze, and even if I only give the loop a scope of 0 to 1, the problem still persists. I did some testing with the Developer Tools debugger, and found that the variables simply are showing as 'undefined' when I try to do anything else to them. For example, I can get a string via splitting the innerHTML just fine, alert it and everything no problem, but when I try to further split that string or even access the length of it, it returns an undefined error. Which again, makes no sense to me.. the variable is obviously defined, until I try accessing a property/method (even on the same line) then it throws the undefined error. Any idea what's going on?
Thanks, I did actually end up using the Developer Tools. Could you check out my answer to /u/And7s? 
Most likely problem is that one of your divs has less than 2 children. Instead of just doing "childNodes[1]" (which will be 'undefined' if there ore 0 or 1 children) you could write "if (...childNodes.length &gt; 1) ..." and then skip the divs without enough children. Guessing the string split case works because it's doesn't notice if the children are nested or linear. Inspecting the elements hierarchy should give you a clue.
Your reply_click method is just assigning another method "clicked" to the onClcik of that button. So the first time you hit the button the "clicked" method is assigned to it. The second time you hit the button that "clicked" method is getting called. It looks like what you really want to do is just say "onClick = clicked(this.id)" in your button's html, then the clicked method can just lookup the innerHTML and assign it to the content.
I like the fluent interface, looks quite nice to use on the surface. Looking at your code it appears each call to .query() mutates the original query instead of returning a new one - this potentially limits the usefulness of that API and might be quite confusing. Instead, use a copy-constructor to create a new version each time, allowing old references to still exist. Among other things, this lets you create a base query and extend off it. i.e. // very convoluted example... var baseQuery = Jax.post("api.example.com").header('Auth', 'Foo').cookie('x','y'); function getFoosReq(id) { return baseQuery.query({'fooId',id}) }; function getBarsReq(id) { return baseQuery.query({'barId',id}) }; If I was using this library and didn't explicitly know otherwise, I'd expect this to work. When exposing a fluent API it's best to treat the 'query' object as immutable and return a new version each call that modifies it. (use Object.freeze to guarantee this holds true, so your API users can be confident there won't be weird side effects). Might also be worth implementing the Promise/A+ spec *to the letter* if you're going to have a method called `then` on it. A `recover/catch` method would also be useful (Have a look at Futures in Scala for a good reference on how the latter would work. It's not officially part of the JS promise spec, but very useful). If you don't want to implement the promise/a+ spec *to the letter*, then use something other than 'then' for your method name, since API consumers will expect it to work this way. I've been burnt far too many times by badly implemented 'thenables' causing subtle bugs that I'm quite passionate about this point. (I don't particularly consider Promise/A+ to be a great spec, but it's the convention and it's important to stick to it if you're implementing something that looks like it).
That's not the case either unfortunately. There are several children within each div, always a set number, so that wouldn't be a problem. Have a look at my response to /u/And7s. Basically, this will work: var thestring = div.innerHTML.split("&lt;")[0]; However, this will not: var thestring = div.innerHTML.split("&lt;")[0]; var thestringlength = thestring.length; Because for some reason, when I try to do anything with the new variable, it sees it as undefined.. this happens if I try to split it again, get its length, or even call the toString method on it. This also applies to the childNodes aspect, if I simply make a variable contain div.childNodes[1], that's fine. However, as soon as I try to interact with that by trying to access div.childNodes[1].innerHTML, then is the problem because all of a sudden div.childNodes[1] is undefined. Not sure if that was clear or not. In short, I can not manipulate a resource that I grabbed, because when I try to manipulate it, it appears as undefined even though it is clearly defined.
Yep- configuration is all part of the project's codebase and all of the content is stored in mongodb. We use simple rsync/mongodump deployment scripts to push content between servers (these scripts are open source) and these could easily be utilized within a CI workflow.
I think you're confused: Variables can contain the value "undefined", but if you try to use an undefined value as an object or an array it will throw. What you're doing is not different from: var foo; console.log(foo.length); Here foo is 'undefined' and so it doesn't have a length.
This is Javascript. Put those globals in an object: DS.actions.myAction DS.stores.SomeStore
This feels like a workaround for what R12 "broke"... Previously I could map an object right to a component like so: &lt;ul&gt; { passedArray.map(ListItem); } &lt;/ul&gt; Where ListItem is a component and it received props that were the properties of each passedArray item.
Your post store can have a getter method to find posts by user id. Then in your view, you can call PostStore.getPostsByUser(userId). 
textblob3 vs itemblob3
Thanks for pointing that out, edited in the main post. That's not actually a problem, simply a mistake when I was converting my actual code to an example for the OP.
I don't think you've stated your question very well because the other comments so far have misunderstood. I think you are asking why a "open-post" event won't cause every instance of the UserProfile to update with the same post. You won't spontaneously just add a UserProfile to the page. If you have more than one it might be a little on at the top of the page and a larger one in the center of the page. Alternatively it could be an array of UserProfiles. In the first case maybe you can just trigger different actions to get the small "post" data and the "large" post data. Configure each individual UserProfile via props and come up with some kind of "action prefix" maybe? Or re-use same actions but send some kind of filter in the payload. Think about it in a more practical sense rather than the abstract. In what situation would you just plonk a new UserProfile into the page without configuring it? You wouldn't - so your question will never come up in real life.
&gt; &lt;\ul&gt; Wtf is wrong with you?
Thanks Eran for settling my nerves. i'm one of the delicates.
Heh, sorry. Typing on a tablet and the keyboard isn't very standard. Just saw a slash and hit it.... Fixed
You are just not debugging well. undefined is a literal value in JS, it doesn't just mean "not defined". You can alert undefined. You can console.log it. You can return undefined. You can even append undefined. But you cannot use it as an array or object. Set your dev tools to break on exceptions and look at the actual value of your thestring variable when the problem occurs. I'm pretty sure you'll find it is undefined.
Touché. Mea culpa.
When a new technology comes out and people enjoy it and start using it a lot, the old school programmers (or the wannabe old school programmers) start hating on it and it becomes a stupid circlejerk.
Not that I know of... However, how about working on a program while on a treadmill with the laptop in front of you. Every ~5 lines of code you gotta increase the speed or gradient?
The clients need to talk to the server, which is run using node.js on a machine you're running somewhere. The client talks to your node server using HTTP requests. There are a few libraries that handle that in a simple way: [restify](http://mcavage.me/node-restify/) is one of them. Then on your node.js server, you can have it talk to your mongo instance and manage the chat rooms. You'll have to think up a structure for your `ChatRoom` model in the mongo db that works for having two people in a chat room with some kind of unique identifier. Best way to handle a multi part project like this is to plan it out ahead of time, the HTTP route names, the mongo info, and what the client sends / receives from the chat server, all the parts you plan to put into it
I think you should, for the following reasons: * Many people will stick with Angular 1.x for the foreseeable future. The ETA on Angular 2 isn't till the end of 2015. This probably means in reality it won't be released until way into 2016. Even when it is released people won't instantly drop angular 1.x. * Despite the differences between angular 1 and 2, people with angular 1 experience will still be desirable hires over people with no angular experience by companies using angular 2. * Learning angular will give you an understanding of MV* frameworks, how to cleanly structure a non trivial frontend app, and will show your willingness to learn new things. All of these attributes are valuable in a front end developer. If you have major doubts, just learn ember. It seems pretty widely used (though not to the extent of angular), and they seem committed to smaller, more incremental updates.
Thank you for the suggestions! I'll definitely look into cleaning it up. Do you have suggestions on any other subs I could post this to for more feedback?
Could you tell me what device/browser/OS you're on?
Thanks for your thoughts! More terms and concepts for me to read up on! :)
Interesting repo, thanks for the feedback. I tend to agree and will look into it further later today. Currently the provided values in object validation act as a whitelist, so no extra values can be provided, which has seemed quite powerful thus far with the appropriate error messages. This project is also being used as a middleware for express and as an alternative to mongoose schemas at my company. I will release these as separate plugins later.
The workaround is to use `React.createFactory()` to create what's effectively callable version of your component, or to use spread props: {passedArray.map(item =&gt; &lt;ListItem {...item}/&gt;} I think contexts are more about not having to pass something which could be needed at any level in a hierarchy through each level manually. I can't wait to see what comes of [this issue](https://github.com/facebook/react/issues/2112) - contexts seem to currently be passed as you'd expect only to components created within a component's `render()` method. If my understanding is correct, if this issue bears commitable fruit, context provided by a component should also be available to things passed to it as children, which will enable some sweet, easy-to-implement DSL-like component action.
2.0 is not going to be here for a looong time. I'm very happy with Angular 1.x. It's a great tool that saves me a lot of time, and it has an active and helpful community.
Spelling error: "Instalation"
https://news.ycombinator.com/item?id=8698153 
Yeah I've implemented Yahoo's Dispatchr. It solves the shared stores problem in a slightly verbose manner. However I don't think they even have a solution for the initial population of the stores serverside.
Could you set up a JSFiddle/JSBin/CodePen or something where the problem can be seen and tested? Or maybe post the full code and the link to the page you're using it on? Because otherwise all the answers you'll get will be just blind guesses.
Other than d3, check out Sigma JS.
Try these: /r/learnjavascript and /r/learnprogramming 
This. I've built exactly what OP is asking for, and D3 simply cannot handle the size of data-sets that we use. Well, it can, but obscenely slowly. Unfortunately, Sigma doesn't (or didn't haven't checked) support the "taggable" requirement; I had to hack it in and override quite a few of the built in components. There is one caveat, however... if you opt for the WebGL renderer over the Canvas renderer, you're going to have a tricky time implementing animations. If I had to do it over again, now that I understand the lower-level details of WebGL and more experience with sigma, I probably would do it in ThreeJS and take the time to add in the things the switch loses (quad tree, network-graph appropriate controls, etc).
Thanks this is good to know. How big were the datasets you had to support? I'm just wondering whether it will be an issue that makes d3 unusable for me.
Is it free?
Awesome, fixed now, thanks!
[It seems to work fine now;](http://jsfiddle.net/thinkvitamin/8zebde96/1/) It looks like the **if** statement was just unnecessary. It's nice to know about HTML5 data attributes also. 
Could you just not do something like... typeof $( selector ).data().attribute !== 'undefined' &amp;&amp; !( null check ) Obviously caching in a var before this might be good too for readability EDIT: After looking at the code I guess this is what you are doing underneath, but I see you are checking for type as well. Are you planning on making a native version as well? I feel like adapting this to handle vanilla js/html5 'data-' might be nice to do as well. EDIT2: mikro is right this already exists natively lol I didn't even bother to look but I've actually used this before. 
Why? https://developer.mozilla.org/en-US/docs/Web/API/Element.getAttribute https://developer.mozilla.org/en-US/docs/Web/API/Element.hasAttribute https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset
[fluxible](https://github.com/yahoo/fluxible-app) does it, have you seen it? It uses dispatchr as well. I've tried to implement it but it is even more verbose than Dispatchr. 
PS: Before anyone goes off (again) on the usefulness of large, dense network graphs, there are use cases, especially if you add things like ratings, rating amortization, etc. It's really use-case specific, and there are some cool alternate visualizations, such as the [GraphPrism](http://idl.cs.washington.edu/papers/graphprism) &lt;/rant&gt; Using [D3 Force Layout](https://github.com/mbostock/d3/wiki/Force-Layout) really depended on the quality of computer you have, because SVG are live in the DOM- rendering is quite a bit more sensitive to the data set size, so hardware makes a bigger difference. Keep in mind that I'm leaning on memory from over a year ago: If you don't pre-generate XY coordinates (i.e. using Graphviz / Gephi), you're looking at **~1-2 minutes for around 500 nodes / 2000 edges** to 'settle' into a respectable shape. The graph will have substantial delays when zooming, culling, adding or dragging nodes, though it won't be totally unusable- it really depends on what kind of responsiveness you're looking for. Keep in mind, I say that it wasn't totally unusable because once the graph settled, we turned the physics off. In fact, we completely turned physics off altogether, and used Graphviz (.net server) to generate (and re-generate after moving and pinning a node) all of the X/Y coordinates. Right now, using a hacked sigma.js, we're able to load upwards of 5000 nodes and 40,000 edges into a webgl renderer without too much lag, and once they're loaded it's extremely responsive. The one thing that I will say for sigma is that it's well designed for 2d rendering. There's a ThreeJS version of a network graph here: [Graphosaurus](http://froosky.rwell.org/graphosaurus/examples/eve/) source code: [github](https://github.com/frewsxcv/graphosaurus) See what I mean about depth and the default ThreeJS controls not being terribly appropriate? I'm currently using a trackball without a scroll ring and can't even zoom in on it. Boo.
I guess the same reason jQuery is used in place of native javascript. It reads better, it handles cross browser inconsistencies and it can be chained together with other objects nicely. For example the dataset is not supported in certain, still used, versions of Internet Explorer. I've also experienced somewhat confusing behavior between the jQuery object retained data vs the DOM node's values. I believe jQuery loads the dataset on construction and can be different if another piece of javascript changes the DOM node's value.
Post author here - this was the reason I was investigating contexts in the first place. Yahoo's [dispatchr](https://github.com/yahoo/dispatchr) library allows you to do server-side flux rendering - it changes flux stores to be scoped to a dispatcher object (rather than global). Contexts are a great way to share that dispatcher object around your React elements without having to daisy-chain it down through props everywhere.
&gt;Check if the data-attribute is a part of the element How about: if ($("#myElement").data("timer") !== undefined) { //do stuff } &gt;Check if the data-attribute is part of the element and the value is not empty. How about: if($('#myElement').data("modal")){ //do stuff } &gt;Check if the data-attribute is part of the element and the value of the attribute equals the supplied string. How about: if($('#myElement').data("modal") == "whatever"){ //do stuff } What's the point of your plugin? 
Does this work with iPad?
Check out this example of where the store data values and the DOM element can become out of sync. The plugin helps by checking the attr value vs the stored data value. jQuery's constructor sets the data values but does not handles changes to the DOM node. I've found other libraries outside of jQuery will change the attr value and my code does not validate correctly. http://codepen.io/acodesmith/pen/dPGNrG 
This is written to help with jQuery .data() inconsistencies. Check out my other comment... http://www.reddit.com/r/javascript/comments/2ohqhr/jquery_plugin_i_wrote_last_night_for_helping/cmnahw2
I'm also using Yahoo's fluxible-app. Their Fetchr plugin, along with dispatchr, helps with the isomorphic service calls and initial population. I'm close to having the whole architecture (w routr as well) polished. It's been a challenging process but I'm really digging it.
Check out http://eloquentjavascript.net/, it's too long to get through in a week but they'll probably ask stuff mostly related to the first ~6 chapters at the very least. So know the ins and outs of arrays and stuff like reduce/map/filter as well as prototypical inheritance and be comfortable discussing what that means. They'll probably ask about how angular or express applications are structured (MVC) and maybe have you attempt to explain why a particular framework is useful compared to alternative technologies. Test driven development is becoming a buzzword for recruiters now, too, so at least get familiar with how that works. I've been through some awesomely intense interviews for full stack JavaScript jobs recently and that's kind of how it went. I haven't applied for UX so there will likely be other stuff too.
I felt enlightened by the simplicity of reflux and react-router so I didn't try fluxible, because I wouldn't use other modules. Considering your experience so far, are you happy with the yahoo's solution? (Seeing the names they adopted I guess there's the Flickr team behind it :)
&gt; *What do you think they mean by "simple algorithms" and "data structures". Could you recommend any resources I could reference to brush up on those topics?* They mean formal computer science. If you don't know what the question means already, you're not going to be able to "brush up". To have a snowball's chance in hell, though, Google "algorithm design skiena" or grab [this](http://sist.sysu.edu.cn/~isslxm/DSA/textbook/Skiena.-.TheAlgorithmDesignManual.pdf), and work through it. 
Thanks, it's a good tip, I will try it extensively during the next days. 
We are using isomorphic Flux with Yahoo's Dispatchr to migrate a fairly old stack (Perl w/Template Toolkit) to a more modern stack (Express + React) - we have a custom plugin that calls a backend node.js service that does the server-side rendering. This plugin currently passes all the initial data for the stores (retrieved by our Perl layer) to our backend service and the backend service calls a custom method on the Dispatcher to populate the stores. I've been pretty happy with how this has let us stick modern development practices (React with Flux) inside of an older stack as a means for improving our codebase until we have time to rewrite it all. We're still pretty early along in this so figuring how best to integrate with things like react-router/fluxible app/the backend service making its own web service calls is still a TODO.
Will the full video be posted somewhere later? Also, Vim on Windows? What kind of monster are you? ;)
In the issue reported by /u/insin a reactjs committer talks about sharing the user between all the stores. What do you think about this idea?
Very, very nice! Congratulations on creating such a neat little tool!
This is the 1000th time I've seen this. 
Yes. No.
jsFiddle is acting up for me so: // Since you are already using jQuery, let's take advantage of on's easy event delegation. // Event delegation relies on the fact that events go through a capture and bubble phase to attach // a single handler on a parent element, instead of many handlers to each individual element. // This has performance implications and gives us the ability to change the DOM underneath the delegating // Element without worrying about losing or having to reattach our event handlers. $(document).on('click', 'a[data-c]', function(event) { var $link = $(event.currentTarget), linkC = $link.data('c'), result = prompt("Copy and paste this code:", linkC); // Here we take another approach, since prompt blocks further execution until it is resolved // We simply stop the link from performing its default action when the user clicks cancel. // This means, if they click OK, the link will perform it's normal action of following the href, // no need for a redirect if (result === null) { event.preventDefault(); } }); 
Nope. The game lacks depth. And I would rather play my ps4.
I wrote a parser for JavaScript in JavaScript for the point of making a language beautifier. It was hard to do even with experience writing parsers. JavaScript pretends to be a language for everybody so it allows a variety of different approaches including some very sloppy things. All of this has to be accounted for in the parser intermixed into great depth. Here were the things I found hardest when I wrote my parser: * **Automatic Semicolon Insertion (ASI)** - The EMCAScript spec provides a brief guide about the logic for implementing ASI as well as known exceptions, but there are edge cases that arise from a combination of various factors. * **Optional curly braces** - This was by far one the hardest things I have ever coded. JavaScript allows optional curly braces exactly like C, but C doesn't have ASI. This is challenging enough on its own in depth of expressions negating curly braces but much harder when ASI is added to the mix. * **Commas** - Commas, when written by humans, are typically used to list things, such as array indexes and object properties. Commas can be used to extend a single variable declaration (var keyword) to multiple simultaneous declaration, which is not too crazy. Commas can also be used to terminate statements, which humans don't do but many common minifiers do. This radically changes how instructions are interpreted apart from each other. * **Pluses, periods, and numbers** - Pluses and periods are completely overloaded characters that have multiple syntactical definitions based upon their context. Numbers can be tricky given that they can start with a minus character (negative numbers) or a period. This was a little bit tricky because you have to be sure that you are identifying actual numbers and not subtraction or a dot separated property. Overloaded characters like these may or may not change their interpretation context if they are instead associated with variables instead of literal numbers. Once I got past the insanity of the language I found it was pretty handy to have my own mini pocket parser. I can add new features to it at any time like support React JSX format or identifying scope with colors, auto-correction, and other stuff.
that sounds insane. good job. If this is on github, I'd appreciate a link. Seeing the commits themselves would be very educational.
I liked it, but definitely feels limited. Needs github integration or something. I would like to be able to use it across different computers.
I've been doing networks visualization as a hobby for past two years. Here is a list of 12 most popular open source libraries: https://github.com/anvaka/graph-drawing-libraries 
You want to hide your business logic behind a REST api? Which server side framework are you using?
I am using flask, but should that matter while obfuscating JavaScript?
There are many languages which provides background systems with javascript, for example, NodeJs. With Node you can archive this result.
Better is subjective. I find jQuery fucking awful. I think that a better approach is to polyfill the features you need (if you really have to).
http://closure-compiler.appspot.com/home Edit: Use Advanced Optimization option
Let me understand. You use a huge library that is supposed to solve inconsistencies across browsers (?!), and you have to write a plugin to help with the inconsistencies it generates? Crazy.
That Google Analytics snippet was probably compressed with Google Closure. Another popular compressor is UglifyJS. https://developers.google.com/closure/ http://lisperator.net/uglifyjs/ They are more compressors/minifiers than obfuscators though. There are also obfuscators which use things like eval and string replacements, like: http://www.jsobfuscate.com/index.php https://jscrambler.com/
Java isn't Javascript. This subreddit isn't homework help. Read your textbook or ask your teacher or another classmate.
https://github.com/austincheney/prettydiff/blob/master/lib/jspretty.js
No matter how much you obfuscate your code, you're not protecting it from anything. Even though the functions have cryptic names, one can still reverse engineer everything you program. If you want to hide proprietary business algorithms, stick them on the backend and use ajax to interact with them. You're going about this all wrong.
I just did a quick scan of the readme, so please correct me if i am wrong. it looks like you have no async support? That's unfortunate. A common validation like checking if a user name exists wouldn't be possible. It seems that most people writing validation libs leave this part out, making them kinda useless for general use.
&gt; This code apparently does some ajax obfuscation to hide their actual business-logic that does the number-crunching for your site. What makes you think that this code has been obfuscated? It has been minified, but there is no logic that is particularly hard to follow.
I absolutely agree (note: I have written a flux-like library called Fynx). Singletons (which are what you really mean when you say "global objects" --- actual globals can be avoided by simply using a module system) are bad. Apparently React 1.0 will feature something called contexts, which may help solving that by creating a shared context all your components can access. You would then be able to have multiple copies of the same application running in different contexts instead of sharing the same singletons between all of them.
Others have already said about futility of obfuscation so I'm just going to add that you obfuscate it by licensing it so that people can't use it. That won't stop them but at least you're legally covered
I agree with this. Use jison or pegjs. Coffeescript is written with jison parser - given how popular coffeescript is, you cant be doing something absolutely wrong using the same parser generator. That solves your parser part. For an interpreter, you need other things. It would help to use something like jison / pegjs to solve parsing. 
I guess ajax with obfuscated parameters understandable by code only. Example: [{ 'a': '12', 'b': '0' }]
There is no inherent async support, which may or may not be a feature later. However at my work we use generators with co js. I have a plugging for mongoose and express both of which use this to provide really powerful and easy async ability. Hopefully I'll get time to release those later this week.
It was designed for the back end first, with node js. Install with npm install prove-it As for sharing the same validators, at my work we use browserify, but you could get away with out it using umd modules or something, and since it uses its own extension mechanism you could just wrap the validators in closures. I can whip up an example later today if needed.
I'm waiting to have some time to spare to do some test applications with React and Flux. I keep hearing nice things about them. But we're currently using Angular and most if not all of these problems seem a non issue with it. Using states and resolves with ui-router and updating resources to keep them in sync with the server solves all of these issues and I'm just being deterred from giving React a try by seeing how something like data binding and server client data consistency is such a major pain. I'm still really eager to try it out since there must be something I'm missing besides the server side rendering and shadow dom.
The real nightmare with this is when you try to use it in a callback. That's why I write this-less code and avoid antiquated OO constructs. 
I switched from mongo to pg and am using [sequelize](http://sequelizejs.com). I have been insanely happy with it so far. 
Why is the author confused?
Feel free to do whatever you want but this is impossible. Any and all work you put into this is wasted because someone can figure it out pretty easily.
Or bind
http://imgur.com/EzdJKgr :)
Grow up.
I though this was about pain medication.
I just minify my code - but that's for optimization, not to obfuscate it. Even with a very rich web app - the front end makes up only a portion of the picture and if someone was to rip it off 100% I'd just be 'eeh, so what' - they don't have access to the back end code that does the heavy lifting of the business logic/validation, or the databases, or the infrastructure, or the support team, etc. 
Generators would work in node, but they're still widely unsupported in the browser world (if you plan to support that). Would be a nice solution to the problem though.
Ironically [according to the MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#String.prototype.contains), `contains()` will be renamed to `includes()`, so it will be invalid in Firefox 37 and beyond (will be aliased with a warning).
You can simply try with MySQL using Felix Geisendörfer's [node-mysql](https://github.com/felixge/node-mysql) package. The package is really complete, and can be as fast as using MongoDB in some cases.
At my work we use regenerator to enable async browser validation.
This is awesome advice. Do you have any blogs or content online I could read? I really like the way you think
I really like this, simple and cluttler free, but has everything it should have.
Using pg with bookshelf as well.
I'm seriously considering PG for my next project. The JSON data type is enticing. 
There are several ways to get ES6 support, like traceur, but you'd see wider adoption with a pure async implementation. People hate dependencies these days :)
There are only two reasons to use MySQL. 1. WordPress. 2. Maintaining legacy systems. 
Doesn't work in Firefox 34.
sounds awesome! One of my colleagues is writing a form library for react called Shift. We use it at work currently, this would go nicely with that. I'll be keeping an eye on it :)
Thanks. I was mistakenly pulling scrollTop from the body instead of the document. The change is up.
or store `this` in a closure variable
That's pretty much what bind does.
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
And bind is pretty much what apply does. I thought we were just listing different techniques.
You kind of need an OKCupid account to do this, which I'm not going to do... But. If you know the 5 star system has changed, to a like/dislike system, the line you would be interested in changing is: processVoteNote('vote', 'personality', 5, userid, false, '', '', MatchCardsVoting.vote); Which doesn't seem to be defined in the code you/he provided. So, my guess is that function was defined and available on the OKCupid website. So you'll need to find a function on the OKCupid website that does something similar. Navigate to a user's profile page where you would "like/dislike" the user. If you're using Chrome, right click the page and click "Inspect Element". Now you have two options: 1. Go to the "Sources" tab. On the left is a expandable tree. You're looking for the "www.okcupid.com" folder. This would have all the code for that page. Look through the sources for a function that's something like "vote". You can use CTRL+F. Post back here a function if you find it. 2. Go to the "Console" tab. Type "this" and hit enter. You'll be logged the Window object. Expand the window object. Any dark-blue bolded item in that list was defined by OkCupid or a dependency. Find something called "vote". Post it back here.
 $el.is('[data-foo]')
Might be a bit of a late response... but I agree with you about the "delegate" methods. I've change the event handler mechanism to something more traditional - namely db.on(event, handler, binding), and db.off(event). There are now two different event types: operation (insert, update, delete, upsert, all) and changeset (inserted, updated, deleted, failed). Thanks for the feedback.
Hell yes. Just hell yes. Dude. You. Seriously. Thanks.
Ok if you wanna nitpick, capturing `this` in a closure variable is also different than bind because it preserves the availability of the original `this` in the callback
How do you explicitly define models with bookshelf.js though?
Nitpicking makes great programmers! Now that you've said more I think you mean something different by capturing this in a closure: I think you mean something like "var that = this" and then change the code to use "that" in place of "this" -- which works, but requires changing the code. I'm thinking of using bind as a sort of bandaid to avoid modifying code. I.e. if you've got a foo.bar() method that for some reason now needs to be provided as a callback (cough...promises...cough) you can do "foo.bar = foo.bar.bind(foo)" and paper over the problem with no other code changes.
Yeah I know. I wasnt trying to argue with you. Sometimes bind is better and sometimes I find it easier to just use that = this, like if it's an anonymous callback. Jesus relax.
I've had a good experience with node + SQL azure via tedious.js
If you really are an experienced programmer, you'll know what to do with this.
Did you know you can quite easily write a node.js application that looks like a MySQL/mariaDb server? Any MySQL client can then "query" your app. 
Fixed. jQuery(".match_card_wrapper").each(function( index, element ) { // Userid's to exclude. Use lower case only! var excludes = ['bikescars', 'northeman']; var $match = jQuery(element); var username = $match.find("input[data-username]").data("username"); var userid = $match.find("input[data-username]").attr("id").replace(/\D/g,''); var rated = $match.find("#personality-rating-"+userid).not(".liked").length === 0; var matchPercent = $match.find(".percentages").html().replace(/\D/g,''); console.log("found " + (rated ? "rated" : "unrated") + " match " + username + " (id:" + userid + ") " + matchPercent + "% match" ); if(!rated &amp;&amp; matchPercent &gt; 80 &amp;&amp; excludes.index(username.toLowerCase()) == -1 ) { jQuery.get("/profile/"+ username + "?cf=regular"); processVoteNote('vote', 'personality', 5, userid, false, '', '', MatchCardsVoting.vote); console.log("visited and voted " + username + " five-stars for personality"); } });
No deps - you're a king. I needed something like this for a client last week and the only decent one I found needed jquery... I begrudgingly added it to the project :(! Tomorrow morning, first thing I'm doing is replacing that crap with this piece of art! Thanks! xox
Thanks for the cmder link! I am checking it out. If it's a viable CMD terminal I'll be pretty happy. 
All, Streaming has resumed! Time to animate some sprites!
I love it when people who are themselves needlessly worked up about an internet discussion tell others to "relax". Practice what you preach, brother, and have some upvotes.
Better yet, [chess boxing](http://en.wikipedia.org/wiki/Chess_boxing). How well can you think after being punched in the face? :)
sweet! i did not know about the `not` tag
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Chess boxing**](https://en.wikipedia.org/wiki/Chess%20boxing): [](#sfw) --- &gt; &gt;__Chess boxing__ or __chessboxing__ is a hybrid fighting sport that combines the two traditional sports, [chess](https://en.wikipedia.org/wiki/Chess) and [boxing](https://en.wikipedia.org/wiki/Boxing). The competitors fight in alternating rounds of chess and boxing. Chessboxing was invented by Dutch performance artist [Iepe Rubingh](https://en.wikipedia.org/wiki/Iepe_Rubingh) in 2003. What was initially only thought to be an art performance quickly turned into a fully developed competitive sport. Chessboxing is particularly popular in Germany, Great Britain, India and Russia. &gt;==== &gt;[**Image**](https://i.imgur.com/JjbWOic.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Schachboxen1.jpg) - *A chess boxing match in Berlin, 2008* --- ^Interesting: [^World ^Chess ^Boxing ^Organisation](https://en.wikipedia.org/wiki/World_Chess_Boxing_Organisation) ^| [^World ^Chessboxing ^Association](https://en.wikipedia.org/wiki/World_Chessboxing_Association) ^| [^Iepe ^Rubingh](https://en.wikipedia.org/wiki/Iepe_Rubingh) ^| [^Cross-training](https://en.wikipedia.org/wiki/Cross-training) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmo4w1d) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmo4w1d)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I was on the fence about switching to React before, since it seems like just another flavor of the month framework. But those rendering times at the end are hard to argue with. It really does look like the next step in view handling. Awesome talk!
&gt; if(!rated &amp;&amp; matchPercent &gt; 80 &amp;&amp; excludes.index(username.toLowerCase()) == -1 ) should be &gt; if(!rated &amp;&amp; matchPercent &gt; 80 &amp;&amp; excludes.indexOf(username.toLowerCase()) === -1 )
You forgot the third one: 3. Trolling
Honest question here -- When I think of the primary use-case for Node I think of asynchronous DB interaction. Hand a query off to the DB and go on to the next request. Perfect for RESTful interfaces. But if you introduce the overhead of an ORM don't you risk some serious performance hits by moving complexity back to the JS side of things?
Fuck off
jQuery(".match_card_wrapper").each(function( index, element ) { // Userid's to exclude. Use lower case only! var excludes = ['usernameexample', 'usernameexample']; var $match = jQuery(element); var username = $match.find("input[data-username]").data("username"); var userid = $match.find("input[data-username]").attr("id").replace(/\D/g,''); var rated = $match.find("#personality-rating-"+userid).not(".liked").length === 0; var matchPercent = $match.find(".percentages").html().replace(/\D/g,''); console.log("found " + (rated ? "rated" : "unrated") + " match " + username + " (id:" + userid + ") " + matchPercent + "% match" ); if(!rated &amp;&amp; matchPercent &gt;= 0 &amp;&amp; excludes.indexOf(username.toLowerCase()) == -1) { jQuery.get("/profile/"+ username + "?cf=regular"); processVoteNote('vote', 'personality', 5, userid, false, '', '', MatchCardsVoting.vote); console.log("visited and voted " + username + " five-stars for personality"); } });
I dont know about everyone else, but this just made my eyes and brain hurt.
I completely agree!
Let's just worry about releasing ES6
I've used sequelize for a while now and I like it a lot. 
Well can you give us an example?
As someone who uses jQuery just because everyone else is this is very refreshing piece of work. I think I'll start developing no-dependency things like this. Looks like people demand them.
Node + edge = any SQL database
I like it. In Firefox, I can not pan a zoomed image though.
I've been using this library for a few years now, its able to do so much that I don't see myself using anything else when implementing a gallery, it works wonders on hybrid apps also.
This is outstanding. Well done.
[knex.schema.schemaCreator](http://knexjs.org/#Schema) return knex.schema.createTable(tableName , function(table) { table.increments('id').primary(); table.string('uuid').unique().index().notNullable(); ... ... then, [Bookshelf.Model.extend](http://bookshelfjs.org/#Model-extend) exports.model = Bookshelf.Model.extend({ tableName: tableName, idAttribute: 'id', initialize: function() { // this.on('fetched', incrementView); }, ... ...
Any good ORM worth its salt has the ability to abstract itself away. When I start a project and don't want to worry about details, I'll use the baked in features because they'll get you "stuff" to work with; easily. Then, when you want to improve and optimize, you can remove the abstracted calls into raw SQL; basically only using the ORM for table creation (rare) and connecting to the database (once per run).
https://github.com/sidorares/node-mysql2/blob/master/README.md
You will need to preload the image into the JS, check out this for some info on how to do this: http://www.techrepublic.com/article/preloading-and-the-javascript-image-object/ Then all you basically need to do is update your square drawing code at line 120 to 123 and 129 to 130 with the draw Image. Along the lines of http://www.html5canvastutorials.com/tutorials/html5-canvas-image-size/. That second link also shows the image loading. Just say if you need more help than the links provide.
Ah ok, check out http://www.html5canvastutorials.com/tutorials/html5-canvas-patterns-tutorial/, it will be createPattern you're after :).
Hi, Please let me know version of Firefox and OS in which you test it. Is it mobile/desktop? Also, how exactly are you trying it to pan? Thanks!
Where are you from? Because VPS here costs like 95€+/year..
FUCK no
Not a single practical example in that tutorial. Not to mention Node stuff.
Man, those are YOUR errors, go to town.
I too would like to know this!
I wonder how many emails they will harvest
Looks fine, but you're a bit needlessly verbose with your comments. Assume the developer looking at your code is competent and try to let your variable and method names do the talking for you. When another developer sees a loop, for example, they can safely assume they're "cycling through X". You don't need to explain every line of code. Also --- no need to use a switch statement. It works, it's fine, but if statements will get you the exact same result in this case --- switch statements are mostly just useful when you want fall-through cases. This is really a style choice on your behalf, though. Otherwise keep at it --- there's not a lot of content here so it's hard to judge, but looks good. **Edit:** Last note, any reason you're decrementing through your loop as opposed to incrementing, or is that a style choice? (The speed differences between increment and decrement postfix are negligible in V8 nowadays, and inc/dec is very rarely ever a bottleneck for most client-side web work.)
jesus so many thanks, i was expecting a barrage of critiques
nice advices, i was intuitevely suspecting this myself, thank you
I feel --- i must comment on your triple dashes. :)
I unfortunately cannot &amp;mdash; on reddit. ;) **Edit:** Wait. Holy crap. I can &amp;mdash;. This is phenomenal. (&amp;amp;mdash;)
Looks pretty well! But since you're looking for feedback let me give you some. Note though that these are all pretty much nitpicking, your code looks already pretty good as it is! ~~- You should try to avoid setting `innerHTML` since it's painfully slow. Instead it is better to only work with dom elements themselves, that is cloning the children of your anchor and appending them to the paragraph~~ - In general I try to avoid long blocks in switch statements (or if-else blocks for that matter). This is because they break up the natural top-down flow of reading a function. When the body of a switch statements is more than a few (2-3) lines (without the break statement) I tend to refactor it into a function. - Your loops go from length to 0. Although there's nothing wrong with that, in JS we're used to do it the other way around. Since there is no inherit benefit for one over the other you can better stick with the convention. - I see that you use classnames to be able to later find the elements back. If that's the only purpose of the classname then you can better store the elements somewhere in memory such that you don't need to look them up later. This is a significant performance increase, and prevents collisions when a classname is (accidentally) reused somewhere. - Likewise you might want to store the original anchor elements somewhere where you can retrieve them based on the paragraph. This makes sure *all* attributes and properties are set back correctly (including `click` handlers and the like), and not just the `href` attribute. EDIT: apparently I was wrong about innerHTML.
Yes, you're missing something. Just create your pages as normal and put placeholder elements where you want your react components. Then render the react components into those placeholders using React.render(). This means you can have standard static HTML pages but "inject" react into the parts that need to be more dynamic.
Udacity has an awesome course on this exact thing, [Web Performance Optimization](https://www.udacity.com/course/ud884). It's free, just click view courseware. It was developed with Ilya Grigorik too, who is kind of a big deal
Actually, innerHTML is about equally as fast as appending DOM elements (via cloning or document.createElement). In fact, in many older implementations it was significantly faster. http://andrew.hedges.name/experiments/innerhtml/
The Chrome developer documentation has a guide. It's pretty comprehensive. https://developer.chrome.com/devtools/docs/timeline
The only point I'd like to mention is regarding the comments... Your comments are on the same level of abstraction as the code, in other words, they say exactly the same thing as the code says. Ideally, your comments should be on a higher level of abstraction, explaining **why**, not how. The reasoning behind why you did something is not obvious from the code, what happens and how it's done is, so you don't need to repeat that in the comment. In some special cases where you have a heavily optimized algorithm or such, you may want to have a comment on what it's doing, but usually it's unnecessary. keithwhor mentioned a good point about using variable and method names to do the talking. That's sometimes called **self documenting code** where the names etc. help explain the code - I wrote a bit about that topic, perhaps it would be interesting reading for you: http://codeutopia.net/blog/2014/12/01/how-to-make-your-code-self-documenting/
Some reasons why you might choose the plugin over that: - It makes adding the event handler to the desired element trivial as it smoothly integrates into jQuery's event APIs (`jQueryObject.trigger('clickout');`). - It allows for method chaining (`jQueryObject.clickOut(eventHandler).css(styles);`). - It executes before normal `click` events. Additionally, it formally defines an order of execution of `clickOut` event handlers. - You can't accidentally remove the `$(document).on('click', …)` call that drives all of `clickOut` events with something like `$(document).off('click')`. Well, technically, with the way the jQuery APIs are written, it will just immediately add it back. - Events typically bubble all the way up the DOM tree. However, a `clickout` event doing so is incorrect since some event handlers could get executed more than once. That is, when an element has a `clickout` event handler, that element has an ancestor that also has a `clickout` event handler, and a click is performed outside of the ancestor element, the `clickout` event would bubble up through the DOM for every element with a `clickout` event, causing the ancestor's `clickout` event handler executing more than once. This handles that. - ~~It doesn't execute for hidden elements.~~ Actually, that feature disappeared in the recent release. Previously (and to soon be brought back), it wouldn't execute when implicitly triggered for a hidden element. - The value for `this` is as expected (i.e. not `document`). Obviously, most people won't ever need anything so thorough. But if you want something solid, this is a good choice.
Can I make a comment that isn't directly related? Imagine if your switch statement were to expand with more labels - you'd have a very long file. You could make it a bit nicer by using methods on some class called "anchor": switch(type) { case 'replace': anchors.replace(); break; case 'restore': anchors.restore(); break; case 'manipulate': anchors.manipulate(); break; } But what would be even nicer is to do something like this: anchors[type](); i.e. dynamically call a method on the anchors object by using bracket notation. Your code seems decent though, I'm just a bit bored so I thought I'd make this observation! EDIT: actually I do have one comment. In JavaScript most APIs use lowerCaseCamel for naming, whereas you've used underscores for your variables. This mixing of convention is a little jarring.
When you're done ranting, you can start to learn javascript by looking at it from a different angle. It actually borrows its control structures from C, but is otherwise not even a distant cousin of that language. Its prototypal object orientation will confuse anyone but a lua programmer, who has seen a similar concept with metatables. If you find "everything is an object, but some objects even more so" confusing, relax - it is simpler than you think it is. About your "legitimate question": what do you want to achieve? What is "your work"?
Strange, I tried opening exactly the same version of FF in Windows 7 using Browserstack and dragging worked. Do you have some specific device connected to your PC? Like trackpad, or touch-based mouse? Please try opening FF in private (incognito) mode to make sure extensions don't cause this. Thanks for help! 
Thanks for the reply Goal: Engineering and AI simulations ("Watch Mario go from point A to point B"), machine learning games ("Decide how aggressive your AI troops are"), both embedded in aesthetic web pages for personal use/portfolio. Not industry distributed. 
Thanks for the heads up, I'll take a look!
You don't. Obfuscation is not security and relying on it to stop your source getting leaked is not the way to go. Why are you trying to lock down some javascript code anyway? If it's to stop someone stealing your website then I would stop worrying about that :) If someone wants to steal your website: They already have. That's the way the internet is built.
&gt; everything is an object Not in JS. JS differentiates between objects and primitives. https://people.mozilla.org/~jorendorff/es6-draft.html#sec-primitive-value (Dart doesn't make this distinction.)
You're absolutely right, in most cases the innerHTML method was indeed faster on my pc (result varied from run to run). I'm pretty surprised as well. Just a few quick thoughts though on the benchmark: - The benchmark is a syntactic benchmark that only measures the raw speed of insertion. In practice you often want to use the elements later down the road. Using dom nodes here can save you lookups, which *might* give you just enough performance benefit to outweigh the difference in real world applications. I'm not sure about this though, and this will probably be very difficult to benchmark as well. - The benchmark is not 100% fair: it inserts the same string over and over again but it does recreate the dom node each time (of course it has little choice here). I'm interested in what the performance difference would be if there is: - A random text inserted each time - Only the insertion itself is benchmarked, and not the creation of elements Either way, I stand corrected. innerHTML is apparently not slower than appendChild.
I like how it handles pluralization. Similar functionality can found in the [Globalize](https://github.com/jquery/globalize) library, but their approach to pluralization is more complicated than it needs to be, IMHO.
As with any programming language, there are libraries to make your work easier. So no, you don't have to write game logic in javascript if you don't want to. Have a look at npm and bower.
jesus i just wanted to remove wikipedia links to concentrate more on reading and i end up learning all of this. reddit at its finest.
thank you, it would be awesome to build docs like this
wow this is actually the type of advice i need, makes so much sense, switch cases to invoke functions and do the actual programming there, very nice.
i will invoke functions from switch statements from now on, instead of building logic inside them, makes so much sense. now i just realised i should push the replaced elements into an array and then just replace them entirely, makes a lot of sense too.
hehe, this is one thing I love about browsers and js, the old is new again ;) Anyone thats old and loved the demo scene will be giggling to themselves when they see this.
No-no, I know that, but what's about router? I mean, all routers will use handler - another class, but I need a page instead!
* If you're trying to store large images in mongodb, it will fail: http://docs.mongodb.org/manual/reference/limits/ * If you're using a router like iron, it will try to handle CFS routes on the client and fail. Try putting the images into img element srcs or link to them in an anchor **which opens in a new tab**. Maybe these would help.
I'm not sure exactly what you mean but could you use multiple routers?
Are you monkeying with this right now? I've got two different tests in firefox and chrome. The (older?) test in firefox runs 91 miliseconds for innerHTML and 15 miliseconds for DOM nodes. The (newer?) test runs 3335(?!?) miliseconds for innerHTML and 3 miliseconds for DOM nodes.
Looks like it'll be deprecated: https://github.com/facebook/react/pull/2508
Yes, I was going for a more lightweight approach than skrollr for a few projects that I have coming up. Also, I'm not entirely thrilled with the concept of using so many data-x attributes in HTML. I think that is hard to manage. I intend to further refine the library and possibly add-in the features you mention as my own project-based work requires them. Thanks for checking it out, and the great question!
You sure get me friend. Thanks for the post :) Have a good one buddy ;D
Isn't that where a comma should be used?
I definitely agree. Thanks!
Sound advise thanks man!
For loops work, but I'd suggest using [Array.prototype.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) for iterating an array of elements, much cleaner syntax and you don't have to worry about incrementing your index: anchor_links.forEach(function( value, index ) { ... });
See /r/LearnJavascript or /r/learnprogramming 
Gotta convert it to an array first though, if it's a NodeList.
Dependencies are not a bad thing if you've moved to a modular architecture like npm. They can very quickly lead to cleaner, more robust, and more maintainable code (e.g. [dom-css](https://www.npmjs.org/package/dom-css), [domready](https://www.npmjs.org/package/domready), [add-event-listener](https://www.npmjs.org/package/add-event-listener)) without bringing in the bloat of a full framework like jQuery.
Need help defining structure? Use a framework or look at what structure other game frameworks have used: http://phaser.io/ Nothing terribly wrong with your code. Consider using a dependency framework when the number of files grows large, such as require js. Consider using different function definition syntax to avoid polluting global namespace: http://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname 
Use a component to build the page, this component will be one of your handlers. There are many examples to follow in the react-router repo. :)
This is a nice trick. I hate C-style switches, but I've never considered this solution in JavaScript.
I don't think all the comments are necessary. Lines like paragraph.className = 'replacement'; are pretty self-explanatory. Depending on how much that switch list might scale (ie. if you are going to add lots more cases), you might want to keep the open-closed principle in mind.
I like my reddit comments like I like my speech. Highly emphasized.
Are you looking for "low-level" javascript/program performance, or just a speedy user experience?
&gt; The performance is slightly better than SVG, but unlike the SVG version, the nodes in this one are not draggable. That's a terrible tradeoff, in my opinion. Canvas is not SVG or DOM; D3's functional / document munging style API doesn't work very well (speaking from experience here). There are some things I use D3 for; a large network graph is not one of them.
Can you please provide a citation for that? A compiler many optimise away some paths if they are never used but I don't see why it would break. This sample code works perfectly when put through Closure compiler for example: var anchors = { replace: function() { alert('replace'); }, restore: function() { alert('restore'); }, manipulate: function() { alert('manipulate'); } }; var type = prompt('Enter Type:'); anchors[type]();
In JavaScript its slightly faster to do a reverse for loop like in the code provided, rather than a regular for loop, since you can then check against a static zero instead of having to do a lookup. This is ofcourse only the case if the reverse order is acceptable for the application of the loop.
Can you show me the benchmark proving this is the case?
Pretty much everything has been said, one thing tho, name your functions, it makes it much easier to see whats going on if an error occurs.
[jsperf for v forr](http://jsperf.com/for-v-forr)
epic! nice use of stackgl modules :) 
There is no function named "replace". "replace" is instead mapped to a function in the anchors object, and "replace" (the property) won't get renamed by any correct minifier. Edit: I stand corrected. This is actually not guaranteed to work in Closure.
I've literally just tried it at both simple and advanced levels. It still works. You appear to be confident about this so rather than just stating it *will* break it would be more helpful to say *why* it will break and provide an example.
Functions should be named. Function is too long, especially with switch. Should be split to two functions. Switch for two cases is probably overkill and it decreases readability - it's hard to tell where statements starts. anchorLinks should be preferred over anchor_links. Optimization of for loop is overkill and decreases readability. For decrementing loops while is little bit faster than for and it's more readable. Unnecessary comments decrease readability. Only "magic" should be commented, rest of code should be self-explaining.
lets take a simple example: you have an anchors object with a function replace declared on it. you call this replace function in code through anchors.replace() when closure compiler in advanced mode runs over it, the reference to the the object named anchors will be replaced with something simpler also the function named replace will be renamed to something else. now, you pass in a string literal 'replace' from an unkown source, it is irrelevant, will the function 'replace' still exist on the anchors object? the answer is no, it would have been renamed by the compiler. this will lead to a bug which will only exists in production code.
&gt; you have an anchors object with a function replace declared on it. You don't have that anymore. Instead, you have a function mapped to the property replace in anchors.
so you are going to store a hash lookup somewhere instead of putting it inside the switch statement. this is getting better and better.
Yeah sure, I guess you can call "getting a property" a hash lookup. It's not like it's slow enough to matter, and this is 99.99% of the time not going to be a bottleneck. So it's a good implementation and it won't break when minified.
[The documentation](https://developers.google.com/closure/compiler/docs/compilation_levels?csw=1) also says this may happen and therefore may not always work. Though in my silly testing just now, the term 'replace' was persisted properly. // ==ClosureCompiler== // @compilation_level ADVANCED_OPTIMIZATIONS // @output_file_name default.js // ==/ClosureCompiler== // ADD YOUR CODE HERE var method = "replace"; var anchors = { replace: function(a) { return a.toString(); } }; function doit(obj, method, args) { return obj[method].apply(obj,args); } console.log(doit(anchors, method, ["soo"]));
your example is trivial, i work with closure code bases with 50k+ lines of code and this will break each time, since it will find an efficiency to match and rename the function. but good on ya for looking up what I was talking about and realising the issue at hand. this is basically reflection and reflection is brittle in javascript, fortunatly not slow.
I don't think you understand what I am really saying. have a good day.
Interesting. I stand corrected. From Closure's documentation: &gt; **Using string names to refer to object properties:** &gt; The Compiler renames properties in Advanced mode, but it never renames strings. &gt; var x = { renamed_property: 1 }; &gt; var y = x.renamed_property; // This is OK. &gt; // 'renamed_property' below doesn't exist on x after renaming, so the &gt; // following evaluates to false. &gt; if ( 'renamed_property' in x ) {}; // BAD &gt; // The following also fails: &gt; x['renamed_property']; // BAD &gt; If you need to refer to a property with a quoted string, always use a quoted string: &gt; var x = { 'unrenamed_property': 1 }; &gt; x['unrenamed_property']; // This is OK. &gt; if ( 'unrenamed_property' in x ) {}; // This is OK
I'm getting 4% difference, in favor of - -, I'm on Chrome for mobile though :-) 
Surprisingly, Closure's documentation says that this is not guaranteed to work in advanced mode. &gt; **Using string names to refer to object properties:** &gt; The Compiler renames properties in Advanced mode, but it never renames strings. &gt; var x = { renamed_property: 1 }; &gt; var y = x.renamed_property; // This is OK. &gt; // 'renamed_property' below doesn't exist on x after renaming, so the &gt; // following evaluates to false. &gt; if ( 'renamed_property' in x ) {}; // BAD &gt; // The following also fails: &gt; x['renamed_property']; // BAD &gt; If you need to refer to a property with a quoted string, always use a quoted string: &gt; var x = { 'unrenamed_property': 1 }; &gt; x['unrenamed_property']; // This is OK. &gt; if ( 'unrenamed_property' in x ) {}; // This is OK Like in your code you have this: a:function(){alert("manipulate")} which I think is going to break.
Commenting to agree. Aside from the impact on compilation (minification), this is a nightmare as far as maintainability is concerned. I've been known to use this trick occasionally, but I wouldn't say I'm proud of it or would suggest it to anybody else.
I actually didn't downvote you FWIW.
The challenge with single page apps and modern frontend is that you don't refresh the page very often, and this lets crud build up if you're not careful. You can think of it like underwear. The longer you wear it, the dirtier it's going to be. Refreshing the page is like putting on a new pair. You could use the Timeline to see if memory consumption keeps going up while using the frontend, which could indicate a memory leak. Oops! Someone didn't wipe their butt. Maybe you're allocating objects without releasing them, and Chrome keeps them in memory until you refresh page or kill tab. That's one basic example of what the Timeline is for. For general optimization tips, try these: http://tools.pingdom.com/fpt/ http://www.webpagetest.org/ http://gtmetrix.com/ For improving code performance, I like to use simple timers which log results to the console for finding out how long a certain chunk of code takes to execute. This works for frontend or backend, for any language, the benchmark pattern is the same. You can start wide by wrapping a benchmark timer around a huge chunk of logic, and then narrow down the bottleneck by moving the timer deeper into the code / sub-routines to locate the performance heavy piece that might need optimization. Some pseudocode to get started: function doStuff() { startTime = Date.Now ' BUNCH OF COMPLEX CODE HERE endTime = Date.Now.Subtract(startTime) console.log("This routine took " &amp; endTime.totalMilliseconds &amp; " ms") }
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
It's a matter of presentation really. IMO, when formatted to two lines: var handler = handlers[message.type]; var result = handler(); It's much easier to reason about than a long switch case. 
I personally think it looks fine. Personally I'd break it up a bit (pass a handler function instead of a large anonymous function, take your logic out of the switch) because it makes things easier to maintain and debug. 
it's been some time since I used mongoDB, thanks for the reminder\^^
The only thing i don't like is that most libs work with paths and not with a text, thats why i create the lib. Will have an eye on globalize, possible that i write a wrapper for the message function to use gettext-style.
Both - I want to understand performance really well, from the critical rendering path up to managing user experience and expectations.
Highly --- hyphenated.
"Oops, someone didn't wipe their butt" hit my funny bone. Nicely done
I've actually been looking at this. Do y'all use webdriverjs or protractor along with it? Do you have a setup you recommend?
I just switched from couch to pg, and have been happy with it so far.
Yeah, I'm most interested in the js optimization side of it. I've done most of "onload" optimizations, like minimizing render blocking js and using sprites, already. I just need to be a pro at figuring out where my js and css code cause ui lag, and why.
Can't stand Netbeans, honestly. Slow, ugly 90's interface, unproductive (multi-cursor &gt; rectangle select), and it just doesn't have good enough JS support for me. Not saying ST3 is perfect out of the box, but with a few packages it becomes my favorite tool by far.
Don't put spaces around your em dashes! (http://practicaltypography.com/hyphens-and-dashes.html)
Nice and easy, thanks!
Or we wait... https://dom.spec.whatwg.org/#elements
Also your example would have worked since I do not compile the queries into the request URL until the .then() method is called. All calls to .query() actually push the query into an array that gets serialized before sending the XHR request. http://jsfiddle.net/6rgdhgv0/
Various subjects, not all strictly Javascript, but all things I've enjoyed watching (particularly the first two)... [Memory Masterclass with Addy Osmani](https://www.youtube.com/watch?v=LaxbdIyBkL0) [CSS Performance tooling](https://www.youtube.com/watch?v=FEs2jgZBaQA) [Delivering the goods](https://www.youtube.com/watch?v=R8W_6xWphtw) [Javascript Level 9000](https://www.youtube.com/watch?v=v34CEyqVEuM)
I'm seeing things running "too late". "Slide elements in" reaches the centre horizontally when it is already half out of the page vertically. In the last example, I cannot read the whole text because the last words only appear when I'm already scrolling past them; I see them briefly if I really try. Firefox Nightly (37.0a1)
So apart from the comments saying theres, no point, there's the following things you could do. * You pass document and window into the function, but don't use them. * typeof value === 'undefined' is more used for variables that haven't been initialized (which is bad in its own merit). Just use value === undefined instead. * Once you've done that, you can inline it into the if statement.
Yeah actually it is lol, go fuck yourself. Nobody *can even understand you*, learn to properly ask a question before acting a like a complete cunt when people are trying to help you. Do your own work
I like console.table(); very useful.
Apart from being able to filter contains and log levels, chrome dev tools is of little help when it comes down to filtering logs. console.group can group only error messages that appear in a row. Thats useless in many cases. Also, it is enough that either dependency is misusing console.group to break console.group output altogether, because you cannot explicitly set which group is being opened and which is being closed. Either way, this question is about a broader aspect of application design and it is not specific to browser environment.
I was building a wrapper around console.log() the other day to accommodate this, so I could toggle visible debugging on/off while at the same time sending output to a log file if I wanted, with support for error levels where I could filter only a certain level of errors in case the console was spamming too many "info" level messages. It was neat seeing all the functions fly by in the console, like a real-time stack trace with performance numbers. This all turned out to be counter-intuitive to my goal of having clean and readable code. Furthermore, console spam can really throw off your performance when trying to optimize. So instead of the wrapper, I decided to wipe out most of the calls to console.log() in my code, using it only where I was focused, and then wiping out those calls too when I was done. I found no point in keeping any calls to console.log() around for longer than their initial need. It just makes the code far less maintainable, and the console overly spammed. Maybe I'll give it another shot in the future though, when the need is more prominent. I'd probably advocate using a tool or addon which does this dynamically so that half your codebase isn't sprinkled with console.log() calls.
You should really move towards unit testing your components, not making complicated logging mechanisms for debugging. If you want to debug a particular bug, the last thing you want is a console full of irrelevant messages.
This is exactly what I needed - thanks for the links!
You can also use a Hash Table: http://davidbcalhoun.com/2010/is-hash-faster-than-switch-in-javascript/ (Not mine, just a quick Google result) I like writing my switches in several ways because it may also point to another way to write the algorithm. I've had some pretty neat refactorings just from experimenting with these kind of things.
I think I just need to update my example to a more window-height agnostic value. Thank you, though
I'm a fan of writing a helper function if you use that pattern a lot. function _switch(cond, obj) { if (cond in obj) return obj[cond](); else if("default" in obj) return obj.default(); } It might also be worth noting that objects can't tell the difference between numbers and strings.
Ah, thank you very much. This worked perfectly. http://jsfiddle.net/ojxymuek/ got only as far as not letting to put operators before anything else.. 
Nope, not the Flickr team. Its from the Media organization that is responsible for Yahoo.com and other properties like Sports and Finance.
yeah, I agree. I actually abandoned it twice before because it seemed to complicated -- but I didn't like Sequelize either. I might do a few pulls on their documentation from an "idiot" standpoint -- sometimes they assume I would know too much.
Logging is mostly useful while developing, including the very same unit tests. When working with large data sets, unit tests don't work well for detecting abnormalities (at the initial development stage). In this case, you need to scan with your eyes through the data stream.
This is fantastic. That scrolling part at the beginning is exactly why I started researching performance optimization in the first place, and he totally solved it. Much appreciated.
We (Yahoo's Fluxible team) are aware that documentation is lacking which makes it seems pretty complex and hard to use. We'll be releasing a website with better documentation in the next couple of months. If you have any specific questions you can reach out to me on Twitter: https://twitter.com/theridgway
Not bad for a start. Since you read `e.target.name` more than once, I'd put it into a variable ("pressed" perhaps). For comparisons, I recommend to use === and !== instead of == and !=. The first two do not coerce types. &gt; 5 === '5' false &gt; 5 == '5' true This part: function check () { ... } check (); Can be also written like this: (function () { ... }()); That's a so-called immediately invoked function expression (IIFE). The outermost parenthesis actually isn't needed. It's put there by convention to tell the reader that this is an IIFE. The reason for that is that the first line of: var x = function () { ... }(); Looks just like the first line of: var x = function () { ... }; With the extra parens you can see that it's an IIFE before you see the "()" part at the end: var x = (function () { ... }()); If you are interested in writing a calculator which doesn't use `eval`, check this talk: https://www.youtube.com/watch?v=4F72VULWFvc It should give you a pretty good idea how to do that kind of thing.
&gt; You should really move towards unit testing your components, not making complicated logging mechanisms for debugging. Unit testing and run-time instrumentation are two completely orthogonal functions, one of which sometimes happens to be useful for diagnosing failures detected by the other. &gt; If you want to debug a particular bug, the last thing you want is a console full of irrelevant messages. Reducing log output to relevant information is what scoped logging and log levels are for. Presumably this is also why the OP is asking about tag/group/filter functionality. Right now, the console logging in JS offers some distinct levels (error, warning, info, debug) and modern browser developer tools typically let you select the level that you want to see. Good dev tools will also let you filter the log temporarily, which means if you do adopt some sort of standardised tagging notation in your log messages, you can then quickly find only the relevant information. However, while this area is developing all the time, I'm not aware of any browsers where the built-in dev tools today support much flexibility beyond that. For example, writing more than one log simultaneously, possibly with different levels of output enabled, or having different components write to a shared log but at different levels, can be useful if you're working on a large project with a lot of data processing going on. Another typical use case is automatically consolidating repeated identical log entries, which some dev tools already do at least if there is no intervening output, or consolidating log entries that are similar according to some given criteria, which as far as I know none of the major browsers currently offer.
For the *new Array()* example, even if you know the length of the array, can you add/remove elements of the array at a later time ? Is there any efficiency advantage to using that syntax? And for the *new Function* example, do you ever really need to *eval* ? I thought *eval* is evil...
I see challenge and response there so http://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication ?
All of Paul Irish's talks and screencasts are fantastic. You also might want to check out [his Twitter](https://twitter.com/paul_irish), where he regularly posts about some cutting-edge webdev stuff. 
Hey there, I am in the same boat as you. My game uses canvas but the situation is no different. I am looking for a way to make sure my code is maintainable in the future, that's what it's all about. Don't let anyone fool you that a framework is the solution for you as you will no doubt end up with a bulky, over-engineered codebase that is not fit for purpose and you would have wasted a lot of time reading documentation. This is a game you are building and there is no magical solution for a maintainable and readable code structure. What you need to do is get back to basics and gain an understanding of [javascript design patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#designpatternsjavascript), this is where I am currently at and hopefully I will be able to rewrite my game without too much in the global namespace and organised into a nice recognisable design pattern that I can comfortably return to in a few months. With this great new power you will be able to create your own bespoke "framework" that suits you and your projects needs 100% with no fear of code-breaking dependency issues. If you need to pull in some helper code, do check if the module is already made (that will save you re-inventing the wheel) - [NPM](https://www.npmjs.org/) is your friend. If you decide to use canvas, I recommend [EaselJS](http://www.createjs.com/#!/EaselJS) or [Phaser.io](http://phaser.io/) along-side code written in a clean, dry and maintainable way as I described above. All the best with your project.
Take a look at Log4JS
Facebook SDK URL http://connect.facebook.net/en_US/sdk.js 
There is a CLI version for Node too, https://www.npmjs.org/package/cli-table.
Yes, you can definitely add remove items from the array later. One "advantage" of the syntax is that the `length` property is already defined (which can be useful in certain situations). Another advantage: [from StackOverflow](http://stackoverflow.com/a/3132371) &gt; Oddly enough, `new Array(size)` is almost 2x faster than `[]` in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost.
Thanks! Actually, they are extremely similar. I went for a slightly different API because of the requirements of where it's used in production. I also wanted to put more focus on plugins (either before request with `.use` or after with `.then`), I didn't want to replicate already existing work for node http requests (I'm using `request` as the node dependency) and I wanted a little more reusable (no promise rejection on server/client error codes, etc.) Edit: There's also download progress and (eventually) upload progress - really nice features for SPA progress bars.
I see what you are saying :) thanks for the tip good sir!
I have recently subscribed to his blog - I guess it was after this talk came out. He really does seem to be talking about stuff no one else is covering.
Stfu, you can't even suggest anything related, why are you even trying to "help" with such a stupid advices? If can't say anything related - learn more, up vote a question and wait for real answer. By the way, the real answer is to use different routing library because this one isn't actually any useful in real projects. So, go play with hello-world projects, kid
This is the most absurd thing I've heard all day. 
Comparison of jQuery commands vs their direct browser api calls. http://youmightnotneedjquery.com/
Here are 28 other options: http://ninodezign.com/25-free-jquery-plugins-for-doing-guided-tours-through-a-website/
not to be that guy but literally did you even google this https://github.com/lukehoban/es6features
 NODE! NODE! NODE IS THE STANDARD!!!
Why? Technically they are solving the same problem. And at least at the beginning they're practically twins. 
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
&gt;The Technical Committee that had previously been working on node-forward/node decided to move to the IO.js repository. The other non-technical discussion repositories remain on the Node Forward organization at this time. and &gt; IO.js continues the efforts of Node Forward. Two things to merge doesn't sound so insane.
read the documentation. you are unfortunately wrong. perhaps fortunately. i am an equal i don't give a fuck commenter. 
Throughout the article repeated reference is made to a desire to merge back to Node.js. The bullet points list at the end is a clear list of things needed to make that happen. It feels open but firm. IMHO the io.js project is a political lever to move the project forward that even if Joyent and the fork cannot reconcile will be good for the project. If I were Joyent I'd listen and get this talent back in the fold. Developers will follow this fork given it is most of the community leadership. The mariadb/mysql fork is a good precedent here. If the pistols at dawn moment can be overcome perhaps things like the clunky http, streams and domains APIs can see some attention. If no consensus can be reached leaving Joyent behind seems acceptable for a project that has stagnated for some time now.
There is public information about major Linux distributions switching and Google migrating. Is that confirmation bias? 
Build some stuff on your own. Look for some interesting APIs to use. Build and rebuild, ask for help, learn how to make your code modular and clean. Look for jobs at the kinds of places you want to work and contact them. Don't worry about rejection and don't worry about meeting all of the "job requirements". Usually somebody in HR makes up all the "must have bachelors degree" nonsense. Be awesome - get awesome job.
It's been done. Not trying to discourage you, but maybe look into what is existing and see if yours can offer something unique?
This. Especially the bachelors degree. In front end design, after 4 - 6 years in college, what you learned is already obsolete! 
Yea, I realize that now. It was one of those things that I couldn't nail the search term down correctly. Once I found it (suprisingly Lumberjack was the word), I found tons of other ones. Oh well, it was a fun project for two hours.
uhm... nope...
Working on it now. Hopefully, out by Christmas. 
Don't get discouraged just because someone already done it! :) It sounds like a fun and useful project to work on.
And maybe you learned stuff while doing it! Not a total loss, I'm sure. 
The content is actually... not that good, to be kind. All the confusion he seeds with those "nameless functions that now have a name" helps nothing. The full final part on "constructors" is generally forgettable (I see he's done quite a number of videos on constructors and he just can't seem to get it right). And he apparently shows almost 10 *different* ways to create a function which are, at best, 4.
Alright, sounds good! I actually kind like when a promise rejected due to status code indicating an error. It makes it easy to separate the logic on success and on failure. Can you name a use case where it's better to handle server errors in the success handler?
Three things. 1) My goal is to keep this simple and small. While I could handle all race conditions and add a complex control system behind this, it just simply isn't worth it. Including an external library (like PM.js) would be overkill. 2) If race conditions were to occur, dropping of messages would not be a huge deal. This is simply a way to monitor an application, not mission critical. 3) Race conditions don't matter at all. I do absolutely nothing with the return data (I don't event have a callback/listener for it). I'm basically a deaf guy yelling - as long as everybody else can hear me, I'm fine with that. If this were handling hundreds or thousands of logs a second, it would definitely need to go another route. I'd probably go with something like websockets, but then I'd lose backward compatibility. Bonus: This also supports all the way back to IE5.
Build a portfolio from a few (completed) side projects. It's a great way to communicate your passion and determination to an potential employer. 
MariaDB is something of a well kept secret. It is something I regularly use. The reason developers have not heard of it mainly is due to the fact that, as a developer, you use what is required. **However** as a system admin you look at the engines that are going to be used. As a system admin - have they heard of MariaDB?? It really buggs me with developers rushing to a NoSQL solution, because others use it. In actual fact most of the time - *you need a relational database*. Developers want to be on the cutting edge, and sometimes they sacrifice what is needed for what is wanted.
This is from the AngularJS docs:"As applications grow in size and complexity, it becomes unrealistic to rely on manual testing to verify the correctness of new features, catch bugs and notice regressions. Unit tests are the first line of defense for catching bugs, but sometimes issues come up with integration between components which can't be captured in a unit test. End to end tests are made to find these problems." Basically e2e-testing is about testing the website/web apps interface and functionality. Lets say i was building a todo-list with Angular(yeah i only used e2e on Angular, but i guess it's the same). Then i would write a e2e-test saying: * Add two items to the list * Delete one of them * List should now contain one item The test-runner would then simulate the the user-interactions and watch the outcome. Does it corresponds to the expectation? If you're feeling curious, take a look at this e2e-test written in Jasmine(again, used for Angular, but you would get the point): http://pastebin.com/FRSu85F4
Wow, really clear and thorough answer. So, if I understand this correctly, an ideal e2e test would assess the site for every scenario the user could possibly experience when using it. Makes sense - test the end result rather than the very low-level components. Since that test is written in Jasmine, why do frameworks like Protractor or Nightwatch exist specifically for e2e testing? It seems like Jasmine can handle these scenarios just fine. Also, e2e testing seems to require automation of browser interaction and navigation, above and beyond simple JS triggers (ex: actually simulate a mouse clicking a button, instead of just firing`$('button').trigger('click')`). Does that mean it requires the use of automation tools like Casper or WebDriver? 
Why are there so many prominant node.js (io.js) people in Oakland? 
no, the reason I was downvoted originally was because people disagreed without understanding what I was saying. I thank you for your valuable opinion.
you test typical user journeys by automated tools, complete including API and component interactions. opposed to unit testing which only cares about input and output of each particular method
Not like others here, although that is the correct way. I turned up unannounced after seeing the ad with a box of cupcakes with my cv and some js in in it, had a interview the next morning, had the job a week later. 
Very carefully.
Learn lots of stuff and complete some personal projects. It also really helps if you have good general programming experience, especially on large code bases.
Small error in README.md: Gzipped is way larger than minified (KB instead of bytes)? Interesting small lib otherwise. You could link to a polyfill for Object.keys for those browsers that doesn't support the method. Also, what happens if you run out of charCodes on very complex objects?
Just wanted to make sure you were aware of https://github.com/benjamine/jsondiffpatch Might be good to compare tradeoffs between the two libraries? Also, there is an error in the reported gzipped size.
Yep, that's a mistake. Great catch. I actually planned to add a section on browser support containing links to MDN with info on specific version support and polyfills (both Object.keys and Array.prototype.map needs polyfills in &lt;IE9). I forgot that – but I'll do it now :) There are _a ton_ of unicode characters! But if you insist I'll add it to the section on limitations. Thanks a lot for the all around spot on feedback.
I didn't know that unicode characters had a distinct weight ;-) You're welcome.
Thanks for answering, then I'll check fluxible app again. Can't wait for the website!
Many years ago when I was working at Travelocity the designers wrote HTML and CSS, but the UI developers wrote JavaScript. UI developers were also responsible for accessibility, SEO, and front-end security, and so forth. Competent UI developers are hard to hire, even now. They thought I had an aptitude for coding so they forcefully reassigned me from designer to UI developer and told me to learn it. I have been writing JavaScript full time since then.
Yes, I'm aware of jsondiffpatch. But it is unsuited for the use case that dffptch.js targets. The main differences are: * dffptch.js is _way way_ smaller. &lt;0.5KB vs &lt;6KB. * In the common case dffptch.js generates smaller diffs because it only patches one way and thus can shorten property name. The two libraries are different beasts and for how I intent to use dffptch.js it is both significantly smaller and better. I didn't mention jsondiffpatch in the readme because I don't want it to seem as if I'm bashing it.
It's a pretty nice trick right (I see your 140byt.es flair (I'm a fan))? [My previous approach](https://github.com/paldepind/dffptch/blob/576cb969d29ad4c965b1967ad52dd9fa296f267d/dffptch.js) simply shortened the property names as much as possible without collisions. It was more readable but both the implementation and the diffs were larger.
Hi Keith, thanks a lot for your article. Node.js is less foggy now for me :). PS: please, increase your line-height, it will be easier to read :)
Sounds good, thanks for the explanation. I'll need a library like this soon for one of my upcoming projects. Thanks for making your work open source!
Thanks! Framework might seem like an overkill for this particular project (at this stage at least) but I think I might benefit from learning it and use it in the future. I will look into design patterns you linked, seems like i could greatly benefit from it. Do tell more about your project!
I've decided to go with backbone.js. Or at least try - it's quite difficult for me to wrap my head around it since I'm new to programming. I do think however that learning how to properly use MVC frameworks will help me become a better dev. Thanks!
Seens like mine example (1st on the list) didn't really generate a discussion. Posting it really helped me though. Anyway, what you've written about SO is exactly why I decided to post on Reddit instead of SO.
This is when you should just start using Grunt or Gulp for task automation.
&gt; &lt;0.5B What do you mean? Smaller than half a byte?
I really feel like there is another one I'm thinking of, but this looks good http://www.programmableweb.com/apis
Ooops. It's not _that_ small. I've corrected it to &lt;0.5KB.
Side note: 140byt.es was created by Jed and me (well, it was his idea, but I helped building the stuff). Nowadays, I lack the time for new code golfs, but I still play the caddy now and then.
I lost a bet.
It's a great project. I've highly enjoyed many of them. Especially the collection of byte saving tricks. I wonder how crude a diff and patch I could implement in 140b. Maybe I could cheat and just do diff and patch in 140b each.
[mashape](http://www.mashape.com/) / [public apis](http://www.publicapis.com/)?
&gt; How is this any different than JRuby, or any of the Ruby implementations. None of the various Ruby implementations had a significant portion of contributors decide to create a fork over project management concerns. This isn't a "build Node on the JVM to get at Java libraries" fork, it's the same codebase with different project goals and a solid team backing it. So far I haven't seen anything like a commitment from Joyent to make IO.js a "canary" release, so it's reasonable to expect the projects to naturally diverge from here. Maybe some of the reaction is overreaction, but there's a real foundation for concern that this will fracture the community.
That wouldn't be cheating. Just 2 highly optimized functions. If you want, I can be your caddy, helping you golfing away the bytes.
Joyent isn't involved in IO.js, but the IO.js team has expressed significant concern over the speed of releases and the speed of implementing features. Both teams are still attempting to adhere to the ECMAScript standards, so at the end of the day they won't be significantly different. The JavaScript world has always thrived on a highly competitive diverse ecosystem. We have CommonJS and AMD, two very different ways of accomplishing modules and plenty of libraries manage to fit into both. We're used to fractured systems where some features only work on some browsers, this won't be significantly different. The places it is different it's an improvement because it isn't guess work. 
It doesn't hurt to mention the differences. And the reasons you mention are very good design decisions a dev considers when shopping for libraries. Especially the second reason, if a dev absolutely needs two-way patching.
Thanks, that was an informative read :)
Thanks for introducing me to stackgl!
I think I don't understand why that is preferable?
This talk had some extremely pointless slides. If most of your slides consist of a background image with one or two words on them, you need to reconsider their purpose. They aren't conveying information.
Interesting. What if you needed a backend? since React is just the UI, wouldn't it be possible to use a router and use API built with express?
Hey Koyomin, you will no doubt have better luck over at /r/java. Although Java and JavaScript both contain the word Java they are actually very different. Good luck with your Java problemo!
Looks good. You need to implement Promise.prototype.catch, Promise.all and Promise.race to be a full polyfill 
Public APIs is the one I was looking for, thanks!
As others have explained, EcmaScript[0] and JavaScript are mostly synonymous these days. JavaScript used to refer to Mozilla's extensions to the EcmaScript 3 (ES3) standard. This was more important before Microsoft abandoned its own reverse engineered and extended version originally called JScript (which still lives on in JScript .NET -- which luckily never received much attention). The first version of JavaScript to be standardized was EcmaScript 3. There were some attempts to publish a new standard as EcmaScript 4, but it failed because of unreconcilable differences between the parties involved (in a nutshell: Adobe wanted to take the language into the direction of what would eventually become ActionScript 3, whereas others just wanted something more conservative. This led to ES4 being canned entirely and instead replaced by a much more conservative and much more realistic next step: ES5. This is the version you'll find in most browsers today, except for IE8 and lower (and some more obscure antiques). Because web developers had to support IE6 for a painfully long time (and some, like me, are still stuck supporting IE8), a lot of the new things ES5 introduced are still considered "new" by many JavaScript programmers and still don't see much widespread use (in fact, I'd say that for many projects this ignorance of ES5 is the only reason they use libraries like underscore or lodash). ES6 is the next version of ~~JavaScript~~EcmaScript. It's still in development, although many parts of the spec have been bolted down and are unlikely to change. Browser vendors are implementing those parts (and even some of the more experimental parts) already, as you can see on the overview grid /u/x-skeww linked: http://kangax.github.io/compat-table/es6/ ES6 is also known as "ES harmony" and implements some of the ideas that were originally proposed for the failed ES4. As the working group in charge of the spec (Ecma TC39 -- because we haven't had enough obtuse abbreviations already) wants this spec to succeed, some desirable features didn't make the cut for ES6. These features may be part of ES7 in the future: http://kangax.github.io/compat-table/es7/ Now back to your initial question: should you care? Yes, definitely. Although you need tools like [traceur](https://www.npmjs.org/package/traceur) to be able to use most of them today (whether in the browser or in node), it's a good idea to keep up with the times and pay attention to what the JS community does with the new features (e.g. if you're into node, [koa](https://www.npmjs.org/package/koa) is an interesting experiment to pay attention to). I recommend having a look at the videos over at egghead.io (some of the videos require a subscription, but the free ones are worth checking out by their own): https://egghead.io/technologies/es6 Should you *use* ES6 features already? Probably not. If you're doing React, some of them (e.g. destructuring, method shorthands, arrow functions) are basically "free", but it's probably not a good idea to include traceur just so you can use ES6 features in a project. [0]: ECMA used to be an acronym (European Computer Manufacturers Association) but changed its full name to simply Ecma International some time after the original release of the ECMAScript standard. The organization's name is now written in regular case. Although the language is still called ECMAScript (and the ES3 standard is called ECMA-262), some have adopted Ecma's new spelling. Personally I prefer the regular case over all-caps, but that's just me.
I have to confess, I´m lost. I´m trying to adapt what you told me, but there´s something I must be doing wrong. Some questions: why are images null? The second block of code for(... Where does it include my local info? or does it? Most of the sprites will remain the same, just the enemies need to be loaded from the url. First I am working with a local image, but will update with a url as soon as I can make it work. Anyway, thank you so much!
Perfect, thanks that makes sense.
Just basic or even advanced stuff inside?
&gt; so I don't see how my job relates to it really maybe you should know at least a little bit background about stuff you use at work? :)
It's really good refresher.
All of ES6 is backwards compatible, so everything you are doing today will continue to be valid. ES6 will provide new language features and APIs in order to improve upon the existing language. Many features in ES6 can be transpiled back into ES5 code. Take a look at http://6to5.github.io/ if you would like to do that. You can even play with the [online REPL](http://6to5.github.io/repl.html#?code=class%20Person%20%7B%0A%20%20constructor\(name%2C%20occupation\)%20%7B%0A%20%20%20%20this.name%20%3D%20name%3B%0A%20%20%20%20this.occupation%20%3D%20occupation%3B%0A%20%20%7D%0A%20%20%0A%20%20greet\(\)%20%7B%0A%20%20%20%20return%20%60Hello%20%24%7Bthis.name%7D!%60%3B%0A%20%20%7D%0A%7D&amp;experimental=true&amp;playground=true&amp;evaluate=true).
It is not a DOM Promise, but Promise A+, slightly different. But one can easily use p0 to create a polyfill for DOM Promises Spec.
Which other ones have you looked at?
It's mostly about making the requests lower level and allowing users to write functions and plugins to support more advanced features. In fact, I was pretty worried about even adding automatic response parsing but I included it since I've never used it without it. The issue with automatic response status code handling is that with it you can no longer correctly use the module for testing (and other places). For example, hitting API endpoints and validating bad responses will now go into the error condition. That's a little awkward, since it's not a module error. It's also extremely easy to write a plugin to support this functionality. I could write one this afternoon, but it's about five lines to support your use case without breaking the module for people who want to use it differently.
This is probably, along with "JavaScript: The Definitive Guide", one of the best JavaScript books out there. It teaches you the language as it is and how to properly think about it. Other books try to make corollaries to concepts that don't exist in JavaScript and cause more confusion than they do help. If you are learning JavaScript, read this book.
I was talking about ES6 Promise, not DOM Promise (Futures). I understand your distinction though. I think a lot of people might be confused that it doesn't have the ES6 API. 
We use the ASP.NET MVC Web API framework. RactiveJS is what we use, since we make smaller web apps. It is very similar to angular, but smaller scale. Also, we use petapoco for model generation into Visual Studio. Visual Studio/Microsoft SQL Server for development tools, then RactiveJS/JQuery along with HTML5 to develop. I plan to start learning another library here soon, but I have not come to a decision yet. I'm thinking Ember or Angular 2.0(when it is out).
This answer should be marked as the accepted one. Oh wait. We're in Reddit. :D
Can you explain the logic for property name shortening?
Welcomed move. It is worrying the amount of searches for Node help that takes you to posts from 2011. Here's hoping these folks breathe new life into the project.
Ehh. I guess it's good for non-programmers looking to learn their first language, but for a programmer looking to write *eloquent javascript* JS:tGP is a better resource. More code, less prose.
Yep. You can use REST based APIs on the server and after giving the client the React files needed to run the page, hit a few services and change the page. Here is someone's example of using the Reddit API to display content using React: http://jsfiddle.net/ssorallen/fEsYt/ They are using the script tag to have the browser pull the JSONp data from Reddit, but you could implement it in many other ways.
I didn't like The Good Parts. The railroad diagrams in the beginning were miserable to look at. I found the weird JavaScript features easier to understand in Eloquent JavaScript.
Both good questions (which as we all know is secret code for "damn you may have stumped me"). I'll try my best to answer them: 1. There's several solutions to this: - Personally I use [Browserify](https://github.com/substack/node-browserify) with an UglifyJS transform. I believe you can get something like requirejs to do the same thing. - You could also look at other tools which concat your scripts into 1 file, and pipe that into uglify. For example if you don't care about Windows compat you could do `cat **.js | uglify - ` which would work fine. - Finally you could simply wrap UglifyJS with your own script, using the uglify JS API and a module like [glob](https://www.npmjs.org/package/glob) or [minimatch](https://www.npmjs.org/package/minimatch) or (my personal favourite, which depends on glob) [cli.js](https://www.npmjs.org/package/cli) 2. This one is... oddly, a little more difficult: - You could forget about Windows support, and use `cp src/img/**.png dist/img` - You could use something like [shelljs](https://github.com/arturadib/shelljs) and make a quick script to copy the files over - Get creative! Make an npm package which does this functionality in a cross compatible way, the community will thank you for it! Related... I'm getting more and more tempted to make an npm-gnu-utils package and solve these problems with Windows.
It looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you shouldn't only be submitting your own site. Thanks for your consideration!
I agree, but it's not as easily approachable as "Eloquent JavaScript". For a reference, "JavaScript: The Definitive Guide" wins (as most O'Reilly books do with their amazing indices).
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Yes. Great question. I've expanded the readme with a description of the diff format including an explanation about how the single char property names are found (it's actually really simple). Let me know if the explanation makes sense to you! :)
I have to respectfully disagree. I think it's better to learn the whole language rather than be told from the start what parts to never use. For instance, Crockford tells us that it's awful that `typeof null === 'object'`, but never explains why it makes sense: The end of the prototype chain is `null`. Test it out yourself in Chrome: `Object.prototype.__proto__ === null`. Similarly, he complains that `typeof /a/` is `'object'` instead of `'regexp'` which is silly since `typeof` is designed to figure out what internal type a variable has assigned to it and not what it inherits from. I could go on, but I won't. Learn the whole language, learn how the language implements the features, and then decide for yourself what is useful and what is not.
yeah... couldn't make it work. I opted to manually update the sprite sheet as needed, and to modify the unicode for the controls to show the symbols in a contrasting color.
Learn how to build a User Interface in multiple environments and languages, even if you don't master all of them. I wanted to code complex web UI's so I worked hard to master Javascript. After that, I learned C#/Windows GUI programming and Objective-C/MacOS GUI programming. I wasn't a master at C# or Obj-C but learning core UI principles across different platforms makes you much better FE Engineer and a badass FE web dev. Most "innovative" javascript frameworks/libs are really just derivatives of UI frameworks that came before in other environments.
Does it help people with very little (read: college-only) programming experience, or should people like us start elsewhere?
You are converting the DOM element into a string: return 'Token=' + document.getElementById('Token'); You should just return the element: return document.getElementById('Token'); Also, make sure the DOM is ready by putting your scripts below all the rest of the DOM.
Is this a good reference?: 1.Javascript the definitive guide, 6th edition 2.A smarter way to learn javascript 3.Eloquent javascript
I would say this is correct however I dont know if this is actually what they are after (in terms of fixing their entire script). I think we need to know what specifically they are trying to do, the description provided is a bit confusing to follow. Edit: Actually you probably are entirely right if they are intending on looping through all the properties on the token element, not sure why they have that as a function though when they are checking for null twice.
thanks Nckllvn, unfortunately neither of these seem to be the issue. Scripts are at the bottom, ( all the values for the other properties are pulled from the DOM and are ok) Also Im not checking against the output just the element. Ive tested without and its the same. Any other ideas ? thanks 