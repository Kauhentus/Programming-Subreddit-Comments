You could look into integrating bitcoinj, but uh, it depends a lot on the architecture of the game...
Not sure why you're looking for a library... here's a little snippet of super primitive code that should push you in the right direction. // You should probably use .addEventListener("mouseover" ... // but I was being lazy document.onmouseover = function (event) { var elem = event.target; console.log("Element:", elem); console.log("Selector:", elem.tagName.toLowerCase() + (elem.id ? "#" + elem.id : "") + (elem.className.trimLeft() ? "." + elem.className.trim().replace(/\s+/g, ".") : "") ); }; Change the type of listener, the selector's structure (you could drop the `.tagName` part if you only wanted id and classes), what `elem` is (you could easily set it to `event.target.parentElement` instead), etc. I think I covered all my bases in parsing out a selector structure, but if someone has a fix, feel free to post it below.
I beg of you, for fucks sake, indent and syntax highlight your code samples. Pasting your code into a beautifier shouldn't be an exercise for the reader.
Don't worry, they don't count.
For #2, check out the Module Pattern and the next couple chapters of the free "Learning JavaScript Design Patterns" book: http://addyosmani.com/resources/essentialjsdesignpatterns/book/
I came to Javascript after using PHP and Actionscript 3 extensively for years. I thought I'd be right at home since AS3 uses ecma as well, but class oop vs prototype oop was one of the biggest hurdles for me to get over conceptually. As a few others have mentioned here, embracing the JS way is the best way to go since you'll need to work within a community/company of developers having a common pattern and you'll need to minimize your overhead code. That being said, there's two ways you can optimize your code in vanilla JS to deal with inheritance. One is more messy and I think is what you were trying to avoid: function Person( name ){ //constructor and properties console.log("constructing a Person"); this.name = name; } Person.prototype.greeting = function(){ //method definitions return "hello " + this.name; } function Employee( name, salary ){ //sub-"class" and properties Person.apply(this,arguments); //inherit super-"class" constructor this.salary = salary; } Employee.prototype = new Person(); //inherit super-"class" methods Employee.prototype.constructor = Person; //inherit super-"class" type Employee.prototype.monthlyPay = function(){ //sub-"class" method definitions return this.salary / 12; } Now, semantically it's a bit scattered. Why when inheriting do I need to specify that I'm inheriting the parent's constructor and properties, then inherit the methods, then inherit the type. But the beauty of it is, you inherit what you need. So many times I've just needed some methods of a "class" I wrote and so I just inherited the prototype and was good to go. This pattern is best when you have A LOT of instances as it won't duplicate the methods in the prototypes, those will be accessible to the instances in the prototype chain but won't cause extra memory use. If you're using inheritance to give structure your code more than anything and the memory footprint doesn't matter because you'll just create a handful of instances, then you'll probably prefer this pattern: function Person( name ){ //constructor console.log("constructing a Person"); this.name = name; //properties this.greeting = function(){ //methods return "hello " + this.name; } } function Employee( name, salary ){ //sub-"class" Person.apply(this,arguments); //inherit Person this.salary = salary; //properties this.monthlyPay = function(){ //sub-"class" methods return this.salary / 12; }; } To me this is much closer to what you were trying to achieve, the only difference is your "class" definition is also your constructor method. Hopefully this helps.
Yeah, I'm not entirely sure I trust using napa for all client-side dependencies, but it's a little experiment I'm trying. Good chance I could fall back to Bower if things go sour. I tend to avoid Livereload, since, as far as I know, it still requires a browser extension? Maybe that has changed recently?
Fair enough – I've been known to tell people learning Python that they need to think in Python; makes sense that I need to think in Javascript!
*facepalm* you are absolutely right. I'm not sure why I was thinking about this from a completely different angle (thinking big instead of thinking small). Thank you very much!
i've used it with both the browser extension and in grunt with the js it injects into the site. it actually is so much simpler with the browser extension, and it's a tiny toolbar button you just enable when you need it. meaning it's really easy to toggle on and off, unlike the built in js. my biggest problem so far is it was running my commands twice sometimes. i just ended up using _.delay, but i need to figure out wth is going on in this build. 
I have been using [imagemin](https://github.com/gruntjs/grunt-contrib-imagemin) for convenience but [TinyPNG](https://tinypng.com) does a better job (although it doesn't support JPEG). Your readme shows several optimizers. Does this mean it will try them all and eventually use the one that has the smallest output?
Wow, port this to node-webkit, stamp to CD and you have yourself a $200+ piece of retail software.
You were just being webscale brah; I feels you *brofistbump*
YES, it does so. This module aims to support any image optimizers. ImageAlpha &amp; ImageOptim (They are GUI) supports many optimizers and grunt-imageoptim is grunt task for them. But it is just a runner of GUI, so it requires installation of them. This supports not only PNG but also JPG and GIF. FYI, Stoyan's article. http://www.phpied.com/give-png-a-chance/
I guess it's a cultural thing. In the FP world, where you don't mutate, `++` isn't really a thing, and `new-binding = old-binding + 1` or `new-binding = inc(old-binding)` is how it's expressed. And I think it's rare that you need it. Increments are the low-level imperative projection of a .next() or .succ() in streams/lists. In the end the gain in abstraction is already nice, even if they don't use Properties, even though I agree that it would be nice to take advantage of what javascript offers.
Just a note about TinyPNG and any other tool for that matter: double check the output. Tinypng will reduce the amount of colors in an image. Doesn't really affect simple things like sprites, but if you take a photo for example, you can clearly see how they're getting the filesize down so small. That said, I use TinyPNG A LOT. It's the best I've seen for pngs.
Cannot get it to install on Windows unfortunately! zopflipng won't install. 
Umm...Will it be better that zopflipng is optional?
you can use this (includes crush): https://blog.mozilla.org/research/2014/03/05/introducing-the-mozjpeg-project/ To get e few kb's less, hopefully more in the future
**Pros:** - "*Private*" variables (with closures) **Cons:** - No proper `instanceof` - New functions for each `Foo`&amp;`Bar` instance (memory consumption!)
I don't see why do you say I've missed subclassing, it's explained there: var SubType = Object.create(MyType); To add methods you can use a extend function provided by jQuery, underscore, angular or yourself [Fiddle](http://jsfiddle.net/fnKvR/2/) var SubType _.extend(Object.create(MyType), { myMethod: function() { MyType.myMethod.call(this); } }); It still better than function SubType() { MyType.call(this); } SubType.prototype = Object.extend(MyType.prototype); _.extend(SubType.prototype, { myMethod: function() { MyType.prototype.myMethod.call(this); } }); If you prefer to have it in one single function as I did in [this project](https://github.com/amatiasq/lulas/blob/master/src/core/type.js) you can use something like [this](http://jsfiddle.net/TcH64/1/) Anyway on my lastest developments I prefeer to contain, no to extend. I've made many [attempts to have a super function](https://github.com/amatiasq/jsbase/blob/master/src/extend.js) but they all gone wrong. I think we should stop trying to use external features (classes, super...) and use what javascript has. One of the issues I faced is the same bug than you have in http://jsfiddle.net/7h7Te/2/ and http://jsfiddle.net/7h7Te/3/, this only works for the first inheritance level. At the second level `.super` will be overwriten. var A = $extends(null, { init: function() { } }); var B = $extends(A, { init: function() { // we expect this.super (or this.$super) to be A // because B.super is A this.super.init.call(this); } }); var C = $extends(B, { init: function() { // this.super is B, because C.super is B // then from here we invoke this.super.init.call(this); this.super.init.call(this); // but wait! B.init is also invoking `this.super.init.call(this)` // as `this` prototypes C `this.super` is B, even inside B.init // So when B.init invokes `this.super.init.call(this)` its invoking itself } }); You can see the bug [here](http://jsfiddle.net/amatiasq/KTSY3/) The only way to have `this.super()` is [this one](https://github.com/amatiasq/jsbase/blob/master/src/extend.js#L35-L40), to wrap every method and replace the .super property before it's execution. Of course this is a lot of overhead so I don't recommend it. The final conclusion is than a simple and performant implementation of `.super` in javascript is not possible in ECMAScript 5. Also maybe I didn't explain myself in the post, this is not because I hate `new` and want it to burn in hell. This is because in some places I needed a factory instead of a constructor: var vector1 = new Vector2D(0, 0); var vector2 = new Vector2D(0, 0); If I had this object in memory and they are immutable I don't need to create anotherone but `new` always creates a new object even if you return another one from the constructor giving the garbage collector more work. This pattern allows you to re-define how the objects are created for each type var Vector = { cache: {}, new: function(x, y) { var key = x + '-' + y; if (!this.cache[key]) this.cache[key] = Object.create(this).init(x, y); return this.cache[key]; }, ... }; And finally about statics, I didn't talk about it because there are no statics, statics exists because you have classes and here you don't. There are only objects and every object has is methods, is up to you to use it on the Type object or in the "instances". You can see `.new()` as a static method. UPDATE: By the way, I didn't understand why did you use `__proto__` in your example since it's not standard, I forget to explain than `__proto__` [will be standard on object literals only](https://github.com/lukehoban/es6features#enhanced-object-literals), so this will be valid ECMAScript 6 base javascript: var B = { __proto__: A }; console.log(B.__proto__); // undefined
camus2: Sorry but you're wrong, these are not hacks, the constructor function is the hack we all have to learn. I'm using prototypal inheritance and this is way much more clear than using constructors. var Parent = {}; var Child = Object.create(Parent); var c = Object.create(Child); **This** is prototypal inheritance. No surprise. And in three simple lines I did what you did in eight and you was forced to use `new`, `[].slice.call` and `arguments`, the more complex part of javascript. Tell me now, **which code requires new developers to learn more hacks?** What looks like a hack is to use `new`, constructors, and `constructor.prototype` to do what just `Object.create()` does. jQuery doesn't use new externally: var a = $('a'); Angular scopes are created with this pattern: var scope = $rootScope.$new(); var child = scope.$new(); Because once your API has a 'new' you have no control about object creation. For more information you can see [this](http://stackoverflow.com/questions/16080691/do-we-really-have-to-change-to-object-create) question I did on StackOverflow almost a year ago. In summary, to explain how constructor inheritance works you have to explain: - Constructors - .apply() - [].slice.call - arguments - Constructor.prototype - Prototypal inheritance - Object.create(); - new To explain this pattern I only have to explain: - Prototypal inheritance - Object.create(); 
god thanks it is not true
instanceof works as far as my testing has shown :)
I'm not a huge fan of posting my own projects, but if you think it's useful feel free to post it :-)
That's very generous, Axel. I'll give it a read for sure.
thank you! 
Awesome, thank you Dr. Rauschmayer, I'll probably buy the PDF because of this. Wish I could have got it signed at Fluent conference or something.
lulz totes
Where would you say this book is, if you were to place it on a scale of JS: The Good Parts and JS :The Definitive Guide, as far as reference/manifest versus comprehensive total goes?
*finally* i get closures.. "A closure is a function plus the connection to the variables of its surrounding scopes", why didn't anyone describe it like that before?
It's a long read, but totally worth it: http://carnotaurus.philipcarney.com/post/3010984357/classes-versus-prototypes-some-philosophical-and I think that mostly every Javascript programmer comes from a class-oriented language and because of that we don't truly embrace prototypal inheritance; somehow we force it to something that's familiar to us.
No. You aren't making the web better; you are making usability worse.
"Hover over" nav menus are the bane of mobile surfing. Why would you ever want something like this?
http://www.programmersranch.com/2013/09/on-mystery-meat-navigation-and.html?m=1
These 'tricks' are straight out of 2001. Look into modern module systems instead of rolling your own.
I'm not sure what this has to do with JavaScript... Feels more like blog spam.
What "closed" closures for me is that closures are a protected variable space, they're references to variables or functions inside a function *after* it has executed. Technically, all functions are closures, it's just some are more useful than others. That's basically my elevator pitch when talking about closures to other devs.
Wow, this is fantastic. I mean like ridiculously awesome. 
The goal of ``reduce`` is to take a collection of values and perform some operation to result in a single value. One such operation might be to take a set of numbers and produce their sum (pretty standard example). var nums = [1, 5, 2, 17, 4, 11, 21, 9], sum = nums.reduce(function(total, current) { return total + current; }); As you can see, the callback function takes two arguments. The first argument is equal to the value returned by the *last* callback, and the second argument is equal to the current value you're processing. ``reduce`` can optionally take a second argument, which is the initial value to seed the operation with. By default, it's the first element in the array.
"Java is related to Javascript the way elephants are related to elephant seals."
&gt; I suspect that doesn't happen as often as you think. Now I'm curious how I can prove it, I'm tempted to write a browser plugin to track how often it really happens. You're pretty much correct, as [Steve Souders demonstrated](http://www.stevesouders.com/blog/2013/03/18/http-archive-jquery/)....the results weren't particularly impressive.
Not blog spam so much as off-topic.
The same article is posted to all the web related subreddits as well. (Not marked as cross posts... Look at the user profile.)
Some things like variable declaration hoisting are more similar in JavaScript and Python than Lua. I don't know Lua well, but see what you mean, for example methods in Lua feel halfway between JS and Python, an extra parameter that gets partially applied based based on how they're called.
Cheers mate, thanks much appreciated! 
Great example – thanks
I ran across this presentation last night by Max Kuhn, one of the authors of Applied Predictive Modeling (http://www.amazon.com/Applied-Predictive-Modeling-Max-Kuhn/dp/1461468485). https://static.squarespace.com/static/51156277e4b0b8b2ffe11c00/t/513e0b97e4b0df53689513be/1363020695985/KuhnENAR.pdf It's a really great discussion of how they did the joint authoring of the book and the tools they used - and what they would do differently.
And the fact that functions are first-class objects and objects are really just associative arrays with object-like features such as dot access and methods are functions assigned as an object member and are exchangeable. Those are super fundamental concepts.
I've had incredible difficulty explaining closures to people before. This will definitely help.
&gt; [jquery-latest](http://code.jquery.com/jquery-latest.min.js) on the jQuery CDN Thanks, I didn't know about that! Unfortunately seems most didn't get your message; I [still see](http://stackoverflow.com/a/441429/1324588) references to `/1/` as being most current. IMHO is it not best to change how an API works after everyone gets used to it.
First, I think you can improve on your "addLoadEvent()" function a bit. The way you have written it can create a fairly deep stack. This solution keeps an array of functions to call on page load: (function () { var onLoadFns = []; window.addLoadEvent = function (fn) { if (typeof fn == 'function') { onLoadFns.push(fn); } }; window.addLoadEvent(window.onload); window.onload = function () { var i, len = onLoadFns.length; for (i = 0; i &lt; len; i++) { onLoadFns[i](); } }; }()); The onLoadFns variable is closed up in the self calling function so nothing can add to the list without calling adLoadEvent. Second, if you want to scroll the window by 50 pixels (or any other action) every 100 milliseconds, setInterval is a bit more idiomatic: var scrollInterval = setInterval(function () { window.scrollBy(0, 50); }, 100); Hope that helps!
http://www.asp.net/ajaxlibrary/cdn.ashx
&amp; just noticed `http://code.jquery.com/jquery-latest.min.js` is giving me v1.10.2, while v1.11.0 is current.
Thank you for taking a look! I'll try this out now. One thing I should mention about the original code is that i'm using this in Salesforce on a Visualforce page using Apex. And this blog post shows that apex has some issues with onload; http://bobbuzzard.blogspot.com/2011/05/onload-handling.html
There was a mega-thread in [bootstrap/issues](https://github.com/twbs/bootstrap/issues?page=1&amp;state=closed) where someone tested the chance of hitting a local HD cached version of jquery. Because of all the CDNs &amp; versions, the odds are slim to none.
My addLoadEvent() will achieve the same result as the function advocated on the blog. I'm almost tempted to post it there, too :)
Call it juvenile, but [this](http://i.imgur.com/XLXM63J.jpg) is what made it sink in with me.
It’s similar to TGP in that it focuses on just the language, but I try to give more background and pros and cons. W.r.t. to the language proper, it looks like it’s even more comprehensive than TDG. But my hope is that you don’t feel that while reading the book.
It seems like the DNS entry takes time to propagate. Until then, you can use the following URL as a temporary work-around: http://speakingjs.com.s3-website-us-east-1.amazonaws.com/
By local, you mean the server? I know that. That's what I was arguing. If local means the client, how is it slim to none that the client doesn't have it cached?
Yes.
ok so while i have your attention on this, and i realize i'm just getting greedy(!), any way to set a delay variable... say, delay X seconds before start scrolling??
But the bar should be also an instance of the Foo because it's its parent object. ;-)
Ruby makes liberal use of what it calls "blocks" which aren't *quite* like first-class functions. They're handled and invoked differently. Ruby does have the concept of a first-class function in ``Method`` or ``Proc`` objects.
Ah thanks, I didn't know that. The Ars Technica article I linked to was written in 2013. Do you have some resources I could check out?
You've got all my preferred optimizers covered except one: for JPEGs there's also [jpegoptim](http://freecode.com/projects/jpegoptim). 
Sure can. You can even create a fallback, that is, attempt to load from CDN and if fails, load locally.
Yup. [RTFM](http://requirejs.org/)
As much as I love being helpful I don't want to take away from an opportunity for you to learn from experience. setInterval() and setTimeout() work exactly the same except that setInterval() calls the provided function multiple times with some period and setTimeout() calls the provided function once after some period. There is enough in my code snipit for you to work out what to do. If you really can't figure out how to do it, PM me with your best attempt and I'll try to help.
You seem really [ignorant](https://www.dartlang.org/) on new and emerging web technologies. 
Spending about 20 minutes giving it a glance, this book looks solid. One of the best introductory JavaScript books I've seen. I disagree with your opinion on `value != null` though. :-)
NSFW
what a beautiful answer. love it. thank you.
:-/ Javascript was the future. It seems to me it's almost everywhere right now. If you want to promote the course, I'd suggest using a different pitch...
Redditor for 1 hour.
I guess I meant to say closures. Blocks aren't *exactly* lambdas, but lambdas aren't necessarily first class functions. First class functions aren't even required for a language to support lambdas.
Those are all certainly true of Python and JavaScript, it sounds like you're saying they're also true of Lua? 
 var adder = function(sum,value) { return sum + value } [1 2 3].reduce(addder,0) == 6 is equivalent to adder(adder(adder(adder(0,1),2),3),4) == 6 also known as [1 2 3 4].foldLeft(0)(adder) == 6 [4 2].reduce(addder,0) == 6 [4 2].reduce(addder,"") == "42"
&gt;jsfiddle wont display the game since its canvas Why not? jsfiddle can do that.
Here's another example just for fun, finding the largest number in a set: var set = [4, 56, 1, 75, 2]; set.reduce(function(l, r) { return l &lt; r ? r : l; }, -Infinity); 
&gt; They can help, but are not a replacement for a CDN. Correct, it helps, but not a huge bunch without a huge buffer. Though perhaps with a bigger buffer... 
Sorry it's hard for me to be clear without a paragraph. &gt; hitting a local HD cached version of jquery Means on the client's HD. eg "the browser will have it cached". But even client-cache + ISP-cache = tiny% of a particular version of a lib being cached, unless it is a hugely popular site. Perhaps you'd see [Google's CDN of jQ 1.7.2](http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js) be cached since reddit uses it. But few sites reference that version on that CDN.
^ famous
Oops...thanks!!
Thanks! I like CSSO, though you have to [be careful when concocting](https://github.com/css/csso/issues/194).
&amp; you included [Stylus instructions](https://github.com/bjork24/Unison/tree/v0.6.0#stylus-integration) &lt;3
Looks neat, can you give details about `fragment.factory` please?
I guess I missed some important Python developments. Last time I looked at it seriously, the closest thing I found was lambdas, but even then it was restricted to one-liners.
really? never worked once for me, ya gotta show me how you get it to work!
It just... works. http://jsfiddle.net/Dt8RK/
This is a strange use case
Wave propagation!
That is wonderful. Very mesmerizing. Can you do it in 3D? I love how the busses slow everything up and once it moves out of the way, the car speeds up. 
Yes! I knew I was not the only one to get this conclusion :D
Oh fuck you VERY much! I just kicked my 2048 habit, damnit! And the best I could do in 2D is 2x 512's... Now 3D?! 3-fucking-D! You glorious bastard... How DARE you toss free smack in front of a junkie...
Also hams vs hamster and pain vs painting.
Actually Python has real methods. I think they were semi-killed in 3.0, though. The problem with Ruby is that it really does not like functions and wants everything to be a method. In fact it doesn't even really like methods either and wants them to be properties.
I thought this was a game and didn't know how to control the vehicles and which one was "mine" :(
Also, it's good practice to provide an initial value in case the array happens to be empty.
Exactly what I started noticing about real traffic
suppose **arr** equals **[a, b, c, d]**; and you have some function **f** which takes two inputs. **arr.reduce(f, init)** will become **f(a, f(b, f(c, f(d, init))))**.
Like it! Though the simulated traffic starts off stationary. Would be more accurate if the cars were all evenly spaced, then one of the cars would slow down unnecessarily. The car behind slows down slightly more etc. which causes a wave cascade.
Nice, but needs a limit on how quickly/frequently vehicles can change lanes. You have a problem at the moment with vehicles occasionally madly oscillating between two or three lanes for half a second or so as they switch lanes, switch back, switch lanes again (etc).
I prefer to think that this adds to the realism. 
[Make it juicy!](http://www.youtube.com/watch?v=Fy0aCDmgnxg) :) 
This is similar to a mini-simulator for the M25 around London (which is a loop around London) and has [Active Traffic Management](http://www.theaa.com/public_affairs/news/active-traffic-management.html) to try to mitigate exactly these effects, where sensors are used to effect variable speed limits via a central management system.
I want to click something to add more cars :p
Nice! What does -Infinity do? I know that's the initial value (right?) but -Infinity means...? 
To be honest, it bothers me for quite a long time. Actually JS as a mainly client-side language should have rich stdlib as first-class citizen in order not to load this logic each time down the wire.
I've [asked on Twitter](https://twitter.com/dmathisen36/status/445660049424515072) a few days ago but no response :( Anyone? ...Bueller?
You will need to use a date library such as http://momentjs.com/
Where's the function definition for Taxi? How does each taxi get assigned a color? EDIT: From the context: //fleet and Taxi are defined var fleet = []; var Taxi = function (i){ this.badgeNumber = i; } Taxi.prototype.color = 'yellow'; Taxi.prototype.blowHorn = function(){ console.log("Beep!"); } for (var i = 0; i &lt; 5; i++) { fleet[i] = new Taxi(i); } for (var i = 0; i &lt; fleet.length; i++) { console.log("Taxi with badge number " + fleet[i].badgeNumber + " is " + fleet[i].color); } Taxi.prototype.color = 'White'; for (var i = 0; i &lt; fleet.length; i++) { console.log("Taxi with badge number " + fleet[i].badgeNumber + " is " + fleet[i].color); fleet[i].blowHorn() }
I see, thanks!
really cool, my one criticism is that the transition when cars go between lanes is a little jumpy when you contrast it with how smooth everything else runs.
You are a life saver! If i wasn't a poor student i'd give you gold! 
Yup. But it's still silly that we need 3rd party libraries for basic shit like this
Here is my version. I am learning JS too, so it works but I am not certain this is a good way to do it. http://jsfiddle.net/PNXz7/
doesn't seem to work on chrome &gt; Error creating WebGL context. three.min.js:433 &gt; Uncaught TypeError: Cannot call method 'getExtension' of null three.min.js:433 &gt; Refused to apply inline style because it violates the following Content Security Policy directive: "default-src 'self'". Note that 'style-src' was not explicitly set, so 'default-src' is used as a fallback. 
The If statement doesn't sit there and watch that variable forever. You're setting LP to 0. You then check if it's 100 (it's not, you just set it to 0). So that code never triggers. Your if statement is going to need to go into LPclick somewhere, or investigate what's called dirty checking to figure out whenever LP changes and run that if.
Kind of bland wouldn't you say?
Awesome ! I was getting impatient at looking at the cars. I'll let it run for a day just for fun :)
that is statement only gets called the first time. put it in a function and call it from LPclick()
Although it is perfectly fine, there is no inheritance from Vehicle in the answer above, as per &gt; Taxi objects should inherit color, and numWheels, and blowHorn from Vehicle. var fleet = [], i; function Vehicle() { this.color = 'yellow'; this.numWheels = 4; this.blowHorn = function (){ return ' Beep!'; } } function Taxi(i) { this.badgeNumber = i; } Taxi.prototype = new Vehicle(); for( i=0; i&lt;5; i+=1 ) { fleet[i] = new Taxi(i); } for( i=0; i&lt;5; i+=1 ) { console.log("Taxi with badge number " + fleet[i].badgeNumber + " is " + fleet[i].color); } Taxi.prototype.color = 'white'; for( i=0; i&lt;5; i+=1 ) { console.log("Taxi with badge number " + fleet[i].badgeNumber + " is " + fleet[i].color + fleet[i].blowHorn()); }
This is confusing, what is the toDateString() method supposed to do? Doesn't it address your concern if not, can you please explain further. Thanks.
Show me where having to write your own include method because JavaScript doesn't provide one is defined as a basic principle of software development.
Okay, so I put the if statement in the LPclick and that succeeded in making the LP go back to 0 after clicking when its at 100 (I set it to LP to -1 so that the next round of clicking would start at 0 instead of going from 100 to 1). But The 5 in leagueNum still doesn't get subtracted by one. I apologize for my noobiness but i don't really understand syntax very well I guess. Also, Would it help if i sent you the html too? it could probably make it easier to see what im asking or something. Ill just include it anyway. If the google drive download doesn't work tell me. https://drive.google.com/file/d/0B-qbCOESBMmdbFNCMkxVVGZURTA/edit?usp=sharing https://drive.google.com/file/d/0B-qbCOESBMmdWmUyTExMWUtqdUU/edit?usp=sharing 
I just took a new job in Santa Monica (Los Angeles), and I'm currently commuting from Long Beach. I feel your pain.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
As to why JS has such a bad standard lib, I personally think it has multiple causes that all worked together to keep the JS language static for a really long time. 1. First off, Brendan Eich created the language in a very short period of time. Designing/delivering a rich API/lib simply wasn't possible. 2. At the time, JS was meant as a counterpoint to Java (and their applets). You weren't meant to write anythig big in JS (that's also why it's execution model is so primitive), since you had Java for big stuff and java's got a huge std lib. 3. Given the nature of the web, and the fact that JS isn't owned by a single entity makes any changes difficult. Microsoft's lack of interest in the mid early 00s for example did little to help, as well as a flurry of mixed directions JS took in that time period (class based OO for example). If you're still stuck developing for desktop browsers (and especially IE) you're essentially writing in the same language as existed 15 years ago, which is insane given how much the rest of the development experience has advanced. What JS needs most of all is IMO a good module definition. Nothing can really move beyond the basics until we at least get some hard abstractions we can depend on from the language itself.
Hah! I didn't read the the prompt. Ah well. Awesome stuff
Could have at least linked [tests](http://jsperf.com/json3/32) to [prove](http://jsperf.com/json-parse-vs-eval/11) it.
Can you put this up on something like jsFiddle? That will be a much more workable situation, and is considered the standard for something like this. http://jsfiddle.net/nQ7hy/ Take a look at that, it's working ok for me. How are you viewing leagueNum?
I will try phaser. I browsed today for such libraries and read about it. Looks interesting.
The source is in GitHub... :)
well now I have a decent feeling for why people get addicted to trying to do better.
m/d/y, seriously?
It's simply the smallest value possible so even like negative one million could be the largest result. If you reversed it and wanted to search for the smallest value you could initialize it with Infinity (of course reversing the comparison). Does that make sense? :)
[Have you watched this video?](https://www.youtube.com/watch?v=iGFqfTCL2fs)
That's the game people are addicted to? Really?
I've had a few people report this error, but a lot of people are able to run it in Chrome. If I knew a way to fix it on my end, I totally would! Super sorry :(
The first thing is big picture: you should try to bundle this up into a sort of plug in where you can easily attach it to any element with a single call. The next thing is a bit surprising. Why are you using constructs like assigning "addEventListener" to a string and using bracket notation to reference it out of curiosity? My general rule is that unless you are dynamically generating a string to reference a function inside an object (which can be very powerful in the right context) you should reference something inside an object directly unless it is a genuine lookup. An example here would be say you are storing a collection of objects within another object and using an integer id to identify them (I. E. As their keys). In that case using bracket notation makes it clear you are performing a lookup. If you did myObj.123 that'd be far more confusing vs. myObj["123"].The current approach is quite confusing at first glance. Another big picture thing is that if you bundle this all up you could have your function accept an object with configuration vales to avoid that long list of variables at the beginning and set values to default if the passed in object doesn't have them. This would allow you to flip the css values you suggest commenting out on and off by passing in a simple boolean in the options/configuration object you are passing in. In essence bundle it up in a similar manner to how jquery plug-ins usually work and accept an object to set up those values/make decisions about how it works/looks based on what is passed in. I can look in more detail as well but I'd guess others will have more to add. 
What's the problem - personally I prefer minutes:seconds:hours as well - just makes things so much clearer.
Thanks for the help, it still isn't working, so there must be something else on my site that is running in conflict with it. i'll take a closer look at that article you gave me and hopefully this will all make more sense.
In your setInterval dirty check, what if the user deleted exactly one property and added one with a different name? Just comparing `Object.keys(obj).length` won't work in that situation. You will have to do an actual comparison, and that cost might become considerably higher when many objects are observed.
I think you completely missed the point of this post.
It's about the order. Any self respecting programmer would format Ymd.
I thought about initializing it for specific element but then I thought about what would happen when elements are added dynamically, then it wouldn't work or I would have to manually rerun the tooltip function to attach events. I was using constructs like "addEventListener" and others as strings only to play around with file size when minified. I agree that this is not good idea, but in such small project I think it doesn't do harm. I like this idea about passing in an object with couple of options to avoid multiple variables etc. and I was looking into jquery plugin samples/templates but I didn't know if I can use them in plain javascript plugin patterns. I'll look into jquery plugins once more as they have more tutorials/content on them as plain js and try to implement what you suggested. Thanks for your answer.
How the fuck is this the top answer? I don't give a shit how you want to format it. I'm in the US. We do m/d/y. You're across the ocean. You do d/m/y. This doesn't contribute to the thread one bit. This and "you need a library" are the 2 most upvoted answers??? Really?
Of course, however, the point of the post was that he made a JavaScript game without any game libraries. No reason to be pedantic about the title.
First: npm install strftime then: var strftime = require('strftime'); console.log(strftime("%H:%M:%S %m/%d/%Y")); although this format is kind of terrible and not international. It's much better to defer to [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) on that, which is simple to use with strftime: var strftime = require('strftime'); console.log(strftime("%F %T")); in node you can just `node time.js` and for the browser there's [browserify](http://browserify.org). strftime has a small payload footprint: $ browserify -r strftime | wc -c 10401 $ browserify -r strftime | uglifyjs -cm | gzip | wc -c 1775 It's a good idea to embrace a module system and package manager sooner rather than later because you can leverage all the great work that's been done in userland outside of the core language.
Really? This doesn't solve anything. This requires a 3rd party dependency. That defeats the entire purpose of this thread.
You're going to need to explain this a bit further. When you say 'the object that is bound' what exactly do you mean? Maybe give an example of what you're trying to accomplish. What do you mean 'functions can be anything'? If you're asking how to return an object, you can do: function returnObject(){ return {...props and values here...} } Or are you specifically talking about the `this` keyword? 
You seem pretty confused about how javascript works in general. Let's start off with trying to identify what you're trying to accomplish more specifically.
I don't think this is possible, see http://stackoverflow.com/questions/15287925/mastering-javascript-function-bind Take a look at the polyfil on MDN to get an idea of how bind works: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility
Ah I should probably clear up that by "plug-in like" I just meant along the lines of the convention jquery plug-ins use for initialization which is to pass in an options object as I stated before. I didn't mean you'd need to use jquery or make it into a jquery plug in. 
javascript doesn't have built-in formatting so the correct answer is to use a third-party dependency from a package manager like npm. The premise of this thread was flawed and I provided a workable way to get the desired behavior. The sooner you embrace modules the sooner you can draw on the breadth of amazing packages that people have published to the expansive commons and the less you need to rely on the bureaucracy and politicking of a standard library to get shit done.
A minimal standard library can be a very good thing because it gives the ecosystem breathing room to flourish. For a great example of how a bloated standard lib can create huge problems, look at PHP with thousands of built-in methods available in the global scope. Even with more sane ecosystems like python, ruby, and perl, there are huge problems with a stale "batteries included" standard library that is version-locked to the core language. This makes it very hard to fix bugs and make necessary breaking API changes because anyone who uses those libraries will get the version that ships with the platform instead of explicitly stating in package metadata the semver of acceptable compatible package versions. See also: distutils2, List::{Util,MoreUtils,AllUtils}, httplib/http.client, second system syndrome The more of this functionality is moved into userland with a solid package manager, the less these problems matter and the more the core of the language can focus on providing a stable minimal subset that the rest of the ecosystem can actually take for granted. A project can either do a few things well or a lot of things but poorly.
As opposed to the more spicy MVC style guides? :)
Not directly commenting on what SubStack just said, but just found it hilarious that he's receiving downvotes for giving a good solution to the problem (and also offers a good shift in mindset by encouraging front end devs to leverage npm via tools like Browserify)
 var fnav = function(){ return navigator; } var x = fnav(); // x.hasOwnProperty("Geolocation") =&gt; true You can just return that navigator object. Then you just set it as above.
No no, I'll just look into jquery plugin patterns to apply to plain javascript not actually using jquery.
I am a US based programmer too and I do as a final output step format dates in whatever format local people use. But whenever possible I standardize as yyyy[delim]mm[delim]dd. Because it is more right, you can sort it properly. And the hierarchy makes more sense. It is essentially arbitrary how we represent dates so long as it is consistent. And nothing make us argue like arbitrary things. This form is a little better because it my be sorted as a string. Lots of times things want to sort by a natural ordering, and in the case of strings this works.
I like how I instadie
Uhh, [9.3kb gzipped](http://momentjs.com/downloads/moment.min.js).
Also, please add support for space to reset
Nice job. Are people really addicted to this game? I'm way more addicted to [2048](http://gabrielecirulli.github.io/2048/). 
Needs more honking
And thats why you should use game libary, you did good job but there is much more to fix
well that is why we have CDNs-most people have jQuery and other popular libs already cached, so even when including it in your page, you don't download it more than once.
Well in defense of Javascript: I would really like to see how big would it be if you implemented it in some other language. I bet it would be much bigger. I would really like to see ECMA to just take moment.js api and turn it into a Date spec for ES7. That would be just grandiose!
I would LOVE the ability to import my favorites playlist XML from my youtube account into your extension. They are always changing shit about their playlists. I hate it.
Hey, really nice library. You might want to add some comments, if possible. I got lost a bit on certain fns.
This sounds incredibly cool! I'm on my phone at the moment, but I'm planning to take a look at your GitHub repo as soon as I get back to my desk. =D
A general good way to work in OOP is to limit the creation of objects to the highest level objects and have most things work through composition. As in an object works on other objects. The common patterns usually just involve passing objects into the methods of other objects when they are used. As it relates to RequireJS, you don't need to worry much about declaring dependencies when objects are passed what they use. Though it still helps to know what depends on what so try to list them. Edit: Here's a code snippet to demonstrate what I mean: function Parasail() { } Parasail.prototype.enjoy = function() { /*do something fun*/ } function Vacation() { } Vacation.prototype.performActivity = function(activity) { activity.enjoy(); } var parasail = new Parasail(), vacation = new Vacation(); vacation.performActivity(parasail); The Vacation and the Parasail can work independently of each other, so there's no strict dependency between them, so you don't have to list in each other's files them when you use requirejs.
Well, there's already an open enhancement request for being able to export your playlists in text format: https://github.com/MeoMix/StreamusChromeExtension/issues/126 It could be extended to also allow for imports. That said, you can already import your playlists via URL: http://streamus.com/img/createPlaylist.png Is there any reason you want XML? Is that what YouTube exports playlists as by default? I'd be keen on JSON or CSV to keep it simple, but supporting a couple of types isn't terribly difficult
Awesome! Looking forward to it. :)
Also, white text on black background? Really?
Oh god why did I click that link
Yeah that's a good idea. Sorry my computer died while at school and I did not bring my charger with me. Also your jsfiddle was wierd idk what you did but I made my own. I changed the button to give you 10 instead of 1 to get to 100 faster while including css and stuff. http://jsfiddle.net/nQ7hy/#&amp;togetherjs=AN0mBJp1nE edit: I am viewing leagueNum at the top after bronze, kinda hard to explain unless you play league of legends but basically I want the 5 (or leagueNum) in "You Are Bronze 5" to change to 4 when you get to 100 LP, and when leagueNum gets to 0 I would like "Bronze" (or the variable "league") to change to silver (have not implemented this yet). edit2:Explaining the JS in the html, this was the only way I could make the league and leagueNum variables appear on the webpage, I have no idea if this is correct but it worked. edit3: wtf did you do why is it working now, are you jesus?
very useful, thanks!
Yeah :) I pitch the server-side to the csharp subreddit: * http://www.reddit.com/r/csharp/comments/1wb656/i_could_use_some_help_i_run_an_opensource_chrome/ * http://www.reddit.com/r/csharp/comments/1z73iu/follow_up_i_asked_for_a_code_review_for_my_server/
Hey I'm a full stack C# dev. Let's talk, I'll PM you my info.
If you are genuinely asking why JavaScript doesn't have a native date parser, I don't know. /u/powerofmightyatom's answer is probably the best you're going to get, else ask Brendan Eich. If you're looking for slightly shorter/simpler alternatives to your implementation above, then there are solutions like var d = new Date(); var today = d.toJSON().replace(/(\d+)\-(\d+)-(\d+)T(\d+):(\d+):(\d+).*/, function (_, y, m, d, h, i, s) { return h + ':' + i + ':' + s + ' ' + m + '/' + d + '/' + y; }); or function formatDate(date, format) { date = date.toJSON().split(/[:/.TZ-]/); return format.replace(/[ymdhis]/g, function (letter) { return date['ymdhis'.indexOf(letter)]; }); } var today = formatDate(new Date(), 'h:i:s m/d/y'); which takes advantage of `Date.prototype.toJSON`, which I think is supported in IE8+, and regular expressions. And if you're just whinging, then there's nothing we can do about that. Sorry.
Sounds neat! Any chance of a linux build process? edit: For the server I mean
Soooo why did you choose to use a canvas element instead of using wrapper, track, and slider divs?
This seems great, I'll give a try. Also a backbone dev, but don't really have capacity to help out. I'll follow the project though. Also, you should definitely have screenshots on your home page to give the user an idea of what it'll look like. 
Wow. This is awesome, and something I'd love to get involved with. Swamped with work right now, but I'll be in touch in a month or so!
Classical inheritance in javascript is obsolete. I have developed javascript based application for years. You can see some collision and problems if you use classical inheritance in javascript. Prototype inheritance is more flexible and powerful. I strongly recommend this article. http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/ 
It's doubtful unless there's some way of running Web API 2 on a Linux server. That said, there's a publicly accessible server already running. You don't need to spin-up your own local server to contribute to extension development. A friend in Australia helps contribute from time to time while running on a Mac just fine. You just need to go into settings.js and set 'localDebug' to false: https://github.com/MeoMix/StreamusChromeExtension/blob/master/src/js/background/model/settings.js#L25
awww, so it's open source but requires proprietary paid windows license to host... sad.
Hiya! I'll be in touch. Just collecting everyone's information for a few hours and having some beers before I send out messages. Did you know that Microsoft's stack is actually cheap/free to start-ups? http://www.microsoft.com/bizspark/
please don't pretend Microsoft open source is comparable to a Linux solution
They are entirely comparable. Make me an argument against it that isn't "I can't run it on this OS so it's worse." Server OS is completely abstracted away from developers thanks to cloud services. Plus, I get a typed language! That's pretty novel to you Linux guys. ;)
You can get all of the stuff to run the server entirely free... http://www.microsoft.com/bizspark/ I run the server off of AppHarbor, https://appharbor.com/ which is a free service unless you need to pay for additional AWS hosting stuff.. I honestly don't understand the backlash. I have absolutely no complaints with the C# server and find that using a mature, typed language helps ensure that critical pieces of functional get running quickly and stay running consistently.
if it was Linux I could run it on a server at home and stream it to myself for free. your path requires a cloud server and/or a windows server license.
&gt; This project has cost me several thousand dollars and server costs continue to cost several hundred a month. Streamus is not profitable, but very rewarding to work on. I see that you are hosting on AppHarbor already but take a look at AppHarbor's Community Application Program: https://appharbor.com/page/community-application-program. It might help with the hosting costs and such. 
WHAT! HOW DID I NOT KNOW ABOUT THIS! Thank you! EDIT: Okay, I've pitched it to Rune. We'll see what he thinks. We're definitely familiar with each other as I've worked with him over the years to get Streamus up and going. We'll see!
Awesome! Looking forward to talking to you in a month! :)
Hey! No worries. Even if you come up with some ideas and leave them as GitHub issues that would be great, but I can appreciate a busy schedule. :) There are screenshots on the "Getting Started" page. You're automatically taken to that page when you install the extension. That said, I've been meaning to rewrite the website as a 'one-page' website... but kinda low priority because I have enough users for right now and don't have a desire to grow until more code has been added.
Hey, I'm working on the #1 most pressing issue right now which is server stability. Streamus grew from 10k to 80k monthly users in one week and since then I've been learning a lot about database maintenance. I'm going to be ripped out the "Videos" column from my database and merging it with the "PlaylistItems" table to remove a 1:1 relationship, reduce joins, and reduce table fragmentation. Client-side I have a couple of top priorities depending on whether you want to work on bugs or features. * https://github.com/MeoMix/StreamusChromeExtension/issues/147 Sometimes when the background loads after starting up Streamus an error is displayed and users will encounter "Video cannot be played in an embedded player." errors on some, but not all, videos. There's clearly a race condition somewhere with how YouTube's API is being loaded, but I'm unsure what's going on precisely. I can try to dig up more information on it, but it's been a long standing issues. * https://github.com/MeoMix/StreamusChromeExtension/issues/4 Soundcloud support. This will be easier to do once I merge Video into PlaylistItem because I'm going to give PlaylistItem a "SourceType" field which will be an enum for either SoundCloud or YouTube. Getting familiar with the docs would be good though. * Finalizing support for G+ logins. Currently, Streamus just generates a GUID for a user ID and no password. I'd like to start logging people in based on their G+ ID and I have support for collecting the ID, but haven't turned on full support. Some test cases showing it works would be nice. * https://github.com/MeoMix/StreamusChromeExtension/issues/118 Media key support has been heavily requested and would be a moderately easy, bite-size chunk to tackle. We can talk more seriously about specific issues if you want or talk about other feature ideas if none of those sound appealing. :)
Awesome! Do you have any preferences on anything? Bugs? Enhancements? Play with the program a bit and give me some feedback. I'm going to try and go through all the GitHub issues tonight/tomorrow and make sure they're better than just chicken scratches to myself. :)
Here's a guide on how to host a Web API project on Linux: http://www.piotrwalat.net/running-asp-net-web-api-services-under-linux-and-os-x/ Or 30 seconds on http://thepiratebay.se/ to get a cracked W7 iso. You don't need a server edition. Just put it inside of a VM if you want it. It's 2014 man. Don't give me this crap. C# is a fine language to build a server in you're just being stubborn. I've spent years of my time and money creating something to give back to the community and you're picking me apart on not being open enough. 
That was just a 5-second overview... I'm sure I've missed many, many languages.
A nice quantum particle.
for sure, wasn't being critical, just adding to your point
Never even knew Github had an android app, thanks!
&gt; be advised that copying and running non open source assemblies (like System.Core) is probably not ok from licensing point of view both your proposals are probably illegal. no need to be defensive, you've just chosen a proprietary stack. live with it or choose a new stack.
If you read the comments, you will see the author admit that was a confusing statement to make. &gt; I think I've created unnecessary confusion with this statement. You don't have to do any of this to make Web API run. &gt; Sometimes when experimenting with running .NET applications on Mono (especially on cutting-edge versions) you may run into issues due to functionality missing and may be tempted to overwrite Mono assemblies with their .NET counterpart to make things work. You should never have to do that under 'normal' circumstances.
He's not saying you need to do that.. read a little lower.
Some things do get added to the standard JavaScript, such as JSON.
use browserify ? the idea of walking a [directed acyclic graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph) at runtime to [resolve dependencies](http://en.wikipedia.org/wiki/Topological_sorting) based on [declarative](http://en.wikipedia.org/wiki/Declarative_programming) [configuration](http://en.wikipedia.org/wiki/Softcoding) that contains [magic strings](http://en.wikipedia.org/wiki/Magic_string_\(programming\)#Magic_strings_in_code) ... *breathes* ... fucking terrifies me. i _think_ that's why i have "NEVER AGAIN" tattoo'd on my thigh... i've blocked out most of those memories though. (i used to be a drupal programmer)
Looks good. IMHO there needs to be a solid Node competitor to WordPress, even if a bit more lightweight. How does this compare to other Node CMSes please?
I agree, but I like that this was done at all. I'd prefer more people defining their thoughts on this to greater *spice*.
As opposed to the other [16,700,000 search hits](https://www.google.com/search?q=javascript+MVC) I get. Nice to have focused info, but it sore like an outline you'd find in slides or in a Gist. IMHO I'd expect more from a 'link-blogpost-on-reddit'.
MUCH agreed... very good point
True, maybe, but you could still write a few functions yourself to do this--make a vanilla JS library maybe--and all would be good to go. It's not that hard to make a simple date conversion function, and I actually just commented on a post with a [simple](http://www.reddit.com/r/learnjavascript/comments/20wrfw/im_looking_for_a_basic_javascript_that_can/) answer doing just that to a very simplistic degree... 
I would like to help contribute. Newer to javascript, but have a CS degree and am familiar with OOP. Let me know if there are any smaller tasks I can help with.
Yo! C# dev with front end skills here. Really cool project, so would be happy to help with it! Don't have insane amounts of time to put in, but guess anything is better than nothing .) I messaged you my github info. Lemme know if you need a helping hand! :)
I write my web APIs in C too!
Hey, a UI/UX designer here. I'd like to join the cause. Let me if you are in need of what I do. 
it throws some error
Hi, im been looking for a open source project to contribute to for a long time now, this might be it! Im having some problem setting up the extension for local debugging, receiving a 404 for a call from the googleApiClient.js, do I need to setup some API keys etc.?
What's the error that gets thrown? It'd help if you replicate everything in a jsfiddle so we have a better idea of what's going on http://jsfiddle.net/
late, but here's a grape palette #AC63CE, #890EC2, #2F0145, #623F73, #E8C0FA, #AC78C4, #8E2FBA, #260038, #6E069E
I've detected multiple hexadecimal color codes in your comment. Please allow me to provide visual representation. [#ac63ce](http://color.re/ac63ce.png) [#890ec2](http://color.re/890ec2.png) [#2f0145](http://color.re/2f0145.png) [#623f73](http://color.re/623f73.png) [#e8c0fa](http://color.re/e8c0fa.png) [#ac78c4](http://color.re/ac78c4.png) [#8e2fba](http://color.re/8e2fba.png) [#260038](http://color.re/260038.png) [#6e069e](http://color.re/6e069e.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
But where do I keep the hundreds of lines of logic? 
Not sure if it's the best method, but here's how I use it. This is my structure app/page/home.js app/modules/navigation.js app/modules/signup.js app/page/profile.js app/modules/modal.js app/modules/upload-photo.js This is what ``navigation.js`` looks like define(function(require) { var $ = require('jquery'); function nav($container) { // constructor here } nav.prototype.open = function() { }; return nav; }); This is how home.js looks like define(function(require) { var $ = require('jquery'); var NavClass = require('modules/navigation'); var nav = new NavClass($('.navigation')); }); I use the ``page/*.js`` files to require all the required modules. At the end, I run require.js optimizer to compile that to ``common.js`` and ``home.js``. IMHO, If I could do it all again, I'd use browserify. I kinda hate RequireJS now. 
Hey! This is awesome! I would be more than happy to help and learn. I am a full stack developer that uses JavaScript throughout the stack. Hit me up if required. Cheers! PS: [My GitHub](https://github.com/zeusdeux)
What's the reasons for it being an extension and not just a web application?
You are absolutely right. The limitation by localStorage and other methods is that they only work for the specific domain, so the files have to be downloaded for each domain. There are generally no good way of holding persistent data cross-domain to my knowledges, but you're welcome to prove me wrong :) My point simply was, that the library still allows use of cached data i.e. when a file is loaded from a CDN and it has previously been loaded, then jsCache will use the cached file.
This seems to either be a troll or someone entirely clueless to etiquette and interacting with people you request help from.
Also see https://github.com/cscott/compressjs
Use on mousedown, not on mouse up. Would make it much easier to control!
Great to hear that Streamus became super successful. All the best, may it become even bigger!
I'm currently working on a large AngularJS app, we added a dependency on lodash a while back to save us reinventing the wheel in some common scenarios. I definitely feel like the app is better off for it, as it's drastically reduced the amount of code in some of our services and controllers (_.pluck and _.find are used particularly often). I don't think there's really any performance advantage to it in most cases, but I find it's worth including just for code it saves us from writing.
I know javascript and node, but I'm fairly new to development. I'd really like to help out where I can. This sounds like an awesome project. 
Uh, why not parseInt('020', 10); ? Edit: I don't run jshint on my reddit comments—I leave that '10' off all the time. Also, I get it now that the test was to do it without parseInt. That wasn't clear in the post.
If you move this to AWS, you will pay three times as much per instance purely because of Microsoft.
Intl 1.0 has been final for some time and is so stable it's even implemented by IE. It's really surprising to me that this entire thread of people didn't bring JS's native date formatting function up but once :( ECMA International is the body that standardizes js (among other things). The TC39 committee of ECMA owns both ECMAScript (ECMA-262) and JavaScript Internationalization (ECMA-402) - and now JSON (ECMA-404). 
In the revised version you need to change `result = charToInt(s[i])` to `test = charToInt(s[i])` and it will work as expected. You probably remembered it wrong. Note the ordering of the multiplication and addition. For every step the result is the sum of the higher decimals, shifted one step to the left, plus the current value. In your original solution you shifted everything to the left, including the value of the current decimal.
This is as simple as I could get it: var s ="123"; var result = 0; for(var i = s.length - 1; i &gt;= 0; i--){ result += charToInt(s[i]) * Math.pow(10, (s.length - 1) - i); } console.log(result); 
Ahh!...That explains...Actually I did commented out var test; at the time of interview when the interviewer was explaining, which confused me how it worked...Also, I went back to the site where we wrote this(URL is open to public), and that's not what he did. But this makes sense now. So I guess he was under the impression test was still declared, and did it in a hurry without checking what he wrote, though he had the right thing in his mind.
&gt; As it’s all pulled from YouTube’s (largely user-uploaded) music collection, there’s a fair amount of cruft. While I find that the top result is usually the song I’m looking for, that’s not always the case. Some songs are mislabeled. Some are just iffy quality. Sometimes you get a wonky live version of a song that someone recorded on their phone while, judging by the quality, said phone was seemingly placed inside of a jar of jam. via [TechCrunch](http://techcrunch.com/2014/01/24/streamus-turns-chrome-into-a-fast-free-youtube-powered-spotify-alternative/) This is a problem I've always had with searching on alternative Youtube music players. When I find music on Youtube, I always have to look through several versions to find one that is correct, the best quality, the studio version, and free of audio watermarks. That being said, I'd be willing to find a way to automate this, or at least make it easier to find the best version.
Well, parseInt('020', 10) if he doesn't want to be linty :)
It's ambiguous. If the string starts with a 0, parseInt [may interpret it as an octal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Description) instead of a decimal: But why not parseInt("020", 10); ?
Since I am new to a lot of this: this would (could?) be used to decrease request/ response times between the server and client by reducing the size of passed data? Is that accurate?
No live demo?
This seems really neat, but the API seems pretty unfathomable. Can you provide more documentation? 
Scroll down on the github page. There are a few demo's and tutorials.
***Live demos:*** - [Animated GIF rendering](http://codepen.io/nosir/details/mdiHe) - [Input text rendering](http://codepen.io/nosir/details/IxBJn) - [Flappy Bird](http://codepen.io/nosir/details/rzaLA) - [Cube Generator](http://codepen.io/nosir/details/ganrh)
Hey! Yep. I agree it is a tricky problem. I just created a more in-depth enhancement request outlining the issues: https://github.com/MeoMix/StreamusChromeExtension/issues/173 This isn't the only enhancement surrounding it. Of course it could also be applied to search results to optimize them. Additionally, moving fully over to YouTube V3 API might improve results. Streamus does at least show HD vs non-HD videos, but it's not very helpful! :)
Hiya! Cool! It's not written in Node, but I'm sure there's a ton for you to learn here. I'd start by using the product for a few days in order to get familiar with it while I add additional information to enhancements and bugs. I'd also start brushing up on Backbone: http://backbonejs.org/ Feel free to respond or PM me if you find something you'd like more information about in order to start working on it, or if you have any ideas you can leave them in the Streamus subreddit or on GitHub! :)
Could you PM me a way to reach you outside of reddit so we could talk more? all of that sounds interesting to me. 
Hey Mudit! Cool! After I get done responding to everyone I'm going to be tackling the GitHub Enhancements/Issues list. I'm going to update and clarify all of the issues with more clear instructions in order to guide people. I'm also going to be working on generating some more documentation surrounding the project so it's easier to get up and running. Play around with the app, have a read through stuff, find something you're interested in and lets get you working on it! :) Edit - I see you make an isInViewport plugin. It might be worth taking a look at the lazyload plugin being used by Streamus and seeing if it can be rewritten in a better fashion. It seems pretty old, but I haven't had a chance to revisit it or evaluate if it's leaking memory (I having a sneaking suspicion it is.)
That has actually happened to me, many years ago. Had a certain user who was copying and pasting values from some other system that for some reason had leading zeroes. [Thankfully this is gone in ES5](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Octal_interpretations_with_no_radix)
I'd like to clarify - there are lot of compression libs, ported to JS. But pako is optimized for speed. In modern browsers deflate is just 1.3 times slower than native C implementation.
Hey! I don't think I got a PM from you! :( Will keep an eye out for it.
Heya. Glad to have you on board! I'm going to be updating the GitHub issues list today to make sure everything is able to be understood. I also need to do a better job of generating some documentation so people can jump into the project easier. I'd suggest starting by just using the software, getting familiar with it and developing some concerns you'd like to address, or finding something interesting in the GitHub issues list. It might also be beneficial to skim through the Backbone documentation and become familiar with their TODO app: * http://backbonejs.org/ * http://backbonejs.org/#examples-todos
With good indexes, joins shouldn't be that much a bottleneck. You should look at making sure all varchars are in a separate table. That way other tables have finite length rows that are easier to read, skip-over, index, etc. Then you create SQL Views that are those joins that you do frequently. edit: Not sure if this is an issue for you, because I didn't find your database schema. (I am not a c# person so I didn't know what abstraction to look for besides just doing a search over your server repo for "schema") second edit: You could also look at using an eventual consistency system for things like song upvotes and non-mission-critical data. What I mean by this is that certain data can be sent to a NoSQL database first and then culled into SQL at intervals (if even needed in the SQL at all). 
Yes, you are right there was clause "without using parseInt()" . Actually the question itself was based on writing a program =&gt; Custom js function equivalent of parseInt. Also, I don't think I have problem with asking questions like that as long as you are ready to explain it and do it right :P 
Haha. I'm managing to handle them all! I'm sure a lot of people will flake in the next few days, but hopefully some will actually contribute! As said in other posts, I'm updating the GitHub issues / documentation today. Have a play with the program and see if anything strikes you as especially interesting. Happy to talk about it! Just let me know what you need to know :)
Awesome!! I would totally love some more help with the UI/UX. Right now I was actually approach r/design_critiques with some concerns of mine: * http://www.reddit.com/r/design_critiques/comments/20x1l7/webapp_im_having_trouble_representing_a/ Do you have any thoughts on this? Feel free to use the program for a while and write down what you think is not intuitive to a new user and should be iterated upon. I'm thinking one of the main things is that the left base pane is too wide and the right base pane should be wider. Like, they should probably both be 50%. But yes! Seriously! I suck at UI/UX! Help me! :) I've stolen a lot of the UI from GitHub for Windows: http://windows.github.com/
&gt; Is your repo available to the public Nope, it's a commercial enterprise product, so very closed-source. As yet my sole contribution to OSS is [this pull request](https://github.com/asciidisco/Backbone.Mutators/pull/27) to [Backbone.Mutators](https://github.com/asciidisco/Backbone.Mutators); I have pretty limited personal time and a lack of brilliant ideas for my own projects, so an opportunity to be able to contribute here and there on another project, without accepting a ton of responsibility, is pretty appealing to me. Already installed and played with the extension--it's really neat. I'll poke it at some more, check the issues list, and DM you with contact info and what I think I can contribute to. Cheers!
Hey, My indexes are fucked on the Video table which is why I am taking it out. The PK for the table is the YouTube VideoID, but it's essentially pseudo-random which is causing massive amounts of fragmentation. Additionally, the table was just a bad idea to begin with and unnecessary. Merging the Video table with the PlaylistItem table will also allow me to be more flexible -- I don't think the table is very wide at all anyway. :) And yeah. I need to learn more about different databases. I can appreciate that a NoSQL datastore would work more quickly, but I haven't done any research into it. All of the mappings can be found in the Mappings folder, of course: https://github.com/MeoMix/StreamusServer/tree/development/Streamus/Dao/Mappings The relationships are pretty trivial right now though. It's just: * User &lt; 1-to-many &gt; Playlists &lt; 1-to-many &gt; PlaylistItems &lt; 1-to-1 &gt; Video. There's also a ClientError table for recording client-side exceptions that are encountered and a ShareCodes table for generating playlist sharecodes for sharing, of course. Ideally I'd like to break the relationship between User and Playlists and merge Video into PlaylistItem so that additional tables don't lock when loading a user and only joining 2 tables max to keep my (really low power) server running. :)
[Freeciv-Web](http://play.freeciv.org/) is a HTML5 version of Freeciv playable online in a browser, which uses HTML5 technologies extensively, such as Canvas, WebSockets, local storage. The source code can be found on [github](https://github.com/freeciv/freeciv-web). Any web-developers here on Reddit interested in contributing to this open source game project? The development environment is easily setup using Vagrant. Please post your feedback and ideas here!
Hey, What version are you looking at? googleAPI.js shouldn't be referenced in the dev version currently because it was acting up in production so I decided to not wrap it in an async! wrapper. Happy to help you debug, just need a bit of info :)
Backbone.Mutators looks pretty cool! Not sure how I feel about being able to override getters/setters, usually find it better to explicitly create a method so it's a little more explicit that you're doing something, but can totally appreciate the usefulness of having it available, too. Sounds good! I'm going to get to working on the issues! :)
Meh. I'd rather let a dev rely on the language while solving a more realistic example, but more realistic is almost always more complex and I realize interviewers have a limited amount of time (I often am one, I know). FWIW I was stuck thinking about it for a while, and I think this is a bit tighter--it avoids your interviewer's charToInt function but that function (if it existed) must have done basically the same thing (if he also didn't use parseInt). var s = "135789"; var result = 0; var index = 0; while (index &lt; s.length) { result = result * 10 + s.charCodeAt(index) - 48; index++; } console.log("Final", result); Edit: Was thinking about reading s.length in each loop vs assigning a var to s.length and evaluating against that. You always hear that you should do the latter but I decided to test it out. My results showed at best a small performance gain in the assign-length-to-var approach--no more than 1-2%; on some runs the direct-read approach was even a smidge faster. Of course this may be highly dependent on the VM; I ran this in Node (so V8). Doing it in IE8 or something may be a lot different. Anyway here's the test if anyone's curious, and now I've run out of things to do instead of packing up my house like I'm supposed to be :P var s = "It was a dark and stormy night..."; var sLength = s.length; var x = 1000000000; console.time("Evaluating s.length"); for (var i = 0; i &lt; x; i++) { s.length; } console.timeEnd("Evaluating s.length"); console.time("Evaluating sLength"); for (var i = 0; i &lt; x; i++) { sLength; } console.timeEnd("Evaluating sLength");
The changes are only additions, and the core of ES isn't changing at all. The major new additions patch over missing functionality or make the language a little nicer when writing larger apps. 
TL;DR Mutators are probably mostly useful when you don't have front-to-back control of the API and it doesn't match how you want to model your data in the client. The usefulness of mutators is when you want something to behave as though it's part of the model when it really isn't. So, as an example (this use case is why I picked it up), imagine an API is sending you a dealership record that includes a list of cars that has different types intermingled: { name: "Lousy Car Dealership", inventory: [ {model: "Bean", type: "economoy"}, {model: "Marsh", type: "sports"}, {model: "AgingRocker", type: "sports"}, {model: "SoccerMom", type: "suv"} ] } Etc. But what you want in the client is be able to treat SUVs, sports cars, etc, as different list. Why? Couple reasons: 1. You want to be able to use these lists in a template (e.g. underscore) or data-binding mechanism (e.g. Stickit) that works most effectively when you can point it directly at the model (or in the case of templates, directly at what you get from the model's toJSON()). 1. You want to be able to add or remove items from each list, and have your model emit appropriate events (e.g. "change:suvs"). There are other cases too. Most of them probably involve not being in full control of the API, which I'm not in my day job, so I need to do this kinds of transformations sometimes when I only have a general-purpose API to work with. The specific pull request I put in for mutators was to omit computed values (getters) when serializing during a save operation. This was because the server API I'm using--RESTEasy (Java library, now ships with JBoss)--is not configured to ignore values in a PUT or POST that aren't part of the model it's working with, and fails such calls.
It depends a lot on what browsers you intend to support, I'd say. If you're only going to support modern browsers, /u/hostilian is mostly right, but things like call/apply/bind will be less important with the `...` operator and arrow functions.
Your function is broken with any input that contains non-digits.
Yes https://github.com/fontello/ttf2woff , i participated in development :) . If you need to build ttf - look at svg2ttf repo in the same organization.
Yep. I'd separate validation from parsing, though; OPs code would have the same issue unless the charToInt function returned 0 for non-numerics, and it's not at all clear that'd be the right thing to do. Is alternateParseInt("z2f8.7") === 287 really the "right" answer? Edit: Probably what mine should do is throw an error, though. Evs, wasn't trying to write a library.
It just runs in the browser. Put the code in your html body between two script tags. Functions can go in the head. You can use any text editor, like you would with html.
Thanks, fontello is really nice, I use it for work quite a bit.
**tl;dr;** JS isn't getting classes, and it isn't not getting them any time soon. If you don't understand prototypes you're shooting yourself in the foot. Well, it will probably be around 5 years before you can safely use es6 features for any public facing websties, maybe 6. In that time there will surely be many shims and compilers made that can help the transition, so we'll be living in both worlds for a while. So even if JS were a completely different beast in es6 than it is in es5, it would still take time. However much of modern day JS will stay. And even many current patterns will still be useful in certain situations even with the introduction of "classes". Additionally, although the syntax for inheritance and prototyping is going to mimic popular implementations of class-based OOP, Javascript is not getting classical classes in es6. It's simply new syntax to deal with prototypical OOP and inheritance. So understanding how prototypes work and all the patterns associated with them will still be of great benefit even if only for bug testing.
IE8, 9, 10. Unless your job really, really sucks, in which case: IE5, 6, 7, 8, 9, 10.
Sounds like you want to mess with learning the language such as variables, functions, alerts, console.log, etc. In that case JavaScript needs a console to write to. I don't know what browser you're using but in Firefox (chrome is similar): Open the web developer console: Tools -&gt; Web Developer -&gt; Web console Then open the "scratchpad" Tools -&gt; Web Developer -&gt; Scratchpad You type your code in the scratchpad and the output will show in the open console in the browser tab (or pop up a dialog when using alert). I only use jsfiddle and jsbin when sharing code snippets. Although you can use them for much more. (BTW, if your web developer console were open you'd see the "results" from jsfiddle in it as well.) That should at least get you started. 
This is a bigger deal for backend Javascript (NodeJs, PhantomJs, etc) where you get control over what version of Javascript you get to run. On the Client/Browser side, don't expect to be using these feature (without some form of a compatibility cross compiler) for a LONG time.
var n = +"123"; The above converts string to int.
Second thought: You don't really need to store much more about a video than the youtube id, since the client can fetch it all using ajax. With an app like this you want to offload as much of the work to the client as possible(while maintaining good UX) to keep your server costs down.
Do you or someone you know have to target IE5? I feel like there should be a help line that you could call.
I kind of agree, but there are some quirks: * It's nice to be able to display the total time of a playlist. This means you have to be able to calculate the total time of all the songs in the playlist. Which means that you either have to save that information, or risk spamming the client with WAAAY too many AJAX requests because you can't retrieve multiple video information in one request from YouTube (1 video: 1 ajax request, think 1k+ video playlists..) Mostly I'm just not pressed for server space at all right now. It's more about # of requests going to the server. I'm not sure that removing a couple of columns while adding load times on the client is the right call, but it is definitely something I have been trying to keep in mind.
Former contractor for both government and medical fields. I had to support that full range at some time in the last 4 years.
Yikes.
For playlist length, I would store that in a "playlist_metadata" table. There will be times when you want to fetch the playlist but won't need data like the length of it. The playlist length can be calculated on the client as items are added and then you just store the total length as it changes. That is an option. Cutting down on the amount of space that your db takes up allows you to keep more of it in RAM which allows for faster and more requests. The client also has localstorage to cache many of those ajax requests for future use.
I mostly agree with you, but a lot of places are now following Google and only supporting the latest two revisions of any browser. And if browsers continue to update as quickly as they have been (even IE has been), it might only be a year or two until we're using ES6 features natively. And even if you can't use them natively, the Traceur compiler offers quite a few of them now.
Oh for sure. Plus everybody's interview style is different, and maybe this works well for him, for the role and team he's hiring for.
Just added the sample code for building all primitives, the steps are actually the same, dimension&gt;color&gt;primitive&gt;position&gt;render to view. hope it helps! - Cube: http://jsfiddle.net/nosir/ygWEW/ - Pyramid : http://jsfiddle.net/nosir/ZVURu/ - Brick: http://jsfiddle.net/nosir/6MuVr/ - SideX &amp; SideY: http://jsfiddle.net/nosir/bLsew/
useless in touch screen environment.
Yeah, that's definitely the hope, but we need to consider the nature of the change taking place. Right now I build sites for clients which have drop shadows, rounded corners, non-flash video/audio, css animations and everything. A lot of this stuff is quite recent and my clients are ok with it... But there's always that conversation: &gt; Dear client, &gt; your site will not look like this in any browser below IE8 BUT it will work, buttons will click through, graphics and images will be laid out roughly the same although they won't look nearly as good However if I write: function* generator(){}; Or var [ x, y ] = { x:1, y:2 }; Or Class JavascriptIsCool {}; Or any number of &lt; es6 syntax-breaking features, the browser will just stop anything else I want it to do. So in that light I'm sure that I won't have any clients telling me in 2016 that it's ok if IE10 crashes when their website loads. So like you said, compilers offer some of those features will help us make the leap, and we'll have to rely on them for quite a while. But if someone doesn't learn es5 patterns in that transition, they'll probably have a lot of productivity issues in solving bugs they don't understand, especially with classes since they're only syntactically different, we're still using prototypes, just making and inheriting them differently
Thank you so much for answer!! I found this aswell! Think I am on the right track! http://www.developphp.com/view.php?tid=1256
I want to hear the baby sound LA-LA-LA
What?
I WANT TO HEAR THE BABY SOUND LA-LA-LA
Continuing your analogy. Keeping track of screws isn't really the responsibility of a car. A car might have a "collection of screws" object that knows how to keep track of them and keep a mapping of their names for fast lookup. When a screw renames itself, it can tell its "collection" about it, and now you have the best of both worlds.
in the original game https://play.google.com/store/apps/details?id=com.veewo.a1024 there is a baby sound saying LA-LA-LA when you have matching numbers (minimum 16). LA-LA-LA
Good TL;DR as it separated your two questions. I'll give it a shot: &gt; How does Javascript interact with HTML and web browsers Leaving aside consoles for a moment, JS is executed in the browser when the browser loads a script--either direct JS in a script tag or JS loaded via a script tag. When the browser executes JS, it provides the JS virtual machine with a "host environment"--a set of variables that are not part of the JS core language, but which the browser makes available. The variables you're probably most familiar with are `window` and `document`. Browsers actually make `window` the value of `this` (open a browser console and type `window === this`, it'll return `true`), so `document` is equivalent to `window.document`. The browser also provides a number of object types that are not part of the core language. For examples, when you access elements on a web page with JS (e.g. `var myDiv = document.getElementById('myDiv')`, you get back an [Element](https://developer.mozilla.org/en-US/docs/Web/API/element). If you use `var mySpans = document.getElementsByClassName('mySpan')` instead, you get back an [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection). In fact each HTML element has an interface that's available to JS--for example, when you get a reference in JS to a `&lt;select&gt;` element, what you have is a JS object of type [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement), and that's what defines the functions and properties you can access with your reference. When JS runs in a non-browser context, like Node, it runs with a different host environment, with different variables and functions available to it (like `require`, `module`, etc). When you just load a JS file into your browser, though, the browser sees it as just plain text. It's not part of a web page, so the browser doesn't know that anything special should be done with it. Browsers always run JS in the context of an HTML document. As to why copying and pasting to the console didn't work--not sure, but there's a good chance that line feeds in your pasted code are what broke it. Browser consoles want to execute each line as soon as it's typed, so if you type `if (foo === 'bar') {` and then hit return, the VM just tried to execute line, and it's a syntax error. In Chrome you can use SHIFT+ENTER to move to the next line; there may be something similar in other browsers, but that won't help if you're pasting a whole block of code. So... &gt; where/how can I simply write and execute Javascript As somebody else mentioned with extreme brevity (pretty much the opposite of me), Node.js is probably your best bet. You don't have to "learn Node" to use it for what you want. You can just (a) run node and type in the console all you like (its console about realizing you've opened a block and not trying to execute prematurely), or when that doesn't quite cut it, save your file as whatever.js, and run it by typing `node whatever.js` from the command line. Any `console` statements you use will be output when you run it, so that's generally how you see what you did. Error reporting is also good too, for when things go wrong. Hope that helps.
I'm a bit late to the party but I would be interested. I know there are a lot of C#/M$ haters out there but I absolutely love it. I have about 3 years of experience with ASP.NET MVC and recently started working with Web API.
Great thanks man I did even figure that out by meselfe ;P 
Do you have personal experience with Keystone? I'm using it in a project right now and have some questions I can't find answers to. 
Some folks like to use Promises for a different way to structure a sequence of async code. I like the [q library](https://github.com/kriskowal/q) myself. Also, this was a helpful article for me: [Promises in Wicked Detail](http://dailyjs.com/2014/02/20/promises-in-detail/). Also, [You're Missing the Point of Promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/). That said, even with promises, accumulating a set of variables over a number of queries can get a bit counter-intuitive. I once read a good StackOverflow answer with some best practices, I think put up by one of the contributors to q, but I can't find it :(
Thank you for answering the additional question regarding classes. Great answers.
Hit F12 in Chrome, and type in some JS right there. Ideally, do that on the "new tab" page, where no modules are loaded. Easy and effective way of experimenting.
[Bootstrap's set of JavaScript components](http://getbootstrap.com/javascript/) are a pretty good list of common problems you'll find even in simple sites. Of note: modals, dropdowns, tabs, tooltips, carousels/sliders. (In case it's not clear, I'm not saying you should necessarily use these components, but rather that these are common problems that Bootstrap has decided to provide solutions for)
I have no idea if other small companies are similar to mine but we use vanilla javascript for purely client side validation. I'm talking alert boxes like it's 2002 still. I am the only javascript developer at the moment (and I'm a full stack developer) and we do work for hundreds of clients, and there is still just never a need for using jquery because introducing jquery as a dependency for just selectors is almost always overkill. Being able to do client side validation like we do requires only an understanding of the DOM and having javascript interact with it (does this text field pass this regex? is this checkbox checked in this scenario? stuff like that). Anyways in my personal opinion if I were to hire a JS developer for a position that required actual expertise and not comp sci 101 level work, I would expect you to have a full understanding of all the basics and quirks, closures, scoping, popular idioms, es5 functions, call, apply, being able to write readable code, knowing things like not polluting the global namespace, and able to implement a few patterns like the revealing module pattern. I really don't know any real life examples of coding you could do to practice, but I've found http://www.codewars.com a good website to use for practicing javascript, and what I love about this site is how I can quickly see how my implementation of a solution can be improved. 
Why does it matter what it would be used for in small business sites if you are asking in the context of front end developer job postings? That's very likely not what those positions are for but are roles where you are building complex single page applications and yes, expertise in those 3 things are a bare minimum requirement. In my experience, if a company has specific front end dev positions... They are doing complex front end work. 
Promises are now the proper answer imo but have you looked at the async module? It's a core module and will greatly simplify your code as well. 
I downvoted because you don't provide any information, other than that you used React, Browserify and Gulp. What is the project's purpose? Was it just to learn these tools? What does the project do? What is "Uberlist"? Is it basically like TodoMVC? I see that you also use Underscore and Faker. Where does the fake data come into play? What are you achieving with each of these? I'm sorry to be such a douche about it, dude. A little more info would be cool. It looks like it's a neat project!
I think you are all missing the point of why people ask this sort of question (because it's probably not an approach you use, so that makes sense). I don't think people ask this sort of question to determine the persons ability to code (I hope not anyway). A simple problem is picked to first: weed out really blatant bad practices and in the case of a javascript position: see how much you actually understand javascript (in this case most likely the type system and how to exploit it for maximum power). Finally it gives you a chance to see how the candidate thinks through things. The simplest answer here is multiply it by 1.....literally. This would indicate they understand the type system and have a deep understanding of how/when coercion happens. Another answer I'd be happy about is ~~"020". This would show me that again, they understand the type system and coercion, have enough understanding of the language to immediately know the bitwise not, understand bitwise operations in general, probably understand 2's complement, etc, etc. Finally, if they actually coded an algorithm I'd be happy if they did something like myString.split("").reverse().reduce(.... and passed in the extremely simple computational callback (obviously they could do this in steps to make it clearer but it would show me things like: they think in terms of the data they are acting on. They got it into the simplest form to make the computation extremely simple (thus reducing the actual risk for bugs in the main algorithm). Note that the simple version there would've even not handled negatives but I'd still learn what I mentioned above, that they know about things like reduce and smart applications of them, they get the functional paradigm to some extent, they also know how to play to the languages strengths somewhat, etc. Overall the best possible answer someone could to say to me is: *look at me a little worriedly like maybe he shouldn't have taken this interview and say* Uh, this is javascript....it already is an integer it just needs some coaxing. I'd probably hug them and know they'd fit in very well on my team. This is all pretty specific to an extremely heavy javascript position which is the perspective I view it from (I've been doing it end to end for quite a while now). The major issue here is that far too often the interviewer makes a really stupid mistake and *doesn't* explain *why* they are asking the question. I really can't believe someone would ask this question to see what a wonderful algorithm you will write because that would somehow correspond to the quality of your code you will put in production in an extremely complex javascript application. However, when the interviewee is left to wonder or guess as to what they are demonstrating with every question they are asked...the interviewer takes a massive risk of missing out on a quality candidate due to their own poor approach. 
Just as a bit of information, that is generally called a lightbox http://en.m.wikipedia.org/wiki/Lightbox_(JavaScript).
What do you mean by this? I'm not familiar with any changes to how methods work in 3.0, what changes were these?
Lambda syntax still sucks in Python - you don't get to use statements, just one expression. But functions are first class, you just have to declare them in using the `def` statement. &gt;&gt;&gt; def foo(x, y): ... return x + y ... &gt;&gt;&gt; l = [foo, 'hi', foo] &gt;&gt;&gt; l[0](1,2) 3 &gt;&gt;&gt; foo.a = 'hello'
Does any of these features require access to APIs not available to normal web applications? #1 sounds like a normal request. #2 could limit the application to certain set of hotkeys, but nothing critical. #3 is an ok feature, but nothing that requires extended access to operate, just to work in tandem with other pages. #4 is about the same as #3. I would separate the two, one being the Spotify clone as a web service and the other being the plugin extending the service with higher usability. Then you would automatically get close to 100% browser support and the application would be usable for people like me who doesn't think the extension model is mature enough for proper applications.
Was going to do a test application next weekend. Sorry, not yet.
It's not entirely standardized yet but will be http://promises-aplus.github.io/promises-spec/ some libraries will give you some functionality that goes further than the spec (e.g. Bluebird which has some great features but goes above and beyond the spec) but others like RSVP only follow the spec. In fact in a project we used RSVP on we intentionally aliased it to just use Promise instead of RSVP.Promise and when promises were released in chromium we were literally able to exclude the RSVP file and nothing broke/behaved differently. 
Hi, I just wanted to say that I have been using Steamus for a little while now, and I think that it is fantastic! I have very little experience in Javascript and web development in general. I have much more experience in desktop design, mainly in Java, but if there is any way that I can be of any help, I would be happy to! Oh, and I remember reading when I first got the extension that your favorite genre of music was EDM, and its mine too!
&gt; The simplest answer here is multiply it by 1 Dammit. Yeah. FWIW I avoid automatic type conversion exactly because it's cryptic, though I've recently started making an exception for `!!value` because boy that's convenient if you really need a boolean value, not just a truthy/falsey one. One might arrive at very clever solutions using it, but I'd be scared to work with a developer that relied on it, at least not without thorough test coverage and at least a modicum of documentation explaining why. Valid points, though, especially your closing one. The last JS interview I did, it wasn't at all clear to me whether the interviewer was going after my knowledge of the language (pretty good), my ability to invent algorithms on the fly (not great), or my ability to write code that could wind up in production and be easily supported by other developers after I win the lottery and buy an island in the Caribbean (what I'm usually most concerned with). 
Awesome! Thanks for the info. 
I've gone ahead and made an issue for turning Streamus into a Chrome App with an extension counterpart. I think that's the best bet because Chrome Apps can be ported to mobile, too. Amongst other issues. :) https://github.com/MeoMix/StreamusChromeExtension/issues/175
:) I'm glad you think it's fantastic! Feedback is great either on r/Streamus or on the GitHub issues list. Feel free to peruse the code and issues list, or if you have ideas of your own, and I can point you in the right direction for doing some work. And yeah it is :D I rock out to EDM daily! 90 days to EDC!!
/r/Streamus ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+cg9j6t7) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
It doesn't sound like TalonKAringham has experience with setting up an environment that would allow him to run Node.js, unless he's following a tutorial, but those are generally quite insecure setups and involve installing directly to the user's personal OS. TalonKAringham - if you have knowledge of setting up secure VM's, or have a dedicated web host (not shared host) with root access.... AND you don't have anything on there that you don't want to lose (like you would on your local computer that you use for personal banking, pictures, browsing porn, etc.) then I think all you really need is to utilize DevTools console. Chrome is amazing for this last bit: F12 in Windows and Command+Alt+i in OSX to bring it up. You definitely can paste your scripts directly into the console, but it's not the same as running it by opening a local index.html file that links the scripts, or at least has it inline on the page. I could be wrong though, and so if you do have experience with VM's and using Node.js in a secure / sandboxed way - then dodeca_negative is correct. It is definitely NOT the same as running JS in the browser though, because you're not going to get to practice writing scripts for DOM manipulation, etc. and see the effects live in the browser. Recap: Node.js = back end / server-side scripting (unless you have advanced knowledge of setting up something like Karma, but that's not easy to do if you're unfamiliar with server-side setups (i.e. node.js) vs Running the JS from a local index.html, or within the developer tools console is better suited for Front-End / UI development tasks.
Just going to go out on a limb and say this is the simplest. Although, I'm sure this has some gotchas with numbers starting with 0.
What does it do, if it's not doing the right thing? At a guess, when you use sigmaFinder, you expect its third argument to be re-evaluated each time through the loop. That doesn't happen. var x = 4; sigmaFinder(1, 7, 2*x+3); will evalutate `2*x+3` before passing it to sigmaFinder, so it's equivalent to: sigmaFinder(1, 7, 11); which will return 77. This is assuming that you fix your for loop to loop from `start` to `finish` instead of from `bot` to `top`.
I found Bluebird to be a superior promise library when compared against q, at least in my opinion. To each his own though.
I just started using CodeWars after you mentioned it. Cool stuff and perfect for practicing. Thank you!
At my company, our site builds are templated, so our forms all use the same HTML and validators/processors. I guess I assumed that any agency would have some kind of generic codebase already made for that stuff, so I wouldn't have to reinvent the wheel. The interview questions look super helpful. Thank you!
Why do you want to do this?
Semi-relevant: brackets.io is a great ide for html/css/js !
well on our teams specific board, we got these guys giving everyone and1s and people love it, cause its not really a rep system. its more like an agree buton. 
Thanks everyone! 
An agree button is similar to reddit's upvotes and downvotes. You can't possibly agree with every comment because some might be negative to your opinion, so why would you "and1" them? Blanketed and1's don't add any value to the board and just help to drown it in fake karma.
Anyway to make it do it automatically on every page to load up? I want to go through a really long thread and and1 everything quickly. 
I think I love you.
Are you drunk?
1-800-KILL-YOURSELF
Raphael JS springs to mind. But really, there is no need for the library as you can use HTML 5 canvas element.
&gt; no need for the library as you can use HTML 5 canvas element You can create games using HTML5 canvas element as well and there is obviously a need for gaming libraries. Libraries don't invent stuff mostly, they create higher level abstractions of common tasks and problems for a particular function or type of application, to make it easier to achieve the desired effect. Image manipulation library would easily fall in that description and it does.
What /u/more_exercise said. The only *good* way to do what it looks like you're trying to do (without eval) is to declare the function to be summed as a separate function and pass it in. Eg: function f(x) { return 2 * x + 3; } function sigma(i, n, fun) { var sum = 0; for (; i &lt;= n; i++) { sum += fun(i); } return sum; } sigma(1, 10, f); This of course means you have to predefine f, so you won't be able to call, say: sigma(1, 10, 2 * x + 3); The only way to do that is with eval, which you shouldn't use unless you know damn well it's safe to, or by building an infix expression parser (which is eval-light).
They do more than allow you to zoom and rotate images but here are a couple that can do that one way or the other. [EaselJS](http://www.createjs.com/) [RaphaelJS](http://raphaeljs.com/) [GreenSock](http://www.greensock.com/) 
&gt;find Yeah, he found this. Mhmm...
Huh? I'm talking about installing Node locally and using it to execute scripts, locally. I'm not suggesting that TalonKAringham set up a web server, or any kind of server. Node, in the way I described using it, is purely a local executable. It's not going to listen to any ports unless you tell it to, and only then if you leave it running, which again is not what I described. Please explain it to me if I'm wrong, but I can't see what security risks there are--i.e. explain how using Node as I described opens one to the risk of losing information like "personal banking, pictures, browsing porn, etc."
Yeah, I "found" this :) So, what do you think of the game?
How much work was it to do ? In terms of man days (I know this measure doesn't make much sense, but just to give me an idea of scale).
Thanks, this is pretty neat! 
I agree, but for zooming and rotating the libraries will just introduce unnecessary overhead.
Or... using the Function constructor, which is eval-ish: sum += new Function('i', 'return 2*i+3;')(i);
Mainly AJAX calls, to load content dynamically without refreshing the page or perhaps let users submit feedback etc. I might use it sparingly to add a bit of style when loading the page, perhaps certain elements might fade in. I think small things like that really add to the user's experience.
Couple of things wrong with it. You are redeclaring `sigmaAnswer` inside the `sigmaFinder`. This will result in a TypeError (sigmaAnswer isn't a number inside sigmaFinder). Also, your increment identation is wrong; you wrote `=+` instead of writing `+=`. Your code should read: var sigmaAnswer = 0 var sigmaFinder = function(start,finish,arguement){ for(var i = bot; i&lt;=top;i++ ){ sigmaAnswer += arguement } console.log(sigmaAnswer) }
&gt;eval-ish Looks like eval with context. And really, there's nothing wrong with eval *per se*. Hell, Lisp is basically eval and lists. It's just the old "when you have a hammer everything looks like a nail" deal, and eval is one *gigantic* thumb-seeking hammer. But hell. OP, if you really want to do what I think you want to do and will absolutely under no circumstances let anybody but yourself put data into this thing, what you want is this: function sigma(i, n, expr) { var sum = 0; for (var x = i; x &lt;= n, x++) { sum += eval(expr); } return sum; } then call it like: sigma(1, 10, '2 * x'); sigma(2, 5, 'x - 5'); etc. Note, however, you can also call sigma(1, 1, 'stealAllofOPsData()'); or sigma(1, 1 'allYourServerAreBelongToUs()'); So *don't use eval unless you're damned sure what you're evaling*. Even then, there's always another way to do it, and you'd probably get fired if you tried to pass that through a code review.
Really depends on the skills of the one doing the job. It's not hard to implement it yourself if you're familiar with canvas in general but for someone lacking the basics, a library could make it the "better" way to go.
Again, why not web application + extension instead of Chrome App + Extension?
From personal experience, I used this knowledge a lot at my previous job but virtually never at my current job. My previous job: 3rd party script that loads/manipulates other scripts, must be cross-browser down to IE6, and as light as possible (read as no jQuery). My current job: Build websites or server-side code where you control the environment So to answer your question: Your best bet is to go write a bookmarklet that does not import any higher level scripts. Just you and the DOM.
I believe it's somewhat dangerous to rely on the library without learning the basics first. OP will be better off learning the basics first, so they will be able to take full advantage of the library for the more advanced manipulations.
IIRC when you define a function inside a class definition (i.e. when you define a method), that property of the class becomes an "unbound method" object. Once you instantiate the class, the instance gets a "bound method" object based on that. Unless my memory fails me, Python 3 eliminated the "unbound method" objects and replaced them with regular functions, so you can just add a function to a class and it'll become a bound method on the instance as you would expect. The (bound) methods themselves still work the same way, though.
I cloned the development branch and loaded the Extension folder as an Chrome Extension. Both foreground.html and background.html throws some errors. Might seem like its the foreground error thats the problem an not the googleAPI as I first thought. http://i.imgur.com/2lNa3Tm.png http://i.imgur.com/WQgi3Ha.png 
Have you tried `async.waterfall`? 
I assumed `bot, top` are defined elsewhere. But it looks like he actually substituted them for the passed arguments.
Nope. It does exactly what it looks like. The base magic is only in `parseInt` and also completely implementation-specific (Chrome seems to handle zeros just fine, `parseFloat` does, too). If you really want an "integer" result even if the input has decimal places, you can still be explicit and say `Math.floor(+"123")` -- it's all the same value type anyway (JS only has Number).
Because you can easily open a port up between the App + Extension using messagePasssing, http://developer.chrome.com/extensions/messaging Because you can easily port the app to phone: http://blog.chromium.org/2014/01/run-chrome-apps-on-mobile-using-apache.html Why make it harder than necessary if they already provide wrappers for common needs?
Iiiinteresting. I'd be down to chat live and see if we can figure this out for you. I'm not sure right now.
You probably know this already, but your only hope is Nodejs. On the other hand, I wouldn't do this in Javascript. There are plenty of other languages that are just as quick and easy (Python, Perl, Ruby) but are more mature and have better library support for this kind of nitty-gritty computing task, vs. node's focus on web. If ES6 were here, it would be another story.
&gt; doesn't enforce the nitty-gritty rules of C++ and Java Not necessarily a good thing.
The web is awash in emulators implemented in JS, but most of them are just ports of existing native C or C++ emulators that have been converted to JavaScript and asm.js through Emscripten. Take a look at [JSMESS](http://jsmess.textfiles.com/) for example, which is a JS port of [MESS](http://www.mess.org/). Many of the systems that it supports are M68K-based, such as the various early Macs. But that's just one example, you can find others. For example [here's an Amiga emulator](http://scriptedamigaemulator.net/), another M68K based machine. &gt; I've heard Chrome compiles JavaScript into an assembly language with the V8 engine. Perhaps this would be a good place to start considering 68K programs are written in assembly, and look into assembly emulation All modern JavaScript engines perform just-in-time compilation to native code. That's not a unique property of Chrome's V8 engine. And that's the opposite of what you want to do, so it has no bearing on your goal. If you want to know how an emulator is written, look at an open source emulator. A JIT compiler won't be of any help. 
or just pass an anonymous function: sigma(1, 10, function(x){ return 2*x+3; });
&gt;zoom, rotate. ...enhance
They are now standardised since a few months and they are definitely in ES6. The popular `es6-shim` has a decent basic implementation as polyfill. Note that error-first-callbacks (node-style) are not really 'part of the spec' but just a convention.
I might be able to help :) Did you post to the google group? https://groups.google.com/forum/#!forum/keystonejs - it's a pretty good place to get answers.
Why do people have opinions like this come on this subreddit? I ask that out of genuine curiosity. Some forced need to learn more because of having to use it at work maybe? I just think it's probably fairly safe to say people don't make these sorts of comments in subreddits for other languages that don't have static typing (say python). 
i like it.
Have you looked into [node-webkit](https://github.com/rogerwang/node-webkit)? Its the webkit browser compiled into node.js. The debugging is as good as anything I've seen for javascript. The compile-run cycle consists of saving your changes and hitting the "reload" button. Its well supported and the documentation is fairly good. Right now I'm using it to build a small Windows app with the Dojo framework and I'm quite satisified. 
I get this message that doesn't go away. I tried hitting *Esc* and *Enter*. Using Firefox 28.0 on Windows 8.1. &gt;Welcome to top25map.com &gt;The map, images, and rankings data are loading. &gt;Thanks for your patience!
Believe it or not, it's possible to appreciate the "good" parts of a language / technology while being critical of its faults.
It's loading slowly for me as well right now because of the traffic from reddit. Try refreshing? Hopefully that helps...
nice work. are you looking for a job? where are you based out of?
Thank you for the thorough response. It helped very much. I think what was throwing me off the most was thinking that JS had some functionality outside of and HTML document. I don't know where I got the notion. I'll get started with Node.js as that seems to be what I'm looking for. As you said to /u/sethbw below, I'm not looking to set up anything other than a local environment to work from. 
Behind the message I see a map and a bunch of logos that appear all over the map. I tried reloading and leaving the page open. Is something else loading after the logos appear? Edit: Just tried Chrome and it loaded instantly.
I haven't, but thanks for the lead. I'll check into it!
The writer really likes to use the word minefield.
Interesting that Chrome works. I've been using Firefox 27.0.1 on Windows 7 with success. I'll have to see what's going on.
Not necessarily looking for a job, but always open to talking - just send me a message. I live and work in North Carolina.
Just realized I have Adblock Plus in Firefox but not Chrome. Disabled Adblock Plus for your page and it loads now. So something in Adblock Plus must be causing it to not load.
I waited untiI I truly had free time to respond to this because I think it's important. I disagree with you heavily but with a few caveats: I think putting restrictions on the language that remove it's core *features* is a really bad idea that greatly handicaps it's power. The things people often call the "good parts" should really only be avoided for those who don't deeply understand the type system and therfore may introduce subtle bugs. This is a prime example where understanding and exploiting the type system would reduce the size of the algorithm vastly, improve performance (the bitwise operation may even test faster than native parse int) and simplify the work the algorithm is doing (obviously in real life you'd just use parseInt though). My point is that there may be things that are missing from js because it has taken a long time to mature (e.g. A solid native date manipulation library) but the things like the type system, prototypes, and the functional paradigm are not a mistake and something that you can learn to leverage in extremely powerful ways. Extolling the idea that we should avoid these sorts of things (outside of true pitfalls with things like, say, floating point number representation) will only keep us in this transitional state where back end devs who must now use Javascript feel angry at the language when they use it simply because they've been told it's OK not to use the type system, haven't truly groked prototypes, scope, context, etc. That's not the right approach and like it or not Javascript is not going away. My small team is an excellent example of what Javascript code can become when a group of people truly understand the language and embrace it (more on that and when none of this applies in a minute). Here is a really good talk on this that really sums up my feelings on the topic http://m.youtube.com/watch?v=MFtijdklZDo&amp;list=PL063EF4EC090FEEDB and another that is actually a talk in good library design in js (worth watching regardless) by a guy who's been a little bit important in the Web dev community and may even be a mod around here :p http://m.youtube.com/watch?v=0LKDImgRfrg it's interesting because so many people on here argue against dynamic typing and here he is saying "use type coercion whenever possible" and mentions the "evolution" of a javascripter and how oop in js is the second wrung on the list (also always a big topic 'round here) and this is from back when jquery was just starting. What's really entertaining is during q and a people are asking if people with teams as large as 100 have ever used jquery on a project or if it's more for one off projects :D. The caveats to this: your team is only backend devs that are truly annoyed when they must use js (no longer acceptable long term). Here (and again I think eventually they won't have a choice but to learn it deeply but...) something like type script can add great value to your team while still letting you leverage the functionality of Javascript. In these cases though I still think it will become crucial that those members pick it up heavily I'm their free time. If you people are web developers and don't truly understand everything I am talking about here they are only hurting themselves. Say you need a mobile app and no one there knows objective c. Javascript can provide great business value in that case and this is going to become even more true in the next 2 years. However, you're gonna have to become fluent to do that (as you would with objective c). The other is companies that use very large teams and don't build them up in a way where people's technical strengths are used in the most optimal capacity. If there are 100 devs who could touch your Javascript function, all with varying degrees of knowledge of the language, you should treat it as "safely" as humanly possible (but I could say that about tons of languages. You should also probably get a new job with better manage too in that case). The tl;dr is that we should only avoid perfectly valid, intentional, and powerful features of the language for specific cases. Now is the time to start urging people to start treating Javascript the way they treat other languages they use at work: fully understand them. Otherwise we are going to be stuck using this language that we are no where near getting the full benefits of because we are still treating it like it's 2002 and it's just this auxiliary thing we are forced to use. I've seen time and time again where people become completely knowledgeable about prototypical inheritance, the type system and functional programming and then say "omg now just imagine if I'd had to do this in Java". At some point we have to start expecting that people understand this language as much as their other languages (since it will very likely have much higher line counts in "new construction" projects these days anyway... ). In reality this should have happened at least 2 years ago. 
Okay, glad it worked, and thanks for the helpful info! 
Many languages employ dynamic typing... It is one of the "good parts" to most people that use those languages. It's definitely not something it's effective to fight if you are using said languages. Not as enlightening a response as I was hoping for since the transitional state of the community is very interesting to me :/
I think you did a good job on the page. With the buttons along the bottom it would be nice to be able to click anywhere on the button and not just on the numbers.
http://fabricjs.com/
Cool, handy to know since [Moment.js](http://momentjs.com/) doesn't seem to handle such queries.
&gt; rely on the library That is ideal, but when you're time-limited, completed-work &gt; deep-knowldege
I read the three articles, OP. I enjoyed them. I'll read the one you make on CoffeScript too. I don't think that writing minefield too many times is reason enough to downvote you, though :(
Please have web newbies learn basic JavaScript first.
This sounds like a good idea actually. It might be good to start a repo on GitHub listing the chapters, with a folder for each chapter. The folder should contain a readme, and than subfolders for the project code(answer to the project defined in the readme) perhaps. Thoughts?
For your purposes, wherever you host (or open) the html file from will be the root directory. Just put all the javascript part (NOT the &lt;script&gt; tags) in its own file in the same folder as the HTML file, called something.js. Then, have script tags in your HTML but nothing inside them. like &lt;script src="something.js"&gt;&lt;/script&gt;
This, and make sure you take that initialization code and wrap it in a function. Then set window.onload to that function. This ensures that everything is loaded before the browser runs your script.
I can’t stand it anymore. Minefields. It’s stuck in my head. I can’t read the article. I’m really sorry.
JSfiddle (or [cssdeck](http://cssdeck.com), which I personally prefer) is pretty much the tool you're looking for, you just seem to misunderstand the results-area. Such online scratchpads are meant to execute JS in the context of your HTML document. The results-area is the combined results of html, css and js, which is why entering only js will probably not make any visible changes in the results-area. The simplest way to make jsfiddle or others work with JS is to call document.write() instead of console.log(). document.write() will output it's parameters directly to the HTML instead of the JS virtual machine's console. Then again, you could also open the developer tools console of your chosen browser (press F12), to which any console.log() calls will be output, with the added benefit of easier error and variable inspection. Codeacademy may sometimes output the return value of a function to it's virtual console as well. Developer tools' console does this when you write code directly into it, but you can replicate this in jsfiddle by calling your function within console.log() or document.write(). For example, instead of running your function with: myCoolFunction("foo", "bar"); you would type: console.log(myCoolFunction("foo", "bar")); And finally, there's nothing stopping you from just using Sublime Text offline. Unless you're dealing with xhr-requests, you don't need a server. You just need a html-file which calls your JS-file. Edit the js, open the html in your browser and the js will be executed. To further streamline this kind of a development environment, you could download [live.js](http://livejs.com)*, which will automagically reload your document when you change it, it's css or js! ^(* looks like livejs.com is having technical difficulties right now... If that's still the case when you're reading this, go ahead and get the live.js script from here: https://gist.github.com/thykka/9727654 .)
To an extent. Rewrite allows you to eval anything *in your browser*; serving eval to your users allows anyone who can alter the data their browsers will see (say, with a malformed comment) to eval anything in *everyone's* browser.
Can't exit from popup on mobile
In your javascript file: window.onload = function() { //do initialization stuff here }; The errors you see when calling Pixi are probably because your javascript is executing before Pixi is fully loaded into the browser.
More on centering... You can do it *without* setting width or height and without having to calculate things by yourself: position: absolute; /* fixed works too, relative doesn't */ top: 50%; left: 50%; transform: translate(-50%, -50%); /* don't forget to add browser prefixes */
I figured it out. I just wrapped my entire javascript code into one init function and then had the html body code execute on load of that init function. Is that a good way of doing it? 
What do you mean "had the html body code execute on load of that init function"? You should really do what mister____mime suggested. In your script.js file: window.onload = function() { // put your initialization code here } In your HTML: &lt;script src="script.js"&gt;
&gt; JavaScript’s mines are hidden in plain site. Not sure if pun...
I did this: &lt;body onload="init();"&gt; That's what I mean.
Oof, looks like in a past edit I used those different parameters and forgot to update it inside the function. That's embarrassing. 
Should look at: [Esprima](http://esprima.org/) ECMAScript parsing infrastructure for multipurpose analysis [PEG.js](http://pegjs.majda.cz/) "a simple parser generator for JavaScript that produces fast parsers with excellent error reporting. You can use it to process complex data or computer languages and build transformers, interpreters, compilers and other tools easily."
I just downloaded the zip from Pixi's github repo, none of the examples work by dragging the files into a browser because the JS throws a Cross Origin error. Which in short means the files need to be loaded by a webserver in order to work. If this sounds like it's a similar problem to what you're experiencing, I would recommend XAMPP (for PCs) or MAMP (for macs) to get a webserver up and running quickly. Hope this helps.
Might have to use `eval()`, to use variable input.
"Just 1 more turn..." 5 hours later... morning birds chirping... "DOH!" http://www.g4tv.com/videos/46924/sid-meiers-civilization-5-civanon-game-addiction-trailer/
would love to hear some feedbacks on how to make it better
i believe what you're looking for is a modal. twitter bootstrap allows you to create one easily and it fades the background to gray as modal comes up - http://getbootstrap.com/javascript/#modals
Oh, and for Linux?
They're not books, but it's worth mentioning the emulators implemented in JavaScript which aren't straight ports from native emulations. Your best bet for that is probably Gameboy/GB Color, since there are multiple from-scratch emulations around for that: * Grant Galitz has https://github.com/grantgalitz/GameBoy-Online which works great; * I wrote an incomplete emulation, but documented it in a series of articles at http://imrannazar.com/GameBoy-Emulation-in-JavaScript Hope that helps.
Most linux distros have some sort web-server built in, usually Apache. The 'A' in both XAMPP and MAMP stands for Apache.
Good point, I'll work on that.
I specifically was doing this with mongo, but the question is more general, db queries are simple an example. 
You're right, that's awesome! In Python 2 you had to go &gt;&gt;&gt; class Foo(object): ... def bar(self, x): ... print self, x ... &gt;&gt;&gt; Foo.bar &lt;unbound method Foo.bar&gt; &gt;&gt;&gt; Foo.__dict__['bar'] &lt;function bar at 0x101f6a0c8&gt; to get the function out, which was terrible. A distinction that doesn't come into play much, but is relevant to this discussion: it's not when you create the class or create the instance that this happens - it actually happens _on attribute lookup_! That's why I say Python doesn't have real methods - it just has funny lookup of functions that partially applies them to the current instance when you look them up on one via a descriptor, or adds the typecheck in Python 2 to make it an unbound method if you look them up on a class.
Since they are just client-side JS why are you putting them in virtual machines instead of just embedding them in a static HTML page?
You are right to the point. It is a little bit overkill to use a vm in this case. Although you do get the additional ability of running grunt in the vm to rebuild the lib if you want to 
That's good then. I was able to get a working instance of my pixi test without a server though (I just ran locally). So I'm not sure what that's about.
What then, in your opinion, is the "true" power of promises? You may have missed the "in my opinion" part of what I had written. Managing multiple async requests without being forced to write one-off helper functions is a powerful thing. This is JavaScript -- there are multiple ways to do everything. 
Quit being such a dick to people who respond, and you might get more responses. You got your damn answer... It's not supported natively, and that sucks. There's no "reason" why it's not native. Either grab a micro library, or write something yourself. 
I'd be completely up for this! I'm learning GitHub as well as JavaScript so this sounds right up my alley.
I don't think so. I'm just trying to help here. If someone is actually looking for help, then they won't be stuck on the title for very long.
You can store a value that a user types in into a variable. var input = prompt("Please enter your name"); Now the value that they enter into that box is stored into the input variable and you can use it anywhere you'd like. Hope that helps! 
hmm I understand that but my situation is a bit different. I have to take a prompted value (Let's say "Income") and subtract some other values that are prompted (Lets say half of the RRSP value that was inputted, and all of the Taxes Paid that were inputted). I then have to use this new value to determine the initial value of a calculated from input. Sorry this I think I'm making this confusing
Can you repeat the pattern I posted? var income = prompt("Enter your income."); var RRSP = prompt("Now enter RRSP."); var taxes = prompt("How much tax did you pay?"); var result = income - RRSP/2 + taxes; alert("The total is " + result);
well the values aren't actually prompted in Var, but they are linked to a form called "information" so I enter the values i need to manually on the form and call them up with Var Income=parseInt(document.information.income.value); But yes, I have tried defining the variables in the way you posted but i can't seem to get it to work! 
When you make clickable blocks, you want to make the entire block taken up by the a tag, there are a few different ways to do this. You can make the a tag itself be the block &lt;a href='#' style='width:50px;height:50px;background:red;'&gt;1&lt;/a&gt; Or you can make the a tag fill up the element &lt;div style='width:50px;height:50px;background:red;'&gt; &lt;a href='#' style='display:block;'&gt;1&lt;/a&gt; &lt;/div&gt; You want any part of that square link to be clickable, right now you have to hover the mouse directly over the link's text. Also try adding a hover to the links and play around with transitions.
this is my blog
Adding on to this... I just went to a good panel at our local JS meetup, where one group recommended using plain old [make](https://www.gnu.org/software/make/) for building the asset pipeline. There are lots of benefits - most notably that it's deterministic (it assures that files will be created in the proper places), rather than just silently dying like Grunt does. It's also a lot easier to create complicated chains than with straight shell scripting. Make is, of course, about as Unix-y as you can get. Thinking that Unix is "only-pipes" misses the point - it's about having the *right* tool for the job, rather than a single tool for every job.
An ad for a book? [If you want an ad on reddit, you can pay for one](http://www.reddit.com/ad_inq).
You're going to have to provide a good deal more information to get a useful answer to this one. A link to a working example of an embed of the player up on jsfiddle would be a good start.
Thanks, someone else suggested making the entire blocks clickable, so I will definitely work on that. Hover/transition effects are good ideas too!
http://jsfiddle.net/C4YcX/ im not sure if I have done that correctly or not, but hopefully it will work!
This article seems really ignorant. Why didn't you just use any flavor of Make? When is "building" javascript more complex than a cross-compiling toolchain?
I have recently tried this and failed miserably. Hopefully someone has a solution
That actually is pretty brilliant. You can still use npm to manage tools, just make sure you add `./node_modules/.bin/` to your PATH. Who needs `grunt-contrib-concat` when you can just `cat`.
Been using Make for building and minification for a while now, for years at this point. It's great. Would recommend. cd lib/scripts/compress make clean make cd ~/projects/theproject/ git commit -a Gotta love it.
What.. what does this have to do with Javascript? Nevermind, I guess.. I love talking about build systems. I have a few things to add to the conversation: 1. You should never (EVER!) write static dependencies out for your 'build system'. They should never be built in to your build system. That entire paradigm is bullshit. 2. Incremental build/clean build integrity must be guaranteed. If it is possible to create a 'green' incremental build all clean builds should succeed, as should all other incremental builds that include your change. Staleness is not programmer error, it is a build system bug. Make doesn't offer this. Msbuild doesn't offer this. Scons doesn't, nor cmake, nor jam, nor qmake, nor ant.. The only tools that acknowledge these requirements (and that are publicly available) seem to be [memoize](http://benno.id.au/blog/2008/06/06/memoize-build-framework) and [tup](http://gittup.org/tup/). The issue, IMHO, has nothing to do with text based pipes vs DOM pipes vs S-expr pipes vs whatever. It has to do with the very definition of a build system. A build system is *not* something that understands how to call a C++ compiler, it is *not* something that understands how to clean up after a C++ compiler. A build system takes in updated content files and spits out updated generated files. It should not care what the content files are *or* what the generated files are, only the relations between them, which it can be discover via hooking and monitoring of the host worker systems.
I've been trying to figure this out with a JSON file and javascript. I have a list of names and addresses I want to display on a page. 
If using javascript i would add a &lt;form&gt; that posts to your code and deletes all items included. Then with javascript just move your selected rows in to that &lt;form&gt;. Remember to add a hidden input-field to every row with an identifier to your item so the form actually has some relevant form-data to send. Also, look in to using JQuery for all your javascript work. It's very well documented and there is a ton more resources on how to solve problems using the framework then for the actual language javascript (in my opinion at least). Like moving table rows from one table to another for instance. 
I attended the last two edgeconfs they are worth watching on YouTube, it's a very different style of conference. This year's accessibility panel was especially enlightening. 
Windows is the reason you can't just use make, ruining everything. I personally am a fan of using package.json scripts field for avoiding giant build files in a way that works for my coworkers on windows.
This is actually called CRUD (create, read, update and delete) functionality. Yes, you can do it in PHP. There are million and one ways to do it. 
The Iowa logo is not on Iowa City. The city is almost right in the middle, not near the IL border. And the IL logo is way too near the border. Also, I had a heck of a time with the scrolling, it went in and out way too fast. Cool site, though.
From the way you describe it, the car is an object that has a collection of screws. This should be an array or array-like object in the "screws" property of the car. The names are properties of the screws, so they should just go on the screw objects themselves (as you noticed, screws would otherwise lose their name if you extract them). If you want to be able to look up screws by name rather than by index, you could create a screw collection object which wraps the array and keeps a lookup object mapping the screw names to their index. Of course this will stop working if you arbitrarily rename the screws, but you can't have your cake and eat it too. The property name on the car object is not a property of the screw stored in that property. It's a property of the car. Let's say you want to have properties for each door of the car. Your car could either have a property "doors" set to a collection of doors, or it could have four properties "frontLeftDoor", "frontRightDoor" and so on, each set to a door object. It could even have a "doors" object with properties "frontLeft" and so on to keep the doors separate from all the other properties. In this case "frontLeft" is not the name of the door. The door doesn't need to know it's the left front door. It may be a special FrontLeftDoor object or something, but the car doesn't need to know that either as long as it's stored at "frontLeft". In fact, it's name may be some cryptic identifier only used by the factory to tell identical doors apart (i.e. a globally unique identifier). In practice a lot of this is problem-specific. Why do you need to be able to look screws up by name at all? What's the real performance difference between maintaining a look-up table and just looping over an array? Will the names really ever change after the screw has been added to the car? And so on. This is why it's hard to discuss these things in terms of analogies.
For the record, if you need to support IE8 (supports position:fixed but not rgba), you can just set the `background-color` to black and use `opacity` for the transparency effect. If you need to support IE7, well, IE7 doesn't support position:fixed so prepare to reposition the background a lot and listening for scroll and resize events.
I thought this mostly refers to using it for images and linked content. IIRC modals used transparent overlays before Lightbox.
I remember doing this once, take a look at how phpmyadmin implements similar functionality for table editing, its pretty clever.
I'm pretty purist-- I don't NEED anything. I've built an operating system in Java, but JavaScript is simply my language of choice.
Oh man, I love this. I made something similar a few years back that took the average color of an image and determined it's compliment, but the result was rarely as nice as this. Definitely going to see if I can't make use out of this.
thanks!! im keeping the name in the figurative screws
I think you're missing the context, this is about the JS build systems, like Grunt and Gulp.
i hate one page scroll pages. the most annoying thing ever. you read, reach to the end (or so you think), nope, here we're loading more shit. nope.
Reminds me of what Apple ~~did~~ [is doing](http://www.apple.com/mac-pro/) with the Mac Pro page. ^(Edit: horrible internet here make it take a year to load, so I wasn't bothered to check.)
so it's a slideshow site maker but you can go up and down along with left and right. It's working smoothly on my computer but it's pretty new. Is there an option where up/down navigation can only be controlled with the arrow so that you don't take over scrolling? That might ease people's issue with the plugin
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML5_audio_and_video Use the timeupdate event and display video.currenttime. This should do the trick :) edit : Didn't test it but you might have to convert from millisecs or secs to min/sec
I know this doesn't answer your question, but this is the way I would do this: function charToInt(char){ return parseInt(char); } var input = "020"; var result = input.split("").reduce(function(prev, current, index, org){ return (prev * 10) + charToInt(current);; }) console.log(result); I mean, it's not going to work on all browsers granted, but any time there is a "find something from this input" type of question, it usually involves some sort of loop and reduce, so I reach for the reduce function. 
Anything working with tiles should do the trick imo
&gt; Since JavaScript has no notion of classes yet and since everything is actually an object, we will try to clear the confusion by defining a few terms.. *A class is a constructor function which has properties and other functions defined on it*. Why not just call a constructor function... A constructor function? I strongly dislike this tendency to redefine existing words willy-nilly to fit whatever a new language is doing. Let's use new words to describe things that aren't like other languages. Diluting "class" to mean "constructor function" is only a simplification if you have never seen the word "class" used in any other context and plan to never see the word in any other context. Otherwise, it'd just adding confusion.
That was the most annoying user experience I've had in a while. Probably a lot of better ways to do this than cheat on using the hash for page location. Frustrating as hell to keep hitting the back button to try and get out.
um yeah in reality install a virtual machine so I can use make tends to go over poorly, try again.
Thank you for the link. What I'm finding hard to figure out is what Code do i put in the HTML document, and then what code do I put in the Javascript document. Im quite a novice when it comes to these things unfortunately!
The `Derived.prototype = new Base()` is a very bad pattern, use `Derived.prototype = Object.create(Base.prototype)`.
&lt;div class="section"&gt;&lt;/div&gt; Please don't do this. Use the section element instead. I know many will say that this doesn't really matter but to me this is the equivalent of using &lt;span class="list-item"&gt; instead of using an &lt;li&gt;. I hate the over use of divs and useless classes. 
Using a virtual machine so that you can mimic your live deployment environment is pretty much a requirement in my world - I guess it all depends on perspective.
Put any container with an id. &lt;span id="time"&gt;&lt;/span&gt; Get DOM element : var time = document.getElementById("time"); Then, apply event listener : video.addEventListener("timechange", whateverFunction); function whateverFunction (){ time.innerHTML = video.currenttime; } I don't have much time to test, I'm working, but this should work :D
Hey, thanks for the feedback - not sure what's going on with the Iowa and Illinois locations. I got the latitude/longitude coordinates from a US college database, but I'll see if they differ from other sources. Can you clarify what you mean by the scrolling? It's not set up to have scrollbars on the page. If you mean the Google Maps zoom levels, there's not much I can do about that - their API only allows certain discrete zoom levels.
Only up/down navigation with a arrow/random element would probably be pretty easy with only CSS and HTML anchors (at least for vertical slides). The whole point of the plugin is that it "snaps" the viewport to the elements. Now that might not be a good thing, but that is the point of it.
It was probably done that way to simplify IE8 support, although they could have just put document.createElement('section'); in the JS and section{display:block} in the CSS.
Using this with a mouse on a PC is terrible.
in cases like that I'd agree, but we also use node to build static assets that are pushed some place without node, and a couple places were actually deploying node to windows (not my first choice but better then the alternative).
Cool app, you should really add an example without us uploading a js file. [AngularJS](http://i.imgur.com/EuDSylN.jpg) looks really cool. You should post this on /r/programming, you'll get a lot more feedback there. Great job!
Thanks!
[hammer.js?](http://eightmedia.github.io/hammer.js/)
I still can't figure out how to add a "banner" to the top of my built javascript without the sourcemap going out of sync using grunt.
ok cool, thx for taking the time.
Ah very true. Luckily I rarely have to support IE8 so I hadn't thought of this. 
Been several years since I've programmed on Windows but is Cygwin not a thing anymore? 
What if your deployment environment is Windows? Suddenly using `make` is insane. Of course, the argument might be to simply not use Windows, but sadly that's not an option for some of us.
Why does everyone keep saying that using Make for Windows is insane? It's cross-platform and works with all of the same tools as Grunt - with the added benefit that you actually get your files out reliably.
I like everyone else hate one page scrolls too. (Especially when there is stuff like ajax calls being done to pull more data in as you can't do find on it - i'm looking at you facebook!) But lets ignore this as personal taste is irrelevant here and focus on the code. 
pls get rid of that scrollbar 
I'll re-comment back up here again - but make is just as portable, works with the same tools as grunt, and [available for windows](http://gnuwin32.sourceforge.net/) in a nice, easy, installer. Really, there's no reason not to use it.
I'm sorry, but if you don't have a very firm grasp on JS, you're either not going to find a front-end job, or you're going to be in way over your head. There are 2 basic types of front-end devs: 1. The application devs, who know JS really well but are still pretty good (if not excellent) with HTML/CSS. 2. The designers, who usually barely know JS, but _may_ know HTML/CSS really well. If nothing else, they're really good with visual design (Photoshop, etc.). So if you're not an absolute expert with Photoshop (usually requires several years of intense study at university), and if you're not an absolute expert at JS, then you're most likely not a qualified front-end dev. Perhaps you could get by 'tweaking' some mom &amp; pop homepages, adding counters and carousels and whatnot, but you're not going to be able to produce bespoke websites of any substantial complexity.
The mindset of the panel confuses me. Unix filesystem primitives are great but they aren't the end of programming. The whole point is that you can compose small programs to make bigger programs, not that you have to be chained to a limited set of small programs that work well for a certain kind of task (file movement and transformation). It's like the panel is pretending it's 1973 and there is no existing, polished build tooling outside of the JS bubble to discuss. 
which one?
Because Windows.
Have you ever developed on Windows, further, using `make` or similar? It it _not_ as easy and straightforward as you make it out to be.
http://puu.sh/7HGzJ/c08606a68c.png
yeah hahaha, im working on an update atm
*Pat, pat* there there :)
so for 99% of the cases, adding shell commands to the scripts object in your package.json is going to be much easier overall then using make.
Well, that's not the biggest problem. Calling the constructor of the base class just doesn't makes sense. `Base` can have side effects, etc. It's not *safe*.
if only I could up vote you twice ;)
I can't argue with that - but the hours you end up wasting pulling your hair out with Grunt bugs or things not building properly inevitably makes me question using it.
document.createElement("img");
The promise pattern will be the de facto standard moving forward, and so I would heavily encourage you to use it.
I don't think I agree with this entirely. I know HTML, CSS, and Photoshop very well. At my company, I'm not required to be at expert at JS. Our engineers/back-end developers take care of the application stuff. I don't design at work. I have designed, and built, full sites in freelance projects. Most of which don't require a whole lot of custom Javascript writing. Hence, my original question: why learn it? I'm not saying I don't need to. I'm just wondering what it could be useful for. Based on your definitions, I wouldn't choose to be an "application dev" or a "designer". My role would fall somewhere in between. I enjoy writing HTML and CSS more than anything. Also, as a side note, I design in the browser, not Photoshop.
no no I'm saying instead of grunt, I hate grunt as well, I'm talking about "build-js": "browserify . &gt; ./dist/whatever.js", "min": "uglifyjs -mc ./dist/whatever.js &gt; ./dist/whatever.min.js", "build": "npm run build-js &amp;&amp; npm run min"
&gt; Plus, it's really annoying when your scroll wheel is overridden. I wouldn't use it. I agree completely, but at least in fullPage.js the implementation is decent. I've had too many experiences where the scroll was overridden, and didn't work well. Here it at least works well. *I don't like it*, but it works well.
There's even ways to update the hash location without adding it to the browser history, but they didn't do it that way. Would have given them the best of both worlds.
I use this relatively simple &amp; light one: https://github.com/jacwright/date.format
Don't take this the wrong way, but I'd say you're more of a hobbyist. Pretty sure most places wouldn't consider you a "front-end developer". &gt; Also, as a side note, I design in the browser, not Photoshop. That's most likely not _design_ then, check out /r/web_design for examples; in other words, if you're not using [golden ratios, Rule of Thirds, color theory, etc.](http://www.reddit.com/r/web_design/wiki/principles) then it's not the _design_ that I'm referring to.
setting bub.src is an asynchronous operation and the image wont be loaded while you set the style and such, so you need a callback function that performs an action: bub.onload = function() { //do stuff } Also it might be easier if you use a canvas.
Hammer works, but the project was in a bad state a year ago, with unreviewed PRs being merged that broke functionality. It was suffering from a bug where it wouldn't correctly switch between dragging and rotation. I fixed it, but the project was clobbered with bad PRs to the point that contributing it back was more trouble than it was worth. I still haven't circled back to see if they got their act together.
But...I currently have a job in the field (and have an elevated position)...so I'm pretty sure I'm not a hobbyist. Maybe "front-end developer" was not the best phrase to use in my post. It seems like job titles are not very well standardized. I have a second interview at Google this week, so clearly they are at least interested in me. Anyway, I am actively trying to learn JS, and I don't really appreciate your negativity as I try to grow.
Negativity? Just trying to be honest with you, sorry if I didn't stroke your ego. edit: &gt; Maybe "front-end developer" was not the best phrase to use in my post. Yes, I think this is the crux of the issue. From re-reading your post and comments, it sounds to me like you're more of a designer. Designers don't necessarily need to know JS, at least no more than you already do.
Well, if you're on WIN you're not going to have Make either -- unless you're running in a MinGW shell or similar -- which will likely have a cat implementation.
yeah promises seem like the way to go. 
I never said Photoshop was required, it's just a tool that's ubiquitous for the role. I'm not really interested in debating whether or not it's required though, I don't see design as falling under the umbrella of development (feel free to argue that too, though I won't).
you should limit the degree that a user can zoom out on the map. I like your map very much, it's actually helping me with a project that I'm working on.
Yessir. [developer dev] =&gt; [staging] =&gt; [production] infiles: project/web/assets/js/[raw js] (not web accessible) outfiles: project/web/www/j/[compiled js] (is web accessible) Since we have multiple developers and personal devs and staging before doing your final commit you minify your own changes and test locally, catch errors, etc. Once you're solid you commit to master which has hooks that cause staging server to pull itself to HEAD where QA can test and other devs also pull in your changes. From there once the all clear is given code is synced to production. We could automate the process with a hook on staging, but since you'll need to minify and test locally anyway, add a the directory to your .gitignore, etc. We didn't see a point, just commit your compiled version along with your updated raw source. The overhead of source tracking the minified versions is negligible.
I
Thanks, another good point, and awesome, I'm glad it helps. I'd love to hear what kind of similar project you're working on if you have a chance.
A lot of these would also work with Mocha, since both tools share the BDD syntax.
Here's a couple books I have recommended in the past. [Code](http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319) by Charles Petzold is a nice intro to what your computer is doing deep down. It may be too basic for you but it's actually a fun read. The second book is [The Elements of Computing Systems: Building a Modern Computer from First Principles](http://www.amazon.com/The-Elements-Computing-Systems-Principles/dp/0262640686/ref=pd_bxgy_b_img_y). I've had this book for a while and just haven't taken the time to read and work my way through all of it. It's basically a course, it walks you through basically building an emulator for a fictional computer, the HACK computer. I found out about that book because there was a guy who read it and then made a [working computer](https://www.youtube.com/watch?v=LGkkyKZVzug) in minecraft. Crazy stuff.
Is this the exception with package managers? NuGet expects you to deploy using it. What about Gems? 
The UI is pretty confusing, but interesting tool nonetheless.
Awesome, thanks for clarifying. That actually looks like a pretty nice workflow.
alright thx, ill try to make it less confusing
http://quojs.tapquo.com
&gt; You should never (EVER!) write static dependencies out for your &gt; 'build system'. They should never be built in to your build system. &gt; That entire paradigm is bullshit. I couldn't agree more. Putting the same information in different places is bad and denormalized. For memoize.py: &gt; There are however some disadvantages: &gt; &gt; * Running commands through strace is slow [...] &gt; * No parallel builds. [...] &gt; * [No] simple way to build just one target. [...] &gt; * Linux only. [...] I think these disadvantages easily outweigh the typical stale build problems, and so memoize.py isn't a great solution outside of very specific circumstances. Looking at tup's examples, I don't see how it solves problem #1. The dependencies are still indicated in the Tupfile. 
Which is about the worst thing they've done. The page always feels broken.
After [Edge Conference](http://edgeconf.com/2014-london) in London last week, I've seen a *lot* of interest on my Twitter feed about Web Components. I think it's really interesting. Edge Conference videos are on YouTube here: https://www.youtube.com/playlist?list=PLNYkxOF6rcIDEx-vT2VmhP9P-2TeK5RKz
"They're only a problem when they're missing." Genius........
Left-out Option 3: Create a thin mirror of NPM (not couchdb, just simply put a varnish cache in front of NPM that you use for deploys) coupled with shrinkwrap (and a minor rewriting tool of shrinkwrap URLs to use your varnish cache instead). This is basically what we use at my work and it does a great job. (We also have a cron job to get all of the newest packages in because we actually don't care too much about the disk space usage now, but that's not necessary when you're a much earlier stage startup.) The only thing we got bit by was the self-signed cert being yanked from NPM, but that was noticed on dev machines before any deploy to production and we upgraded dev and prod boxes to a newer version of NPM to solve that.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Not invented here**](http://en.wikipedia.org/wiki/Not%20invented%20here): [](#sfw) --- &gt;__Not invented here__ (__NIH__) is the philosophy of [social](http://en.wikipedia.org/wiki/Social), [corporate](http://en.wikipedia.org/wiki/Corporate_culture), or institutional cultures that avoid using or buying already existing products, [research](http://en.wikipedia.org/wiki/Research), standards, or knowledge because of their external origins and costs. The reasons for not wanting to use the work of others are varied, but can include fear through lack of understanding, an unwillingness to value the work of others, or forming part of a wider "[turf war](http://en.wikipedia.org/wiki/Turf_war)". As a social phenomenon, this philosophy manifests as an unwillingness to adopt an idea or product because it originates from another culture, a form of [nationalism](http://en.wikipedia.org/wiki/Nationalism). The term is normally used in a [pejorative](http://en.wikipedia.org/wiki/Pejorative) sense. The opposite predisposition is sometimes called "proudly found elsewhere" (PFE) or [invented here](http://en.wikipedia.org/wiki/Invented_here). &gt; --- ^Interesting: [^Invented ^here](http://en.wikipedia.org/wiki/Invented_here) ^| [^Reinventing ^the ^wheel](http://en.wikipedia.org/wiki/Reinventing_the_wheel) ^| [^Anti-pattern](http://en.wikipedia.org/wiki/Anti-pattern) ^| [^Invented ^\(album)](http://en.wikipedia.org/wiki/Invented_\(album\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgawyho) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgawyho)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I've always thought it made a lot of sense to think about the view model and let the model (js object) and view (HTML template) remain mostly dumb. I've been using something much like this (heavily borrowing from backbone.js) in my projects, but this looks so much nicer yet still lightweight. I love it, and can't wait to try it out. Thanks :D
Because it executes the parent's constructor at declaration time. Why is that bad? The parent's constructor could actually try to do something, such as render templates, make requests, etc. You don't want that happening at declaration time, you want that to happen at instantiation time.
I hear you, but I don't understand this position. Dependencies are part of your code. Why wouldn't you want to keep them with your code? (And if the answer is "disk space," I have to wonder what you're doing that makes disk so precious.) Standing up a local mirror is *so incredibly convoluted* compared to just checking in dependencies, I genuinely don't understand why people seriously consider it. It seems incredibly fragile and short-term, too. In 10-20 years, you'll still have your source code repo in a backup somewhere at the very least. The local registry? Not so likely. Please enlighten me. (A local registry for company-internal modules is a whole 'nother issue. That makes a lot of sense. But a local registry just to prevent checking in code? It baffles me.)
I made something a while back on my localhost. When you already have a video, there's a duration property of the video. I used it to create a timer display (i.e: HH:MM:SS). var vidya = document.getElementById("videoID"); console.log(vidya.duration); //should display the time in seconds
thx, ill look into that.
First off, if you begin a line with 4 spaces, it will format it as code like so To answer your questions: As far as I know, that first code snippet won't run. It should give an unexpected identifier or missing curly brace error or something like that. What I *think* the author of that code was trying to show was that if you omit the `var` before a variable, it will keep moving to outer scopes until it either finds the variable or reaches the global scope. So this code: function example() { var a = 1; b = 2; c = 3; } will create global variables `b` and `c`, but that code is so different from what you posted that I think I'm probably wrong. For your second question, what is happening is this: * Create `Object o` * For the numbers 0 to 3, define a property of `o` named whatever number we're on, and set it equal to a function that prints `i` * Call all of `o`'s methods
Horrible design. Not everyone uses the mouse wheel, so you shouldn't hide the vertical scrollbar. And if you do make a site like this, don't rewrite the location with every scroll event, because then I have to back button through them all to get out. Ugh. And at least on my PC, the scrolling was not very responsive. I had to spin the mouse wheel a few times or click the down arrow a few times to get the scroll event to fire.
Can you explain/breakdown the first problem more? I still don't get the whole local and global scope concept. Are you saying that variables inside a function can still be global?
Then you're not using the full internet. JS is just as required as CSS...
Oops: http://imgur.com/UhXbudl
The key there is the `var` keyword. If you use it, it will define the variable in whatever scope it's used in, so: var globalVar = 1; // Global scope, available to everything function example() { var localVar = 2; // Only exists inside this function, can't be referenced from outside of this function globalVar = 3; // Looks to see if globalVar has been defined in this function before. If not, goes one level higher and looks there. If not found there, it will go one level higher and so on and so forth. In this case, it will find the globally defined globalVar } One thing to note is that if the `var` keyword is omitted, the variable WILL be created globally if it isn't found elsewhere, so: var o = { example: function() { globalVar = 5; } }; o.example(); This will create a global `globalVar` variable.
God save us all. ITT: People who feel JavaScript is perfect.
Namespace all the things. I normally like to do a convention where every class exports to something like PowerMap.ClassName, Project.ClassName.Function. The classes are normally wrapped in a closure and export to the toplevel namespace. This is just personal preference but I usually prefer JS file names to be lowercase with dashes between words like cfb-team-crosswalk.js on your season tracker and week tracker html you may want to consider using a custom binding. When you start to have multiple bindings with conditionals inside your html its usually a good candidate for a custom binding or some further thought. This way you can keep the html as logicless as possible. Consider using a grunt or gulp build system to concat/minify your css and js into a deployable build.
There are real development issues when working on a large team to check in the modules. 1. It obscures what you actually changed in the application code to have these huge diffs of dependencies on every commit. 2. Checking in your dependencies totally breaks `git grep` and similar tools to let you look at *your* code. Now it behaves exactly the same as `grep`. 3. It makes installs/deploys slower, as you need to download the history of your dependencies instead of just your code in order to build your install package to put on your prod boxes. 4. There are secondary cultural issues to worry about, too: if you check in your dependencies and there's a bug in one of the dependencies, why not just fix it in your repo and be done with it? Fixes don't go back upstream. Adding/removing modules becomes more difficult because the diffs look more "menacing" and approval in either direction is harder to come by. By basically ignoring that separate things can and should be versioned separately, you make it more difficult to institute SOA in your business when you need it for scaling and then you end up with the insanity that is Facebook's internal dev process where "separation of concerns" is viewed negatively. Also, once you're already using things like Varnish in your architecture, it's *very* trivial to point it at external things you depend on, as well.
Hmm, that's weird. I just copy/pasted that into my console and got all `undefined`, which is the expected output. What probably happened is you probably still had `b` and `c` defined from earlier tests. Try opening a new tab or refreshing the page to clear everything out. As for the second part of your post, yes. var a = 1, b = 2, c = 3; is the same as var a = 1; var b = 2; var c = 3;
looks nice. this solves my main complaint with knockout, those being: all the bindings are crammed in a single attribute, I would love to see some rendering benchmarks compared to knockout and angular
My thoughts exactly. He's already cursed the world with a terrible language that we're all basically coerced into using, who knows what he'll do next.
Ignore that, I am an idiot and did not realize that my previous input in the console would also affect the new inputs! I finally understand it now! Thank you for everything!
I mean, he had like a week.
Honestly, it'll be interesting to see where Mozilla takes Firefox. I've been extremely unhappy with Firefox since Chrome basically took over. Their flagship product is no longer quality. Will Brendan Eich turn that around, or will we be stuck with odd ECMA implementations, no proprietary binary implementations (see h.264 (although it looks like they kind of sort of hem-hawingly support it https://hacks.mozilla.org/2012/03/video-mobile-and-the-open-web/)), crap development tools, and all the slowness in the world?
Via HN. Discussion: https://news.ycombinator.com/item?id=7462326 Relevant to "[I love the Unix philosophy, but...](http://mntr.dk/2014/i-love-the-unix-philisophy-but/)" which was [recently posted here](http://www.reddit.com/r/javascript/comments/216t4h/i_love_the_unix_philosophy_but/) in /r/javascript.
Thanks for the feedback. 1. If this is a concern, it's trivial to isolate dependency changes in their own commits. You can also ignore the `node_modules` (or whatever) directory in your review tool if you're reviewing multiple commits. 2. I don't personally use `git grep`, but a quick perusal of the man page shows that it allows you to specify the path to search. For my code, I would use `git grep X -- src` to only search my source files. 3. Fair point, although I haven't seen this in practice deploying a 155MB repo to Heroku. (And no, it's not 155MB of dependencies. :-) ) I'm only deploying changes, not the entire repo. 4. I've definitely fallen prey to the temptation to change dependencies directly. There have been some cases where I've relied on third-party modules that were broken, and I've fixed them in my repo while waiting for the issue to be resolved up-stream. I'm not proud of it. ;-) I can't say I buy the "menacing diffs" or SOA arguments, though. You either have a culture of generating reusable modules or you don't; that seems orthogonal to having a culture of "[whole project](http://books.google.com/books?id=2q6bAgAAQBAJ&amp;pg=PA172&amp;lpg=PA172&amp;dq=%22whole+project%22+version+control&amp;source=bl&amp;ots=MTaeaHP5dg&amp;sig=j1AnzXHPm7I01FbMDwvAtnHGcyw&amp;hl=en&amp;sa=X&amp;ei=F9cwU7SZH87coASs1oDICA&amp;ved=0CGgQ6AEwBw#v=onepage&amp;q=%22whole%20project%22%20version%20control&amp;f=false)".
Firefox is still a great browser, it just doesn't respond like a modern browser anymore. I think if Mozilla was smart they would look towards a successor to Firefox, make it what Chrome used to be: lean, fast, and standards compliant. 
I agree with all of that except the "great browser" part. I feel that the line for "great browser" has changed, and Firefox hasn't kept up. Just my .02.
What if I give you an unreasonable deadline and then ask you to create a language fast? You sure you can do better than Brenan Eich? 
One does not simply reform a language fast when the language is being used by browsers and lots of websites.
Don't blame him. Blame whoever gave him a quick deadline.
and [he's a homophobe](http://projects.latimes.com/prop8/donation/8930/?sender=twitter)
More discussion about this over here: http://www.reddit.com/r/firefox/comments/218tdl/mozilla_leadership_changes/cgaqmvi
I hope he is open for supporting Dart in Firefox. I don't want to break out a war, but sometimes you have to make a fresh start. Don't get me wrong, ES6 will be great and I'm rooting for it, but there will be issues that it won't solve. SIMD will land in ES7 and god knows when will it came out. I really hate the fact that Mozilla is rooting for asm.js, which they see as the only option to make quality 3D web games. We need a faster web language and not c++ for the web. I know i will get down voted for talking about Dart, but i will brace it. :D
Why does the frontend language you're targeting asm.js with have to be C++?
He's the creator of JavaScript and has defended it past the point that he should have. And he's openly spoken against Dart before. There's no possible way Dart will make it into Firefox on his watch. 
Not an excuse. 
Either one will work just as well IMHO. 
I have not, but I definitely will look into it. Thanks a million!
Don't worry, it's probably just a weird result from type juggling. I'm sure the next ECMA release will change the CEO back to something sane.
Vue.js is a joy to work with.
I want to hug this guy and kick him in the nuts so hard at the same time.
Correct my mistakes then. I'm not one to take offense at being educated. Edit: Got it. A couple bugs in either browser decides which browser is the "best" and completely invalidates my opinion one way or the other.
http://vuejs.org/perf/
The async-ness is mostly about ensuring that any binding instance will only be updated at most once per event loop. Take a look at `src/batcher.js`
nice. missed that somehow
And how is his private opinion about same-sex marriage relevant to his work?
The bugs are other bugs. Many of them. And they all get judged as unimportant because it does not affect Google's web. Many benchmark say that Chrome falls behind Firefox in terms of speed and memory footprint since the nine last versions of Firefox. The developper tools in Firefox have some important features that Chrome hasn't. Some of the "features" in Chrome's emulation platform are plain broken.
All software has bugs. All bugs are prioritized. &gt; Many benchmark Link them. &gt; The developper tools in Firefox have some important features that Chrome hasn't. Elaborate. &gt; ~~Some of the "features" in Chrome's emulation platform are plain broken.~~ ~~Elaborate.~~ Scratch elaborating on the emulation platform. Firefox doesn't have a similar feature, so what is there to compare? And, again, all software has bugs.
Nice. I may start using firefox again. 
&gt;5%-10% even more if you think about how big is the rails community
Unlike Chick-fil-A's semi-official stance against homosexuals, Mozilla has explicit policies supporting inclusiveness: https://news.ycombinator.com/item?id=7460225 &gt; For the record, Mozilla does provide employee benefits that cover same-sex domestic partners, and I would be shocked if any CEO attempted to change this. (I am a Mozilla employee.) &gt; The Mozilla community is governed by participation guidelines that state: "support for exclusionary practices must not be carried into Mozilla activities," and "support for exclusionary practices in non-Mozilla activities should not be expressed in Mozilla spaces." http://www.mozilla.org/en-US/about/governance/policies/participation/ &gt; UPDATE: In a meeting with Mozilla staff this morning, Brendan reiterated that he was involved in the creation of that code of conduct, and supports it 100%. He also specifically said that he should be held accountable to it, and that it's important for those in positions of power to be accountable to those with less power. Also, a blog post from Christie Koehler, a queer woman who works at Mozilla, mentions that Mozilla actually has benefits on par with heterosexual marriages: http://webcache.googleusercontent.com/search?q=cache:subfictional.com/2014/03/24/on-brendan-eich-as-ceo-of-mozilla/&amp;client=ubuntu-browser&amp;es_sm=125&amp;strip=1 &gt; Mozilla offers the best benefits I have ever had and goes out of its way to offer benefits to its employees in same-sex marriages or domestic partnerships on par with those in heterosexual marriages. Last year we finally got trans-inclusive healthcare.
I don't have time to educate you on everything, I want you to go read about it before spreading nonsense, but I will gladly link you the benchmarks. http://www.ghacks.net/2014/01/02/chrome-34-firefox-29-internet-explorer-11-memory-use-2014/
What's the story on server rendering?
I'm spreading nonsense because my opinion is not favorable of Firefox? You've done a wonderful job of persuading me. Thanks.
Still better than IE.
[Seems to be working fine for me](http://i.imgur.com/ARicY8L.png)!
Can you explain? Sourcemaps?
Yup! The experience isn't as nice as debugging native Dart code in Dartium, but it works pretty well. And, of course, if you just want to *run* your app and not *develop* it in Firefox, the compilation to JavaScript works perfectly well for that.
I don't know anything about shopify, but it's really easy to do if you're using svg files, in fact you could probably do it with just CSS. You just need to change the fill property.
like this ? http://www.htmlfivewow.com/demos/terminal/terminal.html
Because he's not just a programmer anymore, he's the CEO - he shapes the vision and future of the company. How'd you feel if he was a klan member that kept his private life out of his work? would you believe it?
Fuck! I just realized I typed his name wrong!!
I've had no problem with 3D transformations in Chrome. What are they?
A company pulling a new language out of its ass by surprise might be not the best way to do a "fresh start". It's not the 1990s anymore and Google isn't Netscape. 
I know you're talking about installing Node locally. I didn't say you said to setup a web server - what I did say is that there are many, many Node.js beginner tutorials that will instruct it's readers to setup a web server, configure some things, or install some things they don't fully understand. It's really not as simple as it seems to someone who doesn't even realize he could be using dev tools console. That's it. I'm not criticizing you, just trying to point out that OP most likely has no clue what you're talking about when it comes to "console feedback" that he's used to, ie. he/she is used to using Codeacademy for comparison. I never said Node.js was a Trojan horse, or that itself is an insecure technology, but apparently you guys are so insecure about it that you jump to conclusions and get pissed every time someone tries to help a noob learn javascript **as it relates to the browser and HTML**, which is what the OP said. TL;DR I was just trying to give him the flip side. Next time I'll try to clarify that it's the tutorials that can lead to security issues, not installing Node.js by itself. I still think there are many points I've made that will help the OP on his/her journey. It's not the same type of development, which is what he was asking about. 
Here is a list : https://code.google.com/p/chromium/issues/list?can=2&amp;q=3D+transforms&amp;colspec=ID+Pri+M+Iteration+ReleaseBlock+Cr+Status+Owner+Summary+OS+Modified&amp;cells=tiles Here are people having problems and people throwing random solutions to the problems, look for people mentioning "blinking" or "flickering" : http://stackoverflow.com/search?q=3d+transform+chrome When programming a website with many 3d transforms, using backface and flips, you get absolutely no problem on Firefox and on Chrome it becomes a nightmare. Because if you try a quick fix it breaks something unrelated in the DOM. There is also the fact that when you apply a class which has a CSS transformation and you remove the class, there is no backward transition, it just returns to it's original state in a snap. Firefox has no such problem. 
If it were a private opinion we wouldn't know it. It's a vindictive assault. Big dif when it affects real people. If I were against programmers getting married, this guy might think I was a piece of shit, like I know he is. But just on a personal, private level. I haven't introduced a proposition to label him and ostracize him as such. 
Why would they hire him, then? So bizarre. 
Depends on the site
lol at your account name. Good thing accounts are free, your anti-retrovirals must cost a lot. 
2048 is now available as app for iOS.
Ok, but it was already available as a web site for iOS. The only thing I can think of that an app could offer over the web version is Game Center integration, which really isn't that important. Meanwhile, I don't think the app is by the actual developer of 2048, and so I'd rather not encourage that kind of "copy it exactly with the same name and put it in a different medium" behavior. I will stick with the web version on my iPhone: it works great.
Late reply, hope you still care :) I looked a lot at jsperf, and also wrote some benchmarks myself that reflected my typical data set better. Funny thing is that in JS, native functions are often slower than writing your own code. This is because for loops are heavily optimized by browsers. See for example http://jsperf.com/for-vs-array-foreach/6 and http://jsperf.com/for-vs-foreach/32
ASM.js is by no means limited to C++, but as far as I am aware C++ has the best support.
I used it for many projects, web and mobile.. this is the best framework ever
you have typed (⌐■_■) weakly
Perfection in computer languages is a highly subjective matter. So if someone feels that JavaScript is perfect for whatever he wants to do with it, that's fine by me. If you want to create something that runs virtually everywhere, even within a browser/server/embedded design, JS isn't too bad a choice, anyway.
&gt; Because he's not just a programmer anymore actually, even if he's just a programmer. Just imagine this guys. Imagine you are a black male gay programmer, and one of your coworkers hates black fellas, and another is like "all men are rapists", and yet another is like "gay nerds cause earthquakes and we should deport them to Canada". You know you are gonna have bad time.
Depends on what the terms are. If both are boolean for || or the one after &amp;&amp; is boolean, you're safe: true &amp;&amp; 1 // 1 false &amp;&amp; 1 // false 0 || 1 // 1 0 || true // true 
Maybe they think he would be good at the job and his personal view in unrelated topics will not affect this. And that, as a company, they have their own views that he has likely agreed to uphold with his position or (and) are decided not by him but by numerous people within the company. He would not have the power to change this. He would not have the option to discriminate within the company. He simply is opposed to gay marriage himself as an individual outside of the company. You don't have to hate gays to be against gay marriage. Not defending the view, not attacking it. Just making a statement that hating gays and opposing gay marriage, whilst they may be commonly tied together, are not mutually inclussive.
For the same reason that this code: count = 1; for( i=1 ; i&lt;=3 ; i++){ console.log('&gt;',count); count ++; } output this: &gt; 1 &gt; 2 &gt; 3 3 IOW, the "shell" writes also the value of the last expression.
The last 3 is just the result of what was procesed in the console. It's not from the console.log, so not happening in the loop. Replace console.log(count) by something like: console.log(i + " : " + count); and you will see that the last 3 is a bit different. 
Interestingly enough, if we put the code into a closure (or a function) this effect goes away: (function() { count = 1; for( i=1 ; i&lt;=3 ; i++){ console.log(count); count ++; } })(); outputs: 1 2 3
Support his company, which pays him a salary, which he then uses to fund homophobia.
The project was publicly announced 2.5 years ago. The development happened in the open. I really don't see a problem with that. Is there a language which did it better? Also, there has been a language specification since the very beginning. If you want your own implementation, you won't have to reverse engineer anything. Microsoft, for example, had to reverse engineer JavaScript. Some of JS' warts are a direct result of that. No one would have specified that the `typeof null` should be "object". Finally, it compiles to JS. This also makes it quite different from JavaScript, ActiveX, or VBS. It does work elsewhere. What else could have been done better?
Ember and angular are both client side frameworks , you still need a server side environment for database access etc. You can use both with asp.ney mvc or web API. From an architectural point of view, going the SPA route us a very big shift with important considerations like SEO, business logic separation, controlling client side code exposure. This is a big and expensive undertaking and you guys should solicit the help if a software architect experienced in front end and back end dev.
You're either joking or a complete asshole. As a gay guy, I'll hope it's the former. 
The last expression of the for loop was "count++", it's result is returned in the console. If the last expression within the loop returns nothing, you'll get that as result: count = 1; for( i=1 ; i&lt;=3 ; i++){ console.log(count); count ++; []._ // will return "undefined" } You could also put it inside a closure, like tsopilord suggested.
First of all, you seem to assume a sexist CEO has to be a man, isn't that sexist? I think a sexist CEO wouldn't bother me much, if the CEO wouldn't act in a sexist way in the work environment and the only sign of his/her supposed sexism was some old contribution to a sexist cause. 
The other way is to wait for Javascript to improve and so we have to trust in the Ecma group, who wasted 10 years between Ecmascript 3 and 5 due to political reasons. http://en.wikipedia.org/wiki/ECMAScript We get ES6 at the end of the year or maybe not? In the meantime we improve the compile-to-javascript languages(Dart, Haxe, Coffescript, Typescript) and asm.js, so we don't even have to touch that stuff again. But we will always have that third wheel known as Javascript. Hurray!
Do you have any plans on adding CanJS to the list?
You can also use [Charles Web Debugging Proxy](http://www.charlesproxy.com/) to map remote files to local files.
S(KS)K
probably because JS is the best and the worst language at the same time
Charles WDP is the shit. Worth every penny.
lol, good sir that made my morning funny have a tip!!! +/u/dogetipbot 20 doge verify
How is it not? I have yet to meet someone who is capable of ignoring strongly held personal beliefs simply because they intersected a work matter. Also, bigots aren't entitled to have their cake and eat it too. Want to publicly express you beliefs? Be prepared for a public response. Your work life is not a safe zone from the consequences of your personal ideals. Nor should it be. 
Prototypes are better because you can define a class system as well as many other systems within JS.
As CEO you mold the vision of the company. The openness of Mozilla is paramount to its vision - it just doesn't seem like someone who thinks that everyone shouldn't have equal rights is the person to drive a vision of openness. The fear is that his feelings, even when personal and business is separated, would indirectly influence the future of Mozilla, not only outwardly to the public - but inwardly to its employees. Furthermore, I don't really buy the idea that people just "turn off" part of what they consider to be a part of their moral fiber if it disagrees with the work they're doing or the environment they're working in. I think the claim of the ability to do so speaks volumes more about the person than the businessman.
I guess so? I was taught on OOP and classes so that's what I know. But when I started JS I wanted to take advantage of prototypes, wherever I went though other programmers would just tell me how to make classes. Almost nobody actually knows the other benefits of prototypes. EDIT: maybe I just got unlucky with it.
&gt;Things should be composable &gt;Programs should accomplish a single task and no more *Cough* Grunt *cough*
Not joking. I just don't like people like you trying g to bully people out of jobs for holding an opinion you don't like. Also, please get a few more strains of HIV so the meds quit working. 
My point is that opposing something is fine in private. I've got friends who are gay and parents. Decisions like his to actively try to take away their rights truly and actually affect peoples rights and lives. Parents, daughters, sons, siblings. It's one thing to be against it but when you actively try to take a right away or block it - ESPECIALLY WHEN IT ONLY AFFECTS OTHERS - you show a truest shitty character. 
Promises will be native in EC6, why not use those?
In other words, yes.
Not sure why you're getting downvoted, I really enjoy this. Is source available? :)
Simple but fun and classy. GG!
I made lonecomment.com, a site which auctions off the ability to edit its front page to write your own announcement, PSA, rant, advertisement, etc. You can either pay using real money, or your reddit karma. I get the user's karma by looking at the json in /about.json of the user, and then store it on my end, keeping track of how much karma you have "spent" on lonecomment.com so you can't double-spend it.
http://kubyshkin.ru/pages/canvas-text-editor-tutorial.html This is a tutorial for creating a canvas text editor. I think this could be very helpful :) 
Do I have to give you my login credentials, or can anyone use anyone else's karma? It's either bad security or uncontrollable.
Neither. When you pay using karma, the site sends you a private message through reddit which contains a publishing link. I don't collect login info, nor can you use another person's karma (unless you happen to know their reddit password) The only thing I can't prevent is people sending PMs to reddit accounts they don't own, but that's an annoyance rather than a security risk
Looks like it was a new user, perhaps they didn't know any better....they did remove the submission themselves.
So what would your solution look like? How can you build any advanced application without breaking this mantra? For example, Unix; it definitely does more than a single task. I think you need to take a step back and realize that tools are either a) the composee, or b) the composure. It makes no sense to be composable if there isn't a system to compose them together, ergo we have Grunt which composes many smaller, composable tools. 
Regardless of your conclusions, this has nothing at all to do with _optimization_; your code will not see any noticeable benefit, performance-wise, from using one over the other [for any real-world usage scenario]. Use whichever is the easiest to read and/or offers the functionality that you wish to implement. Using [last-value short-circuit operators](http://en.wikipedia.org/wiki/Short-circuit_evaluation) is often useful for setting default params: function foo(minCount, name) { minCount = minCount || 0; name = name || 'test'; // ... } However, it's not always the most readable, say for zebra-striping: for (var i = 0, len = x.length; i &lt; len; i++) { var cssClass = i &amp; 1 ? 'odd' : 'even'; // ... }
NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN 
So nobody should hire someone they disagree with? Should I start asking potential employees their political associations in interviews?
One of my rules of Frontend Development: *never* abuse JavaScript to do the job HTML/CSS were intended to do. So no upvote for you.
The main reason is that most JS frameworks now come with with some sort of promise or future feature built in. 
This is pretty narrow-minded. There are plenty of cases where JS will be superior to HTML/CSS for matching particular designs, animations, effects, etc. 
Entertaining post. Hopefully this one will tide us over and we won't need another "understanding Javascript inheritance" blog post for at least 18 hours. **Edit**: I'm realizing too, that this post could be generalized to all languages. See: [Goodbye, shitty Car extends Vehicle object-orientation tutorial](http://lists.canonical.org/pipermail/kragen-tol/2011-August/000937.html). &gt;The `Car extends Vehicle` or `Duck extends Bird` type of tutorial obscures more than it illuminates. In good OO programming, **we don’t make class hierarchies in order to satisfy our inner Linnaeus**. We make class hierarchies in order to simplify the code by allowing different parts of it to be changed independently of each other...
I think there is an easier way. You just need to get what the first day is in the month: var date = new Date(year, month); var startDay = date.getDay(); now you've got your day index from your dayNumbers array, so you can just find out how many days forward to get to your day: var moveDays = (myDay - startDay + 7) % 7; the plus and modulus above just sorts out if your startDay is earlier in the array than your picked day. Then you just have to add 7 * the Nth day. moveDays += 7 * (nthDay - 1); now moveDays will be the date of the holiday in that month. return new Date(year, month, moveDays);
Come on, guys, a *menu* is a wonderful case for something that should work with HTML/CSS only and can be enhanced with JS. Using JS to do all the work is like using a hammer to do the work of a screwdriver.
The CEO is not just another employee.
Devil's advocate: every non-tiny application ends up needing classes, and there are a million implementations out there now, and the one you use won't commingle nicely with the ones used by your libraries.
This is actually an interesting idea. Reminds me of the [million dollar homepage](http://www.milliondollarhomepage.com). Here's hoping someone rich comes along and earns you a quick million :)
love it! reminds me of zelda :D
something fun when?
A proliferation of libraries isn't a bad thing. ES6 has a nice class syntax that is compatible with the standard prototype inheritance method. Classes are only one way of organizing large projects.
I like the look of the green parts.
I blew my wad. Here's to hoping that karma was well-spent.
PERFECT!!!!!!!!!!!!!!!! thank you so much!
Love It!
Not hiring him based on a donation he made privately would certainly qualify as exclusionary practice and there doesn't seem to be any indication that his potential views might impact his work.
well shit now i want to play zelda
/r/javascript isn't really well suited for these types of questions, so if you don't find a solution here, I'd suggest [Dynatable's issues on Github](https://github.com/alfajango/jquery-dynatable/issues).
Use TypeScript! It is awesome for corporate JS. It has the ES6 syntax for classes too (but compiles to prototypes).
my god, someone really needs to take a public speaking class. too distracting to listen to, but nice demos.
Eh, that seems almost too pedantic to be of any use. The car/animal/etc. paradigms are used not because they mirror real code examples, but because the intent is painfully clear for what you're trying to teach: object `car` is a subtype of `vehicle`, which works very well at demonstrating broader concepts such inheritance, polymorphism, the Liskov substitution principle, etc. Of course it can fall apart once you get into the more advanced concepts, such as if you try to apply the full definition of SOLID, but taken at face value they're simply examples....not archetypes. In short, it's just implementation details. Just look at what that author gives as a "better" example to use: &gt; Here’s an example that I think would be better to use instead: the `Visible` hierarchy in [Pygmusic][], which is a kind of software drum machine. A `Timer` is a horizontal strip on the screen with a stripe racing across it. A `NumericHalo` is a spreading ripple on the screen that fades. A `Sound` is a thing on the screen that makes a sound when a `Timer`’s stripe hits it. A `Trash` is a thing that deletes `Sound`s when you drop them on it. They all inherit from `Visible`, which represents things that can be drawn on the screen and perhaps respond to mouse clicks or drop events, but they do different things in those three cases. In addition, the `Trash` and `Sound`s are subclasses of `ImageDisplay`, because the way they handle being drawn is simply to display a static image, so that code is factored into a superclass. Let's see, what's easier for a beginner to grok, a single sentence detailing the relationship between a vehicle:car, or that giant paragraph that introduces like 5-6 disparate objects, and talks about the minute implementation details of a subject that would be foreign to most any reader? Sure, for CS upperclassmen taking a test, the longer example might be better, but for a new student I'd beg to differ. To think about it a different way, consider the parable of _The Boy Who Cried Wolf_, a story that most (if not all) of us were taught growing up. How many of us tended a flock of sheep as a child? Probably not many. However, that really doesn't matter because the point of the story was not the implementation details (a wolf eating sheep), it was the theme behind the entire story, which was very easy to comprehend. That's my .02 at least.
Bug report: The enemies moving north/south in the all lava room would glitch to being stuck in the wall such that when I went to the area directly north of the all lava room (forest), I could see their heads poking out.
It would be nice for you to create gh-pages for the example!
It uses DOM-based templating, so no free server-side rendering. But it does work with jsdom.
That's a great point! I will do :) Just haven't got around to it
Of course, and I fully yielded that point already -- using _simple_ examples for _advanced_ concepts breaks down quite fast, regardless of subject matter. But, OP's post **isn't** attempting to teach OOP. Rather, it's trying to demonstrate OOP in the context of JS; it's understood that you already "know" OOP, you just haven't seen it implemented in JS. Likewise, more times than not, when you see the `animal` or `vehicle` OOP examples, it's typically not to support the advanced concepts, it's simply to get their feet wet or to demonstrate some other [simple] concept.
I had a few other projects and am just returning to this today. I don't need the complete solution, and in fact enjoy "the chase", but can you tell me, is it possible to have the scroll start over at the top when it's reached the bottom? Or, optionally, start scrolling in reverse direction? Simple yes/no's puts me on the right path and anything more I understand is spoiling me. Thanks!
* [Two.js](http://jonobr1.github.io/two.js/) * [The Developer - jonobr1](http://works.jonobr1.com/Patatap)
The garbage collector is an implementation detail left to the browser. Not really a fault of javascript, unless you take issue with the concept of garbage collection itself.
Honestly? Yes. Obviously you don't need to thoroughly map their entire world view before you hire them, but you also don't have promote them or renew their contract. Much less, you know, *make them the head of the entire goddamn company*.
I agree that this is a dynatable issue rather than a general javascript issue, so using their support would work best. That all being said, you can learn a bit about the nature of the error you are encountering, and probably solve your issue. If you open the debugging console (use Chrome) and click on the network tab, you can see all the page-level AJAX calls. Next, trigger the call to the giantbomb API (via page refresh likely). You will possibly see the giantbomb HTTP call on the network tab now. If you don't see the giantbomb API call, there is something likely messed up with your invocation of dynatable, because dynatable isn't able to make the AJAX data call in the first place. This is likely not the issue, but first things first. If you see the call, look at the response code - is it a 200, or something else? You probably want to see a 200 code, as it is indicative of a successful call at the HTTP layer. If you see something like a 400 here, check the URL to make sure it is correct - this is likely where you are failing. If you see a 200 as the HTTP status code in the response, look at the content of the response itself. It should look like a JSON struct of games, or a JSON empty array if no results were returned. If you don't see this, it is again likely indicative of calling the giantbomb API incorrectly, so look at your URL. If you see a well-formatted JSON response being returned from the giatbomb api, your issue likely exists in how the data is loaded into dynatable - it is likely formatted in a way that dynatables doesn't understand it. I took a quick look at dynatables, and it appears you want your data returned in this format: https://www.dynatable.com/dynatable-ajax.json My guess is that you're having a problem with the last issue. It would be something quite remarkable for a random web service returns data in the exact format that can be consumed by dynatable. You will probably have to transform the output to a format that dynatable can consume.
This is honestly the most satisfying web app I've ever used.
I did a quick test and it seems CanJS trashes the whole DOM on every change. It took 15 seconds to finish the benchmark...
I'd prefer to have more control over it.
Niiiiiiiiice!
With my current code, it calls the api, but is canceled. I guess I'm missing something, I'm pretty new to this. Do you have any idea on how to bring that data over to a format that dynatables understands? What if I just forgot about dynatables and made a table that showed the game and boxart with html and plain ol JS. What would you recommend?
&gt; You don't have to hate gays to be against gay marriage. And you don't have to be racist to be against interracial marriage. Oh wait, that's not true. Brendan could dress it up as tradition or religion or hate or even love but it's still bigoted and offensively discriminatory.
&gt;upload.php Nope.
I'm going to write a tutorial on how I wrote it. I will make the source available then :D 
I'll sum up my thoughts with the end of OP's post: &gt;Sometimes these analogies get pretty crazy in my head, and I start to think that maybe instead of trying to apply known examples in the outside world in order to help people understand, it’s often better to just let someone know why they might wanna use inheritance in their programs! Followed by a pretty concise, useful example of JS inheritance in action. I don't think the `Duck extends Bird` style analogy belongs anywhere except maybe to document the language's *syntax* for inheritance for somebody who already conceptually understands it. In that case, `Duck` and `Bird` are just metasyntactic variables like `Foo` and `Bar`, but it's easier to remember which one is the super versus subclass. That's similar to your second bullet point, but this post wasn't really that. This post was directed at, or written about, somebody who has a shaky conceptual understanding of inheritance, *especially* inheritance as it exists in JS. This person doesn't just need a reminder of what keywords to use in what order.
This is nice but still pretty basic and lacks any fallbacks for non HTML5 browsers, though slicing is out of the question there unless you use Flash or Java. Not sure how I feel about storing files into localstorage before upload. Why not just slice it up as you go and store the chunk index and reupload it or start from it if it fails. Localstorage is not meant for this and I don't think it should be abused like that. One of the major advantages of slicing up files is to allow for large file uploads and using localstorage kind of works against that. Anyhow, it looks nice, but it's a very niche solution for now.
Is the source code available on your games?
We're on /r/javascript and i'm getting downvoted for making fun of PHP, what's this world coming to?
How exactly did your comment contribute to the discussion about the JS library OP posted? 
PHP was the server environment I had to deploy against. It might be worth doing a Java and/or C# version as well - I'll see what my calendar permits. 
Yes, seems similar in concept to [Progress Quest](http://progressquest.com/).
There's a typo: http://laboratory.nuhack.com/atomaton/nighttime.jpg Should be http://laboratory.nuhack.com/automaton/nighttime.jpg
Good luck! I've been offering up some little libs and micro-frameworks here and there recently to the JS community, you'll find their ability to suck the wind from your sails awe inspiring. I true bunch of miserable cunts. Keep up the good work and don't let them kill your spirit because they can't grasp the concepts. Also, unless you're writing a 2048 clone or shitty long winded article that no one can stand to sit through so they blindly upvote it based purely on word count, I would suggest avoiding /r/programming. Also, don't expect feedback... you'll either get blind downvotes for no apparent reason, or you'll get "I use XYZ, why is this better than XYZ?" even if you're solving ABC... because... well... fuck people.
Yes, it is definitely a niche solution for now. I did it as pro-bono work for a friend, and I figured perhaps the community could benefit as well. I would consider it more PoC level at this stage. It's primary task was to make photo uploads from phones 100% reliable, I'm not sure if it will have applications outside that realm or not. Local storage was meant to preserve the upload, even if the user navigates away.
Haha, thanks for the tips!
&gt;Local storage was meant to preserve the upload, even if the user navigates away. This is quite interesting for mobile and for small files. Haven't come accross this issue but this sounds interesting. I've been building an extensive upload library for file uploads for a file heavy service and I've found it's quite a big challenge to get the cross browser compatibility down well and as seamlessly as possible but it's crucial. Since you're limited to mobile I envy you the lack of complexity that supporting multiple environments brings :)
Uh, so you agree with me? edit: In case I wasn't clear, I was alluding to the fact that Grunt is those things, not that Grunt is not those things.
Don't be mean to orphans.
This seems 100% pointless. Heard of media queries? 
The reason you see these kind of comments is because the JavaScript ecosystem is polluted with lots, and lots, and lots, and lots of shitty JavaScript "frameworks" and libraries. Writing a shitty little framework isn't really a bad thing. In fact, it's a great way to learn. The problem is that everyone wants to show it off. And rather than submitting pull requests to popular frameworks that LOTS of people are using, or taking advantage of frameworks and libraries that have been tested over hundreds or thousands of hours of development and production usage, people want to reinvent the wheel. Well guess what. The JavaScript automobile doesn't need 40 god damned wheels. A few is enough. And I don't mean to discourage developers from building cool shit. I just mean to discourage people from throwing every little script they write in the the public space. Also, this isn't a reflection on Cherry.js. In fact, I haven't really read any of the documentation provided. I'm merely pointing out why it's so often that you'll come across posts like this that might make you not want to post your code.
What's the south-east?
This is horribly formatted code examples. At least put some white space in.
I agree 100%, the problem is when someone steps up with a truly innovative design or system the barrier for entry is so god damn high and the users are so god damn cynical it's a serious uphill battle to expose people to new concepts. It shouldn't be. It's not just as simple as saying "heh, this could be better, let me just jump into this framework and make some changes." especially if your implementation isn't just a new take on an old wheel. Unless you've got a Google, Yahoo, or Twitter slapped on contributors list it is crazy difficult to get feedback, let alone traction, this is partly due to the eco-system of shitty shit, but a huge part of it is due to developer ignorance and the community that supports it. "Why is this better than Angular?"... really?!... REALLY?! Why is a motorcycle better than a car? Why is 2% milk better than Whole? There is no right answer, and pretending otherwise is infuriating. With MoshPit.js people didn't even comment, I have no idea why people don't like it, all I know is it's a great way to keep view management and the headaches of dealing with functionality and views of responsive designs out of JS and in LESS/CSS, where it's much easier to manage and doesn't pollute your business logic. It was buried in downvotes... why? http://www.reddit.com/r/javascript/comments/205d3m/moshpitjs_managing_your_applications_views_states/ This is my point... unless you're reinventing a fucking wheel or telling people how to better duct-tape their shitty wheel into a fucking tank, people don't care or don't understand. /rant
&gt; Interracial marriage &amp; gay marriage are different in religious contexts, You think that interracial marriage wasn't a massive issue for religious fundamentalists 50 years ago? Interracial marriage is denigrated by many books of the Bible (e.g. Ezra). Those against gay marriage can say the same bigoted things and the comparison is apt. Anyone against interracial marriage is racist to some degree, and anyone against gay marriage is against homosexuals. 
Good god that was ugly. I feel like my eyeballs were raped
Wow, this is really cool. Never knew this functionality existed.
this should help me out greatly
Google MEAN stack?
Nice work /u/bgard6977! Starred and watching. I really hope you find the time to flesh this out :-) 
I use VPN. 
I think I remember reading/testing that some years ago, surprised it's still a problem. I would expect it to decompose to basically the same bytecode. Thanks for the correction though! Now if only more browsers could adopt the [River Trail/Data Parallelism](http://wiki.ecmascript.org/doku.php?id=strawman:data_parallelism) spec.
Thanks! Many people are browsing reddit on their phones, so cannot see the example.
I'm mostly working on single page apps. The data comes usually after the page load from an external services. So, if the data is initially available in JavaScript I prefer JavaScript only solution over CSS only. That's of course more like a personal choice and project based question.
Cheers - [updated](http://jsfiddle.net/neuroflux/W9M6g/5/) :)
Yeah, just basic stuffs I wrote ages ago - rediscovered it in a backup and though I would share :)
The example code doesn't work for me. I get Uncaught TypeError: Cannot call method 'wtf' of undefined At this line: ninjaWizard.sayName().wtf().fireball().hide();
Indeed I did, edited in the example. thanks for catching that.
Aha. I think you are also missing a `return this;` at the end of `person.sayName` for the code to work.
Typically a CMS refers to a *server-side* application that allows you to create, edit, and delete content for your web site. So for example, a CMS may let you CRUD blog posts, press releases, and product detail pages. These are built with a server-side application server like PHP, ColdFusion, Node, etc. A templating system is for *front-end* development and makes it easier to update the DOM with the dynamic data. Certainly one site can use both - but they are different and solve different problems. I like Handlebars too. I've only used a few different ones, but Handlebars just "felt" right to me.
What does the back end look like?
Haha! I did not know what to expect from this, but it's clever. Good effort.
Good call. :) I should refrain from posting these things without testing at 2am.
I don’t get the point of using [].slice.call(arguments).randomFunction(some, args) when you can use [].randomFunction.call(arguments, some, args)
Fair enough. Changed in the example, but that wasn't really the point of the example now was it?
It doesn't. The article just describes the techniques and links to third-party implementations. The Google Maps API doesn't provide this functionality itself.
Start'em young. Pass the word.
That's what I meant, I guess my reaction was more that I didn't realize that there was a need for this; which is excellent for data presentation and I'm glad there are people out there working on it!
I bought a license about a month ago, but I've been using it since version 6. Best JavaScript IDE out there by far. Sublime Text is great, but Webstorm is a little better. 
he's been reported via /r/reportthespammers already - but i'll certainly have a look also.
I'm not familiar with this pattern: fireball: { value: function () { console.log("Pew Pew!"); return this; } } How is it that calling fireball() will call value() in the ninjaWizard.sayName().wtf().fireball().hide(); statement
This is really amazing. It doesn't get everything right of course, but pretty damn close.
Pros: Supports and validates jsdoc, so it's very easy to detect and fix type specific bugs. Pros: Excellent debugging tool. Cons: not suitable for large files / projects - very long processing time for code validation. Cons: There are a lot of coding style options (including some that conflict with other options) that probably don't make a damn bit of a difference in the end.
The multi-cursor feature is making me consider renewing my expired subscription. Aside from the speed, it's one of the main reasons I stuck with Sublime Text despite the lack of code intelligence. I guess I'll give it another try. The Angular support sounds nice, but I have the feeling some of the features don't work as advertised if you leave the beaten path. JS static analysis is *hard*. Also I'm always sceptical about the debugging. Although I'm fine with executing tests locally, I prefer to run the actual code in a VM to make it easier to reproduce the production environment.
Now implement it again without jQuery and add a destroy method to unbind all the event handlers for the GC. But it's already a pretty nice jQuery plugin as it is.
This did a good job of freezing up both Firefox and Chrome.
&gt; jQuery please
I really like this actually. This lets you have a clear separation where you can define mixin functionality with property descriptors and objects as objects. 
This is super fun. I'm wasting too much time at work with this.
I've also been using Webstorm 7 for these past months. Really loving it so far.
Does anybody know how I might go about extracting the sound samples for personal use?
I'm pretty enamored with `_.extend`, and so I'm curious whether stamps are worth the additional complexity to other people. I do know that I for one find dealing with prototypes to be really awkward, even though I understand their semantics just fine.
WebStorm is best storm, highly recommend
There are plenty of free sample packs available on the web. How about using some of those, instead?
 /assets/A/wipe.mp3 /assets/A/veil.mp3 /assets/A/prism-1.mp3 /assets/A/prism-2.mp3 /assets/A/prism-3.mp3 /assets/A/clay.mp3 /assets/A/piston-1.mp3 /assets/A/piston-2.mp3 /assets/A/piston-3.mp3 /assets/A/flash-1.mp3 /assets/A/flash-2.mp3 /assets/A/flash-3.mp3 /assets/A/dotted-spiral.mp3 /assets/A/suspension.mp3 /assets/A/confetti.mp3 /assets/A/timer.mp3 /assets/A/ufo.mp3 /assets/A/splits.mp3 /assets/A/moon.mp3 /assets/A/strike.mp3 /assets/A/zig-zag.mp3 /assets/A/squiggle.mp3 /assets/A/bubbles.mp3 /assets/A/corona.mp3 /assets/A/pinwheel.mp3 /assets/A/glimmer.mp3 repeat replacing A with B, C, D, E and F 
Non-standard (not Promise/A+), poorly documented, doesn't fill a void (that I know of at least).
&gt; There are plenty of cases where JS will be superior to HTML/CSS for matching particular designs, animations, effects, etc. Not really - especially not in this case. JavaScript lives within the confines of the browser. Which means in order to do any design, effects, or display of data it needs to manipulate the DOM / HTML and the CSS styles applied to it. This menu system for example is simply directly modifying CSS values in the code. Why would you want that over an included CSS script which allows easy modification of the style and appearance without disrupting the functionality of the system? HTML provides markup, CSS provides styling and appearance, and JavaScript provides the logic, and glue. They go hand in hand. 
You don't even need that. If you were clever with radio buttons, you could use input:checked + ul to show and hide lists. Could even get some nice animations in there if you transition visibility instead of display.
Because I enjoy playing these samples in particular. I'm not a professional musician- just a hobbyist. It's not as though I will at any point use these samples in any work I claim as my own- I just want to organize them in a different way that would make them easier to play.
Funny, I had just installed the v8 RC two days ago. They added AngularJS support in this release also.
 function one() { var x = something; button.onclick = function() { two(x); }; } function two(y) { alert(y); } I renamed the argument that `two` accepts for purposes of explanation. Also note the `var` keyword in front of `x`... It's very important because it makes sure you don't declare variables on global scope. In this example, the onclick handler I'm writing is a new function, but it has access to the variable `x` because when you define a function it is said to *"close over"* the scope of its parent. When you define a new function *inside* function `one`, it has access to all the variables that were declared inside of `one`. However, because I'm *declaring* the function, instead of invoking it, it's not called until the button is clicked.
In function one you can use two.bind(null, x). That will pass x as an arg but will not invoke two
Since it's being used as a click handler, `two.bind(button, x)` is probably a better idea than `two.bind(null, x)`. Many click handlers rely on `this` referring to the element that was clicked.
V8 had me a bit confused for a second :-)
Power always comes with a price. Pay or plebe.
I work at Ludei, the company behind CocoonJS. The platform has not been opened for app development just yet (hopefully the new release will be launched next week!). Right now, it is a highly specialised JSVM for canvas based games (both 2D and WebGL contexts) with bindings for engagement native API (IAPs, Ads, notificaciones, facebook, etc).
Webstorm is the best editor I've found so far for JS. My only complaint is that the thing is fucking unusable via Remote Desktop.
Hey, vb90. This book is available free of charge for online reading here: http://speakingjs.com/es5/ Great read! Really helpful and gives a lot of insight of what, why and how is happening in JS!
I know, but unfortunately I had to write this for a project that needed IE8+ support and reveal animations. Plus, I had little time so I used jQuery to handle them. During the night I'm a CSS animations enthusiast though :)
I run it side by side with VS 2013. Server side in C# with VS. JS with WS.
Crap
shit is freaky, always use triple `===` unless you are sure both you and your collaborators know what to expect from `==`. discussion: http://www.reddit.com/r/programming/comments/21ezh3/javascript_equality_table/
To me, it looks very silly. What are the benefits over prototyping? To me this looks like to be built because it makes JS look like, and I quote, PHP/Java 
The [author's paper](http://mikegerwitz.com/papers/coope/coope.pdf) on this.
I typically try to store a reference to another object, and call logic on that. However sometimes inheritance just makes a lot of sense and saves a fair bit of time over composition. For example: https://github.com/agmcleod/snowballeffect/tree/master/js/levels I found it was a bit simpler to have a level class that level one and level two extend from to share certain behaviours. This is for a 2d game I'm currently working on. I also found when I was coding a game in Java which is more class based that sometimes inheritance suited really well, other times simply invoking a separate object did.
AppCode (their Objective C IDE with C and some C++ support) has been around for awhile and is every bit as good as their other offerings.
I don't know if arrays in javascript require an article. This is more like an explanation of arrays as a general programming concept. I would think that the important things to note would be that all arrays in javascript are object arrays (on account of the loosely-typed convention) and therefore can contain many types of entries in the same array by default unlike most compiler languages.
If you want a good playlist to code by, try listening to the first Crystal Castles album. Every track on that album gets me in the zone.
I'm relatively new to JS and just starting to learn prototypal inheritance after many years of Java, C++, Python, etc. I've read through a lot of blogs that talk about using ad-hoc functions or libraries to make JS use pseudo-classical inheritance. My impression is that pseudo-classical inheritance solutions have too many caveats and that learning the native, prototypal approach would be a better long-term solution. I don't want to dive into a large project and find out a month later that the approach I've selected is limited or doesn't work. So just wondering, what do people typically use and why?
Leave it to programmers to find a language too simple to understand. I understand the library, I just think it's funny.
Notepad++ wont run and debug my Node.js apps or compile my jade templates while I live edit my code.
http://es5.github.io/#x11.9.3
When you say 'debug my Node.js apps,' are we talking the simple syntax errors that the prompt reports when you try to run it, or something more substantial like flagging routes that won't return anything? Also, does it show you the jade page or just the html?
I used to swear by notepad++ but then tried sublime text and all the extra features really sold me. I paid for sublime over webstorm mainly because of speed as quick changes are more important for what I do specifically. They both are a huge step up from notepad++ and I really miss the features when I don't have them.
&gt; ... intended to ... “ease” the transition into JavaScript Sure Javascript is different, but avoiding learning it is not a good solution. **Learn the language you're working in!** 
&gt; extra features short list, please!
I use IntelliJ Idea Ultimate as my primary dev environment. Aside from being massive and heavyweight, it's great. I keep TextMate and LightTable around for the light stuff. 
Worked on Chrome for me, pretty amazing.
crap is crap white text on black background, with no syntax colouring, with no indentation, hamagad! hamagad! hamagad!
white text on black background, with no syntax colouring, with no indentation, hamagad! hamagad! hamagad!
somehow you do not hear people complaining your website; white text on black background, with no syntax colouring, with no indentation, hamagad! hamagad! hamagad!
Well if you have the project setup the right way you'll get syntax errors and code completion as you type. You also have 'Run' configurations that will launch the node app from within webstorm (since node interpretation is built into webstorm). This eliminates the need for 'node app' commands to be typed. The jade is shown in regular jade syntax but you can enable 'watchers' that will automatically compile the jade to html after every change. I had never paid for any IDE but after moving on from PHP into Node.js I gladly payed for a WebStorm license.
This is why I dislike and don't see the point of CoffeeScript or TypeScript.
POLYGLOT OR GTFO!
One thing I really like about Sublime is how lightweight it is .... IDEs taking a minute to spin up really grinds my gears.
Built in support for Jade / JSON files. Access to console from within the application. Access to git within the application with a nice diff viewer. When you reference your own code or the main library or modules it completes the code plus shows variable names in the method as defined the program. Easy / Safe refactoring. Build in ToDO. But honestly its all these little things together that really makes coding that much faster.
I'm not totally sure about CORS requests. And from what it looks like, Chrome's Network Manager shows that it will start the GET of the json data, but will cancel soon after it starts. However, digging further into Chrome's console, I am met with this message after pressing my search button: XMLHttpRequest cannot load http://www.giantbomb.com/... No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. 
I am a huge huge fan of both visual studio 2013 and webstorm, but I tend to only use one when I cant use the other. What do you feel webstorm gives you that resharper doesn't? 
Eh? TypeScript is a superset of JavaScript. **You basically have to learn JavaScript**. And maybe you don't see the point but to me type annotations and generics are great features.
My thought process: "V8 just came out", "So they're running the chrome javascript engine in webstorm like phantomjs or something", "What type of sorcery is this", "wait...", "version fucking 8"
I love this ide. Using it as my primary at home for node/javascript been using it for a while, love the ideavim plugin as well. One thing that I wish they added was a database plugin like some of their other ides have, as I don't like hopping back and forth to pgAdmin.
Also they are really awesome with sales and they have reasonable prices otherwise. I renewed ruby mine for half the price during their end of the world sale (how awesome is that anyway). 
Right. TypeScript packs on great features and it is useful. But there's nothing you can't do with vanilla JS though, as far as I know.
You might need to clarify what you're trying to do but there's a "hacky" way which is global variables(bad best practice but if u need to coded something to work or if its of minor importance), there's a class way with prototypes and variables, and if its a form since you're talking about clicks, then you can reference the form data in the 2nd function. It depends on what u need to do so providing a better/full example might help.
"just"
[Here is a great self-guided learning lesson plan.](http://javascriptissexy.com/how-to-learn-javascript-properly/) I like it a lot and I found a PDF version of the recommended text book online.
I think it's best to try to unlearn classical inheritance when working with Javascript. You might *want* classes and feel uncomfortable with prototypes, but classes just don't exist in Javascript, so it's best to try to work with what the language gives you instead of living a lie. I don't even feel comfortable using the term "prototypal inheritance" in Javascript, because it's really delegation, not inheritance. And as always, prefer composition over inheritance.
Excuse me for being harsh, but I think this is just plain stupid. Why are people so reluctant to learn JavaScript. It really isn't that difficult if you have any experience with other languages. To me, this is as dumb as someone trying to write Ruby like Python because they already know Python.
Like what?
Fuck, this is sweet. Really elegant.
/r/pcmasterrace
jeez, this project is catching a lot grief everywhere. if you don't like it, don't use it. if it helps someone with an oo background get a well organized/architected project delivered, the good for them. programmers from varied backgrounds are sometimes tasked with doing one-off things here and there in js. they might not want to or have the time to learn functional programming from the ground up, especially if they can get away with some syntactic oo trickery. i don't see this being used by the 20 year old silicon valley kid building the next money sink, but maybe by Carl, the balding middle aged guy, building boring line-of-business applications in minnesota.
That's not really true at all. I've seen plenty of coffeescripters flounder when faced with plain JavaScript, and most I've talked with say they use it because it's easier. Coffeescript is way way way more than syntactic sugar. It has classes, block scope, requires explicit definition of global vars, has weird looping behavior with sequences. I'm not sure what else as I don't touch it unless I have to.
Is it nifty? -- Yes. Will I ever use it? -- No. Will I deal with it if someone else uses it? -- Probably.
I use phpstorm for js and php. Its got webstorm inside it.
The standard in every project I've worked on is q. https://github.com/kriskowal/q 
Also available, [All three tables in one view](http://dorey.github.io/JavaScript-Equality-Table/unified/) (though the if() results are not yet highlighted well)
Lol, I laughed pretty hard at this. Very cute stuff
It was actually meant to be a private opinion. I believe the donor list that eventually made its way to the internet was the result of a leak; not normally published material, nor anything Brendan announced.
I've been doing JS at my internship for a while and (coming from java/python) I love it. That being said, as my code gets more complex I find *scoping* to be harder to follow. A lot of work arounds I have done such as attaching objects to/referencing them from **window** to update them via click handlers feel a bit counterintuitive. I also don't use jQuery because my whole raison d'etre is to learn coding... Unfortunately from my first demo yesterday, it might be more pragmatic from a cross-platform perspective instead of writing conditionals for every vendor. Dunno! But it's fun to get paid to experiment
Does it work with less, too?
Appendix A in the [LiveCycle Designer ES Scripting Reference](http://help.adobe.com/en_US/livecycle/es/lcdesigner_scripting_reference.pdf) has some decent examples, including reading values and changing visibility. You might also want to read [LiveCycle Designer ES Scripting Basics](http://help.adobe.com/en_US/livecycle/8.2/LiveCycle_Designer_Scripting_Basics.pdf). 
Javascript is ECMA-Script, and Adobe LiveCycle uses ES - not Java.
Some results are quite entertaining!
I'm not sure what else you want it to do; seems to work fine.
Wait, so NaN != NaN ?
Excuse my ad but I think this is somewhat relevant here: https://www.youtube.com/user/AmazingJavascript
Except, y'know, statically analyze it.
there is a less plugin.
Syntactic sugar for how javascript should be written - never assigning a variable without declaring it (your block scope and explicit definition of global vars), setting scope through closures etc. Then there's the syntax-level implementation of a lot of functional constructs which are usually taken care of by some external library (underscore, for example, developed by the same guy who makes coffeescript). Using it without knowing javascript is ridiculous, dangerous, and the language has not been created with that in mind. 
CoffeeScript is largely syntactic sugar over JavaScript. I don't think anyone should be using CS without knowing JS. I like CS because it has a higher ratio of intent to code. It makes understanding the purpose of the code easier. And it's easier/nicer to write. Just a few comparisons: ####Looping through arrays in JS: var i, element; for(i=0;i&lt;array.length;i++) { element = array[i]; // Do something with element } ####In CS: for element, i in array # Do something with element ####Iterating over objects in JS: var k,v; for(k in obj) { if(!obj.hasOwnProperty(k)) continue; v = obj[k]; // Do things } ####In CS: for own k,v of obj # Do things (the "own" keyword does the hasOwnProperty check for you, which is what we usually want) ####Testing a property of an object that might be undefined: if(typeof foo !== "undefined" &amp;&amp; foo !== null &amp;&amp; foo.bar) // foo exists and bar is truthy ####In CS (existential operator): if foo?.bar # foo exists, and bar is truthy ####Default function parameters: function foobar(foo,bar) { if(foo == null) foo = "default" if(bar == null) bar = "shmefault"; // Go on... } ####In CS: foobar = (foo = "default", bar = "shmefault") -&gt; # Go on... ####(lack of) String interpolation in JS: string = "I feel that " + foo + " is better than " + bar + " for " + num + " reasons"; // or string = ["I feel that ", foo, " is better than ", bar, " for ", num, " reasons"].join(''); ####In CS: string = "I feel that #{foo} is better than #{bar} for #{num} reasons" 
That one actually makes sense. Math.sqrt(-1) != Infinity / Infinity. Both sides are NaN, however, neither is rational. The left side is imaginary, and the right is indeterminate. This is precisely why isNaN() exists.
It seems like it's a useful label to have for concision. What about it bothers you? Does the label "web developer" bother you? We could just describe them as "programmers who make web sites/apps".
Makes sense. But what about {} != {}
One question, when i use intellij and i edit a .js file, do i get the same features that webstorm has or is it a stripped down version?
Does Intellij Idea Ultimate have all the features that webstorm has or?
So what's ESLint? Magic?
IIRC the same features.
Take a look at traceur, that will allow you to use ES6 now. ES6 includes the language standard way of creating classes and modules so we can all move on to more important things.
It's a reference comparison. It's equivalent of new Object() != new Object(). Reference types typically compare memory addresses. Value types compare values. Object is a reference type, and you're comparing two distinct objects.
Missing Access Control Allow Origin is a CORS issue. You may not be able to circumvent it in a browser enviroment.
Brilliant. Thank you.
Now if you really want some JavaScript WTFiness, compare the outputs of []+[], []+{}, {}+[], and {}+{}.
Yes. Intellj Idea Ultimate is the canonical IDE and everything flows down from there. So Webstorm is the stripped down version (no PHP, Ruby, or Java).
So hardcore.
Get an SSD.
Chrome 33.0.1750.154 windows 7 Developer console is blocked by patatap.com How did they do it? Edit: to get to developers console just open it while the page is loading
thats only in the box set yo
no it's not, I got to 4096. I have an highscore of 60k, but unfortunately did not take a printscreen of the 4096 block 
Any of the dozens of others.
Have you read the stickied post at the top of this subreddit?
It's not really blocked, just the F12 key.
Ctrl-Shift-I / J works as well (Chrome)...
Agreed! One thing that should probably be mentioned about the equality operators is that with coffeescript you cannot compare values with type conversion (==, !=). CS compiles == to ===, which is a really great feature since you shouldn't really be doing it.
...or right click "Inspect element"
So? I can write my native apps in ASM because there's nothing you can't do with it. The point is that languages provide features and abstractions to make the life of a programmer easier.
[]+[] // "" [] get's converted to "" []+{} // "[object Object]" like before, [] goes to an empty string and so toString is called on {} as well {}+[] // 0 {} is interpreted as a code block rather than an object so it runs and has no output. That leaves +[] which converts empty array to number. {}+{} // NaN similar to above. {} is a code block and has no output so we're left with convering {} to a number which gives NaN There is always http://wtfjs.com/ for a lot more JS wtfery
Does this mean that I'm boned? What are my alternatives here?
No, my point is that it's static analysis. Which is the issue the parent was talking about.
http://andyhmltn.github.io/cherry-js/ - Voila! :)
This is the real thing: [WebTorrent](https://github.com/feross/webtorrent)
Yes sir/ma'am. Most of those fancy new shiny things that make developing nowadays so exciting are there.
Hey has this been a thing?
Not as good
Is this Eclipse behind the scenes?
This is pretty cool! How is it different from knockout.JS though? Also, entering special symbols into two-way binding kind if breaks it.
&gt;How is it different from knockout.JS though? Probably not an awful lot. I just tried to make the syntax as easy to understand as possible &gt;Also, entering special symbols into two-way binding kind if breaks it. Wow. Good catch! I'll fix that
Yeah, I've fixed that bug!
We found a plugin with most of the functionality we need. [wpDataTables](http://codecanyon.net/item/wpdatatables-responsive-tables-in-wordpress/3958969) lets us post the tables which can be edited, filtered, and sorted. We are populating a drop-down list populated by a php-sql call for selecting elements to be added to the scripts which works well enough for our requirements. Thanks for all the great suggestions!
If understand what you are trying to do you can just put the definition of function 2 inside function 1 (where it will have access to x) and make function 1 return function 2. then just pass one(val) to your handler. It's hard to be sure without seeing what you are trying to do though. 
It's that "polyglot" doesn't really define anything. It says you know multiple programming languages, which isn't very useful in and of itself. Even more so, I believe that knowing multiple programming languages is the norm for anyone with a good amount of experience in the field. It becomes redundant and, no offense, but I view the label as a crutch for developers who aren't sure where they fall, and need to prove themselves. "Web developer" is useful because it automatically tells us what technologies you are at least aware of, and where your work is focused. I liken someone labeling themselves as a "polyglot" to someone labeling themselves as "goth." Okay, we know you wear black. Now tell us about your personality, how you're engaged in that culture, and what it means to you. I would rather hear "I'm a fullstack developer," or "I'm a native app developer." These are much more succinct.
Wait, which one of those are javascript?
Those are nice features. People should learn JS first, then use CS. I'm sure many just learn CS without an understanding of what's happening behind the scenes.
How does Sublime compare to Webstorm as far as making you a better coder? I've been using Sublime because I haven't felt a need to buy Webstorm yet. With all the Sublime packages you can add to it, I wonder how much of what Webstorm can do Sublime can already do. 
Are the plugins free? 
TODO Still - build system &amp; auto updater 
It's JS blocking JS execution, if you have debugging tools it will never work. Look how FB blocked it and how to bypass it: http://stackoverflow.com/questions/21692646/how-does-facebook-disable-the-browsers-integrated-developer-tools
Doubtful you're that daft. Which one of those frameworks allow you to write your your game in JavaScript?
i think i paid something on the order of $20, possibly as part of an earth day or end of the mayan calendar promo. ifaict, that gives me access to any version released within a year of my purchase forever. i'm not planning on buying a new version unless a similar good price comes along you can also evaluate it for 30 days free, and every new beta release gives you another 30 days, so at times you can use it indefinitely without paying - i'd used it for 6 months before i finally bothered buying it (and i've barely used it since i actually paid for it)
It's just blocking F12, you can just open the console from the menu.
Have you tried [Sizzle](http://sizzlejs.com/)?
It's a complicated answer. I'll let you figure it out for yourself. Best of luck!
(I am the author of GNU ease.js.) [This is my reply copied from HN] Wow, quite the negative response here. That said, this is something I was wholly expecting from the JavaScript community, so I am not swayed; I'm merely providing something that I found to be useful in the hope that it is useful to others. So thank you to those who recognized that. I feel that many of the negative statements here could have been addressed if the posters had taken the time to understand why the project exists: http://www.gnu.org/software/easejs/manual/About.html The framework exists for those who wish to have the benefits of Classical OOP using JavaScript without the need for a compiler; it provides a standalone library for something many frameworks currently do, but do so incompletely: their own class systems. If there is a feature of ease.js that you do not like, you are not forced to use it; it simply generates prototypes. Language and paradigm flamewars will always exist, but let's be respectful of those who want to "program into" their language (as Steve McConnell put it). Note that GNU ease.js was created when Harmony was just barely getting off the ground, and it is still not released. Even after it is released, there will still be users who do not have the newest features. Part of the reason for GNU ease.js is to address the issue of consistency across all browsers. It works in IE 5.5 (although that wasn't intentional)---you don't have to worry about whether or not ES6 is supported. ES6 also doesn't address some concepts ease.js does. http://www.gnu.org/software/easejs/manual/Implementation-Details.html Let me be clear---I have a strong understanding of the prototypal model, and it does have its uses and elegance. For those who want some of the features of GNU ease.js without the framework itself, I provided both the above link and this paper which demonstrates how OOP is generally done in ECMAScript (and its problems): http://mikegerwitz.com/docs/coope.html GNU ease.js encapsulates those hacks. There's value in that alone. To answer some of the Harmony-related questions: here is a reply to a question I received from another GNU hacker: http://www.gnu.org/software/easejs/misc/easejs-harmony-reply.txt With regards to the licensing: RMS asked if I'd be willing relicense under the GPLv3+, because of their campaign against proprietary JavaScript. I am an avid free software activist; I hope that people will find GNU ease.js to be useful, but only if they are writing free software. http://www.gnu.org/software/easejs/whyfreejs.html
setInterval(function(){ beatIt(); },erryday);
&gt; What other language needs class builders ? none. Neither does Javascript. The Common Lisp Object System (CLOS) is a good example. You are ignoring the point of an abstraction: you are not supposed to worry about how it works. If there's a problem with the abstraction (e.g. a bug), then you have the same problem as any other type of abstraction and you have to either dig into it or have someone else do it for you. As far as not scaling, please elaborate. Consider checking the performance test cases and the implementation details that explain what ease.js is optimized for. When you consider all the other logic that goes into software---as is mentioned in the paper linked above as well---the performance impact of ease.js is insignificant; in the project for which I created ease.js at work, which uses hundreds of ease.js classes, ease.js is hard to find in the profiler. DOM, XHR, I/O, Databse, etc requests are the bottleneck, not your JIT-compiled JavaScript code. JavaScript is still an object-oriented language; you are creating those objects with or without ease.js. As far as your example goes: I doubt anyone will struggle to understand: Child = Parent.extend( ... ) // or Class( 'Child' ).extend( Parent, ... ) &gt; All your abstractions serve no purpose. The purpose is abstraction for precisely what you just demonstrated; you will eventually notice boilerplate code emerging once you try to handle anything more complicated. (If you don't consider that boilerplate as it is.) http://www.gnu.org/software/easejs/manual/Encapsulation-In-JavaScript.html http://www.gnu.org/software/easejs/manual/Hacking-Around-the-Issue-of-Encapsulation.html
This looks fun, however $objects is undefined. Did patatap update?
thank you for your contribution. it's clear that you have put a lot of work and research into the project. the js community can be very tribal in their **opinions**... not sure why that is, considering the next draft of ecmascript will include some of these ideas. i've always felt that doing anything substantial in js feels hack-ish, full of weird workarounds (you've outlined quite a few of them in your paper). if you've abstracted away some of these hacks, as someone coming from a classical oo background, i will play around with this in the coming weeks.
Cool! What about ZeptoJs? zeptojs.com
[Zepto?](http://zeptojs.com/)
I wouldn't put "polyglot" on a resume, but it has its place. If someone was telling you how their whole programming experience was in one language, you could reply "I'm a polyglot and *blah blah blah*". It's more succinct than "I can/do program in many different languages and *blah blah blah*". I agree that most devs will be polyglots, and that some people do use the term as a crutch. But that doesn't mean the term itself is worthless.
This is pretty awesome. You should check out [gibber](http://gibber.mat.ucsb.edu/), and /r/algorave
Ahh - crap. Sorry I have been very busy with work. Did you want to set it up?
Fun fact: Excel contains several context-sensitive grammars.
pata-pata-pata-pon
 var x; function one() { x = 'something'; } function two() { alert(x); }
yeah, i really like zepto, however this was more of a learning session for me, trying to understand how jQuery works under the hood.
I don't know. What happens now is the user opens the dropdown, selects a zip code, and the PDF for that zipcode opens up on the page. For example, D\45255.pdf. We want the same PDF to open up on the page when the user types in 45255 into a zip code textbox.
&gt; Zepto? Zepto is nice, but only IE 10+ support only is a show-stopper for most people. 
It has no type checking. It's still static analysis.
the value of the var gets defined through a function. And I already tried that way :P But thanks!
The S in fillStyle is a capital letter S. http://jsfiddle.net/6c7Rh/
Thanks everyone! I tried a few thing but stick with the window.var to make it a global variable!(?) Thanks! 
wow that simple. Thanks for taking the time to help :)
that's kinda annoyed me because I was using the suggested text in Sublime text 2.
It's nice to see them re-using the existing design from .NET instead of making something entirely new.
You are wrong, I demand that you delete your comment!
Some things I would find positive as an interviewer, in order of importance: - Communication (This is so important when most people in the industry talk/present themselves like praying mantises) - A well stocked github account - Knowledge of complex but important language quirks, in JS this would be things like: + Execution Context ('this' keyword) + Inheritance and general OO with JS - Good grasp of available tools. In JS this is a nightmare as there are 1000s. But at least know the big guys and why they are good: + How do you do builds + Tests + Modularisation + UI Templates + Web Frameworks + Web Toolkits (and why they differ from the frameworks) - Knowledge of classic dev literature + Fowler + Uncle Bob + Beck And beyond doing well in a tech test I would just talk to the person, are they clever, can they talk the talk, are they interested in programming (what do you think about functional languages...), etc. I place little value in knowledge of Google like interview questions about algorithms and maths. Under interview conditions these questions are unfair and are biased towards the person that most recently did that class in Uni. So I would not waste any time in this. However, in the future there is nothing wrong with doing a weekly Proj Euler question or 2 and keeping your algorithm chops tight. Its fun. Anyways, my 2 cents, Ive interviewed probably 100s of devs in my time.
Thanks for the info. It's $49 now; I wonder when the next $20 sale will come?
very cool but... seizure warning.
I've read javascript patterns before! I just plan to read it again. Looking through source code is a great idea, thanks!
Thanks for all this input! It's a big help.
lower the bpm then! :)
Webstorm's main benefit is that it provides first-class support for common technologies. It knows and understands many common technologies and idioms, and provides great code completion for them. Here's a list of some of the integrations that I use on a daily basis: - JSDoc - Webstorm recognizes JSDoc and gives better completion because of them - Grunt - If you use Grunt, it's nice to have it right there in the IDE - JSHint - The editor tells you where JSHint detects and error as you're writing code. Very useful - Handlebars - If you use Ember.js, the built-in Handlebars support is amazing. (And fear not, if you use Angular, they have first class support for that too.) The syntax-highlighting is pretty nice too. And really, the _only_ thing that was keeping me in Sublime Text (somewhat) was multiple cursors/selections. Luckily, they added those in Webstorm 8. The only reason I open Sublime Text now is to edit simple text files.
Looks like mine is working fine, but the only difference would be ST2 vs. ST3. [image](https://www.dropbox.com/s/8m10cnlk9ly2nbk/Screenshot%202014-03-27%2017.33.03.png) [Link To Installed Packages](http://www.reddit.com/r/web_design/comments/21fjci/what_are_your_essential_development_tools/cgd40af)
try /r/java
&gt; Nothing works yet For other browser plugins written in js: [JSTorrent](http://jstorrent.com/), [BTApp](http://btappjs.com/).
Why? because it allows you to review the kind of code the candidate writes? Because it shows their level interest in programming and what kind/difficulty of projects they like to play around in? Shows what programming languages the candidate knows and to what degree? 
Will do, thank you!
It tells me that my chrome on android supports it but it doesn't vibrate at all?
Have you considered connecting to an IRC server? https://github.com/martynsmith/node-irc
oh god
Understanding jQuery is a noble goal, though if you're going to drop IE8 + 9 (which is something I applaud, btw), it makes more sense to drop jQuery as much as you possibly can and switch to programming using the modern DOM. These jsperf numbers show just how much modern JS blows jQuery's performance out of the water: http://jsperf.com/getelementbyid-vs-queryselector/28
As I said, I don't wish to connect/rely to/on 3rd parties. So i'd rather not. 
I would hope he has as he was messing around with jQuery which uses Sizzle.
This looks fantastic. I've had such a struggle dealing with trying to load results from async callbacks into iterative code in my node.js apps. This looks like a way better approach than the scoping nightmares my code usually becomes.
What if your time is spent almost entirely in private repos?
Hold on while I inform my boss so he can tell the client we don't support IE8 now.... /s
But extended support on Windows 7 doesn't end until *2020*. So there's bound to be some company that will still be using it. And that's the company that has to be catered for as marketing just landed a big contract...
To be fair you can write IE version specific libraries catering to their own particular niggles and serve them up using conditional comments but that way madness lies, hence jQuery in the first place. Better to use latest methods and shim where necessary. For example, document.querySelector(All) is easily shimmed by including Sizzle and creating the method wrappers. Or even, if you're making a third party component, you can check if jQuery is used on the parent page and access the Sizzle engine from there in the same way.
Blocklist yet?
If you only use the selector for id matching then yes its silly... but thats about 1 of hundreds of ways I use it. How about compare it vs every type of selector jquery offers instead of the easiest.
Let's just say it's impractical for a beginner to implement a chat client without any 3rd party libraries. Be realistic. I know it's for learning purposes, but real time communication is not something you can master in a tutorial or two if you've never touched server-side stuff before. Start with Node.js + socket.io, and if you want to get fancy, use the server for handshaking only and do the chat via WebRTC.
Exactly. It's a balancing act really, and these days I feel like the balance has shifted to favouring shims + pure JS as much as possible. Trying to shim up code to get it working even 2 years back, when IE6 + 7 were possibilities, was damn near impossible. $ has its place, but it's more important than ever to be a javascript developer, not just a $ developer.
I recommend you sign up for http://stackoverflow.com/
I cannot wait until 2025 when all browsers support ES7. /s
*dear diary, I think I should start a project that will convert humans into Google before they consume my products, I think this will solve a lot of problems.*
Yup. Anders Hejlsberg (language designer of C#) is a beast, and has a talent for building languages that are both good for real world productivity along with integrating some more "cutting edge" language features and idioms. 
Maybe it would be easier to implement a chat room first (all users on page can write and read messages on a single view) to get you working with the server side. I was also planning to create a chat client at first, but found this project a little easier (and I'm in no hurry so it may not work for you). Problem lies in connecting the two clients (their IP addresses - as far as I know the communication is the standard TCP/IP protocol stack) and creating and maintaining a persistent HTTP connection between them. I am yet to implement it myself so I don't know the best approach. 
It sounds like you simply want to hire early 20's kids who have no concept of work/life balance. I love to develop outside of work, but I'm not in the open source community simply because I don't have the time. Using that as a measure of "skill" is meaningless. 
&gt; Maybe it would be easier to implement a chat room first (all users on page can write and read messages on a single view) to get you working with the server side. I guess that's a good way to start. Tips on how/where to start more exactly? 
Because not every developer has an interest in open source development. It can be used as a positive metric, but by no means should you discount any interviewer simply because they don't have anything on Github.
I wish there was a bower etc version of jquery that works in modules. you'd configure the modules you want and on built it compiles only the ones you actually use.
This project is not about avoiding learning any part of JavaScript; it's about providing a comfortable paradigm for those who wish to have it. Whether or not you learn the details of JavaScript is an entirely separate matter. I apply the same argument to jQuery---I believe more people should research the DOM API. But jQuery is still a useful abstraction to many. Not all.
For these kinds of libraries, I find it more helpful to mention what you've dropped rather than what you've kept.
On my system, even the slowest selector there (xpath) runs in *two tenths of a millisecond*. How many of those are you doing per second? Is selection the bottleneck in your web pages or apps? It's pretty unlikely. Microbenchmarks lead you to focus on things that are unimportant.
Unfortunately in interviews you have to put something up. If you cannot prove your worth you will lose to someone who does. This is not a judgement on morality or ethics. Simply the way it is. Now if you love to develop outside of work why not have that code on github? If the code is private, i.e. building apps to make money on the side, then those apps become something you can put up at an interview. Again, it all comes down to being able to prove your worth in an hour or 2. Hard thing to do, github, stackoverflow, etc. Are good ways to do this.
This might provide you with some help. Basically you will want to create the event, trigger, and then attach a listener for the event. https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
I think this is my favorite jQuery plugin ever.
If you want to stick with using JavaScript the whole way, instead of getting into PHP or Rails, [nodeJS](http://www.nodejs.org) (with [socket.io](http://socket.io/)) may be something you want to look into! In fact, [many](http://arminboss.de/blog/2013/tutorial-how-to-create-a-basic-chat-with-node-js/) [beginner](http://tutorialzine.com/2014/03/nodejs-private-webchat/) [nodeJS/socket.io](http://code.tutsplus.com/tutorials/real-time-chat-with-nodejs-socketio-and-expressjs--net-31708) tutorials will take you through implementing a real-time chatroom service!
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
Any thoughts on why I'd want to use modules instead of just splitting everything up by section, liked mentioned in the OP's article, but not using modules? I'm referring to the organization as suggested here: https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub
Along the lines of what rooktakesqueen was saying, you can do: function one() { x = "foobar"; return function() { two(x); } } function two(x) { alert(x); } button.onclick = one(); 
Both recommended grouping by function instead of grouping by type. One calls it modules, the other calls it sections. You should just call it function groups. 
I really dislike Angular's own interpretation of modules that differs from everything else you see in the js community (CommonJS, requirejs, etc)
Can you expand on how you think they are less useful?
Well, for one; good luck publishing an angular module on npm. The interop story of angular modules and every other module system is pretty much non-existant which puts you at an enormous disadvantage if you plan on consuming and sharing modules. Angular modules are like the DeSean Jackson of the js world, they'll have difficulty integrating anywhere really. 
How good are you with oop? Have you ever seen ExtJS, great documentation and very robust, it's just on the client side but you can use java on the backend if you want
I would check out [Secrets of the JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_7?ie=UTF8&amp;qid=1395979998&amp;sr=8-7&amp;keywords=javascript) It's a great book if you are coming from a different programming language to JavaScript. The syntax of JavaScript may feel familiar but don't be fooled. Javascript has many different quirks, that you should wrap your head around in order to write "good" JavaScript.
worked for me 
Your script could fetch jQuery from the Google (or other) CDN before continuing. This is how a lot of bookmarklets work. Take a look at the answers to [this question](http://stackoverflow.com/questions/8578617/inject-a-script-tag-with-remote-src-and-wait-for-it-to-execute) to see how it's done. Your own code would go inside the onload function.