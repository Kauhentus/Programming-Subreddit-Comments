You could say each answer has a value. eg. Answer-1 = 1, Answer-2 = 2, Answer-3 = 4. Then you can say if(sum = 1) THEN.... else if(sum=3) THEN ... so you only have a maximum of 5 if and it is not very confusing. Kind of like the linux right system
oh. yeah.. that's a good idea actually... I think. I'm not sure how to detect if the custom protocol is registered though.
https://i.imgur.com/uR4WuQ0.gif
This article is a shitshow. The demonstrated way of inheritance is not prototype based, it's constructor chain inheritance. It also fails to mention the most basic feature of [Class].prototype - that objects created with new [Class]() will have their prototype (the one the non-standard __proto__ field exposes) set as [Class].prototype, meaning all the fields defined there will exist on all objects. "True" prototypal inheritance would be setting the __proto__ of Parrot.prototype to Bird.prototype using setPrototypeOf and getPrototypeOf. The author knows shit about prototypal inheritance. I also don't know shit about it, and even I can see that OP is bullshitting.
"this" is annoying to read
"this" is not a bug, "this" is a feature :P
calm down
LANGUAGES.PROGRAMMING.JAVA !== LANGUAGES.PROGRAMMING.JAVASCRIPT. Now just wrap it in an isEqual function and parameterize the language constants.
Okay. I just hate self-important asswads who stroke their own ego by writing "guides" about subjects they barely know about, misleading innocent people in the process.
In agreement with /u/csorfab, this is not good. The thumbnail should be a hint, where it looks like `Crane.prototype` is being represented as a function - which it's not. Not long after it says: &gt; "This dynamic between Crane.prototype.constructor and Crane.constructor is what enables prototype inheritance at molecular level." Which is also not true. Prototypes enable prototype inheritance (I know, shocking!), not constructor references. In fact the `constructor` property itself only exists thanks to inheritance as it is an automatic property given to prototype objects when they're created. You could delete this or assign it an incorrect value (which often happened in ES5 and below approaches to setting up inheritance) and it would not affect the inheritance of your classes/objects.
I don't need to control runtime to have a time frame of when you've used the function that relies on the faulty entropy system.
"this" is a string.
Can you recommend a better resource?
What the actual good early morning fuck is this article about? It's just a list of JS lingo mixed with regular words. There's not even a point to it. Nowhere in this post did he say anything about javascript trying to be java, and he closes with it? He didn't make a single point.
This is lame af
Sure, try Javascript: The good parts. Chapter 5 explains the different types of inheritance pretty well. But I would say, with ES6 and TypeScript becoming commonplace, you don't really need to know about prototypes much.
Yes soon as possible. Thanks for your feedback &amp;#x200B;
Don't need anymore of these low effort duplicated articles on this sub.
That's an interesting approach. Question-1 has 5 possible answers, question-3 and question-4 have 3. The total combinations are 45. Trying to see if it's workable.
However more calm you are more people will take into account your point.
http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition/#prototype
Are you suggesting that getBoundingClientRect leads to performance issues that are otherwise avoided by using elem.offsetTop? More specifically, if there is any such difference is it at all significant? I'm not aware of this being the case but I could be wrong. They both cause a reflow: https://gist.github.com/paulirish/5d52fb081b3570c81e3a 
Interesting, is this because headers are generally smaller in size therefore you can take action based on header before the body comes?
Somehow the idea of "PM Me Asian Boobs" favoriting a psych study about staring into a woman's **eyes** amuses me ;) But yes I love that study too and 100% agree.
Another (slightly more advanced) solution that springs to mind are bitmasks. [Here's](https://blog.rinatussenov.com/juggling-bits-in-javascript-bitmasks-128ad5f31bed) a decent usage example - in your case, you'd define the recommendations (masks) in terms of the answers (flags).
My God, how many of these bushes?üò∂
You can use the JavaScript API to run it from your own Node script like this: https://github.com/bitovi/velocirender#velocirenderserve I'm going to be writing some articles about integration with various cloud platforms, I'll add GCP to my list.
Thanks friend. I will take a look. Much appreciated.
The app is utilizing fetch()'s ability to stream back responses. This article talks about it: https://jakearchibald.com/2015/thats-so-fetch/#streams Streaming responses allows you to render lists much faster because you don't have to wait on the database to get every record before you start rendering the first. This app is throttled to simulate a 3G connection. You see bigger wins using this technique the slower the connection is, so this is a great tool for reaching parts of the world with slower internet connections. As you see in the demos, you're getting &gt;500ms faster when using Velocirender.
Lol, look at this guy: https://www.linkedin.com/in/lonnie-best-02782813
Curious to know, who would someone want to use this rather than the ES6 &lt;class&gt; feature?
You did the absolutely right thing. That has becoming a problem and more often recently.
That's what I'd assume, in addition to headers being sent _first_.
Hi /u/ste-f, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/grkuntzmd, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; You became harder to talk to, blocking requests and blaming [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing). You've been doing this for a decade? CORS is javascript? &amp;#x200B;
You shouldn't be creating inheritance chains like these in the first place at all, except in very, very rare and advanced use-cases like library/engine optimizations.
what's not to like?
Hi /u/voidupdate, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Why? There are better alternatives now. Like Cypress.
The point isn't the existence of the functionality but rather the nice syntax of the object literal.
Static typing means "checks type at runtime". TS doesn't have a runtime.
Haha not really, reason is because javascript had more subscribers and r/java is not really a big one :)
Can you explain?
Just to add to this, you don't need to know about prototypal inheritance because to inherit you can use the extends keyword now.
I'm happy I can go to the comments and screen weather an article will be worth my time and not misleading or confusing. Despite the tone I am super thankful this guy commented such a clarifying comment.
No, the only form software should take is its source. Hiding the source is the root of the evil they are talking about 
I don't know where you got this idea but it's wrong. Static typing means the types are checked at ~compile~ time. A statically typed language can use type erasure or just not check types at runtime. Checking types at runtime would be insane, you would end up with significantly large source code. also your comment is just as wrong for most languages: &gt; Static typing means "checks type at runtime". C++ doesn't have a runtime.
Yeah the only programming cert I'm aware of that I think would carry any weight would be Oracle's Java cert.. not sure what it's called now but it used to be SCJP.
My post had over 20 upvotes, nobody complained, and people were happily discussing in the comments. What's wrong with that? And it's not exactly a *"how do I get a random number"* newbie question but rather meta discussion?
In my experience it makes it easier to implement private variables and methods that can be inherited by different objects. It‚Äôs good for developing core data structures that need to be shared, and enabling child objects to interact with that data in a ‚Äúsafe‚Äù way (i.e. through predefined methods vs. direct assignment operators). What‚Äôs nice is that child objects can easily inherit references to a single instance of a common parent‚Äôs data structure, which essentially works like a top-level state that all children have access to. With ES6 classes that‚Äôs a bit trickier to handle, It‚Äôs also not always intuitive trying to get prototypal inheritance chains to play nicely with class inheritance chains, if you want one to inherit from the other.
This is a major issue in Medium. I don‚Äôt trust anything I read there. 
Once there was a developer that thought he could solve a problem using inheritance instead of composition. Now he has two problems.
I don't think there is a compelling reason (unless you were in an environment or app that did not support that feature).
I might have expressed my thoughts a little bit wrong: they both can cause serious issues if used excessively or in a wrong way. I just added a small reminder that they need to be used with caution. Context: As a consultant I went through various companies with various projects (starting from 30k pixels height pages (infographics and case studies) and going to banking enterprise SPAs). Most of them used one of the two completely wrong at least somewhere (a box that had to match the height of another box or even complex animations). I saw performance issues caused by such approaches. Indeed, it‚Äôs not every occurrence caused problems but my advice is to better avoid using it if you can.
true Java is awful, schools should be teaching JavaScript
Here's the game it's playing: https://github.com/victorqribeiro/carGame
The taste and smell.
&gt; What's wrong with that? It doesn't belong, that's what. By allowing yours to stay, others will see it and post similar questions. 
Two great tastes! But seriously, these are two technologies I'm very interested in.
hope they like it
"Don't use await at all" is good advice in general. 
Sorry to hear that. I can only assure you that it wasn't meant to be duplicate of any kind. Also, the thumbnail is just illustrative, which anyway proves you're right. Anyway, I'll try to do better next time.
You want NeDB (which PAEZ\_ linked to). It's API is compatible with MongoDB, it's easy to use, and a migration path to move your data to MongoDB is provided. I just used it as the backing store for a GraphQL based app I'm working on and it was very simple to work with.
Just a wee bit of vendor lock in. /s Go ahead, build your app on Firebase. What's your plan for if the price gets jacked up? Or if Google decides they're done running that service and shut it down? Cause that never happens, especially with Google's services. What's your like-for-like options? Or are you stuck re-writing pretty much your entire application? Let's hope you can at least get your data out.
Shall we play a game?
This is the most vapid, inconsequential rubbish I have ever had the misfortune of reading. Hackernoon and Medium should be nuked from existence.
&gt;It‚Äôs also not always intuitive trying to get prototypal inheritance chains to play nicely with class inheritance chains, if you want one to inherit from the other. How so? I'll confess I'm not immediately familiar with inheritance in ES6 classes.
Looks really cool. Could you maybe explain the example in the readme in more detail? I know literally nothing about path tracing and don't understand how that code could result in a cube 
Haha, no
Affiliate advertising.
Hi /u/jvveen, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
crashed on score 3
Old jQuery and Backbone plugins from 2013-ish. (totally not speaking from current experience, why are you looking at me that way?)
Haha, some times it does that. I left a unwanted entry on the training date set, I guess.
Imo not a good article, here's what you really do. Never handle exceptions unless you know how to handle it. Let it bubble up till it's properly handled. This means you should have a top level error handler, that's how RoR works. Your app should crash for unhandled exceptions. Also you can declare custom errors by extending Error.
Lazlo DB : Portable, compact &amp; serverless database built using Node JS &amp; MessagePack &amp;#x200B; Check out lazlo db on github ([https://github.com/zaygozi/lazlodb](https://github.com/zaygozi/lazlodb)). I am building a one of a kind serverless database mainly targeted towards portable devices. It helps to manage a database in the device storage or any kind of writable storage. It also has a library for node ([https://github.com/zaygozi/lazlo-node](https://github.com/zaygozi/lazlo-node)). 
blazing fast has been used for so long now that I feel we need a new term. 
Me too. And is there an equivalent thing I can run locally over mongo maybe? 
Not at all. The article is fine. If you work with enough server side development you quickly see type checking on errors is important because there's about 4 useful error codes for 400 and you have to implement every single one on every useful API you consume. What would be nice is if Javascript implemented native types to help you handle the errors appropriately. I personally think the best way to fix this is ADTs on pattern matched handler functions a la Haskell, but I believe this is an open issue in even type script to implement something that doesn't mean you have case statements.
You say "lmao" and "shit", "gay", "gtfo", "bro", "Europeans are dumb as fuck", but you are from Budapest yourself, the tenth-largest city in the European Union. I looked at your other posts, and all of your comments have this self-righteous tone about them, but you don't really *say anything that has any substance. Now I don't know anything about you, the author of this article or "prototype". But any complex subject naturally has multiple interpretation. You sound so angry and go so far out of your way, to attack someone on a personal level, making a point that they and their work is worthless. Exactly what an infantile narcissist does: making other people seem small to feel good about oneself. You just seem like the type of a person who *enjoys tearing other people down by narrowing down on meaningless details (constructor, __proto__, etc.). You say the author doesn't know "shit" about it. But because you don't know "much" about it, somehow you come out a winner, justified? Maybe you are the one who doesn't know shit, and the author who poured hard work into an article accepted by Medium staff to a promoted category, doesn't know much? Also, you do know that there is an "edit" button and anyone can improve their work. If you are so well versed in JavaScript, why is it so difficult to try to help improve the article, rather than mindlessly bash someone you don't even know anything about? It's easy to be all tough online with an anonymous username, but if you said anything like this to people in person, I bet you probably wouldn't get home that day. 
Because I can write bad code so easily ):
If you handle exceptions at every single call then you will have a lot of duplicated code. Again you can extend the Error class. If add a error handler to your http library to determine the error type you can throw that specific exception rather than throwing a generic Error. If your server responds 400 then either A. The implementation is wrong B. If it's from user input the code that is concerned with user input should handle the exception, not everything in between.
To give you a serious answer, I found pre-firestore firebase difficult to use as you were limited to a single field in the where clause. It felt like an awkward pubsub/mongo mashup. I'm not sure how people actually used it. With firestore, it looks much more attractive, but I haven't revisited it.
Thank you this really help.
Thank you next
&gt; If you handle exceptions at every single call then you will have a lot of duplicated code. This assumes we don't have unique error handling for each API consumer. I will say as a front end engineer, most of the time API code handling is unique, and in very few cases you handle in exactly the same way. I have a consumer of one API. I can receive anything from a 403, 404, 405, 406, etc. While I agree some calls can have a default resolution, if I'm writing this API chances are I have to have a unique handler for each type of error. Regardless if I use the generic error or a wrapper, I still have to branch the code for a unique handler code section to resolve the error. To me that was the point of the article, that error handling is janky because there's no nice way to branch errors in JS besides case statements, or if statements. I'm saying there needs to be a clear pattern matching system in JS. Personally I don't care if you type check on the error or check the response code by string, I just don't want deep nested branch blocks, which the article alluded to as annoying.
Yes I agree. But he could have worded it in a more constructive way.
I was thrown a bit too - I was expecting to see a list of vertices but it's voxel based. So apparently in this library, setting the position of a voxel is enough to show _something_ on screen.
Can‚Äôt recommend this book enough. 
Hi r/javascript üëã &amp;#x200B; A few months ago I launched `senv` \- an open source tool for encrypting and decrypting .env files. Our team uses it to securely manage and share secrets in git. &amp;#x200B; Everyone knows it's bad practice to store plaintext secrets in git. However, the alternatives are often unnecessarily complex for small teams (e.g. Hashicorp Vault), or are a pain to manage (e.g. passing around .env files among developers via slack or email ü§Æ). &amp;#x200B; This tool makes sharing secrets super easy. Since your encrypted .env files are stored in git, any changes can be clearly seen during code review. It also makes passing secrets to your CI system a breeze (no more broken builds because you forgot to update the environment variables). &amp;#x200B; Hope it helps someone else out üòä
It's not. I hate JavaScript - it's a garbage language for garbage people. Joking aside, there are a lot of things I don't like about JavaScript, but it is a very powerful language - it's just very easy to shoot yourself in the foot. TypeScript is probably the only reason I've kept from losing my mind completely.
Yes, don't use angular
"Accessible" and "3D rendering" don't go well together in the same sentence. A couple years ago, I used three.js with decent success to implement a simple 3D object viewer with options to configure the object. But three.js was (at least at the time) pretty low-level, meaning you have to have a good understanding of 3D rendering in order to get anything worthwhile done. A better route would probably be to use something like Unity, which has an option for compiling into a WebGL application that can be run in the browser.
GLOBAL THERMONUCLEAR WAR
It's also worth noting that if you're using Redux, creating memoized selectors with the reselect library makes it really easy to prevent unnecessary re-renders.
How about blazing lent?
I saw [this video](https://www.youtube.com/watch?v=PGtv-dBi2wE) recently on path tracing, it answers a lot of questions. It looks like Vixel is a high-level JS wrapper for a path-traced scene consisting of voxels. So you can basically paint in 3D with a "setPixel" function. This looks really cool but could benefit from a live demo. 
I was JUST looking for something like this. Thanks, I'll check it out.
Well said, these guys are like God level coders lmao
https://www.youtube.com/watch?v=mk7VWcuVOf0
'awesome'['awesome'.length -1]
function stringLastIndexOf(string, s){ last = 0; for (var i=0; i&lt;string.length; i++){ if (string[i]===s){ last = i; } } return last; } stringLastIndexOf('awesome', 'e')
&gt;function stringLastIndexOf(string, s){ &gt; &gt;last = -1; &gt; &gt;for (var i=0; i&lt;string.length; i++){ &gt; &gt;if (string\[i\]===s){ &gt; &gt;last = i; &gt; &gt;} &gt; &gt;} &gt; &gt;return last; &gt; &gt;} &gt; &gt;stringLastIndexOf('awesome', 'e') appreciate it man.
Sweet, hope it works well for you!
I was shocked to realize that Google gives me many results from Medium when it comes to web tech... And the writing quality is often poor
Demos?
[https://groups.google.com/forum/#!topic/hackbar/b31xFaRoULw](https://groups.google.com/forum/#!topic/hackbar/b31xFaRoULw)
I'm a native English speaker and I agree it's batshit crazy, but I love it like I do JavaScript!
At least this hasn't turned into an OO v FP debate ;)
What would you say is the most important resource a JS dev needs to read and fully understand.
[The driver](https://i.giphy.com/media/9CKW59jYeaSR2/giphy.gif)
Rust is my favorite, but it's not ubiquitous. JS actually sucks quite a bit, but it's everywhere so we don't have a choice. 
Can you imagine building a large scale JS application, that talks to several dozen APIs, without any type checking of the data being passed around? It's actually also useful for typechecking React proptypes and that kind of stuff. It doesn't really change how you writing your JS, just provides a bunch of nice type stuff
Are you serious vue and react just got hooks? This shit was common years ago in other frameworks.
RTX compatibility?
 function stringLastIndexOf(string, s) { for (let i = string.length - 1; i &gt;= 0; i--) { if (string[i] === 's') { return i; } } return -1; } Still O(N) solution, but faster than going from start of string to the end. &amp;#x200B;
I know this project doesn't require any backend functionality offered by Node.js, however there a few libraries that exist on npm that could help with your code style. Check out https://github.com/eslint/eslint. Most editors have a plugin that allows you format your .js files upon save. It will save you a lot of time in the long run and it will keep your code style consistent. Also, take advantage of the capabilities provided by the markdown language so you can add more pizzaz to your README. Below are a few links to help spin you up. https://help.github.com/articles/basic-writing-and-formatting-syntax/ https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Keep up the good work!
&gt;Just a friendly reminder: getBoundingClientRect can lead to some serious performance issues. The same applies to offsets :). What alternatives can you recommend?
I do want to eventually add a backend to and localStorage is just a temporary work around. 
ü§î I'm curious what you're thinking of.
[https://stackoverflow.com/questions/39078206/add-blob-to-dropzone-js-queue-instead-of-file](https://stackoverflow.com/questions/39078206/add-blob-to-dropzone-js-queue-instead-of-file) ?
If you‚Äôre using webpack, you can add this plugin to your config. It will give you a visual footprint representation of your bundles and you can try to trim down from there. Chances are you won‚Äôt be able to remove parts of angular though. https://www.npmjs.com/package/webpack-bundle-analyzer 
First sentence of the article clears that up
Your first mistake is assuming there was thought behind this comment.
well the response here including yours have made me want to look into it for good. The code that i have seen used things like interfaces etc which just reminds me of java. Recently while trying to debug a React application which used TS it got really frustrating because TS wont compile your little JS monkey patching code or little JS hacks you need for debugging sometimes. I guess you could temporarily disable TS for such debugging. Even Ryan Dhal speaks highly of TS so i am aware it must have some value but so far JAVA like features have made me out it off. Going to look into it in detail, thanks!
Extends is equivalent to setPrototypeOf, then? Just want to confirm
Yeah maybe, but what if it were a SQLite database instead? Faster file searching, deleting records would be instant, compress it for size, all in one file. It would just need native support from node.js and some simple tooling to make it more useful.
Yeah it‚Äôs a privilege to spend 20 minutes copying 40,000 files across my network to start a deployment. To eat up huge amounts of resources tar‚Äôing and untar‚Äôung them. From an ops perspective this is a nightmare to deal with. Network and disk contention is a real issue from this. It‚Äôs a mess. Also, 200mb node_modules is tiny. We have 1GB and above.
Vue/nuxt is more popular at this point than the react next, but the time box approach is interesting
More or less I think, but if I remember right setPrototypeOf deals with an instance of an object to change it's prototype which would make it inherit another objects functions, but extends deals with the definition of a class so all created object will have that inheritance.
Every time I read articles like this about Vue I realize another incredible thing I could be doing but don't. Every time I need to do something I don't know how to do in Vue and I reach into their toolbox there is a solution waiting for me that just simply makes sense. Thats what I love about Vue. I recently convinced our dev team to start using Vue and it has been a game changer. Not only are we building UI's somewhat faster but our UI's are just so much more stable. Fewer bugs are being written and developers are happy. 
That looks interresting. As someone who has no experience with 3D graphics, webgl and shaders, this might allow me to actually make some simpler 3D scene. &amp;#x200B; There is some stuff I don't really get from the example, like how was the background color/material and sunlight color and position determined (perhaps some default values?), or what exactly "1024 path traced samples per pixel" means (I guess the bigger the number the more accurate the light rendering?), but I'm sure if I decide to try this out I'll get the hang of it.
I like all the tech you mention assuming you wrote this but I am really confused about the 100 days of code part. Do people actually code for 100 days straight? That doesn‚Äôt seem like a good idea at all.
Yeah you know I thought the first half or so of this was so spot on, but then it gets a little dicey only because there are so many options. I myself use AngularJS only because its what my company uses. But I think the spirit of the article is right on.
I didn't write the article, but funny you should mention that about the #100daysofcode. I'm doing it but limited to weekdays..... my weekends are sacred. Perfectly lasts 20 weeks that way.
Are you somewhat referring to lifecycle hooks in Angular? Lol
Neat! I'm working on a little game right now, and I'm using look-up tables for the trig functions so I can speed up my collisions. That's not really possible for square roots though. Would this library be a good alternative for those?
Could we get an article like this for Vue, which doesn't have the prerequisite of knowing and mixing Vue and React problems and conventions. Just... Here's Vue. Here's a problem case with Mixins. Here's how hooks solve it. ... in Vue.
Also I find I get the most out of Javascript when I just avoid OOP altogether. 
Yea I have been moving in that direction especially with the onset on React hooks.
What'd y'all use before Vue?
There's no way to fully protect your library, as anyone loading the page can access the code. Really, all you can do is make it harder to copy: * Require an API key to load the library (like you mentioned). Instead of storing the key in the backend, what I would do is include the key in the frontend request, and check the referrer header on your server to see what page the script is being loaded from. This should be enough to prevent people from directly linking to your script on their page. * Even if you prevent direct links, someone could still copy-paste your script into a new file and re-host it on their own server. You can't completely prevent this, but you can help reduce its impact by minifying and obfuscating your script. There are a lot of different libraries to do this ([example](https://github.com/mishoo/UglifyJS2)). This should help make it harder for someone to figure out how your code works or modify it. Lastly, depending on what your library does, you may consider running parts of it on a server instead. For example, if you have some algorithm you don't want anyone to copy, it would be better to collect the input data on the frontend, and make a network request to a server that does the actual calculations and returns the result.
I‚Äôm a little slow, but what is a VSCode task? 
&gt; anyone who is not a native english speaker thinks english is a shit language This isn't remotely true.
It is impossible. That won't protect anything.
Thanks a lot for your quick response. I just come across this tool: [https://obfuscator.io/](https://obfuscator.io/) I tried Domain lock and compact code options. But it doesn't work for my library. The obfuscatored code cannot run in Chrome. I am actually just interested in domain lock. Do you any other tool which can perform domain lock? Also, you mentioned that I can save the key in JS and send to my server for verification. Do you know any software which can help me to achieve this? If I design myself, I don't know the best key length and any other information I should send to my server. Should my server just return "True" or "False"? Or, should my server also return other information to my JS library? &amp;#x200B; Thanks a lot!
They're Visual Studio Code specific configurations that allow the editor to integrate with external tooling, you can read the in-depth here: [https://code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)
Woah, you copy them across? What about depending on package-lock.json and installing stuff where needed?
Is it just me or do hooks solve a very narrow problem with current mixins? I'm not bashing hooks or anything, I just don't feel very excited about this. The React community acted like this was the next coming of Jesus.... But they don't have anything like mixins. Is anyone who is using Vue super excited about this? If so please share your joy with me and help me understand.
Hooks are only exciting because React is a hot mess of competing patterns and excessive boilerplate code. Vue has no need for him.
Why not bundle it then?
It‚Äôs not worth mentioning if you don‚Äôt blatantly show how much better it is than react though. It‚Äôs like going to a concert and taking no snaps... Why even waste your time?
&gt; millions of man hours that we programmers put into it I'm not sure Jon Schlinkert invests more than a couple of minutes in his trivial garbage libs that end up in every dependency tree.
I was extremely interested until medium's javascript and my dark mode plugin couldn't get along. Nothing is worth that hurdle.
Because, it has features of (dynamic, duck-typed, OOP, async) programming. That's why It's my favourite!
So did you start doing it his way after literally everyone in this thread preferred the refactor?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
React had mixin actually, but those were deprecated years ago
This is where I point out that even extremely commercial libraries, such as those running Microsoft and Oracle websites, are easily accessed in the client. I'd urge you to consider this use case. Noone is likely to rip off your library if it's not published with a build environment and documented for use.
&gt; Should my server just return "True" or "False"? Which would take all of three seconds for me to change a "false" to a "true" if I wanted to pirate this library.
I hope I can remember to have a look at this when I get back to a PC.work in windows? Or with wsl?
It's entirely plausible I've missed something here but: const iv = Buffer.from(hmac.slice(0, 32), 'hex'); OK, so `iv` is set once, based on an HMAC. for (const variableName in envVariables) { envVariables[variableName] = await encryptString(value, key, iv, variableName); OK so the encryption is called in a loop, with the same iv. Here's the problem: const ENCRYPTION_ALGORITHM = 'aes-256-ctr'; Reusing an IV, particularly in ctr mode, is a catastrophic crypto failure. 
They switched from Hooks.
Yarn Plug 'n Play or NPM Tink both are being designed to try to solve this problem in various ways, by removing the need to actually extract all those hundreds of packages and tens of thousands of files to disk. I have not actually had a chance to play with either of those yet myself. Anyone else have some feedback to report on them?
Before that, Context.
A voxel is basically a three-dimensional version of a pixel. If you render a single pixel on a screen, you‚Äôll see a square. If you render a voxel, you‚Äôll get a cube. In the example, the constructor takes in width, height and depth parameters that determine the size of the voxel. The set method determines the voxel‚Äôs position in screen coordinate space (in the example, 0/0/0 or the center of the screen) and takes an RGB value to determine the voxel‚Äôs color. The camera method sets up a camera for the scene and the sample method determines the number of rays virtually sent out from the camera and used in the algorithm to determine how to light the scene. My understanding is that path tracing is a bit like a souped up ray tracing. Traditional graphics use a single point for a camera and send out one ray that moves until it hits an element of the scene and this is used to determine lighting. Path tracing sends out many rays and uses a camera with a size that the rays eventually bounce back to in order to determine lighting. Path tracing produces more realistic lighting but it‚Äôs much more resource intensive. TLDR; a voxel is a cube by default so the example just positions it in the middle of the screen, sets a color and sets up the camera
There's a million reasons this business model died in the early 2000's. It doesn't work, people will pirate it anyway despite your best efforts, and those who don't will find someone giving away what you're trying to license, for free. Your competitors will be making subscription sales not on the software key itself, but on peripheral services like human support, cloud computing power, and services hidden behind an API. So I summary, if you intend to make money on it, just don't publish and sell the software. Publish the API and sell access tokens to your service that implements that API.
Just standard JS with jQuery. It's an internal PHP monolithic app that we are currently breaking into micro services as time permits. We've mandated that all new features use VUE whether it be it's own microservice or a Vue instance for the controller. It has been flexible enough to handle our needs and Devs of all ranges of experience have picked it up quickly.
Ah now it makes sense. Somehow the word voxel totally didn't enter my mind. Should've guessed what it meant from all the voxel based games like Minecraft. Thanks, this helped a lot!
OTOH, my biggest issue with npm isn't the size, it's the combination of of two things: 1. The node\_modules folder location makes file operations in that folder annoying. Ever try to just make a quick copy of a repo on a flash drive? Delete a repo? Store a repo on OneDrive or a network folder? (Yeah, that last one sounds dumb, but with companies forcing use of cloud drives for all work-related files, it's annoying to have to explain to IT why doing so is a Very Bad Idea (TM).). 2. Every repo needing its own node\_modules folder with largely the same stuff, so every time I upgrade my apps, I have to wait on each one to npm update each package over the wire. Both for work and for personal projects, I may have half a dozen or more active repos that I'm working on, and I try to keep my environments for all of them fairly up to date. But yeah, size matters too, when you're using a stock business laptop with only 120-250 GB of drive space to play with and plenty of non-npm-related stuff you also need to keep on your dismally small C: drive. The article was worth the read just to head about pnpm, which I may try to help alleviate (2), but it won't help when using cli tools that automate npm.
The "domain lock" is probably just checking `window.location.hostname === ...` and obfuscating it, it shouldn't be that hard to replicate yourself. For the API key, I meant that you could just load the script like this: ``` &lt;script src="script.js?key=exampleKey"&gt; ``` and then when your server recieves the request to load the script, it does something like this: ``` if (key === "exampleKey" &amp;&amp; referrer === "example.com") { // respond with the script } else { //send an error message ``` The key itself doesn't really matter - it's visible to anyone that loads the page - what matters is that you give each person that buys your script a key, and that key can only be used on a certain domain. But seriously, this isn't going to actually prevent anyone from copying your script; it's just going to make it difficult and annoying to do so. A business model that's based on selling a JS lib isn't going to work, I'd encourage you to think about what additional value you can provide that people can't recieve just by copying your script.
It's a simple language (or rather it was) and it can be made to run everywhere. Just open the browser and start coding cross-os scripts. Contrary to popular opinion, I actually quite liked ES5. I enjoyed CoffeeScript. ES5 is more complicated to implement than say Lisp, but not too complicated and the syntax is easier to digest for people coming from C. It's a scripting language so it has many productivity advantages. You do compile ES nowadays, in order to either extend it or maintain backwards compatibility, so this advantage is being lost somewhat. ES broke more rules than any other language. It made decisions that many people still cringe at. But in turn it also created some pretty awesome things.
Do you work where I work?
I used to take the whole node modules are terrible complaints seriously but then I started going beyond JS. So far I still think it‚Äôs way better than how many other languages do it. And it will keep getting better.
I hear this very often. We also just transitioned from jQuery to Vue. Faster dev time, more robust, DRY
I think what he means is he doesn't want to have to register to demo the game, not necessarily that anything is broken.
That's not helpful at at all. The best piece of advice I ever received about writing: assume your audience are children who understand nothing obvious until you explain it to them. Otherwise you're just preaching to the choir. Tech articles, especially articles about new techs, are often terrible at this.
Ironically had to add a sarcasm tag because someone didn‚Äôt understand something obvious until I (just now) explained it...
React used to support mixins. They were removed because they were problematic and higher order components are a better way to solve the same problem.
React hooks aren't what you're thinking of by "hooks". I imagine you're thinking of lifecycle hooks, which React has always had.
Try taking the quotation marks of the src property. And use one set of {} instead of two. Unless you are using some templating engine I am not familiar with 
You can't compose mixins and they clash. React removed them long ago. She's also writing about this in the article.
React's always had a single pattern: view=function(state). You could express this with classes or functions, now classes go away, making it even simpler. Vue serves render components, string templates, single file components, factory components, "stateless functional components" and as 3rd party class components. The boilerplate to make a component, use it and render children is a lot more than: &amp;#x200B; const A = () =&gt; &lt;div /&gt; const B = () =&gt; &lt;A /&gt;
I'm not sure that you understand what I'm saying about eslint. Even though you aren't using Node.js you can take advantage of the linter by installing eslint via npm. Almost all major text editors have an eslint plugin that allows you to format the code upon save. Here's an example JavaScript repo that uses eslint. https://github.com/clintonbess/chemical-scraper
Last week I switched my shell to `fish` and had plenty of issues with `nvm`. I tried `n` first since Dan Abramov used `fish` with it ([https://twitter.com/dan\_abramov/status/806478462475235328](https://twitter.com/dan_abramov/status/806478462475235328)) but later decided to use `nodenv`, which works the same way `rbenv` does and I use it at work. You can have a look at some [alternatives](https://github.com/nodenv/nodenv/wiki/Alternatives) and may find one working the way you want
why use this over jdownloader2?
How do you convinced them ?
I think if you had put `++i` rather than `i++` (increment before function vs after) in the for loop that may have worked as originally expected? (Not tested)
That's one expensive game
&gt; Every time I need to do something I don't know how to do in Vue and I reach into their toolbox there is a solution waiting for me While I don't want to say anything bad about Vue, feedback like this would make me worried about a lib. The relief I felt when I started using React was due to the fact that I never think of a task in terms of "well... how can I do that using React?". Literally never. I think of tasks in terms of "well... how can I do that in JavaScript?". React never stands in my way. Vue seemed similar in that way, although I never used it much. Hooks do not introduce anything you couldn't do before, we had HOCs and render props (and both are not really intrinsic react features, they're just patterns which react doesn't stand in the way of). All hooks basically do is allow you to do the same things with less... boilerplate, I guess, and with more clear intention. Which is no small feat, of course.
You can use different CSS ‚Äútricks‚Äù to achieve the same result. I mentioned in a previous comment that one of the common use cases that I met were related to box sizing and/or positioning. Sometimes relative + absolute child fixes the positioning issue while sizing can be solved using flex boxes. PS: They are not THE ABSOLUTE EVIL but just pay attention when you are using them. Especially in older browsers (like IE11).
[https://pnpm.js.org/](https://pnpm.js.org/) &gt;pnpm uses hard links and symlinks to save one version of a module only ever once on a disk. When using npm or Yarn for example, if you have 100 projects using the same version of lodash, you will have 100 copies of lodash on disk. With pnpm, lodash will be saved in a single place on the disk and a hard link will put it into the node\_modules where it should be installed. &amp;#x200B;
I use Vue in my day-to-day developing and I really love Vue. I worked with with React too, I think it's a great library/framework, and I agree with what you say. The way I see things is... Why lose time thinking how to do something in javascript if someone (smarter than me aka Evan You) already made something better than what I could possibly create and it's tested ...and it works fast.... and if someone joins me in my work will be ready to contribute. When I think like that it's like Evan You works with me lol. Samething with AdonisJS. Why to build a nodejs express backend when I can have other devs better than me thinking patterns and all that stuff. In the end I learn a lot with all the things those guys invented, then I can comeback to the "roots" like as I have worked side by side with great programmers.
For them (react devs) it's really is the next coming of Jesus. In Vue we don't have the same day-to-day problems I think, thats why you (and me too) don't see it like OMG Jesus is coming lol. About mixins... they worked great for me when I used it for the first time, but coming back to see some old code you made like 2 months ago....then you start searching for the methods, and why something happens inside your component....you lose sight of things... then you learn what they mean with "Mixin hell".
And what do you think happens during an install?
Not really an Angular-specific tip, but use a common CDN, if you aren‚Äôt already. There‚Äôs a decent chance that your user‚Äôs browser already has it cached from inclusion in a different site, eliminating the need for that GET.
&gt; This command downloads audio file and converts into MP3 (MPEG Layer 2/3) format This sucks like every lossy-&gt;lossy conversion.
&gt; Jon Schlinkert Never heard of this guy until now. Just looked at his Github, and I am already pissed.
Could be converted into `ogg`
That's a valid way of looking at it, too As long as the library doesn't stand in your way when you do not find a solution in the official cookbook
hey mod. Is it ok if I keep posting questions like this on this sub? The other sub is not as active as this sub. If needed, I will remove them myself once answered.
ogg is lossy too. Better save original sound.
The original audio itself is lossy!
Sure, now let‚Äôs try that with 25 pages that are more than 10 lines of code each and let‚Äôs see how that looks
Added features to in-browser compress images larger than 10KB in MySigMail - [https://github.com/antonreshetov/mysigmail](https://github.com/antonreshetov/mysigmail) Added few new icons in Vue Unicons - [https://github.com/antonreshetov/vue-unicons](https://github.com/antonreshetov/vue-unicons) Work continues on open source task manager on Vue/Vuex/Express/MongoDB stack - [https://github.com/taskill/taskill](https://github.com/taskill/taskill)
Can you discuss it more? I have it in a larger project already.
Dynamically typed languages can also be strongly typed e.g - Python. As for Wasm you are incorrect pretty much all languages can in theory be compiled to use Wasm, some just require a bit more fuss to do so. https://github.com/appcypher/awesome-wasm-langs
I find that math.sqrt is actually really fast these days, in the doom and quake era it was an issue but with todays fpus its not much heavier than basic division. Single trig calculations are about 10-20 times as heavy as division though. fencache can check its cache and return a frequently recurring value in about one third of the time which it would take to repeat the trig op. The case for using it is marginal for a single op but in certain cases where the calculation is repeating lots it could work. Greater boosts are possible caching math expressions that contain multiple operations. Not sure if there will be much repetition in a collision checking context - maybe if the positions are confined to a grid. Things like binary searches can be cached too, basically if its numeric or any kind of data and values are often repeating in the algorithm this memoizer can safely speed it up. With standard memoizers this isnt so true because they are much slower with floating point data and they are vulnerable to getting excessively large if they get bursts of different values. &amp;#x200B; Incidentally, for calculating time/place of collision between spheres I have notes on a most efficient 2 or 3d vector formula [here](https://github.com/strainer/fancy/wiki/contactformula) And also [trigfill's](https://github.com/strainer/trigfills) atan and atan2 methods are about twice as fast math.atan with about 10 decimal places precision. That library is made to enable deterministic results on different browsers but its trig methods are a little quicker than native.
I've used React for almost 4 years. I'm interested in what the "same day-to-day problems" that Vue solves that react makes a problem? 
Yes these conceptually existed in reagent of cljs like many yrs ago with ratoms.
Reagent ratoms in cljs. This is a standard pattern.
Been working with hooks in our marionette based framework for years. Honestly did not realize this was a new and revolutionary concept.
This idea of closured state management with set functions has existed in other compile-to-js languages for at least 3 years. I'm not sure if op was referring to that but he's somewhat accurate. 
Vue &gt; React
Yes, but that's a router you have created. So you *do* need a router.
And next, Nuxt.
What a dumb title. Should have been "How to implement a custom router in React"
There is no router per se - so I'm hesitant to call it a custom router. The routing is done within components (by matching window.location). I could have used - "How to implement routing in your SPA (without external libs)". 
It takes less than 30 seconds to register for an account. I will eventually look into Facebook/Google authentication, but it took more effort to make the post.
Thanks for your comment, it had some great insight. I totally agree with you. I had some poorly worded phrases. When I said, "I don't know how to do in Vue" I was meaning, "I'm about to write some hacky JS to manage some set of elements, is there something I can do with Vue to make this feel more natural and understandable" and time after time there is a datacentric solution. A library should never be the solution, it should always be there to enable you to simplify the mental model required to complete a complex task and Vue has been that solution for my team. React is great too although I have less experience with it. I'm often jealous of it's massive ecosystem and am excited to see Vue catch up to some degree in 2019. Vue 3.0 is going to be big in that regard.
I actually built an application over the weekend that replicated some functionality in our core systems. I went through the source on both. I really drove home the idea of how much the data can control the UI instead of the old approach (when the data changes you manually handle everything). They caught the vision, our boss gave everyone 6 weeks to test Vue out and said we would meet at the end. We met and we were 12 out of 12 in favor using Vue.
I'm sure there'll be an explosion of medium articles that'll do just this.
Could you point me at an example? I'm not familiar with marionette, and the docs are a bit hard to view on a mobile.
basically any collection of objects and a state variable can manage it.
Sarcasm doesn't come across as well when there's no facial expressions involved.
It is interesting when people say "you dont need xxx" but instead they are building the simplified, impractical version of xxx. And in the end you face all the shitty problems and bugs that people came across. THIS IS NOT how the open source world works. People do all the heavy lifting for you so that you can use a well-maintained library in your project. If you think those libraries are too "bulky" you can file an issue, make a PR or even fork and build a version on your own. But please dont tell people not to use libraries and DIY. 
Try the serverless database - lazlodb. It has a node library called lazlo-node that manages the database in any kind of writable storage. Both are on GitHub and npm.
Hey, I appreciate the feedback and the time you took to attack me on a truly personal level - although I find it a little ironic considering what you had to say about me. You're right, though, I'm guilty as charged, I do have the bad habit of being a self-righteous prick on the Internet sometimes. I do have narcissistic tendencies, and I'm painfully aware of them - I inherited a fair amount from my father and I've been trying to combat them for a long time. It took me a while to realize that self-hatred isn't the way to go, and that it actually makes things worse in this department. I'm way more forgiving with myself nowadays, and that means that I'm usually way more forgiving with other people as well. However, I still have bad days, and venting on the Internet is better to me than lashing out on the people around me. Also, I think that I'm not actually looking to "destroy" people - I'm just doing my usual reddit browsing and get triggered, usually by narcissism actually. It was the narcissism that triggered me in this post, for sure. Someone taking the hoighty toighty teaching position and lecturing people about fancy technical stuff, writing as if they were an unquestionable authority on the matter (just look at the language of the article. There aren't "I think"'s or "might"'s, it's full of "this works like this, and this works like this. period."'s), without actually taking the time to research the topic at least a bit. If they even read a single page on the concrete topic, they would've realized that the topic is more complex than they imagined. I wasn't saying the author isn't knowledgeable in other topics, only that they miscalculated themselves with this very specific, complex topic. &gt; You just seem like the type of a person who *enjoys tearing other people down by narrowing down on meaningless details (constructor, proto, etc.). We weren't talking about meaningless details. The article completely misrepresented the subject. It's as if I was writing an article about narcissism, but all the traits I talked about were related to psychopathy - sure there's an overlap, but they're two different things for a reason, and it does more harm than good to blur the lines between them. &gt; "Europeans are dumb as fuck" You're clearly not involved in any of the communities I regularly visit and don't get the inside jokes and the meta/ironic/whatever humor there. I don't remember why I wrote this, but it was obviously a joke. It would be hard to find a person with a more patriotic European identity than me. &gt; the author who poured hard work into an article accepted by Medium staff to a promoted category That's exactly my problem. If the author put a lot of effort into actually researching the topic instead of creating fancy diagrams, they would've realized they're wrong. And I think what truly bothers me is the distinctly American culture of having to show a new skill to people the fucking minute of learning it. The "fake it till you make it" mentality and inflated egos. Also, Medium will accept anything that will receive a lot of clicks. Medium is also starting to be less and less respected within the programming community for this exact reason. There have been articles by skilled professionals posted here about leaving Medium because the content is completely unreviewed and unprofessional/misleading in a lot of cases. &gt; If you are so well versed in JavaScript, why is it so difficult to try to help improve the article The article doesn't need improvement, it would need a complete rewrite. Also, exactly because I know how much I know and don't know, I wouldn't endeavour yet in writing articles about topics of this complexity. &gt; It's easy to be all tough online with an anonymous username, but if you said anything like this to people in person, I bet you probably wouldn't get home that day. Thanks for the tip, but I seem to be pretty well respected and loved in my circles, I'm alright, thank you. It's my job to deal with Internet trolls attacking, and it's this guy's job to deal with me lashing out on him. He'll be fine. Hopefully, he will write less unresearched articles in the future. Cheers!
Yeah you can‚Äôt do that if your company is worth anything. That is horrible practice. 
Uh, it's tough to say. Javascript: the good parts is definitely a great start. Although it's a bit outdated, a lot of the points about the language still stand, and it'll give you a good perspective for thinking and reasoning within the framework JS provides.
That's actually pretty sick. Wish I had this when I was learning that stuff for Uni back then :D Keep it up!
Thanks so much. Have you tried the tutorial?
Not really a problem, but two-way data bindings in Vue makes setting values much faster in development, I don't need to create simple functions just to update values from forms, for example.
Oh man, switching to Vue is a huge net win for all of us in that case! I got involved with a project where they've built up a couple libraries of "UI helpers" which are just layers upon jQuery DOM manipulations and while I'm sure they meant well, having to make sense of that after using an actual framework... ooof. Granted it was the only obvious route to take 8+ years ago.
I built an app called [AVA The AI](https://controls.avatheai.com) over the past few weeks while learning React. I had the silly idea of using the Web Speech API to make an interactive chat to prank not so tech savvy friends and family into thinking they're talking to an advanced AI called AVA when really it's just you! Tech used: JS/ES6, Pizzicato (audio effects), React, PHP and Websockets.
Yes! Please keep going!
Ah I see. I can see that as a convenience for some things sure. I rarely find a usecase where my code is more understandable from that but definitely could leave out boilerplate. Since the updating is still not like angular 1s digest cycle it's still efficient presumably.
Updated [admin-bro](https://softwarebrothers.github.io/admin-bro-dev/index.html) (automatic admin interface for nodejs apps) with an option to customize resources and filters * example app: [https://admin-bro-example-app.herokuapp.com/admin](https://admin-bro-example-app.herokuapp.com/admin) * documentation: [https://softwarebrothers.github.io/admin-bro-dev/tutorial-04-customizing-resources.html](https://softwarebrothers.github.io/admin-bro-dev/tutorial-04-customizing-resources.html) * github: [https://github.com/SoftwareBrothers/admin-bro](https://github.com/SoftwareBrothers/admin-bro)
I have added collisions, with shockwaves and debris, to my space and gravity simulator Harmony of the Spheres. Here's a [demo](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/Destroying%20the%20Galilean%20Moons). &amp;#x200B; There's a great deal of work that needs to be done on the collisions, so if anyone is knowledgable about physics and could help me figure out how, for instance, an impact, at a certain angle, between Earth and a Mars sized object would change the tilt of Earth's spin axis, I would love it if you got in touch with me, provided that you have time to spare, that is! &amp;#x200B; Anyhow, happy Saturday, folkar00s :D!
Thank you! Do you think there's too much text in the tutorial? When I was learning this stuff a lot of questions kept popping up. It might not be the same for everyone so I would appreciate your feedback. 
&gt; The boilerplate alone to make, use, re-use and render a component &gt; is a lot more than [React example] Seriously? It's pretty compact and straightforward to me. This also doesn't require Webpack to run either. Vue.component('comp-a', { template: "&lt;h1&gt;Hello World&lt;/h1&gt;" }); Vue.component('comp-b', { template: "&lt;comp-a&gt;&lt;/comp-a&gt;" }); new Vue({ el: "#app", template: "&lt;comp-b&gt;&lt;/comp-b&gt;" }); Of course you would probably would want to use Webpack and single file components with Vue, but I wanted to illustrate that it's really not as big of a deal as you made it out to be.
&gt; There is no routing &gt; This is a short article about implementing routing in your single-page app (SPA) without external libraries.
I have always been the same way. Explain everything on detail and try to cover all bases. I think it's fine.
Glad to hear that
Uhh...this is pretty awesome! Full tutorial would be great!
This is excellent! And yeah, I'd love to see more.
That's ingenious! 
This is really cool, what type of assembly language is that?
Yes! Thank you!
Now you are running the promises outside of the try/catch, like my original post was doing. &amp;#x200B; This is an oddly difficult thing to do. I ended up doing something entirely different. I used to implement this pattern all the time in C#/Java and its easy there.
Awesome! Thanks
This is awesome! Keep going :)
How did you do that ? its awesome stuff !!
No, you should post them to /r/LearnJavascript, StackOverflow, etc.
Hi /u/worldwide__master, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/nprmass, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/underceh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rani_qare, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Very cool!
Just piling on. I've been programming for 20+ years and I learned something. I've never bothered to learn assembly or understand how higher level languages get compiled, so it was very educational. Please continue building!
Yes. But I think that Hooks is a great thing. When it comes to Vue it will help! Because there's a lot of boilerplate that won't be needed for Vue too beyond just two data binding.
C == Golanng, why not? 
You should continue, thank you so much!
There's nothing to discuss when you won't show it in a large project. And I assume the feature that React Router has is simplicity
Thank you! It is similar to MSIL (runs c#) or Jasmine (runs Java). Look for stack-based virtual machines if you are interested. The main difference is that it uses the same size for all primitives whereas usually you would use less space to store a char than an int, for instance. I did that to avoid a lot of conversions and because I don't want to have 3 versions of essentially the same instruction. 
https://gist.github.com/SpaceMacGyver/8650f5916e87c20ab4727072582c1838 _(very much WIP)_ I wanted a declarative approach to scaffolding [redux ducks](https://github.com/erikras/ducks-modular-redux), and figured JSON schema would be a good way to drive them. There's a good chance I'm not compliant with the ducks pattern as published, but for my purposes the create-duck utility lets me create slices of redux state that are easily maintained and quick to compose.
Absolutely
I'm glad you learned something. It's really satisfying to understand "how it all works", I found. I will post here again after I finish the tutorial.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/blazor] [Learn C and its lower levels interactively, in your browser (made with Blazor)](https://www.reddit.com/r/Blazor/comments/aou2i1/learn_c_and_its_lower_levels_interactively_in/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thanks! How was the experience at Netflix? How was the attendance, was it more like a conference or local meetup? 
This is super awesome! Content like this is so rare and so needed. Especially for things like C / assembly.
Assuming we‚Äôre using npm, I would think that the hassle of managing dependencies becomes something not to worry about. Perhaps I‚Äôm missing something?
If I'm reading this correctly, it does not load your page faster, it just adds the preload attribute to links in your page?
Just wanted to clarify, I meant that it is the repo I was referencing to make my build. Just a heads up that I am not actually the owner. Cheers and best of luck.
You‚Äôre looking for GreenSock. I highly recommend Sarah drasner‚Äôs course on Frontend Masters, but there‚Äôs plenty of amazing free learning resources as well. 
Nice job ! However, it seems doesn't support some basic functionality I tried adding 'printf("Hello, World");' to main() which raises 'semantic error' On trying to add '#include &lt;stdio.h&gt;' at the top raises 'lexer error' Is #include not supported currently ?
Explaining everything is better for me especially for low level language concepts. I can always skim something I already understand. More text can also help point out terms to use in searching for more info.
A telemetry client for the Formula 1 game. This allows getting real time data from the cars that are racing (engine information, wheel temperature, and so on). https://github.com/jonybur/f1-telemetry-client
Yes, it's not supported. You can only see the numbers in memory or return from main() at this moment.
Basically, it will start loading the page as soon as you hover your mouse on a 'link object'. If you click it afterwards, you will load the preloaded page, otherwise as soon as your mouse leaves the 'link object' - it will cancel the preloaded state. So, yes, it doesn't literally load pages faster, but makes it seem like it did. Should be pretty useful for mobile (touch) devices, but on mouse/keyboard setup, imagine you dragging your mouse over hundreds of links (for ex.: like a to-do list) and your browser starts preloading (in other words, visit) every single one of them -\_-
Ok. Thanks for creating the tool. Also, an optional Dark theme would be appreciated
What do you think about a package manager for webcomponents? [https://github.com/teamdomy/domy](https://github.com/teamdomy/domy)
Noted.
Finally integrated Stenciljs compiler in a package manger for webcomponents [https://github.com/teamdomy/domy](https://github.com/teamdomy/domy)
Awesome 
Hi there, why are you sharing the link and not the package repository? Do you intend to open source it anytime soon?
Who?
https://www.arangodb.com
This is awesome, hope there‚Äôs more.
Right, past tense. HOC was their way of doing what mixins do in a more component -driven way but that has it's own drawbacks.
Agreed. After all, if we're always learning "from scratch", then we're always replaceable with _other_, cheaper devs working from scratch, or so the money people have convinced themselves. If the industry weren't dominated by change _for the sake of_ change, we might actually leverage real value for the users and (horrors!) demand compensation and working conditions accordingly. Source: 40 years in the craft of software development, of which I held out hope that we could develop some actual vendor-independent professional standards and recognition for oh, 35 or so years. History may not exactly repeat, but it's rhymed a _depressing_ number of times.
Fair enough. Ability to compose is nice but how often have you found your self in the need to compose mixins? No doubt this would come in handy in some special cases.
It is open source. [https://github.com/instantpage/instant.page](https://github.com/instantpage/instant.page)
Commenting so I can check out later
If this is your own content, you might want to consider removing the `font-size: inherit` that is applied to the `pre code` selector. Having it has the effect of making code about 11px in size, which is far too small to read comfortably, particularly when code is -or should be- one of the main interests of the article.
You are now ready for svg, **don't use a lib, more importantly don't use d3.** Use svg core, it's very large and surgical, with extreme performances: [https://developer.mozilla.org/en-US/docs/Web/API/Document\_Object\_Model#SVG\_interfaces](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model#SVG_interfaces) 
Thanks for this reply - this does help quite a bit as an insight on how to pass the files back through, I guess the "blobs" I had are not true unzipped files, so when trying to addfile() back into the uploader they fail due to missing file parameters &amp;#x200B;
I like MetroMap visualisations for their visual appeal, simplicity and versatility. You can use it for process description, workflows and roadmaps for example. Here you can find my project: [https://github.com/Hoogkamer/MetroMap](https://github.com/Hoogkamer/MetroMap) &amp;#x200B; &amp;#x200B;
This is **fantastic**! Thanks for the effort in publishing :-)
When your script is run, your form element doesn't exist yet, so the event cannot be attached. Move your script to the bottom of your body, it should work 
Because you import the script before the form is rendered. wrap the whole js block into a callback on the `DOMContentLoaded` event
Maybe I'm out of the loop or not that good of a javascript programmer, but what's wrong with Schlinkert's stuff?
Ok, so an external script is executed one, at the form load, so to speak. And at that time, the textbox is empty. I will just leave the script in my HTML for now. Thanks.
Ok, so an external script is executed one, at the form load, so to speak. And at that time, the textbox is empty. I will just leave the script in my HTML for now. Thanks.
Looks very nice!
I want to try it. It might work better than OrientDB
The other solution is to wrap the form.onsubmit in a listener that waits for your document to be ready: document.addEventListener("DOMContentLoaded", function(event) { //bind your onsubmit here }); This will ensure that your code is executed at the right time. I would also suggest to add the attribute "async" to your script tag so it doesn't block the loading of the page.
The other solution is to wrap the form.onsubmit in a listener that waits for your document to be ready: document.addEventListener("DOMContentLoaded", function(event) { //bind your onsubmit here }); This will ensure that your code is executed at the right time. I would also suggest to add the attribute "async" to your script tag so it doesn't block the loading of the page.
This is actually genius and I'm stealing it
I have rewritten my [React-Claculator-App](https://github.com/KaiHotz/React-Calculator-App) to make use of the newly released Hooks and thought maybe its a good idea to release it as a reusable component on NPM [react-mac-calculator](https://www.npmjs.com/package/react-mac-calculator) comments are welcome Don't forget to star it if you like it :) Happy Hacking
Interesting. I don't have a CS or Math degree, and I have done very little game development, so this side project has just been a chance to poke around with some new stuff. I think you are right that there are not many opportunities for memoization in what I'm working on. The trig functions for sure, but I am already pre-memoizing those with lookup tables. As I wrap up some of the feature work and start looking for optimizations I might throw in some logging and see if some arguments are getting used repeatedly. Does your library have built in functionality to round off floating point numbers to a certain precision? Seems like memoizing floating point calculations would be pretty useless otherwise. Bookmarking the ray-tracing stuff. Thanks for that. Right now I'm just checking for overlaps each frame, which works well enough, but ray-tracing is on my todo list.
What do you have so far?
Looks that way according to some benchmarking on the site... 20x better in some use cases
&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &amp;#x200B; &lt;p&gt;&lt;button onclick="(document.getElementById('demo').innerHTML = getRndInteger(2,30))"&gt;Click Me&lt;/button&gt;&lt;/p&gt; &lt;p id="demo"&gt;&lt;/p&gt; &lt;script&gt; function getRndInteger(min, max) { return Math.floor(Math.random() \* (max - min + 1) ) + min; } var x = getRndInteger(min, max); &amp;#x200B; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
so clueless :(
I think you're missing the fact that JS allows you to make itself better by allowing this type of framework to be so easily built. That in itself is a pretty good part of the language.
Thankie :D! 
I was making more "I bet it actually works"
I shouldn't give out the solution straight away, but oh well... https://jsfiddle.net/bychjwxL/ Try to understand how it works and not just copy it. The concepts needed for this exercise are very easy and you can find explanations for everything by googling the specific problem you have.
Nice. I wish more people understood this. People who should know better. 
MIT License feels good man
I dont see why it wouldnt work with WSL, for windows in particular I'd have to change how pathing to the NVM dir is made since they're linux/unix specific atm. It uses forward slashes \`/\` instead of back slashes '\\'.
Thanks for your reply. Why should I not use d3 ? The only thing I used was a quadtree to optimise a search in 2D
Thank you, I'll have a look
I think electron would tick people off more. Why don't you let it run fully in the browser? 
I've made a widget you can use to embed your most-viewed blog posts on your homepage, internal dashboard or your friends' blog. It works with any blogging platform: Wordpress, Gatsby, Jekyll and others: [https://github.com/anndd/Top-Posts-Widget](https://github.com/anndd/Top-Posts-Widget)
Not sure how that changes the fact that I don't like the language that much?
That's impossible right now. WebGL is based on OpenGL ES which doesn't support custom thirt-party extensions. Mozilla, Apple, Google and others are in some disagreement about what should replace it, which is complicated by the need for whatever it ends up being having to map to Vulkan, DX12, and Metal. It's probably years off.
Downvoting for giving out the solution.
This is super awesome. I've written compilers before, but it never occurred to me to make an interactive tutorial like this. Might be cool to "condense" the main narrative, and then have "click here to learn more" buttons which pop up additional context for people who want it. Also, I'd take the separators out of the addresses in your explanatory text. I'm American, so seeing 10.000 does not immediately read as "10,000" for one, and for two your addresses in the columns don't have separators, so it's probably just unnecessary.
I LOVE this. Keep it up!
Thanks for the feedback!
If this is your content you should consider replacing the var statements with const or let. 
There is many reasons, it's an old lib, and now the browsers had evolved a lot. D3 is just bindings to create svg elements and control the DOM. This was a good help when js wasn't that evolved, and this basicaly mean to learn all, and face a very boring and unclear documentation. Exemple from docs: d3.selectAll("p").style("color", function() { return "hsl(" + Math.random() * 360 + ",100%,50%)"; }); This is bullshit. The return is completly fake here, it actually assign instead of returning, so you can't easily mix real javascript inside. Now what's different here to querySelectorAll? Nothing at all. &amp;#x200B;
More of those flocking boids ... [http://mjp.co/js/boids/](http://mjp.co/js/boids/) Go on, you know you want to play with my boids, go on, just a tickle :)
There's no built in precision reduction feature. The optional parameter 'keying function' could be used to arrange that. Memoization is essentially a convenient way to arrange caching in an algorithm and caching is only useful in certain situations. Fencache is not really just for math functions, its just fast and robust enough to use in math calculations unlike the common kind which seem only really capable for occasional database/network requests. The ability to efficiently limit the size of cache is important in practice. &amp;#x200B; For collision detection you might look at doing simple tests that rule out overlap between each pair of objects, before determining if they definitely do overlap. Like, if the objects are too far horizontally apart, there may be no need to do any more calculation. Then see if they are close enough to touch vertically. Only then check if they actually touch - that kind of thing. Trig functions could also be avoidable altogether, or only necessary at the most detailed stage. &amp;#x200B; I have a strong interest in 3d physics and ended up making a complicated system to accelerate spatial queries for processing collision and forces, but for up to around 1000 objects more simple streamlined system can work as well. There seems no end of things to try :) 
I like it, Saturn vs Earth is a good one. I'd like to see that from standing on earth.
the actual game is pretty resource heavy at some points and it needs full pc access, so thats why
Then don't use electron that will just add a full blown chromium browser on top. Use unity or unreal it is better for the job. 
An explanation of what exactly we're looking at would be great, and exactly what makes it a PWA rather than an SPA (it's not exactly clear what parts are 'offline first' or employ other PWA staples).
Obligatory "did you just assume" comment (welcome to the current generation)
It bothers me that people on this sub serial downvote anything that criticizes JS. The discussion *is absolutely there*, which I appreciate. But the vast majority of voters here downvote anything that isn't pumping up react/vue/js in general, or suggesting that there are heavy improvements that could be made. This applies more to posts than to comments, I find comments usually have a good spread of criticism and appreciation and both are voted around evenly.
Seems pretty useful. I might add this to my stuff.
Going back through the tutorial, one minor change I would make is checking the spelling/grammar. I think some words might have gotten past spell checks, for instance: "Hopefully the machine can do it faster and/or chapter than yourself." Not sure what you meant with the word "chapter?" Maybe cheaper? Still, an awesome job though. :)
Really? I feel like im always seeing the opposite, non stop hatred for js and everyone should jump straight into typescript or similar.
Thanks that's a shame. Does web assembly change anything? 
I think there's a big divide between people who have JS as a language they know and people who basically only know JS. That said, I guess it could just be confirmation bias on both our sides.
He produces trivial one-line libs and ensures that they all end up in dependency trees of popular projects. He's the renown producer of the is-odd package and the is-even package which includes the is-odd package and returns !isOdd(). is-odd is or at least used to be in the dependency graph of webpack, which is one of the major reasons I went with rollup instead of webpack.
Nope
I feel like this title could be changed to ‚Äúwhat can go wrong when you don‚Äôt understand dynamic languages‚Äù The comparison just needlessly adds to the dynamic vs static war... both have their place and purpose.
Yeah, i guess it really does depend how you have come into programming, but in general holding a strong or aggressive opinions on anything related to programming and tech is just bad for the most part)
It was good, it was very packed, supposedly the most people they ever had. They had some good catered food and drinks but they were quickly devoured every time they brought more. It was a mix of Netflix employees, Facebook, Google and a variety of others. I was well put together for the most part, they had a theater were they presented and any overflow had to go to a separate area, they moved Netflix employees there. So it was somewhere in-between a local meet up and a conference.
Upscale it using a shader which preserves the pixel art look. Don't add any arbitrary limits. https://github.com/OpenEmu/OpenEmu/blob/master/OpenEmu/Shaders/Pixellate.cg https://i.imgur.com/zwbHv0s.png
You can make a todo list
Keep on going, I have been a programmer for 25+ years, and have worked with assembly and C at the beginning (duh!), I am also currently teaching programming, yours is a great tool for millennials and younger generations, they are so detached from what is really going on. Thank you
[removed]
This was fantastic. You should unquestionably keep writing more. 
It works on 2010 hardware and the reason I'm using electron is beacuse I can't do unity! I tried learning it for 5 years and it never worked out
ok &amp;#x200B;
How about unreal? It really sounds like hammering a nail with a knife into a block of butter to hang up a water bottle. 
Why not just compile to wasm?
I will try it! &amp;#x200B;
You see this usecase in probably the majority of components created in SPAs...
Learning to use APIs isn't too hard if there's good documentation. I've found the YouTube API to be fairly accessible. I coded a super-simple tracking project in about a day. And there are tutorials and starter code available by Google. 
Damn you, you stole my idea 
I thought it was broken. Turns out there's a button on the bottom right hiding behind my drink.
What were your ideas by now? Maybe they can work as a base :) 
[removed]
Not the most original one lol simple tho
If you tried to learn unity for 5 years unreal won't be any better I'm afraid. Making games is hard with any engine
But the first one flashing to my mind üòÖ
I purchased this bundle, but the amount of time I had to spend to get past two captcha was horrible. From now on, I'm going to boycott sites that use this form of captcha.
&gt; a super-simple tracking project What is that?
Make an mp3 player
I'm tracking the views of my favorite YouTuber's latest video. I plan to build upon this to graph data of multiple videos over time. 
Our team used it for one project so far and it has been excellent. We look forward to using it again.
Oh cool!
Oh ha, gotcha, I haven‚Äôt used either myself
You didn't do a single good thing with this post. Not one. 
Using `cursor: pointer` on interactive elements would do wonders...
That's why I love javascript/nodejs/electron. It is easy for me to use! All I was asking is should I cap the resolution IDK why people are acting do weird
we do our builds in CI so we do 1 build in 1 place that gets deployed everywhere. performing a build on `n` servers just doesn't scale and eats up a lot more resources across our infrastructure than doing it once. also, `package-lock.json` doesn't actually lock anything unless you run `npm ci` (which isn't available in our currently deployed version of `npm`. we're on the cusp of completing QA on moving to a more current version of `npm`). by doing a single build and committing that to an artifact repository, we're able to quickly and easily roll back and all requirements for a deployment are kept in a single archive. It also guarantees that every server has the same code and the code is the same that was tested in lower environments.
People love to shit on electron (and there are some legitimate reasons to), but if that's what you're comfortable working with, go ahead! Better to build it with something that might not be the best platform for a game than not building it at all.
I (and friends) have had limited luck with bundling node applications. many haven't been able to start or run at all since things work pretty differently outside of the browser and on multitenant deployments. It's my understanding that bundling node is generally not considered to be a good practice, at least as of like a year or two ago.
You are writing a router...the pattern matching that you do here is similar to what react router (or others) do. Now you just also have to maintain this additional code in your code. Honestly...its a cost you don't need, and its why router packages exist...so you as a developer don't have to solve all of the myriad of problems that they do for you. This wreaks of NIHS.
So the earlier part of the walk through is actually written in ES5 *on purpose*. Towards the end when I introduce Parcel (and transpilation with it), we start using some more modern syntax. A quote: &gt; Since parcel does transpilation automatically for us, we can stop using the God-awful ES5 syntax we‚Äôve been using and let some imports and arrow functions into our lives! Sweet release at last. Here‚Äôs an example of what main-layout.js would look like after being transformed from that manual System.register mess
Hey thanks so much for the suggestion -- I've made the change and it should be updated.
&gt;¬© 2019 Reddit, Inc. All rights reserved Thanks for understanding
Oh sorry I actually just skimmed it for obvious things I might notice. 
Oh no absolutely, thanks for skimming it at all! Honestly I was getting really annoyed writing ES5 (I might have even forgotten and written a const or arrow function somewhere) -- but I tried to go as simply as possible... Despite the fact that most browsers [support the syntax](https://caniuse.com/#search=arrow%20functions) (oh shit, IE11 doesn't.... wtf) Later I realized that mithril doesn't even support older IE versions I think, so it might have bene pointless. At one point I even avoid using `Object.keys`...
Are these books worth it? I code in Javascript a lot and I'm interested in the other languages. Just wondering what these books offer compared to online searches (no disrespect intended)
Good luck, it's basically every site delivered on CloudFlare (which is a looooooooooot)
I uad high hopes for Orient, bit just awful and outdated docs/tutorials killed for me last time I used it a couple months back
Why not install node and use it for javascript stuff?
Do I have to sign-up for the humble bundle subscription plan? That's kind of a deal breaker for me...
Never mind - I figured it out. Whew! This seems like a really good deal!
https://i.imgur.com/KndhNCp What does "chapter than yourself" mean?
Thanks :)
first change your onclick function to just call the getrnd fn. and inside the function use inner html to print all your results. even, odd, prime, within rsnge etc. to get even use modulo. if (x % 2 === 0) { even } else { odd }. to get prime idk. to get range. if (x &lt;= 20 &amp;&amp; x &gt;= 10) { within range } else if (x &lt; 10) { less than 10 } else { greater 20 }. goodluck :)
Why would you not just use node? 
According to [https://en.wikipedia.org/wiki/Usage\_share\_of\_web\_browsers](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers), usage of IE + Edge hovers around 5%. Depending on what you're working, that may be a lot or not. Do you also need to support older versions of IE? Because those were the pain CSS/polyfill wise, in my opinion. Considering Edge is moving to Chromium, that there are libs that help "filling up the gaps" and that the bundle size difference shouldn't be THAT significant, I'd argue that for an enterprise project you should still account for IE/Edge.
Even a few months ago it was myself arguing you really need to at least deal with IE11. But with Microsoft's recent direction, the EOL of Vista (which was the last supported desktop OS without Edge), and some of the enterprise applications dropping IE support I've made a case otherwise. Enterprises with horrible "IE Only" are a thing, but those users are increasingly finding they can't use things like Salesforce applications, at which point, they know their problems need their own fixing. It annoys me how much bloat IE polyfills end up accounting for in popular code.
I think if there were 5% people then I will remove all the ie support bundle which causing slow app loading for 95% of users.
I understood. I haven't had a chance to do it yet because I was doing stuff with my family but I am working doing it now.
Yes, you are right. And now Microsoft switching to Chromium will fix the Edge issues at least.
*Woah!* it's your **2nd Cakeday** trblackwell1221! ^(hug)
What do you mean by they stopped accepting extensions?
He can also add defer after opening script tag to delay script until html has loaded.
Firstly, kudos on building a PWA without frameworks! That's unfortunately rare these days with bloated apps being the norm. Some nitpick: The scrolling feels quite broken. Are you using some js to override the built-in behavior? The content does not move with my finger, the sticky header/footer misbehave and there is no spring effect which is usually present by default on iOS.
They are not allowing any new applications to be published. If published, it can be viewed only on Chrome OS. https://www.omgchrome.com/not-joke-google-killing-chrome-apps/ 
Wow why are they doing this?
Encryption is always a bigger issue than "use an encryption library" for exactly this reason. Think of a scenario where your database is compromised, and ask, is your key also compromised? If it is, your encryption is useless. It certainly can't be hard coded - you'll end up leaking it in a git repo or something. &gt;the guy mentioned that aes-256-cbc requires a 32bit key. To be clear, that's 32 bytes. I think there's a few issues here but to start, the key and iv should really be binary data, so the string type isn't appropriate. &gt;iv = test.split(',')[1] // doesn't work as iv - how do I store iv in DB? You know it will always be 16 bytes. I would place it at the start of the data, then you can split by size and not separator. The other thing I'd look at is CBC mode means you also need an HMAC to make it secure. You make want to consider a mode like GCM to alleviate that. I know you've got other questions remaining, unfortunately this is a big space.
Less number of users are using it. So they have stopped it. 
The issue with stats like that is they are heavily biased by massive IE use in China. Which is important if you write for Chinese. But otherwise, it's a lot lower. GA on my site pegs it below 1%.
I've got probably an infinite number of questions on this to be honest. I did know I was probably getting in way over my head, but wanted to give it a shot because why not. But I learned a few things from this post, I wasn't aware I could split by bytes / size actually. &gt; The other thing I'd look at is CBC mode means you also need an HMAC to make it secure. You make want to consider a mode like GCM to alleviate that. Do you know of a good resource I could look at to get more info on this? I tried to google and learn about this before asking, but I couldn't find anything - as in I either had no idea what I was looking at, or didn't know enough to actually trust what I was reading. I actually couldn't find anywhere to corroborate the 32 byte requirement for an aes-256-cbc key either - let alone the additional things you mentioned. I have been mulling this over though the last day or so. I had considered the possibility that if the DB is compromised, then it's reasonable to assume that the key is as well (for reference I'd planned on storing it in an .env outside the repo). I am wondering if it's overkill to encrypt every piece of data anyway. Potentially 500+ records per user. I imagine the time it would take to handle the deciphering could get immense. My thought was to anonymize the user themselves, so their data just kind of goes into the 'ether' of the DB. Perhaps generate a hash based on a uuid, some of their personal data and a secret key, and identify them that way. I could even set up a second http API and pull sort of a key from there as well. Is there a better way to handle private financial data? I just want to know I can be confident in an approach, or some verification of my current thoughts, or whatever.
Just because a news source is receiving a funding from taxes does not mean the state has editorial control. For example, there could be a system where the state matches contributions to news organizations using a mathematical formula that counteracts the free rider problem. In such a system, the private citizen‚Äôs contributions determine which news sources get funded.
there is no _we_. analyze whatever site's traffic in in question and adjust support targets accordingly.
Trading and markets existed before capitalism. Capitalism is not just markets or trading but a larger institutional system with particular norms of property, contract and normalized autocracy in the workplace.
&gt; I actually couldn't find anywhere to corroborate the 32 byte requirement for an aes-256-cbc key either Again I'll say "unfortunately", a lot of crypto is a hard problem, made harder by poor APIs. I'm not going to suggest you work your way through the eight sets of work at http://cryptopals.com/, but doing so leads me to find issues in most of what I write. In this case, it's a case of saying AES265 utilises a 256 bit key. This is known from the fact that AES128 is the same algorithm, using a 128 bit key. 256 bit = 256/8 = 32 bytes. A very common vulnerability is people using a "32 byte long string", but when limited to characters on the keyboard that's not 256 bits of keyspace. You could certainly look at using full disk encryption (LUKS), and setting up dedicated SQL accounts so the "normal" app can't read this data, as a halfway solution.
My point is that you could add the dozen or so lines to a file in your project - instead of npm adding it. It's all personal preference, but I'm leaning towards fewer external deps these days.
Most socialist theorists recognize capitalism as the best system so far at improving production capability and living standards. They just believe that it has elements within it that will inevitably lead to its own undermining or that society can be organized more justly and efficiently than capitalism.
There are various systems proposed as alternatives to capitalism. Marxism just became the most prominent, but there have always been other opponents of capitalism with visions quite different from Marx.
I'm the senior dev at our company and I made the executive decision 3 years ago to stop all &lt;= IE10 support on all new and existing projects, with the only exceptions being ones that had a clause for it in the contract. I've also set a hard date of January 2021 for dropping all IE11 support in the same manner. One of our applications is used by law enforcement agencies and fire departments all across the country. Since they're government agencies reputed for running with legacy computer systems, we just force our hand and tell them it's necessary to drop IE support for security reasons. The security excuse works every time it's tried.
You have to understand who your users are. You might have a cross section that has virtually no IE use. You might have one that has a nontrivial amount of IE use. In the latter case you need to understand how much money those users are making for you and how much they‚Äôre costing you in support.
with a quick google, I see Kendo UI is a front end UI widget library that is for sale. So you might research how they distribute and protect it. look for other examples.
But they're all pirated in China, so should we even care?
You're the dev, know when to say no.
If your business wants users in China, yes. I haven't worked at such a business, but some people do.
I think articles like this should take a different approach, learning to write something yourself is a great way to practice and understand and appreciate dependencies you eventually use. But throw it out after... I cant agree with people pushing this as a valid approach to building a larger product that needs to be delivered. Build on the shoulders of well tested packages. There are some exceptions here obviously depending on your company.
Serve an ES6 version without polyfills as a module, and serve the polyfill-bloated compiled ES5 version with the "nomodule" attribute. Modern browsers won't even download the latter, and old browsers that don't support modules won't run the former.
I thought 'is-odd' and 'is-even' were jokes against the practice of one-liner packages, like 'left-pad'. Guess I was wrong.
If you want this to be tested by dumb people then go ahead, but I'm not gonna download some random zip if it hasn't gone through [Virus-checker](https://www.virustotal.com/)
Composing mixins (shared functionality) is something you find your self needing on a regular basis?? Not using multiple mixins on the same component... But mixing mixins with each other. Please share these common cases you've ran in to this.
Put it through virus checker idk! It is just an electron app lol
&gt; I haven't released the full thing on github yet but I will soon! At least give the link
It seems you are new to the internet lol
The possible answers are : the current number, fizz, buzz, fizzbuzz. Those are saved in an array with an index 0 to 3. Then the second set of [] extracts one of the values by giving a value from 0 to 3. When the number is neither a multiple of 3 and 5 it returns 0+2*0, so console.log( [i, ...][0] ) ==&gt; i When it is a multiple of 3 but not 5: 1+2*0 = 1, so it returns the first index of the array "fizz" When it is a multiple of 5 but not 3: 0+2*1 = 2 so it returns the second index "buzz" When it is both a multiple or 3 and 5: 1+2*1 = 3, "fizzbuzz" This all works because JavaScript is able to convert booleans returned by the === to a 1 or a 0 and make calculations with it. In another language you might have to use a ternary operation (i % 3 === 0 ? 1 :0)
Even Microsoft's security chief is saying you shouldn't use IE 11 unless you have a specific need. [https://www.zdnet.com/article/microsoft-security-chief-ie-is-not-a-browser-so-stop-using-it-as-your-default/](https://www.zdnet.com/article/microsoft-security-chief-ie-is-not-a-browser-so-stop-using-it-as-your-default/) IE10 is finally reaching end of life on systems like Windows Server 2012, with Microsoft saying they won't add any more security patches, even if you pay for the support. Of course, they're giving a year's notice and just porting IE11 to those machines, but it's something. [https://www.zdnet.com/article/microsoft-makes-final-push-to-rid-world-of-internet-explorer-10/](https://www.zdnet.com/article/microsoft-makes-final-push-to-rid-world-of-internet-explorer-10/) And a couple recent contracts I've seen have moved IE11 support to an hourly add on to the project instead of being automatically supported. It's long past time for IE11 support to be for extraordinary situations only. Some non technical people are finally starting to listen. But ultimately, as long as we continue to support it, people who still use it won't feel the need to move to something newer. If you work for an agency, make IE11 support at least cost more. If your own bosses are saying you have to develop for it, keep track of how many hours are specifically related to IE11, how much they cost--and how much money your make from customers in IE11. That's what will finally drive change.
And on mine IE + Edge have 12% combined. The problem is not that China biases the global statistics, it's that every page is different. 
I don't bother with supporting IE in my projects. Edge, of course, should be accounted for since it is a real browser but IE is barely even supported by MS anymore. So much extra hassle so one or two grandmas can see your webpage.
TIL! I'm assuming this could be done compiling typescript through webpack with some tweaks ya?
It's always better to look at your customers usage and bring it down to a cost-benefit analysis. How much revenue do users of a legacy browsers generate, how much does it cost the company to support those browsers?
There's nothing special about how console.log is used here. The funny syntax comes from indexing into an array literal. You can do that practically anywhere. 
caniuse-db puts ie11 at 5.93% in China compared to 5.92% in the US. (Lower versions are negligible in either place) I think the difference has a less to do with region and more to do with the target audience. [the US government‚Äôs sites get 9% IE traffic](https://analytics.usa.gov), for instance. Apple.com probably gets a bit less than that.
Yes, because some people have not upgraded their PCs in decades.
Here: [https://www.reddit.com/r/reactjs/comments/anpxum/rreactjs\_react\_hooks\_contest/efv5jwh](https://www.reddit.com/r/reactjs/comments/anpxum/rreactjs_react_hooks_contest/efv5jwh) You use this all the time. What previously would have been wrap over wrap, hocs, component layers, duplicated code, now turns into small utility functions whose results you can feed into one another. 
You don't need to care unless your customer requests it from you (and they almost always do)
Do you get physical copies of this? 
What about all those ATM machines running unpatched Windows XP? How will all the hackers connected to them access your website?  ò‚Äø ò
Shouldn't it be console.log(a[0].name); Or whichever index you want?
Ouch! correct, i spent way too much time trying to find the problem. Thank you so much!
Thanks. I get it now!
I'm creating a video tutorial on how to use it [https://github.com/Jacobboogiebear/Electron-productkey/](https://github.com/Jacobboogiebear/Electron-productkey/)
Thanks! Yea... A sight to behold that would be, although you'd be getting pummeled by blocks of ice the size of skyscrapers... And thinking about it I just realized it would be like the most intense meteor shower one could possibly imagine, with all of those tiny ring fragments burning up as they entered Earth's atmosphere
[Visual Studio Code](https://code.visualstudio.com/)
I second this. Plus fun fact: VS Code is writen in JavaScript ! (Electron framework)
I love your GitHub handle... Why didn't I think of that
Or more precisely, in TypeScript.
Nice stuff!!! Makes me long for spring and when the birds that went South over the winter return to the Northern hemisphere. I normally hate audio on the web, but in this particular case I'd love the sound of, say, some crows making noise. Gonna read through your code now. Love algorithms.
Thanks for the suggestion. Does it have Intellisense, debugging?
It sure does. Has a very large library of extensions for many languages.
Tried a lot of IDEs/editors and can only recommand Webstorm, if you don't feel like buying the licence, reinstalling it once a month gets you around this.
Brackets is mostly dead. If you prefer free &amp; open source - Vscode and Atom hasn't real alternative. Vscode is more popular, not so hard, many plugins. But with M$ crap like telemetry, I'd suggest to use vscodium. Atom - not easy for your hardware, has tons of superb packages, and his mega add-on for React &amp; React Native from Facebook is hilarious and has no rivals.
https://github.com/VSCodium/vscodium
What's special about it? And what if I use its trial version and upload my project commercially will they be able to sue me or have something in their policy that can screw me over?
Java, slow as shit, closed source.
It's the fastest IDE I got my hands on (Try out Visual studio and you know what slow means). Not everything is FOSS. What do you recommand ? 
&gt; Try out Visual studio LOL, nah. Vscodium or Atom (if you're highly interested in React).
For an IDE I find it lightweight and fast. Great out of the box support for js and node. Great settings/plugins sync across devices. And no they are not Atlassin ;)
He is asking about IDEs not editors ;) I'm working on a react + native project for work for a couple of months now using Webstorm, has everything I need, snipplets, code completion, plugins for RN,...
The std browser for Windows 7 is IE 11. That's the main reason.
Webstorm has great intellisense and syntax checking with no setup. Debugger is also easier to configure. Not free though.
&gt; his mega add-on for React &amp; React Native from Facebook is hilarious and has no rivals. vscode is better IMHO. Facebook IDE plugin for atom has very small community and it's mostly aimed at flow types. Also atom has telemetry by default too: https://discuss.atom.io/t/how-do-i-disable-the-metrics-or-tracking/24520
Oh they still damage their image in many ways. They got right just few tools for developers because they are isolated from M$ politics. M$ and their horrible software and attitude are and always will be a cancer.
Try p5js. Very easy to understand if you need tutorials look for Daniel shiffmans coding train channel. Happy coding :)
Game dev is always a great application of OOP principles. Things like terrain, enemies, items, the player etc. all make up objects that have properties and methods, and you'll need to think about stuff like inheritance and polymorphism while creating it.
Oh come on, its not so bad you'll see. &amp;#x200B; Besides... Where you gonna go? Where you gonna run? Where you gonna hide? Nowhere... cause there's no one like you left. &amp;#x200B;
Hi, welcome to the community. Thanks for reaching out, it's really great to see women taking an interest in programming! That's quite the assignment you were given, I hope you've been paying attention to your tutor :) I'm sure you've got the HTML5 part down and how to add the JavaScript... you just need the actual code for JavaScript right? Here you go! Goodluck! var value = 18; // random number from using https://www.random.org/integers/ const toDisplay = gt10lt20() ? `${value}is a number between 2 and 10 (inclusive)` : 'give extra credit for outsourcing work plz' function gt10lt20() { return true } // Open browser dev tools, view the console output for display in browser console.log(toDisplay) throw Error('Gal has not provided enough effort to complete assignment')
Did you pay attention in class? If not why, if you don't have an interest in it, why bother? Need to pass it for some reason? Ask your tutor or peers about the parts you got stuck on, and show what you managed to muster by yourself in future, making mistakes is ok, learn what was done wrong and why. Most things you need to do are fairly basic and a google query away. When you're stuck on something specific(not the entire thing), ask a question and show what you had managed to do/tried so far. Just asking for a solution without doing so is generally frowned upon, especially for homework assignments. Ignore the HTML part for now, use a JS web editor or whatever you're comfortable with to write the JS code and run it, then get that working up to the part you need to do something to the actual HTML content. Connect your buttons onclick to a JS method to do what you need, and update the HTML with the result.
Depends. The target group of my web app are enthusiasts that even install a browser just for running that one app, so I only support Firefox and Chrome, and we get no complaints about that. I know someone who writes software for big business, and he told me if he'd drop IE11 support, he'd lose more than half his customers ([source](https://twitter.com/steipete/status/1092745660514926594)).
How does it compare to MongoDB. Performance wise? Also is there many packages to utilize in Node much like Mongoose?
Not long after adding my sarcastic comment/solution, I got a PM titled: "Thanks For Your Help. After Lots Of Work And Stress I Came Up With This", with the code snippet you link to, but with comments added.. Lots of work and stress for OP? Damn, they've got it hard: - Ask for a solution without showing any prior effort(in original post anyhow) - Try to use gender to advantage - Gets given a solution - Add comments to solution (I guess that's a valid way to learn initially) - Claim code as theirs from hard work and stress - Give to tutor, get praise/grades
Choosing to maintain your own router is not a personal preference...it's an unnecessary cost that you shouldn't undertake without a good reason...and "one less dep" is a poor reason when it means you have to write your own router.
Can you tell me how it works? Do I need to subscribe? 
That's right. Delete all traces(your shame). Should at least have thanked(publically) the user whom's solution you're parading as your own.
Atom and VSCode are just as capable? Atome has it's IDE package, VSCode I'm not too familiar with but iirc has debugger support and such by default. What is Webstorm offering you that VSCode or Atom cannot? I used Webstorm a few years ago(had a license). But I definitely recall it being slow or heavy on resources at one point, no idea what it's like now, just haven't had any reason to go back. It was more friendly as a newbie though, I recall some features just being there by default where Atom would require some configuration/packages to do(and didn't have it's IDE offering back then).
I imagine so!
So? They're going to progressively find the internet break on them as time goes on. They clearly don't care about security, and probably no incentive to upgrade their browser until their use of the internet is no longer functional for their needs. Only time they can't upgrade is because it's a work machine(in which case same reasons apply, just requires the business to handle the upgrade) or they're on such outdated hardware and unable to get something newer(though they probably could install a newer OS or Linux, just if they're technically inept, or it's too much work to them, they'd rather not try?). Don't let such users negatively impact the majority unless it's actually worth it. If your analytics show a large user base with outdated browsers, then cool, not a case of few negatively impacting the many then, keep your users happy.
Sometimes a customer requests something because they can or don't actually have an understanding of why they're requesting it. Yeah, they want cross-browser support and broadest reach possible to reach users, but give them relevant stats and throw in the cost/tradeoff(extra $ if you have to do the extra work, else impact on majority of users, plenty of articles about loading speed affecting a users retention).
[removed]
why?
&gt; Please share these common cases you've ran in to this. [Here's an example](https://reactjs.org/docs/hooks-custom.html) You have the base hooks like useState and useEffect, but when you have a group of logic for handling that which is relevant to pull out of a component and/or share with other components you can use a custom hook, and that may be composed within another components to use with it's hooks. Or is the mixin thing different?(I don't know about React's history with mixins and I'm not familiar with Vue)
Well, it does depend a lot on what kind of dependencies you‚Äôve got. But generally it should be possible to bundle all dependencies that don‚Äôt make external API calls (except native node api). You could just exclude the few that could not be bundled, and install them as usual.
I‚Äôve got a beefy machine and have never noticed issues with any IntelliJ software. I‚Äôve tried Atom a few times but I just don‚Äôt get the appeal. It doesn‚Äôt feel like an IDE to me at all. Maybe I just didn‚Äôt configure it properly?
‚ÄúCheaper‚Äù, most likely. 
&gt; I‚Äôve got a beefy machine and have never noticed issues with any IntelliJ software. I think I experienced them in 2014 desktop with 16GB RAM and an i5-2500? So bit of an old machine, no SSD back then either. &gt; It doesn‚Äôt feel like an IDE to me at all. Maybe I just didn‚Äôt configure it properly? It wasn't ever really one in the past, you got a text editor and would extend it via many packages to tailor it to your dev needs, that was one of the appeals to me, as well as being html/js which let me add my own packages or modify existing ones. I think when I moved to Linux it might not have looked well/integrated at the time due to UI toolkit?(I don't think that's an issue anymore). I used [PlatformIO](https://platformio.org/platformio-ide) back in 2016 for embedded dev, it transformed Atom(and later VSCode), which gave me nice IDE like setup for doing embedded dev without having to use a different app(some which were proprietary iirc), so no sacrifice of features or re-learning stuff. There was also some niche packages that were useful for whatever else I was doing at the time, but as they were for improving DX with small open-source projects/libs, their editor support was limited, Atom would benefit in those cases from it's ecosystem and lack of paywall I guess. Like PlatformIO, there were some similar packages that'd convert Atom into a more featured IDE, Facebook had Nuclide for React dev and there was something like tomahawk as a similar package for Rust dev... problem though was they would conflict with one another and iirc activating one would affect all open Atom windows which wasn't a good experience if you had a need for more than one. In past year or so Atom pushed out the official package for building IDEs off([atom-ide](https://ide.atom.io/), which should provide a more unified integration layer, I haven't tried out any of it, but maybe if those packages updated, you don't get the same issues.
It doesn't just fix Edge, it also provides a Microsoft -owned alternative to IE for older platforms.
Are you looking for something that works without being installed? How would you like this tool to work?
Any case that you use hoc is a use case that hooks can replace. It's not just shared functionality. You are missing the point of hooks. Every stateful container you compose has multiple composed hocs embedded some of which increase the Dom footprint and make react have to do more work. I think the latter is the entire reason hooks even exist that is it's primary problem solve. Reduce the Dom tree.
Every bank in Poland we sell our app uses exclusively IE (in intranet, so exclude that from global stats). It's hilarious because some want things like Docker but will never move away from IE11, since it's supported in Win10 for the lifetime of Windows 10, so maybe forever.
&gt;And what if I use its trial version and upload my project commercially will they be able to sue me or have something in their policy that can screw me over? You need to do a hell of a lot more research here kiddo, you got no clue what you are talking about.
I would like to say it depends on what your product audience target and the country as well. You could use the polyfill to support IE9 and use the BrowserStack to test it.
I don't mind external document generator running through command line
This is ridiculous, IMO. It sounds like you're basically saying, "Can I get in trouble for not paying for the tools that I use to make money?" If you're doing stuff that is meant to make money, how would you feel if someone circumvented your system to not pay you? If you like the product and there's a charge, pay the damn charge and do it right. If you don't want to pay, don't use it and find a free alternative. 
* https://news.ycombinator.com/item?id=16993777 * https://news.ycombinator.com/item?id=18209082 Atom telemetry can be **really** disabled. &gt; **Facebook** IDE plugin for atom has very small community LOL. Check your words *again*. VScode is small&amp;fast editor by design, [Nuclide](https://nuclide.io/) - IDE by design. A couple of community packages can't compete with code diagnostics, auto fix, extended debugger etc, MS sells it all in Visual Studio.
Adding a "You need to upgrade your browser" page takes - /+ 30 minutes. I consider that as IE support. And saying that, most of my stuff doesn't support it. 
Here are what I have experienced: * create-react-app: to develop libraries. * next.js: to develop the main web app (SSR support). * SSR: help to speed up the first meaningful pain. * gatsby: to develop the static site (e.g. the career page, the landing page, ...) 
Yeah, the SSD really does seem to make a difference with a lot of things, although I‚Äôd expect for these kind of stuff memory and CPU would matter more. Who knows. Maybe I‚Äôll give Atom or VSCode another go. I was trapped in Eclipse land for a lot of time out of fear of learning something new, and after taking the leap from there to IntelliJ I‚Äôm much happier. That being said, I did try Atom in between and was unimpressed. As someone who was writing code in a half dozen languages, IntelliJ Ultimate + Webstorm etc really impressed me for just working. But now I‚Äôm somewhere where I would have to pay for it myself, so I‚Äôm definitely unwilling to buy the whole suite.
To reiterate what everyone else is saying... Visual Studio Code! 
Cool. Somewhat similar to my post 
You buy for either $1, $8, or $15. Each level gets you more books. I did $15 which gets them all. After payment you get to download them all in either PDF, Mobi, or EPUB. They also had a way to send them to your Kindle.
That is a very good question, it's not well explained, including in the specs and mdn docs. It looks like it apply to map.forEach() only, and not to Array.forEach(), which is unclear, can't tell more here, not using! [https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.foreach](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.foreach) [https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.foreach](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.foreach) [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
Stupid question but I‚Äôm guessing these are epubs/pdfs? It‚Äôs a long shot but I would love it if these were physical prints.
the company I work for has around 1-2 million unique sessions a month, we don't support IE.. we don't really test on Edge either but I guess most parts should work there
Great work! Have you considered releasing a version that uses Hooks?
The footer contrast could do with some work, the active state is a sort of grey that's pretty hard to read
No.
Yep.
Thanks a lot man! Yeah I thought about doing a version without Hooks! I don't know if I should release that version early on or later on the series.
It can also be done with a single script tag with proper server support. The only real dilemma is do you do an IsA("I.E.") vs a bunch of HasA, probably need some of each.
Not yet, but I was going to try later this week. I only saw it earlier today though. However, anything I can do to speed up my builds is welcome.
You have kebab-case and camelCase mixed up!
&gt; looks super elegant No it doesn‚Äôt.
Hi /u/danz1ka19, this post was removed. For javascript help, please visit /r/LearnJavascript. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/bbbutAmIWrong, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ubersapiens, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CortexExport, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I like hooks, but a good uppercut is way more devastating.
Thanks for pointing out the mistake. I totally mixed up pascal camel and kebab cases in my head lol. Cheers mate.
Ah well, still a good value. I should really get a Kindle. I don't mind digital prints but I don't fancy reading long form text on a colour screen for hours at a time. 
You're a bad developer if you think accessibility hurts the usability of your website. 
Most of the books are pretty dated, the CSS one, for example, is from 2010 and talks a lot about the "new" CSS 3 features. The Javascript one is alright (released 2015), but imho the whole bundle is not worth buying if you only want the js book.
No problem. I think the earlier, the better!
Great for hanging stuff.
You can always debug in the browser! [Even node code!](https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27)
You should watch Kyle Simpson videos along with lynda learning. And read lots of books and articles around each topic. That will give you explanations from different perspective which leads to better understanding. I am doing going to start the same. &amp;#x200B;
I'd rather have Tinkerbells
Hello my koala dude. I'm on my phone old S5 neo and gotta say right away your UI is very pleasantly traversed, i havent explored the game options but I did press plqy and Jupiter got hit with something and it looks awesome! Keep up the good work.
Thanks for the feedback. 
I've fixed it, dont worry
Do you want to avoid node because you don't want to have to integrate it into your project? Or are there other reasons? If the former, then you should know you can still use tools like JSDoc without touching your project at all. But you will still need node to make them work. Once you install node, and then install JSDoc, you can use the command line to invoke JSDoc to generate your docs without having to mess with your project configuration. It would operate separately and just read from your existing files. 
&gt; I migrated a few class-based components in our codebase at work with mixed results. Why? &gt; For now, I‚Äôd recommend against efforts to completely refactor existing classes to use Hooks. In general I hope that when Random New Feature X comes out people are not migrating refacoring their working codebases. 
Never tried it. But e.g. for SASS to CSS I use libsass (written in C) instead of dartsass (written in Dart) as it is twice as fast. So if it works as a drop in replacement, it's nice. But I guess we only want those native transpilers, because webpack caching strategy is horrid. I used the bundler fusebox a few times (https://fuse-box.org/) that already has proper caching. If you build once, every other build just takes a few milliseconds. upcoming webpack 5 promises to improve caching btw (https://github.com/webpack/changelog-v5/blob/master/README.md). So if webpack 5 holds the promise, maybe transpiling isn't where your cpu time is going.
Our team thinks that there is value in testing out new features to see how they can improve our code and workflow. We try to stay up to date with React and instead of diving in at the alpha phase, we waited till they hit a major release (16.8) to try them out. There was no major refactor that we underwent. I rewrote a sample of components that seemed like good candidates for Hooks and this article is my takeaway from that experience. I agree that you don‚Äôt want to refactor a working codebase whenever a brand new feature drops but there‚Äôs definitely value in trying new APIs in a framework that you use daily. You never know what you‚Äôll learn.
While development environment isn't that huge of a problem, although each and every second helps and it would be awesome if it would shave of a few, it's the deployments. Compiling assets takes time and caching isn't really an easily implementable option there. Although perhaps there are some technologies which could address that, I'm not entirely aware of.
I agree. There‚Äôs something more ‚Äútangible‚Äù about writing game objects that helps solidify OO concepts. 
Sounds of nature is a good idea, I'll have a look. Hope you find my code useful, getting quite an addiction for algorithms atm
Thanks for explaining!
Pretty cool! Will check it out on Monday Would it break on changing node versions like node-sass?
Wow this is so clean. What did you use for making the site? Fantastic UI (the pane and the site!)
&gt;Hooks are a controversial evolution of React component development. Are they really though? It seems like the vast majority of people are praising hooks.
I'm using just the parser for a JS static analysis tool that I'm trying to write in Rust and that part has been great. Haven't tried the full compiler yet.
https://news.ycombinator.com/item?id=18302162 There‚Äôs a lot of comments on the initial announcement that criticized this pattern. It seems the bulk of criticism comes from the less explicit API, the rules for using Hooks, and the shift away from classes on the basis that they confuse beginners. I‚Äôve seen equal parts praise and criticism so I found it to be controversial.
No idea. Just seen this on Rust subreddit. Gonna try it out tomorrow at work.
That's interesting, but it was also from 3 months ago when hooks were brand new. I'm wonder if those criticisms/worries are still present now that the community has had a good chance to dig into hooks.
I agree the community seems much warmer to Hooks now than before - personally I like them. It seems when they released 16.8, the HN crowd still had some gripes: [https://news.ycombinator.com/item?id=19093555](https://news.ycombinator.com/item?id=19093555)
Vim
Electron isn't really all that bad. If the game runs fine, then literally nothing else matters.
Hi /u/Tonysaya18, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Wow! :O neat work!
I Fucking hate immutable JS and here is why. &amp;#x200B; 1. The cognitive load in handling primitive JS data structures. 2. Its fucks up the codebase by spreading its syntax everywhere, You can not get rid of it easily if you want to. 3. Every time I try to modify any immutable JS structs I have to look up the documentation, Try doing similar modification in JSBin. 4. In most of the time for complex modification I give up on the API and use toJS() and fromJS() even though I know I am doing a mistake and it will hit the performance. 5. toJS() and fromJS() seems like the easy way out rather than reading the documentation and following the syntax of immutable JS and it negates the benefits you get by using immutable JS in the first place. &amp;#x200B; So Fuck immutable JS, I will explore something that does the same stuff and is easy to use. Doesn't introduce new syntax to modify JS structures. &amp;#x200B; Through God's grace I found Immer.
Could you elaborate on these security reasons?
I‚Äôve got a project that is nearly finished using React and Node. I‚Äôll give this a shot for my build later and see how it goes.
You're absolutely right, the title is not as good as it should be. LemonJS is quite similar since it offers a small layer on top of WebGL to make it easier to use, it's especially a more accessible WebGL if you prefer. To make it all more accessible, we would have to add another layer (we can imagine React components to be trendy). The idea is mainly to have a base next to tutorials to test and see how it works.
In our case we just use the security argument as leverage to pressure them into getting newer browsers. (Nevertheless IE has historically had more security vulnerabilities then other browsers because of its close relationship with the Windows kernel, but that's a topic for another time.) 
wow this is awesome haha! Thanks!
Generally when developers work on Javascript, they load the code in an editor and open the HTML file or website that it relates to it in a browser. Editors don't render the view properly so it's best to just use the end product - the browser. There used to be applications such as Frontpage or Dreamweaver, which would render the view, but those always ended up looking different than what the browser showed so people stopped using them. You can use playground websites like JSFiddle, or Plnkr.co, or Codepen.io. These aren't true editors, just tools to create example code.
So it sounds like a pretty blatant lie for personal gain?
What kind of software do you suggest to use then? is there software that has like an easy way to export the code to browser format of something like that?
Do you mean an IDE in the browser? If yes, check out [https://stackblitz.com/](https://stackblitz.com/) or [https://codesandbox.io/](https://codesandbox.io/) Or, if you meant displaying the code nicely, like in a presentation or blog post, [https://carbon.now.sh/](https://carbon.now.sh/) might be your thing.
If you want to see JavaScript code, a which way is to do a search for 'github javascript'. The top hit is likely to be for trending javascript repositories. Any files in a repo with a `js` extension will be JavaScript. 
After buying the $15 bundle, I realize you are correct. This should be upvoted more.
Use VSCode or Sublime as an editor. These are a good starting point. There are tons of other editors, and you can even use Notepad (Windows) or Vim/Emacs/Nano/Gedit (Linux) if you wanted. Javascript has no editor barrier because it's just text. The code doesn't have to be exported to the browser because the browser interprets Javascript itself. You can simply create an HTML file and write your Javascript in that. You would have to know how to write the code and I would hope that you're already finding tutorial links. [Here's one](https://javascript.info/first-steps) that has the example HTML code you need in the first lesson. Just copy the "Hello World" example to a file and call it "hello-world.html", then double click on it to open it in your browser. Once the file's open in your browser, open the file in a text editor (such as VSCode), and change the `alert()` text to say something else. Save it and then go to your browser and refresh the page.
Thanks! Still feel like lots of improvements could be made for the mobile gui, but I've thrown some media queries in there to make things palatable for mobile users, and when I have more time on my hands than I do now I'm gonna put some effort into making it sexier and easier to use on mobile devices... Maybe even port it to React Native as a learning experiment (never used it!).
Thankiepankie! 
No self doubt required as far as I can see with mobile devices, it is working fine even rotating the view universe
Mmm... Yea, need another fix soon enough
When you say web component, are you referring to a custom element that extends from LitElement?
No. It's true but it's just not the primary factor for us dropping support for it. IE10 was released in 2012. It's tightly woven into the windows kernel which is why you can't really uninstall it (you can at best disable it). That makes it more vulnerable, which is all the excuse we need to stop supporting it. We're not going to waste time supporting a crappy 7 year old version of a crap browser.
&gt;not just using prettier in 2019
How does the app communicate with Google Slides? I mean, what data does your server have access to
That is dope
Okay, can we take a step back? I'm confused - what exactly do you mean by 'inspecting' web assembly? How are .wasm files uploaded into this online tool? What exactly is the use case here?
*Woah!* It's your **1st Cakeday** dev_michaelz! ^(hug)
I made the file, and for some weird reason when I open it in html form in a web browser it just displays the code. (I've used html before and it never did that) I'm on a mac if it makes any difference. Do you know why it would do that?
Companies analyze well what the onboarding ramp looks like for a candidate. For that reason, it‚Äôs good to handle yourself well with well known frameworks. If you‚Äôre interested in being a frontend engineer, musts are: - HTML - CSS - Javascript On top of this, I would learn a known library like React, or larger frameworks like Angular. 
Just to add to my comment: the CS degree is a great way to prove you‚Äôre familiar with not just web programming, but the basic principles of computing, good practices, abstractions, algorithms, and managing data structures. 
Hi /u/razroo, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
The most simple thing to do is adding the script tag at the end of your body, but before you do that, analyze the reasons for this. What sort of problem are you running into? Is it that the DOM isn‚Äôt ready and you‚Äôre doing DOM manipulation? 
[https://github.com/m4r1vs/slidecontrol/tree/master/slide-control-extension](https://github.com/m4r1vs/slidecontrol/tree/master/slide-control-extension) just injects the "slidecontrol" button into the DOM of the google slides edit page. When you hit "start slidecontrol" it sends all the notes in HTML and the currently active slide to [https://github.com/m4r1vs/slidecontrol/tree/master/slide-control-server](https://github.com/m4r1vs/slidecontrol/tree/master/slide-control-server) &amp;#x200B; Hope that answers your question :)
thanks mate!
Depends on a lot of factors and how you define that the page has loaded. But I am going to assume the following will be fine for most use cases: document.addEventListener("DOMContentLoaded", function(){ //your code here }); This will run once all the dom elements are in the page, which is probably what you want.
We have a pretty complex app at work. When we hire a "junior programmer", what we're looking for is someone that understands how to write Javascript. They should be able to solve basic problems ("this button stopped working") after a few weeks or getting up to speed on the code base. We typically start them with incredibly easy problems that we could actually knock out in an hour, but we give them days or weeks to get there, along with help figuring out how things work. They need to understand HTML and CSS well enough to troubleshoot issues with it as well. Again, basic stuff, not the hard crazy stuff that sometimes comes up. To help determine if this is the case, we give them a simple test where they must write a webpage that interfaces with a common online API and display the results, formatted to our (easy) specifications. We have deliberately left a couple of those specifications a little vague in the hopes that they will either suss out the correct implementation, or ask for more details. Any implementation that matches the spec will work, even if it isn't what we really wanted. (We know it's vague.) In the end, we've found that programmers that fail the "vague" portion of this test are unlikely to work out. All of our best hires have figured it out, and all of the ones we have had to let go did not. And if they miss *any* of the non-vague specs, they *never* work out. In other words, we need people who are detail oriented. People who aren't detail oriented end up closing tickets that aren't actually finished and wasting everyone else's time. Now, I prefaced this by saying we have a large, complex app. That's because I don't think *every* company expects this much of Junior programmers. I think some companies are a little more willing to accept someone who doesn't know what they're doing yet. But I'm also pretty sure those companies pay less, too.
Yup. There are a few ways of going about it. ###First Way You can add `&lt;body onLoad=‚ÄúmyFunction()‚Äù&gt;` to the html. ###Second Way You can put `window.onload = myFunction;` at the bottom of your script ###Third Way You can create a self invoking function in your script that will run automatically when the browser is parsing the html. In your script write this: (function () { // write code here })(); 
I have not looked at the code but your ui looks good, actions seem responsive, I think you can be proud. For high-school this is really impressive. 
I really like this article! Realistic scenario that is greatly improved by the refactor. Keep doing these!
Feel like this is finally the time to try react now that they've adopted hooks.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Forget about web assembly. This post has just been a small foray into the possibilities that the modern web platform allows. To understand what Linux on the Web (LOTW) is really all about, you might just need to forget about the "on the web" part, and just focus on the Linux part. The backend server exists mainly as a convenient way to install files that are only going to be used locally, just like any other operating system. In the shell environment described above, everything in the filesystem is local... except for /site. You can think of /site, as the mount point into the backend server, which you see when going to [https://linuxontheweb.org/](https://linuxontheweb.org/desk.os) . The first command shown above just copies that wasm file (which is automatically installed into the local system if you use the nes/gameboy emulator application called Nineteendo) from the server into your home directory, which is, by default, /home/user. If you login to the site and set a username like "joesmith" (see [https://linuxontheweb.org/desk.os](https://linuxontheweb.org/desk.os)), then the home directory will be /home/joesmith. So basically, this is not really an online tool as much as a next-generation, highly portable kind of userland operating system. From my perspective, the use case is really just taking general computation to the next level with all of the tooling that the web platform makes instantly available to anyone who is interested, in order to start cranking away on the real problems (eg climate change and resource depletion issues) that the world will be facing in the decades to come. I've been working on this since 2012, and it is only now starting to develop the kind of stable foundation, so that I can start putting time into publicizing it.
That sounds like a very good system. It sounds like the junior programmers need to know their stuff then. That‚Äôs good to know since I was planning to apply to a similar position. I would honestly hate to get let go because I don‚Äôt know what I‚Äôm doing lol 
I am, thanks! Just really happy how it turned out not having done lots of JavaScript before :)
I legitimately thought this was /r/programmingcirclejerk for a second.
The server runs on your machine, right? So you get access to the full slides? Sorry if I misunderstood something
I like the concept. It‚Äôs practical, simple, and useful. I read your server side code and it‚Äôs readable, you‚Äôre checking connections haven‚Äôt been lost, checking for edge cases here and there, you‚Äôve got SSL. Great job! This is way more than I was doing when I was in high school. You should be proud. Keep working hard and you‚Äôll find success!
When you click on "start Slidecontrol" this is send to my server: { reason: "create-slide", notes: "&lt;h1&gt;notes&lt;/h1&gt;", activeSlide: 2, totalSlides: 5, title: "My Slide" }
Very nice OP
Damn, didn't knew it exists, great stuff :D
Holy shit this is great! Fantastic idea! I really like the UI too.
Who spells it ‚Äúgiph‚Äù?
Thank you for taking your time checking it out! Really appreciate it 
Thanks!
Just use "defer" attribute on script tag. See: https://stackoverflow.com/questions/10808109/script-tag-async-defer
Prediction: WebAssembly support landing in all browsers makes using the same native code from both node and the browser an actual possibility. A couple of major projects will be re-written in Rust under the guise of performance, and it'll spark a huge land-grab just like the npm ecosystem had early on. Re-writing a library in a new language isn't particularly hard or novel work, but it's an easy way to pad your resume with a project that has a lot of github stars and a lot of weekly downloads. People love the words "performance" and "rust" and "webassembly", so these drop in replacements are going to upset their pure js counterparts almost overnight. Thousands of PRs that just switch out libfoo for libfoo-rs.
[https://giphy.com/](https://giphy.com/) , the api of gif provided using giphy... P.S: spellng are jusst mixture of letters.. u mast get wats it is meant.
I stopped when Google's linter told me to. I liked not having to know which modules were defaults haha
I was thinking about your last comment and realized I may have not clarified something. The web app I'm referring to in my original post (the one primarily used by law enforcement and fire departments) is a SaaS app that's financed and operated by a client. We built, host, and maintain the web application, while the client runs the business the application is used for. So we're not pulling an "Apple" and forcing these agencies to buy an updated version of our software. Hopefully that clears the air.
May i ask why you chose the have a node server for communication and not just a PWA that communicates directly? Besides that great job!
Take a look at freecodecamp, if I was starting to learn js from scratch today I would use it.
&gt; Re-writing a library in a new language isn't particularly hard or novel work You've clearly never done this, then. It's a _major_ task to undertake. And maybe instead of completely dissing Rust, you could at least consider that performance is important to a ton of people, including myself. _At a minimum_, swc is 16x faster, single-threaded. That's an enormous improvement.
It's not compatible with Babel plugins, it reimplements them. And there are still quite a few that are missing. And no equivalent for one of Babel's best features: `preset-env`
Yes, this is achievable - a simple example would be: `let str = "one two three four";` `let res = str.replace("three", "&lt;em&gt;three&lt;/em&gt;");` 
I wouldn't be so optimistic on performance part. As I think a lot of things in build time are not exactly due to language operation per second speed. However, if it could shave off a meaningful amount of minutes from deployment time due to long asset compilation time, our team would be very happy. Although I have to admit I'm a bit cheering for this working out. I like Rust. I would like to see it succeed in front end things. Being able to empower javascript to do tasks one would usually delegate to server side feels quite powerful.
It's rough, but we only let junior programmers go once they've proven they aren't capable of learning from their mistakes. Don't let it scare you out of applying, though. It would be better to try and fail and get the experience than not to try at all. For fun, try a slightly simpler version of our test: Write a webpage that can query Flickr by AJAX. Request and display 25 results based on the text the user inputs. Display the results in a vertical, scrollable column with the images shrunk to fit the width of the scrolling area, but not enlarged to fit. This is something that we figure a senior programmer can do in a few hours, tops, but we give junior programmers a week to do it on their own time. Most applicants don't even turn anything in and just give up. Many that do turn things in have obvious bugs or don't meet the specs provided. Only a very, very few do it perfectly. Get someone else to test it for you and you can get an idea of how you fit on that scale.
Your script.js tag is loaded before jQuery so you can't access Jquery in your script
You include your script before you include jQuery. But the script at the bottom of the body and it should work. 
This is super useful, thank you man
This is super useful, thanks for the advice!
I truly do not understand why so many React developers use `export default`. In my opinion there are only downsides with using it.
Hi /u/aym4ne, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/connor5891, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
OK thanks
I work for a major corporation building a fancy new web portal using state of the art technologies and standards. Our users are technologically illiterate bureaucrats who seem to not even understand what a web browser is and still largely use IE. Also we're building in machine learning to parse the replies they send to email notifications because the users don't understand that they are just automated notifications nor do they seem eager to log into this highly fancy, painstakingly built portal. A part of me just dies inside thinking about this...
Ah! Thank you. Man, I thought it was something in the code. Not the order of link placements. Is it better to just download the files and install them? All I needed it was for this simple exercise so I linked to the CDN. Also, now my next obstacle will be to close the data. Right now if I keep clicking on the button it will reload it ad infininum. Didn't intend for this mini-project to get too complicated!
Thank you, that did the trick.
A lot of coding standards recommend using only a default export if there is a single export in the module, and only named exports if there are multiple - no mixing of the two. I try to follow that line of thinking in my code.
Check the file extension. It has to be .html
https://github.com/airbnb/javascript/issues/1365
&gt;const list = require("./list"); &gt; &gt;In this context, what would you expect list to be? It‚Äôs unlikely to be a primitive value, but it could logically be a function, class, or other type of object. How will I know for sure? I need a side trip. In this case, a side trip might be any of: &gt; &gt;If I own list.js , then I may open the file and look for the export. &gt; &gt;If I don‚Äôt own list.js , then I may open up some documentation. &amp;#x200B; How do named exports make this better? `import { List } from './list'` Is it a function? A class? Some data?
We have a pretty complex app at my workplace as well, and I found your description of the expectations placed on juniors to be quite forgiving. Our expectations are certainly similar, but days or weeks for something that would take an hour seems excessive. We make it clear that we dont want people just spinning their wheels, and if they feel stuck to ask questions. On the same note, all our senior devs are great at answering questions in a way that's helpful but isn't doing all the work for them. I'd say if something should take an hour, and they don't get it in a day, they're either not asking for help when they should or theyre just not cut out for this line of work. So far, we've only had to let two juniors go since I started. Others have had issues that were sorted out with guidance, but man those two were really something else. It's kind of mind blowing when the boss men who are the last line of defense for just about everything end up hiring a complete jabroni and/or fraud. Just goes to show how hard hiring can be, I guess. 
It's a Class.
Holy shit, the entire advertising industry has been migrating to google slides, this feature would be a GODSEND 
I love this because not only bc I've needed something like this for a while, but because your implementation is incredibly polished and functional. The QR code scanning was very thoughtful and it seems like this could even work for multiple presenters. I congratulate you on tackling such big high school semester project.
not to mention that 'list' being a noun and verb, therefore further adding to the ambiguity. 
I so needed this at a recent hackweek. Great work. You should look to apply for summer of code!
Can you provide some sources for this? From an application standpoint, IE isn't 'less secure' than Chrome/FF. If im not mistaken, your point about it being in close relationship with the windows kernel is true with any browser running on Windows, not just IE. &amp;#x200B; I agree with /u/CreativeTechGuyGames \- This seems like you are being dishonest(or if it makes you feel better, 'stretching the truth') just to avoid extra work on your behalf. 
Do we really need more articles on this topic?
I mix the 2 in one file for connected React components. I need to export the unconnected component for unit testing, but otherwise the connected component for all other cases. 
It‚Äôs a find question. What have you tried so far?
I honestly don't even know where to begin. 
I think it is an exercise of being thorough. Covering all possibilities such as the number being one million or 0. How to handle numbers like 13. 15 It is quite challenging, and can show them how you think 
Since the words for the numbers depend on the digits place ( ones, tens, hundreds, thousands etc) split the number up and each digits place would be a switch case or better yet a map of each. The only ones that might be tricky is the tens and ones place in ones/tens thousands/ten thousands as they hyphenate or just end if the ones is a zero. Then most likely concatenation them all at the end.
Don't even think about javascript or any other programming language first. How would you teach an alien to do this? Assume the alien was incredibly intelligent, they just don't know how to say numbers yet. Describe the rules and steps, and you're more than halfway there.
Heres a good solution written in Python https://stackoverflow.com/a/19193721/6642089
I think it‚Äôs a good question. I‚Äôve implemented this before out of curiosity/for fun. Once you spend a little time thinking about it, it‚Äôs fairly straightforward.
I'll give you a hint. 1. Define the limits of N i.e. N can be anywhere from 1 - 999,999 2. The decimal system has 10 numerical values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 3. The decimal system also *place* values: ones, tens, hundreds, thousands, tens-of-thousands, hundreds-of-thousands.
Yet another dat.GUI alternative, and that's a good thing. Thanks for this. What I'd love to see is a simple API for embedding custom components. 
Is that a question?
I mean... yes I have? Honestly this wasn't meant to come off as positive or negative, just as a prediction. I wasn't dissing Rust at all, I really enjoy the language and I'm _excited_ about the land grab. I'm currently working on getting [syntect to compile to wasm](https://github.com/heyimalex/syntect_wasm) as an alternative to prism, and I've been working on and off on a drop in replacement for fuse written in Rust. Is it _that_ controversial to point out that Rust and WebAssembly are fashionable?
Currently on my phone so I can just give you my logic I'd make an array of objects containing numbers from 1-19 + all tens(i.e. thirty,forty) , hundred and thousand. My next step would be to make a set of rules for the random number that is outputted , if it contains x strings apply these rules: 1 - one - one string 13 - thirteen - 2 strings self explanatory 123 - if it has 3 strings , output 1-9 for first string + hundred. + second string represents a ten 2 ( from the 20,30,40,50 array) , unless it is a 0 in which case we make an else situation,and the third string is again from 1-9 1234 - first string's a thousand second is hundreds ( two + hundred ) and here if it has 4 total strings the last two strings get checked and then get matched , unless one or both are zeros , in which case you specify the situation. I'm sorry if this isn't the answer you were looking and I'm also sorry for the shitty formatting, but I'm still a learner who's laying high in bed and writing this long ass post instead of going to sleep. 
LOL I appreciate it! üòÜ
Focus on triples and join with ‚Äúthousand‚Äù as a separator (when N &gt; 999). Skip zeros as they don‚Äôt translate to a written word. Handle everything up to nineteen as one case, since everything thereafter is just two numbers concatenated (twenty one, thirty five, etc.) Hundreds place is the easiest since the pattern is the same (nothing for zero, one hundred, two hundred, etc.) I‚Äôd go right-to-left and reverse at the end. Example: 376517 Right-to-Left: [ [‚Äúseventeen‚Äù, ‚Äúfive hundred‚Äù], [‚Äúsix‚Äù, ‚Äúseventy‚Äù, ‚Äúthree hundred‚Äù] ] Reversed with separator: three hundred seventy six thousand five hundred seventeen
Ah I see. This is very helpful for me to grasp the concept. Thank you for taking the time. 
Javascript running in a browser really doesn't get a lot of control over the system, and that's quite intentional for security reasons since making it easy for malicious actors to screw with people's computers is very much bad juju.
Do you guys know how I can then reset it? After they click on it and it shows the names, if they click on the button again I want it to close the data shown and then reopen again if they click again. For now I've put `$(".load-info").off()` just above `$.ajax({`. `hide()` and `toggle()` also work while removing the button entirely. 
You‚Äôre welcome. Best of luck on the search.
I work at a place that has small projects being started from ground up a lot. Because I was just getting started up on a project where I had only a couple components written, I got started on hooks with those. Rewriting those components was pretty quick but I found testing to a bit of a mixed result still. You'll see a bunch of issues across various React testing libraries complaining about the act() error.
For being in high school and the requirement being to make a web page, you went above and beyond and should be super proud of yourself. This is a really great idea. You have a bright future in development if you're planning to go that route. 
I kinda wish articles about `this` in js had their own subreddit so people would stop posting them here. I'd suggest putting it in the FAQ, but [it seems like mods just don't give a fuck anymore?](https://imgur.com/SRQAk32)
&gt; if you think accessibility hurts the usability of your website. I'm not against accessibility. If you're visually impaired there isn't a lot you can do about it for example. If you're technologically impaired, often there is something you can do. Where do you draw the line of what's acceptable for "accessibility"? - Are you providing a noscript version for those with js disabled, and going through great lengths to have an alternative site that's not quite functional for something that is rather reliant on JS as an interactive app rather than static site? - What about those CSS3 styles and someone on such an old browser that you need to cater for CSS2 only? - Those users all over the world that don't understand English, why aren't you delivering your website in their language? - Does your website still work for users on Win 3.1? Is it terminal friendly? Is it smartwatch friendly? etc.. As a good developer, you have a good idea of the demographic you(or your client) are targeting. You want to provide the best experience you can to that majority. Where it makes sense to(time/financially), you may also cater to smaller groups of users you expect to encounter, such as making it usable for the blind with things like ARIA roles to assist screen readers, and properly navigable by keyboard. With catering to users with outdated browsers, if it's minimal effort(things like just transpiling to ES5), and that's not going to negatively impact the majority of your users much, go for it :) I think someone here even mentioned a way that will deliver ES5 to those users while serving up the modern JS version to users with capable browsers(lighter payload which benefits both you and users(bandwidth and time to load), more efficient on resources(better power savings)). If you have to do more work, charge accordingly if it matters to the client(otherwise if it's your own project, if it matters to you, and if you're tasked by an employer...well it's just like a client, if you're taking more time to support such you're getting paid more to do so..). But yeah... I must be a bad developer for taking a pragmatic approach. 
I kinda agree. Arrow functions have defused the 'this' confusion. In 5 years the new breed of JS developers will build a framework with everything is stuffed into 'this' and they'll think its revolutionary.
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 511.1 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about interview advice. But, I'm only ~32% sure of this. Let me know if I'm wrong! Have you checked out CollegeGrad, HuffPo, LiveCareer, etc.? They've got some great resources: * https://collegegrad.com/jobsearch/mastering-the-interview/the-eight-types-of-interview-questions * http://www.huffingtonpost.com/rana-campbell/10-ways-to-rock-your-next_b_5698793.html * https://www.livecareer.com/quintessential/job-interview-tips * http://people.com/celebrity/worst-job-interview-answers-askreddit-answers/ * https://www.thebalance.com/questions-to-ask-in-a-job-interview-2061205
I cant see anything bold, so not sure if u highlighted some code - but here is something i wonder about &gt; onEvent("lastBtn","click", function() { if(arrayIndex &lt;= 0){ arrayDisplay = favoriteThings.length; arrayIndex = favoriteThings.length; Maybe you need to check the index you are intending to use (last of the array) which is not favoriteThings.length; but favoriteThings.length-1; &amp;#x200B;
My perf issue with Webstorm I think might have had to do with it doing some background sort of work/indexing for features such as autocomplete. Can't remember what projects I was working on, but perhaps it was going through `.git/` or `node_modules` pointlessly for some reason(I think it's meant to ignore such by default, maybe it wasn't default back in 2014 or a bug caused it). I also remember a project wide search for a word bring Atom(only the windows version) to a halt, locking it up as unresponsive until it was done(and it was quite slow at doing so via what I assume was JS), but I think I may have experienced similar with Webstorm at one point too(I recall some experiences where it was taxing on resources that bothered me). &gt; Maybe I‚Äôll give Atom or VSCode another go I don't think there's much need to if you're happy with Webstorm really. I can't comment on VSCode but it's similar to Atom afaik(though slightly better defaults or something?), it does get a lot of praise and I've been considering giving it a look despite being mostly comfortable with Atom. With Atom you'd want to give it a proper try by looking into common/popular packages that users use, maybe theme can sometimes make a difference, etc. IntelliJ is still pretty neat though afaik, I never really used Eclipse but had used an IDE prior for Flash development based off of it iirc, FlashDevelop I think it was called, I similarly had fears about moving away from it and especially having to pick up a whole new language, Webstorm definitely gave a nicer default experience into JS than I'd have gotten with Atom(which I think was released that same year(2014), where it had many issues). I'd say you can do fine with Atom, but like with most open-source vs paid/proprietary offerings, often the paid variant is going to be easier to get going with and get support on(bugs or feature issues with Atom can take years sometimes to see any resolution, that project wide search perf issue for Windows took 2-3 years I think, and another one where they removed the prev UI button in ctrl+f, allowing letting you go backwards if you know the keyboard shortcut, never got restored despite users chiming in over the years about it, I think there's a third-party package to bring the button back). So Atom isn't all roses :P &gt; As someone who was writing code in a half dozen languages, IntelliJ Ultimate + Webstorm etc really impressed me for just working. But now I‚Äôm somewhere where I would have to pay for it myself, so I‚Äôm definitely unwilling to buy the whole suite. Yeah, that's one thing I like about their products("just works" and language support out of the core product, eg Python or Rust with Webstorm, C#/Rust/etc on PyCharm). Back in 2014, you would pay for a license that was good for a year or two I think of updates, then they moved to a subscription model which caused a stir, but as a response offered perma license on versions after you'd paid for a years worth, do they still do that?
I haven‚Äôt delved much into testing components with Hooks yet but I appreciate the word of warning. It was my impression that they would be very testable given the reusability of the Hooks. I‚Äôd love to read an article that covers some of these issues.
Hi /u/boikom, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Thank you! I use PixiJS for the background animation. The repository contains everything so you can see the code here: [https://github.com/cocopon/tweakpane/tree/master/src/doc](https://github.com/cocopon/tweakpane/tree/master/src/doc)
So I'm going to give this a shot. I'm not yet applying for jobs, but this seems like a good test and since it's something used in the real world test applicants, I figure it's worth a shot. If you want to give me quick feedback I would appreciate it. If not, no biggie. Thanks I'll be back in a couple days.
Care to elaborate on that? I usually make my components name same as filename and export it as a named export. But I also export connected component as default. It gives the brevity to my component usage without explicitly naming them differently
vscode has a fullscreen option, and something called zen mode as well.
I think brackets does this not sure though 
You can press F11 in VS Code to full screen it, but then it's kinda tedious to minimize/move the window around. Removing the title bar doesn't *really* save that much space that it would make a noticeable difference (for me anyway).
If you open a separate window, iOS "freezes" the previous page (only one tab can be active at a time), so your audio cannot play. You'll have to play it first and listen for the [ended](https://developer.mozilla.org/en-US/docs/Web/Events/ended) event, then finally redirect to the Wiki URL.
Intellij has a distraction free mode. 
F11 is what I make do with currently, but same issue as you it's only for maximized windows. for me it's not really the couple extra pixels but the aesthetic. It's achievable with i3 but I haven't been able to replicate it in windows.
interesting, do you mean window=maximized fullscreen does it work in any window size? I haven't used Atom in awhile I gotta check that out.
That looks real nice. I‚Äôve been looking for an alternative to dat.gui for forever!
Thanks! It was fun to make.
As a former high school CS teacher, the items I‚Äôd ding you for would be variable naming. It could use some work. There are a couple places that logically I‚Äôd ask you some questions but overall I‚Äôd give this project an A. This is above and beyond most students work. 
I only saw fullscreen w/no title, like f11 in a browser window. There is a hide menu (and other things you can hide) but the top line w/filename and controls remain if it isn't fullscreen. Though I imagine it might not be hard to do in vscode. I don't mess w/atom though. Not sure how I would justify that, given that MS owns github now...
Unfortunately, I tried using &lt;AUDIO onEnded="[window.open](https://window.open)(wikiURL)" etc&gt;&lt;/AUDIO&gt; but this made things worse by triggering popup blocking.
I'd rather use tabletop than route through a service.
Are you sure that libsass is faster than dartsass? Because the benchmarks in their repo show the opposite in the vast majority of cases (the major exception being compiling very small projects).
Except when it comes to using jquery nowadays. Opinions stronk.
Yeah, you can only open a new window on a user triggered event like a click. In this case you'll have to redirect the page, using `location.href=wikiURL`;
Great question! I tried looking a bit into WebRTC which seems to be the Standart for this, correct me if I'm wrong, but it was rather complicated for me and secondly my schools network has blocked almost all port, protocols, etc and the small demo I looked at didn't work there because of that, thanks!
Thank you!
Thanks, with variable naming you mean giving names that are easier to read and understand what they do or do you have any example? Thanks ;)
 arrayIndex = favoriteThings.length; That would put the index out of bounds no? Should be arrayIndex = favoriteThings.length - 1; 
 export const List = ['sure']
I think this problem is easier if it's approached by reading the number backwards, one digit at a time, adding the word equivalent to an array and then finally logging the resulting array in reverse order. Depending on the current target value and where it is within the the number, you will be pulling from word arrays of their equivalent. //Single Digit Array "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" //Double Digit Array "ten", "twenty", "thirty", "fourty", "fifty", "sixty", "seventy", "eighty", "ninty" //Multi Digit Array "hundred", "thousand" The tricky part that requires special consideration will be dealing with values between 11 and 19. For example, the number 4214 would need to be written "four thousand two hundred fourteen" and not "four thousand two hundred ten four", so you'll need to pull from one more array: //Teen Numbers Array "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen". 
Hey. Good question. Sometimes it's hard so keep an overview of what's going on. &amp;#x200B; The first thing I'd recommend is to keep the display value (the one that starts with 1) inside the display function because it is purely derived from the index. &amp;#x200B; Then I would put the increment and "to last index" function apart to manage them more easily. &amp;#x200B; `var favoriteThings = ['Soccer', 'Apples', 'Spaghetti'];` `var index = 0;` &amp;#x200B; `screenUpdate();` &amp;#x200B; `function screenUpdate() {` `var display = index + 1;` &amp;#x200B; `setText('displayArea', favoriteThings[index]);` `setText('favThingsCounterLabel', display + ' of ' + favoriteThings.length);` `}` &amp;#x200B; `var next = function() {` `if (index &gt;= favoriteThings.length) {` `index = 0;` `} else {` `index++;` `}` `};` &amp;#x200B; `var toLast = function() {` `if (index &lt;= 0) {` `index = favoriteThings.length - 1;` `} else {` `index--;` `}` `};` &amp;#x200B; `onEvent('nextBtn', 'click', function() {` `next();` `screenUpdate();` `});` &amp;#x200B; `onEvent('lastBtn', 'click', function() {` `toLast();` `screenUpdate();` `});` &amp;#x200B; `onEvent('addBtn', 'click', function() {` `insertItem(favoriteThings, favoriteThings.length, getText('enterFavThings'));` `});` See, you were almost there!
Nice work looks, super slick. Use spaces instead of tabs. Looks nicer and stays they same number of rendered columns. More/ consistent comments maybe? I can see sections of code that have comments then in the same file there are sections that don't... QRCodeWindow, Laserpointer. You could group you split your classes into seperate files and import/export them where necessary. Try to keep swearing out of you commit messages. It's good to not make it a habit, especially if you intend to eventually go into a professional environment. 
&gt; People love the words "performance" and "rust" and "webassembly" Well... if your client-side code actually needs the performance(handling some processing/calculations client-side rather than requesting the server to do it or it's a recurring calculation and JS is too slow to get it at the desirable rate(Eg FPS)), then yeah performance is a meaningful thing, and wouldn't you know WASM is a pretty great solution for some of those cases. So "performance" with "rust" and "webassembly" makes sense now right? But why all three together? Because Rust is one of the best options out there atm for WASM payloads. [Bundlers can make using WASM pretty easy](https://parceljs.org/webAssembly.html), and with Rust you can just [reference the `.rs` files for seamless integration]((https://parceljs.org/rust.html))(you don't even have to do extra work to create the wasm build). But like yeah... kind of silly if you don't need the performance or other assurances that you'd get from another language delivered via WASM(along with limitations that can impose). &gt; Re-writing a library in a new language isn't particularly hard or novel work Largely depends on what that library is.
Impressive!
Small tip though about the word+spaces suggestion. I believe DiceWare and similar suggest 7 words or greater these days minimum if you want a secure password. The words should also be truly random(so relying on the human to "randomly" select words isn't a good idea, software can better assist with that). Complying with both those rules though will make it less easier to remember I guess. Reason for such, is that you can take a smaller corpus of common words(and add anything that might be garnered from data targeting a specific user if not a generic broad attack), then the brute force approach is to use the words the same way you would an alphanumeric+symbols input. Main advantage to the use of words is each symbol(word) can belong to a larger collection than alphanumeric+symbols, so the important factor involved here(bits, not length) is larger requiring more time to compute/exhaust.
Get on either leetcode or hackerrank and fill in those gaps! A junior dev should be able to reason through a well-defined, reasonably complex coding question like this in some language. If not, you likely have some missing experience working with basic data structures/algorithms. It's not impossible to learn and there's great material readily available.
I'd rather not use spreadsheets, you get all kinds of garbage in them (gigo). Better to have a UI that does front end validations (and doesn't require sharing everything with everyone).
This was related to a job interview, but it was for a technical role and requires somewhat advanced knowledge of computer science. (Programmers/developers would consider this "the basics") Better resources for a post like this would be leetcode.com, hackerrank.com, etc
Good start, straightforward enough. Couple things, it might want to delete comments as well, and actually it probably should set the comment/post to "deleted" in the text or something, before deleting it, as an extra precaution. Reddit does not do "right to be forgotten" well. I like it a lot better than other similiar tools only because it is all right there in run.js, and I have a pretty good idea if it is doing something nefarious, unlike the random plugins and whatnot. 
Unless you are trying to get hired for something more than a junior position, I would put a lot more emphasis on the HR/culture part than the technical part. You can teach a man to fish but you can't teach someone to be easy to work with if they don't work well with others. 
I guess he didn't have any sources. lol
This program deletes posts and comments! (sorry for the confusion with the title). And the console log spits out a note telling you when a comment/post is deleted and how many. You should set up a test Reddit account and make a few posts and comments and test out the program. And yes, nothing nefarious going on here. I'm not smart enough to do anything like that.
Thanks for taking your time! I'll definitely have to improve my comments and variable naming, having my classes in separate files sounds like a good idea so thanks for that too! The swearing is just a real bad habit of mine, but you're right doesn't really belong there so I'll keep it out. Really appreciate your feedback, thanks!
 muhahahahahahahaaa &amp;#x200B; nice)!
right to be forgotten does not apply to everything
I'm using "right" with some poetic license here. No "rights" apply to everything.
I dunno man, looks kinda sheety
Given your choice of expression it's a bit harder to be convinced by your current words. "Guise of performance". As if people who do something in Rust in front end has this alternative motive they do not share. Ev1l. Yes, it is about performance. And performance is good thing to have, especially in build tools. Maybe it's the actual aim?
I'll be honest, this is kind of an easier question, and you might not be ready for a JS job if you're having trouble. That's okay though! It takes practice to think algorithmically and it's not intuitive. So, here's the thing. Look at how English says numbers. There are a lot of rules we know, but don't know we know. For example, let's take the number 319. It is "three hundred and nineteen." What about 319,000? "three hundred and nineteen thousand." Those seem very similar. In fact, in most cases, xyz,abc is "ecks hundred, whyty zed thousand, ay hundred and beety see." It's the same pattern for the most part. So instead of handling all numbers, let's just focus on solving the case for three digit numbers first. We'll break up any numbers 1,000 or bigger by splitting up the number into triples and just deal with each one individually. There are some special cases, but for the most part, it should be straightforward. So while we don't yet know how to solve for three digit numbers, we do know that if we DO figure out how to solve for three digits, solving for four or more digits is trivial - just solve for three digits twice and put "thousand" after the thousands column. So next you want to tackle the three digit cases. Mmm. Trickier. Let's start with tackling the one digit case. Well, this is simple - you can brute force this one. Just create an object where the keys are the digits (in string form), and the values are the digits in English. const onesMap = { '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine' } You've now solved the case for all the numbers from 1-9. Bravo. What about two numbers. Well, this is where it gets tricky. There's patterns to the tens digits, but tons of exceptions to those patterns. But what's the most common case? There's a special tens form for each number, (usually ending with 'ty') then a hyphen and the one's case for the ones digit. So let's take out the tens form. const tensMap = { '1': 'ten', '2': 'twenty', '3': 'thirty', '4': 'forty', '5': 'fifty', '6': 'sixty', '7': 'seventy', '8': 'eighty', '9': 'ninety' } So now for most two digit numbers, you take the tens map, plus a hyphen, plus the ones map. So, just working with what we've got: const twoDigitsToText = (num) =&gt; { const strNum = num.toString() return tensMap[arrNum.charAt(0) + '-' + onesMap[strNum.charAt(1)]]; } console.log(twoDigitsToText(33)); // "thirty-three" -- GREAT! console.log(twoDigitsToText(15)); // 'ten-five' -- Not so great. Should be "fifteen' console.log(twoDititsToText(20); // 'twenty-' -- mmm... dangling hyphen. console.log(twoDigitsToText(9); // 'ninety-' -- ew... not even the right number. Okay, so yeah, we're gonna have to do some checking for our edge cases and conditionals. So, let's get back to two digits. // version 2. const twoDigitsToText = (num) =&gt; { const strNum = num.toString() if(strNum.length === 1){ return onesMap } return tensMap[arrNum.charAt(0) + '-' + onesMap[strNum.charAt(1)]]; } console.log(twoDigitsToText(33)); // "thirty-three" -- GREAT! console.log(twoDigitsToText(15)); // 'ten-five' -- Not so great. Should be "fifteen' console.log(twoDititsToText(20); // 'twenty-undefined' console.log(twoDigitsToText(9); // 'ninety-undefined' -- ew... not even the right number. So obviously there's going to be some edge cases. How do we handle the teens? How do we handle 20, 30, 40? How do we handle numbers between 0 and 10? Once we have 1 digit numbers and two digit numbers, solving for three digits once again becomes easier, it's just for xyz, it's the one digit case for x + 'hundred ' + the two digit case for yz. There are really two tests here when you think about it. The first is: ** Can you break this large problem into smaller problems that you can then reuse to find the full solution?** That is, theoretically, if you solve the case for one and two digit numbers, you can find the pattern to solve them for thousands, millions, billions (though just thousands are mentioned in this case.) ** Can you be aware of when there are "edge cases" which break from the established pattern and have to be handled separately?** Edge cases are important to identify because they tend to break stuff when they are encountered. It's a good beginner test, and you have to get yourself into the mindset of: "If I don't know how to do this, what smaller problems can I break this big problem into?" 
This is amazing! I'm in highschool but I've never had a specifically "programming"-based assignment (although many of my projects have some kind of "programming" tie-in). I wish I had your teachers!
No offense, but you'll need to be a bit more specific in your titling to get readers.
VS code is a good option and i like its intellisense support. For small and fast things, notepad++
I meant the thing you get when you do npm install dartsass - a to javascript transpiled version of dartsass.
Looks nice. Good work
Really impressive nice work
You should never consider overwriting system shortcuts. If a page would overwrite ctrl + arrow, I would never visit it again. Btw, it is probably not possible, luckily. 
Any chance you could add a feature which let's you go to page X of a slide? Because sometimes it can feel unprofessional to have to browse back trough all slides. 
Put it on github, maybe?
In WebStorm (and any other jetbrains IDE) you can always choose full screen mode. Just go to View -&gt; Enter Full Screen (it should be on the bottom of list)
One way to approach is to divide and conquer. If you feel overwhelmed, try to break it down into simpler steps. For example, what if you only had to deal with a number between 0 and 10 - how would you convert that into words? Once you've figured that out, what about 0 and 20? It's not as straightforward as you then have "thirteen" instead of "one three". But it's not a huge jump from what you have. Then 50, 100, 1000 - what bits do you have to change to adapt? Once you have that sorted, then you realise to handle larger numbers you have some new code to add - how to break down the larger number to get the desired result?
Really nice, like DAT.gui , but much nicer! &amp;#x200B; I would suggest adding a light theme too! 
Sometimes webpages got ?=20items on the URL if that's the case changing it will work if it's not in the URL it might be impossible but not sure about it
i just found this in html "[Pastebin](https://pastebin.com/axnCipR3)"
marked that. thanks!!
I'm assuming that you want to preserve insertion order. That's why you'll need [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). ``` const combineArraysByCriteria = (criteria, ...lists) =&gt; { const listMap = new Map(); lists.forEach((list) =&gt; { list.forEach((element) =&gt; { const prior = listMap.get(element[criteria]) || {}; listMap.set(element[criteria], {...prior, ...element}); }) }) return Array.from(listMap.values()); } const combineArraysById = (...lists) =&gt; combineArraysByCriteria('id', ...lists); ```
No love for node-sass?
Not sure if it's the *most* elegant, but... const arr1 = [ { id: "1", name: "Tom", }, { id: "2", name: "Jerry", } ]; const arr2 = [ { id: "1", age: 21 }, { id: "2", age: 32 } ]; const resultArray = []; arr1.forEach((objA) =&gt; { arr2.find((objB) =&gt; { if (objA.id === objB.id) { resultArray.push(Object.assign(objA, objB)); } }); }); console.log(resultArray); //[ { id: '1', name: 'Tom', age: 21 }, { id: '2', name: 'Jerry', age: 32 } ]
fwiw, prompt doesn't seem to like vscode (under linux anyway).
Can only use **GET** method from this right right ?
Thanks
welcome to sheety sushi .. 
`titles.map(title =&gt; ({` `...title,` `value: record[title.key],` `}));`
We work on something similar with reactivity support as well: [https://www.htmlelements.io/](https://www.htmlelements.io/). You can check it out and if you find it helpful, use it in your project. 
One thing off the top of my head is that this at least enforces a particular name, through which some level of implicit documentation can be inferred. E.g., getList, likely a function; isList, a boolean; etc.
isList to me sounds like a boolean returning function. Why would you export a boolean though? What is the use of that?
That's an interesting test, actually. First you should ask a bunch of things: are there going to be only whole numbers, or also numbers like `234,854.5921`? And should you take multi-lingual features into account? Do you really need to program the solution or are they testing you to use common sense and go for an open-source solution? (Because I've had interviews like these where I'd start fixing a problem and I'd fail because "you could have Googled it lol".) &gt; ie: 384765 output three hundred eighty four thousand seven hundred sixty five I'd probably start talking and writing things down on a whiteboard. You break the numbers up in groups of three: - 384 - 765 Then you start on the right of each group of numbers: one, two, three, etc. If the group of numbers is 1 number in size: just render that number, if it's two in size, then you're working with a set of "tenths" (N-teen, twenty-N, thirty-N, etc.). And if it's three in size you're adding hundredths to it from the first group of singular numbers, e.g. "[one|two|three|etc.]-hundred-and-[singular]", etc. If there's another group, add a thousandth: - 384 - "three-hundred-eighty-four" (is there a next group? yes) + "thousand" - 765 - "seven-hundred-sixty-five" And for the "thousand" concatenation you should count the remaining groups. One group remaining adds "thousand", two groups remaining adds "million", three groups remaining adds "billion", etc. And for human readability I'd probably add an "and" to be in front of the "sixty-five" so it reads nicer. I'd probably end up with a single function using recursion inside, with a select bunch of constants. The only real challenge would be "SIX-teen" where the increasing number is in front, and "twenty-SIX" where the number is at the end. But that could be a simple if-then statement or an array reverse or a ternary operator.. 
Ha ha
Hey all, have put together an online JS formatter - looking to hear your thoughts! Code and documentation can be found here: [https://github.com/majikarp/FineJS](https://github.com/majikarp/FineJS)
node-sass is the node.js wrapper for libsass
Check out the options for request promise. Specifically [this section](https://www.npmjs.com/package/request-promise#get-the-full-response-instead-of-just-the-body) I prefer to use simple false and to resolve the full response. Which allows you to handle different statuses manually as needed 
TIL!
Yeah, I use the full response. But I don't know how to differentiate between b and c. I guess the error would be a completely different class to begin with. But how do you differentiate between "i screwed up building the request" and "the system never replied" in the catch of the error? The only solution I see right now, is the following: if (err instanceOf StatusCodeError) { if (err.statusCode) { switch(err.statusCode) // .... } else { // i guess if there's a timeout/no reply the statuscode is undefined? how does RPN handle this situation? } } else { // I screwed up building the request } And I'm wondering if I can do it more elegant (i.e. like in axios) (and I don't know how the StatusCodeError object looks like if there was a timeout)
Environment variable maybe?
Yeah, they still do that.
URL not html
according to me ,this websites helps you to provides best compliance services to that who have eventually think to get startup in various services such as compliance human resources, risk services,public fund services ,audit and many more.. ### 
We perhaps do let people fail for a little too long, but we find it really hard to hire people in our market in the first place and we're a company that values "family" as one of our core values. It's really hard for us to let people go, even when it's obvious they should. The idea behind giving them a long time initially is that they are usually *very* green when we hire them, and our app was initially designed and written by an outsourced team that we eventually let go. I've put a lot of work into correcting their issues, but the framework itself adds some confusion to everything and rewriting it in another framework just hasn't been an option. We also encourage juniors to ask questions and we check in regularly in case they aren't. And to be honest, the best ones get stuff done quickly even from the start. I don't think we've ever let anyone go for not being able to program. I think they've had issues like not following verbal directions, not doing what it says in the ticket, doing other things instead of their tickets, or *constantly* closing tickets quickly without fixing all the bugs. ... Oh my God. We totally need to change our hiring process. lol This conversation has made me have an epiphany about what's trainable and not.
The FAQs are great.
Yeah this is a great question. It never really occurred to me how the 1000's comma separator was also a verbal cue but once you notice that it's easier. And the only way to notice that is to start with the ones place, the tens place, etc 
&gt;Turbolinks in itself is a shit-show to engineer did you use Turbolinks 5? 
&gt;Edit: source code is written in coffee, meaning in order to even modify the source you need to know how to write coffeescript. Smh, And CoffeeScript is damn easy, especially when you know ES-6, because ES-6 is also inspired by CoffeeScript.
It [was](https://old.reddit.com/r/javascript/wiki/faq?v=f1499a4a-6ce3-11e8-b417-0e1a2ff94a12) actually in the FAQ for a year, to no effect at all on the number of people posting _"this articles"_. So maybe it's not the mods that don't, but that people never gave a fuck about any rules or indications at all. Just notice how posts that "shouldn't be posted", regularly get both upvotes and answers.
Looks like it.
Because people want to look cool and even if their web-app is so simple, they think they're Facebook and start using some "cool" front-end framework, and create an "SPA".
just curious, what is the motivation for writing a blog these days?
Awesome microtool for designing frontend templates where you need some sort of placeholder for an API!
Is this a code test interview question? What do you think the people interviewing you would think if they found this üëÄ
Upvoted just for the name
It was an interview prep service. Basically a mock interview. I would not care if they found this. üòä
Ah, good! I was gonna say, you‚Äôre not supposed to ask reddit to do your code test for you :P haha
I thought this was a interesting interview question, i never approached this, so i did now. i take make a little over 2 hours, the code is probably not the nicest, but please have a look and share your thoughts to my solution, its not much - but its honest work &amp;#x200B; [https://repl.it/@falkyouall/NumberToStringTranslator](https://repl.it/@falkyouall/NumberToStringTranslator)
really cool - thanks. second the PUT comment in the FAQ
Or as suggested in the issue add deep empty hierarchy export const AppApi = axios.create({ baseURL: `${HOST.APP_API.URL}${HOST.APP_API.API_PREFIX}`, headers: { common: {} }, }); export const MenuApi = axios.create({ baseURL: `${HOST.MENU_API.URL}${HOST.MENU_API.API_PREFIX}`, headers: { common: {} }, }); 
This is exactly what I mean. For example a few methods you wrote the first variable and called it code, but I had no idea why you used that name. This drives me crazy when grading assignments. Think of a non coder picking up your project and wanting to now how it works. 
Sorry I don't have the ability to test in Linux right now. I'll try to figure this out soon. 
Why did you come here? Clicking and then even commenting on stuff you are not interested in is very strange behavior. Maybe *that*s is what we need less of. Tip: Only click on stuff you are actually interested in and your life - as well as that of other people - will be much better.
Love it! 
&gt; Use spaces instead of tabs. Looks nicer and stays they same number of rendered columns. Don't throw this out like it's a general recommendation. This is purely opinion and will vary between codebases. Even official recommendations will vary between language conventions. The only thing that *really* matters in the end is being consistent throughout a project.
**Never** build anything on top of anything from Google. Why? Just go to googles support-forum for **any** of their products, Every time they change something without telling anyone about it, Its like that scene from titanic where the water is full of thousands of people screaming in panic for help. And then gradually the voices die out. 
just to share things that i learned. I hope someone across the world, might find it useful.
And butcher future monetisation?
VS Code can do that in Zen Mode - play around with the options. This is my [zen mode setup](https://imgur.com/a/sBpFYX6)
17-18(?) years old and absolutely smashing it, great job!
if youre in highschool then fuck my highschool why ihavent learned this shit years ago
Hope it isn't a piece of sheet
I don't think we are quite on the same page. I don't have any delete buttons on the page in question when running the script. I tried changing it to await page.goto('https://www.reddit.com/${username}/comments/', and got some delete buttons but then it failed because the buttons don't match the selector, and in fact are rather anonymous with some foreign key in their place. This is gonna need an api or some OCR to be more reliable. 
Can you show me a screenshot of what your user page looks like? 
I could, but it is different for different accounts, some have delete links in the overview and some don't. This approach turns everything into a wet noodle, so I'm gonna look at the api approach for now (or possibly OCR or something less error prone).
I would strongly advise against overriding keyboard shortcuts. There are users who can only use the keyboard due to physical disabilities and for them, this is the only way to access their desktops.
üëç Writing a blog is a great way to learn. Nit pick: There is a difference between ‚Äúblog‚Äù and ‚Äúblog post‚Äù: * ‚ÄúI‚Äôm writing a blog.‚Äù * ‚ÄúYesterday, I wrote a blog post.‚Äù I think you mean the latter.
hasse jut jemacht, bin stolz 
&gt;This is gonna need an api or some OCR to be more reliable. Seems like you are just using tech acronyms here to sound smart. I can maybe come up with some ideas on how to apply API, but why would you need any kind of OCR here?
Umm, I'm saying that based on decades of experience (which far outweighs my CS degree at this point, or even before). What exactly do you see wrong with OCR if an API doesn't pan out? Do you think they will suddenly label the comment button to "2300fnjanklnoiwehf02839hr018hr01hr01hwwe2" for the user to click on? The point here is trying to make it reliable, regardless what they do behind the scenes to the page. So that someone else might find it useful. I'm not asking you to do anything fyi, in case that wasn't clear, just thinking out loud. 
Okay. I will learn more about the API this week and see if I can figure it out and update my program too. Thank you for informing me.
I made something similar a while back: https://github.com/Asmor/gs-loader That will give you lists of values by sheet and column. I also used a similar technique for one of my sites, but that goes the other way; returning an object for each row with keys based on the columns. I thought I'd published this on its own to github like I did the above, but apparently not. It only exists in the site. https://github.com/Asmor/5e-monsters/blob/master/app/services/sheet-loader.service.js
Great idea about changing the posts and comments to "deleted" before deleting too!!
But this is literally used for spreadsheets?
You don't even need to install JSDoc, you can simply run `npx jsdoc &lt;filename&gt;` and you're good to go.
spreadsheets get used and abused for all kinds of stuff. It is mostly fine with just humans sharing them as they can interpolate, but that is gonna be garbage to something expecting validated tabular data. Plus with a UI you can show the validation errors to the user in real-time, i.e. missing a field here, an unknown string there, something out of range over here, etc. "I thought a pie chart looked better here than the total dollar amount in dollars and cents", whatever. My experience incorporating spreadsheets has always been nasty, save for when you can train your users to not actually use them like spreadsheets, at which point it is just a dumb data entry tool, which is why you WANT to make your own data entry tool, so it can be smart. 
Then I guess Sheety has kind of a sheety interpretation of what an ‚ÄúAPI‚Äù is‚Ä¶
This is a good question, just approach it in chunks ie. find it‚Äôs place value first, then work on the numbers.
Have fun y'all... Open Source version [https://github.com/55sketch/gsx2json](https://github.com/55sketch/gsx2json)
ü§ì thanks!
Hi... Jan from ArangoDB here &amp;#x200B; ArangoDB and MongoDB are both written in C++ but ArangoDB is a native multi-model database. ArangoDB supports various secondary indices, so you can increase lookups efficiency on arbitrary attributes stored in your JSON. You can find a technical comparison of Mongo &amp; Arango here [https://www.arangodb.com/why-arangodb/arangodb-vs-mongodb/](https://www.arangodb.com/why-arangodb/arangodb-vs-mongodb/) ArangoDb provides a very powerful JS Framework, which we called Foxx for data-centric microservices... basically your personal App Store for a database integrated on C++ level and full access to all core features. [https://www.arangodb.com/why-arangodb/foxx/](https://www.arangodb.com/why-arangodb/foxx/)
Hi /u/youceefz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Savetheworldsoceans, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ReactPupil, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You are way overcomplicating the problem. It's basically a parsing problem so you know you just need to push/pop to a stack according to some rules, so just handle those rules. [https://repl.it/@NatZiel/RowdyLightyellowLogic](https://repl.it/@NatZiel/RowdyLightyellowLogic) The problem is actually pretty simple since we can't have 7+ digit numbers, hence the impromptu stack and parsing function implementation
Nice use of puppeteer. One thing I can suggest is adding a **package.json** to your project root. Check out its documentation if you're unfamiliar: [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json). It's easier for users to install all required dependencies and for the sake of you updating the README. &amp;#x200B; &amp;#x200B;
Lmao this sounds about directly on point 
It's hilarious to see what it basically a React clone saying it's "Vanilla JS". *No!* Once you add that framework, it stops being Vanilla JS or React would be that anyhow.
Is this whole article lamenting the fact that it's possible to write smaller, faster code than is output from big frameworks? Yeah, that's always possible. But along with that, you sacrifice development speed and maintainability. And you're forced to maintain *all* the code yourself, instead of being able to rely on the framework to handle a lot of the work, and the community to handle a lot of the bugfixes and improvements to the framework portion. It's always a balancing act.
Great idea. I'll add that tonight.
That actually makes sense, when I wrote it it was totally clear, because, well, I wrote it. But now that you say it like this I can see how someone new to the codebase would be confused as hell. Thanks!
Well lots of this I have also taught my self, but you are right, I'm very lucky with the teachers I got and the fact that they support individuals so well
I swear I thought this post was in r/programminghorror when I read the article.
Here's a great alternative: https://airtable.com Yeah, it has an API for CRUD.
I haven't tried it, but I like the idea. As long as it stays roughly in-sync with Babel in terms of support for new ES language features, I could see it being quite useful. For quite a while, I've wanted to do something like this, but in C++ instead. Only C++ because I'd like to go into Chromium or Firefox and pull out the JavaScritp parser - in theory, this should give me a very fast, standards-compliant JavaScript parser that will build an AST that I can then use to do Babel-like things. &amp;#x200B; I'm not sure how well this would work in practice, though. Babel supports things like CommonJS that the browsers' parsers wouldn't be able to handle out of the box. And I'm not sure if they AST they'd construct would be easily usable. I mean, it should be, right? Any given bit of code should parse into the same hierarchy of identifiers, expressions, statements, etc. But I worry it is represented in code in a way that's easy for the JS runtime/JIT to consume, but would be difficult to use in the way I want to use it. &amp;#x200B; I suppose I should just dive into the code and take a look. If only I could find the time... :) &amp;#x200B; &amp;#x200B;
Plans and Subscriptions Free: 100 column conversion per day.
I mean, if he open sources it, he will risk of implementing what you suggested.
You can perform validation in a spreadsheet. Some tools‚Äîsay a spreadsheet API‚Äîmake it even easier. Spreadsheets may not be perfect but they‚Äôre what the world runs on. 
I really like your project! In your notes, you might want to mention that deleting your posts isn't a foolproof way to eradicate your Reddit history. Sites like Removeddit make it easy for people to find posts and comments that a user deleted. Some people try to work around this by replacing the text of their posts with something like "removed" or "deleted" instead of actually deleting them. Last time I checked, though, Reddit was backed up pretty well by the Internat Archive. So it's relatively easy for a person to go back and see what your Reddit posts and comments looked like as of a specific date. So your project is awesome if a person wants to get rid of their post history so that casual lurkers won't see it; but if a person is truly worried about things they have posted in the past, they should probably proceed on the assumption that those old posts can be found and will be found, if the person or organization looking is determined enough. And we should *all* post on Reddit under the assumption that once we've posted something publicly, it will be available until the end of time to anyone who wants to find it. 
/r/til that despite doing similar things for years, I never though to wrap an object return in a parenthesis to avoid having to { return {...}} before. Thanks undervisible, you just saved me at 5 keystrokes each time I need this.
Can anyone help me to understand what Next.js does that I couldn't do myself with create-react-app or yo? I've heard a lot about it and read its website, but feel no wiser as to why I would choose it for a project. Is it just a template codebase like yeoman would generate?
Is there *any* difference? Probably. Does it matter? No. This sort of operation is never going to be the bottleneck in your application's performance. If you're having performance problems, there are going to be much more important things to spend your effort optimizing.
Hi /u/illitirit, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/yudoit, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In real world these micro-optimisations don't matter unless you process huge amounts of items. Then you'd profile you app and find out. Readability is more important. Try something like this: const exponentArray = array.map(v =&gt; v * v)
Yes, those are all great points. I will update the project to say all that.
I create online test: [test](http://javascript-benchmark.info/GhN). In my chrome second code pice faster about 2-3% On firefox they are equal
"I'd use AWS Lex."
There is. However, the difference in the above two codes are very small. Probably in a matter of microseconds. i.e. the difference between using `Math.pow()` and the `*` operator. Because `Math.pow()` is a simple method. The difference would be more apparent on more complex method. e.g. the array's `reduce()` method. A polyfill for the array's `reduce()` method would be noticably slower than the built in one.
I just used this for a couple projects and I could not recommend it enough. I've used it before for organizing editorial content (not directly serving a site) and was amazed to discover that a nice auto-generated API (complete with auto-generated docs &amp; examples!) comes every table. It's pretty incredible, and could not be easier to use when paired with something like Gatsby.
That depends on the web server. Judging from the given code, there's supposedly be a `select` HTML element on the web page which defines the page size. So, you might to try modifying the value of that element.
1. You CANT download a MP3 from Youtube ... 2. ytdl is downloading the video if not using the filter function to get only formats with audio only 3. Whats new about it?
well, it is up to us to give them better options, no? This is kludgy and insecure and flakey beyond measure, and a third party api? C'mon, look at the bigger picture here, this is a monstrosity. I mean you *can* use js directly in sheets if that is your thing, https://developers.google.com/apps-script/guides/sheets but to talk to sheety to talk to google to publish your data with a slow service backend and etc and expect realtime user facing validations (that may need system wide data)?!? From the page itself: Can I rely on Sheety for anything important? ~~Are you f*****g insane!?~~ Yeh sure why not ‚Äì 
üòÇüòÇüòÇüòÇ
You only have to look at what they did to Angular.js to see why you should never use their frameworks/libraries... or at least use them with extreme caution. Even with Angular 2+, they are constantly deprecating features and changing the API.
It's great for small projects. It even gives you the forms needed to fill a particular table. https://support.airtable.com/hc/en-us/articles/206058268-Guide-to-forms
I agree and would probably not use this for enterprise work. Your comment just seemed a little patronizing and ignorant of the many use cases for spreadsheets outside of simple data entry. 
i think thats the csv -&gt; json standard. each row is encapsulated by an object with their own header props 
I thought it was just another framework, but your comment made me look into it. I'm pleasantly surprised. Sure, you could set up create-react-app to do most or all of what this does. But this has that already all set up for you with sensible defaults and the ability to customize most things or everything. IIRC, create-react-app makes it hard to customize webpack, whereas next.js seems to be designed to allow it. "Why Next.js" says "Zero Setup", "Fully Extensible", and "Ready for Production", which I think says it all.
https://eloquentjavascript.net/ That‚Äôs what I‚Äôm using, it‚Äôs pretty good and free
Maybe you can start by telling us what you've already tried. Also schools shouldn't be something to look into just yet when you are this new.
[removed]
Trial and error is my best place. People will provide better links then I will for tuts. What's your website about? What can be added. What could you do to it? What do websites similar to yours have that you don't? Build it. Don't really like it? Doesn't matter. Build it. A common practice I do. Is when something really cool gets sent my way. I will build it or at least learn how it's built. It doesn't matter if relevant or not. In the future, maybe it will be. Just build it.
Thanks! Well-branded project template it is then üôÇ
syntax error, here is the correct syntax ```javascript function validateEmail() { var emailID = document.myForm.EMail.value; atpos = emailID.indexOf("@"); dotpos = emailID.lastIndexOf("."); if (atpos &lt; 1 || (dotpos - atpos &lt; 2)) { alert("Please enter a valid email address"); document.myForm.Email.focus(); return false; } return (true); }```
&gt;function validateEmail() { var emailID = document.myForm.EMail.value; atpos = emailID.indexOf("@"); dotpos = emailID.lastIndexOf("."); if (atpos &lt; 1 \\\\\\\\ ( dotpos - atpos , &lt; 2 )) { alert("Please enter a valid email address") document.myForm.Email.focus(); return false; } return( true ); } Thanks mate.
Clean =D
The first one (gs-loader) was made for getting lists of things for a random generator, hence its behavior.
For curious, like you seem to be, there is a lot top learn into your browser debugger. Beside the tabs, try to inspect elements in any pages. Go to the console, type in: document This output a scrollable list.. This is an object! Uwrap, there is many terms, many to unwrap there. Just an example, one of this item is called ¬´body¬ª. From the console, this mean you can type: document.body To get the item directly. Unwrap, one of them is called ¬´style¬ª. That is the css of the page. You can acces by typing document.body.style That does nothing but read the object. To declare new stuffs, use = document.body.style.color = "red" This will make all writing color of the page in red! Etc. see the keyword in use, search them on google, mdn are the best docs. Good luck!!
Out of the box server side rendering 
ignorant is assuming i am ignorant of how spreadsheets get used, wtf? WE CAN DO BETTER THOUGH, THAT IS NO BULLSHIT! It is 2019. "meh, spreadsheet, that's good enough for 'em", it is lazy in the extreme. And to say "but they‚Äôre what the world runs on" is ignorant if that is how you world works. Demand a better user interface, that is why we have f-ing javascript. Who are you to judge comments to be ignorant?!? your comment "but they‚Äôre what the world runs on" is steeped in it.
This are scams, the one that want to learn don't need school, but practice, a lot of practice, and the great internet. And books, maybe.
I don't feel like doing the tediousness of "ninety," but here's what I got for recursively scaling 100+: function toWord(n) { if (n &gt;= 1000) { return toWord(Math.floor(n / 1000)) + ' thosuand ' + toWord(n % 1000); } if (n &gt;= 100) { return toWord(Math.floor(n / 100)) + ' hundred ' + toWord(n % 100); } // logic for 1-99 } Ninety, eighty, etc. would be handled similarly, where `if (n &gt;= 90) { ... }`, but with custom logic not to say "ninety zero." I really like the question. It's fun, it tests lots of important things during an interview. Recursive logic, not repeating yourself, how you'd optimize.
&gt;Just build it. &amp;#x200B;
They basically left Kansas City high and dry, nope'ing out as soon as it became clear that KC Google Fiber was unsustainable. All of those companies who moved to KC on the hopes that Google Fiber would be the cornerstone of a flourishing tech scene were crushed and given a grand total of 60 days credit while they scramble for alternatives
Doesn't this break the _"The only other character allowed other than lower case letters is the space ' '"_ rule?
"Who are you to judge if comments are ignorant?!? *Your* comment is ignorant!!!" &amp;#x200B; lol &amp;#x200B; It's not, though. The world literally runs on spreadsheets. You may not like that, and there may exist better, more compelling, more secure, more-easily-validated, less lazy alternatives, but the world still runs on spreadsheets. 
I actually thought about adding this but then gave up as my method of changing slides is simulating the scroll-wheel event. But perhaps I could try chaining them together until the slide X is reached? I will try this later, thanks for the idea! 
There are two solutions: the 15-long pedantic one that adheres to all the rules and the last one where taking liberties with ASI is ok.
Thanks for pointing this out. This looks like poor variable naming on my part. The `iv` variable defined in `encryptEnvFile` is not actually being used as an IV directly, but is used to derive a unique IV for each environment variable by hashing together the `name` and `iv` values passed in. This occurs in the `encryptString` function here: if (name) { iv = Buffer.from(createHmac(iv, name).slice(0, 32), 'hex') } Since a unique IV is used to encrypt each environment variable value, I don't think this suffers from the failure of IV reuse. That said, I'm by no means a cryptography expert, so this may not be the correct way to go about it. Do you see any potential issues with this approach?
Google Fiber just pulled out of Louisville, giving 60 days of notice before they shut down the service. At least they were nice enough to not bill customers anymore.
Interesting observation. It is probably just implemented as an infinite loop on the thread, which is fine. Alternative solutions will probably need modification to the scheduler / event loop or special branches in I/O implementation, both of which have higher maintenance cost. 
&gt; not "four thousand two hundred ten four" Maybe you are talking on a CB radio?
ok, maybe your average person opens 1 spreadsheet a year, meanwhile there are billions of browsers running at any given time. And here we are talking about routing clients through a 3rd party (or a 4th in this instance). What agenda is it that would assert "spreadsheets rule the world"? As it is laughably stupid, and completely ignorant of what I'm trying to get at here. Hint, an api on sheets isn't going to do shit for this category of problems except create new ones.
Thanks, I hate it 
I had the towns confused, it was in fact Louisville. Ironic since they expected a long-term commitment from the customers and then left on a dime
You HAVE to make SURE it can be USABLE on IE/EDGE/WHATEVER. It might not be PRETTY. It might not be using latest cute stuff. Links MUST work and images MUST be shown. That's as simple as that and the existence of odd browsers is a really good thing.
Better suggestion for title: "Can you find the JavaScript bug I once struggled with?" People might think you're asking for help based on the current title
&gt;Enter one of the obscure Unicode characters that the Javascript spec recognizes as a line terminator: the Paragraph Separator character (\\u2029), which, when rendered properly, looks like this: . Aha, this allows for some next-level code obfuscation. ·Öü=1·Öü++console.log(·Öü) //prints 2 &amp;#x200B;
Hi /u/_vTwo, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/magenta_placenta, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
that‚Äôs a good suggestion, thanks!
If you fond this useful, try https://form.io which has a free cloud plan and also have open sourced almost all their code, which also includes a JavaScript SDK for rendering forms and more.
can you gist this? [https://gist.github.com/](https://gist.github.com/)
There's a lot more to it than that; one of the big killer features is out of the box server side rendering. Check out the answers to [this same question](https://www.reddit.com/r/reactjs/comments/apf4c1/nextjs_8/eg7w3oy/) that was asked on /r/reactjs.
Forgive me but doesn't google already naively support this with their API manager -- Like, using Google's OAuth / Sheets API? Is this just an easier way of doing this? 
thank u.......next 
I think that if your app cannot handle local data being erased, then you are doing something wrong.
well, it does not work for me
&gt;Interesting observation. It is probably just implemented as an infinite loop on the thread.Alternative solutions will probably need modification to the scheduler / event loop or special branches in I/O implementation, both of which have higher maintenance cost. Maybe yes, maybe no! But in this case, "event loop" should not be involved, there is a banal stack Maybe this is such an implementation of the engine inside the browser))
There is a difference between trusting the data and assuming its there.
Nice work :-D
That‚Äôs why I say, it is bad design assuming your data is there.
Oh wow that is pretty crazy 
I didn‚Äôt read in detail, but how do they come up with these code pieces? Are they hand-written or some sort of brute-force loop running every possible combination through an `eval`?
r/lostredditors
Hi /u/v4forms, this post has been removed. This is the 5th time you've posted the same exact project here in the past 5 days. That's quite excessive. Please do not post it again unless there has been **major** updates. Thank you.
I hate this meme, but by God I upvoted you because when I saw the abominations in that link I said it word for word.
Hand-written, although one of the responses to my twitter thread about this suggested someone once used some kind of fuzzer to find such long sequences as well... Basically, however you do it, it's fun!
Hi /u/v4forms, this post has been removed. This is the ~~5th~~ 8th (!!!) time you've posted the same exact project here in the past 5 days. That's beyond excessive. Please do not post it again unless there has been **major** updates. Thank you.
Hi /u/Destabilizator, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Nexus_Valentine, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/Nexus_Valentine, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mrcarasus, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Ok thats your code, but can u share what exactly is the help u need? 1) I can see at least 2 broken form tags in there - &gt; &lt;form action="/action\\\_page.php"&gt; **// i cant see a closing form tag for this one** &gt; &gt;&lt;form action="test.php" name="myForm" onsubmit="return(validate());"&gt; **// i cant see a closing form tag for this one** 2) Have you considered using radio buttons in place of checkboxes for the Yes/No since they are expected to be mutually exclusive? &gt;&lt;input type="checkbox" name="email" value="Yes"&gt;Yes&lt;br&gt; &amp;#x200B;
Hi /u/unclestogys, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
What's with everyone using "Chrome" instead of "browsers". ugh.
Immediately found a way to improve it: \`\`\` async function\* await() { from: set: while (0) { if (0) throw as else this null continue from false break set true var let debugger do return yield await delete void typeof get instanceof static in new class of extends async function undefined () {} {}; while (0); } } \`\`\`
Probably because they were testing on Chrome and not all browsers.
This might be an idiotic explanation, but it could be related to market share as Chrome is somewhere around 60 and 70% while the rest is split between FF, IE, Edge, Safari etc. Other than that, devs are using (mostly) Chrome and/or Chromium(-based browsers) so it comes quite naturally to say "Chrome" instead of "browser". Also, take into account that WebKit as it is implemented in Chrome is used by Electron and V8 engine is powering up Node. Or people just lost the common sense regarding terminology and other stuff like that. Thanks Medium articles and gists!
Ugh what kind abdomination is that. Great work üòÇüòÇ
:D Agree, however he did ask for our feedback and feedback is nothing but opinion. Fair Point though,Also nothing I mentioned is probably going affect final Grade/Mark apart it was just random biased opinion. 
Hi /u/puzlius, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Cool thing.
I need to get this in production asap
It‚Äôs a bit of a gotcha I guess, but the behavior seems right. 
You're in High School making this? Are you freaking kidding me?
curious, yes, chrome accepts it as valid, but it cant execute it, does it still count then? &amp;#x200B; &gt;(async function\* await () { &gt; &gt; &gt; &gt;from: set: while (0) { &gt; &gt; &gt; &gt;if (0) &gt; &gt; &gt; &gt;throw as else this null continue from false break set true var let debugger do return yield await delete void typeof get instanceof static in new class of extends async function undefined &gt; &gt; &gt; &gt;() {} {}; while (0); &gt; &gt; &gt; &gt;} &gt; &gt; &gt; &gt;})() **Uncaught SyntaxError: Unexpected reserved word**
Well, yeah, currently in 11th grade of German High School, but we have only done the basics of JS in class but the teacher knows that I am very interested in coding so he usually just gives me some advances assignment like this one to keep me busy ^^
But I don't write regex.
You must've made a mistake when copying the code. The original has `async function* foo() {` in the first line, you have `async function* await () {`. To run it while leaving the snippet intact, you can just call `foo()`
In this challenge, only the line that starts with `throw` counts (all the other ones have symbols between keywords). But glad to see you found another opportunity to abuse Javascript :)
In this particular case, it's because the last snippet uses fairly new Javascript (async generators), which don't even have a compat table on MDN yet. MDN says Edge doesn't supports `for await` (from the same year spec) and it shows a `?` beside Mobile Firefox and iOS Safari. So rather than telling people to run the snippet in browsers that may not actually support all of the current Javascript spec, I wrote "Chrome" with the assumption that most people in this sub would have it at least installed on their machine.
Yeah that's why I would never recommend to run a business based on any free software "hack" (another example is using github gists as a json db). You pay money for services for the reliability, and any company based solely on free services is destined to get fucked over someday
Does it include DLL hell with it? Cause if not, its not really win 95 
`yield` caught my eye, never knew about it. Nice short syntax.
ah jesus, definitely... i took this one instead [https://www.reddit.com/r/javascript/comments/apifua/what\_is\_the\_longest\_keyword\_sequence\_in\_javascript/eg8y3ms/](https://www.reddit.com/r/javascript/comments/apifua/what_is_the_longest_keyword_sequence_in_javascript/eg8y3ms/) 
they recommend you do not use it as an full CMS and there Requests per second are really small though. Also found that people already understand spreadsheets over airtable. I think airtable is pretty cool though! 
Hi /u/BinaryDichotomy, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/uuuzzz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/areknawo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/WritingStufff, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/magenta_placenta, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/flappynoisehole, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I'm pretty sure he didn't rewrite the whole of win95 in JS. He used [https://github.com/copy/v86](https://github.com/copy/v86)
This is not a JS error, just a browser error telling you that it can find the fav icon file. It can be ignored.
yes.
Okay awesome thanks! I appreciate it! I‚Äôve been trying to figure this out for the longest! Thanks again!
create a favicon.ico file if you want the error to go away. https://www.favicon-generator.org/
Sorry, my bad!
The reason I mention React and the context there is because this is literally a paradigm we're building off of React's idea. React came out with hooks, and then we tried to see how it could fit into Vue. An article about scoped slots, for instance, wouldn't need context from React necessarily. Hope that clarifies.
Buffalo buffalo buffalo buffalo
It's a very generic question. I remember writing it for one of my first introductory classes at uni a decade ago. 
Haha, I know buddy, I‚Äôve been a dev for years. Just wanted to check.
Gonna fuck with some peoples codes and input some u2029 spaces muhahahahaah 
HOTFIX TO PRODUCTION PLS LAUNCH ASAP
What exactly isn‚Äôt working? What I usually do when I encounter something like this is to console log after every step what my variable is and why it can different from what I expected. 
void void void void void void... 0
Umm, it sounds sketchy but its something everyone is trying to figure out in my class. In my AP class we are trying to create an autoclicker which is needed for a crossword puzzle. The clicker will click the same specific word which will be a code to solve the puzzle. 
There used to be a few soccer APIs that were free, but as far as I know they all cost money at this point unfortunately for anything other than obscure endpoints.
The code finds the number spacing and finds the word in the list to replace it with, then when clicked again it reloads to save it and clicks the code again to repeat the process until it is finished. LMAO SKETCHY AF 
right, should have given more detail. it never actually calls the this.query so i guess its probably not a scope issue, maybe the debounce is on the fritz. I think i was too hasty in making this post. 
Can you give me some more code? Like how you implemented the debounce function and what the query function is doing. I work a lot with Vue so if I‚Äôm at work tomorrow I can check it out for you. 
If they're built from a common core have you considered a monorepo? https://en.m.wikipedia.org/wiki/Monorepo
Desktop link: https://en.wikipedia.org/wiki/Monorepo *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^237839
\[deleted\]
Nice buzzkill there slick ;-)
You're probably running into the fact that `this` isn't bound to what you think it is inside your debounce function.
JavaScript has some weird definitions about what counts as a keyword and what doesn't.
Try this one [https://apifootball.com/](https://apifootball.com/), it has a free plan including 180 app calls per hour, but only for championship and ligua1. 
Fuck c
there are lots of ways to invoke functions in javascript. If the developers didn't get too tricky, you can do it manually, search for the string, and search for the functions that use it, till you get to a known place in the code. grep from the command line, or bring the whole directory in to vscode or something and search all files. But again, js can be very dynamic, so it might defy normal analysis like that, even with tooling. If it is an external entity calling it, about all you can do is log stuff. Might as well dump stack inside updateUserAccountDetails for a spell and see what you can learn by watching the logs.
I ran into a use-case for this a while back (I think). I was keeping track of my spending in a google sheet. It worked great, but launching google sheets and trying to make changes on my phone was no fun, so I built an app with a simple UI for quickly adding new rows to my spending table. I used google's API for accessing the data in the sheet, but it was a bit of a pain. This seems useful in cases where you want your data in a spreadsheet, but you want custom tools for interacting with it.
`debounce` doesn't call your function; it creates and returns a new function with the debounced behavior. It's up to you to call that function in place of the original. const log = debounce(console.log, 1000); log(1); log(2); log(3); // wait one second... //-&gt; 3 You'll need to create your debounced method beforehand, then call it from within `focus` as needed.
Thanks baby love you longtime
[https://www.youtube.com/watch?v=3Z9yK3sMDUU](https://www.youtube.com/watch?v=3Z9yK3sMDUU)
Ok but why tho
I had that thought as well, but am having no luck with focus(value) { if (value) { this.debouncedQuery(value); } }, debouncedQuery(value) { helpers.debounce(() =&gt; { this.query(value); }, 300); },
You're still calling debounce without capturing its return value. As part of construction/mounting you need to save off the return value of debounce as an instance variable, then call that in focus
You have to wait until the html of the page has loaded before accessing elements on the page. document.addEventListener('DOMContentLoaded', (event) =&gt; { const myDiv = document.getElementById('myDiv'); }); &amp;#x200B;
Dude, the mind boggles when I think about how much time you must have spent on this. Massive props
Other commenters are right that the best approach to sync to cloud storage is through the cloud storage service's API. This usually requires some kind of OAuth flow, as with Google Drive. Once you authenticate access, you can use the Bearer token with the Google Drive REST API to make the calls you need. You can also use third-party tools to simplify the process, like the Kloudless File Explorer: [https://github.com/kloudless/file-explorer/](https://github.com/kloudless/file-explorer/) (disclosure: I'm CTO). The File Explorer lets you prompt users to connect their cloud storage account and handles the OAuth flow for you. It returns a Bearer token and information on where to upload the file, or which file to download, to your web app. The unified API ([docs](https://developers.kloudless.com/docs/v1/storage)) lets you support over 20 different cloud storage applications, including Google Drive, with a single integration. &amp;#x200B; \&gt; how can I ensure all changes are being written back to Google Drive app data folder, before user quitting the browser? &amp;#x200B; Either approach you take, the usual way to solve this issue is to periodically run a method in the background to auto-save data to the cloud storage folder. You can do this via JavaScript with setTimeout/setInterval, for example.
Man. I love this &amp;#x200B;
Looks about as secure as OP's mom. 
Thanks man!
Oh crap, got it.
This is the greatest landing page of all time
That attitude will get you far :) 
El.style.display = ""; If u are using jQuery you can call show()
Great read! I've been playing around with React.memo() with functional components lately, works pretty similar if not the same.
\`coastId\` is not used and you are filtering on \`nodeId\` which is undefined. Are these meant to reference the same value?
First thing I look at is if they use windows operating system. That tells you right there if they are an outfit that doesn't know what they are doing and are looking to make an impression (probably to sell the company if it looks good). When they are using linux I know they are serious and technical, they understand that work needs to be done and chose a work tool to do it with. It gives the impression of professional competence and a business that might go somewhere.
But why
Yes, sorry they are meant to reference the same thing. I edited a bit before I posted. This is what I currently have that is almost correct, except the totals anything above the lowest level are doubled. So instead of showing 38007.74 it is showing, 76015.48. function createGrossSales(baseHeirarchy, storeSales, date) { let newestObj = { "name": baseHeirarchy["name"], "children": [], "total": 0}; if(baseHeirarchy.children){ baseHeirarchy.children.forEach((child) =&gt; { var result = storeSales.filter(store =&gt; store.storeId === child.id &amp;&amp; store.businessDay === date) if (result.length){ let total = result.reduce((a, b) =&gt; a + b.grossSales, 0); newestObj["total"] = newestObj["total"] + total; } var newGross = createGrossSales(child, storeSales, date) newestObj["total"] += newGross.total; newestObj.children.push(newGross); }); } else { var result = storeSales.filter(store =&gt; store.storeId === baseHeirarchy.id &amp;&amp; store.businessDay === date); var total = result.reduce((a, b) =&gt; a + b.grossSales, 0); return { "name": baseHeirarchy["name"], total}; } return newestObj; }
I made this ü§∑üèª‚Äç‚ôÄÔ∏è(better with sound on) [https://codepen.io/sdras/pen/PVjPKa](https://codepen.io/sdras/pen/PVjPKa)
I hate my workplace aswell
&gt; [...] because the cross-posting feature is disabled for this sub It's `on`. Are you sure you're subscribed here? :)
Here's how to set up speech recognition. Then you can do things based on what your code hears. &amp;#x200B; const speechRecog = new webkitSpeechRecognition(); &amp;#x200B; speechRecog.onresult = event =&gt; { const whatWasHeard = event.results\[0\]\[0\].transcript; &amp;#x200B; // do stuff with the string of whatWasHeard }; &amp;#x200B; speechRecog.onend = speechRecog.start; &amp;#x200B; speechRecog.start();
It's a non-standard feature so beware! but you can use `caller`. function f0 () { console.log(f0.caller.name); // f1 } function f1 () { f0(); } function f2 () { f1(); } f2();
very nice solution, how long did that take you to accomplish?
Has anyone ever really been far even as decided to use even go want to do more like? In javascript?
TIL the paragraph separator counts as a line terminator. Forget the Greek question mark, this one will be a lot more fun to play with.
no.
Hi /u/ResponsibleOstrich4, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DoctorBertHutt, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/idkfix, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Scorpio2023, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AlmoschFamous, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/deverlever, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Wraith000, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/poetry-linesman, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I hadn't really, and that does look like it might make the most sense. Basically the same idea as where I was going with abstracting out the common stuff into a 3rd repo, but without the actual separation part at a repo level. I don't think I have the time to actually make those changes before I need the cloned site up and running, but definitely going to think about going that route. 
nice!
Have you ever had a dream that you, um, you had, your, you- you could, you‚Äôll do, you- you wants, you, you could do so, you- you‚Äôll do, you could- you, you want, you want them to do you so much you could do anything?
You may want to run your React app through Webpack before inserting it into your HTML. I suggest using the `create-react-app` package, as it will come with a Webpack configuration out of the box. All you have to do is `npm run build` to get your JavaScript transpiled from ES6 to something your browser can use and your HTML generated to be using it too.
did you forgot to include the below React scripts? `&lt;script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"&gt;&lt;/script&gt;` `&lt;script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"&gt;&lt;/script&gt;`