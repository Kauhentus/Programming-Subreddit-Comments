No shit. I almost don't want to waste my time since my degree and passion is actually penetration testing - but a lot of that is also based around web apps so yeah.
Sounds like people use it as a crutch to transition from typical OOP languages, instead of learning the actual structure and strengths of Javascript.
 process.on('SIGTERM', () =&gt; { server.close(() =&gt; { process.exit(0); }); }); Could have been written as: process.on('SIGTERM', () =&gt; server.close(() =&gt; process.exit(0)));
I have no idea how you've come to that conclusion from my post. Most of the festures I listed have nothing to do with OOP, in fact several of them are inspired by FP languages. And my point was precisely that these are immensely useful features which do not exist in JS.
&gt; Why doesn't ES6' arrow functions count? Because that's not just *any* function, that's a *specific kind* of function that is used to preserve the context. Normal functions are still declared as `function(...){ ... }`. In CoffeeScript, functions are declared as `(...) -&gt; ...`. &gt; Since when doesn't JS have an object literal syntax? JS has object literal syntax, but in CS it's different, and ES6 doesn't seem to adopt it. &gt; ES6 might not have array comprehensions, but ES2016 certainly does Wonderful, how is this relevant?
on the books as hating coffeescript. I'll apologize in advance if i get snarky... i'm actually trying to answer your question here - admitting that I'm no expert so grain of salt etc etc.... Having said that, There's a few things up there you listed that are nice. 1-4 and 7,8 are present in ES6. 5 one can mistake as arrow functions, but that's not exactly the same. 6 I'm inclined to say is personal. I personally don't expect and `if` to return a value. ok great. the rest? well the rest, you provide reason to why they're a feature of coffeescript. But to me, it still compiles down to JS, so all those features you mention aren't in JS but are in CS have to be implemented... if i need those features, I'll look into how to implement them. Thats my take. I don't need all this overhead, that in my humble opinion is only saving me a few keystrokes per line, for stuff that is simply compiled down to the language that doesn't have all that jank anywho.
I dunno. I don't have much immediate experience with CS so I won't argue your points, just has been my observation that all the "JS" devs I know who use it are really just Ruby developers who aren't willing to put in the time to learn JavaScript proper and insist on shoehorning in the "Ruby Way" to do everything.
Backbone is still great for small/medium apps. Really depends on the project scope but I love it's non-opinionated style. 
&gt; there might be something wrong with the community. his name is David
I think the point of the post you responded to is to show that in the coffee-script syntax writing the expression as a one liner is not offensive and seems natural, whereas as in ES6 or ES5 it looks terrible and unnatural because of all the extra punctuation. so rather than criticize him/her for writing "bad" javascript, maybe try and think about what his/her point was? this was a comparative demonstration of syntax. a case-in-point that coffee-script is capable of being more concise than javascript. 
it doesn't? why not? different languages aren't just alternative syntax for the same thing (though they're also that), but they're also access to an entirely new ecosystem of tools and libs to get the job done with. makes sense to me to be polyglot and use the best tools you can. now, in a perfect world there would be "the one true programming language" and in that fictional universe you can imagine that all tools are written in one language and there is never a need to use anything else. in the real world there's lots of tools written in lots of languages. 
You're right, it does look better. Changed and pushed, thanks.
Thanks, was trying to search for this today as I forgot to bookmark it earlier
I've been around the block with programming forums, with your first sentence you can sub out "Ruby" for any programming language. Truth is, it got popular fast (read, trendy), so it was in the spotlight along with the community, so everyone has an opinion.
I've used a ternary operator here, the format is basically, expression ? truePart : falsePart; If it's true, it returns truePart; false returns falsePart. If you wanted three options, I'd split out the random number into a variable and do an if/else if construct for readability, i.e.: var name; var choice = Math.random(); if (choice &lt; .33) { name = 'combination 1'; } else if (choice &lt; .66) { name = 'combination 2'; } else if (choice &lt; 1 ) { name = 'combination 3'; } 
Based on the API calls you appear to be making, this is something you can/should be caching so each client doesn't have to hit Uber's API. Why have all the clients hit Uber's API directly when you could query it yourself and cache the results for a short period (say, 1 minute). You could even dump that into Blobs on AWS or something, and request that from the client side. LMK if you'd like some help with that.
I somewhat agree with this. Yes, the code is always readable with spaces but say you're left with just `vi` or some editor that doesn't have any sort of auto indentation or plugins that we now take for granted. I promise you that you'd end up being frustrated by trying to make those spaces align just right rather than focusing on the problem at hand. This makes indentationed language a little restrictive than bracket(ed?) languages. If you do want readability in your bracketed code then you can always auto format later, not before fixing the problem.
That's true of every language. 
sure, my problem is with the management, not the framework; there are 1000 little things backbone could enhance without turning it into a Java Server Face for the web. Yet look at the commit history : "corrected this typo","added a comma here","removed a white space"... pathetic.
You forgot to mention all the things that coffeescript doesnt have. You know, the bad parts of javascript. 
Because ES5
I'd love some opinions on stuff I can add (that isn't just replicating the entire jQuery library.)
With Backbone in particular I don't see the problem. It has a job, it does it well. It doesn't have to be the one and only MVC framework, it can occupy a niche and allow others to fill other niches.
I went ahead and implemented caching on all the API calls: https://github.com/stevengoldberg/UberByCity/commit/25f561d307a58b44f5a9526da402e9bfe1cb44fc https://github.com/stevengoldberg/UberByCity/commit/20c3099a2c1130dfa7a85b44587ee78121e3c2f9 https://github.com/stevengoldberg/UberByCity/commit/feef3de821ba5cc9465e38f577cd294fbcbb540a
I'm not a coffeescript user. The syntax resembles Ruby, and I've written some programs in Ruby. I don't see what's wrong with reducing punctuation. As far as I can tell there's just a huge contingent of programmers who love bike-shed arguments and become ultra-partisan when discussing tiny minutia of syntax and style conventions. its not really a very interesting conversation though.
I feel like the worst "pro" for babel is that it is "future proof". This is just silly. Babel will implement features before they can be finalized in ecma and this can cause two deadly things. 1) Ecma solidifies broken syntax and features so that the babel community is happy and they don't break the "new" web. 2) Babel is forced to adapt to these breaking changes and you get screwed over. --- Don't get me wrong, babel is an awesome tool and it's definitely a lightyear ahead of javascript and I do enjoy it. I personally just feel more comfortable with a ground up unique and functional language that has become stable and won't break my code on a whim. Often people see things in CS like "is" and are like: ```dis isn't javascript tldr cba to red dis is too much for me now I tryn to lrn dis stuff and is hard n i hav no time + ruby idk so is bad.``` The reality is that coffeescript takes a day to learn and a week to master and it provides tons of functional benefits over es6. How long did it take you all to learn es6?
Implicit returns are a terrible idea 99% of the time. Also don't forget about being white space picky. Total shit. 
these.words ? mean.something =&gt; do.they? Coffeescript is hard to read because of the lack of syntax and context. Just because you're saving yourself typing a couple characters doesn't mean it's better.
the only thing I really liked was the =&gt; operator... originally I hated it, then i started coding in C#...then I fell in love. 
I don't use rails, but for rails 5 they are still keeping coffee script as default! It makes me cringe.
You should be able to do something like this - https://jsfiddle.net/dnn5qv5m/2/ This uses jQuery, but I'm pretty sure that's standard on a wordpress site.
I interviewed at a company in the Bay that was exclusively using Coffeescript. I told them thanks but no thanks. I don't need yet ANOTHER layer of separation between me and the code.
Didn't know that it is possible to make it this way. Thanks, I will try.
It's not default so much, it's just included out of the box. 
this is true for TypeScript as well. 
&gt; Context switching has a real cost agree. however, context switching's cost is typically incurred when switching rapidly, as in during the same work session. there's very little context switching cost in working in different languages during different work sessions. &gt; I've used plenty of languages, but I only really feel comfortable with a few. my experience as well. I'm not suggesting that a programmer should be comfortable with every language. merely capable of working in more than one language. also, programming is a team activity. its typical (and a good idea!) for teams to have diverse members with different comfort zones in their focus of language, technology, and domain. &gt; Being a "polyglot" is just another example of living in a "perfect world" where knowledge is effortless - it's a fantasy. you're projecting a definition of polyglot that I didn't say and didn't intend. polyglot programming just means not limiting yourself to a single language ecosystem. its still typical, and advisable, for a project to be mostly in one language and for teams to have deeper expertise in one particular technology. also, consider that in practice every web server-side tech stack in the world is de facto heavily polyglot just because thats the way servers work, by running a collection of services over a network. each service has its own interface, after all, so you're already looking at a poly-linguistic collection of shell scripts (bash and its variants), high level interpreted languages (python, ruby, javascript, etc.), configuration files (literally hundreds of flavors), domain-specific languages (ansible playbooks for example, or SQL as a different kind of example), command line tools (again, hundreds of flavors), and every other piece of software you have to interact with that has its own specific interface of one kind or another. so this isn't a fantasy perfect world I'm discussing. its the real world that we work in every day. we're all polyglots in web development whether we like it or not. I just embrace it and try to make use of the best stuff that's out there even if it means learning a new language or interface.
Neural Networks are computer programs that simulate how neurons process information. The idea came about from the realization that human brains can process rich, complex data quickly while most computer programs cannot. Neural Networks aren't as smart as human brains yet but they can do some amazing things. Some of them can recognize faces. Some of them can play chess really well. Some of them can recognize songs. All of them work essentially the same way. A network of "neurons" is defined. Part of this definition is deciding how each neuron will transform the data it is presented with as it passes it along to the next neuron in the network. Another part of this definition is deciding how the neurons talk to each other. Some neurons talk to only one other neuron. Other neurons might talk to many other neurons. Yet another part of the definition is deciding which neurons will be the ones that accept the initial input and which ones will produce the final output. Neural Networks need to be trained in order to be good at what they do. If you want your neural network to recognize faces then you need to present it with a bunch of faces and a bunch of things that aren't faces and tell it which are faces and which are not. You might need to tune your network during this process. After a while your network will be able to recognize faces from non-faces. Neural Networks have been studied for many years. There are some proven network models that have many uses. Libraries like Brain.js have these built in so that you don't have to start from scratch. This is very useful for people that want to get started with Neural Networks but don't want to deal with all the math behind them. TL;DR Neural Networks simulate brains. They are good for solving problems that are so difficult to solve and so complex that [the only way left is to hack your own brain](https://www.youtube.com/watch?v=wlHl7pdtyDc&amp;t=3s).
Oh. Then it looks like [this article](https://blog.engineyard.com/2015/a-look-at-rails-5#coffeescript) needs to get their stuff straight.
But whitespacing doesn't solve this problem. Due to editor differences, I've seen code like this: if m: a while g: b for x in y: a b if x: a ... 150 lines of code ... elif not z: a b e c d else: f g The argument which is often made is that this one tiny permutation in syntax magically makes people write phenomenally clearer code through some hand-wavy abracadabra. Total nonsense. Bad programmers are also bad python programmers. python has lots of valid semantic wins like generators, iterators, decorators and context managers that sell it just fine as a great language ... there's no need to tack on totally bogus syntactic claims such as "white space instead of curly braces makes for better programming".
My main gripe about "fat arrows" is that it looks like "equals, greater than", which are equality operators being used in a very counter-intuitive way. Having to read code will be slightly more difficult now that &lt;= and =&gt; are valid ways of representing very different things. IMHO it's a stupid way to represent what it does, something better could have been used other than two very mathematical symbols. 
&gt;Total nonsense. Bad programmers are also bad python programmers. So you're saying that it doesn't make a difference and its all about personal preference? [K](https://www.youtube.com/watch?v=0la5DBtOVNI).
Trading in issues with semicolons for issues whitespace errors. :/
apologies. I wasn't directing the whole thing at you. I'm sure you're a reasonable person. I just have a hair trigger when I see programming aphorisms taken as gospel.
whitespace does not make code easier to read even english uses puncuation marks and capital letters without them you end up with nothing but paragraphs it is difficult to read english without puncuation this comment is an example of that coffeescript and other significant whitespace languages look much like blobs of text
you can see examples of the generated 3d cities on this page https://github.com/aserg-ufmg/JSCity/wiki/JSCITY
`something.forEach(client =&gt; { /* function */});` `something.forEach(function(client) { /* function */ }.bind(this));` That is basically the *only* reason we need to use them. EDIT: For the record, I meant that alone makes them worth it. They can be used outside of this use-case, but I'd say it's the best reason that they are a good thing.
Seeing and counting white spaces is not a super power. And yes editor also highlight them. Indenting is very important in any language.
point.taken
Real-world CoffeeScript has the worst readability after Ruby. Sure some people can write very nice Coffescript but so many are just being smartasses leaving a tangle of densely encoded programming tricks. It is like the opposite of Python.
I wrote a JSON parser in assembly for an embedded chip, so I can send JSON to a serial port and out to a &lt;$1.00 cpu, from a web browser connected to remote server programmed in javascript. So they can work together, each has its place, but when I need things to happen in *nanoseconds*, I choose assembly. It's apples and oranges. I've also written plenty of UI code in assembly, including LCD drivers - and it's not all that fun.
This is a Unix system, I know this!
Thank's for the feedback and suggestion!
&gt;Classes in most OO language have their own weird, hard-to-explain quirks. Yeah, and those are what makes them classes. Just cause two things are weird in their own way doesn't make them equal in any way. I can easily see some Java dev authoring an article in future titled "Why OOP in JS is an illusion" or "10 things you should know about classes in JS. 1 - they're a cheap trick". JS is just setting itself up to get ridiculed from the same people it's now trying to appease.
That's simply not true. Maybe you just don't know the language well enough. Then it's really no suprise it's unreadable to you.
I've used Coffeescript. There really isn't anything glamorous about using Javascript, nor does Coffeescript let you bow out of Javascript's harder parts like the dynamic binding of `this`. Also, ES6 introduces the same `class` syntactic sugar to Javascript...
TIL! Amazing that they were considering type annotations. I haven't seen any proposals for type annotations for ES7+. Maybe they've decided to leave it to third party tools like Flow?
It's pretty late so I won't go too far into detail, but I'll point you in the right direction. If you want JavaScript, then you'll have to go with NodeJS. I haven't personally worked with the Facebook api, but I'm pretty sure you'll find what you're looking for with deleting and reading comments. If Facebook's api works how I think it does, then you'll need to essentially make a get request every so often for the first x comments of your page. Once that's done, its a simple loop through an array and `comment.indexOf(swear) &gt;= 0`. For Node, you'll need to use either the built in http module or download request from npm (I suggest request). From there, you just pass the URL and method (get) and wait for your data to come back. There are loads of tutorials on how to do things like this, so you shouldn't have too hard of a time. 
Paul Irish mentioned it further down this thread, for me that certainly adds more credibility to the claim
There is so much hand waving in this thread it's unbelievable. Please can you explain how the classes that exist in ES6 are meaningfully different or limited compared to classes in other languages? The fact that `typeof (class Foo {}) === "function"` is an implementation detail, it doesn't change anything about classes themselves.
You can add a rule to your hosts file like this: 127.0.0.1 googleapis.com Or block the route using any blocker addon which supports custom rules (I think of uBlock and Adblock). That's the only way without changing code afaik but it'll definitely speed up loading of the page. Edit: To support jquery tho, that's the biggest problem to solve here. When you added googleapis to your hosts file, you could start a local server (xmpp, python -m SimpleHTTPServer do the job quickly) and serve only jQuery for every request. You still have to block googleapis tho. You could try to use one of these "jQuery always plugins" for chrome Firefox etc. Again, you need to block googleapis You could write a small proxy which replaces googleapis cdn with other cdns which host jQuery (if you're a more experienced developer this will take about half an hour at max.) When using a proxy , you don't need to block access to googleapis since it'll never hit the browser. You could try to use chromes userscripts to load jQuery early (you will still need to use one of the methods to block access to googlrapis above)
Thanks for the reply! I think I may have worded my question a bit too vaguely. I'm using LaunchRock to generate and host a simple launch page. The auto-generated code imports jQuery from googleapis. I'm trying to figure out a way to prevent this behavior so that people from China will be able to see the site without having it get stuck on the googleapis call. I can't change the auto-generated portions but I can insert custom javascript into the template.
how about listening the DOMContentLoadedevent and then just delete that javascript using selector.
[medium is warning me that this video does not comply with my do not track settings](http://i.imgur.com/He8Lrn0.png)
The point on 'visual cues' is a big deal-breaker for me. I don't understand why you'd remove things like parentheses and semicolons; they make code so much easier to follow.
Anne of Green 3D Navigables
I'm not on board with Coffeescript, but this whole discussion is really curious, as I actually had the same attitude towards Sass when it first came out. Since then I've learned to love it (and respect it - I've seen far too many projects with 10+deep nested declarations), but for some reason I've still not had the desire to really try Coffeescript. Brains, huh? There's just something about the lack of semicolons and the requirement for specific indentation. It feels... fragile; like building a house without half the supporting struts.
I see. I will look into launchrock as soon as I get to work. :) I'm on mobile atm, damn long train travels...
If a script is on the page, it will be loaded. You can't put any script before the jQuery one, since the DOM won't be accessible yet, and you can't put it after the jQuery script, because by then it'll already be loaded. If you can't change the auto-generated script or the actual `&lt;script&gt;` tag, you're pretty much stuck with the script call :(
Those are semantically different, though, and if the return value doesn't have a semantic meaning, I don't think the function/callback should return anything, as it would be slightly misleading and confusing to the reader.
Damn, I already typed this a few minutes ago but it didn't get posted due to network issues. I srsly hate Redditch mobile experience. Anyways. I thought launchrock was a command line tool which allows you to make custom start-up pages, turns out it's a service on the web. I registered using the starter-plan and its not possible to stop it from using googleapis. Their paid plan claims to allow custom HTML content, this could make removing googleapis a brise. Otherwise it's not possible to stop the request while it's on going. You can't stop a running request because it would cause more harm than good. Malicious scripts could stop on going requests and instead load other libraries etc. Removing the &lt;link&gt; tag might work if your JavaScript was loaded before the &lt;link&gt; tag but that's not the case in their starter plan. Do you use the professional plan or just regular starter plan? 
It does exactly what the CoffeeScript version does though. process.on 'SIGTERM', -&gt; server.close -&gt; process.exit 0 Is compiled to: process.on('SIGTERM', function() { return server.close(function() { return process.exit(0); }); });
If you're unable to reproduce the behaviour, are you sure it's not malicious? What you describe sounds like what you would see in a fuzzing attack: known good input gets shuffled around to see whether any other variations are valid. It's nothing to worry about if your application is secure but you may want to detect misbehaving users and ban or slow them down.
I think the comments and the edit to the question are correct - the values are not from your client-side code, but from an automated pen testing software that's logging valid values being transmitted to your server and fuzzing them to see if they trigger any sort of response that could be exploited. In other words, you should log those requests and see if there's anything else that are suspicious about them (eg. frequency, IP address, headers, etc. that could indicate they were not being sent from a browser, but from an automated tool) 
Hi /u/RemoteJoe808, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Interesting. It's just a standard youtube link pasted into mediums editor. 
&gt;Everything is an expression (ES6 still doesn't have this, if being a statement instead of an expression is a giant pain in the ass in ES6) x = condition ? 3 : 5; x = do { if (condition) 3; else 5; }; &gt;Existential operator function exists () { return this !== undefined &amp;&amp; this !== null; } x = 5 y = null; console.log(x::exists() &amp;&amp; y::exists()); &gt;Conditional assignment x = x || 3;
Thanks for your suggestion, but the service we're providing is not directly assigned to users. That's why it's not possible to detect or ban a misbehaving user.
[**@wesbos**](https://twitter.com/wesbos): &gt;[2015-09-18 15:34:49 UTC](https://twitter.com/wesbos/status/644897369000030209) &gt;🔥 Three less JavaScript Regexes you'll have to write with ES6 startsWith\(\), endsWith\(\) and includes\(\) [*pic.twitter.com*](http://pbs.twimg.com/media/CPMifJhVAAEEQSv.png) [^[Imgur]](http://i.imgur.com/8E3FGy0.png) [**@wesbos**](https://twitter.com/wesbos): &gt;[2015-09-21 13:45:17 UTC](https://twitter.com/wesbos/status/645956967660294145) &gt;🔥 Return multiple values from a function with ES6 destructuring [*pic.twitter.com*](http://pbs.twimg.com/media/CPbmWdhUwAE8vO2.png) [^[Imgur]](http://i.imgur.com/D4bWAJw.png) ---- [^[Mistake?]](/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3lxmf8%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Depends on how serious the project is and how long it needs to run. For a hobby project or a short a throw-away app by all means go for it. For a long-term business project with real money and stakeholders maybe not yet. What is your plan if you hit bugs in production? I wouldn't like to have to explain a choice for preview technology to non-technical stakeholders who's money we're burning.
&gt; telecommunication corporations As in ISP? If so, it could easily be an attack performed by a botnet...
Looks interesting, but what about the usual rounding problems when doing numerical computations in JavaScript? Is some special numerical library used in Brain.js like http://www.numericjs.com/?
worse case scenario: rewriting those lines of code to use a different async library and syntax. that will take very little time. in the javascript world you will have far more time wasted with things like fiddling with webpack, new node versions, breaking APIs in major modules that your project depends on, new trendy syntax. 
Sublime text is my favorite so far.
[**@mpjme**](https://twitter.com/mpjme/) &gt; [2015-09-22 13:03 UTC](https://twitter.com/mpjme/status/646308765206188032) &gt; @Medium hey, is this expected behavior? https://www.np.reddit.com/r/javascript/comments/3ltwk0/composition_over_inheritance_9_min_video/cva2ogw ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
It's not risky unless you purposely update your dependencies without properly testing your existing code. Which is a stupid thing to do. Its OK as long as you are aware of this and don't do stupid things.
Math functions "return" last "line". `f(x) = x + 2` is written `(x) -&gt; x + 2` in CoffeeScript - lack of explicit `return` keyword significantly reduces clutter. You wouldn't say math notation would benefit from adding something like `return`. Statistically speaking, the shorter the function is, the better (see [this book](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) for rationale). One line functions are (still only heuristically speaking) "the best". Their readability benefits greatly from implicit returning. Also you still can write explicit `return`, CoffeeScript doesn't stop you. The only situation where it can cause problems is when you depend on a function returning `undefined`, and that's just awful design. Significant whitespace is not annoying. It may be annoing for you, but there's plethora of developers using Python, Haskell, Ruby and being very happy for them. If it causes transpiling errors then maybe your code is badly indented. In which case you should fix your editor or your habits. 
This seems to be valid for us as well since our checksum (6 characters) and an additional identifier (below 8 characters) doesn't get modified.
[removed]
Unit test?
Your `package.json` states: &gt; ... &gt; "main": "index.js", &gt; ... ...do you mean `server.js`? I'll continue browse'n.
I think you're a lot more likely to run into problems using callbacks or vanilla promises. w.r.t `yield`, `await` and `yield` aren't that different, but `async`/`await` has a nicer syntax, cleaner semantics, and a more focused goal. Anyway, `async`/`await` are stage 2. That means that the committee expects them to make it into the standard without many changes. (Could be wrong about that.) Pinging /u/bterlson_ Oh, and they may be moving into stage 3 soon, last I heard.
&gt;It's not really that confusing since you always say "greater than or equal to", not "equal to or greater than". =&gt; is invalid comparator, so the brain is safe to parse it as an arrow. That isn't how programmimg works, unless you are constantly speaking out loud while reading the code - you never *say* anything, you read code and now your mind has to do extra work because = and &gt; are no longer in the domain of math, they are now being used as gimmicky ascii art. You can try to justify it, but the fact is before "fat arrows", = and &gt; required zero extra effort to recognize, but now with ES6 reading code will be just a little bit less easy than it was before.
iow, the same list of answers to the last 10 times this was asked ... on reddit ... today ...
We are very excited to use it in our test code, but are unsure about using it in production. We want to see how we develop async/await methods in test code for a while, then work on using it in production. The biggest problem I see is that errors don't actually follow source maps -- the exception is triggered in our browser-polyfill and that's where the console logs exceptions as being thrown.
Stage 3 is expected for the end of September, so it should come pretty soon.
I would never make the assumption that any proposal is inevitable. Things that seem like shoo-ins have been dropped before.
Have you tried using https://github.com/douglasduteil/isparta or https://github.com/ambitioninc/babel-istanbul?
&gt; f(x) = x + 2 is written (x) -&gt; x + 2 in CoffeeScript - lack of explicit return keyword significantly reduces clutter. Yeah and: `(x) =&gt; x +2` Is valid ES6. &gt; Statistically speaking, the shorter the function is, the better (see this book for rationale). Which part of the book says that and how? &gt; Significant whitespace is not annoying ... / ... plethora of developers using Python, Haskell, Ruby and being very happy for them. I am not against significant white-spaces, but I'm arguing that it might not be worth the extra pain, given that its not conventional to most JavaScript programmers. I also dislike the fact that white-space indents break backwards compatibility. Also I would argue 99% of developers have the discipline to fix their indents -- and even if you are lazy its very easy with some IDE magic. Also white-space is not significant in Ruby. 
Also worth noting that CoffeeScript really started the movement to transpile other languages to JavaScript. Who knows if ClojureScript/Babel/LiveScript etc... would even exist today without CoffeeScript.
I've written my share of assembly too, back when it was the only viable choice to make something fast on machines that shipped with only interpreted languages built-in. I don't miss it. Whether assembly is fast or enjoyable isn't my point at all though, re: web development.
Wise words!
Love your video and article - really great explanation!
X-Post referenced from /r/aureliajs by /u/Davismj [Aurelia Authentication: Sessions](https://www.reddit.com/r/aureliajs/comments/3lyc9o/aurelia_authentication_sessions/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
&gt;&gt; f(x) = x + 2 is written (x) -&gt; x + 2 in CoffeeScript - lack of explicit return keyword significantly reduces clutter. &gt; Yeah and: &gt; `(x) =&gt; x +2` &gt; Is valid ES6. I wasn't arguing against ES6 but in favor implicit returns. &gt;&gt; Statistically speaking, the shorter the function is, the better (see this book for rationale). &gt; Which part of the book says that and how? In a chapter called "Functions"? First sentence of the first subsection of Chapter 3 (Functions) it says: "*The first rule of functions is that they should be small.*" (it's repeated reformulated many times after that) &gt;&gt; Significant whitespace is not annoying ... / ... plethora of developers using Python, Haskell, Ruby and being very happy for them. &gt; *(...)* &gt; Also white-space is not significant in Ruby. You're right, my bad : ) 
Thanks for good point!
Http://etherpad.org being the ready to use alternative
Granted, but run in a [Tmux pane](http://tmux.github.io/), with a terminal and database terminal open, with a number of good [plugins](http://vimawesome.com/) it becomes quite IDE like. Put it this way, I switched back from JetBrains IntellJ to Vim.
&gt; * classes (the implementation is much closer to CoffeeScript's than ES4's so I'm counting it as nope) You still can't say that the genesis of the concept is Coffeescript's to claim, at least not alone. If anything, I'd say this is a push. &gt; * proper tail calls (it's in the spec, but so far no JS engine actually implements it, so I'm going with nope) That's disingenuous... ES6 is the spec, which is what I thought we were discussing. &gt; On the other hand, let's look at CoffeeScript features in ES6: &gt; * Default values for arguments Page 22. &gt; * Destructuring assignment and in function parameters Assignment page 22, params page 33. &gt; * Classes For completeness, page 9. &gt; * String interpolation Got me here, a completely original feature. &gt; * Lexically bound functions Page 29. &gt; * Variadic function parameters Page 22. ---- So, one (or 2, if you still want to claim classes) of your features came from CS. Look, I'm not trying to discredit the work and impact that CS has had on the ecosystem. I do appreciate what it's done, even if I don't use it myself. However, I don't think it's fair to claim that CS was the genesis for all of these features, because that ignores the many years of work done on ES4. CS was simply the 'first to market', so to speak.
Cors errors come from the browser. Different browsers may handle it differently. If you check the request and response in dev tools and the options request is coming back with the appropriate allow-origins header than I don't really know what to tell you. I had trouble with firefox AND ie when i was calling my services on a different domain. The solution was to setup a proxy on the same domain that would forward the request on to the service. Hope this helps.
This is kind of what I've been telling those in charge. Unless we have access to a server (either our own, or the target one) to either a.) Set up a proxy, or b.) Enable CORS (respectively) then it's simply not possible. But THEIR argument is, "Well it works in IE, so you must be doing something wrong." 
maybe this has something to do with it: Important! Firefox and Chrome require exact domain specification in Access-Control-Allow-Origin header. For servers with authentication, these browsers do not allow "*" in this header. The Access-Control-Allow-Origin header must contain the value of the Origin header passed by the client. source: http://www.webdavsystem.com/ajax/programming/cross_origin_requests
I don't think I want to put [my code](http://36.media.tumblr.com/31b3ef47050ed280eb76e9cd25303dd2/tumblr_n03jm0tzNh1qc6jxfo8_1280.png) into that thing...
[Yaaaaas](http://memecrunch.com/meme/1M1SF/yaaaas-gaga/image.jpg?w=500&amp;c=1)
[**@domenic**](https://twitter.com/domenic/) &gt; [2015-07-31 03:29 UTC](https://twitter.com/domenic/status/626957734357827585) &gt; Very disappointed to report that TC39 rejected the RegExp.escape proposal: https://github.com/benjamingr/RegExp.escape/issues/37 ---- [**@domenic**](https://twitter.com/domenic/) &gt; [2015-07-31 03:30 UTC](https://twitter.com/domenic/status/626958208167342080) &gt; This is despite it being in essentially every other language, and being first asked for 5 years ago https://esdiscuss.org/topic/regexp-escape ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Doesn't work on ios
Hoping for stage 3 but we need to convince ourselves that we can fix/add on cancellation later. Should know more after the TC39 meeting happening now :)
&gt;cramming everything on one line is not always an option var result = condition ? reallyLongTrueValue : reallyLongFalseValue; &gt;you can't get else if without nesting them, which is just gross var result = condition1 ? value1 : condition2 ? value2 : condition3 ? value3 : defaultValue; &gt;Also other things aside from if are not expressions in JS, like try/catch. let res = do { try { getThings(); } catch (err) { err; } }; &gt;The existential operator does more than checking for undefined, something like `x?.foo?(bar)` is not easy to replicate in plain JS without a lot of if-statements. x &amp;&amp; x.foo &amp;&amp; bar ? x.foo(bar) : null; &gt;While your conditional assigment example looks nice as is, it's not as nice when you have to rewrite something like: this.somethingWithALongName["bar" + calculateKey(arg, "blah")] ||= 123. // once (in library) let setIfNull(obj, key, val) =&gt; obj[key] = obj[key] !== null &amp;&amp; obj[key] !== undefined ? obj[key] : val; // usage setIfNull(this.somethingWithALongName, key, 123); 
Might be discussing it today. Stay tuned :-P
If you want you can also use Meteor with classic NPM packages and webpack https://grigio.org/heal-the-meteor-embrace-the-javascript-es2015-nodejs-community/
To the JS engine, `$()` is an ordinary, arbitrary function that could return anything. There's no way it can cache that. All of the element lookups happen every time the event fires. 
In my opinion, live collaboration just doesn't really work, multiple cursors mean that if you paste in any reasonable sized amount of text everybody's screen gets shaken all over the place and at the end of the day you may as well all work on separate documents cause someone is going to have to edit all so it flows well together anyway. Perhaps for little planning exercises this is useful but I don't see what's wrong with gdocs 
I am not an expert myself (quite a beginner too) but from my point of view (and more experienced people correct me if I am wrong) I think this is a perfect task for using regular expressions. Which in fact are a VERY powerful and useful tool so it will always be a win to learn and get enough experience with them.
IE 11
Does it work in Chrome?
Unfortunately I can't test that at work. They don't have Chrome available on the intranet.
Interesting. I'm pretty sure they DO have an asterisk in the "trusted domains" section of the security settings. Would that then have an impact?
IE 11. Unfortunately, I can't check the security settings as they have the browser locked down.
That makes more sense. If the article was written by someone who actually used editors for coding, Vim would obviously be on the list.
&gt; IE either is severely broken That's a given.
I've been looking at moving from a Django background to Node. When I look at them, I don't understand what Meteor has that Express doesn't provide? It also seems like there's probably more of a community behind Express.
Meteor has vastly more in it than Express. Express is a microframework that handles little more than handling HTTP requests. Meteor provides real-time database support, websockets/pubsub, packages, templating, SPAs, etc etc etc. So basically, Express is Flask, and Meteor is Django/Rails (but even more all-encompassing).
Cool, but it looks messed up in Chrome: http://i.imgur.com/tQ1eGuA.png
Wow, very helpful, thank you! It also [looks like](https://trello.com/c/Gf6YxFp2/42-sql-support) Meteor will have PostgreSQL support soon - this would make it very attractive!
Because even a regular developer can achieve similar result coding just in the evenings as a side project. Considering they had all that money, I certainly would expect more. They certainly tried, but results were just poor. For example atmosphere. One of the worst package managers for JS. Compare that to JSPM or webpack. Both little sideprojects which turned out great. Done for free.
The way I see it, Meteor is kind of like Ruby on Rails, its supposed to handle everything. Its good for rapid prototyping, and its good as a learning environment, but it probably isn't the best for actual production. Plus with the level of automation and tools available for general Javascript development; grunt/gulp, boilerplate generators and package/dependency managers... there's really not much of a reason to confine yourself to Meteor once you have some idea of what you're doing. Also at the end of the day, you're not going to get a job by putting just Meteor.js on your resume.
There's nothing wrong about using lodash. That's more of a tool than library or framework.
I don't know enough about "trusted sites" to know, but I do know that inside the intranet, one of the "trusted domains" is "*.ip.com" which is the same extension that I'm cross-domain connecting to. So that may or may not play a role.
&gt; It's hard to say without knowing specifically which features you're referring to, but I think that many, if not most, of the new ES6 features had previously been discussed quite a bit in JS forums and mailing lists, years before Coffeescript, since they were pain points for every JS dev... Were focusing on the wrong aspect here. Even if ES6 was literally just a port of CoffeeScript, does it matter? I don't think originality is the goal in designing EMCAScript and any attempt to attack it on it's originality should be treated as what it is: hot air. 
Any hints to do that ? I still new to expressjs . thank you
Probably `Math.floor` instead of `parseInt`
jQuery probably caches though
Ehh, you're right that $ is a normal function, but you definitely could cache the look up of an element in some circumstances. 
Maybe I'm not seeing something, but did you write a module just to avoid doing `sinon.sandbox.create()`?
Why do you have to call it VanillaJS then? Why not "vanilla DOM" or something like that? Vanilla js is a confusing term
&gt; Also, doesn't babel essentially do the same thing as CS compiler? You want some feature that's not in the language (yet), so you use a transpiler to translate it into the existing syntactic constructions... It's different.
A commutative equivalence operator is nice: JavaScript: &gt; [] == {} false &gt; {} == [] VM120:2 Uncaught SyntaxError: Unexpected token ==(…) CoffeeScript: coffee&gt; [] is {} false coffee&gt; {} is [] false But, maybe I'm just lazy and don't want to memorize all of these weird edge cases. 
Which license? 
Sure, whatever. I won't be the one who yells "Make Coffee, not ES6."
It doesn't because it can't. The DOM could change at any time, and the element might cease to exist at any time (or it could be removed from the DOM but still exist in a detached state, etc.) The only person that knows whether that's the case is the programmer, not the library. If you know the element won't disappear then you can cache the element yourself. You can't expect jQuery to know that. 
I think what you're looking for is the [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance). It calculates the number of operations needed to go from one string to another. &gt; For example, the Levenshtein distance between "kitten" and "sitting" is 3, since the following three edits change one into the other, and there is no way to do it with fewer than three edits: &gt; &gt;1. kitten → sitten (substitution of "s" for "k") &gt;2. sitten → sittin (substitution of "i" for "e") &gt;3. sittin → sitting (insertion of "g" at the end). So, your xpath string with the lowest Levenshtein distance from the base string is the most similar to it. If there are multiple with the same, minimal distance, perhaps do a [natural sort](https://en.wikipedia.org/wiki/Natural_sort_order)?
&gt;It also looks like[1] Meteor will have PostgreSQL support soon May I direct you to [Space Elephant](http://www.meteorpostgres.com/) in the interim? Has worked just fine for me so far. 
Browserify has a browser compat version of node's `crypto` module, might try that if you're using browserify/webpack.
Just from glancing at that, I don't see why it's not working. You should be able to do this just fine. 
My biggest question is on the `vendor.js` entry point, i.e., is declaring those variables in that way the right way to do this? It also seems weird to me that I actually need that file prior to running browserify...though I think it's because of my browserify-shim settings? Anyway, thanks for taking a look. I'd love to be able to do this without learning a whole new system!
Does your vendor.js include jQuery? 
Man, meteor is getting insanely hard to resist. 
I think that's your issue. Just include the normal jQuery. You don't have to do require stuff with shim.
It's even worse when he insists on not using semver :(
I wasn't aware that ES6 is now called ES2015.
Maybe time to update the sidebar to say "ES6 (current)", "ES2016(draft)" where the latter links to https://tc39.github.io/ecma262?
Don't use classes in JS. Use factories, concatenation, and prototypes to create objects. JavaScript does not have classical inheritance, it had prototypal inheritance with some classical syntactic sugar built on top to make developers from other languages more comfortable.
You can definitely tell which properties exist with either `in` or `hasOwnProperty`
Great example, but `previous` is a really bad name for the first argument of the reduce lambda. 
I was just copying what he already had... edit: aaand even then, bitwise I think is slightly faster, (Math.random() * wordlist6.length) | 0 but just barely faster... I'd prefer readability of Math.floor to be honest.
the license doesn't seem to intimidating https://github.com/facebook/react/blob/master/LICENSE
This is awesome, guys. Let's kill classes and constructors once and for all.
I'm not sure regular expressions would give you exactly what you're after, but it depends on exactly what you're after. You could try doing a [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) check - there are a couple of good tutorials around that I can't find right now. Edit: try [this one](http://blog.nishtahir.com/2015/09/19/fuzzy-string-matching-using-cosine-similarity/#fn:1)
Thank you very much for your feedback. I've re-read the reduce section and agree that this could be improved. The main advantage with reduce is the fact that you can reduce it to whatever type you like. I will update the article to explain this better. Thanks!
ES6 is easier to say too. Rolls of the tongue more than ES2015.
It took me a while to understand this post, so I tried doing the exercise myself, and commenting out what I did. If it's helpful to anyone: https://gist.github.com/bluepnume/6973b6efb7d48edcbf19 I wanted to try to get each step into a fragment of working code, which gives a factorial. The problem I had with the original post was some of the steps end up saying "oh, this won't work", which I found really confusing.
Is there any use of this? It seems to me it's just a good way to write hardly understandable code. I'm not criticizing, I'm just asking because I have never heard of this and now it seems to me I could have lived without it. Thanks! 
What's wrong with the Meteor package system? Genuinely curious, because I think it works just fine...
We do an url encoding shortly before we send it out to our servers. As a result will get something like this "test/test" -&gt; "test%2Ftest". The request we receive contains shuffled parameters, but the string is always correctly encoded. For the mentioned example we would receive something like "etstet%2Fts", which decodes to "etstet/ts". This brings us to the suggestion, that the string is decoded before it gets shuffled and the shuffled string gets encoded before it is been sent to us.
FWIW libraries like this are a great way to unexpectedly ruin your application performance. For some reason it's cool to hate on `class`, but if you care about performance at all they're unavoidable. Author of this library doesn't really understand (or willfully ignores) the performance implications of the solution he proposes so if your application is perf sensitive take his words with a pinch of salt and a healthy dose of scepticism. 
What's wrong with classes? Use the right tool for the right job
At some point in their life every developer needs to do this... here is my version from a year ago: [y-combinator](http://codeofserge.com/y-combinator/) And we used the same example problem. . :)
ok they fixed that. I personally would never use this, because I like to define my dependencies with ES6 or commonJS modules as a tree of dependencies, but that is just me.
You just saved me hours of work. Thank you!
Here's another one: http://zurb.com/playground/jquery-joyride-feature-tour-plugin Edit: shoot, got ahead of myself, this one uses jQuery and I see now that you want to avoid that.
This was about static code analysis. E.g.: Math.sqrt(5).length You can't tell if a global "Math" object exists, if it has a "sqrt" method, if that method expects a Number, or if the returned value has a "length" property. With languages like C#, Java, or Dart, these things are known.
It looks pretty sweet though! I just haven't needed jQuery in my project so far (been going for a year strong! :] ) so I'd like to avoid including jQuery for just one feature, but it's still nice to have options. Thanks!
Sort of :)
What lead you to choose 'µ' as a default selector character? Though seems interesting, will definitely have a look at some point. +1
&gt; I doubt you are ever going create more than 5,000,000 objects a second Well you're wrong about that, because again you're making a blanket statement without understanding the use case. It's also not very hard to get to the 5,000,000 objects / second mark - if your node app deals with 10,000 rps then that's only 500 objects per request. It's surprisingly easy to exceed that. Also this isn't just about object creation, it's also about unbounded polymorphism because of the side effects of this approach and others like it. It's also about the implications of being unable to use the instanceof operator which is an extremely cheap way to check an object's identity. There are a lot of subtle factors at work here. &gt; Read Mr.Aleph's blog post about the routes the VM can take in optimizing this approach. I have, thanks. V8 doesn't do those optimizations yet, and maybe it never will. V8 does optimize heavily for classes though and is only improving this via strong mode. By using classes I get fast code today and faster code when strong mode reaches maturity. It's fine to say that you don't like classes for stylistic reasons, it's ridiculous to say that they are in some way harmful or the performance difference "is negligible" because it isn't. 
Any plans for es6 conversion? Good work!
definitely (that's the only milestone currently open)
first things first, your code structure is a tad confusing and the indentation didn't help. I changed it to this (also if you specify a filename on a gist, github tries to do some syntax highlighting for it): https://gist.github.com/hoorayimhelping/fdc65289bad644cda6f1 From that, it's easier to see that are some issues with your code beyond formatting. I don't know Perlenspiel, but in some places (line 4) you're calling a method called `GAME.running()` and in others (line 11) you're querying a property called `GAME.running` - make sure those are consistent. Now, more generally, think about how you want to structure this handler code and what its responsibilities are. From [experience](https://github.com/hoorayimhelping/Galaga5) you don't want your key handling code to have a lot of knowledge of the state of the world, because any time you change how the world works, you have to get deep and change your key handlers. Here's how I've done it in the past: [listen for the correct key being pressed (in my case `esc`, in yours `p`) and set a flag on the object that controls everything.](https://github.com/hoorayimhelping/Galaga5/blob/master/InputManager.js#L45) Then in the rendering code, [check to see if the flag indicating the game is paused, and if it is, handle that](https://github.com/hoorayimhelping/Galaga5/blob/master/GameEngine.js#L69) So with all that, here's a simplified gist showing how I'd approach it: https://gist.github.com/hoorayimhelping/ed2d012cf3ea620fb75c. The key idea here is separating your concerns - don't make your key handling code do everything - it gets all tangled and confusing. Instead, have your key handling code tell something that is better at handling changing the state that the user hit a key. Let the key handling code be really good at figuring out which keys were hit and how to communicate that to something else, then let that something else figure out what to do.
nice!
It seems in early stage but good point.
Much appreciated!
I'm really not a fan of these kitchen sink libraries. This is like someone's utils.js. It's just an unfocused bunch of "stuff that's pretty useful."
Y combinator in ES6: let Y = f =&gt; function () { return f(Y(f))(...arguments); }; 
Super random question, but "wir greifen nach Strohhalmen" here: is your service behind some sort of CDN? Ours is behind MaxCDN which might be another point were things go wrong. Might be. 
Regarding the Abelssoft thing: I just grepped the last access log for this and found three requests with an UA string containing "Abelssoft" yet they will all pass status 200, so I guess we can rule that out. foo@bar:/var/log/nginx$ cat access.log | grep Abelssoft 108.161.183.122 - - [23/Sep/2015:07:16:06 +0000] "GET /iframe/rh3sd8tb7ajwp6u1?accesskey=63d52729bd96b58f07085a3113b2a48c HTTP/1.0" 200 161448 "http://www.example.net" "Mozilla/5.0 (Windows NT 6.2; rv:38.0) Gecko/20100101 Firefox/38.0 anonymized by Abelssoft 1850442475" 108.161.183.122 - - [23/Sep/2015:07:41:29 +0000] "GET /iframe/pq8o4sgy6k7tbnjf?accesskey=acdeeaa9c89ef9b63cdf62810c25d32c HTTP/1.0" 200 245476 "http://www.example.net" "Mozilla/5.0 (Windows NT 6.2; rv:37.0.2) Gecko/20100101 Firefox/37.0.2 anonymized by Abelssoft 2125040341" 108.161.190.122 - - [23/Sep/2015:12:35:38 +0000] "GET /iframe/prtmov39qnzbhkx5?accesskey=63d52729bd96b58f07085a3113b2a48c HTTP/1.0" 200 156760 "http://www.example.net" "Firefox/40.0.3 (x86 de); anonymized by Abelssoft 343279394" The IPs are the same due to MaxCDN.
I don't get the reference, who's David?
ES6 was renamed to ES2015, so that should be changed too
https://twitter.com/dhh
Somebody is experiencing the same issue on Google Analytics and Google Tag Manager (http://stackoverflow.com/questions/32606060/google-analytics-event-permutation).
Well said, thanks for the clarifications.
Switch to object literal is my only recommendation: let dom$ = { init() { }, each(func) { }, empty() { }, remove() { }, getElements() { } };
In node 4.1, the performance difference is fairly substantial: ➜ use-classes babel-node ./index.js createStampInstance benchmark done in 0.6906 seconds, 144810 iterations per second. createClassInstance benchmark done in 0.0264 seconds, 3783315 iterations per second. Class was 2512.606% (26.126x) faster than stamp. and this is with a fairly vanilla example from the stampit homepage https://gist.github.com/phpnode/0333747166a3ccc52d37 If we remove the open and close stuff and purely focus on object instantiation perf, well... createStampInstance benchmark done in 0.4836 seconds, 206767 iterations per second. createClassInstance benchmark done in 0.0068 seconds, 14602079 iterations per second. Class was 6962.094% (70.621x) faster than stamp. 
This looks like exactly what I'm after. Thanks! I'll give it a try and let you know how it turns out. 
 for(var i = 1; i&lt;=2; i++) { $('#card' + i).on('click',function(e) { show_card(this.id); }); } Change your for loop to this. The i variable is always gonna be 3 when the loop finishes, so by the time the click function runs the value of i will be 3. You can can then add an attribute to each card element to retrieve info about that card.
Heh, it isn't to avoid calling sandbox create. It's all about the usage patterns. For example, things like mocha-sinon add an instance of a sinon sandbox to the `this` context of your tests: https://github.com/elliotf/mocha-sinon/blob/master/mocha-sinon.js We much prefer having an explicit require at the top of our files than a test suite that depends on things be on `this`. `sinon-sandbox` is a singleton instance of a sandbox. Since require caches files, every require call is given the same instance and thus it can be easily restored after tests.
I think I'd speak for mostly anyone in saying that I'd rather a less unique character that is WAY more accessible.
Um, there's specifications that do this, and intellisense on VS Code with tell you function footprints. There are plenty of tools for static code analysis in JS. Linters are one, TypeScript is another. 
[One of my karma-y-iest posts from SO answers this exact question.](http://stackoverflow.com/questions/3150010/strange-things-in-javascript-for/3150036#3150036) It's JavaScript scoping and closures come to getcha. &gt;You can get around it easily by introducing another scope by adding a function and having that function call itself and pass in i: for(var i = 1; i&lt;=2; i++) { (function(j) { $(document).on('click','#card' + i, function(e) { show_card(i); }); })(i); }
&gt; but it must be something that is unique Why? Lodash and Underscore both use `_`. Every sane developer is going to immediately alias it to something else. Take a look at http://api.jquery.com/jQuery.noConflict/
Yeah, you can modify global objects. This would give a runtime error. TypeScript, ESlint, etc would catch this delete statement and say "don't modify globals"
Why is instanceof terrible?
An analyzer does not know what other kinds of scripts happen to be on that page or all possible pages. You can make educated guesses. You can *assume* that the "Math" object from the standard lib exists. You can *assume* that it still has its original "sqrt" method. You can *assume* that a "length" property wasn't added to "Number". However, you don't *know* for sure. It's different with, say, Dart. In order to use something, you have to import it. There also is no monkey-patching. So, the class or whatever you've imported is exactly as it was declared. This is why ES6's classes and modules are a good thing. Imports are declarative and so are class definitions, which makes this information accessible to static code analysis. If you import a class, you know - for sure - that it's the thing you expect it to be. You know that it has exactly those methods which were declared. (Unless you messed around with it.) By the way, this isn't a hypothetical issue. Some of my perfectly fine code has been broken by 3rd party scripts which modified built-ins.
Couldn't you just use something like `barry instanceof caleb.constructor`? Or `barry instanceof caleb.prototype`?
I'm guessing you're using an older version of node or babel? Try with the latest versions of both.
You don't.
Yep, I agree with most of what you've pointed out. Meteor is really awesome, I cannot argue against that. React is awesome too. It is funny that you enlighten me about the benefits of using Meteor while I was trying to argue about the constant fails one must face when wanting to use something that is outside of the Meteor toolset. I've never ever said Meteor was a bad technology, it is great and I will be forever thankful for the guys who put the time to make it. The pros of client side and server side JS are great and hopefully we will get to that point at some time. The multiple platform client redundancy is basically fuelling the company I work for though. 2/3 of my team would lose their job if we just used JS. Sometimes is just business you know... The optimised PhoneGap compiler is really awesome I must admit. I've used it in windows, linux, etc, and it never disappoints. Mobile development with Meteor is a thing of beauty. But hey... The meteoric CSS components are luckluster compared to the Ionic ones... There you have one glaring example of something which has already been done and it nigh impossible to make it work out of the box with Meteor. Maybe it is Ionic's fault, I do not know. Hopefully meteor and react will play out together as nice as you seem to suggest they will. I would surely be happy about that. But I recommend patience too. Whenever I faced Meteor development I had issues integrating stuff which has not been built with Meteor in mind. You claim it gives us the ability to do that but this actually means working to make something work that already worked before. And I hate wasting my time relearning stuff just to make it work with the new kid on the block. I know this is a pretty cool new kid on the block, but still. All in all I am happy about this release and I encourage the meteor dev team to keep on integrating other technologies to their already awesome stack because that is the one little things which is keeping me from using it as a professional tool. 
It's an operator pulled over from Java that isn't a function, doesn't work with anything but instructors/classes, and is completely replaced by isPrototypeOf. Neither work across VM instances. It also doesn't match how the language works. JavaScript doesn't have instances of classes, it has objects linked to other objects. Honestly, I don't know why typeof and instanceof aren't functions. 
Which versions specifically? I see similar results to you until iojs1 then there's a dramatic improvement
 &gt; babel-node --version 5.8.23 &gt; node --version v4.1.1 Edit: Also, converting the stamps one to not use Babel results in even better speeds. Ah, the world of benchmarks.
All of these problems you described exist only within the browser implementations of the language, not with the language itself. Also, Dart is a compile-to-js language, at least in the browser, and suffers from these same problems.
JavaScript, where everybody has to remake the wheel over and over.
&gt; All of these problems you described exist only within the browser implementations of the language, not with the language itself. Neither monkey-patching nor having a global object is browser-specific. Neither is the complete lack of structure prior to ES6 (modules &amp; classes). &gt; Also, Dart is a compile-to-js language, at least in the browser, and suffers from these same problems. Dart itself doesn't have this problem. The structure of a Dart application is declaratively created and monkey-patching doesn't exist. Things are similar if you use TypeScript (with classes, modules &amp; type annotations), don't do anything stupid, cross your fingers, and hope for the best.
&gt; It's an operator pulled over from Java that isn't a function Right, neither is `+`. Saying it's "pulled from Java" isn't a reason why something isn't useful in another language. &gt; doesn't work with anything but instructors/classes, and is completely replaced by isPrototypeOf. Right, it's for checking whether something is an instance of a given class. &gt; It also doesn't match how the language works. JavaScript doesn't have instances of classes Sure it does: class Foo {} (new Foo()) instanceof Foo; // true &gt; Honestly, I don't know why typeof and instanceof aren't functions. Because they're operators, but even if they weren't, what would it matter? I don't see any compelling reasons not to use instanceof in your post. All I see is a lot of post-hoc rationalisation.
Where are you writing your code? What browser are you using to view it? Here it is in a Fiddle: http://jsfiddle.net/oeu0sjp4/
Please cite sources. Is [this](http://stackoverflow.com/questions/18343545/javascript-isprototypeof-vs-instanceof-usage) what you are talking about?
Indeed, it works in Jfiddle. As for the html file, im using a bootsrap set up. I tried adding your script to the JS file and calling on it in the .html file but perhaps I didn't do the call properly. I just tried it now inside the .html with the &lt;script&gt;&lt;/script&gt; tags but it still didn't work. 
[removed]
[There's a stickied thread with links for that on this subreddit.](https://www.reddit.com/r/javascript/comments/3kowom/what_are_the_best_modern_javascript_books/cuz9lbe) [If you just want a quick overview of ES6/ES2015, look here.](https://babeljs.io/docs/learn-es2015/) (As an aside, ES6 isn't fully supported in many browsers, so Babel is used to transpile it to compatible code. So if you use ES6 in a real project, then you should use Babel.)
I can't see myself ever using microbe and jQuery on the same project, since they have such similar functionality. So `$` is probably fine IMHO.
Thank you very much for this! This is exactly what I needed.
What might the benefit of this over rsync be?
Now if we could get rid of the class syntax all together...
I don't recommend this: *JavaScript and JQuery: Interactive Front-End Web Development.* Javascript books for beginners shouldn't teach jQuery. And this one *Head First HTML5 Programming: Building Web Apps with JavaScript* while is good, it's not recommend for beginners by the authors themselves. And it's because of this that they wrote the superb *Head First JavaScript Programming.*
Ah, right! Your book/blog is great. To the OP, I heartily recommend.
Interesting, any reason for the name, where did come from?
&gt; The complete lack of structure? So I guess you haven't heard of CommonJS? CommonJS isn't part of JavaScript. Also, CommonJS etc creates structure imperatively. You have to execute code to figure out what it does. &gt; Node has had a module system since the beginning Node isn't JavaScript either. &gt; Sure, it wasn't part of the language, but it was possible within the language. Being able to "roll your own" does not mean that it's available to static code analysis. You need standardization for this. Ideally, you do things declaratively. For example, the wannabe classes you can see in ES5 libraries and frameworks (e.g. Backbone) aren't statically analyzed either. ES6 finally fixed this. Hooray for classes! (Funny how you're strictly against using them, given that they are very important for better tooling.) Also, I wouldn't say that it was "possible within the language" in Node's case. JavaScript's standard library doesn't include I/O. You can't write a "require" function in pure JS. The magic happened in C++ land. The Node application simply made this function available to scripts running inside its VM. &gt; You can't simultaneously claim implementations of Dart aren't relevant but implementations of JS are. Manipulation of the environment has to be done via JavaScript, not Dart. If everything on the page was written in Dart, there won't be a problem. To this day, there are still JS libraries being written which modify objects they don't own.
Because that's just what it's usually called: http://vanilla-js.com http://www.smashingmagazine.com/2013/10/inside-the-box-with-vanilla-javascript/
No, JavaScript dues not have objects that are instances of classes. Classes in JS are not like classes in other languages, they are simply syntactic sugar. Their type is function. JavaScript is prototypal. It has objects that link to other objects, not objects created on the structure defined by a class. You can use instanceof of you want, but if you want to check if an iframe object is what you want, be ready to get unexpected results.
&gt; ES6 finally fixed this. Hooray for classes Classes have nothing to do with ES6 modules. &gt; JavaScript's standard library doesn't include I/O Because there essentially is no standard library. The API is left to the implementation. 
"Head First JavaScript Programming" worked really well for me, read it cover to cover. I even understand and use closures now :)
&gt; Head First JavaScript Programming I'm most of the way through it and agree it's a good choice for a beginning programmer. 
Reddit, where someone has to make the same comment over and over.
At least I didn't spend a year and a half making it.
[ES6 Katas](http://es6katas.org/) are pretty fun and helpful. They are short exercises each focused on different aspects of new features.
But you will still bitch and moan about it.
/sigh
Please let me know what you ppl think of this blog and do comment if you want to correct any thing or add anything thanks
I would start by looking at these https://www.npmjs.com/search?q=entity+component+system Even if something isn't written in ES6 you can probably still use it with ES6 code.
Honestly I wouldn't abuse generators for async tasks like that.
My knee-jerk reaction was, "yet another prototype article," but actually I think this is one of the best explanations I've seen. I especially like how it starts with simple objects, and step-by-step adds features until we eventually arrive at pseudo-classical.
[**@bterlson**](https://twitter.com/bterlson/) &gt; [2015-09-23 22:13 UTC](https://twitter.com/bterlson/status/646809601745154048) &gt; Presented on Async Functions at @TC39 - they are now Stage 3, which means they're done barring implementation &amp; user feedback! ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
[**@bterlson**](https://twitter.com/bterlson): &gt;[2015-09-23 22:13:20 UTC](https://twitter.com/bterlson/status/646809601745154048) &gt;Presented on Async Functions at [@TC39](https://twitter.com/TC39) \- they are now Stage 3, which means they're done barring implementation &amp;amp; user feedback! ---- [^[Mistake?]](/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3m4gsl%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
This is exactly the kind of thing that generators are for.
Is this referring to the async/await feature in ES7?
Yep! Though note that ES7 is now referred to by the new year naming convention ES2016 that reflects TC39's commitment to yearly releases.
Neat! I wonder if and how well it will work with javascript's try catch. Is it possible to wrap a try block around an awaited function, and handle possible exceptions in a catch block? Could this replace the typiclal way of handling asynchronous errors where an error is always passed as the first parameter in a callback? Promises are a bit better but async/await in conjunction with try/catch/throw would take the cake. Edit: phrasing 
This is big news. Awsome!
No, certain parts of es6 can't be polyfilled like classes, arrow functions, template strings, modules, splats, rest params. You can get a polyfill for the rest, but it doesn't help much. 
So if I define an async function that throws a custom exception at some point in its asynchronous execution, will that same exception be catchable in a try-catch block around an awaited invocation of the function? My understanding is that throwing inside an async function will cause the behind-the-scenes promise to reject, and somehow pass the thrown exception to the catch block that should catch it. Is that correct?
I assume this is for educational purposes, I re-write projects myself just to try to figure out how they work and become a better developer. If you are coming from an angle of "why do we need another way to do this" -- yeah sure I guess its questionable but I think its great to see people work on stuff and share it. 
Way to be logical! +1
There is one thing that has always confused me about async/await. If I remember correctly, you can only use await from inside an async function. So it means that there is always a "root" async function that is not awaited by anything. Can you give an example or scenario of invoking a "root" async function and how that might look? It seems impossible to get the result from this "root" async function because you can't await it and there's no callback.
Is this like ~~Futures~~ Fibers? edit: meant Fibers, is the purpose to make async code behave synchronously or what are the advantages to promises?
That clears things right up! Thanks so much! One last question from me. What's left to be done before it's implemented in Node.js and browsers? Is it already up to vendors to implement the feature or is the ES team working on a reference implementation first?
lol I like the (unneeded) comment on line 16: var self = this;//fixes the issues of "this" scope
Or more painfully, lol... const Y = f =&gt; (...args) =&gt; f(Y(f))(...args); const factorial = Y(f =&gt; n =&gt; n &lt; 1 ? 1 : n * f(n - 1)); Or even... const factorial = (function Y(g) { return (...args) =&gt; g(Y(g))(...args); })(f =&gt; n =&gt; n &lt; 1 ? 1 : n * f(n - 1));
Nothing, really. It's implemented in the latest MSEdge flight already, and FF is working on it as we speak!
I've been using Qiao's [CES.js](https://github.com/qiao/ces.js) for the past for years. It's quite solid. There are a few design decisions which, after having used it on many projects for about two years now, I feel is now outdated. For instance CES likes to use Signals (as opposed to events) to provide callback functionality to systems for when entities get added or removed from the world. This is now much better done in ES6 with Object.observe which won't require you to do book-keeping on these signals which eventually accumulate. Systems in CES also feel a bit too complected IMO. In this library you have to create a system which is self-contained, however it's impossible to get a shared view-state into the system without hacking it into World (which systems share). So if multiple systems need access to your view (say, a THREE.js scene-graph for example), you HAVE to attach that to World. Finally, serializing CES is a bit of a pain if you ever want save-states to your game since its entity/component 'classes' carry a bunch of stuff with it. I'm currently drafting my own CES alternative called EC ([you can view it here on Gist](https://gist.github.com/mflux/c32e2066948d5c8b591b)), where the emphasis is on Entities and Components. The entities are simply empty objects ({}) with components being simple instances of object literals. The World is just an empty map of entities with UUIDs, and Systems are instead just Object.observe handlers for the world. It's currently still very rough around the edges although I enjoy the simplicity, especially since the data is kept away from functionality completely. Anyway, have a look, although my version is very far from being shippable code. Some examples for EC // creating empty world data, serialize-ready let entities = EC.newWorld(); // or literally {} // save the game... const serialized = JSON.stringify( entities ); // load the game... entities = JSON.parse( serialized ); // world provides all the functionality that wraps around entities const world = EC.world( entities ); // creating an empty entity const entity = EC.newEntity(); // or literally {} // adding the component to the world world.addEntity( entity ); // defining a component const actorComponent = EC.defineComponent({ name: 'actor', init: function( data ){ this.activity = data.activity; } }); // instantiating a component const component = EC.createComponent( actorComponent, { activity: 'idle' } ); // adding a component to an entity EC.addComponent( entity, component ); // creating a system that detects actor and animation components world.systems.added( [ 'actor', 'animation' ], function( entity, components, id ){ // gives entities with actor component const actor = entity.getComponent( 'actor' ); const animation = entity.getComponent( 'animation' ); // or the uuid and components console.log( 'entity', entity, id, 'just got', components ); });
Use babel and experience the future now!
Firstly thanks for your comments! I agree that it is a very bad example given in the blog about commenting your code. My point is just to write enough for any other person or yourself(may be after few months) to understand it in one quick glance. I would try to change the example in it. Thanks 
Very cool. As someone who's primarily a backend dev and need a lightweight wrapper around JavaScript's http functionality I might use this for an upcoming project 
Many other languages only have one-way generators that basically just let you make iterators. You can pull things out of them, but you can not push things in. Python has full blown generators (yield from), and people very much use them for async. 
We use this method in our shop. We don't have much es6 code but we have a couple react.js components that require babel to compile it all together. Very useful.
I think python may be the exception, not the rule. Besides, python is also getting (has gotten?) async/await in favor over generators for async flow.
I was the same. I wanted the Java like classes and the traditional oop in JavaScript. I was excited to see classes in the language, but as I learned more of the language, I started to appreciated the way it does things. 
If it's just for learning, it's most likely not meant to be used so why release or show it to others? It's not like any (sane) person's actually gonna use it.
We'd need the HTML sure. Just to double check structure and ids etc for you. However multiple small pointers here regarding your code which might help to fix it. var Ben = ("Ben"); Its a common pattern in javascript to name variables in **camelCase** except if they are a Class(Don't worry too much about classes atm). As such naming variables ben and not Ben and **productCost** instead of ProductCost is considered good practice. Next you **don't** need the brackets around your string declarations. var ben = "ben"; works fine. var USR = document.getElementById('username'); Try to name variables clearly and concisely following above suggestions. I initially read USR as USSR. username is much better. USR might be easier to type but typing code is actually a really small part of programming. try: var username, var password etc. A lot clearer if () { }; else { }; These semi colons are not needed. This is probably confusing but its probably safe to assume that conditional blocks(if,else,else if) and loops(for) do not need semicolons on their closing curlies(}). semicolons in javascript can be confusing so let me know if you'd like more examples. This is especially the case because they aren't actually needed we just add them as a matter of convention and you should continue to do so. Additionally, its good practice to keep the curly brackets conforming to one convention. if () { } else { } OR if () { } else { } And not Both together. Most prefer the top example. And finally, your use of jquery's .ready is a little flawed. The syntax is. $(document).ready(function(){ //Do your stuff here. }); To explain, You are asking jQuery to run your function when the document is ready. Try your code with some of my suggestions, see if it works! 
Thank you. Seriously, any question regarding es6 that I have had in the past month of actively using it has been answered via your blog or book. OP, Dr. Axel Rauschmayer's [site](http://www.2ality.com) along with his book (linked above) has a wealth of knowledge to assist you 
Ah ok.
It depends what you want the polyfill to accomplish. The parts of ES6 which don't use new syntax, like my personal favorite `Object.assign`, can be polyfilled properly with [core-js](https://github.com/zloirock/core-js). Parts which require new syntax (generators, for example) cannot be polyfilled without resorting to different script types like Babel does.
~~That's something I hadn't had time to properly test or research, so I neglected to document it, however there is support for request body data in the form of the `.body(data)` method. It doesn't do any processing to the `data`, so I believe an object body would need to be stringified first.~~ If I understand the spec you can't send URL variables *and* a data body during post - they are the same thing. Bit of an oops on my part, however I've got 1.0.1 cooking and it should be good to go quite soon.
What do you mean "lighten up a bit"? Did I sound angry? I'll reword my OP so that if fits better then. I'm also not trying to cheat, I'm just looking for some help.
A combination of stuff that's been written a thousand times, and personal preferences. So, pretty useless. You asked.
It's generally the "why" that you want to comment. The what is in the code. Either way, thanks for sharing.
I see.. Well, JS learners that are unfamiliar with `var self = this;` likely aren't going to understand the comment either. It's like doing this: //fixes the issue of clashing globals (function () { //.... })(); Anyone who understands that comment, doesn't need it. Maybe something like this: //Inside of callback functions, "this" gets changed to the window object, // so we need to save "this" to the "self" variable, for use inside callbacks. // See https://developer.mozilla.org/somepath var self = this;
&gt; And not Both together. Most prefer the top example. To expand on this, I would argue in javascript placing curly brackets on the next line is strictly a bad idea. This is because javascript has automatic semicolon insertion, ``` return // returns undefined { key: 'value' }; ``` The above would return undefined, which means that even if you use the second syntax, you would have to be inconsistent with your own preferred styling whenever you create an object to return within a function. EDIT: Can't seem to get the code formatting right on reddit but hopefully the point is clear. Automatic semicolon insertion on return statements leads to inconsistent styling when using next line curly bracket style coding conventions
https://github.com/react-bootstrap/react-bootstrap/blob/master/src/index.js This is a good demonstration of breaking a library into components. ``` import {Col, Grid, Row} from 'react-bootstrap' ``` This leverages ES6 module syntax, which should be the way to go these days now that the spec has been finalized.
ES6: people.filter(person =&gt; person.age &lt; 18) .map(person =&gt; person.name); Or with destructuring: people.filter(({age}) =&gt; age &lt; 18) .map(({name}) =&gt; name); people.reduce((acc, {age, name}) =&gt; acc.concat(age &lt; 18 ? [name] : []), []);
Interesting! This is accurate, and I've added it to my little list of bugs. I've got 1.0.1 in the works and the fix for this will be in that.
Stack traces will work as well as they do with vanilla promises. In other words, browsers that support some form of async call stacks (I think most/all major ones?) will have reasonable error stacks.
This looks kind of messy. Making functions that are dependent on a variable you're creating later on seems like a bad idea. 
We have two separate repos. Our Grails app serves as a (sort of, but not really) RESTful API, while our UI (Angular) lives in a separate repo and contains all of our JS/CSS/HTML. The UI is served as a static site - no need for any back end technology on that side of things. The UI is built using Gulp, but we do not commit compiled assets. Dependencies are managed by npm. We use Bamboo to build the site when it gets deployed to alpha/beta/prod. Personally, I really like this architecture. It's a little extra setup because you have to configure your web server for two sites instead of one, but it's a lot easier to work with when it's decoupled like this.
&gt; We support all evergreen browsers, and tentatively IE 10+. If IE10 is your lowest IE version, I'll see you in about 5 years. Best Regards, Developers who make stuff for everyone/the real world.
How about 'ajax("http://...").then(...)'? Calling '.then' can auto invoke send. 
Considering Google only supports IE 11+ I think it's fine ;) I kid of course, but I do wonder how much longer the legacy of IE 8 will drag on.
This is mostly how I envision us, although we use Teamcity instead of Bamboo, but same idea. We may not use Angular (also looking into React, Aurelia, and even Angular 2. We do not have a defined start date for the new project yet), but the entire process remains pretty much the same. Super glad to have your input. I also seeing this working very well for my team/company. Thank you so much for your input. I am heavily pushing for this because I am tired of dealing with separate app releases and having partial teams cover mobile releases when we could easily condense it into a single teams responsibility and save development costs/time.
Yes I'm aware! Lol I'm just trying to test mechanics out and get a better understanding from this example. I'm know there's a lot more I have to learn about database integration and what not but that comes later.
Plus, if you alias `this`, minifiers will reduce the references to one char instead of four. If you're that anal about saving 3 bytes per reference...
Destructuring makes thing so nice!
I find the format a little confusing in the library. It took me a little while to understand that the send method was returning data, not that I was sending data with it. Something like .send().then(... would make a lot more sense to me.
You mean like this? POST /test?foo=1&amp;bar=2 Content-Type: application/json {"somejson":"content"} If so, you absolutely can do that. The first part is just the URL (that happens to have query parameters), and the second part is just the body. Both can definitely be used at the same time.
http://microjs.com/#ajax not conflicting with your work in any way, just saying
With such little usage time any cloud hosting solution like EC2, Heroku, or Digital Ocean would work and cost you peanuts! Have you tried Amazon's pricing calculator? THey have a 1 year free trial btw
Automatic semicolon insertion is mostly FUD but yes keep curlies on the same line.
My pervious employer aimed to support IE7 completely and IE5 with main features. I was always astounded at the workarounds.
You would *probably* be right. Thanks for that :P
You are looking for a slide effect, and a loop that iterates every 1-2 seconds through different divs. for any transition effects, take a look at jquery ui. Lots of nice stuff there, otherwise most common frameworks do have some sort of transition effect which you can use. i made a quick js fiddle just to show you how it can be done [jsfiddle](https://jsfiddle.net/jq0ycuog/) 
[Exceptionless](https://exceptionless.com/) --- [JS Client](https://github.com/exceptionless/Exceptionless.JavaScript) --- You can even host the [server](https://github.com/exceptionless/Exceptionless) yourself.
Does this include using await* in place of Promise.all? Another question more about Promises in general: is there a way to globally catch unhandled rejected promises in the spec? Currently we hook in bluebird and use it solely for this, however would be good to know if theres a standard for this...
Op is a wizard !
No, it's not possible by default. I think flash exposes bridges to JavaScript (like events etc) not the other way around. Maybe you can use a decompiler to get the source of the swf file and add bridges for JavaScript. I'm not a flash developer though, just thinking about other JavaScript cross-origin stuff. To make it work, you'll always have to manually opt-out on the target side(like enabling cross origin requests), might be the case for flash as well .
&gt; We may not use Angular Angular is really really lame. You should stick to react.
So it is ES5, then ES6 then ES2016?
ES7/2016 support on babel is still very experimental as it relies on generators from ES2015, which are poly-filled back to ES5 by default. I don't recommend using any ES7 feature from Babel for production work. Small projects to test things out, go ahead.
To be fair, according to the upvode/downvote balance, it seems like most people thought /u/peduxe was being obnoxious (me included).
Depending on how the data is stored, you might be able to with a preloadswf. Might take some experimentation to dig into the swf structure, though. I did a quick search and this popped up as the first result: http://philippe.elsass.me/2010/09/as3-hacking-preloadswf-for-fun-and-profit/ so it looks like people have built tools around preloadswf to help you introspect swfs. Note that preloadswfs are local only. This is you, on your computer, using a custom, local swf that helps you get inside the mind of another swf at runtime. You can't put a preloadswf on your website and have it affect other people when they visit.
I thought es6 wasn't a thing. Shouldn't it be es2015?
If you only support IE10 and up, why offer even trivial support for XDomainRequest? Have you looked over jQuery's implementation? There are a ton of ajax gotchas and quirks that they handle: things like what to do if the request was cached, or if it was immediately canceled, and so forth.
Cannot figure out how to play it. Graphics could be better too. -&gt; Uninstall.
So just to clear this up, you are suggesting these front ends run on node? 
FUD?
Great, glad you got it working!! Yeah... I don't work with Bootstrap too much, but perhaps it was moving the elements to a point where you couldn't see them or something...
Doesnt' work in Pale moon.
&lt;div class="tabs"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#tabs-1"&gt;Server 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#tabs-2"&gt;Server 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#tabs-3"&gt;Server 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div id="tabs-1"&gt; &lt;p&gt;Proin elit arcu, rutrum commodo, &lt;/p&gt; &lt;/div&gt; &lt;div id="tabs-2"&gt; &lt;p&gt;Morbi tincidunt, dui sit amet facilisis feugiat.&lt;/p&gt; &lt;/div&gt; &lt;div id="tabs-3"&gt; &lt;p&gt;Mauris eleifend est et turpis. Duis id erat. &lt;/p&gt; &lt;p&gt;Duis cursus. Maecenas ligula eros, blandit nec.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; Edit: actually it's that element as the 1 entry in an array; so exactly what I'd expect
in your ajax call ` success: myFunction(response) ` then ` var myFunction(response) { // try stuff here } ` Then you can separate out logic and make your code a little easier to debug.
Thanks! :)
Make sure you will also need to pass your `Widget` variable into the success function. How are you loading your JS files, BTW? (i.e. what order are you script tags in).
Great work!
I will likely take you up on that offer. 
facebook engineers: *nervous laughter*
https://jsfiddle.net/indatawetrust/qqbg3pnm/2/
It may be possible that there could be a conflict with bootstrap.js. Try taking it out and then see if you can run the $('.tabs').tabs(); function.
Negatory, same error. :(
Thanks for your useful feedback and kind words! Fair point about the example names. I will look into replacement names and (perhaps more importantly) assets. 'Paddle Spanker' would certainly be an interesting one...might not be what people are looking for when they Google the term though! Thank you for letting me know that the number of lines of code in the examples are offputting. I've tried to shoehorn in a lot of patterns that are really not necessary for such a small game, but would pay dividends at scale. I see now that the basic examples page is not really the place to demonstrate this. I'll get to work making it a lot more concise, and hopefully attractive! 
https://jsfiddle.net/qqbg3pnm/3/
For laughs or they really don't want anyone to alter that property so gave it an obscure ridiculous long name. Probably both.
If the HTML weren't parsed and that were causing a problem, it would be that JQuery wouldn't come back with anything, not that a particular function were not defined. 
It would help if you had a [jsfiddle](https://jsfiddle.net/) that reproduced your problem.
I'll make one when I get back from school. Thanks!
&gt; I've tried to shoehorn in a lot of patterns that are really not necessary for such a small game, but would pay dividends at scale. Ah, this makes much more sense to me now than it did at first glance. Just try marketing those scalability gains in a terse way. Thanks for considering my feedback, and again, good work!
Thank you!
Looks interesting. Many moons ago, I built scientific simulations with an agent based model system (http://swarm.org ohgod it's objectveC). ECS is sort of the game pattern of ABM, so I'm looking forward to playing around with this. Thanks for sharing!
&gt; Normal functions are still declared as function(...){ ... } The HORROR! Wow, what a useless statement. 
funny
~~Try http://prettydiff.com/?m=minify~~ ~~You can get from [Github](https://github.com/prettydiff/prettydiff) or [NPM](https://www.npmjs.com/package/prettydiff)~~ Nevermind, doesn't do item *d*. I took that feature out recently.
Don't know why you've been downvoted, most ES7 features are still not the finished product and might not make it.
Yes, we do support mobile, but it looks like I forgot to bind a touch event. Whoops, I'll get that fixed!
Then if item *d* becomes optional take a look at that Pretty Diff application. It is only a couple of files and runs with Node, WSH, and in the browser.
Unfortunately, item D is probably the most important. JSMin does everything but item D. (Plus, installing NodeJS isn't an option.)
How do I fix it? It's a little confusing.. and I thought I had my head wrapped around it. Async can really bite you in the ass.
Looks cool, I think I should have a look into ABM!
It is impossible to both await a promise and throw a synchronous exception. Either the synchronous error happens before awaiting the promise and so you don't await anything but get a synchronous error, or the sync error is after awaiting the promise, in which case the await will throw and you'll never reach the sync error.
Await* is no longer part of the spec. It doesn't seem very valuable as sugar for typing `Promise.all`. I want to leave that syntax open for future extension that is more useful.
Thanks for your feedback! I am aware of the issues with timing you mention (though I didn't know the rAF callback supplied a timestamp), but opted to not delve into it as it was 'just an example'. I included a link to the [legendary gaffer on games post](http://gafferongames.com/game-physics/fix-your-timestep/) in the getting started guide. Thinking about it, this is at odds with how I approached the rest of the example and doesn't sit right. Thanks for bringing it to my attention! Switching to ES6 is on the roadmap. This started as just a passion project to learn JS for work (where we have to use ES5), but has outgrown that! Good shout on the Pong preventDefault, it's pretty annoying. 
Awesome, thanks!
Because this is reddit and somebody doesn't like my opinion regarding what I consider production ready tooling or not, I was expecting it. ES7 for now is just a bundle of ideas thrown into the air, with only a few that are confirmed coming (like async/await). Their implementation is yet to be fully documented and is bound to change in weeks. Volatile, drafted or unstable tech, usually is not used in production environments.
[Pull requests welcome :)](https://github.com/RoganMurley/hitagi.js/blob/master/src/systems/controlsSystem.js#L86)
not really. Good luck debugging all your thunks too ... that's a nightmare.
Thanks, I learned a new word :)
I take issue with "rules" 1 and 11. **1. JS Belongs in a .js File** Not always. Lots of large sites inline some of their script, and there's a good reason for it. Sure, your external scripts get cached, but they also require a round-trip after the initial HTML loads before they execute. Script that's integral, especially on landing pages that aren't often re-visited, can benefit from being inlined. **11. Use a Framework or Libraries** Really? I have to use a framework/library to be considered a professional in 2015? Sure, frameworks have their place, but insisting that they must be part of any professional javascript project is just silly. Frameworks can speed you up a lot, but they can also impose a whole lot of constraints on you. If your application fits perfectly within a framework, go for it. If it doesn't, a framework could end up being a lot more pain than it's worth. Additionally, unnecessary frameworks increase your script payload, impacting load time and responsiveness. I'd argue that you should default to using no frameworks, and only introduce one with careful deliberation and only if it's actually a net positive to your project.
What are the benefits over using localStorage?
Thanks. The below code works.. 'use strict'; const ping = require('ping'); let online = true; function checkHost(address, cb) { ping.sys.probe(address, data =&gt; cb(data)); } function userOnline() { console.log("Online"); } function userOffline() { console.log("Offline"); } setInterval(() =&gt; { checkHost("172.16.104.127", (response) =&gt; { online = response; }) if(online) { userOnline(); } else { userOffline(); } }, 2000) 
It's all working great for us in production with a 200KLOC codebase and doing some pretty insane stuff (i.e. transferring 200MB of data between a worker and main thread).
Of course each online check is 2 seconds behind because you're not checking _inside the callback_. There, you don't even need the online variable (unless you plan to reference it elsewhere)
Out of curious why do you want the variables renamed? Is this for security?
Thanks, understood that. I do plan on referencing it elsewhere. I'll keep all this in mind for future apps if needed. Thanks for the help.
That's fair. As long as you actually need most of the functionality of the library, then it's a good idea. Loading all of jQuery just for dom selection, on the other hand...
Does just 'using JavaScript' count? ;)
I reached the test "renders as a pure component", which contains the line: `component.setProps({pair: pair});` - this produces: Error: Invariant Violation: processUpdates(): Unable to find child 0 of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a &lt;tbody&gt; when using tables, nesting tags like &lt;form&gt;, &lt;p&gt;, or &lt;a&gt;, or using non-SVG elements in an &lt;svg&gt; parent. Try inspecting the child nodes of the element with React ID `.2t.0`. Any ideas?
 const actorComponent = EC.defineComponent({ name: 'actor', init: function( data ){ this.activity = data.activity; } }); Isn't mixing code and data in components a big no-no? I thought components where supposed to be data only.
An event listener callback is an asynchronous function, and asynchronous functions are not able to return any values. So the answer to your question is no, an event listener cannot *return* a value. The alternative would be to store the relevant information from the callback function into a variable available outside the callback. [JSFiddle Example](https://jsfiddle.net/mjmyourx/). I would look into reading about Callback Functions and Asynchronous Functions more, both fundamental patterns for building JavaScript applications.
Rule #9 is a problem with the JavaScript development community not great advice. How is forever chasing future features with buggy transpilers seen at all like something to be happy about. Fuck. Let me work with something stable for just a single goddamn day JavaScript!
One of the main objectives of Babel is let you use new language features on older spec platforms, having in mind that your code will be able to run without transpiling when the spec is fully implemented by the platform you're using. With ES7, they can't ensure those features will actually be available in the platform, so you risk continuously relying on Babel (or worse, an older version of Babel) even when the platform fully supports ES7 in the future, because you used features that ended up being scrapped from the draft. Code you currently write in ES2015 and transpile with babel will be able to fully run on a ES2015-specced platform (which currently, none 100% support all features. Babel and Firefox ahead with 71%) without transpiling because the spec was approved long ago.
What else does the console say?
Hi! I'm an amateur as well, but I can accomplish what you are describing here. You're going to want to know about the html5 &lt;video&gt; element and it's associated DOM methods/properties. Here's a reference: http://www.w3schools.com/tags/ref_av_dom.asp Do you know DOM manipulation at all? Like how to access html elements and css properties and values with javascript? If you know that stuff, and have a basic understanding of javascript, it shouldn't be too hard to implement what you describe here. Feel free to message me if you would like help with the project!
I feel like we've been seeing more and more of this sentiment. It's not like the tech industry and CS is at a loss for variety. Instead of arguing for an entire area of the industry to pause and stop moving for you, why not just work in another area? There's plenty of languages, business domains and frameworks that are comparatively stagnant to the web.
Hey what does this button do? *presses*
Only thing I can reference to right now, check out [this](https://www.reddit.com/r/javascript/comments/3l7ueq/need_a_good_analogy_for_callback_functions/?ref=share&amp;ref_source=link) thread. Could you post your question?.. you could try comparing more answers to what you were originally provided.
For "mutating the [[Prototype]]" its due to how browsers optimize javascript in the runtime. I'm not super familiar with the specifics of the optimizations, but this post has some references that seem like good points: http://stackoverflow.com/questions/23807805/why-is-mutating-the-prototype-of-an-object-bad-for-performance/23809148#23809148
I do this sometimes. function tempLockPage(pageId, disclaimer) { if (disclaimer !== 'I understand calling this method is a temporary hack and I\'ll be required to fix my code immediately if it goes away and my call breaks the build.') { throw new Error('Disclaimer not specified.'); } ... ... ... } You can't plead ignorance.
regardless the external js file will also be cached. If both the html file and the js file in this scenario are cached the articles statement still holds true. no?
Are you sure its `sum((2)(3))` and not `sum(2)(3)`? Give this a read. Lots of info around this kind of stuff: [Ben Alman - Partial Application in JavaScript](http://benalman.com/news/2012/09/partial-application-in-javascript/)
Actually, it's sum(2)(3). How do we call these functions?
If I assume you mean sum(2)(3), this should work: function sum(a, b) { if(arguments.length===1) { return function(b2) { return a+b2; } } return a+b; } 
I'm fine relying on Babel. I'm fine relying on it now, and I'm confident I'll be able to rely on it in the future (multiple BigCos use Babel). I don't see what practical impact your criticism has.
What is b2? Not sure how b2 can get there. 
What exactly will be the feature split after React DOM is extracted? I thought React pretty much is the "DOM-related stuff"?
The problem is not relying on Babel. Babel it's quite reliable and I use it even in production every single day. I was not criticizing anything regarding Babel. My point is: you might be using features that will never see the light of day in the final spec, which will make you rely on an older version of Babel in order to compile the code to usable ES5, because the current versions of Babel always follow the spec. As the spec is not final, and not even draft-ready, all ES7 features are marked as experimental because they're volatile. Picture this example: a new feature suggestion arrived to the ES7 spec that adds a new operator, but it's syntax it's still in discussion. You use it anyway. A few months later, the final draft gets approved and the syntax around the operator is slightly different. Babel follows the spec, so it also changes the operator. Now you have to rely on the older version of Babel (which supports the old operator format) and your code will never be fully ES7 compatible when the platform arrives. If you're ok with this, then props to you. I wasn't criticizing you or your methods, I was merely pronouncing my opining regarding experimental features.
Its two functions in that case. `sum(2)` and then that returns a function which then gets called as `returnValue(3)`. Basically it one lines: var remainingSumFunc = sum(2); var sumResult = remainingSumFunc(3); The link I posted goes into more detail, but for a simple example, look at /u/dtfinch's post
b2 is a function parameter, just like a and b. They're variables that get populated when the function is called. sum() can return function(b2){...} if it only has one argument which then can get invoked with more arguments. That's what's happening in the sum(2)(3) case. sum(2) gets called, has one argument, so it returns a function. That function is then called with (3) putting 3 in the b2 slot and the result is a (2) plus b2 (3). If sum is called as sum(2,3), the argument count is greater than one and the function return is skipped and you instead get returned a (2) plus b (3).
I won't argue on the "new and shiny" mentality because there's definitely plenty of that going around. Certainly a good chunk of that feels like excuses to not have to learn the language itself or its design patterns. That doesn't adequately describe the push from the core community as well as the various corporate players though. I think part of the reason we're seeing so much change so fast is due to the fact that JS has been held back for so long. Languages and runtimes usually develop gradually at a decent rate. Javascript hasn't had that luxury though. It's been repressed by years of users allergic to up-to-date software, enterprise seemingly being run elusively by Dilbert characters, and frankly misguided attempts to keep things "easy" for novices. I mean most of the stuff from ES2015 was supposed to be in ES4 before it was abandoned. That was almost a **decade** ago! It's not like all this stuff came out of nowhere. People have been arguing for it for freaking years. Used to be even if you got something good in the spec it would be *years* before you could actually use it. So like a cork in a bottle, I think the pressure has finally burst now that we have a good chunk of users on evergreen browsers. Developers are sick and tired of having to wait on Sally McNeverUpdate, CEO Chad McFuckITbutHowAboutAnotherExecRetreat and Newbie McjQuery. I think of it less as a "moving forward fast" thing and more of a "giant rubber band that we've been stretching for far too long is finally snapping back and hitting us in the face." **TL;DR:** It'll slow down eventually, but for now people are just trying to catch up with all the tools and features of a "real" language that should have been here for years already. Edit: Oh almost forgot, the idea of a transpiler like Babel is to make things *more* maintainable not less. So if you're using ES2015 and enough of your customers browsers finally have good support coverage you're able to drop the transpiling step without any changes to your codebase.
[The 0.14 blog post covers it in detail](http://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html), but you can get a feel for it by thinking: "Suppose I was trying to write a view for something other than a website. What concepts could I borrow from React? Heck, what *code* could I borrow from React?" And then you'll discover that people have already done that: [React Native](https://facebook.github.io/react-native/) is another Facebook project that allows you to write iOS/Android views similarly to how you'd use React for a website today. So, the React core will contain the things that power both React Native and React Web (a name I just made up :P), and React Native will additionally contain the functionality for targeting native mobile views, and React Web will additionally contain the functionality for targeting the DOM. --- Technical TL;DR: methods like `React.render` and elements like `div` and `button` are moving into ReactDOM, whereas the React core will contain the logic for declaring a tree of components and maintaining their state.
Thanks!
Strictly for file size. I tend to be very verbose in my naming conventions, so I might have: var getJsonFromSharepointQuery = function(sharepointURL, sharepointSelectorArray, sharepointFilterArray) {} When this cuts down to: var a = function(b,c,d){} It's a pretty significant bandwidth savings. Particularly as the projects get larger, the naming conventions need to be more explicit, and thus, larger. I also use it to make bookmarklets, which of course, you want as small as possible. Today I actually already wrote my own JS minifier that removes all comments, unnecessary semicolons, and whitespace, and tomorrow I'll add variable reduction. Didn't seem like anything out there was fitting the bill.
I agree with a lot of what you're saying here. I guess my position comes from having to deal with Sally McNeverUpdates. Now I don't have a special case or anything just have to deal with these types of environments. I can say I'm happy that it's been a better ride in the last year or so but until things slow down and stabilize I don't think I'll see a big jump away from vendor hell. I'd like to use ES6 but I can't get sign off on bleeding edge much less whatever edge a transpiler gives me. I'm not a curmudgeon, I know what's out there and want it but going back to my original post, this article saying that professional JavaScript developers should always be developing their applications using the next level of the language using a transpiler, just strikes me as irresponsible advice.
That's ridiculous. ...and awesome!
npm install -g n n stable
Yep. That could easily be one of the main reasons they're being so cautious, really: if you push a breaking change to the site-wide version of React without deprecating it first, the angry manager is gonna walk down the hall to *your* office and loudly explain the consequences of your actions ;P
**Rule 13:** If a library you're using doesn't have all the features you need, contribute back to that library (if possible) rather than writing yet another library that duplicates already existing functionality.
So, I highly recommend not doing this, but taken to the absurdist extreme: function reducer(a, b) { return a + b; } function sum() { var sumSoFar = Array.prototype.reduce.call(arguments, reducer, 0); function result() { var resultArgs = Array.prototype.slice.call(arguments, 0); resultArgs.push(sumSoFar); return sum.apply(this, resultArgs); } result.valueOf = function() { return sumSoFar; }; return result; } You can then call it like this: sum(1, 2)(3)(4, 5, 6) + 10 // 31 But, again, don't.
That's the thing, after explaining that they go onto showing examples which mimic classical inheritance. 
Yeah, no prob! Seriously, any questions let me know and I'll try to help out! I don't really like Github, but here's my CodePen profile: http://codepen.io/ForScale/popular/
I supposed then you could even create a react-game that gives you a canvas output for game object states within a react-web application that don't need to include their own complete copies of react-core. I need to play with react I guess. I just really really like Angular. It'd does everything more or less the way I think about web application design. 
It's very difficult to code anything without using an established pattern or anti-pattern at some point. It's a lot like chess openings that way: if it makes sense (or appears to), there's a name for it, whether or not you're aware of it. Being aware just makes it easier to research use cases and common pitfalls.
I guess the question the OP has is more like "What in my code is changing an existing object's `[[Prototype]]` or relying on mutation events?" I briefly looked in the code and didn't see where it was happening.
[git blame](https://github.com/facebook/react/blame/69ab7145bc36a500195ccf0e2937ded21520582f/vendor/react-dom.js#L30) says [this person](https://github.com/zpao) should be fired
the strange part, is the mutation error was from the d3.min.js library, which i do use for other things. but this particular object/module does not use any D3 methods, just standard JS and Jquery. 
 function undisclaimify(fn) { return function() { var args = Array.prototype.slice.call(arguments) .concat('I understand calling this method is a temporary hack and I\'ll be required to fix my code immediately if it goes away and my call breaks the build.'); return fn.apply(fn, args); }; } var myTempLockPage = undisclaimify(tempLockPage);
Hehe, you still can't plead ignorance, though. :-)
Hi /u/housecor, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `bitnative.com` and `medium.com/@housecor`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [bitnative.com](/search?q=%28and+site%3A%27bitnative.com%27+author%3A%27housecor%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|26|81% [medium.com/@housecor](/search?q=%28and+site%3A%27medium.com%27+author%3A%27housecor%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|4|13%
This is insane.
The Firefox dev tools are pretty similar to Chrome's at this point... What exactly from Chrome are you looking to have? What "stick-on-bottom" behavior are you referring to? 
Get an Espruino? http://www.espruino.com/
Cant you basically do the same thing with the react DOM api? React.DOM.div({}, React.DOM.h1({}, "Contacts") ) or var R = React.DOM; R.div({}, R.h1({}, "contacts") )
Actualy this is quite an old trick, HTML generating DSLs work like that ([Lucid](https://hackage.haskell.org/package/lucid), [Blaze](http://jaspervdj.be/blaze/), etc.) With a nice vim macro, and currying (look at underscore, Rambda, etc.) you can generate these functions in a minute: Input: h1 h2 h3 h4 h5 p pre div span ul ol li table thead tbody tfoot tr th td Macro: ywivar ^[pa= el('^[wea')^M^[ (hint: `^[` is Esc, `^M` is Enter) 
are we supposed to know how fileInject.loadFile was implemented?!? what does the stack trace say?
Do you know of anybody who's hiring?
That's the name of a meeting room too.
They are doing this to expose a very public API (ReactDOM) in a clever way. The property name they are using to expose it is just good fun. Anyone using 0.14 is using ReactDOM, and as such, using this feature. It has nothing to do with hipsters.
its been a while since I've worked on this stuff but iirc: Dynamically add script tags with src urls will be delayed until after the current event loop cycle, so any other script tag in the page will execute before those. Again that's my somewhat hazy recollection. That said the way you're doing this means that what you'll probably need to do is make your file inject system have a completion callback, essentially add an on load and on error handler to every script tag you add, when they're all loaded your injector can call the callback. For sanity's sake you probably want an error callback as well
Yeah, experimental might not be the right word. I think I'm trying to express that the concepts underlying React are so young that, even now, we're still making big realizations like the one that motivated this decoupling. I think maybe I'd say, from my rather distant view, that React The Implementation is at version 13, but React The Idea is still at version 0.13 (if that makes *any* sense ;P). The library is being built with a strong focus on stability, but React can only hope to be as stable as its underlying ideas, which seem to still be rapidly evolving. It's an exciting time to be in this community, though, that's for sure :D I feel like you must be having a *great* time out there in the middle of it all :)
Ahh, fancy, fancy. Yeah, I'm very impressed with the thoughtfulness behind this hack :) It's initially a very wtf sight, but I had tons of fun figuring out why it's the way it is. And, like, yeah, it would be *acceptable* to remove the methods outright instead of deprecating them — and definitely easier for y'all — but it's encouraging to see y'all strive to do better than acceptable :D PS, thanks, friend &lt;3 and give Alpert my love
I know that [js-beautify](https://github.com/beautify-web/js-beautify) is the standard in vim-beautify and most of atom's beautifier too. But really, I use [editor-config](http://editorconfig.org/) alongside too. And my god this should be standard.
[Something like this?](http://jsfiddle.net/13h1z4m8/2/) 
When I save the file it auto formats for me, good indenting and such .
Thanks for the awesome response! Still consider myself a beginner and am still dealing with side affects of content overload, so comparing and contrasting different opinions helps a lot. 
You gotta do it with es6
To partially solve for this problem I allow my scope structure to bear some of the weight in my naming conventions. Here is a simplified example: var parser = function (options) { //outer function var tokenizer = function () { //create parsed tokens var start = function () { //deterministic behaviors for start types string = function () //deterministic behaviors for string types analysis = function () { //do something with the parsed tokens My function names are extremely limited. On its own the name `start` is not descriptive and could mean many things, however if you look to its depth in the application's context its meaning becomes almost self-revealing.
Excellent post, thanks dude. And your website is something of a goldmine for anyone getting into React.
Check out [Regexr](http://regexr.com/), an online sandbox tool that allows you to craft regexs and test them against any string you want!
Some people started to claim that a good way of doing things is actually wrong. There is nothing wrong with the code of MDN, what is wrong is claiming that one style is better than another. The most obvious and simple way of doing inheritance is actually what is in MDN, other ways came later as a response to drawbacks of that style and the language itself.
We caught it! We luckily had a known customer who created such requests and we phoned him! We nailed it down to one Firefox plugin: https://addons.mozilla.org/de/firefox/addon/cliqz/ We could reproduce the described behaviour by installing the plugin. The strange thing is, that the add-on has not been modified recently, regarding to addon.mozilla.org. The malicious version we installed is version 1.0.37, and can be installed from https://s3.amazonaws.com/cdncliqz/update/Cliqz.1.0.37.xpi It seems, they tested some anti-tracker functionality. Probably they uploaded some new rules on 2015-09-09. Down in the code they have a nice function: tmp_url = tmp_url.replace(encodeURIComponent(encodeURIComponent(badTokens[i])), encodeURIComponent(encodeURIComponent(shuffle(badTokens[i])))); shuffle....
You have to use a backlash to escape the \^.
can you put the ready function in a index.js and fileinject it after jquery,test and test2? 
&gt; I'm not a bot. Most likely the first thing a bot would write. So I tagged you as "might not be a bot", and we'll see...
you can even import directly from React.DOM and have only h1, h2, h3 etc
You can never be sure a memory editor is being used. It has full control over your app, so with enough knowledge it can do anything it wants. However, you can make things a bit harder for an attacker to know what to do. You can keep copies of variable values and compare them. That way it's harder to set a specific variable without you noticing it is being tempered. If it doesn't match your old value, crash. Additionally, since those tools can alter multiple values at once, you might want to create transformed copies of the values mentioned above. You can transform them in some way (like * -2) and transform back when comparing. That way it's harder to find these copies. This only helps against freezing and tempering data. It doesn't exactly help against searching for those variables. To get around this problem, you can store some values in a strange format and transform values when reading and writing the variable. A strange format could be a bitwise xor of the original value (but there are probably better transformations/formats to be thought up here). Lastly you might want to defend against those tools tempering with program code. I don't know a good method to get around this for js or flash, since you'd need to know a bit what the different js engines do on memory level. However, for an attacker to know which code to alter (s)he must first find which variable needs to be targeted. We already defended against finding variables, so finding which code to alter becomes much harder. That said, once someone does find the right program code, it's easy for them to spread these findings to others.
It's a golden hammer article. I'm sorry to say it, talking about standardizing on a language, especially a script language, is a great way to show you could use more experience. I write JavaScript every day and I love it (especially with TypeScript on top). But "your choice should always default to JavaScript" is very naive. We can't even *begin* to make a pool of suitable languages for a project before we discuss what the project is about in good detail. We then split the project into modules, like clients and services. We figure out what their communication will be like (APIs). And only then we can start talking about languages, and chances are it won't be the same language for every module, because the wire protocols are for the most part platform-neutral, so we're free to choose the best language for every module.
We modified our requests to include a parameter "check=Javascript". Using the named add-on (it must be version 1.0.37, nothing else) our webserver logs it as "check=svriatJcpa". You can't see it in Firebug. When we disable the plugin, everything works as designed. Perhaps you're not on their white- or blacklist any more.
If you don't do it async it has the potential to block your DOM until it's fully loaded which can make your site appear slow.
Thanks dude thats what I was after!
I wouldn't do any real development in react without using JSX but it's handy to know what's going on under the covers which I believe is the point of this post.
I prefer to use the one I wrote: http://prettydiff.com/?m=beautify It is heavily used in the popular atom-beautify package: https://atom.io/packages/atom-beautify The Pretty Diff application contains a CSS, XML/HTML, and JavaScript parser that can work together to support a variety of conventions like: * React JSX * Less * SCSS (Sass) * Dust.js * Handlebars * Mustache * EJS templates * ERB templates * JSON * Java's JSTL (JSP) * Titanium Style Sheets (TSS) * Spacebars templates
There are genuine preventive measures against memory tampering in flash, but it's complex and low-level stuff that I'm not an expert on. However, you can make checks like checking when values change - If health is never supposed to go up by more than two values in a second, you can make checks to see if health increased more than that, then exit the game. That's just general practice and you'll need to be developing the flash games yourself. JavaScript doesn't have this sort of control and never will.
Systoll, thank you so much! I think I'm starting to understand how it works. I tried to adapt your code to my page, but it still doesn't work because the code has a different structure than mine and I can't seem to get it right. My header, which contains my navigation menu, has the following structure: &lt;div class="main-header"&gt; &lt;div class="centered-header"&gt; &lt;ul class="menu"&gt; &lt;li class="button"&gt;&lt;a href="#section1"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class="button"&gt;&lt;a href="#section2"&gt;About us&lt;/a&gt;&lt;/li&gt; &lt;li class="button"&gt;&lt;a href="#section3"&gt;Our work&lt;/a&gt;&lt;/li&gt; &lt;li class="button"&gt;&lt;a href="#section4"&gt;How you can help&lt;/a&gt;&lt;/li&gt; &lt;li class="button"&gt;&lt;a href="#section5"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; And I'd like to change the buttons top border on scroll to the following: border-top-style: solid; border-color: #0b96dd; border-width: 10px; color:#464646; How would the script be in this case? Thank you very much! :) 
&gt; Is there anyway to halt Javascript from executing without freezing up the browser The best solution is to stop using `script` tags that contain either code directly or miss the `src` attribute. This will probably solve your problem, example: &lt;script src="code.js" type="application/javascript"&gt;&lt;/script&gt; Secondly all code execution from a function reference. No code should execute automatically (EVER) unless you intentionally delegate otherwise.
Yeah, I'm curious what your question was too. I don't necessarily callbacks themselves are that difficult on their own. I think the problems that occur while using them like managing context and working with closures and program flow seem to be more challenging.
Hi /u/sgslo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
 var foos = document.getElementsByClassName('foo'); for (var i = 0, n = foos.length; i &lt; n; i++) { foos[i].id = 'id' + i; } ?
I'm using [nvmw](https://github.com/hakobera/nvmw), it works well for me.
Thus far doesn't seem too difficult. Unless I'm missing something. 1.) Use RegExp to find all blocks {} 2.) Find any *var* declarations. 3.) Find any (start)&lt;varname&gt;(end), where "start" and "end" can be (startline endline { } ( ) , ; : etc.) 4.) Replace &lt;varname&gt; with a unique 1 or 2 char variable unique to that block scope. Am I missing something here?
I used Cheat Engine to exploit Maple Story when I was younger. From my understanding of CE, you're directly manipulating the game. Only the game itself, or some kind of anti-cheat game(which I guess talks to the main game over an API), knows what's up. If you want to detect CE in flash games, you'll have to use an API to understand what's going on in the flash game or make an anti-cheat in the flash game. Someone please correct me if I'm wrong. 
I'm assuming id1, id2, id3 were just for the sake of examples. These are not good ID names, you can make them more unique. Assuming that, here's how I'd approach this. /** * Make this a unique namespace that will be the prefix for your IDs. * @const {String} ID_PREFIX */ var ID_PREFIX = 'exampleApp'; /** * A convenience method for generating a GUID string. This maximizes * the chances of the string actually being unique. * @method generateGUID * @see http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript * @returns {String} */ function generateGUID() { function s4() { return Math.floor((1 + Math.random()) * 0x10000) .toString(16) .substring(1); } return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4(); } var els = document.querySelectorAll('.some-class-name'); for (var i = 0; i &lt; els.length; i++) { els[i].id = ID_PREFIX + '-' + generateGUID(); }
or do what the rest of the world did and look at the metrics showing IE with more market share and quit complaining.
Using.js?
This is the result of a deliberate decision by Microsoft to not allow IE upgrades on XP. There is no technical reason for it.
Ha, I just sent you a message... seems you figured it out though. Nice work!!
Don't all IDE do that? Netbeans: ALT+SHIFT+F Visual Studio: CTRL+K, CTRL+F I know there's also an option for Eclipse but I can't remember the shortcut. Now, if it's too much effort auto-formatting before saving, you're even lazier than I am.
&gt; This hurts Microsofts business model though. Nah, they are doing fine. The only place they need to take a good look is at mobile and they already are. Ipad Pro proves that devices like the Surface Pro are what is the future. Atleast for the productive person.
This is such a dead issue. IE8 is dying. Many customer facing brands no longer support and by this next year almost nobody will be supporting it. Even still the differences between IE8 and other browsers (not including differences due to newer technologies) is fairly minor. The biggest difference is whether a white space only text node is actually a text node (it is, but not in IE8). Most of my frustration when accounting for IE8 issues is having to compensate for differences to IE8 introduced by JQuery and frameworks. Seriously, if anybody mentioned this as a major blocking issue or primary frustration during a job interview I wouldn't call them back.
Ouch, my bad. I heard they were adding Windows support recently and assumed it would be there by now.
Making a link between front-end developers with browser cross-compatibility conversion skills, and the economies of scale for helping move the ball forward on becoming a space fairing civilization? My IQ just dropped 0.1 points by reading that title. Our economy is designed around supply and demand. Money currently chases the things that are the intersection of lowest risk and highest reward. Space travel is neither of those things. The reason we are not colonizing mars right now is because it's like we're back in the year 6000 BC, and here we stand at the edge of the ocean, gazing into the inhospitable expanse. There are no ocean going vessels to cross the distance cheaply enough or reliably enough. Sure we could go cut down some trees to build a boat to make it the 3000 mile journey, but I'm getting hungry now instead, lets go get some berries, that's much lower effort expended, and a satisfactory return on investment. The limiting factor is our ability to store enough energy and release it on command to resist gravity and accelerate an object to escape velocity without it disintegrating and tearing itself apart. We need a mr fusion. Currently in development: http://www.thinkgeek.com/product/htip/
The reason most organizations &amp; government agencies - which is the majority, not individuals - haven't upgraded is precisely *because* of the high cost. Upgrading an entire organization's systems is expensive, upgrading in-house custom software that **only** runs on IE8/WinXP is *extremely* expensive, and most places do not have the budget. That's pretty much the *only* reason why adoption isn't higher.
Your last example looks a lot like how html can be composed using the clojure library [hiccup](https://github.com/weavejester/hiccup) or the clojurescript version [crate](https://github.com/ibdknox/crate). It would like this in hiccup: [:div [:h1 "Contacts"] [:ul [:li [:h2 "James Nelson"] [:a {:href "mailto:james@jamesknelson.com"} "james@jamesknelson.com"]] [:li [:h2 "Joe Citizen"] [:a {:href "mailto:joe@example.com"} "joe@example.com"]]]] It's nice to see that this way of composing HTML has made its way into a pure Javascript library. IMHO, it is easier to read and more succinct than HTML/XML.
No gendered or pluralized strings?
A good read.
Good! Glad you got it working!
The no ES6/Webpack/Flux I agree with and is helpful, but do make lession 2 JSX :)
&gt; It's still not optimal but at least I don't want to kill myself anymore. You could find a new job. Wanting to kill yourself is usually fatal.
May be of use to you: http://www.w3schools.com/js/js_array_methods.asp
Any reasons to use this over [webpack-dev-server](https://webpack.github.io/docs/webpack-dev-server.html)? Seems like the same thing, only webpack has more features (hot module reloading for React, commons chunk, etc).
I share the opinion of OP. I do a lot of work in unix terminals and chrome devtools. I clear the screen everytime before I run a command. It is really helpful because the output is in a consistent place. In firefox devtools when you clear you are still typing at the bottom.
[The rest of the world does not use IE.](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers#Summary_tables)
Thanks for the welcome and heads up. I wasn't aware of all the guidelines, but rest assured, I participate heavily in discussions on my submissions. :) https://www.reddit.com/r/programming/comments/3m6x0p/12_rules_for_professional_javascript_in_2015/
&gt; MSFT has legendary software support and compatibility **problems**
Exactly. But some people gotta hate on the MSFT for reasons that have been fixed. Edge also looks a great browser. Just gimme those extensions, Satya!
Everybody will when they support that many different pieces of hardware. Even Android has this where some devices simply cannot run or use some features. 
VIM + autoformat plugin
Hehe, should we talk about ember?
&gt; Connect it to the ecosystem of the Internet though... and just like flesh decays without the self-defense mechanisms of a living organism, your Windows XP will get moldy Nailed it
Obviously, facts mean nothing here, but most people don't realize that, outside the US, IE is a relatively smaller player, dominated by Chrome and, in many cases, Firefox while virtually non-existent on mobile.
&gt; Even if you're writing your own minifier, do you need to write your own parser? Absolutely. You have to have a least a minor parser to remove comments appropriately. And you cannot simply remove unnecessary white space without breaking ASI expectations.
Lol. Nothing I said is true? Ah, they delusional apple cult follower has been found! Ipad pro is going for the crowd that uses Surface pro to be productive. Jobs hated stylus. That is a fact. And now, they make it seem like styluses are the greatest thing ever and they invented it. Apple copies all the time and has lacked innovation for a while. Get over it.
It could work if we could do a `new Math()` var myMath = new Math(); myMath.dice(20, 1); // nerd But its sad we can't :(
Could you confusing the number of items in an array and the index? An array of 5 is accessible by indexes 0-4
I have a few of the nanos and they are pretty nice. They don't fully support the full ECMAScript stack (missing things like Regular Expression/Unicode/Labels...) but for simple stuff, they do amazingly well.
your example under Communicating with generator calls the wrong function
Hrm. Haven't thought about using the "typeof" to check it. Lemme dig into that.
Unfortunately, no(t yet). I never needed it. But I think it could be a good addition. That's the reason I've shared it, to get this kind of feedback and to know what devs could need. Thank you for your feedback.
Yeah, I figured it was kind of unnecessary and a bad bad practice. The way i would actually implement this would be to create a "Dice" prototype separate from the core Math object. I am really just trying to experiment in order to gain the deepest understanding of Javascript that I can. 
Yes that would be nice, but I really do feel like /u/mrand01 is right and this is all a little unnecessary. Bonus points for the D20 though. 
Well I'm not entirely sure what you mean. You mean anti-IE circle jerk? My company supports a user base that had a mandatory Windows XP + IE8 install on all machines until last year and I can say without a doubt that we spent more time getting our apps working with IE8 than anything else. It was a fucking nightmare. Before that, the same user base ran IE6 until around 2009-10 and it was just as bad. Whatever bad reputation IE has earned is more than deserved.
Singletons are great but can't really be unit tested. So I find myself using patterns like this instead: http://www.adequatelygood.com/Writing-Testable-JavaScript.html
I skimmed through it, it adequately presents JS modules. Nothing new, but the JS community is quite heterogenous, so we can't really say no one benefits from this. Case in point, the person you reply to. If he feels it's a good read, why the *heck* would you tell them it's not? To them maybe it is.
I like this, but I have caught it serving me stale bundles on a few occasions :/ . The thing that really sucks is that most of the time it does exactly what it should do, this has only happened a very few times among months of daily development. So when it does serve a stale bundle, that is not my first suspicion, and tracking it down takes longer than if I just restarted budo to begin with.
Here's an example of prototypes, but without the redundant prototype word: let Animal = { init(name) { this.name = name; return this; }, walk() { console.log(`${this.name} is walking.`); } }; // Create an animal Object like so let monkey = Object.create(Animal).init("Bob"); // Make the monkey walk monkey.walk(); // "Bob is walking." // We need a to define a new Animal type. let Dog = { bark() { console.log(`${this.name} is barking.`); } }; // Let's "inherit" or set the prototype to an Animal Object.setPrototypeOf(Dog, Animal); // We now have an init() and walk() for the Dog object as well let dog = Object.create(Dog).init("Spot"); dog.walk(); // "Spot is walking." dog.bark(); // "Spot is barking." Note I used some ES6 features here.
* hot module replacement -&gt; [browserify-hmr](https://www.npmjs.com/package/browserify-hmr) or [livereactload](https://www.npmjs.com/package/livereactload) * commons chunk -&gt; [factor-bundle](https://www.npmjs.com/package/factor-bundle)
Thanks, added an issue. https://github.com/mattdesl/budo/issues/71 If you see it again in the latest version, please post there with `--version` info. :) 
Any JavaScript developer talking about standards on the Web while the language has two different ways of packaging libraries of code is a massive massive hypocrite. 
Hrm. This is close. But would this find this to be a regexp? var a = b * c / d + e / g; or this: var a = 5/3; var b = 3/5; ?
Also, I already have the script "flagging" escaped characters, so that wouldn't need to be included. 
Hi, I'm Thomas and take care of PR at the German start-up CLIQZ. Let me clarify this. This is most likely the result of our anti-tracking technology. We offer novel browsers and browser extensions that integrate search technology and innovative privacy features. To protect the privacy of CLIQZ users, we are testing our unique anti-tracking technology. CLIQZ Anti Tracking is not designed to block tracking in general, but rather only the tracking of individual users — which we consider a violation of our users’ privacy, and therefore inappropriate. Unlike other anti-tracking systems, ours doesn’t block the signals completely; thus, website owners are able to get data for legitimate uses, such as counting visits. To prevent the identification of users (e.g. by using JavaScript hashes), CLIQZ Anti Tracking does in fact permute strings, as described here http://stackoverflow.com/questions/32606060/google-analytics-event-permutation. Whenever a new tracker shows up in our data, our system initially treats it as a user-identifying tracker and changes the string to preventively protect our users. Our system uses so called k-anonymity techniques. If it sees the same string for an event with multiple users showing up independently over the course of several days, it puts it on a whitelist of legitimate, non-identifying trackers. Once a tracker is whitelisted, it remains unmodified and website-owners see the original string. In other words, CLIQZ Anti Tracking limits the functionality of legitimate trackers only temporarily. As soon as it becomes clear that a tracker doesn’t violate our user’s privacy, everything works as usual. Privacy is extremely important to us and we believe this technology is necessary to protect our users from snooping. 
This is my biggest struggle. I have a bunch of apps in my head that I'd like to make, but holy crap are there 2000 different tools and libraries I need to get working together to make those apps happen. At this moment I'd prioritize output vs. bleeding edge industry standard tech, which I never thought I'd do. Sure, Webpack + Redux may be amazing and awesome and beautiful, but I crave results and demonstrable work over being hip on the internet.
The only delusion is that you think your opinion of Surface dwarfs the reality that iPads outsell Surface more than 75 to 1.
The enterprise loves it. If the surface pro wasnt a threat, ipad pro would never get made. Simple.
You can easily specify loaders like so: webpack --module-bind 'js=babel' -p index.js bundle.js webpack-dev-server --module-bind 'js=babel' --hot --inline In your case, babel-loader and uglify (which is just -p in webpack) is all you need. So I'm not sure your argument makes sense. This applies to webpack-dev-server as well. Then you get to a point where you want cache-busting, scss compilation, css minification, image optimization, etc, and your build scripts explode. You can move to gulp, or, you can just have webpack take care of everything with a simple config file.
&gt; Whatever bad reputation IE has earned is more than deserved. You cant blame a company for a product they have stopped supporting and given you alternatives for. No other OS gets support like windows. Hence why the enterprise uses Windows and not Mac or some linux distro for their day to day. Which you prolly have seen in your line of work. Critising IE6 now or even IE8 is like crtitisng older game or movie graphics. Did the job then and doesnt do it now. 
I think this book is a bit too difficult for most beginners (especially once you get past chapter 5). I highly recommend the annotated version, which can be found at https://watchandcode.com/courses/eloquent-javascript-the-annotated-version
That is what I ended up doing. But I guess I am more concerned with the philosophical side of this issue. I thought that in JS that all functions/vars ect. are objects. I thought that everything is an Object, not a literal Object I know but an object none the less. EDIT: Are you saying that only constructor functions can have prototypes or that only functions can have prototypes and no other types of objects? 
Hell yeah.
Much as I hate to say it, I'm beginning to agree. var b = /\//g ; That's a totally legit line. But without tracking my current "state" I would see that as a commented line that just says: /\ Grr.
David, you're correct about this! I also found that out in a system a built with Lambda. There's a reutilization of a Function mechanism within the Lambda cluster, I think this is very smart from Amazon and explains a bit more how we can all leverage this. If you call a function a couple of times within the same timeframe you'll see that it got faster from the first call, that's because on the first call it created the Lambda, the second one probably went back to that same Lambda Function that was staged before somewhere. After a while without calls (in the middle of the night) they'll kill it certainly, that's totally awesome!
Pretty much everything has a prototype - some object it uses to look to for additional members outside of those not assigned directly to itself. This includes object objects as well as function objects. This is not the `prototype` property, mind you. That's a little different. The `prototype` property - at least those created automatically - are only found on functions. This property is not the prototype of the function itself (that's actually `Function.prototype`), but rather, a reference that is used for the prototypes of instances created with that function used as a constructor. If you want to get the prototype of any specific object instance, you can use `Object.getPrototypeOf()` or the (non-standard until kinda/sorta ES6) `__proto__` property. `&lt;FunctionInstance&gt;.prototype` is what becomes `new &lt;FunctionInstance&gt;().__proto__`. Really, `__proto__` would be better off named `prototype` and `prototype` in functions should have been something like `prototypeForInstancesIConstruct` because right now, the `prototype` property is not the prototype of the object you're seeing it attached to. However, it makes sense, as far as organization goes, to have that on the function object since its the function that creates the instances so its an integral part of defining how those instances are defined and to what prototype it is attached. 
^ In reference to https://twitter.com/dailyjsquiz/status/647451664761360384
Prototypes are useful because anything on the prototype gets reused between instances you create. What this means is if you assign a function to a prototype, and create new objects using that prototype, when those objects call that function, it's calling a shared definition of the function, which means less memory use compared to creating individual objects without a prototype and applying a copy of that function to the objects. More discussion here: https://www.reddit.com/r/javascript/comments/1m3yyl/javascript_best_practice_function_or/
Thank you. So if I instead used methods inside of the constructor itself as oppsed to prototyping, every instance of my object would have its own copy of the function in memory instead of letting them all share the definition of a function and only storing it in memory once? Using prototypes really just comes down to memory use? Or is there an organizational benefit from this as well? 
Sublime, Atom, Vim, Emacs, most editors have a way of being able to configure this.
IMHO the suggestion that a setup wizard would help webpack is probably a good indicator that it's not really that simple. Instead, browserify works with the primitives we're all used to already: CommonJS modules and unix pipelines. `browserify . &gt; bundle.js` is all you need to get started.
all functions are objects but not all objects are functions.
2 ? I'd say at least 4 : cjs , amd , ES6 modules or globals.
Your code is in Java, not JavaScript. The two are very different languages. This question might therefore be better asked in /r/learnprogramming or and equivalent for Java. If you do post in /r/learnprogramming make sure to be specific with what you need help with and to post your code as text rather than as an image.
Looks great. How do I get it to serve a default HTML? How does it look with CSS injection, HTML watching and DOM error reporting? How do I specify a plugin in the dev server? Browserify and webpack are both great tools, with different goals and philosophies. :) It's nice to have options, and switching between them is trivial since they both aim to support CommonJS/Node/npm.
It'd have to be transpiled by Babel right now, but browsers will support ES2015 (or ES6, I guess) natively in the (hopefully near) future
[removed]
This specifically targets browserify (i.e. CommonJS) development.
Man I gotta say this is a little too deep for me right now but you have my interest. Is this something I should probably be learning about now or wait until it is native?
oh I see what you are pointing out. inline js will obviously be cached along with the cached page therefore "Inline JavaScript must be downloaded every time the page is loaded" is not a valid statement.
Personally, if I was just starting out I'd probably focus most on ES2015 since it'll definitely be the standard soon. Not to mention you can already use most, if not all of it with Node 4
Yes IE support can be annoying, but if it takes so long, you are a very shitty coder working on a very shitty project. And for the love of god, just ignore IE6 to IE8 users. They are so marginal it isn't even worth trying anymore.
Ha Ha Atari in the trashcan. Commode users are hilarious.
Thanks!
[False](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers#/media/File:Browser_Market_Map_June_2015.svg). In fact, IE enjoys the strongest marketshare in South Korea and Japan (South Korea has by law required banks to use Korean-developed ActiveX plugins for security, lol)
Wasn't modernizr invented for this?
I've used 2 electron based apps, I ended up not using them due to memory issues. Careful with memory leaks and don't rely on the garbage collector.
Offline? Well, it's for creating stand-alone desktop apps. &gt; are they any good (simple) examples or tutorials? The official documentation isn't any good because...? http://electron.atom.io/docs/v0.33.0/ **Edit:** Thanks for the downvotes, but what's wrong with the official docs? They have a quick start tutorial and everything.
so I don't need to do that Prototype declaration beforehand?
oh yeah that's probably the issue.Thanks I really appreciate it!
Ohh, snazzy! I'll definitely be sticking with Ramda (It has other fp features not present in lodash), but I'll keep this in mind for something to show people who want something more familiar.
I can't speak on how good Electron is, but a noteworthy alternative is [nw.js](https://github.com/nwjs/nw.js). It has been around a bit longer than Electron afaik, so you should be able to find more tutorials by googling around, like [this](https://strongloop.com/strongblog/creating-desktop-applications-with-node-webkit/), to get started.
The beauty of stdout is that you can use other programs to perform fancy customizations instead of configuring the build tool. For example, for minification and gzipping: browserify main.js | uglifyjs -cm | gzip &gt; bundle.js.gz You can stack whichever other commands that can speak stdin and stdout (or you can trick some programs by using pseudo-descriptors for example `cat &lt;(browserify main.js) extra.js`). The shell supports all of that, or if you absolutely must target bashless windows you can make a simple but slightly more verbose node script to do the same thing.
It is almost too easy to make an app... so you'll find some apps/examples out there that will hog your memory, lag with animations, improperly close/mismanage exceptions, etc. among other things. **Don't** let that discourage you!.. here are [some awesome examples](https://github.com/sindresorhus/awesome-electron) of what's possible. There is also [nw.js](http://nwjs.io/), yet there is no current way of downloading it over HTTPS and in my book that's just unprofessional (I won't require any of my clients/users to either build from source or download over an insecure connection.) That may not bother you if you're simply looking for something to mess around with.
You still think var is block scoped? var x = 5; { var x = 7; } console.log(x); // 7 There is only one variable in this example. The redeclaration is ignored.
So like https://github.com/thoughtram/es6-babel-browserify-boilerplate
Inconsistent indention and you forgot a semicolon. A linter helps with this. "number" is a rather bad name for a string. Your function returns a boolean or string. The type of return values should be consistent. Flip-flopping types is bad for performance and it makes the function weird to use. I'd probably write it like this: function isValid(id) { return id.length === 8 &amp;&amp; /^\d{1,6}-\d{1,6}$/.test(id); } There must be 8 characters. The first 1-6 characters must be digits, then there should be a dash, and the last 1-6 characters must be digits as well. Well, regex is cheating, but it's the best choice for this kind of thing. You should definitely learn it at some point. https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp
it's returning a new function which takes a parameter, b2. So if you did `sum(4)`, you'll get back a function that reads like this: function(b2) { return 4 + b2; } so in `sum(4)(3)`, the, `3` is feeding into the returned function directly, replacing `b2` with `3`. This might clarify, and is also equiv: //Long-hand version of calling sum(4)(3) var derivedFunction = sum(4) // returns the function(b2) def derivedFunction(3) // calling the function(b2) with value of 3 //derivedFunction(3) should return 7 I believe this is called a factory pattern, as you're generating a new function from based off of some parameters or values contained in the original function.
Visual Studio Code is running on electron. It runs *very* smooth and quick, if you needed an example of an electron app which runs well. Not open source, though, and probably quite complicated anyways. I've used both nwjs and electron, and I prefer electron's approach to splitting the rendering (browser) process and the main process. That, and electron has some really big names supporting it and using it in live applications, which is a huge plus in my opinion.
Wrong subreddit, sorry. (We're for Java**script**, not Java) Look at /r/javahelp or similar subreddits for help.
For sure. I'm using ramda myself however this new revelation had made me lodash-curious
Electron is a great option if you need a fully installable desktop app. You could also just create a normal website in javascript and open it in a browser if you don't need access to the filesystem.
`webpack a b &amp;&amp; cat b | ...`
what's the best resource to learn electron with ease.. any good book, youtube channel, or guide etc.
Let's play "what's the most malicious thing you can get through that eval"!
[Light Table](http://lighttable.com) migrated from node-webkit (NW.js) to Atom Shell (Electron) somewhat recently.
Electron is absolutely awesome! just to give it another glowing review: it's a good way to escape the pain of different browser support, and it's just great to be able to use javascript for a "native" app. Just like /u/G3E9 said, it's incredibly easy to make an app, and electron is really well documented at [electron.atom.io](http://electron.atom.io)
Technically true, however it would be quite hard, since it's inside of a regular expression. You never want to eval something from the a url, however once the page is already loaded, the end user can execute code anyway. No need to trick a fuzzy search function.
It's a bit buggy - but i liked the debugging console kinda effect your dad added.
Making stuff in electron wasn't hard. After playing around a bit, I made an app folder and managed to make something pretty easily. I took an html5 game example made by Thomas Mak, and just did some editing to make it work in a desktop window. https://dl.dropboxusercontent.com/u/13087849/Ping%20Pong.zip The original license from the example was MIT, so I'm just gonna stick with that. Original github page [here](https://github.com/makzan/HTML5-Games-Examples/tree/master/pingpoing), but I'm too lazy to figure out how to make a github branch. Also my changes were pretty miniscule. Basically just creating the main.js file in resources/app and screwing with the scores so that they would be side by side and not two lines. I have no idea how the original game works, other then I think it's running a jquery file. There's also no start button whatsoever. There's no linux or mac binary provided, but you should just be able to copy the app folder and then run the main.js file yourself with a linux or mac version of electron. I edited my post several times because I thought it got kinda long and rambly, but basically electron can open a html file inside main.js, and whatever you throw in that will open up in a desktop window. If you want to use native features you'll need javascript code and probably whatever NPM stuff you might want. http://electron.atom.io/docs/v0.33.0/tutorial/quick-start/ is a pretty good place to begin. Apparently you can also get electron to pack the app a certain way, but I'm lazy and just opted to rename the executable from electron to ping pong. everything else is vanilla. Since the game code is all open source it's no big deal. All the App data/assets/etc is in "resources/app". there's a json file, an index.html file, a main.js file and whatever assets the game came with. The vanilla package you can download from electron can open an app folder that you drag into it, or be put into the resources folder to open at launch. I'd say the main.js file is the important one, as that's basically the start up file. 
But you can compile nw.js into an app, right? I have done this in on Mac, at least. You don't have to ask your users to download it.
http://i1.wp.com/dudeism.com/wp-content/uploads/2014/08/Youre-Not-Wrong.png
You should modify your object structure so you aren't dealing with arrays directly. For example, if I have a game that uses a deck of cards, I'm not going to remove a card by saying: cards[6].remove(); //this is bad Instead I have an instance of a Deck object that I refer to, and provide the index to the remove method: deck.remove(6); //this is good The Deck object prototype might look like this: var Deck = function() { this.cards = []; }; Deck.prototype.remove = function(index) { this.cards.splice(index, 1); };
Will this throw an error if the last character is a slash?
Not really. Mithril is, in a nutshell, React but less opinionated. It has no "single" way to store and organize your data or structure your application and is only there to provide you with the things you do lots; route based on the url, render components, make AJAX requests, bind data, diff the changes using a virtual Dom, and render again. Methods like `m.prop` are purely for convenience and it is a good practice to use the underlying idea regardless of what framework you use (that is, using getter and setter methods even for seemingly static values because things can change down the line, and what may be in memory today may be in a database eventually and its easier to change a function definition than restructure how something is done altogether). The biggest benefit to Mithril is its size, speed, and simplicity. It doesn't get in the way and code looks almost like vanilla JS - this is likely why you think it adds keywords and methods that are unneeded. 
I don't know, it seems kinda like hipster-tech. I don't see its better size (code-wise) or in terms of simplicity. And I don't like frameworks that do stuff that is not obvious by the method-signature, especially when those things are essentially the most basic JavaScript things you can do like creating elements, and even more especially when the method arguments are unnecessarily cryptic while describing stuff that already has a well-defined format in vanilla js.
Cool implementation! I'll mention though, `Array.forEach` and `Array.map` are supported across the board! Underscore isn't even needed!
[When reading the title](http://img.pandawhale.com/post-21380-Good-Burger-meme-I-know-some-o-ZFMT.jpeg)
Commented code http://pastebin.com/w2pYzkLL
If option "strict" is true, throws an error if at least one unused dependency path or dependency name was found.
Why would "c" be a function which is called immediately rather than just a couple of lines of inline code? 
There seems to be a lot of mindshare moving away from NW.js towards Electron. Is it all just GitHub-makes-it hype, or does Electron offer technical superiority?
Very interesting. Can the same methodology be used to find trap queens?
Thanks! Exactly what I needed! I didn't know what was going on with the triple nested function
Not really new, it's been around for a few years now.
windows version, the mac version runs on mac gap
Am using this for a prototype at work. I was amazed at how easy it was to get up and running and how fast I could start coding the actual prototype. Thanks!
I don't understand any senior dev refusing build tools (an almost given in any workflow currently) and allowing client side es6 "compiling" (a truly terrible idea). :p
It's great, and so quick. Just wish the debugging was as easier than typescripts.
While I get what you're trying to say using vanilla javascript, sometimes applying a few patterns and abstractions can really go a long way. Mithril doesn't really enforce anything, but it encourages good practices for structuring applications that will pay dividends later on. For example in Mithril, all components are structured in a nested MVC hierarchy which makes tracing the flow of data and reasoning about the code base very easy -whereas using vanilla javascript, this *could* quickly devolve into spaghetti code mess. It also provides some basic abstractions like a virtual dom and diffing algorithm, optimized in a raf loop and redrawing the dom only when needed. Of course this could all be done using vanilla javascript... but it's just more work. It's like using smaller lego blocks when some larger, well built, well tested and well maintained block already exists for those purposes. For its tiny codebase, Mithril packs quite a punch. Anyway that's my 2c. I've used Mithril for some small projects and found it very pleasant to work with, though personally I'd prefer a more modular approach... but that's a whole other argument.
Thank you for stopping by and review my code, I can't be grateful enough! I'm using Heads First JavaScript Book, which I find amazing. But also I'm aware I'll not be able to make anything meaningful until I start writing some apps on my own and start making shit load of mistakes. For example /u/x-skeww gave me superb tips on how not to name variables, and how to be consistent with my return's, not to flip-flop types. What I find amazing is I understood what he where saying :D, even tho I fucked the function badly, I learned a ton.
Thanks 100x for stopping by and giving me review. Yes I know regxp from my "text scraping" days, but point was to use pure js to solve the problem, I forgot to said that :). Your function look's amazingly eloquent, 20 days ago I would not be able even to read it :).
http://www.netmarketshare.com/browser-market-share.aspx?qprid=1
49 bytes: f=t=&gt;open(encodeURI(`http://lmgtfy.com/?q=${t}`)) // Usage f('Codewars'); 😄
Versus every other stat site in the world.
So .. two countries ... and how many countries in the world are there?
Good tips. Angular has a strong core, but learning all the parts to ignore takes some time. It looks like Angular2 is resolving at least some of the problems.
If I'm not mistaken the top four languages on the Internet are English, French, Japanese, and Spanish, so even if those were the only ones it's a pretty high percentage of Internet users. If that doesn't convince you, China, the world's most populous country, is also higher than average on IE use (and I think the world's #1 user of IE6 now). And the fact that it doesn't enjoy majority use in, say, Europe, doesn't really mean that it's irrelevant. In summary, I don't think you have a very strong argument.
Never quite sure why people delete most comments or posts. I forget whether my thank you here was sincere or snarky. (I sometimes thank people who are oddly insulting over nothing much.)
so you're running a news site with shit taboola ads?
This question is called "fizzbuzz". The key to solving it is an operator known as the [modulo operator](http://stackoverflow.com/questions/16505559/how-can-i-use-modulo-operator-in-javascript) in most languages, which divides two numbers, and returns the remainder.
I have edited the blog by taking your feedback hope you people like it
Exactly what i wanted to say !
A giant readme and no code to explain an extremely complex solution to a problem that never existed? Great.
Try this (sorry, I didn't test it): var odd = 0; var four = 0; for(var i=1;i&lt;16;i++) { if (i%4) { if (i%2) { odd++; console.log(i + '!'); } else { console.log(i); } } else { four++; console.log('Four times ' + (i/4)); } } console.log('Odd numbers:', odd); console.log('Factor 4:', four);
&gt; How do they propose you do things like ui-router without them? Is there any architectural reason you can't use a factory for this, *aside from* "Angular doesn't allow it"? As the author acknowledges, sometimes you get cornered by Angular and need to use providers. But if you're not cornered, there's no need for them.
 var bod = document.body; var odd = 0; var fac4 = 0; for (var i = 1; i &lt; 15; i++) { if (i % 2 !== 0) { bod.innerHTML += i + "!&lt;br/&gt;"; odd++; } else if (i % 2 === 0 &amp;&amp; i % 4 !== 0) { bod.innerHTML += i + "&lt;br/&gt;"; } else { bod.innerHTML += "Four times " +(i/4)+ "&lt;br/&gt;"; fac4++ } } bod.innerHTML += "Odd numbers: " +odd+ "&lt;br/&gt;Factor 4: " + fac4; Let me know your questions!
I think mithril gets along just fine without JSX. I honestly haven't found myself wanting it, mostly because all of my mithril code is basically function calls, with only the lowest-level of components actually using `m`.
I'll reserve judgment until I see code and examples. But I don't know if high memory usage can simply be shrugged off as "It'll get better".
Theres actually a plugin/extension that allows for "msx" (essentially jsx with a few tiny differences specific to Mithril).
Yes I think OP should consider this... the browser has a fair bit of support for offline functionality. I'd prefer to use it than install yet another 50MB copy of "Chrome".
For anyone wondering, this is just a node.js wrapper for Aircrack ng.
I wrote a super trendy article last week showing that RequireJS makes hot-reloading front-end code super super easy; if you want something DIY, the methodology I outlined might be preferable than trying to do something similar with Webpack or Browserify. Enjoy: https://medium.com/@the1mills/hot-reloading-with-react-requirejs-7b2aa6cb06e1 I love RequireJS and believe that you can really push the web to the limits once you know what you are doing with RequireJS. 
Just an observation, a lot of these tips seem to be impressed on you by default when using react.
I don't think this is technicaly feasible.
Doh! I removed the semicolon, but it still does not show up in the form field as intended. here is the line of html that indicates the field &lt;input type="text" name="league" id="league" onload="calculateFees();" readonly="readonly" /&gt; I'm basically trying to take the constants above and multiply the the amount of weeks that the league runs (hence * 16) and put that into the form field. This is to happen after the page has loaded 
My argument is that every stat site in the world, but the one you pointed to, shows IE far behind Chrome in usage all around the world and that's backed up by my link to Wikipedia showing all the stats from a multitude of stat sites. My argument is far better than anything you can or did produce. &gt;doesn't really mean that it's irrelevant. I never said anything about IE not being relevant.
Mainly it's because `throw` begins a statement, so it can't be used where an expression is expected (a.k.a., right after the `return` token); however, the function itself could be moved into the `return` statement, as an IIFE. return (function () { if (typeof window.md5 === 'function') return md5(b()); throw 'error'; })(); However, if the notion of throwing an error were itself encapsulated into a function call, the `return` statement could use a ternary expression (`if` also begins a statement); for example, if there were some utility function like `function err(msg) {throw msg;}` then the following `return` statement would work: return (typeof window.md5 === 'function') ? md5(b()) : err('error');
wait...is light table still a thing? I thought it was long dead.
I don't know anything about wifi encryption and cracking, but how many still use WEP? I thought that was obsolete.
The map I linked to was from Wikipedia, so I don't see how Wikipedia could be a better source than "anything I provided." But what do I know?
why would you require node for something like this?!? Bypassing years of security sandboxing development and minimizing the target audience...
Keep in note that *every* character in the input string is prepended to `.*`(ie. `Hello World` becomes `H.*e.*l.*l.*o.* .*W.*o.*r.*l.*d.*`), which is valid only in RegExp.
Sorry if I wasn't clear in my explanation, but that's exactly what I did to test that it was working.
What about if (...) return md5 (b ()); else throw 'error' ; 
This was a really fascinating read. I've been working on a large Angular app lately that is super messy, it'll be interesting to see what happens if we borrow some of these approaches. I work a lot with React too, I feel like these pointers would make an app very React-y. 
I use vim and I don't even have a .vimrc. Whatever. Edit: yes, I'm a webdev. PHPStorm for projects/PHP, transmit+sublime for html/css, vim for any edits over ssh.
Doesn't vim auto-create a default .vimrc file?
I'm on OS X; maybe that's why.
You're trying to synchronize an enormous range of APIs and core language behavior between two machines running different JS engines and one of them emulating the APIs while the other has to run them for real. I don't think you quite understand the enormity of this task, and all the race conditions and edge cases you'll encounter that'll cause the two state to go out of sync, despite replacing everything that you could think of (like setTimeout, setInternal, Math.random, Date, all the DOM APIs on document etc.). *Herding cats* seems way easier than doing what you plan to do. In terms of feasibility what this commenter said is far more plausible: https://news.ycombinator.com/item?id=10285001 They achieved synchronicity by limiting the surface by over 90% to a narrow *synthetic viewmodel*, which runs fully the server, and synchronizes back to the client. This eliminates a whole host of problems you'd encounter in your proposal where the model is the actual view. A narrow viewmodel is also the same approach React takes in synchronizing app state to DOM (except they do it locally). But even in their model many of the issues remain (no native clients, difficulty with handling UI events, bad server performance, increased bandwidth requirements, offline storage requirements etc.). And I don't think I understand the benefits. It seems like this model is trying to reproduce a desktop app architecture circa the mid-90s, by pretending what's remote is local. Pretending what's remote is local is a guaranteed path to disaster in software architectures.
exactly the same result. you don't need the else tho as you'll never reach it if you return. 
Nice. I've been advocating the use of directives and non-use of events to my colleagues, but have had trouble arguing my case. This article does so very eloquently.
Probably the most basic "must have"s for me are: syntax on set autoindent set cursorline set expandtab set tabstop=2 set shiftwidth=2 set list listchars=tab:»·,trail:·,eol:¬,extends:&gt;,precedes:&lt; colorscheme gruvbox [.vimrc](https://github.com/hannyajin/dotfiles/blob/master/.vimrc)
IMHO jsx is a transition in moving the templating responsibility from html to js. I think we should stop hacking html if we need a programming language's functionalities. On the other hand, I found Mithril's syntax to be pretty elegant when coupled with coffeescript, e.g: https://github.com/Zhouzi/funkollect.io/blob/gh-pages/src/app/views/products-view.coffee#L14
I was in your spot about a year ago, though I'd casually messed around with JS for years prior to that. Initially, I planned on going back to school to get some sort of degree in web design/coding/etc. It was **my experience** when looking through available programs that the **majority** of what was available was offered through for-profit schools... not that there's anything wrong with for-profit schools, I was just looking for a program from a more traditional institution. In addition, the primary research I did showed that most jobs in the field were less interested in formal schooling and more interested in your ability to do what they needed. The handful of jobs I looked at accepted 'related experience' or some kind of portfolio in lieu of a traditional degree. So, I decided to save myself tens of thousands of dollars of additional student loan debt (I already have a bachelor's in an unrelated field) and try to teach myself. It's gone well so far. A lot of people will tell you that [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) is a better learning resource than w3schools. I mostly agree, though I feel that w3 is a faster, more efficient quick-reference tool. In regards to your question about exercises, you might want to check out [codewars](http://www.codewars.com/). And finally, a lot of people will probably recommend David Flanagan's [*JavaScript: The Definitive Guide*](http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596000480). I own the book and prefer it over most others I've seen. The only problem is that it's from 2011 (and notably predates ES6). That said, it's still a valuable tool for learning JS. Well, I hope this helped! Let me know if you have any questions.
The factory function design pattern is more complex than that. You can't call Math.pow or parseInt a factory.
He's criticizing the question because the OP is a lazy moron. From my point of view, he didn't deserve an answer of any kind.
Eventually a good portion of your career in this field will become continuous self-study because the technology is a rapidly moving target. The biggest problem I have observed with institutional education for this field is the opposite though. Its not about the new technology or what's coming around the corner. The problem is that institutional education regularly fails to identify the legacy and foundations on which the current technology is designed and thus completely misses important qualities like intention, theory, and design. For instance, if you are learning JavaScript at the university and never taught why it has prototypes instead of Java like classes or why inheritance is different then the education is largely incomplete. A better example is observing a computer science graduate who thinks they have nailed these technologies and completely butchers HTML.
&gt; I work a lot with React too, I feel like these pointers would make an app very React-y. Agreed. I've recently been toying with angular using ng-redux using only components. Very big difference to the standard angular fair.
On thing to keep in mind is that javascript is interpreted, so long variable names and comments and whitespace and etc have to get sent over the wire, so things get minified (manually and automatically) often. And rarely are things profiled before being "optimized", though things are often "optimized". The result is that it starts to take on the [write-only](https://en.wikipedia.org/wiki/Write-only_language) properties of perl. 
&gt; ... it seems to me that those modules could be learned without actually signing up to an expensive college degree in web design/development. Am i wrong? No. But what I will say about formal higher education, specifically when attending institutions in person at a campus location, is that you get to network. Both instructors as well as other students make great connections and can offer a foot in the door to the industry. While university education is a nice little addition to your resume, especially when starting out without any other kind of experience (and yes, what you _learn_ there is also important), knowing that person who knows that place looking to hire that someone just like you can make the difference between you having a job and you not. In fact, I'm personally fortunate enough to have never looked for a job out of university. People I've known have always come to me with work opportunities that has ultimately led me to where I am now, and its a place I'm happy to be. I don't know what your background is (have you gone to uni for your current line of work?) but going to uni is also an opportunity for getting a more rounded education. I took a search and rescue course which was pretty amazing. And Math certainly goes a long way with respect to coding - especially with gaming. Arts are also good. I had an art class that was about interactive museum installations that required writing programs interacting with custom hardware and interfaces. Fun stuff. Most astronomy professors are hilarious. I'll conclude saying that paying for school is not the only way to network. Certainly online forums are a great resource. But better yet are user groups. They are a great way to meet people in person as well as learn something new (for free). Companies will often send people to these things in search of new employees making them great opportunities for finding work too.
So yesterday there was [Mithril.js](https://www.reddit.com/r/javascript/comments/3mfjk4/mithriljs_by_einar_norðfjörð_during_a_rvkjs_meetup/) and today Rune.js. Now I'm just waiting for Adamantite.js
Why do you have set nocursorline twice
&gt; non-compound name for a function that returns a promise? Likely not. You're effectively returning a type, and in all of the languages I'm aware of, there are no special names for functions that return specific types. It is always "returns int", "returns string", etc. The name would usually be a function of the purpose of the function "int CalculateLongitudeOrdinal()". &gt; functions that accept a callback Those are usually referred to as "functions that accept a function pointer. A promise is a special case of this, so as of right now, there does not appear to be a term that I can find.
I think you just want types. Types document this. Types tell you if something returns a ~~future~~ *promise* or, if it takes a callback, how this callback is supposed to look like. Types are pretty damn sweet.
I'm on a similar path to what you describe. I've been tinkering with code in various languages for 10 years, but recently decided to focus on Javascript since there seems to be so much demand. Have you gotten a job or are you still working on building a portfolio? If so what kind of things are you making? &gt;And finally, a lot of people will probably recommend David Flanagan's JavaScript: The Definitive Guide[3] . I own the book and prefer it over most others I've seen. The only problem is that it's from 2011 (and notably predates ES6). That said, it's still a valuable tool for learning JS. The You Don't Know JS series by Kyle Simpson might be a good investment. [Its also available for free on his Github](https://github.com/getify/You-Dont-Know-JS) Also [Javascript: The Good Parts](http://shop.oreilly.com/product/9780596517748.do) by Douglas Crockford
You have quite the treasure there in that HorodricCube.js !
Its possible... that programmers might be nerds.
Important settings for me are remove trailing spaces on save and faster window resize mappings. Oh yeah and relative line numbers. Important plugins: vim-javascript, vim-jsx, syntastic, ctrlP. Nothing too fancy. Vim by itself is really powerful editor 😁
I've looked at Angular any number of times - I still see any benefit. Why not write your app as reusable amd modules and load them via requirejs? What partuicular problem does angular solve?
I prefer learning at my own pace and time too. But with *so many thousands* of differing opinions on all the programming sites/forums about the correct or most advisable learning pathway, it can quickly get a bit frustrating (and discouraging) if i fail to grasp what others have recommended as a "very easy to learn guide/book/resource". I think there should be a list of books in order of learning difficulty and categorized based on the target learning/experience level, since a book which is invaluable/easy to a professional programmer might be very difficult or "useless" to a hobbyist programmer or student. My reasoning for considering a university course is that the institution usually has a proven/updated and established system of gradually introducing the programming language/s from basic to advanced spanning the duration of the study. Compared to self-study, even with many recommended programming books, it can get a bit overwhelming, which is what i am experiencing. I think i will try to stick to just one book instead of referring to several books on one specific aspect of the programming language.
This looks a lot like an old Mac graphics library that I used to program with as a kid. It was the first "programming" besides BASIC that I ever did, I think I was in 4th grade. We programmed things like little car-like shapes and made them move. Seeing that sparked my interest in development that included graphics and movement, and led me toward becoming a web developer.
I find it just makes the code more readable. It really is the second branch of a conditional.
Thank you for pointing that out, you are correct!
Thank you for reading my article and for your comments. I probably failed in making this clear but the example with the setTimeouts was simply used as an exercise to show what Promise.coroutine is doing under the hood. But I completely understand your concerns with that example. I've really enjoyed reading the mixed reviews of generators. Thank you for your comments.
This looks very good, thanks for the tip!
Idk why the hate sublime is great. I do everything else command line but I'd rather not do that with my editor. 
If that's the only complaint then keeping memory leakage in mind and handling it from the start of an app isn't that difficult. Probably a bit frustrating though. Hell yeah. Totally building something on Electron next. 
stayAWhileAndListen.js for all of lore book needs!
Gonna need a reference on that.
You have some good points but i have no idea if the universities or other institutions that i've already checked are offering web design/development courses which are updated or appropriate for that matter. I'm not willing to risk 3 years of full-time study and a heavy financial investment if i am able to learn on my own, at least if i know that i'm not wasting my time learning the "wrong way" - to illustrate my point, from my own past experience, back in uni, i had to self-study for some subjects which had some pretty awful recommended books and as most students, i toured the library and found some books that seemed to correspond to my module contents. I chose one of those books, did the exercises, checked the answers and all seemed fine. After the exam, it turned out that the content and solutions that i had learned were outdated/irrelevant and i ended up barely passing that module which was a really big disappointment since i had put in a lot of effort and time but somehow without proper guidance i ended up wasting my time and then i had to relearn the proper methods since that module was a requirement for the following semester. That traumatic experience kind of stayed in me since then - self-study can indeed be suicidal if you don't know what book/resource to learn from and the correct pathway to follow. For me, personally, it's the biggest hurdle. I am in no hurry to learn JS since i can put in a few hours every week even if it's just making progress at a slow pace but my biggest concern is knowing the right/correct way to learn it.
A lost of modems come with a pre-set WEP key and some people just never change it.
&gt; http://es6katas.org/ Do you really think learning ES6 is a foundational concept I should cover at this stage?
The Good Parts is not for beginners.
Ah, well maybe look at http://eloquentjavascript.net/ as well. But, yes, ES6 is a necessary step at this point. 
You're right. I completely stopped using w3schools when I found other sources and because of the w3fools site, I haven't seen how w3schools might have evolved into something better. Sorry!
I heard about udacity's courses although lynda.com's videos seem to be more popular. I'm not sure if a certification from udacity would be valid or widely recognized but its Front-End Web Developer Nanodegree looks interesting. It's probably more of a solid step towards self-learning rather than a proper qualification. Thanks for the link. 
Well, some of these problems pretty much only exist in angular. Angular's horrible idea of services, factories, and providers only exists within it and is only a blight to angular developers, for example. Pretty much every other library or framework uses either AMD, commonJS, or has no opinion on how your DI should work, and certainly doesn't impress on you these java-isms. "view only" libraries like knockout, mithril, and react also strongly encourage you to componentize as much as possible, since that's where you get your code reuse. 
Well there's only one log, and you keep resetting the variable so it will log whatever it is last (9)
 set number set tabstop=2 set shiftwidth=2 set softtabstop=2 set expandtab " Whitespace set list set listchars=nbsp:¬,tab:»·,trail:˷ hi SpecialKey guifg=OrangeRed syntax on nnoremap &lt;F8&gt; :tabp&lt;CR&gt; nnoremap &lt;F9&gt; :tabn&lt;CR&gt; nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt; nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt; nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt; nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt; nnoremap &lt;F4&gt; &lt;C-W&gt;- nnoremap &lt;F5&gt; &lt;C-W&gt;+ hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white nnoremap &lt;Leader&gt;c :set cursorline! cursorcolumn!&lt;CR&gt; execute pathogen#infect() filetype plugin indent on let g:solarized_termtrans = 1 set background=light colorscheme solarized let g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#tabline#left_sep = ' ' let g:airline#extensions#tabline#left_alt_sep = '|' let g:airline_theme='powerlineish' let g:airline_theme='dark' let g:NERDTreeShowHidden=1 let g:airline_powerline_fonts=1 nmap &lt;silent&gt; &lt;F3&gt; :NERDTreeToggle&lt;CR&gt; 
the first thing I'd do to diagnose this is to break that compound IF into three nested IFs. I'm not sure what 'if x and y or z' actually means. Or try putting parentheses around different parts of it.
Oh makes sense! Thanks!!
I get it! Thank you!
How do you handle resolves if you use just directives? Especially with nested ui-router states... 
Yeah. Not related to javascript, but this is the convention in some other languages that have both synchronous and asynchronous parts to their APIs. C#, for example, has `Async` affixed to all methods that return asynchronously. 
This is true, but not that helpful. Higher-order functions is a *huge class* of functions and is not helpful in narrowing down call-back based ones.
Node really popularized call-back style functions, so I've often seen them regarded as *node-style functions*. Both promises and callbacks operate on a concept called *continuations*. This is not a name for the function itself, but it is a way to refer to this particular breed of asynchronousity. The style of using them is sometimes called *Continuation-passing style* (CPS).
Awesome. I have no idea what promises are.
ES6 still has a long time until it will be fully adopted. IE8 is still a thing and is not a reality a lot of web developers can avoid. It is only practical to use now through transpilation, which is a bit of a faff for someone just starting out. There's also nothing you need to unlearn when you learn ES5. Things like ES6 classes **are still ES5 prototypes**, so you still have to know about prototypes. You just have cleaner syntax for it.
[My vimrc](https://github.com/bogas04/dot-files/blob/master/.vimrc)
 set nu set tabstop=2 set autoindent Persistent undo is good too " Put plugins and dictionaries in this dir (also on Windows) let vimDir = '$HOME/.vim' let &amp;runtimepath.=','.vimDir " Keep undo history across sessions by storing it in a file if has('persistent_undo') let myUndoDir = expand(vimDir . '/undodir') " Create dirs call system('mkdir ' . vimDir) call system('mkdir ' . myUndoDir) let &amp;undodir = myUndoDir set undofile endif
 set nocompatible set backspace=2 set number set nowrap set hlsearch set autoindent colorscheme peachpuff syntax on " Map ctrl + arrow keys to change size of current frame nmap ^[[1;5C ^W nmap ^[[1;5D ^W&lt; nmap ^[[1;5A ^W+ nmap ^[[1;5B ^W- " Map alt + arrow keys to switch frame in the direction of the key nmap ^[[1;3A ^W^[OA nmap ^[[1;3B ^W^[OB nmap ^[[1;3C ^W^[OC nmap ^[[1;3D ^W^[OD " Map shift + up/down to scroll the buffer semi-rapidly nmap ^[[1;2A 3^Y3^[OA nmap ^[[1;2B 3^E3^[OB 
Author here. Any feedback appreciated!
Well, one good reason to do the studies on university is that it looks really good on your CV (curriculum vitae). And many companies has that as a requisites. If they are good companies are another question.
I would argue that it's more important for beginners to learn ES6 now so that they are ready to use it in production when it comes time. Facebook is already using babel for its JavaScript, and browsers are catching up fast, really fast. 
Hey. Nice lib, but why isn't it on npm?
what @theillustratedlife said. Then again the question is a bit odd and smells a bit like an [xy problem](http://www.perlmonks.org/?node_id=542341)
I'll just say it, I for one could and likely would benefit from some of those resources too. I'm sure many others would as well. Please do post em when you can.
Definitely learn Node. It will bring your knowledge, workflow, and potential salary to the next level. Being able to write up your own mock server or Gruntfile will make you a much more valuable programmer.
As someone stated here: Promises. You've probably started looking at those already. Also: Frameworks. Certain concepts (including promises) are included in frameworks like AngularJS. You will find these concepts yourself as you explore the framework. Angular is also incredibly popular and in-demand right now. [Grunt task-runner](http://gruntjs.com/): This is how front-end web development is managed these days. Learn how to make your own gruntfile task that will compile LESS into CSS and start a web-server with livereload for you. This should only require ~3 tasks and be a good starting point. [LESS](http://lesscss.org/): if you don't know already, LESS is fucking awesome. Don't ever write CSS again ever.
If anyone wants to learn how to write a Babel plugin or a jscodeshift codemod. This is one of the very best tools to do so. I've written a lot of Babel plugins and codemods and I start off by using this to figure out the basic idea.
I'm not sure if this is a known issue or not, but it doesn't seem to support Safari (or maybe Safari doesn't support Rune). I had to run the examples on Chrome. I'm thinking that a good percentage of your intended audience might want this to work on Safari (if possible).
I got a crash course in Grunt recently and I'm actually proficient with CSS concerns and focus on SASS now. The external tools that help application development are definitely very new to me.
To be more specific, I'm running Safari Version 8.0.8 (10600.8.9). Both the examples on the example page and code from the tests folder after checking out the code fail. I get an error like this: [Error] SyntaxError: Cannot declare a parameter named 'text' as it shadows the name of a strict mode function. Edit: It looks like it's not a problem with your code, but with Babel and Safari. See [https://github.com/babel/babel/issues/1121](https://github.com/babel/babel/issues/1121) 
According to the specs this is shortest: function sum(){return 5;}
Or I can just use `addEventListener`.
Sounds good. I haven't touched most of those things.
Are you running Intruder on OS X on a WEP-encrypted network?
Interesting. Might be worth doing that check within the library itself. I'll start looking into that. In the meantime, if you run `/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -s`, it will list out the available networks along with their security protocols :)
It is obsolete but as seiks pointed out, many networks are unfortunately still using WEP encryption because people don't know any better. Let's just keep urging people to switch to WPA2.
You can hyperlink a phrase to make your post smoother to read. [Cycle.js](http://cycle.js.org) Becomes [Cycle.js](http://cycle.js.org)
try looking at the console log
Yep. I've been burned when a critical library (crypto wrapper!) changed their API on a patch release. Now I freeze requirements instead of using the squiggly greater than. And if I can, I freeze the entire dep tree. 
I recently wrote a couple short blog posts on using React and Rx. [Here](http://aricedev.com/building-a-model-layer-with-rxjs/) and [here](http://aricedev.com/react-rx-live-search/). Two questions I have about Yolk: 1. Are streams automatically disposed of when components are dismounted? 2. Is is possible to avoid doing a virtual DOM diff by manually checking if an update is needed in `shouldComponentUpdate`?
Run console.log(arguments) in myFunction() and be surprised that click events are passed to callbacks with the target property giving the element they came from.
Make your validate_form function return false. However, im assuming there'll have to be sort of checking going on, if it returns false it should prevent form submission, return true will allow the form to submit. 
Who has ever thought that updating without testing is a good idea?
 execute pathogen#infect() syntax on filetype plugin indent on set number scrolloff=3 set tabstop=2 shiftwidth=2 expandtab smarttab let g:ctrlp_map = '&lt;c-p&gt;' let g:ctrlp_cmd = 'CtrlP' let g:airline_powerline_fonts = 1 
1. Yes. Using `this.createEventHandler()` inside of a custom component creates a subject which is automatically disposed when the component is unmounted. 2. React-style lifecycle hooks are not necessary given that Yolk supports `onMount` and `onUnmount` event handlers. For example, `shouldComponentUpdate` is the same as calling `.filter` on an observable stream.
I haven't used Cycle enough to make a fair comparison. I'm actually super interested in chatting with Andre Staltz about Cycle so that I can better understand the differences.
Why take dependencies on libraries without a reputation of well-tested code in the first place? Seems like if you're going to make the trade-off of not having to code it yourself, you inherently take some responsibility in your choice of dependency. Using old versions is just bad for security, perf, and compat. Security and perf are obvious. For compat, imagine if your dependencies took this approach and didn't upgrade their dependencies, and have a shared dependency. Let's say that you solve this problem once and choose one to use for your app. Now imagine you need to upgrade one of your dependencies which bumps its dep on that shared indirect dep. Now you have not tested your other dep's behavior against the newer version, and if they're not upgrading often, then neither have they. If that sounded complicated, you'd be right. It's the classic problem that comes with versioning. However, if everyone always uses the latest (and tests against it), then we're all a) using the latest and greatest, and b) all are using a consistent graph of packages (which further solidifies testing). If you don't trust your dep to be always using the latest of their deps and always testing against those deps, then maybe you shouldn't be using them in the first place.
You also start getting incorrect or misleading help from documentation and StackOverflow. Nothing like having a seemingly basic bit of copy-and-pasted code silently fail in an unexpected way, only to realize that feature was added in a release that came out a few years back.
I do still consider myself to be a student--well, I'll always be a student--but what I mean is that I don't consider my skill set to be to a point yet where I'm employable as a web developer. &gt; Did you create your own personal sites to build the portfolio...? Yes, I am currently working on building a personal site that serves as a portfolio (and a place to show off my work!!!) &gt; ...collaborate with other webmasters or do internships? While the idea of collaboration is appealing, I don't know anyone at this time who I would be interested in working with (or who would be interested in working with me). As far as internships go, although not an internship per se, I would recommend taking a few, smaller unpaid web dev/JS projects that you are comfortable with (**but definitely NOT something far above your skill level**). For instance, my first "job" was to create a simple online resource for tenants living in apartments owned by a family friend. Really, the benefits here are many, but specifically: you can use the work in your portfolio (*assuming you get permission to do so*), you get a chance to practice your skills in real-world applications. The only problem with *JS: The Definitive Guide* is that it is a tough read for people who are just getting started with any kind of coding/design. It's very dry. But it's also a great resource. In fact, the book is sitting on my desk in front of me right now!
&gt; Have you gotten a job or are you still working on building a portfolio? If so what kind of things are you making? I have not gotten a job yet, nor have a even tried. I know I'm not ready (read: not qualified) for a "real" job like that yet. Accordingly, I'm still working on putting the portfolio together. What to put in the portfolio is the tough part. For now, since I am still very much learning, I'm going to decide later on which projects of mine are worthy of sharing on a professional level and which are not. For instance, though the game I'm writing may demonstrate how well I grasp JS and how I am able to write complex code, an employer looking for more traditional work may be less than impressed. Look at it this way: when you submit a resume to a job, you tailor the resume to appeal to the needs of the specific employer to whom it's going (or you should, anyway). Likewise, in my unprofessional opinion, your portfolio should be adjusted to reflect the interests of your potential employer. Because I use a more "traditional" web site for a portfolio, I have the ability to send people to certain parts of my portfolio and away from others (though, that doesn't stop them from looking at the rest of it and saying "wow, we don't need a game developer, but at least we know this guy is creative").
Dont waste money on college education for something you want to do as a hobby. Unless you are already making a 6 figure salary and normally throw money away for fun. If it turns out you do want to develop for a career, you will continually be self studying anyways, I would wait until you make that decision before paying money for school.
When I started writing this library, I used Bacon instead of Rx. Switching to Rx made my specs run almost 3x faster. Crazy speed difference.
npm shrinkwrap is a command for a reason. Nothing in production should automatically update unless your app needs an updated dependency to fix a bug and then only that library should be updated. If it ain't broke don't fix it. 
did you try out kefir?
Regarding wanting to keep the pipeline with Gulp for other parts, I'm not sure how useful that is with JS, but with CSS I like to compile Sass then run the CSS through PostCSS plugins(autoprefixer, cssnano, etc), I don't think I'd want Browserify/WebPack/JSPM(?) to handle any part of that. Perhaps all I need is a gulp plugin that would convert modules into UMD and then just concatenate like usual if that'd work? Might be missing something though.
... the uninformed?
One JS library born each day. 
Looks like a nice little library. I'll check it out.
&gt; What about libs that aren't available via NPM/Bower? With JSPM, you can install straight from github: `jspm i github:lodash/lodash` &gt; I plan to serve assets via SPDY protocol with NGINX. Then you SHOULD use JSPM. There is no point in using SPDY/HTTP2 with other package managers. &gt; Do you still use CDNs as well? Yes.
I normally only use commonjs, but AMD should be easy. The gulpfile already uses browserify and babel, so it's just a few lines of more code. Just haven't had time yet.
I'm not too familiar with JSPM, I think what you're talking about might have been mentioned in a video about Aurelia that I saw a while ago. This is using SystemJS and I guess JSPM to deliver the JS assets, how is this different from just pointing NGINX to my bundled JS files from these tools to serve my assets? I wasn't aware that HTTP2 is better supported, last I heard SPDY was the better option for the time being. Are there any other advantages/disadvantages with JSPM over Browserify and WebPack? I don't view these as package managers, to me that is what NPM/Bower do, I'm aware that JSPM provides that as well though it wasn't the functionality that I'm interested in here :) Still would be good to hear more about JSPM from someone who's been using it, it'd take quite a bit of time for me to personally try all these out properly.
I'm not seeking a package manager, I like to use NPM for that. I'm aware that JSPM is meant to be a really nice and easy to use solution that handles quite a bit with minimal work, but I like to have the control that I have with Gulp. I'm mostly looking for a good workflow/tool to allow me to code JS modules that I can use on the frontend where I'm just interested in the module bundling feature, I still want to use the rest of my Gulp tasks and not have the new workflow/tool conflict with that or any of my other preferences like NPM.
"Now, like many good things, there is a small catch." It is actually a huge catch, micro-controllers can do far more amazing things when programmed natively (and not tethered to a computer). Think of them as computers in their own right, but you have to speak their language to get the most out of them. It is often a good excuse to learn some C and possibly asm. 
I think npm in a way is part of the problem, with built in support to the code orgy that is github (don't even need to cut and paste from stackexchange anymore), especially outside a browser, where you can eval a disk reformat from a random string over the web.
You should probably also run systems, integration, and some manual tests before putting anything into production.
Pin versions but get PRs for version upgrades. http://greenkeeper.io/
check the other thread on Jspm its about this post http://blog.jhades.org/introduction-to-es6-modularity-the-jspm-package-manager-and-the-systemjs-loader/, i think thats what you are looking for. Its really easy to use and the module loader it comes with (SystemJs) is 10k. You can install transparently all sorts of modules from different sources (github, npm)
Thanks for that I've just quickly skimmed through it, will read it in full tomorrow(1.30am here). From what I glimpsed, it'll bundle modules into a single js file for me, but it also includes SystemJS(10k minified?), is there a reason it can't bundle to working JS without that like the others?(or perhaps it can?) I'll definitely look into giving it a try due to responses I'm getting here :)
I haven't needed gulp, bower or AMD in a long time. Usually my demos are as simple as this, and make liberal use of npm modules: https://github.com/mattdesl/spins/blob/gh-pages/package.json#L38 A more complex webpack/browserify app might involve bundle splitting, hot reload, and other transforms. I would just start with the basics. https://github.com/Jam3/jam3-lesson-module-basics
Haven't had coffee yet, read this as IE6 and Beyond and was like "What is wrong with this sub..."
the thing is self executing bundle is the most practical mode, because we don't have to even think that there is a module loader in the first place. We just use import or require libs in the code and we're good to go. you can include the module loader yourself in a separate tag, but there is no need. The key thing here is that Jspm knows about the module loader and bundling, so it can just transparently setup a complete bundle ready to use. It can bundle almost anything transparently from different sources, github or npm for example. it detects the format: Amd, commonsJs etc. It interacts well with grunt, gulp, etc, it supports ES6 transpilers
Budo handles the BrowserSync and dev step: live reload, CSS injection, watchify incremental bundling, DOM error reporting, etc. You would need an npm script, gulp/grunt or simple node task to run the CSS pre-processing. The common SASS approach during dev is to write to a file. Another approach is to pre-process on the fly as its requested (no writing / reading to disk). See here: https://github.com/mattdesl/budo-less/blob/master/test/api-example.js As for linting; I prefer IDE linters and auto-formatters. But you can easily integrate a lint step with budo or your favourite dev server. I think you'd be surprised how far small tools and npm scripts can get you. :) But you might prefer webpack if you need all the bells and whistles. 
The technologies were created in certain ways for certain reasons. Violating the technologies out of ignorance produces unforeseen consequences. The most unfortunate problem, though, is that many developers will choose to blame the technologies for those costly problems that emerge down the line instead of accepting blame and seeking resolution. Either way the result is unnecessary expense that is extremely expensive.
"unique to that block scope." 'a simple recursive search for "}" then found the "last index of" from there to find the "{".' Also, no curlies here: foo =&gt; foo.bar()
Suggestions is a broad and deep topic with many approaches. The way I would do it would be to create a database with movies and their associated genre and tags, then create an n-dimensional preference vector for the user based on what they've seen in the past, then suggest movies that have a similar vector direction (normalised of course). You'd likely want to weight the features differently (year, genre, tags etc) but that can be adjusted to get a better fit as you go. 
Not exposing those hooks as I didn't feel they were necessary, but I'm open to suggestions. You'd want an unmount hook to clean up any subscriptions created by non-eventhandlers.
For-in gives you the key, not the item. Also, for-in is for objects, not arrays. For-of does what you want, but it's an ES6 feature. So, you might want to use a regular for-loop instead.
I saw this old post, and was just wondering have any of your opinions changed regarding Tape? 
I saw this old post. Have you tried Tape yet? Any further thoughts?
And the fact that npm heavily relies on semver but most of the ecosystem completely disregards proper semver because of fear of number increments. 
http://i.imgur.com/vESj1.gif
This comment makes no sense at all.
can I send you a node program? maybe that will help clarify it...
First of all saying npm is part of the problem for your lack of care about what you're installing is asinine. 
Hey guys! Matreshka.js is a framework which is based on accessors (Object.defineProperty) and includes two-way data binding, powerful event engine, automatic rendering etc. All logic goes to .js files, so you don't need to use HTML as programming language. It was presented for Russian-speaking devs till now. var object = {a: {b: {c: {d: 1}}}}; MK.on(object, 'a.b.c@change:d', function(evt) { alert('"d" is ' + evt.value); }); object.a.b.c.d = 2; // "d" is 2 I'm going to present few articles about the framework in few weeks or so: short tutorial, reasons to try, events explanation etc. They are ready but need to be translated. Github: https://github.com/finom/matreshka
theres a ton of crap in github, it isn't like there is some review process by people on a payroll who are accountable on that end of it. there are probably millions of posts here about "npm install mememe/lookwhaticando". &lt;- github default npm syntax. Maybe you personally know better than to blindly trust 3rd parties, all the time, but I don't think everyone does, and that is kinda why this post is here. There is a lot of naivete. 
If you are using underscore of lodash you could just do: var users = _.pluck(response.data, 'DisplayName'); main.allUsers.push(users); not that there is anything wrong with doing it with vanilla but I like the readability of this code and I always start a new project by strapping on the toolbelt.
Here is mine.. https://github.com/AvinashKrSharma/runcom-files/blob/master/.vimrc
awesome, more than strings a values efortless
Okay I see what you're talking about now.
That depends on what's riding on the code being correct. One missed or buggy unit test and you're in trouble. Not every application is luckily enough to get to find their bugs in production with no repercussions.
Awesome - thanks! Made the change.
Right... So compared to NPM (I should've mentioned that was where I was coming from), its main advantage is that it's not tied to a central repository like NPM?
What do you have so far?
Apparently Jspm has a plugin for CSS https://github.com/systemjs/plugin-css altough i've never used it. I would just bundle my css via the sass compiler and leave jspm for the javascript for the moment. Jspm is built to be plugable there are hooks foreseen in it. For the backend I would definitely use npm it works fine specially npm 3 that runs well in windows as they have fixed the issue with the long paths. Jspm does also works in node, although I have not seen examples of how to use it yet. They don't mention it much but I think the goal of Jspm is to be the package manager of all Javascript in general. I don't think npm supports circular references, altough that is really a very specific corner case. For the moment I see no reason to switch to SystemJs on the backend, its just simpler to use npm and the built-in CommonJs loader.
already checked it out.
Cool! I'll have to check it out. English speakers are going to massively mispronounce the name of this though. 
Depends on the browser / device / how much Apple hates developers this week. You could probably store more with IndexedDB. Edit: I see the fanboys are out in force. How's that meta viewport resize bug *that was deliberately introduced* in iOS9 working out for you? Or the issues in the aforementioned IndexedDB that are now in *three* versions of the OS?
No, but I also haven't devoted any time to exploring Tape. In either case, Tape looks good, and I don't think it matters too much which framework you choose - the fact that you have tests is what matters.
Pronunciation is OK :) I know few Americans and everybody pronounces it correctly.
I can use something that takes care of browser compatibility of many more things than just transitionend event.
WebRTC should put you in the right spot. This should get you started. https://lostechies.com/derickbailey/2014/03/13/build-a-local-webcam-with-webrtc-in-less-than-20-lines/ ...and another to handle potential scaling issues http://stackoverflow.com/questions/18318983/webrtc-scalable-live-stream-broadcasting-multicasting
Solution to the second one: http://codepen.io/anon/pen/gaLZEN Probably not the most efficient way to do it. If someone has a way to make it more elegant, please let me know! OP, feel free to ask any and all questions! *Dammit. I misread. I thought you wanted all the primes up to 1000. I simply changed the input in order to get the correct output, but you could rework the program to do it the right way... Let me know if you want help with that! **Double dammit! It seems to be only able to handle values of &lt;= about 4000.
While I try and utilize vanilla JavaScript whenever possible, the majority of my projects utilize [Underscore.js](http://underscorejs.org/) on the client-side (and quite often on the server-side) so these methods are almost a given... yet for the beginning developer, these are important to be aware of and to understand.
Confusing. All the text examples sound like transforming HTML into JSON while all the code examples indicate transforming HTTP into JSON. I tried to download and install it to what this really does, but node-gyp kept breaking the installation so I stopped caring.
Oh no, it was very much on purpose. I agree with the title of your article but the content does not actually relate to the title's premise. The title of this post refers to automatic updating of dependencies. Greenkeeper does not do that. It offers a PR, that is all. Same as any other kind of PR from a user. Your CI tests get run, your workflow is the same. As you say, potential risky and lack of benefit are independent factors. We have to use the word AND when talking about them together because we know that they may be linked, but often are not. There is always risk in changing software. It is always up to the repo maintainer to weigh risk/reward. Greenkeeper does not change this responsibility. If you delegate functionality to a library then you've already taken on the majority of the risk. Sure you shouldn't blindly update dependencies, but by incorrectly linking Greenkeeper and automatic updating it shows me you've misunderstood at least the product and perhaps the subject.
I saw the benchmarks you added and I saw you did one for vue but didn't include it(on the website) ;). Nah I'm just giving you a hard time. Library looks cool, looking forward to examples/tutorials.
&gt; npm shrinkwrap is a command for a reason. Nothing in production should automatically update unless your app needs an updated dependency to fix a bug and then only that library should be updated. If it ain't broke don't fix it. Exactly, and this illustrates the problem with this part: &gt;I'm not talking about updating dependencies for a good reason (covered below); I'm talking about the practice of updating dependencies for the sake of keeping the dependencies updated. In the best possible case, a dependency update does nothing. There's a very big difference between keeping public, open source libraries up to date and keeping a private product in production up to date. Libraries *must* keep up with the dependencies or they will, at some point, have an impossibly complicated upgrade path and perhaps even need a rewrite. A private app in production only needs to change when the business requirements change or when security or stability updates might be considerable. The practice of updating dependencies for the sake of keeping them updated is *not* a concept you should pull from NPM/github to your own projects in production. Lock it down and check up on it once in a while.
Looks like 34 people didn't read the article. Specifically, the paragraph that begins with "*But my tests will catch any dependency errors*, you say.".
Here's a solution for problem 2 EDIT: had to change the condition in the for loop from &lt; to &lt;= or else 4 will erroneously pass the check. function isPrime(p){ for (var i=2; i&lt;=Math.sqrt(p); i++){ if (p%i === 0) return false; } return true; } var n = 2; var k = 0; while (k&lt;1000){ if(isPrime(n)){ console.log(n); k++; } n++; } and an inefficient solution for problem 1 var sorted1 = [5,20,100,101]; var sorted2 = []; for (var i = 0; i&lt; 1000; i++){ sorted2[i] = i; } var unsorted1 = [5,20,100,99]; var unsorted2 = []; for (i = 0; i&lt; 1000; i++){ unsorted2[i] = i; } unsorted2[10] = 50; function findUnsortedElements(element, index, array){ if(index === 0) return false; return element &lt; array[index-1]; } function isSorted(arr){ return !arr.filter(findUnsortedElements).length; } console.log(isSorted(sorted1)); console.log(isSorted(sorted2)); console.log(isSorted(unsorted1)); console.log(isSorted(unsorted2)); 
Yeah, maybe!
wut
Yes, I agree
http://shop.oreilly.com/product/mobile/9780596517748.do Also would love to see what you came up with after your hacking session!
Right, and they add badges which "shame" your project for not having up to date dependencies, and submit PR's which make you think your app would be better with a dependency update. I don't think either of those things is good.
What most people get wrong is the way to write OO code in JavaScript . With ES6 you can use the familiar class syntax which takes care of the inner prototype bindings to simulate traditional OOP. So wrapping your head around the prototype chain and how it works (which can be a bit of a mess) is key to understanding "proper" JavaScript . Closures and (function) scope are also very important. Only with ES6 is JavaScript getting block scope. This is why you sometimes see stuff defined inside of anonymous immediately invoked functions - or returning a function from an immediately invoked anonymous function for an async callback in order to preserve data (such as scope) within a closure. Other than that the basics are simple. Concerning the DOM (browser) and/or NodeJS, while you use JavaScript to work with them, aren't actually part of the language. Perhaps a bit of a mundane distinction but still an important one to understand as a beginner. For some basic idea of how to perhaps structure your games you can take a look at these: [entities fiddle](https://jsfiddle.net/h7epyv1x/4/) [talk: space invaders from scratch](https://vimeo.com/105955605)
[removed]
What kind of code? Why don't you set up a server or whatever stack you need to test with?
* Use a [VM](https://en.wikipedia.org/wiki/Virtual_machine) on your own machine with whatever operating system you need. * Purchase a [VPS](https://en.wikipedia.org/wiki/Virtual_private_server) on some other person's machine with whatever operating system you need that they'll provide. Either of the above you'll have full control over.
I am in the same boat, wondering the same thing...how did it go?
I've been moving towards favoring a functional approach instead of an OO approach. Once I learned to let-go of my C#-backend days and wanting interfaces, and abstract classes, and classes, and inheritance, etc and trying to force those concepts into my JavaScript - my quality of life improved drastically. 
For #2, check out the [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).
I'd also suggest going through Crockford's lecture series on JS, especially "Javascript - the good parts". They are interesting and informative about the peculiarities of the language. 
Been away from the Web world for a while. Could you please elaborate on this deliberately introduced bug? 
I say learn ES6 and use babel to get async/await AND use classes. And use ES6 modules with browserify(babelify?). But you should realize there are multiple viewpoints about what proper JS is. Some people think classes and async await are a bad idea. Some prefer yield and generators. The warning is that those are beliefs either way and so people are often set firmly on one side of the fence or the other. There is more than one proper JS depending on who you ask. You may have to learn multiple versions of 'proper'.
For isPrime(p) you only have to go to sqrt of p.
Ah yes that makes sense! I don't know why that wasn't more obvious to me...
While I have zero experience with what you are describing, I have noticed that the majority of node packages import a library called [chalk](https://www.npmjs.com/package/chalk) for console text coloring. I'm assuming what you want is some sort of ascii art representation. Just brainstorming I would store a block as an array of strings, with each index representing a row. Then you could push the blocks into an array that represents a column. When you render you could just iterate through the top row of each index in the 2nd array, then the next, and so on. When you are done with that one, load another large row of blocks and so on. Just an idea, hopefully that sends you off on the right direction.
Do you guys hit 5MB? That seems like a lot of space for what you'd put in localStorage (and the work to decompress/compress seems a little wasteful if that's not a concern).
I see you're the author of Budo :) nice. I didn't see any mention of [BrowserSync](http://www.browsersync.io/) in there just LiveReload which are similar, but imo BrowserSync is superior if you have multiple devices. I have a gulp task that compiles my Sass when I make changes, quite happy having that write to disk, not sure if BrowserSync is injecting the stream or reading from disk but it works fast whatever it's doing :) I also prefer linting/formatting via IDE in real-time, however it's also neat to have triggered via git hooks when working in a team or with a github project to enforce quality/consistency better for pull requests. I'm aware there are ways to do things with less effort/code, but I really do like the flexibility gulp offers, I'm only asking here about Browserify/WebPack/JSPM for that module bundling feature for frontend. I'd love to know if concatenating UMD wrapped modules would achieve the same goal, as I've seen gulp plugins that can do that.
instead of trying the whole onclick="function", look into event delegation and event listeners. It'll save you so much typing, it'll also make it more dynamic. specifically learn about the event model / event object to learn more. It's a little more advanced, but it's worth the trouble.
I think that model works great in those languages but that doesn't necessarily make it appropriate for JavaScript.
Indeed. NPM and semantic versioning lend themselves to updating without testing. It's part of the node.js culture, and few people stop to think that it might not be a great idea.
I feel like you may not be an entirely unbiased source, but yeah semantic versioning gives people a false sense of security.
Makes me think of how NPM throws a warning if your package.json doesn't have a license, and then it throws an error if you're not using an open source license.
This is awesome. I'm going to send to my peers.
nobody on here mentioned that you won't learn good javascript in a month or even a year. write a shitload of javascript and it becomes second nature just like english
I still don't understand what makes JWT better than tokens in cookies. 
Disclosure: not a novice, but I wouldn't describe my coding as "professional" quality yet. It might depend on your background, but Javascript is still basically a procedural, object-oriented language; just a slightly odd one. Prototypical inheritance is perhaps a more flexible alternative to class-based inheritance, but it doesn't make what one can reasonably and lucidly *do* with inheritance any more flexible, so it ends up being pretty much the same in the end. Inheritance is okay for replication, not so much as a hierarchy. Object extension is preferable. I finally have a project where I have to improve/document someone else's code, and I've been diving into Code Complete lately. IMO, all the advice in that book is far more basic and relevant to writing good code in Javascript than any Javascript-specific source that I've read. Misunderstanding the exact nature of '*this*' is something that might trip you up or cause you to write unnecessarily clunky code, so it's important to get that pinned down. I'm not sure how similar it is to the analogous identity in other languages, but it's important to realize that 'this' is only the "execution context", *not* necessarily the identity of the instance object of the 'class' that you're working with: in the ordinary course of things, the instance object *will be* the execution context of its prototype's methods, but *it doesn't have to be*. You can set the execution context of a function with `.bind()`, `.apply()`, and `.call()` ~~to your heart's content~~ (well, once-per-chain; can't re-bind a bound function), and you will find that a lot of "high-level-language" style Javascript programmers (i.e. [raganwald](http://raganwald.com/)) do so with élan. Suplemental micro-libraries Underscore.js (the original) and rival lodash.js (probably more actively developed) are worth exploring. If you're used to static typing, there are a lot of small errors that might be new to you that can be confounding. 'Good' javascript in the professional sense seems to rely very heavily on unit testing, so working within a test-driven development context from the beginning might be a good idea. I think QUnit, Jasmine, and Mocha are three most popular frameworks right now. Integration testing can be done using Selenium and a framework such as Protractor or WebdriverIO. 
Thirding You Don't Know JS - the title alone is perfect. I want to take the developers out to the parking lot and go bare knuckle who tell me they've written a ton of javascript and they "know it" but can't explain a closure to me. They are dangerous, this series will make you not dangerous.
I personally think that the MDN articles are a very good starting point for someone wanting to know more about the many aspects of JS: https://developer.mozilla.org/en-US/docs/Web/JavaScript
I didn't know one was supposed to be more secure than the other. RemindMe! 1 day
Messaging you on [**2015-09-30 04:34:51 UTC**](http://www.wolframalpha.com/input/?i=2015-09-30 04:34:51 UTC To Local Time) to remind you of [**this.**](https://www.reddit.com/r/javascript/comments/3mqrma/5_steps_to_add_modern_authentication_to_legacy/cvhrtw2) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/3mqrma/5_steps_to_add_modern_authentication_to_legacy/cvhrtw2]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! cvhrtzp) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
I've got nothing against BrowserSync, but all the gulp/grunt recipes for using browserify + BrowserSync are really bloated and broken (ie: you get served stale bundles). Hence the reason for budo, which is specifically built for faster browserify dev. But yeah, I am biased. :)
You Don't Know JS is a great series, but take Kyle and Eric Elliott with a grain of salt when it comes to the tilting at windmills against javascript classes. They're both a bit hung up on that particular bugbear.
I am not personally a fan of "every project requires a framework" mentality... it's a tradeoff to get up and running faster at the expense of more time maintaining the project (if it's part of an ongoing-support production product)... and someone needs to write the frameworks and the fast/light I am in an unusual position, though, of developing a set of scripts that are required to be lightweight (no frameworks) and use a range of browser features / have clients posing constantly challenging (in a good way) feature requests... so I'd say yes, but you have to get creative in your job selection (I was promoted(laterally shifted?) from QA for doing too much dev work) 
The main advantage of JWT against "regular tokens" in cookies is their interop. As you can see on http://jwt.io/ there're JWT libraries for mostly all languages and frameworks so a JWT that you save in Node.js can be used in .Net. Besides this, if this tokens you mention are just a pointer to some storage (a DB for example), then, for every request, you'd have to go to the DB to do a findUserByToken. If you use a JWT, all the user information is embed and you save yourself from doing a DB call and therefore make all of your requests faster :). What do you think?
I usually take it a step further, the authentication token AND the operation are part of the json. If you think cookies don't flow well, try GET, PUT, POST, DELETE, and HEAD. And using post for everything means I can send large things with little concern. Not a big fan of REST in general, though blobs of json are just fine. I know it is popular, but too restrictive. I see no good reason to add additional http dependencies (aside from "everyone is doing it", and the json blob is a lot easier to test than several different protocols. No, I don't care if there is a helper library out there somewhere. edit: apparently I'm not the only one who questions the rest http protocol dependency, I like it when that happens :) http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming
The main benefit of using any asymmetric priv/pub or symmetric HMAC token over a normal opaque (random generated) token is that you can verify that: * The original sender was the Auth service * The token's contents have not been altered after being created * You can do a verification without having to talk to the Auth service through a "tokeninfo" end point. That last point is the most important if you have a lot of requests to your API resource server. You don't want to have to continuously ask your Auth service per each request if the bearer token is valid since the Auth service is typically a separate service from your API resource services. It gets worse if you have a farm of different resource services and you have to pass the token along to get more data from each resource service, combine the requests and send it back. You don't want each of those services in turn asking that token info end point if the token is valid. You want them to do local verifications. True that you can do a local "cache" of a frequently seen token using the token expiration as a TTL but you would be introducing state at that point. Not a biggie, but still, kind of sucks. JWT is a convenient type of token that has a nice spec around it to where you can decide if you want to use symmetric HMAC with shared secrets or private/public keys. It was originally for "claims" information but people are passing them all around for Bearer tokens these days as well. Google uses both JWT for some claims information and then a pub/priv token that can be sent to their resource servers using OAuth2 and OpenId Connect. 
I was going to downvote you for advocating the use of `class` but you continue with saying to learn other point of view. Have an upvote.
Front end frameworks provide structure that allows teams to work together on larger apps. By dictating a bit more structure, these frameworks provide scaffolding that enables faster development of more complicated systems, while greatly improving maintainability. I'd suggest that what you're missing out on by not exploring common tools and patterns for providing structure in the front end is the opportunity to work with larger teams on more complicated projects. On one hand, you probably want to start learning some general concepts about front end application structure before a project `absolutely demands` it of you, but on the other, if you're still enjoying what you're doing now, I'm sure you can afford to take a breather and focus on building for a while, before taking on more study.
RemindMe! 24
Wow. Terrific video. Thanks for sharing. That helped me understand a lot about how JavaScript works. We need more clips like these. 
This article feels like it's missing some important details here... For starters it doesn't mention you need "https"/TLS. If you don't use that then your token is gone in a man in the middle attack from looking at your cookie. Even their example on github [server](https://github.com/auth0/cookie-jwt-auth/blob/master/server.js) only uses http and doesn't mention that. :-( Second, it probably should not encourage putting the JWT "into" the cookie to be sent back and forth between the server and the API. It would be better to only keep the bearer token where it belongs and that's with the Authorization Header. Then force the web clients to store the token securely client side (if they must) in local storage and pull it out into memory for use to send over. If one must use cookies, there's better options such as expressJS sessions which use a SID in the cookie and keeps the session information on the server rather than using cookies to continuously send the JWT again and again. I find it wincing to see _any_ data other than a session sid sent over the wire these days with a cookie. The article should also mention if using cookies to set the HttpOnly and secure flags so that the cookie can't be hijacked with XSS javascript and also (again) only be used with https. The article also doesn't talk about _where_ to get the JWT and important aspects of the contents of the JWT and how it can be signed with either a shared secret or a pub/priv key. It should have at least talked a little bit about the audience flag's relationship to the [confused deputy](https://en.wikipedia.org/wiki/Confused_deputy_problem) as well as the expiration of the token in relation to the user having to re-login again or revalidate through a rolling token system. --- I understand some of these recent JWT articles are trying to be the, "Hey look at me, I'm Mr. Security Meeseeks" but they're missing a lot of links and other important informational security thoughts that are required to secure sites if the owners decide to use JWT. This might mislead a lot of people into thinking that just _any ole_ JWT token thrown onto their stack is a magic security panacea when it really is not and might be worse than them setting their plain old cookie auth they originally had. 
As /u/zoomzoom83 mentioned, OOP and FP/FRP are definitely not mutually exclusive. Functional programming seems like more of a framework/flow control thing, versus a critical business logic component. I could still use map/filter along with properties of objects in order to functionally achieve the same results as if I approached the flow imperatively. That said, I am actually highly interested in using functional programming, along with generators in Koa, to handle program flow between node microservices. What's the main idea? You take the input to a route handler and run it through a series of functions (which query the biz logic) in order to gin up a response? Do you use RxJS (as opposed to Bacon.js, and whatever else is out there)? A lot of the reactive JavaScript tutorials are centered around handling browser events. 
Another specific question. I work in very small teams (3 or less). We are a small company. Usually UI guy, and me and may be another dev. And we have 2-3 teams and we keep switching people around. But are there any features which is impossible to build using Jquery + Django/Flask vs a React/Flux/Node or AngularJS/Node vs Bckbone/Node etc? 
https://mobile.twitter.com/RWD/statuses/648582449455308800
[**@RWD**](https://twitter.com/RWD/) &gt; [2015-09-28 19:38 UTC](https://twitter.com/RWD/status/648582449455308800) &gt; Well. Looks like that viewport behavior isn’t a bug, but a deliberate change made in iOS9. https://twitter.com/awfulben/status/646382994496729088 &gt; &gt; (via @viljamis) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
I almost responded with a very dismissive comment just because the pitch sounds unreasonable: the simplest and fastest way to do static websites obviously does not involve in JavaScript framework. But after exploring a bit, I see that the main selling point here is that the other pages are pre-downloaded so that navigating to them doesn't involve a trip to the server. This makes navigating to another page instantaneous, and it's great, and the demos showcase it well. I wouldn't phrase it as "avoiding a reload" though, because when I read that I assume you mean avoiding reloading the entire page, not avoiding fetching assets from the server. I do have a concern, though, that you don't seem to have a way to segment bundles. ie, both demos load every page of the wesbite during the initial load. It's a fine scheme for websites with only a few pages, but clearly not scalable. Is there a plan for dealing with this?
not impossible to build - your tools are turing complete. the shortcomings of your stack are in maintainability and composability in the front end, and possibly resource efficiency in the backend (depending what you're building) If you want to keep working in web dev, you're advised to keep learning. But there's nothing wrong with taking a break from time to time for consolidation.
I'll be honest, while I don't necessarily see any issues with javascript classes, I can see why they might push people away from them. Javascript gets a bunch of people trying to shoehorn it into something it isn't, and I think this leads to much of the shitty javascript you see all over the place. I see this happen a lot when people try to program just like they would in whatever OO language they're coming from. Also keep in mind that we're talking about books on learning javascript. Maybe once people have a better understanding of what kind of beast they're dealing with, it can be easier to utilize classes without abusing all that js has to offer.
I try to be as generic as possible: everything is functions operating on data, minimal access control, if any, unless I am publishing an api. Even then, I'm more likely to use a construction function train or a factory function that takes a configuration object over traditional OO design. If I need convienence access patterns, I just use transformation functions. I recently changed to that last startegy because of a great quote I heard recently: "if you can compute it, it isn't data." So I keep a minimal state and transform copies as needed.
Images are already compressed. You might actually make them larger by compressing them again with this other compressor. Perhaps load your assets into app cache and indexeddb instead. They have a much larger, possibly "unlimited" size, and you don't even have to encode stuff that goes in app cache.
[removed]
Right, thanks for the explanations!
The biggest practical issue with JS classes right now is that there are no private variables. If you extend a class then it is possible for your private variables to conflict with those in the parent class. Symbols might be able to supply a reasonable solution to this problem in the future. Here's hoping. 
And even people that '*know good English*' probably don't use *proper* English all the time
This is, like all other questions regarding JS, a tricky one. JS is a bit like Frankenstein's monster, but composed of programming ideoms. At least it is often portrayed as such. This has led to a couple of camps in the JS-world: * The we want OO camp * The JS should be functional camp * The compile to JS camp * The JS is good as it is camp * The I am a designer and what is this camp * And heaven forbid, the JS is Scheme camp. And many many more. So what good JS is will differ greatly with who you ask.
 var statement = { agree: true } if (statement.agree === true) { return "I agree"; } else { var abuseResponse = Math.floor(Math.random() * 100); if (abuseResponse &gt; 90) { return "wanker"; } return false; }
You don't know js is the best js book I have ever read
use `let` you `wanker`
&gt;I'm assuming the two can work together(probably a webpack gulp plugin, haven't looked). You're exactly right. &gt; If I just have webpack handling my JS(or specifically this bundle step), that should be perfectly doable right? Correct. &gt; If I handle html/css via gulp am I missing out on anything that webpack could offer, or can I pass those assets to webpack once I'm done with them during my build? You could if you would like, though I don't know if there would be a reason to. &gt; I've heard about the hot loading feature, I'm using BrowserSync which hot loads html/css updates built by a gulp watch task, am I going to get any benefit here besides the JS hot loading? webpack's dev server will load anything you tell it to 'test' (aka watch), including html and css if you would like. The hot loading (change without refresh) comes from webpack loaders that can do that (react-hot-loader for example). Not sure if there are hot loaders for html and css off the top of my head. &gt; I'd like to continue using BrowserSync and others, so I'm concerned about webpack and the like(which seem to overlap a bit with gulps features/usage) causing conflicts with my current workflow. the webpack dev server is completely seperate from webpack itself. I suggest using browsersync to keep hot loading if that's what you're doing and getting the output from webpack's gulp plugin. &gt; (which seem to overlap a bit with gulps features/usage) Webpack isn't a replacement for gulp, it's a replacement for browserify, which in turn was what a lot of people used gulp for. Webpack + gulp works fine, we use it at production in my company. &gt; What were the learning curves like for you? Is there any reason I might want to stick with Browserify over WebPack or would you say WebPack is the better choice these days? Overall i'm happy I switched. I found webpack to be much simpler to set up then gulp + browserify + gulp watch + some sass compiler + whatever else I had going on. Though, I recommend trying it out on a new project, rather than shifting an existing project over. 
https://www.youtube.com/watch?v=xdkLZNyEMVU You're welcome.
The teacher knows me quite well and uses me as a metric for when students probably won't understand something, and for that reason she has encouraged me to have fun with it, it's not like making a funny page is being rude towards her in any way shape or form, I'm not hiding buttons on a form from her so it's difficult for her to grade, aside from that she even stated she thought it was funny how I have done a lot of my assignments and have even applauded me for going above and beyond. All that to say, I know what I'm doing dude.
Thanks for all that :) I've been reading a bit more about each today and am pretty sure I want to go with Webpack. I've also read that I should avoid the Gulp plugin and just use Webpack directly from Gulp. Will need to look into that a bit more, take it that means I wouldn't have a stream to pass on afterwards if I want to pipe the output through some more tasks. The hot loading feature is only meant for development right? Does it require the dev server to be running? Any idea if that'd play well with BrowserSync? What about the chunking/async feature which is similar to require.js and JSPM/SystemJS, does webpack need to be active or will I just serve up a bunch of little static js assets via a loader placed in a script tag? Good for production or just stick to a single bundle file? (I'm aware that I'd benefit from multi-plexing with HTTP/2 and SPDY supported browsers/server, but not the server-push/server-hints). Will probably be able to answer these tomorrow, feel free to save me time though :) Cheers
functional camping checking in!
&gt; help me learn what "good" javascript code should look like Sounds very opinionated, so I would recommend the most opinionated resource out there: http://jslint.com/
Classic donobear
Even when doing complex business logic in my C# days - so much of my code revolved around filtering, iterating, transforming data. Sort of 'fetch a bunch of stuff, filter/transform it - figure out 'what is the next step?', trigger the next process flow' When I was first trying to get my head around FP - I kept thinking "Well, it looks neat - I just don't see how I can apply it to the problems I'm trying to solve daily". Doesn't help that most functional programming examples tend to be very academic, "I can create a curried add function - neat, but why is it useful?", and hard to see how you can immediately apply it to business problems. Now that I'm more used to it (still lots of room for improvement), I can see how it can apply to lots of the things I used to be doing, even in my C# days when working on complex business process/workflow/etc. F# also makes a lot more sense now, compared to when I first looked at it and was 'how the hell do you do anything if everything is immutable by default?', but now I see the power in immutability. 
This is really nice! I've searched for something like this for a couple of days. Thank you!
Oh, yeah? What if I want to reassign it later, you `undefined`?
Don't reassign it later. If you HAVE to, then use your favorite let. 
I don't like it. The syntax is not nice, the graph is a benchmark of what exactly? Show us the code! And it contains it's own utility library Balalaika? Whopty fucking doo. Wouldn't it be easier to just use jQuery/lodash?
Seconded. That book taught me so much about the nuances of JS. 
I would love to understand the "why" of some of these best practises. It's no good saying &gt;"Don’t even put a &lt;div&gt; in a SmartComponent. It should only ever be composing DumbComponents for you." or &gt;"When a DumbComponent has an interaction from a user, it shouldn’t handle any logic itself — it should blindly call a function which is passed to it by a SmartContainer and let it do the work." without saying why this is the case.
good to read http://ramdajs.com/0.17/index.html
That's what I heard people saying, so that's why I wrote it!
Reminds on my fav Hello World: https://gist.github.com/TheBenji/35285377e4815465ee10
Hello! By "sorting" you mean arrange the list of quantities in ascending or descending order? Here's some reference for that: http://www.w3schools.com/jsref/jsref_sort.asp Kind of complicated, so feel free to ask questions! And just a tip, use CodePen or JSFiddle or Pastebin or JS Bin or any of those resources out there to share your code. People are likely wary of downloading things from strangers on the net, or at least they should be.
Fortunately npm shrinkwrap makes this easier, but in my opinion this should be the default behavior like in Composer, and an explicit update command should be needed to get the latest versions.
Yeah, by sorting, I mean just having the grades that are inputted from highest mark to lowest. And I'll keep that in mind for next time!
I am not saying it is limited to. I am just trying to understand why it is relevant? I was not talking of vanilla JS or ES6 which I understand makes sense. What is that one/or more jobs which is impossible to execute with a plain old framework like Django with jquery doing DOM manipulation. If I need to write your code, I probably do it in Python with one of the third-party Libraries. Why should I even use JS?
Exactly. The idea that people are mindlessly using Greenkeeper to update their deps is just false. If the author's point is that you need to test before you release updates then Greenkeeper's existence is orthogonal to that point.
So, (edit)the authors(/edit) point is to blame the tools and not the repo maintainer for being thoughtless? IMO this is a lazy argument that attempts to dilute the responsibilities of the software author to be thoughtful. Should we also not have package managers because they make updating deps easier. No. 
That's not my argument, that's the author's argument. By the way, the author basically does argue against using package managers: &gt; Unfortunately my desired solution for adding dependencies - fork a library, rip out the parts you aren't using, and copy the rest directly into your source tree - isn't too popular. But I think it would help a lot with enforcing the idea that you own your dependencies and the code changes inside. Don't assume that I share the author's view.
I made an edit because the previous code thought 4 was a prime.
Can you give me an ELI5 on that? I see that it works, but I don't get why it works...
Yeah! I did that... and it works, but... I don't get why it works. Can you give an ELI5? And... it seems outputting works, but you can't assign the sorts variable names?
Fair point. Edited my original reply.
Thank you for the write up, it is great! I wish you would add a section on reducers and state tree design and the reasoning behind it . That is what I have been struggling with the most. Concrete, I still don't get why to use normalizr or when to flatten the data structure of the state tree into state slices. My state is quite deeply nested and when I update its performance has gotten really bad. I am not using any immutable data structures, maybe that would solve the problem. Also a section on how to profile a react/redux app would be great. So that performance bottlenecks can get identified. I really liked your advice on curry handler functions I already changed some of my code. 
the problem is that, i don't know how to do I use google drive for upload files with css, etc... but i don't know how to do with the player, which files i need upload and the rest (i'm very new with this)
You aren't the https://github.com/wbuchwalter/ng2-redux guy, are you? ;) It's not, but it is most commonly used with React, and the guy who wrote it, wrote it to work with React and it has all the hotloader stuff written for React too... So you are technically correct (the best kind of correct!) but in reality I think you'll find 99% of uses of it are with it. And I wanted to make the headline a bit more guided for people new to it!
100% agreed. 
Stay tuned for part deux!
&gt; My state is quite deeply nested and when I update its performance has gotten really bad. I am not using any immutable data structures, maybe that would solve the problem. It might. Immutable (the library) is good for updating deeply nested state because it preserves the stuff that didn't change. (But deeply nested state should be avoided.) It could be that your React components don't have `shouldComponentUpdate` implemented. Proper use of Redux entails that your objects should be effectively immutable, which means that they will work with `shouldComponentUpdate` using reference equality. Anyway, using Immutable should be a last resort. Using immutable collections libraries in JS is kind of painful since they aren't supported natively. No destructuring and `console.log` introspection (by default). It means your components become coupled to Immutable.
Thanks!
Glad I'm helping! I have a bit in the left overs from writing this about Individual stores vs Collection stores. I think a bit of the problem is that our stores either use maps or use lists, when sometimes you want one and sometimes you want the other. Backbone handles this nicely - gives you (what I assume is) O(1) access to specific keys and also the ability to iterate through them in order. This implies better datastructures - looking at the doco I can see Immutable's maps are KeyedIterable, so maybe that means they support that. On the other hand, Going back to /u/SomeRandomBuddy's question before, I try to keep everything normalised from my Rest requests down, so that all the data I have is always simple and it seems to avoid most of these complexities. I'll get into this stuff in my second installment, that it looks like will be worth writing! 
Yes, you can set an [expiration](https://tools.ietf.org/html/rfc7519#section-4.1.4) timestamp on the token. You typically also set an ID on the token as well so that two tokens are not considered the same even though they hold identical user info (claims). Yes, you could refresh the expiration on each interaction and send a new token down from each response for the client to re-cache continuously. Each time you do that you would be creating a _new_ token and you could end up generating a lot of tokens per rapid requests as you keep sending new ones down. Not a big problem as you could keep each token's expiration date set at say 15 minutes and they would be fast expiring tokens. You would get a logged out user within 15 minutes in that use case if the user didn't have activity. You could also use only one token and set the expiration date for a full 24 hours and then the user is able to sign in for a full day but is required to re-sign each day. You could also have the token expire for 100 years and let the expectation be that the client application is to keep and retain that one token basically forever until they decide to logout in which case you would then revoke the token. There is no right/wrong answer with the expiration dates. It just depends on your use cases. Are you a bank that wants to try to actively log users out and destroy sessions as quickly as possible and make the users re-login in, or are you a goofy kids website where the assets you're protecting are just saved games? Users are considered "logged in" as long as they possess a token which is not considered "revoked". A token can be considered "revoked" in a stateless server-side system only when the expiration date is done. Using a 'bit' of state on the auth service, a token is "revoked" either when the token's expiration is up, or the ID of the token does _not_ match a lookup of 'valid and assigned' token ID"s somewhere within the system. Although everyone is going on mindless stateless mantras, most STS (Secure Token Systems) based on workflows using access tokens flavors such as JWT's (OAuth2, OpenID Connect, etc...) will store valid and active token ID's within a data store and expose a "tokenInfo" endpoint to where you can validate that the tokens are considered 'active' and not revoked by users. I think it would be odd to see an auth server _not_ do that. Let me know if you have other questions. 
The easiest way is to probably check out a boilerplate that does work and start from there. Try [this](https://github.com/erikras/react-redux-universal-hot-example) - Erik is pretty on top of things!
Not too chatty :) But yeah - using routes to only get the data you needs reduces a lot of requests
The hotloader module was also written by Dan, who wrote redux. He wrote redux so that the reducers could be stateless, so that they could be hotloaded also. The dev tools are not need to hotload. To be honest, most of the time they get in my way. I just have actions log to the console and it's enough for me. So, ignore the dev tools, get it to work without it and put them in if you really want to. All the hotloader stuff is as fiddly as all buggery unfortunately. I had a problem when I upgraded to the new version and found that express(compress()) was in the wrong place - but the only way i figured it out was by using the boilerplate and migrating my code over to it line by line. Super painful, but not sure of another way!
Don't stroke your ego too much, you have yet to learn how little you really know. I have no doubts you are doing well in your class, but the more you learn the more you see how broad and expansive this field is.
&gt; Although everyone is going on mindless stateless mantras, most STS (Secure Token Systems) based on workflows using access tokens flavors such as JWT's (OAuth2, OpenID Connect, etc...) will store valid and active token ID's within a data store Right, so at this point, the only difference with cookies is that it's not a cookie and you do away with all the CORS issues etc.... You could do cookies with a backend service, in which case your apps servers are stateless, but not your auth service / auth data store. Using an auth store/service is that it allows you to provide a true logout to your users. Or are there more?
I also work on small teams of 2-5 people. I often do most of the front-end work and due to factors beyond my control some of the JS libraries today are not stable enough for our usage. I mainly use jQuery and Handlebars for templating, my general approach is to divide pages into modules and use events to communicate between them. I like being able to push some logic away from the surface of the back end, ASP.NET MVC is more just a glue to the other layers of the application that handles cross-cutting concerns. I really want to look into some newer Javascript frameworks because getting more involved with JS has been a very positive experience. Even if you stick with jQuery, if you get deep into the language itself there is a lot of potential waiting to be unlocked.
Tracking the ID's of the authenticated, authorized, and active tokens in the Auth Service piece can be done either through just an in-memory storage or through a persistence with a TTL flag set to when the token is suppose to expire. Sometimes people use in-memory because if the server reboots, who cares. Everyone is just logged out and needs to log back in. That is...Unless you have service accounts or refresh tokens which I won't talk about in this thread. You are technically tracking a "type" of session state in the Auth Service at that moment. You are tracking which token ID's map to being "active" or "non-revoked". All other tokens that do not exist in the store is considered not valid and not "logged in". Usually Auth Services (such as google's) will provide REST end-points to check the information of a token to see if it's active and valid and non-expired. They will also provide an end-point to revoke a token (logout the user of the session). --- Some extra info here for fun: Amongst multiple browsers and devices you can keep different tokens in your Auth Service but still tie those tokens to a user's ID as well so you get single sign out when the user decides to log out of all devices. For single sign on with multiple different web URL domains, you usually do a redirect workflow which is a bit more complex but does work. In basic terms, when a user touches foo.com, foo.com redirects to bar.com/login which then checks your session information via its local storage or cookie. If you have signed in, it then redirects back to a pre-registered URL of foo.com/my_redirect_url&amp;code=2342342 and then foo.com sends that code on page load back to bar.com/token and gets a valid token and associates that with that user's session and sends it down. I'm leaving off a lot of other details with the URL's but you can find it all [here](https://tools.ietf.org/html/rfc6749#section-4.1) if you're interested 
Ha no I'm not that person, and I do use Redux with React (an awesome combo), but it is also fantastic with vanilla JS. Thanks for the write up. 
This probably doesn't fit your requirements, but I did one for school years ago that involved an egg cell that followed the mouse and sperm cells that chased after it. Each sperm cell had a name that linked to a name of a horse from an old audio recording I found of a horse race commentary. Whenever that sperm got closer to the egg than another one, you'd hear something like "And Lucky 6's takes the lead!" complete with a position list on the left. Let the mouse sit long enough, and a lucky winner would get inside and be named the victor. Pretty simple, but the class got a kick out of it. Got an A in that class. I'd link the project but it was made in Macromedia (at the time, now Adobe) Director and I don't even know how many browsers even run that plugin anymore, but I'm sure I could get a screen cap if you cared enough to see it. Its not a racing game in the classic sense. The only thing you control is the movement of the egg and there's no way to win or lose. But it was interesting and entertaining, and I don't think anyone expected it. Anyway, maybe that can help with some ideas.
Any particular example(s)? The more you use them, the easier it gets. There's also probably some point you get to where it just clicks and it all makes sense. They're just functions, afterall. Functions are blocks of code that you can reuse and call whenever you need them. A callback is just letting someone else use one of those blocks of code letting them call it when they want to. http://media.tumblr.com/tumblr_l4kisg6Sem1qz53pz.png
i will try Thank U
X-Post referenced from /r/aureliajs by /u/Davismj [Sentry - An Aurelia Authentication Template](https://www.reddit.com/r/aureliajs/comments/3muwh3/sentry_an_aurelia_authentication_template/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
It's pretty hard to emit DOM using smart components if you're using react-redux's connect() to make them. class DumbComponent { render() { return &lt;p&gt;I am a top-level component, but I am still dumb.&lt;/p&gt; } } // I am the smart component. export default connect( state =&gt; state, dispatch =&gt; bindActionCreators({}, dispatch) )(DumbComponent) 
Every time you run some code, you always need some way to communicate with code that isn't your own. In the browser you may need to communicate with the browser DOM. In a native app you may need to communicate with the OS. The simplest way to do that is to call a function that the external code provides and wait for it to return a result. In a native app you might call an OS function that returns how many printers are attached to your computer. In a browser app you might want to find a particular node in the DOM tree. So, you call the function that is provided to you and the function just returns a value that you can store in a variable and use in the next part of your code. Callbacks builds on this by allowing you to tell the external code that once it is done finding the result, instead of just returning it, it should run a function that you provide and put the result in as an argument to that function. So with a callback, not only do you get a return value, you also get the possibility to specify how the return value should be processed afterwards. This may seem useless when thinking about simple imperative code, or in other words code that is just a sequence of steps, "Do this, then do this, then do this." and so on. The problem that often comes up with this approach, is that while your sequence of steps are being run, your application can't do anything else, like for instance updating the UI. So if external calls take a long while to complete, it may seem that your application locks up and becomes unresponsive. One way around that is to use callbacks. Since callbacks are automatically executed once the external code is done doing its thing, you no longer need to wait for the external code to return. Your code can continue doing unrelated tasks or simply exit and yield control back to the browser or operating system. That way your browser can update the UI or do other stuff it needs to do, without being halted by your code just waiting for stuff to happen. This means your app is more responsive and system resources are used more efficiently.
Another one? Documentation really should be standardized. Java, C#, Go, Rust, Dart, Ruby, and so on all have official tools and standardized syntax for this.
For desktop, check out Electron. For mobile, check out React Native
I suppose it's what defines how the function you pass should look signature wise, whether it takes an object as s parameter or a number, etc. I guess the function that takes the callback defines what the callback function should look like? I never can just simply recognize this. 
Javascript is not a "write, run, examine result" type of code. While the context of it is "alive", so to speak, many things can happen. Basic example: having a button with JS code attached to its click. That would mean that after page is loaded, you can continously query for JS execution. Having an animation? A repeating requestAnimFrame is running, or the animation is packed into a setInterval call. Same with callbacks: it just means that whenever the task is finished, it will call the code specified as callback. That is it. It is an event similar to mouse events or other IO events, like images being loaded. (And I am simplifying things here a bit.)
There's lots of descriptions in here that are technically correct but I feel miss the way that I found to understand a callback. Functions take arguments, we all know this. Rather than just accepting standard variables like numbers and strings, functions can accept other functions as arguments. That function you pass in as an argument is usually considered "the callback". Somewhere in the parent function is variable that represents your callback function that calls it. What you're doing is passing functionality (no pun intended) around. You're saying "hey function, I know you are gonna wanna do something I tell you to somewhere inside. Here's a function that will tell you what to do." The parent function is probably going to be set up to pass particular arguments into your callback function. How do you know what arguments it's going to send so you know how to set them up on your callback? Read the documentation. 
When you refresh the page, your static server will look for bundle.js from hard disk. This might be stale (ie: still bundling) or empty (ie: mid-write). Instead of bundling to disk, budo keeps things in memory and doesn't respond with the bundle.js request until it's actually ready (with the latest changes). Anyways, no worries. If you're doing browserify dev you will probably enjoy the speed and dev UX that budo offers over a typical gulp recipe, but you are by no means forced to use it. :) 
I've been using Cordova for mobile app dev lately and I am liking it. Another advantage is that your apps can compile to multiple platforms (iOS, Android, Windows Mobile, etc.)
JSDoc is pretty standard if you ask me...
i was wondering where i can test this code? 
do you (or could you) support incremental saving ? i wrote a [chrome extension for tindering](http://chromeisburning.com) that uses localStorage for saving all non-asset data. updates arrive via ajax. right now i append them and re-serialize, but it would be awesome to be able to store the updates incrementally and then have them periodically combined
If you replace the code between the &lt;script&gt; tags in the OP it should run when the button is clicked (I hope). Not at home right now to test
I feel like people on Reddit tend to just speak words and draw conclusions from nothing. I agree with you that you have to learn you're a noob, and I am. Let me clarify my background though; I have been programming for 5 years, I started writing Win32 with C, moved up to game dev with C++ and SDL then to OpenGL for 3D, I then went on to an internship where I helped ship a crowdfunding platform and then did an iteration of that site for Missouri State University which is where I was taught a great majority of what I know about developing software for real and not just for fun, I've been doing web dev for about 2 years now, and I'm graduating this spring. I am fully aware how much I have to learn, but part of being a programmer is knowing your strengths as well, and I can absolutely assure you I am above the level of "here's what a JavaScript function is". It's a web dev 2 class, I don't think it's stroking my ego to understand I'm well past that point.
FWIW, console.table is a thing, and tables have a naturally grid-like representation
Hehe, this is cute. 
That is one of the better tutorials or videos I have seen on prototypes/closures/inheritance.
You spelled react wrong
Promises have much better error handling. You can catch errors at any point in the promise chain, where in call backs you must handle errors at every point. Also with promises you can actually handle the same request with multiple callbacks which do not have to be declared in series. Ultimately you can get around this with things like the "Async" library but this is a bandaid not a fix. Since the semantics of promises actually somewhat resemble native synchronous javascript semantics they were also a good choice for the upcoming `async/await`spec. If you haven't checked out async/await I recommend you do.
http://codepen.io/ForScale/full/oXbJvo http://codepen.io/ForScale/full/NGqybQ http://codepen.io/ForScale/full/rOWPGK http://codepen.io/ForScale/full/pJMKwL http://codepen.io/ForScale/pen/EjrvgY http://codepen.io/ForScale/full/EjRVKm http://codepen.io/ForScale/full/waMRwO http://codepen.io/ForScale/full/ZbOgKJ http://codepen.io/ForScale/pen/wKGRbq http://codepen.io/ForScale/full/JYGPwr 
I write code. That's the best way.
 while(true) alert('Click "OK" to interact with this Web site!');
Can confirm. Android sucks at js. I always stop loading pages after the text renders because so many of them crash my phone.
Agreed. Having a doc standard in the language spec will/would very likely increase the amount of quality documentation if only because people will have faith that the way they're doing it is "right". It also would be great to have a standardised way to do it so we could write literate .ljs files. 
I guess the article is a little confusing as it specifically states "What tools do you need for a Redux project?"
Oh yeah, it's not multi-threaded, it's single-threaded with context-switches.
here is a bit more on the event loop processing (tics), still figuring. http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/
I think I messed up, my question was if the callback function was calling the function call.
Put the user-select property in a css class for your tabs or their immediate ancestor. https://css-tricks.com/almanac/properties/u/user-select/
Never had this happen to me. Do you know any specific pages that do it?
&gt;Looking at a JavaScript benchmark, the fastest-known Android device today performed worse than an iPhone 5. That puts state-of-the-art Android performance three years behind iPhones. &gt;It almost certainly is not because Chrome/Blink has worse JavaScript performance than Safari/WebKit — desktop benchmarks tend to show Chrome as being faster, if anything. I think the obvious answer is that the ARM chips used even in the highest-end Android phones are years behind Apple’s A-series chips in single-core performance. I don’t think it’s because Android manufacturers are cheaping out, as Atwood implies. I think it’s because Bob Mansfield’s team inside Apple is that far ahead of the rest of the industry. http://daringfireball.net/linked/2015/09/29/atwood-benchmarks
Haha sorry it's taking so long. I'm still learning myself and haven't done much DOM stuff with JS, but also went a bit overkill to try show how to make reusable functions, have given plenty of comments and links to help explain what's going on if you're interested in learning, I'll also provide a trimmed down version without comments that you could just use to pass, just be sure that you can explain it :)
That sounds like a good idea, will give that a try :)
Yeah, i actually mention this situation in [FAQ](http://winterland1989.github.io/Action.js/#FAQ), and give some use cases, for example, i use it in browser currently. And IMO it's not weird at all, in all other FP languages, lisp, haskell...even some transpile one like elm, Cont monad is then standard way to deal with continuation.
What are the alternatives? Firefox and Opera? How does their JS performance compare?
I dont even understand what this is supposed to be doing, what is the significance of the lower bound and upper bound?
Aaargh, why, WHY always javadoc styles?! It's disgusting to see everywhere this: @param a {number} a number @param e {my.event} an event @param whatever {any} whatever There should be a concise one-liner for simple functions that don't reallly need elaboration on `e` that it really "means e", and still describes it's type. Oh, wait, haskell already has it: // add :: number -&gt; number -&gt; number function add(a + b) { ... } For this function a javadoc would cost 4-5 lines and won't really give more useful information. I see the benefits of jsdoc, esdoc, javadoc whatever, I'm just missing a convenient, concise one-liner signature for these.
It is supposed to be the endpoints of the number line
Sounds like the love for the Apple devices is clouding the opinion. Either Discourse wants to get as many good people on board and thus has to support the platform with the biggest market share (Android 82% worldwide as of 8/2015) or it in fact wants to gather an elitist circle. Whining about the performance of some platforms might be okay sometimes but it doesn't help in the long run. It did not help during the dark times of internet explorer being the most used desktop browser, either.
&gt; **nukeador** &gt; &gt; Have you tried with Firefox for Android instead of Chrome? &amp;nbsp; &gt; **codinghorror** &gt; &gt; Try it yourself -- always slower in my testing. &amp;nbsp; https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889/2
I'm developing a multi platform js app, and I was shocked how much slower android really is. The nexus 6 falls miserably behind an iPhone 6, which is sad. And it's not just JS , but canvas as well. On iPhone i can render my canvas at 140-160 fps, which is much much more than enough, but the nexus 6 has a hard time reaching even 30fps.
I like the way you handled the padding... I did it a completely different way, also a bit more lines of code: var lowerBound = prompt("Enter Lower bound:"); var upperBound= prompt("Enter Upper bound:"); var lines = [[],[],[], []]; for(var i=Number(lowerBound); i &lt;= Number(upperBound); i++){ var characters = String(i); switch(characters.length) { case 1: lines[0].push(0); lines[1].push(0); lines[2].push(characters); lines[3].push("|"); break; case 2: lines[0].push(0); lines[1].push(characters[0]); lines[2].push(characters[1]); lines[3].push("|"); break; case 3: lines[0].push(characters[0]); lines[1].push(characters[1]); lines[2].push(characters[2]); lines[3].push("|"); break; } } console.log(lines[0].join("")); console.log(lines[1].join("")); console.log(lines[2].join("")); console.log(lines[3].join("")); Thats one of the things I love about programming and scripting, there are a million ways to do everything, and no matter what stage you are in your learning, there is always a point of view you havent yet looked from!
You are right - I missed that. My comment is incorrect so I have deleted it.
I actually turned JavaScript off on my default Android browser. Makes browsing some news sites almost instantaneous now. I have Firefox which I switch to for any site I desperately need JavaScript. To be honest I'm more disappointed that there isn't a "NoScript" option that selectively lets me allow certain sites to send JavaScript. All those advertising and tracking sites are way too expensive on a mobile CPU budget to tolerate.
&gt; I also think the position being taken with regard to creating native apps is a bit strange. I had the same thought. But it can be hard to change platforms. Switching from ember to react, even just for rendering, isn't a switch in a config file. It sounds like they have a ton of event-driven code that would essentially need a rewrite before something like React Native could help them deliver native apps.
...Javascript?
&gt; Show us the code! Yep, sure. I'll provide examples very soon. &gt; Wouldn't it be easier to just use jQuery/lodash? Balalaika is used as DOM utilite only when jQuery or Zepto isn't used. 
&gt; It almost certainly is not because Chrome/Blink has worse JavaScript performance than Safari/WebKit — desktop benchmarks tend to show Chrome as being faster, if anything. Desktop performance is in large part unrelated: that tells you about the quality of the x86_64 JITs, not the ARM/ARM64 JITs. And it's quite possible there's significantly different quality between them.
I like rainbows. http://codepen.io/arianr/pen/NqdyqE http://codepen.io/arianr/pen/YyGZYg http://codepen.io/arianr/pen/KpayEX 
Isn't ember highly (and only) optimized for iOS devices? I think another blog post talking about the same benchmark was also showing desktop browsers supported by i7 cores having really unimpressive results relatively to the Apple devices.
That's some good points :) I might have to rethink my current approach once I'm more familiar with Webpack. Cheers for the tips.
Moto G here, it isn't consistent or reproducible, but it happens frequently.
No need to write "=== true"
Any updates? If you figured it out, what was the solution? Also, did you see this [thread?](https://www.reddit.com/r/javascript/comments/3grfs5/is_babel_good_enough_for_serious_use_so_that_i/) 
I don't think so, I just skimmed the current sources (2015-09-30) and the library is appending the nodes before the first item in the &lt;head&gt; (with some IE6 compatibility twiddling). Why would you want to have the scripts appended to the body? RequireJS already takes care of asynchronous loading and there is a [`domReady`](http://requirejs.org/docs/download.html#domReady) loader plugin should you need the DOM to be present.
I don't see any reason why you would want require to put them at the bottom of body - on initial page load it makes sense to have scripts at the bottom because of blocking etc. However after page load, there is no reason to do this.
Require.js is AMD: https://en.wikipedia.org/wiki/Asynchronous_module_definition The point of AMD is to load assets upon request in a completely non-blocking manner. While this approach offers clear performance implications, particularly in mitigation of HTTP traffic delay, it comes at cost off substantial code overhead and complexity. Code requested via AMD is interpreted at the point which its request is complete (whenever that is). If you want the code to be interpreted after the DOM is fully loaded then don't request it until that time.
The container changes from position:relative to position:fixed at the right point in scrolling. There's probably an EventListener onscroll that will check the position and trigger all the changes.
http://scrollmagic.io/
I'm having a bitch of a time getting webm/html5 video working on it.
It seems you can use javascript to write application for Windows 10. But I don't know much details.
Incredible 2
Not sure how much bloatware HTC puts on their devices and how much the alter stock android for their "branding" purposes, but I'm guessing that this plays a factor in why your processor is having trouble.
This works beautifully.. But how exactly would I get the vertical bars to show under the numbers. Like yes I could just print another line but I don't know how to print the certain number it would be. Also thanks
Firefox Mobile has an AdBlocker add-on. I use it to save bandwidth but it might make things slower (it does on desktop, from inserting styles and JS into each page).
React Native is really good only if u have a Macbook. Second best option is Nativescript , run on windows, linux &amp; Mac OSX, the only bad : dont have many components. Third option Ionic is the most stable, but if dont have idea how develop in angular u need learn angular. I forgot mention Meteor in new versions can u export Meteor App to Devices.
yeah, I make rainbows when I'm bored at work (: Like your pens too, It's actually fun to see people's collections of js doodles
If this is your thing, the link at the bottom of introduction to physics is also a link to intro to physics, not like it says a link to input tracking.
&gt; one that will not go away in the next few years Glad we can predict the future, out of curiosity why do you believe this is the case? The difference between the iphone's and most android phones is the use of fewer faster cores over more slower cores. With javascript traditionally being single threaded this makes sense, but not anymore as threading javacript applications is dead simple now, while I agree performance on chrome main thread performance can be a bit slower than safari main thread performance chrome excels in truly parallel workloads, seeing over 700% performance increases over the main thread. Now let's talk about Ember. Ember is built ontop of Jquery, a pretty bloated foundation to start with. Ember doesn't include any virtual dom diffing. Ember doesn't bother to thread any operations although abstractions like hamsters.js and others exists to do so. Maybe the problem isn't so much on the platform, but benchmark itself. EDIT:: Just to provide some context to people who don't understand the potential performance benefits using actual threading in Chrome. Here is a screenshot from my Asus ZenFone 2 (2.3ghz Atom, 4gb ram) and running chrome using the performance test located @ http://hamsters.io/performance/ , http://i.imgur.com/bjzuLi5.jpg throwing away the potential for 200%+ performance gains is in my opinion asinine. Safari loses performance with additional threads where as chrome gains major throughput increases. The future is going to be parallel moving forward, single threaded performance in modern devices has almost peaked as we approach the limit of transistor shrinking and mores law. Moving forward we will not be able to rely on single threaded performance continually increasing to move around performance walls, any notion to the contrary is ignoring the laws of physics themselves as we approach single atom size transistors. 
Now you're thinking in portals! (Thanks for pointing that out I'll fix it when I get home)
As the article pointed out this problem is also apparent with Angular and other frameworks. Run some jsperf's if you still need convincing. 
If it runs like shit in the native mobile browser, it's probably going to run like shit in a webview in an app.
You are delusional. At least on this issue. The upvotes you get is unsettling.
Why the downvotes? Atwood is saying the same himself: &gt;The other strategy is to double down on the coattails of Apple, since the company is clearly firing on all cylinders. But as @sam has pointed out, Apple does not play the low cost game, and probably never will. &gt; &gt;This would mean Discourse is positioning itself as more of a "premium" solution (read: devices that run JavaScript at near desktop speeds) than an "everyperson" solution (read: zillions of cheap Android devices with 2012 era specs), given the worldwide share of iOS and Apple. &gt; &gt;Not super happy with that, but **it might be the only viable way forward**.
I had that previously but each promise depends on the previous one. So what was happening (with your code above) was that if I failed to create a new token and hit `onTokenFailed`, the promise chain would continue on to attempt to `createNewSession`, which would then throw an error because it depends on the token having been created. That's why my promises are nested like that, so that if one of them fails I'll end up breaking out of the entire chain.
it's really messy right now but you can try to see where I'm going: http://pastebin.com/FtFYAVGb edit: changed syntax highlighting
No, i don't have access to one. But just as an interesting tidbit, Microsoft (Nokia) Lumia 640, a relatively low budget phone(under 200$ without a contract), running Windows 8.1, IE 11, is faster a lot of times then the nexus 6.
what? their website is dog slow..
&gt; Try those tests on both Chrome and Safari on the same machine You mean on an iOS device?
blinking text on mousemove
Considering Android has a bigger market share, and there's no reason to think this will change, developers will have to adapt to their user base if they wish to deliver a consistent experience. Developers have always, and will always, need to take the lowest common denominator into account. You may get away with targeting the high end when developing niche software, but not with mainstream software such as a forum.
Takes getting used to but is a huge improvement for readability. 
&gt; Ember doesn't include any virtual dom diffing. I don't think this is the case anymore. Ember &gt;= 1.13 uses a new rendering engine called glimmer. If I understand Glimmer correctly, Glimmer uses a virtual DOM, but it uses something more performant than diffing. Glimmer has a direct mapping of nodes with content that can change and does not do diffing. This approach should be faster than virtual DOM diffing. See the explanation here: https://youtu.be/o12-90Dm-Qs?t=51m11s
&gt; Glad we can predict the future, out of curiosity why do you believe this is the case? Even if all of the vendors were to release a phone tomorrow with JS performance on par with the 6S, we would still have to deal with shitty performance for the next three years as we wait for people to switch over.
That's funny: I was watching this thinking, "this looks cool. I wonder where this company is..." and then further into the video, the presenter mentions getting an increase in job applicants as a result of using things like Elm.
&gt; Ember is built ontop of Jquery, a pretty bloated foundation to start with. This means very little in practice. Nearly all JS apps are built using jQuery regardless of framework. Ember uses jQuery only for event handling. &gt; Ember doesn't include any virtual dom diffing. Ember's rendering engine is designed for more than satisfying a buzzword requirement. Glimmer (the new rendering engine) diffs values rendered in a template and specifically avoids diffing static DOM fragments. There are further improvements coming- Regardless re-render performance of the framework (which is where a vdom matters) is pretty competitive. &gt; Ember doesn't bother to thread any operations although abstractions like hamsters.js and others exists to do so. WebWorkers help to unblock the main JS thread, but seem unlikely to make actual rendering or boot time performance any better barring a major refactor to make parts of the codebase concurrent. I think we have easier to pick fruit that makes sense to tackle first. &gt; Maybe the problem isn't so much on the platform, but benchmark itself. Nope, we've seen v8 lose ground in performance vs JSC over the past two years. This is a trend. 
Functions are also objects with properties and methods. Some commonly used methods of an instance of a function object is bind/apply, since these methods will change the context in which the function will run, when eventually called. Depending on your code style, and what you're coding, these functions can be required for some control/data flows. In your example, if you remove the "callback.call" line with "console.log(httpRequest.responseXML)", then yes its functionally equivalent: you'll the XML once it's loaded from the server. "console.log(httpRequest.responseXML).call(httpRequest.responseXML)" will just error out. console.log returns undefined, so no call method.
Did you miss this line? &gt; Ember doesn't bother to thread any operations although abstractions like hamsters.js and others exists to do so. Shitty performance is only something you have to deal with if you don't want to invest the time to thread your web applications where you can using abstractions like mentioned above. The power is in our hands as developers, it's not the problem with the language but lack of time investment from developers to properly parallelize their applications. The tools are widely available, the performance gains you can see are extremely significant especially in chrome. There really is no excuse. 
&gt; WebWorkers help to unblock the main JS thread, but seem unlikely to make actual rendering or boot time performance any better barring a major refactor to make parts of the codebase concurrent. This is wholly inaccurate, refactoring an existing function using hamsters.js for example would take you roughly a minute or two of work. It's so simple it's not even funny anymore, performance is dependent on the workload however when making use of the optional dataType arguments performance is essentially real-time, we're talking about half a ms or less to communicate with a thread and get a response. You've got 4-12 cores in modern smartphones and you might as well make use of them. You can thread any arbitrary function without a major refactor. 
The Ember team and contributors aim for good performance across all platforms. Contrary to your expectation, we probably spend more time trying to fit v8's optimizations than we do thinking about any other JS vm. This is partially since Chrome lags perf-wise, and partially because v8 has the best tooling for performance analysis. There is no special optimization effort for iOS.
I was not aware of the new glimmer engine, I've worked with Ember since beta (alpha?) but it's been a few months since my last project with it.
If functions a, b and c run on a main thread, let us say they take one second each so three seconds total. If function a runs on the main thread, then b on a WebWorker, then c on the main thread again, it would still take three seconds. If you make b and c able to run concurrently, as I suggested we could do at the end of my comment, then you could drop the time to two seconds. However the work being made concurrent needs to be significant enough that the new frame allocations and risk of GC are a worthwhile tradeoff. Additionally, you need to find a part of Ember that is inherently able to run in parallel. This is not trivial. I'm not saying it is valueless, I'm just suggesting there are simpler things we can tackle first.
&gt; If functions a, b and c run on a main thread, let us say they take one second each so three seconds total. We could currently run all 3 concurrently without major refactor, assuming none of these functions rely on the output of one another. &gt; Additionally, you need to find a part of Ember that is inherently able to run in parallel. This is not trivial. Pretty much any loop that performs the same operation on every element can be parallelized rather trivially, and you can also place arbitrary functions on their own threads without them needing to be run in parallel across multiple threads. Meaning you would only need to identify places that are currently asynchronous and refactor the function to make use of the abstraction library. You can also use a thread to preprocess information before you make use of it on the main thread. It's really pretty trivial actually. 
Impressive. I'm going to test ride this in production and see where it falls short and report back. I've been using TweenMax since flash days. It's nice to see something new to challenge it. One thing I noticed or don't know if I missed it, where are the callbacks? How do I detect if Animations have finished or started or are playing? Where are the override animation controls? 
The JS Object and JSON. Basics of the prototype chain. Callbacks. Closures (and scoping). Demystifying common conventions.