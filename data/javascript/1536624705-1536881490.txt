Nice. Everything but Canvas stuff seems to work fine. Unfortunately, I have a lot of time and energy invested in canvas so this really, really sucks. First new Canvas updates in a while (OffscreenCanvas) but it breaks existing implementations. So frustrating. I don't know if I should ignore the problem and hope it gets fixed in the October release, or dig further into my code to see if there is a way to mitigate the problem...
Remember when they said they won't kill Atom? That was a good one!
It doesn’t in the slightest, but it may help people move to simpler stores. You will still need a global store one way or another. It does mean that you will feel less pain in the early stages with GraphQL though.
The challenge in implementation 1 would be detecting what are the legs and where the joints are. Getting the angle between the found lines would be trivial after that. I only have experience using opencv's python library but you should see if you can find a pre-trained detector of this, or something you could bend to be useful. The second implementation would certainly be easier as you'd probably just be looking for change in pixel intensity for a specified area, but Imo it would be less interesting of an implementation 
Ya think?!
Two of these use cases are super inefficient, though. Avoid using `concat` like that. This: const smartestStudents = studentsData.reduce( (result, student) =&gt; { // do your filtering if (student.score &lt;= 80) { return result; } // do your mapping return result.concat(`${student.firstName} ${student.lastName}`); }, [] ); takes O(n^(2)) time, because `concat` copies over the temporary array in every iteration. So instead of trying to be 'smart' by using reduce, just use the 'naive' way (as the author puts it), which takes O(n) time: const smartestStudents = studentsData .filter(student =&gt; student.score &gt; 80) .map(student =&gt; `${student.firstName} ${student.lastName}`)
I'm tired of Chrome messing around with internal things like that to try and improve performance because it always seems to always do the opposite and make things worse. I noticed they try to coincide all these internal changes with a big UI release so they can hide behind it. e.g. Scrolling a page with a gradient background causes severe scrolling perf issues in 69 compared to 68. (white flashes when scrolling moderately fast) In Chrome 64 or so, there was a glitch with box-shadow transitions (commonly used for focus ring implementations) where it left junk pixels behind. It lasted for severeal releases. It's like they test changes on a few internal devices/systems and declare it good when there's thousands of configurations to consider (GPU issues usually). I have a MacBook Pro which is pretty generic/stock and there are always issues.
Jetbrains products' git support is pretty rocking though
It depends. The more complex your application the more you'll want to have a global store to store all the different kind of states you have in your UI. State is made of more than model data from a server such as: * Nouns: model data from a server * Location: the page we're on client side * Status: are we currently fetching data or performing transformations * Session: do we have a JWT. what is the users name * View: what order are our nouns sorted in But in the early stages of your application you may only need the noun data.
It also gets repost about three times a week in all the web dev subreddits 
Apollo was referenced in the latest article I saw! :D 
It's a great solution, but I do think it limits the file size preview to 25 megabytes. Anything more and the preview will not render.
I have no problem with them changing things under the hood. I just wish they wouldn't break them. It seems like a company the size of Google should be able to afford a pretty good QA team.
To be fair if you're *trying* to make something misleading then you can overload the equality operators in some strongly typed languages too (C# comes to mind) and do something similar. It's all the day to day javascript equality special cases that get you :)
Certainly figuring out implementation 1 would be useful in other ways, outside of this specific context. I'll probably spend tomorrow looking through libraries. 
The only required but in my spec are the feed items.
Maybe your hardware acceleration setting got disabled? Try going to ```chrome://settings/?search=hardware%20acceleration```, and checking ```Use hardware acceleration when available```. Restart your browser and see if it gets better
I'm sorry, I did not mean to be rude -- I could tell that you are still learning, and you are doing very good. I do understand what you mean in your article, it's just hard to understand it by context rather than what is written. I'm not very well educated, just a native English speaker; so I don't really know about learning the English language. My sister and 13yo niece have had some success learning Russian, Korean, and etc with the apps on Android (DuoLingo, some others I don't remember). I don't know if there are any for learning English that are nearly as good though, or if those apps offer English as an option. Personally I got most of my ability to write from using chat rooms and by trying to make nerdy tutorials simplified for others. In chats with people always typing like crazy and rarely using punctuation or getting really sloppy and inaccurate, I would try to keep up while properly punctuating with very little misspelling. I still don't really understand a lot of how to properly write though, and often make run-on sentences or just massive paragraphs like this is becoming. I also have a hard time keeping on the subject and explaining it properly without being confusing, as I'm probably doing now. Reading a lot will help learn better, but will require analyzing what you read, what it taught you, and whether it was correct (at least, where is possible to know that or learn it). You can also learn more than just what the articles are about -- the wording, structure, and overall style are also important parts that can be learned from good writers.
Good tip! But that's not it. One of the first places I looked :(
Good luck, since MS owns both VSCode and Github...
Where does it say they’re killing Atom?
☝️this
thanks for the description of the types of things you might store inside of state, is there a resource that talks about this or is this just from your experience? Still sorta new with formally managing state UI state.
Thanks for the description about the types of things you may store in state, that was really helpful. Do you know of any resources that talk about categorizing state in this way? Or is just this from experience. 
Kyle Simpson / Steve Kinney. I believe the main framework I think about came from [https://frontendmasters.com/courses/react-state/](https://frontendmasters.com/courses/react-state/).
Sometimes it’s just done. 
Atom has been doing a good enough of that job on its own. No help needed.
&gt; Luxon takes an OO approach
Why would there be 20 downloads? Are you not allowing the browser to cache your assets? That's actually a big decision, not a small one ;)
wat
Except for privacy, which kind of goes out of the window. It's even considered a security vulnerability by some.
I don't think you understand the sheer scale that chrome runs at. How many hardware combinations do you think would be reasonable to test? A few hundred? A few thousand? Lets assume there's 100 "common" CPUs that they test with, and 100 GPUs that they test with. Already that's 10,000 combinations. What about when you combine hardware with os? Then throw in other software on the machine that could cause issues. Chrome has 2 billion users... 1% of that is 20 million... 1% of 1% is still 200,000. Any QA team is going to be such a hilariously small percentage of users that it's always going to miss a massive amount of stuff. And every single bug is bound to impact at least a few tens of thousands of people, just because of the sheer numbers involved. 
To be frank, if you don't want to spend your time dealing with bugs in chrome, stick to the stable channel. You'll hit a lot less of them, and won't need to worry about this kind of thing as much.
The proprietary-ness isn't really what bothers me with it. I mean, it's licensed under MIT licence, so I really don't know what your concern is. What bothers me is the idea of using a cache (which is typically a performance/implementation detail) and the fact that you're actually just adding boilerplate to get what you could get with using TypeScript with Redux for less boilerplate and a more traditional system (Redux).
If you're a JS dev and you're not using triple equals, then you've got bigger problems. 
Thanks, but 69 has been the stable build since Sept 4th. 69 is the much-touted "new" chrome everyone gets from google.com/chrome/. I'm not really venturing into uncharted wilds here.
I am very excited for websites like this to be progressive web apps.
I just threw up in my mouth a little bit.
&gt; I mean, it's licensed under MIT licence, so I really don't know what your concern is. That the Apollo company realizes that freemium isn't viable and decides to go full-subscription for all future releases? There's a difference between a startup backing an open source tool and the community backing an open source tool.
I get that, but I don't really think I'm alone here. This isn't a problem with some unique hardware/software setup at my end. There is a bug thread at the google product forum about Canvas performance with the new build. They made changes to Canvas to accommodate OffscreenCanvas and busted something. They released buggy code.
At the end of the day, you could fork Atom if you really wanted.
Fair enough, I thought 69 still wasn't fully released. But then your options are to submit a but report, or abandon that use case... Personally I haven't seen any major issues with canvas performance and I maintain 2 apps that use cpu-driven canvas pretty heavily (no offscreen canvas yet though). 
I'm still on 68, but if it's that big of a problem file a bug report. Might be a regression. Especially if you have benchmarks they're usually pretty on top of regressions
Garbage in, garbage out.
A lot of apps with simple interactions (like fetching data and presenting it for sorting and filtering) don't benefit from the constraints that Redux encourages, so a simple data fetching abstraction is all that's necessary. For a certain number of apps, Redux can be replaced, but Redux was the wrong tool for the job in those cases.
SourceTree (Atlassian) is good too. 
I get your point, but if you only have a handful of items in your list, you should be optimizing for clean code. Not saying this is clean though. I think it should be avoided by labeling it “too clever”.
Well you this was making me angry because it took a while to realize it was easier Satire 
Good call, it seems to be "China's AWS". I sent an inquiry asking for similar solutions to GameSparks (nosql/JS cloudscript) 
The only thing confusing about `const` is that people expect immutability on their values. The reference is constant though, it never changes.
We are so used to new things all of the time, we forget sometimes something works well the way it is and doesn't need to be changed, Cheerio is a good example. It works really well (for the uses I've used it for) I don't need constant updates to justify using it. Older usually means more battletested and reliable.
https://github.com/collections/javascript-game-engines I’ve heard good things about Phaser.
It doesn’t, the claim is literally as nonsense as you think it is, you’re not missing anything. These are the kinda things people point to when they laugh at JS developers :(
What do you mean by Nouns? What if I wanted to grab a list of verbs from the server? (Running, Jumping, Pooping etc)
Apollo is made by Meteor which has been sustaining itself via investment and Meteor Galaxy for a while now. Don't think it'll be an issue.
I don't know of many (any) API's that use verbs as anything more than a filter \`host/containers?status=running\`. Wouldn't be very resourceful if we had an endpoint like \`host/running?type=containers\`.
Oh..I thought you were talking about the data itself, not endpoints
Let’s be honest, Atom didn’t need any external help to die.
I would guess spreading the array would have similar if not equivalent performance
This is the most sarcastic article I've read whole year
Sincere appreciation for your detailed advice, which shall be very useful in practice compared to the other conceptual advice recommended by some English learning articles from the search engine, and next I will practice the advice you mentioned. Grateful and nice to meet you.
Rather than retooling RSS to use JSON you might think about addressing some of the issues with "syndicated feeds". I think the biggest reason RSS isn't the hotness that it once was is that content providers weren't getting the same benefits as when people visit the site. There's far fewer ads in RSS and they're easier to skip/ignore because there's no scripting. There's also no cookies involved so users can't be tracked and there's actually little feedback unless the user actually clicks through to the site. Yes, these things are more likely to diminish the user experience, but the providers need an upside.
Hey, this wasn't meant to be offensive, I've just analysed, if the project is or isn't active anymore. In my experience, healthy projects have at least one release a year - bugs happen, performance can be improved, one of many feature requests gets merged, etc.
Plus is easier to read 🙂
This is a really cool project. The API provides many helpers for writing and executing raw SQL. It takes a very different approach from my library [sqorn](https://github.com/lusakasa/sqorn), which also uses tagged templates, but provides a traditional query-building API designed around SQL clauses. MQL's ASSOCIATE function is particularly brilliant. I might end up stealing some of it...
Hello, I am currently working on a project that uses Backbone.js + Marionette frameworks and I am loving it :) But beside it I am also working on a small web app written in Angular (6+).
Hello @IvanGrimes, recently I have met a similar problem: adding examples to a project's home page. And I solved it by creating a tool called [CodeViewer](https://github.com/Terry-Su/CodeViewer), which lets examples displayed directly into [a project's official site](https://drawjs.github.io). But alternatively, you can also just insert an iframe including your CodePen example into your project's home page. Just remembered that you had encountered the same situation, came back. 
[Not really](https://stackoverflow.com/questions/2673367/how-does-json-compare-to-xml-in-terms-of-file-size-and-serialisation-deserialisa)
Phaser. Used it to create my own NES style platformer.
It doesn’t. 
[moment-mini](https://github.com/ksloan/moment-mini) is also a good option, still 50kb but a hell of a lot smaller than moment. Helps when a team is insisting on using what they know.
That's a tool dedicated to that task, unlike all the above products named.
lol I think you missed the point that this article is literally satire on that exact point. 
`reduce` is unfortunate in javascript because of the lack of non-destructive operations in the stdlib. for example, `delete object[key]`. so most people end up mutating the accumulator (or worse, something outside the step) which turns `reduce` into a rather pointer `for` loop. frankly i rarely use it in javascript for that reason. avoiding mutation is often more trouble than it's worth. classic example being how `[...arr]` and `{...obj}` only make a shallow copy, and now you have to inspect the code to see if the author indeed only needed a shallow copy. 
As far as I know, your library 10x faster than knex.js. It is impressive and looks so cool. As you told me, ASSOCIATE function is part of cool. They also express data's relationship using symbol (`&lt;`, `-`, `x`). How do you think about it? Could you understand those symbol's meaning?
This is evidence of the collective unconscious. We are of one mind, and it knows that Jira is a blight on mankind.
Is this where I say "oh, my sweet summer child"?
And what does that mean?
You're not alone, we're getting massive performance problems with our canvas based game. Framerates are almost unusable at the moment. Still trying to understand what might be happening, and if there's anything we can do about it.
That's why the eslint default is 4 spaces? It's common but it's absolutely not a standard. Sounds like you're just inexperienced.
Why would you want the local global state when you have the cached query results? Is this redundant, or is there something I'm missing?
I worked on a Knockout project for about three years up until earlier this year. For many use cases, Knockout is dead simple to use and two-way data binding is a nice pattern when the scalability of a store is overkill. Unfortunately it’s not seen much development lately. 
[https://github.com/Izzimach/react-pixi](https://github.com/Izzimach/react-pixi) seems to be the most popular version. They recommend using it for React v15 and it's up to you which of those two options you choose for React v16. &amp;#x200B; As an alternative, I'd recommend simply creating a canvas with react, capturing a ref to it, and then doing any drawing you want imperatively using the normal Pixi API. This will get you a lot further than trying to do everything declaratively because it's simpler, more efficient, and you'll be able to use actual Pixi tutorial code instead of trying to React-ify everything. A quick google search shows this as a reasonable starting point for this approach: [https://medium.com/@peeyush.pathak18/pixijs-with-react-3cd40738180](https://medium.com/@peeyush.pathak18/pixijs-with-react-3cd40738180)
You can try like this - ```javascript const { PostgreSQL: { SQL } } = require('mql2'); const query_set = SQL `SELECT * FROM posts WHERE id = ${id}`(); console.log(query_set); ```
Does the concat really cause quadratic time in this case? What happens during the concat operation to cause it? 
We are forced to use Bootstrap 2 + jQuery for current project, and that's not even for a legacy project, it's a completely new one. The reason is that a company who owns the project (our company just helps them build it) is full of unmotivated people who are in IT just for good salaries. They learned jQuery in college and were too lazy to even try anything else. The project is really complicated and using Angular or React, paired with ES6 features would be extremely helpful. The sad thing is, said company makes all the software for our government and country using decades old technology for every new project they start. We have terrible, ancient-looking and slow applications everywhere. 
Whenever I set up reduce, I always want to set it up such that you always return your accumulator, and optionally add to it in your callback: const smartestStudents = studentsData.reduce( (result, student) =&gt; { if (student.score &gt; 80 { result.push(`${student.firstName} ${student.lastName}`); return result; }, [] ); 
I have 109% wrong for fiddling with your game. Guess I'll die.
Example: Storing the current selected item from the results.
Looks like a great intro tutorial :) Only suggestion would be to add some form of automated testing to your API in addition to manual postman testing. Also, [httpie](https://httpie.org/) is a great command-line tool for postman-like functionality.
You can probably write a plug-in... lol. 
I can confirt, that slither.io runs choppy on my Chrome 69 compared to smooth play in my Furefox 64. Noticed that chrome's slowdown occurs when there are that tiny shining dots (which you have to collect) on screen. Otherwise, it runs smooth.
I was didn't quite like apollo-link-state either based on the little code I've written with it. It feels too hacky to use and is doesn't feel like it would have any concrete advantages over Redux or other solid state manager.
GraphQL itself doesn’t but Apollo client can potentially, since it has a local cache and because GraphQL is a tree, you can fill the tree/state with GraphQL data (a sync or sync, cache only, cache than request, etc) and query that cache/state in various components and its single source of truth like redux. That’s probably where the similarities end. In order to mutate state you’ll have to run queries instead of actions and I don’t think there is a concept of a reduced yet. Try going through the Apollo documentation or watch the dozen YouTube videos on this subject 
Thanks, that method seems like a good alternative. I found another blog post explaining it: https://www.protectator.ch/post/pixijs-v4-in-a-react-component Will this method still allow me to control the pixi app using React and Redux actions (i.e. some sliders and a dropdown outside of the canvas)? I should probably try it and find out.
Nice for interviews.. `const factorial = (n) =&gt; [...Array(n+1).keys()].reduce((i, acc) =&gt; i &lt;= 1 ? acc * 1 : i * acc, 1)`
[https://sendbird.com/](https://sendbird.com/) is pretty comprehensive in its offering but is probably more heavy-weight than what you're looking for. [Intercom](https://www.intercom.com/) and [LiveChat](https://www.livechatinc.com/) both allow you to use their APIs to "link" a user on your end with their ID for a user (starts out just as a random ID for each new visitor). Once you link your user to an Intercom or LiveChat user (something you'd do on the server-side), Intercom will recognize your authenticated user automatically. This solution doesn't really allow "group chats" so much as your support team to have conversations with N users simultaneously.
**ndb** is an amazing tool, and this is a really solid breakdown tutorial -- thanks!
We're seeing exactly the same problem here with our app, and many users are reporting the problem, so unlikely to be related to some unusual hardware combo. I haven't been able to reproduce clearly in a canvas benchmarking app though, so likely something specific we (and OP) are doing in our code that's surfacing the issue. I'm trying to find a simple case to reproduce and submit a bug report. 
Yes, you will be able to, you'll just need to link between the declarative and imperative worlds. For this use case, I would recommend foregoing Redux and just using setState for your local UI state. Either way, if you centralize your "drawing" logic into a single "redraw" function that clears the Pixi canvas and draws everything according to your current state, you'll be good to go :)
&gt;Why is Stimulus not popular? Their baseline: "*A* ***modest*** *JavaScript framework for the HTML you already have."* When you read the description of Stimulus I don't think it was ever made to be a revolution in the JS world. Still I think that after 6 months of existence it started to spread quite nicely. As a Rails/React developer I see it as a real nice addition to Rails Conventions and code structure. \- Having a clear pattern to structure simple JS modules helped me a lot in some projects \- Having the MutationObservers API wrapped up, makes it super easy to handle various life cycles and it all works with Turbolinks by design \- Having a clear links between the view html and the javascript made it super easy to dig into the code even after not touching it for several months or discovering the a new project. Had some nice experience with React, I like the way it works, I use React when I need for complex UI but in most case I now stick to a Rails/Stimulus stack and add React component if really needed. &amp;#x200B; my 2 cents &amp;#x200B;
Why aren’t things like this fixed by ECMA? Things like adding two arrays together and so on? People complain enough about it, why don’t they just make an EMCScript proposal? 
It may appear like it's not exactly O(n^(2)). _But_ it does need to create a whole new array, iterate through the whole old array, copy the references to the new one and then add the new element. So, in general, it means performing an O(k) operation inside the loop, but with `k` not being `n` but the length of the result. So, best case (nothing matches in the filtering stage) is O(n); worst case (everything matches) is O(n^(2)). As complexity is generally about worst case scenarios, you need to assume it's O(n^(2)).
Everyone saying “it doesn’t” is wrong. Here is an quote from the [Apollo docs which describe exactly how to do it](https://www.apollographql.com/docs/react/essentials/local-state.html). &gt; That’s where apollo-link-state, our solution for managing local data in Apollo Client, comes in. apollo-link-state allows you to store your local data inside the Apollo cache alongside your remote data. To access your local data, just query it with GraphQL. You can even request local and server data within the same query! That said, I have never used this pattern in production and I can’t personally vouch for it for that reason, but to say that you can’t use graphql as a client-only state management tool (aka a “redux replacement”) is misguided. 
People may be laughing at you for other reasons. It is not literally nonsense, it is literally 100% possible with Apollo https://www.apollographql.com/docs/react/essentials/local-state.html
I said popular linting standards such as AirBnB. Clearly you’re inexperienced at reading.
[http://api.jquery.com/jQuery.getJSON/](http://api.jquery.com/jQuery.getJSON/) . Rad the JSON file and give the input to the autocomplete.
This look great! Finally a SQL without a layer of ORM. 
Same.
&gt; I wonder why the author use `concat` to push a single value to the result array though. Wouldn't `push` be more performant? There is a (silly) reason why `concat` is a popular choice in this situation. `concat` returns the result, i.e. the full array with the new item. `push` returns the pushed item. This means with `concat` you can write it all in one line (`return arr.concat(...)`) while with `push` you need to first do the push, then return. So, as I said an arguably silly reason. But I would bet it is the reason why they do it.
Firstly, thanks for the link and quote - it sheds some light on why this practice should start to be used more (consistency, transferrable, etc). I typically don't associate GraphQL with client-side since "It's a data controller essentially so why would I?" mentality despite the fact I develop full stack. Being used to referencing objects and variables directly has become pretty ingrained because it's been common practice for a long time but I have always wondered why querying local/in-app data through a query syntax hasn't really been established. I definitely think we're seeing the rise of this as a practice through the likes of in-app observable databases and libraries like apollo.
Lol funny watching the comments of people correctly saying that graphql doesn't replace redux &amp; people saying that they're wrong and it does because they thought OP said Apollo.
Yeah. Honestly you can get a long way with setState and prop drilling.
Thank you! but there is anyway to just add the word not all the prefixes of it? 
You only said "popular linting standards". You didn't mention Airbnb... clearly it's not me who has trouble with reading and writing. Sure, Airbnb uses 2 spaces. But eslint defaults to 4. The React preset also uses 4. Clearly both are popular choices but neither one is standard and there's nothing wrong with the author using 4. You're the one going into this thread complaining about the spacing. Just come off it.
Wow Microsoft really wanted to integrate GitHub into the products that they bought the whole company. 
&gt; [] != [] D'oh. Thanks, fixed. Linters and type checkers help avoiding loose equality, but it can still pop up in other people's code, and there's actually people like getify of YDKJS fame who are in favor of implicit type coercion.
That's because atlassian don't write any satellite integrations for their own software, they rely on users to do it. The only thing they have that integrates with bitbucket is sourcetree and that breaks half the time
A Distributed Peer-to-Peer Money Protocol. https://github.com/harshitgambhir/money-protocol
You can't remove JS features without breaking websites. The one exception to this was when strict mode was added, but that's unlikely to happen again.
[https://github.com/straker/kontra](https://github.com/straker/kontra) was recently updated and looks great, nice and minimal.
[removed]
But the way, no one mentions it, but if you target browsers with `Intl` support there is an option to convert time between timezones for `Intl.DateTimeFormat`. For IE 11 which does not support this feature there is a pollyfill (https://github.com/yahoo/date-time-format-timezone). So basically for modern projects you can go with `date-fns` + Intl for timezones
&gt;The only reason people use Slack is that there is nothing better to use. Ahem. Sir, may I introduce you to our God and Savior Telegram?
I would much appreciate if you send a PR for audio loader. I will update the collider in GameObject today
Top answer in linked question uses attributes for data, which is widely know as antipattern in XML, because it prevents you from giving any structure to this data. 
I just ripped out redux for link state.
Using jQuery with IE9 era CSS (floats, etc) for new projects. At least we're transpilling with Babel so JS is less dated. 
I'm using backbone on my main project and got to pick angular 5 on a smaller project. I'm enjoying backbone a lot less than you.
I have to use ExtJS. Help me.
Apollo is a graphql client and with it you can use graphql to replace redux. Did I miss the part where OP said “graphql with no additional tooling”? 
Of course it’s not equivalent. Did someone say “equivalent”? Or what is your point exactly?
good bot
Hey. Ember here too. It's a pain!
Why would you turn that off? To improve battery life, just?
Again, one person's opinion doesn't hold up to the community going the other way, nor does it matter if he's well known or not. Hundreds of well known people actively support TS &amp; flow. I'm not at all disagreeing with you that the way `==` was implemented is just a mistake, nor that it's infinitely confusing especially when comparing weird stuff like `1 == [1]`. What I do disagree with is that you should *ever* be allowed to type `1 == [1]` without your editor yelling at you. There's even an eslint rule to just disable `==` except for checks against `null`, which is the proper way to handle this.
I'd even go as far as say that the singleton-god-store is a bad design for model data from the server, but I haven't found anything better than, say, Vuex, to manage any data, not just state in narrow sense, in a Vue app because it has great idiomatic and nicely design tie-in to the VM side of the framework. So in practice I'd always tier things like PouchDB or Apollo away from the view-model and use the store as a broker because I can't see anything good coming from tightly coupling the view-model with the model down the road. But that's just me. Granted I have less practical experience with Redux/React and tightness of their integration compared to Vuex/Vue, and no real experience with apollo-link-state but for my platform it's just not a viable design.
&gt; What I do disagree with is that you should *ever* be allowed to type `1 == [1]` without your editor yelling at you. I've not said anything to the contrary. 
You poor, poor bastard. The one plus with ExtJs is that you can have the living shit out of the source files or by using the system overrides to integrate newer paradigms. There bad part is you'll never upgrade versions... Thought as long as you're up to at least 3, the rest of rendering window dressing.
Perhaps a lazy question but how does the boilerplate differ between redux and storing global state locally in apollo?
You might want to check that again.
"Well this person is okay with it" -- same thing
`var data = {"hello", "there"};` isn't valid JS, so it's hard to know what you mean.
It's not. I was addressing the question of relevance of the topic.
im wet
Sorry, I edited it. 
Probably cause it doesn't make any sense to do so. Why would you want this?
There are cases where using `==` can be useful. There is no reason why you shouldn't be called out (by a linter or a code-reviewing colleague) for using it i.e. when you know what you're doing you can and will use it on occasions but you should explain yourself (preferably with a comment) and instruct the linter to ignore. Which is the whole idea of forcing `===` on people, making code more uniform and readable in teams. In reality there aren't THAT many cases where non implicitly cast structural equality is that important to you. It's just a convention that prevents more issues than it causes.
It is, actually, it's literally a way to make an argument: "How do you feel about X? Well so and so says...." But if you didn't mean it that way cool :) FWIW I do like this, I just think it's unnecessary and potentially encourages people to memorize it (ugh!)
 data.reduce((m,k)=&gt;{m[k]=null; return m},{}) 
 var data = ["hello", "there"]; var obj = {}; for (var i=0; i&lt;data.length; i++) { obj[data[i]] = null; } console.log(obj); Oldschool way that should be pretty obvious what the logic is. /u/compteNumero9 has a newer way that's less obvious unless you understand map reduce.
So graphql doesnt replace redux. But you could replace it by using graphql with apollo. That’s my takeaway from this thread so far
Good idea to put it down. One can ignore map reduce but one shouldn't be unable to do things the simple way.
The question was not how apollo replaces redux
Apollo is a graphql client that can replace redux, and it’s what people are referring to when they say that graphql can replace redux. 
@\_\_@ xd
It works, thank you! 
Thank you.
How... No, wait. Does math work that way? Can you be more than 100% wrong? :O
seems like a thoroughly unpleasant language to code, that syntax
&gt; There are cases where using `==` can be useful. It just saves you from having to do an explicit cast, which is trivial and doesn't justify the footgun factor. The one case that's often made an exception for is comparing to both `null` and `undefined`.
Meaning is contextual, and it wouldn't make too much sense for me to support `==` after having made a didactic example of why it's bad.
Agreed, but plenty of people do things that don't make sense ;)
If it wasn't this way, then the winning strategy would be just to flag everything.
I mean, you did play the original minesweeper? It's about not getting killed and not percentage. If I get ANY correct answer then count it to my balance if not just -1. So with total of let's say 32 points I'll get -32 it means I got 100% wrong, not 800% wrong :D
That's a lot to imply in a statement that people unfamiliar with the technology may not pick up on
 Many good questions generate some degree of opinion based on expert experience, but answers to this question will tend to be almost entirely based on opinions, rather than facts, references, or specific expertise. &amp;#x200B; Maybe some valid examples?
GraphQL/Apollo has boilerplate but it’s not as bad as Redux’ imo. I felt Apollo’s learning curve was quicker than Redux’s. Plus, since we were already planning to use Apollo, by replacing the local state with Apollo as well, we were shrinking our boilerplate from using two things to one.
Knockout and durandal for me. Our app is pretty extensive which makes migrating away prohibitive. Sure, it's older tech, but we don't really run into too many issues / have many complaints. I'm happy with that bit of the stack.
Ugh, while its clever, I’d reject this in a PR and in an interview question the candidate. Keep code readable and easy to understand. Without knowing you’re writing a factorial function ahead of time, this would take quite a while to understand what it’s trying to accomplish.
What do you use canvas for in your app? I work with 2 canvas-heavy apps and neither are having any issues. One does a lot of rendering images to the canvas and manipulating them a bit, with some light line drawing, the other heavy manipulation and a pixel-by-pixel ImageData drawing. Both seem fine here, tested on Android 9, windows 10, and macos.
Why multiply acc with 1? Shouldn't it be enough to keep it as acc?
I didn't know AssemblyScript, thanks for sharing! It looks really interesting. I've developed a parser combinator in TypeScript called `miam.js` (https://github.com/Hywan/miam.js), I will give a try with AssemblyScript!
/r/javascriptjerk
Providers don't care. They want that sweet, sweet metadata.
hardware acceleration should improve battery life, as dedicated (graphics) hardware is usually more efficient.
Ah ok, so why would you turn it off?
Make sure that you're running this within the context of the extension. That means, either your background script or a content script. If it's being injected into the page, it won't have the privileges to access the `chrome.storage` runtime. Src: have been developing a chrome extension for over a year and have done this to myself many times. 
`chrome://gpu` will tell you if it's actually working or not, rather than what it's been set to. 
Doesn't big-O notation always imply worst-case?
I think when wasm is further along people will do the opposite: write in a compiled language and compile down to wasm/ JS as needed. There is a bit of momentum regarding compile-to-js-languages already. I don't think most people will be writing their JS/wasm in rust though, as impressive as it is, something slightly higher level seems more appropriate.
It can cause problems with some machines and with some websites because there are trillions of different combinations of hardware and website (and the individual tech in each of them).
&gt; As complexity is generally about worst case scenarios
No, that's not really a valid argument. What if you changed that line to...? result = result.concat(`${student.firstName} ${student.lastName}`); return result; This is still using `concat` and it is, according to your criteria, "less functional". So, _in and on itself_, no, `concat` is not "more functional". It is not so much about the things you use but about how you use them. In this particular case, the reduce operation is a _builder_, and the accumulator (`result`) is the thing the operation is building. It really doesn't make any difference if the building process mutates it or if it decides to be wasteful and generate a lot of unneeded intermediate arrays.
XML parsing really is not that hard. Most languages have very good XML-libraries.
Well, I was trying to ask how graphql ln it’s own replaces it, but people mentioning Apollo has been an important part of this discussion. I think it explains why the two ideas get conflated. 
Aurelia is the successor to Durandal and Knockout. Here's more information about migrating in case you're interested: https://github.com/aurelia-contrib/aurelia-knockout/blob/master/doc/upgrading-to-aurelia-from-durandal.md
Aye. I think the mention of Apollo has been beneficial in that it explains how this conflation came about. 
Or avoiding prop drilling entirely with context.
That's my point. It's an old standard and you still need a library to do it.
Sure thing! I certainly won’t disagree that the articles and posts on the topic are usually very clickbaity and the phrasing is intentionally ambiguous, probably because graphql is more well known name than Apollo, specifically 
I agree with what I have heard others say. People completely over reacted and said mutating state is bad, and in result many people abuse redux. I think there are so legit cases for it, but they are few and far between. 
I'm not here to argue which is more functional, so I edited my comment It just might be a reason why they use concat
Well yeah, obviously in JS it will be easier to work with JSON, because JSON is JS. However, most apps or backends are not written in JS and they all need libs to parse JSON as well.
I saw that, and was wondering if it was satire lol.
Only if the goal of an interview is to prove that you're a rockstar developer, as opposed to actually being able to do the job well and write code that is maintainable once you're off to your next rockstar role.
For me, I had an issue with a gtx 570 (I think) and mp4 videos. Any time one would play, it would artifact a ton of black noise for a couple seconds at the beginning of every play/seek. Turned off GPU acceleration and never had a problem.
I'm looking forward to Rust maturing. I saw some demos and the performance was amazing, but every demo I've seen someone asks the presenter: "So are you using Rust for anything in production?" "Oh, oh god no!" Not to say NOBODY is using it, I think they've just got a long way to go.
[Obligatory reference](https://www.destroyallsoftware.com/talks/wat)
I'm looking forward to Rust maturing. I saw some demos and the performance was amazing, but every demo I've seen someone asks the presenter: "So are you using Rust for anything in production?" "Oh, oh god no!" Not to say NOBODY is using it, I think they've just got a long way to go.
I'm a total moron. Genuine thanks for making me think about how reduce already works.
&gt;Without knowing you’re writing a factorial function ahead of time, this would take quite a while to understand what it’s trying to accomplish. It's called factorial... `const factorial = ...` Plus the factorial function is a standard mathematical function. It's not like you will be changing the implementation between releases. Failing someone on a concise factorial function is in my opinion an asshole move.
I gently but strongly disagree with this :-). Rust is mature and can hit production very easily. Just by looking at https://www.rust-lang.org/en-US/friends.html, you can see big names, like NPM, Dropbox, CleverCloud, Mozilla (of course), Samsung, CoreOS, OneSignal, OVH, MaidSafe, Braintree, WIRE, Atlassian, and much more. Rust is ready for production, and is used in production :-).
Hahahaha 
Well I said i'm not saying nobody. But I'm always skeptical about lists like this where I don't know WHAT people are using it for (arguably the presenters I met are "using" it...) also it's hard to know what any given group's skills are. If you are a company with high highly skilled folks doing awesome stuff in Rust awesome... but they probabbly could do awesome stuff in a lot of languages no matter how mature it is. Maybe a phrase should be "widely used" or something else.... Gotta find a way to phrase this because language fans always jump on me about it. **Any** given use(s) /= what I'm thinking of ;)
I wrote one of the articles you likely came across ([https://hackernoon.com/how-graphql-replaces-redux-3fff8289221d](https://hackernoon.com/how-graphql-replaces-redux-3fff8289221d)) so may be partially responsible for the confusion here. A more accurate, but much less interesting title, would have been "How GraphQL + Apollo replaces the \*need\* for Redux + REST." I elaborate on that a bit in the article but I realize a lot of folks don't get past the headline. The fact is GraphQL (plus a good client like Apollo of course) has replaced the need redux entirely for my team. Even for very complex UIs. Happy to answer more questions about how that works in practice if anyone is interested. 
Mostly our build process. It's shell scripts, gulp, npm scripts, and a mish-mash of 100s of custom and 3rd party packages. No webpack or similar! Why? Well the older scripts are a decade old now, it works, and we'd have to port a lot of custom stuff like automatic code trimming by browser to webpack.
Meh, has close to 300%... Honestly, I thought more pairs would evaluate to true, hence the result. Which is the exact reason I never use "==".
how does it cover actions and the data flow with redux?
Here's the thing. Lists in functional languages are normally immutable linked lists. And functional programming does not tend to mutate arguments; mutation of state is a side effect. The `concat` function does not mutate anything compared to `push`, so it's already more functional. Array (or list) concatenation also forms a Monoid where as there is really no `push` in functional languages, only a sort of prepend, because a linked list constructor prepends a value to a list. So it could be argued that concatenation is the functional equivalent to pushing a value. In fact, to append a value to a list in functional programs, you tend to `list.concat([value])` where value is a single value in a list. In the end, though, I agree with you that performance is important, and you don't have to implement *everything* in a functional style, so the "It's more functional" argument - while true - doesn't always justify the use on its own.
It does not cover those things. If you or your app needed the history of actions like Redux, Apollo / apollo-link-state would not be a great replacement. But if you just needed a simple local state store for a few pieces of global state and didn't care about the actions/history, it would be enough.
Okay, that's what I thought.
Okej, the performance issue I can get behind. The implementations we OP wrote isn't exactly well optimized. 
Probably to make it more intimidating, functional programmers have a tendency to complicate things. ^^/s ^^relax ^^ok?
If someone asked you “Can I get from LA to NYC in one day?” you wouldn’t say “No, humans are not capable of running that fast”. You would say “Yes, take an airplane.” BUT THE QUESTION WASN’T ABOUT AIRPLANES! RIDICULOUS ARGUMENT!
Have you read any of these articles? I read one the other day where he was replacing redux with GraphQL then a comment asked him about Apollo and he said he’d look into it. Most of the articles even concede that in some cases you need to keep Redux for local state... Perhaps you should spend less time assuming things and making BIG TEXT JOKES and Instead participate. Nobody thinks Apollo can’t be used to replace GraphQL, so you don’t need to repeatedly bring it up, we all already agree with you.
if you want to follow what's going on: let kenobi = {}; data.map(datum =&gt; { kenobi[datum] = null; }); console.log(kenobi); // { "hello": null, "there": null }
In my current job we use angularJs in the front end, without ES6. For the styling we use LESS and the current task runners are grunt &amp; webpack 3.
Justin used ad hominem! It was super ineffective...
We've got a few vanilla and Backbone apps in production that need bug fixes occasionally.
Oh definitely, using Apollo, which implements GraphQ, is a practical solution. But I think this conflation is more than that considering how many medium articles I’ve seen not using Apollo to back the claim.
This is completely wrong. It is perfect fine to use context without deferring to another library, and prop drilling is a perfectly fine reason to use context. Prop drilling a single level is fine. Hella levels? Context.
I didn't say one way or the other, I just said that it doesn't say that it's dying in the article at all, so why the speculation? I personally couldn't care if they killed Atom, I think it's crazy to maintain two editors. 
you're not the first, &amp;#x200B; [https://www.pcworld.com/article/3173371/security/a-hard-drives-led-light-can-be-used-to-covertly-leak-data.html](https://www.pcworld.com/article/3173371/security/a-hard-drives-led-light-can-be-used-to-covertly-leak-data.html)
 Grandparent, controls foo Parent, drills foo Child, uses foo This is what I mean by one level, for clarity.
Came here to say this :)
Thank you! 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
There is also the case where the type of neither of comparing objects are known or relevant before comparison in which case it saves you from two needless explicit casts and makes code generally more readable. But I was thinking more about the `!=` check when you need to test for data difference rather than type difference. Both of which are useful when you're unable to control data unmarshalling (for example, using some external library or dealing with user input over an API or a data source that casts data points itself in weird ways). In general it's good design to be lenient in what you accept and strict in what you send, and sometimes implicit casting operators make code more readable when used in these situations. These cases are few and far in between but to dogmatically code around them would be contrived.
thanks, I added the MIT License right now
Hi, I'm a Redux maintainer. A few months ago I wrote a post called [Redux - Not Dead Yet!](https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/), which specifically addresses questions like this. I'll quote the most relevant section: &gt; I'd agree that data fetching via GraphQL, and especially with Apollo, will likely reduce or eliminate your data-fetching related Redux code. And again, if that's all you were using Redux for, you probably wouldn't need Redux after moving all the data-fetching handling into Apollo. I'll even go so far as to say that `apollo-link-state` could probably handle most of your other client-side state logic, and I think Apollo ships with a DevTools setup of its own. The Apollo team has been doing some pretty neat work, and while I don't like seeing people switch away from Redux, ultimately we all want to build great apps that help our users. But, as with context, I'd say there's definitely use cases where Redux is going to work better than GraphQL + Apollo, and possibly without requiring as much buy-in throughout your architecture. This is especially true if you need to do more than just fetch data or update a couple local state values, like persisting user data through page reloads or implementing complex workflow logic.
I built my first web app with GWT. We finally just completed replacing the client with a React+Redux rewrite ([which I commented about here](https://news.ycombinator.com/item?id=17897211) ). I was SOOOO happy to rip out every last line of GWT in that codebase :)
Hi /u/wazabimonster, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kaboshkibash, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/amunday, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rebekahgrim, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/pallavagt, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
That is lovely, thanks. Keep it up!
Repost
Ah I think you're right after looking into things.
Lovely. Great work!
Also, if there is a better place to receive code reviews on apps like this I would love to hear about it.
My bad I guess. I figured since you put the /s before the "relax ok?", that you were actually asking me to relax. Sorry about the misunderstanding.
&gt;I want to add one more code 'if else' in js from this codepen. Oh, sorry, i just joined this website and i did't catch the category... 
Looks more or less like any other functional language except the prime marks. No idea there, about to look it up.
Precisely. If they aren't actively maintaining it they are killing it. And if they are building GH integrations with VS code 4 months after they acquired GH and overlooking atom - the editor developed by GH that's a strong indication they aren't planning on maintaining it. 
I'm sure the team that maintains Atom is still in place. VS Code could have developed the feature faster, which is a good possibility if you look at the development speed of VS Code in comparison to other editors.
Hi, would love a working JS runtime for IOT devices, last time I checked RAM was a big issue. Have you considered alternatives (eg. https://www.duktape.org)? Any key differences with other projects out there? Do you have a working BLE/WIFI stack? Thanks!
I work with low-power embedded ARM devices running Linux, so this is pretty interesting. I'm curious, how are you obtaining lower system requirements than node.js? Are you using another javascript engine than V8?
Unfortunately JavaScript is nothing like those three. It's dynamic scripting like Python but that's pretty much it. There are some quirks you will have to get accustomed to, especially coming from OOP languages. You will probably get away with jumping straight to frameworks but it will be greatly beneficial to learn it.
Since you are starting fresh you should definitely learn JS. From my experience, I would strongly recommend to start with learning JS rather than framework. Learning JS will help in better understanding of frameworks, and you would appreciate frameworks much better. 
Looks nice, will it work on an ESP8266?
Low.js IS running with duktape and not V8
According to their docs, looks like this is using duktape as the actual runtime, which is nice.
Have you tried johnny-five? I seen that it's for using node on IOT devices.
but why? Some PWAs can be &lt;100kb.
Retard
console.log((==) == "bigger problems"); // true
Sorry, you need the ESP32-WROVER because at least 1 MB RAM is required.
I'm going to pass on the point of "more or less functional". Not only I find it a useless argument but as people tend to have various definitions of what is functional, and no one here has given theirs, arguing about one particular call being "more" or "less" functional seems a discussion that will lead nowhere. But in any case, there's the point of ownership, which you seemed to ignore. I don't think this case is just about performance (and placing it before being functional or not) but about the _need_ -or lack of it- for immutability. This process is building the new list. The new list, until built, _belongs_ to this process and no one else. The initial list is built right there and then (as the second argument to `reduce`). It is, for all accounts, exclusively owned by the reduce process. As such, there's really no risk of it being modified by anything else. And so, insisting in respecting its immutability inside the process is not just less performant, but actually a _waste_ as it is not providing any additional benefits.
Thank you for the feedback. Added to [lowjs.org](https://lowjs.org): &amp;#x200B; The JavaScript engine at the core of Node.JS, the V8 engine, is replaced with Duktape, an embeddable ECMAScript E5/E5.1 engine with very compact footprint. Parts of the Node.JS system library are rewritten for more compact footprint and to use more native code, other non-intrusive parts are kept such as the modules events or path. For example, the handling of HTTPS is now fully done by native code, allowing it to run in parallel to the user program, if a dual core microcontroller like the ESP32 is used.
Amazing work man can't wait to loose up by sleeping ESP 32 board 
Other issues: * Value and accumulator variables are mixed up, meaning the logic for the 0 case doesn't work correctly. * Throws for any input &lt;= -2, but "works" (produces an incorrect output) for -1. * Error thrown for invalid inputs (decimal or negative) is "Invalid array length". PR definitely rejected...
It's also an incorrect implementation. Try putting 0 or -1 through it.
FYI chrome warns me you have an invalid SSL cert name for your site so i get that nasty warning: `NET::ERR_CERT_COMMON_NAME_INVALID`
Johnny-five is great, but it is not JavaScript running on the board. It is more like a remote control from Node.JS running on a PC.
Because it prints to the screen. 
Thanks, we will fix that. Right now we only have the http linked, however. There is no login or other thing on our website which requires https.
Good too know. I wasn't very familiar with it. I just knew it was made for IOT. That's inconvenient that it doesn't run on the board.
I think people moved onto using high pitched sound, and microphone receivers instead.
Learn JS first. It will save you an untold amount of craziness once you hit React, etc.
The other day I used &lt;nobr&gt; to prevent text wrapping. Because that shit works fine, the [MDN docs for that tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr) makes you think this tag gives you cancer or possibly a rare blood disease.
i use supertest
jQuery UI, DataTables, and Foundation, all on top of CodeIgniter.
yup
But you get better seo, and it's free!
You should be using a source code repository like Git and pushing the code to an online host like github or bitbucket often. That doesn't help this situation, but it'll help in the future and could help with any remaining data you have on your drive.
extremely noob question, but in layman's terms can you explain what cache is?
You're not the only ones: * [Atrocious performance Google Chrome 69?](https://productforums.google.com/forum/#!topic/chrome/CxAm4BnBtlY) * [Riddled with problems, Chrome 69 isn’t the celebration Google hoped for](https://www.digitaltrends.com/computing/chrome-69-user-issues/)
This is really great, Javascript microwaves here we come!
We are C now, boys!
You can check to see if [Shadow Copy](https://confluence.bethel.edu/display/ITSKB/Restoring+Network+Files+and+Folders+Using+Shadow+Copy+on+Windows+7) is enabled and has the files still.
This is a pretty obscure case, but I'm looking to use it to train my company's fb messenger customer service chat bot to identify customers who are likely to respond positively to a cross or upsell attempt, and then to determine the best point in the conversational flow to deliver that upsell content. I'll report back in 14 years once I've got the bugs ironed out
One of the benefits to having good node.js library support is also that a number of npm packages may work "out of the box" for this tool. (if not now, in the future) Which is nice! 
As a person who has done a whole lot of work on NodeJS embedded on devices (256MB+), this sounds quite interesting . . . 
Def gonna check this out! Thanks!
We'd rather keep the footprint low than adding ES2017+ on the machine. It running on the ESP32 means low unit costs which makes this interesting for mass production IoT. But you may use ES2017+ in development. Just add a compilation step with Babel or TypeScript. Performance-wise it's OK for most things. But still, we are planning on adding JIT compilation to DukTape in the future.
I know it's not quite the same but I love [this post](https://superuser.com/questions/1268868/can-i-save-these-documents-on-a-dying-machine-from-oblivion). 
It works, but add() isn't returning the original element. You need a reference to the original element so you can put it into the DOM.
Not much of a node user, but this could be an interesting way to provide micro web services and to communicate with other web services. I’ll book mark it for some later investigation. Keep up the awesome work!
Just wanting to let you know it looks like a cool project and could be very usefull to some. The IndexedDB Api always looked a bit daunting to me.
Honestly, if you want to become a mid or senior level developer, apply to mid or senior level positions. Especially start ups. Job titles mean so little in this industry. Many people I know skipped “junior” level roles and went directly for mid or senior. It is about confidence, problem solving abilities, and taking initiative
I felt comfortable with eggheads React fundamentals if you're still searching for a good tutorial: https://egghead.io/courses/react-fundamentals But really what you should brush up on is javascript in general. React is a simple little principle that you can learn quickly, the course above goes for an hour and if you follow that's it, you know and write React, but without a firm foundation you won't manage to keep up so i would shift the focus a little towards javascript, especially everything that came after es5. If you can deal with the following you're good: https://babeljs.io/docs/en/learn There's also framer, which will finally unite design and code, with a focus on design, but the output you create will be real components nonetheless: https://framer.com/x/ It's currently in beta, but that will make an impact for certain.
Hmm actually this explains why I was having issues with lag on canvas yesterday, it kept freezing up on me but I thought it was my laptop. 
It's a bit of data you have saved, so that if you need to get that same data again, you already have it stored in a cache. So it's on your own computer already and you don't need to go through the internet again to get it. Should also point out that Apollo's local cache is a bit different, it caches requests for data like a normal cache but also acts as a local data store for information that might have never been sent over the internet anyway. Imagine things that don't belong in a database, something like a menu being open, Apollo lets you put that in your local cache instead of having to run state manager alongside (eg Redux).
It looks like drawImage is the culprit. From another thread: See [here](https://bugs.chromium.org/p/chromium/issues/detail?id=683994#c34) and [here](https://bugs.chromium.org/p/chromium/issues/detail?id=464835#c68) tl;dr: Chrome has a major regression in canvas performance. And that's a regression of a temporary mitigation to the original regression in canvas performance.
Others have already answered why (because `.add` returns nothing), but if you really wanted a one liner you could write something like, (window.myLocalVar = document.createElement('div')).classList.add('test') 
Thanks! And yeah, it's definitely a lot to digest compared to the average browser API, but it has a very nice documentation that made my job easier, thankfully.
Hi. I'll give you some general resources (most of which are also linked in the sidebar of /r/reactjs ). - My [suggested resources for learning React](https://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/), and [React/Redux links list](https://github.com/markerikson/react-redux-links) - Kent C Dodds has some great [React beginner videos on Egghead](http://kcd.im/beginner-react) - Tyler McGinnis has [a guide for learning React in 2018](https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597), some great paid courses, and also just did a [free React online bootcamp](https://tylermcginnis.com/free-react-bootcamp/) Also, come visit the Reactiflux chat channels on Discord. We've got a ton of friendly people hanging out at all times, happy to answer questions. It's a great place to ask questions and learn. The invite link is at https://reactiflux.com . Beyond that: yes, understanding JS is a core prerequisite for working with React. The more you understand and are comfortable with JS, the better you'll be at React (and usually vice-versa). If you've got some further specific questions, please ask!
Great answers and great resources. I will definitely checkout the egghead course! Looking over the Babel link for es5 it’s a bit over my head. Your right I do need to get better with pure JavaScript. I’m feeling a little pressure as work for works purposes wants me to focus on react and learning that. I do find myself frequently going through JavaScript exercises and trying to read up more and more. Some of the JS concepts are very abstract even after watching a few YouTube videos it’s an uphill battle. The order some things are written is confusing. A lot of tutorials will write variables as parameters that haven’t been created in the flow of the JS code. The syntax can at times be tough to follow, where braces end and if they are in parenthesis etc etc. all thing I guess that come with practice. Thank you and always up for anyone’s advice. 
so this.parentNode would refer to the UL element. https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend 
I think you win. My first big break during the early days of my development career were getting a job with an insurance company who were using ExtJS and it did some things right, it was an impressive framework, but wow was that a nightmare to do anything non-standard with. If you're happy just using it out-of-the-box as is, ExtJS is fine, but once you need to do anything custom things go pear shaped super quick and it was not fun at all. I lasted six months at that job and only stayed that long because I needed the money and experience.
Durandal is fantastic. It's old, but it still works I really enjoyed it when I worked with it a while ago. I am actually a huge Aurelia user now and on the Aurelia core team (so I am biased) but it's Durandal 2.0 with many of the same features you loved from Durandal amped up.
I think you're trying to solve a logic problem with the dom, and that usually doesn't work out very well. Let's think of this as just data, what does connect 4 look like? I big array, is what I'm guessing, but let's start with an array of arrays, and let's make it a 4x4 grid: const grid = [ [null, null, null, null], [null, null, null, null], [null, null, null, null], [null, null, null, null], ]; I made the values null, since they don't have a disc in them yet, but let's say we could have the values `null, "red", "blue"`. So how do we render this? We've going to go bare-bones javascript on this, but something \_like\_ react could be helpful for this.c function renderRow(body, dataRow) { const row = document.createElement('tr'); row.forEach(function (data) { const cell = document.createElement('td'); cell.style.width = "64px"; // I'm assuming your grid cells are 64x64. Not a big deal, and easy to change here :) cell.style.height = "64px"; if (data !== null) { cell.style.backgroundColor = data; } row.appendChild(cell); }); body.appendChild(row); } function renderGrid(grid) { const table = document.createElement('table'); const body = document.createElement('tbody'); grid.forEach(function (dataRow) { renderRow(body, dataRow); }); table.appendChild(body); return table; } // Example: const gameTable = renderGrid(yourGridArrayGoesHere); document.body.appendChild(gameTable); That's going to add a new table each time you appendChild, but that's a different problem that you can solve. So, now we have a data structure and a way to render it to the DOM, now we need a way to drop a color into the grid. We'll need to think of a few things; we need a way to know if there is space in a column, we need to know what color is being dropped, and we need to check if there is a win condition after we drop the color. Let's check to see if we can drop. We know we have 4 columns, and that arrays start at 0, so we can effectively drop in columns `0`, `1`, `2`, and `3`. I think we could make a function that takes our grid, color, and column, and return either the row it will land on, or false, indicating if we can drop to a row or not. function canDropToRowFrom(grid, color, column) { const numberOfColumns = grid[0].length; // The first array's length is also the number of columns, for when you increase it from 4x4 to something else. if (column &lt; 0 || column &gt;= numberOfColumns) return false; // Can't place a color on a column that doesn't exist (less than 0, or greater than the highest array index const firstRowWithColor = grid.findIndex(function (row) { // Find index will return the index of the first grid row that this function returns true for. If it couldn't find one, it will return -1. const cell = row[column]; // get the cell on the row return cell !== null; // Find the first cell that has a color }); if (firstRowWithColor === 0) return false; // This column has colors all the way to the top, we can't drop anything. if (firstRowWithColor === -1) return grid.length - 1; // If there wasn't anything in this column, we know we can go all the way to the bottom. return firstRowWithColor - 1; // Need to go one above the row with the first color in this column } // Example const rowTarget = canDropToRowFrom(yourGridArrayGoesHere, 'red', 0); if (rowTarget !== false) { // Can drop to row=rowTarget, column=0 } else { // Probably disable this row } That's a little complicated, but that will work. Let me know if something isn't clear about it. Now let's see if we can set the grid cell to a color. I think this is going to be easy. We need a function that takes the `grid`, `row`, `column`, and `color`, and returns the grid with the color set if possible. function setGridColorAt(grid, row, column, color) { const numberOfRows = grid.length; const numberOfColumns = grid[0].length; if (row &lt; 0 || row &gt;= numberOfRows) return grid; // Can't do it on a row that doesn't exist. if (column &lt; 0 || column &gt;= numberOfColumns) return grid; // Can't do it on a column that doesn't exist. grid[row][column] = color; // Set the color return grid; } Side note: This function isn't immutable, so returning the grid mostly doesn't matter, but if you know what immutability is and want that, it would be easy to update this function to behave that way. Our last check that we need is if there's a win condition. I'm going to simplify our checks to be a line either horizontally or vertically, but implementing a diagonal shouldn't be hard either. We can make things easy for us by only checking from a single row and column (ie we only need to check against the last move a player made), so let's think through how to check for a win condition. I think we'll need the `grid`, `row`, and `column` to tell us where to start checking from. function checkGridForWinAt(grid, row, column) { const horizontalWin = checkGridForHorizontalWinAt(grid, row, column); const verticalWin = checkGridForVerticalWinAt(grid, row, column); return horizontalWin || verticalWin; } Checking for horizontal isn't too hard. First, let's see how far right we can go while still having the same color: function followTouchingColorOnRow(grid, row, column, direction) { const currentCell = grid[row][column]; const nextCell = grid[row][column + direction]; if (currentCell !== nextCell) return column; // If the cell to the left is a different color (or doesn't exist), stop at this column return followTouchingColorOnRow(grid, row, column + direction, direction); // Recursively keep going until the colors don't match } // Example const firstColumn = followTouchingColorOnRow(grid, 0, 1, -1); Now let's use it to check for a win condition: function checkGridForHorizontalWinAt(grid, row, column) { const firstColumn = followTouchingColorOnRow(grid, row, column, -1); const lastColumn = followTouchingColorOnRow(grid, row, column, 1); const length = lastColumn - firstColumn + 1; // +1 because if we had a full row (lastColumn = 3, firstColumn = 0), it would be 3 - 0, which needs a + 1 return length === 4; } What about the vertical column check? It looks pretty similar to our row check: function followTouchingColorOnColumn(grid, row, column, direction) { const currentCell = grid[row][column]; const nextCell = row &gt; 0 ? grid[row - 1][column] : undefined; // Need to make sure that the row is an array to check it's column if (currentCell !== nextCell) return column; // If the cell to the left is a different color (or doesn't exist), stop at this column return followTouchingColorOnColumn(grid, row, column + direction, direction); // Recursively keep going until the colors don't match } // Example const firstRow = followTouchingColorOnColumn(grid, 0, 1, -1); What's cool about the vertical check is because we can only drop downwards, we don't have to check for any colors above where we dropped, so it looks like this: function checkGridForVerticalWinAt(grid, row, column) { const lastRow = followTouchingColorOnColumn(grid, row, column, 1); const length = lastRow - row + 1; return length === 4; } So now you have all the pieces, I'm not going to put it together for you, but I'll explain what you should do: 1. Maybe have a button on top of each row which is disabled after checking `canDropToRowFrom(grid, color, column)`. 2. After a button is pressed to drop down a column, you'll probably want to set the color, render, and check for win. 3. You'll want to keep track of whose turn it is, and switch between your colors. Give that a shot, and for bonus, try switch from a background color to an image. ;)
Genuinely exciting. &amp;#x200B; Espruino is amazing, but it's so hit and miss. Flawless in some regards, and absolutely hamstrung in others. &amp;#x200B; This sounds like the way forward, cannot wait to see how this develops.
[Your code appears to be working as intended for me](https://codepen.io/RoyCurtis/pen/KxoewN), on Chrome 69 and Firefox 62. Some thoughts: * `ChildNode.before()` appears to be an experimental new function; [was it tried on a supported browser?](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before#Browser_compatibility) * [I do not see any differences between your first and second code blocks](https://i.imgur.com/Y9jLkUD.jpg); something missing? * Was the HTML valid? * Were other libraries or code loaded? Also, [this code might work better](https://codepen.io/RoyCurtis/pen/ZMxRLa): let lis = document.querySelector('ul').children; for (var i = 0; i &lt; lis.length; i++) { lis[i].addEventListener("click", function() { lis[0].before(this); }, true); } `document.querySelector('ul').children` returns a *live* list of that `ul`'s children elements, which means `lis[0]` will always refer to the first `li` element. This means the click handler does not have to call `document.querySelectorAll('ul li')` on every click.
transpilation is a no go. If it's not going to get newer language features, or it's going to get them at a pace that leaves it always 2+ years back, then it's not that interesting. 
Uhm are you using java or JavaScript? Because there is a difference. 
While everybody else has posted excellent resources I just want to point out that you didn’t become an html/css expert by following a guide - you did it by gaining experience. So don’t forget to set aside some unstructured time to just build something. Google small problems as you encounter them and crank out some mini apps - tic tac toe, todos list, etc. Also, just focus on one way at a time. Don’t worry about being the best or an expert or knowing all the things. Just stick to the basics, build a foundation, then go back to one of those mini apps later and see if you can find a way to make it better. For example, forget render props. It’s a great tool but not once have I ever *needed* it, I just chose it cause it was an easy way to do X. If you do this you’ll be comfortable, confident and able within 1-2 months max. 
Looks like an awesome project, best of luck! I love that JS is everywhere; IoT, desktop, native mobile, client and server side in web dev. The JS community is amazing. Glad to be apart of it these days. 
Vuejs
We really have no room to talk on this sub.
Is there a reason it's not more widely used? I've been wanting to learn it but I have limited time and don't want to learn a language that will be depricated in a few years. 
Was there a particular reason for preferring duktape over XS7? (I have little experience with either, but like the idea of ES7 over ES5.1+)
Alert('Hello World!');
Depends on how novice. Why not pick a project and try it out?
Do you have some sources on that? I can't imagine CDNs would be as widely used by all the big players (Facebook, Google, AWS) if there were security concerns with them.
JS is an increasingly powerful language, it can do anything from basic things like Alert Dialogs to altering CSS or Content to even things on the server or constructing entire webpages with something like React. Novice just means new. You can do anything JS is capable of doing whether you’re new or not. It’s all a matter of typing in the right code for the right result. Ergo, this question is somewhat nonsensical. For basic things, if that’s what you’re asking, here are a few: alert(‘some words’) -&gt; creates a pop up dialog in browsers document.body.innerHTML = ‘some words’ -&gt; changes/sets the content of a webpage (it’s body tag) document.body.style.background = ‘red’ -&gt; changes a webpages background to red document.location = ‘https://google.com’ -&gt; navigates to google document.querySelectorAll(‘a’).forEach((link)=&gt;{link.setAttribute(‘href’, ‘https://google.com’) -&gt; changes all the links on a webpage to link to google More info on what you are wanting to do would yield better results, my friend.
This is a really great experiment! If i’m not mistaken, the amount of ram needed for arrow function is higher because for every instance, it’s created a new instance of the arrow function, while using bind, all classes point to the same function in memory.
Good research man, thanks for sharing. I will say though, when you mention the only results are in reference to react, I’m not sure why that matters. React is nothing but a library of classes, ergo, any results regarding the arrow function performance in react are also valid in a non-react situation. 
There must be some limited scope for this because IE's debugger has a right click 'set next statement' function that works within the current function scope. But I like one of the ideas above, if you are executing line by line, just set your line array pointer back to an earlier line. But you won't get a roll back scenario unless you track state/stack manually I'd imagine and could really mess up operations like foreach. The scope/state would not know that it's now outside of that 'loop'?
No matter what I google I always got tons of results where people were asking this. Should I use &lt;button onClick={() =&gt; doSomething()} /&gt; or doSomething = () =&gt; doSomethingElse() &lt;button onClick={this.doSomething}/&gt; or constructor() { this.doSomething = this.doSomething.bind(this); } function duSomething() {} &lt;button onClick={this.doSomething}/&gt; and the answers are "Use B because A is wrong and C is too long without any benefits". Well it seems that there are some memory benefits, but you will hardly have thousands instances of same react component so noone probably got that far. Thats why react related questions does not matter here :) &amp;#x200B; &amp;#x200B; Luckily my project is for few last versions of desktop browsers only so we have a luxury of using ES6 :) &amp;#x200B;
You could try only switching in the new content and not all the script tags etc. again. Or use a module approach like require.js. You could write your js files so they check if they've already loaded via a global or whatever before running the rest. Watch out for eval code. If you name all your script tags and are in charge of doc appending them, then check if a script tag of that id is already present. There's other options I'm sure and these ideas may suck.
With my limited experience I can say that React is getting very famous now i.e. the demand is growing. One main reason for this is MIT license that it got recently ([https://medium.freecodecamp.org/facebook-just-changed-the-license-on-react-heres-a-2-minute-explanation-why-5878478913b2](https://medium.freecodecamp.org/facebook-just-changed-the-license-on-react-heres-a-2-minute-explanation-why-5878478913b2)) . Coming to when to use what here is the link [https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d](https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d) In my personal opinion I would go with React for few reasons 1) Virtual DOM 2) Server side rendering 3) Not changing like Angular (Upgrade is a real mess)
I'd go with: &amp;#x200B; document.querySelectorAll('li').forEach(item=&gt;{ item.addEventListener('click', (e) =&gt; { document.querySelector('ul').insertBefore(e.target, document.querySelector('li')); }) }) All you need to do is use the 'insertBefore' command to move the element before the first li. querySelector will automatically pull the first item if there are multiple. &amp;#x200B;
Sounds neat. Would be good to add a link to github repo somewhere at the beginning in a visible way. Was the first thing I looked for. Is there really only one contributor at the moment focusing on its development, or is that just for the repository?
I repeated your tests and found that it depends on the platform. Using your invocation and push logic, Chrome and Node (v. 8.92 and 10.1) show class methods are slightly faster on aggregate on first run, but there is a ton of overlap. On Firefox and Safari the results are the same but opposite. Also, Chrome and node are faster on second run (hello there, cache optimization). Results are a bit noisy because of pretty obvious GC, but they are consistent. If you play with clearing your `ac` and `fc` arrays, the performance patterns change a fair bit. [My code is here](https://gist.github.com/scriptfoundry/d956a23f4456cc855c27e90a0ea1f836). I had to restructure things a bit since you're using arrow functions as class fields, [which aren't vanilla yet](https://github.com/tc39/proposal-class-fields) -- and after transpilation this is likely a performance bottleneck, since the engine has to allocate memory for the arrow function in each instance, rather than just pointing to the same function statically like methods. I'm curious to see your transpiled code so that I can see how it is being done for you. I would expect performance characteristics to change if/when the class field proposal reaches stage 4. 
&gt;the answers are "Use B because A is wrong and C is too long without any benefits". &gt; &gt;Well it seems that there are some memory benefits, but you will hardly have thousands instances of same react component so noone probably got that far. &gt; &gt;Thats why react related questions does not matter here :) I hardly think it's fair to say that simply because people are wrong/not concerned with the actual question, that the question is invalid in the context of react, but I see your point.
Wow, it's awesome that you did that. I was just thinking that I wanted to do this myself, but was feeling too lazy to go through all of that trouble at the moment. Well done, sir.
- `with`, `arguments.callee`, and `arguments.caller` are now deprecated and will throw errors in strict mode (with modules being automatically strict). - The section "Awful Parts: Scope" is no longer accurate, because the rules it explains for scope and hoisting only apply to `var` declarations and not `let` or `const`. - The style recommendations he makes made sense at the time but are often poor choices with modern code. For example, he strongly recommends declaring all variables at the top of a function or file even if not used until much later, to reflect where ES3 hoists them. Modern code primarily uses the unhoisted `let` and `const` which almost everyone prefers declared as close as possible to usage. - It has a chapter dedicated to using immediately-invoked function expressions as a form of modules, when actual modules are part of the language now. - Crockford's method of shallow-cloning objects is much messier and more expensive than the `let foo = { ...sourceobject }` method you'd use today. 
I was looking at the notes [here](https://github.com/dwyl/Javascript-the-Good-Parts-notes) and all I can say is... there's a lot of things that are going to confuse new people about javascript.
I work on a dojo based open source app but we recently (last 6 months) got it working with dojo-webpack-plugin so now we can use Babel and es6, integrate commonjs npm modules, etc so its been cool. We are planning a big rewrite still though:)
&gt; Which, among full stack developer positions, do you see as more in demand now? Be careful about assuming "what reddit likes" is representative of the industry. Unfortunately when you ask a question like this you often get partially formed opinions and little more. The fact is, it's complicated. Different market spaces have different tendencies. Large enterprises and governments prefer the inherent stability and structure that comes with something like Angular. Small plucky startups prefer React. It may also depend what type of app you're doing. In my experience, highly interactive form-based crud apps are actually better with something like Angular (I use Ember, which is more Angularish than Reactish). There is a lot less required of the developer to wire up and build, and you end up with more abstraction and less boilerplate, out of the box. You also have a much more consistent platform. All (almost all) current Angular apps use Typescript, Angular CLI, Compass for testing, a webpack build (part of Angular CLI, typically), Observables, and $http. By contrast a React app may or may not have any number of tools, requirements and features, including Webpack, Gulp, Typescript, Redux, Mobx, Saga, Thunk, etc. On the whole I'd say React has a strong edge here. It's used by a wider range for the sorts of work *I'd want to do*. But your mileage may vary. If your backend background is in something like Java or .Net, you may find your job options pair better with something like Angular. &gt; Will that change in the future, and if so, why? Probably not, no. &gt; In terms of React itself, some examples I've seen in the past require you to mix presentation and logic, shoving &lt;div&gt;s into functions and such. Practices like this make me cringe. Is this still the main or preferred way to use React, or has it matured? It's not a bug, it's a feature. JSX is just how React works. Personally I think it's shit and I hate it. In practise it's not hard to work with you just have to swallow and ignore decades of computer science best-practise and pretend shitty circular arguments are compelling. 
&gt; Virtual DOM React, Angular, Vue and Ember all use Virtual DOM. This is a point React devs keep bringing up. It's like saying I like this brand of watch because it tells the time. &gt; Server side rendering SSR on React is shithouse. SSR on Angular is also shithouse but I'd argue that it's slightly less so. Ember, by the way, implements Server Side Rendering in a single command line. But whatever... &gt; Not changing like Angular (Upgrade is a real mess) Yes. I like the way the change to React Router didn't completely change eve... oh wait. At least it was all well docume... oh wait. While the change from AngularJS to Angular 2 was pretty rough (no one is disputing it) things have been relatively stable since, and it's followed semver well. React, by contrast, is a continually shifting mix of best practises, new APIs, and new approaches.
It's not a WordPress plugin. From what I can tell, they use a Nivo slider that they embed into the template. * jQuery Nivo Slider v3.0.1 * http://nivo.dev7studios.com Here is the js code: https://pastebin.com/Ty1qrF6J If the timing is not set in this code, how is it set? In the css or html? 
Think of electron like a fancy version of chrome. You start up a script with node, and electron will create a new chrome window displaying whatever HTML you tell it to. This HTML file can include references to CSS, JavaScript, images etc. just as if you were developing a regular website. To communicate between the browser window (called the renderer) and the main process (the script you ran with node that called the electron framework), you can create IPC handlers and senders (ipcMain for the main process, and ipcRenderer for the renderer). A good place to start is with electron forge. It sets everything up for you, and you can take a look at how electron is called from the main process. If you've got more questions let me know. I'm not an expert but I'll do what I can.
The one thing you should know is that any learnings from this are only relevant on the specific JS engine you're testing on. The V8 team especially is known for highly optimizing slower code paths and it's very likely that this result would come closer to tying or could even flip in the future. Even if it stays the same you often see optimizations such that the slowest code path in a later version of v8 runs faster than the fastest code path in an earlier version. All of this make micro-optimizations *that rely on internals* rarely worth anyone's time.
I strongly recommend checking out Charles Crawford's React Fundamentals and Live Lessons. Just google it. It's pricey but I got it for free through my local library. Superb explanations and examples.
That’s interesting. Why does that work when you declare it as a global variable using window. inside parentheses but not with var, const, or let?
Thanks for posting this. This is a great place to start and your point about just picking a project is great advice. If you pick something you’re interested in (even if it’s a bit much at first) you will learn faster in the long run. At least that was my experience when I was getting started. https://youtu.be/mvK0UzFNw1Q This video breaks down getting started in coding and how picking a project (or just a problem to solve) is often the best way to go about learning 
This - simple and effective.
Oh it’s not gonna be deprecated, believe me :-p. Rust has a briiight future.
20 separate library dependencies in a modern complex web app is not at all weird. Often there are lot more. JS bundle bloat is a big problem these days, plenty of articles on this subject if you look into it.
Thanks!!! On a lighter note I am not working on any particular framework.. I work mostly on vanilla JS 
This seems to have improved again after today's update (v69.0.3497.92). Are you seeing the same?
This seems to have improved again after today's update (v 69.0.3497.92 ). Are you seeing the same?
Well done on finding the (likely) issue! We are doing lots of canvas to canvas drawImages too. Edit: It looks like it may me fixed in latest release for us. (v 69.0.3497.92 ) &amp;#x200B;
Author here. So I've been using JavaScript for 15 years but it turns out I still didn't know how equality and "truthiness" work. I thought that the details might be interesting for others who are stuck using this language, so I wrote them up along with live editable algorithmically generated folk songs about flying whales. Hope you find it interesting, if not useful!
Okay, thanks for the reply :)
Also there is azure.cn (Microsoft Azure in China) if you want to give a try.
Was fun to read and that remark on politics was a good laugh for me. Most of the time I run away from politics in tech or Reddit because it gives me so many herpes, but here it was executed perfectly. Well done!
Use npm dist tags https://docs.npmjs.com/cli/dist-tag /r/savedyouaclick
Not true! (as of ~18 months ago :D) Atlassian now has a dedicated team working on first-party integrations. I actually [gave a talk about it a few days ago at Atlassian's developer conference](https://www.atlassian.com/atlascamp/watch-sessions/advanced-atlassian-development/integration-strategies-from-atlassians-strategic-integrations-team ). We typically focus on integrating third-party SaaS services, but our team also happens to use VSCode as it's primary IDE, so certainly keen to have a crack at this. We're just discussing internally as to how it ranks vs some other integration priorities.
&gt; I’ve previously outlined why JavaScript is the most expensive way to accomplish anything in a browser. uhhhhh.... what exactly is faster?
Very interesting - great work. Remember to check off against https://www.makeareadme.com/ for the Git repo. Question: why C++ in 2018 rather than Rust ?
And then we go back to doing as much as we can with CSS and we get to complain about having too much CSS to do dynamic things which are obviously better written in an actual programming language.
Up you go!
Plus if you're writing client code and thus transpiling to browser-friendly ES5, then it's is a matter of what does Babel (or whatever transpiler you're using) output with these differences, and then, how does each browser's JS engine handle *those*. I mean, if there was some kind of huge win in performance across the board I've love to know, but, my assumption has been this is pretty down in the weeds for all but the most unusual use cases.
Sounds like we've got some good stuff coming then! Thanks for setting me straight! 
This is an ad, right? For Bit
[https://www.reddit.com/r/ProgrammerHumor/comments/1ykdi6/web\_development\_with\_assembly/](https://www.reddit.com/r/ProgrammerHumor/comments/1ykdi6/web_development_with_assembly/) Here you are!
Not using it when not needed. For example if you have a blog, it would be a bad idea to use react to render it.
Correct. The docs has added a note on that
&gt; Javascript microwaves here we come! I would prefer a microwave that would not explode in front of my face.
Thanks. A license has been added to the readme. the npm package already has specified one.
&gt; an actual programming language. You're kidding, right?
We have a ws2812b module ready for low.js on esp32. It was shipped with the last neonious one software version and will be readded as an optional module in the next version. Get a neonious one and I will send you the code per mail now. See pic: https://instagram.com/p/BjfsFN-h9n4/
Pfffff.
&gt;We have a ws2812b module ready for low.js on esp32. It was shipped with the last neonious one software version and will be readded as an optional module in the next version. Get a neonious one and I will send you the code per mail now. &gt; &gt;See pic: https://instagram.com/p/BjfsFN-h9n4/ &amp;#x200B;
Ease of use and maturity. But we're monitoring XS7.
You only need the contents of bin and lib after compilation. No node modules, these are just for transpilation of libs during compilation stage.
Well, as long as C++ is higher than Rust on the programming language rankings, I guess we are not the only people using C++. &amp;#x200B; Thank you for the link regarding the READMEs. Will look at that.
He's just an opinionated twat
In the twitter exchange Dan Abramov does a good job shutting down his bullshit
http://nivo.rocks/ https://apexcharts.com/
The style property contains only these CSS-properties that are inside a style attribute of the element. To get the actual computed value from an external style you have to use getComputedStyle(element).animationName.
You mean 7.
I don't think the new features in Angular 7 would bring some breaking changes to the basic concept of DI and other stuff. Of course, the more up-to-date resource I have the more happy I will be!
tl;dr shitty code is bad
a &amp;&amp; b &amp;&amp; c &amp;&amp; d - intention is more obvious - don't worry about something small like this. Only reason I'd use b || c || d in this type of case is if I needed the variables to be checked / function to be ran without short-circuiting probably some kind of micro optimization that the compiler decided is more efficient 
Cute baby though :)
 const a = false; const b = false; const c = false; const d = false; if ((a+b+c+d) == false) { console.log('FALSE'); } false is 0 true is 1 or up if a+b+c+d == 0 the it's false if it's 1 or up then some var is true
CSS is the web's methane.
Yes, and this is one of them...
I’ll try it out, thanks!
It sucks that you cant flash an esp yourself. 
Not particularly safe, if any of the variables are `undefined` you'll get `NaN` and `NaN` does not equal false. `false + false + false + undefined == false \\ =&gt; false` 
Yep it does. In an ideal world we wouldn‘t have to keep anything closed. But in reality its hard to live of Open Source alone.
It doesn't matter where you work. As an engineer, you should be finding optimal solutions. If you can accomplish the same task with 70kb less payload, why not do it? If you want your users to make a 2nd page load, try doing something beyond the bare minimum of what your PO asks for.
No love for [plotly.js](https://plot.ly/javascript/)?
if one of vars is undefined or NaN the not all four are false we want execute something only if all four var is false and i mean (bool) false
&gt; we want execute something only if all four var is false and i mean (bool) false Then it definitely doesn't work `null + 0 + [] + '' == false \\ =&gt; true` 
When people say they hate JS, this is what they’re talking about 
Thanks! And this is not just for embedded devices, right? I have to look into this. I released only one app to production so far as a beta and used electron (well, technically electrify of a meteor app) and it was bulky. That is why I asked. 
Still using jQuery Flot in 2018.
Your right I'm probably thinking too much into it. The intital way describes my intent much more. Like someone else said, it's a micro efficency improvement at most
`!!(0 + false + false) == false \\ =&gt; true`
This is one of the best realisations a programmer can achieve
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every if optimization was your goal i think someone already stated that streams would be most performant with large datasets but I think the function above is how i'd do it.
&gt;Arrow function is 1.5-2x slower then bound function.I tried also doing all calls on single instance, and the difference is almost zero. I'm a bit surprised by this. I had expected arrow functions to be 1.5 to 2 times *faster*, not slower, because a normal function sets up and tears down a variable scope. Arrow functions skip these steps. 
I don't get why apexcharts don't get more love. It needs more dev contributing, but the developper alone did a tremendous job. It seems not that much, but the real power of apexcharts lies when you use large data. It handles it like there's 3 points on your chart.
why you have only 3 arg when we started with 4 vars ? i know it will fail with additional 0 or false that's because false is equal to zero and when we add 0 to false we cast false to int only way i can think to compare 0 with false and get false is `typeof(0) == typeof(false)` and maybe that's the only way to be sure that a var is bool
Hacker News job postings seem like they would be skewed very heavily towards startup jobs.
&gt; some examples I've seen in the past require you to mix presentation and logic, shoving &lt;div&gt;s into functions and such In practice, it's not much different than using `&lt;if&gt;` and `&lt;for&gt;` pseudo-HTML tags to fool yourself, because most of the time that's all the logic you use. JSX allows you to do horrendous things, just like any programming language, so it's up to you to keep things clean.
&gt; why you have only 3 arg when we started with 4 vars ? Laziness, it makes no difference &gt; only way i can think to compare 0 with false and get false is `0 === false \\ =&gt; false` Here's another (more fun) fail case `!!(-10 + 10 + false + false) == false \\ =&gt; true` 
`(-10 ^ true ^ false ^ false) == false`
I like the way how Angular does it but I like to be more explicit in my code. ```js const a = false; const b = false; const c = false; const d = false; const areAllFalse = [a, b, c, d].every(i =&gt; i === false); if (areAllFalse) { console.log('all are false'); } ```
It looks nice :) I've added it to Javascript Visual Explanations - this is a list with links to pages in which concepts from JavaScript/frontend ecosystem are explained visually (pictures, diagrams, animations etc.) [https://github.com/hex13/javascript-visual-explanations](https://github.com/hex13/javascript-visual-explanations)
`true ^ true ^ true ^ true == false \\ =&gt; true`
... have you heard of people saying don't optimize early. It's for reasons like this. Honestly it won't even matter in any application your going to build right now. Build and app, it will teach you much more and your main concerns won't be how to best evaluate 4 booleans.
`(false | 0 | undefined | NaN | [] | null | "" | true) == false` &amp;#x200B; wow that's going out of hand reddit just tell me to wait 5 min before replaying but since i'm on work and have literally nothing to do let's see if there is limit on nested comments on reddit and to where we can expand something like this
This is [de Morgan’s law](https://www.youtube.com/watch?v=tKnS3s8fOu4) in action. Basically, you can simplify the expression down using the ORs to better understand when it will be true vs when it’s false. If you want to go into pro mode, you can extract the if check into a function: ```js const checkCondition = ({ a, b, c, d }) =&gt; { return ...; } ``` That way you can: 1. change it relatively easily 2. write tests for it so you know how it works 3. document it
D3 is the only data visualization anyone needs to learn. Most other tools are just built on top of it. 
That has obviously already been done [https://github.com/jterrace/js.js/](https://github.com/jterrace/js.js/) :)
Not really familiar with any implementation of the JIT compiler on different browsers, but the JS engine might even perform this optimization for you under the hood, meaning it’d see your conditional using &amp;&amp; and change it to the one using || during runtime. This is why micro optimizations are especially worth disregarding in JS. Maybe someone can verify? This might also be a feature of some module bundlers like Webpack?
You've just made the fail case pass by changing the input, that's not how things work. `( a | b | c | d ) == false` checks that none of the values are truthy, it does not check that all the values are the `false`boolean.
Seems like it's the copying that's the killer here, and there are a few bugs open for this already pointing toward a cache size issue, so hopefully it's fixed soon.
[https://p5js.org/](https://p5js.org/) \- Processing library on Javascript. 
I put the 7 values to show 6 possible inputs that will pass your check, but fail the requirement "we want execute something only if all four var is false and i mean (bool) false". 
[removed]
Pick the one you like. Way back when I chose, my biggest personal factor was HTML templating vs. JSX, and it still feels like a valid criterion. What is probably more important now is just the feel of setting up a dev environment, what with all the command line tools and libraries and the internal wiring of the framework itself. That is constantly in your face.
Yep, I figured. I guess it's _one_ path to some kind of fame...
why has the example only A to F letters? 
Accurate
I would guess it is stored in animSpeed 
You're better off using `.some` and checking for `true` as it will sort circuit on the first instance going whereas `.every` looks at every item. OP said later in the post they actually only care that one or more of the items are true, not that all are false.
I wish the letters wouldn't allow stacking on top of each other.
If you do assignments (result1 = await delay1 and so on) it works exactly the same way. &amp;#x200B;
[The sad tradedy of Micro-optimization Theatre](https://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/)
Oh I see!! So the 3 counters start at the same time then? Then this would be the best approach to run multiple awaits that are non dependant, right?
Thank you, I understand it now, thanks very much :)
The problem with 1 is that you are calling `await res(3000)` before you call any of the other `res` functions. So execution stops after `await res(3000)` and waits for that Promise to return before moving on and calling `res(2000)`. In the second example, you create all three promises first, _then_ wait for each one in turn. This is better since you're not waiting for the first promise to complete before creating the second and third ones.
lol!
I have tried adjusting both animSpeed and pauseTime. Neither affected the timing when I tested. 
This is something that's covered in the boolean algebra/logic circuits part of a computer science degree. It's an important identity when you have a limited variety transistors available when designing a logic circuit. `!a &amp;&amp; !b == !(a || b)` Both should be equally efficient. From a style point of view, code can be easier to reason about if you avoid negation. Ruby programming especially encourages avoiding nots.
Cache? 
Performance is not a universal truth to justify things above all other criterion, like love is to partnering with a soulmate. Its a conditional utility that depends on practical value, like partnering with an acquaintance on a business venture.
I'd like some more info on this if you have it. To my knowledge, both would create new instances of the function. 
Hmm, can you please clarify? How do you know `await delay3` is resolving before the other two do? As you see with `console.log`, [and as I am testing myself](https://codepen.io/RoyCurtis/pen/jvxVdL), "end" is properly logged after awaiting the three delays to complete. If you would like, I can attempt a visual explanation; I find those work better for me :P
The interview question already had querySelectorAll set as the variable "lis", so I assume I was supposed to use it. Maybe it was an intentional red herring.
Ah, I see. Thanks!
yeah, `.bind` makes a new instance of the function when called and returns that. What the parent commenter seems to be talking about is how doing inline functions in your render can cause unnecessary GC pressure because every render a new function is created (and can wreak havoc on PureComponents in react, but that's another topic).
No citation or insider information, but I bet `.bind` creates *a* new function, but it doesn't recreate the whole function. `.bind` doesn't need to copy over the old function with all its logic, optimizations, etc. It just needs to have a pointer to the function with some logic to shift around arguments, whereas the property syntax probably at least right now probably actually creates the entire function over again, including the closure information. I think they could optimize to the same thing on the first pass, though, but I'm just guessing based on the profile that this is the issue. It probably also explains the performance problems.
Use a framework. [Vue](https://vuejs.org/), [React](https://reactjs.org/), [Angular](https://angular.io/), or [Ember](https://www.emberjs.com/).
Thank for the tip! &amp;#x200B; But is there like a way to write on vanilla javascript in a way that does not involve doif? &amp;#x200B; (For real though, thank you for linking it these)
And you run into the same problem with bound functions in your render too right? For the longest time I was using bind in my render methods to avoid performance issues, but later found out that they both create new instances so there wasn't really a a difference. 
And i completely disagree that "A" is wrong... A is perfectly valid, and IMO is the better choice in the vast majority of cases. Take a complex form. Writing A is easier to maintain, easier to understand, and while it is technically slower, most forms are going to have a few hundred to a few thousand renders over their whole lifecycle, and they aren't going to need to run at breakneck speed (humans are pretty slow at entering form data). Obviously there are edge cases where A is a VERY bad idea (like any child components that are PureComponents or implement a simple shouldComponentUpdate check), but some very quick profiling can show the error, and it's an easy fix to go from A to B only when needed and not everywhere.
Yeah, but ultimately it's not a problem in most cases. Keep in mind how often your components render. Take a login page, that form might re-render like 100 times over it's lifecycle? Worrying about a few extra MS on each render on a low-end device is pointless when the meatbag typing in their username is doing so at a snail's pace from the computer's point of view. That's why people always say "measure then optimize". Making your whole codebase harder to understand and refactor for some perceived idea of "performance" is a bad idea at best, and it's why 90%+ of my components use inline functions in onClick handlers, or inline objects in props even though it can cause unnecessary re-rendering, because the time it would take me to "optimize" most of them will outweigh the total amount of time that all of my users will ever save thanks to the optimization. Write your code somewhat naively, then test it. Stuff like figuring out you have a bottleneck with your rendering speed is easy, and moving an object or a function outside of the render method is even easier, so don't get ahead of yourself.
ESLint will help you a great deal!
 function isAllFalse (a, b, c, d) { return arguments.length == 4 ? new Set([a,b,c,d]).has(false) &amp;&amp; new Set([a,b,c,d]).size == 1 : false; } function isAllFalseFailSafe (a, b, c, d) { return (a === false &amp;&amp; b === false &amp;&amp; c === false &amp;&amp; d === false); } function getPermutations(list) { const listCopy = list.map(function(val) { return [val]; }); const permutation = function(perm, currentDeep) { if (currentDeep === 4) { return perm; } for (let i = 0, len = perm.length; i &lt; len; i++) { const currentPerm = perm.shift(); for (let j = 0; j &lt; list.length; j++) { perm.push(currentPerm.concat(list[j])); } } return permutation(perm, currentDeep += 1); }; return permutation(listCopy, 1); }; const cases = getPermutations([ true, false, 0 , 1, -10, 10, [], {}, undefined, NaN, "", 'true', 'false' ]); let passedCount = 0; let failedCount = 0; for (let i = 0, len = cases.length; i &lt; len; i++) { let isAllFalseVal = isAllFalse.apply(this, cases[i]); let isAllFalseFailSafeVal = isAllFalseFailSafe.apply(this, cases[i]); if (isAllFalseVal === isAllFalseFailSafeVal) { passedCount++; } else { failedCount++; console.log('isAllFalse fail with args: ', cases[i]); } } console.log('Passed: ', passedCount); console.log('Failed: ', failedCount);
Blog of Airbnb [https://github.com/airbnb/javascript/blob/master/README.md](https://github.com/airbnb/javascript/blob/master/README.md) has lot of good practices (you can also try to find similar for companies you follow) For architecture point of view [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/) is very good. Hope this helps :)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [airbnb/javascript/.../**README.md** (master → 02b4eea)](https://github.com/airbnb/javascript/blob/02b4eea3452b0ae6da666b01f9da23f26148f5b6/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5ufylv.)
Two things: 1. Do any actual I/O or productive works and the benefits of micro-optimizations disappear 2. The JS engines are constantly improving, especially when it comes to newer language constructs.
Thank you!
Because the first console.log to show is the one called on the resolve of delay3, the order they print on console is res3, res2, res1, I dont know if i am missing something 🤔
I always feel weird when I use de Morgan's law, because it's like the single piece of my math BA that I use on anything approaching a regular basis.
Ah my bad. It does seem to be the opposite of `.some` in that `.every` looks for the first falsy value and `.some` looks for the first truthy value for the callback provided.
Ah gotcha, there may be a misunderstanding of what `await` does... `await` simply *waits* for the Promise to resolve, it does not call the Promises' code itself. [The messages will show up even if you do not `await` them at all](https://codepen.io/RoyCurtis/pen/jvxBVo?editors=0012). I assume you mean the "res #3 called after 1000 milliseconds" message. This is shown first because delay3 has the shortest time of the three; 1000 milliseconds. Remember; all three have been executed at the same time, so it follows that delay3 will resolve first. In this case, "resolve" means the `setTimeout` call has been made.
Angular does not use a virtual DOM.
Read the following resources in order: \- [https://eloquentjavascript.net/11\_async.html](https://eloquentjavascript.net/11_async.html) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using\_promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async\_function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)
Hi /u/1deadghost1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Discipline, ES6, classes, functional programming, proper abstraction, unit tests. If you want to add a bit of preprocessing, async/await, import/export, decorators.
Lol you are fuckboi
Definitely agree re DevOps and traditional Administrator folks. Hard not to live and breathe bash tooling at some level in those roles. Surprised to hear your backend folks trend more proficient on CLIs, though. With one exception, the backend folk on my team rely heavily on their IDE tooling, and the frontend team gets tapped in to help with scripting support or sshing into boxes during emergencies. For that matter, the CLIs we publish are the responsibility of the frontend team.
It seems he was referring to the article’s comments 
Awesome tests and I'm a surprised by the 1.5-2.0x difference between the two. I figured with compilers not having a lot of time for optimizations of arrow functions yet, it would be slower but I didn't expect it to be that much slower.
Hi /u/OptimalCarpenter, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Read the following resources in order: \- [https://eloquentjavascript.net/11\_async.html](https://eloquentjavascript.net/11_async.html) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using\_promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) \- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async\_function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)
Hi /u/kiarash-irandoust, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/spabsa, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/el-calde, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/OneTwentyZero, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/justwannajust, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In JavaScript, the main tool for structuring your code is the function, I'd take advantage of that as much as possible. For example, you can write functions with a small, private scope by writing them inside another function: function func1() { function func2 () { // This function can only be accessed from inside func1 } } You can use this technique to keep code out of the global scope if it doesn't need to be referenced by using an anonymous, self-executing function (function () { // this will execute but nothing will be added to the global namespace }());
Transpiling is generally taking one source language and converting it to another, or one version of a source language to another version of that same language. What you're dealing with is the use of an API for a specific library. That's not something a transpiler would help with you much. Given that you may have altered it some doesn't help (nor corner cases, etc.). I think you're left to doing this mostly by hand. You'll probably have some luck with some search and replace, but I suspect you're in for a bit of some manual effort - which is probably good because it should help you identify and tackle the edge cases. That being said, even though you're targeting ES5, you can still use all the _real_ fancy shiny JavaScript because... transpilers. Write standards compliant ES2018 code and transpile that down to ES5 so it works correctly on your engine.
Oh, I see now, the logs are because of the assignments, I was totally confused, thanks for your time man, much appreciated :)
Thanks for the correction! I’ll have to look into the difference. It sounds like Angular’s approach is similar to Aurelia’s, an alternative way of abstracting the DOM state. 
Yep, I’ve been rightly corrected on that. My understanding was wrong. My life is a lie and I’ve brought shame on my family. Though no more than usual. 
I wish more people understood this. JS has plenty of weird behaviors, but complaints about float behavior aren't valid when it's actually IEEE 754.
A few years ago my company I was working at was developing some mobile games using HTML5. And we did a lot of performance testing to make sure everything runs smoothly on different devices. What we learned back then is that there is absolutely no point in optimising anything without profiling the end result. You might spent a lot of time doing micro-optimisations of your JS just to get a bottleneck at rendering. So write your code following best practices, make sure it is concise and easy to support. Then profile, pin point your bottle necks, fix them and annotate these fixes explaining why they are there and which environments require them. Because some optimisations for browser X can destroy performance in browser Y. Premature optimisation is the root of all evil. Write, profile, refactor.
 Execution of program written in 'Codepen' occurs like this: 1. Define variable 'start' 2. Define variable 'i' 3. Define a general function named 'res' (does not execute) 4. JS Engine encounters a try block and enters 5. Logs 'begin' 6. From right hand side, starts executing 'res' with timer argument value of '3s' and stores the promise object returned in variable named 'delay1'. Since setTimeout in 'res' is an asynchronous call, JS Engine will handle the code written in its callback at later point of time when the timeout completes. Till then it moves on 7. Executes the next statement from right hand side, calling again a 'res' function with timer of '2s', storing its promise in variable named 'delay2' and move on without waiting for 2s. 8. Executes the next statement from right hand side, calling again a 'res' function with timer of '1s', storing its promise in variable named 'delay1' and move on without waiting for 1s. 9. \* Since, generally a computer can execute millions of statements in a second. None of the code written in callback of setTimeouts created in previous 3 steps has started executing. 10. Logs 'awaiting 1...' 11. Encounters 'await' statement, wraps the statement following it in a 'Promise' object if it is already not and waits till the 'resolve' statement in its callback executes, which in this case for 'delay1' will execute after '3s'. So, the JS engine waits here before proceeding further. 12. Before the wait of '3s' ends, in '1s' it was time for JS Engine to trigger the execution of the callback in 'setTimeout' associated with the 'delay3' and thus produces logging statement that starts with 'res #3' 13. Also, before the wait of '3s' ends, in '2s', it was time for JS Engine to trigger the execution of the callback in 'setTimeout' associated with the 'delay2' and this produces logging statement that starts with 'res #2' 14. JS Engine proceeds by loggin 'await 2...' and then encounters an 'await' statement associated with 'Promise' object stored in variable named 'delay2' but that has already been resolved as the 'resolve' statement in the setTimeout of 'delay2' has already been executed. 15. JS Engine proceeds by loggin 'await 3...' and then encounters an 'await' statement associated with 'Promise' object stored in variable named 'delay3' but that has already been resolved as the 'resolve' statement in the setTimeout of 'delay3' has already been executed. 16. Logs 'end' I would suggest you to read the resources carefully mentioned in my other comment of this thread and do not let variable names hinder with dry logical concepts of programming and think like a machine in the beginning. Once you get the hold of the concepts and become comfortable with abstractions, you can and should do it. Someone has tricked you to make you learn by confusing your natural interpretation of meaning 'delay' with what is just a variable name in the above code block. All the best and have happy learning. &amp;#x200B; &amp;#x200B;
I'm happy to debate this stuff, as this kind of thing is more of an art than a science! Personally, I don't like to pull out something into a function unless: 1. It's used in more than one area. If a function is only used in one spot, I won't ever pull it out into a class property/method as being separate implies there is a reason for it to be used elsewhere. 2. It's large/complex enough that it would clutter/confuse the method it's in. If for example a function call is doing multiple steps or is implementing some logic that is more than an unwritten "threshold" of complexity, then I'll pull it out. 3. there's a performance bottleneck that requires more esoteric code, and in this case it MUST be commented if only to prevent someone from undoing the optimization at a later date in the quest for cleaner code. the "A" example from above was a bit of a weird one, but i'm more talking about this... A: render () { &lt;div onClick={() =&gt; this.setState({ divClicked: true })} /&gt; } B: divClicked = () =&gt; this.setState({ divClicked: true }) render () { return &lt;div onClick={this.divClicked} /&gt; } A keeps the logic contained in the render method where IMO it belongs, and it's insignificantly larger than B. B splits the logic up (if there was a page of other code between the render method and the divClicked method and you didn't know what divClicked was doing, you'd spend alot of time jumping around the code), and it does so for no real benefit (unless there is a measured and impactful performance problem there). Granted, if I was trying to do more than a single-line's worth of work in the onClick, then absolutely pull it out (because at that point the divClicked is it's own "unit" and should be handled separately and abstracted away behind the function call), but until then I see no point to do B in the vast majority of cases. 
I might use this for [www.fedsimulator.com](https://www.fedsimulator.com) \- been looking to replace localStorage with someone more reliable.
a pattern I like to do here is to name the vars that store the promise "somethingPromise", for example: const delay1Promise = res(3000) const delay2Promise = res(2000) const delay3Promise = res(1000) That can help convey the point that it's a promise sitting in those variables, not a value, which is monumentally helpful when you are in a complex function with lots of un-resolved values (promises) and fully-resolved values floating around.
You only defined the function, but you never called it. 
Not necessarily, because the awaits could still be important (imagine if you wanted to await the `example` function elsewhere in the code to wait to do something until all 3 delays are finished). A better pattern is to do what /u/RoyCurtis showed above and refactor the second one to: `await Promise.all([delay1, delay2, delay3]);`. It makes it more clear what you are doing, and will prevent the function from returning a resolved promise until all 3 are finished (or any of them throws). Then the "user" of the example function can decide if they want to call it like `example()` and ignore when it finishes, or they can `await example()` and block something until it's completely done.
So I actually do this later in the script: &amp;#x200B; **{** **var avgPrint = document.getElementById("avg");** **avgPrint.innerHTML = ("&lt;strong&gt;Average= &lt;/strong&gt;" + avg);}** **}** &amp;#x200B; Then in the html I have an id called "avg" like this: **&lt;aside id="avg"&gt;&lt;/aside&gt;** &amp;#x200B; Then I use an event listener at the end of the page to call the function at page load that looks like this: &amp;#x200B; **// this section calls the function when the event "page load" occur** **if (window.addEventListener) {** **window.addEventListener ("load", computeAverage, false);** **} else if (window.attachEvent) {** **window.attachEvent ("onload", computeAverage);** **} // END IF ADDEVENTLISTENER** &amp;#x200B; I get a result of NaN every time. I edited it to look like this: &amp;#x200B; **&lt;script&gt;** **var testScores = \[84,72,56,84,0,76,72,68,70\];** &amp;#x200B; **function computeAverage(testScores) {** **var sum=0;** **for (var i=0; i &lt; testScores.length; i++) {** **sum += testScores\[i\];** **}** **var avg = sum/testScores.length;** **{** **var avgPrint = document.getElementById("avg");** **avgPrint.innerHTML = ("&lt;strong&gt;Average= &lt;/strong&gt;" + avg);}** **}** **&lt;/script&gt;** &amp;#x200B; Same result every time.... &amp;#x200B; &amp;#x200B;
Hmmmm interesting. I’ll save this for later and dig deeper. Does low.js have native ES6 support??
I did [this](https://github.com/tobozo/jqsheep) 5 years ago after learning a bit of jQuery. It's a whole set of bad practices completely devoted to uselessness, every time I re-read the code I discover a new horror, keeps me humble :)
You never supply to argument to the function either. 
I’ve been working on a personal project trying to teach myself JavaScript! It’s an HTTP server using Node and Express. As my experience is all in OOP based languages, I’m sure there’s some stuff that’s not very idiomatic in JS. [Here’s the repo](https://github.com/connorgilheany/NoteIdentifier) There’s a README that explains a little bit about the motivation behind the project and some info about my authentication/user tracking. Any feedback would be appreciated! Thanks in advance. 
You could make your function more terse const avg = (scores) =&gt; { return scores.reduce((a, b) =&gt; a + b, 0) / scores.length } avg([84,72,56,84,0,76,72,68,70]) // 64.66...
No
Hi /u/dwaxe, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/seanmbarker, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Let me emphasize that using a variable name as an argument, when defining a function, don't make your definition a call. You wrote: `function computeAverage(testScores) {...}` but here `testScores` is an argument. You could/should replace it by anything: `function computeAverage(values) {...}` Btw, you could calculate average like this: `const computeAverage = (values) =&gt; (values.length &gt; 0) ? values.reduce((psum, value) =&gt; psum + value, 0)/values.length : 0`
We ended up disabling source maps on our webpack build because it sped things up so much. Not leaking our actual source code was just a side benefit we hadn't really considered.
Hi /u/wangmobile, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
So this just isn't complex enough? You guys have help flairs so I assumed this is a good place for help. Just not sure which rule is being violated. 
I see what you're saying. Yeah, that is important. I think what I meant was just that, in the way the 2nd one is written, the `await`s aren't necessarily doing much. I do really like /u/RoyCurtis did with `Promis.all()`. I've been working on something lately where I've got some `async`/`await` functions, but then use `Promise.all()` to resolve a mix of functions. 
One additional comment just for knowledge sake. When you call the async functions they return a promise (if your familiar with the idea.) The awaits are basically the points where you stop your code and require either an error to throw or the promise to resolve to a value. 
Right, this not a very challenging problem. The code is correct and works, and don't take offense, but you just don't know what to do with it now it appears. http://jsfiddle.net/ghqvdm1r/ Please see /r/LearnJavascript for any additional questions.
I recommend either using the ES6 `import/export` syntax and compiling with [Babel](https://babeljs.io/) or the node style `require/module.exports`: export default function increaseCounter() { ... } or: module.exports = function increaseCounter() { ... } You should look into bundlers like [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/guide/en), and [Parcel](https://parceljs.org/). Most of your users will expect the library to work with these tools.
as an amateur programmer, I struggle greatly with this. I constantly overthink performance of everything and go crazy lengths to avoid an extra function call, or accessing indexed members directly. It's ridiculous. I have to keep reminding myself that its ridiculous. And the bitch of it is, most times I try to avoid a call or something... the compiler is just gonna inline it how im trying to write it anyway! ugh, /facepalm
Link?
What do you guys do in your company to support new engineers? Is there anything we are missing? We would love to hear the opinion of the community! 
Re TIOBE: sure it is. But here's what I'm watching from a moderate distance - everything is being rewritten bit by bit in Rust by a new generation of software professionals. It's up and down the stack where this is happening, but the one that's I'm thinking is unstoppable is "bottom up": Say Libjpeg gets rewritten in Rust, and it gains bindings to Java, C#, Python, Ruby (and others), then that becomes the definitive implementation that everyone cooperates moving forward, displacing other implementations. Well it does if it also has plenty of test cases.
&gt; circle jerk Lol at the irony. Alex Russel worked on Dojo, Chrome and is part of TC39. Dismiss his arguments at your own peril.
Since you declared `avg` inside the function, it's scoped locally to the function, and isn't accessible outside the function. You need to either return the value from the function, or use a global variable.
No, JSX is completely unrelated to WebGL. JSX is another syntax for nested function calls. It turns HTML-like syntax such as `&lt;div style={{display : "flex"}}&gt;Hello World&lt;/div&gt;` into `React.createElement("div", {style : { display : "flex"}}, "Hello World")`. It has nothing to do with graphics at all. I'm curious, what prompted this question?
Despite the name, `create-react-app` does not _require_ that you use React. The initial project template does auto-add the current versions of React and ReactDOM, and gives you a couple files that set up the basic React rendering process, but you can delete those files and remove React from the project as soon as you've created it.
I know I have a really specific problem. But I was hoping for someone with a similar problem or to give me hints where to look exactly. We'll have to do it by hand anyways, but I was hoping to automate most of it. Maybe search and replace is the best way to get 90% of it out of the way. Thanks! :)
Sometimes you really want/need to explicitness you know? I don't think you are solving any real problems yet.
Thanks! 
The general argument is that you can get better perf if you spend some time learning to use the underlying tools properly, rather than relying on heaps of libraries and frameworks that wastes several milliseconds parsing their own JS, blocking rendering, etc, in the name of "maintainability" but with little to no scientific methodology to back up either the maintainability arguments or performance claims. Developers generally don't understand the fallout from the lack of rigor because typically they only use React or Angular or Vue and whatever they use runs well enough in their modern devices connected to fast networks. Plus, they don't typically have the budget to work on perf to the extent that a Googler like him does, so a typical developer has a much lower bar for what constitutes good quality. With all that said, he somewhat undermines his own point by acknowledging that some frameworks do indeed go to some lengths to minimize performance issue (e.g. svelte). If I were to take away something from this, it would be this: learn the fundamentals enough to be able to consider what frameworks have more performance-oriented architectures, and push for those technologies + investments in technical learning/expertise building, when there are discussions about technology adoption (particularly when one of the options is a popular technology whose appeal is that you can delve into a large but bloated ecosystem of libraries that an experienced developer would be able to do without).
I'm most probably confused about this but I was looking at this example on their github [https://jsx.github.io/examples/fireworks/fireworks.jsx](https://jsx.github.io/examples/fireworks/fireworks.jsx) &amp;#x200B; And its (observable) performances could dip fast when you enhance the FPS and the resolution (no metrics). 
yup! One of the biggest mistakes i see people new to async/await doing is to overuse it and to just completely stop using promises for the most part. Promise.all, Promise.race, and storing an unresolved promise to `await` or `.then` it later are all still extremely useful and shouldn't be ignored, because it's not until it's all used together that A/A becomes really powerful.
this is a terrible idea
“Make it work, make it right, make it fast.” — Kent Beck 
That "JSX" link appears to be a separate programming language. It's completely different than the JSX syntax that is commonly used with React and similar UI frameworks.
`TDD === "Test-Driven Document"`
Excuse me for the inconvenience then. I must’ve ran out of ways to make a fool out of myself.
It would be much nicer if you could stringify something and parse the results to get the same data that you put in originally. Your first example shows a date being stringified, but it does not include the d prefix, meaning parsing the results would give you string data right? The class part of this reminds me of yaml properties when they are deduped, it honestly makes it much harder to read, especially if your dataset is large.
If OP had assigned a value to the `resolve()` call, those would be available directly from the `await delayN` blocks, if those too were respectively assigned to a variable.
&gt;seems like a strange thing to consider Absolutely. I couldn't care less how something is being achieved under the hood of a framework. All I care about is end results. Is it performant? What is the api like? Etc. Worrying about things like whether or not a particular framework actually uses a virtual dom or does something else is ridiculous imo.
I like to eliminate the branch: if (a &amp;&amp; b &amp;&amp; c &amp;&amp; d) { return; } console.log('all are false');
First off, thanks for writing this article. As a more senior engineer that has worked with a lot of juniors / interns, all too often I see them getting left mostly on their own. Mentor-ship is so important for people just getting started as that initial period of getting into the industry is really fundamental to how they will approach problems / challenges for the rest of their career. Having someone who is there to support the junior is really essential since some of the non "buddy" engineers, especially seniors, have a tendency to shut people down instead of offering good advice or ways forward. Those first years will really determine whether they are an engineer who thinks of new ideas and offers solutions or someone who just does things how they've always been done and offers no real opinions whatsoever. 
Note that you probably shouldn't have business critical functionality in your JS front-end. Hide it behind a REST service or at the very least compile it into WebAssembly (one of the few use-cases of WASM IMO). Minified JS is obscurity, not security.
Wow, thanks. I'll look into it. 
I highly recommend using ngrx if you like redux! Also get into rxjs! It’s really deadly combo for async/sagas (aka ngrx effects) 
False
Also be able to rotate! &amp;#x200B;
holy heck, thank you!
Copied this from another comment I made last week. I have several thoughts on developing talent on the job. I'm sure there are plenty of people who drop out of SWE careers early because they feel overwhelmed by it. Some of this attrition is natural, but I'm positive that a lot of it is caused by a simple lack of good mentorship. Once we spend the time to improve mentorship then not only will we have a larger pool of talented engineers, we will also have a more diverse pool. And those who do eventually leave the field will hopefully have learned some valuable skills that can apply elsewhere in their careers. - *Workers in all fields need to know their work is valuable.* Am I hoarding all of the 'important work' for myself? When I give a Jr engineer a task, can they tie it back to tangible value for the project/business? Are they being challenged by their work in a healthy way? - *Time is precious, so we need to invest it wisely.* Am I willing to slow down my pace when working with Jr engineers? Maybe that extra cup of coffee this morning was not such a good idea. Maybe the deadline is not realistic, or maybe getting the code to be 'perfect' is not worth as much as developing Jr talent. On a more traditional team, am I collaborating with management to budget the time needed to invest in Jr talent? - *Learning how to learn is the most important skill to master.* When working with Jr engineers do I help them develop an ability to learn? Do I give them time to work things out on their own? When reviewing their code do I just change it all because it is not how I would have done it? In cases where corrections are necessary, do they understand why? Do I give them time to process that info and figure out a solution on their own, or perhaps co-develop a solution as a pair? Am I encouraging thought, or am I immediately providing all the 'correct' solutions? - *We are lifelong learners, and we should be open to new ideas.* Am I open to different ways of accomplishing a task, even if I would have done it differently in solo? Am I open to a Jr engineer giving me feedback about my own work? Am I willing to co-develop changes to my own work based on the feedback given by a Jr? Do I validate their thoughts on improvements to my work? Do I implement their feedback, and let them drive the changes in a pair session? - *Teams works best when we share a productive demeanor.* Am I being receptive to how Jr engineers receive and process feedback? Am I using the correct tone; not being corrective and eager to finding fault, but rather curious, patient, and eager to discover solutions? - *We can be obsessed with elegance and optimizing to the nth degree.* When working with Jr engineers, are these goals in harmony with their learning path, or do they detract from it? How much should we refactor for elegance, and how much should we leave as is, so the Jr can develop confidence and a sense of pride in their work? Which refactorings provide tangible benefit and which are just syntactic sugar?
You could also do const [val1, val2, val3] = await Promise.all([ res(3000), res(2000), res(1000), ]) and avoid the intermediate variables for the promises.
nitpick - that is concurrent, not parallel :)
I thinks strings have quotes dates do not. 
[removed]
I had the concepts wrong, I thought that promises only resolved in the moment you call them with 'await' or '.then'. Now I see that they resolve in the moment that they end their task. &amp;#x200B; Thanks :)
No. They do not get resolved when the async task is completed but when the statement 'resolve()' is called, period. Then the callback in the immediate 'then' statement of that promise object is triggered.
Haha ok so I’ll give you the low down: RxJs is “reactive extensions for JavaScript” it’s a JavaScript implementation library of “reactive programming” which is really just a toolbox of composable functions for handling (asynchronous) data. Ngrx is an implementation of the redux architecture style, ie. actions, reducers, state, side effects that uses rxjs to achieve this architecture! So you could implement your own redux like system to learn more about rxjs or you could start with ngrx since it’s extremely well documented officially and unofficially on blogs. Rxjs will seem a little daunting at first because it has all these “operators” but start small. Learn about observables, the pillar of rxjs, then look at map, filter, etc these will be familiar to array prototype methods. Another thing worth mentioning is that angular also uses rxjs under the hood! And in fact the http client uses it which will come in handy when you want to do redux async side effects cleanly (see ngrx-effects). Feel free to message me if you have questions or need blog post recommendations I can send you some bookmarks 
I agree, parcel is very nice in my opinion. zero-config to bundle a web application or a library
Never really understood why this was a problem? 
Isn't WASM on the same level as obfuscation, security-wise?
Hard to tell at this point since I don't know if there are any comparisons in difficulty to RE JS vs WASM. I'd expect WASM to be more difficult though. Even still, they are both security-through-obscurity. I just meant WASM would probably be good enough for most apps that want to hide business logic that isn't hyper-critical or secret (such as encoding of a proprietary file format).
Just had a quick Google and this popped up... https://parall.ax/products/jspdf But there's other libs out there for the job 👍
I would have applicants fill in a form on a web site / intranet (which stores the info into a database), and then use pdftk to form fill the fields. Use a shell script to print it automatically.
I think it wouldn't be simpler to do this with python.
I don't think it's possible to print without having a prompt, but if you're interested in generating a PDF, I had success using Puppeteer to generate one. https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [GoogleChrome/puppeteer/.../**api.md#pagepdfoptions** (master → 7ec0801)](https://github.com/GoogleChrome/puppeteer/blob/7ec08017292e9346592620a768182bc4315807bf/docs/api.md#pagepdfoptions) ---- 
Thanks for the reply, seems like some nice tutorials. Going to check out !
Well for a moment i thought you were speaking chinese :P I gotta update myself more with this. Although nowadays it is way easier to test javascript with the Chrome Console compared to making an html file some years ago...
I honestly can't think of a use case for storing anything of a sensitive of business critical nature into a frontend setup. So it doesn't really matter if the code has source maps or not, the most that can happen is some enterprising developer takes a peek under the hood and learns a thing or two. Who cares, you and I have done the same many times over. A positive effect of publishing the map files to production is that you can quickly debug an issue on the live site if you can't easily replicate it on the acceptance environment.
Trying to understand how this approach might differ from just using CSV?
Yeah, thanks. I was going to update the thread but you beat me to it:) The new update makes a difference, but I also dropped in a lot of OffscreenCanvases to see if that helped, which I think it also did. I'm still trying to figure out how they work, but they seem pretty interchangeable with regular Canvas, except without style attributes. I already had all Canavas calls wrapped in my own class so it was pretty easy to swap where needed and still handle browsers without OC support. Jury is still out, I want to see some super crazy performance increase without adding workers to my game loop. Not worth 2 days of existential dread so far.
Try the new build. Version 69.0.3497.92 &amp;#x200B; I updated versions, but also made a bunch of other changes, including some OffscreenCanvas stuff, and it's better. Hope it works for you.
Try updating to the newest Version 69.0.3497.92. It seems to work better. Good luck!
I built a chrome extension to easily browse starred questions on Stackoverflow in an embedded sidebar :) [https://chrome.google.com/webstore/detail/stackoverflow-starred-vie/cnamfgnggohmnbilcjdnjjahlgkndhmp?hl=en](https://chrome.google.com/webstore/detail/stackoverflow-starred-vie/cnamfgnggohmnbilcjdnjjahlgkndhmp?hl=en) Feedback is greatly appreciated 
I made [this](https://github.com/4k1k0/lainpp) browser extension a few months ago. It adds a few extra options to [lainchan.org](https://lainchan.org) 
So instead of pointer casting, structs, actual integers, and direct access I get: * origami type mangling * some nice string functions * lexical scoping with context sizes up the ass * forced doubles that need to be OR'd against 0 in order preserve integer-like semantics And any semantics radically different from most JS on the web pretty much begs the question since: * C devs will need to learn a new language that doesn't actually make embedded systems easier to program, given the above. * Webdevs will need to learn lots of new shit to even just print an LED. * People who don't have an understanding of embedded systems will be liabilities on many different kinds of projects if they touch any relevant code. JavaScript is just as volatile as C. Like C, it was also written for a very, very specific model of programming. It's advances as a language also haven't actually accomodated embedded systems in any significant way. Given my current understanding, I wouldn't touch it with a 10 foot pole for aything remotely serious. I do understand that whoever contributed toward it clearly sunk time and effort into it, and as a result I don't mean to come off as abrasive: I do have respect for someone seeing this through to finish. But if you *really* want to avoid C, look into Python, a functional language with a proven ecosystem for your target platform, or Rust. 
I didn't look too much into it, but in your MovieDetail.js file, if you're going to use async/await, you may as well use it throughout for stylistic consistency (rather than mix async/await with .then promise chains). Something like this: const response = await fetch('the url'); const json = await response.json(); this.setState( { someData: json } ); After typing this I looked back and saw that you had something like this in a comment block, so maybe you're just still working through it. You should also avoid committing your API key, instead, read it from a .env type file (you can have separate ones if you need like .env.development and .env.production) and add those files to your .gitignore.
None. Angular is trash
How much savings does it result in for gzipped files? 
I initially had the async await style throughout all of my calls but I added in the chained promises because I was making two different calls to two different apis (one for movies and one for movie reviews) within the same component. Could I do that within the same async/await structure? And honestly didn’t even realize my api key was in there, good call I’ll fix that. Appreciate it!
A basic webpack config that runs your code through the babel-loader would give you what you want I think? You can "eject" the webpack config in create-react-app if you wanted to have that as a reference.
Non-Mobile link: https://en.wikipedia.org/wiki/Order_of_operations *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^211482
what inside in x? 326?
Because as a junior engineer (or not-an-expert-yet in a subject matter), a lot of the times one does not know what questions to ask or how to ask them properly. Let alone finding the answers one needs and understanding them. I remember when I was first starting out a few years ago teaching myself how to code, I would be googling things like "What happens when you hit submit on a form?". Little did I know that I was looking for concepts such as event handlers, AJAXing, even Javascript, etc. Having a mentor allowed me to learn how to ask questions that I could then find the answers to. And on top of that, I'm also just a hands on learner - I can read/watch videos all I want, but at the end of the day I personally learn better from another person. Also it's the simple fact that when interacting with someone else who knows more than you, they can guide you to finding the answers you need. Google/textbooks/learning materials don't quite have that ability, yet. Mentorship has been 110% crucial to my success from figuring out how to build basic HTML/CSS store-front websites to being a software engineer at a unicorn tech company in the span of three years. Informal and formal mentorship is the greatest boon any learner can have.
Quite simply put, in the first one, the line const delay = await res(3000) essentially stops the execution of the code at that point in time until the awaited value has resolved. If we were to use promises, it would look something like this: let delay1, delay2, delay3; // we will reference these via closure. res(3000) .then(d1 =&gt; { delay1 = d1; return res(2000) }) .then(d2 =&gt; { delay2 = d2; return res(1000) }) .then(d1 =&gt; { delay3 = d3; })
There should be an article about how to convince a company to invest in right out of college or Jr developers. I currently struggle with getting this concept across. Even trying to get interns is hard.
Yes, during the first iteration. It's running `while (x &gt; 0)` though, so will continue to loop through the code until x is less than 0, at which point it will stop. If you want to see what the value of x is while it's looping try putting this part of code into the browser dev tools console but add `console.error(x)`. Using error to avoid needing to change the console logging level to be able to see logging output from the function.
I have no idea what this does, but congrats!
why answer 36?
Mentoring - i.e. a person who it's okay to ask 'stupid' questions is one thing. Full on paired programming is something totally different.
Not for es-latest. There's an issue in the current version where the useBuiltIn option in Babel's env preset isn't used. (Parcel is fantastic otherwise, and I believe the issue is already fixed in master).
That's weird, in the UK we learn it as BODMAS. But division and multiplication are in different places. They can't both be right.
Maybe I'm naive but I feel like should this truly be an issue a better approach would be shoving parallel arrays under each property name, i.e. &gt; { name: ['John', 'Bob'], age: [22, 25] } 
Because that's what the mathematical rules, when combined with it's particular loop, cause the outcome to be. I don't have a PC so i don't want to try to write it all out. It is only 3 iterations though, so you should be able to do it. Using `x = (x - (x % 10)) / 10` instead of the original may help you remember to do the parts in the parentheses first. These are the results after each iteration: 1. `prod = 6`, `x = 32` 2. `prod = 12`, `x = 3` 3. `prod = 36`, `x = 0` Working through this manually will also help you learn to visually walk through code which is both useful and fun.
Interesting; had never heard of that! PEMDAS = Parentheses, Exponents, Multiplication, Division, Addition, Subtraction BODMAS = Brackets (parentheses), Order (exponents), Division, Multiplication, Addition, Subtraction From the Wiki: &gt; These mnemonics may be misleading when written this way. For example, misinterpreting any of the above rules to mean "addition first, subtraction afterward". Lol. Broken mnemonics.
- gzip handles the majority of loss from repeated keys - protobufs, etc handle the cases where this *really* matters - Any decompression you add is going to make this slower than JSON - Your Date format is... abysmal TBH. Why not do something like adding the constructor call? - DON'T TOUCH OBJECT PROTOTYPES
Huh, well I'll be damned. I'm surprised I'm in my twenties and went through school and a maths-based degree without knowing that. You learn something new everyday! Thanks mate
someFunction(){ return !a &amp;&amp; !b &amp;&amp; !c &amp;&amp; !d; } Will return true if all are false, else return false.
Completely agree. It's so beneficial to hire engineers that will not just be a super star engineer but also help bring up your entire company by investing in junior talent. Often it's really hard to approach a senior engineer without feeling intimidated. I definitely remember that feeling! 
It's a valid question. It comes down different learning styles, different drives, different personalities. I didn't have a mentor, but i spent a lot of time doing things the hard way. Sure I learned a lot along the way, but i feel like i wasted a lot of time in my early years trying to knock down walls with crowbars instead of sledgehammers. I would've benefited a ton from a tiny bit of direction.
Coding around the kitchen table? This profession didn't used to suck.
Very true that you really don't know what you're looking for when you start out in your engineering career. I had the most incredible mentor and I went from being a complete beginner to a senior engineer in &lt; 2 years. He taught me life long lessons about being diligent about best practices and always striving to do better. I would not be where I am in my career without my first mentor. I think it's valuable throughout your career as well. It's also really hard to learn how to code. It's really nice to have someone around to help out when you get stuck and feel frustrated. My first mentor would give me a task and let me try to figure it out, and if I got really really stuck - he'd help out. I felt completely lost at the time but it helped me learn to figure out to learn things on my own while still feeling supported and not overwhelmed if I got stuck. A small task would give me some direction, but also autonomy when I worked alone.
Decompilers aren't great, once it's binary it's pretty difficult to re-engineer the source code.
False
[This](https://brianflove.com/2018/03/04/rxjs-the-basics/) is a decent beginner primer for rxjs and includes a fair bit of comparing it to promises. [This](https://scotch.io/tutorials/rxjs-operators-for-dummies-forkjoin-zip-combinelatest-withlatestfrom) and [this](https://blog.angularindepth.com/learn-to-combine-rxjs-sequences-with-super-intuitive-interactive-diagrams-20fce8e6511) are pretty good articles for understanding how a lot of the common rxjs operators work and give examples of the things you can do with them. I really can't speak highly enough of rxjs. It's one of the best parts of Angular. One of the best pieces of advice I believe I can give is learn to use rxjs early. If you use [observables in angular](https://angular.io/guide/observables-in-angular) you'll have a better development experience than if you try to ignore them (imo anyway). When you start, just try to do extremely basic stuff with them. First make sure you understand how to make a subject (input end of an observable stream) and then listen to it in a subscription (output end, similar to `then` for promises). I just wrote [this post](https://www.reddit.com/r/angular/comments/9erncd/best_way_to_handle_addingdeleting_from_an/) the other day explaining scan to someone so maybe seeing a slightly complicated use of rxjs can help. Also [here is a post](https://www.reddit.com/r/Angular2/comments/7luhsx/subscribing_to_state_in_service/) I wrote attempting to explain the concept of observables at a higher level so if you aren't understanding them maybe that can help as well. [Ngrx](https://github.com/ngrx) is pretty great. Just be aware that their [example app](https://github.com/ngrx/example-app) is intended to show *all* best practices and, for what the app does, is needlessly complex. It's supposed to be a showcase for all the features rather than a simple example to explain the concepts. The concepts are mostly the same as redux so if you already know it you will understand the basics of ngrx very quickly. If you do check out ngrx make sure to also check out [their schematics](https://github.com/ngrx/schematics-builds) which is ngrx specific plugins for the [angular cli](https://cli.angular.io/) to generate ngrx code. Speaking of which, definitely use the cli. And keep in mind that it does a lot more than create react app. It does project generation, test running, and a development mode with hot reloading but it also has code generation abilities and can be extended with schematics and builds. Builds are relatively new so I don't have much to recommend for them but its worth doing a quick check for schematics for any major Angular library you choose to use. In addition to ngrx you can also check out [ngxs](https://github.com/ngxs/store) and [akita](https://github.com/datorama/akita). Both are similar single store state management with actions, reducers, and selectors but both of them operate more like the rest of angular where they make use of decorators and dependency injection. In my own work I use the [proxy pattern](https://en.wikipedia.org/wiki/Proxy_pattern) for my store interface. Basically, that means I write a service that actually does the selecting on store slices and maps exposed methods back to dispatching actions at the store. That way the components don't have **any** store specific code inside of them and the store model is completely abstracted from the components themselves. It can be a bit controversial as some people claim it adds too much complexity but it has allowed me to reuse my components in any way I see fit and just change which exact proxy implementation that is injected into them. Speaking of [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) if you aren't familiar with it you should learn about it. DI is how you can compose functionality inside a component or even another service. Also, the /r/Angular and /r/Angular2 subs are good resources for Angular specific stuff. 
Here's a sneak peek of /r/angular using the [top posts](https://np.reddit.com/r/angular/top/?sort=top&amp;t=year) of the year! \#1: [Request: Merge /r/Angular2 and /r/Angular](https://np.reddit.com/r/angular/comments/8wenp5/request_merge_rangular2_and_rangular/) \#2: [Angular v6.0.0 has been released officially!](https://github.com/angular/angular/blob/61265b4/CHANGELOG.md) | [16 comments](https://np.reddit.com/r/angular/comments/8gte9n/angular_v600_has_been_released_officially/) \#3: [Version 5.0.0 of Angular Now Available – Angular Blog](https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced) | [2 comments](https://np.reddit.com/r/angular/comments/7a5djl/version_500_of_angular_now_available_angular_blog/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
More articles like that should exist for sure! :) I've found in my career that junior developers are very eager to learn and excited to have the opportunity to do so. In particular, engineers who have had past careers and have often quit their jobs and attended a bootcamp or went back to college to become an engineer. It's a pretty big risk to change careers so they are very committed. I think they tend to stay longer than the average engineer as well. I stayed at my first company that hired me as a junior engineer for quite some time. Our junior engineers at Eventbrite stay for ages!
Building an easy to understand email / social media user authentication, that’s my current challenge
Create your own Google Docs with Quill: [https://codepen.io/dnus/pen/OojaeN](https://codepen.io/dnus/pen/OojaeN)
Are the current tutorials and blog posts and examples out there not good enough or non-existent? What do you think would help you best in this case?
Thank you thank you thank you. Holy moley what a response. Gold for you!
I’ve tried to git clone some repositories that have that as a boiler plate, but I guess my js skills aren’t as advanced. I usually get it to work...but then the whole structure of the app is not the same way I usually structure things, or they use jade, when I’m used to using ejs. Or they might include some other framework I’m not familiar with 
Laracasts is what drew me to laravel. Still can’t find a good JS equiv. 
It looks like they have a JavaScript section: [https://laracasts.com/skills/javascript](https://laracasts.com/skills/javascript) Have you tried that?
I see, I see. Are there any step by step tutorials that you've tried? Or have you only gone straight to example repos?
Hi /u/BinaryWhisperer, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Your first example is how it is done. Functions are objects. Internally, they do sort of have a special ‘()’ property, but within JS you can only interact with it using function syntax. As a result, to make a ‘callable object’, you start by declaring a function, then add all the other properties you want the object to have. 
No problem -- glad it was useful. And thank you; I had no clue other countries had a different mnemonic for the order of operations and never would've considered it. Hopefully OP can find his version, lol.
``` const foo = () =&gt; { console.log('foo') } foo.bar = () =&gt; { console.log('bar') } foo() foo.bar() ```
Sometimes, you don't know what you don't know. You can handle your own fine and grow, absolutely. But a strong mentorship can elevate your level to heights you've never imagined. That's why even the best athletes still need coaches to be successful. 
Thanks for the help, I believe I need to go through some tutorials, any that you’d recommend? I’ve usually just gone straight for the repos
It's a good question, and maybe I didn't frame mentorship in the right way. Yes, I've had several mentors over my career. I've also been a mentor to a few Jr developers, with varying success. Some don't like it, others can't get by without it. You really can't force mentorship on someone anymore than you can force someone to be a mentor, so YMMV. It doesn't take much to be a mentor, maybe a couple hours a week. Many of us do it without realizing it. We just need to take the extra time, have some patience, be positive, and challenge the other to think in a new way. Most of the skills imparted are soft skills, such as how to approach a particular problem, how to use documentation, when to create a quick PoC for feedback, and how to receive feedback without over-promising or losing heart. I like to think I'm really good at deductive reasoning, so when someone is struggling with a bug I pair with them and talk them through the process. After several sessions I start to see them picking it up: Take the domain of the problem and divide it in half. Create a test to see if the problem lies in one half or the other. Repeat. The key is to keep them engaged so they don't gloss over. Pose questions for them to answer, and be ready to be surprised when they think of something that you didn't. Also call over your mentee when you get stuck on something, and you will be surprised by the insights gained from a fresh perspective. If nothing else you'll feel better about the direction of your own work if you can explain it in a way that makes sense. The worst thing a mentor can do is react when they get Shanghai's with a question. It's OK to say something like, "I'll find you in a few minutes", but it gets increasingly difficult to work with someone who is constantly shutting the door. Also, and this may seem obvious, never bad talk about your mentees to others, because you're the one who will wind up looking like the ass. This lesson comes from experience, and it is something that shames me to this day. IMO a huge benefit to practicing mentorship is the inculcation teamwork and shared ownership. It's no longer my code or her code, it is our code. Shared ownership is not necessary for every person or every team, but now that it is ingrained in me it is something that I actively look for when interviewing for a company. And yes you can achieve this without pairing all day every day.
Thanks for letting me know about this. I've updated the article and removed that snark.
gzip doesn't do anything to transport data from A to B and have B receive exactly what A sent. Also, requires larger input and output buffers when that data itself can be smaller. and protobuf api kinda sucked requring replicated data defintiions. It's not MY date format; only thing I did was add TZ instead of only UTC. [https://en.wikipedia.org/wiki/ISO\_8601](https://en.wikipedia.org/wiki/ISO_8601) I would rather not touch prototypes.
It offers nested structure which CSV doesn't at all. Do you even know what JSON is that you're comparing it to CSV?
what 'd' prefix? input , c:new Date() , d:123n output c: 2018-09-11T23:06:09-07:00, d: 123n, Yes, the class part does not go toward 'human readable' features that JSON5/6 claimed to be adding... but goes instead to minifying large datasets of similar type records... in my use case it cut down on the size of bingo card data while still maintaining the same structure. Which reduces both storage cost, and the processing cost (doesn't have to process so much memory); another aspect that gzip doesn't help with.
Can i talk to you in inbox. I need to ask some questions about my js career 
Hi /u/synapse_lu, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In the same line I liked Eric Elliot's [https://medium.com/javascript-scene/struggling-to-find-great-senior-javascript-developers-mentorship-is-the-answer-d352ea3574eb](https://medium.com/javascript-scene/struggling-to-find-great-senior-javascript-developers-mentorship-is-the-answer-d352ea3574eb)
Well, I would suggest understanding the basics of authentication. If you understand the basic pieces, it becomes pretty easy to put together yourself. In my opinion using JWTs is the simplest and most elegant way to go about basic user authentication. I also recommend using GraphQL if you aren't already. The best tutorials would probably be from Prisma or Graphcool. Combining JWTs and GraphQL make an elegant and simple authentication solution
I know this is outside your wheelhouse and not something appropriate for the company blog, but it's important that the business side understands that hiring a junior engineer is not a money-saving measure. It's great to invest in talent. It's wonderful. With proper investment it gets you developers who are experts on your product and processes and who are more productive than someone with similar experience. But if you hire at 70% of market rate because they're juniors, then give 5% annual raises because that's what the policy is - well, the math doesn't work out in their favor. And as you noted, there's a robust market for developers with even a year or two of work experience. If you're not willing to keep paying market rate for their talent, your investment is going to walk away. And the better the investment, the greater the risk is. Someone who picks things up quickly, whose pace exceeds your formal training, and who's hungry for new challenges at work is likely the sort of person who can take a week of "vacation" and come back with 5 different job offers. A well-meaning policy to hire juniors paired with a compensation policy that doesn't match market conditions can end up with negative value, as you're stuck with all of the people who can't or won't get offers elsewhere due to lack of talent, personality flaws, or complacency. If you want your investment in talent to pay off, you have to follow it up with a financial investment! Your junior developer's compensation has to match the market as they become a developer, then a "senior developer" (aka 2 years of experience). 
Mines much more shitty and slow - due to webcam and a monitor refreshing at 60 times a second!
Awesome! I’ll look into both methods, haven’t tried using those yet
I'm on the way - I've discovered some things. The area of webcam looked at...... it would be good to have a detector pick the bit of screen the cams picking the signal up from to increase processing speed. (it'll be flashing the lead-in) The scan time of the monitor can blend frames - and the webcam can catch half of one, and half of the other... so I need to strobe something to keep in sync, I can't depend on a single self clocking flasher.
I've read of silverflow or something...... silver something..... that uses that on Android... some advertising link thing.
Oh wow - this is AWESOME! Thanks for the link.
I have messaged you
I will try asking again as I was unclear. I know what a store is, so I know why one would want to have global state period. But in this context, why would I want to use apollo-link-state? Why put the same data in two places? Are you saying that apollo's cache is server-side? Because if it's client side... then it itself is a sort of global state, bringing me back to the question - why would I duplicate it?
you can "merge" a function with an object as well: const fn = () =&gt; "blah" const obj = {a: 1, b: 2, bar: ()=&gt;"bar" } const finalObj = Object.assign(fn, obj)
JS Conf
Oh good call
This is ridiculous. You want source maps in production. You want code that is sensitive, out.
I made a [Promise polyfill](https://github.com/Finickyflame/Promise-Polyfill) few years ago based on the ECMA's specifications. Some variables are unclear, but that's how they should have been named according to the specs.
Maybe use the rolling screen as the send. Jack the refresh rate to make it talk. That way you can look at it with a rolling shutter and trace changes the naked eye cant see. 
Yup, you can definitely do that. You'll want to decide whether you want to call these in series or parallel. If you need the data from one API before you call the other, then you have to call them in series. But, if they're independent, then you can call the APIs in parallel which generally means that they finish earlier. Before async/await, [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) was usually used for this. Example of calling in series (API2 call depends on data from API1) - const responseA = await fetch('urlA'); const jsonA = await responseA.json(); // parse jsonA to get the required argument for the next call const responseB = await fetch('urlB'); const jsonB = await responseB.json(); this.setState( {someData: jsonA, someOtherData: jsonB} ); But if the API calls are independent, then you can take advantage of concurrency to get the results faster. Something like this: // Send off both API calls at the same time const fetchA = fetch('urlA'); const fetchB = fetch('urlB'); // Wait for both to return data const responseA = await fetchA; const responseB = await fetchB; // Start creating the json at the same time const jsonPromiseA = responseA.json(); const jsonPromiseB = responseB.json(); // Wait for both json to be created const jsonA = await jsonPromiseA; const jsonB = await jsonPromiseB; // Set state this.setState( {someData: jsonA, someOtherData: jsonB} ); &amp;#x200B;
Compiling to WASM isn't suitable for preventing reverse-engineering at all. WASM binary code can be decompiled to a lisp-like, human readable text format: https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format
In production you will generally have 1 line which is a minified/ uglified version of your code, so this is not possible nor would it make any sense. If you want to stop and start functions, then depending on your use case it’s best you create a destroyer function and init function. However, I think it’s best you seriously re-think what you’re doing here. 
You're good, this is a correct understanding.
I did System.out.println(x == y /2); and that gave me false is this the correct way to do it?
You could just use SSM (simple state manager) which is a beautiful little module that tackles this exact issue. 
Yes it is Java on eclipse first time using it and I'm trying figure everything out. 
Check this out [https://code.sololearn.com/cOFokCb4f051](https://code.sololearn.com/cOFokCb4f051)
F
Check out what I commented. The reason is within System.out.println you can't add a string to an int or a boolean. You need to convert, it could be "a = " + Boolean.toString( whatever expression )
Thanks worked perfectly! Do you know how to use the scanner util? I can't seem to get it to work... 
F
Ya what do you need
Can you compile JavaScript to WebAssembly though?
Okay thank you for your help and sorry for the spam posting
Seems like YAML does a lot of this. Why not YAML? 
I could have used lots of words and phrased it less confrontational; thanx for not counter reacting. There's another sub-thread where I say more about protobufs ([thread](https://www.reddit.com/r/javascript/comments/9f8wml/jsox_javascript_object_exchange_format_preview/e5vjxex/) below(above?)); BSON can't have identifers or strings with embedded nul characters. \\0 is a legal utf-8 character. (the byte \\xff which is never used in utf-8 encoding would have been a much better terminator); and it's not text... JSON has human readability; and the type of the data is known because it's the data itself... the extensions for Date and BigInt and TypedArrays break that elegant simplicity... like I don't think you can hand-write a base64 binary blob :) You could probably like copy a image data URL though... &amp;#x200B; &amp;#x200B; &amp;#x200B;
I was testing the dev version at the time :P
My mentor would recommend books and topics I needed to learn and I could come to him for career advice and questions. Probably saved me months or years of trying to figure out things alone. 
I have made a form using PDF acrobat pro, but thanks for this recommendation. 
&gt; Um, you don't need to replicate anything. You *do* need to strictly define data structures. There are numerous alternate serialization libs if you don't like protobufs though The strict definition of data structures is a replication var o = { data: "some object that's already created } var stringifier = JSOX.stringifier(); stringifier.defineClass( "typeTag", o ); So using what already exists, such class prototypes can be easily defined. Could be heuristically calculated also; much like gzip does at a bit level, in either case there's no additional definition required. This isn't entirely true for other languages (C/C++ for instance) where JSON emitters are difficult to do in a general sense; easy to do... just has to be lots of specific handlers rather than one generic handler. Or Even C# (though with a few meta tags (additional data) ) more generally do-able. &amp;#x200B; &gt;Gzip yes, compressing 200 bytes is probably a message with a single object definition, and both gzip and the class/tag feature of JSOX are likely to inflate such a message. Compression 2M; probably a thing that is that large is also a single thing - an image and/or sound of some sort. If, there is a case, where the class/tag definition yielded 50%+ gain, then for a 20M dataset, it would only require parsing 10M of data. Whether that data was additionally gzipped to 2M Or initially compressed from 20M to 2M could be argued 'see gzip makes them both the same' but they're not, I only have to scan 1/2 the data, plus I can create objects and do more of an assign operation, with all fields already existing at once instead of progressive addition required for JSON processing; additionally the parsing loop state entered for reading class values is cheaper than having to parse the property name and the ':' separator before each value. &gt;Prototypes I was reflecting on this, and I could provide an API instead to register format handlers by type instead of the direct association; probably I'll implement that... like per-type replacer functions.
After thinking about this, I think that it is super important to emphasize to the general audience here that in the context of *React UI event handlers* these test confirms that, at least where performance is concerned, it **does not matter** whether you use bound methods or arrow functions. The `onClick` event originates in the DOM and should never be expected to return in less than one frame (1/60th of a second). Both arrow functions and bound methods return in orders of microseconds. Indeed, in order to get appreciable results, these tests iterated hundreds of thousands of times and still returned in about one frame). Arguing over which to use is like arguing over whether your one hour commute will be faster if you enter your car by leaping through the window or leaping through its open door. Please don't let your takeaway here be that you shouldn't use one of these patterns for performance reasons. That's not shown here at all.
This! Even if part of facebook code will leak it's rubbish without developers, backend, custom config 
It sounds like what you want is something like "private fields", which is a proposal being worked on right now to extend the behavior of classes. You can read more about the proposal [here](https://github.com/tc39/proposal-class-fields). [This article](https://curiosity-driven.org/private-properties-in-javascript) has a good summary of some methods that work well for creating private state in JavaScript (since anything you hang off the class instance really isn't private). I would approach it using a `WeakMap` to store the state for each instance. ``` const PERSON_STATE = new WeakMap(); class Person { constructor(firstName, lastName) { PERSON_STATE.set(this, { firstName, lastName }); } getName() { const { firstName, lastName } = PERSON_STATE.get(this); return firstName + ' ' + lastName; } } const me = new Person('Alex', 'LaFroscia'); me.firstName; // undefined me.lastName; // undefined me.getName(); // "Alex LaFroscia" ``` If you want to know more about the constructor function vs. `class` syntax, `WeakMap` or anything else, just let me know and I'm happy to dive into a deeper explanation! 
Fork it! Alternatively find someone else who has forked the lib and start using their version.
Can someone explain to me what this (or any JS task runner) can do that simply using NPM scripts cannot?
a defintion is implied by the structure and data of json itself. &amp;#x200B; &gt; but see BSON. that's the 4rd time that's been said; why would anyone use BSON? It can't encode identifer or strings with NUL character embedded. It doesn't reduce the overhead of de-nomalized field names (or field names replicated within each object that is of the same type. &amp;#x200B; &gt; why we need a new encoding scheme. JSON will never be modified. I don't see this as a new encoding scheme; since it's just JSON with restrictions lossened and more data transport available; maybe just more components for the existing JSON schematic. True, with replace function mostly one can embed anything else in JSON strings, and recover them; but that requires additional work per application. The additional class/tag definition is a very minor feature addition; and is not required to be emitted or used in any way; there are certain datasets which can benefit, and using it requires calling an additional function, but requires no replication of the defintiions, or referencing of some other datatypes or data emitted by some other protocol layers; since again, JSON does a good job of representing the structure definition all by itself. There is a huge resistance to even modifying JSON to support big number with a simple 'n' suffix; since others have invented ways to stuff it into strings; which again requires application logic to understand; (or some middleware wrapper that hides such details)... and it's kinda an important thing for exchanging javascript objects between javascript services. &amp;#x200B;
Hey everyone, &amp;#x200B; I am php dev in a company and today I had a casual conversation with one of our js juniors. Through conversation I found out he is missing some general basics (has no clue about OOP after a year of working). I wanted to give him some materials about basics of programming (design patterns, oop etc.) but I would like them to be in javascript so he can relate to them easier. Do you have any recommendations about books I could share with him? tnx in advance :)
How exactly is it a power trip to not give out your hard work to organizations you find morally objectionable? I get that you don't like this because your affected but he is an immigrant correct? Why should he be forced to help ICE?
I'm learning SSR too but I will share what I've learned. You will need this part for code splitting to work. ``` const LoadableBar = Loadable({ loader: () =&gt; import('./components/Bar'), loading() { return &lt;div&gt;Loading...&lt;/div&gt; } }); ``` In &lt;Route&gt; set it to render the `LoadableBar` that you have set. 2. Webpack server bundle entry will be renderer.js. 3. Serve app.client.js im your html
I moved from `react-loadable` to `loadable-components` because of having some issue with `react-hot-loader` not doing hmr properly. API is identical and imo much simple and direct to setup because you wont need to add plugin for manifest etc. Here is the repo if you are interested: https://github.com/smooth-code/loadable-components
Tough shit. The common man has so little power that to call his actions a power trip is fairly dramatic and more than a little pathetic. He is wielding what little power he has to attempt to do some good. Good. 
Scale it down filter only what you need a browser cant handle huge datasets like yours. Look for the most efficient algorithm to iterate through the data and only filter through what you need. If 5000 is laggy try it with 500 make some sleep(). Time in between with setInterval() . Look at the css fixed sizes take less computing power on a bigger scale of things as opposed to % em or viewport height. 
Haha how fucking pathetic.
&gt;Bringing politics into OSS like this is harmful. 100% agree. Thanks for letting me know about this, I'm removing `react-loadable` from all my projects.
You can simply lock it down to the version pre the licence change. The new licence only applies to the version the licence in included it, it is not retrospective. You can also fork it from the pre-licence change, and make any updates you may need in the future. Or use an alternative. 
Thanks, will switch immediately.
You should cut the dataset into multiply pieces and also reduce them. If you need to show all of them I don’t think there is enough detail in any screen to show such big dataset, that’s why I would recommend reducing it to an average over a certain time, and then request more data when needed. In addition to that you will need to render only what the user sees(for example if the user needs to scroll in order to reveal more) and I would recommend using SVG with the “transform Z” hack for GPU acceleration. There might be more things to consider, but I don’t know what type of data you are using and can’t generate something to work with.
VanillaJS is easily the best framework / library I have used.
yeah, that's why it's shocking cause I've been seeing that in stack overflow a few times and this time I got curious and found out what it really is!
Yes, if today's year is 2000.
Thanks for advice. I am using Vue for now. But the data coming is already filtered from backend. I am filtering all the data to x and y points. Frontend just have to append the data and update graph for it.
&gt; why would anyone use BSON? Because it solves the one problem I was responding to? &gt; JSON will never be modified Most likely no, it won't be. Which is why we have protobufs, thrift, avro, flat buffers, cap'n'proto, messagepack, yaml, bson, and dozens of others. You seem to have a very rudimentary understanding of the alternatives which is an issue if you want anyone to take something like this seriously. I highly suggest you read through something like [this](https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html) then ask yourself if you're actually trying to tackle the right problems.
Wanted to write a comment of my own, but on second thought I'll piggyback this one so less people downvote me. He isn't giving any kind of a statement, if anything he is splitting the community by being an attention seeking selfish ass (it's very convenient to find only big names morally objectionable, right?) If anything software development in general and OSS in particular could've been the perfect place without the borders, free of politics, religion or gender wars (and it was for a very long time), but then we got to this. Extremely disappointing.
How is this not obvious to everyone. I just don't get it. Just because he has write access, he took everyones contributions, inserted his political agenda and then merged it in. It's objectively wrong. We are lucky it's protesting ICE right now but this sets a terrible precedence for OSS. What if suddenly your contributions to vue.js are now working towards the agenda for invading Mexico and you have absolutely no control over it and the contributors list will include YOUR name even though you don't share any of those views. Rest assured, the market will adjust. We will either see github implement an un-editable preselection of licenses or each license atrocity will trigger a fork and all contributors will be notified of the projects new location.
Wow, I thought that given the demographics of many modern JS devs that r/js may actually be less terrible, pro-business, anti-people than other programming subreddits. But these comments... Lmao that was wrong
right, i've got such components, so it's okay :) Anyway do I need to make server bundles with webpack?
&gt; He is wielding what little power he has he has the power to annoy a bunch of devs... he isn't doing any good... no one cares....keep politics out of this shit. We have enough garbage to keep track of...
huh?
ain't no one got time for this shit... the day that a damn repo forks into a left and right leaning versions.... I just...won't want to live on this planet anymore.
[removed]
No one cares? What about the OP and all the people commenting? C-:
“Objectively” lol fuckin dummy
There is no such thing as being apolitical. Nothing exists outside of the context of the real world
https://m.huffpost.com/us/entry/5908462 This may be helpful
Very cute attempt to 0wn me, Nice
He also has the power to stop companies who support ICE from using his software. Power he is exercising.
So no then.
I agree that "power trip" isn't the correct word here, but it is a legitimate concern for OSS when licensees changes their terms according to with winds of politics. It's a moving target, subject to a person's whim. I'm not saying that his heart is in the wrong place (I probably align with his politics perfectly), but for people that take software licenses seriously this is just a degree or two off of just unpublishing a library. Also, can I ask you to take a moment and reflect for a moment if you would feel differently about this case if the companies listed were Nike, NFL, Starbucks, Target and Nordstrom. As a non-American, this kind of "political tribalism" is extremely concerning.
You know the companies don't even care a little bit? And no executives will even know or care that this happened... Like, I'm not sure if you've worked for a living in the real world...but this isn't how you change things.
License changes are not retroactive. If you don’t like it, fork it.
Yeah man. I’m all for protesting concentration camps but this is mildly inconvenient. How dare he. Now I need to write a version number in my config file. /s This community is so petty sometimes.
He actually doesn't. It's not his right to relicense the project without all contributors' support unless they've waived their rights to him.
So we'd support if Facebook relicensed React from MIT to MIT-but-no-microsoft/google/apple, we'd be cool with that? Why should FB be forced to help MS/Google/Apple, in your words?
This has nothing to do with free speech.
&gt; So if Facebook relicensed React from MIT to MIT-but-no-microsoft/google/apple, we'd be cool with that? Why should FB be forced to help MS/Google/Apple, in your words? Wasn't react effectively licensed like that for a long time by not allowing it to be used in any products that kind of looked like facebook (e.g. anything barely resembling social media?). They changed that to BSD and now MIT after people kept bugging them about it, afaik.
Yes, my point is we weren't cool with that past behavior. I feel this is a double standard if we permit smaller projects to do the same.
Yeah, I agree!
&gt;the hard work of ALL the contributors Though the MIT license allows their code to be used under proprietary licenses like this one, so they can't argue against the change (well, they *can*, but they can't expect it to make much difference). Though the MIT license does require that he include the full text of the MIT license, as there are likely to be "substantial portions of the Software" still covered by MIT unless he has explicitly gained re-licensing agreement from other major contributors (or unless he is the only major contributor?).
I think your first concern is a fair point. To address your second, no that wouldn’t concern me because the kind of person sat on the destructive side of history (I believe) will be in the minority of OSS creators. Partly why I think this kind of action has a chance of working. I’m British so I’m sadly living within a highly politically polarised society. I can assure you things won’t turn out for the better if you try to compromise with the other side, or if you dont use every tool at your disposal. Because they will. Just hope wherever you live doesn’t go down the same road. 
Oh boohoo, now your enterprise can't leverage profit out of work they didn't do.... my heart bleeds. &amp;#x200B; Capitalism!
My mate works at Github (now Microsoft-owned) and before the change was reverted they did lock Lerna to the previous version. This kind of stuff will bubble up if there’s enough of it. 
I, uh..., seem to be reading contradictory opinions between your first and second paragraphs.
So, you can still use the code up to until the license change? And you can also fork it? Sorry, but I'm not good with licenses. I just try to stick to MIT to avoid headaches and spending too much time on the issue.
No, it wasn't. But they had a patent grant that caused controversy, which they removed.
For those who are curious, you can customize it and download it here: [http://vanilla-js.com/](http://vanilla-js.com/)
Awesome! I’ll leave it at that so! 
The new license probably doesn't even apply anyway. He's accepted pull requests from other people, and incorporated their code. He cannot change the license without their permission unless he backs all those PRs out, since he doesn't own the copyright on the code from the PRs. So feel free to continue using it under the MIT license. The license hasn't changed, even if he says it has.
That's not quite how it works. Copyright doesn't apply to individual lines of code, it applies to files, if not to the entire project. The only files in the project that are subject to the new license are files that had no other contributors under the MIT license. He can't unilaterally change the license for any file that he isn't the sole copyright holder on. The project has only three core files (the files in src), all of them with multiple contributors. They are all still MIT licensed until he gets permission from all the contributors to change the license. The only files the he is the sole contributor to are `/webpack.js` which is only one line, and a few files under `example/`, `__tests__`, and `__fixtures__` Everything else is still MIT licensed -- he doesn't have the power to change that. 
What's the reasoning? Is it so that it forces people to create PR's
What would make a solution "perfect" in your eyes? We do it the standard way. If you request any resource other than `/auth`, your token is evaluated. If it's not valid, you're sent to `/auth` to get a valid one. Clients with valid tokens can go to `/reauth` any time to refresh their token, to prevent them from expiring.
lerna all over again. copy/paste even. who started this?
I mean from the Client side (I'll add that to my question). When do you refresh? How do you catch 401 responses from the server, what if the user refreshes the page but the token is expired?
Please don't downvote this if you simply disagree with him. He gave a thoughtful reply to an honest question.
Mathematics?
Oh ffs, this shit again.
 Learn how to code and you wouldn't get this problem. 
|| in javascript returns the first truthy value (from left to right) or if no value actually is truthy it returns the last value. In your example this means if args.data is falsy, data will be set to null. i found a good overview about truthy and falsy on stackoverflow: https://stackoverflow.com/a/19839953
The value of `foo || bar` will be the value of foo if it is truthy (true, an object, a non-empty string, a non-zero number) otherwise it will be the value of bar. 
In an angularjs app I work on we use an interceptor on $http to look for requests that return 401, try to refresh the access token if we can/should and log them out if we can't. On pageload part of deciding whether we have a valid session is checking validity of the token locally, which means we can short-circuit an http request if it's invalid, and asking the auth endpoint to verify it separately. Again we can decide to accept, refresh or revoke the token at that point and send the user to the correct location. The key part is having an API endpoint that is designed to check the token is valid, signed correctly and not tampered with. Tokens can be revoked serverside so you can't just trust them as valid just because they decode OK.
Are you coping the code exactly from the src you linked? If so, have you placed the different number sections in their own containers? Set the containers inline or inline-block and place the labels (days, minutes, etc) in a &lt;p&gt; element or a new line element, within each container.
Thankyou!
thankyou!
Ah.. yes I've seen this interpretation of that MIT (and occasionally BSD) licenses, but I don't believe it's ever been tested, and I don't subscribe to it personally. When the MIT license requires you to keep the license itself intact, I don't think that requirement can be meaningful unless the license is unmodified -- otherwise you could just "modify" it to be e.g. the GPL or whatever other license you want, which is obviously not the intention. 
Same guy. James Kyle.
The client caches credentials to resubmit to /auth when it needs to, and you can maintain your own inactivity timer and run a background process to /reauth and keep the token fresh even when the user isn't actively interacting, e.g. when on a dashboard/monitoring page.
`||` and `&amp;&amp;` also have some short circuiting behavior. for example `x || y` if x is truthy then the engine won't evaluate y and it will return x as a statement completion value right there. it's the opposite for the `&amp;&amp;` operator for example `x &amp;&amp; y` if x is falsy then the engine won't evaluate y and will return x as a statement completion value.
MIT license: &gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, **sublicense**, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: Contributors already gave him permission to publish it with a different license.
oh. i'm an idiot.
James Kyle comes across as a very sensitive person who overreacts about everything. I follow him on Twitter and it's painful, but I kind of like the drama, so I keep following him. He is very arogant and gets into arguments with people on Twitter all of the time, I think he might legitimately suffer from some mental health issues, so I don't want to be too hard on the guy.
IIRC he was tired of having his OSS projects become like a job with people begging for features then getting upset or angry when he wouldn't do them, or people asking for handholding when they should just read the docs. I don't necessarily agree with his decision, but I get it. I've helped maintain a few med sized projects and I'm pretty much the sole maintainer of a few small ones, and even that can get overwhelming sometimes.
Numbers have &lt;span&gt;, labels have &lt;p&gt; (even tried with tables and tr td but nothing) and giving them inline or inline-block value make them show up as block elements, not in line. [pic rel](https://i.imgur.com/OObv8Xb.png) &amp;#x200B; Oh, and it is still within the javascript script. &amp;#x200B; &amp;#x200B;
Such a shame that Microsoft was just out there, apolitically helping the Trump administration deport undesirables, and this guy has to go and make it political by reacting to that
So Apollo comes with a built in cache. That cache exists on the client side and it contains remote data from the server. The results of your queries to the server. Apollo-link-state lets you use that same cache to also store local data. Such as the currently selected item in a list. Or other local state. Hope that helps.
He is bad for open source. Let’s all stop using projects he controls. 
Try checking this out. Most of the content might not apply, but should solve the issue with display. I used a lot of this guy's videos a while back, pretty useful stuff. https://youtu.be/NNpwqrvPyyU
&gt; Contributors already gave him permission to publish it with a different license. No they didn't, and the license says no such thing. It does say: &gt; The above copyright notice and **this** permission notice shall be included in all copies or substantial portions of the Software. **This** permission notice. Not a different or modified one. The first sentence of that permission notice says: &gt; Permission is hereby granted, free of charge, **to any person obtaining a copy of this software** 
you can scope those members via `var` so they are only accessible in the function body
Unpopular opinion,I dont use arrow functions. Often frameworks have warnings such as this one *Don’t use* [*arrow functions*](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) *on an options property or callback, such as* created: () =&gt; console.log(this.a) *or* vm.$watch('a', newValue =&gt; this.myMethod()) *. Since arrow functions are bound to the parent context,* this *will not be the Vue instance as you’d expect, often resulting in errors such as* Uncaught TypeError: Cannot read property of undefined *or* Uncaught TypeError: this.myMethod is not a function Cant go and remember every single place where i should not be using an arrow function so best thing to do is not use them anywhere in code
Concentration camps? What a ridiculous thing to say. Go read “Ordinary Men” (a book about the Polish police forces that were used to round up and exterminate the Jews). This constant hyperbole from the left is disgusting and an insult to the legitimate horrors of WW2. Republicans are Nazis, Trump is Hitler, detention centers are literal fucking concentration camps. Go look at pics of the ICE centers and then watch Baraka to see the gas chambers in Auschwitz and tell me they are the same.
His politics seem to be anti ICE. &gt; "Microsoft Corporation" (for working with ICE) &gt; "Palantir Technologies" (for working with ICE) But the new licensing doesn't bar the US govt or ICE from using the software. So, ICE is free to use it. Ha.
I like to use array methods `some` and `every` for these scenarios One item must be true: ``` [true, false, false].some(Boolean) // true ``` Every item must be false: ``` [false, false, true].every(Boolean) // false ``` You can invert this with `!` so to say one item must be false we can use: ``` ![true, false, false].some(Boolean) // true ```
Actually, it's not even because of the assignments, just because of the `res(N)` calls that schedule the console.log(`res #${id}...`) calls. Promise resolution and variable assignment are independent.
[Mpj actually made a decent video about this](https://youtu.be/fGqUzrs09vs)
I have been using Angular pretty much the whole time, at multiple corporate jobs, and the fascination with state management libraries seems to be a recently trending topic in the online community. Out of the box, sans added libraries, you can do it all with observables and services. If you come from React, or just like state advanced management systems, there are a few fine libraries out there you will probably like. Maybe using one them will become popular, but I have never worked on a project that uses one. If you are intending to learn Angular, fixating on state management feels a little cart before the horse.
And the project is hosted on a Microsoft owned service :/
Read some of his tweets. There's something dumb about being anti-capitalism... on Twitter, a large publicly traded company.
IANAL, but is a fork or update on a software still considered the same "this" software? Does the MIT license apply to all subsequent forks and updates?
How promising is this? Am considering a switch if most people are switching.
Don't use anything where `jamiebuilds` is a maintainer. Dude is a fucking drama queen.
&gt; What's the use of that structure? It returns a function that you can call that returns a promise. So: const tokenRefresher = refreshUserTokens(data); tokenRefresher(...) .then(tokenOrWhatever =&gt; { ... }) .catch(err =&gt; { ... }); &gt; Since it's the last line in the try block, why is the await necessary? If you were to drop the `await` here the promise would resolve with whatever `axios.post` returns, success or failure. `return await` allows it to reject with `new Error(error.response.data.message)`, i.e. a readable message instead of a custom object
The "this" isn't referring to the software, it's referring to itself -- the licensing statement. &gt; Does the MIT license apply to all subsequent forks and updates? Yes, of course. A fork is just a copy using a certain piece of software, it's no different from copying via any other method. 
I assumed you'd be happy people downvoted you, any comment that doesn't add to the conversation should be downvoted, not ones you disagree with.
Yep. That was how I got started. The biggest problem is all of the training I’ve seen is either outdated or is php backend and JS front end. Moving forward with feathersjs and so far I love it but man auth has been a royal pain. 
Did you read my whole post? It's less about my inconvenience and more about how harmful it can be in the long run to polarize OSS
That's a pretty standard way to declare a default value for a variable. Another way to do it using es6 would be to declare the function parameters like so '(data = null)'. Although for that specific example your function takes in an argument called args. 
Reddit is weird. Ask for downvotes and you'll be upvoted or tell the hivemind to do something then you'll be downvoted.
This.
http://www.reactiongifs.com/r/npa5yMn.gif
The thing about open source IMO is that it doesn't care if you just consume consume consume.... I do think feedback or complaining about changing the license to fit a political agenda isn't like moving a button or widget. 
It depends what you are rendering. But I would render it in the frontend in order to save some costly resources and also because its so fast in modern browsers that I don't see a reason why not. Here I have small demo of how rendering an SVG would look like without a library. There might be good libraries that do exactly this, with alot of options, but I try to using libraries. https://jsfiddle.net/shock/fn762pwq/ I wrote this a while back, so there might be a better way of doing it. The code that might interest you is `createPath` function, it creates the string that you'll use in the SVG as the "points" attribute. If you want me to break it down for you I can do that, just ask.
Oh man twitter and coding. I was off Twitter for a while but when I switched careers I thought "oh well let's fire up an account for coding tech and see". Oh man the drama, political hot takes, memes...... Probably should just turn off Twitter again.
Thanks for this! So without the **await** it would still wait for the axios post to complete, right? So that would be valid code?
without the `await` the catch would never fire, but yes it would be valid
Good point. There are caveats to both. data = data || true In that scenario, data will always be true. I think having the ES6 default param only trigger on `undefined` and not `null` was a bad decision.
In Javascript, if it's a property, it's public. If you only want to expose getters and setters, you don't add the raw values to 'this'. But your getters/setters are inside the 'Person' function -- so they know the parameters of the function whether or not they're inside of 'this'. function Person(firstName, lastName, email, number) { this.getName = () =&gt; `${firstName} ${lastName}`; this.setName = (f,l) =&gt; { firstName = f; lastName = l; } } 
Is this the new "literally Hitler"?
There isn't a single forum of communication that isn't gate-kept by capital, except for perhaps the street corner.
He lists a bunch of other companies that are not ICE-related, but general "treat their workers poorly" kind of stuff.
Even beyond politics, it's honestly hard to find folks who aren't into the trite memes, silly coding truisms, resume like posts, and Twitterisms and such.
True.
But posting stuff like that not only makes you look like an asshole in a lot of cases, but it turns people off of contributing, and I haven't found a way yet to have it come across nice. OSS is a labor of love for me, but that doesn't mean i'm your servant. And as much as it sucks, i tend to go with the brunt "no, i won't do that" now, and i'm just accepting that i'm going to look like an asshole.
&gt; OSS in itself is a political statement. The political statement that OSS entails is radically different than the political statement about prohibiting users from using your software. If one jumps from one to the other, it makes you wonder if the really supported OSS in the first place.
Yes you are right
Didn't use this plugin so can't comment on it
Almost everyone leverages profit out of work they didn't do. That's like, the point of society.
I don't believe it turns people off from contributing. The point of that article is to turn off people that don't contribute from feeling entitled when they're using OSS, hence the brutal, but completely honest title.
&gt; Politics aside, I have to wonder how many people raging about this whole licensing brouhaha have ever actually contributed to the projects in question (if even just by reporting a bug) Have you tried contributing to open source projects? I have tried, and most of the time failed miserably. I've filed bug reports with the exact three steps you have to do to reproduce it 100%, only to have them rejected because I haven't included a whole application demonstrating the problem. On a different project, I even wrote the bugfix myself and submitted it. The first time it was rejected because they also wanted me to include another minor bugfix, the second time it was rejected because that bugfix should be its own pull request. Then I gave up. A third time on yet another project, they wanted me to file the bug report again on some other project on github, because they spread everything around dozens of projects there and moved stuff around after I filed my bug. These days I simply fork stuff on github and fix the things on my own account. If somebody is interested they can pull my commits, but I'm very fed up with the way most open source projects are run. I don't have the time to jump through their hoops, and I don't blame anyone thinking the same.
But it does. People see the anger coming from maintainers toward poeple with seemingly innocuous requests or comments and it turns them away. They don't see that the same question was asked 100 times before, they don't see that they had 100 complaints in the other direction and when they finally changed it people started bitching that it was changed. They don't see the armchair judges critiquing your code and every choice you make always having the seemingly perfect alternative in every instance, telling the world how they would do it so much better. All they see is some guy cutting the head off of some rando asking a question, and that turns them off the package or OSS entirely. Not to mention the real assholes that like to show articles like that as an excuse for them acting like assholes and insulting and berating users. Closing issues, while i still disagree with it, solves a lot of those problems and puts the onus on the users of the software to make the changes they want, which removes a lot of the sideline complaining.
I giggled. Apparently /r/javascript doesn't have a sense of humor.
&gt;Bringing politics into OSS Are you aware that the whole OSS movement was started due to politics?
I'm pretty sure the term sublicense is supposed to mean: the licensee can give licenses to anyone who receives a copy. Not that they can add license terms. https://dictionary.findlaw.com/definition/sublicense.html Now, the modification clause lets you modify the code, and stick your own license on the modifications, but the original code remains MIT licensed. If you want to whole sale change the license, you need all copyright owners to agree to such.
Calling someone a fucking muppet does nothing in helping them understand your point of view. The guy might not have considered your point and you remove all credibility from what you have to say by being so condescending. Don't fall victim to the [Curse of Knowledge](https://en.wikipedia.org/wiki/Curse_of_knowledge/).
Wait what did he do? Someone mentioned politics?
[Findlaw](https://dictionary.findlaw.com/definition/sublicense.html) &gt; sublicense n : a license granted by a licensee that grants some or all of the rights (as to a patent) acquired under the original license Anyone who receives a copy may give a license to the work to someone else. The specified license is the same as that received by the original licensee.
He goes to the issue boards of large corporation's public repos and makes issues calling them all racist and telling them to quit their jobs. He's done this many times. He also wront a blog article claiming Microsoft stole all his code. Microsoft launched an internal investigation to determine if that was true and found zero evidence for his claim and when asked to give some evidence so they can continue the investigation he refused. Lucky he doesn't get a defamation lawsuit out of that. In either case, the code he said was stolen was MIT anyway, not that they stole it though. He hates straight men and says that on Twitter a lot. He regularly is just a retarded asshole to people. He's mentally ill, there is no doubt.
Legitimate question, not trolling. I've seen this phrase several times: &gt; OSS in itself is a political statement. What's the argument that it is inherently political?
What isn't?
Write some good html and css that is responsive, works on firefox, chrome, safari edge, IE11 ( at least), and of course follows a couple fundamental visual design principles i.e looks alright. Next would be to write an SPA (Single Page Application), since you can just do front end and not worry about server side stuff). You can use React for this but there are plenty of other libs/frameworks you can use. The SPA should make use of some API's so you can show you have some idea off getting resources from a server, be it vanilla XHR, axios, fetch. Finally, as a bonus, you might like to look at performance stuff, i.e bundle sizes, compression, code splitting. And maybe analytics, google analytics, hotjar and all the other creepy tracking stuff. As for an actually idea/project you could make a news aggregator, clone app etc... as long as it keeps you interested enough to motivate you to apply all of the concepts that you are likely to find in front end dev these days.
If you don’t know why you’re using `return await`, you probably don’t need it and is redundant. In this specific case it could be useful, but as mentioned by others, the catch block is poorly implemented.
And I was under the impression that JavaScript was the only language where nobody knew what 'this' meant.
Well put. Thank you!
Sounds like a deranged individual.
He also inflates his "github contributions" (ie commits) by going into repos and making 100 changes to package.json files and committing them one line at time. 
Everything starts with respect for the staff you already have. If they are too overwhelmed to take on yet another junior engineer, it simply won't work out no matter how hard you try. At my company, there is a simple solution. We simply don't give job offers to junior engineers unless we can find a team who wants to sponsor a junior engineer. Once a team takes on a junior engineer, they can say "no more" until their team gets back up to full productivity. If management wants to grow a team out faster than that, then they're better off hiring more senior engineers. No one has to agree to sponsor a senior engineer, save for the managers themselves. So I think this ends up creating a healthy balance where everyone ends up getting what they want.
It’s Kyle again, isn’t it?
You can check out the links below, hope they help: [https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript](https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript) [https://www.copterlabs.com/json-what-it-is-how-it-works-how-to-use-it/](https://www.copterlabs.com/json-what-it-is-how-it-works-how-to-use-it/) &amp;#x200B; Good luck!
a bit provocative is an understatement.
&gt; If you believe Mathematics is free of politics, you may find the history of mathematics surprising. &gt; &gt; This has nothing to do with Math. Just like what this Kyle asshole does has nothing to do with programming.
&gt; it's very convenient to find only big names morally objectionable, right? Or waaayyyyy more likely: the only companies he(and probably most of the public) knows about taking contracts from ICE are the big ones. I sure as hell couldn't tell you about any small businesses with ICE contracts, can you?
And I think they should be able to redact their contributions to the project if they disagree. &gt; it's the hard work of ALL the contributors. You realize that *more than half of the contributors only added a single line of code*? Jamie built 99% of this project himself.
"why can't we just agree on a single programming language?", "why can't we agree on a single operation system?"
[removed]
As it should be. The old way was the buggy way, not the ES6 way. Imagine the old way if 0 or false was a valid input parameter.
thats true, i just wanted to make this clear as our discussion was about truthy/falsy values which are not relevant for default parameters in ES6 👍🏼
Because I like using React more than Angular. And someone else likes using Angular more than React. Why should one of us switch to a technology we don't feel comfortable with? 
Yeah and then he claims the projects are his. He did this with Babel.
I'm out of the loop. What's ICE?
But that's doesn't make sense. You can only sublicense under MIT as long as full MIT conditions stay intact. 
Why don't we give up democracy too?
Alternative: https://github.com/neurosnap/react-cofx
Not again, he added the license to a lot of his projects a while ago. Lerna only got the hooplah because it isn't actually his. But the projects he owns-- no one can make any hooplah because he has legal right. Except I don't believe such a license is even legally valid. Honestly I feel like making an organization "jamiefork" or "politiforked" which forks projects at the commit just prior to politics-inspired license changes and then continues to contribute equivalent API via community contribution.
No reason! That’s what I’m trying to say through this article. It’s not all hell and fire if you use different tools. Did you get the chance to read the article? 
As the first comment on the article says, this appears to be fatally broken. It will generate keys that are different each time the parent component re-renders, causing all of the child components to be unmounted and re-created. This is both bad for perf, and also probably not what the app code expects to have happen.
I think ICE are horrible and also think this joke is funny. It's possible for both thoughts to exist in a single head, apparently.
BSON does not do any sort of common field definition; it's just a binary encoding of JSON; you brought it up in relation to the class/tag reduction of data... so that's not a good use for BSON since it doesn't even DO that. It wasn't until 2015 that I stumbled on 'Javascript : The Good Parts' which inspired me to re-evaluate javascript, especially since JIT implementations were quite common. JSON is a very simple interface, that, at its time of conception was based on a Javascript that does not have features that Javascript does now; only it managed to stay in a vaccuum and not also grow. JSON is already a solution to BSON, Protobufs, XML, CSV, YAML... so offering any alternative that is beat by JSON unmodifed isn't very productive. I was really hoping for more 'You missed this type' or 'XXX is a feature JSON has been missing for a while; maybe a solution for that?' or even 'if you did X it might be more Y' It's not that I just woke up yesterday and decided to create some arbitrary protocol format out of the blue.... and that really makes me want to give a longer history... -------------------- I've been programming since '84; in the beginning in BASIC; then pascal a few years later, and C a few years after that ('89). And of course some assembly, where required... but those days a structure def and binary protocol worked wonderfully. Then there was C++ which was(and still is) all the rage. Then there was C#... which fixed things like 'what actually happens with this polymorphic cat-refigerator-plant (it's a plant you have to plug in, that purrs when its tempurature is right (and it'ah happy) and yowl when opened (animals don't like being opened) ) They had their own message transports (WCF?) which was cryptic and undocumented to implement on the existing C side. And probably around 2010 was searching for better protocol stuff than XML, and found protobuf; but it also lacked features, but was very large and very cryptic for the amount of work I required from it; so back to XML for C#-&gt;C interop. At that time I also couldn't find the encoding defintion for protobufs, but only the API documentation was more of an open-source - closed-definition-protocol. 2013-09-13 08:12:23 first commit of a C JSON Parser. So I started to investigate browsers more; they had a Canvas object I could draw on; and JSON was already a builtin. I wanted to use the browser to work as a direct video host for remote applications; and even worked on a method to build definitions of the C structures for JSON output so I could just say 'encode this object' and out would come a proper string.... Much like what one does to work with protobufs. I got that working, and was kinda cute to run an application and then connect to it from a browser on any other system and they all shared the same application; but really kind of slow, and there's really much better ways to skin that whole cat. But; the JSON parser was done; and worked in a very general sense without requiring extra structure defintions (although I did attempt such a system so the JSON would go directly to a C structure). A parser for basic JSON is actually very simple state engine to implement; although it can't be in-place used because of (potential) escape characters in strings. Also any text generator can generate JSON content easily enough. So I'm sure inbetween here and the lead-up to now searched more; found nothing(nothing better than perhaps protobufs) Then we get to discovery of ES6 (rediscovery of JS). Now there's this thing called Node (May 27, 2009; 9 years ago); and JIT compilation that rivals many native applications; but also has much flexibility. So I took a shot at a JS System; and using JS to JS using JSON... and of course the first thing I run into is 'Dates don't have an ecoding and look like strings?!' okay... well, there's this replacer, suppose that's a work around to patch it.... but then that requires knowledge of the protocol to know which fields are strings that need conversion. So I started searching for JSON2, JSON3, JSON4, and finally found a comprehensive JSON5 which addressed dates, and also Infinity and NaN which can also be useful to accurately transport. (Was JSON5 solving any problems with JSON?); so 2 new value keywords (NaN, Infinity in addtion to true,false and null). In my early days, I ended up generating 'undefined' as a value quite often, and JSON always blew up on it; and to my surprise JSON5 did also. So let's make it an issue Jul 10, 2017 https://github.com/json5/json5/issues/151 . Not one response and even accompanied with a simple PR. So I forked my C JSON parser and made a JSON6 parser (NaN, Infinity, comments, more supported number formats like 0x123, which my JSON actually already supported based on my strtoint() handler). The modifications for handling a few keywords and more characters for numbers, and optional quotes on identifiers was only a slight modification. So, Apr 21, 2018, was the last code change (other changes afterward for bookkeeping sort-of). And it's been working very well. Then I was watching the unicode mailing list, and they were talking about the format of the unicode character format database, which I had downloaded and dealt with as XML, because it has groupings where 'all the contained characters have these properties' and then exceptions per character within, but then they don't have to specify those properties. But this database of 'over 137,000'(wikipedia) could be represented in JSON...Other than if one did, the data would be nearly as verbose as the XML, as XML has the same basic issue of lots of constant field names repeated. I spent a few days considering that, and the '&lt;identifier&gt;{' exception came to mind that it was otherwise invalid, so could be open to use; and implemented it over a few hours, because, the addition also isn't a huge change to the original JSON parser. It was later, when I was updating docs, and usages, and considering 'what other types are native to JS that don't transport correctly?' TypedArrays, et al. I realized that the class/tag convention would never apply to arrays, but, similar to the change handling '{' handling '[' with an immediate preceding identifier was cheap; but almost without the addition of the ability to define classes ahead of time to only specify values later, the encoding of `ab[AAAA]` So the goal is - extend JSON to support modern JS types in a way that can be updated as the language does. The parser works for any existing JSON content, and of course replacers that worked then; and provides a migration path rather than the large work changing to any other formatting. And it's a drop in replacement providing all existing methods. But since part of the goal is JSON, any other syntax/encoding isn't really a viable solution.
&gt; Bringing politics into OSS like this is harmful Oh, poor you, suffering minor inconvenience at work because someone decided to stand up to companies that work with modern-day Nazis. You wanna talk about _harmful_? Let's talk about how ICE is rounding children up and putting them in cages with no hope of seeing their families ever again. Then we can talk about poor software developers, not being able to use someone else's work for free anymore.
It's bizarre to me that someone thinks they have a right to complain because they're not getting something for free. Especially when they're essentially being told "we think you're doing terrible things in the world, so that's why we won't let you have our shit for free." A sane human being would take a moment of self-reflection when told "hey, you're fucking evil, we don't want to play with you anymore."
Somehow that's even worse than his heterophobic tweets!
I get you. I had imagined he was on some sort of rampage and these other projects were similar to Lerna in scope.
Sorry, I'm latino so it's a little less funny to me.
Why do you think that the creator of free software owes anything to anyone? If some bigot wanted to say "Nike can't use my software because blah blah the flag blah blah," then that would be their right. If you create something, you get to dictate the terms of its use.
&gt; no one cares That explains all the butthurt. It's the sound of nobody caring.
&gt; You know the companies don't even care a little bit? So why are people bitching and moaning about it?
&gt; It's objectively wrong. Locking kids in cages is objectively wrong. If you see things like that happening in the world and you say "well, it's not my place to be political," then you are complicit. Future generations will blame you for whatever atrocities are committed. If you're comfortable with that... you do you.
What is a company, if not a collection of employees? I
Then this doesn't affect them, so why are they bitching?
Honestly.. politics and the law have all to do with F/OSS. We just get to ignore it for the most part. What happened to you is exactly why it's very important to carefully choose a license for projects. And that's exactly why it's good to have an understanding of how code fits within the law.
lololol, welcome to the age of modern journalism. people don't read articles anymore, they'll just respond to your headline and call it a day. you can't have headlines that propose a situation in the headline to which you disagree with in the article, cause everyone will just disagree with your headline and call you an idiot (even tho you did exactly what they're doing in your article that they did not read)
I'm not sure what you're referring to. From what I can tell [on wikipedia](https://en.wikipedia.org/wiki/Open-source_software_movement#Brief_history), the movement was started to *fight* politics of big companies and be more inclusive
If you're a legal US citizen, I don't see why you would be opposed to an agency that seeks out those who illegally enter, skipping in line while honest people have to go through immigration procedures.
Of course they did. And....no it won't. Microsoft has a shit ton of devs and that isn't even their core competency. No one there will ever care. I'm at a very small company. Microsoft can literally have a team to just manage this, track licenses, fork, swap modules, etc. I have to do everything myself... Open source is way more important for the little people NOT the big people. If a bunch of asshats think it's cool and trendy to start pulling shit like this then we are going to go through a phase where we weed all the asshats out. It's not cute, or cool, or whatever... It removes the focus from the code and innovation. I personally don't make a difference either...but, any module that injects their political bullshit (don't care if I agree or not), that shit is removed instantly. 
Why are you absolving the parents who illegally entered the country and dragged their kids along, causing their situation?
&gt; the movement was started to fight politics Fighting politics does not make you apolitical. OSS takes a political stance against the idea that software should be owned by companies
Why are you absolving the government?
I personally have contributed to the lerna project a couple times, and was pretty mad when code that had my name on it was being used as collateral in a temper tantrum. I knew going into this post that it would sound a bit entitled. I mean, no one *has* to let you use their work; but the whole culture of it at this point (for projects with MIT at least) is about sharing helpful stuff, helping other people's helpful stuff be more helpful, etc. The side-effects of these types of license changes are more harmful than it's worth imo
The government is protecting its borders, the parents chose to illegally enter a country and dragged their kids along. It's completely the parent's responsibility.
&gt; Honestly I feel like making an organization "jamiefork" or "politiforked" I would totally support this idea lol
There is this list on Quora which seems to be fairly representative of some of the good books out there on JS OOP - [https://www.quora.com/Whats-the-best-JavaScript-OOP-book](https://www.quora.com/Whats-the-best-JavaScript-OOP-book). I do love Kyle Simpson and his books You Don't Know JS (which are available for free online!). However, he treats JS as not a pure OOP language and even introduces the idea that JS should be thought of as OLOO (objects linking other objects). I actually really don't like teaching JS when teaching pure OOP because JS is more of a prototypal object language anyways. I love, love, LOVE Sandi Metz's *Practical Object-Oriented Design in Ruby* as it is hands down one of the best approaches to OOP - not only from a standpoint of what is OOP (which most beginner books cover), but actually how to properly use it to create great code. And Ruby almost is an easier language to understand than JS as it reads more like English.
just because it's a political fight for a good reason doesn't mean it's not a political fight
I just started it up, launching, break points, call stack and inspecting vars all work well on my first try. Has some neat other feature that it make it worth exploring
Organization made (see above edit), taking manual requests via reddit until I can set up: * a license black &amp; white list repo * a requests repo for manual and semi-automatic requests * a repo template consisting of git hooks and appropriate branches (upstream- prefixes), MOSS account and scripts to send PRs to MOSS to avoid politically charged licensors sending DMCAs Other toolings needed will be made as I see fit for now, but of course, an about repo.
Maybe "Bringing politics into OSS" was the wrong wording then. I'm not sure what the most appropriate wording would be to convey the underlying concern
Except that template logic is declarative, while JSX is imperative. That’s a very important distinction. 
We're doing exactly the same
And just to give more insight, this how the author of the project in question feels about ICE: https://github.com/lerna/lerna/pull/1616. In particular: &gt; The other day I saw this video from the ACLU about a toddler who after being separated from his family for several months could no longer look his mother in the face: &gt; &gt; twitter.com/ACLU/status/1033084026893070338 &gt; &gt; Those with a background in early childhood development can tell you that severe cases of neglect at an early age can and will cause severe developmental delays and disabilities. They will grow up feeling detached, they will have deep rooted trust issues, and they will have an inability to feel empathy. The actions of ICE have had a lasting lifelong impact on these children, and many of them won't even remember it happening. As someone who has a child with these issues, I can't imagine how I would react if I found out that some government agency had caused these issues in my child.
If you want to put on your pretend historian hat you should probably know that the US actually had the first modern usage of Concentration camps in 1830 in which they were used on the Cherokee. Hitler actually modeled the Holocaust on how the US treated Native Americans. The Nazi's are actually one of the only people who systemically liquidated people in concentration camps, rather than let them rot. But literally concentration camps have been used this way in history in almost every single Era since the 19th century. From Americans against the Native Americans, to the Spaniards against the Cubans, to the British against the Boers to the Germans against the Nambians to the Americans against the Japanese Americans to the Nazis against the Jews to the Koreans against their Homeless, to the Chinese against the Uygers and to the Americans against any brown person without papers and even their own citizens with papers.
Is this really worth it? Even if the chances of recognizing their code is slim, it could cost the company. Maybe find alternatives or program your own 
Are you seriously comparing parents trying to secure a better future for their children to a *violent drunk?*
Maybe substituting food for psychotropics in ICE's detention centers is pretty much jailing a population and limiting their resources to control their population growth in the US. You're pretty fucking stupid.
Don't use JWT for auth, [it's insecure](https://news.ycombinator.com/item?id=13865459). But you could perhaps use [Branca tokens](https://github.com/tuupola/branca-js) instead.
What people mean when they say that is that it's derailing. Bringing ICE into the topic of OSS licenses is kinda like coming to a net neutrality policy discussion and start adding clauses about San Francisco housing. They're both politics, so it's fine right? Obviously, no. There are appropriate avenues for most political topics.
the download should really have "use strict"; in it.
Some people are assholes and feel entitled to work. However, an MIT license implies that you can rely on access to a project. Not JUST the code, but the *project*, which includes the community of active developers and active development. If somebody wants to continue building their project under a different license then *they* should fork the project and allow the MIT license community to carry on without them
Okay well fair enough, I am white, so I'm fully prepared to accept that I won't have the same perspective on this that you might. I just found the image of it, as if it were a bullet point in a list of features on the back of a retail box for some software, funny. There is an irony in the fact that no-one in their right mind would advertise such support in this way, and yet "supporting ICE" or indeed any other number of bad actors really is an integral feature of an OSS license.
How is forking going to cost the company? It's literally a button press.
Possibly - looks like the author might have made some changes based on the end of the article.
Hi /u/Taiosa, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I expect their are many who agree that the law should be enforced, but that the way they go about it causes more harm than good. In the UK we're having a similar debate about the current governments "hostile environment" policy, which essentially turned schoolteachers, doctors and nurses into quasi-immigration officials. The problem (similar to criticisms of ICE) is that it can create a climate of fear (even among people who are legal immigrants or their descendants), it can promote a distrust of police or other institutions, and also that is it not a good use of public money if those who are tracked down and deported were not otherwise causing any harm. It is not a matter of enforcing the law or not - there is nuance between the extremes and debate to be had. &amp;#x200B; I think Reddit is a good place (although there are better, less echo-chamber prone places) to have this sort of conversation. A OSS pull request? Not so much.
backend: login route &gt; returns token frontend: have a component that does login and emits an event with the token. i then store the token (state management or on app) and use it to do authorized requests against my backend
It would be good for a frontend developer that can actually clone an existing popular web app lets say uber or airbnb and then improved in some way. This would be a very good talent and willing to go beyond the state of the art. 
I guess everything looks like virtue signaling when you have no virtues.
Yes, in the way that they're both breaking the law. 'we', so are you an illegal immigrant? 
Yeah, I get the humor behind it. I just can't help but question the motives behind some of those upvotes, but I'm paranoid like that in general.
The maintenance.
Yes, I read it after I posted this comment. Turns out I basically said the same thing article says but without all the details. Good article :)
Some slightly different angles that you didn't touch in your article: - ownership matters. If you have a big tech company and hundreds of projects rely on a single framework, you want to own the release cycle for the framework, rather than be waiting on someone else to release bug fixes, etc - employability matters. In SF, React in king. In Toronto, Angular 1 is still alive and kicking. People pick Elm precisely because it self-selects for a specific candidate pool. Don't listen to fanboys, they typically have not done their homework. 
Amazing strawman argument. You use a computer. Computers can store child porn. You are complicit. Future generations will blame you for those atrocities. See how rediculous your argument is?
&gt; In the way that they're both breaking the law, yes. So why compare with a violent drunk, and not, say, a jaywalker? Someone who flicks a cigarette in the street? &gt; 'we', so does that mean you are an illegal immigrant? Who wants to know?
I don't see how it creates a climate of fear among those who have nothing to fear, could you explain? As a legal US citizen, what would you have to fear from an agency that tracks down illegals? 
Proceeds to act like an adult and passive agressively post a link on "This Old Grammar Trick Still Works! How To Diagram A Sentence"
Could not agree more... My philosophy towards OSS is, if you don’t like it, either send a PR or write your own.
Your article is titled with a statement, but your reddit post is titled with a question. When you ask a question, people are inclined to answer it, rather than read your thoughts about said question. That is why articles that are titled as a question are often ignored: if the writer was sure or making a new assertion, they wouldn’t be asking a question, they would be making an affirmative statement.
Competition and having different choices is good for the community as a whole. Frameworks competing for developer mind-share push each other to refine themselves. Different approaches from one are adopted into others (Elm architecture inspired Flux Architecture, etc). 
Thank you pe your suggestion! I edited the article title because it was confusing people, and changed it from a question to a statement. Unfortunately, from my phone, I’m unable to edit the title of the reddit post. Sorry!
You just described a protest. 
This looks really cool! I'll try to use it. The only problem that I noticed is that I could not find the volume control, only the keyboard shortcut.
Does the user need to authenticate every time they re-visit the application?
Yeah I did the same thing with that npm person. 
False positives, profiling, not having documentation on you that can prove your status, the government validating the world views of racists and bigots causing spikes in hate crimes. Basically the current policies create an oppressive environment for people who don't look a certain way.
This has everything to do with free speech. Google the term “free as in beer or free as in speech”. OSS itself is a political statement. 
You admitted you're not American, so I'm going to assume you aren't familiar enough with the American immigration system to really have an opinion on this.
Sauce? I mean, knowing his kind of crazy I believe you but now I want to see it.
I would imagine a lot of people did or will do. It got to be over the top and to the the point where there was very little talk of code/npm.
I know what you mean - IIRC the comedian Stewart Lee has a bit about this, where he explains he doesn't want to do jokes about Muslims because he can't be sure who is laughing for what reasons. You can't really ever control how someone interprets what you say or what perspective they take on it, though - at least as long as they don't openly express their take.
Nice job. Suggestion: Your icons could use titles or alt tags, so that it's more clear what they do. 
&gt; Because the crucial part of the analogy was that having kids doesn't (and shouldn't) be an excuse when you choose to break the law. You made a very deliberate choice the crime you chose to compare illegal immigration with. Are you aware that immigrating without permission is a misdemeanor? &gt; We were talking about illegal immigrants and you said 'Is that what we are to you'? Do you not see how that comment implies you are an illegal immigrant, did you not mean to type 'we'? Well where's the vitriol for Melania Trump? Why doesn't she get compared to a violent drunk?
Thank you :) I'll add the volume slider component soon. 
&gt; Rather a false positive than a false negative Because you're not the one affected by a false positive
Oh I was referring to someone else saying he tweets about hating straight people
&gt; immigrating without permission We call that 'illegal entry'. So breaking the law, yeah. Are you aware that doing it a second time is a felony? &gt; Well where's the vitriol for Melania Trump? She immigrated illegally. Why doesn't she get compared to a violent drunk? We weren't talking about her, why would I suddenly bring her up? If we were talking about her in the context of illegal immigration, the 'vitriol' (apparently that's what enforcing your borders is) would extend to her too. 
I do in-fact have opinion on it. What you mean is, since I am not American, my views are not worth your consideration. Well fare enough, but have you considered. that immigration is not US specific issue. most issues aren't. and when you look at sample size of more than one, you might have different perspective on it? maybe if Trump, wasn't in office, media would have spun the different narrative. and public perception would be different.
&gt; We weren't talking about her, why would I suddenly bring her up? If we were talking about her in the context of illegal immigration, the 'vitriol' (apparently that's what enforcing your borders is) would extend to her too. If violent drunkenness is relevant, I don't see why she has to be off limits.
There is a difference between lawful and ethical. I haven't really seen anybody arguing about the lawfulness of the parents, but rather the ethics of the treatment of children who played no part in their parents' choice. Perhaps you believe making children into orphans is itself an ethical response to a parent's action in this circumstance. Perhaps it even comes back around to the ethics of a society that has a clear and enforceable rule of law vs the ethics of a society that has 'fuzzier' laws that require human judgement. That's where the debate is.
Oh neat! I made something similar about half a year ago but didn't tell anyone because idk if YT will get mad at me. I'm avoiding the YT api by scraping html and also skipping ads where possible lol. 
No I just described trolling, but you can't tell the difference.
From my original post &gt; and if teams need to start using their own forks, that's less people that could potentially contribute to it down the line
&gt; I haven't really seen anybody arguing about the lawfulness of the parents, Neither am I. I bought up the law of land, because these people are knowingly doing the actions that will separate them from their children. And its not like they don't have other options. There are, as I understand, immigration centers, one can approach to seek asylum. Entering illegally, makes the one side enter this social situation in bad faith. The other side has demonstrated they are ethical and sympathetic to the perils of refugees, by setting up the immigration centers. If you want the help, better life. come to the table with good intentions. &gt; Perhaps you believe making children into orphans is itself an ethical response to a parent's action in this circumstance. I do. Just like social services take away children from abusive parents. &gt; Perhaps it even comes back around to the ethics of a society that has a clear and enforceable rule of law vs the ethics of a society that has 'fuzzier' laws that require human judgement. Every social law requires human judgment. Only laws of Physics are absolute.
Sorry, I should have clarified -- an opinion worth anything.
How much time do you think you put into this project?
It's not my solution or my site, it's just an alternative spec for tokens, you can do your own research. I'm not selling you anything, it's just my 2 cents.
Depending on the licence you are controlling other people's actions. MIT/BSD says you don't care about community, that you care more about the code you produce and want as many people to use it as possible even if they produce Apple and don't feed anything back. GPL says that you want people to be part of the community, and you will force them to play. Depending on GPL 2 or 3, you are declaring on the usecases the consumers of your software have through Tivo'isation clauses.
cool.
Around 50 hours, may be.
Oh my gosh, imagine what will happen when he hears about GPL 3 and all the projects that were licenced as GPL 2 or higher if it exists.
Actually that was me not him :/
One thing to note about a scenario like this: a new function will be allocated in memory for `getName` and `setName` for each instance of `Person` if written this way. This may be fine for a few instances but is a trade-off to account for if there are a lot of them.
Bullshit. I write code and I don't want to be complicit in abuse. So I will licence the code in the way I see fit. If I want to block people from taking my code and abusing their users I can take a GPL licence and you don't have to use it. Go write your own library for free in your spare time. If you are going to take other people's work for free, sometimes they want some sort of requirements on its use. In fact, it isn't that uncommon. People who make computers can also say, this computer is not allowed to be used for child porn. Do you really have a problem with that?
Yeah, but moaning about it is an optional extra people do for free 
This is a huge step. The chrome profiler is really good but I see this to be easier for new front end dev.
Because devs need to do a ton of work to refactor to avoid using OSS that they know their company cannot accept the licensing? It makes the devs work day more of a chore. It will affect the organization, but mostly as a hidden cost. The devs have all the chores associated with the change, and it doesn't even really matter if their politics align with the new license, they still have to stop using it because it's suddenly risky to use. If the waste of time refactoring away from one OSS license to another costs the organization enough, they will stop using and contributing...too risky. Better to fork and maintain internally at that point, or just outsource delivery of the functionality to another company that is more willing to inherit the liability.
Correct. Although it should be noted that MIT has never been tested in court.
Yes. This copy paste license is also vulnerable to someone not on the list obtaining it and then providing it to someone on that list. It'd still be legal. This drama already happened a few weeks ago in another project.
I am not a lawyer, so I’ll add my two cents. Isnt it true, that you can take a MIT library, fork it, add stuff and publish it under a more restrictive license? And while the original library remains, your package is not under MIT, despite having 99% open source code? Isnt that exactly what happened, sans the forking?
While you may be correct, it's really not the straightforward. If code were measured by volume, we'd be doomed to let i; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + 1; i = i + input; if(i === 20) { const number = 20; } else if(i === 21) { const number = 21; ... The commit history would read: `insure 'number' is not 0` `produce a 'number' greater then 1` `keep "i" above 2 to prevent "number" being below 3` and other such horrors.
Licenses are inherently political because they seek to constrain the behavior of others through rule of law. OSS is merely a subset of the political act of licensing that asserts that it will not seek to constrain behavior. Some of these seek to impose their license downstream (eg GPL) while others treat that 'reproductive' constraint as too constraining (eg MIT). Even beyond this, OSS is political because it uses a license to decrease the power of licensing.
Oh! I've got you now, thanks! That's awesome.
Did you build your own car to get to work in the morning? 'Cause it sounds like you're reinventing the wheel over there.
OH I remember that one! Not the one, tho. Thanks, much appreciated. (bookmarked) &amp;#x200B;
Protests don’t use the “appropriate avenues” - that’s what defines a protest.
Sounds like you had bad luck. It's a crapshoot. Some projects are welcoming and responsive. Others are ghost towns. Others are arrogant and dismissive.
&gt; This drama already happened a few weeks ago in another project. Lerna?
&gt;back Phaser? [https://phaser.io/](https://phaser.io/)
Can you fix your markup please, I've got a headache trying to read the mix of fonts. &gt;&gt; The part that I am not understanding is when I console log below So you mean you don't understand why the bmiCheck function works?) When you call john.bmi() its setting the property 'bmiResult' on 'this', which in this case is set to whatever is before the 'dot' in john.bmi(), i.e. john. Your bmiCheck function is a bit mixed up. You pass in a parameter 'bmiResult' to the function, but don't do anything with it. And, a general principal is that a function shouldn't refer to variables outside its scope. So that function accessing 'john' and 'mark' would be considered really bad practise. Try to rewrite that function as &gt; function bmiCheck(bmi1,bmi2) { ... } and call it with: &gt; console.log(bmiCheck(bmi1,bmi2) 
Obviously volume is not the sole factor to consider but did you actually look at the contributions? This project is overwhelmingly the work of a single person.
Or: Just ignore his commit and continue using it anyway.
The idea that information should be free is a radical political ideology that brought us open source software and free software. There’s a permanent rift between OSS and Free Software that will never be merged. The Free Software movement (of which Richard Stallman is a figurehead) believes that licenses should be used as a weapon against projects like DRM that are antithetical to his idea that information should be free. The MIT license is the primary license of OSS The GPL is the primary license of Free Software This has been going on since the 80s 
Some do, some don't. You ever see those on TV where the police is throwing tear gas at people vandalizing the street? Acting like a moron and causing damage to bystanders can be a form of protest, yes, but for every one of those stupid counterproductive ones, there are also hundreds of pacific demonstrations, open letters, petitions, hunger strikes, etc. The medium doesn't define what constitutes protest, the content does.
No, this is completely backwards. Open-Source deliberately avoided the political moralising and was deliberately designed *for* companies that own software. You are mixing up Free Software and Open-Source Software. There's a lot of crossover in community and licensing, but the motivations are entirely different. The Free Software movement is based around Richard Stallman's political stance that it's immoral to stop people from sharing software. The Open-Source movement is based around the idea that companies can develop software more effectively by opening up the development process. 
Licenses that restrict use is the core difference between Free Software and OSS. The whole reason we use the MIT license is that the GPL was weaponized against DRM by Richard Stallman. 
Tell that to the mathematicians who worked at Los Alamos.
the analogy of a criminal having a kid was exactly that, an analogy. You suddenly brought up Melania Trump, you need a better segue.
Another strawman, the same one, again implying I am somehow for atrocities. Take a deep breath and read slowly. You are applying YOUR views via a licence to a collective coding effort. Unless the contributors all agree on the new licence, the licence should not be used in their name. If you really want the licence applied, fork it fresh and continue the work independently of those who appose the licence. It's not hard.
Yeah.
ICE was formed as a response to 9-11 where all of the terrorists were in the country legally. They are supposed to be fighting terrorism not putting kids in concentration camps. If you're a legal US citizen, I don't see why you would support wasting tax dollars this way.
I don't need anything. You used a bad analogy, and it was met with a bad analogy.
It's about false positive rate, that does affect everyone.
To be honest I'd rather read about a linę od JS code that does NOT freeze chrome.
Very cool, bookmarking this for reference later.
Thank you :)
Seems like `1` does not freeze Chrome.
When I view the post the mark up all looks fine... I'll try and fix it &amp;#x200B;
thank you!
&gt;JWT is so widely implemented (e.g. if I use a "Login with Google" option then I'm using JWT) Damn, so insecure.
I have a question, Angular is only front-end if I'm not mistaken, but the website says: "Create desktop-installed apps across Mac, Windows, and Linux using the same Angular methods you've learned for the web". Using the same methods means you won't do all the job with Angular, you will need to manage your back-end with other tools, but as far as the front-end is concerned, you can use it for desktop apps. Right?
Really like it, using it now! suggestion: I think lowering the opacity could be lowered on the fields after a search so you can see more of the background wall paper adding a hover that increases that div's opacity. I was listening to some lofi music and was wishing the background image was more prevalent for more of a relaxed feeling. If that makes sense. &amp;#x200B;
LOL
/r/programmerhumor has a lot of good suggestions for this.
What about [music.youtube.com](https://music.youtube.com)? It's pretty music-focused.
Thank you :) That's actually interesting! I'll work on it and see how's the ux. 
&gt; ICE was formed as a response to 9-11 where all of the terrorists were in the country legally. They are supposed to be fighting terrorism not putting kids in concentration camps. [INS](https://en.wikipedia.org/wiki/Immigration_and_Naturalization_Service) was merged into ICE after 9/11. We deported people before that, it was just under a different name. &gt; The operational functions of the INS included the Programs and Field Operations divisions. The Programs division was responsible for handling all the functions involved with enforcement and examinations, including the arrest, detaining, and deportation of illegal immigrants as well as controlling illegal and legal entry. 
Very cool, can’t wait to try!
Why am I not surprised that you're a Jordan Peterson zealot and a Trump supporter? You people are insane. 
&gt; virtue signaling Conservative detected. 
Pretty sure its coming in the next major of React as React.lazy: https://github.com/facebook/react/pull/13398
wow that's nice, never heard of it before, thanks
Good question. 1. Honestly, it didn't come to my mind at all when I was marathon coding (YouTube music isn't launched in India yet). 2. As a friend pointed, YouTube music wouldn't have all the YouTube videos collection. 3. Anyways, after launching the rey beta I got prepared that YouTube music will kill this project.
Looks like Yarn is set to change the game again. Personally, I switched to Yarn when it came out and never looked back. Now I'm even happier I did and then didn't.
Will this have support for Youtube playlist URLs? Some bugs: this youtube link doesn't have any hits in your app: https://www.youtube.com/watch?v=_euRYaGwKV8 This youtube link has a strange title in your app that isn't found on the actual youtube page (I tried ctrl+f for "5k"): https://www.youtube.com/watch?v=h7Si3nVb8WU
Wait, was that supposed to be some sort of an argument?
This is amazing! Thanks for the inspiration. Gonna try to make something similar but with SoundCloud. 
&gt;The midterms are going to be a disaster for you people. Mind reading much? I'm not even American, far from it. You're the one who constantly brings politics into a thread that, ironically, started with me saying that `I hate having politics shoved down my throat`. Especially American politics. Imagine being so entitled as to think everything revolves around your pet obsessions.
This is helpful, I'll fix the bug. Thank you :)
&gt;https://github.com/PolitiForked lol people are just gonna license around it now
Good to mention when talking about p5js: There is this weird guy on YouTube making awesome content around this library. The channel is called The Coding Train.
There's an open source app called soundnode: https://github.com/Soundnode/soundnode-app Of course making your own could turn out better / be more fun / give you more insight, but figured I'd mention it regardless!
Have the socket layer above the route layer.
What or how do you mean?
I've been spending a lot of time on this lately for a little toy react/redux/electron project. I find redux middleware very useful for this. &amp;#x200B; Highlights: &amp;#x200B; \[localStorage middleware\]([https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/storage.js](https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/storage.js)). When we receive a token, put it in localStorage. When the app starts up, pull the token out of localStorage. \[auth middleware\]([https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/auth.js](https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/auth.js)). Automatically append the authorization header to all API requests. \[referesh middleware)([https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/refresh-middleware.js](https://github.com/stevengoldberg/threadcount/blob/master/app/middleware/refresh-middleware.js)). When a request gets dispatched and the token is expired or about to expire, queue the request, refresh the token, then dispatch the queued request.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [stevengoldberg/threadcount/.../**refresh-middleware.js** (master → dcdcecd)](https://github.com/stevengoldberg/threadcount/blob/dcdcecd06bf5cf61ac855c71bc270917ba622bb7/app/middleware/refresh-middleware.js) * [stevengoldberg/threadcount/.../**storage.js** (master → dcdcecd)](https://github.com/stevengoldberg/threadcount/blob/dcdcecd06bf5cf61ac855c71bc270917ba622bb7/app/middleware/storage.js) * [stevengoldberg/threadcount/.../**auth.js** (master → dcdcecd)](https://github.com/stevengoldberg/threadcount/blob/dcdcecd06bf5cf61ac855c71bc270917ba622bb7/app/middleware/auth.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e5xg44p.)
Adblocker ofc
Hey man you do you. It's an awesome exercise you've put together and I'm sure you learned a lot in the process. 
If you have this on github just link that, but I am making some assumptions. One assumption is that you are using react router which displays a component based on what the route is. If the socket code is on the component that gets displayed, that means when you switch routes you are getting different instances of the socket io stuff. What you may want to do is make a component that *just* handles socket io state. That component will be where you add your listener, and it can send the data it receives as props to the child components (such as your router) or to your state manager (such as redux). Although re reading the post, I think maybe the problem is different but this would still be the solution. 
Thank you so much :) 
That's pretty dope! My only problem is that I'm not exactly sure how to contribute to an open source project. Do I just push my own branch? Or how does one go upon even contributing?
But angular is a node package?
I just recently saw this page for the js13k games competition, which lists a number of small game engines. It might be here! https://js13kgames.github.io/resources/
\&gt; This means files can be loaded straight from yarn cache, rather than requiring copying them into node\_modules during the installation step. This gives faster installs and presumably faster require s as well. Are these real problems people are facing? Or is this a Facebook specific issue? (I've heard rumblings that they plan to extend yarn to support managing Hack packages as well?) In most apps, require(...) is run at the top level of a file, meaning it just contributes to startup time. And with recent versions of npm (especially if you use "npm ci" instead of "npm install") install speeds seem pretty reasonable. \&gt; basically monkeypatches require / require.resolve That's super gross. npm is there by default and works great for my usages so I'm going to stick with it. 
I like my node_modules folder! 
Yep. I saw a trashcan, and I was like, "What on earth does this do?"
Startup times in nodejs are a real problem. Imo it should be resolved. Installation time is ridiculously slow as well.
Yes. If you want to avoid that, you could use a cookie as you said.
&gt; then the author/maintainer is free to change the license as they see fit. They are the copyright holder after all. That's exactly the point/problem, the maintainer is not the (only) copyright holder -- everyone who's submitted a pull request that has been accepted is also a copyright holder. We call them contributors. You cannot change the license of a "work" without permission from all those contributors.
&gt; I have always presumed that you become a co-author from that point onward You do, and so the license cannot be changed without your permission.
Are those mlab details in config supposed to be public?
Can confirm that Chrome froze instantly and had to kill it.
How do you get only one? I'd love to have a single node_modules folder for all my projects.
&gt; Are these real problems people are facing? Yes, if you're on a big company with a big monorepo. If you try to install dependencies in a monorepo w/ a few hundreds dependencies using existing systems, currently installation crawls to a halt (which is a significant blocker for getting fast CI). If your repo is small enough, you can probably live with a 2 minute CI overhead. When you're in a big company, you'll have a platform team that wants to rollout bug fixes/security updates/migrations scripts/features to as many projects as possible because when you have that many projects, you're bound to have a bunch of projects whose owners don't take the time to keep deps up-to-date, or who reinvent things that already exist, etc. Managing dependency health and DRYness across a multi-repo setup tends to be a major pain in the ass, hence monorepos. Facebook has a big honking monorepo, but it's not the only company that does. Google also famously has a gargantuan one, and my company (Uber) is evaluating moving all web projects into one. &gt; That's super gross This is also my biggest beef. ES6 modules are the future, and rewiring importing rules at runtime is completely antithetical to how they work. What they are doing is a clever trick in the name of performance, but the part that puts me off is that it requires locking into transpilers and CommonJS forever, and this is why I shelved this idea when I was experimenting with it some time ago.
I like my node_modules folder per project!
&gt; there are also hundreds of pacific demonstrations, open letters, petitions, strikes, etc. There are hundreds of atlantic ones too. The word you're looking for is "pacifistic", which this type of protest would qualify as. So what exactly are you getting at?
OK, that's interesting. I guess I hadn't seen it from that perspective.
It’s mostly about having a trillion tiny files. Even `rm -rf node_modules` takes about ten seconds for me sometimes, and that’s on a PCIE SSD. 
This is kind of a non sequitur, but what are the advantages of a monorepo? Why would Uber want to move to one? I overheard a similar debate at my company but have no idea why someone would want that (since it introduces so much build and install overhead and whatnot).
Yeah but I bet this will shave off at the very least 30-40% of installation time if done right.
Nobody who offers software for free has any obligation to provide software for free into the distant future. This particular case is a bit of a dick move but totally within the author's rights. If your company doesn't like it you can write your own based on a fork. But of course that is unlikely to happen because the whole attraction was that this was free and the company could build (profit) off it without even having to contribute. Beggars can't be choosers.
Hey, we are using Durandal too for some of our projects. It's hard to find support but we hacked out way out of all the issues we had. We also have one project in AureliaJS. Our latest project is in Vue
We have one project in AureliaJS. The latest uses Vue
Sounds like your browser is asking the server for sourcemaps, but the server is returning an HTML page instead.
You've completely given up on trying to defend your stance I see. Well at least it provides a clean end to a lopsided discussion.
This code is pretty janky, I generally I would say this isn’t a good model for learning. That being said just for understanding this. A `Promise.then` returns a new Promise. However `await` works. Little differently in that it will pause execution of the function return an unwrapped value out of the promise and then resume. Once the value is unwrapped out of the promise to make it `thenable` again you need to rewrap it. Just to reiterate just because you can do this doesn’t mean you should. Use promises chains or use async/await but pick a lane and stick to it because catching errors in this function is a nightmare 
I'm really glad to see I'm not the only one struggling with this! Finding good best-practice references has been particularly frustrating.
Licenses do not affect code retroactively. If code was contributed as, say, MIT, then on the 10th commit made to be james' BS, then all code up to and including the ninth are valid. Also even if a license revoking rights to said organization is there from the beginning, I don't believe that actually holds up in court.