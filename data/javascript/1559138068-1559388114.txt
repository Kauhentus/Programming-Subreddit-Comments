Hi /u/lucamezzalira, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The entire system will be ran off a network drive that everyone has consistently mapped to their workstation. I'm planning on having a bunch of generated files that will be loaded based on url variables. Performance isn't a huge issue, the data sets won't be enormous.
In which situation would you use that type in React?
If you know ahead of time the absolute path to the source file directory and use some clever naming and data partitioning scheme, you should be able to dynamically load those sources for concurrent read-only access. I'm not up to date on this, but depending on what browser your users have available you could even use an actual database like sqlite without having a backend service apart from the shared file system. Not sure about the availability of such tech right now unfortunately.
Looks cool, I’m curious about performance. Also, if the geometry exists in 3D space, how is it not a 3D engine? Don’t all 3D engines render 3D space into 2d images? I guess I don’t see the distinction... (honest question, not to detract from the work put into the engine, it’s impressive)
Hi /u/redvibes99, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
this will execute synchronously instead of parallel. If you want parallel this does not work unless you push the pending promise in an array.
Hi /u/mechanicalBadger, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Incognito
You're right lol, his statement is weird
Perfect, just what I was looking for! Wish all the style guides had something like this so we could choose the one the suits us best instead of just the one with the best documentation!
You should use interface unless your type cant be expressed as an interface.
You can use type to make derived types, for example the `Partial` generic type is implemented with type
I understand interfaces to be readonly by default and types to be mutable, where they can allow dynamic keys if you set them up that way. For this reason I use interfaces for most object structures. In flowtype I've learned that some people gravitate towards a readonly type: type myType = {| key: boolean |} Interfaces are readonly by default, just as they are with Typescript so instead of using pipes I can use interface myFace = { key: boolean } Another benefit to this is that I can convert my flowtype projects to Typescript more easily when my company decides to better support TS.
Think I'll try using this for a project. There's some tooling here that might not apply to my use case, is there an easy way to remove them? Haven't seen what it outputs yet exactly, but can I just delete files/configuration or would I have to 'eject' like you would with a create-react-app project?
My guess is that he's talking about the materials, looking at the examples there's no shading on any of the models. The performance should be pretty good as it doesn't need to calculate any lighting. Loaded up the kirby model and threw in a fps counter, solid 59/60 fps. Some shapes tend to take priority in the clipping plane that shouldn't, easiest example to describe is on the home page, the hat, if you point the bill north east-ish, the temple pops above the bottom portion.
If you're modifying a non-async method used in a lot of places, and you find you need to work with a promise inside it, it's much easier to just pass it callbacks than to make the method async and refactor every place where it's called.
The same is true of virtually every other built-in object, such as strings and booleans: only a few, such as Infinity , NaN , null and undefined have no properties or methods. I thought booleans and strings are primitive data types?
Nothing gets moved, and any discussion that uses this sort of explanation is helping to build a grievously incorrect mental model of how the Javascript engine actually works. The illusion of hoisting exists due to the multiple passes that the engine makes during the compilation phase. Certain declarations are handled first regardless of line number, but this all happens in place. Nothing is moved or intentionally re-ordered.
This seems like it should be built for an existing scaffolding tool like yeoman
I mean, the hoisting and the imperative programming answers are straight-up wrong, and even I wouldn't accept the prototype chain explanation as a real answer to the question, despite the fact that full understanding of Javascript isn't a requirement to pass any of my interviews. But I guess we're okay with teaching junior engineers how to subtly fail job interviews here.
tl;dr you have to pay to read the whole article... and my guess is that doesn't worth it
The mobile screen is available to inspect?! Boggle! Thanks for the tip!
Interfaces allow dynamic keys as well. Interfaces aren't read only. Interfaces are only at design time and are thrown away after compilation.
Hi /u/Shilpa_Opencodez, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I agree, I've found the `eslint` rule pages really handy for understanding why they've included something. Would be nice in all the style guides, especially AirBnB.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I always wondered where the [infographics show](https://www.youtube.com/user/TheInfographicsShow) got its assets from.
&gt; For this reason, the goals of the language are significantly different than TypeScript. Can you clarify on this? Why resort to creating an entire new “language” (that just outputs json) that utilizes jsdocs rather than use typescript and reflection to get the typing? And decorators to specify additional metadata?
Thank u so much for the guidance !
The license was specified in the package.json (I guess your bot doesn't check that), but I just now went ahead and added the license file in the GitHub repo as well. Thanks whoever made this bot! :)
&gt; The same is true of virtually every other built-in object... What is this in reference to? Something in the article? &gt; only a few, such as Infinity , NaN , null and undefined have no properties or methods. Infinity and NaN are Numbers: NaN.toString() // "NaN" &gt; I thought booleans and strings are primitive data types? They are.
Your Weekly /r/javascript Recap **Wednesday, May 22 - Tuesday, May 28** Top 10 Posts | score | comments | --|--|-- [JavaScript Clean Code - Best Practices - based on Robert C. Martin's book Clean Code](https://devinduct.com/blogpost/22/javascript-clean-code-best-practices) | 525 | [114 comments](https://www.reddit.com/r/javascript/comments/brm8dg/javascript_clean_code_best_practices_based_on/) What are some JavaScript things beginners don't know? | 313 | [406 comments](https://www.reddit.com/r/javascript/comments/btxz72/what_are_some_javascript_things_beginners_dont/) [GitHub - dsa.js: Data Structures and Algorithms explained and implemented in JavaScript](https://github.com/amejiarosario/dsa.js) | 288 | [19 comments](https://www.reddit.com/r/javascript/comments/bs7dx4/github_dsajs_data_structures_and_algorithms/) [WebAssembly at eBay: A Real-World Use Case (Barcode scanning with WASM)](https://www.ebayinc.com/stories/blogs/tech/webassembly-at-ebay-a-real-world-use-case/) | 177 | [27 comments](https://www.reddit.com/r/javascript/comments/bt6q8k/webassembly_at_ebay_a_realworld_use_case_barcode/) [great article to know about async programming in node js](https://medium.com/techshots/javascript-understanding-async-await-209fde308d69) | 163 | [36 comments](https://www.reddit.com/r/javascript/comments/bsl4id/great_article_to_know_about_async_programming_in/) [JavaScript's for loop is surprisingly fast](https://itch.io/t/470048/javascripts-for-loop-is-surprisingly-fast#post-769285) | 146 | [104 comments](https://www.reddit.com/r/javascript/comments/bssiex/javascripts_for_loop_is_surprisingly_fast/) camelCase in front, snake_case in the back | 145 | [122 comments](https://www.reddit.com/r/javascript/comments/brzfiw/camelcase_in_front_snake_case_in_the_back/) [tiptap – a renderless rich-text editor for Vue.js](https://tiptap.scrumpy.io/) | 120 | [7 comments](https://www.reddit.com/r/javascript/comments/bsxymk/tiptap_a_renderless_richtext_editor_for_vuejs/) I wrote a HTTP client for micro frontend architecture. Now we started to use it on every Node.js project. | 118 | [41 comments](https://www.reddit.com/r/javascript/comments/btdjmm/i_wrote_a_http_client_for_micro_frontend/) [I created this visual Flex editor entirely in vanilla JavaScript and explained step by step how I did it (see walk-thru tutorial in comments). Allegedly, it has been used in multiple classrooms to teach CSS.](http://www.csstutorial.org/flex-both.html) | 118 | [12 comments](https://www.reddit.com/r/javascript/comments/bsv97q/i_created_this_visual_flex_editor_entirely_in/) &amp;nbsp; Top 7 Discussions | score | comments | --|--|-- [JavaScript's forEach is very slow!](https://itch.io/t/459584/javascripts-foreach-is-very-slow#post-755006) | 36 | [85 comments](https://www.reddit.com/r/javascript/comments/bs0gda/javascripts_foreach_is_very_slow/) I'm addicted to Jquery and I need an intervention. Anyone else been in my position? | 13 | [60 comments](https://www.reddit.com/r/javascript/comments/bscvqq/im_addicted_to_jquery_and_i_need_an_intervention/) Can't understand why generators are usefull besides async operations | 37 | [39 comments](https://www.reddit.com/r/javascript/comments/bslcbq/cant_understand_why_generators_are_usefull/) Feeling the imposter syndrome hard, need advice | 29 | [35 comments](https://www.reddit.com/r/javascript/comments/bsppiq/feeling_the_imposter_syndrome_hard_need_advice/) [Fake English-like word generator JavaScript/TypeScript](https://github.com/nwtgck/fakelish-npm) | 52 | [29 comments](https://www.reddit.com/r/javascript/comments/bt5j8h/fake_englishlike_word_generator/) [Secrets of JavaScript: a tale of React, performance optimization and multi-threading](https://medium.com/@leofabrikant/secrets-of-javascript-a-tale-of-react-performance-optimization-and-multi-threading-9409332d349f) | 62 | [27 comments](https://www.reddit.com/r/javascript/comments/btfbqk/secrets_of_javascript_a_tale_of_react_performance/) [Strict null checking the Visual Studio Code codebase](https://code.visualstudio.com/blogs/2019/05/23/strict-null) | 111 | [25 comments](https://www.reddit.com/r/javascript/comments/bs418n/strict_null_checking_the_visual_studio_code/) &amp;nbsp; Please let me know if you have suggestions to make this roundup better for /r/javascript. I can search for posts based off keywords in the title, URL and flair. If you would like this roundup sent to your inbox every day send me a message with the subject ['javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript&amp;message=x). Or if you only want a weekly roundup, use the subject ['javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript%20weekly&amp;message=x) However, I can do more.. you can have me search for any keywords you want on any subreddit you want. Send a message with the subject ['set javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) and in the message: specify a number of upvotes that must be reached, and then an optional list of keywords you want to search for, separated by commas. You can have as many lines as you'd like, as long as they follow this format: 200 50, keyword 1, another keyphrase, last example You can also do ['set javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript%20weekly&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) And you can replace javascript with any subreddit. See my wiki to learn more: [click here](https://www.reddit.com/r/SubredditSummaryBot/wiki/index)
There's nothing wrong per se with returning HTML. Look into PJAX. There can be a downside that your responses will be bigger and require more bandwidth and time to process, but the difference might be negligible in your situation.
I believe this is answered in the preceding sentence: “FunctionScript arose out of a need to introduce developers with little programming experience, but familiarity with JavaScript, to full-stack API development and best practices around defining and connecting HTTP application interfaces.” The development of FunctionScript arose out of a need to serve developers / customers something that walked and talked like JavaScript but could create a type safe HTTP API. The additional language footprint of providing types everywhere was (is) overkill and added too much unnecessary complexity for newbies. We also need complete control of the Type System for what we have planned moving forward, and the type system is focused on the HTTP interface... which has a different set of problems / surface area to tackle than just an internal code base.
&gt; Spheres are actually dots. Toruses are actually circles . Capsules are actually thick lines. It’s a simple, but effective trick. The underlying 3D math comes from Rotating 3D Shapes by Peter Collingridge. I’m guessing since it’s “pseudo-3D” it does all sorts of optimizations and transformations rather than actually having a “camera” to render from a POV.
[https://stackblitz.com/edit/react-2teeea](https://stackblitz.com/edit/react-2teeea)
Oh yeah maybe that's it. I have to agree that the models run at a very nice frame rate. Is lighting expensive with webgl?
I didn't even realize that bind was final, but indeed var test = (function () { console.log(this); }).bind({answer: 42}); test.call({answer: 0}) // {answer: 42} test.bind({answer: 0})() // {answer: 42}
No need to eject, you have access to all of the files. So everything is configurable and you can modify the project to fit your need. You can see it as a modified `npm init`
I was thinking [Kurzgesagt](https://www.youtube.com/results?search_query=Kurzgesagt&amp;page=&amp;utm_source=opensearch) (FYI as an American I spelled that from memory!)
Why?
It's using an existing project scaffolding tool called [degit](https://github.com/Rich-Harris/degit). It's been made by Rich Harris so you can find it used for initializing [svelte](https://github.com/sveltejs/svelte) projects.
&gt; The development of FunctionScript arose out of a need to serve developers / customers something that walked and talked like JavaScript but could create a type safe HTTP API. The additional language footprint of providing types everywhere was (is) overkill and added too much unnecessary complexity for newbies. This is what I was looking for - to be honest, the first paragraph really did not go into any detail as to why Typescript couldn't accomplish that. IMO specifying typing information isn't too difficult for beginners (not any more difficult than specifying jsdocs). As for overkill, yes, I can see that. Although I'd imagine for more complex functions it wouldn't be. That being said, I'm sure on the backend this would create a ton of work for you guys (as well as updating the coding UI to support typing information/hinting). &gt; We also need complete control of the Type System for what we have planned moving forward, and the type system is focused on the HTTP interface... which has a different set of problems / surface area to tackle than just an internal code base. I guess I'll have to see what kind of typings you guys create that are incompatible with typescript to make a determination on this. I've used typescript (for REST and graphql) to successfully define schema for my endpoints, so I think for me this doesn't make too much sense to me. Anyways, I'm not really criticizing your guy's choice on this, it was just idle curiosity as to why Typescript wasn't a good fit. I agree keeping it simple is probably a good thing.
Hi /u/sharoonj12, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fuckl0ve, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/toateslafel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Reminice, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes.
Well that's not helpful at all.
Hi /u/throwaccount83541, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
First time I see someone having hard time with Kotlin. I am a software engineer with Java / C++/ C# on my workplace every day and one day I was tasked to learn Kotlin and port our old vanilla java restful project. And it took me a weekend to learn the language and 3 day to port everything. After that I felt that Kotlin was an easy programming language easy to pick.
Honestly, it depends on what you're looking for. If you're looking for someone who's got a genuine CS background (arguably better candidates where being knee deep in garbage like TypeScript and React is a requirement), then these questions aren't terrible.
Good work!
There are effectively 3 versions of JavaScript: Client-side (in-browser), Server-side (Node) and Application/Compiled (TypeScript). &amp;#x200B; Bonus fact: Most employers don't know the difference, and will typically look for "Front-end Developers" with years of Node and TypeScript experience. It will make finding good work very difficult.
Actually looking into it again there isn't much reason left for picking interface over type anymore, I would say the interface carries a bit more intent in the type being a fixed shape or basic structure of your program. Other than that, you do you.
Notepad++, Obsidian Theme, Consolas font size 10.
It is a 3D engine that renders its camera view to a texture. Like unity renderTexture feature
I disagree a little, because then users would need to install Yeoman
This is awesome! I'm actually working on something very similar for creating/starting new packages written in TS. Meant to be a sort of "create-react-app" for TS packages, because I got sick of always initializing everything manually. Still a WIP but it lives here: https://github.com/himynameisdave/create-ts-package
It's probably like papervision from the old flash days. Unlike traditional 3d rendering there's no depth buffer, instead clip intersecting geometry and draw submeshes ordered by depth.
Hm. . . [Phaser](http://phaser.io/) uses pixi.js as it's renderer. I wonder if Phaser could be coerced into using this instead . . .
This is really brilliant. Well done!
I wish Typescript could be supported natively by browsers some day.
From the home page, it looks like this uses an Orthographic perspective, so the camera's pan and distance has no affect on the image. Orthographic is usually referred to as 2d
Why? I love Typescript, but that seems kind of redundant for a number of reasons. The files would be larger due to including the type annotations, and you would probably need a transpilation step anyway for browser support.
That’s like saying you hope C language is supported natively on computers. That statement doesn’t compile for me.
Thank you for your response. I will attempt to implement your code into mine soon. Right now I am stuck on this. If you don't mind please take a look. Thanks again for your response, I'm sure I will find (and I already have found) it to be useful. https://www.reddit.com/r/webdev/comments/bujuwq/jquery_2nd_part_of_ifelse_statement_not_working/
posted there and getting responses. Thank you mod!
You read too fast, that's a "vulnerability/bug" not a request for help
Just keep things consistent. My preference for using interfaces over type aliases comes from the fact that I work on public APIs and the output tends to be less problematic when used with easily extendable interfaces.
Support in Dev tools may be nice - mainly for copying functions into the console to test them out. It's a bit of a pain to strip out the types.
This is what i tried to do in the last section of this article. Sorry if my message isn't clear enough. To summarise: use interfaces when you can, types otherwise.
&gt;This is what i tried to do in the last section of this article. Sorry if my message isn't clear enough. To summarise: use interfaces when you can, types otherwise.
&gt;I have an ajax call that returns the following data (as data.image\_data) &gt; &gt;`image_data: "[[12, "userfiles/19/05/21232f297a57a5a743894a0e4a801fc3/ImageLibrary/monkey-man_DDSJwsq.jpg"], [15, "userfiles/19/05/21232f297a57a5a743894a0e4a801fc3/ImageLibrary/thom.jpg"]]"` &gt; &gt;&amp;#x200B; &gt; &gt;How do I retrieve the URL associated with 12 for example? `JSON.parse(data.image_data).find(item =&gt; item[0] === 12)[1]`
If you hit a paywall use this link: [https://medium.com/@ryansolid/the-fastest-way-to-render-the-dom-e3b226b15ca3?source=friends\_link&amp;sk=5ae1688dde789e46cecf5c976e708da5](https://medium.com/@ryansolid/the-fastest-way-to-render-the-dom-e3b226b15ca3?source=friends_link&amp;sk=5ae1688dde789e46cecf5c976e708da5) &amp;#x200B; Publication demanded I add it to the distribution channel. &amp;#x200B; PS. Why the downvoting? I'd love discuss any concerns anyone has with the content of the article.
Neither is "straight-up wrong", and the prototype answer is perfectly acceptable, you are just talking out of your arse
Quite simply, Abramov is right and Mezzalira wrong. &gt; I personally worked in different organizations where new joiners provided good insights on how to change a “core library” but often for politics or because the change would not be provided with an immediate benefit, those suggestions were parked waiting for their turn inside the backlog. &gt; Decentralising decisions to a team is probably one of the best things a company can do because ... blah blah ... Basically it boils down to that - creating a whole architecture to fix organisational problems. Utterly ridiculous, fix your company culture instead
Maybe the polygons are drawn individually with the Canvas API?
Do you have to return break? Interesting
I'm expecting the only thing logged in this code to be 'Gun it!' since the 'red' case shouldn't be executed in my mind.
I don't use TypeScript but AFAIK, the sole reason for type base js is a better and healthier working environment for big projects. The browser shouldn't care about your types and whatsoever.
Adding a break to your 'yellow' case should help you out
You're missing a `break;` after your nested switch statement.. Put it below the closing brace of that inner switch.
Fine, although a little gross imho. The reason its logging both is you need a break after the nested switch statement. switch(color) { \\... case "yellow": switch(lightColor) { \\... } break; \\... further cases } A better option is make a function out of the inner switch. My personal rule is after 3 - 4 indentations make a named function for readability / usability.
I get where you're coming from - but if you don't want a compile step, you can always use `checkJs` and use JSDoc comments!
Yea, I'm literally a day into learning so I haven't messed with functions yet. Just messing around and practicing some stuff as I go on codecademy. I appreciate your input though!
Awesome, thank you! Didn't realize that I hadn't 'broken' the yellow case, only the nested switch.
Thank you!
So C# on web assembly then
No problem! Easy thing to miss don't fret!
Super awesome!
I found infographics show as recommendation of a Kurzgesagt video lol. I think the latter at least made an effort on their graphics
Nope, read it perfectly, but perhaps the suggestions weren't precisely what you needed: &gt; For framework- or library-specific help, please seek out the support community for that project. In other words, seek out the proper place to file Chrome bugs; I believe this is where it could go, don't know about github... * https://bugs.chromium.org/p/chromium/issues/list See also: * http://dev.chromium.org/for-testers/bug-reporting-guidelines
Made that switch a year ago. Never been happier. Dont even use Google search engine either. Duckduckgo and firefox is all I need.
Just at a glance and after a few beers, it looks like your checking to see if the month and year match the current month and year. Just see if the year is less than or equal to the current year, if less it's expired. If it matches the current year, check if the current month is less than the current month.
Wonder if this also applies to MS Edge when that is finally released.
Well, shit.
No
I'm not sure how detailed your assignment is, but card numbers aren't always 16 digits long (15 American Express, Mestro 12-19, Diner's Club 14, etc.), and CVV numbers can actually be 4 digits long on American Express. Your Post Code validation is also very weird (4 numbers?), but I'm guessing these are requirements set by the assignment. As for your original question, you need to double check a few things: - What does `document.getElementById("userMonth").value` and `document.getElementById("userYear").value` return? Is it a number or a string? - `new Date().getMonth()` is zero-indexed, meaning that 0 is January, and 4 is May. I don't think you're accounting for this. - Think about your logic. If the year is the same as the current year, check the month. If it's less than or equal to the current month (taking into account the offset of `getMonth()`, you can probably assume it's expired. Additionally, if the year is less than the current year, it's expired.
I wonder how Brave Browser will handle this.
Try r/learnjavascript
Very cool! Keep it up.
Firefox Quantum Dev edition is great! No regrets switching
Fuck this shit
&gt; Manifest V3 comprises a major change to Chrome’s extensions system, including a revamp to the permissions system and a fundamental change to the way ad blockers operate. In particular, modern ad blockers, like uBlock Origin and Ghostery, use Chrome’s webRequest API to block ads before they’re even downloaded. &gt; For the rest of us, Google hasn’t budged on their changes to content blockers, meaning that ad blockers will need to switch to a less effective, rules-based system. This system is how blockers like AdBlock Plus currently work. &gt; One of the original concerns of switching to this system was the fact that Chrome currently imposes a limit of 30,000 rules, while popular ad blocking rules lists like EasyList use upwards of 75,000 rules. In the response, Google claims that they’re looking to increase this number, depending on performance tests, but couldn’t commit to anything specific.
They'll carry on just as they do today. This is a change to Chrome not Chromium.
Awesome, so I'm good. Been using the new Edge recently and I kinda like it :)
If only there was a Youtube alternative we could be Google free.
the card number i chose 16 because that's the default length in australia, same case for post code. Thanks for your suggestions, definetely cleared up some things
just installed Brave. so far, seamless transition
https://twitter.com/BrendanEich/status/1133767653472923648
Only reason I still use Firefox Dev edition is because Brave does not support some extensions, like RES.
Same. Ublock and Firefox, also syncs to my mobile for mobile adblocking. Only reason I'm in chrome anymore is for development. And only because I'm testing in Chrome, not because of dev tools.
First time using Brave so maybe is going to fail, but i just installed RES and it's working fine
We do something at least somewhat like this for our national retail website. Each page is a separate application (front and back ends, albeit with some shared components and APIs). This was a natural growth from each page (roughly) being owned by a different product team. Here are a few of the benefits: It allows us to save money because we can scale each site as needed, as some of our pages get an order of magnitude more traffic than others. It allows each team to easily set up their own monitoring and performance tools so they can be responsible for supporting their products without bothering other teams. It allows each team to iterate and release quickly without spending time trying to coordinate with other teams or having to wait. It makes PRs and merging simpler because there are fewer developers touching a given repo. It improves our CI build times as bundling tools are building smaller applications and unit/integration tests are testing smaller domains. We've really been happy with the situation so far.
I recalled they didn't support it [around a year ago](https://www.reddit.com/r/Enhancement/comments/705zq4/res_for_brave_browser/). Maybe now you can just install it as a normal extension.
FF is better for end-users but I still cant get used to their devtools... There's always some minor detail that brings me back to chrome. (well at least I could go to any other chromium based browser)
yeah, I imported everything, add all my extensions and done. it looks exactly like chrome, except apparently i don't need Ublock, privacy badger and things like that. So yeah, pretty good so far.
Thats totally incorrect, where did you read about that?
I highly recommend the Brave browser. It’s a Chromium reskin with built in ad blocking and tracker blocking. It imported all my Chrome settings on first launch and I’ve never looked back.
downloaded brave for android as soon as they forced those sponsored news articles onto the homepage of the chrome app. been on the fence about doing the same on desktop. just finally downloaded it today.
Do you want people to stop updating their browser? This is how you get people to stop updating their browser
This update couldn't come fast enough. The 3.4 performance regression was killing me.
Words I never thought I'd see on this sub.
Does this effect Chromium browsers? I'm a pretty die-hard Vivaldi user.
Go ahead and try it google. My phone already uses firefox because chrome mobile doesn't support ublock. You be gone.
Is brave better then Firefox?
Brave is the same as chrome, looking wise. So you are asking if chrome is better than firefox. I love both.
I feel the same about chrome. I think we can both do roughly the same things, but niether of us want to bother for more than a minute, lol
I'm still stuck on chromes dev tools, so I just ordered a raspberry pi and will be pi-holing.
My trust for Google has ever so slowly been coming to an end and this is the last strike. Their dictatorship is a corroding poison, they even banned Refined Twitter the other day for no reason. Chrome has officially made it on my boycotted list. Firefox, you beautiful thing, I’m coming back baby. As of 2019 I currently leverage the following: - uBlock Origin - Ghostery - DuckDuckGo - Little Snitch - NordVPN - 1.1.1.1.1 All these wonderful tools allow me to browse the web and use my computer without the bullshit, I highly recommend these tools. While Chrome has been great I ain’t going down this route.
I'd switch to Firefox on desktop if they had installable PWAs. or, I'd switch to brave on mobile if they had extensions like kiwi. we're so close!
I use Ad Block Plus. Is there something fundamentally better about how uBlock or Ghostery behaves to the end user?
Hi /u/semaj93, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Your last one allows Cloudflare to follow you around the web. Try decentralise browser plug-in and OpenDNS.
Will look into this, thanks for the tip brethren x
No worries ;) Link: https://addons.mozilla.org/en-GB/firefox/addon/decentraleyes/
Why not both? Build a web app in React that uses a REST service developed in Node.js.
I'm aiming to do both, I'm just at a crossroads on which one to tackle first.
Guess it would depend which is most important to the current status of your project... is there a blocker now or in the near future where you'll need one to be able to continue?
Why Ghostery?
It doesn't really matter both are useful skills, if you aren't comfortable doing both at the same time. Then just pick one. There is no wrong or right answer here. The only advice I can give you is if you have never worked with a library like React, Vue, or Angular then Vue.js is easier to learn while still teaching you the core concepts shared by these three frameworks. If you focus on the fundamental mechanics you will find learning any of the other aforementioned libraries very easy after.
God damn it.
I’ve found that it catches some trackers that uBlock misses.
Isn't there a way to block ads at like the router level? How do you do that?
For those who didn't bother reading, Manifest V3 still allows ad blocking. It just works differently.
Yeah I'm actually pretty happy with ad block plus. If they won't be impacted then that's a relief.
Is dev tools the same?
What year is this? Chrome will update despite the user in most cases.
That's what I was thinking. I'm pretty happy with it too.
No
Dude. I totally feel exactly the same way. All said and told, I think they’re identical in functionality - Firefox might even have better features - but something keeps me coming back every time. Some little thing I’m used to I guess.
uBlock Origin (not the original uBlock) is a great alternative to ABP. Much less RAM usage. Give it a shot.
I like Chromium. Should I just switch to that? Is there any real difference?
 Here is a recent library that I've created: [https://github.com/prolightHub/CartesianSystemLite](https://github.com/prolightHub/CartesianSystemLite)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I've been trying to degooglify myself for quite some time, but I haven't done it because it seems like a pain. I guess I'll try it for real now.
Yes
I'm going to laugh so hard if the new chromium based Edge has better ad blocking support than Chrome.
uBlock Origin use brower's API to modify the request, which means if it detects the request is to download a tracking script, the request will be stopped and the script will not even be downloaded. Meanwhile ABP rule-based will still download the script but check from the rules to allow it to run -&gt; uBlock Origin saves you of network traffic and make some websites load faster. Last I head ABP has the same feature as uBlock Origin but they still allow some ads to run which is a joke to me...
&gt;Is there any real difference? Yeah. The various companies add and remove many features to customize the build for their goals. You can think of Chromium as the common base the various flavors share. Google adds a ton on top of vanilla chromium to do things like integrate with their services (Gmail, Chrome cast, ect..). They've also been know to deploy nonstandard technology to better integrate with web services they offer. Brave added an ad blocker. Microsoft repeatedly ripped out a bunch of APIs and added some of their own in the soon to launch Chromium based Edge. May as well give Chromium a shot if you're curious; nothing to lose. I only recommend FireFox though :)
Great work. &amp;#x200B; I played it until I won the table. A few thoughts on some improvements: &amp;#x200B; 1 - Store the user's rounds and bets in an object...could get gigantic I understand...but it will inform the AI players that when a bet is out of the ordinary they should probably fold! &amp;#x200B; 2 - When it's the player and 1 AI opponent, the player can win simply by out-betting the AI's chip total. So, if the AI has 500 chips then the player just has to bet 501 and the AI will lose their initial big or small blind bet. &amp;#x200B; 3 - The AI seems to struggle with hands to stay out of after they've made a bid over the blinds. As a result, they can be manipulated and suckered into throwing away chips a few thousand at a time over multiple card reveals. &amp;#x200B; It's an awesome game and you've done such a good job with the interface (though I'd love to see a way to manually enter bets) and animations. It ran very quickly and smoothly. FANTASTIC work!!! I'm totally impressed and hope that someday I'll be able to accomplish what you have here with this game!
https://pi-hole.net/
It made to where I can go use super cancer movie streaming sites because its blocks a lot of stuff before it even downloads its dope
I'm asking because it's listed next to uBlock Origin
Yea well, good luck blocking my pihole, turds.
I switched to Firefox about a month ago for that exact reason
They won't be impacted because they have an contract with with Google to not block their ads.
I mean I’ve used Chromium plenty before. I never noticed any. Significant difference, Just kind of wondering beneath the surface. As a web dev, I got really used to Chrome dev tools, and I’d be sad without em. I know Firefox’s are just as good or better, but something about the style of Chrome’s that I just like a whole lot better.
Edge on Android already has better ad blocking support than Chrome on Android (albeit very minimal, you can't select which provider you want to use like say Firefox). So as long as they don't blindly adopt Manifest V3, that will actually become a reality.
Duckduckgo, Firefox, and this paddleball game. That's all I need.
I think Chromium forks can easily turn on the switch to allow full webRequest api.
Hi /u/donteatyourvegs, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you're happy with Chromium and don't want to use Chrome then switch :)
I'm sure European regulators will love this.
How's it compared to privacy badger?
Everybody talking about firefox dev, but also opera is great and includes a native ad blocker
Add umatrix as well, great tool.
Try ungoogled nosync chromium build.
I think it's time for people to switch to Brave
Brave is chrome with a built in ad blocker
Try Kiwi Browser...it's dope
Plus the developers of Ghostery are uncommonly good looking!
That's not true (the second part). Cookies are blocked unless (like with the first part) you disable their "acceptable ads" feature.
I've used both and in the end it really doesn't matter for me. No noticeable performance improvement.
Opera has adblock built-in.
Brave is just chrome without any of Googles bullshit
Thanks!
Brave browser + adguard + https everywhere (even though already built into brave) What other extension do i need?
I've just written a tiny typescript library that use HOC to help people write defaultProps for react function components. What do you guys think of it? https://github.com/Zzzen/with-default-props
You'd think they would learn from history. But I guess if you have enough of the user base it doesn't matter. Then again that was probably the argument Microsoft made when chrome came to town
If you're on macOS, you can disable Chrome updates by running `chown root:wheel ~/Library/Google`
This sub is clearly full of closed-minded React lovers.
Hi /u/locopurplemonkey, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
There are quite a few youtube adblock extensions
Like I said, it makes more sense for testing if something's not a number than if it's NaN. If you expect this to raise an error... well, JS just isn't going to do that lol
&gt; Chrome will update despite the user in most cases.
It's sad that /r/privacy and /r/privacytools will downvote any recommendation which isn't Firefox. Brave is the most logical way to switch away from Chrome and Google's ecosystem as the transition is completely seamless if you import all the content properly but unfortunately those people downvote any Brave recommendation heavily. Kinda sad.
I know, just some advice for users who want to stop updates.
Speed and memory usage wise yes. But do try on your own.
It's on by default isn't it? Most users use the defaults. It's why the reason Google is friendly to them.
That's a bad idea.
They confirmed that they will fork and remove any such features if it makes it to mainstream Chrome. That browser is literally Chromium without any of the Google bullshit.
Brave browser says Hi.
I guess I was thinking of org restrictions on auto updates. Doesn't look like there's a setting to disable this on the default install anymore. Wonder how many people will actually stop using Chrome because of this
Literally 98 percent of their user base won't do this.
Brave browser is pretty much Chromium minus all the Google bullshit. Do give it a try maybe.
Brave confirmed that is going to be doing that.
Opera is owned by a Chinese company so you don't really know what happens to all your browsing data. I'd recommend against Opera.
Hi /u/maquinas501, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sin31423, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GreenKreature, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
And this toaster! DuckDuckGo, Firefox, this paddle board game and this toaster is all I need!
So, what about chromium? Will that one also be limited. 🤔
Seconded! Chrome like mobile experience with extensions? Yes please!
Firefox and Brave it’s where is at
Nice article! Two small remarks: At some point you say that you might delete a section of the article if the documentation is updated. Don't. You'd be better served by adding a date in the beginning of the article. So people might check when they think it's outdated. In your last screen, I'm pretty sure you wanted an interface named keys not key.
&gt; Ey but we can make a sick buck doing it to the idiots who don't know what an internet browser is.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/hailcorporate] [Google to restrict modern ad blocking Chrome extensions to enterprise users](https://www.reddit.com/r/HailCorporate/comments/bupida/google_to_restrict_modern_ad_blocking_chrome/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Then you get some nice web viruses because Google moves fast and breaks things all the time.
I wonder at some point if Google will suffer from an antitrust lawsuit from their browser monopoly.
If you're the kind of person who understands what the command does, and it's implications, you're probably safe as you have the common sense not to expose yourself to most vulnerabilities.
Starting from the point that architecture has an impact on the organisation structure and unfortunately sometimes the other way around, considering you think the problem is related to culture, I share this article but you can find many mores out there: https://www.thoughtworks.com/insights/blog/applying-conways-law-improve-your-software-development
Currently using Waterfox. Even Firefox isn't perfect.
Oh, well goodbye then. Sorry, not sorry.
A bit clueless to the differences between browsers out there but how does Vivaldi stack up? Or even just Chromium? Serious question and would like to know the differences.
[ts-node](https://github.com/TypeStrong/ts-node) might be useful for you
Thanks for a great feedback!
What makes you think Google cares what you're going to switch to? The overwhelming majority of their revenue comes from ads. Sure, they can't target you if you switch from Chrome, but they can't target you anyway because you block all of their ads.
I recently switch to Vivaldi full time from Chrome and Firefox. It works exactly like Chrome and all extensions work well on it. Customisation options are the best there is. Features like Tab Stacks, Colour changes, quick search bars, Side Panel, Tab Tiling etc are what's making me stay more. They're still adding lots of features currently. Some would say too many features to keep up with but that's a good gripe to have.
Google free not ad free
This is just not true. If you sign in with Google in your chrome they can still do plenty of tracking even with an ad blocker, and they can still show you plenty of ads (YouTube anyone?).
Ad block, blocks YouTube ads as well. Only time I see ads now is from pesky anime websites demanding you unblock their 20 hentai pop-ups before you can Watch any videos.
Hmm, I must have a terrible ad blocker then. :(
Why do you need to test in Chrome?
Guess i better move to firefox
The day ads will start popping up because of this shit, that will be the day I will switch to Firefox. The only thing keeping me on Chrome is Chrome DevTools.
Thank you for info! I updated my post with an information about new handbook. &amp;#x200B; [https://pawelgrzybek.com/typescript-interface-vs-type/#misleading-section-of-the-official-typescript-handbook](https://pawelgrzybek.com/typescript-interface-vs-type/#misleading-section-of-the-official-typescript-handbook)
Hi. Very good points. I updated a section related with misleading documentation: https://pawelgrzybek.com/typescript-interface-vs-type/#misleading-section-of-the-official-typescript-handbook I updated a misleading screenshot too: https://pawelgrzybek.com/typescript-interface-vs-type/#type-aliases-can-use-computed-properties Thanks again and have a great day 🥑
Even then, just inspect element and just search for the video file. There are many site where you can access directly the video file without even trying these viewer full of ads, and you could watch it on VLC so that you can go back on time without the viewer trying to show you another ad.
No need to thank me. The pleasure is mine. Great article.
Chromium lacks media playback due to licensing. So no support for AAC or H.264 https://www.chromium.org/audio-video https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/
Hi /u/lucamezzalira, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I had issues with developing in it though. I don't remember what exactly, but it wasted a day at work and had me switch to chrome in the end. Man I wish so much right now that I would have written it down lol. Had something to do with localhost and ports but I don't remember :/
Probably because it's the most common browser
For people on mobile having issues with abnormal amounts of advertisement and tracking crap, please check this out: [www.blokada.org](https://www.blokada.org) &amp;#x200B; It's an app that blocks all that shit. It's free and of course - not available in its true form on play store.
I'm not a programmer, I'm a jerk.
There are different implementations of micro-frontends.org, I'd suggest mentioning other approaches like [Edge Side Include, Client Side Include](https://gustafnk.github.io/microservice-websites/) and the approach with an [orchestrator](https://medium.com/dazn-tech/orchestrating-micro-frontends-a5d2674cbf33)
Check out ublock origin
That's preposterous considering that the majority of netizens are non-enterprise users. Is Google going the Oracle way not? Doesn't seem like a "don't do evil" company.
Just spotted the library [idx](https://www.npmjs.com/package/idx), which gives you the same functionality as lodash get, and maintains types in TS and Flow.
That’s actually almost exactly correct.
What's the reason though? Did anyone care to explain? I am interested switching to Brave too.
I migrated about 18 months back because chrome was having awful video quirks. Turned out to be a great decision. Plus parts of chrome are written in Rust. Only touch chrome for manual testing and test automation.
Heard good things. Will give it a go.
It's not just showing me ads. It's also learning from me what ads to serve to other people. The less people use Chrome, the less tracking they can do.
I wrote a little script for my PC that downloads multiple, different adblock host files, merges them, and overwrites my host file, weekly.
They're still tracking you as long as you use an Android, or as long as you have contacts with a gmail address.
I would like to read this blog post but I can't without creating a medium account. Please, change hosting platform. Thank you.
what do you use for email?
On Android, there is an app on F-Droid store called newpipe. &amp;#x200B; Newpipe streams youtube videos, let you subscribe to channels, make playlists, watch censored/blocked content. Its like YouTube without the YouTube API. &amp;#x200B; Its free, opensource and you do not have to make any account for it.
Tutanota for personal. &amp;#x200B; I use K-9 email client for all the other services.
Startpage is also Google without Google
I’ve had a lot of issue with Firefox dev tools lately. Mostly with any kind of performance/memory profiling. Chrome has just always been stable...
Awesome.
Basically, internal mozilla politics. Mozilla Firefox's codebase is a dumpster fire, and one of the guys who started Mozilla went off to go and start Brave. Mozilla fans are salty.
Just clear your cookies instead of whinging, come on, we are web devs and should know these things
That's what I mean, if the focus is how your organisation operates then yes, it makes sense. I am sure _you_ have been happy with the situation so far. I prefer focusing on the user, how much stuff they have to download and initialise on their device. I'd rather not have them download react 16.6 in one page and Angular 8 in another and then react 16.8 in the next. To me that's idiotic and displays a basic contempt for your users.
Chrome has performance audits and a better device emulator/screen resizing.
Exactly the point, if a company's culture is fundamentally flawed it will eventually fai. Forcing the user to download a different framework for each section of your app will at most delay the inevitable
Wow, exactly what I was looking for in my adblocking choice!!!
Use Chromium. These changes are for Chrome, not chromium.
ITT: Brave shills.
When is the last time you developed using brave? I ask because like you, I have had issues in the past working in it but none of those issues seem to exist now.
It isn't clear (to me) from your text exactly what you are looking for. Perhaps you could illustrate with an image or two? Or a gif? Or a link to a page that shows a similar effect?
Welp, by by chrome.
TL;DR: Simple Express API boilerplate built with TypeScript. ### Motivation Main goal was to create a boilerplate for NodeJS projects built with TypeScript without having to spend long hours to setup development tools, build, linting and formatting tasks. ### Technologies and Packages used TypeScript, ES6, Express, TSLint, Dotenv, Prettier, Joi, Nodemon
Google being a company that lives on selling and collecting data id rather not give them my browser information.
Ah, yeah that would be dumb.
Can you elaborate further? Because you are not providing much information on your theory, using multiple frameworks is linked to bad culture in your opinion?
They switched their browser to chromium a few months back.
The second you take uBlock origin from me, I'll drop chrome and drop recommendations for our customers for it aswell.
Bookmarked, thank you! Looking forward to reading the second part. Cheers!
You just made me switch, thanks for the tip
+1 for mentioning UMatrix. By far the best browser extension
Yep. Just making sure things appear correctly.
Ive already tried it a couple times a while ago, but thanks. Send my hi to Brendan Eich
It was about 4 month ago, so not too far in the past but also not super recent.
The last time I tried FF devtools I went back bc it does not source map to angular html template errors
Oh gee, I hope they don't do this because I can't use Firefox at work (doesn't play well with organization SSL stuff). :/
1. identity function 2. true because, it's just comparison of two values which is always equal it itself 3. function that always return true 4. true, immediately invoked arrow function that negate undefined which is true 5. Not sure but I think this function will only work for function that return function that return function as argument, \`x = () =&gt; () =&gt; 10\` for other values it will throw that value is not a function.
Yeah for sure. Maybe it’s one of those things where you wait to develop in it until brave 1.0 and in the meantime perhaps use it as a user. The team seems really on top of fixes, but I know what you mean about losing a whole day and it’s sometimes not worth the risk
I just realized that I don't even use Google Chrome anymore. Migrated due to the crappy memory management.
!RemindMe 1 day
I will be messaging you on [**2019-05-31 12:45:48 UTC**](http://www.wolframalpha.com/input/?i=2019-05-31 12:45:48 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bum37q/google_to_restrict_modern_ad_blocking_chrome/epgzasf/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bum37q/google_to_restrict_modern_ad_blocking_chrome/epgzasf/]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! epgzckh) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Oh god, I didn't know I could get ublock on my mobile Firefox, this is the best.
Viva la Firefox!
Using chrome for development work is entirely different thing from using is for personal browsing.
Had been thinking of starting to learn testing. Found this. Made my day. Great article.
Firefox sabatoged pretty much a lot of their extensions a while ago and hence many extensions were not ported or got ported with limited features. It was a shitty move by Mozilla.
Firefox it is (for PC) Brave for Android of course
Thanks! :)
try this https://invidio.us/
Between Chromium, Edge, and especially Firefox and its forks like Waterfox, they're only hurting themselves like this.
Also with built in ad blocking and a crypto wallet to store Basic Attention Token earnings that you can earn by opting into ads and tip content creators with. It's all pretty slick.
They didn't sabotage them, they made such large changes to the codebase so that keeping compat with the old extensions wasn't feasible anymore.
Brave is just chrome with some lipstick and bundled adtech.
Hi /u/cam10159, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/KnoobLord, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/drbobb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
From this article in February: https://www.zdnet.com/article/google-backtracks-on-chrome-modifications-that-would-have-crippled-ad-blockers/ &gt; "We are committed to preserving that ecosystem and ensuring that users can continue to customize the Chrome browser to meet their needs. This includes continuing to support extensions, including content blockers, developer tools, accessibility features, and many others. It is not, nor has it ever been, our goal to prevent or break content blocking." So this was just a big fucking lie.
Hi /u/lfacpt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/plcart, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Mackinstyle, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Patrick_Paul440, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
With all due respect, this is really poor advice to give and just suggesting it makes it look like you definitely don't understand the implications. If you really understood the implications you simply wouldn't recommend this.
Their changes caused existing extensions to break beyond the point of recovery. I call that sabotaging whatever their intent might have been.
Imagine being mad at async/await
Is there a list of the difference between the dev and the non-dev versions?
Too bad Firefox for Android is so bad with UI. No bottom toolbar option, deal breaker for larger phone. cannot quickly change tab, always have to click twice to change tab. Did I mention already that there was no bottom toolbar to do this? No official dark mode. My goto app currently is [Kiwi browser](https://play.google.com/store/apps/details?id=com.kiwibrowser.browser), as it's user friendly and I can install extensions to that. Only thing I miss is history sync.
Yep. That is a YouTube front end. But it does proxy videos, so when using it you are not connecting to google. Also works great in FF without the dev breaking it on purpose. Great stuff! But also show some love towards actual YouTube alternatives, like PeerTube! Those that are their own platforms, not just different ways to access YouTube content. That will do more to break YouTubes monopoly in the long run, imho. Pro tip: Use [Invidition](https://addons.mozilla.org/de/firefox/addon/invidition/) to automatically open all YouTube videos in invidio.
Use a router with openwrt and the adblock package. More work to set up compared to pi-hole, but then it is more practical, no need to set up different dns server on multiple devices.
&gt;Brave is the most logical way to switch away from Chrome and Google's ecosystem It is still a chromium based browser, you are not switching away from the google ecosystem by using brave. Not saying that it is bad though! Chromium is open source and a decent browser engine. Personally, I use Firefox as main browser, and Brave as backup browser for websites that need the Chromium engine to run.
I broke my toaster yesterday beyond the point of recovery. I still did not sabotage it. Those are two different things.
Are you Steven Black?
neat. is there a reason you are still using `var`?
Chromium - Open source browser by google, not really distributed to end users. Might be unstable from time to time. &amp;#x200B; Chrome - Chromium with closed source google stuff added to it. &amp;#x200B; Brave - Chromium with open source brave stuff added to it. &amp;#x200B; Vivaldi - Chromium with closed source vivaldi stuff added to it. &amp;#x200B; \-&gt; My recommendation: Use Brave or Chromium. Don't use Chrome or Vivaldi. But if you don't care about foss software and/or privacy just use the one you like most. Also just use Firefox instead of all of those. And have Brave ready just in case Firefox doesn't work on a site.
And?
Thanks!
Thank you :)
This is plain silly. IMHO my post was more interesting and relevant to /r/javascript than 9 out of 10 posts that appear on the front page. It's neither beginner content nor asking for help with coding. I tried to spark discussion and obtain insight on an issue that is in no way obvious, in addition to being of rather general interest - to anyone who wants to code to the Canvas API. Well, suit yourself. All I can do is refrain from wasting any more time on /r/javascript. Hava a nice day.
Why was the article removed? I think it is very relevant (as it's clear by the two comments)
Same. switched back to ABP because 1. uBlock Origin just looks shitty. I know not a good reason, but it is just annoyingly ugly. 2. (The actual reason that made me switch) uBlock broke some websites that are important to me, like hid the "share" button on my nextcloud instance. Probably could have solved that in uBlock but was easier to just switch back. &amp;#x200B; The main advantage of uBlock is way less RAM usage. If you got plenty of free RAM like I do on my desktop you won't feel much of a performance difference. If you are using a device with low amount of RAM however, the difference can be HUGE, especially when that is what causes your device to use swap. Have a look at the graph on [this site.](https://www.smartadblock.co.uk/) (PS: this blocker claims it uses even less RAM than uBlock, tried it some time ago, for some reason I was not convinced but can't remember why.)
Ehh, when you're trying to write declarative code, just stick with the most common definition of a function and implement that. There's no reason for your function to look that different from `a =&gt; sum(a) / a.length`. That will go a long in way in helping you separate the generic logic from the logic specific to your problem. That is, you know your function calls for an average of some set of numbers, so implement a very generic average function then figure out how to format your data to fit it.
The debugger is much more robust. There's a flexbox and grid editor, css editor, and responsive testing tool that I use regular
I guess I'm a noob... but this makes my eyes bleed const B1 = f =&gt; g =&gt; h =&gt; x =&gt; f(g(x))(h(x));
Good one! Some people also like using Gherkin-based method names within a test, which can be reused between test cases: givenProducts(..); givenQueryString(..); whenInvokingMethod(..); thenResultShouldMatch(..);
&gt; IMHO my post was more interesting and relevant to /r/javascript than 9 out of 10 posts that appear on the front page. Of course \*you\* believe that \*your\* post is more interesting than 90% of the frontpage, why is that not surprising? &gt; It's neither beginner content nor asking for help with coding. That's funny, did you not write this? "Is the fault somehow with my code, or is there really such a difference?" That's definitely a call for help. &gt; Well, suit yourself. All I can do is refrain from wasting any more time on /r/javascript. Since you can't seem to follow simple rules, that'd serve both of us well.
Functional programming in its shine
Na, this is just bad code
Fenix changes a few of these complaints but it is still very much beta. Hopefully "soon" you'll be happier with Firefox(Fenix) on Android. Edit: and a note that it does not currently support addons. Not saying its a good alternative today. Just that it maybe in the future.
It depends on what you need to do. Saying that the project might evolve in a way that your old const needs to be reassigned in the future is not a good argument for always using let, just change it whenever necessary. The biggest advantage of using const to me is looking at an assignment and not needing to look in the entire rest of the scope to discover if that changes or not. Which works the other way around too, if you always favor const, whenever you see a let, you know it’ll change.
&gt; For beginner content, please post to /r/LearnJavascript instead of here.
Much better than current Firefox :) Still can't swipe to change tabs, but I can do things with one hand. And I'm waiting die extension support :P but this could be nice future replacement
But if you look at my example const a = []; a.push(123); a.push(456); let a = []; a = a.concat([123, 456]); In both cases `a` changes in _exactly the same way_, so using let instead of const doesn't give you any hints as to what is going to happen to that variable. I don't care either way TBH, but saying const is "superior" to let is simply wrong in my book. It's a choice based on personal taste. I hardly reassign variables in my code so const really doesn't help me at all. But having to redefine an array as let because I need to concat it often gets in the way
By Google ecosystem I meant reliance on Google to store your password, bookmarks, sync, etc. Google cannot track you anymore via your browser, etc. It is important for people to take that first step to move away from Google because this is the most difficult step. Once they get used to living without Google then they can continue to move towards whatever else but Brave offers that first step to disconnect from Google and this is what /r/privacy and /r/privacytools don't think about. Brave is pretty much Chromium minus anything Google and that's exactly what you need to get people out of Goggle controlled browser. Firefox is just too different from what most people are used to so they'll continue sticking with Chrome if they aren't aware that a middle ground like Brave exists.
Did you consciously make the choice to change it enough that it breaks? Because that's what Firefox did. They consciously changed the APIs enough to make extensions like Downthemall Pendactyl, etc Conscious breaking is sabotaging.
This is crypto trash. No thanks.
Some people just like to watch the code burn...
I run pfSense with pfBlockerNg. Works pretty well, but doesn't catch youtube ads - so I still run browser plugins on top of it.
To those who haven’t tried Firefox in some time, give a recent build a go. In addition to the speed improvements and greatly improve dev tools, there is a containers extension is the killer feature in my book.
The new Edge DevTools are very close to their Chromium counterparts, you should look into it
&gt;Conscious breaking is sabotaging. [Nope, it is not](https://www.merriam-webster.com/dictionary/sabotage). I can intentionally break my toaster, and it is still not sabotage. If I worked at Subways and broke their toaster in order to hurt the company, that would be sabotage. If I worked at Subways and broke their toaster on purpose, but just because I was angry, not in order to hurt the company, it would not be sabotage. Do you actually believe the purpose of the API change was to hinder addon developers? If that was the case, that would be sabotage. In reality they decided to change the API for other reasons, and just accepted the fact that some addons would have to be rewritten or just could not work at all with the new API. Feel free to dislike that, but calling it sabotage is just bullshit.
It is good to use Edge
You are probably just overthinking it. The B1 lets me do g and h to x and then f to the result of both Start with some very simple functions like f(x)(y) = g(x) \* h(x) g(x) = x \*2 h(x) = x + 1 let x = 1 g(x) = (1) \* 2 = 2 h(x) = (1) + 1 = 2 f(x)(y) = (2) \*(2) = 4 The power in this is you can define the three functions to do anything you like so let's say I want the mean let a = \[5, 1, 3\] f(x) (y) = x / y g(a) = sum(a) = 9 h(a) = length(a) = 3 f(9) (3) = 9/3 Or lets say I want the median let a = \[5, 1, 3\] f(x) (y) = median(sorted, length) g(a) = sort(a) = \[1, 3, 5\] h(a) = length(a) = 3 f(sorted\_a)(3) = 3
I cant tell if this is serious or joking
&gt;It is important for people to take that first step to move away from Google because this is the most difficult step. Once they get used to living without Google then they can continue to move towards whatever else Could not agree more. &gt;Firefox is just too different from what most people are used to Really? To me they basically look the same, and are used in the same way. I doubt my mom would ever find out if I replaced her Firefox with Chrome, as long as I change the Icon. &amp;#x200B; The issue with Brave using the Blink engine that is part of the google ecosystem (or whatever you would like to call it) still persists. The point is that once Google's engine is the only one used by a great majority of people, they can basically decide how websites work. But you are right in the sense that that is more of a long term concern, while Google collecting everyones data is a more "direct" issue, and easier for individuals to "opt out".
&gt; There’s a common theme I find with people who tell me that they don’t find unit testing useful, and it’s normally that they are writing bad tests. Not the fact that, for all the time I or others on my team put into it, it hasn't once usefully uncovered a single problem I needed it to tell me about?
This is one of the more famous combinators from lamda calculus. This has nothing to do with bad code.
Firefox devtools are really good IMO, better than chrome even when dealing with DOM/CSS stuff.
Overall I like the article. Putting the math behind the running sum makes it friendly for math-oriented programmers along beginners too. I agree with other commenters that the example with the blackbird combinator is difficult to read. I hope no one writes code like that that I have to review, but post already mentions: "What if we took that to an extreme?" so the author knows it's fairly pointless and functional for functional sake, Regarding last example though, the author mentioned it's more efficient for memory, less efficient for calculations, and leads to a monolithic function that does all of filter/map/reduce together. I don't know when this article is written and if it's dated, but you could also use JS iterators to get memory and calculation efficient, and pleasent to read version. This is a combination of example 2 and 3, plus iterators. function* filter(iterable, fn) { for (let item of iterable) { if (fn(item)) { yield item; } } } function* map(iterable, fn) { for (let item of iterable) { yield fn(item); } } function reduce(iterable, fn, accumulator) { for (let item of iterable) { accumulator = fn(item, accumulator); } return accumulator; } const foundSlangTerms = filter(victorianSlang, (el) =&gt; el.found); const popularityScores = map(foundSlangTerms, (el) =&gt; el.popularity); const {sum, count} = reduce(popularityScores, (el, {sum, count}) =&gt; ({sum: sum + el, count: count + 1}), {sum: 0, count: 0} ); const avg = sum / count; Or just accept an average utility function is actually useful for readability, and don't do the reduce line: function average(iterable) { let sum = 0; let count = 0; for (let item of iterable) { sum += item; count += 1; } return sum / count; } const foundSlangTerms = filter(victorianSlang, (el) =&gt; el.found); const popularityScores = map(foundSlangTerms, (el) =&gt; el.popularity); const avg = average(popularityScores); According to [another post in this subreddit](https://www.reddit.com/r/javascript/comments/4gatmp/why_dont_iterators_support_map_reduce_filter_etc/), there might be libraries providing these utility functional iterator functions.
I think B1(div)(sum)(length) is still pretty straightforward and it avoids the hard coding of your solution. Though I definitely understand the natural language preference for infix notation.
Thank you for that. Found his repo and gave me some new ideas.
&gt; There is one site i know that runs faster on chrome but its an exception The only sites that run faster on chrome for me are google websites.
Fair enough, thanks
I agree. There’s a point where readability and modularity matters more than minor performance gains. The example problems are very business specific, and separating the business logic from the arithmetic makes your code easier to understand and, more importantly, to test. Arithmetic is static, but business logic can and likely will change over time. When that change occurs do you want to rewrite all the code and tests or just the portion dealing with the changes logic?
I've always found firefox to be better with memory usage than chrome. Chrome even has some memory leek issues with the dev tools that are a real pain to deal with, mainly large portions of memory are not released on refresh, and memory doesn't release if you write anything to console, even if the console get's cleared.
I use Brave based on Chromium and it's memory usage is far superior to Firefox.
Which combinator? Not seeing it here [https://gist.github.com/Avaq/1f0636ec5c8d6aed2e45](https://gist.github.com/Avaq/1f0636ec5c8d6aed2e45)
Blackbird; http://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html See full list here: http://www.angelfire.com/tx4/cus/combinator/birds.html
Isn't that `B1 = f =&gt; g =&gt; x =&gt; y =&gt; f(g(x)(y))`?
You all should try Brave browser. Freakin amazing.
Definitely not bad code. This is from lambda calculus. Check out the “blackbird combinator.” It’s useful for function composition. After a while all those combinators become as familiar to you as standard library functions, because they are so useful for functional style. But I’ll admit they look weird, lol. Check out this video on combinators. His examples are written in JS. https://youtu.be/3VQ382QG-y4
Hmm. Now I'm confused. The owner definately talks about the blackbird being that; [https://jrsinclair.com/articles/2019/compose-js-functions-multiple-parameters/](https://jrsinclair.com/articles/2019/compose-js-functions-multiple-parameters/) One function that applies two functions to the same argument and then returns that into a function that takes two parameters. Names aside, it's a handy one. This is a good intro: [https://www.youtube.com/watch?v=3VQ382QG-y4](https://www.youtube.com/watch?v=3VQ382QG-y4)
in this article, 1. four really bad approaches 1. lots of stuff junior people shouldn't be trying to remember 1. fantastically bad examples of the iterative approach 1. six pages printed of explanation of what should be a one-liner 1. not the smart way, which is `Math.sum(yourArray) / yourArray.length`, because that's more readable and likely to pick up libc improved approaches like tree summation
Just to deny them the data? (P.S.: they benefit from that, too) Or do you just hate being targeted by content that you're more likely to like?
It makes perfect sense to me. It’s a generic tool for an endless set of possible situations. There are two kinds of functions being used here: *named* functions and *composition* functions. The named ones are descriptive, because they handle the specific business logic. The composition functions are simply tools to combine the named functions in useful ways. So their names are left to be super generic. In fact, you might as well just use one character, because any specific name would compromise their generic intent. You can tell what it does by the function’s *type signature* which describes how the arguments (usually functions) are applied to each other, to produce larger functions, to which you can assign a descriptive name (which was omitted above). Anyway, it’s just ordinary algebra using JS syntax.
Still haven't seen a single reason why people shouldn't mass-migrate to Brave...
Well they’re using currying first of all which most newer devs don’t know about and the naming is unreadable. This is the sort of thing I’d get yelled at for if I pushed to our codebase.
Open source?
Open source?
I do agree with you in parts, and wouldn't call it "superior" either. But I don't agree it's just personal taste, in most cases, it is a better choice because it makes code easier to reason about. &amp;#x200B; Take a look at your example, they're not exactly the same, when using \`const\`, you can be sure \`a\` reference never changes, which mean it's \_always\_ that Array (that values inside can change is just a matter of understanding how constant object references behave). Whereas with \`let\`, it's also possible to make it something completely different, like \`let a = \[\]; a = 5;\` (there are many other better ways to rewrite your example too, but I won't list them because I don't want to be pedantic).
Yep, it's open source and based on chromium engine.
Personally, I prefer Firefox. On their merits, the differences worth generalizing over are negligible for 99% of users because it's highly subjective what matters and how people even use their browsers (and because tons of plugins exist). They both have all of the basics and the capacity for a lot of customization. The main area I'd say you could make the case for one or the other is the large scale philosophical battles they are defined around. For Firefox, right now, the lineage of current browsers looks like this: - Firefox (Mozilla) - (webkit) - Safari (Apple) - Chromium (Google) - Chrome (Google) - Brave - Opera - Vivaldi - Microsoft Edge (from now on) So, some are concerned that in this view, Google is the gatekeeper to too much and that there is a benefit to having a viable competitor. (Meanwhile, Apple has a history of neglecting the web in favor of getting people to make native apps.) So, in the "bigger picture" there is a reason to perhaps support Firefox in order to maintain competition and control over the web. For Brave, they have essentially bet on the next big issue of the web being solving the cycle of ads and ad revenue. And are really pushing things forward in that direction by handling ad-blocking or substituting, privacy, etc. as central goals of their browser while deferring most other stuff to Google. A big element of this has been giving users not only the ability to fully block ads (which often forces content producers to advertise even harder since the proportion of their audience that even sees the ads is smaller) but also to do things like opt-in to high quality ads (not flashy/distracting, not insecure, not violating privacy) and voluntarily give the generated revenue to the content producer. (The specifics of this may be different now because their ideas have developed a lot, but the principle is the same.)
Been on FF for almost two years. It's a better browser anyway. Fuck Google.
Hey! I made a Javascript game with Htlm5 canvas. It's a spaceship game where you collect green rocks. https://github.com/robgleason/Space_Rocks_Game
[https://www.google.com/search?q=difference+between+const+and+object.freeze](https://www.google.com/search?q=difference+between+const+and+object.freeze)
I might not relate with your problem... But maybe try to have a side project? Something that you wish to do for someone but never got asked. I dunno if it can help, but I wish you all the best!
If they didn't have a method to simply test your skill perhaps you dodged a bullet. Looking at code and talking with developers is always a nice initial step for interviews, but in my opinion and experience taking an hour or two to sit with a candidate and work through a few problems is a much more effective way to measure skill.
&gt; Firefox's code base is a total dumpster fire (which is why webkit even exists - story of webkit creation here) Mozilla has been rewriting its code in Rust and deprecating legacy code and models like the old plugin platform, so I don't know that that's fair anymore and to the extent that it is, it looks like maybe that's becoming less true. Just like how the idea that Chrome is this scrappy young browser without legacy junk code is no longer true either. &gt; and the guy who basically started Mozilla and invented JS got sick of it, and went off to start Brave His leaving and redirection had little to do with his frustration with Firefox. He was very publicly pressured out of the job by a public shaming campaign that called for boycotts of Firefox. Later on, he decided to start Brave. It's really deceiving to suggest that he just left because he got sick of Mozilla.
I understand the implications, and I realize at face value this is and advice for most people. I also understand how unlikely it is you'll fall victim to having sensitive data compromised as long as you're following all other good security practices, if you're like me. This is my one exception.
They basically had two choices: - Pain and rebirth: Break support with that legacy code so that they could modify their browser to remain competitive with other browsers - Slow death: Keep support for that legacy code and have a permanent, systemic barrier to make their browser competitive with others In the long run, the option they chose was the better one for them and their users even if created some short term friction for a minority of users (myself included). Also, when I was in their developer support websites, they were surprisingly active and engaged at trying to help developers get their code working in the new system from what I saw. Personally I think what they did was the better choice, but even if you don't, framing it as "sabotage" is completely disingenuous. They made a well-supported engineering decision that you didn't like. If they did the opposite there'd just be different users complaining because it's a situation with no easy answer.
How about some benchmarks
Honestly, I'd just tell them a very practical truth - There's enough paid work to go around that I do that when I have free time rather than unpaid open source work. Either way if you know your stuff and have experience under your belt then your GitHub being empty won't kill you except with employers that don't care enough to find a better test of merit. (If you can get paid for open source work that's even better, but generally my freelance projects are in private projects so they don't show up on my Gitlab profile which looks barren as a result.)
Const just forbids reassignment of the variable. e.g. `const myArr = [1]` you can still mutate `myArr` with `myArr.push(2)` but you can't reassign it with `myArr = myArr.filter(e =&gt; e == 1)` With `Object.freeze(myArr)` you will no longer be able to mutate that array.
!RemindMe 1 day
Isn't it great when companies aren't willing to give you any space to expand your knowledge and your open-source work during work hours and expect you to build an impressive portfolio of your own in your free time while being a regular full-time worker?
I am a newbie when it comes to posting on reddit, and am having a problem learning where to post without offending the community concerned. I am trying to announce, rather than promote, small utilities for browsers which may be of interest to users. Each ultimately consists of an html file, supported by plain vanilla javascript and css. These utilities are available for downloading from github, so all code can be inspected. I think of them as open source, and they all run offline, leveraging the resources built into any decent modern browser. I would appreciate any suggestions as to where to make my postings. Thank you.
Can someone explain what does enterprise users in this context mean? Are they going to create "premium" version of Chrome with subscription or something?
This is more for /r/learnjavascript Anyways: `const` is about the binding to the variable name in the current scope (you can't reassign a const variable), but lets you mutate the content of the object, whereas `Object.freeze` makes the target value immutable, but has no impact on the binding of the variable. See here: https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4wAVzTViEegAIs44hkYAKWgEo5wADpo5c2vgAecgLxyArAG49rPXqFxicgMLntxxHICMFOQDWEGgAJog6NPTOEay2UlG0sPhQtADmqq4aerAuAGIeAPIARrww0vhgAE4wMABeMKrAXnIATP5Bod4RVbT1aDFZ8WhwiTDJaaq5g06j4+kROnqKyjJRi2gAtFvb2xGDDmjLKg2ZcTNJKemZB0dqU44JFxP3-UMjT-Mg69UYcBiphxEcHWO1BuxA+wYlQAnto9AZ3BYAMxxVhyagqaiEOSqGBaXT6dGPMYwSqVWiVXGDAznMaXDKDeyvfIWAAsD2Gs3pL0oIDgMFg0lkwzwLSRiB8ADY2BwQJgcHh8NQ4AJIsJmDw2ABdVhAA
For dev work I use Chrome still just to avoid any edge cases like you described
I suppose their ideal candidate is someone who sneakily works on their side project while at work and doesn't get actual work done.
There are other benefits that may be worth considering. I find that just the act of writing the unit test helps me think through the problem I’m solving better. Also, when you go to refactor a significant portion of code, unit tests can help you do that with more confidence. Unit tests can also act as helpful documentation for using the code. I find unit tests in open source projects to be a great way to get started learning the library/project. But hey, they aren’t for every team.
"your theory"? It's what _you_ are saying &gt; Micro-frontends are definitely a technique that impacts your organization, providing decoupling between teams .... &gt; I personally worked in different organizations where new joiners provided good insights on how to change a “core library” but often for politics or ... You are putting the _organisation_ at the center and letting it dictate the stack. When it comes to FE I'd rather put the _user_ at the center and let their needs dictate the stack. I didn't find all your talk about "the context" convincing, sorry, I fully agree with the people whose arguments you are unsuccesfully trying to debunk.
That is what the micro-frontend approach opens the doors to
Your response was pretty thoughtful, I think you have some decent points. I just simply do not think it's worth it. In my opinion. I think part of my grumpiness about it all is that testing, of pretty much all kinds, manual, programmatic, whatever, used to always be the job of testers. My first job out of college was actually as a QA tester. I worked on an automated test suite that did unit tests. Yes, I looked at the code and wrote the tests around it. No, I did not expect the developers to do it. It used to be common to have 1 tester for every developer. Unit testing as a duty on the developer's plate got popular during the recession because testing, as a role, got eliminated to cut costs. There were not enough developer jobs to go around, so you had to kiss ass. When they asked you to test your own code (which still sounds absurd to me), you said "Yes, Sir!". I begrudgingly do write unit tests, because I have to, but I loath doing it, and think it is a 100% total waste of my time. I try really hard to find jobs that have as little emphasis on unit testing as possible, preferably none. My current job just had too much other stuff going for it for me to refuse it. Anyways, you guys can write unit tests by the bushel, and justify it up and down, pointing out all kinds of benefits, but I just wont ever agree it has value. BTW, I am not the only one, it's just that most developers won't admit it.
Depending on how do you do the get request you would be able to get the JSON data straight into a JavaScript object and use that as you please. One of the most popular ways to do the get request is fetch() https://www.google.com/amp/s/scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data/amp As you may know, JSON data is nothing but JavaScript object that has been turned into a string. And you can change it back to a JavaScript object simply by using JSON.parse() Once you convert the returned result into an object, you can access any part of it like you would with a normal JS object
Non Google Amp link 1: [here](https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data) --- ^^I ^^am ^^a ^^bot. ^^Please ^^send ^^me ^^a ^^message ^^if ^^I ^^am ^^acting ^^up. ^^Click ^^[here](https://medium.com/@danbuben/why-amp-is-bad-for-your-site-and-for-the-web-e4d060a4ff31) ^^to ^^read ^^more ^^about ^^why ^^this ^^bot ^^exists.
I get your point, but psst, `Math.sum` doesn't exist. &gt; Math.sum undefined JavaScript's standard library is actually really lacking in things like this, it's one of the main things it gets criticized for.
&gt; `let a = []; a = 5;` This is simply something that does not occur in real life in the code I work on, because me and the teams I have worked with keep our functions short and focused and variables do not get reassigned. As for "there are many other better ways to rewrite your example too, but I won't list them..." what is that supposed to mean :roll_eyes:
A JS object/array and JSON that's been loaded into an object/array is the same thing. So if this is indeed an object/array, access it the same way as any JS variable.
This is my preferred way of hiring as well (not that I've done it recently). I wish there were more of us :(
"How to make code harder to follow and harder to read in two easy steps" If statements work. Everybody knows what they do and how they work. Turning a simple if statement into a conditional buried in some class that is defined who-knows-where which refers to functions that may be defined some other unknown place improves nothing. Far from making code easier to debug it makes it much, much harder. IMO
I'm more than a little unsettled by Ghostery, and stopped using it: https://en.wikipedia.org/wiki/Ghostery#Criticism
Hey guys, I've created this project to facilitate sharing and testing of other users terminal setups. I love feedback, so please don't hold back. Also for those who don't want to read the post, [Here](https://github.com/rylandg/myos) is the repo.
Yeah, I can’t help but feel like a lot of this article is syntactical sugar that’s great if everything works, but hell to debug. If it ain’t broke...
Yeah, definitely don't do that. I get it, we don't have good syntax for if-expressions in JS, but this is definitely not the right solution to the problem
Thank you! Was about to comment, "too bad there's a paywall"
So you're saying Chrome's ready to be the new IE6. (This is exactly how IE6 stuck around for ages--the enterprise.)
The only thing I'm missing in Firefox is the websocket traffic monitoring in dev tools. It's awesome for daily use, though.
um. lol. fair point 😂 thanks for the correction
Ahahahaha you're dumb to use chrome in the first place
There is always wireshark
Honest question, what syntax would you prefer? Out of the languages I know, the JS if syntax seems pretty standard.
I was going to recommend the exact same thing... Absolutely worth setting it up, given this news.
Javascript is the new php
You need to give more details. What are you currently using to handle the event?
`if cond then a else b` instead of `cond ? a : b`
It's not blackbird in any traditional sense. I don't think it's any common combinator, probably because it requires an input to not be singular (the input is an object with multiple values). Not sure how useful this would be in the math world because of that. That said, playing to the multiple values aspect, to fall into line with a common combinator, we'd need those multiple values to reduce into a single value right off the bat. As such, it could have been simplified into a bluebird combinator with a little less headache: ``` const bluebird = a =&gt; b =&gt; c =&gt; a(b(c)); const person = { first: 'Josh', last: 'Higgins' }; bluebird(x =&gt; `Hello, ${x}.`)(x =&gt; `${x.first} ${x.last}`)(person); // Hello, Josh Higgins. ``` Or using it with named functions... ``` const bluebird = a =&gt; b =&gt; c =&gt; a(b(c)); const greeting = x =&gt; `Hello, ${x}.`; const name = x =&gt; `${x.first} ${x.last}`; const person = { first: 'Josh', last: 'Higgins' }; bluebird(greeting)(name)(person); ```
Hi /u/yacantfixstupid, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/avi0791, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TrentonB, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sundarsany, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[https://jsperf.com/five-ways-to-calculate-an-average-with-array-reduce](https://jsperf.com/five-ways-to-calculate-an-average-with-array-reduce) \- I'll just leave it here... ;)
Gotcha. `cond ? a : b` syntax has been around since at least C. I don't like it much either, because it doesn't read like English, but whatever.
It’s not blackbird. Look at it again. He might call it blackbird but if you run it in a blackbird combinator, it will fail. He could have made it blackbird, if he didn't chain in the functions for getting the values of the object: ``` const blackbird = a =&gt; b =&gt; c =&gt; d =&gt; a(b(c)(d)); const person = { first: 'Josh', last: 'Higgins' }; blackbird(x =&gt; `Hello, ${x}.`)(x =&gt; y =&gt; `${x} ${y}`)(person.first)(person.last); // Hello, Josh Higgins. ``` Granted, at that point he could have simplified it further into bluebird and just passed `person` once, or just had a single function that took the person object and returned the greeting. I dunno. The example was so bad, IMO, that it just distracts from the point he was trying to make.
Don't you think the title is a bit misleading, given that the article is more about the usage of the replace function and less about better performance?
Keep up man ...great work 🤙
How to make $3,167.48 working from home in your pajamas!
Hmm, I might change the title. It’s interesting to how such details affect the performance. But I was thinking is more useful to see how to use it and have the benchmark as a way to prove that there is actually a difference
thats weird it was just asking me to sign in, medium always does taht u just have to clear the site cookies.
Five ways to calculate an average with 30x more instructions
You wouldn't want to submit that code into my review...
lol, I bet no one writes bugs in your team either &amp;#x200B; well... const a = []; a.push(123); a.push(456); is just const a = [123, 456]; there's also no need to a = a.concat([123, 456]); just create a new constant const b = a.concat([123, 456]); anyway, nothing is wrong, enough bike shedding for today :P
Yeah, you're definitely right. In my personal cheatsheet, I've got the following definition. ``` /* blackbird */ const B1 = f =&gt; g =&gt; a =&gt; b =&gt; f(g(a)(b)); ``` This [combinators.js library](https://github.com/benji6/combinators-js) has the same type definition for B1: ``` const B1 = a =&gt; b =&gt; c =&gt; d =&gt; a(b(c)(d)); ``` The [Haskell](https://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html) type definition seems to confirm that structure as well (although I'm really not experienced in Haskell): ``` blackbird :: (c -&gt; d) -&gt; (a -&gt; b -&gt; c) -&gt; a -&gt; b -&gt; d ``` The final two arguments should have the 2nd argument applied to both (to complete the 2nd function), but in the example case, the third argument is being applied to the last argument beforehand. The order of application is off. I'm still trying to figure out what that is, if it has a name.
Maybe. :( Gonna try Brave. I've heard good things.
Both of those are available in Javascript (and C and C++ and C#). PROPERLY USED the ternary operator makes for code that's easier to read. Not everybody has common sense, alas.
The title is even more misleading, it should be "... in node.js", not "... in javascript", or rerun the benchmarks in other engines too.
I am gonna remove it guys
but you'd be happy with imperative mutable state and procedural style?
While Firefox has superior UI, Chrome is light years ahead in the dev toolbox department. Wish Mozilla focused on this so I can finally ditch Chrome.
Not sure why you're getting down voted. I'm curious how often unit tests are responsible for discovering issues with the code. In your experience why do you believe them to be a waste of your time? Aside from the points you already mentioned.
this might help [https://unpkg.com/zdog@1.0.1/dist/zdog.dist.js](https://unpkg.com/zdog@1.0.1/dist/zdog.dist.js)
&gt;People trying to get fancy and fucking up, lol... This is why it's bad code.
I've seen a lot of people use these to segment their tests, particularly in the .net world // Arrange setupCodeHere(); // Act performSomeAction(); // Assert checkTheResults();
regression prevention is the #1 reason i write tests. being able to refactor with confidence is absolutely critical for anything that has to work without breaking. even code i wrote myself from zero, but has grown complex over time, i would never touch without a good amount of at least "typical case" end-to-end and integration tests to validate that i didn't break something. for code i didn't write but have to fix/maintain, i basically refuse to touch it without liability release in the absence of half-decent test coverage. "Write tests. Not too many. Mostly integration." [1] [1] https://kentcdodds.com/blog/write-tests
No, Brave is better. Firefox also bans certain extensions.
Indeed. It’s bad code. But he just lacks practice. TBH the author is probably just getting into FP, and blogging about it as a way of learning. But in traditional FP languages, it’s quite common to use constructs like that. IMO most short blog posts do a *severe* injustice to functional programming concepts. The single-example-case format simply does not convey the intent behind FP code patterns. The real value of function composition becomes clear as the program grows more complex. The benefits aren’t seen until you have a 10k+ LOC code base that seems to *test itself* because it’s built on a long chain of functions that have zero external dependencies. Hardly any mocking necessary. Your unit test are almost synonymous with your end-to-end tests (and in a pure functional language you need far fewer unit tests, because your compiler catches most of that stuff)... But I digress. Simple example blog like this just can’t possibly cut it, but not because the code is inherently *bad*. It’s because you’re seeing a robust set of tools applied to quaint problems, and it always feels like overkill. It takes large, complex problems to see that it *isn’t*. (Sorry for the rant, lol)
https://stackoverflow.com/a/2497040/8037425 ActiveX is only supported by IE.
ActiveXObject is a old relict from Internet Explorer time. If you use NodeJS look at the [File System](https://nodejs.org/api/fs.html) API
Do you have any information to back up this claim? Technically, any DNS allows the controlling entity to follow you around the web too. Do Cisco (OpenDNS) or Cloudflare actually do it?
Interesting! Do you spin up a container for each project you're working on, or do you let the container reach out onto the host file system to edit the files you're working on? I'd be worried about losing data if I killed the docker instance, I've always found quite a lot of friction working with external volumes.
Honestly, this looks amazing. Like, if it works properly, it's probably exactly what I need. I run on Ubuntu with i3 window management, with NeoVim for most code/text editing. This seems like it can handle all of that, is that correct?
of course `a.push(123);a.push(456);` is the same `a = [123, 456]` doh it's just a stripped down example /facepalm never mind
 const fs = require('fs'); fs.writeFileSync('/path/to/file.txt', 'My cool data');
A similar but more flexible approach is the Stage 1 [do expressions](https://github.com/tc39/proposal-do-expressions), already available through [a Babel plugin](https://babeljs.io/docs/en/babel-plugin-proposal-do-expressions)
Awesome question! By default, the tool uses the [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/) mechanism to mount host volumes into the container. Volumes, support single direction mounting and bidirectional mounting depending if you want the file changes to persist outside of the container. I personally clone all my repos on the host machine and then mount as volumes. The only problem is if you're running on a non Linux host, as the volume implementation can be slow. Luckily, Docker engine supports the "delegated" flag which removes these performance issues. I don't have specific patterns/rules around a container per project/repo/etc, but I never let myself get attached to a container (they should be considered disposable). I hoped that answered your question, if not please let me know.
So glad to hear it. The only part of your setup I have yet to try is i3 window management. Because I have xdisplay server working, it shouldn't be an issue. That being said, it may take a few tweaks, so if you run into issues we can work through the problems together. Let me know how it goes.
Google was never a secure, private, or safe method of browsing. Firefox has always been my default browser.
I haven't used any formal FP languages so I might sound stupid. If you're using function composition, why isn't a function you passed through considered a dependency? If you wanted to avoid something like `when( someInstance.getSomething() ).then( someObject )` for testing.. I'm curious how you'd avoid using mocks for something like `function compose(funA, funB){ // some mangling of state here }`. Or is that a pattern that you'd not see?
Very cool. I’ll see if I can get something working later. Also, I assume I would be able to install and run all the standard Ubuntu-compatible packages as well? For example, I need to test programs on a wide variety of web browsers. I have zero docker experience, so I just want to know what to expect.
Basically, it works like a fresh install of ubuntu:18.04 with nearly 0 exceptions and no understanding required. As long as the container runs, any changes inside persist. If you wanted to "permanently" add packages, you could create a new dockerfile based on the `myos` image and then install packages. This will allow the packages to be in your image without running commands each time. So, the short answer is yes.
What are you trying to accomplish? As in why are you trying to write a file to disk?
Okay cool, and so do I need to tell it where to put the volume on my drive? And I assume it doesn’t need to know anything about bootloaders or firmware, is that correct?
 const { writeFileSync } = require("fs"); writeFileSync("sanchez.txt", "Wubalubadubdub!");
Let a = sum(array) / array.length
In the `docker-compose.yml` there is a `volumes` section. The left hand side of each entry is the path on your host machine. The right hand side is where that host volume should appear in the container. And definitely no bootloaders or firmware.
Amazing, lol. I sort of wish I had something like this way back when I was running Windows.
just to pile on - the callback for `.reduce()` gets four arguments, and the fourth is the original array being reduced, so you don't need to accumulate `n` function averageScores(avg, term, _, src) { return avg + term.popularity/src.length; } const averagePopularity = victorianSlang .filter(term =&gt; term.found) .reduce((avg, term, _, src) =&gt; avg + term.popularity/src.length);
My personal #1 reason is that the best code is written test-first. It practically forces you to architect (at the macro level) in a way that hits the big software quality metrics.
Having used Docker on windows, no you don’t (in Ron Howard’s voice)
All of this talk about the structure of the code already means it's bad code. Confusing code, even if it launches rockets, is bad code, because the next guy might misunderstood that bad code and blow up Apollo 420
in my experience, it's extremely rare that you know the big picture (or anticipate the future) well enough to start with tests. everything starts with some MVP core to prove out viability, then gets refined, partially refactored, and then at some point hits API stability (1.0.0). that's when i write tests - after i have a core api i'm happy with in terms of dx and decoupling. testing anything written before 1.0.0 is almost always a waste of time because most software is grown organically rather than getting specced out from start to finish first. if you do have a spec, then it makes a lot of sense to write tests against the spec and write the implementation against the tests.
He's getting downvoted because unit tests/integration tests are invaluable. I don't know about everyone else, but my app is a gigantic freakin monolith that takes forever to build and load from a cold boot. It is so much faster to write tests around the chunk I'm adding to make sure the logic inside actually works, and then load the app to make sure integration is fine.
The point is that functional code, while a bit more abstract and mathematical (a.k.a. “hard to read”) means very few people will ever have to return to your code. Because it will just work, with zero runtime errors. No refactoring necessary until the business logic changes. And the business logic usually just looks like one small file where each line of code is an easy to read function name that describes, step-by-step, the entire program flow from start to finish. If you want to refactor, it’s simply a matter of identifying which features need changing, and moving up or down the tree, and chopping off one of the branches, and decomposing it’s atomic parts the way you want. By far the best part of this process is being 100% positive that when you chop that branch off, nothing in the rest of the dependency tree will ever be affected by it. THAT is the benefit. THAT is why it clears up mental overhead. Over the long term. It’s a bit more difficult to write at the very beginning, but once those functions are composed properly, you never have to think about what’s happening under the hood. It simply works.
Brave is still chromium
Use microbundle or tsdx, then you don't have to configure anything.
Why do you think it's a waste of time?
I disagree. If I'm building a gear in a larger system and I can spec it out with tests before building it, it doesn't matter if it eventually gets evolved out or radically changed as the software changes on a larger scale. I've never really had that happen in a way that made it a waste of time to write the original tests (very often the tests have sped up development). That's not to say I always develop this way. Less than 50% of the time, in fact. But so far when my developer senses have told me to work this way, it's been a good thing.
Except that's not an actual B1 / blackbird. It's just curried functions. I mean, so is Blackbird, but the pattern is just frequent enough in Haskell that it got named, I guess. The author wanted to get fancy and use some common Haskell combinator, but they effed up and just wrote their own currying. Currying is fine is thats your thing. For many, it's a clusterfuck from a readability viewpoint. There's a billion ways to write valid Javascript and everyone has different opinions on what "bad" code is. Neither your example nor OPs looks like good code to me, because it's confusing to read and the complexity of reading it comes at no real world advantage.
That's why it's such a good option.
The webrequest api is also on Chromium and they are also planning to remove the blocking on that. Every browser on chromium will have this happen.
Sure. If that's all I had and javascript was the focus. If I could simply use a computer that would be much better though.
Let’s not equate explanation with endorsement. I was just thought it might help to show different examples in an algebraic way to facilitate understanding.
Why not just make it good code tho
No.... Please no..
If in js is a statement not an expression. Lots of modern languages have conditional expressions. The proposed do syntax is an attempt to fix this.
Indeed, at the edges of your application, you would need to have a small set of functions (think of it like an API wrapper), which take in data of a specified type/shape, and returns a function typically called a `Maybe`/`Either`/`Option` type (depending on the language). Let's just go with `Either` for now. The `Either` function sort of works like a filtering mechanism. It takes a function that filters the data into one of two different functions: `Some` (if the data is valid) or `None` (if it's invalid). `Some` simply returns the value as it is. `None` returns a reference to what is essentially a `null` type under the hood. We will come back to that. The `Either` then takes *two more* functions that represent the "happy path" and the "sad path". It will return a `None` type to the "sad path" function. And finally, the last argument the `Either` takes is the data. It applies the filtering function (called the 'predicate') to the data, and if that returns a `None` type, it passes the `None` to the "sad path" function (called `Left`). If the predicate returns `Some`, it will return the `Some` function down the "happy path" (called `Right), which represents your application logic. Now, usually, in pure FP, when a function takes in a `Some` type, you can be 100% certain that calling the `Some` function will return perfectly valid data for the function that operates on it. So the receiving function can simply unwrap that `Some` function to extract the data, and then begin working with the data. The reason the data is known to be 100% without runtime checks is because the data types and function types are checked at compile time. So if you specify that your `Either` function will return `Some` non-zero integer, then the compiler will recognize that, and data that doesn't match that description will be passed as a `None` type. The result is that ALL of the functions downstream of the API wrapper will be guaranteed to receive the correct types. This include what they call "pattern matching," so if you say your function takes a type `User` (which has a name, phone #, and email), then it cannot be composed to receive data from a function that returns anything besides a valid `User` data structure. Some functions are allowed to take in multiple data types. But every single possible data type/structure must be handled by some operation (sort of like a `switch` statement with mandatory `default` cases). Suffice it to say, pretty much all of your error handling can be done at the outer edges of your application. So only the small subset of functions that interact with external API's or user input actually need to check data at runtime. Once you filter out the impurities of data at the edges, then the rest of your application can just chain functions together smoothly until it produces an output. All of this is made possible by mandating that all your functions must be "pure". The only data they can work with are their own well-defined parameters. If they rely on anything outside of their scope, then they are "impure," and cannot be trusted to return the same output every time for a given input. This guaranteed purity allows the compiler to have a lot more information about the possible inputs and outputs of each function. So the type-checking is insanely robust, to the point that it can almost 100% guarantee zero runtime errors. JavaScript doesn't have the luxury of a compiler like that, because any function can return literally anything. A function could randomly return the `window` object if it wants. So all of your functional purity and type-coherence comes down to pure discipline. TypeScript has come a long way in bridging that gap, though, along with other compile-to-JS languages like PureScript, Elm, ClojureScript, and ReasonML. Anyway, sorry for the long-winded reply. It's just a bit complicated to talk about from square one.
I personally don't unless I'm having trouble understanding a concept, being able to fluidly write something out and draw diagrams easier than on a computer can help me a lot when trying to grasp a tougher concept, or if I'm planning out a more complex feature for whatever I'm working on, writing notes out helps me.
I think there’s some weird conflating of concepts happening in this thread. People are calling it bad code because of the “complexity” of the currying. There’s absolutely nothing wrong with functional programming. Functional programming seems to mean something different to everyone, and it could either have fuck all to do with currying or everything to do with it. Pure functions are what provides a lot of the benefits you describe. Pure functions are, at least IMO, functions that do not mutate state and don’t rely on mutable or external values. As in, if you put in X you can always expect it to return Y, and never Z. This is 100% achievable without currying functions. Pure functions are just a piece of functional programming. I personally have no interest in functional programming, as the flexibility of JavaScript is a benefit IMO. That said, I write as much logic as humanly possible in pure functions and modularize it away from business logic. Business logic has never been a small part of what I have done at any job, nor any codebase I’ve been a part of. Probably because pure functions are frequently written once, turned into importable modules, and then shared across any projects that can use them. I agree with all the benefits you mention about keeping functions pure, and I doubt many people in this subreddit would disagree. But that doesn’t mean you have to write the functions the way OP did.
Nope, never have used paper for coding
His code is bad because (1) it uses unnecessarily complex composition logic when it doesn't need to, and (2) because he gave the incorrect name for the combinator he was using. None of that has to do with combinators in the abstract sense. The code is not inherently bad. I could see this combinator being used in other areas where it's more necessary due to function-chaining. It's only bad in this specific context. That's all I'm saying.
I will definitely take your word for that!
We used to have this junior dev that wrote everything down he was learning. He had papers and post-it notes all over his desk with little scripts, git commands, etc. Yeah, he only lasted like three weeks until he got the boot. Not saying this is going to be you, but it just reminded me of that.
I like to write any new JavaScript concept that I am learning into an html file that I can open with a web browser. That way I can actually see the script in action and attempt to manipulate it.
I totally agree. I guess my point was that most people look at a combinator and think there is no reason to ever use a function like that. And that is simply untrue. But the reasons for using those kinds of functions are almost *never* made clear by a blog post that only gives a simple example. So yes, his use of a combinator was bad for several reasons, but, aside from using the wrong function name, it was only bad *in this context*. It has its uses, but those use-cases are definitely rare. My point about "complexity" is actually referring to the differences you're talking about. I was suggesting that the increase in complexity you experience up front with curried functions and combinators is more than offset by the decrease in complexity provided by a functional architecture. As I'm sure you're aware, with FP you spend more time *thinking* about your code than you spend *writing* it. And that can be a good thing, since lines of code usually turn into technical debt over time. And I also agree about the flexibility of JS. I never write in pure FP style. But the more functional, the better, IMO.
No I learn by programming along with a video tutorial and/or hacking it out. Having a good reference to google helps along with a good editor too.
Please don’t do this. I had to work on a program called Buywise that did crazy stuff like this. The guy even had written write for reads and read for writes in function names. I still have nightmares from those days.
This is awesome!
I'll sometimes create a markdown document if I'm learning a new framework like "React Hooks Primer" or such. Just as a quick reference guide with nicely formatted code snippets.
Yea I think we’re completely on the same page and people are just getting hung up on this one specific example from this article. Personally I leave combinators for arithmetic only. When I write math functions, they are as shorthand and concise as humanly possible haha. Math is static, after all. Even though pure functions are static in nature, when you curry them together then the order matters and becomes part of the overall logic. With math, that’s fine as the problem you’re solving is usually going to remain static. With anything else, it quickly can turn your pure functionality into unreadable business logic. _Shit, did I sort this array before I transform it? Oh fuck I should have filtered it before._ That said, I work on live applications for the racing industry. Even our codebases that are largely arithmetic change frequently. Engineers are constantly tweaking formulas, so we pretty much modularize all our pure functions and explicitly call them instead of trying to be concise or simplify algorithms down. It’s funny seeing things like “average” meaning one thing to one team and something else to another team haha.
Check r/learnjavascript
Worked for me with incognito mode.
Maybe unrelated, but I have a small whiteboard on my desk, both at work and at home. It's wonderful. I use it all the time to organize ideas. If I want to keep the notes, I can just take a picture. I wouldn't recommend taking notes on a notebook. Maybe something like an online notepad, or a study repo on GitHub (this one is really good btw, learning "in public" is great). Notebooks are hard to rewrite, and easier to damage or accidentally lose. Go paperless!
White board.
U+1F44F very well explained. I've tried to stick to FP principles when working with node.js but now that I'm working primarily with Java and Python, I feel like I've lost touch with that world. It feels like FP languages enforce you to break almost everything down into binary decisions. Does this create a lot of boilerplate code?
I don’t necessarily learn by writing down actual js code, but it is definitely beneficial to write down what you want to do. Like before writing any code, make a plan of what the logic behind it should be.
The best answer is always in the comments. I couldn't even finish reading his article because I was so annoyed at how complicated he was making such a simple problem.
I use vimwiki to jot down stuff, most of the time I never refer back to it but the exercise helps. If it's something complicated I use pencil and paper.
When I was just started learning Javascript or any other language from a tutorial I always write it down to my notebook. Studies have shown that you learn more when you write it down than just picturing it with a cellphone(kids these days). That's effective for me but I don't know with others :)
More like draw diagrams to understand concepts like the event loop and fucking your mom
// Comments in .js file
Well if you put it that way then yes, fuck you.
Take notes however you can efficiently take notes. If you need to diagram a solution to a problem, a whiteboard is going to be more efficient that diagramming using an application. If you want to preserve a diagram for posterity - to share with others, take a picture and redraw it with an application. Personally I like yEd because it’s free and good for that sort of thing.
I was thinking about this too. However, I believe his final solution was showing how it could all be done in one iteration without filter. I do prefer the method that you shared for readability.
I would hate to have to code this. It is syntactic sugar at best.
None of the running total methods account for compounding floating-point errors, either. ``` a = [10.3, 5, 2, 7, 8, 0.6125]; // Sum and then divide - Same as imperative loop behavior a.reduce((a, v) =&gt; a + v, 0) / a.length; // 5.485416666666666 // Running total a.reduce((avg, c, _, src) =&gt; avg + c/src.length, 0); // 5.4854166666666675 ``` What's *worse* is the running total output can change depending on input order: ``` [10.3, 5, 2, 7, 8, 0.6125] // 5.4854166666666675 [0.6125, 10.3, 5, 2, 7, 8 ] // 5.485416666666667 ``` This is fairly typical of the gulf between math and engineering... For most purposes this is *within tolerances*.
Absolutely. I take notes and save text files in folders whenever I learn something new because if I don't use it I'll most likely forget it. Then I use github to push them and pull them to my laptop etc so I always have my 'library' of notes available whenever I'm coding.
Here's how I learn a new JavaScript concept. It's the weirdest thing. I watch, or read a tutorial and when there's code examples I copy them line by line, word for word, into my own, local project and run it to make sure I have it right. I'm literally hand-writing their code, not adding anything new. If I can copy/paste, I don't. I hand-write it. I don't know why, but this always cements it into my brain.
Yeah I do. I have a small notebook where I keep all of my notes.
_Look out, we got one of them nerds!_
Just an attempt to explain the insane which I admit is a pretty laughable thing to attempt.
What site? I’d be interested in debugging it. Finding out why
You're *
Thanks for the feedback. I'm still learning some of this stuff myself. It's a work in progress. I know you can do some functional things in both Java and Python, but I've heard it's a bit more awkward, and I don't have much experience with those languages. But I suppose most companies end up doing a lot of OOP with those languages. You mentioned binary decisions... It's probably common, but not always true. Most imperative languages handle multiple cases using nested `if`/`then` or switch statements. Functional languages have similar mechanisms. You can think of combinators (which usually have readable names like 'lift' or 'apply') as creating *routes* for data to flow through. Sometimes those routes can split or converge. If your program is like a data railroad, then combinators are like switches between tracks. Some of them can switch between many different tracks. As far a FP boilerplate goes, I would say yes, to some extent, but it's not something you personally feel most of the time. In pure FP languages, functions that handle composition logic (like `map`, `filter`, `flatmap`, `pipe`, etc) are typically baked in as language primitives. But for JavaScript, they are usually defined in a library like Ramda, LodashFP, Sanctuary, etc. Personally I prefer Ramda. Then, if you're working on a greenfield project, you do have to write some basic primitives. You just have to define what your inputs and outputs look like, create types around those, and the rest is just incrementally connecting the dots between those two sides of the app. The rest of it is just business as usual, just shifting numbers and lists.
Do you write notes on paper when **you're** learning English?
Are you asking how people keep things straight when they're learning js, or asking whether it's weird to write notes on paper? If it's the latter, do whatever works for you! If writing notes on paper helps, keep it up!
/r/notebooks/ would like a word with you depends on what type of notes you're writing though. If it's code, I think an app is better, because you can easily copy/paste, reformat, etc. But some people thrive on messy notes and doodles and no app beats a paper notebook yet, maybe drawing apps like procreate, but even then, I think a notebook gives so much freedom on writing notes, apps always have some sort of constraint. I use both.
I write notes on paper when I'm WRITING JavaScript so yeah, I probably did it when I was learning, too.
With no respect (due or otherwise.) No; you don't seem to understand.
That's why I talked about the whiteboard. I agree on note-taking apps being just for simple text and code. I used to doodle a ton and draw graphics, and as much as I tried to use apps for that, no app seemed good enough. Then the whiteboard came. I just doodle, maybe take a picture, then erase it. No uneraseable ink, and no eraser dirt. Just love.
Thanks! I have a few questions. What do you mean by study repo's on Github, can you show an example. &amp;#x200B; Also, what size whiteboard do you use? &amp;#x200B; Thanks.
lol, same thing happens to me!
Yes ! I used quokka plugins for js output and write code for practice on webstorm and sometime vscode .
how is the binary stored? if it's a string you can use it just like an array...
wtf u blabbing 'bout? Binary: each digit = 2^digit Decimal: each digit = 10^digit Its that simple.
I know how to do it, but how to make a code to do it
I do and I really like. Sometimes it’s hard to understand some data structure or an algorithm, I’m used to write down a trace table (I’m used to use the debugging tool too).
A study repo is just a public repository where you throw stuff. Throw notes in Markdown files, throw code around, git commit, git push. You can even use this to share what you learned, or doubts you have, with other people. I don't know the exact size of my whiteboard, but it's around the same size of a laptop screen, maybe a little smaller. Just pick a size that can fit your ideas and won't use too much space on your desk.
RemindMe! 12 hours
I will be messaging you on [**2019-05-31 15:40:28 UTC**](http://www.wolframalpha.com/input/?i=2019-05-31 15:40:28 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/buyd2r/myos_develop_and_share_terminal_environments/epkgde4/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/buyd2r/myos_develop_and_share_terminal_environments/epkgde4/]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! epkgh00) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Promising looking framework. I once wanted to use it but the ecosystem isn't all that big (amongst jobs). I might get into if this gets the hype
Your exam is tomorrow - get the fuck off reddit and do practice problems right up until T -1minute from your exam. Sleep is for the weak!
No, no study needed
God I wish I'd have seen this at my last job. The guys there held Sinclair up as being a god because he wrote javascript like haskell. Purely functional. And when you questioned anything, the answer was always "well it's just easier to reason about!" No comment on perf. But now I see a fairly contrived example actually being perfed and it makes me so happy knowing those guys didn't know what they were doing.
Sorry, but if I came across this sort of thing in a review, it'd instantly get rejected. It is hard to read and needlessly obtuse over the higher performing transducers that already exist in javascript. Try again.
Avoid ActiveX like the plague.
My office has painted our walls with a Dry Erase paint of some kind we do break out whiteboard explaining all the time, just grab a pen and the closest wall.
Hi /u/DomRao04, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/EmoEmu2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I do understand. We just disagree. I'm willing to take the extremely minuscule risk. You seem to think it's a death sentence for a computer to use an old browser. You probably get off telling people they're going to get a virus for using a *slightly* outdated browser, on a _mac_.
Is this guy someone special? I just assumed he was a random dude trying to figure out JS based on his blog posts.
Hi /u/pdranklin, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Deep exploration of subjects that are interesting enough to the author to not stop at surface ideas just to put a post up. There should be an analysis of pitfalls, successes, and the overall accomplishment, along with where they would like to go with it if they spent more time on the material. Finally, the post should explore the subject through a demonstrable project that the author continues to refine through the post.
Oh heck yeah. I love seeing what other devs are doing in this way. This looks rad!
Deep explanation. I like that! Thanks ☺️
You can use mobx in react to have the same effect
Hi /u/ZarchAdam, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Glad to hear they're making it easier to work with forms.
It's not about that. I just dislike Googles business practices and their products. I decided a long time ago I'm an iPhone user and haven't used Googles search engine in about 3 years. So stepping away from their products is/was easy for me. I get people who say "hey it makes my life easier" - thats fine for me, but I'm a grown man and can find shit to buy on amazon without the help of Google.
Vs code is best.
Idk how to use it,
I'm trying sublime rn
I'm a bit unsure on what you're asking. There are quite a few good IDEs on the market, namely Visual Studio Code and IntelliJ or it's lighter cousin Webstorm. &amp;#x200B; However, you mention you don't know how to use VSCode, so are you asking for help with JS and HTML or IDEs?
https://code.visualstudio.com
I'm currently trying to use sublime I know how to code html and javascript I'm just trying to find a good ide
Like vs code is so complicated to get set up, I just need a easy setup and start coding right away.
How is it complicated? If you point it at a folder, it "just works" I think. What is getting in your way?
It gives me this error "I know code language " when I have code runner installed
I mostly agree. The "cost vs value" proposition of most unit testing seems to be highly overblown at the moment. There are other ways of improving code quality and other ways of automated testing which need to be in your toolbox. For example, for any kind of code base beyond a toy or PoC, your should first be using a static type system like TypeScript or Mypy if you are using Python. The ROI is much better and has a bunch of other benefits (fast and safe refactoring, code is much easier to navigate etc).
How is the dev tools in firefox? I mainly use chrome for development.
You don't need an ide at all to learn programming. For sure not to the stage where you're asking about it instead of try different IDEs and choose the one you like most.
Ok so you are saying the user should be at the center and let their need dictate the stack where “the user” is the final user of the web app or the developer? I am fine disagreeing but I would like to understand your point of view, because till now you have said: . The organisation dictate the stack: I am advocating the team decides the stack the senior tech leadership define boundaries in where the team can express itself . Fixing the company culture: I still don’t get what you are referring to, what is the cultural issue you are referring to? . Forcing the user to download different framework: it’s really up to you and your teams, having the possibility doesn’t mean you must have multiple frameworks, if you wanna work with shared dependencies like Single-SPA is implementing you can without any problem. If you wanna use the possibility to have different frameworks only when you revamp your tech stack you can do it, no one is forcing to use multiple stacks despite you have the possibility for doing so. Enabling is different than imposing . User centric experience: reading other comments you left, your main concern is having users downloading more resources than what they need, fair point but if that is your problem you can still mitigate using shared dependencies despite you need a solid process for upgrading those dependencies across the entire application. If we wanna be fully user centric although, we should start with data, when we defined our micro-frontends we started looking how our users were interacting with the website, understanding the user flows and based on those we sliced the application. More than happy to disagree, but let’s have a constructive discussion that could be useful for us as well for the community reading this post
8ve tried alot of ides for example ,github, sublime,android studio,and more on the play store and chrome extensions. However I still havent found one. I really wanna try to learn vs code but I feel like it has a learning curve.
VS code basically a clone of sublime, though Sublime is more convenient. Try WebStorm though
- Native browser scroll behavior - it don't emulate scrolling, only showing custom scrollbars, scrolling itself still native - Cross-browser and cross-platform - does not matter where and how, scrollbars looks the same everywhere - Ultimate performance - 60 FPS (using RAF) and highly optimised code - No extra stylesheets required - minimum inline styles out of the box or you can style it yourself however you want - Fully customizable - want a hippo as a scrollbar thumb? Well.. I don't judge you, you're free to do it! - Scrollbars nesting - Total tests coverage - Momentum scrolling for iOS - RTL support ([read more](https://github.com/xobotyi/react-scrollbars-custom#rtl-support)) - Content sizes translation ([read more](https://github.com/xobotyi/react-scrollbars-custom#content-sizes-translation))
Ok I'll check it out, thank you so much for the help, it really means alot to me!
Why JQuery is so hated? Is there something wrong with it?
If browsers support Typescript then compiler/runtime can be sure about types and can optimize code better.
Just because you can't grasp it the first time you read it doesn't imply it needs to be a joke. Some concepts need to be digested and consumed before they are absorbed and become natural (and useful, rather than overcomplications).
Yeah, tell me about all of these times you needed to find the average of 60k arrays in one second.
I know it would be a massive undertaking for them, but I would be so stoked if they ditched less for scss
VS Code is one of the most cut down version of IDE to get started with. Some might even argue that it's too simple to be an IDE. (Compared to Visual Studio, eclipse, xcode) If you are having issues getting VS Code setup, maybe IDEs are not what you are looking for. I would recommend a quick googling for "best web extension vs code" or "setup vs code for web projects" and see what's out there and how other people are doing it. Sometimes you won't need an IDE, and using a text editor like sublime + console is fine for a large number of web projects. Side note: noticed you are using the names interchangeably, are you sure you are using "Visual Studio Code", not "Visual Studio"? HUGE difference
The user is of course the end user, the person who downloads the code on their device. Who ever calls developers "users"?? Making end user download duplicate code or initialise separate frameworks on separate sections of their website is not the best experience for them. That should be our #1 concern The organisation IS the team(s), why do you treat them as a separate entity? The teams (or their representatives) get together, make decisions, set guidelines and then they go back to their domain and do the work. &gt; Forcing the user to download different framework: it’s really up to you and your teams. It should simply not be an option IMHO. If you are migrating from one platform to another you can introduce a new framework in certain sections, but that is still an organisation decision. A few years back I have worked for a huge organisation where each team was responsible for their own stack, and the end result was an unresponsive mess. Under the bonnet there were 6 or 7 versions of jQuery, 2 Backbones, a few Reacts... total madness which performed very badly. If every team decides for themselves that is the inevitable end result. To be honest I don't think we are ever going to convince each other, I simply do not agree with your view point and do not care enough to carry on co
I am using visual studio code, and I want ide's to be my thing i really like coding.
so still no css in js? :(
I found one I like, it's called Netbeans.
It's still the best, and free, with a ton of plugins. And stop typing "rn" and "idk" you sound like a typical lazy 12 year old.
Hehem, on this wonderful night at a quarter till 5:00am I sit and ponder, why is there a unidentified humanoid texting me about how I message through this vastly wide internet. Doesn't this human have better things to do than judge on what others do? I suppose not,however I bet he or she frequently browses the mlp and neckbeards side of the internet. For that I say good day to you o'l chap.
I love the title of this . "Patterns I Like" isn't telling anyone what to do or asserting that their opinion is the one true way, Also, I don't like #5 :)
Can't open the link now. I hope they are planning to resolve that svg icon bundle size issue.
Do you already have experience with Ruby? If not then you might want to consider a JS based back-end instead so you are not learning the details &amp; gotcha of two languages at once. As for what to use beyond that, without a lot more detail it is hard to say "choice based game" could mean anything from a single user choose-your-own-adventure style text based interactive tale to a massive sprawling 3D epic MMO. Without more info all you are going to get in response to this is lists of people's favourite frameworks, which may or may not be suitable for your project.
Yes, but what is it?
Useful content
gross
What's wrong with netbeans?
It's primarily a Java IDE and not a very modern one. I'm confused as to why you prefer it over a normal text editor for HTML/CSS/JS development.
Your mention of "code runners", Netbeans, Android Studio, and how VS Code is apparently hard to set up makes me wonder if you are confusing Java with Javascript. Make sure that what you are asking for is what you actually want. Java and Javascript are similar like car and carpet are similar - only in name. If you are looking for a **Java** IDE then the very best one that most professionals use is [IntelliJ IDEA](https://www.jetbrains.com/idea/?fromMenu).
Actually there is a way to get around that. A hacky way - but it exists.
I tried to use one of their components once, but it all comes bundled with their global reset css so it was just conflicting with everything. Ended up having to ditch them. Maybe if you're using all their styling it's useful, but their components are not modular which is a pretty big drawback.
True, that's why rn I'm using RJ TextEd
What's the catch? A ide that good has to come at a price?
Only the enterprise version costs money but that's for businesses. The community version is for personal use and is free.
I take it that it's one of your favorites?
Yeah, I am following that GitHub issue. I came up with another more hackish way to compiling only used icons as well as make it work with our SASS workflow. Their last year's Christmas easter egg debacle made me think twice and test around other alternatives but in the end ANTD is still the best one out there for our use case.
Never heard of it before lol. This is a confusing thread.
I was just expecting a simple answer and done but now it's a crazy thread
Well, that thread confirms all of my fears. It really sucks that Firefox is so bad for development, that will make switching a pain.
I'll most likely buy it honestly,
It's what we use in work and what I used in university for Java/Android development if that is in fact what you're looking for. For HTML, CSS, and JS development we use VS Code. Is it a Java IDE you are looking for or something else?
Yeah infact I been contacted to build a website for a computer store
I'm taking military classes for cyber security and counter intelligence
Good luck dude. Hope it goes well.
I do too,what people dont realize is cyber security doesn't really have anything to do with code it's more less of finding exploits
Hey get this game on steam it's called doom 3 and its fun
Could you elaborate?
What is this, a library for ANTS?!
I wouldn't go out of my way to get worse performance - shaving off a millisecond here and there is what gives you leeway to add more features, or to just be more battery efficient because you care about the user. &amp;#x200B; The highly performant imperative code could easily be wrapped in a simple function, and the caller wouldn't know the difference.
Udemy courses are nice
I imagine someone making ants walk in ink.
^ They are nice, and I'm a fan of Maximilian Schwarzmüller. He seems to have a few javascript courses, I bet they are good. He's got a good style of anticipating questions you might have and answering them. Watch out for the pricing, they are constantly fluctuating between hundreds of dollars to around ten dollars. You can wait for the sales, or you can try to find coupons online that drop the price hundreds of dollars.
They are usually like 12$ I followed hes React guide
Try codeacademy first, its free, they dont have free projects but you can get a lot of projects on web, search for codepen too you can write your projects and they have a lot of projects made by others that you can open and try to understand the code.
&gt;Maximilian Schwarzmüller His Vue.js courses really helped me a lot, +1
Start doing copious amount of drugs. Trust me, I'm an engineer.
Hi /u/Student_life98, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That warning has been there since years I doubt they will actually remove it. That said, the question really is why do you need it synchronous? It will block aka freeze the whole browser for the duration of the request. No click, scroll or other event will be processed, as such it is really an anti pattern and shouldn't be used.
I have a &lt;div&gt; that has content added to it from an AJAX call to PHP. It's set at a 5 second interval. I also have a button that makes the AJAX call when the user clicks it. If it is clicked while the call is being made, it will add duplicate data to the &lt;div&gt;. The only way I know to prevent this is by using sync. Is there a better method?
Yup: [https://github.com/kiwibrowser](https://github.com/kiwibrowser)
The new cards library will soon be open sourced, just like the old one was: https://deck.of.cards/old
I noticed this issue too. Is there any way to make it so it doesn't change your global css ?
MERN (or MEVN) Stack or Ruby + Vue.js
Do you want to build websites, or backend servers? I would answer this question first, as it will change what will be important to you to learn. Realize js is just a tool, that can use for different purpouses. Websites? You will learn many browser API methods, that f.e. change text in some box, animate something or sends some request to backend server. Backend server? You will want to learn node.js, and basic usage of many of it's libraries like express and some database library.
I'd like to learn to build websites with it.
Use fetch and disable the button until the promise is filled. If the user clicks on the disabled button, give them a sweet little message that says why it's disabled. Idk if others will consider this the best way to handle this issue, but it's how I would do it.
I'd argue that if they were to change CSS preprocessor, they should go for postCSS imo
Eloquentjavascript.net
Nope. There's a huge closed github issue. It's not going to be fixed anytime soon.
If you’re doing multiplication and division in JS, it’s assumed that you’re taking floating point risks into account.
Agreed, if only they literally copied Chrome's dev console.. &amp;#x200B; I swapped to new Edge, I use it solely for development and I went with Firefox for other stuff. Sadly.. FF isn't as good as Chromium-based browser (the smoothness, the speed, fluidity) but it's not unusable. Can't wait to abandon that evil-google product and go with lovely fox into the future.
I have found it to be common, yes. Very large organizations will have compartmentalized jobs like database administration and operations and development, but even in those very large organizations there will be smaller groups that aren’t as compartmentalized, making prototypes or internal tools. Most jobs I’ve had eventually grow a full stack web development facet. It’s just too useful to avoid. And companies are increasingly less willing to pay people “just” to do operations, so everyone is a db admin now. A trap to avoid is calling yourself a sql server person instead of database person. Having become proficient with sql server will help you rapidly master other databases as well.
I just switched to Brave. It's Chromium-based, and the devtools are identical to Chrome's. It supports all of your Chrome extensions as well, without any ridiculous limitations like Google is implementing.
The point is that performance is a weak argument when writing code. Premature optimization is the root of all evil, and I see it every day. Every single day, I and my colleagues and everybody on the internet makes the same mistake. There are extremely valid points on why imperative solutions shown in the blog or here in the comments are *better*: they are simpler to read and maintain. Performance is the worst metric to judge code. First one writes a simple and understandable and maintainable solution, then he looks at performance bottlenecks or optimization corners.
Due to [this bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1545400), I can't even open the web development tools on my web page.
The short list: 1. Early Exits 2. Switch to Object Literals 3. No 'Foo' Variables 4. One Loop Two Arrays 5. Nested Ternaries A good read, only takes a few moments and shows some good patterns. Most aren't language dependent either, so its useful for any project or language.
Thanks for responding, that's good to know! Just a follow up question, based on what you said are you saying its better to call yourself a database person? Or the other way around? I labelled myself as a SQL Server DBA on my resume, but when it comes to moving towards development I guess I'll also be exposed to other platforms.
That is all I do, javascript and t-sql.
Riot was my favorite back when using it v2. But then I drifted away to React for the promise of the great eco-system. At the time it was hard to get webpack to work well with Riot and there were no code splitting or tree shaking. So many library in React turned out to be... overly complex and underwhelming. This looks great, the only framework that does not feel its fiddling too much with the classic html/css
Hi /u/jordankilmer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlyingQuokka, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlorinPop17, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/geraldchecka, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pkstn, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/greetings_imperial, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/knightmike2018, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LostEnggSoul, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Gh05t_97, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GevDev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I wasn't asking for help. I was discussing javascript api and whether it was actually deprecated as stated by chrome. Wtf is this reddit even for?
who wrote this..
I think #1 through #3 improve readability, while #4 and #5 hurt it. In the case of #4, the pattern is too "clever" for my tastes, whereas #5 could benefit from some parentheses around the fallthrough ternary just to avoid any confusion about order-of-operations.
Ok thanks, I’ll repost once new code is open sourced and ribbon added! 👍
Isnt this that Chinese bootstrap that has horrible documentation?
I just installed it on my ubuntu workstation and wow they have the latest version of chromium! I thought they would be at least a few version behind! This is truly amazing!
React bindings are ready: [https://github.com/drcmda/react-zdog](https://github.com/drcmda/react-zdog) 😀
Switch statements are faster than object literals so you might want to be careful where you apply this.
Case #5 can be improved by reformulating the conditions: if (!conditionA) { // not A } else if (conditionB) { // A &amp; B } else { // A }
Indeed, the over-currying is unnecessary: const B1 = f =&gt; (g, h) =&gt; x =&gt; f(g(x), h(x))
scss is slow material use that and recompile times are pretty painful.
React UI component library.
Why would you want to do that? Additionally, you probably cause a stack overflow error at some point. There's also no way to clear it.
&gt; nested ternaries Ew. Oh no, please don't do that.
Cool list! I'd like to expand on point #2 and provide an alternative way of dealing with it (extremely similar approach, borrows from Rust). Library: [https://github.com/zackify/match](https://github.com/zackify/match) Original example from John's page: // Object literal const contentTypes = { post: () =&gt; console.log("creating a post..."), video: () =&gt; console.log("creatinga video..."), default: () =&gt; console.log('unrecognized content type') }; const createType = contentTypes[contentType] || contentTypes['default']; createType(); With 'rust-match': import match from 'rust-match'; const createType = match(contentType, { post: () =&gt; console.log("creating a post..."), video: () =&gt; console.log("creatinga video..."), default: () =&gt; console.log('unrecognized content type') });
One minor problem I've found with pattern #2 (Switch to object literal) is that it will pick up object prototype functions like \`toString\` and \`valueOf\`. Minor, but worth noting.
The only thing that annoys me is having to use `update()` manually every time. I guess not having reactivity makes Riot super efficient and lightweight, but damn, I've been spoiled by Vue and MobX.
I do like #5. Ternaries in general used to seem gross to me but working with React got me used to using them as a “lightweight” means of expressing simple conditional logic. I’ll be honest, the first time I tried to write a nested ternary, I felt dirty. I’d never seen actually seen it done, and I didn’t even know if it would throw an error, but it ended up being a cinch to write, and I was really struck by how easy the resulting code was to read and reason about. I use them quite often now.
What happens if the source data changes (new sizes, special character in a name, etc), and that breaks the filter? Let's say it breaks for the new data but works fine for the hardcoded test example. That's closer to a real life bug I would encounter. Things come up that we don't predict and probably wouldn't have thought to test for. Things work fine in our demo system but bugs come up when dealing with anomalous client data. I'm excited about the concept of unit testing but the examples never seem to make sense to me and I cant think of a bug in my product that a unit test would have caught. Part of that is our code is not very testable, for sure.
Regarding 'messy', this is how my js+css looks with Emotion+Styled-System. It is working in with four media ranges. I would say it is pretty compact and readable, right ? If linaria will work with Styles-System way, I would switch to linaria. export const Instructor = ({ instructor: { name, image, roles, rolesLg } }) =&gt; ( &lt;Box height={168} position="relative" pl={[17, 20, 22, 22]}&gt; &lt;Box height={[162, 207, 207, 207]} position="absolute" left={1} bottom={1} borderRadius={1} overflow="hidden" &gt; &lt;Image height="100%" ml={['-20px', '-14px', 0, 0]} src={image} /&gt; &lt;/Box&gt; &lt;H6 pt={[3, 3, '20px', '20px']} pb={[0, 0, '4px', '4px']}&gt; {name} &lt;/H6&gt; &lt;P color="dark-normal"&gt; {roles} &lt;Span display={['none', 'none', 'inline']}&gt;, {rolesLg}&lt;/Span&gt; &lt;/P&gt; &lt;P ml={[0, 0, 0, 0]}&gt; &lt;BaseLink route="home"&gt;Learn more&lt;/BaseLink&gt; &lt;Svg ml={['-3px', '-3px', '1px', '1px']}&gt; &lt;Chevron fill="var(--light-muted)" /&gt; &lt;/Svg&gt; &lt;/P&gt; &lt;/Box&gt; )
&gt; I love the title of this . "Patterns I Like" isn't telling anyone what to do or asserting that their opinion is the one true way, Yeah. Any time I see "Patterns you must know", "Or patterns you should use", I want to punch the author and do the exactly opposite of what they tell me. I mean, what the hell, they aren't my real dad. But seriously, though, I hate such titles. Balance and nuance is refreshing in our industry.
Jesus christ do not ever use nested ternary statements. Its gross. Hard to read and should generally be removed from every language.1 ternary expression should be the max. I especially dislike anyone who writes nested ternaries without adding parenthesis.. it is worse than doing 20 conditions in an if statement without parenthesis. I'd probably fire anyone who uses either of the above
/shrug I like less.
Thanks for sharing, brah. My *feedback*: 1. Early exits: yup, nice technique, simplify code. 2. Mapping via hashmaps (objects) rather than switches: yup, seems common sense once you get 3+ variants. Also better performance if you have really a lot of variants. 3. Bifurcation: this is nice to keep in mind, but usually only matters if the alternative is lots of loops, not just two. Otherwise the overhead kind of makes this an even break at best. 4. No "foo" variables. I never had a variable named "foo" in actual code. This is just in pseudo-code and examples. But let's face it: all of us have "foo" like variables, like 'i", "j", "k" for iterators. This also a common source of bugs when I forget I used "i" in an outer loop and use it again. Then I need to refactor with Real Names. 5. I've not used that. It's a bit hard to read, but maybe useful if you gets used to it. I'd at least nest it properly to help figure out the sequence better.
I use SCSS for an enterprise project (1000+ Angular components, most with their own SCSS file). Compile time is 2-3 seconds tops. I can't speak for Material, maybe they're doing something ridiculous, but I don't think it's an issue with SCSS.
setInterval is prone to drift and runs based on trigger time, whereas looping with setTimeout is not. If you have a task taking 10s and an interval of 30s, the next task will run 20s after the last. Using the setTimeout method, it should always be 30s after the last task. This is preferable in many cases. It won’t cause a stack error, because a setTimeout context gets a new stack on each execution.
There's nothing inherently wrong with LESS, other than both PostCSS and SCSS are considerably more widely used. End of the day it's personal taste, but for a component library, using one of the least popular "major" CSS preprocessors doesn't seem the best choice.
I see you are familiar!
did you misread the numbers? 4 is just being more descriptive about variable names, instead of using "foo" or "x".
It's not a recursive function, wouldn't cause stack overflow. `setTimeout` is just an API that interacts with the Timer system, it doesn't actually run the code in question. This is why unless your debugger is able to track async stacktrace, you lose stack trace w/async functions like this.
I'm glad I saved myself the trouble and chose Material-UI over it.
Well guess I am not the only one that likes #5 lol
I think it is S' combinator or phoenix combinator and not blackbird &amp;#x200B; [http://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html#v:starling-39-](http://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html#v:starling-39-)
I have been using Firefox for a month for development. It's just as good, and better support for source maps
[https://www.warcraftlogs.com/reports/YbNTt1LdZHJp83ax#fight=25&amp;view=replay](https://www.warcraftlogs.com/reports/YbNTt1LdZHJp83ax#fight=25&amp;view=replay) The "replay log" feature on warcraft logs, runs clunky and buggy on FF due to some implementation detail... (or at least it used to least I checked)
You did nothing "bad". Its the servers job to validate the incoming form data and reject if something is not correct or manipulated.
Don't worry, I'd never work for someone as small as you. Don't you have better things to do than imagine how you'd exert power over an imaginary workforce based on some half-baked dogma? Talk about gross.
Using ant for multiple years now i've never had an issue. What's wrong with the docs?
Fairly negative comments in here. Antd is awesome and I'm rapt it will continue to improve
Proxies are neat, but I can almost never justify using them in real projects.
Regarding 2 and 5: The clarity of structure is why I use "switch" and "if" instead of what's suggested here, but whatever works.
I especially like #4! You can generalize this [even further too...](https://jsfiddle.net/dah38zvf/)
Can async stack traces track stacks across macrotask functions? I’m too lazy to find out, but I thought async stack traces only worked for promise callbacks and async/await.
This. They're really a tool for library builders to handle certain cases.
If you're talking about Material-UI (the React library), it's been like 3 major versions since they ditched SASS...
Proxies are great; but they can't be transpiled or polyfilled so you won't be able to use them in projects that need to support IE https://babeljs.io/docs/en/learn#proxies . Short and useful article though
Yeh I’m sure you are right, I should have been more specific, with creat react app scss and cas modules it has always been slow for me compared to less and css modules and I have never known why. With hot reloading times of like 5 seconds, vs ~1 second with less.
lmao you sound like a great person to work for /s
Used mobx in one project using autorun for the update() it was nice and yeah it does gives you good control. I just saw the syntax in the post and I miss it so much. I still enjoy react but damn is everything "enterprise" using formik and Yup.
Why do you think Firefox is bad for development? I haven’t used it before which is why I’m curious.
when IE support stops, then it will finally be possible to have optional chaining without a hacky solution
I've been using [ts-node-dev](https://www.npmjs.com/package/ts-node-dev) instead of Nodemon for my TS projects. I've found it to be much faster, and unlike Nodemon, I haven't run into any hanging port/db connection issues. A couple other things I noticed: - `if (isNaN(portNumber)) return DEFAULT_PORT;` This should just throw an error. If there's a typo in `PORT`, I think most devs would prefer to know sooner rather than having their server host on the default port. - You probably shouldn't load both `.env` and `.env-local` (see: [dotenv FAQ](https://www.npmjs.com/package/dotenv#should-i-have-multiple-env-files)). If you want to commit config values, put them in a `config.ts`. And `.env` should be gitignored. Ideally `.env` won't be necessary in some environments because the variables are defined globally. - I recommend exporting the env variables you depend on from your `env.ts` file. So if you need `PORT`, do something like `export const PORT = env.PORT || '3000'`. This way the env variables your app depends on are all clearly defined in one place. - Lots of confusing/redundant naming. The `App` class has an `app` property. `CommonRouter` has a `router` property. - Why use "controller" classes? `CommonController` doesn't take any arguments or store any state, so you could just define its methods as functions and you wouldn't have to instantiate it. - In `App.routes.ts`, this line `this.router.use('/common', routers.commonRouter.router);` should be in the constructor. Otherwise multiple calls to `getAppRouter` will have unintended side effects. - Why is `AppRouter` a class? It would be simpler as a `createAppRouter` function that creates and returns the express router. - You could remove `CommonRouter` entirely and just export the express router it creates. Singleton classes don't make any sense in JS/TS because you can create top-level objects. - This one is a bit controversial. If you're not using the built-in middleware and/or template rendering features, Express doesn't offer much over [Koa](https://koajs.com/).
I had to use Edge for development too, after chrome show weird bug when I open the Devtools, most of the time I use Firefox, but its a memory killer.
Yup. Used `Proxy` myself for [a functional hooking library I created](https://github.com/snapwich/fun-hooks). Using proxies was actually more performant than function wrapping (in my testing) and being able to add/remove the trap handler was also a convenient way to enable/disable the hooks. Definitely a useful feature for the language.
feelings go here
&gt;This is preferable in many cases. Yes, but also not in others. Making the `setInterval` implementation work in the same way as looping on `setTimeout`, denies you the ability to choose which one you want/need.
I've had a great time developing on Firefox.
True. It's so weird. I like react for simpler projects, but prefer Angular for big complicated ones. I guess that's just not valid opinion around here...
I consider a proxy solution to be much hackier than just using a [babel plugin](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining).
Antd is great as long as you don't need to style your components.
How does the transpiled code look like? When proxy are fully supported, the transpiled code will most likely use Proxy instead of some kind of pseudo polyfill to Proxy
I don't know if OP is the blog author (probably not) but there's a typo in one of the examples: &amp;#x200B; `form.user = 'this contains spaces' // -&gt; Error` &amp;#x200B; `form.user` should be replaced with `form.username`.
This is best. Probably could do some polymorphism with it. Could be useful for porting C++ to JavaScript.
It works in Chrome. You can run the following code in devtool console to check: (function f (i) { i = i || 0; console.log(i); if (i &gt; 100) { return } else if (i == 100) { debugger } else { setTimeout(() =&gt; f(i + 1), 0); } })(0)
It compiles to a bunch of nested ternaries. Compiling to a proxy would make the compiled code more readable, but using ternaries makes it more portable, and I would be really surprised if V8/Spidermonkey couldn't optimize them better than proxies.
The error says what you need to do.
Friendly reminder, don't start with "this" if you are going to disagree with it.
I wrote an article not that long time ago about using Proxies to recreate python/numpy syntax in JS. Not something you would use in real life but cool to hack: https://medium.com/@kulak/python-like-list-array-operator-in-javascript-1f17aea32ed2
Beware: Proxies are [not supported until iOS 10](https://caniuse.com/#feat=proxy) and there are still many users with iOS 9 devices. Proxies cannot be transpiled or polyfilled. In our current use case (education app for schools) we have about 15% of users with iOS 9 devices. We had to downgrade to MobX 4 mid project. It wasn't too painful, but I wish we had known from the start.
I read it as agreement, because the large majority of "real projects" aren't libraries.
Here's a little data viz project on react that I did for an assignment. [https://github.com/saranshbarua/Testing-Tendulkar](https://github.com/saranshbarua/Testing-Tendulkar) I've used recharts, is there any other better alternative?
Thanks, next time i will try to be more specific. But anyways, since i had already got the answer. What i exactly ment was the function:- select() for highlighting whatever is on the text input when clicked!!!! Meaning.... &lt;input type="text" value="Enter Name" onclick="this.select()"&gt;
Okey, I got that!!!
[Immer](https://github.com/immerjs/immer) is the best use case I know for proxies.
#1 is great, but the rest of it ... I prefer when trivial code parts are 200% readable without a second thought... just to 100% concentrate on the tricky parts of the application ... long term maintainability is the key of success.
&gt; I am trying to announce, rather than promote Those mean basically the same thing here, though I guess you could say you're "promoting" it if you announce it more than once, which is not allowed _unless_ there's been substantial updates. Regardless, it sounds like you're fine to post here. To be sure, please read the "Posting: Showing off a Project" section of [our guidelines](https://www.reddit.com/r/javascript/wiki/index#wiki_posting.3A_showing_off_a_project).
Hi /u/100PercentFull, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RedlightsOfCA, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
this changes everything
Hello. Thank you and sorry, I didn't know about that. Will comply :)
Nobody is suggesting to replace the one in core, the post is making an observation
I'd like to help you creating versatile layouts by delegating spacial distribution into a separate layer. How? With CSS Grid, of course! Watch me speaking about the problem of tight component-spacing coupling, and how it suffocates your layouts at React Finland 2019: [https://www.youtube.com/watch?v=\_HrXUB97xQs](https://www.youtube.com/watch?v=_HrXUB97xQs) To help you learn CSS Grid and also get benefits from CSS-in-JS, I've built a project that changes the way you think about layouts called **Atomic layout.** It encourages thinking in composition, and provides semantic components to weild that composition (you guessed it, there is a "Composition" component). It's not about UI elements, but how you *declare spacing (and relation)* between your elements. It also comes with great practices, such as response design, built-in. Please let me know what you think on the topic. Thank you!
...Maybe :|
Same here, had to downgrade MobX due to a significant amount of users on older browsers
I love Nested Ternaries. If your variables are named well, they are the simplest thing to read.
MobX v5.0 is rewritten completely using proxies. Perfect since it eliminates the mapStateToProps patter since MobX can automatically detect which part of the global state you use in each component and only rerender when needed
Woah. Well Ghostery just joined the boycott list too very unsettling.
Thats a pity, but the future is bright :)
Realizzata a scopo didattico
I feel like the most important information I got from this article is that you can put emojis in comments.
Remember when Facebook changed the license on React, and everyone panicked, and a bunch of people switched to Preact, then Facebook was like, "Oh, wait, never mind". That was funny.
Do we need pro to inject js
Hey this is just me , I haven’t built anything nearly as Impressive. But what I do know is sales / strategy. You found a great niche with your app , albeit probably not the widest niche , but honestly the one thing your browser/app does that would draw in potential users , is stuck behind a paywall with know way to demo it. I didn’t want to be rude and suggest that this app be free you certainly deserve to be paid for your work, nor did I want to leave this as feedback on your app page , as I could forget to change my rating and I’d hate to tarnish something you’ve obviously worked very hard on. My recommendation to you would be to implement a trial of some sort , that is what puts money in your pocket , let people try out the dev console features , and if it’s something people think they will use or enjoy , people will pay for it. But I can’t see myself paying for something like this without even trying it to see if it works on my device and is even usable. This is just my two cents as a professional salesman of six years , buying is not a logical function it is an emotional attachment. Get some to love you and what your selling you will never need to find another career. But you gotta give people that first taste.
That's a horrible, and unfortunately very common, take. Once you're famiar with promises, you should just stick to the functional/declarative path and generally forget that async/await exists.
Thank for your suggestion. However, in current all subscriptions plan are included 1 week at least or 1 month free trial, that's may enough for try before real pay for it. And I'm sure it that it will be having more professional features for the further development. Of course, if you don't need those pro feature, it's still a free web browser good enough for common usage including a lot of experience increasing feature that other didn't has.
Okay I will, and don’t call me Jet.
Yes, but you can try it as free. If you really want it, I can sent you free promo code. Just for redditer :)
Pm’d
I see , it wasn’t made readily apparent that you would get one. Mine like most user attention span is short. I clicked the feature I wanted to try and was prompted to upgrade to pro and immediately lost interest and left you feedback. However after reading your comment I do see under settings it says you get a free week trial or month free trail , but I would maybe include that on the “pro” pop up Maybe something like “ Would you like to try these features for a week ? They are really neat and we had a lot of fun building them for you TRY NOW “ I would make it more obvious you can try them ! I will be trying it out and I’ll leave you so more feedback
You don't use partial application or currying?
But seriously other than that my hat is off to you !! Great job ! Is it v8 based ?
Well, great idea. I was thinking how to design the upgrade page to be more clearly and with more attraction. I will try more different layout for it. Thanks.
Proxies are great, I used them in one of my libraries, but when an end user uses raw proxies you introduce a layer of indescribably painful debugging when something goes wrong, depending on how the proxies are implemented.
In fact, on iOS system, all those render engine are WKWebView or WebView based. There is no other choice. But we can execute our own JavaScript/CSS and Swift code for adding more exclusive and custom feature, or modify some content as we needed.
That’s usually when I submit a defect to QA. Something along the lines of, “IE browser is breaking our codebase. Recommend lobotomizing customer or customer training.”
Also on iPhone X your search engine selector does not work
For sure , Also in marketing there is the concept of “help” Where something like 30% more people will do something for you if you phrase like asking for help. “Hi! Thank you so much for trying gear! I’d love for you to try everything I worked so hard to make , here is a free one week trial. If you enjoy and use the features help me continue upgrading and developing these apps” “Free trial” “buy me pizza”
I find nested ternaries easier to read formatted more like this: const result = !conditionA ? "Not A" : conditionB ? "A &amp; B" : "A"; But generally yeah I'd avoid if possible.
Is there any language that calls it bifurcation? Haskell, Erlang, and Lisp all call it partition
Because on App Store, there are some design IAP guideline you should follow, otherwise your app will not be approved. Some of design change should be careful. https://developer.apple.com/app-store/subscriptions/ Honestly, I just got reject several times for the first release because of the IAP design.
You for sure ! Just a suggestion you are doing way more and way better than me haha !
Partial application and currying are top uses for closure. Let's say you're doing a fetch on an API to get users, you can configure the fetch call, get back a function preloaded with that configuration (with authentication or whatever you need to access the API), and then use that function when you want a user. const factoryUserData = (baseUrl) =&gt; (config) =&gt; (username) =&gt; fetch(`${baseUrl}/${username}`, config) const getUserData = factoryUserData('https://sweetap.io')({ /* configuration object */}) getUserData('ratchetboi420').then(funcToRunOnUserData) getUserData('bigdaddy69').then(...) Obviously, in a real application, you might put the arguments in a different order, and you might inject fetch as well, for testing and whatnot. But some form of this pattern is really useful.
What's the response? Didn't load the page or being blank?
Chill bruh, no need to raise the blood pressure here
I feel exactly the opposite. In a purely functional codebase, you're almost definitely going to be using curried functions and partial application, which only exist in Javascript because of closure.
I don't mean I won't use them at all. I just avoid using them directly (as in you won't find `new Proxy` in most of my projects). I've had good experiences building apps with MobX though.
The pen factory got used to create a pencil by leveraging closure?
Have you read about currying? Get that down and you'll pretty quickly find tons of uses for closure.
Well you can partially emulate some of it so you might get away with it (that's afaik what Vue 3.0 is doing). But yeah, I generally avoid them for the IE reason. They can sometimes be useful for debugging.
× **[LIVE EXAMPLE](https://codesandbox.io/s/zoomlevel-live-example-841ns)** × This plugin allows you to detect browser's and separate element's zoom level. It is [lightweight](https://bundlephobia.com/result?p=zoom-level) and has **no dependencies**!
MobX is better/more powerful use case.
[https://github.com/xobotyi/zoom-level](https://github.com/xobotyi/zoom-level) &amp;#x200B; × [**LIVE EXAMPLE**](https://codesandbox.io/s/zoomlevel-live-example-841ns) × This plugin allows you to detect browser's and separate element's zoom level. It is [lightweight](https://bundlephobia.com/result?p=zoom-level) and has **no dependencies**!
It does not click whatsoever I can see all of the icons and the page loads fine but clicking on any of them does nothing
Kiwi Browser + Tampermonkey extension. A free alternative.
I was looking app like this for a few months!!!! Thank you!! 🥳
Are you seeing them on setting-&gt;search engine or enter keyword on search bar and them click the search engine icon? From the setting page, it is does nothing indeed from now.
&gt;shaving off a millisecond here and there is what gives you leeway to add more features Reducing development and debugging time is what gives you leeway to add features. You're not going to be able to fit in an extra feature because your average function runs 10x faster. If you're working against time or budget constraints, premature optimization can cost you time/money that could have otherwise been spent on new features. Personally, I'd probably use the second style (`map`/`reduce`), but I'd hide it behind an `average` function, so if performance ever became an issue I could just refactor it imperatively. ``` function average(array) { return array.reduce((a, b) =&gt; a + b, 0) / array.length; } ```
In order to make the intent more clear I'd structure it like this: if (conditionA &amp;&amp; conditionB) { // A &amp; B } else if (conditionA) { // A } else { // not A } This way every "if" clearly states the conditions required for it to be executed. You no longer need to jump around the code to get the full picture. I find that this slightly more verbose way really helps to reduce the time it takes to understand the purpose of the code.
Is t supposed to be a single deck of cards? Because my first 2 cards were both the 3 of Clubs.
No way wtf? 😄🤦‍♂️
I've been using the Node [REPL](https://nodejs.org/api/repl.html) in my backend watch scripts. So in the terminal my server is running in I can run arbitrary code against my backend (run functions, query database models, etc). It's super handy.
Sorry. It's a cool idea though.
So is this an iOS Safari with built-in debugger to work through its issues or just a decent browser with mobile dev tools?
Happened again. Seems to be the 3 of clubs each time.
What are you talking about, it's a simple discussion. Is that your attempt at being witty it didn't work
If that’s how you have a discussion you might be suffering from loudest-voice-in-the-room syndrome. Lots of unnecessary condescension
There are 8 3s. 2 of each suit. There are 0 Jacks. Gives you a place to look.
..as opposed to your comments?
Why though?
Except for [a very big issue](https://bugzilla.mozilla.org/show_bug.cgi?id=1545400) that was introduced in FF67, there's no big glaring problem. It's many little things that are annoying, like the console that has the input field at the bottom rather than inline like a true console.
My first comment? All I said was you should relax, didn’t mean to come off condescending. Second comment was totally sincere, many companies have issues with the loudest voice problem. I’m glad the tide is starting to change there. I actually agree with you that nested ternaries are not a good idea, I just think you’re going about it the wrong way.
No... it doesn't even support standard libs like LokiJs, instead of seeing the content pre-loaded, you see "Objects" in the nested envrionnement (in localStorage), it's really annoying.
There is no third-party extension for iOS native Safari can be developed. However, developing and independent browser can be having more dev features or owned extensions.
At the time ternaries are more portable. Proxies can be reusable, so your exported code could potentially be a lot smaller than the current solution
Just updated the shuffling logic – does it work now? I can't reproduce the issue..how did you do it? What about multiplayer, it has a bit different logic, since it's done on servers..?
same issue. load page. shuffle cards 4 times. deal all the cards and count them.
The updated version should have all cards unshuffled in the beginning, are you on that version? 🤔
yes.
That’s super weird, I can’t reproduce 🤯
Which browser/device?
Yes I agree. It was more along the lines of: oh dayum, did not know this is possible with js 😍
I tried to like React. I failed.
Macbook latest chrome. The old version doesn't have the issue. It's always 8 3s and 0 jacks.
Wow. this is amazing. goodbye checking for undefined values in hashes.
The switch alternative ist actually neat. does not replace every use case, but I like it 💪
https://imgur.com/a/65iyUjO screenshot
Unit tests don't need to catch every single edge case to be valuable. In general, I think tests are most valuable for maintenance, extensibility and refactoring. When you redesign a large portion of your application, or add a major new feature, unit and integration tests give you confidence that you didn't break large chunks of your code.
This is the duck typing on steroids. When you can redefine the most fundamental aspects of your language it starts to feel like one of those [Super Mario World glitches where they reprogram it into a game of snake](https://www.youtube.com/watch?v=OPcV9uIY5i4).
It's a trap!
We had to stick with mobx 4 since react native on Android had an antique JavaScript engine for the longest time. I'm thinking we can finally upgrade when Expo SDK 33 releases this week... I'm hyped...
If you have a Mac, you can remote debug safari with all the feature set that safari dev tools has.
If it's a CLI tool you can probably avoid most async functions and use the sync versions instead (as I see you're doing with the `fs` functions.) async is only really needed for GUIs and servers. If you do want to implement async filesystem stuff I strongly recommend the `fs-extra` package which has the same API as `fs` but has promisified versions. So can do eg: `data = await fs.readFile('file.txt', 'utf8')`. It also has some other nice features that fs lacks, like easy file copy.
But equally, there's no guarantee about what the performance of future JS engines will be. In cases like the example shown in the article, some hypothetical future runtime system might recognise the look-up table and the switch statement as doing the same thing and handle both in the same way internally. As always, you have to profile if there's a genuine concern about performance, but this seems like one of those questions where 99.9% of the time the best answer isn't going to be determined by the relative performance of the options.
If you ask a Python programmer they'll probably come up with a thousand use cases for something like this (because Python has allowed programmers to defined their own methods to override basic operations for basically anything for ages, and that is used quite a lot).
I think there's now 2 of you in total.
I’d think about AWS amplify for this, Auth, DB, etc Baked in
Thanks! I will look into that. I have found (and partly implemented) util's promisify for such tasks. But I wonder: if I want to include stuff like progress bars (currently just an idea), I would have to structure in a more asynchronous way, wouldn't I?
Possibly, maybe not. I guess it depends on your use case. Accepting user input I would say yes but a progress bar might be simple as: for (fn of filenames) { processFileSync(fn) console.out.write('*') } But the async version would be nearly the same: for (fn of filenames) { await processFileAsync(fn) console.out.write('*') } I guess it depends on whether or not you need to do things that must be async or if you ever want to run this code on a server.
That makes so much sense, thank you very much
Why would Facebook care if people aren't using React? They don't profit from it.
I had to read this description like 17 times to understand what's going on.
Passport.js for auth. You’ll prob need a relational db for data. Users have many questions, questions have many comments from other users, etc. Postgres, MySQL, SQLite are fine options. GraphQL is a good option for reducing multiple HTTP requests to a relational store. But you prob don’t need it out of the gate. Stick to a vanilla REST API and refactor down the line if you actually need it.
You can avoid this problem setting the object's prototype to null, though
Hi /u/NovaPhoenix0208, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Are there any functionality differences between browser adblock? eg element hiding
If you have adblock, does Google make any money off of your searches?
well they kind of do in the form of free labor.
some of documents are written in Chinese, but right now mostly of them are in English.
I like this but it depends on what conditionA is/does, since it would fire twice(unless it already fired above and this solely checks the result stored to a variable).
Start with PowerShell. It is close to C# so you should pick it up quickly. That will help you to learn/understand scripting vs static languages. I started with PowerShell since I was a Windows admin for 15+ years. Then switched to bash and Linux type of scripting. Now I do JavaScript &amp; Ruby scripting for automation. Never got too deep in to Java or C#, but know enough to be dangerous. PowerShell is probably your best way to get into scripting languages with the least confusion
It isnt
Not sure, but Google is planning/implementing blocking adblockers.
JavaScript is a very diverse place, so it’s a good place to start and decide your path as you grow. JavaScript itself is a web technology, so you should learn the basics of the web stack: HTML, CSS, and basic JavaScript. I would start by understanding HTML and how that syntax works. Build simple pages and style them using CSS. Once you are comfortable with that syntax, move on to basic JavaScript and manipulating the page dynamically. The easiest examples are creating simple controls - like a counter on a page that increases by clicking the button, or changing the color of the text. From there - you’ll have a good idea of where to go next in your path and what you want to focus on. Whether it’s more server side JavaScript, UI development and reactivity, or just simple JavaScript to design web pages with.
https://github.com/kamranahmedse/developer-roadmap
Come up with an idea that interests you, and build it. Break the project down into steps, and tackle them one at a time. If you don't know how to complete a step, find a project that does something similar and look at its code. Learn what you need to complete each step. Make friends with people who program, both on the Web and in real life. Read books.
Good read
Yes, I know that, but it's still not convenience.
Sorry now I don't quite follow what's wrong in the picure? Theres 6 of hearts, 6 of clubs, 8 of hearts, 8 of diamonds, 10 of hearts, 10 of diamonds, 5 of diamonds, 9 of hearts, K of clubs, 3 of diamonds, J of diamonds and 9 of diamonds. No duplicates there..?
Start with one of the interactive tutorials like code academy, then download some koans, then use typescript like a sane person.
It is
Lmfao already using typescript, was just curious about vanilla JS
Nice article, been meaning to learn these! And I dig the mobile website for your blog, very clean 👌
huh? &gt;3 of diamonds, J of diamonds There's two 3 of diamonds. I stopped there but there are two 3 of diamonds, two 3 of hearts, two 3 of clubs and two 3 of spades. There aren't any jacks. I can take a screenshot of the whole thing. I just didn't want to deal all the cards again. I thought that this screenshot would prove my issue. I made the assumption there should be 52 cards. 0 duplicates and 1 of each suit A thru K. Standard deck of cards.
When you're server-side rendering some React bullshit and you find that your server can only handle 20 tps so your AWS bill ends up in the $thousands plus and arm and a leg.
This is not that useful.. if you implemented this in an API, you'd need a different function call for each. Filter isn't that hard and dates can be compared out of the box
Holy shit man. I'm super sorry. I'm not sure if I'm blind as a bat or what but those Js looked like 3s to me. I hope I didn't send you into insanity. I totally biffed and didn't mean to. I'd kick my ass if I were you. Truly sorry. I swear I dealt like 10 hands and didn't pick up on it.
There are so many reasons to avoid async/await, and practically zero for using it. Without going into every advantage of a pure-functional approach... Think about how you'd get a promise into a function to need awaiting in the first place. I think the most common, because it's basically what async/await was designed to allow bad programmers (let's be real, Java programmers) to do is to call an asynchronous function within another function. Something like this: const fun = async () =&gt; { const input = await someAsyncFunc() /* do whatever with input to get the result */ return result } A couple of obvious reasons you don't want to do something like this: 1. It buries your dependencies, so reading the function signature doesn't tell you what is coming into the function. 2. It makes testing the function more difficult. The other reasons are more or less obvious, depending on your familiarity with pure-functional programming. By moving the input into the function parameters, you can alleviate both of these obvious problems. const fun = async (input) =&gt; { /* do whatever by "awaiting" input to get the result */ return result } fun(someAsyncFunc()) OK, but now you're passing in the promise returned from someAsyncFunc() as the input of your function. I wouldn't say you'd *never* want to pass a promise into a function, but I wouldn't argue with someone who did say that. When you take a promise as input to your function, you're requiring your function to understand and deal with the promise-wrapped value, when all you really want is the value. You're adding complexity and an implicit dependency to the function for no gain. So drop that dependency by just having your function take the input value directly. const fun = (input) =&gt; { /* do whatever with input to get the result */ return result } someAsyncFunc().then(fun) The then() method will pass the value into fun() as input and then wrap the returned result in a promise for whatever you want to chain on after it. The function doesn't have to know anything about promises.
I actually changed the font now, since it was hard to distinguish for example between 3 and J. Hope it's clearer now!
Not at all, it was a good point – I ended up changing the damn font 😎👍 Typography is very important ☝️🧐
I also need to try out less minimalistic graphics again, since every card have the same design..
(I mean, I was going t say something but didn't want to seem rude) Completely joking. I honestly feel bad. It is a lot clearer now. I'm for sure seeing all the appropriate cards. Sorry again.
I didn't realize how much you miss the tallys/faces until they're gone.
React and Firebase
Me neither! 😄
I'm always grateful for feedback, since it helps to make the product better!
You're trying to learn too much at once. Start with just getting a really solid foundation with Node / JS / Express. Then build a prototype of your application with just Node and an in-memory store.
Impressive work! As a side-note, there's a typo on your page. It says "Enjoy the experiance" instead of "experience".
Taught myself js and just finished a boot camp i spent 4 months learning before attending the camp and i have learnt more in the first 3 weeks of the camp. They give you 20 katas to complete each week which you have an hour a day to focus on and then inbetween you have mini projects that make use of the core concepts i honestly feel like this is the fastest way to learn by mixing katas projects and learning new concepts each day.
Some of their examples are not working! like face detection (camera) and others which used media stream. some files are 404 in network tab.
Who uses Bower?
Your beloved leader
Postgres becomes de facto a standard. If you are starting a new project I would recommend it instead of Mysql which have enough catches and lacks many things.
Found a way to keep it simple yet classical: https://imgur.com/a/dymcUbS Coming soon... ;)
Gottem
Thanks for the suggestion.
Thanks
For FE you can look into angular and angular material.
Sorry angular turned me off
The MERN stack is my default for web apps.
Interesting nevertheless. So you can, for example, have a full screen page that can access the camera?
The pace of development on Chrome and their dev tools is faster than FF, I believe. And it’s what the average user is going to see, hence the greatest bang for buck when developing new projects. You can always use chrome for dev and Firefox for browsing. Good web development means testing and working in multiple browsers anyway. I test on chrome, Firefox, safari, iOS safari, opera (sometimes), edge, and as many IEs as I can. Might I recommend PiHole?
They're mostly the same tbh. Chrome has had a few niche features in the dev tools which are useful for debugging in some less common cases, but most of the time there's not really much of a difference in practice.
Chrome is marginally better, especially with tools like lighthouse. Probably doesn't matter, people develop on Safari.
Not sure why one should care about disabled ad blocking when we are talking about development. You don't encounter adds in your own project. As for browsing, use Brave + DuckDuckGo.
&gt; It provides you everything you need: routing, http, forms/validation, authentication strategies (csrf, etc.), etc. When you don’t need half those things, it’s cruft. &gt; it guarantees cohesion, and won’t cause conflicts between these domain-specific tasks. I am not so certain of that. Angular might have changed since I last used it, but it used a proprietary, domain specific language in the dom templates when I was using it, which frequently caused conflicts between valid dom and their custom things. But that could have been solved by 2+. I stopped using it when it became clear they would have me do another rewrite. I had already attempted a rewrite with a minor release and was unsuccessful due to exceedingly subtle inconsistencies in how their library worked. &gt; I understand that many JS libraries aren’t compatible out of the box In what way? Unless they are modifying global, prototypes, or taking over browser functions and events, most JS libraries shouldn’t even know about each other. The good libraries do one thing well and you write minimal glue code to facilitate the needed communication between them. Built-compatibility of libraries designed for a specific framework is just the other side of the coin from incompatible with anything else. &gt; It’s also an OSS project backed by google, so there’s little chance it will stop being supported in the near future Google abandons projects all the time. Angular 1 is on long term support only. Google reader. Half a dozen web technologies that they announced as the next big thing and encouraged people to use (for example, NaCL), only to abandon entirely a few years later. &gt; Aside from the learning curve or dependency on a specific JS library that you can’t live w/o and isn’t easily compatible w/ Angular I don’t see a disadvantage. 1. Leaky abstractions. 2. Fundamentally flawed dom interactions (some component structures were impossible to construct in Angular 1, though I hear they fixed this). 3. Very bad upgrade path, and not just from 1 to 2. 4. Extremely proprietary. React code, for example, can be used with drop in replacements from various other frameworks. The edit distance of its code to other non-domain-specific-language libraries is minimal. You’re not locked in the way you are with these domain specific languages, functions, logic, and sometimes even the “templates” (jsx and similar forms) can be reused easily across many different libraries.
I like to use a browser for my personal needs and developing. During that personal needs, I want adblock to work properly
You feel they are both mostly the same? In that case I probably will just go back to FF then. Its been what I use for all my life before Chrome for a few months
True...I can use both. But I like using 1 for all my needs. Both personal use and developing :P
If there are developers using Safari then I think using FF should be just fine then lol
If you're doing it as side project and you already work daily on things like React. I would use this opportunity to expand one's competency into things. For example instead of picking React, give Svelte a spin. I would also pick Go for developing API's.
Last commit was 1 year ago.
Well for the most part you will be using browsers for developing which your user base commonly use. And that may not always be in line with what you prefer to use. But I get the want to have everything in one package. Personally I have 3 borwsers installed in my pc and another 2 on VM's. Anyway. For personal use. Brave. That's for sure, not contest. Give it a try. I feel like I'm shilling here, but I cannot recommend it enough.
I'm not proficient in react this is the project I'd use to improve
Not sure what's the point of Preact when you have things like Svelte. The fundamental problem with React is virtual DOM itself. Any any technology which tries to improve on this faulty approach is doomed to inherit those issues. Incremental improvements and workarounds brings you so far.
Just FYI, [NPM download counts include a bunch of downloads that aren't "real" people using your package](https://blog.npmjs.org/post/92574016600/numeric-precision-matters-how-npm-download-counts). Not that that means nobody's using your package, but if you're releasing new versions frequently, you might get s lot of package mirror traffic which would inflate that weekly download number.
I used to do a bunch of modern web dev stuff and used FF for development. One tool that I missed in chrome was that FF has a nice little json viewer baked into it, all our apis return json so that was something I used several times a day. I would say to use the tool you are most comfortable with. Sometimes chrome will have better tools, sometimes FF. For example last time I checked chrome was doing a much better job at testing throttling so whenever I needed to test that I just opened up chrome.
Because Facebook is not a single minded entity where developers are slaving for it. Developers have their own ideas how things should be and contribute to community as they see fit. Facebook can either try to fight it and lose it's main talents. Or embrace by cultivating environment and talents within it's interest circle.
I’ve been developing on Firefox Developer Edition and haven’t bothered with chrome. Of course I still go and test with different browsers but my developing browser to go is 🦊.
Remember what happened with FF few weeks back? Addons getting auto-disabled due to expiry of a signed certificate and all? When such a thing happens, you'll motivated to switch back to Chrome again. Besides, there is still time for manifest v3 to be implemented. When the time comes, maybe they'll renege due to public pressure? My guess is that they were simply testing the waters by this little announcement, see how many users are actually pissed off at the prospect of not being able to block ads! Logically, they shouldn't pull that decision. Because if blockers are used to such a large extent that its affecting google's profitability, that means there are more power users using their browser. But if we accept that position, the corresponding risk is that they'll switch to Firefox/Brave in no time (for a power user who can figure out how to install a working blocker addon, it isn't any more difficult to switch to a different browser).
Nope, they are not. I use FF devtools for a year already, they aren't worse then Chrome and they even have some cool stuff that Chrome doesn't.
Switched back to FF for the first time in about 7/8 years after the news. Seems good enough for me.
I think brave is a chromium based browser. Don’t you think the manifest will be implemented in chromium so all chromium based browser will be affected ?
It was a mistake, and I think they apologized for it. There is a difference between that (an accident) and Chrome. Google is specifically saying they will disable adblock except for paid users.
I use Chrome purely for development, and Firefox as my browser. I think that gives me the best of both worlds.
I thought so. I think each has their own strength. And of course, the security and privacy of FF is very appealing to me. Glad to hear you have been using FF for a year
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [Fullstack CRUD application using Fastify, React, Redux &amp; MongoDB](https://www.reddit.com/r/reactjs/comments/bvic38/fullstack_crud_application_using_fastify_react/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Chrome always seemed to be on the cutting edge for me. Most debuggers that are not from the web will still be able to connect to chrome's debugger. Also every little update of the dev tools I always see something that catches my interest "wow that's cool" I don't know...Firefox is close behind I think, I might make that switch too if the experience gets as bad as people are anticipating
AFAIK FF does not have local source watching and hot css reload. This is the one feature as a Dev keeping me on chrome.
I'm not sure you understand what you're downvoting other than knee jerk reaction for voicing issues virtual DOM has. Which renders entire dom tree and diffs the difference before committing detected changes even if a single prop changes. To put into comparison why is this an issue which cannot be easily resolved, imagine excel recomputing entire spread sheet each time a single cell changes, instead of computing only the cell and related cell which computes based on changed cell. Anyone who worked with non trivial projects already understands the pain of how annoying is to "save renders" for performance. That's all of the PureComponent and useMemo comes in. It's somewhat better than nothing, however it doesn't address the issue that for those components which need to change, entire tree is rendered regardless. That's pointless work your browser needs to do which cannot be mitigated by ever higher commitment to virtual dom technology. Obviously traversing the dom directly is even worse. But ... who ever said you have to traverse the dom, virtual or otherwise at all to render the changes which needs to be rendered? Well whatever, why I'm even trying here to spark curiosity.
They may or may not depending whether the extension handling part of chromium (manager v3) is open source or a binary blob controlled by Google, I'm not aware of that. But in any case, as I said it doesn't make any sense for Google doing this. If they are accepting that the majority of Chrome users are power users (for only they generally change defaults and install a blocker addon), then they are doomed anyway because those power users can switch to a different power effortlessly. They may as well shut down Chrome for non-enterprise users (they'll be killing it anyway if they went ahead with this) if that's their position.
I've always used FF to develop and personal browsing. I just check things in Chrome for compatibility. I had a go with Chrome when it was new but it never grew on me. FF is perfectly fine for me with it's dev tools and a few plugins. And I hate ads extensively.
&gt; When you don’t need half those things, it’s cruft. angular tree-shakes anything you don't use. But its available out of the box if you do want it. &gt; I understand that many JS libraries aren’t compatible out of the box Not true anything can be used with Angular. The only limitation being that since we utilize typings you may not have nice intellisense for that library if it doesn't have a typings file. Another issue is you should really avoid using bootstrap(this is true of any newer SPA framework) so libraries still dependent on bootstrap you would want to avoid. &gt;It’s also an OSS project backed by google, so there’s little chance it will stop being supported in the near future Its not just backed by google its also backed by Microsoft to the point they built special features into visual studio for it. I don't expect the regular google abandonment issues. &gt; leaky abstraction This is not entirely true. They do allow you to access services that might be better left private but they kind of just leave it up to you. &gt; Fundamentally flawed dom interactions like what? I've never encountered a structure I could create with angular &gt; Extremely proprietary I think you mean opinionated and yes that's definitely true there is an "Angular way". Which can be very nice for large teams. Since it has a certain way of accomplishing tasks code tends to be more consistent even with a large number of hands in the pot.
Card faces are now completely updated! 😉 https://deck.of.cards
I don't think overstuffing something with too many concerns is a good idea, and i believe Angular trying to do everything is one reason why it fell behind. It means the developers have to split their attention and worry about a thousand things, it means that ideas and tools outdate as everything around them changes (browser tech, paradigms, ideas, requirements), but the worst is that it hampers the eco system, which doesn't serve as a source for innovation as it should. A framework that doesn't dictate can constantly refresh and renew itself. The eco system can be rich and whatever it is that you need, it usually offers prevalent, established solutions. But you're never tied to any of it.
Also, FF has so much better grid and flexbox features.
Ty.Same....Chrome is incredibly popular, but FF has always been my favorite
I use FF. They have different opinions on some CSP scenarios, but FF seems to be stricter overall. I also like the built-in structured response viewer in the dev tools (mainly for JSON). Finally, it seems like Chrome will discard old response *bodies* in the network log while FF preserves them (assuming "preserve logs" is enabled in both).
&gt;angular tree-shakes anything you don't use. But its available out of the box if you do want it. There is no need for them when the browser already has that functionality. It's a completely unnecessary API.
Try ff dev edition.
I use Firefox for personal browsing. I tried to use Firefox for development but there were problems with sourcemaps (especially typescript sourcemaps). I even gave a try to nightly build (every new version of nightly build :) ), but chrome is better for me.
&gt; its available out of the box if you do want it. Which is the problem; because many of the APIs are just stuff that are already in modern JavaScript, making "the angular way" is completely unnecessary bloat. &gt; its also backed by Microsoft The fact that a developer tool creator created tooling for developers isn't surprising. Microsoft themselves, however, are [investing in react](https://developer.microsoft.com/en-us/fabric), having rebuilt all of MS Office in React, they've also dropped Angular support from their own extensibility frameworks such as SPFX. &gt; I think you mean opinionated No, it's actually just proprietary. There's an element of lock-in in the entire framework. It's not a grab-bag of tools based on web standards, it's an entirely different world of non-standard nonsense that's being dropped by the industry as rapidly as possible.
Too big to actually use in production for most things, a lot of (sometimes unintuitive) APIs that you actually have to learn to do most things, customized compiler so you'll never be able to compile from something like Kotlin, massive boilerplate. The only upside I can think of is a proper dependency injection framework which everyone else seems to be missing for no good reason.
in not a fan of Chrome. memory issues, stupid things like the API changes, hidden features... for me, it makes it an unreliable dev tool.
Fair enough
The real question is if you are developing, and worried about an adblock. When effectively it's manipulating your DOM or network delivery. Are you not waiting for failure ( probably a bit annual issue I have seen ), if it's just for personal browsing use FF if you can't be arsed with the ads. And just keep chrome for dev? Every time I have switched and tried to use FF as a dev tool I wind up returning to chrome. Adverts don't bug me and I leave it as clean as possible so I don't have any manipulation of what I am seeing.
It's not about being a die hard fans of Firefox. It's just that brave? Vivaldi? Did you really tried out these browser? No one used them. But you. And maybe 1M people at most. Plus they're on chromium, so unless you've got part in Google, keeping fair alternatives alive is important to keep things under control. I don't embrace Firefox, but because there's no other reasonable alternative it's the only real choice
thank you very much! I appreciate it :)
&gt;typo Oh, thank you very much! Yes I wrote it after I discovered them yesterday :)
is fixed 💪
😅
Yes that is a common javascript protection. Since the Javascript is minified or sometimes some query parameters is added for every request, “don’t stop here” doesn’t work. This is what I would do. - Download that javascript file to your computer and remove that debugger part. - Use any proxy software like Charles and map every request to that remote file to your local file.
&gt;clean [https://github.com/CupCakeArmy/liquet](https://github.com/CupCakeArmy/liquet) this is the theme I wrote for it
FF has the best dev tools (by a small margin), Chrome has the most extensions, and Safari is not bad either. Use whatever you want.
I switched back to Firefox maybe two months ago and use it for both browsing and development now. I even prefer the development experience due to its snappiness. Only when I have to debug traffic over WebSockets do I still fire up Chromium though. And I do think Chromium's profiler is quite good, though that's something I only rarely use.
I'll rummage the website's scripts to find out which code executes that `debugger` statement, then use a UserScript to disable it. Which website is that, anyway?
&gt; this should not be a surprise since Google is indeed an advertising company It wouldn't have been surprising eleven years ago when Google first released Chrome, and many of us were watching with interest to see whether Google released the best browser they could in spite of it being able to support ad-blocking, or whether they'd release a broken piece of crap to support their ad-serving agenda. Happily, they choose the former. *Now, eleven years later* it's perfectly reasonable for it to be an unwelcome surprise.
You can always use a browser based on Chromium, which means it will have the same dev tools, but not be plagued by Google's agenda. Try Brave or Vivaldi.
Who do you think implements adverts? Anyone working on an ad-funded project (e.g. a news site) will need to test what happens when adblockers are run.
I switched ro firefox for web dev a few month ago and im really happy with it. It took some time to get used to it because it ist just a little different, but deffinetly not worse than chrome. They both have their pros and cons. Firefox, at least in my opinion, is better for ui development. You dont just have boxes around the html elements to display margin and padding, but also lines extending their border, so you can see how elements are aligned next to each other. Chromes strong point is definetly lighthouse wich is great for discovering weak points in your apps Performance and accessibility. But on everything else i didnt really notice a difference in quality. Firefox devtools have also improved a lot recently. The stacktraces have become extremly nice and concise, even featuring library logos and collapsing library internal stack frames. I would just suggest you give it a try and not be discurraged because its a little different and it might take a little while to adjust :)
Extensions are great in Chrome, that's pretty much the only reason I'm preferring it over FF and the moment chrome disables uBlock origin indirectly, I'll switch to brave entirely which I'm already using at home anyways.
Yes this is intentional anti analysis If all you need is on the network, then you can simply use the button to disable breakpoints on the console and the execution should go on. The button is on the top right menu of the Sources tab. However, if you need a breakpoint of your own, you will need to modify the source files. There are someways to do it...you can simply download the js files and run on your own webserver.
I've been looking for a way to debug cordova apps in FF for a long time now. Anyone got any tips on how to do that? As far as I know FF does not have remote debugging the same way chrome does.
FF destroys your battery if you have a lot of tabs open.
You don't need to be a die hard fan to stop jeking off Chrome.
It's too large/heavy and feels too enterprise-ish for my taste I guess
I develop primarily on Safari. Fairly good way to know that your site supports outdated browsers! Also, it syncs with iCloud Keychain, which is indispensable.
Exactly. I don't understand what's big deal... Just have both installed, use Firefox for browsing and Chrome for debugging if they think that somehow Chrome dev tools is better (I don't).
Learn vanilla JavaScript very well and after that, learn a language that's very unlike it, preferably something more strict
&gt; as many IEs as I can As of the last 4 years, I’ve completely given up supporting IE in any of my projects.
Hi /u/idanent, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
They won't. Here's Brendan Eich (the creator of JavaScript and guy behind Brave) [talking about it on Twitter](https://twitter.com/BrendanEich/status/1133767653472923648?s=20)
The only thing I miss from Chrome is ability to fit the responsive mode to the screen.
Vdom technically beats other renderings if they were rendering everything. That would make it beat AngularJS(v1) and old versions of Ember probably But that doesn't happen nowadays. Angular uses incremenetal DOM, for example. Vietual DOM isnt a feature, it's just an approach (and I don't think it's as bad as the above poster said). Two resources for you: https://blog.nrwl.io/understanding-angular-ivy-incremental-dom-and-virtual-dom-243be844bf36 https://svelte.dev/blog/virtual-dom-is-pure-overhead
&gt;But based on the rumors that I've heard, Brave creator Brendan Ethan is of the opinion that it won't affect Brave browser (but don't quote me on that!). Brendan Eich, and [you can quote him on it](https://twitter.com/BrendanEich/status/1133767653472923648?s=20). &gt; as I said it doesn't make any sense for Google to do this. You can't be serious. Google is an adverting company that makes a browser. Have a look at [this comment from the uBlock Origin author](https://github.com/uBlockOrigin/uBlock-issues/issues/338#issuecomment-496009417). It should help you understand context of the announcement. &gt;If they are accepting that the majority of Chrome users are power users The majority of Chrome users are not power users. Chrome has the largest browser share right now. Are you suggesting the majority of folks online are power users?
I keep seeing this question. I don't get it. There are no ads in the web pages I'm developing... (During Dev, or even after but I know that's uncommon)
I am surprised noone has mentioned this: You will need both browsers anyway, for your website may look differently on either one. Just recently, I once again stumbled over utter differences in scrollbars and borders. That said, both are good but it feels like FF is always behind and is simply trying to mimic Chromium.
&gt;And it’s what the average user is going to see I think this is very important and most likely going to change too if they keep their anti-adblocking stance going. Many folks will move though I expect lots to switch to stuff like Brave or Edge, which will still be the same renderer
Mozilla has been seriously upgrading Firefox lately, development with that browser is completely doable. It has some nice features for developers same as Chrome, although my experience is that FF can be s bit buggier. That said, you will ultimately need to test your application in multiple browsers anyway. So you should have Chrome, Firefox, Edge, mobile device, (etc). Whatever your target audience will use
Most browser adblocks prevent requests to known as servers. If you check the network tab, that's why you'll see "bocked_by_client" as the error message for those types of requests. Pihole works by detecting known as server domains and responds to them by changing the IP to a local address so the response ends up being empty. The key difference to focus on from this news is the Google has no control over what pihole is doing but absolutely can control what browser extensions can do. The solutions are similar, you're just taking the work and moving it out of the browser. It also allows you to prevent ads on all devices on your home network, if you set it up properly.
Horses for courses.
Try: https://developer.mozilla.org/en-US/ https://eloquentjavascript.net/ https://www.freecodecamp.org/
They had to kill the competition first before removing these features.
FF has so much better grid and flexbox features. But generally i actually use both FF and Chrome for dev
I prefer FF. It handles large amounts of open tabs better, and its cross-domain security isn’t as strong so it’s often easier for developing on
When Facebook’s core technologies become de-facto ”standards”, it substantially reduces their development costs.
&gt;This is what I have come up with after your answer: &lt;html&gt; &lt;form&gt; &lt;input type="text" id="user-height" /&gt; &lt;button id="user-calculate"&gt;Calculate &lt;/button&gt; &lt;/form&gt; &lt;script&gt; let userHeight = document.querySelector('#user-height').value; var button = document.getElementById('user-calculate'); button.addEventListener('click', function(userHeight) { const height = userHeight; console.log(height); const storySize = 2.7; storyCount = height / storySize console.log("The height of the building is " + height + "m") console.log("The building has " + Math.trunc(storyCount) + " stories") console.log("the height of each story is " + storySize +"m") }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Best regards from a troubled soul.
Switched from Chrome to FF when I started my job last August and after a short transition period, maybe a week or two, I have been using FF exclusively for Angular development. I was already using FF as my browser, and only using Chrome for port 4200 (Angular project server port). So it wasn't like I was changing browser, only dev tools.
Everything comes at a cost and with its own advantages, from my experience of developing web apps and sites for the past two decades, Angular is great when it comes to building full fledged web apps and single page applications because as you mentioned everything is packed as on package which help you to focus on building the application instead of worrying about versioning and package compatibility. Updating an Angular app to the latest framework is a breeze compared to the rest. I have been maintaining multiple apps over 5 to 6 years with Angular without any issues and minimal issues. Angular CLI is amazing. On the other hand if you want to build small components that augments, or integrate with a CMS, Angular at this state has a disadvantage compared to React or Vuejs. For me for small components it's be Jquery, Vuejs event just JS. Angular has size overhead and it is not ready for that. The amazing part is you could use React, Vuejs, AngularJS inside of Angular app. At the end from my point of view, it's about using the right tool for the job and that includes you comfort level with the library or framework you are using.
If you require Adblock to develop then you have bigger problems than which browser to develop on, in my opinion.
That's the way.
...And you never browse the internet apart from your own sites.
&gt;Also every little update of the dev tools I always see something that catches my interest "wow that's cool" I know right? The changes tab was a brilliant idea, and they seem to come up with useful stuff every iteration.
The guy you are replying to is suggesting pihole, so he either works ffrom home or for a very small company. No way is an enterprise company or even somewhere with 300 employees like where i work going to strangle their network with RPis at entry point. Neither will IT care about the gains from ad isolation. So, he probably has to test for IE, but instead of testing for it, I just tell customers to stop using it (90% can choose what they install on their PCs).
I've been having issues with Firefox on Ubuntu, don't know why but the fonts look way different and there are occasional issues with rendering. Also, the Chrome devtools are a deal-breaker to me. I won't be switching anytime soon.
So you set up different development environments and build your project in dev based on what you're aiming to test.
You don't encounter adds in your own projects? What? &amp;#x200B; How many people work as developers in Advertising you think? Advertising is the bread of many companies, so they also have a lot of IT on it.
Lots of people I know use FF for browsing/at home and Chrome for dev. FF actually has some memory-related advantages over Chrome (specifically this is to do with tabs having their own process vs one mega-process - in short, open a billion tabs on Chrome you'll see a performance impact, whereas in FF you will not). For me though the Chrome dev tools and library of extensions are totally unparalleled and I've become almost entirely dependent on them to do my job. I mean \*probably\* i could get by with the FF ones but I'd be wishing I was back in Chrome the whole time.
After some time I finally figured it out thanks to you. I had problems with it coming up as NaN but I moved the userHeight into the function and changed it for a variable and it works! &amp;#x200B; &lt;html&gt; &lt;input type="text" id="user-height" /&gt; &lt;button id="user-calculate"&gt;Calculate &lt;/button&gt; &lt;script&gt; var button = document.getElementById('user-calculate'); button.addEventListener('click', function(userHeight) { var userHeight = document.querySelector('#user-height').value; var height = userHeight console.log(height); const storySize = 2.7; storyCount = height / storySize console.log("The height of the building is " + height + "m") console.log("The building has " + Math.trunc(storyCount) + " stories") console.log("the height of each story is " + storySize +"m") }); &lt;/script&gt; &lt;/html&gt; &amp;#x200B; Again, thank you. I have been trying to solve this issue for the last 5 days on and off. &amp;#x200B; Truly best regards,
I've never found a single reason to use Chrome. When ff shit the bed back in ff4 I switched to Opera. I do most of my dev in IE/Edge because if it works there, it works anywhere. But as a more than 10 year web dev (back to firebug and ie6 fun), I've never found Chrome dev tools to have anything needed/better than the others.
Chrome has hot reloading for CSS. I've never found this feature.
Yeah the final IE is what, 6 years old now. I don't begin to think about IE anymore.
Why not just do dev stuff on chrome? You won't have any differences concerning unwanted ads
you had me agreeing with you until the IE part. I work at Microsoft and even here nobody uses IE and it's discouraged to use it.
Can you elaborate on that?