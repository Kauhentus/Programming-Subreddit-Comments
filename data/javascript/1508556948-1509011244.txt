You make a reasonable point. Beginners should, of course, learn how to do things the "vanilla" way. I would say it's debatable whether you have to learn things the "vanilla way" first or via a framework (I'm sure many "Ruby Devs" first learned the language while learning to be "RoR Devs"). But I don't disagree that people need to learn the raw basics of a language eventually. And that students especially should try to build things on their own before reaching out to libraries.
&gt; Lol. You are exactly the kind of person who winds up creating code bases that are a pain in the ass to maintain. I have an NPM package that has been downloaded 4.5 million times even though I stopped publishing to NPM a year and a half ago. I beat out every applicant in a recent hiring round at a fortune 25 company. I have been doing this work for 20 years. I have a very solid idea of what maintainable software is. I stopped reading your comment after the first line.
I guess I don't understand the aversion. This likes near identical to Ramda or Lodash/fp. A heavy focus on curried/point free functions orchestrated via a vanilla compose function.
If download count and age was proof of quality and maintainability, there wouldn't even be an argument over jQuery, which is used by 70% of websites in the world (https://w3techs.com/technologies/details/js-jquery/all/all). But sure. 
You can do it! üëç
i = i + 1
I think this was an interesting exercise, but there's a couple reasons why I don't like this implementation. 1) Poor type safety. `value` is obviously intended to be a number since you do arithmetic on it, but you pass in strings such as "CracklePop", so you end up computing `"CracklePop" % divider`. If you run this through a type checker such as Flow, you'll get an error. 2) It holds the whole thing in memory before spitting out a result. You have no control over buffering or spitting out incremental results.
i++ is a shorthand way of writing i=i+1
Assuming you have a variable named i, it increments that variable by 1 during the evaluation. If you're using it in a logical statement, it is incremented after the the logic statement. var i = 0; console.log(i++ &gt; 0); // false console.log(i &gt; 0) // true If you do ++i, it would increment before it is evaluated var i = 0; console.log(++i &gt; 0); // true console.log(i); // true You can also do i += 2, and it would increment by whatever number you'd like to add. It also works with -- and -=.
Never in a million years.
I heard that Microsoft was coming up with their own variation called ToughJit.
And Apple is said to be releasing one called SuckJit.
the competition about the productivity is not with VS who's ridiculous, Emacs is more serious candidate. i still coding 2 times faster than VS. As a vim user and web developer i not going to leave this grouP, thanks anyway.
Used by a lot of people who need somebody else to maintain their software for them. Good for jQuery. How come **your** software isn't used in 70% of the websites in the world?
I'm kinda trying to avoid going down that road for now, since it'd me more of a rewrite. Might end up being the best solution though. Are there any libraries out there that already wrap this as a communication system?
Yeah, but there's still the whole window management thing so I'd like to see if we can't make window.open work for us. Using localstorage or websockets we'd have to hook into the onbeforeunload event of the shared window to mark it as closed or something to ensure there's only ever one opened.
What? I never claimed that anything I wrote even comes close to the stability, popularity or indeed usage of jQuery. I'm not here to have a personal measuring contest (I can assure you that I don't have "4.5 million downloads on NPM", so you win by that measure, don't worry), only to debate against all the elitism against jQuery in this thread. I'm glad we could come to a common ground that jQuery has its uses, though ;)
That's the internal code name. The actual name will be BullJit
Depends on who else you look at. I've interviewed more than a few people who had 10+ years of professional experience on their resume and couldn't explain how fizzbuzz works. Not in the, they can't write code that compiles in a stressful iterview setting type. But in a they couldn't explain what process you'd need to take to discover the answer type of way. My first job in industry came because i had done self taught and eventually went to a boot camp. I was able to answer that question correctly in an interview with only a syntax error or two and knew what the buzzwords they asked about generally meant and where to loom for clarification. For them it was done hire the incompetant expensive person or the incompetant bootcamper who can solve fiz buzz. For bootcamper's the expectation shouldn't be that they know what they're doing. It's that they know enough to do menial tasks and learn. If they're decent they'll fill in the gaps later. If they don't after an attempt at training, fire them. You hired them because they were a cheap calculated risk.
You talk like you‚Äôre The Godfather! Turns out it‚Äôs AppleScript I need so shut your mouth you nerd 
I know it‚Äôs not free. I was trying to make contact with someone who I can pay. 
These are known as "preincrement" and "postincrement" operations. You can also do the same to decrement e.g. --i or i--.
This is really cool!
Learning with Vanilla JS will be much more helpful for the dev's understanding and his future as a developer, in my opinion.
Well explained, sir!
Nothing like that. As in, having one global scope as opposed to multiple block scopes is not necessarily a better solution. Conversely, there is nothing wrong with the ‚Äòlet‚Äô approach. Once the function is done executing or has returned, it will all be garbage collected anyways. 
If you want to make this distributed. Where each running node instance gets update. Try https://www.npmjs.com/package/mongoose-model-stream
Are they working with Terry A Davis?
You're this thread's hero, thank you.
If you want to test out a few things, can recommend Koa.js which is similar to Express but is leaner and faster. Adding koa-joi-router gives you similar routing to Hapi.js with a lot more speed and flexibility. Hapi itself could be interesting as well though. Socket.io is definitely a good choice if you need websockets, but I can recommend Primus.io as an abstraction layer with a good range of features. For the frontend other will likely recommend Vue or React, but reading that you worked on corporates projects before, I think you should give Ember.js a try for your Frontend. I never learned so much about internal workings of JavaScript and the Browser before, just by learning the inner workings of that framework. In other regards: my rule of thumb for JavaScript projects is to find dependencies that don‚Äôt need that many themselves. Therefore I also recommend ‚Äúgot‚Äù for requests on the server side and quite a few other helpers of its author. I can also recommend ava.li, mocha or jest for testing your code. Supertest and nock are helpful modules to mock data for your tests with ease. I‚Äôd link all the modules mentioned but I think a quick npm search should yield appropriate results. 
While I may appreciate the intention of a _modern framework_, and, well, we are all looking to the day when the native module system is widely supported, your presentation makes it sound _specifically_ about "CLI tools". It makes me wonder if what you're proposing is then about "GUI tools" or about "no tools at all" or what. You talk about not "having to rebuild" on each change, but in the screenshot it _seems_ all the JS is packed into a `background.js`? Could you clarify a bit on this and about what you mean by avoiding _CLI tools_, please? Otherwise it's hard to answer if there is interest or not. I understand it when you say... &gt; i'm not really sure if i would waste my time making docs/examples and everything for it if nobody seems interested to use it in the first place. ...but to be able to get answers on the potential interest, I think you'll need to at least give a more clear overview of your framework. Maybe give a big picture explanation of the differences to the other frameworks you mention that didn't satisfy you, and of what you mean by not having CLI tools or a build process.
You cock
I basically grabbed a copy of xterm.js when I started my project [Extraterm](http://www.extraterm.org/) and started hacking on it. It was a quite a while ago and back then it didn't do any kind of jump scrolling etc. One of the first things I had to do was decouple the protocol processing from the on screen updates. I've done quite a bit of work on that code base in the meantime. It is now in TypeScript, had quite a few bugs fixed but the biggest changes are in the rendering. Right now I'm kind of rendering the terminal into CodeMirror(!) so that I can get selections and editing features for mostly free. Redoing the text rendering inside CodeMirror to use canvas is a possibility, but the reason I see for doing that is to decrease latency when typing, not so much to improve the speed of processing `yes` output. Having more control over how some unicode characters are shown would be a nice side effect though. 
AOL launching one called jit out of luck
Fraction who have heard of it at birth = 0%. Fraction who should have heard about it by graduation = 100%. Alan Kay was right, universities have turned into vocational schools. Scary.
Ah yes, good point, i packed everything into a background.js because since i'm developing my project and my framework at the same time, the example you saw was my project, i use webpack and babel for the dynamic import &amp; other features that aren't native right now but should come soon, at least i wish so. You totally can use my framework WITHOUT any cli tools, i developed it with the goal of not having to use cli tools after all, for example, if you would like to use it with the native browser imports, it would looks like import ozjs from './oz.js' it would also be possible to allow things like import ozjs from 'ozjs' if you are allowed to register service workers (more details [here](https://matthewphillips.info/posts/loading-app-with-script-module) )
You can't protect client side source code. It's meant to be public. Do not hard code or store any secret keys in the client side source and you're good. I don't know CouchDB, but do firebase you can control who has read/write access.
So how can I set "private variable" or "hard code" like I did with PHP? I don't like firebase it feel like you don't own your data
Yes, you did. You claimed software written with jQuery is super stable and maintainable.
Rather go with something like MongoDB then.
Well you should not have been hard coding them to begin with. They should have been injectee via environment variables. Well you don't since its own their servers. Host your own NoSQL database like MongoDB.
One of the main difference between my framework and the other frameworks is that my reactive system doesn't impose any "way" of changing the application state, you're not forced to do immutable(react), you're not forced to calls getter/commit/actions(vue), it's your choice to choose to make and use those systems or not, you could make your system immutable but it would be your choice and not imposed on to you. Proxies allowed me to make everything looks like if you were using vanilla objects but with a reactive layer that allow you to make complex things easy. Like i said i come from vuejs, and one of the things that made me choose to make my own framework was how vuejs is trying to be "easy to use", and in my case was limiting me, i couldn't use one reactive system between different windows (web-extension) without having to make a ugly ass system as a workaround. Another thing that bothered me is that using vuejs without the build magic makes vuejs a non usable framework in non eval environments (such as web-extensions). To remedy this, i'm trying to find the really best ways to make templates using literals strings and their tags (such as list`` in the screenshoot)
You may want to reread my comment. Have a nice day ;)
You do it like you did in PHP, on the server side. You can't put it in the client js that runs in a web browser.
Write a node backend that handles the communication and can serve you answers via an API of sorts, like xmlhttprequest or websockets
What if I told you: npm i -g create-react-app create-react-app my-app cd my-app/ npm start
&gt; import ... from '../store/INDEX.JS' I'm not sure I'd trust you as a sane person
If you ever tried developping with the native browser import you would know that using import ... from './folder' wouldn't work
It will wreck your `I` class/constructor and turn it into `NaN`.
Got it
Destroy your entire PHP backend an start from scratch in Go or Node.js or something modern. The language wars are mostly stupid, but this is the one that really matters to me.
Yep. I am trying to trash all of my thoughts from PHP into JS, that's why I have asked here a point that is very important for me
Client side code should merely handle items sent to it from a backend of any language; for example requesting a user's posts or other data and rendering it onscreen. You might want to look up an Express tutorial (Node routing lib). Express makes everything so much easier.
I created a [Chip-8](https://en.wikipedia.org/wiki/CHIP-8) interpreter with a React front-end: http://chippie.bonza.nz It is finally to a mostly functional level. If you check it out then try stepping through the programs first to see the debugger, then maybe give tetris a go after :) Keys for tetris: [Q: spin] [W: left] [E: right] [A: down] Code here: https://github.com/jameshulse/chippie
I have mixed feelings about vue, it‚Äôs so easy to use but everyone‚Äôs using react which is incredibly hard, for me to learn. 
Fair enough. I haven't, not very much at least. Are you referring to ESM syntax that has only recently been implemented in the browsers? I see you're doing `import 'ozjs'`, I thought the way ESM was implemented in browsers it only supported relative paths ('./') and URLs 'http://...'
What are you using the database for? If it's just to store user data, you could either store it in the browser, or store it in a database that only you back end connects to. If it's static data, you could have it in a database that has a read only access, but that might bring some added risks.
This is awesome and all. But do we really want to limit advancement of an engine by creating a fake linchpin with Node? I mean it would be nice if they were synonymous in some fashion but what if a feature is proposed in V8 that Node simply can‚Äôt support? What will happen then?
CodeMirror! Sounds cool. I have never thought of it when talking about building terminal emulators. Maybe I should dig into your Extraterm someday. Maybe `yes` command is not a good example. I tested each terminal emulator by typing `ls -lR` in a large Node.js project. Some of them without GPU-acceleration became laggy. In contrast, hardware-accelerated terminal such as [Kitty](https://github.com/kovidgoyal/kitty), [Alacritty](https://github.com/jwilm/alacritty) and macOS builtin Terminal.app (it sould be!) can display large text streaming smoothly at 60 FPS. There is still a gap between modern browser tech and GPU rendering these days. But who cares the speed of `ls -lR`. We need functional and convenient tools!
It would be great if you could leverage http2 to deal with network costs of deep imports. I was giving this strategy some thought a few weeks ago, but I couldn't come up with an idea that didn't involve parsing js in some way.
Finished the concept for my flat file cms built on Next.js Check it out on GitHub. It‚Äôs called [Amulet](https://github.com/CREATORSNEVERDIE/amulet) I plan on pushing consistent updates. You can see the upcoming features in the repo
Yes, ugwe43to874nf4 asked about that too As i said in ugwe43to874nf4 response, the screenshoot i showed was my project that was using webpack and babel (for the dynamic import feature), so i imported directly via the webpack syntax. But you are right, ESM only allow you to import your scripts with relatives paths and urls &gt; This restriction is in place so that in the future we can allow custom module loaders to give special meaning to "bare" import specifiers, like import "jquery" or import "web/crypto". For now any such imports will fail, instead of being treated as relative URLs. [from this article](https://matthewphillips.info/posts/loading-app-with-script-module) But as i said in ugwe43to874nf4 response, it is possible to import modules via their bare names and so be able to import my module via import 'ozjs' if you are allowed to register service workers [more details about that here](https://matthewphillips.info/posts/loading-app-with-script-module)
Yes, you always need to code defensively with the assumption that your frontend users will try to exploit any vulnerabilities you leave in your app. You need to make it so that users only have access to their own data and can‚Äôt change anything they aren‚Äôt supposed to change. Firebase has a built-in access control system for accomplishing this. With RethinkDB, you build whatever authentication and access control you want into your Node backend, typically with something like Passport and JWT. Either way, you never want to let the frontend have direct, unfettered access to the database. 
Yes, the only way to reduce the latency of deep imports would be to parse js from the serverside. From a serverside perspective, caching the imports of each files would be great, if your files doesn't change that much it shouldn't be a problem. About that CORS rules for ESM, it's actually not an expected behavior, i reported this bug a month or so ago and now we can only wait until the chromium team fix it
&gt; This is awesome and all. But do we really want to limit advancement of an engine by creating a fake linchpin with Chrome? I mean it would be nice if they were synonymous in some fashion but what if a feature is proposed in V8 that Chrome simply can‚Äôt support? What will happen then? Nice is a first class client of v8 just like Chrome is. You can be sure that they won't break Chrome by introducing something in v8. Nose is the same now. If they want to introduce something in v8 that could break node, they will work with the Node folks first to create a strategy for including it in Node.
Re: deep imports, I think it might matter depending on your stance on npm. One stance is that CLI-less means, no NPM ever is permitted, which I'd argue is not that pragmatic. The other stance is that CLI-less means that npm is not *required* but that I can still consume ramda or lodash or whatever through npm if I wanted to, and who knows how deep a dependency chain might go for any given npm module. Re: CORS, I think Chrome is the one doing it right, at least according to [this](https://jakearchibald.com/2017/es-modules-in-browsers/#always-cors)
Re: CORS, the behavior that i talked about was about not being able to load scripts without server (via file://), but yeah if you're talking about CORS headers then it's all good in chrome. RE: deep imports, actually i would love to be able to use npm modules in browser, but the actual ecosystem of modules in npm are done in ways that aren't ESM compatible, plus only a tiny amount of packages are ESM compatible. So a complete CLI-less wouldn't be possible if you wanna use npm modules (which will be most of the cases) as downloading a npm module require the CLI. After this point of downloading the modules, it can become CLI-less if the modules are ESM compatibles.
Nice nose
Trends, my friend. Also, while everyone learns React online, surprisingly my job market in my area is mostly Angular with almost nobody at all touching React. I see more for Vue than I do React.
Have you looked into using [custom events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events)? I implemented something similar a few months the back for communicating between a pop up and the parent window and it worked pretty well as long as you support IE9 or later.
&gt; every single V8 commit (we change node first if we make breaking changes) 
Maybe I'm being naive but the V8 folks still have all the power here. If technical leadership at Google was willing to fork WebCore to keep the pace they wanted for Chrome, I really doubt Google would be bashful about reneging on this policy way before it hurts V8. Especially given [this tweet,](https://mobile.twitter.com/fhinkel/status/915933647798075392) if the V8 team is the one provided fixes to Node, it's really all on Node's leadership to keep this policy alive.
It's rapidly going to become intractable to try to represent the entire UX in a single state graph. The idea is to break it up into parts and compose them, which he started to talk about at the end, but I agree this talk was very preliminary in the sense that real world application was basically untouched. Imagine a signup form with username, email, password, and confirm password inputs. Even the actual input values aside, representing this with a state graph is already intractable due to combinatorial explosion of different validation states. The email could be different varieties of invalid (blank, invalid, etc), the password could be different varieties of invalid, and so on. But if you build each form input as it's own FSA, then combine them all into a form that has it's own encapsulating FSA, it becomes doable. As for the actual text input values, I don't imagine anyone actually including those, character by character, in the state list. What you'd do is keep and manage those outside the state graph and instead only deal with summary juidgements on the value in the state, such as "empty", "valid", etc.
Yeah that makes sense. I was told that if I went with react ill get better at javascript (intermediate right now) but react hasn‚Äôt clicked for me yet. I‚Äôll stick with react for the next couple of weeks and drop it for vue if I don‚Äôt progress. Vue comes natural to me. 
We're an internal only product, so we've standardized with Chrome. The issue is less about communication and more about managing that single window. Using window.open uses the browser's internal knowledge of the status of that window, and I'm hoping to find a way to use that. Each sub page should only open that new window if it doesn't exist so there's only ever one instance of the window. Would this let us add a custom event around that? I know there's already onbeforeunload, but I'm not sure of the reliability.
That sounds like a long process to get things done. Always having to consult another group of people.
That‚Äôs comforting. Thanks for the reply. :)
This is an informative answer. Thank you!
Zz
That‚Äôs the open source process. The advantage is you have more people using the project and contributing back, but it means you also have to make sure you won‚Äôt screw them over.
No I mean having to two companies having to consult one another. For example we have dev teams in Georgia, Texas, and Utah. It‚Äôs a pain getting things done. Email threads with hours or days in between replies, scheduling conference calls with everyone. Three time zones means that the hours of 10:00 to 3:00 are out of the question because people are at lunch. It‚Äôs just hard. 
I've been doing quite a bit with work in Chart.js the past couple weeks, and have to agree with the documentation. I found myself greping the code and doing A LOT of trial and error to get it to do what I want. Also I had to write a plugin to handle mouse events where in other libraries like flot they are part of the core API. The plugin API feels pretty low level
Google is an international organization with engineers in (probably) every time zone. As an organization, it's a preview they've decently solved.
Out of interest, what doesn't exactly "click" with react? For me at least, vue and react are not that much different and use similar concepts
IOW they'll be the ones pushing Node to be in sync with V8 if the Node community itself cannot keep the pace. How it is that Node became so important to Google? They didn't really stand big behind it in terms of dogfooding i.e. using it in their own services. Perhaps it's got more to do with it's importance in the webdev frontend scene and Google bet (a big part of) the farm on web and webapps.
&gt; You don‚Äôt have a real calendar, but it‚Äôs a good(?) start. lolwat?
Because V8 is important to node. I'm sure Microsoft would like to take the place of V8
How is this enforced?
I'm not sure what sort of feature you're envisioning whose mere existence would break node without any ability to work around it in either the node or V8 codebase? Seems pretty unlikely to me. 
To be clear, the variable `I` isn't important in that statement. The `++` is the important part: it means 'increment by one'. Whatever you assign `I` to, as long as its a number, will be that number plus 1. You usually make variables camel case (`camelCase`), so you're more likely to see `i` by itself as a lower case variable name, not `I` (which looks like a class, since those are usually capitalized). That's a convention you'll see. Anyway, you usually use that syntax in loops, like for (var i = 0; i &lt; 10; i++) { // do something } Which means "While the variable `i` is between 0 and 10, `do something` to it, then increment the value of `i`. So, `i++` is like a guy standing next to a line of people saying "next... next... next... okay, that's it" while he lets a certain number of them into the building.
If you like functional programming, you might love Elm. If you don't like functional programming, you'll hate Elm. If you want types, you can get 'em other ways.
I‚Äôd say it‚Äôs more that larger organizations don‚Äôt want to cater to every whim or fad of the greater development community. They like to take a slower, more calculated approach. That being said, my current company had the same lukewarm reception to Node.js, but it ended up creeping into all kinds of internal tooling anyway because of how damned useful and lightweight Node.js is. It has become a viable alternative to Perl in that respect. If you‚Äôre looking for a cynical answer, though, I guess you could argue that Google joined the Node.js Foundation party late in the game and would love to find ways to gain more clout within that organization. 
By the node police.
It was said in terms of CI and automated testing. 
Continuous integration probably. I.e every time a commit to V8 lands, the node tests run.
Thanks for the explanation. One doubt remains, though. You specifically talk about **CLI** tools and a _**CLI**-less experience_. But is there anything _specific_ about "command line tools" that you propose to avoid or do you more generally mean _build tools_? I know maybe the question sounds silly, being that right now most build tools are _CLI_. But I wonder because it isn't necessarily so and your pointing out specifically CLI tools sounds to an extent as if you where referring to CLI tools vs GUI tools.
You might try either r/learnjavascript or r/learnprogramming for this type of question.
I use rethinkdb and keep sensitive data inside with some modifications
It‚Äôs a cool project but hell using Shopify would be 100 times easier and comes with a built in CMS for clients. Great project to learn a lot of different tools though. 
That's why it's pretty hard for me to let PHP and get JS/Node
I will try to use Express with Vue, thanks!
That's awesome and shitty at the same time.
Congratulations, you're one of today's lucky 10,000 people who get to learn that * far from every software developer has a CS background * even with a CS background, no one remembers everything from school/academia * even if you do remember the basic theory of finite state machines from school/academia, it can be helpful to get a refresher of how to implement it and how it applies to a (React frontend development) context where it, currently, is not widely used. 
C'mon, this shit is basic. It's like an EE not knowing Ohms law.
if you're using jquery this might help $(".tic").click(function() { var slot = $(this).attr('id'); playerTurn(turn, slot); });
Well, i was talking about a CLI-less experience because my framework would allow you to make an app that doesn't need a CLI tool to work without any constraints on modern browsers ( e.g. on no-evals environments ), and i find this idea really neat, to be able to edit some code and being able to get the result without having to build/compile the code, that's why i liked js in the first place. So i'm not proposing to avoid CLI tools or build tools, each of them are great, being able to get things done via a command line is neat, and being able to minimize/compile your whole app in one file is so nice for production. I just wanted to know if you guys would be interested in a framework that would allow you to get back the **script** part of javascript where you can edit the code and get the result without anything between them while trying to get a good syntax as a framework. Coming from vuejs, the .vue file was just awesome, and i'm trying to stay as much as possible in that easy and kind of "beautiful" syntax to dev on a framework while staying in the javascript spirit I would still recommand to use build tools for my framework in order to optimise the production side, and use as much of CLI tools that you like to improve your code. So yeah, about your CLI tools vs GUI tools, i wasn't really trying to get you to stop using them, i just wanted to get that script feel back and wanted to share it if there was people interested in it
Let's say you're right. Everyone who finds this video useful is an idiot or somehow not a "real" software developer, even though they're probably hired as one, and goes to software developer conferences like ReactRally. Wouldn't it still be a good thing that us dummies are at least learning the basics *now*? Your attitude, the way you've expressed it, just seems very unsympathetic. To me, it comes off as you desperately trying to show that you're one of the smart ones, by showing that you are the kind of person who thinks all this is trivial. If my impression of you is anything to go by (maybe it's not, it does come from an idiot that didn't know about finite state machines), this approach is not helping you (or your image). And it's definitely not helping the people who's trying to learn about this stuff (how ever basic it is).
That's what I was looking for! Thank you!!
/r/muderedbyautocorrect
Flags, I imagine. v8 already has a bunch of features Node doesn't support and disables with flags.
You keep using words like "dummy" and "idiot", words that I would never use. I simply expressed shock that a *developer conference* would have a guy (Microsoft?) lecturing about something so basic. I have no idea how many attendees have degrees in CS, or any formal training for that matter, but I assume the majority of the audience is professional programmers rather than some kind of hackathon/boot camp wannabes. I give 0 fucks about my image, lol. This isn't about being smart or not, it's more about the current state of development. Ignorance isn't stupidity. And yeah, I am suggesting, that at least this audience, is ignorant in areas they really shouldn't be.
Actually it will loop when i is between 0 and 9 not 10
What data type is the checkBox parameter of the EnableSig function? Can you give a sample via console.log(checkBox) I'm not quite sure if I understand the situation, but you probably have no need to create a loop if you can just get the name/id of the checkbox via that parameter. 
Don't forget the new Firefox engine, V8 actually has some decent competition now.
A cached deep learning neural network that picks stocks (likely at random) and uses your bitcoin wallet to invest in said stocks. The potential profit is, how American's say, "Yuge".
Get a good phone app framework to host your js apps that is generic enough to contain just about any app with integrated ad serving. Start creating multiple simple phone apps with it. It's a flooded market, so more apps faster versus long term quality is the only way to fulfill your short term requirements. Games require too much infrastructure, 3 months isn't enough time. Paid webapps aren't as prevalent, but paid plugins for the free ones are. Even something like a paid Ms office is add-on would work well.
As a web developer even using just vanilla js, a lot of problems have been waved away for you already imo
Destructuring version? `const [largest, secondLargest] = input.sort((a, b) =&gt; b - a);`
That's a really ineffective way to toss money in the can and light it.
You can try to make a useful Chrome extension with pure JS it might be different experience for you. [I am not sure about profit]
I would use 9 `&lt;button&gt;`s elements with an id naming convention styled with CSS... like, ``` &lt;div class="row"&gt; &lt;button id="a1"&gt; &lt;/button&gt; &lt;button id="a2"&gt; &lt;/button&gt; &lt;button id="a3"&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;button id="b1"&gt; &lt;/button&gt; &lt;button id="b2"&gt; &lt;/button&gt; &lt;button id="b3"&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;button id="c1"&gt; &lt;/button&gt; &lt;button id="c2"&gt; &lt;/button&gt; &lt;button id="c3"&gt; &lt;/button&gt; &lt;/div&gt; ``` then in JS, ``` var buttons = document.querySelector('button'); buttons.forEach(function(button){ button.addEventListener('click', buttonClick); }); function buttonClick(e){ var button = e.target; // now use button.id button.textContent = "X"; // etc... } ```
In your array of quotes you use "name", but you are referencing "author". Also don't use ""'s when declaring members of object literals. 
Thanks! I just saw I had author/name mixed up and corrected that. Now it's only displaying the author of the quote though. I'll correct my ""s in my object literals and see if that solves the problem.
SAME it's also way easier to learn the framework after and a lot of times I've seen people are just memorizing the framework instead of actually learning how things work.
Honestly, it really boils down to finding a niche and seeing what people would benefit from. A lot of social media marketers would benefit from being able to automate tasks. A lot of online communities would pay for a solution to an everyday problem, like an app that lets people use Discord and Skype in the same window and has no minimal screen size, kind of like Trillian used to do for YIM, AIM, and MSN. 
I'm curious how this will work with modules, since Node doesn't have true ES6 modules, and never will.
Replying to myself, nothing that /u/holloway advised in any way conflicts with my raging clues . 
Upvoted for title! Happy Diwali ¬Ø\\\_(„ÉÑ)\_/¬Ø
&gt;Node doesn't have true ES6 modules, and never will. Why are you so certain that this will never happen? Also, just because V8 has some features, doesn't mean Node.js has to use them. 
Thought I was in /r/climbing for a second with the title 
Yeah, vs code is sweet. Tried it once and was so impressed, it's now my primary web development editor. So fast!!! 
Sample code?
OK, seems I have found a solution: [Loading a Modern Application with &lt;script type=module&gt;](https://matthewphillips.info/posts/loading-app-with-script-module). With StealJS it kinda "works", i.e. it can load at least some modules from my `node_modules` folder... https://stealjs.com/docs/StealJS.quick-start.html
In the empty folder, run `npm init`, then `npm install react react-dom`. Create `index.html` with contents like this: &lt;html&gt; &lt;head&gt;&lt;script type="module" src="./index.js"&gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt;&lt;content&gt;&lt;/content&gt;&lt;/body&gt; &lt;/html&gt; Then create `index.js` putting the following code into it: import React from 'react' import ReactDOM from 'react-dom' ReactDOM.render ( React.createElement ('div', null, 'Hello world!'), document.querySelector ('content') ) Run a webserver or simply open that `index.html` in your browser. Obviously, this won't ever work because the browser does not know how to load `react` from your `node_modules`. Even if you specify a full path to the `react` file, it won't be loaded because it is not in the proper ES module format. So I seek a tool that could load these CommonJS modules from my `node_modules` folder without the need of bringing the heavyweight tools like Webpack or Rollup. And seems that StealJS does the job: https://stealjs.com/docs/StealJS.quick-start.html
&gt; Why are you so certain that this will never happen? Because it's not. The two flavors of modules at issue (CommonJS and ES6) are incompatible with each other at such a fundamental level that there's no way to handle the discrepancy unless you require some sort of header or different file extension that tells Node which type of module it is. And this would break any module written before this new rule.
Actually, I also want to use `react-hyperscript` in my setup, as JSX features are not available if you don't use Babel. But it complains about React version (need &lt; 16.0), seems that it's incompatible with React 16?... :/
First off, are you in Canada? If not the script will do nothing at all. And even if you are, finding a user's country by IP address is not always perfect. I don't think there is a better way though. Try this code, then open the browser console before you go to the site. &lt;script&gt; jQuery.ajax( { url: '//freegeoip.net/json/', type: 'POST', dataType: 'jsonp', success: function(location) { // If the visitor is browsing from Canada. if (location.country_code === 'CA') { // Redirect him to the Canadian store. console.log('In Canada'); window.top.location.href = 'http://shop-in-canada.myshopify.com'; } else { console.log('Country Code Is', location.country_code); } }, error: function(e) { console.log('There was an error', e); } } ); &lt;/script&gt;
Bootcamp grads are usually lacking in a lot of departments. They‚Äôre drilled to present as more experienced than they are, and as you start to prod more deeply the facade falls apart. I‚Äôve hired a couple solid bootcamp candidates, but they had prior experience engineering and were extremely enthusiastic. The exception more than the norm.
UPD: seems that `react-hyperscript-helpers` loads without problem (an alternative library).
Fantastic, Thanks!
FYI I'm not having any luck using this on mobile. I can search, but can't actually view anything.
You can't assume that professional programmer has degree in CS Many programmers are self-taught (especially in JS development). They learn by everyday experience in coding, not by studying theory. The downside of such approach is that such programmer doesn't know all the basic stuff taught in CS courses. So it's good to see educators in JS community. 
Hey, sorry. I hope the author sees this thread here and fix it.
Hard fork
Works fine for me on chrome iOS. Also to OP: thanks sir! Bookmarked.
Yeah works great on Android Chrome.
Works fine on my android on chrome
By the way, you can do `'\u0061\u0308'.normalize ()` and it will collapse to `√§` which has `.length == 1`
Damn it's moving fast!
There are a bunch of mistakes in the description of your package. Try to fix those to give people more confidence in trying it. Rudux, creater, asyn. Those are the ones I scanned quickly.
Yes, but that will only work for grapheme clusters which have a legacy single code point representing them, like '√§' has. For more complex languages, this won't work. Try `"\u0BA8\u0BBF".normalize().length`. That's still a single glyph grapheme cluster, but has no legacy 1 code point representation.
Ok, fair enough. It seems I may have read too much into your comment. My bad, sorry about that! I still don't quite get why you view finite state machines as such a fundamental thing to know as a working developer, when so many people obviously have managed just fine without it. (Landing jobs, successfully delivering projects). But as long as we agree that it's a good thing that people are learning now, and that there's no shame in not having learnt it before (at least not at the individual level), then I think we're in agreement.
Holy fagiggly gland, I love this 
If you are interested, please have a try. I will try my best to respond.
Cool!, thank you
I made an async-/await-based WebSocket client. [Here's](https://jsfiddle.net/7hkk11sh/5/) a demo. It allows you to interact with WebSockets using async/await/Promises: let ws = new WebSocketClient; await ws.connect("wss://echo.websocket.org"); ws.send("Hello!"); console.log(await ws.receive()); await ws.disconnect(); https://github.com/jcao219/websocket-async http://npmjs.com/package/websocket-async
Yeah, Chart.js has deceptive docs. Trial and error is definitely something anyone new to the library will have to wrestle with.
Author here.. searching reaaally sucks (its made of duct tape and some glue). Looking to spend some time soon to put a better system in place :)
Graphql to the rescue!
Branch it and call it something else?
You may be in way over your head, technologically speaking.
You're a fucking idiot if you're talking down to me and don't know anything about git.
Theres a react demo to do exactly just this as well
I think for ftp, http, and https, we can use below regex. /(ftp|https?):\/\/[\S]+/gi As for tel, this regex: /tel:[\+\(\)\-0-9]+/gi So to combine both, it would be: /(ftp|https?):\/\/[\S]+|tel:[\+\(\)\-0-9]+/gi For ftp, http, and https however, watch out for those which are stated like below. Some text http://www.site.com/path/file?var=val#section, more text. Note that the comma character may or may not be actually part of the actual URL, so you'll have to know the context on where the URL is specified. e.g. Some text http://www.site.com/path/file?msg=This+is+a+message. More text Here, we don't really know whether the period character is actually part of the `msg` URL variable or not. Unless the text is formatted as e.g. bold text on the URL part.
Microsoft‚Äòs [Bing Map V8 Control](https://msdn.microsoft.com/en-us/library/mt712542.aspx) uses v8 as well, not their own engine. If they don‚Äôt even use it themselves, why would they want others to use it?
That means it‚Äôs moving *faster*.
It's used in Edge so I wouldn't say they aren't using it
Not actually sure where I was going wrong, but I think I was just getting erroneous autocomplete suggestions. Sorry for the false alarm.
Hello, I tried it for you function scroll() { const span = document.getElementById("searchfor"); const searches = ["Macbeth","Shakespeare","Emily Bront√´"]; let time = 0; searches.forEach(search =&gt; { for (let i = 0; i &lt; search.length; i++) { time += 200; setTimeout(() =&gt; { span.innerHTML += search[i]; }, time); } }) } document.addEventListener("DOMContentLoaded",scroll,false);
In which departments do you typically find them lacking, specifically? 
Love this. I spend a lot of time on gist and always wanted something more organised. Imagine if github could automatically do something like this by suggesting gists on repo landing pages :)
No thanks, sounds like a school assignment. Help you? Sure, but write if for you? No, no chance
Alright thanks. This is what i am able to do but it doesn't solve the full problem. Please help me if you can. thanks function removeDuplicates(str1) { var str=str1; var uniql=""; for (var x=0;x &lt; str.length;x++) { if(uniql.indexOf(str.charAt(x))==-1) { uniql += str[x]; } } return uniql; } console.log(removeDuplicates("thequickbrow#nfo%xjumpsoverthelazydog"));
Ergo, a `for loop` is a `for loop` in any language.
In the original example, why is 'e' in uniques, when it appears twice in the input string?
oh! please help me solvethis
Conceptually, you need: 1) a place to track unique, nonspecial characters (done) 2) a check for whether the next character is a duplicate (done) 3) a check for whether a character is special 4) a counter to track all the duplicates you encounter 5) a sorter to rearrange #2 into alphabetical order The returned object will contain #4 and #5.
cool! i'm having issues solving 3 and 4. can you help me please
You're not even trying to hide the fact that you're cheating. What is this? Some homework for an 11th grade coding class that you forgot was due tomorrow? 
If you can articulate these as questions and google those questions, you'll find many results (I just checked). Good luck.
Alright Thanks
I love it! One quick point in your es6 sheets there is constructor (radius) { this.radius = radius } Right below a class that extends another. Calling this Without first calling super(); causes an error! Keep up the good work and if you get started on an elixir page I'd love to help contribute 
Well I'd probably do a DB admin GUI in knex/electron/react. All the DB admins I tried look archaic and often have bugs. Being on Ubuntu my best choice currently is DBeaver. It mostly works, but for example it doesn't have such a basic feature such as sideways scrolling when I hit mi shift key and use the mouse wheel.
Excellent stuff! I've run across a few of your cheatsheets before, and I'm going to have to keep this in mind for future reference. The Bash cheatsheet in particular would have been useful for myself and a teammate last week. Thanks for making this!
The reason it isn't working: the variable "i" is declared outside of the for loop, because of variable hosting. So all setTimeout callbacks share the same "i" value. By the time they are called, the for loop has set it to "searches[key].length". To fix it, as pytoxi said, you use "let" instead of "var". Let is not hoisted outside of the for loop, so each setTimeout callback has the correct value. This is a common mistake that pretty much everyone new to JS trips on, as it isn't obvious that the "i" variable is hoisted.
if V8 had a versioned API like all serious libraries do, all this would not happen. Node would simply have to stick to V8 major version and voil√† ! But no no V8 (and nearly all google products BTW) is so much better without semantic versioning. SO MUCH !
it's not a home work. I'm just practicing.. have an interview coming up and it involves questions like this. I'm also looking for where to find questions and their solutionslike this, do you know any website please
https://devhints.io/elixir I got u fam
I'll write you an O(n) solution, with a detailed explanation line for line, for $100 usd. O(n2) no explanation for $20. PM me for paypal info.
Dude, come on. This is a very specific question that can't be found via a simple google search of the unique values. It's obvious that it came from some sort of assignment. It's bad if this is an assessment. You're cheating yourself out of actually learning how to do this. It's waaaay worse if this is a take-home coding interview. You're asking us to prove you can do a job that you obviously can't do. 
I would also love to know the answer to this, hopefully someone can provide a good answer
apples vs oranges. backbone is a very lighweight mvc framework (without a view layer), react is a view layer. We actually did use React *with* Backbone a few years ago. Back in the *dark age*, redux wasn't a thing, so the app state was stored in backbone. nowadays i'd use redux, it feels more natural. In my experience, prototyping in react is faster, and it's easier to reason about its behavior (in backbone, the view was often stale, because someone forgot to rerender the component, some components were updated, some not, etc).
Alright dear. i'ts something close to this, but not an interview. My aim is just to improve on my JavaScript abilities. Can you mentor me so i can become a good JavaScript programmer.
pass
I doubt you will, lol
Backbone (and Marionette) look like they're both still being maintained, so I don't think there's an issue there. I'm stuck in Angular land at the moment, but the last time I used React (about year ago), it was as the view layer *with* Backbone.
Backbone was really just a first very crude attempt at a JS framework. If you're looking for something that you can do in react and it's impossible to develop in Backbone, you won't find it. Any app which can be written in React can also be written in Backbone. It's just that in react, it will be faster in run time and you can use a myriad of community tools to help you along the way. For example react dev tools. I think backbone doesn't have anything like that right? That's one HUGE reason not to use it. React also has server side rendering and type definitions for typescript/flow.
Yes. The Node people have specifically said that they implemented modules a certain way, and it's impossible to perfectly reconcile that way with the way true ES6 modules should work (it has to do with load order or something but I forget the details). As a result they plan to add ES6 module support (someday quite possibly years from now) but it will be a "as close as we can get" effort.
I remember needing to do a lot of profiling since memory leaks were relatively easy to happen. I know there are patterns you can follow to avoid leaks, but manually managing event binding like that is one example that is definitely obsolete compared to newer frameworks.
It‚Äôs also tough to hire new JS devs to work on old frameworks.
There's nothing actually outright wrong about backbone, it's just older and less popular now. I'm actually considering something like BB right now for a particular project, because horses for courses.
You animals! Nice work 
i love cheatsheets. There's a way to get a printable version of this?
Hi /u/d3vourm3nt, For javascript help, please visit /r/LearnJavascript. Thank you!
are there any demos that show off the benefits of Fiber running in async mode? from what i understand, v16 does not yet enable any of the async/requestIdleCallback magic. the largest bottleneck in fast view libraries is not the vdom or the js but the actual work required by the browser create/reflow/retyle the actual dom. if you have a have an enormous DOM, no matter how many microtasks you make, what would you gain over rendering serially? is it just the perceived speed from incrementally rendering an initial huge dom?
1. Backbone couples you to the Backbone.Model, requirong you to use it instead of whatever state management you like. It makes it harder to separate concerns 2. It is a PITA to unit test 3. Pure Backbone is incredibly verbose. Marionette helps with that. 4. AFAIK it is no longer being maintained. 5. IMO it does not lend itself well to using ESNex5 concepts like classes. Though it is still miles ahead of Angular 1.x in this regard. 6. Composition of views is kind of hard. There is no one easy way to do it. That being said, DO NOT waste time on a full rewrite. Incrementally adopt React (or whatever else you choose) into your code. Don't rewrite anything until it either breaks or it needs to be enhanced. Full rewrites are a waste of time and introduce bugs in to your code.
This is an awesome answer, I appreciate it!
very dump op
extreme of dumb idiot and not smart 
Composition is a huge factor, as is the update process. Out of the box, base `Backbone.View` gives you no lifecycle methods other than `constructor` / `initialize` / `render`. If you want to nest child views, you need to manually create them and append them somehow. If your data updates, you either need to re-run the entire render method, or manually poke the DOM. Marionette adds a lot of sensible layers for view behavior around Backbone, including lifecycle methods and better ways to insert views. There's also assorted binding and templating libraries you can use, and Ampersand includes improved versions of a lot of Backbone concepts (like Ampersand-State as an improved `Backbone.Model`). However, React's composition and update approach is just fundamentally superior. Components re-render whenever their props or state updates, and any parent component can render any child component and pass in whatever data it wants as props. The idea that "rendering UI is just a function of state and props" is a big improvement as well. React's top-down data flow makes it a lot easier to trace where data came from and what's going on. Backbone's event chains are nice at first, but ultimately can lead to long sequences of events causing changes all over an application. I'd still say Backbone is better than using plain jQuery if you're doing anything more than just adding a bit of interactivity to a page. But, with React, Preact, and Inferno all available as options depending on your constraints, I would definitely consider Backbone to be obsolete. We've got a Backbone+Marionette+Ampersand app that's a few years old, and earlier this year [I wrote a post about how we added some new features with React+Redux](http://blog.isquaredsoftware.com/2017/07/react-redux-backbone-integration/). We aren't planning to throw it all out, but we're definitely intending to progressively refactor parts of the codebase to React+Redux as we're working on various tasks going forward.
My personal opinion of Backbone is that it is extremely OOP. That is nice if you are transitioning from Java to JavaScript and need minimal disruption when trying to figure things out during this period of transition. Unfortunately, that doesn't take advantage of the function and lexical benefits of JavaScript. Java is extremely heavy on boilerplate and Backbone makes JavaScript feel very much like Java in that regard. I am of the opinion that code is better when it accomplishes the same task with fewer instructions.
I liked this one: https://github.com/MMquant/playing-with-react-and-d3
When would you consider backbone "the right tool for the job"?
I'm not sure I can say which one is "best", but there's definitely several approaches possible. I have several articles on working with React and D3 in the [React Component Patterns#Wrapping Non-React Code](https://github.com/markerikson/react-redux-links/blob/master/react-component-patterns.md#wrapping-non-react-code) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links) - you might want to browse through some of those for ideas.
I start at the bottom and work up. I figure out what are the simplest classes (i.e. the ones with the least dependencies), and write them in the simplest way I can to make the next thing work, starting with tests hopefully. So if I'm writing a board game, I start with the Player class, because that probably just needs a `name` attribute to get started. Then a Dice class, which is probably just a method that returns a random integer. And once they're working I'll build a Board, which might just be an array, but then each position in the array might hold a Player. But that's going to make it difficult to iterate over the squares if some are empty and some aren't. Maybe I need a Square class... And so I go, working my way up the dependency tree until I've written my Game class and UI and then I'm done.
Start developing the UI, so you can quickly see what the app will look like. Then start writing functionalities for UI elements and so on. You'll find your own way of organising things as the app grows. You'll probably make a lot of mistakes during development, you'll realise you could have done things better than that, but the most important thing you'll realise is that you needed to start somewhere, somehow. 
What about setup and structure? Using your board analogy, what would you do file wise? I guess the question here is what steps would you take, what things would you do to build out the initial commit to your repo?
I replied to the other existing post in this thread, which echoes what I'd reply here.
The main demo I know of off the top of my head is the "Sierpinski triangle"-type demo that the React team has been using as a test case. Don't have a link to it at the moment, but I know they've showed it in [some of the prior talks about Fiber](https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md#react-fiber). Fiber is ultimately not about raw rendering speed. The initial improvement is about splitting up the rendering process into bite-size chunks so that the determination of what does need to change doesn't block the main thread. The rewrite of the internals also made the codebase more maintainable, and gave them a chance to implement often-requested features like returning strings or arrays from `render()`, as well as implementing error boundaries. Beyond that, the React team is still experimenting with ideas to better understand what "async rendering" might actually mean, and how that might be useful. I know Andrew Clark showed off a strawman syntax called `componentDidBlock` that would allow a component to indicate it shouldn't render at all until a promise resolves. The "priority levels" aspect will also come into play later, so they can determine that updates from things like user input events ought to be processed first before updates from network requests.
* `create-react-app` or `express-generator` or whatever equivalent * Delete all the boilerplate * `git init`, `git add .`, `git commit -m "initial commit"` * `mkdir models models/specs` * `touch models/Player.js models/specs/Player.test.js` If you know what you're doing, there's nothing wrong with starting from boilerplate. I wouldn't recommend this to newbies who _do_ need a JS 101.
&gt; Though it is still miles ahead of Angular 1.x in this regard. not really. Even with angular's lame DI, it allows you to use ES6 classes for factories and controllers. Don't forget-a class is just a function.
Just to be clear, the `models` you mention are the apps DB model, not some kinda in-game meshes. right? Express-generator? That's a new one on me. Generally speaking tho you're talking about a helper to build the base configs and file tree, right? (i'm sure google knows about one to use) I've used nwjs before, so i'll use that. Basically, what i see you saying here is to find a boilerplate or generator for it, get the folder structure setup, fill in the blanks on the configs/package files, and go from there. sound right?
If you haven‚Äôt yet, spend a couple days with Vue. The first project I worked on at my company was with backbone marionette. The data binding with epoxy only got us so far and nested models became an issue. We tried angular on a couple projects and liked it much better than backbone. Then Angular 2 came out and completely turned us off from Angular all together. We tried out Vue a year ago and we have all been super happy. To me, it has the best of all the major frameworks in one. 
Models, classes, prototypes, whatever you want to call them. They might connect to a db, they might not. I'm thinking about the MVC pattern here, the models are where the logic lives. Yeah, any kind of "getting started" app. Back in the day I once sat and went through the rigmarole of setting up React with webpack, Babel and Express and then just zipped that up and kept the zip on Dropbox. Any time I wanted to start a new project I'd copy it over and unzip it. Then someone showed me `create-react-app` and it changed my life. I've never used NWjs but a brief glance at their site makes me think yeah, same deal.
Hi /u/ben_james_, For javascript help, please visit /r/LearnJavascript. Thank you!
Integrating? What do you mean? D3 targets a single svg element. Just make that svg element a react component and apply the logic after the component mounts.
I hope this thread takes off because I think I know how you feel: a combination of writer's block and trying to clean a messy room where cleaning one part compounds the mess in every other area. It's overwhelming. Do I have that right? For me, I took a course called "logic and design" at a community college about 20 years ago that changed my programming life in ways that can't be told in a reddit post. Still, I always feel like I'm outclassed by the project because every one of them involves some Rube Goldberg construction of function and calls and a fucking "unexpected object" at line 138 is coming because I don't know what the 'new' constructor is in my URL variable is when I've never called a URL action before so I delete it when I try to modify working code I'm pasting in. I would love to get some insight into the thought process of a professional programmer's mind when handed a project just from the moment they ae handed a project to the moment their fingers touch the keyboard.
/u/swizec has written extensively on this topic. Here's the interactive course that takes you on a journey to build a complete app using React and D3. [Become a data visualization engineer with React + D3v4](https://www.educative.io/collection/5164179136708608/5629499534213120)
Thing I like best about angular is directives, but I ran into problems down the road. I know vue has directives too. What turned you off about angular 2, if you don't mind me asking?
Oh God please don't make a game in the terminal. ... .. Holy shit that'd actually be an amazing idea.
Condescending. Check. Lacking integrity. Check. Lacking self-drive or intrinsic motivation. Check. Trying to cut corners. Check. Can't code. Check. At this point, I think you should do the entire industry a favor and never try to tell a computer what to do again. You are obviously [not built for the demands of this field](http://blog.klemmer.com/lesson-2-the-desire-for-air/), and god forbid you actually convince some idiot hiring manager into letting you join a critical or sensitive project. 
Actually, a class constructor *must* be invoked with the `new` keyword. But, yes, the class is an expression, whose resolved value is a prototypal constructor function. /pedantry
Hmm, I wanted to try the problem...and have a working solution that I'd like comments on... but seems like we don't want to give OP an answer...
What coincidence. I was looking at docsjs documentation right before I stumbled this post. Been searching for documentation generator, I think docsjs has everything I need. Looked at readthedocs.io but the setup seems to be too daunting. I'll give more feedback once I start building the documentation. 
Start at whichever bit sounds interesting and write the bare minimum code around it to get that up and running. Don't worry about over engineering it, you'll almost certainly rewrite it five times anyway so just get stuck in to the thing that drew you to the project in the first place.
Before you start writing code, try making a simple diagram of what you're going to build and how the pieces will fit together. This will help you identify and prioritize tasks for yourself. Then you can start on the building blocks. If you're using a framework there's usually a style that the author is generally promoting so you can follow what others have done. Depending on your requirements though you may not need something as heavy as Angular, but it would handle like all of the boilerplate for you and give you a strong compositional pattern to follow. That's UI only though. Personally for an API I was hoping to get into Nestjs after I put aside some time to plan
That's exactly DocsJS's intended use, so I hope you'll find it useful. One thing I should note: some people have brought perfomance issues for large docs to my attention and I've figured out the causes. I'm insanely busy right now, but I'll fix the performance as soon as I can. If you use the CDN specificed on the website, you'll quietly receive a backwards-compatible update as soon as I'm done.
Verify who you are plz.
This looks great when you first look at it, but when you go through some of the tutorials there is a lot of wrong information in there. This needs to be cleaned up a lot more before pushing it. 
It's a online Google survey bud, not a credit card form. Plus if you wanted to verify, just check it's the same survey making the rounds across the internet right now (like HN).
There have been instances where malware was spread this way.
why there is nobody.
Thanks for responding, definately some food for thought. I was hoping to be able to have all the possible options in the one regex for checking against anything that shouldn't be used in a link href attribute. I already check server side using PHP.
This should rate significantly higher than "create-react-app", because it describes approach over method. 
Yeah, true. I was more referring to angular's DI vs ESMs. Which is a much bigger dealbreaker for me.
I'm more stuck on the assembly of the more "physical" parts... setting up the file structure. Files, dir tree, configs, etc.
It's a game based in a terminal interface, not a game for terminals.
Lul
Write it in a single file first, then separate parts out as that gets big. This way, you can get something working quickly without having to dive into build tools. Plus, you'll get a good sense of what belongs where as you work with it.
Thanks. Of course I understand the original use (speaker is me, by the way).
Do you mean in the form or are you talking about me myself? Happy to oblige if needed.
Functional programming is all the rage these days, hopefully, this helps: const _ = require('lodash/fp'); const len = _.get('length'); const onlyAlpha = _.compose(_.filter(x =&gt; x.match(/[a-z]/i)), _.split('')); const uniqueSorted = _.compose( _.join(''), _.sortBy(_.identity), _.uniq, onlyAlpha ); const differenceInLength = _.compose( _.apply(_.subtract), _.map(len), _.juxt([onlyAlpha, uniqueSorted]) ); const removeDuplicates = _.compose( _.apply(_.assign), _.juxt([ _.compose(_.assoc('differenceInLength', _.__, {}), differenceInLength), _.compose(_.assoc('uniqueSorted', _.__, {}), uniqueSorted) ]) );
console.log, and bring up the developer console. Now you can sit there and type little bits of code to try out ideas. If you like the idea, copy/paste it into your file. After a while, you'll have a few functions in your file, and you'll be calling them from the console. Copy paste that, and now you have the start of a program...
[removed]
Angular already had a steep learning curve and Angular 2 seemed even steeper with typescript, webpack, CLI, and structure. Angular was much simpler and we could just add one script tag to the footer and start building. Vue gives us the simple route with one script tag or a more complicated setup with webpack and single file components. Vue is super flexible and Angular 2,4,6,18 seems too rigid for me. 
If I'm working on a personal project and it's of a reasonable size I'm tend to kick it off as is it's a new project at work. E.g. Get a Trello board (or something similar) up and running and start adding tasks and user stories. Your first story for a project like this would probably be something like "Display Hello World in terminal". If you've got the patience for it add enough stories that when youve finished them all you'd have a reasonable working prototype. Don't worry about getting them perfect you can always add more detail or split up stories as you come to work on them. From there if you really want to "do things right" you could start doing some BDD/TDD and writing top level functional tests for your app. Given this is going to be a terminal app it should be very testable. If you start with a test matching your first story (asserting you've got a"Hello World") you've now got something to work towards in making that test green. I wouldn't get too hung up on folder structure and stuff out of the gate. Initially you're going to have 1 file (probably something like index.js) and you should let the stories and tests drive out the design of your code base. Most importantly if you've got good test coverage you can move things around without fear of breaking stuff if you find things are starting to feel messy. Back to the BDD/TDD stuff you'd be fellowing a Red (failing test) &gt; Green (passing test) &gt; Blue (refactor / tidy up), personally I find following a TDD style approach really helps me focus and get things moving. If you're practising this stuff it also has the benefit of being very useful skills in industry. If you're really struggling with that initial starting point I suggest this: |- src |- index.js |- test |- index.test.js |- package.json That's really all you need. If you keep driving stuff out with user stories into functional tests into unit tests into red/green/blue (don't forget the refactor! This is where thinking about strutting your app / code happens). You'll find the app should grow naturally in a way that makes sense, and if you've got good test coverage you can move it all around if you find youve thought of a better way to organise things. Don't worry about perfect out of the gate, remember that code is very maluble and bad decisions can be changed just so long as you have tests and are constantly refactoring the code base as you go along. 
If you are adopting or need to maintain a project built in Backbone, and the project appears to be well structured with no major architecture issues, then Backbone is still perfectly suited for the job. Beyond that, there's no greenfield app I would consider Backbone for in 2017. 
pick up a book or online course about a framework. like Vue or react. you will are guaranteed to build up a project from scratch. then you will know how to organize a project, file by file, and also know why. instead of just 'cleaning' up a boilerplate. I highly suggest this one: https://www.amazon.com/Learning-Vue-js-2-Olga-Filipova-ebook/dp/B01JLBMCAY it's extremely easy to understand from any level of native js. it will teach you proper file structure, webpack, routers for url structures, unit tests, e2e and ofc a bit of vue. basically anything you need to know about building a single page web application.
The team has recently started testing async internally (behind an experiment flag) for some Facebook components on web and also React Native. We're hoping this will show us a couple of things- how much it improves perceived performance, if there are common types of coding patterns that cause problems with async, etc. It's still a bit early- but more info and demos will be shared in the coming months. :)
Table is missing 'Know it, can't get it to work' column
For me, I just start typing, and worry about structure and organization later. My first pass at something is usually incredibly ugly, a few giant blobs in a single file, and I'll keep hacking at that until it does what I want or I think I'm at a decent stopping point. Then I start refactoring into separate functions, making the code pretty, etc. Don't worry to much! Just build stuff and have fun!
Sounds like you learned all about brushes, canvases and paint expecting that that‚Äôs all you need to create a painting.
This is a good solution. Your backend should validate that the data coming from the client is valid but otherwise this is a common pattern.
If you're using yarn, the command is yarn add. If you want to use npm, it's npm install 
To me it sounds like you need to find a framework that is good at what you want to build and follow best practices for that framework. Otherwise, you need to know enough about node to know how to architect a system for yourself and have opinions on what that should look like.
Hey! Thanks for the quick reply! I was also looking into websockets - how good are they in this problem? Sending data to server everytime the user makes a change - would this be bad practice? 
It depends on the problem. Websockets are useful if you need a continuous and real time back and forth but if this is something the user is doing occasionally and they‚Äôre the only ones who see it then a simple AJAX request is likely good enough. A good rule of thumb is to use a simple AJAX request unless you have a good reason not to.
 ________________________ &lt; but I want to play too &gt; ------------------------ \ ^__^ \ (oo)\_______ (__)\ )\/\ ||----w | || || 
AJAX it is! I don't know if I can ask this in this thread, but it'd be great if you could help me out on this. Everytime I send an AJAX to server and if client moves away from the page (i.e loads a different JS file/goes to a different page) - I get this [error](https://pastebin.com/H1QxzdKB). Is this because I don't handle the AJAX callback properly on the client side? (I use django, AJAX is sent via a POST from the client). If its a complex issue, could you please point me to some useful resources on this topic?
I used blessed for a while and it‚Äôs fine. Even tried to help another guy maintain a fork since the original author has abandoned it. I wouldn‚Äôt use it for a game that will have a terminal interface. Just use some css and make something that looks like a terminal
I agree with /u/anubgek. Use pen and paper, visualize how you use your software. Reasons: it's quick, easy to throw and you don't get attached. Think of it like building lego. Have a vision of what it's going to end up looking. And start with the simplest base. In lego, step 1 is always the board. Do that first, even if it's a hello world. Build towards small goals that are visible and tangible. At this point your mind is going at 100miles per hour with ideas. Try not to be distracted, I'm always! Jot down those ideas and revisit them in the future, so many times I've thought of a great plan of attack for a part in the future but forget how to do it. Bonus: if you know there's a framework for your job, should try it out. 
I worked on an application with angularjs 1.5 written with ES6 and it worked really good. I do not know backbone though so I can't see what you can use from ES6 with backbone that you can't use with angularjs.
In later versions that danger was lessened
My process is: make generic reusable code first. Then make fine tuned specific parts. I'm going batshit crazy trying to optimize lighting in unreal engine, but it'll be worth it later when I don't have to try hard anymore and have working references. 
BB itself is lovely for what it is, but the ecosystem is becoming obsolete, as many of the essentials plugins are not longer being actively developed. And you do needs those plugins, because BB is very bare. BB comes from the day when MVC was considered THE paradigm for building browser based apps. The thing is - it isn't. The 'C' interferes with the DOM (that's why most frameworks from that era are referred to as MV*, as they either gave up on Controllers or did something different). The 'M' cannot handle complex data structures easily. The 'V' cannot handle nested components. Plus BB relies on jQuery which is also going out of fashion. React is more tailored towards what devs actually DO. We spend most of our time putting component-like blocks of code inside other component-like blocks of code. We wire up events so that the DOM is rerendered as needed. That's what modern frameworks are based around You can still use BB, but I wouldn't. Besides everything else, try and find your next job when you've only got BB experience on your CV.
BB does have a view layer.
If I was doing this I'd probably create a lookup object where the keys are the letters and the values are the counts... then iterate over the string's characters one by one updating the lookup as you do purple monkey dishwasher. When you're done, the keys will be the "unique" and the values will tell you how many had duplicates. Whilst this solution does give you a bit more than you need, it protects you against the scope changing (e.g. If people start asking "which are duplicates" or "which is the most frequent duplicate") which is something you would need to consider if this were real. And if you haven't already, get a test suite on the go - it's crucial for solving problems like this. 
thanks for the explanation
"Convention over configuration"... you carry those conventions on.
I'll second what a couple of folk have said about Step 1: draw out structure on paper. Interesting to see no one has mentioned Step 2: pseudo code - write out in English the functions and what they do, the rough steps. Step 3 is writing the actual code under the comments.
Just write everything in one file. Literally. At some point you'll see that it's a mess and it's uncomfortable to work with. Then you'll refactor and move some logically-similar parts to a different file. Then you'll do it again. And again. And again. At some point all of those files will be a mess and you'll create some folders to keep them organised. Arbitrarily. At some point you'll understand that you fucked up and will want to refactor. You'll do it. Again and again. That's basically how all of us got to their favourite project structures. Of course you can read some stuff about vertical vs horizontal structures but, I know it's not the answer you wanted to hear, you'll just need to fuck this up so many times until you are semi-happy with the results. Because you'll never be 100% happy. ;)
I have a project atm that has a legacy old system in place for data binding and such, and shares a lot in common with BackBone already - the paradigms are similar, so I'm considering the merits of changing it to BB simply to have something in place that is maintained and not stagnating in a pool. Equally, we're considering a lot of other possible approaches, so it's not like we've settled on BB by any means.
You could also store it in the localstorage of the user. It would only be saved for the browser that user is using, but somewhat easier to implement. 
I'm still using Backbone on all my projects. And in my regular-job we are using React/Redux. Here's what I think about (sorry I will just write things, probably not ordered. Just points that came in mind). Even if Backbone is "old" and unpopular it does the job always keep in mind this http://blog.teamtreehouse.com/wp-content/uploads/2015/08/react-hype.jpg. Differences are in "ways to think and do". Backbone require lot of event conception, and a lot of self-things-to-do (like children, calling render, etc) and lot of software-architecture. These required skills were probably the reason why Backbone was so unpopular. But this is not "bad", just hard to please. Sometimes in React/Redux I just mindblow myself to figure out how to do this and in Backbone this exact same thing take me 5minutes (maybe it's because I did to much Backbone and I think to much "vanilla JS/HTML" ??) Sometimes it's the opposite, specially when dealing with children. Also React come with Babel/webpack and friends (which is not "cool") this also make huge builds (1.2Mb of dependencies wtf ?) when I make bigger apps in Backbone, lighter (500Kb all included) but sure, you have more to do "yourself". IMO I prefer dealing with collections instead of redux (bind your collection to your API/Socket/whatever, put you data-proxy, and forget about it) I found painfull dealing with redux all the time. I also don't like JSX, remember PHP ? (what, HTML code inside PHP ? wtf dude) and 7 years laters we are doing the exact same thing in JavaScript lol, this is not elegant to me. (yeah I prefer separated logic/rendering/templates, sorry guys). Of course there is the fabulous "react-debugger-tool", good luck for debugging babel transpiled JS otherwise lol (but this is really cool, really. When it works). - The way you build components with React is pretty cool (props, callbacks in props, and here you go). - prepare yourself for lot of breaking-updates with react-team - forget about DOM events, you will now use React events logic (even if this is the opposite of DOM event. Native onChange, in React onChange is used as onInput you have to use onSubmit, there is few things like that, funny. Or not). - forget every DOM/Events manipulation, React is not supposed to work this way (you can of course, but this can be a problem later so don't) - you will use lot of callbacks in props this way a Child will be able to trigger a function in a parent (no events, remember) - you don't call a component function directly, you give a props that update the component and call the function (as other said BB is very POO, React is not really, it's something else. POO but not POO. You have to try to understand lol). - ES2016+ is cool and give you cool features (of course you can use it in BB but I found this less useful than in React so I don't use ES2016 in my BB project. This make less dependencies BTW). I probably have other things to say but I readed good comments here. PS: as an other guy says, don't rewrite all your codebase. This is useless. Code a new thing with React, keep old-things with BB. And now BB is "stable", React is still changing a lot (with breaking changes, as I said before). Good luck, may the JS be with you.
You need some good templates. If you can't find any, you should make them. That is what the rest of us do. I have a folder in my project folder with a template for (almost) every type of game I would want to make, using the typical framework. I even have a few with different frameworks. That might be a bit much, but the point is you need to understand Templates for your projects. Take a look at a simple example of a game, something from a tutorial or something, and try to reduce that code to its bare template, then save that. Begin working with that, after a few weeks, try to make a better one.
We can add this on the next questionnaire. Thank you. üôá
I want the data to be accessible through a user account which allows the user to login using any device. 
I mostly used bb.Model so i can watch data changes and rerender parts of the view 'efficiently'. With react you don't need that as you always do a full rerender when something changes and react will find the most efficient way to update the dom. + composability, event handling, mobx, es6, has a future
Hi /u/k-kap, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). I'd post a link to the GitHub repo or make a text submission instead with both of the links and a little description.
Sorry for the inconvenience I caused
It does, though I think it gets forgotten as people just use the Marionette version instead
Make *that* the new project. I felt/feel the same way. I hate tutorials which have a first step of "yo HelloWorldInNewFramework" which dumps 30,000 files in a directory. The questions you are trying to answer are: How do I develop with, test against and deploy a solution using this code. Modules are not a JS specific concept, there are a bunch of frameworks which make modules happen. I saw a tutorial recently... [Here](http://stacktrender.com/post/st/setting-up-webpack-babel-and-react-from-scratch-revisited-muffin-man) which creates a React app with Webpack and Babel from first principals. I.e. it has you creating the files used by those tools. It's quite helpful. So you want to look at how Node works. Just Node, find out where it is installed, where it puts its configuration, what that configuration does. NPM is next (or possibly first). Figure out how that works, same process. Where and how are the big questions. NPM is not the only option, Yarn is a thing too. Look at the blessed examples in the example folder. They only require blessed not two thousand other things which is nice. Don't sweat the big stuff right now, don't worry about making a perfectly architected project that mimics what someone with 300 years of experience would do. Just take the example and bend it to your will. When you get stuck at that point, then you'll have a specific question that will be much easier to answer.
Take old project, gut it down to just the basic shit you need.
You could use lenses check out http://ramdajs.com/docs/
No worries, we'd be very interested in what you posted, it's more about the format really. We're trying to make it as easy as possible for people to take both a look at the source code and perhaps an example, but only having examples with no clear way of getting to the repository unfortunately falls outside of what we normally allow :)
That lib looks like very complicated, I am not sure what can I do with a terminal interface, so I wonder what kind of game will you make.
You are a very rude person.. you should work on that or you are on your way to hell. Good-luck! I've solved the problem already. 
According to the official yarn documentation, linked above, for offline installs, it is 'yarn install --offline' 'yarn add --offline' does nothing as the --offline flag is not yet supported. 
First, I should note that the official documentation does still say that 'yarn install --offline' will work. I did try 'yarn add electron --offline' and got a similar error message. yarn add electron --offline yarn add v1.2.1 [1/4] Resolving packages... [2/4] Fetching packages... info fsevents@1.1.2: The platform "linux" is incompatible with this module. info "fsevents@1.1.2" is an optional dependency and failed compatibility check. Excluding it from installation. [3/4] Linking dependencies... [4/4] Building fresh packages... [1/2] ‚†ê uglifyjs-webpack-plugin [2/2] ‚†ê electron [-/2] ‚†ê waiting... [-/2] ‚†ê waiting... error ~/Desktop/yarn_react/node_modules/electron: Command failed. Exit code: 1 Command: node install.js Arguments: Directory: ~/Desktop/yarn_react/node_modules/electron Output: ~/Desktop/yarn_react/node_modules/electron/install.js:48 throw err ^ Error: getaddrinfo ENOTFOUND github.com github.com:443 
I don't use jQuery but my guess is that you have to pass the function reference directly into the callback field instead of the function name. &gt; var myFunction = function() { &gt; console.log('test'); &gt; }; Then... &gt; ... &gt; jquery stuff &gt; ... &gt; callback: myFunction &gt; ... &gt; end jquery stuff &gt; ...
I haven't used jQuery, but it doesn't seem like callback belongs inside data
`yarn` or `yarn install` should both work in this case - they install all of the dependencies in the `package.json` file. `yarn add` is only to add a new dependency, which I don't think is the desired effect here. /u/jmj1970, the problem is that the electron package needs to install the electron binary. As it depends on your system and your hardware, they can't just provide a universal install like most node packages, so the package you install has an install script that goes and downloads the correct binary for your system. Unfortunately, it doesn't automatically respect the `--offline` flag, which means if it can't download the file, it just fails. Usually for packages like this, they do also have their own "offline" switch, which is usually in the form of a environment variable that should point to a place on your system where you've already downloaded the correct binary. If you set both the `--offline` flag and this second electron-specific switch (and download the correct binary beforehand), it should work. I don't know the flag for electron, but if you Google "electron offline install" it'll probably give you a start. I hope this helped!
As you say, there's a few methods dotted around the internet. I personally went with the following method; a wrapping component &amp; a separate plain javascript class for my D3 hierarchy which I initialised in the state of my wrapping component, and basically fed my D3 class an empty div to act on. To me it was the 'easy way' as I found D3 quite difficult, was new to React and didn't have much time available to me. In the end it went pretty well and the page with my visualisation is up and running, but I'd quite like to go back to the topic and see if there's a better way of doing it. I would recommend some of the content that /u/swizec puts out on this topic, he popped up a lot when I was in your position. If you just search for his name with D3 &amp; React a bunch of stuff should pop up. Good luck!
Malware through a survey without downloads? If your browser is THAT fragile, you have bigger things to worry about than the identity of OP.
sorry, my bad: it *does* ha a view abstraction, but implementing the actual rendering algorithm is your responsibility.
in above example you use data option but that option is not valid.If you are doing a post,put request then this is fine. You are requesting a get request.According to open weather api doc,You should give parameters as query string. //code var settings = { "async": true, "crossDomain": true, "url": "https://api.openweathermap.org/data/2.5/weather?q=london&amp;units=metric&amp;appid=5b72d586dd7fd8a9036a04859fa2a7c7", "method": "GET", } $.ajax(settings).done(function (response) { console.log(response); }); //code now you can access weather data by targeting response. you can learn more about this here :- http://api.jquery.com/jquery.ajax/
I really like the aesthetics! 
All the answers here are right (assuming none of them are equivalent to 'delete system32'). It really depends on your style. For me, I like to think, 'what parts of this project are independent?' For example, if I were developing Monopoly, the answer would be "the dice", along with perhaps "the player" and "the spaces". Then I create those elements as classes, and I find that once I have some starting point, everything else just fits into place.
Nice article! Something I noticed that bugged me, and may trip up new users to Vue or this sort of frontend JS: when you import paths starting with `@`, that's not a built in feature of webpack or node or anything like that. Vue's `webpack` template aliases `@` to the `src` directory. You can see this [here](https://github.com/vuejs-templates/webpack/blob/937ebe69d54f92482a8f3a728d7506bc6aeef072/template/build/webpack.base.conf.js#L28).
It looks like the exception is due to the connection closing as a result of the navigation. I don‚Äôt use Django but this should be a common enough situation that errors like this should be handled and so shouldn‚Äôt be surfaced. I would look for solutions on the Django side.
Thank you for reaching out, I'll edit the article and add a note about it.
I fall into your second category. I use RivetsJS or VueJS when I need to build data driven client projects but for my own stuff I bake my own structure - and it is sooooo fun!!
Post it notes. Write down what you want to happen and what you need to make it happen. Use the notes as a process. Gather up the 'what you needs' and write those.
Vue's webpack template was the first time I'd seen this feature, now I can't live without it. I usually end up adding a scss alias too, so I can import scss files more easily from any Vue component.
just do it. do whatever. after it works you can still go through and clean up.
I know my first bit of code will most likely not be included when the project is done. It will get refined once I know more about how the app has to work. I always start with user input. If your app is being used by a human, what do you need the human to do? Then how does the app interpret those inputs, and what is displayed back to the human. There are great answers here. I use PubSub for a lot of prototyping. Apps don't take shape until you know all about their internals. So, either plan out everything. Or just start hacking away. 
Alright! I'll look into it!
Agreed. At our workplace we are between react and mootools at the moment. We only use react when working on new modules, and are slowly converting all our widgets when required for the new stuff. Best way to do it, imo.
At least I'm honest. I find it ironic that someone is threatening me with hell for being direct and providing useful advice, while they themselves are lying and trying to cheat the system. Just... wow. 
Why don‚Äôt you use Yeoman to get started?
I'm so down to build with Shopify. I do a lot with Laravel and have been looking into their PHP packages. Do you have any resources or sample projects for building something like this with Shopify?
I totally agree with you - I was a "web dev" who had used jQuery a lot back in the day. I could copy and paste examples and tweak them to do what I wanted, but I had no idea how it worked; hell, I didn't even know what callback functions were - I just knew that this was how the code looked. I remember errors where code outside of the callback was executing first and I just couldn't figure out why. Eventually I got it working, but I didn't know how, or rather - why. At some point I learnt some fundamentals, and it all started to become a bit clearer to me, and now I try to make sure I at least understand the principles of what's happening, even if I am using a library/framework to make it happen. However, i'm not sure the argument should be "make newbies code vanilla in the beginning", but some kind of combination of both things. This is the problem, this is something we use to solve the problem, now go and read this and try this to make sure you understand the problem.
Is this a cli app? Start with: npm init Now make a file called bin/yourgame.js, which will be your entry point for the command line. Add this to your package.json's bin section (look up docs on this, eg, https://devhints.io/package.json might be one place to start). Put your actual files into lib/. You're going to have many parts if it's a big game. It might look like this: lib/characters/ lib/map/ lib/mobs/ How you organize them is up to you. Good luck!
Yep, absolutely. I very quickly found I couldn't just copy and paste my way out of problems, until I learnt what I was actually doing.
You could just use the storefront-api and tour front end framework of choice. 
I would recommend trying out replicating popular site u daily use. This way you save lot of time on gathering requirements. Let's take Instagram. Admin account to manage users, block reported images. Client app to load/upload images, create and manage account. Firebase to store who uploaded what and user settings. If u consider only web apps for both interfaces it's good amount of work for both of you.
published worka.js on npm (already on Github) with the boost license , https://github.com/GrosSacASac/worka
Electrons official documentation or yarn? It looks like electrons install step is trying to connect to GitHub to download something.
Ever tried Nethack? It's still amazing.
Why would you use setTimeout here? Just curious..
Write a project management tool that doesn't suck!
The electron package tries to download an archive file from GitHub. I'd it can't, it errors out.
Nice idea! Also, I have some proposals: - it would be good to remove Export button and automatically export article when extension icon clicked - add some error handling for the case when I dumb and I'm trying to export google.com - try to port this extension to Firefox, it will be a good experience with WebExtensions
Maybe you can incorporate this decision in your project. Do some research on your two options, and see if there are other potentially interesting options. Gather enough information to make a proper comparison between these options, then see which fits your project's requirements best.
&gt; ou are obviously not built for the demands of this field, and god forbid you actually convince some idiot hiring manager into letting you join a critical or sensitive project. This is not being honest, but being wicked. You barely even know me to make such a conclusion. Do you know if i know other programming languages or something else? No you don't, but rush to say all the evil words in your mind. Only God know how many people you've led into depression. May God forgive you for being so narrow-minded. bye
You're really close here, I've fixed up your code to show you a working example: [demo here](https://jsfiddle.net/4qyr4094/). For those who want a more thorough explanation, here's why the original code doesn't work: 1. You're passing a string primitive as a callback, when this should be a function. This is a little confusing because we use common English words (that resemble strings) to represent function names. But all you really needed to do to pass the function instead of the string is remove the quotes. 2. `data.callback` is not the place to pass a callback. Instead you can pass `success` and `error` keys. There are other ways to do this too, jquery supports the `.done` method which kind of resembles promises. But success and error does the job just fine.
&gt; useful advice LOL! before i forget, you can as well go to hell with your useful advice
This is correct.
&gt; It comes from ice cream, not from bakery. Deserts in general perhaps. &gt; Vanilla ice cream is the basis for all other ice cream flavours. A great many flavours don't include a vanilla component.
I have had in a long time I haven't had time to implement to have an application that was your daily news in multiple languages. This is all you can do comparative language learning, you'd need to build signup preferences and also daily news delivery, aggregation and curation by a multilanguage team of people. if you are interested I might even help out, I don't think this idea makes money, but it can help language learners worldwide and increase the understanding of the world. also, there is some NLP involved, so there is that... 
Make a new directory. Call it app, for example. In app/ create: index.html js/ style/ In in app/js/ create: app.js In app/style/ create: app.css In your editor, open index.html, app.js, and app.css In index.html, write the doctype, head, and body tags. In the head, link app.css At the bottom of the body, add a script sourcing app.js Is this what you mean?
Vue! :)
Wtf this is oddly specific. 
I think a better question is "which framework will I be happier to work with?" For me the answer is React. Plenty of jobs either way.
&gt;I still don't quite get why you view finite state machines as such a fundamental thing to know as a working developer, when so many people obviously have managed just fine without it. I take it you didn't watch the presentation then.
It depends on where you are and where you want to work. Where I live it basically boils down to this: - mid/small companies &amp; startups do react - very large companies use angular 
More companies should back this &lt;3
&lt;3
I can do it in 1 line
I agree with this 100%. If you enjoy the language you work with, the value of knowledge you gain from your experience will be much greater. 
[removed]
IMO the best place to look is the [DOM spec](https://dom.spec.whatwg.org/#dom-event-preventdefault) which described it in a lot of details. To answer your question, it depends on whether the function you called calls the callback function synchronously (i.e. while the event is still being dispatched) or not.
How
This question makes sense. Unfortunately, I have to make a decision by Wednesday and without too much experience in either, it's impossible to answer.
&gt; plusScore = (scoreArray[i] === -1) ? 0 : scoreArray[i] thank you so much it works 
I'm in L.A. and haven't really noticed a trend like this. but I also haven't been tracking by company size. I'm going to have to pay attention to that. It may be a deciding factor. Thanks!
I've heard a lot of great things about Vue but haven't seen the demand for it. I've considered learning it for fun, but since I will be working strictly with one framework for a while, I'd rather it be something a little more in demand.
Basically a "design doc". Yeah it's ***indespensible***. I made the mistake a fe... well, [here's a blog post I made about it.](https://medium.com/@chiposaur/nothing-is-so-simple-that-it-can-t-be-fucked-up-6a5d869f00b8)
That's vulgar! Stop that. Cut it out.
No line breaks.
Absolutely this. Do the bare minimum, and build up from there. The bare minimum depends on what you're doing and even your level of experience, of course. But let's say you're making a calculator. The bare minimum there might be "make an html file with a table filled with buttons." Nothing happens when you click them. That's it. You're done with the bare minimum! Then just start building up from there, one piece at a time, whatever you think sounds interesting or needs to be done. One trick I do is I keep a TODO file with a list of things that I still need to do. If I'm in the middle of one task and think of something, it lets me write it down so I'm no longer thinking about it AND it makes sure I don't forget. If I'm not sure what to do next, I refer back to my list and pick something.
require('fractal')
The way [dispatching events](https://dom.spec.whatwg.org/#dispatching-events) is defined in the spec seems pretty synchronous. The dispatch call is supposed to return whether or not the event's `cancelled` flag is set, which implies it definitely needs to wait for all of the callbacks to completely finish. E.x. in [form submission](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm) it requires that return value be used to determine if the submit should proceed.
Wouldn‚Äôt most of that be eliminated by simply using the platform default environment? Perhaps some things don‚Äôt work that chrome/v8 does but edge and safari are pretty capable of it comes to ESNext nowadays. 
I'll be god-fucking-damned. `npm init` I've been dealing with some depression and family issues for the last couple years. I mean I was just self-teaching js anyway, and in it all, I have had many ideas and written many docs, but have produced absolutely nothing. Zero zip zilch nada. I've wanted to, just haven't been able to stitch together even just a couple hours at a decent time of day. And this w'end, here I was with time and motivation, but had no idea how to even just setup a directory. Where does the first script file go? why does it go there? Where does package.js go again? Is it top or in `/config` or something? So, "Use it or lose it" right? Well i completely and totally ***forgot*** about `npm init`. Not just forgot the command, but forgot it existed. It's as if "Eternal Sunshine of the Spotless Mind" had been performed on that one specific cell of my memory. I'm here like "what's the file and folder structure?" "How do I build and where do I put configs?" While there are a ton of good answers about everything from documenting in the precode phase to what kind functions to code first -- which will help newbies, no doubt -- `npm init` is my answer, and you're the only person to mention it. Thanks, man. God's I feel stupid.
* Formulate the problem you want to solve with your code * Do some basic research online to see how others have done it * Sketch down your idea and your requirements * Start coding by solving the simplest problem - for example a game dev would just have a sprite show on the screen * Expand on your initial code using the simplest approaches possible but keep in mind interactions between modules, future requirements and most importantly maintanability.
Using an entire library just to avoid naming a variable?
You're just trolling, right? Because if not, ROFL. 
- no eval - no semicolons - no default arguments for functions Still?
Here's the elevator pitch. You're a systems and facilities admin for a government black-site. The game starts with your computer screen booting up. So while you're just doing what you do -- interacting with people and system AI, watching systems, rerouting bottlenecks and assigning tasks (read: playing intro tutorial minigames), etc etc -- shit goes sideways. Everything fails and is unresponsive, except for one system at 08%. Now you need to bring a high tech secret facility back online, and figure out exactly what went wrong with the help of AI sometimes have more personality than your colleagues. It's 90% story and interaction with other characters. But there's also minigames, which is where the most learning for me lies IMO. Reroute power? Pipe dream. Control a bot maintenance bot picking up parts? Snake. Reconnect a subsystem to the main facility? Lunar Lander. And more. Ambitious? Absolutely. But there are a TON of component parts that can be built stand alone. There's the minigames, building and controlling widgets like progress bars bar meters... in a terminal looking environment. https://github.com/Thraka/SadConsole has everything I'd probably need, but it's engine is Monogame (XNA/C# based) of which I know fuck all. JS I at least know *a bit.*
The short answer to your question is that they're both roughly equal, and thus the rest of this post largely doesn't even matter: you can't go wrong picking either one. The longer answer is that the devil is in the details, and depending on how you measure "would be in my best interest" and "would look more valuable on a resume" either one could be the correct answer. It's like asking which soda company will sell more Cola next year, Coke or Pepsi? Well, do you mean in the US or world-wide? Diet cola or just regular? Number of cans, liters of soda, or dollars revenue or dollars profit? Similarly there are lots of details that determine what the true correct answer to your question. So I say, rephrase the question and just ask "since the things I just asked aren't good differentiators, what would be? The best one I can offer is this: do you want a more top-down opinionated framework that puts view logic into the HTML template layer (Angular), or do you want a more Lego-like bottom-up framework that puts the HTML template into the JS logic (React)? For instance Angular would do this in the HTML: `&lt;ul ng-repeat="(index, value) in myArray"&gt;&lt;li&gt;Some repeating content&lt;/li&gt; &lt;/ul&gt;`, while React would do this in the .jsx (Javascript) file:`return &lt;ul&gt;{myArray.map((name, index) =&gt;&lt;li&gt;Some repeating content&lt;/li&gt;)}&lt;/ul&gt;`. Personally I've used libraries like Handlebars and Knockout that put logic into the template layer before, and I much prefer the way React instead puts the HTML in to the JS. I also like that React is more piecemeal (React itself is really only the view layer, so you have to/get to use whatever library you want for the rest). However, you may prefer to keep your HTML and simple view logic separated out in an HTML file, or may want more of an overall framework (not just a view layer), in which case Angular would probably suit you more.
Maybe moving this to /r/typescript would be more appropriate. There are many languages that can compile to javascript and many have their own subs.
And it's oddly difficult to pull off properly. Once you reach an element where the hosted domain is different from `window.top`, you don't get to bind any events to it as it's sandboxed. One way to accomplish this is to wrap the fucker in a transparent div, but then you lose most interaction with the iframe. 
And how many megabytes of libraries?
That‚Äôs not the point of this article. You could have written those functions yourself as well: const pipe = fs =&gt; x =&gt; fs.reduce((v, f) =&gt; f(v), x) const prop = k =&gt; o =&gt; o[k] const props = ks =&gt; o =&gt; ks.map(k =&gt; o[k]) const map = f =&gt; a =&gt; a.map(f) const filter = f =&gt; a =&gt; a.filter(f) const join = sep =&gt; a =&gt; a.join(sep) const uniq = a =&gt; Array.from(new Set(a)) // ... The point of the article was about the effects of using partially-applied curried functions. It doesn‚Äôt matter whether you use `lodash/fp`, `ramda`, `sanctuary`, or create your own helper functions.
If you haven't already done this, make a simple, identical app in both, you can't make these decisions without using the tools 
&gt; So obviously the assertion about creating an "infinitely long promise chain ... means nothing can be GCed" is false. How is that? If you keep a reference to something then it won't be GCed... &gt; This code is doing exactly the same thing, but it doesn't leak. Well, then it's not doing *exactly* the same thing. Does it?
Not to be pedantic, but specifically *variable declaration hoisting* - that is, hoisting only the declaration of the variable and not what it's initialized to. Different from function hoisting, where the entire function is actually hoisted to the top of its context.
Hey, don't sweat it, mate. The other day I started to code something on codewars and I made a for loop like this: for (let i = 0; i++; i &lt; n.length) .. completely mixed up the 2nd and 3rd items, took me several iterations before I realized why it kept resulting in an infinite loop and timing out. We all have moments where shit completely departs our brains and we need a kickstart to get it back. :)
Yes. I can do it in a few hours. Already started on my phone, but it's too annoying. 
&gt; It is an edge case to keep around a 2,000,000 promise long chain I agree. Very few people will stumble upon that problem, if ever. Whether the standard is properly designed to handle such an edge case is another story.
that's a good suggestion; there's plenty of tutorials on youtube, literally hundreds for each if you don't want to actually write any code(not advisable), so really no excuse 
This difference is what separates a senior and a junior developer. I don‚Äôt expect a junior to set up a project. Once the boiler plate is up and components is setup you should be able to focus on your part of the problem. My suggestion is try to learn on framework really good and use your knowledge in it as a base for setting up a new system. But the first steps you take can make or break deadlines later as with a bad setup your going to need to refactor. Aim to do 50% of the job in pre studies and design etc. It will help you know what you have to do to reach done status. 
But a project that already uses TypeScript will have no use for this pattern. A vanilla JavaScript project however may want to adopt this pattern to provide better APIs for its users (without fully migrating to TypeScript) So I think it is appropriate. It is also sort of a follow up to https://www.reddit.com/r/javascript/comments/75ac83/using_typescripts_type_checking_in_vanilla/ which was posted here and got ~100 votes. 
Question: is there more importance on the end product or the process? If it‚Äôs the latter, I know myself and many of my colleagues would enjoy reading a dissertation about comparing Vue.js and Angular from a development process, to include how current design methodology prevalent in the software engineering industry impacts the development and implentation process. You can even have both running on the same back end and do performance comparisons involving a series of tasks that are common in most web applications.
Agreed, though I don't think this is as effective hands-on approach if one doesn't already have experience with similar tools or frameworks 
because it's a timeout sort? Did you try to run the code and see the how this works?
/r/restofthefuckingowl
Restaurant order ahead /kitchen app. Good level of complexity. Can show off the two way binding from firebase during order process, to know when it's being prepared, to when it's ready and so on. Admin app gives the kitchen staff easy digital instant view of orders up. Downside is that you need menu data and such. Can limit the menu, but still manual labour.
I haven't ran it, but I think I understand how the code works. I'm just not sure what the benefit is of this approach - I'd never heard of a timeoutsort before, will look it up 
Just the canvas and some vanilla JS. To avoid looking like a dumbass in the future, maybe spend 5 seconds and actually look at the code.
I guess this would make the sort asynchronous, so if you're sorting a lot of things then it's non-blocking? Interesting anyway.. 
JavaScript newb here. Out How complex is this as in how much experienced would be required to expect someone could make this from idea inception to final code. 
Do you even have a clue with regard to the amount of memory that is mapped, filled via page faults, then paged back out to support this exercise? &gt; To avoid looking like a dumbass in the future, To avoid looking like a dumbass in the future, take a class in operating system design and learn how MMUs work.
Hi /u/AbsoluteDoghead, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you may want to take a look at /r/learnjavascript for these kind of specific questions. Thanks for your consideration!
I'm having a problem that I have a player (object), then there's player.hp which is 3 and when I do player.hp it subtracts 1 so it's 2 but then when I subtract 1 again it still returns 2. Is this because of the floating point numbers ?
Partially applied or curried? Or none since later in the article the problem is attributed to _point-free style_? Or is the problem using Ramda? While the problem with the stack trace is well explained, the source of the problem doesn't seem clear at all :/
JS does everything correctly, there is no issue. What you see is "killme" before value has changed. What happens with this is: killmee-- 1. Console outputs "killme" value 2. Browser subtracts 1 from "killme" You will see what you exepcted if you replace with --killme and ++killme 
I don't get what the problem is in that picture, but if, as you say in the comment, your problem is with some code you have, could you please maybe _show the code_ that is at fault?
What? Mapped memory? What are you on about? You were asking: &gt; And how many megabytes of libraries? And the answer is zero. Zero megabytes of libraries.
https://drive.google.com/open?id=0Bw1FfakKLvDKR1R4SGtEWGNqVDA Download this, extract it and open index.html in Chrome. Look at the hearts at the top left. When you press Enter it does player.hp--. The thing is when you're at 2 hearts and you press Enter because it doesn't subtract 1 but when you press it again it does. The code for the hearts is in the "js/main.js" at line 2921. I even tried putting debugger in between the lines to see where it screws up and everything works except the player.hp--. I didn't see any other problem so if you could help me I'd be glad.
so is there an automatic technique you use (like using default arguments instead of variables would be)
Just a neckbeard dev trying to rewrite what he said so that he doesn‚Äôt feel dumb. Fwiw I‚Äôve never seen a competent SJW dev (check his post history), I‚Äôm not entirely sure why. He‚Äôs not scared of being wrong, he‚Äôs scared of others thinking he‚Äôs wrong ü§¢
I started in 1998; still learning.
you can see it as basically: postfix_minusminus = n =&gt; { const rv = n n = n-1 return rv }
Is there a reason you had to use an NSFW filename for your .zip file?
well that's not really motivating!
The other answers explain why it fails. This is how I'd do it if I was in charge of it: function scroll() { var span = document.getElementById("searchfor"); var searches = ["Macbeth","Shakespeare","Emily Bront√´"]; var delay = 2000; var searchIndex = 0; var charIndex = 0; function next() { var search = searches[index]; span.innerHTML = search.slice(0, charIndex); if (charIndex &gt;= search.length - 1) { if (searchIndex &gt;= searches.length - 1) { return; // all done, so return before we get to the next call } charIndex = 0; searchIndex++; } else { charIndex++; } setTimeout(next, delay); } next(); }
I understand why you ask this but... who cares? If you get answers, you'll find some people will say maybe a handful of days and others maybe a handful of months or more. But so what? What does it matter? You can't really compare because each will have a different situation. Imagine I tell you I picked it up in an hour. But maybe I knew programming for years and 12 other languages when I learnt JS. Or maybe I tell you it took me 2 years. And it turns out I hadn't even touched a computer before and I had to learn JS with paper and a pen. Whatever. So, yes, you ask because you feel you need some comfort or reassuring that you're doing ok, that it's _normal_ to take how ever long you're taking. Ok. Yes, yes, it is perfectly normal to take some time and to find some things challenging. Don't worry about that and focus on learning well :)
You're just doing it wrong. What's being displayed is the variable, and then it subtracts. https://i.imgur.com/0A9zG9A.png
I've been seeing it more and more. It's very similar to React, but has a templating system, rather than the not-code-but-not-a-template-either JSX. I also find it's ecosystem much less obnoxious, in that the hipster "I hate semicolons" types tend to flock to React. :D 
Integer arithmetic in JavaScript (or any other language using IEEE754 floating point) is exact, as long as you don't exceed the very large limit on integer precision. You can add and subtract integer values, or use `++` and `--`, and the result will be what you expect. 
Are you joking/trolling? :) its simple animation drawing and filling rects in canvas in a for loop. If you want to find something to be 'smart' about is CPU which is much more under pressure than fking memory lol... 
&gt; But let's say you're making a calculator. The bare minimum there might be "make an html file with a table filled with buttons." Nothing happens when you click them. That's it. You're done with the bare minimum! I see what you're saying, but that's not the bare minimum. That's less than the minimum, because you program doesn't do any type of calculations. A minimal calculator that doesn't calculate is not minimal. It broken.
dude, *postfix* -- just returns the *value before decrementing*: let val = 3 const three = val-- const two = val *prefix* returns it *after decrementing*: let val = 3 const two = --val const another_two = val
I guess OP does not know about ops.
Not able to look at it as I'm on mobile (consider putting your code on GitHub instead btw) but try using "--player.hp". It's pretty standard across multiple languages that: value++ Means use the original value then increment it. ++value Means increment the value then use it. E.g. let value = 0; console.log(value++); // 0 console.log(value); // 1 value = 0; console.log(++value); // 1 console.log(value); // 1 
Thanks for raising this point, sorry if the way I titled it made it confusing. Take this function: const multiply = (a, b) =&gt; a * b const double = multiply.bind(null, 2) Here, we partially applied `2` to `multiply` to get a new function, `double`. const multiply = (a) =&gt; (b) =&gt; a * b const double = multiply(2) Here, `multiply` is a curried function. We called `multiply(2)` to get a new function, `double`. **But the effect of these 2 examples are the same:** you get a function called `double` which takes a single argument `b` and returns `2 * b`. This allows you to do things like `[1, 2, 3].map(double)` to get `[2, 4, 6]`. This is the pointfree style. However, since `double` is just a partial-application of (or a function generated from a curried function) `multiply`, you don‚Äôt get its name `double` in the stack trace. I hope this kind-of links the concepts of _partially applied_, _curried_ and _pointfree_ together. If I make the title ‚ÄúPartially-applied (or curried) functions could‚Ä¶‚Äù instead, would that make it more clear?
Looks like you have some sort of passive regen that starts immediately after he's wounded, giving you back a health.
Actually if you are not using in real life projects what u learnt it might be useless. Try to find teams who want to work with you and go parallel by learning.
I have no idea why the "no semicolons" rule but here you go: https://jsfiddle.net/1733o2ov/
I probably could to it automatically, but I just did a nice, simple method. The main body is a single var statement. Anything that I couldn't make a `var` chain is in `if(true){}`. You could probably set it up to just transform anything that isn't flowcontrol into if(true){thing}. https://codepen.io/Zee1234/pen/yzWvJJ
Out of curiosity, why not stand-alone redux (or even flux) over backbone? Redux is only about 2k gzipped (vs around 7.5k for backbone) and rolling your own flux is even smaller.
/r/iamverysmart
Oh, I know what those are. The problem is: 1. The title "Partially-applied (curried) functions..." presents it in a way that can be understood as "partially-applied is the same as curried" or "This happens for functions that are both partially-applied _and_ curried". Either of those is wrong. 2. That's the title, but then the _content_ of the article doesn't really explain. It never again mentions "Partial application" in the content, and curried functions only once and not as a part of an explanation. Instead it claims that the problem comes from using _point-free style_ (without much proof or explanation, if I may say so). 3. Even more, the whole problem is illustrated with examples that make use of Ramda. While I don't have a problem with you using Ramda or whatever you want, I do think that using it in these examples adds confusion to where the problem actually lies (which I'm more inclined to propose it's mostly the problem that "_manual currying_ with arrow functions makes them anonymous"). So, no, I don't think it's _only_ a problem with the title. The title _is_ problematic, yes, but the other problems will still be there.
I wouldn't *expect* a programmer at any level of experience to be able to make it. You'll probably never need to create something like this. You may not need to combine maths and canvas drawing at work. If you have to draw some shapes or curves, you'll just look it up. I think the person who made this either 1. likes maths and programming challenges 2. found an article called "fractal animation in 100 lines of C++" or something and decided to see how many lines it'd be in JS.
Came here to say the exact same thing. Nice.
I've also been seeing Vue more (in job listings). If anyone is looking to pick it up, I can't recommend this Udemy course enough, [Vue JS 2 - The Complete Guide (incl. Vue Router &amp; Vuex)](https://www.udemy.com/vuejs-2-the-complete-guide/) and now is the time to pick it up, 5 hours left at $10. If you miss it, just leave the course open in a browser tab and check it every day or two. Udemy courses go on sale all the time so just wait for a sale, unless you absolutely have to have a certain course today.
You're confusing "MVP" (minimum viable product) with bare minimum. The point here isn't to get something that works. The point here is to get something to build off of. OP's suffering analysis paralysis because he's looking at a blank sheet of paper, and he just needs to start writing.
The code itself is really simple. It's a conditional loop, plus some drawing logic. The hard part is knowing the math behind the fractal, and how that math translates to colors. If you're going for a programming job, you'll never be asked this. If you're going for a job programming certain types of mathematical models and displays for them, maybe. 
hate to intersect. is this open to public and shit?
What matters is experience, full stop. The javascript world moves fast, and what is important is that you are ready to move with it. For all you know, mid next year both React and Angular might be old hats. During the next years you will have to adapt and learn multiple tools and frameworks, and the experience you gain from learning React or Angular now, will help you do that - no matter which you pick. I like React, other people like Angular, others still say Vue or something else entirely. Pick whatever you think looks most fun, and then get some experience with it!
thanks. the demo appears to be here [1]. I played with the code a bit and the perf difference only exists due to the artificial synchronous blocking code [2]. In effect, it demonstrates a case of having heavy/blocking render() calls and this is where i'm confused. React bills itself as a reactive view layer: props/state in -&gt; DOM out. If the props/state are prepared *ahead* of the render call, then there should never be massive contention in any render function. The Sierpinski demo has a dom size of 1110 live nodes. My facebook feed page on desktop has 2645 live nodes. The task of rendering from a prepared state should be trivial. I imagine it's only if components heavily use blocking `willMount` hooks to lazily pull in data they need from some sync store or do non-render-related tasks inside of render. If people just use React as a view later, they would not get into these situations that must be solved. Is this essentially a result of each React component having to synchronously "pull" data it doesnt yet have? [1] https://github.com/claudiopro/react-fiber-vs-stack-demo [2] https://github.com/claudiopro/react-fiber-vs-stack-demo/blob/58850495f448ecbf9b109b86a7900a844fd06235/stack.html#L94-L99
Oh, i would love to do this, but my thesis supervisor is more interested in the result than in frameworks :(. Unfortunately developing process is not prevailable in our case
What do you mean?
Yarn 
i highly recommend you do not combine the html, css, and js into one file. keep them separate. 
It really depends how deep you want to go. If you are interested in just the DOM manipulation than not so long, but if you really want to go deeper than it might take you bit of time. My honest recommendation is to not think a lot about that. Be sure that you are not going to achieve anything over night. On the other hand, be sure that you are not going to spend years learning JavaScript (you are just going to upgrade your knowledge). Don't expect to learn every single part of the language. Just learn the pure basics (if you don't know them already) of the language as well as some DOM manipulation and start making something simple like a image slider or animations. From there you can progress further. It really won't mean you a lot to just "learn" JavaScript. Apply your knowledge. Use these resources as a guide: [MDN Javascript Tutorial] (https://developer.mozilla.org/en-US/docs/Learn/JavaScript) [JavaScript - The Right Way] (http://jstherightway.org/) [Exploring JS - ES6] (http://exploringjs.com/es6/) **Good Luck.** 
Since the `ytInitialData` value seems to be a JSON blob parsed as JS, I'd say the safest option by far is to just find that blob in the HTML and parse it as JSON yourself. Maybe try something like this: const startRegex = /&lt;script&gt;\s+window\["ytInitialData"\]\s+=\s+/ const startIndex = html.indexOf(initialDataRegex) const endIndex = html.indexOf('&lt;\\script&gt;', startIndex) const payload = html.substring(startIndex, endIndex).replace(startRegex, '') console.log(JSON.parse(payload)) This was written without a linting or highlighting, so there may be errors in it. You would also have to add checks for -1 indexes, but that should be manageable.
ah i see! yeah, that‚Äôs a nice automatic one that i didn‚Äôt think of.
i wanted to prohibit automations, and a simple `s/;\n/;/` would be enough to make a single line out of everything
Ok this is what I hate about these subreddits. They're supposed to help people. Just because I'm wrong doesn't mean you have to downvote me to shit. Also that NSFW title was because I was sending it to a friend of mine as I spent too much time working on it and I was kinda going insane. I have to thank everyone who actually helped me in a way so I can improve my coding skills but I'm really pissed that unless I'm a Javascript master, I'm not allowed to post anything on this subreddit without getting downvoted.
*SJW*? Really? 
Also lost fair amount of bytes in a few places. I have had a bit of practice on this. You can look at my http://iteral.com/jscrush/ for how crazy you can go with minification. There I have implemented a javascript packer that's 1024 bytes (after run through itself).
[removed]
Express
I really love Koa. The api is so simple and so minimal! It's basically only middleware. 
Feathersjs: https://feathersjs.com/ Super quick to develop, lots of already built connectors (to databases, services), easy authentication, great support and dev community, and you get a "realtime" socketio version for free. 
I use Go for the api and Typescript on the frontend. If I'm doing a backend in Node I really like Koa. For slightly complex Webpack dev server stuff I will just use Express
Thank you for reply. Yes, I give you 100% right. I just want to be good not autistic good. Webdesign isn't easy but really awesome field of work, can't wait to be better, even though it takes some time... 
This is not the help sub, check the sidebar
Can someone ELI5 what a partially applied function is in JS? 
I'm more impressed they found a use for a do-while loop
You're never done learning. If you're wondering how long until you can get a frontend job, probably between 6 and 18 months before you can get a junior position. 
Django + DRF. I might be in the wrong subreddit. 
Flux Standard Actions have more than an uppercase name. [See here](https://github.com/acdlite/flux-standard-action/blob/master/README.md).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [acdlite/flux-standard-action/.../**README.md** (master ‚Üí f509286)](https://github.com/acdlite/flux-standard-action/blob/f509286dc672785efd4437994bb14e0ab9d3a084/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dosi4f9.)^.
I understand what you're saying, but JSX is code. Otherwise I kind of agree with you. (although I am definitely more of a React fan) 
I wish.
Sadly I have constraints to some pretty vanilla Javascript.
Glad to help! Hang in there buddy, I hope getting your game set up is gonna help you through. Coding open source libraries was one of the ways I'd make it through tough times in my life, as strange as it sounds. As for losing memory of 'npm init', that's hilarious. It's happened to all of us :D
I redid the challenge. It's still not as compact as MaxUumen's, but it's way better than my last run https://jsfiddle.net/roeosag6/ I'm actually pretty say that I can't figure out how to replace the do/while loop with something else. It's the only spot I needed that sort of structure. Everything else is just chains of variable declarations, which worked out way better than I originally thought.
Any reason why? it's not that much code
My preferred stack...depends on the customer requirement/restrictions. Something that isn't going to get a lot of traffic and doesn't require anything fancy? Probably express. Something that gets some moderate to heavy traffic with enterprise shinnanigans? Probably Spring. Something that's going to get hit **hard** daily with little to no enterprise shinnanigans? AWS API Gateway and Lambda.
* You arrogantly thought that JavaScript was the issue and your code was not. * The zip name doesn't really bother me. What bothers me is that you sent a zip file lol. (Next time, use Git with GitHub or GitLab, it's well worth investing time into) * You don't have to be a JavaScript master to post in here, just don't be so pretentious.
You can supply several arguments upfront, and instead of executing the function right away you receive a new function which takes the remaining arguments later. 
There's an [open issue](https://github.com/whatwg/html/issues/3062) in the HTML spec. 
+1 Really enjoy DRF
What type of comment is that? Entire languages are designed around avoiding state as much as possible (Clojure). The only question should be the validity of the approach. I can make a snarky comment like that and make any valid concept sound silly. "Naming every anonymous function? Putting an extra equal mark on every double equality?" Just make your argument.
+1 for Go, it's a small robust and REALLY quick language that's great for web APIs.
Honestly it's a worthy trade off. Uncaught TypeError: Cannot read property 'firstName' of null **at props (ramda.js:7314)** at ramda.js:138 at f1 (ramda.js:31) at ramda.js:2061 at ramda.js:2061 at ramda.js:205 at ramda.js:2061 at ramda.js:205 at _map (ramda.js:572) at map (ramda.js:848) at ramda.js:470 at ramda.js:138 at f1 (ramda.js:31) at ramda.js:2061 at ramda.js:2061 at ramda.js:205 at index2.html:35 It's going to take me all of two seconds to realize the code choked when reading props. I don't need a stack trace. Set a debug statement and step through. The major thing here, is your data changing beneath you. The service you're getting your data from should be doing better sanity checks, and you can do validation on your code instead of having to worry about the data being correct in every piece of function that consumes that data. A person's first name should never be empty, and it never has a reason to be null.
Maybe phantom js for node?
Express, not by preference, just on the virtue of it being the only one I know .
I have some function that takes 2 arguments, `a` and `b`, like so: ``` add(x,y){ return x + y } ``` Now let's say that I want to use `add` in order to `map` over a list and add `1` to every item. Using it without partially applying it, we'd have to ``` const increasedBy1 = list.map(num =&gt; add(1, num)) ``` But JS has closures and scope which means we can `partially apply` the function `add` and when we fully apply the function, we get the intended result. To see what I mean, let's create a partially applied version of `add`: const partialAdd = a =&gt; b =&gt; add(a,b) const add1 = partialAdd(1) const increasedBy1 = list.map(add1) The returned value of `add1` is a function that has reference to the `1` given to `partialAdd` via the `a` variable. `add1` is the value `b =&gt; add(a, b)`, a function that is expecting the rest of the arguments for `add`, along with its lexical scope ( might be wrong on the wording there. Basically all of the pieces you've added along the way and everything in its parents' scope ). How I've found this useful is for when I know how to solve a problem but the pieces will be given to me over time, such as an `event handler`: const updateSocket = socket =&gt; event =&gt; { /* code that we can test in isolation, given mocked `socket` and `event` objects */ } targetElement.addEventListenenr('click', updateSocket(webSocket) Now my worker that does the updating of a socket doesn't have to care about anything other then the inputs to his job and I don't have to ensure that things are in the right place at the right time, since I just pass the values along the way.
Avoiding state is a good reason to create a library. Avoiding naming variables is an absolutely terrible reason to create a library, wouldn't you agree? My original comment wasn't meant to be snarky. It's completely reasonable.
Thanks for your response! And thanks for even updating your article to clarify your intention!
&gt; Actually, a class constructor must be invoked with the new keyword which has bitten me so many times when I've thought of classes as `just a function`.
I've been programming since 1998, learning javascript since 2014, can make a for loop and add basic functionality to websites, no idea how to make a calculator . 
variables = state The purpose of the library isn't to constrain you. You're free to assign anything to variables. The thing is, it doesn't force you to do this as a limitation. In certain instances, it will make sense to break out from that paradigm. https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch6.html#a-principled-refactor Take a look at the bottom here. You see how he breaks it out to make it a bit clearer? Yes, pointfree IMO is a great pattern and we should strive towards it. If it makes your code clearer to break up in certain parts, then do that. However it's not the software artificially limiting you and forcing you to create variables. You're free to let things flow. The reason for my adverse reaction, is the point of functional programming isn't to make some function that uses 20 different Ramda functions. The first thing you learn in FP is composition and breaking things out where it seems like it fits.
Thank you both fo the great answers. Ya that makes sense , a lot of the JavaScript is simple it is just the math and color aspects which are tricky. But when your learning and you don‚Äôt know what you don‚Äôt know , you can look at code like this and kinda wonder like Hmm how did this originate. 
thanks a lot for the explanation ! 
In this particular example, we only read props in one place, so that kinda gives it away. In a real-world app where code like this gets duplicated and applied in many contexts, figuring out these stuff can be a big pain when every line of stack trace points to library code and none of our code. Even with sanity tests and more thorough tests, weird things do happen. Usually it happens on customer‚Äôs browser, where you can‚Äôt just put debug statements and step through there. Sometimes the bug can‚Äôt always be reproduced, leaving us puzzled how the customer got that kind of error. That‚Äôs the point of the article. We should make sure that in those rare case it‚Äôs easy to track down those sort of problem.
I didn't know there was an other definition of memory leak, that's absurd.
The explanation above was great but too lengthy for such a simple thing... These two lines are way better :).
tl:dr; 20 years and counting. Bought and read Danny Goodman's Javascript Bible in 1997, and said "this stuff is fun, but kinda crappy?". Played around with it for a few months then decided Java Applets were the FUTURE! So I dived into that for about three years and pretty much abandoned Javascript. Didn't touch it for about 10 years, worked back end. Somehow won a contract in 2010 and I had to pretend I was a Javascript gun. The learning curve was STEEP. 7 years on I feel like I know less than I felt like I knew then. I reckon even if I just focused on Vanilla ES6 I'd never get completely across it before ES7 was in wide use. 
I updated the article: - changed the title. - added the examples above to show how one writes pointfree code using partial/curry. If you have more ideas how to make this article better, please suggest. About the problem being ‚Äúmanual currying with arrow functions‚Äù, even if we had write a named function instead: function update (k, f) { return function actuallyUpdate (o) { return Object.assign({ }, o, { [k]: f(o[k]) }) } } And generate several functions with it: const incCount = update('count', x =&gt; x + 1) const decCount = update('count', x =&gt; x - 1) const toggleCompleted = update('completed', x =&gt; !x) The stack trace produced by these 3 functions are the same. If we pass `null` to any of them, the stack trace will just say ‚Äú`actuallyUpdate`‚Äù without telling us which of these three caused the error. Therefore, the problem persists.
How long is a piece of string. The web is an ever changing beast, be it front or back, the day you stop learning is the same day you start on your new life journey towards management. As a developer, the is only 1 skill you can ever even hope to master, and that is the ability to adapt to change, as that is all your job ever does, especially in javascript, hell dude, they had to start version in releases by year just so we can keep track,and that's not even enough. Why do you think there are no university degrees or certified qualifications for it, simple, because by the time the tutor is done writing the curriculum for the approvals board, he can toss it away, as it's already outdated.
Time to get ready for es2018 man...
This might be the saddest thing I read today. 
Holy heavens you're a genius
I don't understand the purpose of these boiler plates. I mean, just by virtue of needing something like, one would already have their own cultivated version. Is it to serve as an example or something? I can't imagine anyone actually forking this with intent to build their next app with.
Anyone use this? Thoughts or opinions? I use a php tiling manager and really like it. 
Love this feature. Have been using it in a recent project for lazy loading and scroll animations 
There is nothing in the Promise API that says references must be kept in such chains ‚Äî it's quite interesting how people jump to conclusions on how the implementation should behave, when the API itself is free of such constraints. In fact intermediate references can be dropped, implementations are known, TFA now includes mentions of such implementations, which are verifiable, including acknowledgements from the authors of the Promise spec and others. And I think I've been pretty clear on that. If not, then let me know how the explanation in TFA can be improved.
I noticed a potentially large issue with this implementation of promisify. export default (fn, ...args) =&gt; { return new Promise((resolve, reject) =&gt; fn(...args, (e, ...cbArgs) =&gt; { if (e) reject(e, ...cbArgs) else resolve(...cbArgs) })) } Promises can only resolve or reject with a single argument, so the spread on `cbArgs` is unnecessary and is actually masking the fact that arguments beyond the first are being discarded. The built-in `util.promisify` gets around this for built-in node functions by either returning custom functions (like for `child_process.exec`) or simply rolling them up into an object (like for `fs.write`).
And some practical use case on my blog‚Ä¶ https://pawelgrzybek.com/the-intersection-observer-api-explained/
Or *really* likes messing around with iterative functions. ;) 
You should learn to accept the help people offer instead of getting angry about it. I didn't downvote you, and I spent about a half hour going over your code and offering what I thought were some helpful suggestions. At my usual billing rate, this would have cost you some money. But I do it for free because I enjoy helping people.
Nice features!
Hapi. Especially for APIs I find it's a mature and complete solution that makes it easy to handle authentication, validate payloads and send the correct responses and errors to the consumer.
Out of curiosity, what are the main benefits of Hapi over Express in your opinion?
You probably should try r/learnjavascript for questions about learning JavaScript. Not only because _this_ subreddit is not for JavaScript help, but because r/learnjavascript _is_ indeed for that kind of help. That said, I would advise to first learn better ways to _ask for help_ (in any subreddit). Using an _image_ to post code is a _very bad idea_. It's annoying. Not only that, posting that image with a meme title is stupid and not funny. Specially when you imply that there's nothing wrong with your code and instead it's JavaScript that is somehow doing something incorrectly. What you should have done instead is, as already mentioned, _show the code_. In fact, you should always: 1. Show the code with the problem. Ideally, put it in a JSFiddle, CodePen, JSBin. If not, at least put it in a Pastebin or similar static bin. If it's only a small piece of code, you can simply copy it here, as text, putting 4 spaces in front of every line so it gets formatted properly. Uploading a zip file is _sometimes_ ok, but not the best way. 2. Explain what your problem is. Do not _make a joke about it_. Just explain what you wanted to do, and what is happening instead. If there are error messages, throw them in the explanation too, exactly as they appear. 3. Accept any help you get and acknowledge it. Do **not** just read the answers, fix your problem and delete your post. That's bloody rude. If you do _not_ ask for help appropriately, expect to receive downvotes and, probably, some bad comments. I personally do not condone that, but mention it because it happens.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| ^^Now ^^with ^^97% ^^less ^^bold ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
ah nice, also with the comma operator, but you used array methods to replace loops!
Excited about variable fonts! Marking pages with forms on http as insecure helps building a better web!
Express is just a middleware runner. Hapi is a complete framework. It provides more stuff out of the box. For almost everything there's a standard module. 
&gt; the anti-framework framework Oxymoron much? The whole point of all these tools is that they replace the individual components of what used to be monolithic frameworks like Meteor. But when you bundle them all up into a monolithic project, you've lost the benefit.
&gt; Avoiding having to name variables is an absolutely terrible reason to create a library, wouldn't you agree? Ramda exists to make functional programming more convenient in JavaScript. Allowing point-free style (not repeating your data) is just one aspect of it. The goal itself is to compose highly declarative code and keeping your data immutable. Chances are that any JavaScript project where that is desired will default to Ramda (or Lodash/fp) right now. When writing an article about stack trace problems in functional JS, using Ramda functions as an example is therefore perfectly reasonable. The article is not about when you should or shouldn't include a library in your project, that's off-topic.
What the crack is up with that indentation/bracket style
If Oracle did that, their customers would no longer be captive of their technology, and Oracle would become bankrupt.
I realise this, of course, but it's *me* that would like to learn JavaScript and other relevant technologies, not Oracle :-)
well the js behavior is abused there on purpose, but I understand your concerns. "somestring" % divider is a NaN and NaN != 0 is kinda logical in my op. It looks at a value changes it if matches passes it if not.
It's a bit like asking "How much time &amp; effort would it cost a Microsoft person....". I suppose if you work on VSCode or TypeScript at Microsoft, then "0 cost". If you work on ASP.NET, then "some cost". If you work in sales &amp; marketing, then "a shitload of cost".
I'm an Oracle DBA plus SQL and coding in PL/SQL. No Microsoft stuff whatsoever...
Do you think that for the event handler example it would be better to use this or generators?
oh, so you're trying to break out of captivity :p As an Oracle person you probably would not need much time to learn JS and the basics of deployment. Choosing &amp; learning a framework is variable though. 
Yup, trying to break out of the golden Oracle cage. The JS syntax probably wouldn't be any problem. Deploying though... I haven't got a clue about administering web servers and the like and have no idea where to get started learning. Hence my question...
To only way to find out, is by doing it. Let us know, how long it took. It‚Äôs literally impossible to put a time on that. Some people learn fast and other need more time. 
This sounds more fullstack dev than just JS dev, you may have to add python and ruby to your skills list as those are often used in automated deployments, and they make the learning path easier :-)
Use APEX - it has all the plumbing you need to develop and JavaScript application. Plus you get security for free.
Can you tell us more about the sandbox and/or the overall context? Could you probably use postMessage in order to receive the file data from outside the sandbox?
JavaScript runs per default in a sandbox. This means, it's running in an special evironment. I want currently only, that the user can open a file(Thats already working), manipulate the data by itself and then save the file. The saving is currently only possible through downloading the data as file. And I want to bring here a little bit comfort, so that the user don't have to download the file everytime.
Unfortunately, you can't write directly to the user's machine from a web zone. If you can imagine the security implications of such a thing.
Thanks for the feedback :) I have fixed the typos in the source on Github &amp; will push to npm with the next set of bug fixes
Mmmhh, never tried. I think Redux or Flux logic is better with React, but that could be an interesting prototype indeed. btw BB logic is heavier because there is everything with events, queries, API rest included. Flux is only pure logic which require other libs to do advanced stuff. I already coded my "own" redux pattern logic on a very small project (for my better understanding of redux) and it was small and simple.
How's the async/await story when using Hapi? Or do you still write callback style code?
How's the performance? Have you used it on heavily trafficked sites/apps?
What about if you're doing a lot of JSON back and forth? Isn't the marshaling around structs thing annoying?
We use Koa at work on all our projects (v1 and now v2). It has worked great, but it does require you to hunt down each individual best solution for the task at hand (authentication, templating, websockets, etc.). Great minimal framework for people that prefer this.
Prior to my current job I was mostly a PHP/MySQL dev. New gig is a JS heavy shop (Node, Koa, AngularJS, React). From knowing very little about JS to being quite competent in all of the above took a few months. Of course, I'm always learning more. I recommend the following 2 learning sources: Secrets of a JS Ninja, 2nd Ed. (John Resig) You Don't Know Javascript (Github, Kyle Simpson)
You can't write files directly to the user's filesystem from JS in the browser, no. And you can only read files that the user has selected with a file input. What you *can* do is create an ad-hoc file from data you have, and then trigger the browser's download function to trigger the download prompt (or save it to the user's downloads folder, if they have automatic downloads turned on). For example, here is how you can take a table from a page and prompt the user to download it as a .CSV file: &lt;table id="people"&gt; &lt;tr&gt; &lt;td&gt;Sarah&lt;/td&gt; &lt;td&gt;New York&lt;/td&gt; &lt;td&gt;Masseuse&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Laura&lt;/td&gt; &lt;td&gt;Odessa&lt;/td&gt; &lt;td&gt;Journalist&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Leland&lt;/td&gt; &lt;td&gt;Vancouver&lt;/td&gt; &lt;td&gt;Ski Instructor&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;button&gt;Save as .csv file&lt;/button&gt; &lt;script&gt; // Wraps document.querySelectorAll in a regular array. function select(root, cssSelector) { return Array.from(root.querySelectorAll(cssSelector)); } // Returns an array of table rows, each row being an array of strings. function tableRows(tableID) { return select(document, `${tableID} tr`).map(function (row) { return select(row, 'td').map(function (cell) { return cell.textContent; }) }); } // Takes a string[][] and makes a CSV-style string, that is, // lines of comma-separated strings function tableAsText(tableID) { return tableRows(tableID).map(row =&gt; row.join(",")).join("\n"); } document.querySelector('button').addEventListener('click', function (evt) { let a = document.createElement("a"); let mimeType = "text/csv"; let fileContent = tableAsText("#people"); a.href = "data:text/csv," + encodeURIComponent(fileContent); a.setAttribute("download", "people table.csv"); document.body.appendChild(a); setTimeout(function () { a.click(); document.body.removeChild(a); }, 200); }); &lt;/script&gt; The idea is that you create a new link element that points to `data:&lt;mimetype&gt;,` and then some content, set the `download` attribute on it so that clicking it prompts a download rather than an attempt to render it in the browser, attach it to the DOM, call the `click` method on it, then remove it from the DOM. You could do this for all sorts of binary data, locally stored data, etc too, and it's as close as you'll get.
If you're running JS in the browser you cannot do this. The file APIs exist in JS for the Node environment not the Browser. Some browsers provide a file API to extensions as these can request elevated permissions Chrome extensions for example (https://developer.chrome.com/apps/fileSystem), though that's not suitable if you target a browser or browser version that doesn't support extensions and it requires you to install the extension before using that functionality. 
Just pick whichever one you like best. Plenty of jobs with both React and Angular. 
It‚Äôs been supported for long time
Works really well now. I'm async/await extensively in a current project. Pretty much everything returns a promise now if you don't pass a callback. The only issue I had regarding this was that if your server methods (the `server.methods.something` stuff) return Promises and you have caching for server methods turned on it doesn't work because Catbox (the caching layer) wraps the methods to cache them and it can't handle promises. But it might have been resolved recently. I haven't checked yet. At least there is or was an open issue for this.
ÔΩóÔΩàat if the form is for sending random useless ÔΩîÔΩàÔΩâÔΩéÔΩáÔΩì that nobody read and really process like some random comment without authentications whatsoever.
await new Promise(ready =&gt; setTimeout(ready ,500)) I love it how everyone creates a module these days even for the simplest things...
Did some research into this for work awhile back, no way to do it unfortunately. If nothing has changed then the only way to do copy/paste for safari is add some selectable text and have the user use the native interface.
Lost the benefit? This is the whole point of these tools; to use them together to create an application. Fork it, switch out the database layer, or switch out the server to Python and use everything else, maybe you want a different view layer; simply swap out.... thus IS the benefit; you can't do that with meteor. It takes work to build these things into a working production application; this kit gets all that work out of the way. This is the whole point...
Skip the browser. Distribute an Electron app and there you can use Node and have full access to anything. This is how Atom, Visual Studio Code and many others work.
Please don't joke around with these. I know this is just intending to mock the 'nanodelay' thing, but people will start to take it seriously....
I did not create the original package, i merely published a fork with a fix for a bug in the original which has not been released. I completely give credit to Thorsten Hans (https://github.com/ThorstenHans/ngx-electron) I just wanted to allow the use of this module until a time in which he releases a patch.
there's also [EaselJS](https://github.com/CreateJS/EaselJS) 
[removed]
Instead of using dataURI (that may grow quite big, due to its base64 nature), you may also use blob URI that won't explode your browser's memory (see https://developer.mozilla.org/en-US/docs/Web/API/Blob). This is the right way to manage external files. If you don't need to export a file, but only save data, you can look into IndexedDb, but I don't know the caveats of persistent storage...
Don't use Canvas for this. Its stateless rendering makes it performance heavy when it doesn't have to be. What you are looking for is D3.js https://d3js.org
The performance is great. I use it on a website that gets 3-4 requests per second, but a lot of that is through the regular Django pipeline and not the API. There are some major players use Django and DRF, like Instagram and Rover.com
Oh, good point, you're totally right. 
Hello content-editable, goodbye forms
member [is-even](https://www.npmjs.com/package/is-even)?
Install node and npm if you don't have them already, then just follow the instructions 
Looks like v17 will have full async/await front to back: https://github.com/hapijs/hapi/issues/3658
Jest FTW
[Strapi](http://strapi.io) (based on Koa) with a great UI dashboard in bonus.
That doesn't work in a vanilla browser. The alternatives would be an electron app or a browser extension.
Thx for the response. I‚Äôll look into these. 
GState sounds like one of the most reasonable approach to state.. pretty much get/set/watch. Don't know why you'd market this as crazy state for lazy programmers. I kind of get it but i feel it removes some of its qualities since its actually such a sensible approach. Think i could pick this over mobx if i was at a time of choice. but the way its presented will give me a harder path to acceptance from higher ups. Maybe i'll just fork it into graphState : A gstate fork without self deprecation
Oh cool, thanks for checking. I'm still on 16.1.
As far as I know D3js manipulates SVG. Isn't it dangerous to reveal every information on the map on bare SVG. i.e. let's say our seat has the following information: { price: 1500, rate_id: 2, } is there a way to bind this information to the SVG element or should it be directly on the svg like: &lt;circle data-price="1500" data-rate-id="2" r="10"&gt; It would be good to hear about this. I will also dig deeper in the documentation to find this out. Thanks for your recommendation though! 
Will take a look at that. Thanks!
gitconnected was recently released as way to build a community for developers and help software engineers get plugged in. The idea originated a few years ago when I started my career and found it difficult to meet and collaborate with others engineers. It‚Äôs a full stack JavaScript app built using Node and React. Any feedback on the product or the idea would be much appreciated! Features: - Share knowledge with posting and real-time discussions - Display your projects and portfolio seamlessly - Meet and collaborate with other developers - Support and get involved with open source software
This is the best tl;dr I could make, [original](http://www.abc.net.au/news/2017-10-16/north-korea-missile-range-map/8880894) reduced by 90%. (I'm a bot) ***** &gt; Under current leader Kim Jong-un&amp;#039;s reign, North Korea has tested these short-range missiles 50 times. &gt; Of particular threat to South Korea are missiles known as the Scud-C MaRV and Scud-B MaRV. These missiles are equipped with a manoeuvrable final stage. &gt; These missiles have only been tested with relatively light satellites, so it&amp;#039;s unlikely they would reach this far with the heavy payload of a warhead. Furthermore, these missiles take days to set up for launch, which gives enemies time to prepare and possibly disrupt them, so they are highly unlikely to be used as offensive missiles. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/78g7xa/in_light_of_president_trumps_proposed_visit_to/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~234159 tl;drs so far.") | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **missile**^#1 **Korea**^#2 **North**^#3 **test**^#4 **range**^#5
You've already sent the data to the browser. Your only option is to not pass the private information to the browser - you probably want to do some math to get it to a form appropriate for display (eg where did r=10 come from?
Not so much an anti-framework as a meta-framework. 
With "plumbing" you mean, the dev enironment and deployment cycle and stuff likt that?
Nice game, how long did it take to create? How long have you been coding? 
No, I mean the communication between your GUI logic in the browser and the SQL engine running the business logic. It's all done seamlessly with little work for most cases and when you need something complicated you can easily create REST calls. I'd check it out but don't be put off with its "corporate" look, you can change any or all of the look and feel. 
True, this is much better. I'll change the copy; thank you!
You can't do this from the browser due to security concerns. However, Electron has no such concern. Electron basically makes apps that run on javascript/html/css but act like actual desktop apps. I suggest you take a look at it if you want to mess with the file system
http://javascript.info/ -- specifically part 2. http://eloquentjavascript.net/ -- new edition coming out https://angular.io/tutorial -- I think this is one of the better online tutorials for a modern framework p.s. The "no Microsoft experience" part is not relevant. 
Why not just submit a pull request... this seems like you‚Äôre stealing a lot of the thunder. 
upvote!
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial
Looks really interesting. I agree with Madwill. Make the docs more professional (and write actual docs) and this could be very good.
Wouahhh html element to stream! Insane ! 
You *can* do this if you're willing to set up a local server on your machine and have the server do all your file loading/saving (which you'd probably call with AJAX from the browser). Since the server is on the same machine as the client, there are no problems with latency, packet loss, etc.
Looks awesome. Suggestion: `td {text-align: center;}`
The pull request for the fix was submitted by someone else and joined already, but he never updated the npm release thus the current version you install via npm or yarn is still bugged.
If it's Internet Explorer and you run the file locally you can using legacy ActiveX objects if they are enabled. Instead of asking what you can do, maybe describe what you're trying to do and someone can tell you how.
Still i n s e c u r e
Well, it is better in some ways. It's open-source, fast, light and very easy to learn. Vue.js is less opinionated, but some might find it as a disadvantage. It all depends on a project's requirements after all. If you are struggling to choose one, take a look at an overview, it also contains samples of CVs to show you how a great [Dedicated View JS Developer](https://mobilunity.com/blog/vue-js-developer-for-hire/) should look like. 
Yeah already developping a big project with Vue webpack Typescript and Vuex. I'm realy loving it
Even if I misheard 'declared' as 'defined' (and I'd never used 'declared' before) and they said "How can it be undefined if it's declared?", it still doesn't make sense with how JavaScript works, as just declaring it sets it to 'undefined'... No matter how I cut it, what they were saying here just doesn't make sense. So I'm assuming they were making mistakes or misstating things, but this was just one example; they were right about many things but this was just one bizarre example of the many they had, maybe I'll post the others, if I can remember them accurately.
JavaScript is static files, drop them somewhere web accessible and you're good to go. A public Amazon S3 bucket or your own localhost will get you going. If you're getting into transpilers then there's more to it, but I wouldn't start there unless you feel like just jumping into Angular 4, in which case you'd be well served to just make use of angular CLI and typescript. /Meander
The react example is really confusing and bare. Seems like way more boilerplate and custom syntax than redux, where all you do in a view component is pass/retrieve things to/from the parent...it does not need to know it's a redux connected component. https://github.com/giapnguyen74/gstate-examples/blob/master/react-gstate/index.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [giapnguyen74/gstate-examples/.../**index.js** (master ‚Üí af88e9d)](https://github.com/giapnguyen74/gstate-examples/blob/af88e9dd6c7f8ed833fb061a5831ba27f3df5c21/react-gstate/index.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Ha, was about to say the same. The ORM is just wonderful, not much out there that comes close.
So... is Next good? I'm looking into using it for a project. So far it is really nice. But it also feels really similar to how meteor felt at the beggining - which was great for a long time until the lock-in kept it behind the curve too much. Anyone looking at next thorough a similar lense? Thoughts?
I can see this as an example. But just because you can fork something doesn't make it non-monolithic. People can and have enabled Meteor to use different databases and different view layers and even different programming languages. The difference between a framework and a non-framework isn't just that you can change it- that's the point of open source. When you create a boilerplate which enforces an application structure or code style, it's a framework. And if people hate frameworks so much, why do they keep using the non-monolithic tools we now have to create monolithic frameworks? Give a man a boilerplate and he'll make a SPA. Teach him how to use the ecosystem and tools and he'll make as many as he wants.
the link is my trivial hoc gstate. It is close with apollo graphql or relay createfragmentcintainer than react redux which implement declarative data pattern. refetch api is useful for implicit data fetching. when your component query hit a onwatchcallback it will trigger data fetching once. so if you want to force the callback refetching new data you should destroy old watch function and call new one.
Would probably be a little smoother if it used `requestAnimationFrame()` instead of `setInterval()`
Translation: we can't find anybody with the fundamentals that's also a good cultural fit.
"Your scientists were so preoccupied with whether or not they could, they didn‚Äôt stop to think if they should"
True, I see your point. My bias lies in the idea that full stack frameworks require a bit of a "lock in" you have to do it the rails way, or the meteor way and are locked in to specific proprietary code that is very hard to opt out of. The idea for this was to show you can create an equally robust ( if not more ) application without the said "lock-in" and instead replace the proprietary code with open source alternatives that are much easier to swap out if you choose to do so. Don't get me wrong this is a big app but ~90% is made up of small open source packages. A bit like a configuration of micro frameworks rather than a single custom full stack framework.
I tried rather hard to implement a "tap to copy paragraph to clipboard" on iOS (10.3) Safari this year. Still not possible, as you say! Can't remember whether it worked on full Safari, but I'm doubtful that it would have anyway.
It took about 3 days for me to complete the first appearance, later I added/edited features as people suggested me. I have been seriously coding for essentially 2 years now.
Oops.. forgot about that. Thanks..
From knowing nothing, I spent 3 months working all day with JS on a large professional project until succumbing to the allure of TypeScript, which took me another 3-6 months to get the hang of (as part of a stack of tools). Now, I feel all-powerful and ready to approach any problem; and TypeScript has pleasingly made my JS better, in fact!
thank madwill i will consider change title.Im a lazy programmer and the project is my crazy ideas. I not intent to marketing it just want to share and get feed back to improve my ideas.
It's not to serve the files, the app is built in Node to convert standard HTML to Google's special AMP tags. That's what I see, anyway. 
thank , english not my native language. I will try my best for documentation 
Use AMP for the SEO benefits, not because it's actually any good on its own.
AMP speed comes from a few other aspects of the service, some of which require a validation check that the document is actually AMP. The AMP runtime is another layer of optimization not necessarily present in the HTML. It is mostly a SEO and Google thing though.
Was expecting to see Sails here. Any opinions people have on it? (never used it, but was curious about it)
&gt; The AMP runtime is another layer of optimization not necessarily present in the HTML. spoken like someone who's never actually looked at a Network Request log of an AMP page. https://imgur.com/a/OPVdN
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/9MLBtFk.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Also Translation: The people applying have far greater productive skill than we are looking for, and rather than acknowledge that these people could easily learn these less marketable skills if their job depended on, we rather find another low effort employee that we could underpay without risking them jumping ship to a better opportunity that they deserve.
And Electon sits on top of Node.js, which is the thing which allows your computer to read &amp; write files like the OP wants.
ActiveX is legacy technology which is widely regarded as something to avoid though.
In a world where SSL is free, not having it on any site with interaction, is a bad practice and should be warned about.
Chrome also doesn't allow data-urls to get too large, those files then only work with blobs. Took me a while to find out why with some documents my save function failed, while it worked fine with others.
Can you please explain a little bit about points 1 and 2? What other alternatives are there to maintaining the state of an app? Also, why would it be a PITA to unit test?
Sure. Still, *it is* possible and in a corporate environment you can be picky about your browser support. Again, if OP would explain what they want instead of how they want to do it then people could offer better advice.
I think you guys missed his point. Its insanely frustrating to work with someone that "only knows a few frameworks", and not the language itself. My collogeues and I have found outselves having to explain things like how cascading works, that functions can return things, and why not to just copy and paste things off the internet. Its like having a guy that can fly a plane but cant drive. Day to to day you are going to be driving not flying a plane.
Does it work correctly or something is off? Check logs for derivatives.
I'm still lost on the improvements of this over redux. The reasoning behind this isn't clear and simply goes into examples. Whats wrong with updating data in two different spots on reducers? What about simply wrapping store.getState() with utility selectors or using subscribe (the store is an observable so go use Rxjs) to merge data and create other ways of interfacing with React. Where do I get extendability with this state management solution? Example measuring actions in analytics to see engagement, logging ...
Here is a list of threads in other subreddits about the same content: * [HTML5 JavaScript Canvas Basic AI Neural Network](https://www.reddit.com/r/math/comments/78cro9/html5_javascript_canvas_basic_ai_neural_network/) on /r/math with 0 karma (created at 2017-10-24 10:14:57 by /u/zslava88) * [HTML5 JavaScript Canvas Basic AI Neural Network](https://www.reddit.com/r/NeuralNetwork/comments/78cogg/html5_javascript_canvas_basic_ai_neural_network/) on /r/NeuralNetwork with 1 karma (created at 2017-10-24 09:59:25 by /u/zslava88) ---- ^^I ^^am ^^a ^^bot ^^[FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block](https://www.reddit.com/r/DuplicatesBot/wiki/index#wiki_block_bot_from_tagging_on_your_posts) ^^Now ^^you ^^can ^^remove ^^the ^^comment ^^by ^^replying ^^delete!
That's awesome. I recall doing this through Node over a year ago, but I didn't know about Electron then.
&gt;member wat.
Sorry but those are cute standards but you got to go with the market... If everyone is looking for React, Angular, Ember developers. You can't show up, and say you really know "Type and coercion, closures..." and "CSS Specificity..." well. IMO, These are minimum requirement to even call yourself a front end developer. However, you should blame the market not bootcamps and junior developer etc... 
Sometimes a friend or team member will introduce me to something they like. Sometimes interesting stuff shows up on this subreddit, or in questions on Stack Overflow. Mostly I try to look for solutions to problems I already know I have, which makes searching pretty easy.
Here's the demo app I've been working on. It displays treasury bond yield data from the Fed. http://yield.io/
These analogies kill me. The point was clear, but there's an important underlying point to be made. That of cheap, abusive employers as a 'culture'. If you want someone who put in the time and effort to dig deep into a language and who fully understands what is going on to become a reliable and responsible developer -- capable of handling unforseen circumstance -- you have to pay for it. Newblood wages only afford your bog standard 'pilot-only-can't-comprehend-road-rules' developers.
persistent storage is pretty awesome these days on chrome. It's like 10% of whatever is available, but libraries like DexieJS can store basically anything. And you can do it in a webworker without tying up the main thread.
This has always been an issue in the web community afaik. People learn libraries instead of programming because it's easier I remember when I was just learning how to program in JS about 10 years ago and you couldn't find any tutorials for how to do anything without JQuery. If you asked how to do something JQuery couldn't, you'd get an answer that it's impossible
This is still doing it through Node, just embedded in Electron ;)
follow people on twitter and github. You will see what they like and are working on.
The perceived speed comes from the AMP components + runtime's optimization of items in the browser's rendering path. That seems more complex than an edge server + some bells and whistles to me. Performance of either will depend on the overall service architecture, that is what AMP is trying to improve on, ostensibly. AMP forces developers to write against a more efficient spec, you can compare whatever in HTML to whatever in AMP and find numbers you like. But AMP validation force removes the bloated desktop stuff that creeps into pages via responsive design.
I've tried twitter, but I'm slightly new to the industry. Is there a list of authority-type people I can find to follow?
https://google.com/search?q=member+grapes
* Youtube recordings of industry conventions * r/javascript * SmashingMagazine
1. Right now Redux seems to be the hot thing. But my comment is really less about state management and more about decoupling. AFAIK all other modern frameworks take in a basic js object for rendering purposes. They don't care what you are doing for state management, as long as you can get a js object out of it. This makes it a lot easier to swap out either the view or model layer, without affecting the other. Backbone is different. Pretty much all of the stuff that a Backbone View does for you necessitates a Backbone Model reflecting the state. If you are not using a Backbone Model, then a Backbone View is just a class with the Backbone.Events library. And if you want to switch out either the Model or View, it is a lot harder. 2. It's hard to quantify this. I can just say from experience that writing unit tests for Backbone/Marionette is a lot harder than other frameworks. A few examples I can think of: * Testing views is really hard for a variety of reasons, including the need for a Model. * Backbone will, under the hood, wrap the functions you pass in with bindings, meaning that you get really annoying errors when trying to stub said functions. * Testing Backbone events is non trivial for both of the reasons listed above.
Look up the You don't know JS books. They're available online. 
*A few to get started:* - Addy Osmani - Dan Abramov - Brian Holt - Ken Dodds - Michael Jackson - Ryan Florence - Tobias Koppers Add these, then add more via twitter suggestions
Learn node. 
Another thing you can do is check out engineering blogs like Airbnb, Uber, Netflix and Twitter etc... for interesting technologies they use and people to follow. 
Looks good maybe I'll just add this and that and oh god I've recreated Angular1 
It's good for one thing: embeds. You could write your own asynchronous embedding logic based on user's scroll, or you could just write an embed tag. Similar for ads. I don't work there anymore, but I used to work at a media company and we found our ad revenue was higher on AMP pages and required much less maintenance. 
Exactly this and on the flip side when I put my resume out as a JS / HTML / SASS developer I always get asked ‚Äúoh but do you know react / angular / backbone / bootstrap?‚Äù Unfortunately it seems better to have the fundamentals but still include as many keywords as you can
Thank you!! Please shoot over anymore if you can. I hope the micheal jackson insert isnt a joke and theres a well-known dev named MJ lol
What if you want to store local data AND export? Normally I'd use LocalStorage and just save the .json file. Should I do otherwise?
Never thought of this like that. As you already told, we already sent out the data as JSON or with some sort of communication protocol. Anybody can inspect it from the devtools-&gt;network. Thanks for your point of view. It helped a lot! (BTW the r represents radius.)
Didn't work without South Park context.
I don't really see a problem with not supporting a browser on other operating systems. That has no bearing on whether or not the browser is spec compliant. I work a lot, do a lot of cross-platform testing, and the ones that have the most special snowflake behavior for me are still Edge and Firefox. Chrome has nasty little issues too, one particularly nasty non-standard "feature" Chrome has that has that's been absolutely wrecking my code is, if you manipulate the size of a DOM element above the `scrollTop` of a scroll container, then it will "fix" the scroll position for you. No other browser does this, and when trying to implement a generic occlusion library it's a mess - I end up having to unfix what Chrome just "fixed", usually. Firefox will stop scrolling altogether whenever you modify scrollTop, so good luck trying to create a nice generic occlusion solution. And Edge forced us to re-write our measuring strategy, we were using Ranges but Edge has completely different behavior than all of the other browsers. Special snowflake behavior is everywhere. I'm not saying Safari is absolutely better, but in my experience it's about the same level as Chrome, in different ways. And it's fast as hell - way faster than any other browser by far.
Yeah but "you can use yarn instead, and these libraries to get extra features" isn't exactly hard hitting information, now, is it?
Wouldn't work nowadays... CAPTCHA takes the fun out of it üòî
Sure, that's very possible. Ill give a little overview, (excuse me if I go a bit basic hard to judge your experience level from the post). You have a Client, the 'single page app', that you ship to the user's browser. You also have a Server, the API / server that the Client communicates with - this code is private. It's possible they are the same thing (the Server can, but does not have to, "serve" the Client). So, the Client should authenticate with the Server - you can accomplish this a large number of ways, but you might look at PassportJS if you're using express and want it to "just work". The client asks for listings: `GET api/listings` - with the GET it will send along a token it got back from the authentication process, so really it might look like: ``` // Client.js (included in the index.html) const API_TARGET = 'localhost:9000' fetch(`${API_TARGET}/listings`, { headers: { AUTHTOKEN: 'some_secret_code_which_identifies_me' } }).then(listings =&gt; { console.log('I got listings!') // Do frontend stuff with listings }) ``` On the server, it would do something like: ``` server.get('/listings', (req, res) =&gt; { // req.user will be set via PassportJS, but in reality it could just be any "validated" secret (ie: as long as the thing the user gave you matches some existing database on the server side, we know who they are enough to return the data) if (req.user) { // IE: Get all the listings for this user Database.listings.find({ userId: req.user }).then(listings =&gt; { // And send them down the wire! res.send(listings) }) } else { // Reject people who arent logged in. Or maybe show some demo data? or public listings? Up to you! res.sendStatus(403) } }) ``` Then you just need a system that determines if a User is allowed to create listings (use the ID (`req.user`) to query some database and check if they're in some list of people allowed to create stuff? And some way for those users to add Listings and put them into the same database we query above!
Sort of odd for this to get dropped here with no comment. Is there a significant update or something else that I'm missing?
What even is this
Apparently, politics?
Not pointing the right problems with NPM and similar entities. First I'm a (far) leftist and I'm not fooling myself thinking "Oh this dude get it, where can I sign ?". As a CEO, for me, his only prerogative is to expand his business not defending social justice. Social sweet-talk doesn't mean anything coming from someone like him. Instead of trying to make some kind of anti-"left wing propaganda" npm&amp;github-dependant alternative, maybe we could try building an open-source decentralized full blown package manager, without master repo or private company behind it.
I like the orange, it makes it easier to find the icon.
But do you know CSS... Your point is spot on. Noone is hiring great HTML, CSS, Javascript developers. They want and beg for jquery, react, angular...etc. developers. Anyone paying attention will focus on the marketable skills that will get them in the door. Besides, if you are halfway smart about your career advancement, you are going to choose a segment in high demand and that is relatively recent to avoid competition. If you we were to go with jQuery as your foremost skill, you will be competing against developers with up to 10 years of experience. If you go with React, its more like 4. BIG difference. That puts React within reach for entry level / junior developers, and with less competition for senior positions later on.
Not gonna lie, I love the orange. Blue is rates one of the most inviting UI colo(u)rs, but orange made it unique.
No, where did the 10 come from? That was meant to illuminate that you already do math somewhere to convert from your units of money to the screen coordinates, whether that's r, cx, or cy. If you do that math server side, and send it instead, you should be able to avoid sending pricing information until a later point. Though even that is security through obscurity. Unless you don't want your users knowing the prices at all ;)
Not for me, I have sublime right next beside it so it makes it harder to find. The blue definitely helps me out.
ditto, I kept clicking Photoshop at work because of the similar colors. Since they changed i've had noticed way less accidental app launching. 
It would be more interesting to see error plotted as a function of time. I understand how difficult that would be if you're using the raw canvas API though.
I don't mind the colour but I hate the black rectangle in the background. Is there a way to use the old icon on the dock icon?
There is. He's co-author of React-Router, creator of the Unpkg CDN, and partner with Ryan Florence in the React Training company.
Oh right, I get that Electron is through Node, but I haven‚Äôt otherwise used it. I often wish for a file writing solution on the front end, though.
I know you can on mac - if you search through the issue referenced in the post you can find the method easily.
What makes you think that it might not be working correctly.
I would say the "no Microsoft experience" is a benefit üòâ
Looks like a blue fish instead of an orange one now. Like a vector of the bluefish editor icon.
Good point. it shouldn't be difficult, if we save all errors in an array and loop through them each training session, using ctx.lineTo()
You're correct that usually D3.js manipulates SVG elements. More generally, though, D3.js data-drives DOM elements. You can have it data drive JavaScript objects as well, and thus it can even work with &lt;canvas&gt;. In your situation, SVG would likely be the best approach. Under the covers, when D3 binds data to HTML elements, it attaches each datum to a special property on that element. As you've noted, a user who knows how to use the browser debugger can already sniff any data you've sent. If you wanted, though, it would be a simple matter to filter your data to only the data necessary for visualization, and use that transformed data as your D3 input.
just making sure, Im not an expert in neural networks.
&gt;Learning to live with left-wing propaganda machine is necessity in Javascript field npm install seize-means-of-production?
OP seems to just post things they either found interesting, something new to them, or trying to gain karma by posting links from popular tool like Flow. Judging from their post history that is.
Rather than hooking into the browser api to create the image, create it in jsx, then show/hide it via css via react. The src can be empty or filled based on the data, same as anything else in react.
they did update the design of the page but I don't know if they already did that before when they updated the React pages
how? it's not sensitive information. sometimes the cost doesn't justify the implementations.
I believe that mutable javascript object with all its faults; is a natural and efficient way for manage complex state gstate rely on power of object ref and circular ref to solve several state man problems : state relationships, components adhoc communication, encapsulation, so on and gstate nearly as fast as mobx so it could be faster than redux. the motivation is extensively blog in weeks ago when i start ed the project. i still work on to improve the project i could implement time traveling later , currently i working on distributed state management on server side
Same.. I use both VS &amp; VS Code and orange is much easier to tell them apart (VS is purple).
I hate this idea that a company should rebrand every fucking year, or make drastic changes to color schemes for no good reason. On my phone, monthly I go looking for an app to find that the icon has completely changed. I don't want all my devices following suit.
good to know, thanks for spotting this!
Ah, thanks for that. So it looks like Chrome won't be getting support any time soon (if ever). Kinda disappointing.
This entire debacle was hilarious. It's a good thing though. It shows the community really cares for VS Code and that the team building it do indeed listen up. Win win all-round I say.
I don‚Äôt care for the color, but it is cringe worthy to see Microsoft once more going back on a strong design decision instead of embracing it. First fanfares than a big excuse than back to how it was before because that‚Äôs what a loud part of *the community* has demanded. A perfect recipe for a Microsoft branded way of improvement and innovation. Meh. 
Right? I hate when companies change for no reason, it's so dumb and pointless and it ends up being *worse* when they change it.
Can we as a community get sublime to do the same? I'm not a big fan of their new icon. 
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/3x91ac/why_not_to_hire_people_who_like_es6_classes/cy2o6zj/)^3 from Eric Elliott.
I didn‚Äôt even realize the color changed...
Ughh, I liked the new orange icon. I have both VS Code and Visual Studio open when I work, and I kept mixing the two up because they're so similar :/
thanks for your reply.I will consider about these.
Now... to remove the binding so it only goes one way!
lol
I didn't have a problem with the color at all, but I did think their original icon was more elegant and recognizable.
This is the sort of drama I live for. The move away from the color blue was the WORST POSSIBLE THING.
&gt;You're my boy, Blue!
The "I don't fucking care" faction is woefully underrepresented
That's funny. I didn't like it, but it wouldn't have occurred to me to bitch about it.
Ah yes, the ostrich technique. Code you can't see is code you don't need to worry about!
It's like anything popular, once you see it enough it grows on you. Pepsi could change its logo to the most god awful thing, but after exposure to a few hundred commercials, it will grow on you. Being as the software is more important to us than the logo, we will keep using it and see the logo day-in and day-out, whatever they choose would grow on us. After awhile, we'll be used to it, and anything different will be cause for comment...for a bit, till we get used to it.
They're about like labels IMO - never necessary, not needed if the most complex logic you every write is a for-each loop, but immediately convenient once you start writing actual algorithms.
You are very bad at admitting you were wrong.
I do sometimes wonder how many front end developers can fetch a JSON from a URL using fetch or XHR, and render it to a table, using just vanilla js and DOM methods like document.createElement 
First you write a function like function add(a, b) { return a + b; } Then you call the function like add(1, 2); But then you really quickly unplug your computer. And it started to apply but it never finished. Yep.
Ditto. I would of kept including the body-parser package in projects.
I have bad news... you might be color blind.
Does it still need to be manually applied? I recently ran into an issue where our api proxy middleware needed to be applied before the body-parser, and I'm kinda wondering how that's gonna work now.
VC Cod is my favorite code editor!
Silent majorities :(
I realized it. I didn't care.
It took me 10 minutes to get over.
Good exercise. Important to remember that frameworks are code, not magic. Doesn't really need an article to go along with it. English could use improvement, although *de hecho es mejor que mi espa√±ol*, so.
Yes, same way you'd apply `body-parser`. The options judging from the commit are passed directly to the underlying `body-parser` lib. So it should be an exact 1:1
It shows that people will pitch a hissy fit over nothing because they feel entitled.
Let's see how many downvotes I can get this time. https://www.digitalcitizen.life/how-change-icon-shortcut
Lame, the blue icon isn't as good imho
You just do express.&lt;body-parser function&gt; instead of bodyParser.&lt;body-parser function&gt; Example: Latest(4.16.0), Built in way: const express = require('express'); const app = express(); app.use(express.urlencoded({extended: true})); Older, Seperate module way: const express = require('express'); const bodyParser = require('body-parser'); const app = express(); app.use(bodyParser.urlencoded({extended: true})); 
I like the new color
Because...we don‚Äôt care lol
what about cookie parser?
I deeply enjoyed the backlash from a folly of humanity wasting outrage on trivia standpoint, and also from the standpoint of much preferring the original icon, or at least the color blue. I don't know what the new one is supposed to be.
I actually wondered where the fuck Visual Studio Code icon had gone. I had the same complaint with VS2012 when they turned all the icons in Solution Explorer Sidebar grey. I've used VS since 2013 and most of the icons for files in explorer hadn't changed significantly since there i.e. colours and shapes mostly the same. So when a company makes a change that large when you are that familiar with the UI you are "visually" lost. I actively kept using VS2010 until fairly recently (most of my clients haven't upgraded server infrastructure in about 10 years so .NET 4 was the latest version they could run anyway). [Obligatory XKCD](https://xkcd.com/1172/)
thank you for this
And this one was Uber bad
&gt; function can return things lol. I can sympathize with frustrations working with devs who only know frameworks but are seriously lacking in their knowledge of javascript. But this article starts off by saying they want someone who knows WP and Foundation. Hardly a "fundamental" skillset imo. 
There is an image with a pawn whose shadow is a king, and another image with a puny dude flexing with a shadow of a bodybuilder. I get the point already.
Fan of the orange personally and a little sad it‚Äôs going back to the blue.
Sorry but this is just plain stupid advice. Some ego is necessary to instill a drive for excellence and a sense of pride in your work. Ego and humility are not mutually exclusive.
check [this](https://stackoverflow.com/questions/10599933/convert-long-number-into-abbreviated-string-in-javascript-with-a-special-shortn) post
Coming next - icon customization! Choose your own color!
I like orange tho...
How dare they do what the community wants
Kept clicking on Photoshop when it was blue, kept clicking on Illustrator when it became orange Should've gone with the insider build since I don't use Dreamweaver I guess
It's not about that. This topic indicates that a lot of people liked it or didn't give a shit. But a few very vocal people gave the impression that the community wanted something and the designers, rather than stand firm by their expertise and decisions, completely caved. Laaaaaaame.
I was looking for vs code for 10 minutes on the dock. I thought a bug hid it while the app was still working. That orange icon was new and surprising, but did not bother me. I got used to the blue though. The team needs to focus on the importance of branding 
It was important to change this for colorblind people. Orange vs green is no good for me
Make a drastic change because of people whining for example?
Here's what I don't get. Why do we care what the icon is? Why on earth would you ever click on that nonsense? You hit Windows and type VS Code and it comes up first. I assume Mac has an applicable launcher, and surely Linux does as well.
That makes sense. I hope they will keep them included, it's a small bit of data for the few people that would like to change it.
I want to keep the orange. I say we branch the entire project!
Luckily my photoshop is across the bar but display fusion was right next to Code so I totally know what you are talking bout, it's a pain when so many icons are around the same blue and you have to close apps you launch on accident.
I don't use Sublime so I've not had that problem, I'm glad the blue works good for you and other people, the orange worked good for me because I've several blue icons near it. Really I think it's preference either way and I hope when they go back to blue that they atleast keep the orange icon included for those of us that want to use it.
Thanks for your helpful and detailed answer!
OK now I get it. The best option is to make calculations on the server side as you mentioned. Thanks for your help!
What in the world is the tilted black rectangle all about? Is it some kind of Microsoft design thing? 
Time was wasted. Magnanimous refrigerator, vociferous and succulent. Praise the verisimilitude. 
Here is a list of threads in other subreddits about the same content: * [JavaScript Functional Programming](https://www.reddit.com/r/programming/comments/78jabv/javascript_functional_programming/) on /r/programming with 0 karma (created at 2017-10-25 06:14:11 by /u/srdjan_sukara) * [JavaScript Functional Programming](https://www.reddit.com/r/javascript/comments/78j2ay/javascript_functional_programming/) on /r/javascript with 0 karma (created at 2017-10-25 05:40:14 by /u/srdjan_sukara) ---- ^^I ^^am ^^a ^^bot ^^[FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block](https://www.reddit.com/r/DuplicatesBot/wiki/index#wiki_block_bot_from_tagging_on_your_posts) ^^Now ^^you ^^can ^^remove ^^the ^^comment ^^by ^^replying ^^delete!
Thanks, that worked.
Why switch back, how about make it a setting. Then let users choose. In all honesty I'd prefer they work through bugs that affect the error.
Learn from China company, man, just release a skin plugin, let user choose what whey want, user take responsibility for themselves, besides, sell skins, icons.
Yes IndexedDB is way more powerful than a simple localStorage, yet it's also way more complex to use... It really depends on the nature of what you want to store ! If you want to do both local storage and export, I can only advise you to do a proper database abstraction layer. This way, either your data may come from IndexedDB/localStorage or an imported file, but you won't have to change (much) your app.
&gt; Here at Warp &gt; wearereasonablepeople.nl Nice. But how have you not been sued yet?
Simply said: Type safety.
Why would I be sued :D
yup which facilitates easier debugging.
code .
Thanks for all the little discussions and the replys. I'm trying to make a little text editor, that is running in the browser completly and can read, modify and write files from the local storage. So, the user have to open the editor in the browser and can than work offline, at least as long as they don't close the site. Node would be there the second choice, Maybe I would write my editor in Node too. What I would really need is a method to read the filepath out, if I open a file.With this filepath I could then easily override the file on the hdd with the file api. Yes, I know, that I could read the value of the file input field and I know, that the result is C:\fakeroot\filename.txt because the security, but I think, there could be way around. But if there isn't a way around, that I would need to search a plugin or a write self a plugin to read and write files and get the content of a directory. Can I use chrome.fileSystem in a website or only in an extension? Are there similar APIs for Firefox, IE, Edge and co?
const bodyParser = *unrequire*('body-parser');
Firefox dev = blue, vscode = orange. 
We should form marching bands and parade through the streets!
No. The drastic change was from original to whatever. If they started with orange and left it that way, I wouldn't give a shit.
Sure why not :) Everyone loves a party :)
This needs to be upvoted more. In truth, this is how I open projects in VS Code. 
&gt; Anyone have any websites/resources &gt; that can help me with this process? 1. go to some popular JS project on Github 2. check it to look what technologies are use within it (for example lookin at `package.json` will tell you what JS libraries are used) &gt; finding problems devs are having 3. Go to `issues` on GH and read them (included closed issues. Look how they were solved, why they came up in the first place etc.)
Why would I be sued?
https://en.wikipedia.org/wiki/We_Are_Reasonable_People
I believe the company name was inspired by this record ;) But I don't think there's a risk of legal action
Meetings at apathetics anonymous are rather quiet affairs.
Nonsense 
This must have been a boost for the VSCode team. People are invested enough to notice and care when something is wrong in their eyes *and* there isn't something more serious for them to complain about than an icon. That many people getting vocal about something so small on its own rather than as an "and another thing" complain means they they must be doing a lot of stuff right.
No `undefined is not a funcion`
The problem is more to _limit_ the new technology that I'm exposed to. Reddit, Twitter, Hacker News, it's an avalanche of new Javascript stuff that I can't possibly all evaluate. Your tools sound like they are at risk of just increasing that problem.
Yeah, I wish they gave an option for what icon you want.
wanting to bitch was literally my first reaction.
Hi /u/OdeDaVinci, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, your request is maybe going to get answered here, but you may also want to try /r/learnjavascript Thanks for your consideration!
Programmers have also free time, and to many of them aesthetic matters.
I've seen @zakphi answer, if you are looking for an easier (and shorter) method, simply go for: **(x/1000000000).toFixed(2);**
If you ever decide to work with canvas (for this project or another) I strongly recommand trying PixiJS, I've made mini-games with it, compatible with mobile and IE11, it is really easy to use and has a powerful community :) http://www.pixijs.com/ *I'm not affiliated to PixiJS in any way :P *
Part 1: capturing image - there are a few options for this: https://www.html5rocks.com/en/tutorials/getusermedia/intro/ Part 2: converting QR code to text content - you can either 1) use a library or 2) implement it yourself by reading the ISO standard or reference implementation. Since you are asking here, I assume you would go the library route. [Here](https://github.com/LazarSoft/jsqrcode) is one w/1 minute of Googling. In fact, [here](https://github.com/dwa012/html5-qrcode)'s an implementation of someone doing exactly what you said. 
At first glance, but it seems to me that it helps code maintenance more than anything else and it just feels something else to learn... E.g I'm watching a video, where it says "concat is not a function", but if you're passing a string to concat, surely that should be obvious right? I've found that using better naming conventions circumvents this need. ... however! I can really see the benefit of using it for larger projects where you have many developers, especially if some are C# developers, looking for more hard and fast rules.
Naming conventions are fragile, if one person doesn't stick it everything falls apart. Something that might look obvious to you now will look alien to you in 6 months when you come back to fix a bug. The amount of times TS has saved me having to look at my browser reload and run the code is very high
You might want to check this [medium post](https://medium.com/arjs/ar-code-a-fast-path-to-augmented-reality-60e51be3cbdf) where it seems to be already implemented
 **Type Safety in Refactoring** Unless you work in an agency/freelance, most of your work would actual be updating/maintaining old code (even your own). Tech companies don't throw out their 5 year old code everyday. In those cases, type safety is invaluable, as it allows you to modify your old code with some degree of confidence. Automated tests would give you significantly more confidence, but UI code has traditionally been difficult to cover with automated testing. **Using Type System for Reference** With a properly typed program, you don't need to read/run the code to figure out upstream API's argument and return value types. The type system would tell you whether the arguments and return values are number/boolean/string/array/etc. It is also good for learning new library/APIs, as the IDE would tell you that you are using the library/API incorrectly. However, the setup cost might be a little high depending on how easy/hard it is to find type definitions for those libraries. **Using Type System for Prototyping** In bigger projects, where people often talk through implementation or whiteboard stuff beforehand. In those cases, type system would give you the tools needed to define exact payload and boundaries and help divvy up the work. **Using new languages features before wide browser adoption** Since TypeScript is a transpiler, it allows you to use new ECMAScript features before they are fully adopted by all the browser vendors. Of course, you can get this with Babel as well. 
What problem does this solve?
Type safety to include custom type definitions. This buys predictability, better performing code, and error reporting at code writing time. * If you want your JS code to compile in the JIT you need predictable data types and no type recasting. TypeScript helps enforce this. This is a 100% solution, but its a huge help. * Here is a custom type definition file I authored no too long ago: https://github.com/Unibeautify/parse-framework/blob/master/index.d.ts . The interface declarations are custom type definitions. When you are writing code and a function expects a certain number of arguments of specific data types or certain object/array with a specific structure VS Code yells at me when I get this wrong. This helps me keep the code's structure uniform and reduce maintenance errors.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Unibeautify/parse-framework/.../**index.d.ts** (master ‚Üí 35f4ddd)](https://github.com/Unibeautify/parse-framework/blob/35f4dddceb0270393ab7b0eddbd0dad8aa85f088/index.d.ts) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
1. No need to install `body-parser` on top of `express` That's the only "problem" really.
Problem with `new` operator is that it is a language feature, thus difficult to decouple for purposes of testing. * Instead of using `new Klass()`, create a [static factory method](https://en.wikipedia.org/wiki/Factory_method_pattern) ("[simpler explanation in Java](http://www.javapractices.com/topic/TopicAction.do?Id=21)"). You can easily spy on the static factory method, or even replace it for testing. * Have the constructor immediately call another method that contains most implementation, and spy/test on said method. * Create a subclass for testing (i.e. by extending the actual implementation) If you are trying to follow OOP closely, here are some full OOP solutions: * Use a full-on [Abstract Factory Pattern](https://en.wikipedia.org/wiki/Abstract_factory_pattern) or [Service Locator](https://en.wikipedia.org/wiki/Service_locator_pattern) * Use dependency injection, and inject different implementation based on whether you are running the app or testing. 
This however introduces *actual* problems... If there's a bug or security issue in body-parser, we now need to update express?
and seems like plenty of them are children who overreact to trivial shit
&gt; I deeply enjoyed the backlash from a folly of humanity wasting outrage on trivia standpoint do you ever hear yourself talk?
12 year olds usually have that reaction
but that would mean being an adult about it... how is such a situation possible?!
The only one that pissed me off was a couple years ago when jetbrains took all their icons and turned them into a generic splash of color with two letters. I guess I'm used to it now but I still wish they would use the old icons.
`body-parser` was entirely removed for 4.x until now. Since it's now an included dependency of Express, yes. I see what you're saying now. ü§î
Yeah definitely one of them ;)
Thanks! Could you also please provide a code snippet for the same? N.B. : Src function is imported from a module.
&gt; seems like plenty of them ~~are children who overreact to trivial shit~~ have opinions different from mine Really, why this hostility? 
Good point, the project we're moving into is something that will have a long lifespan. The more quality control that's included the better. 
jsperf
It's similar to the office icons and the W10 start icon, so I'd guess Yes.
That doesn‚Äôt make sense to me. The authors have been promoting a lightweight package for so long now.
If you don't mind my asking, what is the purpose of the test? i.e. what is it that you're testing? I ask because if you're trying to mock `Button` then `Button` is not the subject of the test, right?
Assuming ES2016+: Static Factory Method: class Klass { static createKass() { // just spy on this directly return new Klass(); } constructor() { } } Constructor calling another method: class Klass { constructor() { this.doConstructorStuff(); } doConstructorStuff(){ // spy on this method - Klass.prototype.doConstructorStuff } } Subclass: class KlassTestVersion extends Klass { constructor() { super(); // insert spy API method here } } The OOP solutions require re-architect-ing your app. 
I feel, more than type safety, something people don't mention enough. IDE integration! Since its a typed language and less of a clusterfuck, IDE can give you great integration with function signature, object types, docs, etc. To be fair es6 brought good auto complete but its still not up to par as for IDE integration. And that affect every minutes of work you do, every command you type will flow better with decent ide integration. 
Twitter is usually the quickest. Like on any other social network the downside is that people frequenting there often tend to suffer from personal issues even if they're very bright. My mute list is getting bigger every day to filter out virtue signalling, gender politics and liberal vs republican nonsense. What's left is still good enough to serve as a quick feed of what's going on.
At least it's not the ninth "scribble inside a circle" on my tool bar.
maybe your thinking of adobe like 12 years ago
The game works really well, but the "Go" button does not clear the previous game. Entering values twice can have [strange results](https://imgur.com/a/Kw3f0).
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/ao5WaGx.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dov3kxf) 
Still doesn‚Äôt change the fact that VS Code sucks. *drops mic*
r/iamverysmart 
Upvoted here, banned from r/graphic_design
I upvoted just to piss you off
I agree..
10 whole minutes? 
"Adults aren't ever allowed to complain." See how dumb that sounds even when you take the personal insult out of it?
Agreed. My dockbar is a field of blue and purple with VS Code and Hyper being the only non-conformists.
Apparently they really believe that people are not allowed to complain about or dislike anything. If their comments on this thread are anything to go off.
I don‚Äôt really mind it on Mac. I prefer the blue but it‚Äôs an icon after all. The orange does not sit with the other parts of the editor but eh it‚Äôs fine. What I would like is an icon selection. Having it rebrand without my prior permission annoyed me more than the colour. Also bad timing with sublime changing theirs.
How would testing that help a company decide between candidates lol 
I swear, it's like the VS Code version of every extension I also use in Atom has a bug that makes the extension almost useless. ES6 import autocompletion doesn't work, Parinfer... only kinda works, the list goes on. But my work laptop isn't super beefy and can't handle running Atom for long. Bleh. At least it's faster? No problem using Atom at home, though.
Maybe the people who liked it should have spoke more up, then.
Probably sits back and smiles at a comment before posting it.
Great advice from everyone about github and twitter, I do the same. I also find more information here on reddit, and I also check out github/trending maybe once every week or so.
Honestly, this is the most valid reason. I'm not colorblind, but in design you need to keep this sort of thing in mind.
Your reply is more valuable than that blog post and as a bonus took me much less time to read and parse!
So are we still in the "Embrace" step?
It looks like you're trying to parse as XML an HTML document that is not "xml valid". The problem seems to be that the page contains at a certain point some URL it builds and it has this: this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&amp;u='+encodeURIComponent(d.URL)+'&amp;r='+Math.random()); For a document to be valid XML, the parser expects that `&amp;` you see there to be written as `&amp;amp;`. So it looks like the parser you're using doesn't really like it and it throws the error. There are some suggestions in S.O. about using [Xml] instead of XmlService](https://stackoverflow.com/questions/19455158/what-is-the-best-way-to-parse-html-in-google-apps-script) but I cannot really say if that works or not. If you're only looking for some specific part of the page, you're probably better off picking it by hand rather than parsing the whole page. Take into account, though, that while you mention the `&lt;div class="info"&gt;` element, in the first code you're picking the first `&lt;whatever class="info"&gt;`, not specifically a `&lt;div&gt;` and then getting the first one (`[0]`) and it looks like there is a `&lt;li class="info"&gt;` in the page, hidden, before all the `&lt;div class="info"&gt;`. You may want to be careful there to avoid any confusion.
10 minutes of staring... I didn't want to believe this is something I have to life with now... It takes a lot of courage to accept such a major change.... Kek 
Hi /u/WikeyWo, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/keepinitcool, For javascript help, please visit /r/LearnJavascript. Thank you!
Crisis averted!
yeah this seems like an odd decision given the prior rationale for not including it, especially if the only problem it solves is the illusion of 1 less require. 
What's your point?
You mean a website that was not build by you which you usually visit? If that is the case you can build a browser extension that executes only on one site and changes that site according to what you want. There are always limitation in what you can do, but the notion might be useful for you. An example of a browser extension that changes the way a website works is Reddit Enhanced Suit (RES). Is that what you are looking for?
C:\Program Files\Microsoft VS Code\resources\app\resources\win32 found the icons in there, I'm just going to copy them somewhere else and set it on my taskbar's shortcut. I guess you could set them up however you want with just a bit of editing.
Got it, thanks for pointing it out! Will make it right..
What's that?
I thought that was a good sentence. 
What are you specifically looking for? It seems like you have the general idea: Write a Node server which has an endpoint which will read the file and return the data in whatever format you want and then have your website just make a call to that endpoint every 10 seconds or however long you want to have it update and display the data. Do you need advice on what libraries to use? Do you know how to do file IO in Node? How can we help?
Userscript is the way to go usually for simpler stuff. You can use greasemonkey or another extension to manage userscripts.
I like using the Insider version to get new features faster and the last two builds had no icon at all so it defaulted to the electron icon. The github issue for it was hilarious with a few thinking it had to do with the orange icon hate. FWIW insiders icon used to be green until it changed to match the release color.
rather than setting up a node server, why not simply update your python script to generate the data and return it in JSON format? so you can simply use setInterval from your web page to periodically fetch the data. I don't think you need any specific library here.. a simple jquery / axios should do the job.
Instead of text files better use JSON which was created for this purpose. Create the JSON file on the server (it is very similar to a Javascript object) containing the data, then use JSON.stringify() to convert the JSON to a string, push the file to the web server as you do now, and then use JSON.parse() on the web server to parse and access the data. Here is a tutorial: https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript
&gt; I have a website which does something which I want to permanently change unless I'm reading this wrong, you can just edit it yourself?
we are trying to test a function that creates multiple instances of a Button. So, if we could mock/spy on Button, it would be possible to write a spec for the function based on spied data and check if the button was instantiated multiple times. Does this make sense?
Cod... the fish... ;)
I'm definitely familiar with DB's, just never used IndexedDb before. Looking into it it definitely seems powerful and great for it's use case. But I had a question. Do you have a rule of thumb for when you'd use IndexedDb over localStorage? e.g. like over 100k total data, or over 1k records, or having to do more complex Db logic (joins, index lookups, etc). &gt;If you want to do both local storage and export, I can only advise you to do a proper database abstraction layer. Do you mean here a proper remote Db on a server or IndexedDb?
So when you are using jsonp, the callback name you are providing is going to be used by the server to construct its response. So, lets say that our callback name is showWeather. When you get a response back, correctly, from a server expecting jsonp, your response will look something like, showWeather({data goes here}), instead of just getting json back, like, {data goes here}. On your end, you need a function that matches that name, so, when your browser gets the response back, it can run that function with the data the server gives back to you. I took a look at the openweathermap page, and, I do not they deal with jsonp, just json. So, the reason why your named function isn't working, is most likely the openweathermap page isn't sending you your data back with the jsonp callback wrapped around it, its just returning you json data. In your ajax call, id just skip providing a callback (to the open weather map server), and deal with your returned data in the done method: $.ajax({ blah blah blah }).done(data) { showWeather(data); }
Very true. I recently switched to typescript/VS Code and the autocomplete from typescript is amazing. Very nice to start typing an object function arg and getting all your options in a nice pop-up.
Nope, I actually thought about this and checked! I ran it using this bit of code: $.ajax({ url: "https://api.openweathermap.org/data/2.5/weather", dataType: "jsonp", jsonp: "callback", jsonpCallback: "showWeather", data:{ "q": "London", "APPID": "5b72d586dd7fd8a9036a04859fa2a7c7" } }); I've mentioned 'jsonp' and 'jsonCallback', instead of within data, and the site correctly sends back jsonp data (wrapped in a function called showWeather). Here's my dev tools showing the output: https://imgur.com/a/Yi6Fa 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/loWxiR1.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dovf6gy) 
I'm not missing the point, I'm sure he's right. I also know that its been shown that employers prefer cultural fit to knowledge, limiting their pool of candidates. What culture are we talking particular to this scenario? Look at it this way, developers who worked in a period that weren't dominated by frameworks 90's and 00's are also now in their 30/40/50's. 
Not necessarily. Assuming `body-parser` itself gets a fix you could add it as a separate dep and require it that way.
Ah yeah I saw on that weather page that they just dealt with JSON, but, later I see that they have options to provide the callbacks for jsonp. They have an example api call, which doesn't use JSONP, maybe that would be the way to go: http://samples.openweathermap.org/data/2.5/find?lat=55.5&amp;lon=37.5&amp;cnt=10&amp;appid=b1b15e88fa797225412429c1c50c122a1 That just returns json, can you use that instead of jsonp? Are you getting anything in your console saying that showWeather is undefined or anything like that? I haven't had to use jsonp much, so, i'm not too sure what other quirks that people run into dealing with that, but, id assume that if it isn't working, you should at least be getting some error message in the console?
Me too, it‚Äôd be cool if they left the assets so you can set it whichever one you like
This is what happens when you let millennials program
I never minded the orange. But I love they used a Monty Python reference in their apology. 
It's pretty benificial for use Express. So either enough people used it to merit including it or they wanted to stop the ton of requests of why can't I do X with Express when the solution was body-parser. 
if it can push the data to your webserver directory as a json file, you can just fetch that from javascript every 10 seconds or so and display it, you don't really need much help server side here. You can use other formats.
While I really like type safety Angular 4+ use of Typescript goes farther into features that are exclusive to Typescript. Angular 4 requires the use of Class decorators for DI. That fundamentally changes how code is written to how it is after its has been compiled. 
don't remember the last time I clicked on Icon to launch something. On mac I use spotlight and windows the windows key and just type in what I am looking for and hit enter. 
but you still have to explicitly opt-in to `use` it, which doesn't really solve the second problem, and now people that don't need it have it as an unused dependency. I dunno, maybe I'm just missing something. It's a minor thing either way, but still odd IMO. 
I got pretty used to using breevy on windows and rofi on linux, I still keep the 10 or so of my most used things on the taskbar, it's convenient to be able to right click and see a list of recent work spaces. But for you I guess the icon color doesn't matter much.
This would be frowned upon because blublublub THE BRAND
It would be cool if they made a few colors available. 
I work for a design studio and work with rebranding companies for a living, so I would hardly call it trivial considering it's a whole industry.
not really, but I like the blue more just cause blue is my fav color. 
That makes sense, I considered making it red to match the rest of my stuff :)
Not to mention easy and safe refactoring! When you rename a symbol, for example, you can be pretty sure that nothing breaks.
Ok. A constructor is just a function, so you can mock `Button` as you would mock any other function. If you want, there are a few solutions already out there that extend Jasmine's spies to have a "class mock" (e.g. [this one](https://github.com/avast/jasmine-class-mock) allows you to `expect(Button.instance.count()).toBe(3);`) but the basic functionality is easy enough to write it yourself if you so prefer.
You can do that with any JS framework, it doesn't need to be survey specific.
Thank you for your informative response.
I don't think cookie parser should be the default since quite a few websites don't use cookies.
What you want is called access control. What you need to do is make sure a user can't make database queries to access informations he shouldn't see, even if he does manual API calls.
I literally don't even have vscode on my dock because this is the only way I ever open it. Color didn't bother me at all.
Well they modelled it off the "success" of adobe's rebranding in the past, but no I'm talking about jetbrains a couple years ago.
This is pretty cool... now if only it were possible to read the data from a currently-running NMS game...
I mean,... I fit the build he was mentioning and I'm under 30. I thought jquery was javascript at one point and when I heard about nodejs laughed because I thought it was stupid because JS was a horrible language and PHP was awesome. The stuff the cheap crowd knows has changed yeah but when I personally teach people JS CSS and HTML I purposely exclude frameworks till very late. I teach full node API before Express, and before Angular.I never mention meteor, or socket.io, only ws and the browser side raw ws implementation. People dont have the tools to evaluate these frameworks usually nor can the get themselves out of the messes the opinions of these frameworks can cause at scale. They can chop wood, not work wood. Its more career sound and practical to "actually learn the language", and currently things are derailed.
Which kind of defeats the point of having it included in the first place. Just npm install body-parser already? It worked just fine in the past, I really don't see the point.
If you put your own `callback` property in the `data` _and_ mark the request as `jsonp`, jQuery will send _two_ values for the `callback` parameter (the one you put in `data` and the random name jQuery generates). The OpenWeather API seems to be using the _first_ value it encounters and ignoring the second. And looking at how jQuery puts the parameters, it will put its own first and the one in `data` second. So, your call... $.ajax({ url: "https://api.openweathermap.org/data/2.5/weather", dataType: "jsonp", data:{ "q": "London", "APPID": "5b72d586dd7fd8a9036a04859fa2a7c7", "callback": "whatever" } }); Turns out to produce a call such as... https://api.openweathermap.org/data/2.5/weather?callback=jQuery211011307644997371258_1508954057131&amp;q=London&amp;APPID=5b72d586dd7fd8a9036a04859fa2a7c7&amp;callback=whatever&amp;_=1508954057132 Notice the _two_ `callback` parameters. OpenWeather will use the first value and call the jQuery generated function and ignore the second, yours.
Fork it! Visual Studio code (Purple Icon edition)
Autohotkey.
NOOO I FELL IN LOVE WITH THE ORANGE CAN I KEEP IT
YOU STOP DOWNVOTING THIS COMMUNITY US ORANGES HAVE FEELINGS
Wait.... What is this all about? I have never heard anything about this? Can someone explain? My VS program icon is purple?
It just gives you a confidence while working on your code that you otherwise don't have. I know I can refactor a function to change some parameters around and if it's now being called incorrectly in some far-flung part of my program the compiler will let me know. No tedious change-search-fix-change-search-fix-... refactoring cycles. No more run-crash-fix-run-crash-fix-run-crash-... testing cycles.
Ah, so there's a clash, because jquery uses the same name 'callback' as the API I'm using. Got it! Is there a way to make jquery NOT put its own callback? 
Is NMS worth playing now? I bought it at launch, found myself amazed at first, then quickly got bored with it. I never got rid of it though, as I always hoped it would get good someday.
screenshot simulator
(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ (\ .o.)\
Well, the thing is... why? I mean, if you're just going to put it yourself in the `data` section, then I find it better to let jQuery do its thing and then set the success callback. _Better_ in the sense that they -the `data` section and the callback setup- are separate things and serve different purposes so it makes sense to keep them separate. But in any case, according to the [jQuery docs](http://api.jquery.com/jquery.ajax/), yes, you can set `"jsonp": false` to prevent jQuery from putting `callback=...` in the URL.
Yeah this is confusing question. OP *must* be talking about wanting a userscript on a third-party site... right?
You do. But a quick search on Stack Overflow shows a ton of examples where someone gets a snippit of code using it and not realizing why it doesn't work.
Typo safety I shied away from it for along time, everyone said "type safety" and it seemed to be solving a problem that I did not have. Typo safety is more accurate for me, it allows your editor/ide to provide better completion options, it knows what properties/members and object/class has. Also, refactor safety, I wish the phrase "type safety" was not the convention as it gave me no clue as to what it actually provides.
On click to open a subnave, hide every subnav with a loop, then open the one you actually want open.
Yeah no, what you're saying makes sense. I read on Stack too, that it's better to also have the done function outside of the ajax call, instead of within. I really just wanted to know the **why**. Thanks for clearing this up! 
Even agencies use TypeScript for short-lived projects. It enables much faster development, especially when it comes to fixing bugs.
It's possible to make nested sub-menus with just CSS. They're all &lt;li&gt; tags. Submenu items have display: none until their parent node is :hover'ed.
Try TamperMonkey, I think it has this kind of functionality.
Thanks for the reference, but as I wrote its an action *type* and not an action...
Bullshit. Not every developer is at the same level and deserves a 6-figure salary. Everyone starts somewhere.
I do have more screenshots from that game on my system than any other game, by far
Plus mobile apps don't usually use cookies
that sounds like a heck of a lot of unnecessary network traffic. i would suggest.. - only generate the new file when a change has been made. perhaps set up a trigger in your database. - consider websockets to communicate from the webserver to the client as opposed to ajax. ajax requires making a new network request every ten seconds whereas sockets will allow your server to tell the client when there's been an update. imo, polling the server should be avoided when possible.
This fix is specifically for mobile devices, so we need to hide/display them via tap as opposed to hovering, which I would prefer.
I would give you the advice to stop looking at JavaScript only. To become a great (JavaScript) developer you need experience. Experience can be gained by always doing the same thing. But it can be gained much faster when you do as many diverse things as possible. A good developer/architect does not produce perfect solutions. There are no perfect solutions. Instead she / he understands the tradeoffs. Write a program in C. Learn yourself a Haskell. ;) Make everything an object in Java. Use two different JavaScript view frameworks. Have all your APIs been express monoliths? Maybe write some microservices. Deploy a Docker container! All these things usually are good at some things and make you go insane on other topics. Many open source projects have a motivation and design choice description. They are often more valuable than the actual code inside.
You'll need another library. Google JavaScript date picker, there's loads of them out there. 
I'd say probably an order of magnitude improved. Possibly the single most improved game from release to current, outside of long-lived MMOs. And by all the evidence they're still working on new things. Basically what we got at release was a tech demo. You might still find it dull, if an ambient survival simulator fundamentally lacks conceptual appeal for you. But as far as quality goes, it's come a very, very long way. My top tip, if you want some adrenaline from it; start a new game in survival mode. 
You can rip the function from [this gist](https://gist.github.com/baconbrad/e98bd957e85684f9e969). I used it in an idle clicker game.
https://github.com/gatsbyjs/gatsby
I'll probably get downvoted but the jury is out on the benefits of typescript or even static typing in general. I cant find it now but there's a statistic analysis of typescript and it showed maybe a 15% improvement in bug squashing, but no mention of test coverage along with it. There's also 'competitor' to typescript which doesn't require typing but it helps https://flow.org/ I'm personally not convinced that typescript can catch bugs that sufficient testing could catch anyway and I'm really not interest in typing everything if the bugs it catches would have been caught anyway. And if it does catch bugs, could those bugs have been caught with static analysis, like flow If somebody could point out an example I'd love to know, I might be a convert then but I've written a lot of code over the decades, I don't remember ever getting bitten by a bug that typescript would have caught. I have a feeling that if javascript had been typed from the beginning somebody would have come out with something called notypescript and extolled how awesome and productive having dynamic typing is.
There's no fundamental difference between TypeScript and Flow. I don't know why you regard the latter as just "static analysis" or as "not requiring typing". They do have differences but not as profound as you seem to convey.
&gt; would of
Actually my use case is like this. Inside a folder, I got 3 parent node.js script, and these 3 scripts are working independently. But the thing is, they'll be using the same package that is also included in that folder. That means, I'll be having 3 zip files and each of them can be run independently and they'll be having their own packages after running the gulp script. I'm also using a Windows OS. I was only instructed to learn gulp script, just for this use case. I mean, I was able to at least zip a whole folder with your help and I'm very thankful for that. Thank you always for your details explanatin. :) 
I am worried I may not find the concept interesting in general, and that's why I didn't enjoy it, but I've read a bit on what they've updated since release and it sounds interesting. I'll have to get back to it.
Thanks for sharing!
Hey OP are you the author? If so...... Create a selection for "games" as well. A number of mining/sandbox/crafting games could benefit from this.
As far as I know up until recently couldn't you run flow on plain javascript?
is there a way you can show an example? tbh im still pretty new to working with React
Never saw the point of that particular thing, myself. To each their own.
Except for the color Orange.
I mean if using back propagation on a linear regression is a neural network...
Totally agree with Herku here, lateral thinking is really important. Plus, JavaScript does not sit on its' own throne, often developers neglect core languages like HTML/CSS. A lot of what you can do in browsers is actually from the HTML/CSS APIs, rather than JavaScript itself -- did you know that setTimeout/setInterval are actually part of HTML API instead of ECMAScript? They had to port over that part of the HTML spec into Node, otherwise our lives would have been a little more difficult, haha. Being exposed to different platforms/environments is quite enlightening: From Node, Cordova, Electron, and even Arduino/Espruino have all been fantastic in being able to understand how JavaScript can be used to express yourself; It gets pretty rad when you network them all together.
`body-parser` has been a dependency of every express project I've ever built. If there's no reason for it to be separated, then I support this decision.
Yes, you can do it with Node.js and JavaScript.
Sorry, no time to do that now.
Isn't Connect Express's "lightweight version"?
Have you tried looking at extensions that would do something like that?
I'm not a great, nor seasoned developer and just celebrated my first year in development (came from scratch 1 year ago). I work at a company where I've been lucky enough to have the opportunity to built apps from the ground up. My suggestion is to just do it. Pick a side project you're interested in and build it from front-to-back. I've learned the most from making mistakes and combing docs, combing StackOverflow, and looking at issues and PRs in libraries I'm using. I'm relentless with finding answers, whether from those resources mentioned already, asking co-workers (and not being embarassed about it) or from making mistakes and learning. It may sound conceited, but I feel confident that any challenge thrown at me, I can complete...it may take a long time, a lot longer than a seasoned developer, but eventually I will figure out what I need to do to solve the problem.
Look [here](https://userscripts-mirror.org/topics/46851).
I use Jekyll for my blog. I get to use regular markdown to write up posts. Can easily host it using github pages, and have a custom domain set up to redirect. There is a bucket of plugins to fit most situations. Best of all, it‚Äôs partially maintenance free as a static site with a few perks. I‚Äôve built in a contact for and audio player. I also hear good things about gatsby too. Check it out: http://jstoelm.com 
Build your business logic and data retrieval layers in a reusable way and it‚Äôs really easy to support standard REST and GraphQL at the same time. 
Become a good developer and the language at hand won‚Äôt matter. The concepts are 95% the same across languages. It just comes down to remembering the semantics. Learn proper algorithm design. Learn how big O complexity works and how it effects how your program runs. Learn to use a debugger. Learn how to break complex problems into smaller pieces and then learn how to break those small pieces into code. 
Build our first live leaderboard with - React Simple Animate (https://github.com/bluebill1049/react-simple-animate) - Graphcool (https://www.graph.cool/) - Apollo (https://github.com/apollographql/apollo-client) Page link: https://qantasassure.com/30-million-qantas-points-giveaway
If you use the search function, you will find exchange arbitrage bot examples. 
Im just finishing a course on codeschool, i bought the premium membership, its mostly video's explaining the concept then a decent amount of quiz questions throughout.
Please help me to understand what you mean by ‚Äúdata retrieval layers.‚Äù And, if I‚Äôm building an app in Node, where might the business logic exist?
That timeout fact is kind of blowing my mind...
Business logic is your code that makes decisions: is this thing that‚Äôs being sent to me valid to save, does the person making this request have the required access to do so, or the logic to filter a result set for example. Data access layer is you code that puts stuff into and pulls stuff out of your data storage (database, cache, some other api, whatever)
Thank you!
True, but switching *back* to it, either on the dock/taskbar or alt-tab switcher benefits from the icon.
GraphQL will not replace REST. Nor will it replace any legacy systems that are _still_ out there like SOAP or whatever else it out there. Sure there are companies out there who are building GraphQL APIs like Facebook and GitHub, but their REST APIs are not going anywhere anytime soon. So to be able to support both, you build your Express application in reusable components. However, until your comfortable with building a standard REST API with Express, then I wouldn't bother with GraphQL yet.
I used to take (small-ish) open source libraries and write them from scratch, and then compare my results to the source. You could try doing this with different lodash methods, or the native Promise object, or anything you want really. My other piece of advice is to dig into your node_modules folder anytime you're curious about something, or if you're hitting a wall trying to use some 3rd party code. One of the best parts about JS is that it's open source. You can modify any file inside of node_modules, and then wipe it and re-install it, and you're back where you started. I'm constantly in there, adding console logs and generally trying to understand how libraries work. I encourage everyone to screw around in there rather than treating it like a black box.
You need to take on projects that are just outside your current ability and strive towards completion, ie get better by taking on hard tasks. Do this over and over again. In about a year or two you'll be pretty damn good.
Business logic is your code that makes decisions: is this thing that‚Äôs being sent to me valid to save, does the person making this request have the required access to do so, or the logic to filter a result set for example. Data access layer is your code that puts stuff into and pulls stuff out of your data storage (database, cache, some other api)
Basically comes down to not putting everything inside your controllers / routes. Make them as thin as possible, and put all your business logic somewhere else. Once your business logic isn't tied to your routes, it's much simpler to call it from a different place -- like GraphQL. Whatever the case, GraphQL seems useful for reads. Using it to apply commands / actions / etc is unwieldy at best. I doubt it will replace REST any time soon.
Hi, I'm a Redux maintainer. I'm not sure I'd qualify as a "great JS developer", and I'm not sure how much my own experience would directly help you, but I'll go ahead and summarize my journey. I learned C++ and Java while getting my CS degree, dabbled in Python, and picked up C# working on a spare time project. After graduation, I joined an international teaching program for a few years (and worked on some more side projects in that time, mostly desktop apps), then came back and was able to find a full-time programming job. My CS degree was useful for getting the job, but basically everything I use on a daily basis now is stuff I've learned either on the job or in my free time. My first web app was written with GWT (a Java-to-JS compiler), and I didn't start really using JS until early 2013. Found Lodash, started using Backbone, pulled in a bunch of Backbone addons like Marionette and Epoxy, and read a lot about "modern" web dev and JS MVC frameworks. In mid-2015, I started learning React, right after Redux came out. I did my usual "read ALL the blog posts!" learning routine, and also found the Reactiflux chat channels. Over the next few months, I went from reading questions and learning to answering others questions. That led me to write the Redux FAQ, Dan gave me commit rights to Redux, and I wound up as a maintainer (and unofficial "keeper of the Redux docs"). I also worked on buliding a React+Redux app at work, and learned a lot about how to use them while I was building it. From there, I've been writing [blog posts on React and Redux](http://blog.isquaredsoftware.com/), and answering questions pretty much everywhere (I specifically wrote up a post on [how I got involved with Redux that goes into more details](http://blog.isquaredsoftware.com/2016/09/how-i-got-here-my-journey-into-the-world-of-redux-and-open-source/).) Everyone has a different background, different strengths, and different learning styles, so it's kind of hard to give specific advice. In my case, it was a combination of doing lots of reading, trying to help answer people's questions, building a real app, and writing articles and docs to help others. I never actually studied JS specifically in any systematic way - I just picked it up as I was trying to use it, and then learned more about its nuances answering questions. Overall, I think getting hands-on with actual projects is huge. To me, nothing teaches you how to do something better than _needing_ to learn something so you can implement a specific feature for an application. Tutorials and articles are good, but it's all kind of abstract until you get hands-on. Also, since you say you're working with React and Redux right now, I'll put in a plug for the [Reactiflux chat channels on Discord](https://www.reactiflux.com) as a great place to ask questions and learn, and my [React/Redux links list](https://github.com/markerikson/react-redux-links) as a one-stop resource for learning everything you would want to know for React and Redux. Please feel free to drop by Reactiflux and ping me if you've got questions! :)
Keep in mind that javascript has `higher order functions` that means that functions are data, and so can be assigned to variables. () =&gt; ...code is a function const functionName = ...stuff is a variable declaration + assignment
The best place to learn is your browser console. Practice and experiment instantly and quickly. I recommend starting with MS Edge (if you are on windows) because their console instantly becomes a multi-line repl with a single button click.
I wish more employers understood this. I‚Äôve worked successfully in so many languages, but hiring seems quite rigid in practice. It seems very difficult to break into a different stack.
I've been writing JavaScript (among many other languages) professionally for 11 years. The most important thing I did to improve is writing code and trying new things. There are no shortcuts, don't expect to have already arrived. I hope I don't sound harsh, but what makes you think you'll be able to achieve in 6 months something that takes most people 6 years? I'm only saying this because I've fallen into the same trap. Have realistic expectations. You will improve, it will take a long time and it will be difficult, but you will improve. You will make mistakes, it's normal. I have never experienced a significant jump in skill. I have improved at such a slow pace that I haven't even noticed an improvement. Everything is just easier now.
No! Build the simplest thing that's feasible. That's probably a REST API. Then see how your API users (developers) get along. YAGNI. 
much appreciated. About to scour that page
I have, but to no avail. The extensions I can find for closing tabs generally involve closing them after a certain period of time
It is the mark of an educated mind to be able to entertain a thought without accepting it. Aristotle
&gt; It is the mark of an educated mind to be able to entertain a thought without accepting it. &gt; Aristotle The thought [has](https://www.reddit.com/r/javascript/comments/3oy9c3/composition_vs_eric_elliott/)^1 [been](https://medium.com/@xwt23v/i-m-genuinely-trying-to-figure-out-where-you-draw-the-line-between-inheritance-and-what-you-call-ab11d70f7aaa)^2 [entertained](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dkum3eg/)^3, and it was wrong. Eric Elliott is a better salesman than programmer, and you're better off not learning from him.
YES! Yes you can! I use JavaScript, python and c# for my algos. I‚Äôd also suggest using Redis. I‚Äôd argue that it will help a lot and will eventually be your secret weapon. With redis, and c# you‚Äôll need tones of RAM. I‚Äôd suggest 16-32gb. Have fun and remember to follow the volatility! üòä
Maybe it does if you keep open a lot of windows for whatever project you're working on.
In addition to always taking the time to make sure that the product I was shipping was well-polished I took on side-projects. Examples include introducing webpack/babel to the build process, championing and starting unit testing and automated testing, and creating useful tools for other developers to use.
Just wanted to say thank you so much for your thorough response, acemarke! You've actually answered a couple of questions on the Reactiflux channel for me as well as on here on reddit (you discourage the use of redux-form since it's so heavy, correct? I may have asked a few questions on other accounts). Always helpful, and it's great to hear about your personal journey. Oh and I'm definitely stealing your tip on going into node_modules and messing about with it.
Alternatively you can keep track of what was opened by storing the opened subnav in a variable, so there won‚Äôt be a need to loop through every subnav. This would be a minor optimization. 
Reading both you and /r/acemarke mentioning console logging node_modules, perfect advice, thanks. There are a few libs we use at work that I definitely want to understand better (lodash and axios come to mind)
Thanks for the advice. I am definitely in this for the long haul. I mentioned 3 to 6 months (and beyond) mostly to focus responses on the short term but I know it's a continual process. You're right about the sluggishness of the pace. There are times I feel that I haven't gotten that much better as a python developer but now in my 3rd year I take for granted all the things that come automatically to me now (and I'm sure I'll be saying the same thing about my 3rd year self in a few more years)
Hi @TheNumberOneCulprit (i dunno how to make username a "link" like you did. :D ), sorry for what i did. Yes i am newbie who just joined here. Thanks for your guides. I'll be more considerate next time. Thanks! :)
Sounds like you're on the right track. At about 3 years in I had the exact same questions. You are doing great. The fact you are reaching out and asking how to improve shows that you are on the right track. I see a very promising future. It just takes time and work. You are at the state where I learned humility. The more I learn, the less I know.
RIP OSCAR ;)
Summoning /u/acemarke an his excellent learn-js-post
Types are obvious when you deal with built-in methods and simple types, but the bigger your codebase grows, the more layers of abstraction it contains and you may be dealing with complex types that are far from obvious. When you are adding new systems or changing old ones, it's a huge help to constantly know the exact types you are dealing with. The editor can give you accurate auto-complete information about what types of parameters each function expects and what type of return value you'll get. As you make mistakes, it can immediately let you know "Hey, this value *may* be `undefined` and won't contain method `.map()`" I don't know about you, but for me running into TypeErrors and ReferenceErrors has been pretty standard in JavaScript for me through my career. The nastiest part is that sometimes they occur in very specific states of the application. Writing just one small TypeScript application as a practice project I already caught a ton of those issues up-front. Additionally, when I changed my mind about pretty deep dependencies that were used all over the place (like a Vector2 class), I could just go through the compile errors and have peace of mind that I didn't forget to update anything. At first if you put everything into strict mode and don't allow `any` type in TypeScript, it feels annoying when the compiler complains to you about *everything*. Like `document.getElementById('my-canvas')` potentially not resulting as `HTMLCanvasElement` that has the `getContext('2d')` method that gives you the `CanvasRenderingContext2D` interface. You *know* you put that element in HTML file or whatever, obviously it'll work. But in reality, when you start taking care of issues like that up-front, you end up with an application that is far less prone to errors later down the road, when things change.
[45, 66, 90, "remove",100] .filter( value =&gt; typeof value === 'number')
I HAVE BEEN SUMMONED! Technically my usual post is more about learning React and Redux, but I can aim for the JS side of things a bit more here. /u/cactus_fran : Yeah, Codecademy and Free Code Camp are frequent recommendations. I also have [a list of some useful JS learning resources](https://github.com/markerikson/react-redux-links/blob/master/javascript-resources.md) that might be helpful. Besides those places that are just focused on the basics, the article "A Study Plan to Cure Javascript Fatigue" ( https://medium.freecodecamp.com/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1 ) is a great place to start. It gives an excellent series of steps for tackling modern Javascript concepts one piece at a time: Javascript, React, ES6, and state management. There's also a "Front-End Study Guide" based on that article that's very good, at https://github.com/grab/front-end-guide .
Yup, that sounds like something I would say :) Glad it was helpful! And yeah, one of the great strengths of the JS ecosystem is that almost all the code is open by default, both in terms of license and actual viewability. If I have a question on how a lib is behaving, I can just open its code and take a look. And, while you should avoid using hand-modified versions of libraries overall, it's absolutely fine to go throw in some log statements in `node_modules/some-package/lib/someFile.js` for a while if you want to better understand what it's doing. (Debuggers are a big help here too.)
&gt; You are at the state where I learned humility. The more I learn, the less I know. True that. After my first quarter of C++ programming freshman year, I thought I knew _soooo_ much about programming. In reality, freshman-year-me knew ***nothing*** :) I now know effectively infinitely more than I did then, but I now understand that what I _do_ know is only a tiny fraction of all the programming knowledge that exists. And, even though I know a lot about React and Redux in particular, there's still plenty about those that I don't know.
What?
https://globedemo.herokuapp.com/ Demo link 
Ended up figuring out a simple single line solution. Just added $(this).parent().siblings().removeClass('visible'); to the else function. So the full thing ends up looking like this &lt;script type="text/javascript"&gt; (function($) { function setup_collapsible_submenus() { var $menu = $('#mobile_menu'), top_level_link = '#mobile_menu .menu-item-has-children &gt; a'; $menu.find('a').each(function() { $(this).off('click'); if ( $(this).is(top_level_link) ) { $(this).attr('href', '#'); } if ( ! $(this).siblings('.sub-menu').length ) { $(this).on('click', function(event) { $(this).parents('.mobile_nav').trigger('click'); }); } else { $(this).on('click', function(event) { event.preventDefault(); $(this).parent().toggleClass('visible'); **$(this).parent().siblings().removeClass('visible');** }); } }); } $(window).load(function() { setTimeout(function() { setup_collapsible_submenus(); }, 700); }); })(jQuery); &lt;/script&gt;
... OR you could just use cesium js and get done with it in seconds ! Good work though, this is a nice challenge :-)
https://en.wikipedia.org/wiki/Law_of_triviality
#1 UNDERSTAND prototypes, I learned how to make "classes" by looking at how Google wrote their code. Find out how to make a OOP model using functions and prototypes. Understand the prototypical chain. #2 Understand functional programming implemented in javascript. Particularly: Understand why immutable data is so important and why spread is so invaluable, know what a pure function is, memoize a function and understand performance implications. Try to create a function that can hold state using closures. 3. Understand what a promise is. The understand why async await is so important. 4. understand how events flow. create an event handler. create an event handler that can intercept the events of child elements. create an event handler that can cancel an event. create an event handler that can see an event before a child element can. 5. learn chrome dev tools and use them 6. learn the canvas API to draw a picture 7. observe how loading multiple files can start to add up startup time, look at tools for bundling files together, learn how to get things up onto the screen faster ( cacheing, server side rendering, service workers )
this is color racism . hahahhaha
It would make more sense if you explained what you want to achieve, leaving aside variables and intervals.
Here is a list of threads in other subreddits about the same content: * [StdLib Updates: Functions Run on Node 8.8.0, Access Control List Support](https://www.reddit.com/r/node/comments/78u4rk/stdlib_updates_functions_run_on_node_880_access/) on /r/node with 1 karma (created at 2017-10-26 16:04:58 by /u/J-Kob) ---- ^^I ^^am ^^a ^^bot ^^[FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block](https://www.reddit.com/r/DuplicatesBot/wiki/index#wiki_block_bot_from_tagging_on_your_posts) ^^Now ^^you ^^can ^^remove ^^the ^^comment ^^by ^^replying ^^delete!
thank you 
I want to make it so that a "machine" on a setInterval timer that will use materials to create a product continolously until the material runs out when that happens I want it to stop but when the material comes back I want it to start working again.
I've done my fair share of agency work and not once have I had to use Typescript.
I don't have a rule of thumb... localStorage may be great to save small configurations, user chocies, do some caching... but as soon as you may have a (large) collection of elements, IndexedDB will be more appropriate. Again, it also depends on the time you're ready to spend. By abstraction layer, I meant inside your JS app : you can have a layer/module focused on the view, one focused on a pure model definition, one that may act like an ORM, ... it's the last one that I'm talking about. In the rest of your app, you could have a ORM.get(itemKey) or ORM.save(itemKey) without knowing what's underneath. This way, you could at first implement it using localStorage, and later replace it by IndexedDB without changing the rest of your app. There might be existing libraries that do this, but I have to admit I haven't used those. To give you an idea, on a personal side project, I've used IndexedDb to store locally a few Gb of image data without problems.
Thanks for the concise answer. I believe it's time to try and see how I get on with it.
"unpopular opinion" should not be represented with down votes. Thanks for an alternative view. Have an upvote. Will look into flow.
Yes it does for me. I have my API documented by default-no need to hassle with swagger or apiary. I don't overfetch and I generate my flow type/typescript annotations on the frontend and keep it type safe all the way throughout the stack.
There are good responses here. I think particularly good is the idea of _going beyond JavaScript_. /u/Herku's comment is particularly good. I only wanted to add one thing: It takes time; don't rush it. I mean, sure, you can _push_ it, you can apply more effort, that's all very good. But don't try to _rush_ it. Trying to "become an expert now" -I know you didn't word it in that way :)- is not such a good idea. You might learn a number of things quickly, but some stuff requires a calm and deep understanding. You might try to "write underscore from scratch" -the example you mention-. It probably doesn't take much time to _do it_. But it will take much longer to _do it right_. And _just doing it_ you'll probably learn something, but not much. The interesting bits are in _doing it right_. And that brings up the problem of "what is _right_?". Which then leads you to defining _goals_, and _risks_, and _trade-offs_. And it is understanding those, the _goals_, the _risks_, the _trade-offs_, understanding how to define, analyse, discover, assume them, which will make you better... in the long run. But again, those are "deeper ideas", they go beyond language and beyond frameworks. And it takes time.
Mmm... ok, but... _Where does the material come from?_ I mean, do you have an event that notifies you when material is produced or what? It might be useful if you could set up a small _code_ example of what you have.
post the answer at least so we can tell you it's wrong even when it works.
Alright. var k = m.sort(function(a, b) { return b % 2 - a % 2; }); 
Well it just straight up does nothing on mobile (S6 Chrome Android)
If candidate A knows react and candidate B knows react and also knows how to code, it's kind of a no-brainer. Don't ask dumb questions.
At the end is the line of code I tried to make the if statement on and the material comes from another setInterval statement which does work and with a few other bits of code the amount of material is displayed in the html. Also sorry if I'm not too helpful this is my first time trying to code something in javascript. var alexandrites_ore = 0; var alexandrite_increment_ore = 1; var alexandrites_extract = 0; var alexandrite_increment_extract = 0.1; var alexandrite_miners = 0; var alexandrite_miner_cost = 5; var alexandrite_extract = 0; var alexandrite_extract_cost = 5; function update_total_alexandrites_ore() { var e = document.getElementById("total_alexandrites_ore"); e.innerHTML = parseFloat(alexandrites_ore).toFixed(2); } function update_total_alexandrites_extract() { var e = document.getElementById("total_alexandrites_extract"); e.innerHTML = parseFloat(alexandrites_extract).toFixed(2); } document.getElementById("alexandrite_mine_ore").onclick = function () { alexandrites_ore = parseFloat(alexandrites_ore) + parseFloat(alexandrite_increment_ore); update_total_alexandrites_ore(); }; document.getElementById("alexandrite_extract").onclick = function () { if (alexandrites_ore &lt;= 1) {{ return true; } return false; } alexandrites_extract = parseFloat(alexandrites_extract) + parseFloat(alexandrite_increment_extract); alexandrites_ore = alexandrites_ore - 1; update_total_alexandrites_extract(); update_total_alexandrites_ore(); }; document.getElementById("alexandrite_miner").onclick = function() { if (!buy_something(alexandrite_miner_cost, this)) return; alexandrite_miners++; alexandrite_miner_cost = alexandrite_miner_cost * 1.2; alexandrite_miner_hut = alexandrite_miners; update_total_money; var e = document.getElementById("alexandrite_miner_price"); e.innerHTML = parseFloat(alexandrite_miner_cost).toFixed(2); var e = document.getElementById("total_alexandrite_miner_hut"); e.innerHTML = alexandrite_miner_hut; }; document.getElementById("alexandrite_extractor").onclick = function() { if (!buy_something(alexandrite_extract_cost, this)) return; alexandrite_extract++; alexandrite_extract_cost = alexandrite_extract_cost * 1.4; alexandrite_extractor_hut = alexandrite_extract; update_total_money; var e = document.getElementById("alexandrite_extract_price"); e.innerHTML = parseFloat(alexandrite_extract_cost).toFixed(2); var e = document.getElementById("total_alexandrite_extractor_hut"); e.innerHTML = alexandrite_extractor_hut; }; function buy_something(c, button) { if (money &lt; c) { button.className = 'button_mine button_alexandrite'; setTimeout(function() { }, 1000); return false; } money -= c; return true; } setInterval(function(){ update_total_alexandrites_ore(); update_total_alexandrites_extract(); }, 10); setInterval(function(){ update_total_alexandrites_ore(); alexandrites_extract += alexandrite_extract * 0.1; update_total_alexandrites_extract(); }, 1000); setInterval(function() { if(alexandrites_ore() &gt; 1) { alexandrites_extract += alexandrite_miners * 0.1; } }, 10);
Works on Chrome on my desktop but not on Firefox. Guess we won't be using that anytime soon ;)
Cheers for this answer it has pushed us forward a lot in our development! The next issue will be how will we make the QR scanner redirect us to the desired XML document without having to press a link, an automatization so to say, which is something else we are looking into but we got it working with the QR scanner and camera! 
Ok... first of all, let's format that in a more readable way - read the help about formatting in reddit ;) -. Something like... var alexandrites_ore = 0; var alexandrite_increment_ore = 1; var alexandrites_extract = 0; var alexandrite_increment_extract = 0.1; var alexandrite_miners = 0; var alexandrite_miner_cost = 5; var alexandrite_extract = 0; var alexandrite_extract_cost = 5; function update_total_alexandrites_ore() { var e = document.getElementById("total_alexandrites_ore"); e.innerHTML = parseFloat(alexandrites_ore).toFixed(2); } function update_total_alexandrites_extract() { var e = document.getElementById("total_alexandrites_extract"); e.innerHTML = parseFloat(alexandrites_extract).toFixed(2); } document.getElementById("alexandrite_mine_ore").onclick = function() { alexandrites_ore = parseFloat(alexandrites_ore) + parseFloat(alexandrite_increment_ore); update_total_alexandrites_ore(); }; document.getElementById("alexandrite_extract").onclick = function() { if (alexandrites_ore &lt;= 1) { { return true; } return false; } alexandrites_extract = parseFloat(alexandrites_extract) + parseFloat(alexandrite_increment_extract); alexandrites_ore = alexandrites_ore - 1; update_total_alexandrites_extract(); update_total_alexandrites_ore(); }; document.getElementById("alexandrite_miner").onclick = function() { if (!buy_something(alexandrite_miner_cost, this)) return; alexandrite_miners++; alexandrite_miner_cost = alexandrite_miner_cost * 1.2; alexandrite_miner_hut = alexandrite_miners; update_total_money; var e = document.getElementById("alexandrite_miner_price"); e.innerHTML = parseFloat(alexandrite_miner_cost).toFixed(2); var e = document.getElementById("total_alexandrite_miner_hut"); e.innerHTML = alexandrite_miner_hut; }; document.getElementById("alexandrite_extractor").onclick = function() { if (!buy_something(alexandrite_extract_cost, this)) return; alexandrite_extract++; alexandrite_extract_cost = alexandrite_extract_cost * 1.4; alexandrite_extractor_hut = alexandrite_extract; update_total_money; var e = document.getElementById("alexandrite_extract_price"); e.innerHTML = parseFloat(alexandrite_extract_cost).toFixed(2); var e = document.getElementById("total_alexandrite_extractor_hut"); e.innerHTML = alexandrite_extractor_hut; }; function buy_something(c, button) { if (money &lt; c) { button.className = 'button_mine button_alexandrite'; setTimeout(function() {}, 1000); return false; } money -= c; return true; } setInterval(function() { update_total_alexandrites_ore(); update_total_alexandrites_extract(); }, 10); setInterval(function() { update_total_alexandrites_ore(); alexandrites_extract += alexandrite_extract * 0.1; update_total_alexandrites_extract(); }, 1000); setInterval(function() { if (alexandrites_ore() &gt; 1) { alexandrites_extract += alexandrite_miners * 0.1; } }, 10); Now, let me read that...
So... There are a number of problems in your code. The most glaring one, in the last `setInterval` you do... if (alexandrites_ore() &gt; 1) { ...but `alexandrites_ore` is a variable, not a function. So you don't _call_ it with the `()`, you just... if (alexandrites_ore &gt; 1) { There are other weird things around - like `setTimeout(function() {}, 1000);` or the weird returns in the `document.getElementById("alexandrite_extract").onclick` handler -, which make it difficult to follow that code. I would suggest: 1. Clean up the code. If you can, do remove all the parts that are not relevant to your problem. If not, at least make it clean so it can be understood better. 2. Point out what part is not behaving as expected, how you want it to behave and how it is actually behaving. 3. Probably take this to /r/LearnJavaScript, as it seems like you might need some more extensive help in the basics.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| ^^Now ^^with ^^97% ^^less ^^bold ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
You have it already - https://github.com/askmike/gekko . All you need is add strategy. 
Sweet
&gt; my 3 blockes You mean 3 ad blockers? You know that ad blockers have a filters? You don't need more ad blockers you just need to enable more filters! Try to use uBlock Origin and enabling more filters.