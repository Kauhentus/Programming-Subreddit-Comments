&gt; I can't keep up! You have to. You can't let your skills stagnate. Just because there's new hotness out, doesn't mean you have to replace everything you have and start using it. Just be aware of it and a general guide of how it works. These people complaining about new frameworks out every week are not the people you want to follow. These are the people who feel that just because Angular 2 is in Alpha, they have to completely rewrite their whole app again, because heaven forbid you stay on Angular 1.x LTS.
Eh, both Angular and React have their strengths and weaknesses. It all depends on what you need. Remember Angular is a FRAMEWORK it covers a lot more than React for you. React is a LIBRARY, it is the View of Model-View-Controller, while Angular is all of it.
This resonates with me so hard. Im 29, with a mortgage and all the expensive shit that comes with property ownership. I make a really good wage as an intermediate CAD designer, but I am absolutely sick of it. There are good days and bad. I want out, but I know if I go into any other industry (coding), Im going to be making shit money. I think the best thing to do is suck it up and start learning on the side so you can be skilled enough to set your wage when you transition into your new field of choice.
It looks like you're trying to use the Function constructor to run a function which exists in the current scope. A function declared using the function constructor always runs in a separate scope, so this can't be done. I would recommend re-evaluating what you're doing and whether you really need to use eval/the Function constructor to do it. Based on your example, there are only three ways to do what you want: 1. Embed the Say function into the body of strFunc: var strFunc = Function("t", "function Say(text) { console.log(text) } Say(t)"); strFunc("Hello"); 2. ~~Bind strFunc to the current scope~~ (was incorrect on this; see [response by atrigent](https://www.reddit.com/r/javascript/comments/3ttzow/eval_function_to_access_root_functions_nodejs/cx997jq) below): function Say(text) { console.log(text) } var strFunc = Function("t", "Say(t)").bind(this); strFunc("Hello"); 3. Use eval ([generally considered a bad practice](http://stackoverflow.com/a/86580/1079597)) function Say(text) { console.log(text) } var strFunc = function(text) { eval("Say(text)"); } strFunc("Hello"); Consider re-evaluating what you're doing to decide whether you really need eval. It is useful in some very rare cases, but it's highly unlikely that your case is one of these. Is there any reason you couldn't use a normal function call, for example? function Say(text) { console.log(text) } var strFunc = function(text) { Say(text); } strFunc("Hello"); See [this post](http://stackoverflow.com/a/87260/1079597) from the same thread linked above for some more information, and how to avoid a common misuse of eval.
It's just ridiculous the rate that new frameworks are being released and then abandoned (for new projects). Anything that makes it over a year of still being the top rated library for something is a senior citizen. I wonder if we'll reach a steady state soon like Java has, where Spring has been around for years and there isn't any big change coming.
What part of using Browserify would, "keep it lean"?
I think this would be the actual answer to the OP's question, since Aurelia is designed to be as "forward-thinking" as possible when it comes to future Javascript standards. I think the weird thing about it is going to be what happens when those standards wind up being withdrawn. For instance Aurelia's [HTTP client](https://gist.github.com/bryanrsmith/14caed2015b9c54e70c3) is based on the WHATWG fetch standard. But what happens if fetch is not actually implemented? Does Aurelia keep changing their client to match the standard?
You must have a doctorate in wheel reinvention 
I don't know how you turned me saying "it doesn't have to be a single file" into "you shouldn't bundle anything". For the record, I'm the lead engineer for an agency that does huge amounts of enterprise work, and a great deal of my time is spent on optimizing the front-end. There are infinite reasons for breaking up bundles or not using them at all (CDNs, mobile performance, above-the-fold optimizations, per-page requests, async loading, etc). I used "serious" in very casual way. You can replace that with "large-scale enterprise" if it makes it more clear.
Try this: http://prettydiff.com/guide/unrelated_dom.xhtml
&gt; Bind strFunc to the current scope (effectively making this an "eval" call, see below): My understanding is that `bind` only overrides `this`. I don't think it affects variable lookups that do not use `this`.
I looked for a "global" object to access the function, no luck there. my Functions definitely dont have access to the global functions. Anyways I found another way to solve my problem, see the other comment :) thx for your help
I found a way ! It still requires a little extra code on the game script but its simple enough not to be a chore. I make a global object referencing all the usefull functions &amp; global vars like this : g = { func1: func1, func2: func2 ... } and feed that object to the Function so i can do "g.func1(whatever);" Simple enough for me :)
See here: https://nodejs.org/api/globals.html#globals_global The global scope and the module top-level aren't the same thing. Your Functions probably do have access to the global scope, but not the module scope, which is where your functions are. It sounds, if you insist on embedding code in your data files, that your best bet is to just use `eval`.
eli20 how does this work?
Lacking
What are you trying to do with the config file? I usually just set mine up to parse my es6 code and less files plus an uglifier.
There's that reddit catchall phrase again. "When you can't say anything intelligent, just say 'reinventing the wheel'!" Gets 'em every time.
&gt;The older navigator.getUserMedia legacy API. Thank you, I just discovered that I should be using MediaDevices.getUserMedia() instead, which isn't deprecated as navigator.getUserMedia ! 
Hello. I've posted an article recently about my experience with one approach in state management and coming to another one, you can read it here https://medium.com/@roman01la/minimal-setup-for-efficient-state-management-and-rendering-in-react-with-single-atom-state-88204192e5ce#.xz8oazo8q Before I was using top-down rendering and traditional Flux. I've never used Baobab or any other similar libs, it was always a matter of 20 LOC to write a wrapper for Immutable/Mori data structure which is the global state of the app. From the day one I knew that top-down rendering had flaws, I've wrote about it in the article. So I moved to another approach, using queries/pointers into the global state. It looks like Relay thing, but it's only about managing state on client-side. This is much better and efficient approach in my opinion and I'm happy using it right now.
huhu `:)`
None. People are really sick and tired of learning some convention that dies off in another month. It's absolutely obnoxious and tiring to find a convention like angular or react that you can invest 300+ hours into then to find out it isn't performat or doens't work in these circumstances, or to find out it doesn't support X,Y,Z browser and find yourself screwed. And to add insult to injury, that framework isn't supported anymore, and a new hotness arrives. Just use DOM/vanilla javascript. Fuck frameworks and tooling. The browser, node, DOM and ES5/ES6 is all you can count on.
Do you have any idea on what's the maximum duration the browser can handle? 
Sounds good. Thanks for the advice. `:)` For years, I've been saying that roguelikes are the perfect way to teach programming. Maybe it's time to take that claim more seriously.
You're right. Edited my answer above.
Lol @ the URL. Got something to tell us OP? It's pretty solid for someone with not much JS experience. I would say your goal seems to be pretty conflicting though. Most people use OOP and prototypes in JS to make things reusable and extensible, but this doesn't seem to use them in that way. I wrote some semi-comparable JS code: function List (input, list) { this.input = input; this.listContainer = list; } List.prototype = { getInput: function () { return this.input.value; }, clearInput: function () { this.input.value = ""; }, createTextNode: function () { var node = document.createElement("div"); node.className = "ind-item"; node.innerText = this.getInput(); this.listContainer.appendChild(node); this.clearInput(); } } var list = new List( document.getElementById("input"), document.getElementById("list") ); document.getElementById("button").onclick = function () { list.createTextNode(); } So when creating the `List` function, you'll want to store your source of input and your output div. Then you can create a prototype function `getInput` to just retrieve the input whenever you need, and `clearInput` to clear it on submit. This way, when I implement the delete feature, I can use the `listContainer` property I already initialized to delete the children elements. I now just add this: deleteFeature: function () { this.listContainer.onclick = (function (e) { this.listContainer.removeChild(e.target); }).bind(this); } And then just run: var xyz = new List(node1, node2); xyz.deleteFeature(); And the feature is added! If I don't want to add the feature, I just don't add the `deleteFeature` line. :) Two other usability things: If someone presses the enter key, have it submit a new line. Try something like this: window.addEventListener("keydown", function (e) { if ((e.keyCode || e.which) == 13) { // 13 is the keycode for "enter" button.click(); } }); And make sure to clear the input after a line is submitted so I don't have to delete it! Here's a little example of mine: http://codepen.io/anon/pen/KdYEYG?editors=001 Mine just deletes when you click it though. Lol. Too lazy to add the x's.
Everyone loves to always remind the difference between Angular and React (no offense) but after using both for years in practice, even though React is just a 'library' I find myself significantly more efficient and concise while using without needing or missing anything from Angular.
Something weird is happening. the more rounds I the play the longer a second takes to tick OR the score increment is higher each round Or the number of ducks increases I was trying to beat my high score which I could do every time before I realized my high score was at 30000. So i refreshed my browser and my score was back to 4000 or something.
thats an achievement, i'd try to recreate it, hopefully. only part i cant comprehend at all is how blob gets converted to mp3
Is it in beta yet?
&gt; (no offense) None taken, but there's a reason for that. It's like comparing jQuery to lodash. They're two completely different things. Sure jQuery has `$.each` and lodash has `_.each` but doesn't make them comparable. 
Interesting that "no JS" is touted as a new feature ;) This is definitely the "old way" of doing things - plain HTML form with `method="POST" action="/some-handler-service"`, and server-side code to handle the submission. PHP, Ruby on Rails, Spring MVC, or any other server-side language/framework should be able to handle this.
But they're not standardized when you write one in xtags and another in Polymer.
https://github.com/kdzwinel/betwixt - just released it ;)
I occasionally dig out the first commit when I want to see how old a project is. It tells a small bit of the development story. Not perfect but it's a place to start when researching or evaluating a repo. I'd much prefer if GitHub's Pulse also provided summarized info for the whole project and not just the last month. Similar to OLOH if you've seen that.
I've spent all this time learning and getting familiar with angular 1.x. gotta start learning up on this one now :(
Yep. I'm kinda glad i learned perl first. It's like being dropped in an ocean and being told to swim
Why exactly do you not like this style? 
The bigger fail point of camel case is acronyms 
Dart transpiles to JS.
lol it is awesome!
Adding to what Joshmanders has wisely said, I dare say Angular 2 will be easier because many of the concepts in 1.x are gone. Transclusion, scope and a few other things were removed. So you haven't wasted time learning Angular 1 and Angular 2 isn't going to release into beta until probably February/March 2016.
Web Components are cool and all, but man is that article a huge nonsensical wank fest. 
I would say anything free is the best way to go to start off. Try [Visual Studio Code](https://code.visualstudio.com/) to get you started. Here are some good free video series. https://mva.microsoft.com/training-courses/html5-css3-fundamentals-development-for-absolute-beginners http://www.asp.net/web-pages/videos
asp.net runs on linux.
Unfortunately, the last one is practically absent from too many developers.
You could use `Function(...).bind({ api: methods, for: your, map: scripts})` (of course define and store the api object before for reuse) and the map scripts could be like `if (this.player.countItems() &gt;= 3) this.open(this.doors[5])` or what have you. Or even just pass map functions such an api object and declare them like `new Function("api", map.scripts[script]);`
I'm not super familiar with the term "state tree libraries" but would [redux](http://redux.js.org/) count as one? It's gained quite a foothold in the React community.
https://webpack.github.io/docs/webpack-for-browserify-users.html https://github.com/petehunt/webpack-howto
You welcome! just remember to use https://github.com/webrtc/adapter because the MediaDevices.getUserMedia Api is not ready yet ^^
You're missing the point. The interface between components is standardised (i.e. DOM style interface) and that is how you get interoperability. How you actually implement your components is up to you and really doesn't matter to the person who is using your component. You can happily mix up Polymer and xtags components in the same application if you like. 
Thanks dude! It's all thanks to LameJS (https://github.com/zhuker/lamejs), the library implements the conversion from Wav to Mp3. Actually I don't really know how it works internally, but if you are really interested please take a look at https://github.com/zhuker/lamejs/tree/master/src/js :) 
Perfectly said! More info about the maximum size https://code.google.com/p/chromium/issues/detail?id=375297 https://github.com/eligrey/FileSaver.js/#supported-browsers
Good to know, actually I didn't tried to record that much time, but yeah, I think that for this use case you will need to send multiple chunks of the recorded audio to the server and later join it there :(
So my main script is considered a module ?
 Validator doesn't support HTML5 which iirc does support custom tags and attributes.
yes do what /u/x-skeww said 
There's a slight chance your pure js doesn't run in Firefox but runs on other browsers.
Maybe [this article](http://www.christianalfoni.com/articles/2015_11_16_Flux-vs-Single-State-Tree) could clear it up. 
Has absolutely nothing to do with what I said. You are saying you're looking into asp.net yet, if you look at how the internet world works, it doesn't use .NET or Microsoft anything (generally). So your first hint at what NOT to choose should be based on that.
I have two more devs working right now on a project based on exact same approach I've described in the article. Both are happy with it. One of them wasn't familiar with React at all. It took him maybe three weeks to get familiar with code and architecture. I like what Om Next does and want to take some ideas from it into our codebase. I think queries are good enough, what I want to do is a better client server communication (Relay/GraphQL or Falcor), but in much simpler manner. Ideas in Om Next is a good start, because David Nolen already took what's best in both Relay and Falcor. So we just need to copy it back to JavaScript world :D
But you can't because different frameworks require you to construct your native component differently. I've used Polymer extensively and looked at other web component frameworks and they are not compatible. You can however mix and match frameworks with web components written using the web component API.
I read it, and just commented on it. I've never encountered this issue myself. Has this issue ever occurred to you in say the last year?
No wonder why the website is slow.. LOL
In fact it's already the case for any safe ecommerce platform. Javascript is (should be) just a nice dynamic layer. Then, it can be mandatory only if checkout templates require JS to process submission/display things, but it is never the only validation layer.
Hi kevin, first start with the basics to build a strong foundation in javascript.try to learn 1)Server Side programming language Java 2)Understanding of Web concepts, servers and J2EE 3)Knowledge about SQL and Database API 4)Client side technologies - HTML, Java script.within two years of exp,you can gain knowledge on the basic concepts of Java SE &amp; java EE.but there is a other easy way. learn java from the scratch to advanced java programming through simplilearn online course module.they have all in one java development suite(http://www.simplilearn.com/web-app-and-programming/java-development-training#/osl).I found reviews are quite good..send me ur feedback once u do this course 
Freezer.js has a very nice API, but do keep in mind that it doesn't have the fancy data structures backing it that Immutable.js or Mori do, which means that it doesn't support *structural sharing*. If I have an array of 100 objects, and I want to change one of the objects, Freezer.js will do a shallow clone of the array, mutate my target object, and return a new array container 100 new objects. Which is very simple, but not especially fast. On the other hand, Immutable.js or Mori will return a new array contain 1 new object and 99 old objects. Depending on what you're doing, Mori/Immutable.js will have **vastly** better performance than Freezer.js just due to the GC churn freezer.js causes. Also, Freezer is immutable only in the sense that in development it uses object.freeze to stop you accidentally mutating something; in production it doesn't even do that. On the other hand, you don't *need* immutability in order to have a single state tree (or state atom, or whatever). Redux used a single state tree, and it does requires you not to mutate the state object, but by default it doesn't actually enforce that in any way; it just breaks if you forget. :) So when you say: &gt; to gather opinions on the various state tree libraries such as baobab.js[2] or even Immutable.js[3] as a state tree. I think you may be conflating a couple of different things. 1. Do you want a single state tree? And if so, how do you want to interact with it, eg, via cursors, unidirectional data flow, etc.? 2. Do you need immutability to be enforced? 3. Do you need some fancy data structures? I looked closely at Freezer.js, and I quite like the API, but I feel like the overall Redux ecosystem is a bit nicer, eg, there's `redux-form`, `redux-router`, tons of documentation and tutorials. I *do* think enforced immutability is good, but freezer.js also limits you a little bit by requiring you to use "basic" Object.freeze style immutability; you can't use Immutable.js or Mori with it. On the other hand, Redux works fine either way; and if you pick something like seamless-immutable, you'll end up with something that works a lot like Freezer...at least up to a point. In fact, you might also be interested in [this issue](https://github.com/rackt/redux/issues/155) from the Redux project, which notes that Redux is (basically) a state tree with read-only cursors, but by design it doesn't allow write cursors, for various reasons which you may or may not agree with, but the discussion there was quite helpful for me. TL;DR: State trees are cool, but the question of immutability is largely separate. 
What a revamp angular got, I don't really get why they had to change the way data binding is done. All these asterisks and hashtags look unecessary.
Because that's totally different framework.
...and it runs &amp; looks like garbage on mobile. What a shocker! Is this because Google is terrible at UX or is Angular still bad at that too? Is it both?
Great source
and erase the value of the input element once added
This would be a good idea, I can do this in a little bit. Right now I am working on my pixel etch a sketch. it has wasd for controls, buttons to click and it also works on hover. http://codepen.io/alexhunt/pen/QjJeBp Check that pen out. I think I did the error trapping pretty well so far. I just need to work on the GUI and make it all pretty now. I am removing the knobs and adding buttons for up down left right, diag directions, then adding the color buttons to the etch a sketch with some text on how to use it. Hope you like it. I have about 5 hours into this.
How large is a hello world example in scala.js?
I've had a look at the site - how would I debug the code I write?
thanks will do..
Fun, the gunshots are a bit loud though. Reminded me of the old punch the monkey/shooting gallery type ads like: http://blog.woop.ie/wp-content/uploads/monkey_cropped.gif
Nice. I like the loud gunshots. Easy to hear and really lets you know when you hit a duck.
You aren't going to find a single source of gospel for all your best practice needs. This is partly because *best practices* are highly subjective and change every couple of years as new technologies emerge. Unfortunately, your team will just have to process the needed education and experience to understand a variety of best practices and pitfalls. Only then can your team come together and form an internal standards document detailing various stylistic preferences.
Is the menu on the left hand side supposed to not be clickable? This whole thing seems like a lot of buzzwords without tying it together as to why I'd want it. For example, why would one choose a REST API on top of websockets? "Amazing speed" has a lot of tradeoffs, some of which may undermine that amazing speed.
Maybe it's different in different locations. Here in Denver metro there are thousands of coding jobs listed on Dice and my (admittedly brief) searching can't find a single role where Perl coding is the primary responsibility.
self submission
I do not see a trapezoid.
We are but I think there is some misunderstanding about how you construct and use a web component. Your examples above are how you use web components, not construct them. For example, to be able to use &lt;my-new-component/&gt; in polymer you would have to register the component to be used, E.g. &lt;dom-module id="my-new-component"&gt; &lt;template&gt; &lt;p&gt;I'm a new component&lt;/p&gt; &lt;/template&gt; &lt;script&gt; Polymer({ is: "my-new-component" }); &lt;/script&gt; &lt;/dom-module&gt; This is different in each framework, so unfortunately you can't take this components and then use it in another framework, because the constructor is specific to polymer. If you wanted to use it with an xtag component, you would have to have both the polymer library and the xtag library. So unfortunately you can't just mix the components up. As I said, you could mix components with a library that have been written using the native web component APIs. Edited : Tried to relate it more to the initial reply.
oops… posted the wrong link… will fix now. here is the link to the page with a trapezoid for containing the logo. http://jsfiddle.net/wraneus/tfxfz3hd/2/
I know they got it smaller, but yeah probably still too big. As someone who writes a lot of scala, i applaud their efforts, but if you want this experience I would say use Elm
Best practices are overrated.
Using annotations ala flow or typescript is the only sensible way to do this, it needs to be as easy as possible or devs won't do it. Here's a thing I wrote that lets you use flow annotations with babel to do runtime checking: https://github.com/codemix/babel-plugin-typecheck
Scala.js produces source maps. You can see the Scala code in the browser's (typically Chrome) JavaScript debugger and set breakpoints there.
Thanks for the tips! However, what i have trouble figuring out is how you actually store the objects in your version. It seems to me like you only create an alement and a textnode rather than a new instance of that object
Hackathons.
&gt; It seems like to do anything anymore with JS, or any of the many frameworks and libraries, you have to use a compiler/transpiler or some sort of build step just to get a library ready for use. Yes and no. Perhaps the most common need for a build step is to compensate for where JS is nearly impossibly weak: cross-platform file system access, modularity, a compile time (useful when using languages that compile to something else), and tool integration. I have avoided a built step like it were a disease in my personal project to the point of creating my own module system (because ES6 modules aren't here yet) that works in both the browsers and in Node. You can do almost anything once you introduce a build system, which is entirely the appeal. Most frameworks require a robust build process, for example. That awesomeness isn't free. Here is what you have to pay: * Build steps are platform specific tools, for example a build step that works in the browser probably won't work on the command line * Build steps entirely defeat plug n' play code, which means if I can't just give you my app code and have it magically run immediately without performing a build first, which is a huge pain the ass. * Build steps require a lot of dependencies * The build application plus all the extra dependencies will cause any app to explode (massively) in size. &gt; How do you keep your skills sharp when the primary place you use them is well-behind the curve and you don't have much "free" time because of other obligations? I started learning JavaScript (my first programming language) in the spring of 2008 at Travelocity. In the summer of 2009 my other job deployed me to Afghanistan. I rarely had access to the internet there, because civilian internet (at that time) came from a high latency satellite shot (think dial up modem speed) and because I was traveling a lot. I learned JavaScript by writing tools that ran in the browser. I wrote my first language parser in JavaScript over there. If you are disciplined and dedicated your creativity will kick and you will find a way to self-improve. It isn't about the cool toys and collectively popular trend framework bullshit. Its entirely about what you build the problems you are capable of solving.
Are you talking about coding best practices? For that I would say the AirBnB style guide is a good, practical JS guide.
&gt; This is an example value of my variable = value1,id1,value2,id2,value3,id3 It would probably be a string: `"value1,id1,value2,id2,value3,id3"`. If your data is a string and you want to separate the data against a common character then just use the `split` method: var myString = "value1,id1,value2,id2,value3,id3", myArr = myString.split(","); If you need to split on something more elaborate then you are going to have to write a simple parser. This isn't hard, but it is error prone and takes some practice to figure out, which is why everybody just prefers to use a format for which parsers are already natively available like JSON or XML.
 var myVariable = "value1,id1,value2,id2,value3,id3"; myVariable = myVariable.split(","); var transform = ""; for(var i = 0; i &lt; myVariable.length; i++) { transform += myVariable[i]; if (i % 2 !== 0 &amp;&amp; i !== myVariable.length - 1) { transform += "|"; } else if (i % 2 === 0 &amp;&amp; i !== myVariable.length - 1) { transform += ","; } } console.log(transform); //value1,id1|value2,id2|value3,id3
Actually it's *much* smaller than it was. At this point, it's quite good -- in full-opt, the output is optimized aggressively enough to work well even for mobile. I've currently got a [fairly big and complex single-page-app](https://github.com/jducoeur/Querki/tree/master/querki/scalajs/src/main/scala/querki) in production, clocking in at about 1.2Meg for the Scala.js code -- quite reasonable for a problem of this scale. And of course, that only needs to be downloaded and cached once per release, after which the client is proving lightning-fast. So I don't agree -- Scala.js is mature and optimized enough by now to be a solidly good option for serious browser work.
First thing is that you should get node (and thereby npm). It's going to open up some awesome possibilities, and even if your free time is limited, it should get you excited about what you can do. Assuming you have brew, it's literally this easy: `$ brew install node` `$ npm install n` `n stable` `brew uninstall node` Second, if you're not using JSX or ES2015, you should be able to avoid a build step. With React, for example, you can write your render methods entirely in javascript, and you can write your code all in ES5 and avoid using browserify or webpack. I'm working on a project with a small team right now that's in Angular, and we still don't have a build step, because it's not necessary. You didn't list any specific frameworks, so my apologies if this isn't helpful. **edit:** Sorry, I had `npm install node` when it should be `npm install n`. (By the way, this is just a an easy way to install it without having npm and brew fight each other).
no
You might consider adding this collection to DevData: &lt;http://devdata.io/&gt;
Perfect ! Simple but more then efective, thanks ;)
I do agree with what you're saying. The web has traditionally been a low barrier market with plug-n-play code that just about anyone can use without specialized tools. People can still do vanilla JS, write their own frameworks, etc.,. I think the challenge for me is wanting to keep my skills sharp enough to be competitive in the market, but not having a specific project or need to do so. I see a lot of resumes with Angular and React and Node, Grunt, Gulp... and I don't want to end up at some point like a COBOL guy bucking the trend because my role never took me down some path, or just because it's always worked for me. If I had some pressing need at home for an app or some side project it might help with the focus a little better. I just don't want to sit around rewriting TODO apps to learn the various frameworks and that not translate well when I need to actually call upon lessons learned. 
The buttons will work, they will fit into the red area and look like it is part of the up. I could try get the circles to do it. Like upper half on right makes it go up, lower half makes it go down. Either way you know you can use WASD as the controller. w = up a = left s = down d= right.
As well as source maps, you have access to console.log and the debugger statement (via some imports). Debugging is a little awkward though. The names get mangled much like they do on the JVM, but more/differently. But the debugging time saved from static typing more than makes up for it? ;)
I've ported maybe 700-1000 lines of coffescript to scalajs, and the fully optimised version comes in at 244KB. I could make that up by dropping lodash and maybe optimising a image or two. 
Despite the bc issue, it's really a nice step forward for the library. Having a tool like the Modernizr feature form would be a great GUI for choosing your custom modules. Hopefully a new site will come out of this, and include some more basic tutorials actually *on* the d3 site
d is just being used as a variable to loop through the data against each object. e.g. Load up http://benknight.github.io/kuler-d3/ then run the following in the console - colorWheel.container.selectAll('.theme__color').each(function(d){console.log(d)}) colorWheel.container.selectAll('.theme__color')[0][0].__data__ 
use npm! 
I figured it was that palette, I just thought they might be using a theme that's available for download, but that isn't the case then? (Looking for a sublime text theme)
Yep, not sure what ebay is thinking with this
I haven't seen any, but there's probably ones that are pretty close? It looks pretty similar to the Windows XP color scheme to me which there's probably a theme for.
Haha, alright, thanks anyways. :)
I know JavaScript pretty well. But every time I read an article like this, I'm a bit humbled by the author's in-depth technical knowledge. I'm not even sure how they get to be so knowledgeable about the minutiae of the tool they're using. Edit: Just noticed OP is the author too. Kudos to you.
Well, now all my procrastination in getting around to learn D3 appears to have paid off.
Thanks man, this is truly an awesome initial start and intro to roguelike development (which TIL about, thanks) Anybody else following this through? I got to here, then got lost where the "case '@' :" was presented outside a switch statement. I looked at the [tutorial on the repo](https://github.com/StoneCypher/rogue_demo/blob/master/tutorial.md) and [associated commit](https://github.com/StoneCypher/rogue_demo/commit/69f038d4a405ad520a026fae286cc4c2d8313413) - but was unable to figure out how to put everything together and work. Anyway, just in case anybody else was following this - thought I'd mention I got stuck here.
tldr; https://www.reddit.com/r/scala/comments/3rrbly/replace_javascript_with_scalajs_in_your_next/cwqr70b
Best practices are all relative, but still... That's a pretty cynical philosophy.
;)
ESLint + custom rules to specify the exact rules you want to follow. Consider using preexisting configurations as a starting point and tweak them until you are happy.
Jspm
Free or not, I'd throw my vote in for Webstorm. I purchased a license and use it for my own projects and at work every day. You might qualify for one of these? https://www.jetbrains.com/webstorm/buy/#discounts 1. Javascript is not a compiled language, typically javascript is transpiled, bundled, minified, etc... and that is done through an external task runner like Webpack, Grunt, Gulp, Broccoli. I assume these would be integrated. 2. Haven't used it in a few years for that stuff but typically quite good. Very heavy application though and quite costly too. 3. For the level you are at, there will be very minimal difference. Do whatever you like doing would be my suggestion. Backend: C#, Node Frontend: HTML, CSS (styling), ASP.NET Angular, Ember, React, etc.. are all frontend javascript frameworks. They are all javascript under the hood but they have their own syntax to get things done. You'll be able to do whatever you like in all just about any combination of those languages, the difference is mostly how they are hosted. Windows/Linux, Apache/Nginx/IIS.
npm?
That was fairly old, and the key part was tucked into the very last slide. The single biggest, greatest, most important difference between Gulp and Grunt is code vs config. If you prefer to write configuration, minimise the amount of logic you need in your build system, give your build tool the information it needs, and then get out of the way while it does its stuff - go for Grunt. If you prefer to write code, have maximum flexibility, and the risks and rewards that come with that - go for Gulp. That's assuming you need a build system, which is something that not everyone even agrees on at this point... :P
The parts are really short. I doubt it's much more than 90 minutes long in total. Anyway, this is a beginner-beginner type of tutorial. It assumes you aren't 100% familiar with functional programming concepts, composition, and ES6/ES7. Things you should learn anyway.
It's a minus for me if someone lists jQuery prominently in their resume, and pretty much a no hire if they list it as a programming language. You're better off without them.
on the jvm I love scala, enough people know it, I has a good enough ML compiler. Although I have not used Elm, I just look at the language and tooling and go yeah, thats good. If it had existed 4 years ago when I designed the system I did I would have probably used it or seriously considered using it as my primary motivator at that point was building a range of products, but making sure we had type safety for refactoring for a range of products with a guestmated life span of 7-8 years. As a side note, I write my own closure compiler phases the whole time to achieve macro level (as well as soy plugins for their the soy templating language) - macros (unfortunatly only compile time in this space :( ) are worth it.
I love front end dev... 
This is what I was saying in another comment, for certain needs it is good. But if you are writing stuff where speed of load on mobiles and real user expectation is faced, 200kb and weak prerendering strategies is not good. Internal app, yeah, no problem. I LOVE scala, until the dependency is after shaking sub 20kb it is not for a range products. 200kb or 20kb and yes, I consider react too large as well.
this was a really good one : https://www.udemy.com/learn-and-understand-reactjs/#/ learn react and flux. 
Also, I would like to be able to change the amount of sections that this gets cut into, but when I say 2 instead of 3, the circle gets cut into fourths
That and the whole async vs sync part...
Figured I should show how I'd do it... var myVariable = "value1,id1,value2,id2,value3,id3"; myVariable = myVariable.split(","); var output = []; for (var i = 0; i &lt; myVariable.length; i+= 2) { output.push(myVariable[i] + ',' + myVariable[i + 1]); }
There's already a shit ton of examples on the d3 site, even if most of them point back to bl.ocks.org. https://github.com/mbostock/d3/wiki/Gallery http://bl.ocks.org/mbostock
Sometimes code golf is great (when you first write it), but 6 months later when you 'git blame' and find out you're the jackass that wrote the unreadable code... Small concats are just plain easier to read and a non issue for performance. But, I wouldn't work down the string concating the new entries. That's the classical example of bad string concat. It's been a long time since college, someone else can take over, but I believe it's n^2? (1,2,3,4,5... pattern)
Any source file can be considered a module. See here: https://nodejs.org/api/modules.html
Nice. Next time I need to code C# I look forward to picking it up again.
This is super cool.
[Here's a demo that I worked up that lets you click and drag and it draws a circle divided into sections](http://codepen.io/a4epirZJ96/pen/WQBpyP?editors=101). Is that what you're looking for? 
Woah, that should be perfectly adaptable! Thank you!!
nice. looks useful. Although the videos are free it looks like you need to join egghead to get the code. That's too bad, I always find it helpful to follow along with the code, but not $20 a month helpful.
Hi /u/monsto, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
If you combine it with something like Immutable-JS the performance is notably better. It's a tradeoff though as that adds 56k of JS to your app.
I don't have an example off the top of my head, but react-redux paired with react-addons-update pretty much removes all the complexity from state management.
Just read [this](http://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname).
There are tons of examples on github. You could start with the [redux](http://github.com/rackt/redux) repo. There's also [awesome redux](https://github.com/xgrommx/awesome-redux) to check out for more examples (probably too many).
I'd suggest you read up a bit on hoisting. That's where the differences between the two styles lies. Both are pulled to the top, but the one with var isn't actually defined until the flow actually assigns it's value. As for scope, no, standard closure rules apply. 
See https://www.reddit.com/r/scala/comments/3txbul/scalajs_has_a_brand_new_website/cxaj3m7 for a list of the things I personally find lacking in TypeScript's type system. 
There is one central state store. However, you reducers can work on subsets of the store, and won't even have access to the other parts. Thus, even though it's all stored in a central location, you don't usually deal with it as a single monolithic store.
I have worked on large, complex apps with it. Why would a lot of work be necessary to update? 
That helped a lot. Thanks!
I'm wondering the same thing. The app I work on at work has over 200 Flux stores and currently we're using some base stores provided with vanilla Flux (https://facebook.github.io/flux/docs/flux-utils.html#content) that a coworker built. There's stores built by several different teams, a lot of the stores being completely standalone and not having any knowledge of any other stores. I'm wondering how well Redux would handle that. 
1. You don't need a compiler for JS 2. Visual Studio is huge overkill for (frontend) web development 3. Don't know, I haven't written stuff in those languages Regarding writing JS: Atom is pretty good for JS, although it chugs on large files. Sublime is also really good (and faster than Atom IME), although it doesn't have the same polish. I've dabbled with Netbeans/Webstorm in the past, but they're a bit heavy IMO, better suited to large codebases. I've seen people with beautiful setups with those IDE's mind, but at the same time I think it kinda leads to the IDE holding you captive. Personally, I used VIM for quite a while, but now I tend to use Emacs - but that's a whole other story. Try Atom. Regarding learning web development: this is a much larger choice, and one that will probably have longer term effects on your career trajectory in your choice of server technology. Java, C# &amp; .NET are the heavyweights, they get used more in commercial Enterprise gigs from what I've seen. It's a much bigger stack to learn, but I'm unsure as to the health of that employment market. Java is pretty much the same story - just a different platform. The next common choice is PHP (ugh...) - that's where I started. Easy to get into thanks to Apache, and you can dev in plain old Notepad. Huge market for employment - generally agency work or small app shops, but lower payscales and there's a lot of dirty legacy PHP out there to deal with. And Wordpress. Then there's Python/Ruby - Python generally not used for web dev (although it's a great language) - it seems to be more widely used in academia/data heavy science gigs (from my job searches). Ruby still seems to have a big following stateside for web dev, but is also widely used as a tool belt language. NodeJS is a bit niche, I work in a fullstack JS shop and it's pretty rare in my town to find that sort of work. It's nice never having to context switch and I like JS, but sometimes you get the feeling that you're making a lorry out of four scrambler bikes taped together. If you want to do any frontend work, regardless of server technology, you're likely to need to learn JS, CSS &amp; HTML. Personally, I'd pick a more traditional server stack (try Flask in Python for example) and learn the ins and outs of HTTP and databases. Then, once you've got comfortable with that, pick up some JS to augment your pages. Don't worry too much about picking the right language, good coding principles are fairly ubiquitous, just pick a stack and go deep. 
The redux website says: "This architecture might seem like an overkill for a counter app, but the beauty of this pattern is how well it scales to large and complex apps." It seems intuitive to me that this sort of thing would scale better, not worse, than stateful stores. But I would also expect that performance would be worse, not better.
hahahaha, classic
Hi, it's not clear what exactly you mean. Is this something you are looking for? &lt;input type="checkbox" name="option1" value="1"&gt; 1&lt;br&gt; &lt;input type="checkbox" name="option2" value="0"&gt; 0
&gt; I think it's consistent with having spaces after `if`, etc About space after a function name (`function foo ('hello')` vs `function foo('hello')`): Google does not, Airbnb does not, idiomatic does not, Crockford does not, jQuery does not.
Is that related to autofellatio?
...I thought we where talking about [Redox](https://github.com/redox-os/redox) for a second...
THIS! I tried to setup Gulp, Express, SASS so that I could have livereload, concat, uglify and everything else working just today, and it's been such a pain in the arse. Why does it have to be so frign annoying?!
&gt; The stats in this study (http://sideeffect.kr/popularconvention/#javascript) show that space-after-function-name style is quite common – 33% Looking at the [regex used by popularconvention](https://github.com/outsideris/popularconvention/blob/master/src/parser/js-parser.coffee#L136), it does not perform what it says: onespace = /function(\s+.)*\s+\(/ nospace = /function(\s+.)*\(/ It checks for `function()` vs `function ()` **without** a function name, not for `function foo ()` vs `function foo()` like advertised. Edit: just created the [issue](https://github.com/outsideris/popularconvention/issues/62)
The application I'm working on is a redux/react app and according to the sloc tool we have ~33,000 source lines of code. This includes tests. It doesn't include node_modules. It's a desktop web application. I don't know if it can be considered big and complex enough, but I'll share my experience so far: Overall, I'm very happy with redux. It's not perfect, but it's outstandingly simple. My experience with redux is that it makes certain things a bit tedious, since you need to setup an action creator, action handler / reducer, constants, etc. So sometimes something that seems like it should be a bit less work can take a little bit more code. However, as you start wiring up more complicated behavior, it's surprisingly easy. Furthermore, enhancing or extending existing behavior in a page is very straightforward. Once you embrace selectors and you build up a small arsenal of em, you end up with code that's generally easy to reason about. Selectors are analogous to components, but for your data. We're using immutable.js in most of our application state tree, so performing updates and such is trivial and a total non-issue. Setting up resources that behave sensibly is probably the most challenging part. What we do is we'll use normalizr to normalize all of the server's responses, so we have something like Resources: { [resourceName: string]: ResourceMap }, where ResourceMap: { [resourceId: string]: ResourceEntity }. And some metadata in _resourceName. Once you have resource management all setup stuff like fetching, tracking loading states, and using em is pretty straightforward. We've slowly just built up a set of helpers for managing all of this. Admittedly, it'd be a lot nicer if we could leverage GraphQL and Relay, which essentially solves the resource problem. One of the areas in which redux isn't great is when you need to react to changes. Although you can implement reactions to changes using React easily enough. And there's libraries like redux-rx if that's the path you wish to take. 
# ***PLEASE DO NOT CROSS-POST SO QUESTIONS***
The egghead.io videos are great FWIW
Basically your post is indistinguishable from an advertisement.
Wait, what? So they put 14-20 PHP devs with little to no JS experience to build a new product that is widely used throughout the internet? I'm not sure that's the best project to learn some node basics. But I guess on the other hand it can't get much worse than the PHP version...
Hi /u/voltrevo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Any suggestions would be greatly appreciated. :)
Not sure what's wrong but that menu wasn't clickable in chrome. REST API is not a transport layer.
Which one?
There is a "break" at the end of case 0, 1, but not 3, is that on purpose ? I hate switch, you should use "if" blocks, they are much more readable.
That is what I was thinking as well. Redux seems like a really robust system but very complicated. Its "time travel" thing could be very useful for acceptance/automated testing though, any ideas on how to integrate that with a mutability-friendly type of store? I'm interested to see what you come up with. Thanks for the reply. 
an music playlist where attendants can Que up music, that way the party don't turn in to a "30 sek spottily. 30 sek YouTube and then you phone is lost" why down vote? he says basic features are known and he wants something that's unique. now the closest i know of where [plug.dj](http://plug.dj) but that shut down at the start of September. 
Certainly. Here's an example: You have a text editor which also lets you pick the programming language. Your state will include the text and language, and you have two action creators, to update each of those values. Now, let's say you want to add linting, which happens to require you to hit an API endpoint. You'll add an entry in the state for linting errors, and each time the text or language changes, you clear the linting errors. Since you're going to be hitting an API endpoint, you also want to debounce these calls. How do you implement that with Redux? Well, there's a few different strategies, but I've just been using React. Below is a rough example of how the "component" might look. The lintText action creator's result will be intercepted by our middleware, perform the request, and dispatch the result. In your reducer, you can check if the language or text for which you got the linting result have changed. If they haven't changed, you store the result, otherwise you'll throw it away. import { Component, PropTypes } from 'react' import debounce from 'lodash.debounce' import shouldPureComponentUpdate from 'react-pure-render/function' export default class EditorLinter extends Component { constructor (props) { super(props) this.updateLinter = debounce(this.updateLinter.bind(this), 500) } updateLinter () { const { language, lintText, text } = this.props if (language &amp;&amp; text) { lintText({ text, language }) } } componentWillMount () { this.updateLinter() } componentDidUpdate (prevProps) { const { language, text } = this.props if (language !== prevProps.language || text !== prevProps.text) { this.updateLinter() } } render () { return null } } EditorLinter.prototype.shouldComponentUpdate = shouldPureComponentUpdate EditorLinter.propTypes = { language: PropTypes.string.isRequired, lintText: PropTypes.func.isRequired, text: PropTypes.string.isRequired } I think this solution is reasonable. If you have more complicated scenarios where you need to react to multiple complicated changes, you'll probably want to use something like rx. 
I gave DocPad a shot and really liked it.
make!
This is great, but v8 doesn't include a native worker implementation out of the box afaik does this add a worker implementation so you can access multiple cores within your game logic? 
How do you avoid re-rendering the entire DOM tree when state updates? I'm writing a relatively small application with Redux, but already I'm finding it necessary to put a lot of effort into my components' shouldComponentUpdate method to avoid re-rendering components on state changes that they don't care about. Do you make use of multiple "connected" components, rather than "connecting" the entire component tree? The author of Redux suggests using multiple connected components if performance is a concern, but I'm not a huge fan of that option. It still means that every child component of a connected component will re-render way more often than it needs to, unless each child component looks for its data to change in shouldComponentUpdate.
Why does it need to be a class? If you are writing a module I would just stick with Node-style (error-first) callbacks: export default function doSomethingAsync (cb) { // do your stuff // ... then somethingAsync(function (error) { if (error) return cb(error); cb(null, someResult); }); } Or you could return a Promise, although it has some implications for frontend developers trying to use your library. Events are not a good model if you just have a single callback that the user only needs to listen for once.
Why is keeping a constructor synchronous beneficial? It just means the user has to call another (setup) function 
The class has a whole bunch of state and methods. The 'ready' business is just telling the user when they can start using the object, it's not its ultimate purpose
If you're thinking about C# go get Visual Studio Community. These days if you're studying 10hrs a day you'll be a junior dev in 6 months, not 2 years. Look at every task as something to include in your portfolio. Take on small projects for cheap or even free to build up your portfolio and your network of professional contacts. But really, the best advice I can probably offer is to strongly consider what it will take to move somewhere else. If you're stuck in a dead end town like that your skills will stagnate, if the jobs don't dry up/head to a major metropolis first. 
&gt; I think it kinda leads to the IDE holding you captive. Personally, I used VIM for quite a while, but now I tend to use Emacs - but that's a whole other story. Try Atom. You really should try an IDE. "holding you captive" couldn't be more wrong, if anything they give you tools to achieve well above and beyond what your suggestions provide. 
I have a lot of connected "container" components, I just manage this composition at the route level. I'm using react-router. One of the reasons I manage it at the router level is because it makes testing easier. But it also makes it easier to get predictable performance, because you don't have to pass props around tons of levels deep. Here's an example of what that might look like in the routes file: export const routes = ( &lt;Route path='/' component={LayoutContainer}&gt; &lt;IndexRoute component={HomeContainer}/&gt; &lt;Route path='/thing' component={ThingContainer}&gt; &lt;IndexRoute components={ThingChildContainers}/&gt; &lt;/Route&gt; &lt;/Route&gt; ) In this example, ThingContainer also has a bunch of child container components, which encapsulate its parts. The React render function for ThingContainer's component might look something like this: render () { const { ThingEditor, ThingHeader, ThingSidebar, ThingOutput, name } = this.props return ( &lt;Page title={name} className='ThingPage'&gt; {ThingHeader} &lt;PageBody&gt; &lt;div className='ThingPage__sidebar'&gt; {ThingSidebar} &lt;/div&gt; &lt;div className='ThingPage__main'&gt; {ThingEditor} {ThingOutput} &lt;/div&gt; &lt;/PageBody&gt; &lt;/Page&gt; ) }
As of now it's a jQuery plugin. Removing this dependency is listed as a TODO.
Someone might want to extend your class and implement it in a way that doesn't require set up time. If you kick off the setup step in the constructor, it can't be avoided in the subclass. Perform the request in `setup()` instead, and you're safe (the subclass can override that and have it perform differently or make it a no-op, etc.). You're `setup()` is already a separate step since you need to get a promise out of it. There's no extra work on the user's end; its just an implementation detail.
Very misleading title, please read the article again.
That makes a lot of sense. I think that's what I'll go with, thanks!
Thanks for being the one clear-headed person in this chain of comments
&gt; my problem is that i have no idea how to block my function from getting more then one response until function is finished ... You could removeEventListener and just add it back when the function is done.
Im new and lost, how
Regex is like any other language- difficult to read if you don't take the time to learn it first. Hence why I explained it fully, knowing OP isn't familiar with it
I shall
Wow. Thanks for the very detailed reply and well-written sample. Much appreciated. Yeah, a render-less component is certainly a valid approach for various concerns. So, when you say "Redux isn't good at reacting to changes", I take it you mean actually DOING stuff in response to a state value change. That... seems pretty reasonable, and almost a tautology, I guess. Redux's claim seems to be *managing* the state, not *doing* stuff with it. You tell it "here's an action" and "here's how we're updating pieces of the state", the store says "something changed", and actually using that state is then part of the rest of your application. Thanks for both comments. I'm hoping to use Redux on an upcoming project, and any actual experience with it is useful input for helping our team make a decision.
Client side html sanitation... lol
Ok. could you suggest how I might make a post like this to alert people to something very good that I bought that's on sale? I mean it'd be near impossible to say "I bought this great shirt at Sears. The brand is 'Sears doesn't suck' and it was only $7" without it sounding like an advertisement when the intent isn't advertising.
"jSanity was just recently revived from two years of cold storage." There is your explanation.
Considering Wordpress just announced its intent to move to a react-based front end with a node backend, and they supposedly run 25% of the world's websites, any challengers had better be prepared to completely change the paradigm again the way react did originally.
It's missing regular OAuth2 grant types which would be nice. The web doesn't revolve around JWT's, they usually revolve around one of the 4 OAuth2 grant types which might use a JWT as its bearer token. In the talk about JWT, it would be nice if it mentioned other nice things you can do with JWT's such as using a pub/priv key for [Non-repudation](https://en.wikipedia.org/wiki/Non-repudiation) Adding expiration times to the JWT's so that if it is stolen the attack is short lived. 
Thank you so much for taking the time to type this out!! This really does help. I think I am going to have to read over it about 5 more times before it sinks in, but I am OK with that. Thanks again and I am sure this will get me to my solution.
Are you sure it's not [JSON](https://en.wikipedia.org/wiki/JSON)?
fuck you microsoft. nobody cares about you and your astro turfed bullshit.
the title made me think i completely misread the announcement earlier
Thanks a lot!
Turns out it was me who completely misread the announcement, and crafted a misleading title... I really need to be more careful about being wrong on the internet!!
Hi /u/passiondev, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Just make a JavaScript function put it in a chrome extention. iterate over the table and build an Array then turn it into a csv file. http://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side http://stackoverflow.com/questions/17836273/export-javascript-data-to-csv-file-without-server-interaction EDIT: I assume you mean copying from a html table and not database 
OR https://chrome.google.com/webstore/detail/table-capture/iebpjdmgckacbodjpijphcplhebcmeop?hl=en-US https://chrome.google.com/webstore/detail/data-scraper/nndknepjnldbdbepjfgmncbggmopgden?hl=en-US
You're really close (and your code is clean as hell for someone who "isn't very experienced in coding in general") It's this guy if (result.nextPageToken){ getVideos(playlistId, apiKey, result.nextPageToken); fulfill(videoList); } `getVideos` is an asynchronous operation that returns a promise. You're calling `getVideos`, it's delegating its rejection or fulfillment to a promise and then continuing execution normally (i.e. going to the next line) while it waits to hear from its promise. You can fix this by doing something like (haven't tested, not sure if it's correct) if (result.nextPageToken){ return getVideos(playlistId, apiKey, result.nextPageToken).then(function(result, error) { if (error) { /* ... etc etc etc */ } fulfill(videoList); // or maybe fulfill(result); )}; }
Can someone enlighten me on how something can be both client-side and secure-by-default?
Cool article. I'm starting on a job next week where Marionette and Backbone are used to realize a single page app. What do you think about react.js?
I think brackets is what you are looking for then?
Thanks so much for the help! I was struggling with the recursion for so long, maybe 15 or so hours now. I can't thank you enough! Here is the change I made thanks to your help: if (result.nextPageToken){ getVideos(playlistId, apiKey, result.nextPageToken).then(function(result,error){ if (error) { reject(error); }; fulfill(result); }) } else { fulfill(videoList); } 
Great work! Like I said, you were really close. Also this is a valuable lesson; sometimes an extra set of eyes can spot something in a few minutes that you've been struggling to see for hours. 
http://www.ractivejs.org/ for it's templating, two-way binding without needing custom attributes, and components
&gt; Plus isn't jsx just xml wrapped in JavaScript? [Kind of, but not quite.](http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html) But I don't see why that's a bad thing. There's no reason to [overcomplicate everything Java-style](https://twitter.com/jbscript/status/668784877324603393) (click) and reinvent `for` loops, `if` statements, function calls, etc., when JavaScript has all of that and much more. If you've ever ported a large Angular app over to React, you realize why React has gained popularity so quickly.
[**@jbscript**](https://twitter.com/jbscript/) &gt; [2015-11-23 13:35 UTC](https://twitter.com/jbscript/status/668784877324603393) &gt; Dear Angular 2. Wat. &gt;[[Attached pic]](http://pbs.twimg.com/media/CUgATURUEAAJcQ4.png) [[Imgur rehost]](http://i.imgur.com/JQHmJr2.png) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
at face value it looks mostly like syntax differences. the biggest being ractivejs has handlebars-ish templates, whereas vuejs embeds some of the templating in element attributes. 
It's not even silently acknowledged by them, they outright apologized. That doesn't mean it's not a useful tool. Part of effective use of tools requires understanding the tool though. That includes the bad parts. Putting the tools against each other in a war is pretty silly. A decent engineer will assess the tools and choose the right one for the job, and that will not always be the same tool. You can't declare a winner.
I have not ;) This is my first large angular app, and not impressed so far. 
The difference is so small at this point now that we have ES6. The only significant one I'm aware of is thin arrow functions (-&gt;) just like fat arrow functions in ES6 and CoffeeScript but they don't bind the function to the current value of this. Also the existential operator (?) if color? console.log('hello') is the same as if (typeof color !== "undefined" &amp;&amp; color !== null) { console.log('hello'); } You're going to be in for a rough ride just learning ES6 if such minor cosmetic differences throw you off to this extent.
I know, right? For now it appears to be just their wordpress.com installs, but that should come to the hosted server version sooner or later. http://ma.tt/2015/11/dance-to-calypso/
When you execute `adderFactory` it returns a function, which you stored as `addSix`. That function which is returned from `adderFactory` takes one parameter. Or to use your own wording, `addSix` isn't actually equal to `return function secondNumber(n) { console.log(6 + n); }`. It's equal to `function secondNumber(n) { console.log(6 + n); }`.
&gt;To make things even prettier lol no
I am angry because a marketing post made it to #1. Microsoft and their fake PR upvotes. These guys tried to discredit anything open source in the 90's and now they embrace it? Bullshit.
&gt; so how does addSix() know to take n as its parameter? Because the function you returned has that kind of signature. function adder(v) { return function(n) { return v + n; }; } var add6 = adder(6); console.log(add6(3)); // 9 console.log(add6.length); // 1 (the function expects 1 argument) console.log(add6.toString()); // "function (n) { return v + n; }"
&gt; And yet the vast majority of Angular apps are a slow, brittle mess. Do you have a source for this? I doubt it. Thousands of sites, particularly in enterprise, run Angular 1.X. That's not to say that Angular is easy to optimize. It isn't. Sometimes it's almost counter-intuitive. But that's a bold statement for which you have zero proof, because there is none. Angular is a lathe. It's a tool you can start using easily, but to really use it well takes practice. React is a hammer. It's easily one of the best hammers I've *ever* used. An idiot can use a hammer. Someone slightly above an idiot can use a hammer without hurting themselves. What I don't understand is why people that can't or won't use the tool properly complain when it doesn't meet their expectations. For the vast majority apps, Angular is a completely valid solution. In some cases it's a terrible solution. Your implication that it's *always* bad, proves only that you have never used it correctly.
&gt; the addSix() function is equal to: return function secondNumber(n) { console.log(6 + n); } It's equal to the _function itself_, minus the `return`, so: addSix = function secondNumber(n) { console.log(6 + n); }
It looks like a good starting point. Thank you! 
it's the same as `::this.privMethod`no? The same as passing the context: `this.privMethod.bind(this)`
If it works for you, it works for you. Personally this looks littered with side effects making it really hard to test.
The idea here is to have an element rest on other elements near the cursor in an elegant and continuous fashion. The application I have in mind is a spotlight that moves a series of links in this way, but it's intended to be quite general and I'm really interested in other use-cases that you might come up with. The motion was originally based on x+sin(x) behaviour, but I was able to make the 'stopping zone' larger by using integrals of sin(x)^(2n). I settled on n=3 for this demo and used wolfram alpha like [this](http://www.wolframalpha.com/input/?i=integrate+sin%28x%29%5E6).
Wrong link to example
Thanks for highlighting DocPad.
As the lead developer/maintainer of several large Marionette.js applications I can tell you that this does not look like the way a well designed app should be written. Just a few things I noticed: model.save(model.toJSON(), ... I have no idea why you do that. If you want to save all attributes of a model this argument can be omitted. Passing request handlers to functions like `.save()` is generally a bad idea as it makes the code hard to read. It's better to use the returned jQuery Deferred (or a good Promises/A+ library) to be more expressive. If you do it that way you also can return a promise resolved with the HTTP request's result or something else. It makes it way easier to structure communication and control flow. The example with the regions and search results - I am not sure if I like the way you construct the view/layout there ... however, things like this regions.get("results").show(resultsView).$el.fadeTo("fast", 100); should definitely be moved to a Marionette.Behavior to make the code (again) cleaner and easier to maintain. It also help you keep a constant UI/UX throughout your application. In general (and in my opinion), while trying to decouple your application using Backbone.Radio as a general message bus you made it harder to understand how the app works and you forgot a bit about Separation Of Concerns. However, it may work for you and definitely will have reasons why you do it that way but code like that would not get in our repository :P
Two way data binding is the old thing.
Microsoft was under US Federal oversight until about five years ago. Then it was extended another two years cause Microsoft didn't abide by the court order from 10 years before that. Total time under Federal oversight, about 12 years. It was like having to wear an ankle bracelet with GPS. Microsoft is not a good company. 
Also I assume this is a CSS issue, not JS. 
If your self hosted version of Wordpress is running Jetpack, you can manage it from Calypso. 
Just FYI... You don't need to pass things around or return functions to have closure. To receive the maximum extreme benefit of closure all you need is scope depth and crossing scope boundaries to access a reference. Everything else is just patterns, conventions, and toys.
On my birthday? Microsoft you shouldn't have!
In other words, after this date, these browser will be officially deprecated and insecure to use (on Windows 7 and 8). The best thing would be to leave a message: &gt; You are visiting this website in an insecure and deprecated browser, please upgrade to IE11 or switch to a modern browser like Edge, Chrome, or Firefox.
And a collective sigh of relief and the near-silent mutterings of "thank fuck" were heard round the programming world. Seriously though, pretty nice. Might edge people towards edge ;), which actually seems reasonable.
Nice to see that article has caused something to be done about it :) https://code.google.com/p/v8/issues/detail?id=4566 MWC1616 used in PRNG Math.random() has been replaced with xorshift128+ 
*Technically*, IE9 will be getting security updates on Windows Vista. This is because Microsoft is removing support for all but the latest version of IE, and IE10 and above were never available for Vista Also there are various server and embedded versions that will continue to support IE8-10, though these are probably safe to ignore unless you are developing for a specific environment where they are used.
Windows Vista has a worldwide market share of 1.74%... and support for Vista will end in 2017.
Which, if you do the math, is still *millions* of people. Percentages are awful for this sort of thing, because they're horribly misleading. As I say above, always check *your* stats when choosing to not-support a browser.
&gt; (waits for dhdfdh) You have been summoned, /u/dhdfdh!
At least IE8 &amp; 9 seem to have dropped off. We did a couple of jobs for an insurance and a financial company, neither cared about IE9- anymore.
I work on global brands, I have a similar attitude... **Questionnaire** 1. Do you work for a government body? 2. Do you have limitations on the hardware you use? If you answered yes to either of those, then I'll support old browsers for you. Otherwise, fuck you. Upgrade you lazy cunts. This goes for IT support techs that stop updates because they are too lazy to go through to rigmarole of supporting it. Our society is so dependent on technology, why are you NOT upgrading?! It's stupid for a society so based on devices/internet to use out of date tech... 
HALLELUJA
Happy IE day.
Take that 1.74% (global remember), work out how many are actually relevant in your country (even in a large country you're now dow to &lt;1%), then work out how many of that fraction of a percent are your target audience. Unless you're a massive (10+ million views a month) site, you're now down to 0.0X%
Better yet, replace the page content and leave that message only. No IE 11? k thx bye!
Let's be real. These are corporate users that are still on IE 8 - 10. Just say "Please contact your administrator, Bitch!"
No celebrations here. I predict that our corporate clients will continue to demand that we support IE8 and up, as has been the case for the last few years.
How sad.
If you have a site with different tiers of pricing, then legacy browser support is on a higher enterprise tier that hadn't existed before, and it's very expensive.
I thought mixins were dead? http://stackoverflow.com/questions/21854938/using-mixins-vs-components-for-code-reuse-in-facebook-react https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.g2dq89b02
That sucks. I work corporate as well but I'm lucky enough to be on a team doing a greenfield project so we had the luxury of saying IE10+ right out of the gate.
I've noticed that whenever you bring up security these people definitely start thinking twice about it.
Well, windows 10 kind of reverses that for me a bit...
&gt;for the big players, it has to work, period. And yet there are **many** big players out there that don't think this way. FFS Google dropped support for IE9 in 2013 in Gmail.
This is NOT accurate and also this is not news, as this announcement was made 2 years ago. IE9 and IE10 will still be supported after January 12, 2016. &gt; Beginning January 12, 2016, only the most current version of Internet Explorer available **for a supported operating system** will receive technical supports and security updates. Internet Explorer 11 is the last version of Internet Explorer, and will continue to receive security updates, compatibility fixes, and technical support **on Windows 7, Windows 8.1, and Windows 10.** There are other operating systems that Microsoft still supports and those systems will see IE9 and IE10 support through the end of their life cycles. For IE9, Vista is still supported until 2017. For IE10, there's a couple systems and they are supported until I believe 2020. Hell, IE7 and IE8 [will still be supported in some manner](https://support.microsoft.com/en-us/lifecycle#gp/Microsoft-Internet-Explorer), but thankfully not on any consumer level OS's.
Opera rebased on chromium, so it took Opera a good while to reimplement some stuff, and that still didn't appease people so one of the former Opera developers actually created a new browser called Vivaldi, which is pretty good but still not as good as old opera for those users. Firefox is pretty good, but again, has had it's scuffles between hard core users and developers. For instance they're planning on deprecating XUL, which is making some users mad because it means that a lot of addons will need to transition to a newer API (called web extensions, still packaged as an XPI file, but compatible with some chrome extensions) primarily because they're moving to a multi process architecture which is almost certain to break some older extensions that rely on accessing parts of the browser they probably shouldn't have had access to in the first place. (although Mozilla is working on adding more API's to fill use cases) Chrome has had privacy conscious people all in a tizzy, although to google's credit they've been fairly good at making changes in a way that are subtle, but they also removed NPAPI, which means I have to use firefox for some older websites while every other website gets the memo to upgrade or perish. Edge also lacks support for activex plugins so it's not really unfair. My point that I'm not very good at making is that the browser goal post is always moving and not everyone agrees on whether it should be moved or whether somebody put it in the wrong spot. As long as people are at least trying to find the right spot for the goal post and willing to take feedback, I'm pretty content about the whole thing. Also as someone else mentioned, IE usually would be really good for about a month and then it would stagnate as microsoft waited a few years to make a upgrade, usually in time for a windows release. Now they're just adding patches to Edge every few months. Closer to a Chrome/firefox/opera upgrade cycle, which isn't a bad thing. 
This means we can start using flexbox!
This isn't really true. Typically when ms releases a browser it's the most feature rich and performant browser of the big 3 on Windows. It just doesn't improve for years and Chrome/Firefox typically surpass within a few months.
[Edge supports more ES2015 than the other browsers.](https://kangax.github.io/compat-table/es6/) Just sayin'. 
I never used Windows 10 before. I'm personally a Mac person, but I am a huge fan of Xbox One, and as a JavaScript developer, Edge is the browser that supports the most of ECMAScript 2015.
If you are on npm@2... Delete your node_modules, install npm@3 and then reinstall your deps. https://phabricator.babeljs.io/T3067
Also they actually have a changelog https://dev.windows.com/en-us/microsoft-edge/platform/changelog/desktop/10586/?compareWith=10525 You can see what's changed since a specific release. They have a miracast/DLNA feature now, apparently.
As a developer leading a team, this gives me ammunition. The more ammunition I have to throw at the business as to why we should not support old IE, the better. This may or may not let me forget IE8 at my current workplace...but its at least one more bullet I've got to use in my fight.
IE11 will be the *only* IE version supported for Windows 7, 8 and 10. Windows Vista, Service Pack 2 is the only other consumer level OS still supported by Microsoft, and yes, technically, IE9 will get security updates for that OS (until 2017)... But keep in mind that Windows Vista has a very small market share these days.
My clients decide what I support, if it's old they pay a large premium, but I don't get to say "fuck you" to my clients, they'll go elsewhere
wtf? What does this have to do with anything? Babel ignores `node_modules` To clarify: I'm not questioning your answer, but if it's right -- why?!?
What (roughly) is a huge amount and how often do people elect to pay that vs upgrade their company's browsers? This is interesting to me, I've never thought about the fact that some companies might pay to continue using unsupported browsers. 
Depends on who you work for and what the project is about. In my specific case I work for a company developing internal and b2b internal apps. We have *some* push back given our product but if it is written into our contract then we have to support it. To answer your question more directly, yes we essentially do add a line item for 'outdated browser support'. In the end it's always business needs above all...depending on the business that usually means they charge more either explicitly or just by buffering the hours/quote. Either way, you/they pay generally.
REJOICE!!! REJOICE!!!!! Granted, IE 10 handled just about anything web standards related with ease. IE 8 and 9 however...
&lt;
\&gt;
Just checked, have literally 1 customer using IE still! Hurray!
Would you also write in some ~~soft~~ sort of limited liability clause due to security issues? Edit: Typing is hard.
You got my upvote. Thank fucking god. Now only if we could get Apple to drop Safari...
There we go!!!! Thank you for being so helpful to a complete noob. Getting started feels pretty daunting. I have some books on the way and I've watched about 5 hours of Lynda.com tutorials, but sometimes it's really good to get someone to just say, "Hey knucklehead, this is a simple error, look here!" Thanks everyone!!!
You're on your own suckers!!
Just reverse the list when you're closing the list: $($('.filter-element').get().reverse()) .velocity( ... )
Now only if we could get Apple to drop IE9 and IE10 will still be supported in some manner, but thankfully not on any consumer level OS until 2017.
Jesus I had to support IE6 at my last job. People don't know the amount of crappy internal shit you have to deal with in corporate environments. We had applications that would only run on 32 bit XP. So if a machine died we'd get a brand new PC that had windows 7 on it and install windows XP on it then install some piece of shit software they wanted and maybe set up the browser to connect to whatever piece of shit application they needed. Mostly it was related to ordering systems. They go for the cheapest supplier even if their software hasn't been updated in 20 years and there's nothing you can do about the other end.
 function myFunction() { var current = 0; var choice; var temp; var choices = { 0: { a: 1, b: 2 }, 1: { a: 3, b: 8 }, 2: { a: 5, b: 6 }, 3: { a: 7, b: 8 }, 5: null, 6: { a: 9 }, 7: { a: 10, b: 11 } } while (true) { choice = prompt("text"); temp = choices[current] &amp;&amp; choices[current][choice]; if (temp) current = temp; } } Perhaps something like this instead?
I don't do any IE work anymore, but the times I did in the past I charge double rate. I catalog it as Occupational Hazard
I'm at 2.15%, for *all IE* It's beautiful. OP's article isn't new news though, I've been using some technet article for a while that basically says the same thing to justify to management not having to support anything below 11.
The first task I've been asked at my new job is to develop part of a JS app that needs to run on IE8 and 11. I'm thinking of shaving my head to prevent more hairpulling. Why the fuck a browser like IE11 can't display PDF in a fucking Iframe!?
**WE** will be supporting them until 2026. 
We/I would if it were relevant or a possible issue/concern for a client. To be totally forthcoming, as of yet (in my own, personal experience) there have been no distinctive security related issues directly related to our support for an older browser vs another. Above and beyond our software there are certainly security implications with using an older browser...but for purposes of interacting with our applications my biggest concern would be support for proper encryption/ssl. And while there are some certificate issues I can think of with older IE none of them are security concerns when talking about their interaction with our software.
If im Not mistaken, inspect the DOM and look for the map element, and the embedded url from Google usually has the GPS location in the url! Good luck
&gt; I have noticed that some organisation/banks pay astronomical amounts in the name of security and then leave a gaping hole because some boss wants his iphone on the company network. This is the real reason. A CEO bought a crappy Win tablet four years ago and now every site has to work on it.
So, since Microsoft doesn't support it that means that all of the companys will stop supporting it too? Yeah, I don't think so. Their clients will still be using IE, so they will still support it. Now with the new browser, that's not a replacement, but an extra browser we will eventually have to support. No "thank fuck" here. It's going to take a long ass time for IE to go away.
Fun drawing app! Reminds me of the Etch-a-Sketch Animator ([TV ad](https://youtu.be/lj8xfyc-pD4)) from the 1980's (I still have one!). Two annoyances: 1) Warning about the edges is really annoying. 2) Maybe add toggle for "mouse mode" so you don't accidentally destroy your drawing by moving teh mouse.
Fuck yeah!!!!! I really like the direction that MS going nowadays. edit: Although we won't see the effects until a few years later, atleast the future is looking good for web development. I truly believe that people will be preferring to use online/saas apps as opposed to desktop apps. Good time to be a web developer.
Everything is millions of people though
Hmm. Never thought about it this way. But I totally agree. Magic is incredibly difficult to debug. That was why I moved to tape from mocha.
I've been in web design for 16 years now. This makes me so happy. I remember the days of having to deal with Netscape Navigator and early IE versions. Jesus, and it's Christmas time too. 
Hugo — speed matters 
I know of some tech giants that still require the use of IE7 for certain legacy applications.
Yep, ironically there are a few internal services and sites we use built by other vendors that only work on chrome
Having to deal with IE9 is still miles better than IE8 for devs... The amount of IE9 kludges and shims required to make applications functional, while still pretty significant, is much less than IE8. JavaScript becoming more popular has helped; a lot of the bullshit I had to deal with in IE9 was CSS related.
What other vendors? I worked AC in Marcom, we used exactly zero third-party anything.
Our business rule is we stop supporting a version of IE five years after the last release. However that is easier said than done. We still have a huge number of users in Asia still using 6 and 7. Unfortunately they are using terminals that can't be upgraded to newer versions of IE. So we have to wait for the hardware to be replaced... someday :-(
Why should any browser display a PDF in an iframe? Is it specified in W3C standards? Is it an open format at all?
lol
Jitsi Meet is open source, that's the main one I can think of off of the top of my head, but there are several others.
That only works in corporate environments. For public sites, you shouldn't be supporting older browsers.
Well I love the fact that Microsoft doesn't want us to call IE11 IE. It's funny, when you are debugging User-Agent, you can't use IE anymore... Instead you have to search for "trident"..... Still... The DOM in IE11 is painfully slow and sucks donkeyb*lls
Because Chrome does it... And when users are used to have things working in Chrome, it should also work in IE.... Because... Well, endusers are spoiled. I know the pain... 
Firefox does it too. It's just it can only do it in an Iframe while Chrome also accept object and embed. But seriously, if anybody know how I can display a damn PDF in IE without using a browser addon or calling Adobe Reader, they'll save my life.
so long and thanks for all the fish.
&gt; Perhaps a more accurate statement is "the vast majority of Angular apps are easily prone to becoming a slow, brittle mess." That's definitely a valid statement. The barrier to entry is low for an Angular developer, but the barrier for actually using it well is high. I don't agree that any particular change can have disastrous effects... unless the change amounts to an app with 100 observers having 2500 observers. Laziness, however, will be met with performance issues. Angular makes you think really hard about how your application should be designed. React is far clearer and much easier to reason about, hence the popularity. &gt; I assume that most Angular developers know the same for Angular. Could be wrong, could be wrong. Maybe everybody is just lying. I think most Angular developers understand *how* to make your app slow. Two-way binding is a double-edged sword, and used improperly it can make Ruby look lightning fast. &gt; No need to get emotional. It surely has its valid uses, but damn are they hard to come across when we have such better tools in 2015 Not emotional. I just find it stunning how frequently Angular gets dogged on. There are certainly better tools today, but today is 6 years later. At the time of its release, Angular was put on a pedestal much the same way React is today. And at the time, most of us thought that `Object.observe` and dirty checking made a lot of sense. At the end of the day, it feels like /r/javascript and React-related subs have taken the "I hated Angular before it was cool". It's weird. There are thousands of successful apps built on Angular. It isn't garbage, it isn't dog slow, but it sure as hell can be. And, as I've said before, call a table saw stupid because it *can* cut your thumb off is silly. 
All browsers use plugins for that. It's just some of them have these installed by default. Use PDF to HTML/image converter.
Interesting... I've never used tape before. I'll have to look into it!
Check this one out. https://mozilla.github.io/pdf.js/
Yeah, this one will probably save me for IE11, but not for IE8 :/ Thanks, though.
Yeah, but I don't think my project lead will appreciate if I say 'just tell our clients to download plugins' : / I'll look into your tip though, thanks
That sounds hilariously Dilbert-esque.
&gt; takes about 8 seconds And the ES5 version takes how long?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for The loop also could have been written like this: var node = list; while(node) { array.push(node.value); node = node.rest; }
Yeah no, I will rather actively block people on old browsers so I can enforce a good user experience.
omg do you seriously still have to support a 14 year old browser? I know how it is, I had to too for a long time, but not anymore. Seriously.
I thought Facebook didn't support older versions of IE...?
rip
Agree with everything you're saying, but I meant greenfield in terms of we weren't restricted in any technologies based on past stuff...we still chose IE10+ for a particular client, which as you say isn't super new but there was no IE8+ government bullshit :).
any link to the talk, interesting?
&gt; Always check your actual usage stats before abandoning browser support Oh and just as a quick side note: don't trust analytics but look at your actual server logs. I today was very confused as someone said that, according to Google Analytics, we have nearly 15% users on IE. Well turns out that a good portion of our users use real browsers and have ad and/or privacy blockers installed while none of the IE users have which heavily skewed the results.
It works in IE 8 with a compatibility shim applied for the typed array implementation. I did this for a company a little over a year ago.
I never used a shim before, I'll have to look up this.
So glad to work at a company whose support browsers are Firefox, Chrome, Safari, and by virtue Opera.
Even then, those users aren't ever relevant enough to spend extra money supporting for all but enterprise situations where some legacy app is needed. Things like docker and vagrant are probably better ways to support legacy software/apps at this point.
The GNU operating system recently released a page about Microsoft's software, classifying it as [proprietary malware](https://www.gnu.org/philosophy/malware-microsoft.html).
The fact that a new handlebars view engine needed to be created for Express seems like a symptom of a problem. What is the Express view engine functionality really giving you that you need to go through it to render a template to the HTTP response? Check out the following blog post I authored a while back: [Bypassing Express View Rendering for Speed and Modularity](https://strongloop.com/strongblog/bypassing-express-view-rendering-for-speed-and-modularity/) As an example, here's how simple it is to render a template to an HTTP response stream _without_ using the Express view engine and, instead, using the [marko](http://markojs.com/) templating engine to render directly to the HTTP response stream: var template = require('./template.marko'); app.get('/hello', function(req, res) { template.render({ name: 'Frank' }, res); }); As a side note, marko resolves and loads templates through the Node.js module loading system. Templates are loaded and resolved just like any other JavaScript module. This promotes modularity and completely solves the problem of resolving partials/custom tags/etc. In addition, the templates can be bundled using any JavaScript module bundler. Just my 2¢... feel free to disregard, but this strategy has worked out well for the Node.js apps at eBay (and outside eBay). Hope you find it helpful.
Wow I feel dirty defending IE/MS Edge but I think being fair is important so... I think what's important is modern js, and [Edge kindof destroys all other browsers in ECMA6 feature support](http://kangax.github.io/compat-table/es6/). It also has [markedly](http://www.anandtech.com/show/9458/examining-microsoft-edge-browser-performance) [superior](http://www.techradar.com/reviews/pc-mac/software/operating-systems/windows-10-1267364/review/5) [js performance](http://www.networkworld.com/article/2979845/microsoft-subnet/microsoft-edge-browser-performance-test-chrome-firefox-internet-explorer.html) over the others. It also uses [way less memory](http://www.pcmag.com/article2/0,2817,2493880,00.asp). And this is pretty typical whenever a new IE comes out. It wins and/or is up to snuff for a while, doesn't update for years usually, and gets destroyed by the competition. As a side note: AFAIK most developers don't really take the html5test all too seriously as a benchmark any more. All modern browsers have pretty great html5/CSS3 support as well as their own strengths and weaknesses.
What's an example of a case where angular is a terrible solution?
What? Edge is still being actively developed.
There will always be XP embedded.
Front-end developer here this means nothing :/
Hopefully their systems will be "accidentally" updated to windows 10 by Microsoft
In many ways, tape is to mocha what gulp is to grunt.
You have to build 'trust capital' also known as reputation, on the business side. And then do what's right.
It's [ISO 32000-1](https://www.adobe.com/devnet/pdf/pdf_reference_archive.html)
&gt; The id global attribute defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS). [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) The point is that it's against the spec. Semantically, classes should be used when you need to represent n many elements as the same. Im not really sure what you mean by your second statement, so here's a working example: [jsfiddle](http://jsfiddle.net/d4krfqd4/2/) code: &lt;div class="person-list-container"&gt;&lt;/div&gt; &lt;hr&gt; &lt;button class="dump-structure"&gt;Dump JSON structure&lt;/button&gt; &lt;pre class="json"&gt;&lt;/pre&gt; &lt;script type="text/javascript"&gt; 'use strict'; let personTmpl = function(data){ return ` &lt;div class="person"&gt; &lt;div class="person-name"&gt;${data.name}&lt;/div&gt; &lt;form class="child-adder-form"&gt; &lt;input type="text" class="name-input" placeholder="Person's name"&gt; &lt;button type="submit"&gt;Add&lt;/button&gt; &lt;/form&gt; &lt;div class="person-children"&gt;&lt;/div&gt; &lt;/div&gt; `; }; function Person(name, $rootEl){ this.name = name; this.children = []; this.$rootEl = $rootEl; this.render(); } Person.prototype.addChild = function(child){ this.children.push(child); }; // Convert objects to object literals Person.prototype.toJSON = function(){ return { name: this.name, children: this.children.map(function(person){ return person.toJSON(); }) }; }; Person.prototype.render = function(){ this.$person = $(personTmpl(this)); this.$rootEl.append(this.$person); this.bindListeners(); } Person.prototype.bindListeners = function(){ this.$person .on('submit', '.child-adder-form', (evt) =&gt; { evt.preventDefault(); evt.stopPropagation(); let $this = $(evt.currentTarget); let $name = $this.find('.name-input'); let name = $name.val(); if(!name || !name.length){ return; } let child = new Person(name, this.$person.find('&gt; .person-children')); this.addChild(child); $name.val(''); }); }; let rootPerson = new Person('God', $('.person-list-container')); $('.dump-structure').on('click', function(){ console.log('here') $('.json').html(JSON.stringify(rootPerson.toJSON(), null, '\t')); }); &lt;/script&gt; 
i know some how we can do the similar thing, but why would we abandon something React natively supported but to use another lib to do that. plus, in language level, javascript is prototype-based language, class is just a syntax sugar, they still compile to prototype, and you lose composable ability when using such syntax sugar. class is not composable, only can inherit from only one other class. mixins is still awesome at least for who come from ruby
var date = new Date('2015-10-11T14:03:19.243Z'); var str = date.toISOString();
Really? I mean I'm not surprised it's used internally, but why do they stubbornly refuse to make it competitive with browsers like chrome?
Now that, I couldn't tell you. I didn't work directly with the Webkit team in my time there. I think they *are* trying, in their own way. But all the browser vendors seem to have different ideas about just exactly what that means.
Good to hear! When I was in the marketing world before I became a dev I had clients that couldn't even download chrome or properly use forms/pages we created for them because they were running IE on virtual machines. 
You don't have to use PHP, but you have to use something. It can be any language; you could use JS via Node.js, or Python, or Perl, even C++ if you really wanted to. But there has to be something that runs on the server to handle the request and make the change. 
They probably don't have control of when it is updated, what apps it has installed, what other networks it can connect to, which websites it browses to, who can get physical access to it etc. It also means they have to make sure that the company network can support devices such as that, which may involve lowering security requirements which an iPhone can't support, or adding routes through firewalls which would otherwise not have existed.
http://tapiov.net/unicodetiles.js/
I guess that you need people to update the files, just saying.
But this is a node issue. Babel shouldn't be parsing these files and node _certainly_ didn't take 8 seconds to load your average script before.
I have a feeling some other stuff is going on. Babel used to build a lot quicker with browserify, now it feels pretty sluggish. 
Add a `Z` at the end to have it parse as a UTC date: new Date('2015-10-11T14:03:19.243Z'); Then use UTC date functions: .toUTCString() .getUTCDate() ...etc
Meanwhile, their replacement, Edge, is WAY beyond all other browsers on the market in terms of ECMA6/ECMA2015 compatibility. So, creds for that.
Your always going to need something, but for less code try one of these.... http://nobackend.org/solutions.html
What's wrong with Safari and WebKit?
you have to put something on the end to represent some time zone. a "Z" on the end to for it to be UTC ( aka Zulu ). or "+0000" or "+00:00" or "+00" the ISO8601 specification shows this pretty clearly. 
Release a patch that updates IE to only allow access to download the new browser. This is how you drop support - by force.
Run with the environment variable DEBUG=babel:verbose (or DEBUG=* to see everything that uses the DEBUG package). This will tell you what's up. Anytime babel is slow for me, its transpiling lots of files I didn't intend.
Webkit itself is fine but somehow Apple have completely fucked Safari's implementation. Safari is fast becoming the new IE. Not that current state of Android Chrome is much better ...
Especially IE8 users are either forced to use it by their company or have no fucking clue what they're doing. This gives me more than enough reason to say fuck it and not support that shit browser. I've wasted far too much time of my life fixing problems with IE6 back in the day. I harbor a disdain for Microsoft for that reason alone.
Idiotic IT. 
thx
Then go for a "light" java server. I heard a lot of good things from https://playframework.com/ for example (but haven't tried). I love JS, but if you don't know/use best practices, it you be better for you if you avoid it. EDIT : oh, also, I believe lastest versions of Node.js have a good support of ES6, which you should like.
Feed "linked list" into google and be enlightened :)
Now the bad guy is not any more microsoft, but every web developer that is still going to support broken browsers because of their fucking money. Bow to the corporate overlords.
&gt; How is that different from other devices on the network? Apple is traditionally not IT friendly. Meaning that any apple product, weather it be a Macbook or an iPhone, doesn't have the iron clad control your corporate bank IT group wants. Windows, blackberry and Android all offer that level of control. My friend has a corporate controlled Samsung S2 which he can't install anything on and can't do much with other than check email, look at his calendar and brows the internet via the banks Proxy server. 
"Oh no!" -Nobody
so is this a solution to playing over 4.000 videos? 
I dont have 4k webm videos to test it, but the key is `URL.createObjectURL(file)`
Hi. So.. this code works, to play the video. I should have been more specific above. Playing it isn't the problem. It's playing it without stuttering, or lag that is the issue 
A previous client (international, global) made our company redesign the frontpage of a site we'd done, after *two years* of design and specification because the main content wasn't 'above the fold'. The bottom was hidden and you had to scroll down to see the whole thing ... on his 1024x600 netbook.
Currently testing in on 2 different PC's. One with and i7 processor and 16 gb of ram. The second is a quad core processor with 6 HD monitors hooked up to a NVidia graphics card using Mosiac mode for multiple displays. Trust me.. the power of the PC or graphics card is not the issue. The videos play fine in VLC player and in other technologies (unity) I have tested. This is a chrome playback issue.. Hence why I am posting here to see if anyone else has any ideas of other things I can try. 
I'm still trying to figure out exactly what you're after. Are your videos 4k resolution, or have you got 4000 videos? I think the former, but I'm not sure. A few broad thoughts: 1. If you're on 4K resolution, grab a 4K sample from Youtube and test against that. Even playing back the sample at Youtube (rather than downloading it and playing it inside a video tag) will give you some ideas of what to fiddle with. 2. Along similar lines, try some different formats? Off the top of my head I'm not sure what's supported, but if you have more success with some formats over others then that will also give you ideas. 3. If you can re-encode a sample, then I'd try a few different tests at a few different bit rates (and resolutions, even if you know this will push the quality too low for purpose). While the overall file size might not be an issue, the size per frame (like a short high quality video) might be. It does strike me that trying to drive 4k video through multiple screens using a web browser is a bit of an ask. That's not to sound too negative, but of all the things that Chrome's optimised for, I wouldn't be surprised if that's not one of them. Good luck mate.
You should really read the language docs, the MDN is my preferrred first place to look. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
I think the problem is in fact that Chrome mostly used software rendering
Ah, thanks for the explanation. I'm not sure if I can help your project much, especially since I build a programm in my spare time which transforms savegames from Fast Break Basketball: http://www.fbbgames.com/fbpb3/index.htm into a responsive website, that has more stats than the native game, a draft chat, milestones and around 300 awards for gms, teams and players (e.g. a "uncle scrooge" award if a gm has saved 1 mio reward dollars (they can buy player trainingscamps for it)), lineups that can be made by gms that don't have the local game, automatic generated news etc. desktop view: http://www.abload.de/image.php?img=unbenanntijjdv.png mobile view: http://www.abload.de/image.php?img=unbenanntdbf62.png My advice would be to show your game on hackernews: https://news.ycombinator.com maybe you can get some contributors from there.
I'd do it with CSS instead of javascript. Something like this: https://jsfiddle.net/kzo7tqed/
1. Webstorm 2. VSCode 3. Sublime 4. Atom I'm on OSX, I can't judge Visual Studio, I heard good things about it. For some reason, many devs don't seem to like Webstorm, maybe an overload of features? I think if you are not a mouse and click user and willing to invest in learning some keyboard shortcuts, Webstorm is by far the best option out there.
I notice the list lacks Emacs, so here are my pros/cons: Pros: Emacs Cons: Emacs 
My opinion, use what you're comfortable with. The battle of IDE's and TextEditors is never ending, just like tabs vs spaces.
Wow, thank you so much for this. I understand the basic use of for loops, and what each of the 3 statements in the for loop mean, but I had never seen a loop that looked like this. Your explanation has really helped me to understand! Thanks for the time you took to write this.
Yes I would love to do it with CSS but unfortunately the structure needs to be outside of the ul :(
If you're dead-set on your current design, here's some jQuery code that works more-or-less. Still gets a bit wonky if you move your mouse around really fast, but a little more polish could probably lick that. https://jsfiddle.net/2r0w3k0L/
Visual Studio is actually a really nice ide if you have a fast enough computer. 
[Eclipse with JSDT](http://www.slant.co/topics/1686/viewpoints/2/~javascript-ides~eclipse-with-jsdt) is in the list. If you notice anything you think is missing, feel free to add to the list.
They're also missing a magnetized needle and a steady hand.
I've personally never used Webstorm, but I've always gotten the impression that it's well-loved. What would you say the learning curve is like? Besides learning some shortcuts, is it a fairly intuitive IDE to use? 
I had a look at this today and it's EXACTLY what I want - I tried to have a play around with it for what I'm doing but intellij complained about the 'let' keyword (I assume I can just change these to var?) and the fact that you've used (evt) =&gt; {}. I tried to change this to just a normal callback function(evt){}, but then it complained about probable misuse of the "this" keyword for this.$person.find('&gt; .person-children'). I ran it anyway with my changes but it wasn't appending the children. Is there a specific reason you've done those 2 things? Thanks for the help, sorry to be a pain - I feel like I've asked for my homework to be done here
http://www.2ality.com/2014/09/es6-modules-final.html VS Code's analyzer knows about modules. If you import something, the analyzer will know what's up. You'll be able to auto-complete the imported stuff and you also get call-tips. You might as well give TypeScript a try while you're at it.
Let me encourage you not to try to emulate Java in JavaScript. Although many have gone to great lengths to make JavaScript more palatable to people from OO languages, their attempts are not idiomatic JavaScript. I'd suggest learning how JS handles problems and avoid the Java-style boilerplate/overhead. Coming at JS from Scheme or Lisp, gives a much better experience. Most folks that I know that develop in Java, flat out hate JS because it looks a little bit like Java but doesn't behave the same way at all. 
How's this? http://codepen.io/anon/pen/VvJQLM?editors=101
Checkout http://nodeschool.io and if you get the basics, jump to `browserify adventure` lesson. Then you get how to approach writing javascript in the browser utilizing `require` and commonjs. In order to get started combinding that with `html` and `css`, checkout https://github.com/substack/virtual-dom-starter-hmr It uses `virtual-dom` and replaces `html` with `hyperscript`. Now personally, i would recommend you to checkout `jss` https://github.com/jsstyles/jss too to get your `css` in. Given that you don't know css yet - try learning `flexbox` for doing layout. The rest you can look up one thing at a time :-) Depending on how far you wanna go - i can recommend you to look into `level-browserify` - search for it on `http://npmjs.org`, so you can more easily store data in the browser client's indexDB database
I use Atom and I love it. Yes, it does lag sometimes, but the plugins make up for it. 
Exactly. Tabs vs Spaces is convention which, in a perfect world, would be uniformly settled for everyone. IDE's and editors are products, and thus benefit from being such battle-testing. Though, I get skitch's point: all debates can be tiring.
Hmmm, depends what you're doing. As a Front end I write almost exclusively JavaScript and some PHP from time to time. 
Ah no worries. let and the fat-arrow functions are new [ES6/ES2015](https://babeljs.io/docs/learn-es2015/) features. Arrow functions share the same lexical scope as "this" making it so you dont have to do the typical "var self = this;" to use a "this" reference inside of an anonymous function. You should be able to tell Intellij to use the ES6 spec for javascript files.
Maybe just try detailOptional = true if that won't break other needs.
There are plenty of companies that use all Apple devices. Are you saying they just have completely insecure networks? You're saying that a network is not secure unless you can control software installed on the devices on it?
Uh, really? https://kangax.github.io/compat-table/es6/#edge13 Edge is actually a pretty solid browser, all things considered. It's certainly a major step up from IE.
I'm a bit hesitant to use "brand new" stuff because of browser support for it - but I've got it working without those 2 things now thanks to your comment. Thanks again for your help - I knew I was going about things the wrong way, I was writing way too much code for what I wanted to do. Enjoy the gold!
I can't really tell since I've never used sublime. As far as I can tell, I have found plugins for everything I wanted (snippets, linters, even fonts...). Also git support in editor is a great feature if you use git. 
To a certain extent, I do agree. Most modern business development is platform driven, but multi-lingual and you'll need to be able to jump in and out of Java (or C#) and into JavaScript and back out to HTML. Doing that from multiple IDEs isn't really effective. Especially if the toolset allows for easy scaffolding across the layers. That being said, more important (I feel) than your IDE is your code repository, build system and deploy mechanism. You should be technically able to open your project up on the command line, compile and deploy without ever opening an IDE. If you have a project that is tied to your IDE you are doing something wrong and it will bite you in the ass either from some hidden part of the project that is a black box or some licensing or platform situation that changes on you.
I am writing a blog post (to be published with my choice) explaining why I chose Hexo... Anyway, like text editors, there is no "world's greatest", just something fitting your needs and tastes...
I've tried to like WebStorm, but it's java application and I hate how it doesn't feel/look like a native application. 
Actually, downloading the pdf.js project includes one. You just have to link it for Internet Explorer 8 using a conditional comment.
why would anyone still use tabs?
&gt;That being said, more important (I feel) than your IDE is your code repository, build system and deploy mechanism. You should be technically able to open your project up on the command line, compile and deploy without ever opening an IDE. If you have a project that is tied to your IDE you are doing something wrong and it will bite you in the ass either from some hidden part of the project that is a black box or some licensing or platform situation that changes on you. I have never heard anyone say anything remotely close to this. That doesn't mean that you're wrong, but Ive never encountered anyone with this problem. It usually comes down to properly configured environments. I prefer IntelliJ over Eclipse, but any IntelliJ user worth their salt will acknowledge EDT's Frankenstein mindset: tack on as many things as necessary to achieve what you need without firing up separate programs. Granted, IntelliJ has come a long way since inception with plugins and features, but that's where Eclipse shines in my opinion. Need support for language X? Add it. Need this framework? Add it. Need this tool? Add it too. I do admit that you may not get 100% of the features in an environment. I don't think, for example, that you can deconstruct a `jar` file in Eclipse. You'd need to turn to the command line to take care of that, but I also would not say that deconstructing `jar` files is a normal part of the build process.
I install -g exactly one thing, grunt I install --save everything because I'm a lazy bastard :) I actually get on people's case when I see it because it feels like too much magic too me
Which OS? Both IntelliJ and WebStorm feel pretty native to me on Windows.
&gt; Besides learning some shortcuts There's actually a pretty cool plugin (only used it for IntelliJ but should work for webstorm) that shows you the shortcut and how many times you used the command whenever you do something via mouse :)
OS X
While I like VS (I work as a C# dev), for private JS projects I absolutely prefer WS. For my current "playing around with react" project I only use VS for the API backend.
I switched to Atom from Sublime, mostly because I wanted to play around with a complex JS application. It can be a bit laggy at times, but the plugins, and the ease with which I can edit them, more than make up for it. I wish there was an official Node debugger though. Even better, a universal debugger that supported common web platforms. The available plugins are never updated frequently enough, causing me to open up WebStorm.
It's a battle when people check in their IDE generated files and claims everyone should use the same IDE so it "just works". 
If you like Java, you may like Dart: https://dartpad.dartlang.org/9d2dd2ce17981ecacadd
Yeah, I've been at this 20+ years and I've seen how staying with a poor code repository can bring tons of problems. A place I worked at was still using Visual Source Safe and had their database corrupt after years of me trying to move them to SVN and then GIT. They lost years of work and had to scramble to find production code on developers machines. As far as the build system, if you have developers building on their desktop and deploying production code, you are asking for problems. I've also been at a place where a developer was capturing credit cards and social security numbers, because the programming manager wasn't reviewing checked in code and deploying out of a build system. I've also seen where a critical code generation feature was unable to run on anything other than the IDE (or at least the staff didn't know how to do it) and the third party plugin that ran it was not licensed and refused to come up on the developer's machine (admittedly this was with Visual Studio 6). Finally, automated build and deployment systems, if configured properly, force everyone to be on their guard as if your code breaks the build or fails the tests, your name is on it and your name is on the email. All of these are much more important than code completion or scaffolding templates. I like IntelliJ as well. It has quite a few plugins, fewer than Eclipse yes, but what they have seems to work well. Eclipse has a number of plugins that just don't seem to work (even with the version they are certified for). Regardless, if you are using a tool like maven, ant, or gradle (or msbuild and nuget on Windows) and some front end dependency system/build processor and can run it from a command line people are welcome to use whatever IDE they want. 
I'm now reading "Eloquent Javascript" by Marjin Haverbeke and it it's really good. It is not JS specific as it teaches you to code, it just happens to be in JS. That way you get a good understanding on all the various principles, paradigms, concepts and terms. Plus it has some cool exercises! It was recommended by my CTO and so far it was a good bet!
Nobody wants to edit XML or even JSON. It's machine formats, human readable but still for data serialization and transferring between services, programs and computers. Better provide some UI form with those fields. It's 21 century, you know.
Me too and it's always the same editor - for html, nodejs, javascript, java, c and c++. I'm super proficient in it, that's why it's the best tool.
Depends on your time frame, languages come and go.
Yeah, I would agree that a independent toolset around your IDE is more important that you IDE.
does something like this work? $("#email").addClass("valid");
I'm pro tabs! As I understand, space users prefer spaces because two users in different environments will see the exact same layout with spaced code, but may see different indentation with tabs. Correct? Us tab users see that flaw as a huge advantage. Some programmers prefer a 2-space indentation, some prefer 4-spaces, some prefer other options, and that's fine! With tab indentation, either user can see their favourite layout without needing to change any code - they need only change their editor settings. And this can be quite important. Some of us have real trouble understanding code that has smaller indentation - for example I struggle reading Ruby with only 2 space indentation. Using tabs is also helpful when you're copying code from the internet. In the case of something like python, if you paste in code with a different space-indentation scheme to yours you have to fix every line. Now luckily there are standards for this (PEP8 recommends 4 spaces per indentation), but the need for creating these standards and learning them when moving to a new language is eliminated in the tab world. I would also mention that using tab and shift-tab is a lot quicker than using space and backspace, but I suspect that all space users enable editor settings to allow tab to create spaces, so this is a moot point.
My boss has been trying to get me to use IntelliJ, which I guess supports javascript these days. I noticed it is absent from the list.
[**@malyw**](https://twitter.com/malyw): &gt;[2015-11-26 22:50:10 UTC](https://twitter.com/malyw/status/670011691950874625) &gt;let x = \(\(\) =&amp;gt; \{ &gt;for \(var i = 0; i &amp;lt; 5; i\+\+\) \{ &gt; try \{ &gt; return i; &gt; \} finally \{ &gt; if \(i != 3\) continue; &gt; \} &gt;\} &gt;\}\)\(\); &gt;console.log\( x \); // ? &gt;[#js](https://twitter.com/search?q=%23js) ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3ueflf%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
https://news.ycombinator.com/item?id=10626218
+/u/CompileBot JavaScript --include-errors let x = (() =&gt; { for (var i = 0; i &lt; 5; i++) { try { return i; } finally { if (i != 3) continue; } } })(); print(x);
Fixed.
There's one called `rot.js`, but my goal here is to teach programming, rather than library use.
I have heard of Rot, though i have never actually looked at it in depth, i'll take a look at it tomorrow.
I think you may have just converted me to tabs.
On the flipside, the following does not work at all with tabs (depending on your tab width settings): var foo = "bar", baz = "qux", ping = "pong"; Personally, I'm not a huge fan of this single `var` style, but it's sort of the convention where I work. But it's a good example of where tabs fall right on their face. Plus github has some heinously large tab width set in their CSS. I think it's like 8 spaces. It's ridiculous.
&gt;20+ years It all makes sense now. I've been at this professionally for a bit less than 2 years with my most experienced friend clocking in at about 5. It also helps that my current position is back by a huge corporation. I can't believe I'm saying this, but the multiple levels of code review and red tape really bring the code quality of the entire family of projects to a higher standard. 
Late to the party, but I've used both extensively. I moved exclusively to Atom about three-four months ago. Why? It crashes and freezes no more than sublime for me, has better support, and it's plugin ecosystem is better supported. Most of the popular ones lost support and no one wants to develop them. And I don't blame them, the developer of sublime basically abandoned his own project, and leaves paying customers in the dust. That being said: Atom may be a slower start up at times, but its plugin ecosystem is incredibly quick, has an amazing set of linters, languages, and themes. I honestly haven't been happier. It could still be a bit quicker, but all IDEs and editors have their quirks. Worst case I go back to my old school VIM habit.
Would you mind mentioning the plugins? I've just started on Node, and previously used ST3, without many plugins.
The speed is honestly not a very big issue for me. Even visual studio can be dog slow sometimes. I've only occasionally found its speed to be a major detriment. It's my favorite editor I've used so far. I like the plugins for it, I just want more!
I was not aware that it was possible, in any way, to execute code outside a `finally` block but inside its containing function once that `finally` block was reached.
This isn't a fallacy, it's a preference. Tabs/spaces really all comes down to preference. That's a classic tab user fallacy, that one is somehow objectively better than the other. Anyway, I prefer this: var foo = "bar", baz = "qux", ping = "pong"; to this (as would be seen, e.g., on github): var foo = "bar", baz = "qux", ping = "pong"; But more than either I prefer: var foo = "bar"; var baz = "qux"; var ping = "pong";
Ehh, there are valid reasons to install things globally. Linters: jscs, jshint, coffeelint, tslint Utilities: bower, npm-check-updates npm installs are time consuming, so if most projects include gulp/grunt, why not have them globally? 
Yeah, it's a really weird thing not to include, especially with the inclusion of vim. I guess I'm very unusual for the JavaScript world. I program primarily in JavaScript, but regularly use 3 or 4 languages and have used probably another 5 - 10 and prefer to have those in a single editor.
I agree that space-alignment definitely improves legibility here, but it's not really convincing because we tab users have a perfectly good alternative (putting 'var' on each line). Can you think of another situation in JavaScript (or any other language) where space alignment improves legibility, and there's no simple alternative like this?
&gt; I bought a private license this summer, and I still haven't really gotten into it this is why I shy away from 30-day evaluations and subscription models for tools like IDEs. When you have stuff to get done, 30 days aren't enough. Besides, even if you like it, there may not be enough incentive to migrate your entire workflow to a whole new tool. Just the fact that I was presented with an "enter registration code" popup on the first run was enough for me not to want to give it a try. JetBrains should offer a free, "unlimited trial" version, with minimal features. Look at Sublime Text for example. Their model makes me want to pay for the product. Visual Studio Code makes me want to upgrade to a more robust product. The 30-day evaluation model is antiquated and heartbreaking. What if I like the product but can't afford it? (sad face).
Glad to be of help! It definitely is not perfect... but it does the job. All the social media guff is totally unnecessary and why the console window is not the full size is beyond me but it's been working for us. 
yes for sure... I tried it before the 1.0.0 release and was not impressed at all... then a guy in work told me it had been 1.0.0 released so I gave it another go and the difference is day and night! 
My goal is a peer to peer web hosting. The server would only have to upload the website once to the client, and the client would distribute it there on.
Yes! This worked perfectly and much simpler. Thank you.
I will say, edit this post and click 'Formatting Help' to make this pretty. 
The extent of uploading the current source of the webpage. I understand the security concerns and I realize this isn't a very scalable or even a good away to go about web hosting. It's more of a side project of whether it could be achieved.
This is a bad style. It will lead to noise in your VCS diffs: when you need to add or remove a var you'll need to edit multiple lines. Also hyper-focus style optimisations are not good. Why do this but still use double quotes? Seem very arbitrary.
I'm no jQuery expert, so I'm not sure if you can do any regex with it, however, a solution to your problem could be to use a for loop: for(var i = 1; i &lt; 6; ++i){ var str = "#video" + i; var video = $(str).attr("src"); $(str).attr("src",""); $(str).attr("src",video); } Or, more dynamically: for(var i = 1, elem = $("#video" + i); elem.size() != 0; ++i, elem = $("#video" + i)){ var video = elem.attr("src"); elem.attr("src",""); elem.attr("src",video); }
You'd end up needing some kind of backend or central location in any case to communicate the list of clients at the very least. Not much unlike torrent trackers. The gold within P2P lies in sharing popular media. More so now than ever with the rise of livestreaming video. Then again we seem to be doing fine without it.
thanks for the reply! this is much cleaner code, but isn't it essentially doing the same thing? basically what I want it to do is only turn off the video that was playing, not all of them (didnt clarify that in the OP... sorry about that) however I'm not sure how to actually tell it which video was playing in order to pass that element's ID on to the JS, hence my "KILL ALL THE VIDEOS" approach 
Can you elaborate with popular media? 
Oh, sorry. I must've misread your post.
Large amounts of data that is shared/used/seen a lot or "trending".
If you find this article useful, I feel sorry for you. No one should be stuck debugging JavaScript in the Reader. 
The projects that run... Npm install Bower install 
That's the point, we don't want the user to edit XML, we want an UI to do this so the user doesn't see just the result. But it has to keep the flexibility of XML albeit constricted by a DTD. So the user can only create wellformed XML. You can't solve this with a form. Some more searching lead me to this https://xopus.com/demo/simple however, their licensing model is simply not workable for us. But it's hitting most of the right notes in terms of functionality. 
I'm not an expert on accessibility, but you should have a look over [ARIA](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA). There is a lot of resources and understanding how it works should help you design you game. Also there is a [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API), but it seems to be highly experimental.
FYI: Thanks to Axel Rauschmayer for retweeting. Find more comments and static site generators in the [twitter conversation](https://twitter.com/rauschma/status/669969799938723842). Some new favorites include: statinamic, hubpress, harmonicjs, etc.
So, a finally can stop a return? so confused.
If you'll allow me to piggyback off your comment, I have some other packages I'd like to recommend: [advanced-open-file](https://github.com/Osmose/advanced-open-file) Makes it easier to open files, has autocomplete, probably better than whatever you're using now. [local-history](https://github.com/Nicolab/atom-local-history) Saves copies of files that you're editing over time, has saved my ass on multiple occasions. [termrk](https://github.com/romgrk/termrk) If you prefer having your terminal show up as a panel at the bottom of your Atom window instead of as a separate tab, use this package. Comparable to term2 in pretty much every other aspect (although term2 was buggier for me). And one last thing, if you like the One Dark syntax theme, I recommend the [One Dark Vivid variant](https://github.com/simurai/one-dark-vivid-syntax) for more contrast (and for more fabulous-looking code).
Includes Vim and not GNU Emacs?
If you include Vim seems logical to include Emacs.
nah i didnt actually specify that til i wrote that reply, and even then i edited it :) thank you again for the help though! 
You need to include the code you're using to launch the video. Basically, just add an event handler to cache the launched video's ID when opening it, and then use that ID to stop that video when the modal is closed.
Yeah I know what you mean actually. Something more subtle would probably be better. Like, the blue dot position being just a background calculation that determines some other form of emphasis, rather than that position being used directly.
But I'm still having trouble visualizing an actual use case in terms of UI. Maybe applying the general algorithm to a grid of boxes and having them size appropriately? Dunno, just thinking out loud.
I'll definitely give it a shot, thanks!
Solved it. Thank you. 
Hmmm it's not animating for me. No errors in the console. Chrome 46.
[removed]
You need to drag the pin as hover events wouldn't suit a slider, nor would it work on mobile. The physics animation and pull towards specific coordinates is interesting and could possibly work on 2 axis instead of just 1.
Do you have a link to that shim? The only ones I found were not compatible IE8. Thanks
i don't think so; it's still relevant if you're handling user input. for example, the `onChange/setState` pattern mentioned in https://facebook.github.io/react/docs/two-way-binding-helpers.html is automatically handled by ractive.
However, it appears that if you throw instead of return then the continue has no effect, which is just not-consistent. Edit. Ignore that. It's not true at all. My test was just wrong...
React, of course, and also d3.js ! I love the way you represent your data with d3, very straighforward and yet very powerfull !
So go into distraction free or fullscreen mode.
Isn't the point of npm scripts in a project so that people can have their own global packages but still run the local versions the project depends on? Instead of running `gulp build` you should run `npm run gulp` which will call `gulp build` using the proper dependencies for that project.
You can use simple-peer for this. https://github.com/feross/simple-peer/ 
This may be the best argument I've read for tabs yet. As a recent convert, I am now extra-convinced. 
Thanks a ton, some of these are lifesavers. You're a gentleman and a scholar &amp; unfortunately a JS dev :P
You're delaying the entire thing by 2 sec, what makes you think this would make them go 1 by 1? You need to write something like: - get all `.tab` elements - loop each one - set delay to 500 * index
Well you still need to do what I said. Post what you tried and I'll push you in the right direction, but I'm not going to write your code for you :)
To be fair, this isn't a quirk of JavaScript. Dart and Java behave the same, for example. [Dart version](https://dartpad.dartlang.org/426b74e5a43e2f0ed69e): foo() { for (var i = 0; i &lt; 5; i++) { try { return i; } finally { if (i != 3) { continue; } } } } main() { print(foo()); } Java version: class Foo { static int foo() { for (int i = 0; i &lt; 5; i++) { try { return i; } finally { if (i != 3) { continue; } } } return -1; } public static void main(String[] args) { System.out.println(foo()); } } Both output 3.
Oh... your `this` is broken. It's not bound inside the `setTimeout` function. `this` only exists in the immediate function. Try this :) setTimeout(... $('.tab').each... $(this).delay(1000 * index).css...
Have you tried Ramda? If so, are there any perks to this version of lodash over that? 
No, copy what I wrote, drop everything else :)
-g for npm (obviously) and bower, i don't even -g grunt since it's different on older projects.
this ? XD $(document).ready( setTimeout(function(){ $('.tab').each(function() { $(this).delay(1000 * index).css("opacity", "1.0"); $(this).delay(1000 * index).csss("margin-left", "0px"); }); }, 1500));
For my personal projects I use ramda. But I think the API is too unstable to use it in production just yet. lodash-fp is based on the normal version of lodash which has a stable API. I don't want to have to go back and have to refactor my code every time I update ramda.
You should check out /r/SubredditSim.
That would be inconsistent, but it's not true. I just tested throw instead of return, and it throws 3. x = (() =&gt; { for (var i = 0; i &lt; 5; i++) { try { throw i; } finally { if (i != 3) continue; } } })(); console.log(x); This results in an uncaught exception with a value of 3.
I remember seeing C# do this too.
rx.js immutableJs - I need to explore that redux - currently using reflux and pretty happy with it, the only reason why I didn't yet try redux
If you could provide a sketch of what you want that would be helpful. In any case, [D3.js](http://d3js.org/) is an extremely powerful library for drawing almost any kind of chart imaginable.
Isn't that fuzztesting, not unit testing?
Shrug. I know it as property based testing but whatever it's called it's great 
For loops have three parts. for (var count=0; count &lt; 10; count++) should do the trick
for ([initialization]; [condition]; [final-expression]) statement You are missing the initialization. Try &gt; for (count = 0; count &lt; 10; count++) 
First, in JavaScript because of this: return { propertyName : 'value' } Because of how JavaScript handles semi-colon insertion, the value of this return will be `undefined` and for this reason it is not recommended to code in JavaScript following that style. Here is your code fixed: http://jsfiddle.net/ahvsbmj1/ `for` expects a format like this `for (var i = 0; i &lt; 10; i++) {}` when you declare your variables at the top of the function (good practice) it still requires a format which is similar: `for (; i &lt; 10; i++) {}` I also assumed you wanted to set a new value for `random` each iteration of the loop, so I moved that inside the `for` loop.
You could also install Grunt without -g and then put "grunt": " grunt" in your package.json under the scripts. Then run it with "npm run grunt". 
If you omit some of the 3 expressions, you still have to put the semicolon there. for(; count &lt; 10; count++) Would work, for example. By the way, if you want to loop forever, you can use: for(;;) instead of: while(true) Anyhow, since you aren't doing anything special for initialization, you should just put that expression in the "initialization" slot: for(var count = 0; count &lt; 10; count++) Also, as /u/Democratica mentioned, use 1TBS aka hugging braces like everyone else.
I think op is talking about the nonblocking io. But if done right, it shouldn't matter here.
No.. use whatever gets the job done better, if you have relational data or need transactions postgres is great
I donno, I always imagined Node as like a hot potato service, that treats requests like a hot potato. 
By the way, you can use postgres both as a noSQL and relational database with its jsonb storage feature : http://hasura.io/blog/the-unofficial-guide-to-jsonb-operators-in-postgres/ It gets even more easier to use with a library like https://github.com/robconery/massive-js
Haven't done postgres with Node yet, but I'm sure there's an easy way to make async calls to the db.
whoa, no way, that's pretty nice. Thanks
&gt; read and writes from a DB are quite expensive Have you benchmarked this? Of course, your database calls should be async, just like everything else in Node. 
[Three.js](http://threejs.org/) - a wrapper for WebGL (with fallback renderers for Canvas). It's not too hard to get started with, and it allows some [really genuinely amazing](http://carvisualizer.plus360degrees.com/threejs/) results.
Freezer, yolk. Deku
...Why...?
What is the insinuation with that.... that some consolidated JS files are big? I hate to burst your bubble, but 10k lines of code isn't a big deal. Check out these files that I use for unit testing: * http://prettydiff.com/test/samples_raw/beautification_javascript_ace.txt * http://prettydiff.com/test/samples_raw/beautification_javascript_angular.txt * http://prettydiff.com/test/samples_raw/beautification_javascript_codemirror.txt * http://prettydiff.com/test/samples_raw/beautification_javascript_obfuscated_adobe.txt * http://prettydiff.com/test/samples_raw/beautification_javascript_obfuscated_tvly.txt
Yes! You can do it! Please! 
This a long project and it will take some time to reproduce most functions in a performance orientated way. But I think having it would be nice and avoid everyone from repeating the operation of debugging it or/and try to enhance it. So yeah because I think I would benefit from it and not just me. That means replacing animation libraries one by one, the ultimate goal being to just be able to swap bootstrap.js with it's new "enhanced version". Edit : Quite honestly, that's mainly why I posted this question. Since it does not exist, I presumed there was a major drawback in doing it. But so far It just seems people keep running through the same optimization issues and repeat the same work. I just don't feel like burning time if something exists already or if there's a quite serious argument for not doing it.
Oracle ?!? Are you from twentieth century ?
Rethinkdb has a Node driver, is NoSQL but can use joins and is fast enough for live gaming.
Warning: They don’t work from different origins – even if you have set a proper header, and can load and execute normal JS, several browsers won’t execute ServiceWorkers loaded from a different URL.
Wow, that is really cool. I will have to check it out since i want to get more in depth with graphics in JavaScript.
Nice! However, your spacing seems slighty off var nodeA = document.querySelector('#nodeA'); var nodeB = document.querySelector('#nodeB'); var settings = { start : { opacity : 0 }, end : { opacity : 1 } }; transition(settings).start(nodeA, nodeB); Is better written as: var nodeA = document.querySelector('#nodeA'); var nodeB = document.querySelector('#nodeB'); var settings = { start: { opacity : 0 }, end: { opacity : 1 } }; transition(settings).start(nodeA, nodeB);
Thanks for checking it out! I'll fix the spacing for the object. The variable alignment I'll think about. :)
How many bullet points before I lose all interest in what you're saying?
I will share my experience with service workers. I knew it was bleeding edge when I started. I attempted an offline write-back caching scheme starting in June. I finally abandoned the architectural approach in early November. Some of my complaints: 1) The development cycle is difficult. This is because you need to constantly and manually kill the currently running SW to get the "new" version to load. 2) SW's are still new, and doesn't run in many browsers. basically chrome only. 3) SW does NOT work within android "web view" components. Well it appears to, but the functionality is "undefined" according some insiders. This was the final large straw for me since my system evolved from an offline web page (poor user experience ) to an android app with web view content (better user experience). I ended up reimplementing my write back cache in java because of the instability of the SW solution. All that said, I like the concept of service workers. I just hope that it becomes more stable on mobile, and that the development cycle is improved. I'll certainly revisit it in another 6 months.
&gt; exactly, read and writes from a DB are quite expensive `:|`
yeah the node-postgres library is async. 
I normally like to build out my wordpress blog in dreamweaver, and use a corporate oracle db for saving user comments. The site runs best on a Netscape browser though. 
hmmm sounds interesting. Ill look up Rethinkdb, honestly there are so many libraries, db/cache engines that it's hard to keep up. 
Went to try to find out what is a Repo Card, ended up getting addicted to 3D 2048...
Vue.js is awesome. I'm not very experienced with js, I've tried to get into Angular and React and haven't gotten very far. But I started using Vue this week, and it just made sense to me right away.
I'm in a pretty much identical situation. I've looked at both Angular and React and sort of put it off but Vue.js just sort of clicked for me and I've been replacing a lot of old jQuery code with Vue and it's amazing.
I have no JS experience. i mainly work with Python or Mathematica (which is what I used to make these). 
One thing to watch out for: updates in Rethink are kind of slow compared to other dbs. Expect at least 15ms for simple updates, whereas Postgres can take microseconds. For live gaming that can matter. (Of course, Postgres can be much slower too, if you're doing a lot of concurrent updates to the same rows and don't index properly.) Inserts, reads, etc. in Rethink tend to be very fast though, and Rethink is probably the highest quality NoSQL db out there.
http://i.imgur.com/5oMNN0V.png no I'm not maximizing my browser just for you
And it's not even cool for that...
Yeah, it's more akin to `/dev/null` than Redis. :(
Just added a simple close button (if that helps any :) I'd love for some devs to build some nice themes.
Would be nice if ES7 could address this. I actually kinda like the idea of choosing a specific algorithm and making it seedable, because that's the kind of thing you want from a standard library's PRNG. You don't need something super fast or super secure. What you need is something which handles the simple most common use cases. Some flavor of Xorshift would do the trick.
Thank for the awesome feedback! I just updated the 2048 cube. Can you explain what you mean by the options pointing to the repo and username?
It's useful if your data actually looks like arrays and objects. In my previous job, we had to store the state of a clinical form into a database for rollbacks. Deconstructing them into relational data and reconstructing them would be expensive, so MongoDB or one of the other NoSQL databases would be preferred, so we chose mongodb because it has a lot of support and was easy to use.
What does that even mean?
TypeScript.
I don't know if there's a node api for it, but Postgres has an asynchronous, non-blocking api: http://www.postgresql.org/docs/current/static/libpq-async.html
I agree and use a Mac normally, but I was at work and they stuck me with a PC at the time.
Oh, got ya. I just had that as the input to my card. You can change it when you set it (just basic html there).
I've actually had really good results from Google Charts. I've been using the Angular Directive port and haven't had any significant issues.
So what's the problem? 
I should be sleeping instead of fiddlin, haha. Here is kinda a fun way to shift images, which essentially is swapping when there are only two. [http://jsfiddle.net/2yz13tdy/13/](http://jsfiddle.net/2yz13tdy/13/)
[Knex.js](http://knexjs.org/), a SQL query-builder. It's not an ORM, it just makes querying in JavaScript so much better.
This. Next app, Google Drive on Electron.
On Firefox: https://developer.mozilla.org/en/docs/Tools/Scratchpad 
Bleh, it's a list of lists of interview questions. 
No. Just use CSS.
The "class" keyword gives you little in capabilities that did not exist already. What it *does* give you is a language-supplied reification of a particular style of creating classes, which can be analyzed by linting tools and IDE's. It is also a standard that can be used as an API across projects. 
The benefit is that you get the badge with the amount of messages, which doesn't happen with pinned web applications... It would be useful with WhatsApp too so you can see a badge or a blink if you've got messages. The HTML5 notifications are good, but with multiple monitors you miss a lot of those and when you go somewhere and come back you also missed the notifications.
Enough is enough! I've had it with this motherfucking Javascript on this motherfucking plane!
Unfortunately, it isn't : / Apparently the arrays created by PDFJS are too big for that shim to handle
Library = extra code = slower loading of webpage. You have to update your library, libraries have different interfaces, so you can't just use another one as drop-in replacement.
I tried this out, but it doesn't seem like the snippets execute in the same context as the page? For instance in the console area I ran: $('.navbar') and got the element via jquery. When I have the same thing in the Snippets and run, it can not find the element. Does anyone know if I can execute the snippet in the same context? I guess I could just copy and paste my snippets to the console section and run there, which works fine. But I'm quite lazy.
No, but my corporation has a site license to Oracle. Since it doesn't cost my department any money to use, we use it. Nevertheless, we did do some research to see if we should move to an open source rdms anyway and the consensus was that oracle is still far more powerful and has far greater performance than any open source rdms. The downside to oracle, of course, is the cost, but since that is not a factor for us...
Inbox support would be nice.
Yes, as far as I know it runs in its own context. For getting access to the element you have to use console afaik. There is another trick that I use when I need access to a Dom element in my snippet, I select the element with element inspector, and pass it into the snippet function with $0 - which is a reference to the last selected element. See http://www.alexkras.com/debugging-nested-scope-in-angularjs/ for an example. 
I have yet to read a single article or comment anywhere arguing for the inclusion of the class syntax in js that didn't include a reference to "how much easier it will make inheritance to use" as if it were a positive reason. Usually it is the primary or ONLY argument made. As for the fact that one can use inheritance without classes, I respond with a favorite quote of mine: "There is no limit to how badly a program can be written." You can write things badly with any language, architecture, or style. What matters is trying to write good programs.
Sweet that's helpful, thanks!
&gt; I have yet to read a single article or comment anywhere arguing for the inclusion of the class syntax in js that didn't include a reference to "how much easier it will make inheritance to use" as if it were a positive reason. Sure. ES6 classes make inheritance less verbose. But then so too do Crockford's style, Mattias's style, and Elliott's style make inheritance less verbose. Do they all also "encourage inheritance"? Is providing a less verbose syntax the same thing as encouraging us to use inheritance more often? If it is, then they're all equally guilty. And if it isn't, then it's wrong to say classes encourage inheritance.
I created this because the standard Fetch API is great but pretty limited feature-wise. This library allows you to add a lot of automation. Computed options are useful when configurations change (somewhere else in the code) for example with refreshed OAuth access tokens you want to change the Authorization-header. Just pass in a computed value and the library will call it. Middleware makes it possible to add default request headers for example, and response transformations like parsing JSON into ImmutableJS. You can customize the client with your own middlewares. I hope to add more middlewares (OAuth, ImmutableJS etc) soon. Right now there's just one for JSON: https://github.com/RickWong/fetch-rest/blob/master/src%2Flib%2FjsonMiddleware.js They're really easy to create!
Might be interesting to run as a docker container. We do a ton of cloud stuff and getting super lightweight containers has a ton of value. So far the best option for us had been Golang containers because they can be so lightweight. Personally I don't care for Golang so I like to experiment with different things.
Nice! I am working on something similar for Google Docs. It's nice not having to keep tabs open for every Google doc being reviewed or worked on.
It means that the node event loop literally just used to structure requests and marshal them to other services and processes.
doesn't nginx already do a better job of that?
The readme tells you to look [here](https://github.com/sjiitr/traitjs/blob/master/use.js) for example usage.
I remember seeing this a couple years ago at the NodeJS meetup in Portland. I'm finally getting around to learning to use Docker.
This is fucking stupid 
I think you need to consider what exactly your goal is here. use.js demonstrates only things trivial - and faster - without any library, giving people no reason to look further. Is it "does X implement trait Y?" checks that you want to implement? Or throwing errors early when you improperly implement a trait? This needs to be written somewhere, and ideally demonstrated. edit: also, you really shouldn't modify `Function.prototype`.
Even with such "expensive" reads, most relational databases on normal server can handle thousands writes and reads per second.
flex-box rocks.
Inheritance is not bad. You use whatever is needed for the problem at hand, don't reject one way based on random ideas. They all have their place, and its up to you to figure out the best one for any given problem.
Your operating system doesn't just ignore notifications though, does it? Like they get added to the notifications panel or on the login. 
irrational_design, honestly I wasn't poking fun at you, I just took the "twentieth century" theme and wrote something absurd. That being said I honestly look up to people who work on a major enterprise system that Oracle is used to power, because that means you most definitely work with some massive database system both in the size of data to the number of tables, that takes some major skill which is something I hope one day I can do as well. So in retrospect I should have remembered that tone of voice and context is absent on the internet. So what I intended to be just a spur of the moment absurd comment about wordpress and netscape , instead just made me look like some naive know-it-all hipster making a snide remark. Anyways, just wanted to clear that up, because I agree with you on using the best tool for the job. 
Well, this is extremely useful for me. I appreciate the post and the list is quite good if you sift threw it. 
What about creating a list of rewrites people have done? Seems like less effort.
this is what I do, I look for challenges and new problems to solve. I'm always solving new problems and I don't know if that will work for you. But as long as I am solving new problems, I feel like I am progressing. In that way of thinking, there's like a million pathways that all lead to improvement. It works for me and helps me relieve the stress.
&gt; Once the new sniper is created, you can use the white space in the right column as a regular code editor.
I posted a list of topics I cover over in another thread, here: https://www.reddit.com/r/javascript/comments/3rb88w/ten_questions_ive_been_asked_most_more_than_once/cwmnz7t The whole thread is worth reading, though.
More concise syntax is, according to you, common to all approaches. That has not been my observation with the non-class styles I personally use, but perhaps it is so for these other styles you mentioned. If that is so, fine, but that doesn't explain the sheer number of arguments made that relate classes to inheritance. If they were not related, how then are they almost always associated by their advocates? Perhaps it would be more accurate to say that "class advocates almost exclusively advocate the use of inheritance as well."
I wish it were easier to import and export your snippets
Can you provide some examples of appropriate usage of inheritance? Ones for which composition would constitute a wrong choice?
I've seen Eric Elliot's stuff and I'm confused why I keep hearing harsh critiques of his writings. Why is that? Is it because of hard-line rationale or stubbornness?
Yes, if that person writes code like they write articles... oh well. :)
We're in the cloud!
It's very strident, yes, and it plays fast and loose with terminology, but that's not the real problem. There's lots of opinionated work on the blogosphere, after all. No, the real problem with Elliot's work is that he presents himself as the owner of a consensus that doesn't exist - as though the entire industry stands behind even his most speculative opinions - and that he's a zealous self-promoter. He writes up his opinions in articles with titles like "the open-minded developer's guide to object orientation", which is quite breathtakingly egotistical. For my own account, I don't _hate_ Eric Elliot - sometimes, I'm happy to agree with him - but I wish he would just stop talking about himself.
This looks like something I did for a node API facade that called down to another api, except I didn't consider adding middleware. Looks great. What's the reasoning behind the verbs? I've always just used the HTTP verbs. Is there a white paper or something you could point me to?
No reason to use underscore when lodash exists. 
It's called BREAD. I added "replace" though to differentiate between PUT (replace) and PATCH (edit) methods. http://paul-m-jones.com/archives/291
Agree. Rebecca is pretty well known but her articles never seem to be able to hit the bullet points hard enough that you know she even made a point.
Cool. Thanks. I had heard someone talk about BREAD during development of a CRUD service before, but I thought they were being silly.
Perhaps "people with no money to upgrade" is not the best market to go after.
Try Underscore.js or [lodash](https://lodash.com/). Not just for it's simple templating, but also for its functional uses.
Work for a company with big, international F500 type corporate customers. We dropped IE8 support about a year ago. Now IE10 usage is much lower than IE9, and IE9 recently dropped below 5% usage. We will be eliminating support for both sometime within 2016.
Look into local storage; easy way to store key value pairs using in-browser memory.
It also has its own built in function for async requests which is hooked into the rendering lifecycle.
&gt;Knockout is such an old, outdated, and terrible technology that should just die already. I've never done more than playing with Knockout, so I'm missing your point. I'm curious why you would say that it's outdated and should die. 
Word of warning though: Using just ES6 templating (and some parts of the lodash/underscore templating) are not secure by default, so keep that in mind if your inputs come from users and could contain html.
The equation for... what? "I need 10 values; where the red line is for each sprint." Did you forget to write half of the sentence or something?
I just looked at this am I'm a little confused as well actually so I'm glad someone else is.... I was thinking that if the values are stored in the sprints then it could just be `y = sprint[n]` or something like that... Then I guess the software would handle joining a line from point to point. 
I think I've thought of something pretty daft for this but I'll put it out there anyway. I'm not aware of a function that can be used for this, but I'm not really aware of much so... If you were to set all the x values to the terms that you want to work with re sprints so sprint value ============== 1 : 40 2 : 20 3 : 33 4 : 10 5 : 50 The distance for each of these points `1`. So if you set some *accuracy* value or whatever to 100 then you might split each of these values of `1` into `100` sections. To see the change in y for each of these values one would have to work out the difference for each step for that particular line. So for the line between sprint `1` and `2` the step would be `20 - 40` which gives `-20`. Then divide this by the accuracy so `-20 * .01 = -0.2`. so there would be 100 values drawn between each sprint. The y position would be `y = sprint[n] + accuracy * step_number`. So on the 17th split this would be `y = sprint[1] + -0.2 * 17` , which is `36.6`. And that's the position that some y value would be drawn at. I've no idea if this is anywhere even close... I just thought someone else might teach me something in the process ;) 
Its not just JS Frameworks, its the whole stack. Google is trying to fix this via Chrome (Progressive Web Apps &amp; RAIL), but this is years out for global adoption and Apple is the big show stopper here. Effectively if you want to sell HTML/JavaScript/CSS for mobile, you need to limit your audience to the 10 - 15% of those that are blessed with high end devices. If your end game is making money off ads, its going to be hard to road to reach the masses, but if its to sell something then those that have money to pay hundreds of dollars for their phone are more likely to afford your app. Right now I recommend only supporting Android 4.4+ or even Android 5.0+ since we know the minimum specs and can test against it, and then iOS 8+ to kick out the iPhone 4. If you want to go lower you need to start diminishing user experience with, like staying far away from virtual scrolling or any eye candy css / transitions (like Hero transitions). Which then you fail into apps that are fine for internal use (business) but not okay for consumers. Untappd is a perfect example of the issues you will face and yet its the most successful Cordova app I've seen to date. Here is another good resource to reaching the masses: http://devgeeks.org/slides/phonegapdoesntsuck/
Trend of what again?
"They said JS was slow. Now it's fast. Said we had no dev tools. We have the best. Said it sucks for big apps. We rock them." JS is still slow, it's only fast when comparing it to earlier gens of JS engines. The best dev tools? LOLWUT? You "rock" big apps? How cute, you think your little apps are big.
I'm starting as a web dev and I've seen a lot of tools. This shows some new things I hadn't seen before, gonna give them a shot. Thanks.
You'll probably get better results in the same amount of time using React vs. another one of these templating technologies. Have you tried it yet?
I think you may be lost. This is the javascript subreddit, so naturally people here and content posted to here will be favorable to javascript. It's also 2015, and node is a thing, so you can have as large javascript apps as you want without being limited by the browser. 
&gt; so naturally people here and content posted to here will be favorable to javascript. Oh so there are no objective, sensible people here, just fanboys? Gotcha. &gt; It's also 2015, and node is a thing "Hey guys, we don't need a browser so monolithic apps are not only possible but magically practical." Hahahahaha
Unless you want to be able to understand the code of the library you're using: Lodash's code is a trainwreck while Underscore's is a practically a work of art.
Flame? I'm providing a counter point to a very, very, hyped up statement in the OPs article. I'm a full stack dev, I do a lot with JS. I don't, however, give into the hype that it's some amazing language and has the best dev tools out there.
OK, so, some context: this is an article by eric elliot, who has something of a ... mixed reputation in the javascript community. Bit of a braggard. If you were just offering a counter point to this guy, you would not get so heavily downvoted. In fact, you'd probably get upvoted, since it can be kind of eye rolling - even to primarily JS devs - to say things like "types don't really help" or "javascript has the best tooling out of any language". But that's not what you did. You laughed at the article without providing much in the way of content --- no, calling their statements "cute" doesn't count, nor does "LOLWUT" --- and then responded to challenge by saying you can't have larger javascript applications in the most dismissive and childish way possible. You're not contributing to this conversation. You're just flaming it. Please leave.
&gt; You "rock" big apps? How cute, you think your little apps are big. In fairness, given the idiocy of node and the many many faults of javascript, something like gmail is a huge fucking app on par with the Linux kernel, Space Shuttle flight software, Windows 10, or tunneling under the Channel or maybe even under Seattle.
Maybe if your counterpoint contained more info on what other languages have better dev tools and why instead of just saying "lol nope", people wouldn't be as hostile.
I didn't see one ounce of evidence in that article to back up the claim that JS does in fact have the "best" dev tools so until it does, I can call bullshit all day long and I'm not wrong.
&gt; JS is only about 20% (or less) slower than compiled languages Yeah, no. You can't just make a vague and general claim like that. You have to provide very specific scenarios and compare specific operations apples to apples.
I think you might be looking for linear regression.
This guy's behavior and the his posts that show up here paint a picture of a guy who is a moderate jackass, so I'm a bit reluctant to take his advice. I don't know if that's a mature attitude, but almost everything I've seen from this guy seems to be promoting him first and solving my problems second
That Stat is based on compiling unreal to JavaScript with emscripten, so it's pretty optimized js code but it is real. 
It fails to separate HTML and Javascript so it's a no go in my book.
Ecosystem is not about IDE.
Gmail was written with the help of the Closure Compiler. You use comments for type annotations which enables compile-time checks. CC was created to help with JS' scalability problems. Google Inbox is 70% GWT and 30% CC. GWT (Java to JS) was created to sidestep JS' scalability problems. Google Fiber TV UI and a bunch of the new ad stuff was written in Dart. Dart also scales much better than JavaScript. It has simpler runtime semantics, optional types, and a pretty decent static code analyzer. Microsoft created TypeScript for pretty much the same reasons. I know that SimCity (2013) contained like 30k lines of JS, but they also used CC. I don't think there is anyone who's written a large app with several hundred thousand lines of code in plain JS. It just isn't feasible. JS didn't even have modules until recently.
What's wrong with AMD? What's a better alternative?
&gt;many languages just don't need a typescript That's a bit confusing since TypeScript is a language. &gt;Wouldn't it be better if things just work if you install the language and download some professional IDE? I personally like modularity instead of having to install a single, huge tool and hope it does everything well.
https://github.com/SeanJM/peach-2 I built this. I think it's pretty good. It has on.render events. You can render strings or render nodes. Judge for yourself.
It's not really difficult to namespace a large javascript project, and weak typing isn't the boogeyman. I can't remember the last time I found a bug that was caused by weak typing. The myth that you can't do large projects in javascript was created by people who would rather not learn javascript. 
I used Knockout a *TON* a while ago on a very large app, but I haven't touched it in about a year, and we weren't using the very latest version even then, so take this with a grain of salt, but... 1. Knockout is *old*. When I started using it, it was already mature, but Backbone was the new hotness, Ember has just released and was viewed with skepticism, and nobody had even heard of Angular yet. Today, Knockout has barely changed. It's the same library I picked up all those years ago, but while it looked pretty good in 2011, compared to other 2011 frameworks, and given what we all knew in 2011 about building webapps, it looks much worse now. 2. Knockout claims to be a MVVM framework, positioning itself against MVC frameworks like Angular or Ember. But really, it's just a two-way data binding lib. It's not a particularly bad one, but it honestly does less than React, which bills itself as being purely a view lib (the V in MVC). Knockout does two way data binding; if you want to do anything more complicated than shown in Knockout's (admittedly superb) tutorials on their website, you're on your own. It doesn't have a router, it doesn't have any concept of models, and it doesn't know how to talk to a REST API. 3. Performance suffers if you don't write it **PERFECTLY**. And there's no guidance on how to write a perfect Knockout app. You can add logging and such and try and figure out how many times various computed observables are recalculating, but you can't really *stop* them from recalculating. 4. Speaking of which, there's a ton of magic. React and Redux make things extremely explicit. Why does this DOM node look like this? Because that was the output of the render function. Why was that render function called? Because of this action. What were the params passed to that render function? Your app state. Anything that looks wrong is the fault of your render function, your state, or your actions, and it's easy to inspect them. In Knockout...why does anything look like it does? Who knows. Click a button and events start to fire, subscribers are notified, computed observables recalculate, and re-recalculate, and eventually you'll end up with a rendered DOM, but you have no real way of figuring out why. I had an issue with a Knockout app where, very rarely, when I went back to a list view after editing a record in a detail view, it still displayed the old info in the summary line for that record. Why? I have no idea. It's a class of error you simply can't *have* in a better framework. 5. It's a ghetto. It was developed in isolation, and it's used in isolation. The React or Redux ecosystem is amazing; tons of plugins, libraries, blog posts, tutorials, boilerplates. Angular, Ember, or Backbone are similar. Knockout is basically the official website and two blogs, and a very crappy Google groups mailing list. Long ago Knockout made some very bad bets on, eg, AMD or two way data binding. These were not good bets, but they can't relinquish it now; the few people who really want an AMD based data binding lib love Knockout, but nobody else does or ever will. But if they stopped being that, then they'd be starting over from scratch. It's an evolutionary dead end. In Knockout's favour, it has the best god damn tutorials ever. And it's really amazing if you want to replicate the exact sort of thing in the tutorials. Drop knockout.js into your page, write a very VERY small amount of boilerplate to wire your code up, and holy shit, it works 100%. Amazing! And if all you want to do is drop knockout.js into your page, and wire up a few variables, you're golden. But the second you want to do anything else, then you've made a mistake which will not become apparent until it's much too late.
I always love these sites that start out as nothing but a giant graphic because the heading and all the actual content is below the fold... so unless I realize I need to scroll my first thought is "gee, this site is messed up". Cut that shit out devs. It's not cool looking, it's not clever and it's not good design. It's FUCKING BROKEN. And especially on a site that's trying to give me advice about developing web sites, it kind of invalidates any such advice right from the start... you know, if I even FUCKING SEE THE ADVICE.
It's better then Angular and React in that aspect though!
Not typically, but I have experimented with writing performance sensitive code that way 
&gt; The myth that you can't do large projects in javascript No one says it's impossible. It's just needlessly difficult. People wrote entire applications like flight simulators in ASM. Of course it's possible to write a somewhat bigger application in a high-level language with poor tooling like JavaScript. But it would be much easier with Dart or TypeScript. They let you auto-complete everything, lots of information is right at your fingertips, you can document your intent in a very concise way, and most breaking changes are immediately spotted. You also need fewer unit tests to reach the same level of confidence. The analyzer ensures that everything fits together.
Well, if your app is one module written in Dart and one module written in C++, it doesn't really have much to do with JavaScript, does it?
Separation of HTML and JS is a pretty outdated notion. Pretty much every major framework today has converged on using components as the basic unit of abstraction. With component you separate concerns based on "what the code is about", rather than "what file extension it has".
TypeScript is a superset of a language. It's interesting because there is a subset of JavaScript developers that value or require types and it's perfect for them. 
If you're going to include transpilers than you can theoretically get any language to perform as fast as C or Assembly or at least close to it depending on the overhead of the features inherent in the original language used and whether or not the transpiler supports them.
That's a really gorgeous scene! It even looks really great on my phone. It's a Nexus 5x, so I'd expect it to be able to handle it decently well, but it looks even better than I expected.
The dev tools available for C++, C# etc are far ahead of what's available for JS, regardless of whether they are in the IDE or elsewhere.
You can say that to almost any argument and it's equally pointless.
Hi /u/TechFundaHowto, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `techfunda.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [techfunda.com](/search?q=%28and+site%3A%27techfunda.com%27+author%3A%27TechFundaHowto%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|100%
Except he said Visual Studio Code, it's not even close to Visual Studio, not by a long shot. Visual Studio Code is a skin of Atom.io, but with less features. How he compares that to Visual Studio, I have no idea. That alone tells me he has no idea what he's talking about.
That is so much nonsense. Functional programming means so much more than "treats functions as data types" (but that is a precondition), most JS is not written functionally at all but very imperatively with state manipulation left and right, and "treat code as data" means something completely different again (and is only possible if a language's abstract syntax tree can be accessed as a data structure which is impossible by default in JS and terribly awkward at best with lots of external libraries!)
Hi /u/adamstac, it looks like you're ~~new to reddit~~ resurrecting a dormant account, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `changelog.com` or `thechangelog.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [changelog.com](/search?q=%28and+site%3A%27changelog.com%27+author%3A%27adamstac%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|4|57% [thechangelog.com](/search?q=%28and+site%3A%27thechangelog.com%27+author%3A%27adamstac%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|3|43%
not really different languages have performance characteristics that make them generally slower or faster, e.g. an interpreted language will always be slower then a complied because it needs to be parsed at run time. 
I'm using it on one of my applications. It's very easy to pick up with its straightforward approach to the ViewModel.
oh, yes please!
No, there is not. The two terms mean the exact same thing. I have no idea what the rest of the paragraph could possibly mean. The term you're looking for in your last paragraph is "homoiconic" and has nothing at all to do with declarative programming which is YET another thing. 
I wish more tutorials used Pokemon examples. Better than yet another todo app. Actually, I happen to be the owner of an online Pokemon RPG. I've been working on an entirely new sister site with [overworld maps](https://www.youtube.com/watch?v=vSt4gcASyuo) and other fun stuff, written in JS. It's amazing what you can do with JS these days.
holy shit
Hi /u/scottyrogers10, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/joubertn, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/ugwe43to874nf4, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/flavl, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `tlhp.ml` and `tlhp.cf`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [tlhp.ml](/search?q=%28and+site%3A%27tlhp.ml%27+author%3A%27flavl%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|4|67% [tlhp.cf](/search?q=%28and+site%3A%27tlhp.cf%27+author%3A%27flavl%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|33%
Prototypal Inheritance. You can create properties and methods on the prototype, and all objects that are inherited (or derived) from that prototype immediately have those properties and methods - even after you've created them. 
Using a virtual DOM doesn't make something fast; React, Mithril, etc. use virtual DOM to keep their APIs simple without being incredibly slow. Raw DOM manipulation is always going to be faster when written properly but the tradeoff is that complexity is harder to manage.
I can't find where I saw this (Maybe hackernews or product hunt) but the reasoning for including large image headers is that it forces the audience to immediately interact with the content (scrolling). They found that it increased the percentage people who read the article start to finish. 
This is a great article about functional programming in javascript. I think it will answer many of the questions you have. [Understanding Functional Programming](https://medium.com/cool-code-pal/learn-hard-the-code-way-functional-programming-95c89c2b61df#.ltc1df5n5)
I can see this, but I think they've still botched it. On desktop, as I show, the hero is so large it even pushes the headline off the page, and on desktop, it takes many spins of the scroll wheel, to bring the content up. It's just annoying and makes me hate them. It mostly just screams "mobile first. And last".
&gt; TypeScript &gt; It’s heavily class-based. An awkward fit for JavaScript’s prototypes and object composition. That was probably more true of the earlier versions of TypeScript, but the type system has been expanded enough now that you can annotate even the weirdest JS constructs. There is no requirement to use classes with TypeScript. There are huge benefits to be had even if you just use interfaces. I don't want to discourage anyone from trying something, but by starting rtype Elliott is seriously underestimating the amount of design and work which has gone into TypeScript. Type systems are not easy to get right. 
This is probably because `.forEach()` does more work than your function. In general, you are likely to find that your own forEach-like or map-like function is faster than the built-in one, because your own functions will only do what you need. Specifically, `.forEach()` has to do two things in each pass through the loop that your code doesn't do (and doesn't need to): 1. It does an `if( i in array )` test to skip nonexistent array elements. 2. It uses `.call()` instead of just calling the callback function. I suspect that these two things account for the 50% difference you found. On the [MDN .forEach() page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) you can see a reference implementation of `.forEach()` (scroll down to the Polyfill section near the end). And there's some [interesting discussion here](http://stackoverflow.com/questions/18881487/why-is-lodash-each-faster-than-native-foreach).
I absolutely agree with all of that, but I still find it concerning that my function is faster than a plain for-loop.
There are plenty of blog posts on Medium which do not start with a screen-filling JPG. It's optional.
Winner winner, chicken dinner. Putting both in functions made them relatively equal at ~1.2ms. It looks like JIT possibly does only optimize within functions. Good discussion, and thanks!
I advice you to read the article. You are clearly only headline reader.
Sorry but you clearly did not read the full article.
Whether a language is interpreted is an implementation detail. There are interpreters for C and there is an AOT compiler for Dart.
What hardware do you have btw?
Can you share your test case code? For example: var num = 100000; var j=[]; for(var i = 0; i &lt; num; i++ ){ j[i] = i; }; var k=j; console.time('normal for-loop'); for (var x = 0; x &lt; j.length; x++) { j[x] *= 2; } console.timeEnd('normal for-loop') console.time('for-each-esque function'); function map(arr, func) { for (var x = 0; x &lt; arr.length; x++) { arr[x] = func(arr[x]); } } map(k, function (i) { return i * 2; }); console.timeEnd('for-each-esque function'); 
Thanks! I am writing an article advocating that approach. The good thing is that it should be working out of the box with any legacy redux app. It simply does not break middleware chain nor reducer composition hierarchy.
&gt;10GB RAM What are you some kind of an anti 8-eist? 
Look it's a major pain point in my life but I just can't go back to hard drives. I'm in between a rock and a hard place here, man.
Changing your test 1 to this: /* --- test 1 (normal for-loop) --- */ var t1 = performance.now(); (function () { for (var x = 0; x &lt; j.length; x++) { j[x] *= 2; } })(); t1 = performance.now() - t1; console.log(t1.toFixed(3) + "ms"); Drastically changes things. My guess is that the for-loop in the "global" context (ie. not in a function) isn't being optimized in the same way that the map/callback functions are. output of 3 runs: (index):45 0.510ms (index):52 0.635ms (index):54 For-Each-Esque operation only took 124.51% of the time! (index):45 0.515ms (index):52 0.620ms (index):54 For-Each-Esque operation only took 120.39% of the time! (index):45 1.410ms (index):52 1.575ms (index):54 For-Each-Esque operation only took 111.70% of the time! EDIT: looks like I should read the whole thread first ;).
As I had responded to /u/Disgruntled__Goat, it is important in what I'm doing. I'm iterating through sets of hundreds of thousands of stock ticks many times to get various stats (sd, skew, boll bands, kurtosis, etc.), and it *does* add up quite a lot. If I could shave off 3-6ms or so for each array iteration it'd save me probably close to a half a second on an entire operation that takes around a second and a half. It's not inconsequential at all.
Yep that was about exactly the results achieved [here](https://www.reddit.com/r/javascript/comments/3uttiz/why_is_this_loop_in_a_function_routinely_way/cxhrw5f). Interesting to know that that enclosing it made all the difference! Definitely my TIL today.
If millisecond-based optimization is that important, you should probably be using a compiled language like C if possible. Of course I recognize that's not possible in many cases, e.g. if this has to be done within a web browser. But in that case, it's usually better to try to get the program to do less work than to try to use interpreter-specific tricks to gain speed. Aside from the cross-browser performance variations which were mentioned in another comment, there's not even a guarantee that your code will perform the same between two versions of Chrome. Instead, you should, for example, see if there's a way to only loop through the array once, since based on your numbers it sounds like you're currently looping through the array ~100 times per operation.
Yep! That seems to be the conclusion here now. Thanks for testing from another background. Fascinating how *much* of an effect globals have on the speed. I knew it was something but wow.
The only robust and future proof way to pick to fastest path in javascript is to calibrate at runtime. Write different implementations and benchmark them at initialization time, and implement the fastest for each browser, that will be different at any point in time without apparent reasons. BDP aka Benchmark Driven ad hoc Polymorphism.
underscore (and Lodash) are not as functional as many developers think. While these libraries are definitely worth mentioning I would keep in mind that the concepts of functional programming are often quite different. Talking about functional programming, Ramda definitely looks like a functional library - even though it is not functional on the inside - for understandable reasons. immutable.js is a great library if you want to do FP, so I would consider taking a look at it, too. For FPR, you should look at RxJS. Hardly used the rest of your list so I don't want do make assumptions about them. But I definitely recommend checking out the JavaScript Jabber podcast, they have some episodes about FP and FRP.
Interesting. I'll be watching this later. Thanks!
Sure, but if all you have to do is to add a class, you can do it using a [CSS attribute selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
We believe the issue is solved. Check out /u/stratoscope's answer. It makes pretty good sense. 
What kind of data are you displaying/crunching that requires the iteration of 300,000 elements? Why not AJAX? Why not Zoidberg?
I've heard of this 20% figure before ... From a Gary Bernhardt talk about the [birth and death of yavascript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript) (around 19-20 minutes is when he talks about *theoretical* performance). The context of that figure so far as I can tell is definitely asm based.
Regex, yo. var img = document.getElementsByTagName("img"); for (var i = 0; i &lt; img.length; i++) { if (img[i].src.match(/_active.gif/)) { img[i].setAttribute("class", "yourClass"); } } http://codepen.io/anon/pen/vNoRxb
&gt; the scenario of the for-loop being a global for-loop Which is very uncommon. Also, a top-level for-loop doesn't involve a global counter if you use `let`. As I said, writing meaningful benchmarks is hard. &gt; If you are going to make a test to prove something, keep the constants the same. "Why is this loop in a function routinely WAY faster than the loop outside of the function?" You should have provided an actual test case.
There's also [prelude.ls](http://www.preludels.com/), a javascript (partial) port of the prelude library from Haskell.
TY sooo much :D 
I already found this awesome article http://www.elated.com/articles/drag-and-drop-with-jquery-your-essential-guide/ which has almost everything I need
Fair enough..
It's neat to see some articles exploring angular 2, but I just can't get over how much boilerplate you have to write with it, and how weird the HTML templates end up looking like: &lt;div class="board"&gt; &lt;row *ng-for="#row of rows" [row]="row" (tile-click)="handleTileClick($event)"&gt;&lt;/row&gt; &lt;/div&gt; Conceptually I can read this and eventually work out what it is meant to do, but it still feels like a fairly significant step backwards from react, mithril, riot, etc.
Electron is great! Just give it a go. I've never used nwjs but similar results can probably be achieved with either.
http://www.akawebdesign.com/2015/05/06/electron-vs-nwjs/ http://www.akawebdesign.com/2015/11/02/electron-vs-nwjs-part-2/ 
Interesting. I'd never seen that test() method...
It don't think it is aiming to be a "killer"-anything. It does it's own thing, instead of directly competing with Angular and React. At my company we build a lot of small apps, and setting up React or Angular seems like overkill, and jQuery quickly becomes a mess. Vue is a nice middleground for us, and we are now starting to create bigger apps with it, using the optional advanced features. 
Here's a good starting point https://github.com/accommodavid/spooky-react
AH! It was the z index! Thank you SOOO much. IO have been spending days trying to figure this out!
A while back I tried both; I preferred Electron. It has a stronger community, more reliable updates/bugfixes, better support for CommonJS and packaging apps up as a module, and just feels nicer to work with. NW.js might have gotten a lot better since then, I haven't given it another shot since Electron does what I need. YMMV.
Hi /u/danahmadi, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Just so you know SSR comes with non-trivial tradeoffs (and you are more than likely fine without it): https://medium.com/google-developers/tradeoffs-in-server-side-and-client-side-rendering-14dad8d4ff8b#.1h6raslmm
[removed]
ie. `document.querySelectorAll('img[src$="_active.gif"]')`
Random guess... maybe it's the fact that it's looking up the array in the global scope in each iteration for the normal one, while the map function has the array kept in the local scope.
Not exactly. What I mean is, instead of .whatever { what: ever; } + some js to do the selection, apply the class, and keep it in sync just use img[src$="_active.gif"] { what: ever; } without any javascript or class. 
good point
&gt; Electron's APIs are lower level so you can use it for browser testing in place of PhantomJS. While this is true, [Electron has yet to support headless testing](https://github.com/atom/electron/issues/228) out of the box. People have experimented with clever workaround using X, but it doesn't seem simple or accessible.
Have you looked into [webworkers](http://www.html5rocks.com/en/tutorials/workers/basics/)? 
Do you plan to update post? I would like to compare my implementation to yours. Mine re-draws pretty slowly, and I can't think off of any simple vanilla.js solution :/
Hi /u/trougnouf_crg, this post was removed because /r/javascript is not a job board.
The creator of Vue used to work at Google using Angular, so it probably made a lot of sense to him to borrow the good parts. 
Is it just me or does this README seem plagiarized? &gt; "Actully I've been asked mostly what I mentioned in this o2.js blog post" The README was written by [Malachai](https://github.com/malachaifrazier), but the referenced [o2.js blog post](https://web.archive.org/web/20130215212854/http://o2js.com/2011/04/23/do-you-think-you-know-javascript-you-dont/) is written by [Volkan Özçelik](https://github.com/v0lkan). Unfortunately I couldn't find anything resembling the README on Volkan's github.
Unless you're in a really shitty environment, you should ask them. This may be the first question you have, but it definitely won't be the last, and your best bet is going to be in building relationships with the people you work with.
&gt; Unless you're in a really shitty environment, you should ask them. This may be the first question you have, but it definitely won't be the last, and your best bet is going to be in building relationships with the people you work with. I shall but i just got assigned the task while being at home so figured I'd ask here first before heading into work tomorrow :) 
I think by wrapper they actually mean abstraction layer. They want you to write your own code that "wraps" the library's code, so at a later time if they need to change the logging library, they can work through the abstraction instead. At least thats what it sounds like to me. So instead of using: MyLoggingLibrary.log('Stuff to log') everywhere in the code, you could write your own logging function. MyLogger.log('Stuff to log'), that simply uses the library under the hood. 
I read a while ago that V8 highest JIT optimization step only triggers on functions with a limited amount of characters. So putting the loop into a function the compiler might optimize it down to nearly C performance if the types don't change at runtime. Intuitively functions seem like overhead. But these small entities are easier to reason about by the JIT.
above all else: *don't be afraid to ask questions*. someone else pointed that out and you responded, just wanted to reinforce that. i can't tell you how many times i went down a certain route without asking for clarity, only to find that i wasted a buttload of time. WITH THAT SAID... --- &gt; don't forget to put it inside a wrapper incase we want to switch library. right now it sounds like you have some `console.log`s in the code, and they want you to replace it with a new command. makes sense. so how do you do it? you can go through and replace all `console.log`s with `log` (as per the example on the loglevel git page), and then you're using loglevel throughout the app. great! but, down the road, a NEW logging library is released, and your company wants to use that instead. so, do you go back through and change all of the `log`s to `coolNewLog`? you cooould, but programmers are all about thinking about the future, and maintaining stuff easily. this is your task (i think): implement a new logging method across your codebase while planning for the future. how can we do this? instead of hard-writing `log` or `newLog` or whatever the library asks, write a wrapper around the library so you don't have to change the code later if your logging library changes. there are a couple ways to go about this, though this comes to mind: var yourCustomLogger = yourLoggingLibrary; // all over your codebase yourCustomLogger.log('whatever'); // but sometime in the future you want to switch it out yourCustomLogger = log; // assuming log is from loglevel yourCustomLogger.log('whatever'); // still works, basically a shortcut to loglevel's `log` func again, this is just a quick example to prove the concept, your codebase may need something different to fit your structure/style. oh, but what if your new logging library doesnt have a `log` function? or `warning` or whatever else? you can do something akin to: `yourCustomLogger.log = aLoggingLibrary.someSpecialLogFunction;` hopefully this helps!
D3 is good choice, I am checking JointJS.
Which way you write Javascript depends on what your needs are. I tend to write Javascript the way you'd do it in C#, though I've studied the functional approach and find it intriguing. Even if I get to where I feel comfortable writing in the functional style, I'll probably use some of both.
Electron supports borderless Windows and opacity.
This is great :-) Thanks for that 
It's massively slower, but your forms won't be complex enough to make this difference noticeable. It only becomes noticeable if you have to download, parse, and execute a lot of crap before you can display anything. In a single page application, you're already done with that part.
Thanks for the help! When I put this solution into Dreamweaver, it won't return a result. Is there something I'm missing? &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Untitled Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Type a value from 1 to 5 and hit go&lt;/p&gt; &lt;p&gt;Age: &lt;input type="text" id="age"/&gt; &lt;button id="go"&gt;Go&lt;/button&gt;&lt;/p&gt; &lt;p&gt;Lookup via loop: &lt;span id="outputLoop"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Lookup via loop: &lt;span id="outputHashTable"&gt;&lt;/span&gt;&lt;/p&gt; &lt;script&gt; $('#age'); var lookupWithLoop = [{ age: 1, value: 'one' }, { age: 2, value: 'two' }, { age: 3, value: 'three' }, { age: 4, value: 'four' }, { age: 5, value: 'five' }]; var lookupWithHashTable = []; lookupWithHashTable[1] = 'ONE'; lookupWithHashTable[2] = 'TWO'; lookupWithHashTable[3] = 'THREE'; lookupWithHashTable[4] = 'FOUR'; lookupWithHashTable[5] = 'FIVE'; $('#go').click(function () { var age = parseInt($('#age').val()); // look up via loop var found = false; for (var i = 0; i &lt; lookupWithLoop.length; i++) { if (lookupWithLoop[i].age === age) { $('#outputLoop').text(lookupWithLoop[i].value); found = true; } } if (!found) { $('#outputLoop').text('No value found for that age'); } // lookup via hash table if (lookupWithHashTable[age]) { $('#outputHashTable').text(lookupWithHashTable[age]); } else { $('#outputHashTable').text('No value found for that age'); } }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
tl;dr: use Electron
Depending on how wide the OP's support base is, that might not be an option.
Beautiful. I've been wanting to build exactly this, but I never got around to researching the hardware to buy.
Yeah my solution uses JQuery, you don't have to but it certainly helps (it's a library that makes JS a lot less tedious - you'd have to refactor my code to work without it). Add this line before your &lt;script&gt; tag and it should work: &lt;script src="//code.jquery.com/jquery-1.11.3.min.js"&gt;&lt;/script&gt; Also, that first line in my code that says `$('#age');` is a typo, you don't need it just remove it.
Added a TodoMVC example using React and Diode: https://github.com/ochrons/diode/tree/master/examples/todomvc 
Happy to do it for you. I ended up buying an uno and a yun before settling on the Photon
Electron follows Chromium and Node quite closely. 
What's peoples' experiences running either on ARM chips? From my experience it's difficult to do that with NW.js, but have never tried that with Electron.
By front-end i understand that you don't have a GUI. Then just use a database like [RethinkDB](https://www.rethinkdb.com/) (even an in-memory one, [LokiJS](http://lokijs.org/#/), [Redis](http://redis.io/)). As your app should only process data, it should act like a function. If you could explain a bit more about the how the app will work would be better. I personally see an Action/NamedEvent architecture overkill for processes that don't interact with GUI
&gt; React is a JavaScript framework built by Facebook. The creators of React built the library to solve one problem Which is it? a Framework or a library? Hint: "React is not a framework" Not sure if you wrote this but just putting it out there
similar functionality is available in lodash at `_.get` and `_.set` - Any idea how your library compares?
That limit is 600 IIRC (comments count toward that limit), and it's a guesstimate based on what the developers think would be too complicated to properly optimize.
Your `isObject` function is broken. Failing test case: set({a:null},'a.b',23)
No, the use of system.js is fine. Let me illustrate a code example from the article to show what I'm on about: import {Component, Input, Output, EventEmitter, CORE_DIRECTIVES} from 'angular2/angular2'; import {TileComponent} from './tile.component'; @Component({ selector: 'row', template: ` &lt;div class="row"&gt; &lt;tile *ng-for="#tile of row" [tile]="tile" (click)="handleTileClick(tile)"&gt;&lt;/tile&gt; &lt;/div&gt; `, directives: [CORE_DIRECTIVES, TileComponent] }) export class RowComponent { @Input() row: any; @Output() tileClick: EventEmitter = new EventEmitter(); handleTileClick(tile){ this.tileClick.next(tile); } } First off, the fact we're importing something called `CORE_DIRECTIVES` sounds weird to me. Why is not implicit in templates if it's core? If I have to use it in every template just to get the core functionality angular should be providing me by default, it is creating do-nothing work for me to do in every file. In this case, I have to remember to import this silly `CORE_DIRECTIVES` and pass it along to the component. Secondly, I have to pass in every directive I want to use to this component. This may seem like a trivial complaint, but it's incredibly boilerplate-y coming from mithril and react, where you would just use that component directly instead of adding a bunch of metadata to your components. Then there's `@input()` and `@output()`. These add no value to my code. These are only here for the sake of angular so it knows what to do. Ceremony I have to do just to make angular happy I consider boilerplate. Additionally, these are being imported from `angular2` in the same place as everything else, so when I'm looking at the import statement, `Input` looks like some kind of angular component, not a special decorator. Angular 2.xx not supporting convention isn't surprising to me since 1.xx was awful at it, but it strikes here again. It's not quite as bad as 1.xx, but I still have to tell angular that this is a `RowComponent` and that it should be looking for `Row`. The fact it's an exported class called `RowComponent` should be enough to tell that I want this to be used as a `row` element. Let me compare it to mithril, for the sake of argument. Here's a rough translation. import m from 'mithril'; import Tile from './tile.component'; export default { view: (_, {row, onTileClick}) =&gt; m('.row', row.map(tile =&gt; m.component(Tile, {tile, onTileClick}) ) ) }; In the mithril version, my **entire** view is **one expression**. It doesn't need a class or anything like that, since all that this particular component does is take data in and pipe down to a more specialized component. There's absolutely no needless repeating of my variable names. There's no special syntax, this is all just a plain javascript function on a plain javascript object calling plain functions on mithril (which themselves return plain objects). There's no decorators you have to learn, no HTML you have to debug, no mysterious imports. And the code works like this *all of the way down*. I hope this helps to illustrate why I find angular 2.0 so noisy and filled with boilerplate. The mithril version achieves the same thing in **less than half** as many lines as code, and considerably less symbols as the angular 2.0 version does. And it's even more testable, since it's just a plain javascript function! You don't even have to fake dependency injection or anything, you can just pass it some dummy data and look at the result.
And his solution was to drop a component entirely and bend his way of doing things.. :( That isn't particularly encouraging if you're coming from react or mithril where you can use components all of the way down as necessary. 
Ha, I was going to build this with meteor. Well done.
Please add the viewport meta tag to your pages because mobile https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag
Yeah hah I am using AJAX, I just felt the reference to be tenuous. :)
My question was quite serious. Are you using server side JS (Node, etc.) to do this sort of processing? I ask because why not chunk the processing of your data?
For ES6 targets only, so you'd need Babel. I hope the TS compiler can eventually compile async/await down to ES5.
The hang up appears to be on generators, and ["there is no timeline"](https://github.com/Microsoft/TypeScript/issues/2873#issuecomment-138646571) for that compiling down to ES5. Very disappointing. 
Really? That's unfortunate. Might still be useful in some scenarios / in the future, but that's a real showstopper for me at the moment.
I like to be reminded that we live in the future.
Which is fine and dandy, but there's no timeline for 2.0, and it still doesn't change the fact that typescript is inexcusably late to this game.
If you want to build your entire app in one window and not use other windows, I'd lean slightly towards Electron. If you want to use multiple windows (for instance, in my app I pop up a window for bookmarking the current page), I'd favor nw.js. It allows the same context across windows, so you aren't reduced to a bunch of message passing to get done what you need done (which in my case would be extremely cumbersome).
Based on the comments, it looks like async/await is a Microsoft only TypeScript thing. Promises is part of the standard which works everywhere. Promises will always be around and work everywhere forever. async/await exists only as long as Microsoft wants it to exist.
I played around with ineed recently, it was kinda neat how simple it made things for scraping stuff. https://github.com/inikulin/ineed
Async/await has ES5-compatible implementations in [babel](https://babeljs.io/), [dart](https://www.dartlang.org/), [sweetjs](https://github.com/jayphelps/sweet-async-await), [traceur](https://github.com/google/traceur-compiler/wiki/LanguageFeatures#async-functions-experimental), and [Iced coffee script](http://maxtaco.github.io/coffee-script/). Typescript's implementation is actually behind, since it only emits ES6-compatible code, where pretty much every single other compiler emits ES3/5 compatible code. It's also a [proposed feature](https://tc39.github.io/ecmascript-asyncawait/) for future version of ES. Stage 3.
I believe there's a typo in the "Polymorphic this Typing" section, because createModel is pointless. It should be: newModel = createModel().setupBase().setupAdvanced(); // fluent style works
My gf has a cat who needs constant feeding. This cat cannot soak up nutrients and we were just talking about building this. Ty op!
Why am I seeing `arguments` inside an arrow function... 
Looks like JavaScript is becoming Python.
🙀
It's quite messy, but that's cool as you say you are new to JavaScript. The HTML is quiet messy too, so I'm assuming you are also new to that. Is there a specific problem you are having here, that you need a solution for, or are you asking if your style/approach is ok? If it's about style, yeah I'd say it's just all a bit messy. You've got a hard coded function per card, that flips global variables between 0 and 1 depending on card state. It's all just very hard coded, and not going to scale well to larger dimensions of cards. Nor does it looks like you can even randomise the arrangement of cards (though I could be wrong on that point). But at the end of the day if it does what you want then congratulations! A working program, is a working program, which is a lot better than a lot of people can manage.
The only functionality that I can't nail down is if I flip a combination of cards that are incorrect I want the cards to flip back over to the card back state Edit: And yeah I'm new as of two days ago
It's been present in node for a while. My current v4.2.1 implements it for both objects &amp; arrays. It's a nice feature, if probably mostly overlooked by many people. Also, advocates for putting comas at the beginning of a line argue this prevents the 2 line change concern. var r = { a = 1 ,b = 2 ,c = 4 }
Uh... Yeah because Babel node has to require all of Babel Core which runs into this issue. Trust me we've dug into this issue at depth after several users first reported it and now dozens of people have said that upgrading to npm3 fixes the issue entirely
Just working with what you've got and not radically re-organising the code, your next newbie move might be to thinking about a single function that gets called from every individual changeImage* to test how many globals are set to 1. If you find two of the globals are 1 then you know two cards are revealed. You have to think about timing though. You don't want the code to flip the two cards back straight away, as it will run so fast the user will never actually see what the second cards face was. 
Can you elaborate?
We don't use nodejs at work. Personally I've been writing a blog for using Vuejs without that stuff. If you want to read it you can find it at www.tutelagesystems.com I've been exploring vue-validator and hour to cover it next
Looks cool, but Reflux is the worst flux implementation you could have chosen, and i'd look to switch to redux
I'm gonna create testcase to cover it, thanks! 
Is this product tested on animals? ;) Jokes aside, cool project! :)
I just added your case to the testsuite, can you let me know if the behaviour is the expected for this case? Thanks. https://github.com/zzarcon/saffy/commit/8385de809318125ab8ddc22b9ec3da70c0099abd
Wow, that's quite better than Saffy!!! Actually implements some features I was thinking to add to Saffy haha. I think that the only reason to chose Saffy now it's for simplicity? :\
Actually the lodash methods supports this as a path: var object = { 'a': [{ 'b': { 'c': 3 } }] }; _.get(object, 'a[0].b.c'); Which is better ^^. And regarding implementation, I used recursion https://github.com/zzarcon/saffy/blob/master/saffy.js#L21 and lodash uses iteration to get the value https://github.com/lodash/lodash/blob/3.10.1/lodash.src.js#L2241-L2243 Hope you find it useful :) 
Yeah, actually this is one of my favourite Coffeescript features. Will be cool if JS have it in the future 
I've seen it. Don't understand the hate for it either. Seems like a semi-reasonable idea. Especially if the lines are really long and/or have comments at the end of the line. Or if you ever want to sort the keys after the fact, I imagine it's much easier to find the missing comma at the beginning of the line.
A function without a this or arguments binding...
I know Redux is the new hotness, but personally I found Reflux to be the best 'introductionary' flux implementation for people with Rails background. Multiple stores map easier to multiple data repositories (popular due to Backbone influence in Rails community). The action objects are simpler to grasp and reason about than passing messages to dispatcher. I recently started introducing React to our Rails-based shop, and Reflux is what I chose to ease my colleagues into it.
You can create a timeline with Typescript for typing checks and then Babel to make ES6-&gt;ES5 conversions. It seems quite good for me
There was another library posted that dos this a while back without repurposing any syntax. Anyone remember what it was? Also can these labels be wrapped in a if (DEBUG) {} so they can be removed by dead code elimination on build?
Trailing commas on arrays and objects are supported i n ES5 so yes, they work in Node. This article is about trailing commas in function arg lists and calls.
Yep. As [described here](https://facebook.github.io/react/docs/working-with-the-browser.html), React maintains a virtual representation of your DOM - but if you want to access a specific DOM node (the virtual component's backing instance), it provides various ways to do that too.
If it only needs to work in modern browsers (current Firefox, Chrome, Safari, or Edge), you can use [endsWith](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) (ES6). Alternatively, you can use a small helper function like this one: function endsWith(str, search) { var pos = str.indexOf(search); return pos &gt; -1 &amp;&amp; pos === str.length - search.length; } console.log(endsWith('foobar','foo')); // false console.log(endsWith('foobar','bar')); // true
All I can think of is the scope of the variable arr[]. Being a function parameter makes it as close as possible to the loop and will have its own stack frame, and probably makes it easier to optimize. 
TypeScript has failed by caving into [The Billion Dollar Mistake](http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare). By contrast, [Flow](http://flowtype.org) handles null and undefined as distinct types from others, yet TypeScript is completely incapable of doing so because everything is implicitly nullable.
They're dinosaurs at this point
I disagree, Reflux is very good for introducing middleweight devs to the concept of Flux. One problem I do have with this article is mentioning Reflux and FRP in the same sentence.
Sorry, I didn't mean to imply anything with a negative connotation. I was being dickish. Sorry again. 
Why is that surprising? Angular and Dart are both Google sponsored projects. TypeScript is a Microsoft sponsored project.
The goal of TS is for the output to be close to the input. Async / await requires statemachines in ES5, which would be against that goal. I guess adding babel to the build-task won't be hard.
Fair enough he's a troll but there are some people who genuinely don't like typescript. I'm always interested in why that is.
Not sure about another library, but this was based on my earlier work - https://github.com/codemix/contractual You can turn off contracts by passing the `strip` option
I definitely appreciate your help in troubleshooting this. I seem to still be having some trouble getting it to run when I save the page. Would you mind taking one more look? &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;JQuery Test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Type a value from 1 to 5 and hit go&lt;/p&gt; &lt;p&gt;Age: &lt;input type="text" id="age"/&gt; &lt;button id="go"&gt;Go&lt;/button&gt;&lt;/p&gt; &lt;p&gt;Lookup via loop: &lt;span id="outputLoop"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Lookup via loop: &lt;span id="outputHashTable"&gt;&lt;/span&gt;&lt;/p&gt; &lt;script src="//code.jquery.com/jquery-1.11.3.min.js"&gt;&lt;/script&gt; &lt;script&gt; var lookupWithLoop = [{ age: 1, value: 'one' }, { age: 2, value: 'two' }, { age: 3, value: 'three' }, { age: 4, value: 'four' }, { age: 5, value: 'five' }]; var lookupWithHashTable = []; lookupWithHashTable[1] = 'ONE'; lookupWithHashTable[2] = 'TWO'; lookupWithHashTable[3] = 'THREE'; lookupWithHashTable[4] = 'FOUR'; lookupWithHashTable[5] = 'FIVE'; $('#go').click(function () { var age = parseInt($('#age').val()); // look up via loop var found = false; for (var i = 0; i &lt; lookupWithLoop.length; i++) { if (lookupWithLoop[i].age === age) { $('#outputLoop').text(lookupWithLoop[i].value); found = true; } } if (!found) { $('#outputLoop').text('No value found for that age'); } // lookup via hash table if (lookupWithHashTable[age]) { $('#outputHashTable').text(lookupWithHashTable[age]); } else { $('#outputHashTable').text('No value found for that age'); } }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
&gt;It's consistent with TS' design philosophy to be a thin transpiler layer, to keep runtime overhead as low as possible, where the output code remains very close to the source. If this is true, then why is it on the roadmap at all? Why was it initially slated for later 1.x and then pushed to 2.x? The TS team certainly isn't afraid to say "no" to things that they feel is out of scope for the project. &gt;Overall, I think I'd rather have the TS folks focus on doing something nobody else is doing rather than yet another duplication of the work of Babel/Traceur/etc. Would you agree if we were talking about ES6 support instead of async/await? After all, you can get ES6 from any of the other compilers, surely we wouldn't want them to duplicate effort and make their transpilation layer more abstract and beefy. 
Or more specifically, null and undefined are considered members of every other type. This has actually been a long (loooooooong) conversation in the typescript repo. [Check it out](https://github.com/Microsoft/TypeScript/issues/185) -- comparisons to the flow system are made several times in the comments. EDIT: also an [explicit comparison of the type systems here](https://github.com/Microsoft/TypeScript/issues/1265)
Yeah that makes sense. But I'm not really fine without it, I'd wager most websites fall into the last category. The SEO is important and the solution of spinning up webkit to render a page for googlebot is just... ew.
Cant see any reason to use the over Riot, but its cool. The one thing I ddint like was the example, really didnt like its structure. Heres how I would have done it... http://jsfiddle.net/6gn9js7d/
Flux is actually inspired by a backend design. I think "flux on the backend" is just CQRS. Persisting all your actions with the ability to replay, etc would be the ES of CQRS/ES.
Yes you should. Arrow functions do not possess their own "arguments" instance. "arguments" will refer to the parent scope's, the same as with "this".
Just as a heads up with regards to the future: The `Object.observe` proposal was removed; [See here](https://esdiscuss.org/topic/an-update-on-object-observe). Its spiritual successor is the [Observable](https://github.com/zenparsing/es-observable). It is a lower level primitive that will help observe events.
This is a pretty big application so it does need some sort of architecture to keep the code base manageable as it grows. It does not use a database either, only redis.
I didn't know Flux was inspired by the backend, is that from the Facebook team? I was possibly going to go with a slightly different approach and just implement a command + state pattern to handle the application flow.
no night mode?
I didn't even know one was happening. I know that the nodebots meetup is starting up again and I"ll be going to those though.
JS Bin, JS Fiddle, and Codepen. What's the difference? JSfiddle definitely looks the nicest now. Amazing job! 
fancy pants.
You can keep the HTML seperate by loading the HTML with Webpack and using the template option when creating the Vue instance.
Take Babel and typescript out of the equation. Do you hate where JavaScript is going then? 
Other than introduction of `class` keyword I am really happy, I am not going to use this syntactic sugar anyway. I love current ES6 draft and btw I do use Babel.
I too was surprised the author hadn't heard that object.observe was out. 
Yes, it's from them[1]. It's also pretty obvious once you grok flux and CQRS. Just google "flux cqrs" and you'll see a few discussions on it (like the author of Redux making the case for Flux [2] and pointing out it's basically CQRS). [1] https://twitter.com/Vjeux/status/468430871117066240 [2] https://medium.com/swlh/the-case-for-flux-379b7d1982c6#.ps1hs6out
Babel is JavaScript... it's what JavaScript will become, not what some company thinks it should become. It's looking at the standards and implementing the current solution.
[removed]
No. If you have an array and a value and you need its index, you use `indexOf`.
are you just trying to lazy-load component dependencies? you might want to look into [using es6 modules with react instead](http://www.jayway.com/2015/03/04/using-react-with-ecmascript-6/).
 function isOdd(num) { return !!(num % 2); } function isEven(num) { return !isOdd(num); } var allEven = [8,4,2,10]; var allOdd = [1,3,5,7]; var oneOdd = [8,4,2,1,10]; console.log('allEven some isOdd: ', allEven.some(isOdd)); console.log('oneOdd some isOdd: ', oneOdd.some(isOdd)); console.log('allOdd every isOdd: ', allOdd.every(isOdd)); console.log('oneOdd every isOdd: ', oneOdd.every(isOdd));
Plunker still beats it out by a mile for usability.
 Codepen is slow as fuck on my craptop so I use jsfiddle
Learning Haskell has helped out my JS work so much. I'm still mastering some of the more advanced concepts but even basic program structure has been made worlds more readable/maintainable by introducing a function style. 
This looks great, and you're right something that can bolt onto some HTML is definitely preferable in my recent example. I'm glad I asked this question I'm getting some really good replies here.
Brototype already has this covered in a much more amusing and extensible way. https://github.com/letsgetrandy/brototype
You need a mechanism that handles the continuations marked by 'await'.
If you need to graph less than 10k-100k data points, go for D3 or one of its easy to use encapsulations (C3, NVD3, etc). They all use SVG, and will lag and kill your browser with lots of data points. If you do need more data points, you need to use Canvas (fast) or WebGL (fastest): + P5: this is the new (and very powerful) JS version of the Processing library, maybe overkill + Plotly.js: just went open source and can use WebGL instead of svg, for performance. + Cytoscape.js (for graphs, network, tree visualizations) + Chart.js (canvas based, vey simple, only 6 graph types) + dygraphs (open source, canvas) + vega (svg/canvas) + Custom charts rendered in Pixi.js (the fastest most performing canvas &amp; WebGL renderer)
It all depends on what UX you need. Do you need swiping, pinch zoom, etc.? I've used bootstrap 3 + react when I didn't need those things.
I don't think pinch zoom and swiping will be necessary. We have cordova app using bbui.js that was built before my time. Now I'm looking for something I can use to create a similar app but for Windows 8 and any other platforms. Hence the need for Cordova. WinJS looked good but I couldn't find anything to assist me in getting started. Same for IONIC and Sencha. I need to be able to learn the technology while I build this thing.
Its a combination of html/css animations with JS to apply them from what I can gather in the 5 mins I played around with it. Watch the sections classes as you scroll, you will see classes such as slide. 
Well obviously you can't use [WinJS](https://dev.windows.com/en-us/develop/winjs) if you want it to be cross-platform. WinRT in JS removes `window.alert()` and other synchronous features of the web, so you'll need to avoid those APIs too to keep your codebase portable. I'd use/learn React because it'll be useful for the web too. You could use Bootstrap with platform-specific themes. I recently finished up making a Windows 8 cordova app (Windows desktop, not Windows phone, and fyi only the later is supported by build.phonegap.com) and it was fine for that, but the client didn't care about native looks at all. Most people would probably recommend Ionic/Sencha instead though.
Things you should do: * Separate concerns: a function should only do one thing, for example your OPlay function should probably just call a function to calculate its next move and pass that to a generic Play function that modifies the board and then calls a function to check if the game is over. * Avoid using alerts for things other than alerting the user about loosing data if continuing with an action. * I would avoid having an array of the winning conditions, instead make a function that can determine if the game is won. Your solution is okay for Tic Tac Toe since the amount of data to describe all winning conditions is quite low, but it should at least give you some training in implementing something a bit more complex by making a function that determines if the game is won without having a checklist. * The winner variable is something i would avoid since you use it like as an extra return value in the register win function, this is what is refereed to as a side effect.
I was checking if you did a fair shuffle, and found this rnd = Math.random() * i | 0 I'm impressed that you can OR 0 to round. 
a crockford quote won't save you here from the downvotes, a worthy attempt though 
Okay, I looked more closely and I see that the minified js included jQuery, Green Sock, Zepto and some other stuff I've heard about. Seems that all of that slide animation was custom programmed with this javascript (that's a lot of javascript): http://pastebin.com/cXjbYTqs I appreciate the fact that being good with Javascript is a prized skill and that there are many libraries leveraged here. I do not mean to sound like a whiner (because I'm not) when I ask, "but isn't there an easier way?"... because, really, I have a sneaky hunch that these guys used some development tool to pump out this code using these dependencies and I just want to know how they go about it.
I have a variable, slotOne, equal to the img tag. In my if statement I have If (slotOne.getAttribite ('src') == "sm1.png") In debugger mode if I highlight the whole variable.function call it still is the full path.
I just wanted to give a big huge thank you to StoneCypher, who took many hours out of his day to explain this whole entire process of making a 'trivial' text based game. So once again, thanks StoneCypher, you're an awesome dude! -Brendan
Dirty method : select the body or document of your login page, remove childs, use $sce.trustAsHTML(response.data), append it to the previously selected body/document.
Looking at the downvotes, I guess people don't like constructive criticism. I completely agree with you.
I've been using Vue.js (at work), I was more talking about all the other frameworks that push Node/NPM and trans-compiling ES6. Vue.js doesn't do that and is one of the reasons I went with it. Nice write-up by the way. You should add component tutorials (that's a big part of Vue.js).
It was left out of ES6 because ES6 was massive enough. We have a new lightweight process that would allow a feature like this to advance rapidly if someone would pick it up and drive it :)
Which browser? Check this: http://codepen.io/anon/pen/qbWNWP
I have to include a third party script and the way I do it is by adding it to the DOM manually after componentDidMount. componentDidMount: function () { var url = "http://script/to/url/embed/&lt;id&gt;"; var el = document.createElement('script'); el.src = url.replace('&lt;id&gt;', this.props.embedId); this.getDOMNode().appendChild(el); } [EDIT]: To clarify, script tags in the render method don't get executed/initialized.
If you want to learn just the language itself I recommend [*Learn You A Haskell For Great Good*](http://learnyouahaskell.com/chapters). If you want to learn FP and get some Haskell exposure at the same time I recommend [Erik Meijer's free Introduction to Functional Programming](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0) course on EdX. **Edit:** Added links. Best piece of advice I can give is not to get frustrated. The paradigms in Haskell (and pure functional languages in general) are very different than languages you're probably used to. I had to re- read/watch units several times to get them to sink in. I'd say it's similar to the frustrations some people have when coming from a classical OO language (Python, Java, etc) to JavaScript.
You can use both easily, here's an example that does it https://github.com/Keats/flow-typescript/tree/master/typescript
Use http://d3.js i dunno maybe something like all of these joined together. :D http://bl.ocks.org/explunit/4659227 http://bl.ocks.org/mccannf/1629464 http://bl.ocks.org/mbostock/6123708 http://jsfiddle.net/vwq0z5nk/10/ 
Clean Method: Don't return HTML from an ajax call, create a new controller with the template HTML you want, when you get a response from the ajax call (assuming its doing other things than just sending a page) using $location.path (or $state.go() if you are using ui-router) 
You can type in code within {} blocks inside the script tags but you can't load it dynamically and execute the scripts this way. AKA the OP's code wouldn't work - even with async tags. It's not something you'd generally want to do every single time the component is rendered anyway.
[removed]
Codepen has nice community features, things like assets and a bunch of other neat little features. A bit bulky for a 5min hack, but perfect for a 1h tech demo.
So Awesome! Cant wait to see what they come up with. Plunker is stil the best tho ;P
no, there is not an easier way. That's why they are charging money for people like you who don't have time to put in the work
Same issue. Really wanted a dark theme.
I have used mssql package (https://www.npmjs.com/package/mssql) 1 year ago, it was good with sql server 2014 (i have used only sql queries) - example of usage you may found here - https://github.com/foi/nnm/blob/legacy/WebNNM/app.js. By the way, there are 2 (as i know) orm based on mssql - https://github.com/featurist/sworm and http://docs.sequelizejs.com/en/latest/api/model/.
isn't it a bit of an antipattern to have your code that actually runs in the browser be two layers removed from the code that you write?
Feathers (http://feathersjs.com/) now has real-time service adapters for Sequelize (https://github.com/feathersjs/feathers-sequelize) a popular NodeJS ORMs that supports MSSQL. There is an iOS client at https://github.com/feathersjs/feathers-ios-client and an Android client is in the works as well.
Let's not forget es6fiddle, for your es6 needs. In all seriousness though, I was using jsfiddle a lot today, and the interface was much nicer than it was previously. Clean and concise, it was a nice upgrade in UI. Edit: I fail at this mobile thing, clearly, as I was trying to reply to the top comment and not op... C'est la vie. 
Nope. Both TypeScript and Babel compilers are very good at what they do. I've tried that (although i only use one or the other, mainly TypeScript) and it works really well. And that, is because of standards.
Think about how it's possible to implement these functions and it will give you your answer. `some` needs to figure out whether at least one entry passes. To know that, it needs to either (a) find an entry that passes or (b) check every entry and find that it does not pass. Since it has no idea where to start looking for an entry that passes for (a), its only option is to take much the same approach as (b): check every entry one by one. (Of course, it can stop checking as soon as it finds one.) The thing to notice here is that `some` is essentially its own `forEach` loop. It *must* loop over some or all of the entries. So, no, there's no point in looping over an Array just to figure out if you need to loop over an Array, it will be slower. What you need is a single loop that either (a) finds an index and immediately returns it or (b) reaches the end and returns some indication there there is no index. And, as others have said, that algorithm is actually already implemented for you in `Array.prototype.indexOf`. I think re-implementing it would be a good learning exercise though, even if not useful in your final code. edit: just noticed the "occasionally". Yes, caching it will improve performance - caching is the heart of optimization. Just be aware that the work to generate that cached value is the same as the work to find the index once.
swiping worked fine on my iphone
Try Typescript. I have a feeling you won't want to go back. The main drawback (compared to Babel) is typings for 3rd party libraries. So the first thing I'd recommend doing is a trial run of getting the type defs for all the libraries you use and see how much of an issue that is. On the other hand, are you using VS Code? It has really smart type inference for regular Javascript and can apply d.ts types to your JS code. I haven't had much time to experiment, but I imagine you could write d.ts files for your own libraries &amp; code rather than writing your code in typscript. (Which would bring us full circle back to C-style header/implementation files...)
thanks :) I have been playing with Vue Validator but I can definitely write some component tutorials. I am really just trying not to make them super confusing so that people can learn from them
I've been using Angular 1.x full time for about four years. It's fantastic, and I've had many occasions where it's made the difference between a project being OK and a project coming out *incredible*. With that said, I wouldn't even consider Angular 1.x at this point. Regardless of what's going on with the migration path and the ability to run 1.x code under 2.x, the two frameworks have nothing in common other than name. Angular 2 is functionally and philosophically closer to React than Angular 1. It'll be around for years, but FORTRAN will still be around for years too. That doesn't make it a good mental investment. I've spent a lot of time investigating replacements. Angular 2 seems nice, although it looks like decorators vomited all over it. Ember is really cool, and will feel really at home since you've got experience with Rails. But my pick after all of this is React. React, without any Flux implementation or anything else on top of it, is very easy to pick up. It forces you to organize your code in a logical way (what a component does lives on the component), and the code you write is basically plain old javascript rather than something framework specific. It took me a while to adjust to JSX, but in the end, it's not as weird as I initially thought. And I find React a lot of fun to write. With that said, I really have no recommendations on how to *implement* React. That's where I'm stuck. Conceptually, Flux makes sense, and there are a number of nice implementations, but they all blow the simplicity of React out of the water. React on its own is something I can hand to my junior devs and just expect them to pick up. Redux, alt, et cetera add this layer where it becomes a lot harder for me to justify the time spent over just having components do the work themselves. I get the argument for long term, bigger apps, but I don't work for a company building some web scale monstrosity like Facebook. Anyway, bottom line, I'd put my time into React and try to find the way to implement that makes the most sense for you.
You can even make typescript transpile to ES3-5 directly... 
Since you're using Babel, you may want to have a look at this plugin: https://github.com/codemix/babel-plugin-typecheck You can add Facebook flow types with Babel!
**Node.js: Tutorial** &amp;nbsp; Use this tutorial as a guide to learn Node.js. Each unit contains an annotated lesson with working examples. &amp;nbsp; Topics: &amp;nbsp; * Introduction * Events * Streams * File System Manipulation * Uploading Files * Modules * NPM * Express * Express Routes * Socket.io * Persisting Data with Redis
I wish we had Browser UI/control components, which can be controlled via web for modern web
[removed]
I want to give you all the publicity you deserve for this amazing app, but I also don't want it to get popular enough for them to shut it down.
yes, I will do that now.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/angularjs] [I'm a web developer who uses jQuery to write a large scale application - How can I convince my bosses that a JS framework is the way to go? (x-post r\/javascript)](https://np.reddit.com/r/angularjs/comments/3v44tn/im_a_web_developer_who_uses_jquery_to_write_a/) - [/r/emberjs] [I'm a web developer who uses jQuery to write a large scale application - How can I convince my bosses that a JS framework is the way to go? (x-post r\/javascript)](https://np.reddit.com/r/emberjs/comments/3v45wk/im_a_web_developer_who_uses_jquery_to_write_a/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
The common term is Reinventing the Wheel: https://en.m.wikipedia.org/wiki/Reinventing_the_wheel Making a discussion about costs generated by replicating something that already exists and is given freely can be a fast way to go :) Other ref: http://thebertrandfamily.com/2012/04/20/re-blog-the-cost-of-reinventing-the-wheel/
For the back-end I'd suggest checking out SailsJS. It's a fairly easy to pick up Rails-like framework which can give you a basic REST API with very little coding. For the front end I tend to lean towards Angular.
If you about mssql package, not so hard, "simple" sql queries. In my experience mssql npm package very reliable and stable.
Instead of wasting our time they should consider contributing to Babel. Babel + Flow is Typescript on steroids without a vendor bias as the cherry on the top.
Another vote for React, also check out [Redux Simple Router](https://github.com/jlongster/redux-simple-router)
This is okay as long as you can be sure the function will only be called as a property of a property of `obj` (or equivalently, on a property of `obj`); in general, though, there is no way to get "the object that `this` is being accessed as a property of" in Javascript (there is `super` inside classes, but that's "the constructor with a `prototype` property that is the `__proto__` for `this` or `this.prototype`, depending respectively on whether the keyword is used in an ordinary or `static` method").
Looks like it can't handle the load: ERR_CONNECTION_TIMED_OUT.
 console.clear(); at the top of your JS panel and use your browser console instead. It's more powerful anyway.
working fine for me??
Redux is a library, I can literally go download it right now. Flux is a methodology.
https://twitter.com/c089/status/671624868908126208
[**@c089**](https://twitter.com/c089/) &gt; [2015-12-01 09:40 UTC](https://twitter.com/c089/status/671624868908126208) &gt; well-crafted code is expensive. &gt; &gt; good developers spending hours on fixing bad code is very, very, very, very expensive. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
On mobile, so you’re just gonna have to feel me out. You’ll want to use jquery events to add a submit event listener to your form. Remember to preventDefault() in the listener. After the preventDefault() you’ll want to use $.post(url, data, fn(data) {}) where url is the url to your php login, data is the POST params accepted by the login, and fn is your callback. In the callback the first param will be whatever was returned by your php login. I know this isn’t very in depth and kinda hand wavy but if you’re a programmer you gotta be good at problem solving. These clues should help you. If you’re still stuck just google “Ajax login jquery” and you’ll find something. If you’re really in trouble you can pm me but I do have a fulltime job so it may take longer to get back to you. Good luck, hope that helped. 
See https://developers.google.com/speed/libraries/?hl=en 
Looks like I crashed it, you probably want to put a try catch around your JSON.parse on the server. 
jQuery is a library for DOM manipulation, events, AJAX, and animation. It's not a framework. It doesn't provide any structure. And this is fine if all you need is a bit of glue code for a few jQuery plugins. For example, a small e-commerce website with a carousel on the landing page, an accordion in the FAQ, typeahead in the search field, and some lightbox &amp; tabs on the product page. jQuery is perfect for this. But if the inherit complexity goes beyond that, things get kinda hairy. E.g. when you start to store some data in the DOM, you really should start using some kind of model to keep things organized and separated. Well, you can of course fix this. You can create your own structure and the conventions which go with that. You can create your own "lightweight" framework. But the problem with that is it has to be written, tested, and documented. It's a crazy amount of work. Even the most simple frameworks like Backbone need a ton of documentation (http://backbonejs.org/ = 17k+ words [show it on the projector and slowly scroll down for dramatic effect]). Of course, no one you hire has any chance to be familiar with an in-house framework. Existing frameworks are already written, they are tested (unit-tested and battle-tested), and they also are documented. Furthermore, there are plenty 3rd party resource (blog posts, videos, conferences &amp; meetups, and online courses) and, if it's a popular framework, there are also plenty of developers who are already familiar with it. --- That's the kind of angle I'd try. I'd start with a "it made sense at the time" kind of opener instead of flat out insulting the developers who wrote it and the people in charge who green-lit it. Be diplomatic. You also might like: jQuery Conference 2013 SF Beyond the DOM: Sane Structure for JS Apps by Rebecca Murphey https://www.youtube.com/watch?v=cd7HHN6IkrU
The point was that he was trying to measure how fast it would be to loop through the array that much, under different conditions, even though there isn't much use for that sort of thing; I also noticed in your downvoted comment that you recommended using a language that compiles to machine code, like C++, even though the whole point was benchmarking JS performance.
That doesn't overwrite `undefined`, but flipping it around does: `undefined = value`). Also, using the rules for non-strict equality (and ignoring [a little issue with `document.all` in modern browsers](https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all)), `isNullOrUndefined` could be more easily written like this: function isNullOrUndefined(obj) { return null == obj; } The "little issue" I refer to is that `document.all`, if it exists, is loose-equal to `null` and `undefined` (but not strict-equal to either), although property accesses will still work, for compatibility with old sites designed specifically for oldIE.
I would return JSON (from PHP side) with for example: [{"success": true}] And at javascript site: if (response.success === TRUE) { showNotification(); }
yea it did crash, thanks for that tip. trying to fix it now 
I am of the same opinion as that author, but this article is crap. If he bothered to actually finish it with some code examples it might have actually been good.
I think that there should be some means of escaping, just in case someone decides to be a troll by using a key that contains a period, like `obj['a.b']`; I'm not sure whether treating `\.` as the domain-specific escape sequence for the period would work.
Make it about money and technical dept. Make them understand that keeping the old codebase alive is a huge risk factor then will eventually lead to loss. Keep it simple and make it about money.
You have [merge conflicts](https://github.com/udaiveerS/node-projects/blob/master/chatApp/JS/main.js#L8-L14) in your repo 
Honestly...I'm not sure I agree with you. If there's ONE hard law in software development, is to **NEVER** rewrite your entire product. No, obviously your existing product shouldn't have been written as jQuery soup, it's making ongoing development and maintenance a nightmare, and every person hour spent on it is making the technical debt that much bigger, but just because you have a major problem doesn't mean that a solution exists. And even if it does, taking a *year* for a rewrite isn't the solution your looking for. What you MIGHT want to do is draw a hard line in the sand and say "no new feature in the legacy app; every new needs to be written from scratch". My workplace is doing this; we have a massive app which a conglomeration of at least two different PHP frameworks, some jquery soup, a bunch of backbone, and two different bootstrap versions. It would be nice to rewrite it, but it's not going to happen, nor should it. What we're doing is writing new bits/rewriting old bits of it page by page in React. And each part is small enough that every week I can show concrete progress I've made towards shipping something, and ever 2-4 weeks I can ship some new feature into production. Let me repeat that because it's important: **EVERY** week I can point to something measurable I've done to make the lives of our customers, developers, or support staff better. That's how developers add value. If you propose spending 11 months and 3 weeks not making anyone's lives better, on the vague hope that in the final week you'll deliver something that makes maintenance easier going forward, but doesn't actually solve any customer needs...you're going to be told to file your proposal in the old circular file. And with reason! Plus, are you freezing development on the existing system during that time? If not, then it's 12 months to get a system which is now outdated and incompatible, but if you do then that makes the cost of redevelopment vastly higher. Plus, we all know that management is going to say "well, if you're rewriting it anyhow, why not add X...and Y, and also three Zs, two turtle doves, and a partridge in a pear tree", and now you're lucky if the thing *ever* comes to completion. In summary: 1. You're absolutely right; you guys need to stop trying to build bridges uses sticks and sharp rocks 2. The second system effect is a very real thing, and you're firmly in the grip of it. Joel (of Joel on Software fame) even wrote an article on rewriting your core app called [Things You Should Never Do, Part I](http://www.joelonsoftware.com/articles/fog0000000069.html). Spoiler: He didn't come out in favour of it. To quote Joel: &gt; They did it by making the single worst strategic mistake that any software company can make: They decided to rewrite the code from scratch. Like a lot of stuff he says, it's meant to be quoted and to start a discussion, and there are exceptions and subtleties but...he's not wrong. Read the link. Try starting small. Find some isolated corner that needs some work, and rewrite it with the latest tools, see how it works out. Boom, maybe a week or two to hash out your stack and coding standards, another week or two to write it, it's done. See how it works. If it worked well do it again. In a couple of years, you'll have a *much* better app, and if some corners of it are still jquery soup, that's okay; they're clearly working, battle tested, and don't need to be changed.
Most of the code is really repetitive. Okay for a beginner, but you should really make it so that it doesn't repeat itself so much. In particular: * Cache your jQuery selectors. The "$('.square')" should be stored as a variable outside all of the inner functions then invoked within them. * Use [chaining](https://learn.jquery.com/using-jquery-core/working-with-selections/#chaining). Chaining is linking methods together into one single statement so that you don't have to write a new statement every single time. * Store more data in local variables. Makes for cleaner code instead of reading "$('.square[data-square="..."]') long statements every time. 
When talking business-wise, it's less about "having nice code and using cool techs", and more about the return on investment and the quality of the final product. Some valid arguments include: * Bad maintainability of the current code, leading to: lower productivity for future evolutions/fixes, greater instability, etc. Having actual exemples from past efforts would make the argument much stronger. * Bad performance of the current application (again if it's true, back it up with actual numbers) * Opportunities for a better architecture and better practices (= more scalable, with less code to maintain, with a better separation of view/logic meaning the web design guy can't mess with the code, with better build/deployment workflows, etc.), again hightlight how each advantage has a direct impact on productivity * Browser support issues, library limitations, lack of libary support (depending on the jQuery version) * Ability to make a progressive transition to the new tech, i.e. not having two codebases to maintain in parallel for &gt;1 year * Fast learning curve of the new tech for the developers, meaning they'll quickly be productive with it Us tech guys can be quick to mock old apps written with obsolete techs and bad code practices, but business is all about doing so much with so much money ; so sometimes it can be really hard to take the decision (= resources &amp; budget) to transform a ugly written app into a nicely designed one - especially if the end-user doesn't see the difference. It's a good thing you have this opportunity to push things forward, but if you fail to convince them maybe they have good reasons. Sometimes we just have to maintain bad code and live with it :P
http://matreshka.io/#!home
The winner variable is redundant essentially. Its only role is to store the winner then have it be outputted as an alert. The issue is that the only time the winner is assigned is when registerWin() returns true - but by returning true, you already know who the winner is so there is no need to assign it to a variable prior to the return. In other words, the line in registerWin() can be removed, the winner variable declaration at the very top can also be removed and all other instances of winner can be replaced with $('.square[data-square="'+x+'"]').data("player") and the code will still work. The difference now is that registerWin() is no longer doing two actions at once (great because separation of concerns).
Why would you implement your own JWT? Case of NIH?
Switching to a compiled language wasn't the point of my comment in that thread however. I wrote 1 sentence on that and a whole paragraph on optimizing the Javascript. (In reality however, this is what large companies, e.g. Facebook, *actually do* when they reach performance bottlenecks that can't be solved in any other way.) That being said, he did mention that this was being used in a real application for calculating data from stocks. The point was to reduce the running time of part of his application.
The import style is really Pythonic, and the set/get functions are near identical to Python's setattr and getattr. Not that it's a bad thing or anything, it's just an observation.
If it's trying to parse a 500 html response it goes boom. Gotta try catch those. 
does anyone have the source code for this? Apparently egghead wants a subscription to let you access the sources. Of course, I can just copy them from the final video, but in case someone already did that...
I don't necessarily think some app that moves an object on the stage and fades it out would *necessarily* produce crap code. If Adobe made it, probably, but it seems a lot of random small teams and individuals are making apps that produce efficient code these days. like http://macaw.co/ ...which I have not tried, but just remembered. It's supposed to be great, I guess. I was not thinking of a program that would produce the whole thing start to finish (that would be ridiculous), I was just thinking along the lines of those CSS generators, for a simple example, that spit out good code in real time while you play with the GUI. ...And then you'd piece it together with your knowledge of javascript. Just taking the tedium out of it, really. It would just be efficient (as long as it writes efficient code) because why dick around with trial and error punching in coordinates when you can just slide an object on a timeline in a GUI? If someone hasn't made this sort of app yet, they should. Would be cool to auto-update grabbing all the latest dependencies for you in various js libraries and then spitting out a "web archive" at the end with all your files and folders and the exported code clearly commented to show which libraries were used and where they end and your specific animation code begins with options to minify, etc.
If you work at a company where you are going to suggest re-writing their entire product. Then of course they want to hear what you have to say. The worst case scenario is that you don't have the company's best interests in mind, but your own. I know the base instinct of a developer is to make the best possible software that has ever been written, but that isn't always practical. The middle case is that they see the benefits and weaknesses in your proposal and decide to say no anyway. This should be anticipated and you need to be graceful. Even follow up with them that you do understand their reasons, which they will give to you. It's sort of like a mini presentation back to you. The best case scenario is that they agree with you, but you're going to find yourself at the head of a team. So I hope you're ready for that, I mean I hope you know your stuff. If you don't know your stuff, well then that's sort of management's fault for putting you in that position. Hopefully by knowing the possible outcomes, you'll feel more comfortable. Basically they just want to know what you're thinking and why. An over the top metaphor would be what if you owned a company that was selling a black box. You don't know how the black box works but customers are buying it. Someone you have hired has cautioned you that there's something wrong with the black box. Also that they have a way they can fix it. You're going to get everyone together to listen to that person and see what they have to say. If you have identified serious sore spots in the software, sore spots that have a real world effect. Either to the customer, or future development. That's what they want to hear about. If you have identified ways in which the software could be better on a technical level but without serious real world impact, they are not going to be so receptive. Especially since the time you're going to suggest is large. It isn't large if you have something serious to talk about.
Dont make the jump from jquery spaghetti to angular. Look into something more light weight, like VueJs. 
&gt; jQuery ... &gt; jQuery ... Sounds like spaghetti code, I'd suggest choosing a framework. Maybe Ember or Angular, they are quite easy to get started with and scale. However, I try to organize my code following the aspects/business requirements of my application. Often, I end with a structure like this: /src - modules - common - Login - Dashboard - ... - App.js This structure is quite easy to understand for new developers and helps you if you have to look at code you wrote over a year ago. In addition, it makes it easy to write self-contained and pluggable modules. It strongly depends on the underlying frameworks though, my React apps are structured differently than my Backbone applications. On top, you have to think about either bundling the files using webpack or browserify or use a tool like require.js Including all files manually in your page isn't recommended, in my opinion.
Split it up into modules and use webpack or browserify to minify them back together.
Unless otherwise explicitly specified, `this` in a function depends on how its called. When you call a function from an object like `obj.tick()`, the function is `tick()` and the `this` in that function is `obj` since it is the reference directly to the left of the function call when the call was being made. You can explicitly change the `this` in a function call at the point of call time using the function methods `call()` and `apply()`. Both allow you to specify what becomes `this` in the function; the difference being call supplies arguments as a parameter list and apply uses an array. So even though you're still referencing a function from an object such as `obj`, you can force the `this` to be something else, such as `window`: `obj.tick.call(window)`. For things like `onclick` handlers, which are effectively called by an external process (the browser, not you), you don't have direct control over how that function is called. So `this` could potentially be anything as determined by to the caller. To help with this there's the function method `bind()`. This is similar to `call()` and `apply()` except it is not a replacement for calling the function. Instead it creates a re-definition of the function that enforces an explicitly set value of `this` for that function that is enforced when that function is called no matter how it is called, even if `call()` or `apply()` is used. What this means is that you can set things like `obj.a.onclick` to have a value of a function which when called, will always use `obj` as its `this`. function myDivClick () { this.tick(); // this needs to be obj } obj.a.onclick = myDivClick.bind(obj); // make `this` in onclick be obj A note on prototypes: When using prototypes (which are parts of class definitions, so usually its using classes and prototypes vs. something else), the same rules apply. Prototypes are simply containers for definitions, like the `tick` function, which get shared among multiple instances of the same kind of object. So if you needed 5 `obj` instances all with the same data and behaviors (`tick`), then the prototype would allow you have definitions that each of those instances get to use without recreating them over again for each instance. The value of `this` simply changes for each obj based on how the function is called (look to see what obj reference is to the left of the function at the point of where it is called). The exception to this is functions with a bound this. So if you do something like `myDivClick.bind` to enforce a specific `this` on a function, this is something you'd want to assign as a new definition individually at a per-instance level, not in the prototype where definitions are shared. If you did, one obj would call the function and `this` in that function would be another obj. As a quick example... function Obj (x, y) { this.x = x; this.y = y; } Obj.prototype.click = function () { console.log('click', this.x, this.y); }; var obj12 = new Obj(1, 2); obj12.click(); //-&gt; click 1 2 var obj34 = new Obj(3, 4); obj34.click(); //-&gt; click 3, 4 // try to bind at prototype Obj.prototype.click = obj12.click.bind(obj12); obj12.click(); //-&gt; click 1 2 obj34.click(); //-&gt; click 1 2 &lt;- Oops! You can instead make sure each instance gets an instance-specific bound version of the method during construction. function Obj (x, y) { this.x = x; this.y = y; this.click = this.click.bind(this); // defined for each instance } Obj.prototype.click = function () { console.log('click', this.x, this.y); }; var obj12 = new Obj(1, 2); obj12.click(); //-&gt; click 1 2 var obj34 = new Obj(3, 4); obj34.click(); //-&gt; click 3, 4 // binding enforces this no matter how called obj12.click.call(obj34); //-&gt; click 1 2 &lt;- would be 3 4 if not bound // ... obj12.somethingelse.click = obj12.click; // this is obj12 and not somethingelse 
I'll just echo what some other people have said. You probably don't need to pitch it as a full rewrite. Start breaking off the really problematic pieces and reimplement those as services you can tie back in to the existing codebase. As far as business value: Is the company looking to grow it's developer team. You'll find much better candidates looking to work with something they're passionate about like react than you will who are ok coming in to work on legacy jQuery soup. So making the change not only net's you more talented developers but will also increase the overall productivity of the team. Is the app still growing/changing rapidly? Does making a small change take forever right now? This will only get worse as the app grows, to the point that growth will slow to a crawl, developers with domain specific knowledge will get fed up and leave, and the app/company could fail because of this. Development costs can be one of a companies largest expenses. Pitch that you can do much more with less time, and how long it will take for you to break even on the time spent refactoring. They can make their own decisions as to whether or not it's worth it.
I currently work for a company that not long ago began this transition, and it has been at least a couple of years since they _started_. If it sounds like they're dragging their feet (because a total rewrite may have taken less time), you wouldn't understand the true goal, which is to ***transition*** to a better state over time through iterative development. If you're keen on introducing saner design patterns, a good direction to go would be to componentize/decouple the various parts of your application, such that they can be developed on and tested against in isolation. When you have the application broken down into its constituent components, it becomes far easier to refactor them on a per-component basis. Fail at scoping the application to this degree, and you will find that your job is immensely more difficult not only for you but also for the person who inherits your code. Assuming you're already at that stage, then don't feel like you have to complete this in a fell swoop. Set a clear direction for how you wish to go forward (React is my flavor of choice these days, due to how well components can be self-contained, but you'll find any number of other equally suitable frameworks), and while developing new modules using your new direction, take time and address the existing application as technical debt.
So follow up on that plus @Crayonstheman comment below. Should I focus on React with Flux or Redux? Why? I was leaning Flux before this post. 
&gt; In this post, we shall learn how to empty an array in different ways and will also understand which method is the best way to emptying an array in JavaScript. 2 methods are the cited as the best and nothing is said to help me understand why.
I'm sorry
What does "call the function from a link" mean?
Really management only cares that: *Features are going to take less time or money to build / maintain OR are going to be of higher quality using the same resources.* So that's what you'll have to explain to them. I also think you should pitch a progressive plan: Do the rewrite one module at a time. You don't want to suddenly release a brand new product after 1-1.5 years - this is scary for management. With the progressive approach, customers can immediately benefit upon completion of each rewritten module. The earlier modules will serve as a demo or trial of how things are going to be better in the new world with your chosen JS framework, and will possibly be a chance to reevaluate whether your claims are true and whether or not to move forward.
Can't be easier than setting the array in question to an empty array, right?
Yeah I mean in fairness I've never felt like it's particularly hard work - it takes me way less time to write this stuff than it would to design it in a program. Let's take slide four for instance - those are all the same animations. In Popmotion you'd just do something like this: // Select the elements and set initial values const elements = ui.select('.fade-in-on-visible', { values: { opacity: 0, y: 50 } }); // Define a reusable tween const fadeIn = new ui.Tween({ duration: 600, ease: 'easeOut', values: { opacity: 1, y: 0 } }); // And then when the slide opens: elements.stagger(fadeIn, 200); That took about a minute to write, imagine actually making all those boxes in a motion editor, individually animating them, exporting etc... sounds like way more of a pain in the arse.
matreshka site is properly broken for me. All I can see is a flashy icon and the title. Shame really.
Either is fine. If you're learning Flux currently might as well stick with it. Later you can pick up Redux.
The website is tested carefully with Browserstack. This is a big exception. Please try to open the website again (the page is heavy since it contains everything including detailed documentation). Which browser/OS do you use?
This is their code: http://pastebin.com/cXjbYTqs At way over the limit of what Reddit allows me to copy+paste here, it looks pretty involved. I removed the libraries and I think most of other javascript that didn't have to do with the animation specifically. 
Windows binaries please
Interesting but you're right, most of this isn't to do with animation. Most of the TweenMax examples are as simple as the one I gave you. That's literally as complicated as JS animation needs to be and anything around that is logic that a program is unlikely able to generate. Worth keeping in mind too, that's an example of some seriously awful code. Repetition, explicit global variables, multiple nested `if` statements, selectors like `".mobile .slides:not(.simplifiedMobile):not(.simplified)"`, super-complex conditionals, I could go on. It only looks involved because whoever wrote that made a really unmaintainable piece of code. I wouldn't go looking here for any inspiration. *Edit:* Sorry I reread what you said about you removing the stuff not to do with animation. All I can say is that regardless of the fluff around the TweenMax calls, I don't see anything on that site that warrants that much code. Having said that it can still get involved, google "FLIP animation" - that's not an easily-abstracted technique but sometimes for high performance stuff you simply have to get involved (to some extent)
Nice idea. Not keen on the 'stop the script and try again' idea, though - you know why this case happens, it's an expected case, design for it. Create a poll interval. Make a front end for this and put it up on the web somewhere. Put ads on it and advertise it. Then cache potential results for other searches. But since there's a concurrency issue there - those appointments may be taken by the time the cached result matches what a user wants - you simply use that as a search hint. Use the cached results to avoid polling all DMVs for every search. 
There are cases where that can cause problems when you have other references to that array. For example consider the following: var scientist = { chemicals: ["atrazine", "caffeine", "vanillin"] } var assistant = {} // assistant will track the same // chemicals used by the scientist assistant.chemicalsRef = scientist.chemicals console.log(scientist.chemicals) //-&gt; atrazine, caffeine, vanillin console.log(assistant.chemicalsRef) //-&gt; atrazine, caffeine, vanillin scientist.chemicals.pop() console.log(scientist.chemicals) //-&gt; atrazine, caffeine console.log(assistant.chemicalsRef) //-&gt; atrazine, caffeine // assistant walks out of room... scientist.chemicals = [] // assistant returns... console.log(scientist.chemicals) //-&gt; &lt;empty&gt; console.log(assistant.chemicalsRef) //-&gt; atrazine, caffeine &lt;- D'oh! But instead if we were to change how the array was cleared: // ... everything same from before the clear ... scientist.chemicals.length = 0 // assistant returns... console.log(scientist.chemicals) //-&gt; &lt;empty&gt; console.log(assistant.chemicalsRef) //-&gt; &lt;empty&gt; &lt;- Woohoo! In this case the array instance wasn't replaced for the scientist with a new, distinctly different array instance so they were each able to continue to reference the same array object and remain in sync.
&gt;Create a poll interval No matter what, you're going to end up with this issue unless the script itself creates the appointment for the user, which I'd rather not do. The DMV website holds the appointment for a little while; I haven't tested exactly long they hold the appointments for. If I knew how long they hold appointments for, then yeah it makes sense to stop polling that site for `t + a few minutes` to let the user grab it. Regarding providing the appointment times as a service: The only way to run the script for behind-the-wheel appointments is to have sensitive information of someone who doesn't have a license, and repeatedly run their information against the DMV. I'd rather not run into any trouble so I'm keeping it low-scale. I'm not sure holding appointments hostage at the DMV would be totally legal. The real issue with this script is, there's no way to scale it up with more than a handful of concurrent users. As more people use the script, it will be harder and harder to see good appointment times. 
&gt; The DMV needs no introduction; you don't need to be convinced that the DMV website is a hassle. This project exists because the DMV exists. Really? I'm not convinced because I have no idea what DMV is. Maybe you're talking about contact lenses removal tools ( http://www.dmvcorp.com/ )? Or about healthy food of the future ( https://www.dmv.nl )? Nah, just kidding, I know you're talking about LED screens manufacturer ( http://www.dmv.rs/ ). Everyone knows them, right? Do not assume everyone is an American citizen.
Yeah good point, it's pretty ubiquitous in the US so I forgot it's an acronym that should be spelled out. &gt;Do not assume everyone is a U.S. citizen. It's called *California* DMV poller. The rest of your post is super valid, but it's pretty explicitly for U.S. citizens. 
Check out backbone, works well with jQuery &amp; browserify, does not need to be a SPA, and is great for organizing code.
It was for a class. Its possible that was part of the assignment. If not, maybe for fun? Side note, I once had to implement JWT in ruby (only encoding) because I had to include an extra header value and the ruby gem did not support adding headers.
I went for React/Redux/Immutable.js combo. Took me about 3-4 weeks to have to learn the basics (you'd need to learn some ES6/ES7 as well) and set up an environment (Babel, webpack) to have it running smoothly. Often times I was just running my head towards the wall (combining reducers with the Immutable can be hard at first), but eventually I worked out a nice setup that sped development time greatly, and the outcome itself is also super fast.
Well that's fascinating! Thank you for taking the time to explain and provide an example!
Awesome, thanks for your reply! I thought it looked like crazy ass code, but from what I could gather it seemed like they did it this way so users of the Wordpress theme could customize it, so more elaborate functions were necessary instead of just tweens. I'm not that great with Javascript at all, though, so it is good to hear what people have to say about stuff like this. Thanks for making me feel better about feeling overwhelmed by that code.
... if their API holds every record returned in limbo for a period of time, that's their problem, not yours. I mean, I respect you for not wanting to do bad things, but that API likely has some method to hold a returned record. If they're holding every record just on *read* of a publicly accessible API then arguably you should get on the phone and point out the problem to them.
Ticketing websites do this all the time. Have you ever ordered tickets online? You might get a message that looks something like "Your tickets are being held for 15 minutes... please complete the transaction or you will lose them"
Just curious, why are you trying to remove jQuery completely in your current project?
Third part library typings are not a "drawback compared to Babel". Babel has no third party library typings either. If you don't have typings for a third party library you need, you use it like you would use it with babel - i.e. without type information.
In the future, the new trendy web shit will require putting on a VR headset to read 4 bullet points of text and maybe view an embedded YT video.
Going to do a shameless self-promo for recent blog post about this: https://medium.com/@vivainio/typescript-is-pretty-good-d8fecf80ea0c You may also want to look into tsx support for TypeScript, which provides static typing in templates (jsx); something that I would immediately jump into if I was doing React.
I see what you mean.
For front-end JavaScript, I'd split the code up into separate modules and then use some kind of build tool to minify them and put them in one file. I have CoffeeScript modules for many different front-end things and have a Gulp task compiling and minifying before putting everything in one file. As other people have said, though, it's also worth looking into browserify and webpack.
it's like using the standard HTML &lt;textarea&gt; over trying to write one yourself
&gt;Ok, reading your other reply... this isn't an API call at all? Are you submitting a fake form request to their web front end? If so... that's kind of hilariously awesome... but I should reiterate my concern that you've then publicly provided a potential DOS script. Yeah that's exactly right. It is a potential DOS script, I totally agree with you. The DOS potential is why I didn't make it into a phone app, because if you have hundreds of users on the phone doing this for themselves, they're gonna ruin the DMV for normal people. I figured a node script released into the wild would have limited exposure, but didn't consider the potential for malicious attacks. On the other hand, it does require you to put in sensitive information of a california citizen, so at least it's *somewhat* limited in scope, although a malicious user could definitely acquire such a list of people. 
&gt; I'm myself in the process of migrating a Backbone/jQuery/Handlebars-based project to React.js and a bunch of micro-libraries. Why?
&gt; My experience has mostly been that tons of websites don't respect the read only nature of GET requests. Yes, for sure. Especially goverment websites - who don't pay for 'experts'.
Virnibot has detected a misspelling or incorrect use of grammar in your comment. &gt; &gt; My experience has mostly been that tons of websites don't respect the read only nature of GET requests. &gt; &gt; Yes, for sure. Especially **goverment** websites - who don't pay for 'experts'. - You wrote goverment which should have been *government* &lt;3 Good day Courtesy | Of | User Virnios 
Speaking of which... story time. So I'm still in college, and some physics professor rolled out his own physics collaboration website. Among myriad other terrible bugs, this turd-nugget stands out the most: I checked my history, and found a GET request that shocked me. Something along the lines of website.com/login?q1=dXNlcg==&amp;q2=cGFzc3dvcmQ= Literally the username and password were sent in base64 encoding, which meant I could go into the computer lab and probably find other students passwords that they probably also use on their bank accounts and student accounts. I reported it to the admin and he fixed it, but god damn that's bad.
Many people still consider Dart to be an experimental technology since Google has chosen to kill the Dart VM in Chrome.
Oh, that's classic. 
Then you might need to tell us more about your server side? How embedded is the js into php? You mention you have one js file, so your js only talk to the server via $.ajax? Your not doing any injection of js from php? 
Well, its usage is already being marginalized because of our usage of React and Bluebird (note that Bluebird was not just introduced to get rid of jQuery; I really prefer Bluebird because it is a drop-in replacement for ES6 promises, compared to jQuery's Deferred promises which are not even Promises/A+ compliant). Combine that with a preference for micro-frameworks and a desire to remove legacy cruft, and you'll understand why. Getting rid of a large library that is no longer used in new code seems like an easy target to reduce technical debt.
Thanks for the good discussion. You also made me realize that in addition to reporting the security risk to the developer, I probably should have reported it to the school as well. I bet they have nice database with base64 encoded passwords next to usernames. A lot of students used their student ID as their username, so I'm willing to bet you could get tons of sensitive records on a decent amount of students if you were to get access to their database. And since the professor rolled out his own website in PHP and is nice enough to roll out his own password management, I'm almost sure there's gonna be injection bugs and other security issues
Same reason as OP (I suppose): Because it is a more productive stack to work with.
No problem. Past 'reporting it' being just a responsible thing to do, sometimes you can find yourself making connections for future contract work!
The easiest way to achieve a page like this, in my opinion, is using angular with its ngAnimate library. As explained in [this tutorial over scotch.io](https://scotch.io/tutorials/animating-angularjs-apps-ngview) (where I found several awesome tutorial btw) I made a project of mine use the single page approach and have animations like this, which, I made using [this tool at coveloping.com](https://coveloping.com/tools/css-animation-generator) who have several other awesome tools btw!
Thank you for this. I have been afraid to use Angular after reading all the hubbub about them breaking backwards compatibility. I guess hopefully that won't happen again anytime soon, but it's pretty off-putting that they already did it once.
[removed]
[removed]