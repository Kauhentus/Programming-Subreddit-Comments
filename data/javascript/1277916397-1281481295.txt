I can add your code to the project once I've tested it. It looks good, but I have to admit I'm not seeing the huge lag that others are noticing. Maybe it's a specific computer thing or browser issue, like Firefox is slower than Chrome. If your code shows good improvements while only sacrificing rendering time, then I'll be happy to add that in.
I implemented your code on my computer. It looks good. The test time is a little skewed now I think, but it does load a lot faster (133ms original on 1500 comments compared to 5ms with your code). Again, the 5ms may be weird because of the timeouts, but it's still better code. We'll have to wait until brasso gets the code updated on Userscripts.
Well, the tree modifications are batched up by using a fragment. With the current usage pattern this makes it about twice as fast. So, effectively it should be even a bit faster than before (cutting it down to 50% and then +25% for waiting on top = 75%). It only updates the tree for 50msec a time, then it waits 25msec, and continues if necessary. The 50 and 25msec intervals are values Nicholas C. Zakas recommended. They do seem to work pretty well. If the processing time is lower than 50msec, you won't get much done. If it's higher, the browser may start to feel a bit sluggish. If the wait time is lower than 25msec the UI thread doesn't get that much time for other stuff. If it's higher, a full pass takes noticeably longer. Chrome is indeed a lot faster than Firefox. It will probably be done with everything on the first pass in most cases. So, you won't see any waiting there.
The code is being included now. I'll let you know when it's up.
Yes, those 5msec are bogus. They don't reflect how long the code actually took. http://reddit.pastebin.com/ZXcipdxp Added some code to measure how long that chunker stuff takes. The idle time isn't accurate though. It only reflects how much time *should* have been spent with waiting - not how much time was actually spent with that.
Nice. :)
Supported browsers? I couldn't find it in the docs.
IE6+, FF, Safari, Opera, Chrome - Mobile versions of safari are supported too.
I blacklist those domains right at /etc/hosts. Nip the problem at the bud.
other question is, how soon until o3d mozilla and google converge and end up in releases
maybe they can use something like this if this part still hasnt been started http://msdn.microsoft.com/en-us/library/ms740141(VS.85).aspx 
Haha
But seriously you can get it working under cygwin
But even more seriously, haha
Check bugzilla for Mozilla's progress. I'd say they still have some blocking bugs.
Why... why would anybody want (to do) that?
It's called [Virtual Box](http://www.virtualbox.org/wiki/Downloads). Pick any OS you like. Just not Windows.
Wow, guys. It's like /r/unixcirclejerk in here.
Sorry about all the hate man. I do a lot of windows dev and it would be so much easier if Node.js just ran natively on windows. You can do it with cygwin, run the setup and make sure to install development tools (python, gcc, make) and download the Node.js source, and compile as you would on Unix. It does work, although you may have trouble with SSL.
This is not hate, although maybe someone can explain why its a funny question. I think it has something to do with Node.js using something other than select() or something that just doesn't port very easily. I don't actually want to run a server server on Windows, what I want is to be able to take the server and put it in a local desktop application on Windows. Anyway, no one has hated here so much really relative to my normal response, on most questions I get completely ignored, -10, -20, or people explaining five different ways why I am retarded. I already have apache and php and firefox on this usb flash drive, maybe I can throw in cygwin too.
yeah, Node.js is pretty versatile. However, you can't just drop it into a local application, it's not a server, although you can script one with it. Essentially, Node.js makes it able for you to run scripts, through V8 (Chrome's JS engine) which can interact with the OS. You have basic file reading / writing functions, some crypto stuff, socket functions and a few bits and pieces more. You don't get access to things like a server side DOM, because Node.js doesn't need it. It barely has support for databases (So far, the best implementation of MySQL is using DBSlayer as a JSON gateway, which is crap if you want to do multiple queries quickly). If you want to use Javascript to build native desktop apps, I suggest using XULRunner, the binary Firefox is built on top of. However, if you want to use javascript to automate tasks, and do advanced socket/file interaction, then Node is the way to go.
I know what Node.js is, thank you. I am bundling portable firefox, which is the easiest way to handle the UI side. Easier than trying to just do the minimal thing with XULRunner. I also am including xampplite, but the server code for storing the data is only one line of php, and the upload handler for files is not very complicated either. So I was considering just using Node.js to make a very basic database (currently just needs to save a single file) and a way to handle the file upload side, without having to include apache and php. I could go back and use local storage.. although I still wouldn't have a solution for the file uploads.
An incredibly convoluted way to monkeypatch static typing into JavaScript through runtime inspection of a function's source code and careful abuse of the Hungarian notation. Okay, it's interesting and it's clever, but it's hardly a good idea. Neither is using Hungarian notation, anyway.
&gt;I started working in SproutCore almost 5 years ago because I believe the future of software development lies in native-style apps in the web browser. It is the platform of the future and when that shift change happens, I want to be there with the technology. Now, I believe that time is almost finally upon us. It’s time to double down, and that is why I am leaving Apple. Excellent; I've been properly allocating my learning resources. brb learning more css3.
there is also swfupload and uniform
Demo?
Not yet. It's a young project, give it time. memcached has been around for years only recently was ported to Windows. Node.js core feature is non-blocking concurrent i/o throughout and it'll be a headache making that work on Windows.
I know there are a lot of different file upload plugins. The idea behind this is simply to change any given html element into a file chooser, so you can design it a way that completely fits your design. 
I like the idea. How much testing have you done with it? IE6-8? FF2+? Safari?
Just made a very crude demo. You can see it [here](http://www.daimi.au.dk/~u061768/file-input.html)
I have successfully tested this in IE7+, FF3+, Opera 10+, Safari 4+ and Chrome. I expect it to work in IE6 and FF2+ as well as the older versions of Safari and Opera.
Pretty slick. Thanks!
If any of you clever javascript/web guys know a hack to show the hand cursor when hovering the mouse over a file input please let me know as this currently is the only limitation of the plugin :)
will it not work to just add "cursor: pointer; cursor: hand;" to the CSS?
[Node.Net](http://github.com/dnewcome/Node.net) is an attempt to port Node to the .Net CLR. It's a new project, so it might not do what you need it to, but it's probably worth investigating.
There's a guy working on it, not sure how committed he is to it. http://github.com/dnewcome/Node.net He's also [looking at moving it from jscript.net to ironjs](http://newcome.wordpress.com/2010/05/25/embedding-ironjs/), which i think would be _amazing_. being able to run node.js scripts on ironjs would rock the house.
uhm. I think you're doing it wrong, generally.
try appcelerator
Unfortunately this doesn't work with file inputs. The browser is very restrictive when it comes to styling these.
you need quotes around strings, $content=$POST['content']; $itemID=$POST['itemID']; $statement= $mysqli-&gt;prepare("UPDATE Items SET content= '".$content."' WHERE itemID = '".$itemID."' "); The code is open to mysql injection and other attacks though :) **edit Sorry I haven't tried out those jQuery plugins so I can't help you out more there. You can always use webkit's developer tools or firefox's Firebug to see what it being submitted, when and what is being returned for debugging.
Ah neat from what I can tell from just using it, do you move the file input under the mouse when hovering over the element to solve the setting of height and width problem associated with the file input?
will embedding it in a &lt;div&gt; and styling the div's pointer work?
Exactly. I create a transparent div overlay with the same size as the element. In this div I create a file input that follows the mouse when hovering the element and make sure to redirect all the mouse events to the underlying element.
just tried this and it didn't work :( I think a much more bizarre hack is needed.
If you create a demo some place, I'll give it a test on my IE6 test box
Thanks! There is a demo [here](http://www.daimi.au.dk/~u061768/file-input.html)
Looks like it's working in IE6. Great work!
This is an old article. Written by Microsoft's own IE6 team.
I firmly believe the author has never worked with programming language interpretation in any form. The ECMA 262 standard is quite thorough on the syntax and semantics: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf . The author apparently has no idea about this. Perhaps it would be instructive to first implement the standard from the 90s: http://www.mozilla.org/js/language/E262-3.pdf If that is as far as the author will get with part 1, then I anticipate parts 2 - 2^16.
Well considering the very first line of the article is "As a learning exercise..." I don't think that's really a far leap to take.... 
It looks like he is using prepared statements. But I'm not exactly sure what the question is, can you do something like: submit: "&lt;? some php ?&gt; of course, the &lt;? ... ?&gt; is replaced by its output before it is sent to the user (PHP is all server side) so, as long as it is putting out valid JS, it will be fine....But I am not sure if that is the question.
I think it would be a learning exercise for just about anyone. For me, I've learned enough to know that it would take a solid 2-3 months or so of coding, and that's without explaining anything.
This is exactly how an article should be written for people who have a basic grasp on programming and computer science. I can't fucking wait to read the next one.
so you think I should learn a completely new framework and build an application that will only work on the desktop, rather than simply including a local web server and firefox in the distribution?
the problem with .net anything is that it requires the .net framework, which is very expensive and difficult to bundle.. this is a portable app.. will this node.net be compatible with mono? will it be 100% compatible with node.js?
Have you tried changing the cursor of the body? body.fileInputHackPointerHack {cursor: pointer !important;} (That's right, hack the hack)
This only changes the cursor when I'm not hovering a file input. As soon as I move the mouse over one i changes to the default cursor again.
Nice try, using a 1996 version of the Hypnotoad. Didn't know, that blink is still supported.
The sites really going to be accessed by only 2-3 people max and passworded.
Ah, welcome to hell. Another div that provides mouse stylage and then propagates its event to the file and the element below it?
*function i_can_has_cheezbrgr () {return 'yum';};* 
There's this thing called vmware. I hear it lets you run an operating system on your operating system.
That pretty much sumes it up. Web programming is a wonderful thing!
To clarify that waiting stuff a bit: If the browser got nothing else to do, the estimated time (i.e. the time you asked for) will be pretty much identical with the time the browser actually spent with waiting. If the browser is busy with other stuff (redraws, reflows, parsing, plugins, etc.) the control might return later than you asked for. However, this is the desired behavior. Those other tasks which clogged up the UI thread are most likely far more important than adding some information to reply headers which aren't even on screen yet.
The .NET runtime is free to redistribute. I think you are confused.
It still looks like [brasso](http://www.reddit.com/user/brasso) has yet to include the update. You might want to message him. He has the code, but I can link it again. It's a little bit different than what you gave me.
The main thing is the tone of the article makes it pretty clear that "learning exercise" is being used here very literally; to teach himself about this stuff which he is currently not knowledgeable about. He basically says "I don't know what I'm doing, I'm just feeling my way around"
no to bundle I said.. this thing is going on a usb flash and can't have an installer
Ok, I totally had my "asshole cap" on when I wrote that. I was just thinking "Wow! What an amazing article I'm about to read." and then I walked away like "oh man, I was totally cheated". But not in so far as actually attempting to do this myself. Making an extraordinarily slow 3rd edition interpreter (JS 1.5 - no Array.prototype.map, and no DOM) I think would be a kind of achievement I'd be highlighting on my resume if I ever pulled it off. I know the original implementation was done in CL (common lisp). I've gone through it and man, the guy was 34 at the time --- I'm 28. I don't know if I could do that - and I consider myself best of breed.
So, for someone brand new to Javascript - nice job... you're thinking in the right direction, at least... I'm guessing this was just an exercise in learning to program, since there are eleventy billion form validation javascript tools out there... That being said - you could learn a lot from them... Take, for example, the [jQuery validation plugin](http://docs.jquery.com/Plugins/Validation). The idea here is to allow the user to create forms that validate while **minimizing the work in setting it up** ... Instead of having to write code and make a bunch of addRule and registerInput calls, check out how it works... You just attach a class to each input field, and the validation plugin reads the classes and makes the rules for you. (Click the view source tab on the first demo) A really big thing that you're missing that would make your life easier is the use of regular expressions. However, those are a pretty tricky/complicated thing for a beginning programmer. That said, the idea is that you create a "pattern" to match against. For example, a valid email address is [someaddress]@[somedomain].[extension] ... (I'm oversimplifying big time here)... So, the jQuery validation plugin has a number of commonly used regular expressions to detect valid email addresses, website urls, phone numbers, etc... It's this kind of stuff that really makes web development easier... You're on the right track, and for someone so new to programming it's great that you're starting with an object-oriented-ish approach, etc... Best of luck! Coding can be really difficult, but really rewarding when you can finally do the no-errors happy dance :-)
Also to avoid others from wasting time: From the [HTML 4 specification](http://www.w3.org/TR/html4/types.html#type-id) &gt;ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods ("."). Although point and colons are valid chars for ids and class names, jQuery doesn't like them, I've spend too much time around this, all because my class have a dot. Either escape them by replacing it with ("\\.") or don't use it.
I agree. This is a great exercise in understanding the language. There are a few DOM related trick you could use to make your life easier, such as the classes mentioned above. There is also a handy function document.getElementsByName which might be useful to you. My main feedback is that it seems like building a form to use this API is more complicated then writing validation by hand. I understand that you are hiding implementation details from the developer, and in some cases that's a good thing. I think it this case that may not hold true. If given the option between writing my own regex and using this, I'd end up using my trusty regex. I do like that there are callback when there is a failed condition. I think that fits really well with JavaScript's programming model. So for what I don't like. The chaining seems a unneeded. I see where it could be handy, but I'm not sure I could program in that style here. I think it would quite handy if you needed to add multiple rules to a single element. (i.e. you need to check that a phone number is valid, and separately does not contain hyphens) I also think the GreeLight.booleanOpperator functions are a little hard to read. I see what you intend, but I think it over complicates it all. Don't get discouraged my what I personally don't like. I'm just one random person on the internet. ;)
Although periods are allowed in HTML classes and ids, they are not allowed in CSS classes and ids. Since jQuery is selector-based, its behavior is correct.
I only use lowercase class names with dashes. E.g. in this case it would have been `osl-event`. Also, acronyms should be treated as regular words in camel case identifiers. I.e. it should have been called `OslEvent` or `oslEvent`. This is easier to read and easier to get right.
And that's why I use lowercase everything when working with computers: filenames, html tags, javascript variables, etc.
that's really great. very impressive if thats really your first javascript thing the rules thing is very awesome. but why can't I just like define a rule like rule('rulename', function(v) { v &gt; 10 }) or rule (someregexhere) ? or if you are doing the rules the way you are could you add chaining? also html 5 has an email type input type='email' and :invalid styles http://slides.html5rocks.com/#slide21 also look at jquery 
you could set up a debugging environment for php or store your sql in a variable and then write it to a file with file_put_contents('file.log', sql, FILE_APPEND) that way you can see what gets generated. also firebug can tell you if you watch net what is sent in
how can I use jquery selectors and filters and stuff on non-DOM objects
I prefer non-forgiving code myself. There should be one right way to do it. Keep the code clean, keep it consistent.
&gt; Although periods are allowed in HTML classes and ids, they are not allowed in CSS classes and ids. They are if they are escaped: .my\.class {color: red} &gt; Since jQuery is selector-based, its behavior is correct. In JavaScript you have to double-escape the "." to get it to work: $(".my\\.class").click(); Kudos to jQuery for getting this right.
And that's probably because of all the shit people gave MS about VB and DOS being case insensitive.
There should also only be one browser then :P
Well, there should be standards at least. :P
There are, they're just incomplete and unfinished, not completely implemented in any browser and some people consider the standards worthless :D.
How many times is this going to get posted this week?
I normally do camelcase but OSL is an acronym for something, so I cap that like I'd cap someEvent ... words and acronyms go caps... Weird, I suppose.. but how I've always done things... for some reason, I just didn't type it right that time...
&gt; There is a shorthand for $(document).ready() that you will sometimes see; however, I recommend against using it if you are writing code that people who aren't experienced with jQuery may see. I recommend working with people who will look something up if they don't know what it does. But then again, I use the shorthand all the time, so I would think that.
I have another function to add multiple rules at once form.addRules([["rulename", function (v) { v.value &gt; 10 }] ["myregexrule", /^[a-zA-Z0-9_]*$/] ["anotherrule", "email"]]); Both functions should support chaining. I'll modify the addRule method to accept a rule without the object/named parameters so the following is valid. addRule("rulename", function (v) { v.value &gt; 10 }) I like jQuery and some of the other frameworks, but since this is a library I figured I shouldn't force anyone to use a framework just to use my library. I don't think it really would have helped dramatically past the event handling anyways. They're free to use any framework they want in the callbacks, etc.
&gt;but OSL is an acronym for something Doesn't matter. As I said acronyms should be handled the same way words are. E.g. `HtmlFluxCompnensator` or `MmoRpgWtfBbq`.
nice
I ran in to something similar with the maxlength attribute on &lt;input&gt;. Apparently, IE requires you to refer to it as maxLength, while every other browser accepts maxlength.
I use form[name] instead of getElementsByName. I figure the latter is a bit faster and is guaranteed to return at most one element. I store elements by name only that way "work" can be done even before the page is loaded. Once the page is loaded it gets the form element and stores that. It currently supports regular expressions in constraints. A constraint can be: a rule (string), a function, or a regular expression. So you could do something like: addRule({name: "phonenumber", constraint: /^(0-9)*$/ }); And after some of the suggestions I've recieved I will be modifying that to also accept: addRule("phonenumber", /^(0-9)*$/); That way there's a little bit less work required to set rules up. As far as the chaining, since it was only a matter of returning `this` at the end of the function, I figured why not? But chaining isn't required so I leave it up to the developer. I see what you are saying about the operator functions, but I couldn't think of any better alternative if I wanted to support boolean operations. The only alternative (that a friend suggested) was something similar to: addRule("name", function (e) { return e.isEmpty() &amp;&amp; e.isEmail }); But I found the following a lot more concise personally: addRule("name", ["empty", "email"]); Even without the array=and shortcut, I think it's still easier to write: addRule("name", GreenLight.and("empty", "email")] I figured that they probably wouldn't be writing complex expressions anyways. If you have any suggestion of how to make that easier to understand let me know. Thanks for the feedback though, I really appreciate it. I'll work on making it easier to get setup, or more "plug and play" as they say. I don't think I'll go as far as using element classes (mostly out of laziness), but I'll do my best to come up with an easy alternative.
Thanks for the thought out reply. I will definitely work on getting it easier to setup. I don't think I'll ever get it as easy to setup as that jQuery plugin, but I'll do my best. I think I will stick with javascript only instead of embedding rules in the class attribute -- but I will do some research on it to see how difficult it would be if I wanted to. The library does currently support regular expressions as constraints though. For example, the following would be valid: addRule({name: "phonenumber", constraint: /^(0-9)*$/ }); I also provide some default rules for emails and other common inputs that use regular expressions. I will use more of those once I'm a bit closer to having a finished product. Thanks for the feedback :).
Well, it depends on who your audience is... If you're building a utility class for you only, then stick with what you're comfortable with (i.e. javascript rules, etc)... If you're building something that you are hoping other people will fall in love with, use a lot, and maybe even contribute code back to -- you're going to want to make it as easy/accessible as possible for everyone. It's much easier for most people to do: &lt;input type="text" name="phone" class="required phone"&gt; than write an addRule function...
That's why languages like C/C++/Java/etc are considered better languages - you need to declare variables, and you'll know right away if you make that mistake. I think there's a Javascript lint from Douglas Crockford, although I don't know if it would catch that. I don't usually use it because it's just too much trouble. Using Vim as an editor helps - it has autocomplete.
This loses out on some benefits of convention. It's extremely handy to know whenever I see CapitalCase, I know it's a class, camelCase, I know it's a method, ALLCAPS is a constant. I don't think the solution is to never use capitals, it should be to be consistent.
This is a little off topic.
for Javascript? really?
Yes.
link?
to Vim? or lint? Your post really wasn't clear. My downvotes make it seem like some people here are threatened by tools that improve software quality - that's a good thing for me, I guess; I'll get work fixing their screwups. In case there is anyone here that **does** care about Javascript quality, you might try glancing over "JavaScript: The Good Parts" by Douglas Crockford. JSLint is discussed in Appendix C, with a link: [JSLint](http://www.JSLint.com/). PS I'm assuming you don't want a link to Vim - it's pretty easy to find, and there's Vim subreddits. It includes autocomplete for any text. 
I know about omni-complete. I use it for C/C++. I know about ctags and cscope. Here is my Vim with JS: http://qaa.ath.cx/vimjs.png 40K Now back to the question. Omni-completion in vim, what plugin do yo use? link to the vimscript would be fine - I use one I wrote myself, but it isn't great.
Oh, sorry, I keep things much simpler than you. I was referring to the built-in autocomplete, using Ctrl-P. It may not be as extensive as what you need, but it always works, no plugin required. I've grown a bit leery or plugins, after having problems and spending more time troubleshooting plugins than writing code. I've found that Vim by itself, with the right settings, does most of what I need, and the added benefits of most plugins just don't seem worth it to me in the long run.
An HTML class is the class attribute of an HTML element. A CSS class is a CSS class selector, e.g. ".foo".
While we're at it, document.location.href = 'http://www.some-domain.com'; Does not report the referrer in IE (not tested in IE &gt;= 8) Actually: None of the properties or methods in location report the refferer
NaN more times.
IE gets a lot of shit, but I do like some of the reasons why it crashes.
Thank you.
OH MY GOD. WE'RE DOOMED DOOMED THE SKY IS FALLING WE'RE DOOMED. http://pastebin.com/ytZ7N1x7
should be: return 'nom nom nom'
damn, now i can't remember the article about the importance of windows ports for programming languages. i think it was about haskell, maybe? windows download numbers were _way_ ahead of those of other OSs.
That's awesome, but where are the test cases, so we know that this actually works?
I was trying to accomplish roughly same thing, portable application built on html, js and sqlite. Localstorage was too small for me so I looked into bundling small webserver with it. Xampplite with Apache startup is unacceptably slow, I i tried with various alternatives: hiawatha, xitami, server2go etc. For reasons I do not quite remember anymore UniServer seemed most reasonable candidate. I shelved the project, however, for lack of elegant solution. If all you need is simple local webserver then there are quite many non-apache binaries that may suit your needs being not only faster but smaller as well.
Could you give it some different controls, or make a "minimal" version, with just the game On my (1280x800) screen in safari mac os x, pressing the arrow keys scrolls the screen around, making it unplayable.
good point, yeah ill incorporate a/z for controls as well... at work right now unfortunatly, will have to do it at lunch.
right the apache takes like 10 seconds to start. you can reduce the startup a little from the original by removing extra stuff from the httpd.conf 
Why did you post this here?
Because its all in javascript :? figured it would be the most appropriate place to post.
You did not provide the source code. It's all minified. Also, there is no technical discussion. It's just a short blog post with a link to a game. I suggest /r/gaming for this type of post.
the code is included... in the description below the game. Minified was just used for the "production" version. Added source link to the blog post as well.
Thanks. I actually downloaded the game and deleted all the text, and got things to work. It's good fun, I've managed to just finish it :) I've had starting canvas on my list of things to do "any day now" for a while, to get myself away from evil Apple iApps. Do you have any suggestions, or problems you had? I noticed you are using some kind of weird font function in your code.
Don't listen to him, I think it's neato. Well done
My mistake. I didn't see the download link. EDIT: Or is that what you just added?
Ill write something up on challenges I faced in the blog post.. i just found this subreddit today and thought it would be a good place to post, didn't really put too much thought into the blog post. The font code is actually from http://www.benjoffe.com/code/dev/canvas_fonts/example uses bitmap fonts rather than placing regular text over the canvas element. Seems to work well when you have a few fonts.
It may or may not be neato but I subscribe to this subreddit to keep up with JavaScript news not to indulge people's personal hobbies. Without any technical content this submission does not really belong in /r/javascript.
[sure looks like technical content to me, as well as being in javascript](http://www.somethinghitme.com/projects/jslander/download/jslander.zip)
That's what the hide button is for. The minified google pacman source was one of my favorite posts in /r/javascript. There was no technical content and the code was minified. I ran it through jsbeautify, spent a couple of hours parsing the code, and learned more than I have in a while (plus I posted a write up in the comments). But, I guess you're right, it was a useless post that should've been in /r/gaming where it would've been downvoted by a bunch of Gabe Newell fanboys. 
I added it to the post recently, was always in the game description.
jQuery is javascript.
I'm not quite sure what you're really trying to do, but would something like the following do the trick (using [parseUri](http://blog.stevenlevithan.com/archives/parseuri))? var relative = "/path/to/file.ext"; var uri = parseUri(location); var absolute = uri.protocol + "://" + uri.authority + relative;
http://code.google.com/p/js-uri/ Third link on a google search for "[javascript url relative to absolute](http://www.google.com/search?q=javascript+url+relative+to+absolute)" was [a stackoverflow page](http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue) with the answer. There's a few other options there you might want to look at.
Are you attaching the elements to something, or just leaving them in the void?
You should be able to create modify and use unattached elements just fine before the DOM is ready. If you're going to add them in then you should be waiting until it's ready.
I know I just wanted to mention jquery because I would rather something based on that then an unrelated javascript library. sorry I could have worded it better.
James Padosey has a really nice trick that uses Yahoo! as a proxy for jsonp. It might be worth a look. http://james.padolsey.com/javascript/cross-domain-requests-with-jquery/
thanks. i thought somehow there was a way that they had set it up so that it added a script tag and that somehow allowed loading cross domain xhtml alone. but if it requires the yahoo server I guess thats ok since we can reasonably expect it to be around awhile
yep, if you want to search for dom nodes using functions like getElementBy* or by accessing the direct descendands like childNodes etc... you had to wait because the node you need must be already loaded and parsed.
I guess thats basically what I need to do. for all of the links on the page.
Ahhh! I just crashed a 100 bazzillion dollar lander! Nice game :)
One trick you can use instead of waiting for the entire DOM to be ready is to place your JavaScript code in your HTML file AFTER the elements that need to be ready, but before elements that don't need to be ready.
yup, but it still is a beast. there are some pretty slick alternatives out there when you don't need to fly that boeing 747 of a webserver. 
I guess you could create elements and/or document fragments before onready and attach them to their appropriate place after ready.
_derp_
Nice. See also: http://www.mrspeaker.net/dev/parcycle/
Yeah, I missed it in the game description. Apologies.
Nice job, the one from mrspeaker.net is amazing I remember seeing that a while back.
&gt; That's what the hide button is for. No, that's what the downvote button is for. Inappropriate submissions. It turns out that I was mistaken and the source code was linked from the demo page. Otherwise, there is nothing wrong with what I said. But score points off me if you like.
&gt; If I don't interact with the DOM so much, but only create new elements This statement contradicts itself. Where are you creating them? I am assuming you are inserting them into the DOM. You will need to know if the part of the DOM that you are inserting them into is ready before you try to insert them.
try it
That is not really a good test. It could work for you, the DOM may be ready because you have a fast browser/connection/computer, etc. but it may fail for somebody else. It is best to understand understand what is actually happening, then you can know if it will work or not. Given that we have almost no information on what the submitter is actually trying to do and how, we really can't say anything for sure.
&gt;pressing the arrow keys scrolls the screen around Returning `false` in the key event handlers does the trick. Unfortunately, this doesn't help with Opera (unless they fixed it with 10.60... no, they didn't). What does work, however, is giving focus to a 0x0 `visibility:hidden` input field, which is... well, all kinds of awkward, but it works.
thanks I might switch to uniserver if it supports php 5 and I have time.. probably I should if it starts up faster
In hopes of attaching, but from NeedeANewName's comment, and some testing, I do need wait until it's ready.
I've been wanting to build something like this for ages... but I didn't think it could actually work so smoothly. Quite impressive.
This is tons of fun. Collaborative cock drawing brightens the day once again.
Check out http://flockdraw.com/ for a flash version that does other things as well (tools, colors, etc..) go to http://flockdraw.com/reddit to draw with others
&gt; No, that's what the downvote button is for. Inappropriate submissions. Yup, the downvote button, not the reply button.
It seems like you have no problem using both. Bottom feeder.
Wow, key detail: you only see what people drew after you joined. So if you trace a drawing, that communicates it to the people that have joined after you. The drawings, like knowledge, are passed down only if someone repeats it. I think it would be fascinating to study how this looks to the average current participants over time.
This is using that technique, but in a different way. It's called JSONp. Why, I'm not sure. There is a way to do templating using a script tag with a type="text/html", but those aren't allowed to use an src. So no downloading from somewhere else. If routing though Yahoo! isn't an option, there are Flash shims you can use, but those are just as icky as anything else out there. Especially for use in a bookmarklet.
I ran through multiple visualizations and I've got to say I am really impressed. I can't wait to show some colleagues your work. Thanks! 
WebSockets are amazing!
Neat.
This slows down links.
Yeah, agreed. Cool idea though.
What Node.js library is being used to handle WebSockets? I've seen a few different ones over at GitHub, but haven't toyed with them yet. Any suggestions?
Two words: This is AWESOME!
Updated to allow a and z to control thrust.
This is awesome.. I need more ideas like Mr. Doob :P
that is creepy as fuck. but very awesome. when you refresh it erases your screen. we should play picture or something. 
This isn't a thing like Sutherland's work.
While that looks much shinier, it's very very jerky on my machine (mac os x, firefox), whereas javierparra.mx's is very smooth.
Awesome. This was made by me and someone else playing at 5:30 am. (btw, the cool drawing wasn't made by me) http://imgur.com/6yG48.png http://imgur.com/HCW77.png
Smoke more doobs.
I've used miksago's node-websocket-server. http://github.com/miksago/node-websocket-server
I agree. I didn't really plan it that way, but the whole limitation is becoming a very interesting feature.
It's not Harmony by the way, I don't know where that came from. The UI is similar, but it's not using any special brushes. Well, it's a bit special, it has a distance to opacity link that discourage people scribbling all over the place :P
DirectDebtAdvice.co.uk Nice. www.DebtAdvisoryLine.co.uk Ads by Google
So every clicked link results in two requests being made, the back button breaks and users still get 404s when they open the link in a new tab? Where do I sign!? /s In all honesty this is a nice experiment, but it's hardly useful. The benefit of being able to catch outbound 404s as they happen is pretty limited. Showing a modal message is probably even more disruptive than sending the user to an error page. In the case of external links this assumes that the error page will be useless. In the case of internal links, this seduces the author not to bother making their error pages more useful. If your error pages are helpful, you don't need this. If they are not, you're barking up the wrong tree (the plugin is useless for incoming users). In addition to solving a problem that doesn't exist, this effectively doubles the direct traffic. Even if it would use HEAD instead of GET (depending on browser availability), it would still create extra requests. It's an interesting proof of concept, but it's hardly elegant nor useful.
I wonder what images will "live" the longest, in the sense that new participants will be likely to trace them, passing it on to the next generation.
The cross-domain &lt;Script&gt; technique that you seem to be referring to relies on JSONP -- that's really the only way it can work -- JSONP is just a regular external JS file that contains something like: customCallback({ "this is": "data", "foo": 123 }); And `customCallback` is defined in your document, so when the JS file is loaded it immediately calls your function with the data. 
That doesn't happen too often though. I've been saving some iterations for the last few days. http://twitpic.com/photos/mrdoob
So many penises...
&gt; try { CacheProvider.hasLocalStorage = ('localStorage' in window) &amp;&amp; window['localStorage'] !== null; } catch (ex) { CacheProvider.hasLocalStorage = false; } &gt; The main reason we use try / catch is because despite Firefox supporting it, it can be disabled in your about:config settings and an error will be thrown. A simple if / else will not work. Yeah, nice one Mozilla.
You have to be careful with this sort of thing. If you add an element to another "container" element while that "container" element is being parsed, you can cause a race condition in IE6. An example of this would be adding an element to the head tag from within the head tag... &lt;script type=text/javascript&gt; document.getElementsByTagName('head')[0].appendChild( document.createElement('br') ); &lt;/script&gt; This issue only exists in IE6, so *shrug* ... but be aware! Now, if you're modifying an element, that means you were able to find it in the DOM which also means that it has been parsed, and is in most cases ready to be fudged with. 
\[[Pic](http://imgur.com/BRqwM.jpg)\] I've had the window open for about 20 mins now
I think you're getting downvoted for your assertion that Java/C++/C &gt; JavaScript. While that may be your opinion and JavaScript certainly went through a nightmare phase early on (lots of bad code, different implementations and inconsistent specs), the JavaScript of today hardly resembles the JavaScript of the 1990s. We've come to the point where JavaScript isn't crap anymore but also can't be sensibly compared to Java/C++/C (I suppose your "etc" refers to other, similar, statically typed languages?) in terms of being "worse" or "better". JavaScript is the only choice for front-end code (ActionScript and Java don't count because they require plug-ins; Eclipse RAP and similar frameworks don't count either because they're still generating JavaScript even if you only ever "see" Java) so there's no competition. Most of the problems JS has today boil down to differences in implementation (e.g. Moz vs IE), performance (e.g. Chrome/Safari vs *), capabilities (e.g. HTML5) and extensions (e.g. ActiveX) across browsers. I think it makes sense that JS is more forgiving when it comes to undeclared variables because its environment is so unstable and diverse. JavaScript was created for a very specific type of environment and a very specific set of problems and I think it works quite well.
Depends on the style guide, actually. I prefer keeping acronyms uppercase in CamelCase (`HTMLFluxCompensator`) and using lowercase with underscores for methods and variables (`flux_compensate()`, `html_flux_compensator`) -- I think that is the official Python style anyway, though I use it almost everywhere. For CSS classes and IDs I use lowercase with dashes because that's the convention for CSS properties already. It's very rare that you would need to chain acronyms in class names and thus risk making them run into each other. Differences aside, the important thing is to have a convention and stick to it. It helps if outside code adheres to the same convention (i.e. if your conventions adhere to the conventions of the code you will be working with), though.
The problem with keeping acronyms uppercase is that it's somewhat awkward if there is more than one. `XMLHTTPSFTPVoodoo` Now, is that https and ftp or http and sftp? Don't ask me - I don't know either. But yea, having code conventions is great. Same goes for style guides for writing documentation.
The obvious retort is that if your class names have acronym chains in them you're probably violating some of the principles of good/clean code already (probably SRP, or your hierachies are too flat or your naming just sucks). I haven't seen a case where keeping acronyms uppercase in CC created any real naming issues.
You're most likely correct - I thought about that, and my choice of words wasn't really very good - I didn't really mean that those languages are better in an absolute sense - they certainly aren't for web client programming. What I was thinking was "better at reducing errors", but I wasn't thinking clearly about the words I wrote. I guess I should avoid posting in forums unless I have more time to read what I write first. Can't you people even read minds? You'll never be a real programmer if you can't. How else can you know what the customer really wants?
[`XMLHttpRequest`](http://en.wikipedia.org/wiki/XMLHttpRequest) is a pretty famous example. I really have no idea what they were thinking. It should have been either `XMLHTTPRequest` or `XmlHttpRequest`. Well, if you look at both versions, it's pretty clear that the latter one is easier to read and also easier to type. Highlighting that these identifier segments are acronyms by capitalizing them doesn't provide any useful information. After all, if I know what the acronym means I also know that it's an acronym. Also, the pronunciation hint provided by capitalization isn't of much use in this context. My preferences for this switched fairly recently, by the way. I haven't given it much thought beforehand.
I noticed that feature. Really neat.
The third comment on the blog is correct, you should not be exposing private methods as public methods in order to test those private methods. You should be testing your public API, not your private internals. 
That should hopefully be fairly non-controversial. 
The proposal seems to be applying namespaces to import functionality. Surely this can be done without tinkering with Javascript, though? I envisage a repository of Javascript modules, but the necessary code is only extracted through a build script.
The functionality that they describe can be more or less done already, with a number of gotchas. YUI 3 does exactly what you describe, and it's probably not the only framework to do so. It's a bunch of hacks and work-arounds, though. That proposal would bring a clean, common, library-independent way of handling modules. And with IE picking up its development speed a bit, it might only be a few years before we'd go from standard acceptance to widely usable implementations..
Actually I think it should be clear that a better name would be simply `HTTPRequest` because that is what it is for. That it can be used to transmit XML is irrelevant to how it functions. Most people use it to transmit JSON back and forth, not XML, anyway. Even if it _were_ limited to sending XML back and forth, that would still be a violation of SRP: it should probably be an HTTPRequest taking an XMLDocument as argument. I can see why someone would want to make a class that only does one very specific combination of actions (i.e. XML-based HTTP requests) but that's still a gross violation of SRP: as soon as you want to implement a way to transmit JSON data analogous to your XML-only HTTP request, you would have to duplicate all the HTTP-related code. I think XML-RPC would be a better example because it's essentially a double-acronym already. A class name like `XMLRPCRequest` would be awkward and hard to read, and it probably wouldn't make sense to generalise the class to `RPCRequest` and provide an `XMLDocument` as payload because `XML-RPC` is a protocol that is actually a subset of HTTP (i.e. based on HTTP, but relying on certain assumptions). In this case, yes, `XmlRpcRequest` would probably be easier to read, but this _is_ an edge case. You could probably avoid the problem by creating a package called `xml_rpc` and renaming the class to `Request` (which would be unambiguous in the content: `xml_rpc.Request`).
You could just call them "safer", but that is more of an issue with dynamic vs. static typing, or with (pre-)compiled vs. interpreted (and JIT). As I said, JS has come a long way since the 1990s and has turned into a somewhat respectable language (though there are still some important steps ahead, e.g. modules and better scoping control). JS aside, the issues I named are really more of a religious nature. I started with PHP, dipped my toes in C++ and then discovered Python after screwing around with Java for quite some time. When I started with C++ and Java I thought static typing was great because PHP turned me into a control freak (keyword: defensive programming), but Python completely changed my mind. Personally, I really enjoy dynamically typed languages (though I still dislike weak typing a la PHP), but I can see the benefits of static typing, especially in a corporate environment. Statically typed languages are not necessarily better at reducing errors, but they make some errors more obvious at an earlier point in time (i.e. at compile time or whenever your IDE's type checking kicks in) and they allow you to program more defensively with less explicit checks (i.e. if your types/classes are defined specifically enough, all you need to worry about when receiving an object is whether it's null).
Well, yes, `XMLHttpRequest` is of course f-ing awkward - no matter how you write it. http://en.wikipedia.org/wiki/CamelCase#Programming_and_coding &gt;[It's problematic] when the standard mandates lower camel case but the name begins with an abbreviation (e.g. "SQL server" would become "sQLServer"). Heh. No one would write that. (I hope.) I'd say treating every segment equally is just more consistent. Since capitalization is used for flagging purposes other capitalization rules should be ignored. E.g. if there is some instance of my `Server` class it should be called `server`. It would be pretty weird to use "Server" for your instance variable just because the program is German and the German capitalization rules demand uppercase nouns. (Same thing with English capitalization rules in regard to acronyms.)
Isn't that kind of like what CommonJS does already? For example in node.js? Not really sure how the syntax additions really help.
The syntax additions will ensure the proposal never gets anywhere without major (three browser) support :)
Please clarify your question, else I'll be hard pressed to find a reasonable answer here.
Are you trying to remember state for the next time a person visits, if so you could look into local storage, e.g. cookies etc. To save on the server you'll need a local script that can extract the contents of an element and post it to a server side script that saves it to file, fairly straightforward but you probably won't find a ready made script for it.
There's two parts to this problem. There's the client-side JS involved, wherein you hide the div, capture what's in it, at which point you need to send it to the server with an ajax call. JavaScript (I should specify client side, since we have node now) can't write files or modify anything on the host server. You need a service on your end in a server-side language (Rails, PHP, etc) that can take what's submitted to it and write the file for you.
English, motherfucker, do you speak it?
Are you using JS on the server? Client-side JS knows nothing of filesystems.
I'm constantly surprised (maybe I shouldn't be) at how many people have trouble realizing that there are at least 2 different computers involved in the rendering of the webpage. I think if i was teaching a class on web programming I might be tempted to email the students an html file and ask them to open it via file=&gt;open file in their browser, and if they want to change something I'll email it to them again. I think things like this would get cleared up pretty quickly.
I'm sorry I spat out the question without a framework for everyone to understand where I'm coming from. I basically have a javascript "X(closes the box)" at the bottom of each sortable div box that will 'hidediv' basically. When that happens I want it to also trigger not just hiding the div (which contains the sortable elements) but creating a text-file-list of what was inside the &lt;p&gt; tags (text obviously) same with which elements were inside (also text) I think I need to find a plugin that can look at the div that was hidden and turn it into a "LOG" basically of what was in there since its now 'gone'. If there's something I'm leaving out please let me know.
I don't see my reply here so I'll try re-posting it. My question assumed a knowledge of the framework so that's my fault. Here it goes: (box4 id - bananas) &lt;p&gt;Bananas&lt;p&gt;In Pajamas&lt;/p&gt;&lt;/p&gt; Stuff Stuff When I hide this particular div box with javascript I want it to create a text file called say bananas.txt in /logs/ and I want it to contain basically just that example above... The title of the box (which was inside p tags). The sub-title of the box (in pajamas) Stuff I'm sure there is an easy way to do this, any and all help is really appreciated. It's just to keep logs of divs that are removed. 
I don't see my reply here so I'll try re-posting it. My question assumed a knowledge of the framework so that's my fault. Here it goes: (box4 id - bananas) &lt;p&gt;Bananas&lt;p&gt;In Pajamas&lt;/p&gt;&lt;/p&gt; Stuff Stuff When I hide this particular div box with javascript I want it to create a text file called say bananas.txt in /logs/ and I want it to contain basically just that example above... The title of the box (which was inside p tags). The sub-title of the box (in pajamas). Stuff. I'm sure there is an easy way to do this, any and all help is really appreciated. It's just to keep logs of divs that are removed.
Eh, you could write it to a db or text file with a server side language. But with straight javascript you cant access the file system.
I still don't understand exactly what you want to do, but I'll try to answer this. Using the innerHTML property and some AJAX to send the contents of that over to a server-side script that'll save them to a file on the server should do the trick.
I don't know my communication is breaking down on that facet! Page full of sortable lists(maybe 10-12 at a time): &lt;p&gt;List Name&lt;p&gt; - Lists Sub Name&lt;/p&gt;&lt;/p&gt; &lt;div&gt;Content Item #1 (Joe Baker for example)&lt;/div&gt; &lt;div&gt;Content Item #2&lt;/div&gt; etc.. That is what each box looks like and its also what I want the text file to look like because its basically just the same information thats in the box - just weeding out some tags and making it look neat.
Maybe your just slow so I'll repeat what Hovertruck just said, but slower. Try to keep up. There's two parts to this problem. There's the client-side JS involved, wherein you hide the div, capture what's in it, at which point you need to send it to the server with an ajax call. JavaScript (I should specify client side, since we have node now) can't write files or modify anything on the host server. You need a service on your end in a server-side language (Rails, PHP, etc) that can take what's submitted to it and write the file for you.
sure it is possible, if you are using jquery you could do something like: $(divToHide).hide().find('div').each(function(id, div) { $.post(someScriptThatWillWriteItOutForYou, {'div': div}); });
Are you trying to save the log on the server or the client? If it's the server, then you'll need 2 things: 1. Some client-side javascript that sends the data back to the server using ajax. 2. Some server-side script that takes the data and saves it (what server-side scripting language or framework are you using?) Otherwise: If you're trying to save the log data on the client, javascript can't manipulate the filesystem (for VERY good reasons). HOWEVER, you could use console.log(data) if you're just doing this for testing purposes. Then you could review the data in firebug. If this is the case and you're gonna keep the logging function in the production version of your code, you'll want something along the lines of: try { console.log(data) } catch(e) {}; As some browsers don't support console.
Insult then copy/paste? Try being more of an asshole next time I'm interested, really. I re-iterated the problem I was having in more detail for Hovertruck. I get what he said and understand it's a two-step problem instead of one. Should you have linked an example or perhaps outlined it differently I wouldn't consider you an idiot. You certainly are not mannered very well(But when did you ever care about that?). Thanks again Hover. *slaps rlee0001 around a bit with a large trout*
This was what I needed help with basically :), thanks! As long as I know php could handle it I'll work on that route. I was just thinking JS because I was using it to hide that's all lol
I think it'd be possible to submit the contents to a div to a server and use something server-side to do it, right? Or is there a better solution?
How is this even remotely interesting? You could do the same thing with a Safari extension, a Firefox extension, or a Greasemonkey script.
What... D: What are you trying to say here exactly.
&lt;tag onclick="javascript:submit(this);"&gt; or something. Er, I also meant contents OF a div, not contents TO a div.
I have read the entire thread and I still don't understand what you want. I don't want to think that you are an idiot, and I don't want discussion to break down into questioning your sanity, but I don't blame rlee0001...
If you want it to save the text of your divs, based on when the user clicks the box, then you need both javascript and PHP(or some other sever-side code). I'm still not sure that's what you want though...
Yep. Okay. The thing is, why is the client responsible for moving data from the server to the server... It seems like a really poor design. :(
I hate to say it, but this seems kinda obvious. Not to be a downer, but what is new about this?
Woo! \o/
Have you every actually been slapped with a large trout? Shit hurts man.
Thanks for the help on it. Your code works out well. I need to add some more functionality for the "load more comments" links (onclick event to populate votes), but that will be later.
&gt;Thanks for the help on it. Well, I did it for myself. Opening a bunch of tabs was somewhat laggy in Firefox if one or more of those tabs were self links or comments. I used different chunking patterns in the past and this time I wanted to give Zakas' pattern a try (High Performance JavaScript, O'Reilly). Another thing was fragments (they are also explained in the same book). Hadn't a case yet were I could use them, since I use jQuery most of the time and there usually isn't much I could batch up. Both things worked out pretty well. I'm really glad I gave it a whirl. By the way, there is another thing which might improve performance drastically. The browser has to reflow whenever you modify the flow and this is a very expensive operation. If, however, the things you add are positioned absolutely or fixed, it can't affect the rest of layout and therefore nothing is reflowed. This looks pretty messy though since you'd need a few extra styles. Additionally, it makes the script a lot more fragile. It might for example break in some sub reddits where the style sheet was modified a bit. So, it's probably a bad idea in this case. http://www.scribd.com/doc/16877247/Go-with-the-Reflow http://blog.mozilla.com/gen/2009/04/09/how-to-make-your-own-gecko-reflow-video/
Don't get me wrong - I enjoy dynamically typed languages, too. I've always been a UI specialist, first on Mac, then Windows, now HTML/CSS/Javascript/jQuery, etc. But I do recognize that the earlier you can catch errors, the better. I like for the compiler to catch as many errors as possible. I'd like to have an editor that could be configured to look for unusual patterns in some intelligent way, sort of like a word processor's spell/grammar checker. Of course, it could be ignored or turned off. It would have to be an add-on, I guess, since I'm pretty particular about editors, like most programmers.
Im suprised no one here has suggested Adobe Air. You can package cross platform applications built on nothing but html/js with filesystem access and a local data store. Oh also its free.
I know about Air but I thought it had to be installed? This is a portable app for a usb flash drive, and its supposed to be run in an emergency situation.
well I really hope you sell your book but, lol, don't see the connection between jquery and soccer really.. so kind of contrived there
They're not selling the book, they're offering it without charge. It looks like they had books assigned to each of the teams and even though I agree that it's a little contrived, it's a fun idea regardless. And it's not *my* promotion, I just shared the link witchoo.
got my free copy in seconds!!! Thanks!!!
FYI, the headlines on Reddit are links that your browser uses to get to the website that they reference. Now that you know that, you can click on the headline and see the connection between Sitepoint books and the World Cup racket for yourself! 
Wait. Who would think variable case should adhere to regional capitalization rules? Then again, there's a lot of idiots out there. I cringe every time someone names their instance "myObject" and their class "CObject" (hint: it's not the missing "C" in the instance name that I find unsettling). This is hardly appropriate in tutorials, but a nightmare in production code. Also, there is a very limited scenario where it is appropriate to use Hungarian notation.
[Link to demo](http://valums.com/files/2010/file-uploader/demo.htm)
sweet But it is really necessary to user innerHTML? When creating DOM elements, why fall back to a language/notation that is only a transport-medium?
If you are talking about places where I used innerHTML to create elements from user supplied templates, I think that it was the cleanest way to do it. How would you handle the same thing? If you meant the code in qq.UploadHandlerForm, the innerHTML is the only way to create a form with correct method and enctype in IE6.
I go all the way through createElement, using a simple wrapper that translates between objects and DOM elements. This way, keeping links between event-handlers and elements triggering them is simple and"this" is the natural way to stay in context. And: why do people still create code to make life easier for IE6 users? Even die-hard MS enthusiats would like to perform a post-natal abortion on that beast.
It's worth illustrating these patterns, and I'm guilty of gratuitously taking DRY to this level myself, but I take issue with: &gt; The idealistic part of me — the part that believes people who write JavaScript should understand JavaScript — says this is an acceptable price to pay. And besides, there’s something to be said for explaining the code in a comment that can be stripped by a minifier, rather than explaining the code via the code. The idealistic part of me says “code should be readable”. Brevity for the sake of brevity yields perl, and writing code that is less than obvious in intent makes for difficult maintenance later. Comments explaining this sort of code remind me of the old example of a bad comment: // prints "hello, world" puts("Hello, World!"); .. including the inaccuracy which is bound to come in later, when the *repetition* which you've just re-introduced falls to the same demon you were trying to avoid. I also strenuously object to the use of $.each where foreach / for each will do better or even as well. The last example is pure nasty imo – so much is going on in the last line it takes me 3-4x longer to read than the original. Use a local variable ffs! I do agree completely that this example screams out for an abstraction (not least to eliminate the double-call), but my first instinct is to try and give the abstraction a name so it can be used elsewhere. Unreadable code can be excused only if it's hidden behind an obvious name that others can call it by.
Thanks! Since this feature showed up in gmail (chrome only) I was wondering why a cross-browser lib hadn't been released already.
Yes, I also usually create elements directly, but it didn't play well with custom templates. In this case, it tied presentation (html+css) with my code too much. I decided to support IE6, because it didn't require a lot of special treatment. (The only thing that I didn't use because of it was &gt; selector in CSS) But it's probably the last piece of code I write with IE6 support.
Whoa, this is awesome. How are you doing a multiple file selection dialog box without using Flash?
I place invisible &lt;input type="file" multiple&gt; on top of the button you see. But unfortunately multiple attribute is not supported in IE yet, the user will have to select files one by one in that browser.
I'd consider using jQuery templating
that's good for controled scenarios, but if a basic lib should be compatible to different hosting-pages, it shouldn't require heavyweight or version-aware libs. wheras DOM-templating is not that cool within jquery.
That's a nice implementation, man. Just one point. You've got a percentage there, and a spinner, but it really seems like it's an ideal candidate for an actual progress bar...
Good point, although he may get more exposure if it's released as a jQuery plugin, but obviously it's worthwhile maintaining a stand-alone no-constraints project
I appreciate your points, but I think with client-side code there's a little bit more to the question -- our code needs to be minifier-friendly, and every K counts, especially on mobile. This can certainly be taken to an extreme, but I think there's little question the original example could stand to be improved.
Percentage and a spinner seemed like a better idea, because in this case I can show the same loading indicator in browsers that don't support onprogress event.
put an attribute to your divs like rating then call $.each function and use $.addClass in accordance with your results. http://www.friendpaste.com/6LAmSnieVGLjwxh06YaDa
Writing code with a minifier in mind has its place, but I think it's very easy to take too far. The repetitious code is very gzip friendly, and its not clearer the AST would be smaller or execution require less memory in either case. Knuth: “We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil” Abelson and Sussman: “Programs must be written for people to read, and only incidentally for machines to execute”. In fact it's my belief that if this is an important optimisation, a minifier should be able to perform it on the original code. There is a whole worm-can of implications of trying to do so, of course, but my point is more philosophical than technical :-). I don't mean to be combative, nor to imply that your blog post has no value – the transformations you describe embody an important principle, and can actually improve the readability of code in less trivial cases.
Totally not working for me. Placed my order over 30 minutes ago, and it still won't let me login to download it. Edit: Also, this says 12 hrs: http://www.sitepoint.com/blogs/2010/07/12/our-jquery-book-is-free-for-12-hours/ and this says 24: http://sale.sitepoint.com/ ?? 
&gt;Who would think variable case should adhere to regional capitalization rules? If you write acronyms in upper case, you do adhere to capitalization rules of some language. Unless your style guide happens to mention this stuff, of course.
I think that's a thing that I struggle with when I try to explain potentially complicated things -- explaining them with a simple example makes it very easy to explain them, but the simple examples are rarely a good or accurate demonstration of the true value of the pattern, and it's easy to ask "why bother?" I appreciate your comment though, for real -- just as it's important to know these patterns, it's important as developers to ask when it's appropriate to use them and when it's complete overkill :)
I got my email and it started downloading immediately. :\
 Parse error: syntax error, unexpected '.', expecting T_VARIABLE or '$' in /home/scot3008/public_html/frenchsort/list.php on line 17 Is what that solution gave me :( Here's what I did with your suggestion: &lt;?php // Connect to the DB include("config.php"); $result = mysql_query('SELECT itemid,content,rating,boxid FROM `Items` WHERE boxid = 21 ORDER BY `Order`'); while($row = mysql_fetch_array($result)) { $content .= ' &lt;div id="drag_' . $row{'itemid'} . '" class="fudge list_element"&gt; &lt;div id="' . $row{'itemid'} . '" class="lol" style="display:inline;" rating='.$row{'rating'}.'&gt;'.$row{'content'}.' ' . $row{'rating'} . '&lt;/div&gt; &lt;/div&gt;'."\n"; $.each("div", function(){ var rating = $(this).attr("rating") if(rating &gt; 10) $(this).addClass("yourclassname") }) } // return list of elements echo $content; ?&gt; How did I break it so well? lol (Added a class to my style.css file with the name yourclassname because I couldn't decide what I wanted to call it yet lol) 
Have you considered using Flash for IE-users? I have used Uploadify in a few projects, but cannot use your script as it does not have multiple upload for IE. Pretty cool stuff though.
Ah, I figured it out, they are not handling email addresses properly, you can't have a + in your email so anybody using gmail don't try the xxx+sitepoint@gmail.com The URL will end up having "xxx sitepoint@gmail.com" instead, and replacing the space with + or %2B does not fix it.
This works pretty cool and the code is nice and clean. I would say maybe add some comments to your server file so people can understand why you are sometimes using php://input and sometimes using the $_FILES array. I, for one, get really confused with the differences between the browsers when it comes to the XHR handling. 
You got some jquery in your PHP.
Probably Monday syndrome creeping in. If you anyone is interested in The 'style-display-inline-etc' was to get those columns looking right with jEditable. Basically I wanted to do this: &lt;div id="' . $row{'itemid'} . '" style="display:inline;" rating='.$row{'rating'}.'&gt;'.$row{'content'}.'&lt;/div&gt;&lt;div class="lol"&gt; ' . $row{'rating'} . '&lt;/div&gt; So $content and $rating appear in the same box but only $rating becomes editable but I can't get it to work right because it spits $rating to a new line if its inside a new div. Gotta try this out!
My 'event.js' file that handles the lists sortable/editable elements. How would I use your solution here? $(function() { getchaList(); }); function getchaList() { $.ajax({ url: "list.php", success: function(feedback) { if(feedback != "") //Verifies if the list contains at least one element { $('#myList1').html(feedback); // Displays new elements in a list $(".lol").editable ("editinplace.php", { // all lol elements use edit in place event: "dblclick", style: 'inherit', tooltip: 'Double-Click to edit ...', indicator : "&lt;img src='images/loading.gif' /&gt; Submitting ...", // Does a neat little animation here with a 16x16 gif callback : function(value, settings) { // settings involing plugin parameters $('#data').html('Element Changed : '+value); //alert(settings.cssclass); } } ); $('#myList1').sortable({ // Renders items as "sortable" placeholder: 'help', // css class for the final position of the element if I wanted to re-add .help to the style page revert: true, // seems to work well axis: 'vertically', opacity: 0.4, update : function (sorted) { // Callback Function, modifies the list serial = $('#myList1').sortable('serialize'); // Time to serialize that mofo $.ajax({ url: "sort.php", type: "POST", data: serial, success: function(feedback) { $('#data').html(feedback); } }); } }); $('#myList1').sortable("refresh"); } } }); }
Well, who cares? Im sure you can find a workaround. The point is that Flash is the only solution for IE and older browsers not supporting multiple file upload. I hate flash but like things that work even more.
Awesome, only thing I noticed is on the main page there is a typo, "This plugin is open sourced under GNU GPL. If this license doesn't suit you contact andrew (at) valums.com for another options."
why is this in /r/javascript? while($row = mysql_fetch_array($result)) { $content .= ' &lt;div id="drag_' . $row{'itemid'} . '" class="fudge list_element"&gt; &lt;div id="' . $row{'itemid'} . '" class="lol'; if($row['rating'] == 10) $content .= ' fuckinggood'; $content .= '" style="display:inline;"&gt;'.$row{'content'}.' ' . $row{'rating'} . '&lt;/div&gt;&lt;/div&gt;'."\n"; }
This looks VERY promising, I look forward to implementing it in place of swfupload.
I have an event file (javascript) that deals with the content/div elements/sortables It's what I'm really dealing with here and where the suggestion was thrown towards (ie the suggestion given). I included my list iteration php code for reference (helps doesn't it? For those who were curious?) That's all.
well, you sure do have some nice piece of list iteration code here. maybe you should try and add some more lol elements to it.
Flash works fine with PHP sessions, just remember to add the session cookie to your outgoing request headers. 
First off, do not use a number for the start of ID name in your CSS file, it needs to be prefixed with an alpha char otherwise it is not valid (trust me I learnt this the hard way). Classes are fine, but not ID's.
The paragraph right under the License header.
FWIW, I think your examples are great – short, clear illustrations of the pattern reflecting problems that should be familiar to most readers. Except $.each(), of course ☺.
[plupload](http://www.plupload.com/) from Moxiecode is also a good solution.
Unless you're using HTML5. :) http://mathiasbynens.be/notes/html5-id-class
Of course, i think it's fair to say most have not made the jump yet though and my words were from a rather bitter experience heh.
i don't think you can mix the jquery inside the php, as you tried in one of your replies. the simplest thing for you to do would be to use an if statement to determine your class. while($row = mysql_fetch_array($result)) { $boldClass .= ''; if($rating &gt; 10){ $boldClass .= 'boldClass'; } $content .= ' &lt;div id="drag_' . $row{'itemid'} . '" class="fudge list_element"' $boldClass'&gt; &lt;div id="' . $row{'itemid'} . '" class="lol" style="display:inline;"&gt;'.$row{'content'}.' ' . $row{'rating'} . '&lt;/div&gt; &lt;/div&gt;'."\n"; } in the above code, ratings greater than 10 will have a class attribute which looks like class="fudge list_element boldClass" and rows with lower ratings will have a class="fudge list_element"
I wholeheartedly agree with this approach. I hate repeating patterns in code. The initial discomfort experienced by programmers who aren't familiar with your own particular style is only temporary. Once they 'get it' they will grow as programmers and gain the knowledge necessary to come up with their own productive idioms. You must make it as simple as possible but no simpler.
What version of Firefox are you using? Could you reproduce the behavior? I have tried a couple of times, but not been able to at all. See: http://jsfiddle.net/N4XSB/
reddit already has jquery loaded so if you're on reddit.com you should be able to run a one-liner: &gt;javascript:(function(){$('input[name=user]')[0].value='USER';$('input[name=passwd]')[0].value='PASSWORD'; $('button[type=submit]')[0].click();})(); But I bet it's a third-party cookie issue that's preventing your login from sticking ... so you might want to just play with cookie options instead of storing your password in cleartext in a bookmarklet.
This is why I advocate learning Common Javascript and the DOM before diving into jQuery. jQuery makes life real easy, but hides a lot of the ugly details and requires you to learn its syntax. It's probably a real easy fix to make your script work, but I don't know too much about the jQuery API, so I rewrote it in standard browser javascript, works on chome and FF for me (linux), but aside from IE&lt;7, it should work in any browser on any OS. I even added some comments to the code, so you can see what's going on (you might want to delete them and replace any spaces with %20, to make sure it works). // Start with an anon function, so when we're done, we haven't added to the global namespace javascript: (function(){ // Here, we create an XMLHttpRequest object, this is the main AJAX object var xmlhttp=new XMLHttpRequest(); // XMLHttpRequest objects come with a bunch of built-in methods. // open, opens the connection, we tell it we're using POST, give it the url and say true to make it an asynchronos request xmlhttp.open("POST","http://www.reddit.com/post/login/",true); // here, we set the request header, so reddit knows it's web form data xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded"); // This is the biggie right here, every request has a readyState, that tells us what state the request is in (open, sending, recieved, closed, etc) // readyState 4 means that the server's processed our request and sent us a response // an XMLHttpRequest object's onreadystatechange function is called every time the readystate changes. xmlhttp.onreadystatechange=function(){ // We check to see if readyState is 4 and if the server responded with a status of 200 (ok) // If so, you're logged in, so reload the page if(this.readyState==4&amp;&amp;this.status==200)location.reload(true); }; // Finally, we tell the request to fire off and give it our login credentials xmlhttp.send("user=REDDITUSERNAME&amp;passwd=REDDITPASSWORD"); })(); //This is where we call the whole anon function we just made. // If you define a function inside of parens, you can call it immediately. Hope this helps. **Without Comments** javascript: (function(){ var xmlhttp=new XMLHttpRequest(); xmlhttp.open("POST","http://www.reddit.com/post/login/",true); xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded"); xmlhttp.onreadystatechange=function(){ if(this.readyState==4&amp;&amp;this.status==200)location.reload(true); }; xmlhttp.send("user=REDDITUSERNAME&amp;passwd=REDDITPASSWORD"); })(); **Onelined and space replaced, use this one ** javascript:(function(){var%20xmlhttp=new XMLHttpRequest();xmlhttp.open("POST","http://www.reddit.com/post/login/",true);xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");xmlhttp.onreadystatechange=function(){if(this.readyState==4&amp;&amp;this.status==200)location.reload(true);};xmlhttp.send("user=REDDITUSERNAME&amp;passwd=REDDITPASSWORD");})();
Yeah, if you're going to do it with javascript, this is the way to go. Just fill out then submit the form. You don't need to worry about reinventing the submit with an XHR then refreshing the page.
Why would you diss on jQuery when you clearly state that you "don't know too much about the jQuery API". That whole wall of AJAX from scratch that you wrote is 1 call in jQuery: $.post(...). Learn to love simplicity.
I'm not dissing jQuery or any other framework or library. I haven't used it much (and not in a while), but I'll totally agree that it has the cleanest, simplest syntax out of all the DOM libraries (hell, I even ran into Resig a few weeks ago and commended him on his work, true story). What I was getting at is that common browser js is like a ford focus and jQuery is like a sportscar. Obviously, the sports car is going to go a lot faster in most circumstances, but which one do you use to teach a 16 year old kid how to drive? All I'm saying, is that if you learn the DOM, you'll be a lot better at jQuery as well.
While i see your point, I would argue against spending time learning DOM. jQuery really eliminates the need to do any sort of Vanilla DOM manipulation and prevents you from making cross browser mistakes. For example, your code above does not work in IE 6 because XMLHttpRequest is undefined. I would say a better route for a novice to take is understanding all of the Javascript types to a "T" and understand objects, scoping, and closures. These core JS coding principals are far more useful than learning the intricacies of the DOM that jQuery already gracefully handles.
I totally agree that the fundamentals of common js: types, scoping, closures, prototyping and floating point oddities are far more important to becoming a good js programmer. However, I'd say learning the basics of the DOM is not a waste of time. For example, writing an AJAX request from scratch is a great thing to do, **once**. That way, you not only learn how they actually work but also why you don't want to write them from scratch all the time. You and I both know the script I wrote won't work in IE6 (or 5.5) because it doesn't try to make a new ActiveXObject("Microsoft.XMLHTTP") if XLMHttpRequest is undefined, but I bet neither of us learned that from jQuery. This is not to say that everybody should learn every in and out of the DOM in every browser, far from it. Once you grasp how ajax works, you'll want to use something as simple as $.post(). I'm a bit of a masochists in the sense that I try and learn every in and out of the DOM in every browser, so that I can write cross-browser libraries. But then again, I also refuse to drive automatic transmissions, so call me old fashioned.
You are a different breed than me, and I am not saying that in a bad tone. You just prefer to take apart an engine just to know what your driving. I on the other hand leave my trust in the hands of people like Resig and rely on jQuery for all my needs. It could bite me in the ass one day, but I just don't have the energy to keep up with the millions of DOM nuances out there.
Thanks. The way I see it, anyone can see my browser's saved passwords anyway.
Aww, thank you. I'm definitely a tinkerer at heart, but I completely understand where you're coming from. I love my OS and rely on it every day with blind faith, but I can't even begin to comprehend how much work the Linux and GNU devs have put into it to making it function. I guess it's really the level of depth that you need for the task at hand that matters most. I'll work on my own car, but I'm not forging the replacement parts. And I got nothing agaist taking it to the shop if I'm too lazy, or the work's too hard.
Hahaha. :)
I don't think you put html in the createElement method, just the tag name. Even if it does, you didn't put the closing bracket on the div start tag. It's better and easier to access the properties (attributes) directly. function addOptions(){ var lslength = localStorage.length; for (var i=0; i&lt;=lslength-1; i++){ name = localStorage.key(i); var idDiv = document.createElement("div"); idDiv.id = "script"+i; document.getElementById('scripts').appendChild(idDiv); var h2 = '&lt;div&gt;&lt;label for="editbutton"&gt;&lt;h2&gt;' + name + '&lt;/h2&gt;&lt;/label&gt;\n'; var editbutton = '&lt;button id="editButton" onclick="location.href=\'edit.html?' +i+ '\'"&gt;Edit&lt;/button&gt;\n'; var deletebutton = '&lt;button id="editButton" onclick="lsRemove(' +i+ ')"&gt;Delete&lt;/button&gt;\n'; var html = h2+editbutton+deletebutton; document.getElementById('script'+i).innerHTML = html; } } 
JavaScript Date manipulation is a bit finicky. You want something like: (Present time) - (Start of Today) which you can use to return the number of milliseconds into the day you are. You can then just (ms / 1000 / 3) (i.e. the number of 20 seconds intervals that have elapsed since the start of the day [local time]). So your code would look like this: `var present = new Date();` `var startOfToday = new Date(present.getFullYear(), present.getMonth(), present.getDate(), 0, 0, 0, 0);` `var diff = present.getTime() - startOfToday.getTime();` `var numPeopleDead = Math.floor(diff / 1000 / 20);` numPeopleDead should now give you the number of people who have died during the present (local time) calendar day. Edit: There are more concise ways to write this, but I thought it would be less confusing this way. I'll let someone else explain how to use setInterval to update the number every 20 seconds.
Ah. I see that. That definitely seems much easier, thanks. Just as I suspected, though, it still doesn't work. It didn't work before I added that section, either. It just stopped working and I'm not sure why. 
On another note, all popups seem to be broken. Confirm and alert don't popup...
Change: &lt;script src="rlScript.js" /&gt; To: &lt;script src="rlScript.js" type="text/javascript"&gt;&lt;/script&gt; Also: for (var i=0; i&lt;=lslength-1; i++){ to for (var i=0; i&lt;lslength; i++){ That's just easier to read. Also change `name = localStorage.key(i);` to `var name = localStorage.key(i);` since you didn't define it yet. I don't think it causes any errors, but its a matter of best practices. 
Yeah, it didn't change anything. Thanks for the pointers, though! I'm still starting out in JS but I'm getting there.
The server's response headers dictate the mime type. The type attribute has always been completely pointless. With html5 the type attribute isn't required anymore. However, that other point is right. `script` isn't (or well, can't be) a short tag. So, a separate closing tag is required.
"Can't be"? It works for me... I changed it though. 
The validator says: Self-closing syntax (/&gt;) used on a non-void HTML element. Ignoring the slash and treating as a start tag. And Firefox doesn't run it anymore.
I guess it's because I'm using Chrome? Changing it didn't do anything, but I'll definitely keep that in mind for future use. Thanks, I never knew you couldn't do that.
Is `localStorage` an array? Or it an object, and you just happened to use integers for the keys? From reading some of the examples out there for local storage it seems like the latter. Are you sure you're storing them under the correct keys (which should be integers since you're using a `for` loop)?
I just tested using "localStorage.setItem('testName','testVal');" on a page, and it works. When I use "localStorage.key(0);" it returns "'testName'," so I'm not really sure what's wrong. From what I understand, the localStorage is saved as (name,value) pairs under an array of keys.
What languages do you know? Maybe we can start from there?
I think your html variable is missing a closing div tag.
You're right. It didn't fix my problem, though =(
You'll laugh at me... I have used QBasic, Visual Basic, Html, CSS, and very minor Java Script (image maps, hiding revealing div tags, jquery tools), Action Script, and Expressions, which is a code based on C (I believed) that is used in After Effects for manipulating images.
So what would the actual html code look like that shows the number? Then I would just use setInterval some how so it runs through this code every 20 seconds?
Something like this: &lt;head&gt; &lt;!-- other stuff here --&gt; &lt;script type="text/javascript"&gt; var setDeaths = function() { var present = new Date(); var startOfToday = new Date(present.getFullYear(), present.getMonth(), present.getDate(), 0, 0, 0, 0); var diff = present.getTime() - startOfToday.getTime(); var numPeopleDead = Math.floor(diff / 1000 / 20); // Put the number into the 'deathCount' element document.getElementById("deathCount").innerHTML = numPeopleDead; } window.onload = function() { // Call it immediately setDeaths(); // Then every 20 seconds (N.B. you can assign setInterval a variable name, so you can // cancel it later if need be). setInterval(setDeaths, 20000); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- other stuff here --&gt; &lt;span id="deathCount"&gt;&lt;/span&gt; &lt;!-- etc --&gt; &lt;/body&gt; Edit: again, perhaps not the best way to solve the problem, but it should get the job done (if you need to run other JS functions onload, either put them into the window.onload block as well, or change to attachEvent methods). Edit: Also, if you'd like me to explain anything in more detail, just ask.
You're the best! I have been able to work my way through Java Script before because I get how it works logically. I just don't know the syntax well enough to tackle a problem from scratch. Thanks for your help!
Here's a slightly different way of running the same basic thing, using a recursive setTimeout function instead of setInterval and DOM manipulation instead of innerHTML. It's a little longer and definitely not perfect, but I figure the more examples you have to look at, the better you'll grasp the language (You can throw this code anywhere in the body of your html, as long as the script tag comes after the div (or span) you're using to hold the text. &lt;div id="casualties"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; var t; // Calculate total deaths function, you've seen this already var getTotalDead = function() { var present = new Date(); var startOfToday = new Date(present.getFullYear(), present.getMonth(), present.getDate(), 0, 0, 0, 0); var diff = present.getTime() - startOfToday.getTime(); return Math.floor(diff / 1000 / 20); }; // Update function var killPerson = function() { // Grab the element that we're updating var element = document.getElementById('casualties'); // Remove any children from element (the old text) while (element.childNodes.length&gt;0) element.removeChild(element.childNodes[0]); // Make new text var text = document.createTextNode('Today '+numPeopleDead+' people have been killed, by the end of the day 5000 will be'); // Attach new text to the element element.appendChild(text); // Add one to the death tally for the next update numPeopleDead++; // Call this function again in 20 seconds t = setTimeout( killPerson, 20000 ); }; // Initialize number of people dead and update screen var numPeopleDead = getTotalDead(); killPerson(); &lt;/script&gt; And a little synopsis on setInterval, setTimeout and calling functions vs pointing to them: There are two basic methods of dealing with timed changes in js, setTimeout and setInterval. setTimeout is used to do something after a certain amount of time, whereas setInterval is used to do something repeatedly at a certain interval of time. In theory, this would mean you should use setInterval. I'm gonna go against the grain and use setTimeout instead, as setInterval doesn't always behave properly in older browsers (though this is rare) or when running large functions with it. So, let's assume you already have the var numPeopleDead from jamesinc's post and dive right in. setTimeout (and setInterval) take two arguments: the code to run and the amount of time to wait before running it. The timeout or interval needs to be assigned to something so that we have a way of controlling it. For example: var t = setTimeout( killPerson, 20000 ); will call the function named killPerson after 20000 miliseconds (20 seconds). notice that we didn't write killPerson**()**, this would have called the function immediately. It would be like saying "In 20 seconds call the result of this function," instead of "in 20 seconds call this function". (We are giving the interval a pointer to the function it should run, not running the function).
Eeek! You're defining global vars in your function. While not a huge issue in this case, I still would have pointed it out in your explanation, as learning variable scope is super important when you're starting out with js. **Edit** you fixed it, sweet.
Phhhh... you've got a decent background. You'll pick up on Javascript in no time. It's a very deep pool though. You can use it to do basic programming tasks on the client very easily, but there is meat on the bones of that language, and going spelunking every once in a while will make you a much better developer all around.
What global variables? Unless you're commenting on the fact that I haven't wrapped everything in an anonymous self-executing method? Edit: I presume that's what you're talking about, and you're right. I will add a reply to hillbillymadness and explain it more. Edit 2: I just saw it. Not using var to declare variables inside the function. I suppose that this is a possible global variable, if a global var of the same name was defined elsewhere.
 var interval = 20; // from your example var deathsPerDay = Math.floor(60*60*24 / interval); function updateText() { var d = new Date(); var hours = d.getHours(); var minutes = d.getMinutes(); var seconds = d.getSeconds(); var numKilled = (hours*60*60 + minutes*60 + seconds) / interval; var text = "Today " + Math.floor(numKilled) + " people have been killed. By the end of the day " + deathsPerDay; alert(text); } updateText(); setInterval(updateText, interval * 1000);
I made an update; basically I removed the variable declarations, which is fine in this example, but if you for some reason defined a global variable "present" or "diff", these variables in the setDeaths function would overwrite them.
That won't work once you get to a new day ;) Another variant: &lt;div id="casualties"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; // Calculate total deaths function, you've seen this already function getTotalDead () { var now = new Date, secondsPassed = now.getSeconds() + now.getMinutes() * 60 + now.getHours() * 3600 return Math.floor(secondsPassed / 20) } // Anonymous function used as a closure updateDeathcount = (function () { // Grab the element that we're updating var message = document.getElementById('casualties'), deathCount = document.createTextNode( getTotalDead() ) // Insert the message message.appendChild(document.createTextNode('Today ')) message.appendChild(deathCount) message.appendChild(document.createTextNode(' people have been killed, by the end of the day 5000 will be')) // The actual updateDeathcount function return function () { deathCount.nodeValue = getTotalDead() } })() // Update death count every 20 seconds setInterval(updateDeathcount, 20000) &lt;/script&gt; [MDC has an article on closures](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Working_with_Closures).
Other people have answered your question but a quick point. The only relation Javascript (it is always one word) has to Java is their names share the same first 4 letters. They are 2 completely different languages and you might get some confusing search results if you're googling for Java when you mean Javascript.
Wow guys.. should of made this person work for it at least a little. You just wrote the code for him and he probably will win some award (If he works in the gov anyway)....
if you don't use var when declaring a variable inside of a function then it's created as a global var.
Slick approach, more along the lines of what I'd write in production. I just didn't wanna bust out closures on someone who's just starting out.
Thanks for pointing that out, I totally forgot to myself
Yea, but we gave him (i assume) 3 different way of doing it, each with their own pitfalls. Hopefully, he'll grok each one and become a better programmer for it. Though if it is a government job, then at least I'm glad we sped up the development time. Reddit: making the government both more and less efficient since 2005.
This article is translated. Original address is [here](http://lifesinger.org/blog/2010/07/what-really-it-is-not-what-it-is/)
Well, I wouldn't say that I KNOW any of those that well. Just enough to get through my day when necessary. Also, google and I are best friends.
Haha, I wish I had a government job. Nope, I run my own company and I appreciate everyones help keeping my on schedule so I can pay my bills!
Frequent usage of google is one of the best ways to learn js (an easy name for javascript, so it's not confused with java), or any language really. A word of caution though, if you find a js tutorial or example and it looks like it was written pre-2006 or so, be very cautious. Js and the people working with it have matured considerably in recent years. For example, if you see an array being created with something like "var a=new Array();" you're looking at ancient history, back when we couldn't do "var a=[];". Js back in the Netscape vs IE days **sucked** and it's only gotten the respect it deserves since AJAX became popular.
Thanks for the tip! I'll look out for that one Quick question for you: Are there any design tools to help with developing js? I have looked but nothing has really jumped out at me as being better than getting in the thick of it and changing the code.
If you're talking about editors, then you probably want something better than say, notepad. If you're on windows get [http://notepad-plus-plus.org/](notepad++) or something like that. Text wrangler for the mac works well too (or if you're hardcore get vim. These all have nice tools like syntax highlighting and find and replace. If you're talking about debugging tools, get Firebug for firefox, it's utterly amazing. If you're talking about libraries that make coding easier, jQuery is probably the best (easiest to use, nice syntax). But I really really really believe that you should get the basics of regular browser js down first. Otherwise you're just adding another level of abstraction to the problem. Hope that helps
Have you tried debugging using Chrome's built in developer tools? That at least could give you an idea on where it's failing. If not, I would definitely try that. 
Seems cool enough, but I'm pretty okay with the js object / class model as is. Then again, I'm not a ruby programmer.
if you missed the 24 window, check baconbits
Can anyone explain how he did the bit shifting operator thing or how it works?
the JavaScript valueOf function can be added to an object and is called by the JavaScript engine whenever it needs to convert the object to a primitive value (a string, number, boolean, etc). This code implements this method and overloads that operator in order to do the class extension. It isn't specific to that operator though. You could use the === operator or !== if you wanted: it would work just the same. No bit shifting actually occurs. The operator is nothing but syntax sugar.
*WARNING*: Not for the faint of heart. It's pretty god damn horrific. Have a look at the [source](http://github.com/tobeytailor/def.js/blob/master/def.js) and two things should stand out: valueOf and that weird deferred thing. valueOf, as its appearance suggests, is a Javascript magic method. I suck at knowing where a good JS reference is, but basically it's used to coerce objects to primitive types when that is needed – for example, when they're used on one side of an operator like &lt;&lt;. All good but it doesn't seem to be doing anything resembling consuming the other side of the operator … well, that's because it can't. What JS will do when it sees: x &lt;&lt; y; and x any y are objects, is: x.valueOf() &lt;&lt; y.valueOf(); … which is less than helpful, because &lt;&lt; is a primitive and only takes integers. This is where Schneider's hack gets really clever and ugly. What he's doing is relying on order of operations. Javascript statements in order, and expressions left-to-right, so in the syntax he wanted for inheritance: def("BrainMelt") &lt;&lt; KillItWithFire({ ... }); what happens in order is equivalent to the function: function pseudo_decompiled_porridge() { var _a = def("BrainMelt"); var _b = KillItWithFire({ ... }); var _c = _a &lt;&lt; _b; return _c; } So, def() sets up a deferred, KillItWithFire sees that one exists and tells the deferred to inherit from itself, both return meaningless values and the result of the operation is undefined. 
@JDD: All you ninjas have undefined names. Wow!
Btw. mr. window seams to change his name as soon as a new Ninja is born. The ninja of all ninjas! 
The whole thing has dangerous levels of "code cuteness" in it. Beside the "operator overloading, kinda" trick, the following chunks in [his source](http://github.com/tobeytailor/def.js/blob/master/def.js) are also interesting: `klassName || (klassName = context, context = global);` `typeof sup + typeof sub == "functionfunction"` Overall, it's all very neat, and I'll beat anybody that uses that coding style anywhere near my projects with a big stick. 
Good to know. I rarely rely on event bubbling (other than live events I guess) anyway, but still good to know in case it ever comes up.
Could you explain this piece of code?: (klassName = context, context = global) I've never seen that syntax used before in javascript. Just from messing around with it in the console/interpreter it seems to execute all of the expressions in the parens, returning the last. Is that all it does or is there an actual intended use for it?
Here's the same code, translated into ordinary javascript: if (klassName === undefined) { klassName = context; context = global; } The likely intent of the other syntax is that it's shorter and cuter. 
&gt; and I'll beat anybody that uses that coding style anywhere near my projects with a big stick. 100% agreed. The word "intuitive" in the writeup feels like it belongs in &lt;blink&gt; and &lt;marquee&gt; tags.
I can see why a total newb would get confused. It does look like it's own language sometimes, especially depending on how people format their code. $("#cat") .css("color", "red") .addAfter(".dog") .highlight();
Not a scope issue. This is a confusing thing about how arrays are implemented. An array's contents are _not_ the array's properties. But the syntax sometimes acts like they are. arr["foo"] = bar; Will not properly append onto an array's contents. It adds a property to the array object. arr.push(bar); Will properly add a new content to an array.
ah, right. associative arrays are actually just objects. thanks a lot.
While OP is correct, the question *moneygame* is really asking is: "can I chain $("element#id").function() -style code outside of the $(document).ready() wrapper?" Basically, a valid question, but asked in a way which shows the asker's confusion. Not really something to laugh at them for though...
or make arr an object and use for (key in arr) {} to access it, if you want an associative array
The 'alert' method will not display the contents of an Array or Object. Try the following code in IE 8+, FF 3.5+, Opera 10.5+, Chrome and Safari var props = {}; cur.find("dd:first&gt;ul&gt;li").each(function() { var currElem = $(this), propName = currElem.find("input:eq(0)").val(), propVal = currElem.find("input:eq(1)").val(); props[propName] = propVal; }); alert(JSON.stringify(props)); if you want to see the contents in any of the browsers not listed above, then you've to iterate over each item in the array/object and append the key, value to a string so that the alert method can display it. the following alternate code should work on all browsers var props = {}; cur.find("dd:first&gt;ul&gt;li").each(function() { var currElem = $(this), propName = currElem.find("input:eq(0)").val(), propVal = currElem.find("input:eq(1)").val(); props[propName] = propVal; }); var result = [], key; for (key in props) { if (props.hasOwnProperty(key)) { //for ignoring the inherited properties result.push(key + ' : ' + props[key]); } } alert(result.join('\n'));
Do you realize your propName and propVal are globals? And how disgusting that is?
Of course, the problem with translating native to HTML5 is that you can't do anything natively that HTML5 can't support, and vice versa. I don't see the point of this article. It just seems to be product spam.
i realize that's disgusting, i did't realize they were globals. how do i define them in the context of the function? `this.` would define them on the `li` element, no? that seems even weirder than globals.
Can't really figure out what you're trying to do here but maybe do some clever naming of your element IDs and extract whatever info you need from them in the PHP script? eg &lt;div id="box1_child_2_something"&gt; etc.
var propName &amp; var propVal, that way they're created locally for each member of the array. **ALWAYS** use var to define a variable unless you have a damn good reason not to, it's three letters people, use them!!! Or you could just oneline the function: props[$(this).find("input:eq(0)").val()] = $(this).find("input:eq(1)").val(); Also, you probably want to be using an object not an array, if you're storing key-value pairs. Right now you're using the array as an object (unless propName, is 0,1,2,3...)
always declare variables with var. var propName = $(this).find("input:eq(0)").val(); ...
I'm a little confused about how these multiple sortable lists relate... perhaps it would be better to ask the question: "How do I accomplish X end result?" Like guitarromantic, I'm having trouble figuring out what you're trying to accomplish.
&gt; i did't realize they were globals. how do i define them in the context of the function? this. `var` (or if you're writing a Firefox extension, you can use `let` which is even better). `var` is used to declare a variable in the current scope (either the current function, or the global scope), it's a noop if the variable already exists (though IDEs and Firefox's strict mode + warning are going to flag it as it's generally a mistake). FWIW, you should always use `var` to declare new variables, even at the toplevel (globals). Firefox's strict mode (and warnings display) and good enough IDEs are made very unhappy by lack of `var`. &gt; this. would define them on the li element, no? that seems even weirder than globals. Yep, it's not good either.
Why don't you send the list id in the data? serial = { id: 'myList1', list: $('#myList1').sortable('serialize') }
Is there some kind of reddiquette about posting questions here? I've seen nearly every question downvoted below 0.
Holy cow that looks interesting. I think this is what I was looking for.
Beats me, to each his own but if I was as good with this as I am with photoshop etc I'd field these types of questions daily to improve. Most would be simple to me but the odd time you meet someone or learn something new. My two cents.
"How do I go from maintaining what order they are in per box to what box is each list supposed to Order inside of?" So right now box1: stuff,more stuff box2: even more stuff,puppies if I move puppies ahead of 'even more stuff' it saves the order. But if I move puppies to box1 between 'stuff' and 'more stuff' it looks great on the page but won't save that puppies is now in 'myList2' not 'myList1' In the DB there is a 'boxid' column so each element like 'puppies' has a value of what box it should be in. As the page is working right now for testing purposes I had to set the boxid's manually in the DB because those aren't saving.
Most of the articles in /r/javascript are about advanced js programming. Questions in generall are fine I guess, if they should show a complex problem in an interesting context. OP's question, as other questions recently posted here, seems to be on a very basic level. Also, the OP fails to state his problems in a way that anyone in here can understand, does not explain why he needs his data in this special kind of way and has mysql injection vulnerabilities in his php code. This is why he is being downvoted, I guess.
&gt; Most of the articles in /r/javascript are about advanced js programming. Advanced? Really? I see quite a few articles from this sub on my main page all the time and I personally wouldn't consider much of what I saw advanced. Although it is just my opinion, a biased one I'm sure. &gt; Questions in generall are fine I guess, if they should show a complex problem in an interesting context. I posted a question here not too long ago about EtherPad's code base.. It's a fairly complex project and I would imagine others would find it interesting being the basis of a new kind of collaborative web app. It got shot down pretty quickly, although it may have just been my presentation of the question. But I won't know because no one said as much. &gt; the OP fails to state his problems in a way that anyone in here can understand, does not explain why he needs his data in this special kind of way and has mysql injection vulnerabilities in his php code All of this I can understand, although saying it explicitly would be _way more polite_ than anonymous downvoting. &gt; OP's question, as other questions recently posted here, seems to be on a very basic level. This, however, I can't agree with. If novice questions are not welcome somewhere, that should be posted somewhere on the sidebar. The only way for the community to grow is to be more welcome to newcomers.
It depends on what you are trying to do. I don't think delete does whatever you are trying. From [MDC](https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator) *The delete operator deletes a property of an object, or an element at a specified index in an array.* If this is a property or element I think you would need to "delete parent.PropertyName" (where PropertyName is the name of "this" in that object) or "delete parent[index]" (where index is the index of this in the array that contains it). It will only be removed from the single object or array and any other references will still be valid.
Is it a global variable? Then I think delete[window.variable_name] would work. . .
a collection of great articles, videos, slides and tutorials on getting started with jQuery
Well, you can definetely destroy an object with delete, I tried it: function test(){ this.bla='blabla'; } a=new test(); delete(a); This does delete a totally, when you try to call a, it returns undefined. But it doesn't work inside the object, like that: function test(){ this.selfDestruct=function(){ delete(this); } } I used the [Javascript shell](http://www.squarefree.com/shell/) to test these.
Yeah, I can destroy the object like that, but I want to destroy the object from the inside, without knowing the name of the "instance" of the object... Something like that: function myObject(){ this.myMethod=function(){ //the item should delete itself here } }
You cannot delete it as long as others hold references to it, and as soon as that's not the case anymore it'll be garbage collected. Could we have more informations? Because what you're asking for makes few if any sense. edit: let's make this clear: the javascript `delete` has *no relation whatsoever with C++'s*. What `delete ${name}` does in Javascript is 1. unbind the name from the object, which you can do with `${name} = null` and 2. destroy the slot/name itself, which is about equivalent to `${name} = undefined` for properties and variables (but not for arrays)
&gt; Advanced? Really? I see quite a few articles from this sub on my main page all the time and I personally wouldn't consider much of what I saw advanced. Although it is just my opinion, a biased one I'm sure. Well, at least it's not all "Look at this jQuery plugin it opens windows!" and "how to embed the facebook with Javascript". This post has +2/-3. Seems like most people did not bother to give a shit. I don't think there's a javascript q&amp;a subreddit yet.
This is more than a little ghetto: x = { log: function() {console.log(this);}, del: function() { for (var thing in window) { if (window[thing] === this) delete window[thing]; } } } x.log(); // Logs the object x.del(); // Deletes itself x.log(); // Undefined!
Hm, I guess my poor english skills and my lack of solid knowledge in programming don't make me be clear... Let's put it that way, I have a "animal" object: function animal(){ this.eat=function(){...} this.die=function(){ //object should be destroyed here } } Then I have other objects that inherit animal: function dog(type){ this.type=type; } function cat(food){ this.likes=food; } Now I have instances of dog and cat: abby=new cat('cookies'); bro=new dog('terrier'); Now I want to delete one of those using the animal.die() method: bro.die(); Hope this shows what I want to do? 
 function myObject(v){ this.varname = v; this.myMethod=function(){ delete(window[this.varname]); } } x = myObject('x'); 
&gt; This does delete a totally No it doesn't. js&gt; function A(prop) { this.prop = prop; } js&gt; a = new A('a'); [object Object] js&gt; b = a; [object Object] js&gt; a.prop a js&gt; delete a true js&gt; b.prop a it deletes the *name* `a` (or, really, the property `a` of the global object), it doesn't delete the object itself. &gt; But it doesn't work inside the object because it makes no sense, an object doesn't really hold a reference to itself, so you don't have anything to delete. That's as sensible as writing `this = null;`
Thanks, that does what I was looking for! Declaring the objects with a reference to it's own name is kind of weird to me, but it's definetely a working solution.
especially since you could have skipped all of that and just written `x = undefined` for pretty much the same result.
Right, this for loop does what I was looking for! Thanks.
It is kinda silly, and it may not be the best solution, but it's all I could come up with off the top of my head :)
Pretty much. But in my example, ('x' in window) === false, and in your's it's still true. When you're using the delete keyword, that's often what's important.
&gt; Hope this shows what I want to do? Still unclear. What would happen if, before `bro.die()` you have written `brah = bro`? `brah` and `bro` are now *pointing to* the exact same object, does deleting `bro` also delete `brah`?
I can't figure out a case where I would give a fig about such a thing unless I'm using an object as a hashmap. In which case the hashmap's values certainly aren't going to delete themselves. As far as I'm concerned, this sounds furiously like a very bad, half-baked idea, akin to PHP's "dynamic variables"
Er... no idea, I didn't inted to do that...
Thanks for your explanation! I actually thought, "this" is a reference to the object itself, and it therefore could manipualte itself...
Even if it was, deleting it wouldn't have any effect as it would be a circular reference, and therefore not count towards object retainership.
Then what did you intend? What is, at its core, your use case for such a behavior?
You really need a manager class to handle this. Something that maintains a list of living things and adds/removed from that list as necessary. To follow your animal example on this page, you need a zoo: function Zoo() { this.animals = []; this.add = function(animal) { /* add animal to this.animals */ }; this.remove = function(animal) { /* pull animal from this.animals */ }; }; Then you add the animals to the zoo in the init/create for the animal and add a line in `animal.die()` that calls `zoo.remove(this)`. Or something along those lines. I'm not sure what exactly it is you're trying to do, but straight-up object deletion without a manager class is dangerous and -- in more situations -- wrong. If you can provide a more concrete explanation of what and why you need a delete I can help further. From everything I've seen in your post and on this page, you really need a manager class to handle things.
Actually I juste experienced a bit, I'm totally new at inheritance and such things, and wanted some objects to inherit from an object and use it's methods - one of whom I wanted to delete the object. It was just some testing, without further goals... I just noticed that I didn't manage to make an object delete itself...
Unfortunately I can't provide a more concrete explanation, I was just testing inheritance and noticed that I didn't manage to make an object delete itself...
&gt; I just noticed that I didn't manage to make an object delete itself... again, javascript is not C++, it does *not* allow you to delete an object.
Ok... Sorry if I struggle to get it, but I don't have any further knowledge then my poor javascript experiences, I don't know C++ nor any other programming language.
&gt; You cannot delete it as long as others hold references to it, and *as soon as that's not the case anymore it'll be garbage collected*. (Emphasis mine.) That depends on the implementation of the garbage collector.
Well in any case, `delete a` just deletes the name a, it doesn't delete the object behind it (though the deletion of the name ultimately may lead to the collection of the object if it's the last reference). I suggest you read [this](http://effbot.org/zone/python-objects.htm). Not everything applies, but the object/name and assignment are about the same between Javascript and Python. It might clear a few misconceptions.
True, the *as soon as* should be replaced with "after"
I'd go so far as to replace it with "at some unspecified point after." The distinction is important when you're holding on to limited resources outside of memory, e.g. file handles, database connections, and web sockets. C# uses IDispose.Dispose for this, but I don't know about other languages.
You can't really hold onto that kind of resources from a script running in a webpage, and web-side javascript is very much single-threaded. Which is why it doesn't have that kind of facilities (if it had, it'd probably use something sane, like an anonymous function) Python uses [contextmanagers](http://docs.python.org/library/stdtypes.html#typecontextmanager) (and a statement called `with`, similar to C#'s `using`), Ruby and Smalltalk use blocks provided to the resource manager, Common Lisp generally use macros building on [UNWIND-PROTECT](http://psg.com/~dlamkins/sl/chapter09.html) when not using it directly, schemers probably uses either lambdas or continuations to handle that kind of jobs, haskell has [bracket](http://haskell.org/ghc/docs/6.12.1/html/libraries/base-4.2.0.0/Control-Exception.html#v%3Abracket) but I'm sure there are guys out there encoding that stuff as one more monadic type.
&gt;The 'alert' method will not display the contents of an Array or Object not true. alert displays the contents of an array, but not an object. which is where my problem came from, i was assigning properties to an Array object but the array remained empty. thanks for stringify though.
SelfObject.destroy = function(){ window.setTimeout(function(){ delete window.SelfObject; }, 100); }; and How..?
And hopefully you all acquired the free PDF of 'jQuery - Novice To Ninja'
2 things: I think it'd be nice to teach this horse to drink 1). Firebug. if a variable doesn't have what it should have, put a debugger; statement righte before it, reload the page and inspect the variable. This simple tip has taught me so much, you can see how arrays are actually constructed, how objects look, how 3rd party objects work.. etc. 2) Not to be the RTFM guy, but javascript is a VERY popular language, google 'javascript array' would have done well here if the first one didnt work (which it would have) have fun man,
yes. thanks to reddit, i got mine within the 12 hours
Never even thought of that. This is the first extension I'm making. Thanks!
Found the problem! It was a bit of test code I forgot that I left in there. Thanks!
The problem isn't that you can't subclass an array. The problem is that JavaScript still has an impure type system and its class model is still a bit wonky. __tl;dr__ JavaScript is not Python.
I actually am really liking the IE9 team and how open they're being. They hate IE6 as much as the rest of us.
This is excellent dinner conversation, so much better than the hitching about iPhone 4 bugs
Where can I get the HTML version?
You can construct one yourself fairly easily. Open the page with Chrome. Hit Ctrl+Shift+J, go to the elements tab, right click the `html` node, select "Copy as HTML", paste, and save (it's utf-8, mind you). What's missing now is the CSS file. It's over at: http://google-styleguide.googlecode.com/svn/trunk/styleguide.css Save that where the html file is and you're done.
I wonder what using an IDE that enforces all of these guidelines would be like?
Does closure compiler enforce these guidelines? Or do they have their own lint?
Another popular javascript style is "whatever makes [jslint](http://www.jslint.com/) stop yelling at me." Unsurprisingly, both styles have a a lot of overlap. 
Thank you.
It doesn't enforce them, I've run some shit js through it just to see what happens, sometimes it works, sometimes it throws a shit fit (This is with advanced compilation mind you, basic compilation just renames local vars and removes comments and whitespace). But following the guidelines will definitely make your code more likely to compile correctly. [This](http://code.google.com/closure/compiler/docs/api-tutorial3.html) is where you'll find closure compiler specific guidelines for writing code that advanced compilation will work with.
Basic compilation is almost the same as advanced in terms of code output. Advanced does deeper minification, and does more stringent checks on your code, where basic doesn't. Also basic does these: Some if else statements become ternary operators, and it does combine expressions where it can. However, it currently doesn't detect an implied else, so it's not perfect. Advanced mode is unstable, I wouldn't use it outside of using its stringent checks/warnings to find bugs.
I'm pretty sure the entire MSIE team hates their legacy code. It seems like MS policies have changed to allow for more self-criticism, though. ... which is interesting in times when Apple's iPad tells users "this file is not optimized for the iPad and display incorrectly" (to paraphrase) when they open a file in Safari the iPad doesn't know how to handle.
Depends. What do you mean by "work with"? Is the JS intended for the browser? If so then Firebug would at least be helpful for finding the hooks and starting points. It sounds like you'll just have to do an old fashioned code trace. Whee! Find a starting point, read the code and make a human readable translation for each logical block. A wiki is handy for this since you can easily link between pages.
I can sympathise. I dealt with a similar codebase where the fucktard authors had reams of js files and no concept of 'var'. Fucktards. Misc advice: * try to get some else to do it. No one gets plaudits for this kind of work and you risk irreparably damaging your soul. * don't trust it. If it is old it will probably be shitty. e.g. IE only or not taking into account modern browser peculiarities or nuking '$' just because it can. * search the code base to see what is actually used. After a few years of maint. code can become vestigial or useless. You can trim out that which doesn't appear in your code. If it is simple and/or used in one or two places, refactor. I've seen ridiculous and buggy custom versions of trim() and is_even(), for example. Remap to your library or native js methods. * if you read code and it is not documented, then document. Those little memory cues really help the next time round. * if the code is relevant only to a particular page or context, then load it only when that page or context loads. This helps when maintaining it because you sift through less crap and stops name collisions and nasty coincidences. Separate app specific and general code. * search for it on the web. I've done this a few times and found useful documentation for plagarised snippets. 
I'll go for "define analyze" (instead of "define work with", like one of the other comments ;P).
Seconded. Also: * use "jslint" or another tool to highlight bogons * watch/read Crockford's "Javascript: The Good Parts" * examine Google's Javascript Style Guide for help http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
http://www.jslint.com/lint.html
This is CSS...why are using user.js? Wouldn't it make more sense to have it as a user.css? If so, info is here http://www.opera.com/docs/usercss/ for user CSS in Opera...
Thanks for the info. I saved this Firefox Stylish script as user.js in Opera because it worked for the other Greasemonkey scripts I lifted from Firefox with no other modifications. I admit I do not know the difference between .css and .js. I am looking at Opera's Style/user mode now.
"Warning: JSLint will hurt your feelings." :)
Woah. .js files are traditionally JavaScript files, a browser scripting language and .css files are traditionally Cascading style sheets, a presentation language usually used to style HTML. 
Try [jsctags](http://pcwalton.blogspot.com/2010/05/introducing-jsctags.html) to index the code and provide cross-reference and completion. Google's [Closure Compiler](http://code.google.com/closure/compiler/) has many useful lint-like checks. Mozilla's [JSHydra](https://developer.mozilla.org/en/JSHydra) is a programmable static analysis tool, but I think it may still be a work in progress.
But remember, JSLint cannot legally be used [for evil](http://news.ycombinator.com/item?id=764024).
Download this: http://userstyles.org/styles/js/13279/MidnightZap.js Put it in a new folder somewhere (like My Documents). Go to zap2it's listings page. Right click the page, "Edit Site Preferences". "Scripting" tab. At the bottom point it to the folder you made with your MidnightZap.js file in it. Click OK and refresh.
Yeah, Douglas Crockford is such a troll. He'll give the okay for IBM to change the license but refuses to let open source projects do so.
NIce! I just dropped that .js file you recommended into C:\Program Files\Opera\CustomScripts, hit refresh and now it works perfectly just like all the other .js files in there. I thank you and my sore eyes thank you.
The MSIE team is a legacy in itself, considering IE9 won't get upgraded for years. Case in point; IE8, an embarrassingly slow browser that's STILL being promoted. And you can expect IE9 to follow the same pattern in the future. MS should either quit making browsers, or follow a progressive upgrade pattern so they can keep up with the current demands of consumers and developers alike. In fact, I'm sick of Internet Explorer, period... their "release once" and then "sit on their ass for 2 years" mentality is a major disruption to the flow of technology and communication, not to mention my time.
I don't see why the 'custom\_proccessing\_url' wouldn't just do everything that needed to be done and then return a redirect..
I really wish more books were written like this. Everybody just wants to fill page quotas :( This and K&amp;R are two of my favourite technical books, simply because there is zero fluff.
What's with the 50 tracking codes in the url? How about: http://www.coderholic.com/javascript-the-good-parts/
Publishers set page quotas. Were Crockford and K&amp;R given different constraints? Maybe they did a better job negotiating their own constraints?
I'd guess Crockford did some pretty heavy-handed negotiating. O'Reilly really likes their normal book formats (nutshell, definitive guide, etc.). As far as K&amp;R goes, I'd imagine being the language implementers gave them quite a bit of wiggle room in terms of format. Page quotas are terrible.
java, php good parts: http://www.amazon.com/Java-Good-Parts-Jim-Waldo/dp/0596803737/ (good book, actually ^) http://www.amazon.com/PHP-Good-Parts-Delivering-Best/dp/0596804377/ -------------------- some more no fluff: http://www.amazon.com/C-Traps-Pitfalls-Andrew-Koenig/dp/0201179288/
really **great** book! one little thing though: I think douglas crockford changed his ideas over time because some of the sample codes in his website articles contradicts with his book.
example?
… except [by IBM](http://www.reddit.com/r/programming/comments/cbcrz/i_give_permission_for_ibm_its_customers_partners/).
Because the post data had to be sent to the original form action, which was an external website. You can't redirect a post.
I don't remember all but for one thing none of the sample code in his website use a single 'var' statement as told in the book. Not very important and it dates back to 2002 whereas the latest version of the book is dated 2008 so I guess it reasonable.
I'm slightly confused by one of his suggestions. In one part of the book he says "never use double equals, always use triple equals instead". But later, he says "never use double equals when comparing to a Boolean or truthy or falsy value". Well mr c? Which is it? 
I really liked this book too, glad I learned javascript using it!
In appendix A (Awful Parts) on p106 of the 1st ed Crockford says to use type equality operators (===, !==) because type coercion from the == and != operator can give unexpected/undesired results depending on what you are testing for. Later in appendix B (Bad Parts) p109 he shows some of the strange results of using == with booleans, and advises to always use the type matching equality operators. I'm reading it as Crockford suggesting to always use the === and !== operators. Where do you think he's being inconsistent?
This is a good book, only if you know Javascript already
Hmm, I might have to check out that Java one. I've been (not actively) looking for a book that pretty much exactly fits that description. Thanks!
I would like to hear more about your requirements! I develop [Mascara](http://www.mascaraengine.com/) which performs static verification of (enhanced) JavaScript. It doesn't directly provide what you ask for, but I believe it should be possible to add since the analysis infrastructure is in place. And I really like to be inspired by real-world problems like the one you have. For example, what kind of call graph support do you need? A report of all functions and their immediate callers, or do you want to view the full graph for specific functions? Do you need it in an IDE or a reporting tool?
I went to a talk by him and I kind of remember him being mindful enough to say "I used to say the opposite, but nowadays I think..." I actually respect him more for it. [edit] I don't remember if this was about the "var" thing specifically, but something like it. A lot of best-practices came from him, so he's very open about the fact that he programmed a different way before he thought up better ways to do things.
He means write `if (foo)` instead of `if (foo == true)`. And `if (foo === 5)` instead of `if (foo == 5)`.
It's something feedburner adds to the URL; it came from an RSS reader. 
Right off the bat: I think this is awesome! and I'm certainly going to be using it quite a bit. I have already started going through the code to see the internal workings in hope of learning how it works :) About my requirements, I only need a way to report the immediate callees of all functions, and the 'sub-callees' of those functions and so on. IDE support is not a requirement.
It doesn't seem necessary to get rid of an object within an object... Instead of: bro.die(); How about: bro = null; Just seems like you're trying to do a lot of work to get very little done.
Nah, cause I don't want to "delete" a specific object, but have a general method for doing that, so I don't know the name of the objects that will need to die! bro could also be "brofist", "gulasch" or "foie gras", or anything else.
I am working on a quick prototype. If I feed it this program: function f(){ g(); } function g(){ f(); h() } function h() { } function k() { g(); } I get this output: Analysis -------------------- function: f Called by function: g Calls function: g function: g Called by function: f function: k Calls function: f function: h function: h Called by function: g No calls function: k Not called Calls function: g Is this in the right direction of what you need?
I think you could have a little experience in almost any programming language and pick up JS:TGP and learn JS. I agree that it's not for complete programming beginners, but augmented with a few really basic (1 page) tutorials online I can't see that you'd need anything else.
i guess not inconsistent; just appendix A is broad, like "don't use == EVAR" and appendix B is more defined where he suggests the only time you have issues with == is when you're testing for booleans. My interpretation is just to always use === for every comparison, but a colleague disagrees and i'm trying to find irrefutable evidence to the contrary and I can't.
only part of it... it would help to have: function: f Called by function: g called by function: f function: h called by function: g Calls function: g the ability to find uncalled functions is going to be very useful (not just for me, but for anyone dealing with large amount of js code) and, whoah man! you did that in a day? if you think you can offload some of this work, I'll be glad to help you with whatever i can.
Am I getting closer? Analysis -------------------- function: f Called by: function: g Called by: function: f (recursive) function: k Not called Calls: function: g function: g Called by: function: f Called by: function: g (recursive) function: k Not called Calls: function: f function: h function: h Called by: function: g Called by: function: f Called by: function: g (recursive) function: k Not called No calls function: k Not called Calls: function: g
yes, that is exactly what i need.
Of course the sample here is very idealized. If the real code uses fancy metaprogramming it gets a lot harder to analyze. Does your code use some OO patterns, prototypes etc?
no it doesn't. luckily it doesn't use anonymous functions either so the sample above is very close to its structure. All i have to do now is extract the JS embedded in html and add it to the JS file as another function, which should be fairly simple, and then run it through mascara.
Only 50??? I want my money back.
Yes. * [Ben Alman's Crossbrowser Console.log](http://benalman.com/projects/javascript-debug-console-log/) * [A crossbrowser console.log on Google Code](http://code.google.com/p/console-log-js/) * [jQuery console.log plugin](http://erikzaadi.com/blog/2009/10/20/JQueryConsolePlug-in.xhtml) I'm sure there are more...
Yes. polyrhythmic already offered some good suggestions. Not sure what the goal here is...if you need to throw an error why not do that to begin with? If the goal is to just display the information, why not use an alert (yuck) instead? Most (if not all) of the modern browsers have built in logging capabilities, so you should use them. 
Thanks for the useful pointers!
See also: [Blackbird](http://www.gscottolson.com/blackbirdjs/)
Ooooo, that's very helpful, thanks!
&gt; Currently, pushState has support from the latest versions of Safari and Chrome, and Firefox 4 will be supporting it as well. So, location.hash is not dead, in fact it will be around for a long, long time. Really the only way we can use this is with a lib that supports it, but also gracefully degrades to using .hash. I am not saying this isn't nice, or good, but to say that .hash is dead is a lie. That said, it should be fairly easy to add this to an existing lib, or create a new one for it.
location.hash will still be useful for jumping to named anchors. pushState will be a tremendous help in building webapps. I look forward to using it.
Console.log is most known, what may not be as well known is console.info, console.warn, and console.error. And yes, there's firebug lite, though it uses on-page elements which could be affected by css.
That talk and others from JSConf 2010 (and 2009, actually) can be found on [the JSConf video channel](http://jsconf.blip.tv/posts?view=archive&amp;nsfw=dc). Really awesome stuff.
Ignore what he says about dependencies. Location does not tell you javascript dependencies at all.
This guy is both fucking hilarious and a genius! Love it, tks OP, so much stuff I've learn from it. Advice this to every JS dev or programming enthusiastic, for example the IE onload hack is one of the most remarkable hacks I've seen, really who the fuck would have thought that, monitoring an exception! After seeing this, I love even more jQuery, those guys are pure genius.
&gt; for example the IE onload hack is one of the most remarkable hacks I've seen, really who the fuck would have thought that, monitoring an exception! Like many solutions in jQuery it comes from the JavaScript community at large: http://javascript.nwbox.com/IEContentLoaded/
Still only a twisted mind could (or is it would?) have thought that :)
I like it but he does a lot of stuff and says "do this" but does not explain why. But I guess that is what you get in 5 minutes.
An upvote since it's Paul's birthday today.
Great article!
We reflect the people that taught us. Take from that what you will.
I didn't even play the video, but his cute, little "draw shit that follows the cursor" used up half my CPU. I don't like that feature.
Seems like he must have figured that out as he was saying it :-)
I couldn't finish, he was mindnumbingly boring and spent forever on the most basic things.
I really hope he finishes this series of articles. Totally stoked to see this and can't wait to read more!
This is cool shit. Respect.
See also http://www.codebase.es/jsgb/ (by someone else I think)
looks photoshopped.
Why does so many redditors are so bad at asking insulting questions?
He gives full credit to Diego for the hack in the presentation.
Really you should just link straight to the source here: http://www.effectgames.com/demos/canvascycle/ It is a lovely effect, although that's more due to the stunning art than the JS.
Hell yes it is.
The article was cool explanation of what is being done by JS/HTML5 and what isn't. When my boss sees stuff like the direct link, he thinks you can make pictures like that using new HTML5 tags that allow you to draw castles.
This is about using javascript/jquery on the server side(which has also been done before no doubt). The idea is you manipulate the DOM using javascript/jquery... like how most front end developers do with jquery. This is not about a new template language, this is building upon javascript manipulating the DOM on the server side. Rather than (HAML): &lt;div class="title"&gt;&lt;%= title %&gt;&lt;/div&gt; Jquery serverside.js: $('.title').html('title') with the html file: &lt;div class="title"&gt;&lt;/div&gt; Just like how jquery reuses css for selectors, this project aims to reuse javascript/jquery knowledge for templates (which happen to work server side or client side). It's great that there's all these template languages... but _I_ don't care for them. I want to use jquery. I think other people do too.
I don't think you've spent enough time with existing templating languages. What you are proposing is basically HAML. Since 1.4, jQuery's shorthand (single-element-creation) syntax: $('&lt;div /&gt;', { className: "title", html: "title" }).appendTo('body'); is basically [HAML-JSON](http://static.creationix.com/jquery-haml/examples/js/ui-demo.js): [ ".title", "title" ] __ **EDIT:** Since that example is very short, if we give the div more properties HAML-JSON looks like this: [ ".title", { tabindex: 3 }, "title" ] __ So, if you would like to use jQuery for DOM templating on the server-side, you are basically using HAML-JSON anyway. The main advantage of using this syntax is the speed and versatility of native JS objects -- not to mention less keystrokes, or the ease of passing HAML-JSON from server to client. It doesn't usually make sense to use .append() or any other DOM addition/removal functions serverside because you are only really dealing with text. Furthermore if you want an entire DOM environment on the server -- say for Opera-Mini style SS rendering, or for scraping and processing, there are existing projects for that, such as [env-js](http://groups.google.com/group/envjs) or Aptana's [Jaxer](http://jaxer.org/). So, you can already use jQuery SS. And you can use it with the DOM, you can use it with HAML or other templates. Therefore, I'm not sure what (if any) gap you're trying to fill.
Haha, hopefully the readership is *slightly* more informed here! But `&lt;castle waterfall="yes" /&gt;` would be awesome...
Hello, These are the main things I want to achieve: * use the same code on the client as the server for templating, to reduce having to code/test many things twice. * use javascript/jquery on the server for the template language, to reuse knowledge, and code (lots and lots of jquery code including app specific code, and plugins). I've used 20-30 different templating languages on different projects in the last 12 years - and out of all of those languages, Joe Random Web Developer has probably only used jquery. * separate the data out from an app/db server via json, so as to reduce coupling between app and front end developers. Front end development can proceed with out python/javascript/C++/ruby/php/zope/java or whatever environment the backend is using. I've seen people spend a week trying to set up development environments trying to edit some html/js/css. So far, I'm happy with the pieces I've found that let me do this: jsdom, node-htmlparser, node.js, etc. You've mentioned others that will likely work in a similar way. I'm excited about trying more of my jquery code to process html on the server side - and deleting my other code :) I am going to keep a lot of my python/php/java code around... and hope to use this just as a templating language. cheers,
I hate when people just use HTML5 to refer to anything that uses canvas. It really should say: "8-bit color cycling with Javascript"
awesome, welcome to 1985. just after the requisite inventions of tcp/ip and the gui :)
This code loads on demand in a secure sandbox (browser) on any operating system and machine architecture. The future is like the past, only better.
Wow, someone kept chasing my cursor while I was reading the whole article.
Also [works in nightly Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=562681).
Wow, that's actually pretty cool. It's fucking useless, of course. But pretty cool.
Before one is set to determine whether something is an array, it's important to understand that array-ness in ECMAScript is actually a combination of 3 traits: 1. Object's internal [[Class]] property having value of "Array" 2. Special relation of object's `length` and numeric properties 3. Object's [[Prototype]] referencing `Array.prototype` (either directly or via one of the ancestors in the prototype chain) ES5 `Array.isArray` (mentioned in the article) checks against #1; so does `Object.prototype.toString.call(o) === '[object Array]'`. `instanceof` operator checks against #3. I don't think anyone ever checks against trait #2. With ES5 (or even ES3 + non-standard extensions), it's very much possible to create pseudo-array objects that satisfy traits #2 and #3. These objects will be indistinguishable from regular array ones, except for trait #1 — [[Class]] value of "Array". As a result, they won't be reported as array objects by either `Array.isArray` or `Object.prototype.toString` checks. About all this [in a little more detail](http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/)
yay, I think I will just keep this page open all day so I feel less lonely. also, I wonder how hard it would be to extend the client with messages like 'add comment' and 'vote up'
would google wave be more efficient if it used stuff like websockets or node.js? 
It was me. No, seriously.
indeed. but I found myself sad to be impressed with socket functionality. a remote control cursor is literally one of the first things I made when I learned to program with sockets, like 12 years ago. don't get me wrong, I'm happy it's finally here. but I've always been confused as to why writing real collaborative applications in JS was so popular even before sockets were part of the tool chain.
signupwall .. gtfo
&gt; Some developers have issues around "this" in callback functions Seriously? What a lame "con." Also, why is being DOM oriented a _bad_ thing? Javascript's main purpose is to script the DOM.
You seem to be forgetting that JavaScript is a very powerful language and all the **real** fun stuff happens *outside* of the DOM.
Yes, but not everything you do is manipulating the DOM. Often this is just the final step, and you need to manipulate some arrays/objects/general logic. Personally I think each library has their own "best problems" to solve
Exactly. I like how jQuery isn't trying to solve every problem out there. It just fixes the DOM. Personally I think they should eliminate everything non-DOM from jQuery, including the AJAX library.
&gt; Also, why id being DOM oriented a bad thing? Javascript's main purpose is to script the DOM. The point here, I think, is that everything that's not directly DOM-related (like Ajax) is awkwardly duct-taped onto the `$` namespace. Consider `$.proxy` and `$.extend`.
The 'this' thing has always bugged me, but I got used to it. It should be the jquery object, IMO, not the DOM element. I almost always want to use jquery methods on it, and the rare occasion where I just need the element, it's easy enough to pull from the jquery object.
Emacs + js2-mode
Notepad++ here.
I use Notepad++ as well, just wish there was some auto complete or intellisense features, and auto indenting/parens/brackets. Unless these features are available and I just haven't looked hard enough.
TextMate. Although it sounds like hyperbole, anybody developing on Windows is going against the grain. The editor is as fantastic as it looks, and you can run Windows in VirtualBox to make sure your site looks fine in IE. Consider a move. I won't tell you you're an idiot like others will, just...consider a move. TextMate is more than worth it.
If you absolutely can't get on a Mac there's [E](http://www.e-texteditor.com/) for Windows. It even uses TextMate plugin bundles (which are awesome powerful).
VIM
Dreamweaver
Having used both E and TextMate, I have to say, E just isn't comparable, in my book. Though to be honest, I don't remember what particular issues I had with it. If you can't get on a Mac though, there's always Linux + Vim :-D
nice downloading the trial now.
Before I switched to OS X I absolutely loved E - It's a worthy replacement, and definitely the text editor I'd go back to if I was on Windows.
Komodo Edit. Runs on anything, Linux, Windows and Mac. FTP, SFTP,FTPS,SCP built in, auto complete, auto indenting, syntax checking, code snippets, code folding, support for jquery, dojo, mootools, not to mention support for python, perl, php, C, C++, tcl, et, al, does introspection for autocompletion with in the current module, and based on Mozilla so it's extensible with add-ons. If you want you can purchase the full IDE, then you get all of the above plus integrated revision control, python and perl debuggers and more. And to the Mac zealot, puh-lease. I have nothing against Macs, use them if you want but to say Windows users are going against the grain? Ridiculous.
I remember my shortcomings: The power of text navigation on the Mac. For me the native key bindings make [selecting|deleting|cutting] through words, sentences, lines so much easier. At the time I tried E (first beta release) themes weren't up to my par either. Also, text is rendered more to my liking in OS X, although the ClearType wizard in Win7 make things pretty dang close.
I totally forgot about this one, I remember hearing about it but never got around to trying it. Ill have to give this one another look, sounds like it has everything I'm looking for.
I used Notepad++ for a while before finally switching to Komodo. I haven't looked back. Notepad++ got rough edges everywhere whereas Komodo only got 3 I'm aware of (as someone who uses it almost every day): old Gecko platform (no native JSON), broken auto-indent if Unicode characters are present, and no HTML5 support. However, all of those issues are fixed in the current 6.0 nightly builds. So, I got nothing to complain about anymore. It's stable, slick, its Code Intelligence (~IntelliSense) saves lots of typing work, and it's also very extensible (via JavaScript or Python). There is also a JSLint plugin called kjslint. I run it via an on-before-save trigger automatically. I also auto generate my own CIX (Code Intelligence XML) files from YUI Doc's raw JSON files in order to get auto complete for my own libraries. It's very lovely indeed.
Having used E, TextMate and Gedit on Linux, I'd have to say they're all as equally as shit as each other. Seriously, they all have their own niggling problems that make them all taste like shit in my otherwise shit-free mouth.
Visual Studio 2010 Ultimate. Definitely overkill, but its JS editor is damn good. The Netbeans editor is pretty good as well.
I use Komodo IDE at work, mostly for the integrated debuggers. But I used Edit before and for free it's just fantastic. Being able to edit on my Linux servers from my Windows box via SSH is just beyond great. 
JSEclipse, fast and furious.
Geany (generally similar to Notepad++) on Kubuntu. When I'm SSH'ing into my server I just use nano from the command line.
Isn't [Peppy](http://jamesdonaghue.com/static/peppy/profile/slickspeed/) the fastest selector engine?
Then what would you recommend using? You seem to have claimed they're all crap without giving reasons, and without giving an example of a better one. Also, I'd question your usage of TextMate on Linux (unless that last bit was directed solely at Gedit).
[Sublime Text](http://www.sublimetext.com/) editor with [Zen Coding](http://code.google.com/p/zen-coding/downloads/detail?name=Sublime.Zen.Coding.1.2.2.zip&amp;can=2&amp;q=).
I used SciTE for the last 5 years, which is like a bare-bones version of Notepad++. Are you sure you really need anything else than indentation, line numbering and code highlighting? What does Notepad++ lack that you really need to work?
same here, simply the best!
astroturfing, maybe?
nothing based on Eclipse can be described as "fast". 
Currently use Aptana (based on Eclipse). Lots of features but can be slow as hell at times. HTML5 support coming in version 3. Other than that I sometimes use Notepad++
+1 for Sublime Text
Oh here we go... I guess I'll throw mine into the mix Aptana. There, I said it. I like eclipse. It always works, I've not had trouble with speed. Everything everyone else mentions for free.
Same here, Visual Studio 2008 Pro and Visual Studio 2010 Ultimate. Primarily for developing Javascript, C#, ASP.NET (+MVC), etc. Also for building Firefox and Chrome. 
Having tried Aptana on Eclipse, I agree. I think I qualified JSEclipse as fast because of that. But I still can't find anything that feels comfortable, marks multiple occurrences of a word, has basic autocomplete, is customizable and free.
It's testing jQuery 1.2.6?
It also 'fixes' AJAX in the later releases with the AJAX events.
Visual Studio. If you're working on jquery theres support for intellisense.
VIM on *nix &amp; PSPad (edit files directly from ftp ftw) on Windoze
Komodo Edit is fantastic, I use it every day.
I really like emacs it's my default editor in all of my servers, but, for some reason, I just can't stand it for my all day every day coding sessions. 
I am trying to argue my point thru... even if there are sites that you can refer me to it would be a big help... i know what the answer is but maybe i am just so biased i cant stand when people tell me otherwise...
PS-Pad
Yeah, I use that. Buggy piece of free crap. It's *nearly* recommendable. ;)
I used to have that opinion, but it's customizable enough that I just bent it to my will completely, I use the same keyboard shortcuts as Textmate and have built in all the features I like from other modern text editors. Might now be worth the effort for some though.
What do you use?
I want syntax checking and some basic outline and autocompleting, so I have to go with a full IDE: NetBeans. It has most of Eclipse's features just seems less blown and over-engineered.
VIM + Eclim(.org) + jsl(int)
Maybe it's my fault for using the beta, but Komodo Edit 6.0 crashes on a dime. But otherwise it's quite a nice editor indeed. Even has some vi emulation.
It depends on what you want. The object method just gives you 1 single global variable (popo) instead of defining each function in the global scope. That's the only benefit i see. You can't create new popo objects and can only have one instance. With functions you get a lot more benefits. You can create multiple popo objects, each with their own scoped variables. You can have the notion of private and public variables through closures. One such way to do this is to declare var or functions which will be private, then return an object of functions and variables which will be public. Closures are great. You can also prevent the function from being called more than once by having it call itself at the end of the function declaration. Of course having closures means you carry around the full stack of scope for each function object even after it has returned. This can lead to memory leaks in some cases, but overall if you are deleting unused function objects and managing them carefully, you should be fine.
see but i dont want more then one instance of popo... so in that regard its ok... yea closure is all fine and dandy but all it takes is one bad programmer and it becomes very leaky like you said... but in terms of actual performance have you had experience doing these ways... i have done some (actually alot of) testing doing both ways... but just in your experiences what have you come across???
Again it depends how robust of an application you want. If you want "Classes" and some inheritance and use a lot of "modular" programming, then you must use functions to accomplish this. Its hard to tell performance wise how heavy functions and their closures are. Again, you need to manage your function instances and not constantly create new ones before deleting old ones if possible. The object method you are voting for is really just a way of encapsulating a bunch of functions or variables into one global variable. All functions are public and can be accessed by any outside function. EDIT: I researched a bit more about javascript memory leaks and it seems that only IE is a culprit for it and its due to referencing dom elements from within the closure like so: http://stackoverflow.com/questions/864516/what-is-javascript-garbage-collection/864549#864549
I never fell in love with a piece of software as quickly as I did when I first tried Sublime Text.
Bluefish on Ubuntu Lucid, works great!
There is no performance issue here. Unless you're creating millions of popos, you will never ever be able to tell the difference. It's a non issue. The issue is style, not performance. And encapsulation (keeping shit that goes together, together) is a good thing to do. Also closures are not "leaky". IF you want to have an object that has methods and acts like a "class", you can do it with *new*: function Popo(){} Popo.prototype.method1 = function(){ }; var myPopo = new Popo(); If you want a 'single use' type of object with methods, don't bother with a constructor: var popo = { method1: function(){ } }; popo.method1(); Having all the methods out in the open, ie: function popo (){ do something method1(); return whatever; } especially in window scope (not inside a closure) is sloppy. Don't put anything but your top level 'namespace' in the window scope, or at least, be very selective about what goes there. var SuperCoolApp = (function(){ var somestuff; var blah = function(foo){}; return { widgets: { something: function(){} } }; }()); 
For those unfamiliar with js2-mode, it's much more than just syntax highlighting. It's a full-fledged ECMAScript parser written in Emacs Lisp (by Steve Yegge). This is especially useful for JS because of all the little gotchas. Yes it catches the mundane (but annoying to discover at runtime) syntax errors but it also catches more subtle mistakes. Global vars are coloured differently so you know if you've forgotten a var, or used a semi-colon where you meant to use a comma (or just forgot the comma, triggering semi-colon insertion). It underlines redefined vars with a squiggly underline so you know if you've mistakenly reused a variable name from earlier in the function (JS only has function scope and global scope). When you write `var foo = function() {...}` it knows that a function expression is being assigned to foo and colours foo differently than regular variables. If I've confused things and used a colon instead of an equals sign or vice versa, often while refactoring, I notice before I try to run the code. When the insertion point is near an error you get a status message telling you exactly what the error is. And it's customizable so if you've got the semi-colon auto-insertion rules memorized you can turn off missing semi warnings, etc. Whenever I'm writing Objective-J I wish that objj-mode were based on js2-mode and not objc-mode. I have yet to find a better JS environment than Emacs + js2-mode, but to be honest I haven't really shopped around much so maybe something blows it out of the water with context-aware completion and all those kinds of goodies. If someone were inclined js2-mode is a great starting point to implement those features in Emacs. (Every time I run some Objective-J only to find a stupid syntax error I pine for js2-mode. Then I start bisecting code with comments because the Obj-J parser is rather lame.)
its a very subtle difference in loading one object with methods instead of the other way... Very detailed answer... and your window scope example is more what the person i was arguing with was trying to tell me was correct... as you can see or tell i was very adamant that he was wrong... i dont like contractors... at all yet again the idea is popo is the library or framework... so var popo{..}; with x amount of methods in it and then you have popo.init(); Thank you neonskimmer
yes the leaky part was once the DOM gets in the picture... as we know its just another ballpark... when learning JS IE taught me alot in terms of being very very complete, clean and even making sure there is not an extra comma(,) since they love to break objects... in early version of FF and other it wasn't as strict as it is now...
Smultron on Mac and NotePad++ on PC
No problem. Javascript is a strange language, and not everyone agrees on how it should be done. As you gain more experience with it you'll probably discover your own patterns. Using functions as objects (passing functions as arguments to other functions, for example) is something very interesting to explore, for example.
i do agree when i learned i can do that it was a whole new way of thinking for me...
nothing beats it...fast, available, and workable out of the box
Downvoters, Dreamweaver is much much much more than a WYSIWYG editor.
The PHP function autocomplete is pretty nice too.
Also of note, you can define the prototype by using a literal: Popo.prototype = { method1: function(){ }, method2: function(){ } } I just learned this recently. It feel like it makes my code a lot cleaner. 
I use Textmate, but VI is very nice.
It does have auto-complete. It's buried, but it's there. Only thing is that it autocompletes based on existing text in the document - so starting afresh can be a pain!
I switched from Dreamweaver to Notepad++. Although I like Dreamweaver's configurability and intellisense-like features, it was an absolute pig when formatting non-traditional javascript (like jQuery). I spent more time fixing formatting than coding! Notepad++ indents the way I prefer to work out of the box. Trouble is Notepad++ had quite a quirky UI and although it has lots of features, some basic ones are lacking and the plugins available to make up for this aren't quite as polished as I'd like. Oh well, that's the thing about open source, I shouldn't be complaining, I should be contributing!
Dreamweaver is a severely underrated product by vertue of the fact that it has a WYSIWYG editor and is used by lots of people who don't know what they're doing. Photoshop gets used by people who don't know what they're doing too, but nobody generally laughs at Photoshop. Also, I'm quite fond of popping into WYSIWYG when I'm working on tabular data. I had a bunch of that to do along with a colleague of mine a couple of years ago. He absolutely refused to use WYSIWYG, preferring instead to hand-code all the tables. Guess who had better productivity? WYSIWYG editors are a toy in the wrong hands, but can be very powerful and efficient when used to solve the right problem.
but wouldnt you think this is better/relevant if you desire to have more then one instance of 'popo' so basically toto prototype will be popo... i dont want another instance of popo nor something along those lines... but prototype is a very cool thing and it does do what you said... its just very dangerous in some hands that dont really get it... sadly __proto__ is only a dream...
Hear hear! I made the switch myself and I must say that it's one of the best decisions I've had in a while. I was a Textmate user too—that's actually one of the main reasons why I decided to switch to OS X in the first place. I remember seeing all those cool videos using Textmate and I just wanted to know what exactly they saw in the editor. Textmate is actually pretty great, especially because of its extensibility. But the development of the next version has gone on for too long and the problems haven't been addressed in the interim. Things like the absence of splits, the lower than expected searching capability and the horrible handling of large files. I was waiting for Textmate 2 to arrive, but I have work to do, so I finally decided to take the plunge and try Vim. It took me quite a while to get used to it (I tried playing with it 5 times before I really dove in), but the payoff is great. Almost all of the features that I needed came out of the box, and whatever I miss from Textmate I could just integrate via plugins. TL;DR: Use Vim. The learning curve is steep, but the payoff is great.
this sounds easily testable. Have you thought about doing the legwork?
Can't beat gedit.
I'd really, and I mean **REALLY**, suggest trying JetBrains WebStorm/PhpStorm. I've been looking around for a very long time for a good, smart, all-features-included kind of editor for PHP, HTML, Javascript, CSS, and I'm really happy with PhpStorm. It works REALLY well with almost all the major JS libraries, and it actually understands the code. Plus it has tons of configuration options, and you can make it work just the way you like it (like Eclipse, Dreamweaver, Visual Studio, it will support all your favorite keymaps out of the box).
I'm am turning to (global) objects lately. When you have a bunch of functions and vars it's easy to step on some other library/third party app you're using. On our production site we have about 3-5 different JavaScript applications (Google AdWords, AdOcean Banners, some other bannner engines, etc). Debugging in that environment can be a nightmare.
I totally agree. gedit is completely underrated. It's highly customizable, scriptable (with Python), has a built-in command line, comes with a bunch of plugins including some which let you create and import bundles of snippets like Textmate and more. There's only a few things I miss (block editing, for example), but other than that, it's a fantastic editor - I get annoyed when I have to use anything else.
Great now we can have fullscreen ads. I can't wait.
I prefer to work on front-ends and stay as far away from underlying data storage details, but I think it might be worth looking into [PHP's support for SQLite](http://php.net/manual/en/book.sqlite.php). Rather than doing a "search and replace" every time some data (name, species, etc.) is updated I think slicing the template into text nodes and storing the customizable parts grouped in arrays would be nicer. I.e: * **object** customText * * **array** pet-name * * **array** pet-species * * **array** pet-sex * * **array** owner-name * * **and so on** In #4) you mention "patient" but in #5) it sounds like you meant to write "student"? @#7.2) PHP is server-side and executes on the server. JavaScript, in this case, is client-side and executes in the browser. That said, there's probably a ton of frameworks out there that you could use and learn from.
I'm a big fan of NetBeans as well. These days I use it as my primary IDE. It's really versatile and scales well to different languages. In case of JavaScript I have found it extremely useful to set global variables to be drawn as red (Options -&gt; Fonts &amp; Colors -&gt; Syntax -&gt; Language: JavaScript -&gt; Global Variable -&gt; Foreground). I personally avoid them as much as possible. I love the way NetBeans highlights errors and gives some nice support for simple refactoring (interactive rename is great!). The CSS editor is somewhat nice too.
On the bright side, Microsoft will refuse to comply with the standard, so as long as you are using IE, you will be fine!
I use VS for development daily at work, but it just seems too heavy to load just to make a few changes to a JS file. Its great for C# development but I havent loved it for pure JS development.
I think it that the methods should only work on the view itself (instead of the document) and elements. Also, the `:full-screen-doc` pseudo-selector should be changed to `:full-screen-view`.
except they'll have to request permission to go fullscreen, and you can easily refuse it.
Every 'stable' release of Komodo I've used in the past 4 years has actually been stable. The betas are usually too unstable for me to use, considering it's for business.
Haha... you're right on #4. When you say "slice the template into text nodes" I'm not sure exactly what you mean. I didn't mention, the way I'm hoping to write the XML to the document in the end is just to have one javascript command that fetches every text node, in order, from the relevant procedure. I suppose the other option is to have it point to specific elements, in which case... I guess it could grab the first half of a text then grab a certain text element, then grab the second half of a text... I originally tried nesting tags, but that really messes with navigation, eg: &lt;procedure type="OVH"&gt; &lt;intro&gt;Thank you for bringing &lt;patientname&gt; name &lt;/patientname&gt; into the VMTH today &lt;/intro&gt; Now if I want to GET the text from "intro," I only get "Thank you for bringing" since patient name is a child of intro, with it's own text child, instead of being a child of procedure. On top of that, "into the VMTH today" somehow ends up being a separate node from the first part, which I don't entirely understand. If I create a separate object for custom text, I'm not sure still how I will put that in the right place, except as I described above (having the text up to "patient" as one text node, then having the text after "patient" as a second text node, and then grabbing both nodes with the customizable node between them....
The free market works!
Can't understand using anything other than Gedit (apart from nano on servers) - I'm not such a great programmer but I've never found anything that Gedit finds uncomfortable. Then again, it could just be that I'm missing out on stuff I don't know about. I do have to say that I don't like code/bracket completion and sometimes feel it's best to master one tool and use it for everything (which, I guess, is the whole Emacs/Vim thing anyway?) If you use Gedit, you do need to look at the plugins. Hope this helps? 
in case the site goes down: [14:44] &lt;irc2samus&gt; guys someone at the office said that using $ is deprecated and the recommended way now is to use jquery, is that right? [14:45] &lt;l4rk&gt; irc2samus: its not deprecated [14:45] &lt;adamhutton&gt; mhall87: what are you trying to accomplish with jQuery? [14:45] &lt;l4rk&gt; so that person either mispoke or you misheard [14:45] &lt;irc2samus&gt; l4rk: but what is the preferred way? [14:45] &lt;mhall87&gt; yes need jquery site doesnt work crossbrowser [14:46] &lt;l4rk&gt; irc2samus: i prefer to do jQuery(function($) { // safe to use $ here }); [14:46] &lt;Lion31&gt; please,please :( [14:46] &lt;l4rk&gt; thats for document ready [14:46] &lt;adamhutton&gt; mhall87: including jquery.js isn't going to magically make your site work crossbrowser [14:46] &lt;l4rk&gt; if its outside ready i do (function($) { // $ safe here)(jQuery); [14:46] &lt;mhall87&gt; why include fail though i want to try use jquery [14:46] &lt;mhall87&gt; broken for php 5? [14:47] &lt;roger_raymond&gt; /ignore mhall87 [14:47] &lt;l4rk&gt; irc2samus: see what i did? mapped $ to jQuery in both instances [14:47] &lt;miketaylr&gt; mhall87: hey marak, do you know what time the node.js meetup is this saturday? [14:47] &lt;ehynds&gt; jQuery(function($){ }); also works as a doc.ready [14:47] &lt;adamhutton&gt; mhall87: jquery shouldn't care whether you're using php or not [14:47] &lt;mhall87&gt; miketaylr: i think 7 or so [14:47] &lt;miketaylr&gt; noon? [14:47] &lt;mhall87&gt; at drop.io [14:47] &lt;miketaylr&gt; oh [14:47] &lt;miketaylr&gt; cool, thanks [14:47] &lt;mhall87&gt; anytime [14:47] &lt;mhall87&gt; ^_^ [14:47] &lt;irc2samus&gt; hmm so you avoid using $ directly, is that the general idea? [14:47] &lt;sergeyg&gt; Hey guys, I have a jQuery UI question. I'm sure this is a common question, but I can't find the answer. How can I load an external page into a dialog? [14:47] &lt;mhall87&gt; i was wondering how long it would be until someone at least TRIED a whois [14:48] &lt;adamhutton&gt; mhall87: if you're generating HTML with your PHP, that's all jQuery needs [14:50] &lt;miketaylr&gt; adamhutton: he left, he was just trolling [14:50] &lt;sean`&gt; ehynds, why do you use jQuery and $ :p [14:50] &lt;ehynds&gt; $ is safe to use inside the closure.. [14:50] &lt;ehynds&gt; jQuery works for outside of it [14:51] &lt;l4rk&gt; yeah [14:51] &lt;ehynds&gt; and document.ready passes jquery as its first argument [14:51] &lt;sean`&gt; ehynds, there was no closure :p [14:51] &lt;l4rk&gt; there is literally not reason not to use that approach [14:51] &lt;l4rk&gt; no* [14:51] &lt;sean`&gt; oh [14:51] &lt;sean`&gt; like that [14:51] &lt;sean`&gt; I didn't know that [14:51] &lt;irc2samus&gt; and what's the problem with $? [14:51] &lt;sean`&gt; ?source init: [14:51] &lt;bot-t&gt; Line#75 - "init: function( selector, context ) {" - http://bot-t.com/jquery.js#line-75 [14:51] &lt;ehynds&gt; the fn is the closure i refer to [14:51] &lt;l4rk&gt; irc2samus: too easily confilcited [14:52] &lt;sergeyg&gt; Does anybody know the answer to my question? [14:52] &lt;l4rk&gt; if anyone runs jQuery.noConflict() in any part of the code [14:52] &lt;l4rk&gt; your existing $ will break [14:52] &lt;l4rk&gt; using those methods is smart coding, easy, and future proofs the code [14:53] &lt;sean`&gt; sergeyg, I think someone does [14:53] &lt;nlogax&gt; what if someone does jQuery = "lol" ? :O [14:53] &lt;irc2samus&gt; I see, thanks guys! so last question, any reason to use the secured $ instead of just qJeury? [14:53] * sean` slaps nlogax [14:53] &lt;sean`&gt; AT LEAST USE CAPS [14:53] &lt;irc2samus&gt; *jQuery [14:54] &lt;sean`&gt; irc2samus, how about reading? [14:54] &lt;nlogax&gt; ?google qJeury [14:54] &lt;bot-t&gt; nlogax, jQuery: The Write Less, Do More, JavaScript Library - http://jquery.com/ [14:54] &lt;nlogax&gt; :O [14:54] &lt;sergeyg&gt; sean`: =( Well could they tell me the answer? [14:54] &lt;sean`&gt; queer juery [14:54] &lt;sean`&gt; sergeyg, dialog.load ('url', function () { dialog.open }); [14:54] &lt;sean`&gt; ?jquery.load @ sergeyg [14:54] &lt;bot-t&gt; sergeyg, .load() - Load data from the server and place the returned HTML into the matched element. http://api.jquery.com/load/ [14:55] &lt;irc2samus&gt; sean`: not sure what you mean, apparently the problem is that $ tends to conflict so why not simply use jQuery isntead of aliasing $ to it? [14:55] &lt;sean`&gt; yeah [14:55] &lt;sergeyg&gt; sean`: Thank you very much. [14:55] &lt;l4rk&gt; longer [14:55] &lt;sean`&gt; so you create a closure [14:55] &lt;sean`&gt; &lt;ehynds&gt; jQuery(function($){ }); also works as a doc.ready [14:55] &lt;l4rk&gt; irc2samus: would you rather type $ or jQuery? [14:55] &lt;l4rk&gt; personally i like how $ looks better [14:55] &lt;l4rk&gt; sean`: he's asking why use one over the other not how [14:55] &lt;sean`&gt; &lt;ehynds&gt; and document.ready passes jquery as its first argument [14:55] &lt;sean`&gt; &lt;l4rk&gt; if its outside ready i do (function($) { // $ safe here)(jQuery); [14:55] &lt;nlogax&gt; plus the argument name can be anything, so it minifies better [14:55] &lt;irc2samus&gt; l4rk: I rather type what is best, but I don't see the need for the bubble when you can access the other one [14:55] &lt;sean`&gt; irc2samus, $ doesn't conflict when you use those things [14:56] &lt;l4rk&gt; irc2samus: code readability then [14:56] &lt;sean`&gt; So best is to use a closure, for sure, because even jQuery can be lost [14:56] &lt;l4rk&gt; its best to use secured $ [14:56] &lt;sean`&gt; and $ is a lote easier to type [14:56] &lt;l4rk&gt; and read imo [14:56] &lt;sean`&gt; http://www.dumpert.nl/mediabase/1055681/97c9ec04/oh_nee_.html [14:56] &lt;irc2samus&gt; ok, thanks for the details :) 
Woah.
This is one of the things that sets Flash apart from HTML at the moment. In addition, I'd like to see microphone and webcam access that are only available after getting the user's permission. 
jEdit is pretty crappy out of the box but has a number of excellent plugins that make it a very nice editor. Combine this with a couple of years of macro and shortcut making and any other editor just feels cumbersome to me. I also like to use MacVim because it's Vim and has an actual full screen mode. _Full effing screen_ mode is a feature that every editor should have (together with window splitting). It's really too bad that I never understood how to customize it well otherwise it would probably be my favorite editor.
I used to be an Emacs guy, but these days I want an IDE - unless I spend 4+ hours a day coding, I forget all those magic keystrokes and need a menu... So for Javascript, I'd go for any of the IntelliJ editors - Idea, RubyMine, or (presumably) WebStorm (never tried that one, but I presume it shares the same code as the others) They have a good JS editor and debugger, excellent html/css editors (and current betas do Sass/LessCss too). And there are great plugins for lots of other languages, such as CoffeeScript. If you want something free (and can't get an Intellij open-source license) then I'd try Netbeans - ironically, while it's a rubbish Java IDE, it's not bad at other languages.
Finally! Been waiting for a decent Canvas API that supported chaining. Was figuring someone would release a jQuery Canvas API, but this serves the same purpose. Should prove very useful! Thanks for posting :)
why xml? what you're describing, to me, seems that the data should just lie in a database for modification. TIAFAASITICE's suggestion with SQLite would fit the purpose well. What does the xml bring in to the table?
This demo is a security hole in itself. Don't use it.
ok.. I did say 'use at your own risk'.. and anyway no one can execute any javascript that they couldn't on any other web page.
well.. someone decided to just flood it with document.write('') every two seconds or something. that proves a lot. fuck you whoever did that. its totally open, there is nothing stopping your from trolling or taking down my server, or popping up 'penis' alerts, or whatever dick thing you want to do. if you are going to troll people, at least be creative. or, if you are actually capable of doing something that is NOT trolling and interesting, consider doing that.
##NSFW 8-year olds and douchebags trolling with redirects to prolapse man etc.
You need to limit a few things.. i made http://74.207.252.240:8099/test.php ... its just phpinfo().. but im just saying :?
haha yeah.. i was there for that one as well. Sucks because I like playing with it, but allowing people to do whatever is just really dangerous.. and im at work, so prolapse man ftl!
well.. like I said.. totally open, you can easily take down the server or use it for whatever.. really just an experiment to see if anyone does anything creative or useful. if linode bans me for something stupid/criminal someone does that will be too bad.. there are other vps hosts though 
&gt;.jsmenu&gt;li&gt;ul This is slow. Personally, I'd add the .jsmenu class to the ul elements instead.
try it by Saturday or you'll have to wait to the end of next month
 Mon Mar 01 2010 16:00:23 GMT+0000 (GMT) whaaaaat. Why? (I know that some things start from 0 in the Date object...)
Yeah this is a stupid error on Javascripts behalf, but its easily fixed. The date comes out to March 01, 2010. Why? Because of the order you're setting the dates. First, after setting your date object, you're setting the year to 2010. That's fine, not much change here. The big issue occurs when you change the month - you're trying to change the month to February. Well what day is it today? Today is July 29, 2010, you're essentially saying, "Let's try and change the date to February 29, 2010". Yes, it's a little silly, but that's whats going on. Javascript says it cannot open the pod bay doors, and sets the date to the closest alternative, March. You then say to change the day value to the 1, making the date March 1, 2010. The fix is simple: adjust the day before you adjust the month. d = new Date(); d.setFullYear(2010); d.setDate(1); d.setMonth(1); // February 1, 2010 Not going to argue this isn't silly, just explaining what's going on. Nice catch! Tip: Why you're doing like this I'm not sure, especially if you have the values immediately available when you create the date object. You'd be much, much better served just doing: d = new Date(2010, 2, 1); There is little to no room for error here - using setDate and setMonth is dangerous, even by changing the order there still is every opportunity in the world for it to mess up (ie: imagine trying to change the date to June 31).
Thanks for the Date(y, m, d) suggestion. I was parsing a date string into a date, so d.setDate( str.substr(a, b) ) made more sense for reading the code. Here's another tip: parsing ISO8601 like date strings: var arr = str.replace(/-T :.Z/, "-").split("-").map(function (item) { return parseInt(item, 10) }); var d = new Date(arr[0], arr[1]-1, arr[2], ...); If you have a UTC date in str, you can get a Date object with: arr[1]--; var d = new Date(Date.UTC.apply(null, arr));
I use this handy little snippet for getting the position of an element: getPos = function(obj) { var curleft = 0; var curtop = 0; if(obj.offsetParent) { do { curleft += obj.offsetLeft; curtop += obj.offsetTop; } while (obj = obj.offsetParent); } return [curleft, curtop]; }; You'll notice that it needs to drill through the object parents to get the real position. You can thank [Dean Edwards](http://dean.edwards.name)
Wait, you're only wanting to parse a date string into a date object? Why not just use the parse() method? string = "November 2, 2010"; d = new Date(Date.parse(string)); Also, if you're parsing dates, I highly recommend [Date JS](http://www.datejs.com/), it really fills the gap for date parsing which might be missing in the native javascript implementation. Very sexy date parsing there.
 new Date( Date.parse("2010-02-01") ) // Invalid Date Thanks for DateJS will have to look deeper into this. On a quick note: it fails for ISO8601 with milliseconds (e.g. "2010-07-29T15:28:16.471Z").
Thanks, that worked like a charm. I guess the question is then, what is the functional difference between element.offsetParent and element.parentNode? How is an offsetParent from a particular element decided? Are there any good writeups on understanding this anywhere?
[Premature optimization](http://en.wikipedia.org/wiki/Program_optimization#When_to_optimize)
Date JS will handle "2010-02-01" just fine :) It *can* handle "2010-07-29T15:28:16.471Z", but you will need to strip the milliseconds it seems (though I have not looked deeply enough into the documentation to see if it does contain a method for dealing with it). They have a great little input box on their homepage to test if the library will work in each case. Cheers!
2010-03-01 - When you set the month to February, since it's one day past the 28th, it became March 1st, then setting the date to 1 kept it at March 1st. Ran into that one before.
Right, but it'll only work today (or any 29th, 30th, 31th day of a non february month)
Oh... I guess I thought he meant SQLite with XML. I have no idea, I just read that XML was used for the purposes of generating a writeup out of pieces of information. I don't know anything about SQLite at this point, but it I could cut out XMl altogether and use a combination of PHP/SQLite and javascript, that might be one step simpler, eh? Thanks for your input.
Also, DST can be a problem if you later manipulate the date, like adding a day. Example (on my timezone): d = new Date(2010,9,9); // Sat Oct 09 2010 00:00:00 GMT-0400 (CLST) d.setDate(d.getDate()+1); // Sat Oct 09 2010 23:00:00 GMT-0400 (CLST) d.setDate(d.getDate()+1); // Sun Oct 10 2010 23:00:00 GMT-0300 (CLST)
thank you short and to the point... the overhead is what i want to know more about...
Mutable dates make about as much sense as mutable integers.
A method like .NET's [`DateTime.ParseExact`](http://msdn.microsoft.com/en-us/library/w2sa9yss.aspx) would be nice. It takes a date string and a date *format* string, allowing you to specify *exactly* what date format you want to use, rather than making you strip out segments of the date string to make it play nicely.
&gt;Javascript says it cannot open the pod bay doors, and sets the date to the closest alternative, March. No, that's not quite right. Try setting the date to 31, and then set the month to February. Now look at the date: d = new Date(); d.setFullYear(2010); d.setMonth(6); d.setDate(31); d.setMonth(1); alert(d) yields: Wed Mar 03 2010 Think of it this way: Javascript sets the date to 30 days (31-1) after February 1. And that is March 3. 
And if you want to keep going right past python, [CoffeeScript](http://jashkenas.github.com/coffee-script/) cleans the brackets and semicolons (and the functions, defs, returns).
http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf &gt; 15.9.5.36 Date.prototype.setDate (date) &gt; 1. Let t be the result of LocalTime(this time value). &gt; 2. Let dt be ToNumber(date). &gt; 3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)). &gt; 4. Let u be TimeClip(UTC(newDate)). &gt; 5. Set the [[PrimitiveValue]] internal property of this Date object to u. &gt; 6. Return u. 
Last week it was ruby-like syntax for js, this week it's python. Did I accidentally subscribe to r/AvoidingJavaScript or something? Personally, I think js has a wonderful syntax, as is. It's not perfect, but unlike some languages, it doesn't pretend that it is.
Don't know of any references offhand, but `offsetParent` refers to the element that acts as the context for an absolutely-positioned element. Say a node has CSS `position: absolute; left: 10px; top: 10px`. But ten pixels from what? To determine this, the element navigates up the tree, element by element, until it's built an ancestor chain. If all of those elements have `position: static`, then the offset parent is the document itself (or `document.body`, depending on the browser). Otherwise, the offset parent is the nearest element with a CSS `position` of anything other than `static` (i.e., `absolute`, `relative`, or `fixed`).
I think you forgot **synergistic** and **outside-the-box** in that list. But those are just a few of the prerequisites to a customer-driven, cross-functional emerging technology solution with high-level, industry-specific, information-based, proactive, paradigm-shift pushing the envelope with a value-added vision statement.
@ #4: Okk, just wanted to make sure :) By the by, before I forget. I don't think you have mentioned what sort format the output should be in. I initially thought you wanted an XML file to use in some preexisting system, but that doesn't seem to be the case? I meant that instead of having a template: Dear &lt;owner&gt; Thank you for bringing &lt;patientname&gt; into the VMTH today where every time the student changes a variable, such as &lt;owner&gt;, you'd generate a preview by taking the original template and replacing &lt;owner&gt; with the owner's name and &lt;patientname&gt; with the patients name and replacing the previous preview. You could instead preemptively slice it into separate text nodes like such: &lt;textnode&gt;Dear &lt;/textnode&gt;&lt;textnode&gt;&lt;/textnode&gt; &lt;textnode&gt;Thank you for bringing &lt;/textnode&gt;&lt;textnode&gt;&lt;/textnode&gt;&lt;textnode&gt; into the VMTH today&lt;/textnode&gt; where you'd store the empty text nodes (&lt;textnode&gt;&lt;/textnode&gt;) in their respective array and every-time the student changes a variable you'd go through the relevant array and just update those text nodes. It's a whole lot more work to implement such a solution, but it's something I find to be more "nice" and as such I felt compelled to mention the possibility. I might be reading it wrong, but it might be the same thing you think about here: &gt; I guess it could grab the first half of a text then grab a certain text element, then grab the second half of a text... &gt; &gt; &gt; Now if I want to GET the text from "intro," I only get "Thank you for bringing" since patient name is a child of intro, with it's own text child, instead of being a child of procedure. You don't mention what methods you used to get the text, but I guess you looped over the nodes of the intro element? Anyhow, this ought to work: intro = xmlDoc.getElementsByTagName('intro')[0] alert(intro.textContent) Displays an alert with the content: *Thank you for bringing name into the VMTH today* &gt; having the text up to "patient" as one text node, then having the text after "patient" as a second text node, and then grabbing both nodes with the customizable node between them Sort of, the arrays would contain "references" to the nodes in the preview that can be customized. The surrounding nodes would be left untouched. But, as I said, and should have stated in my original comment. It's easier to have a template string that you do substring replacement on, replacing the whole preview with the result afterwards. Hope that makes sense? I'm writing under the assumption that you want an interface that looks something like this: http://i.imgur.com/3JHRo.png If nothing else, it should at least illustrate how a "fill in the blanks" system gets complicated by sex.
They have pretty nice documentation of what parts of SQL that SQLite can handle. http://www.sqlite.org/lang.html XML can be used for a lot of things... there are people out there that try to use it for *everything*. You probably want to read up on [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest) and decide how you want to use that. Alternatively, you could set up a PHP script that generates an object with all your templates and possible fill ins. http://www.javascriptkit.com/javatutors/externalphp.shtml You probably want to use a [JavaScript framework](http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks) to ease development if you're in an environment that have mixed usage of Internet Explorer and W3C compliant browsers.
[The groundwork for that](https://bugzilla.mozilla.org/show_bug.cgi?id=507749) should, hopefully, be available in Firefox soon.
To be honest, I've seen this in a lot of packages, and in some cases it is useful (although I really don't think it is good "default" behaviour). VBA comes to mind. In fact, try putting "=DATE(2010,2,29)" in an Excel cell.
Got it, thanks!
XML is a markup language, thus giving you possibility to define your own data format. It is effectively a way to define data you need to pass around in the/ out from the system. It is not meant for data *storage* It could, however, be used as a data exchange format between server backend (in your case, database+php) and browser client frontend (javascript) through Ajax, but I'd suggest to look into JSON as a markup language instead of xml? it's more lightweight with less parsing involved on both ends.
The main purpose is to make switching between server-side and client-side development easier for Python developers. It just sucks every time to jump from Python to JavaScript and forget to add semicolons or write "if a &gt; 5:" just to notice that you need parenthesis and curly braces. The other purpose it to fix a really serious issue in JavaScript: "var". By default, variables should be local, not global. That's a well-known issue and especially newbies pollute the global namespace, but even experienced developers can sometimes forget to add use "var". Apart from that, every developer has his own opinion. Some like indentation, others prefer curly braces and semicolons. IMHO, you need to work with both for a few months/years to make an informed decision. ;)
This is good for simple purposes but lacks in the details. You might want to [take a look at the offset.js part from jQuery](http://code.google.com/p/jqueryjs/source/browse/trunk/jquery/src/offset.js).
Wow. That really was a googly. Thanks for sharing.
These are valid points, but I think tools like this don't really help any more than they hinder. I used to do a lot of server-side Python and client-side js at the same time. Sure, I had times when I'd write python in my js and vice-versa, but (as you mentioned) after a few months I really got the feel for both in ways I hadn't before. I was quite the python proponent before that time and had a low opinion of js (especially considering most of my prior experience with it was back in the good old late 90s), but by using the two side by side, I really came to appreciate js. The var issue is a hassle until you understand it, which is why it's one of the first things I teach my students (I'm a js tutor/instructor on the side). Though I must say, I don't think I've forgotten a var in over a year, so it's not a major problem once you get it.
it's very cool. I love the hackability of it though, as it's all javascript :) hint to hackers: onViewUpdated(x,y,hexColor) is the function you're looking for.
Check out Mr Doob's multi-user sketchpad: http://mrdoob.com/125/Multiuser_Sketchpad_HTML5 Not sure about the implementation, but I believe he's using websockets and Node.js as well.
about time
Here's the (slightly obfuscated) PHP script I've written to generate javascript to paste into the address bar: Remove the `if($rgb!="#000000")` check if you want to draw black, otherwise it considers black in the source image to be transparent, and writes nothing. $im = ImageLoadFromFile("reddit.jpg"); $i=0; for($x=0 , $x&lt;image_size_x($im) , $x++) { for($y=0 , $y&lt;image_size_y($im) , $y++) { $i--; if($i&lt;=0) { echo "&lt;br /&gt;&lt;br /&gt;javascript:"; $i=2000; } $c = ImageColorAt($im, $x, $y); $rgb = sprintf('#%06x',$c); if($rgb!="#000000") { echo 'onViewUpdated('.($x+1000).','.($y+150).',"'.$rgb.'");'; } } } edit: the boobs aren't mine.. by which I mean I didn't put them there. edit2: is it dead? did a thousand script kiddies descend using my code? Sorry if so :( I suppose I should have known better, but I still had some faith in reddit....
Now when is someone going to get opengl working with canvas?
Six months, judging by current development versions. 
Cool but slow, even in chrome. Why is Javascript so slow/sluggish, compared to other languages, say for eg PHP?
php is server side, javascript is client side. But I was expecting these to at least be playable. The second one came in at a whopping 1.7 fps in chrome.
That's really nice. 
&gt; Now when is someone going to get opengl working with canvas? Do you mean a hardware-accelerated Canvas, or OpenGL specific calls that work with Canvas? IE already has the former... I'm not sure of the status of other browsers.
Who is the proposal editor, Steve Faulkner?
do people seriously still talk about pagerank?
Same in FF. Float32 not supported? Hm.... I downloaded and ran Firefox 4 beta 2. Turned on hardware acceleration: 1. Type: "about:config" in the 'AwesomeBar' and hit Enter. - Search for "gfx.font_rendering.directwrite.enabled". - Select "gfx.font_rendering.directwrite.enabled" and double click to set the Pref to "True" 2. In about:config still, Search for "mozilla.widget.render-mode". - If its not there then add it. (Right Click anywhere and select "NEW" then "Integer". Add in the pref without quotes.) - In the next Dialog type in a value of "6" without quotes. 3. Restart The Browser. And I got 11 FPS, and it uses Float32's! Yay! 
Wow, that is really pretty awesome.
Never litter the global scope with more variables than needed. In library mode, my approach is to treat some functions as subroutines and others as methods attached to a namespace object for use later. (function(){ function subroutine1(){...} function subroutine2(){...} window.foo = { method1: function(){/*use subroutines if necessary*/}, method2: function(){/*use subroutines if necessary*/}, }; })(); In get-stuff-done mode, my approach is to treat all functions as subroutines. (function(){ function subroutine1(){...} function subroutine2(){...} // do stuff here })(); 
No they're all talking eigenvectors these days.
Good article but short :(
What's wrong with `new`?
It's the author is just speaking out of his ass. New gives you *prototype inheritance*, *performance benefits*, and it's about *language semantics*. He tries to argue that his reasons are because it can be confusing for someone moving to the language. Consider this: var x = foo(); What can you tell me from that? Well, you can say that x will hold the value to whatever foo returns. It doesn't say much other than that. var x = new foo(); Ah, okay, now you know that foo is of some object that is instantiated. You also get other things for free, like constructors. His argument about __not__ using function() is meh as well. You use the notation everywhere and it would be stupid to say "Well, avoid it in these cases, because you know... The idea of namespaces are much better". The function syntax is there for a reason -- Think of everywhere you use it; Anonymous functions being the most popular. My point is don't be a hipster coder and go against typical language formalities just because the language allows you to do so. *Listen to your code -- If you're fighting it, then you're doing something wrong.* He's write on document.write though. I do happen to enjoy namespaces as well, but his arguments need to be a bit more sound then saying "*which I do not want to explain*".
it's pretty wrong
erm. you don't need to use "new YUI()" to use YUI 3. `YUI().use("whatever", function(Y) { /* w00t w00t */ });` will work just fine. In unrelated news, ES5 actually *has* a strict mode, which doesn't include any of the author's suggestions, but does actually make the language significantly more regular and predictable. See http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/ for a friendly description of ES5's strict mode, or http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf if you're just hardcore. 
What's wrong with JSLint?
I thought you weren't allowed to make persistent menus at the top like you would go to jail or something. or at least, I considered doing it but figured I would be condemned, like it was a scrolling marquee or something. i wonder how long before everyone has to do that.
I thought you weren't allowed to call yourself a "ninja" or "rockstar" either :)
Why is he using button elements for navigation?
self-promotion is a sickness but sadly quite prudent in this twisted narcissistic duplicitous immodest "civilization".
 Netbeans really is a great editor for dynamic languages. 
Textmate is great at being reliable, powerful, and out of your way. Vim is great but requires a lot of dedication from the user. I think Textmate reads my mind.
I love gedit's autocomplete based on all open documents. Very very good editor!
another opinion
It should be `new Foo()`, surely. Otherwise you cannot tell if it requires a `new` or not. After all, if it does and you omit it, it pollutes the global object. I also don't use `new` myself. Except for things like `new Date()` of course.
Why not just use position: fixed?
I think textmate doesn't try to read my mind, and that's what I like about it.
Heh. The [last time](http://www.reddit.com/r/web_design/comments/c8cio/jquery_vs_javascript_the_masters_share_their/) I stumbled across a link to this dude's website he'd thrown up some untested and just plain broken bits of JS intended to replace jQuery animations with "blazing fast" plain JS. Except it didn't even nearly work. This time he's managed to massively overengineer `position:fixed`. Good work!
That's what I was wondering. Which brings up another question, why is it named Rocketbar if it doesn't go anywhere?
very cool, but what happened to canvy?
hah, yeah it's a shame that these things do always tend to turn into cockfests. I really enjoyed hacking it up though. I think the reduced toolset on this one means less potential for cockage, but we'll see.
that's my city! I don't know who did the monster, but it was awesome while it lasted :)
my monster! who deleted my monster :(
cool, those were my connected boxes too :)
Some feedback - you lose everything if you refresh, so new users can't see cool drawings - it just looks like white space to them, and so they start drawing over it. Might want to preload the canvas with the current state.
[Easy](http://canvaspaint.org/blog/2007/01/saving-images/)
I drew tits and someone is editing it
I see the problem, but you could (perhaps) set the clients to send back the image every n seconds, and only update the server if 2 or more clients agree on the image to within a tolerance of M pixels. You don't need to push the image back to all clients, it's only to be used as a starting point for new clients. This also means that n can be quite high - every 10 seconds or so. It would mean that new clients would have a slightly out of date image at the beginning, but that's better than a blank screen.
"I've thought up these rules and I won't go past hand-waving to justify them, but here's a hint so you can puzzle out some nobody's opinion ..."
another screenshot: http://i.imgur.com/LNcte.png edit: more: http://imgur.com/iMlno.jpg
How about if you requested the canvas from two random "players" and sent that to the newbie?
&gt; For the newly connected client to be fully brought up to pace yeah but you don't need new clients to be perfectly up to date, just to give them enough of an idea that hey, there's a load of really cool mountains right there so don't scribble all over them. But for future canvas applications I can see that a nice syncer would be handy.
what language do you use for serverside stuff?
magic, got it. I need to learn node.js.
Function declarations are fine (he suggests using function expressions always). Just try to only use them in places where the ECMA spec says they belong: in your main program body or a function body, not within blocks, if statements, while loops, for loops, etc. Do this and you won't get any unexpected behavior.
I'm having a hard time getting into Eclipse, I and my coworkers want to use it so we can all be on the same IDE and share workspace configurations, but editing over FTP and SSH were problematic. Does Aptana address this? Does it still accept all the other addons (JS, php, environments, etc?)
window.location is a little wacky, in that you can't change it without changing the page location. You can use it to read the current url, change the current url, or reload the page. There are plenty of libraries out there with custom parseUri functions, or you could write your own, but you don't want to. If you really want to use window.location however, you can always add an iframe, give it the location you want and use its window.location object (This is not the greatest idea however, for many reasons). [here's a good write-up of location's properties and methods](http://www.elated.com/articles/using-javascripts-location-object-to-work-with-urls/) [here's an ancient tutorial that shows how to use a frame for a second location object](http://docs.sun.com/source/816-6408-10/location.htm) (Note, this is from the 90s, so you may need to tweak it) **EDIT**: [Here's a simple parseUri library](http://blog.stevenlevithan.com/archives/parseuri), though if you're using a framework, something simiar is probably built-in. **EDIT2**: Looks like you already found the older version of the parseUri library, you should probably just use the new version I linked you to and be done with it. It's released under an MIT license, so you shouldn't have any problems using it with whatever you're doing.
You don't need to build this, it's already included in javascript. The location object is a global object...erm...just start using it. http://www.w3schools.com/jsref/obj_location.asp
Well, you see, I can only use the current document's location, and if I change it, it will reload my page - not what I want. I want to use this object with a URL that is not related to the current document.
This is really weird, there is no way to actually re-use javascript's default Location object? I'm really used to doing *anything* I want while I'm writing Javascript, and here's something that is a small mystery! I wonder why it was implemented that way
http://blog.stevenlevithan.com/archives/parseuri
It was implemented back in the good old netscape days and is part of the BOM API, not core js. Hence, no 'new Location(href)' or anything of the like. js is an awesome language, that lets you get away with almost anything, but the browser environment and the DOM/BOM APIs kinda suck. This is why no one (other than Crockford) took js seriously until the advent of AJAX and libraries like jQuery.
speaking of jquery, if you are using it, you might want tot check out [jquery BBQ ](http://benalman.com/projects/jquery-bbq-plugin/)
Looks sweet, however I rarely use jQuery, I'm an old-school DOM masochist :)
I don't think you can do that in javascript (I mean you can do it obviously, but not with the intended results). These aren't namespaces like you would find in other languages... even though it's under the same "namespace" as it were, you still need to refer to them using `NAMESPACE.stuff`.
Wow, great!
1. There are a few ways you can accomplish namespacing in JavaScript. Some prefer the way of long but organized namespaces like `APPNAME.env.ua.browser` or `APPNAME.util.Cookie.get`. This method allows for very organized code and makes browsing through it in most inspectors a breeze. You could also the route of YUI3 where everything hangs of the YUI instance like Y.Module1 and Y.Module2. I prefer the first method (longer) method mainly because of its benefits in the organization of code. For standard library code like jQuery, YUI, etc. I prefer the shorter method. 2. You should be able to access NAMESPACE.helpers from within your `someMethod`. However, I see in your `someObject` constructor you're trying to assign a `helpers` variable to `this.helpers`. Remember, `this` in that case is referring to an instance of `someObject`, not `NAMESPACE`. For example: APPNAME = {}; APPNAME.ui = {}; // "Class" APPNAME.ui.Overlay = function () { this.visible = APPNAME.util.foo(); } APPNAME.ui.Overlay.prototype.visible = false; // Singleton APPNAME.util = { foo: function () { return true; } }; var myOverlay = new APPNAME.ui.Overlay(); myOverlay.visible; // true
By the way the actual reddit button has some css issues. Would like to implement it, but would be great if those could be fixed. How open source is reddit?
2. Using the `NAMESPACE.helpers.etc()`. There really isn't any magical facility in JavaScript to save you from typing all that stuff all over again. The only thing you can (and should) do is to save references to objects in namespace to local variables, like so: NAMESPACE.someObject.prototype.someMethod = function () { var helpers = NAMESPACE.helpers; /* ... */ return result; } Even better idea would be to use a closure when adding new objects to the namespace - this way you don't have to create that reference in every single function call (+ you can add "private" functions). var NAMESPACE = { ... }; (function () { var log = NAMESPACE.helpers.log, /* or if you are going to use lots of functions from NAMESPACE.hepers */ helpers = NAMESPACE.helpers; var SomeObject = function (v) { this.value = v; }; SomeObject.prototype.someMethod = function () { helpers.log("accessing SomeObject's value"); return this.value } NAMESPACE.SomeObject = SomeObject; })(); (at least that's how I prefer to do it) 
Thank you for your reply! The solution you proposed is in fact *exactly* the one I'm using right now! I didn't write it here because I thought it wasn't very elegant and I didn't want to influence you :P
How about this (not very tested): var my_location = window.location.toString().match(/(\w+):\/\/([^:\/]+)(?::(\d+))?(\/?.*)/); my_location should now be an array looking like this: [ "https://example.com:4545/some/path", "https", // protocol "example.com", // host 4545, // port (undefined if not specified) "/some/path" // path (undefined if not specified) ]; 
Isn't elegant? I've never considered it not elegant :D I'm using it in conjunction with something like [sprockets](http://getsprockets.com/) which together make a nice dependency management system. I like that I can define all "external" stuff I need in a script upfront and it gives me a way of implementing both public and private methods easily.
&gt;Why is Javascript so slow/sluggish, compared to other languages, say for eg PHP? Except that PHP is a *lot* slower than JavaScript (running in a modern engine). PHP is even a bit slower than CPython aka really slow Python.
let's change path to "pathname" and then rename the first one to "href". Then we can parse out the stuff after the ? and before the #, call it "search". The part after the #? Call it hash of course! But include the "#" in it. If only this was somehow built in.
http://github.com/aaronbassett/Url.Parse
awesome, I'm totally in. Reminds me of [the5k challenge](http://www.the5k.org/) from way back. What's the deadline?
For js in browsers, the protocol, host, hostname, port, pathname, search and hash properties are present on HTMLAnchorElement. So, if you create an 'a' element and set its href property to the URI you want, some of the parts of the URI will be available via those properties. A full parser would be better, but maybe you don't need a full parser.
This has my vote. It's really short, and it does the job correctly. You can't really ask for much more than that. 
&gt; window.location is a little wacky, in that you can't change it without changing the page location. That isn't entirely correct: html5/Web Applications added `window.history.pushState` and `window.history.replaceState` which behave similarly to setting the hash of `window.location` but allow whole-URL replacement.
Yes, those are all members of the location object, but the point is that you cannot set window.location.href to some arbitrary URL without it triggering the browser to load it. As far as I know you cannot instantiate your own copy of the location object, so this isn't helpful for the OP. Perhaps my use of window.location.toString() in the previous post didn't make this clear, but you can of course use the regex on any arbitrary string. Edit: Did you perhaps mean this? var anchor = document.createElement('a'); anchor.href = "https://example.com:4545/some/path?foo=bar#baz"; /* anchor now has the following properties (among others): { protocol: "https:", host: "example.com:4545", hostname: "example.com", port: 4545, pathname: "/some/path2, search: "?foo=bar", hash: "#baz" } */ 
There's a related question on stackoverflow: http://stackoverflow.com/questions/2836174/generate-canonical-real-url-based-on-base-href-or-location
Instead of an iframe you could just use an anchor: var a = document.createElement('a'); a.href = 'http://google.com/?a=b#foo'; a.hostname; // =&gt; 'google.com' a.pathname; // =&gt; '/' a.search; // =&gt; '?a=b' a.hash; // =&gt; '#foo' Tada!
But for obvious security reasons they don't allow replacing the location with one that isn't relative to the one the script is executed on, do they? That kind of functionality would allow for all sorts of exploits.
&gt; But for obvious security reasons they don't allow replacing the location with one that isn't relative to the one the script is executed on, do they? Why wouldn't they? The only thing they wouldn't allow is to change the URL's domain (is that what you meant?) but that more than makes sense. And indeed, in webkit you can pushState an absolute path, but trying to pushState a different domain yields a DOM exception `SECURITY_ERR` which is defined as: &gt; If an attempt is made to perform an operation or access some data in a way that would be a security risk or a violation of the UA's security policy. (so at the end of the day, it's not even a standardized error behavior, it's an UA decision)
Oh true! excellent point. Sorry about that.
I have only gotten up to 4, but I think it should be noted that it totally fails to actually explain live and delegate, which is what causes the majority of the problems with them. .live instead of binding an event to the actual element, binds the event to the document. Then when every event [bubbles](http://www.quirksmode.org/js/events_order.html) up to the document, the list of "live events" is then checked to see if there is one that matches the current event. This is why you can't use any of the DOM traversing functions to select the elements, _this_ is checked against the selector you passed in to jQuery when you setup the live event. This also mean than if you have in the bubble chain of the event anywhere a "stopPropagation" your live event will never fire. .delegate works the same way, the difference is that the event this time is bound to whatever you pass it as the first argument. so if you do $(selector).delegate('.someClass' ... what you are doing is binding to 'someClass' and the event will fire when the bubble hits it. The part about having a "preventDefault" before it hits this event remains the same.
Thanks for saving me from having to explain this. 
That's a really near work-around, and actually looks practical.
Dude, that's right there is an wesome pseudo-location object right there! var a = document.createElement('a'); a.href = 'http://www.reddit.com/r/javascript/comments/cwufo/i_want_to_create_an_object_like_the/'; a.pathname; // /questions/2836174/generate-canonical-real-url-based-on-base-href-or-location usable and elegant! 
By "relative" I meant relative to the domain, yes. Of course you can pass an absolute path as long as it's on the same domain.
http://enigma.stackulator.com/cosketch/cosketch.htm Scribblings currently expire in an hour so there may be nothing there.
My goal is to build a Tera-canvas (a million pixel by million pixel virtual-canvas multi-user drawing area). So storing all the messages across the thing works for me. I plan on pulling out small "tiles of history" (brush strokes) as the user pans their 600x400x1 hour window around the "Tera-Canvas" (ala online mapping programs). Users will only ever get a small portion of the total number of messages (one tile/hour worth) at a time. 
My guess is so that you can have a grace period where the menu doesn't follow the window. I really dislike when sites do that, though. Like the new JIRA.
Personally I would prefer not having 'new' in there. I like the idea that you're just essentially creating factory functions, rather than the arbitrary mix of factories and constructors you get in something like C++.
That was like listening to paint dry.
interesting problem and approach. 
the SQLServer (starting with 2000, I guess?) has something like this, they're called updategrams. except it doesn't do DDL.
Seems pretty heavy on the canvas...didn't realize so many people were good at canvas animations.
Canvas its an option - not a requirement. 
Feels somewhat not pure JS when you throw Canvas into the mix. Then it's just like doing flash animations. Would be cool to have a non canvas competition.
Much to my surprise this is actually about making code more readable. Good article.
&gt;(its really just one step up on the food chain from the widely discredited goto statement). Nope. It is actually impossible in code to statically figure out how a label is reached by a goto. It is quite possible to diagram an if statement. 
How is using a JS 2D graphics API not pure JS?
A "pure" compo would be pretty dull since there would be no visible outputs. JS itself doesn't even provide something like `printf`.
Huh? Create DOM Element, use innerHTML to put in text.
Just like the Canvas API, the DOM API isn't part of core JS. Using the DOM API isn't any "purer".
Well Canvas has only been possible until recent with HTML 5, we have had document.getELementById since 2000. I think of the DOM and JavaScript as being a complete package. Here is my &lt; 1KB pure DOM and JavaScript example, silly I know: javascript:var fontSizeBase=8;var intervalId=null;function randColor(color){return(color+=[0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f'][Math.floor(Math.random()*16)])&amp;&amp;(color.length==6)?color:randColor(color);};function fadeIn(elem,i,callback){var opacity=0;intervalId=setInterval(function(){opacity+=.1;if(opacity&gt;1){clearInterval(intervalId);if(typeof callback=="function")callback();}elem.style.opacity=opacity},100-(i*Math.pow(2,i/3)));}function insertItem(i,limit){if(i&gt;limit)return;var thisObj=this;var elem=document.createElement("div");elem.style.fontSize=(fontSizeBase+i)+"px";elem.style.color="#"+randColor("");elem.className="drowsapMorphed";elem.style.opacity=0;elem.innerHTML="Reddit Rainbow";document.body.insertBefore(elem,document.getElementById("header"));fadeIn(elem,i,function(){thisObj.insertItem(i+1,limit);});}insertItem(0,20); Paste into the url field in your browser on this page and hit enter
Does it count if I print out the JS source and make origami? 
 function a(b){return b} &gt; [Bad coding practices, while not promoted, are allowed.](http://js1k.com/rules) Since they don't care (but we should anyways), set *b* as a global variable. So: function a(){return b} If not necessary, why invoke a function at all? c=b; *EDIT:* Yeah, good. Downvote, delete your remarks, and your account so everything I said does not make sense.
This is an interesting challenge. Designing under 1k is tough if you're going for something complicated. If you're using UTF-8, that means you're restricted to only 1024 characters in your code. To put that into perspective: function x(y){return y} The above statement is 23 characters long, which is about 2.2% of the maximum size the script can be. This adds up quickly...
&gt;I think of the DOM and JavaScript as being a complete package. But it isn't. There is no DOM (or BOM) in V8, Rhino, TraceMonkey or in Flash's AVM2. It isn't part of the ECMA 262 3rd edition standard. Just like Canvas, the DOM is part of a separate standard. The only difference is that it's an older one. It isn't a matter of purity.
I see your point. I personally would have liked to see less Canvas and more DOM based interaction. I think the Canvas gives you too much for free in this type of a competition.
I built [demo #42](http://js1k.com/demo/42). I'll just repeat my blurb from the demo list rather than re-explaining: &gt; It's a fancy dancy clock. The innermost, thickest, hand is the hour hand. Attached to the end of the hour hand is the minute hand, and the second hand is attached to the end of that. It's 966 bytes. There's another 20-50 bytes to be saved in there. I may re-submit with such savings but the standard of entries seems to be sky-rocketing way beyond what I'm capable of; I'm not sure it would make much of a difference to my chances or winning.
I did this [here](http://www.reddit.com/r/javascript/comments/cy44p/hey_reddit_please_look_at_a_script_xml2sql_i/) I am not sure I like the result.
Interesting is flattering, thanks. I consider it outright dirty. 
Heh. This reminds me of how I found out that in ActionScript 3.0 empty `XMLList`s are truthy, even though empty arrays are not. I agree that if-blocks can make variable assignments less readable, but I find inline conditionals easier to read than the semantic overloading of using boolean junctors. I also don't like expressions (e.g. `a &amp;&amp; b()`) without assignments because they look like assignments relying on side-effects. Code should be explicit -- side-effects aren't. I find that you can avoid most of the if/else ugliness by keeping your code `DRY`, i.e. make your functions smaller and thus create more of them. This is especially true for deep nesting. EDIT: Upon further consideration I'm not so sure whether empty arrays are falsy in AS3: they're definitely not falsy in JS (because they are objects).
 alert("Hello world");
I really enjoyed this one, man. Good work and good luck in the contest.
I had to look up DRY so here it is. http://en.wikipedia.org/wiki/Don't_repeat_yourself (Copy and paste the link - reddit doesn't like apostrophes in URLs)
please do.
This seems like it might be a good use for [GWTQuery](http://code.google.com/p/gwtquery/), a Jquery clone written in [GWT](http://code.google.com/webtoolkit/).
Your HTML markup isn't valid. Remove the surrounding &lt;ul id="mycarousel" class="jcarousel-skin-menu"&gt;&lt;/ul&gt; and move the id and class attributes to the div with the class "jcarousel-container". Correct markup: &lt;div id="jcarousel-skin-menu"&gt; &lt;div id="mycarousel" class="jcarousel-container jcarousel-skin-menu"&gt; &lt;div class="jcarousel-clip"&gt; &lt;ul class="jcarousel-list"&gt; &lt;li class="jcarousel-item-1"&gt;&lt;a id="kelsthumb" href="kwinterkorn.html" title="Kelsey Winterkorn"&gt;&lt;span&gt;Kelsey Winterkorn - Branding + Print Collateral&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-2"&gt;&lt;a id="jessthumb" href="jmveronica.html" title="Jessica Mary Veronica"&gt;&lt;span&gt;Jessica Mary Veronica - Branding + Website&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-3"&gt;&lt;a id="travelnmthumb" href="travelnm.html" title="Travel New Mexico"&gt;&lt;span&gt;Travel New Mexico - Magazine Design&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-4"&gt;&lt;a id="serenethumb" href="serenetea.html" title="serene*E*tea"&gt;&lt;span&gt;serene*E*tea - Package Design&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-5"&gt;&lt;a id="joinpartythumb" href="baylordems.html" title="Join the Party"&gt;&lt;span&gt;Join the Party - T-Shirt Design&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-6"&gt;&lt;a id="invisionthumb" href="invision.html" title="InVision"&gt;&lt;span&gt;InVision - Logo Design&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class="jcarousel-item-7"&gt;&lt;a id="dailylobothumb" href="dailylobo.html" title="Daily Lobo"&gt;&lt;span&gt;Daily Lobo - Newspaper Layout Design&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="jcarousel-prev" style="display: block; visibility: visible;"&gt; &lt;div id="scrollupbtn"&gt;&lt;/div&gt; &lt;div id="scrollupfade"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="jcarousel-next" style="display: block; visibility: visible;"&gt; &lt;div id="scrolldownbtn"&gt;&lt;/div&gt; &lt;div id="scrolldownfade"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 
Heya, thanks so much! I fixed the markup, and (from the tutorial page) I put the "mycarousel" id to &lt;ul&gt;; this is also from just looking at their example pages. Even with these changes, though, I can't seem to get the script to work, not even shakily like it did before.
The link from you first post doesn't seem to work anymore. Could you fix it so i can have a look at you updated code? btw: i'm the author of jCarousel ;)
Oh wow, hi! Sure thing, I'm uploading it right now. It's taking a little while because the internet connection where I'm at currently is extremely slow. I'll reply quickly again once it's all up. PS. Sorry for butchering your code :(
Done; just now finished uploading
The problem now is, that you don't specify a height for the clip (.jcarousel-clip or better .jcarousel-clip-vertical). Currently the height is set to auto in your css, that means it has always the same height as the inner &lt;ul&gt;. So, the the &lt;ul&gt; never overflows the clip and the buttons are always diabled. Since you have a vertical carousel, its a bit difficult to have a dynamic height for the clip. The only possibility i see to set it via javascript, something like: &lt;script type="text/javascript"&gt; function setClipHeight(selector) { var c = jQuery(selector), h = parseInt(c.find('.jcarousel-prev').position().top) - (parseInt(c.find('.jcarousel-next').position().top) + c.find('.jcarousel-next').height()); jQuery('#mycarousel').find('.jcarousel-clip-vertical').css('height', h + 'px'); var j = jQuery(selector).data('jcarousel'); if (j) { j.reload(); } } jQuery(document).ready(function() { setClipHeight('#mycarousel'); $(window).resize(function() { setClipHeight('#mycarousel'); }); jQuery('#mycarousel').jcarousel({ vertical: true, start: 1, scroll: 1, }); }); &lt;/script&gt;
I forgot to mention that you have to move the id="mycarousel" from the &lt;ul&gt; to the container &lt;div&gt;: &lt;div id="mycarousel" class="jcarousel-container jcarousel-container-vertical"&gt;
Thanks so much! that worked. A couple of issues with the changes: it definitely works now in Firefox (on a Mac computer), but it doesn't for Opera, and in Safari it repeats several of the &lt;li&gt; items. I haven't had the chance to check it on IE or Konqueror yet. Would these differences be something I can address in the CSS, or would I have to adjust the JS? edit: currently uploading edited documents, might take a while before it shows up edit2: finished putting the files up
Wow, thats a very strange behaviour in Safari/Chrome (Opera 10.60 works fine for me). To be honest, i couldn't find out whats the reason for it... Could you try to set a height for .jcarousel-item (the &lt;li&gt;'s) and remove "start: 1" from the jCarousel options?
OK, just did that and finished putting them up. It completely works now for Safari and Opera, and I'll have to check it on Chrome, IE and Konqueror later at another computer. I probably won't be able to do that tonight, but I should within the day. If any issues come up with any of those browsers, would you like me to contact you? Either on here or some other way? Thanks again for all the help! It was greatly, greatly needed :)
The official issue tracker i'm monitoring regularily is on GitHub: http://github.com/jsor/jcarousel/issues Feel free to file an issue there. 
Did you see the [GettingStarted](http://code.google.com/p/gwtquery/wiki/GettingStarted) wiki? It even links to the "proper" maven approach, [CreatingNewApplications](http://code.google.com/p/gwtquery/wiki/CreatingNewApplications). I don't know, but GWTQuery seems a bit encumbered compared to jQuery.
Well being in java it's not going to be quite as simple to use as jquery, but also being in java it would have better object inheritance support. It was just a suggestion.
Also see: * LowPro for jQuery * moo4q
And a fine/interesting suggestion at that.
I have a hard time using something on a large application that has no native inheritance structure. I'd recommend Closure or Mootools for doing large applications.
Looks like you already got it working, but I'd just throw 2 things out there: 1) My browser is tall enough that the carousel becomes unnecessary... making the up/down arrows confusing... 2) Also, if I shrink my browser so the carousel actually scrolls, the buttons work the opposite way from what makes sense to me... I'd think the "down" arrow would pan "down" the list (thus scrolling the content up a bit)... Instead, I have to click the "up" arrow to get to content at the bottom... very weird to me... maybe it's just me? But .. that's my 2 cents..
Thanks for the input :) As far as tall browsers go, I have some projects I need to throw up, so at least it will all eventually fill up, making my navigation's carousel necessary. Also, fixed the scroll buttons to make more sense
The author should fix the contrast and he should also use headings to break up the content instead of `hr`s. And the article itself... well, jQuery is a base library. As such it takes care of normalization and other "low level" tasks. It does this very well. However, if you want to build bigger applications you'll need your own core which sits on top of the base library. A small core which allows things like registering/starting/stopping modules, logging, and passing events around only needs about 5kb of code (or something like 300-400 lines of code). [Video: Nicholas C. Zakas — Scalable JavaScript Application Architecture](http://developer.yahoo.com/yui/theater/video.php?v=zakas-architecture)
First, put more items in there for testing, just duplicate a few. The movement space isn't covering each item's height and space between so that needs fixing. Do that and then we can do more testing. Where's the bouncing?
tl;dr: Building large applications is hard. jQuery doesn't include an inheritance/class setup. Author (like many programmers) ignores that there are existing solutions for this and insists he'll have to roll his own. Large applications are already being built with JavaScript and jQuery, his argument is moot.
the deadline is september 10th.
Try $('div.DivGrouping span.ClassB').text() or even more simply $('span.ClassB').text() Also make sure you check out [the selector docs](http://api.jquery.com/category/selectors/) and go through the examples.
interesting. might be a good point. would be easier to accept/understand if they provided a solution that was not jquery-based that demonstrated the benefits/engineering superiority etc. 
$("a.button").find("span:eq(1)").text()
That can get annoying when every ad requests permission. You'll end up resorting to turning it off completely, defeating the purpose.
[Yes] [No] [Never for this domain] plus there'll be a setting to just never ask somewhere.
I will give you the benefit of the doubt and instead of just downvoting you I will ask you if you have ever read the specs or at least a summary of the main points describing what class names and IDs are for.
And what if he uses that button several times in the DOM? WHERE IS YOUR ID NOW?
You should always use lowercase classes and IDs... &gt;All CSS syntax is case-insensitive within the ASCII range (i.e., [a-z] and [A-Z] are equivalent), except for parts that are not under the control of CSS. For example, the case-sensitivity of values of the HTML attributes "id" and "class", of font names, and of URIs lies outside the scope of this specification. Note in particular that element names are case-insensitive in HTML, but case-sensitive in XML. 4.1.3 Characters and case http://www.w3.org/TR/CSS2/syndata.html
The problem is that IDs are unique, and this piece of code may not be.
As a socialist, javascript programmer, and lover of terrible puns myself, you just made my week.
I suppose that would work, but I still have my doubts as to it working well. It would be better if it could only take over full screen if the user has shown intent, such as clicking a button. Similar to how flash works.
Wow quite a heated argument in here. Anyway, the entire point of jQuery's selector engine is to allow you to select DOM nodes using pretty much any CSS style selectors. So in this case, you can do: '.DivGrouping .ClassC' meaning find the class DivGrouping the a child/grandchild... class called ClassC or simply '.ClassC' which is just, find class ClassC or if you want to get crazy, something like: '.DivGrouping &gt; a &gt; .ClassC' should also work once it is selected, depending on if you actually want the text, or you want the markup you would do .text() or .html() Edit: also, despite what leptons is saying, the way we program for the web is constantly changing and evolving. We have much better ways of doing it than we did 15 years ago. jQuery absolutely lets you keep your code and mark up separate, and it does a very good job of it, given what you are working with. Unfortunately CSS is horrible at keeping markup and layout separate. You can theoretically use huge selector chains, or unique IDs or other techniques to keep your CSS separate from your JS, but in many cases it is infeasible or even impossible. You should however use IDs for selecting whenever possible, as it is that fastest way to select an element. 
Hmm that is a lot closer than I have gotten before, but still does not work. I will try to explain my problem a little bit better and I'll throw up a model of what I am trying to do once I get out of class, grrr physics is always interrupting my programming. I am using [zero clipboard](http://code.google.com/p/zeroclipboard/) for a copy to clipboard. Zero clipboard attaches it self to a class of divs and places a flash movie over the divs when you hover over that specific div. When you click on the div (with the flash movie ontop) a piece of javascript runs. In this javascript you can specify where you want the zeroclipboard to copy text from. In all the examples on zero clipboard they grab the text using clipText(this.innerHtml). The problem with using those jquery selectors is that when you call clipText($('span.ClassB').Text()) is that it grabs the text from every ClassB span. The only solution I can think of at this point is to write a parser of the html from the outter div (this.innerHTML) and copy the string within span ClassB. I'm sorry if I did a terrible job explaining what I am trying to do, using incorrect terminology and such, but I am trying. Thank you for all your help!
I did not know that, I guess I will start to go back and change my code. Thank you! 
Your dogma is as unflinching as it is incorrect. Do you think Ids shouldn't be used in CSS because that's the "code's domain?" How do you keep your code DRY without using classes to identify common pieces of the DOM? Also, classes and CSS are not the same, so stop conflating the two. Also, please feel free to show us a demonstration of your code dogma on a successful website.
Blacks can't eat here! Whites only! Times change man. Maybe you should catch up.
I think you want $(this).closest(".ClassB").text() inside the click() function on the element being clicked? Not sure if the flash is click-jacking the click event though... edit: so that would be in untested-code: $(".DivGrouping").click(function() { clipText($(this).closest(".ClassB").text()); }); 
I hope you're still enjoy the web 1.0
You're welcome, It's not a big deal, just semantics.
It's a bit hard to understand what you want to do in plain English. It sounds like you're saying: "When the user clicks the div with class 'DivGrouping', then I want to use zero clipboard to place the text contained with in the span with class 'ClassB' in the user's clipboard." If this is indeed what you want to do, then: $('div.DivGrouping').click(function() { var text_to_copy = $(this).find('span.ClassB').text(); clipText(text_to_copy); }); So you start by adding adding an event listener to the main div. Basically, when a user clicks on it, the callback function passed to the click() method is executed. Within the context of that function, "this" refers to the DOM element that was clicked on, i.e. the div you attached the listener to. By doing $(this) we pass the DOM element to jquery so we can use all those fun jquery methods. I used find() which searches through all the child elements and matches them to the selector. Then text() grabs the text within the node you selected. Finally we pass that value to your clipText() function there. Hopefully this works and is remotely helpful.
&gt;The problem with using those jquery selectors is that when you call clipText($('span.ClassB').Text()) is that it grabs the text from every ClassB span. I'm not sure that's a "problem"....that's what a class selector is *supposed* to do: select every element in a class. If you want to select a particular element, you should use an ID or some other way of singling it out from others in the same class/type/etc; like it's position in the DOM, property detection, or any of the many other possible methods.
Red Army will prevail!
[object Object]
The css would be epic #nav_item_1, #nav_item_2, #nav_item_3, #nav_item_4, #nav_item_5, #nav_item_6, #nav_item_7, #nav_item_8, #nav_item_9, #nav_item_10, #nav_item_11 { float: left; padding: 0 8px; } etc.
&gt; So you can use $ to look up your DOM elements? It's just wrong, plain wrong. Until you can sufficiently justify this statement, you will have the minority opinion. People are getting awesome stuff built using these techniques and I've only seen an improvement in JavaScript maintainability. &gt; IDs as they were intended instead of using class attributes how they WERE NOT intended But IDs are for unique elements. Classes are great for identifying a chunk of markup that exists in many different places. His example doesn't imply that ClassA and ClassB are entirely unique. Are you suggesting that every single DOM element should have an entirely unique ID, and we should have to manage those unique IDs and only modify elements that have been retrieved uniquely? &gt; Best practice is to separate code and layout. I think you need to clearly define what you mean by this, in the context of development. Why are re-usable snippets of structured and stylized DOM fragments so abhorrent to you? &gt; I am not preaching dogma, I am citing best practices. Yet not a single citation was made. 
Someone please explain for those of us with half a brain. I understand the code, but not the joke.
Marxist/Socialist pun - *social*classless society/markup.
And wouldn't you want to give it a name that is easily identifiable and signifies what the DOM subtree might be doing? Wouldn't it be useful to share that meaning between how the subtree is stylistically rendered and it's role in the function of the web application? There's no reason it shouldn't and spouting "best practices" only predicated on ought/should serve no one. Evidence or gtfo. 
Stop conflating CSS with the class attribute of an element.
&gt; For what it's worth I've been writing JavaScript for decade__s__, and rarely use jQuery. Is that so? &gt; http://en.wikipedia.org/wiki/JavaScript &gt; Appeared in 1995
You sir, get an upvote.
Try this on Reddit (or any site with JQuery) - paste the following in your address bar. javascript:$('*').removeClass();
$("#Courtney_Love").removeClass(); Hm, doesn't seem to do anything.
http://en.wikipedia.org/wiki/Class_struggle except instead of society it's the DOM
Fixed it, and added another item, will put in some more. The bouncing was fixed thanks to jsor :) The space inbetween items is intentional, but I'm gonna be tinkering a bit more
or just nav li { float:left; padding:0 8px; }
pseudo-classes. `:nth-child` forever!
[html5](http://html5doctor.com/nav-element/)
Doesn't work, at least in Firefox - the page is replaced with [object Object]
try `javascript:void($('*').removeClass());` - worked for me using Vimperator and the jQuery plugin (which adds a $() object to every page (or reuses an existing one)).
You're weak
"she" - but you are certainly right otherwise.
thanks, that's a generous amount of time. If I manage to put together an entry I'll pony up for a copy of "Javascript: the good parts" as a prize, or amazon voucher to that value if the winner already has a copy.
ly typed
pshaw, like she'd use an underbar _and_ capitalize.
A menu wasn't the best example, but the concept still holds.
Yes. Since you seem to be using jQuery: [http://api.jquery.com/mouseover/](http://api.jquery.com/mouseover/) Also check out: [http://api.jquery.com/hover/](http://api.jquery.com/hover/) http://api.jquery.com is a fantastic resource, it covers everything jQuery can do. Any time you are working on a project with jQuery and you wonder if you can do something, or how to do it...that should be your first stop. Remember: the docs are your friend.
jQuery is NOT a "base library". jQuery is a good DOM library. I wouldn't put it in the same category as other "base libraries" like YUI or Dojo.
I haven't done much with ExtJS, but using firebug and console.log() instead of alert() may well prevent you from having an aneuyrsm. Or at least delay it a bit for you.
Reddit looks awful this way.
dood, its node!!!!!!!!!!!!!!!!!!!! IM WRITING A MVC WEB FRAMEWORK FOR IT. NEEDS MOAR MVC
The book 'ExtJS in Action' is an excellent resource to figure out Ext. 
I mean.. did you have a real question or were you just wondering if any redditors had experience with ExtJS ?
I found the [Ext JS books](http://tinyurl.com/2cyry4b) to be useful, in fact indispensable, for learning Ext JS. Try: * Ext JS Projects with Gears * Learning Ext JS * Ext JS in Action
Pages redirect to the result of javascript when you run it in the address bar, you have to either cast the result as void, or add ";void(0);" to the end to make scriptlets stay on the same page.
Yes, I have a lot of ExtJS experience. Do you have any specific questions? The ExtJS documentation isn't as newbie-friendly as the jQuery docs but it's actually quite good.
ExtJS is pure awesomeness. I found once you get the syntax down, the documentation is easy to follow. The examples page gives tons of useful snippets and [StackOverflow](http://stackoverflow.com/questions/tagged/extjs) can be quite helpful. Perhaps you could be a bit more specific as to what type of troubles you're having. Edit: URL format
in general innerHTML, although not standardized, will be the fastest solution. so best build up everything as string snippets in an array, call .join("") on that array and add the resulting string as innerHTML. For a large number of children it is usually advantageous to use event delegation (or live events for jQuery). Just register a click handler on a common parent and use the event.target field to find the element that was actually clicked on (you need a crossbrowser lib because IE doesn't supper event.target)
Go to the demo page (and tutorials, and others) and look at the example source code. That's how you learn to actually use it. The API docs used to have very little contextual information - like "how is this supposed to be used". It's gotten better though.
I am a professional ExtJS developer for [Insermo](http://www.insermo.com/) I'd be happy to answer any questions you have, but honestly the way I learnt was by simply diving into it headfirst and trying things out. Imagine something you want to create, find examples on the website similar to what you want to achieve, copy the javascript and make changes. However I'll say one thing, most ExtJS newbies make the mistake of not extending and namespacing their work, and when I finally discovered how it changed the way I worked with Ext. Say you want a grid that displays some data, extend the GridPanel class and set your options so you can reuse that grid in multiple places: Ext.namespace('MyApp'); MyApp.MyGrid = Ext.extend(Ext.grid.GridPanel, { title: 'My Grid', width: 250, height: 300, initComponent: function(){ var myStore = new Ext.data.JsonStore({ ... }); Ext.apply(this,{ store: myStore }); MyApp.MyGrid.superclass.initComponent.call(this); //important so the parent class' initComponent is called } }); now when you need to use that grid anywhere you can just use this and override any of the 'default' options if you need to: var grid = new MyApp.MyGrid({ width: 400, height: 300, }); hope this helps :)
Thanks, that's helpful for a start. I don't need to support IE at this point (it's a userscript I maintain that I also compile into a Chrome extension), but I should probably look into event delegation for that bit of extra speed gain...
I've got about 6-8 months of hands on development and 2 years of off and on experience with it. Grab a free trial of ExtJS designer + see if your company/employer will expense this book https://www.packtpub.com/ext-js-3-0-cookbook/book Designer helps in showing you how to write much cleaner apps while the cookbook gives you a better grasp of how to accomplish semi-complicated tasks. If your writing code like var myWindow = new Ext.FormPanel({ title: "My title", width: 300, items: [compoent1,component2,...] }); you will end up burying yourself in a tidal wave of spaghetti code and fucked up hacks. Alternatively is a tad cleaner and provides a lot more control over the creation of forms, panels, windows, and such: var myWindow = Ext.extend(Ext.Formpanel, { title: "My title" , width: 150 , constructor: function (){ mywindow.super.constructor.apply(this, arguments); //Do stuff post construction } , initComponent: function(){ //Logic specific to build the panel myWindow.super.initComponent.apply(this, arguments); } , initComponents: function(){ //Logic for adding pieces to the form myWindow.super.initComponents.apply(this, arguments); } }); //This code probably won't run without some debugging and actual functional code Last point, ExtJS framework is a empire of observable objects. Pretty much EVERY class is an observable or a component. http://dev.sencha.com/deploy/dev/docs/?class=Ext.util.Observable To understand this, add a override using Ext.Extend to a new component like fireEvent: function (eventName){ console.log("I am in myWindow and " + eventName + " was fired!); myWindow.super.fireEvent.apply(this, arguments); } Three pieces you need to know to be a ExtJS ninja is: Ext Observables, Ext Component, and the ExtJS way of making classes/objects. Once you get these three the next steps are to dive into lazy loading using xtypes http://dev.sencha.com/deploy/dev/docs/?class=Ext.util.Observable?class=Ext.Component Also I don't recommend buying Ext Designer. I use Komodo IDE and it costs about the same as the Designer tool but Komodo at least supports Python, PHP, Ruby support, and has a boatload of useful little tools while Designer just does ExtJS.
Just shave your head. Debugging problematic extjs can cause ulcers. It took me a while to get into the zen of extjs. You just gotta get over the hump. Eventually, certain esoteric non-helpful js errors from ext-all.js will become familiar and you'll recognize that you forget to define some field -- again. The chromium js debugger is pretty good, but it will fall down at some point -- extjs does a lot of dom generation and anonymous function passing and chromium will often not point to the right location. I prefer chrome and use it most of the time, but still have to fire up firefox/firebug sometimes. Don't use alerts. Use breakpoints in the debugger. Learn to love firebug breakpoints. Look at the stack traces and follow a deep extjs "bug" back up to your code to find out how didn't get the incantation right. :) 
Capitalist.
Looks spammy.
Don't forget about [document.createDocumentFragment()](https://developer.mozilla.org/en/DOM/document.createDocumentFragment) Create all your nodes in memory, attach them to the doc frag in memory then append your doc frag to the DOM. It's the method that jQuery (and probably the other big libraries) use behind their friendly API to make/insert DOM elements. To be used for good, not evil.
Yep, I've started refactoring a bit of my code to use documentFragments instead of documentElements... I feel really stupid for having not read about documentFragment until recently... thanks!
Mostly I learned it by going over the examples. The docs are good and horrible, in that they are a great reference manual, but only *if you already know what you are doing.*
Define spammy.
I did not ignore that there are existing solutions for this and did not insist on rolling my own. In fact, quite the opposite: I criticized people for rolling their own solutions in pursuit of "using jQuery". Perhaps best not to comment on the content of a post you said you didn't read.
Don't feel bad. Even [Resig didn't know](http://ejohn.org/blog/dom-documentfragments/) it was part of DOM1 until a little while ago. Knowledge is power!
If you spend enough time around any sort of JS chat, forum, etc...you inevitably get these SEO/"Internet Marketing" types coming in with JS questions. Generally the question is either really really simple, and could have been solved with a little bit of Googling or RTFM....or they have some really atrocious obscure script (or mish-mash of multiple scripts) and they want to know "why doesn't this work". These people are usually really lazy, have little programming knowledge (which is itself not a problem, it's that they don't even try) and generally the scripts they are working on do bad stuff like create a huge popup on the screen that the user can't close. Basically, they're lazy and care for nothing except getting their XSS, ad-serving, fake-antivirus etc scripts working. Or rather, getting someone else to get them working. TBH I can't blame the poster for thinking you might be one of this group as your question is really simple and could have been solved with a basic Google. Also, your code is ad-related.... it *seems* to be the *mostly* harmless kind of ad code, but who knows. This goes for PHP too btw.
jQuery is a DOM and Ajax library; it is hardly a base library, unless DOM and Ajax is all you mean by "base". A base library provides inheritance, dependency management, communication between components, and, indeed, other low-level functions. Dojo does exactly this, and much more, in its core; jQuery does not come close.
There's some good advice below, but my 2c: one of the nice things about Ext is that you can use Ext.get and Ext.getCmp rather than alert for parameters all over the place.
Oh, he's probably just a petit bourgeois individualist ;)
FTA (emphasis mine): &gt; jQuery is an entirely appropriate answer to so many questions, but it falls so short for large applications, **forcing you to assemble such a tenuous toolkit of your own**, that it simply isn’t a viable answer — or, in my opinion, part of an answer — for large applications. In your sidenote (after the conclusion) you do admit that large applications are being built successfully with jQuery and JavaScript MVC. So do you think it's part of an answer for large apps or you don't? I know it is, and with SSJS growing we will only see more.
Thank you so much for your reply, this works in Firefox but does not work in IE. I threw up an example page which I have been using to test everything out. http://www.gregmilitello.com/Example/multiple2.html Edit: I had messed up some syntax, so it worked in FF but not IE. Thank you so much!
&gt; I'm not sure that's a "problem"....that's what a class selector is supposed to do: select every element in a class. Haha I guess that is true, Its more of a problem in that it does not solve my issue.
This is more of a basic javascript tip. I would recommend you use firebug &amp; console.log().
Firefox -&gt; Firebug -&gt; console.log()!
I kind of alternate between the two. Alerts don't annoy me that much.
Diving in does seem to be the best way to do it, I guess. It's just the fact that there seem to be only a few, very limited examples available. I can read the manual until my eyes bleed, but it doesn't always tell me how to use two components together. 
Yea, I'm already very familiar with Firebug, and do use breakpoints. The issue though is I often need to make it throw an error just to find the line I need the breakpoint on. The code I'm working on is inherited, and massive. Things are broken out by file on the server side, but combined into one on the way to the client.
&gt; but only if you already know what you are doing. Exactly what I have found.
I think a lot of troubles people have learning ExtJS stem from a weak understanding of Javascript itself. I recommend you work through [these tutorials](http://ejohn.org/apps/learn/) from John Ressig which are the precursor to his forthcoming book [Secrets of the Javascript Ninja](http://jsninja.com/). Back when I was using ExtJS daily I wrote a [forum post](http://www.sencha.com/forum/showthread.php?7603-HOWTO-Pass-extra-parameters-to-a-callback-eg-a-msgbox&amp;p=42834#post42834) which showed my poor understanding at the time, but demonstrated how ExtJS had idioms to help in many common situations. In an unrelated note, I strongly recommend you don't try using ExtJS in an Adobe Air (HTML/JS not Flex based) app. I did that back when Air was brand new and it was a whole world of pain. Maybe Air has improved since then - in fairness it was a mistake for me to use such a new tech for a commercial project - but I learned that the hard way!
&gt; running about 500 of them Seriously? Can you not cut this down by at least an order of magnitude? 500 seems far FAR beyond acceptable. By that point is it not easier to just replace the entire contents of the page? Edit: I like that suggesting that doing basically the slowest thing you can do 500 times is perhaps not the best solution gets me downvotes. In this particular case there may not be much else in the way of options, but that does not make it a good solution.
Setting the innerHTML doesn't always take (sometimes is just a noop) is the parent element is already rendered. How is appendChild for performance? Also, I believe some DOM insertion functions doesn't work for table rows and cells in IE: you have to use the insertRow and insertCell functions.
I can't upvote this enough. If you've got 500ish DOM insertions, do it in a frag. Batching is the only way you won't piss off the browser.
Some of you guys are jerks here, no offence. I know very little javascript because I'm not a programmer. I've spent 3 days Googling and trying different things without any luck before deciding to ask here. Instead of helping me out with something very straight forward for you, you made me feel like shit, put me into a group of lazy morons based on some stereotypes without no prior knowledge of my project. **FlintFireforge** was helpful and even though he did not give me the exact solution, he pointed me in the right way. Instead of asking him to dumb it down for me I've spent the last few hours looking into jquery and experimenting. You on the other hand spent more time bashing than it would have taken you to post a solution and yet have managed to achieve absolutely nothing but offending me and unleashing your frustration. What if I WAS one of those "internet marketing types". What did you think you would have achieved with your post? Thank you **FlintFireforge** for pointing me to the right direction. All you "noble" spam fighters on the other hand can shove it. I'll go work it out on my own or ask somebody who won't be a prick about it. Feel free to down vote me if that makes you feel better.
To clarify psayre's comment the idea of batching is not to ask the browser to do too much at once for fear of locking the JavaScript thread execution. For example you will probably lock up a browser if you do this: for(var i=0, len=1000000; i&lt;len; i++) { document.getElementsByTagName('body')[0].appendChild(document.createTextNode(i)); } However if you put your DOM-writing code into a function and then use an interval to call that function then you give the browser a chance to breathe, releasing the lock and preventing the dreaded "This script is running long would you like to kill it" dialog. var writeListToElement = function(list, element) { var frag = document.createDocumentFragment(); for(var i=0, len=list.length; i&lt;len; i++) { frag.appendChild(document.createTextNode(list[i])); } element.appendChild(frag); } var listOfStuff = [0,1,2,....n], itemsToProcess = 1000, intervalSpan = 80, targetElement = document.getElementsByTagName('body')[0]; var iterationInterval = setInterval(function(){ if(0 == listOfStuff.length) { clearInterval(iterationInterval); return; } writeListToElement(list.splice(0, itemsToProcess), targetElement); }, intervalSpan); I just whipped that up for an example so if it doesn't work, don't blame me. Hope that helps illustrate the concept.
Seriously. The project is [Reddit Enhancement Suite](http://reddit.honestbleeps.com/) - and one of the modules in it, the User Tagger, is performing pretty slowly on gigantic comments pages. It applies a tag and a color to usernames on a page -- Reddit has 500 usernames (which may or may not be unique) on a page with 500 comments... I can't think of a way to not do 500 dom insertions in this particular case -- aside from "don't use the module at all"...
You know what? I've always avoided setInterval like the plague because I was taught at an early stage in my development career that "timers are icky and hacky"... but this actually seems like it'd be perfect for what I'm doing... 
I was basically already doing this exact thing -- except rather than using a documentFragment, I was creating an extraneous container, which certainly sucks... That being said, I still have a good bit to learn and improve on :)
Documentation: http://dev.sencha.com/deploy/dev/docs/ It's my opinion that this is vastly superior to jQuery's docs.
My point there is that if you insist on using jQuery in a large application, you must assemble a tenuous toolkit of your own. Doing so is certainly not my recommendation, and I think the clause immediately following the part you highlighted makes that clear: "it simply isn't a viable answer -- or, in my opinion, part of an answer -- for large applications." JavaScriptMVC does, indeed, provide a path for building large applications with jQuery. While I applaud its effort, unless and until the jQuery project gets behind it, I hesitate to recommend it when there are other large app toolkits that do have large project teams backing them up. As long as the jQuery project continues to express its disinterest in answering these large app questions, I can not see recommending jQuery as a viable part of an answer for large apps.
And it's my opinion that, like documentation of that kind for all things, it lacks in practicality. It explains what things do, without telling you how to use them. There are no inline examples, and many of the components lack any kind of detailed explanation with regard to how they play with others. Part of the issue is that jQuery and ExtJS are two entirely different animals - jQuery is a set of tools, so you don't need more than a logical layout to display the tools and their abilities. ExtJS on the other hand is a massive library of components. It can't possibly explain everything through example, and I understand that. However, it seems that you have only two choices to learn: Read the massive documentation, or read through the poorly commented example source code. There needs to be a middle ground, step-by-step dissections of the examples that layout what does what how and why.
Perhaps. However, I'm already very familiar with the concepts of JavaScript and functional programming from 1-2 years of heavy jQuery development and don't believe that to be my problem.
Have this open on a tab at all times: [ExtJS Dev Docs](http://dev.sencha.com/deploy/dev/docs/) One good tip is to be sure and not over-wrap everything with unnecessary container/panels. Something that made me crazy for a minute is Ext.Msg.alert() is non-blocking while the alert(); we are all used to is blocking. Last, use their forums. There is a dude called Animal on there which has answered pretty much any crazy question you may have. God bless Animal.
setInterval() is icky because if your operation takes longer than the interval, JavaScript's timer queue gets backed up and your operations start running back to back. You quickly run into a 100% CPU scenario. setTimeout() used recursively isn't icky, in fact it's kind of elegant. Here's an example that guarantees 30ms "breathing time" between operations so that you'll never lock up the CPU: (function(){ // do something here that may or may not take longer than 30ms setTimeout(arguments.callee, 30); })();
I found that once I leaned what the components were (Just the names, mind you...not how to use them), I was able to traverse the documentation and amalgamate something that I wanted with ease. Maybe I'm just better at learning that way, I dunno. I love their docs.
One of the problems with talking about complex applications is that the concepts are, well, complex, and there aren't one-size-fits-all solutions. I hope to do more writing in the coming weeks about some basic large application design patterns, but in the meantime I highly recommend subscribing to http://www.sitepen.com/blog/ and learning about concepts like inheritance, pubsub, and dependency management, either in Dojo or another library of your choice.
I do keep an eye on the forums. The only posts by Animal that I saw made him come off as an asshole, looking down his nose at the poor novice developers who couldn't get used to the ideas of functional programming. He didn't even make an attempt at answering the question, just kept replying that the OP didn't know javascript. I don't doubt his knowledge, but he could have a little more tact.
I understand and agree entirely. I would look at some of the example code on their samples page, and work from there. The ExtJS documentation largely seems to be geared at people who already know ExtJS ;)
Have to upvote this. Event delegation + innerHTML = win. [edit] of course, do try to minimize the number of times you read from/write to innerHTML, since these seemingly simple actions trigger some rather complex logic within the browser's DOM engine.
And I suppose saying that doing that on the front end is exactly how you shouldn't do that is completely unhelpful, isn't it? Well, you may have better luck processing the page in chunks, rather than looking for every place that needs to be changed, grab part of the page, process it, replace it, then move on to another chunk. But I don't know, that still sounds quite horrific.
Ext.log() works on IE
modify the examples
yeah.. like I said.. do something like var l = ["&lt;ul&gt;"]; for (...) { l.push("&lt;li&gt;", name, "&lt;/li&gt;"); } l.push("&lt;/ul&gt;"); elem.innerHTML = l.join(""); 
short of modifying the source of reddit, I don't really have a choice.... but the aforementioned recursive settimeout way of not locking up the browser seems like a satisfactory solution...
Like a lot of the more fun things in JavaScript it's not that things are inherently evil (wait...eval is the root of evil) but more of how you use things. You shouldn't use setInterval as a replacement for listeners but if there's something you really want to do over a (semi-accurate) timespan then by all means use it. Know the language. Know the strengths. Exercise the tools wisely.
setInterval() isn't such a bad way of handling this problem. If your operation is routinely taking longer than you plan you have either planned or executed poorly. It would be the fault of the developer, not of setInterval(). True, setTimeout() would assure 30ms of breathing between attempts to call an action but it would not assure that it would wait until that action is done. It would simply act as a 30ms delay. I suppose you could do something where your function accepts a callback that triggers the timeout. That's too tight of coupling for me, though. EDIT: Upvote for a good idea and providing code example.
&gt; setTimeout() would assure 30ms of breathing between attempts to call an action but it would not assure that it would wait until that action is done If I understand what you're saying, it actually would. The call to setTimeout() won't occur until after the operation completes. The difference is basically, for two sequential operations, setInterval() = time from start of one to start of next, setTimeout() = time from end of one to start of next.
Actually, the basic difference between [setInterval()](https://developer.mozilla.org/en/window.setInterval) and [setTimeout()](https://developer.mozilla.org/en/window.setTimeout) is that setTimeout() happens once, after a specified delay. setInterval() happens again and again after a specified delay. For the purposes of the example I've given above setTimeout() would not work to execute the whole stack of items, only the first splice.
Nicholas called it a base library and so do I. "Base library" isn't exactly a well defined term, is it? For us, jQuery works great as base library. We got our core on top and... I dunno... maybe 50 different modules (number is growing quickly) on top of that. It's just perfect for our use cases.
Yes however the way I'm using setTimeout() in the code sample above involves a form of anonymous recursion (see the arguments.callee bit) so it will call itself endlessly, very similar to setInterval(), except for the key difference described above.