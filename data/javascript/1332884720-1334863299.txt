There doesn't seem to be a way to disable the summary view...
What browser are you using?
You can't yank and paste any line to another location without having to change it. Deleting the first or last declaration requires you to modify another line. 
Aside from a good code editor these are the only two JavaScript tools I ever use: * [Pretty Diff](http://prettydiff.com/) * [JSLint](http://jslint.com/)
You should post this in /r/Android
I tried it, and it's only useful up to a point- learning basics, and whatever. If you want to learn design patterns, or learn how to make a web app (MV* and related) , then you'll have to do more research. However, up to the point where it goes, it's fantastic.
Works great on iPad 
Really? Played fine for me in safari, and I'm not even running the nighties.
They didn't even mention being able to play with IE. Worked fine in Chrome last night though.
Seems to me node is quite bad at expressing things that can easily be expressed in gevent or erlang. 
Ahhhh I see what you mean! Good point, thanks.
Angular is seriously awesome, but it needs better docs for the upcoming 1.0
Admittedly, I was referring to Chrome and should have mentioned it specifically. Sorry. The name field would not clear for the name. I had to type my name overtop of the "watermark" text. The map wouldn't render, it started way off the to the top left and it let me click. I only found out what had happened when I clicked and started getting achievements for travelling. It was pathing me to the upper left of the map.
I'm a front-end guy, but I am looking to learn more backend stuff. I just built my first web app with a friend of mine using Ruby with Sinatra (instead of Rails) and a redis server. How and where does Angular.js fit into development? 
a fireable offense? must be a great team to work on.
It's elitism, that's all.
I don't know how I feel about having people new to JavaScript immediately jump into using libraries and already designed boilerplates. Maybe it's just me, but I think it's better to have at least a solid foundational knowledge of the DOM and introduce how things actually work (especially with AJAX requests and events) before bringing in any libraries.
I totally agree and think that everyone should have a solid knowledge of the inner workings of a language before doing much with it, and the same is thought by the other people putting this on. Getting that knowledge out is part of the motivation for this workshop. Any of the topics discussed will go as low level as the audience tolerates but the libraries we're using are simply the tools of the trade nowadays. Forcing people to go through the last decade of development in order to understand the "why" is not practical anymore, even if preferred. People who have a need to code are going to write code regardless of their skills. We're just hoping to fill in gaps where we can.
I find it best to think about backbone as a bunch of reusable patterns you can use for development. You might be disappointed if you think about it as a framework because there's a lot of things it won't do for you OOTB. Also I've been disappointed with the community examples for backbone. You really need to search hard to find the good stuff. To me knockout seemed like an all or nothing solution. You must embrace it entirely or not at all. The Microsoft team really likes knockout so there might be something more to it. Never heard of batman.
This really is a meh... some folks do better starting from the bottom, some do better starting from the top. This is also somewhat depended on teh specific situation. Someone doing corporate websites might be better off starting from the top. Doing a heavy javascript site, say a one page mobile application, someone is likely to be better off starting from the bottom. There really is no single right answer :)
http://addyosmani.github.com/todomvc/ Take a look at the different implementations. I think Ember looks pretty good. It's somewhat heavier than Backbone (my first choice), but you have to write a lot less code, which is actually a pretty big deal. The more code there is, the more bugs there are. [In case you didn't know, fancy metrics like cyclomatic complexity and the like don't correlate more to the number of bugs than lines of code do. So, yea. Seriously. More lines generally means more bugs. If there are more chances to make mistakes, you'll make more mistakes.] Ember's documentation is somewhat lacking though. Here is a fairly shallow overview: http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/ I don't know how accurate it is, mind you.
Would it be possible to share the good backbone.js resources that you've come across?
I agree, learning vanilla JS through the context of these libraries and boilerplates could actually be extremely helpful for getting people off the ground quicker. Context &gt; Content when it comes to teaching, imo.
Backbone *was* my first choice.
Easy. In your custom function document.getElementById.id is undefined. jQuery punts on processing undefined, so the return is exceptionally fast. Here is a correct version of your test: http://jsperf.com/getelementbyid-vs-jquery-id/7 As you can see, getElementById and Custom Function run about neck and neck (at least for safari). This tells me that the most expensive part of the call for these is getting the dom reference. The jquery pixie dust adds marginal performance cost. However, it would seem that the selector parsing in jQuery is freaking slow.
I believe jQuery actually uses the Sizzle selector engine to try and mimic CSS's selectors http://sizzlejs.com/ https://github.com/jquery/sizzle
You're right about the second test. Sizzle is going, "Okay, I have an element with #foo, so perform a document.getElementById('foo'), *then* return the DOM node" -- 2 steps. &gt; I'm not sure what in the world the third test is supposed to be doing. getElementById.id is just going to be undefined, because getElementById has no attributes. Maybe you meant getElementById(id)? I'm a dingus, typos FTL! Oddly enough, it's still faster to do it with the function (see [revision #7](http://jsperf.com/getelementbyid-vs-jquery-id/7)). I don't have an expert's insight on this topic, but I'd imagine that the document is being "cached" in _() so that it doesn't need to reinitialize the entire document. I'm not 100% sure about this though. Could you explain it?
JavaScript for Rubyists who wish Ruby was more like Python? :-)
&gt; Oddly enough, it's still faster to do it with the function When I run that test, the first one still comes out ahead. jQuery is 85% slower and 'Custom Method' is 36% slower. This is with Firefox 12. 
It takes 2 features from Python - significant whitespace and list comprehensions. Most of the rest are Rubyisms which would drive a Pythonist to distraction - the combination of implicit returns, new conditional keywords (which don't use a Python-style : to signal the end of the conditions) and postfix conditionals, the @ operator, the ? suffix analagous to nil?, #{} for string interpolation, Ruby-style switch and (sometimes) optional parentheses result in very Ruby-like code - I've already seen articles celebrating the ability to craft needlessly horrible "clever" one-liners.
Check out my node-angular project linked in the article. It's extremely new, but shows you where the backend "fits in". 
&gt;a circular reference and hence a memory leak Circular references do not cause memory leaks in JavaScript, because the garbage collector in every JS engine is too advanced for that. It's only a problem for simplest garbage collectors which merely count the number of references.
Very insightful, thanks :)
For me, the rule of thumb is to use a single return in a function at the bottom. It helps minification as the return keyword cannot be minified and variable name can. It also helps by setting a default return value. That way you never return someting that the code relying on that return value can fail on. You could also argue that scanability is improved. You can quickly scan the flow of your control structures while knowing that it won't terminate mid way. I sometimes do however have a return at the top, in case some key variables are not set and continuation is useless. That can keep the complexity of the code down. Wether you use a single return or not is mostly a matter of personal preference and/or company coding standards.
Unless you're using older versions of IE, in which case circular references can cause memory leaks.
While not exactly a memory "leak", you should try avoiding using anonymous functions for event handlers. $.fn.pluginName = function () { return this.each( function () { var $element = $(this); $element.bind("click", function ( e ) { $(e.target).show(); }); $element = null; }); }; In this code, if your this.each has 50 items in it, you would end up creating 50 copies of what's essentially the same function. $.fn.pluginName = function () { var handler = function ( e ) { $(e.target).show(); }; return this.each( function () { var $element = $(this); $element.bind("click", handler); $element = null; }); }; But if you use this code, where the handler is created outside of the this.each call, you'll only create one copy of the function, and each binding will use the same reference. Doing this also makes it easier to unbind the event handler. With an anonymous function, since you don't have a reference to the handler anymore, you can't call $(this).unbind("click", handler) and remove it. You're stuck being able to only call $(this).unbind("click"), which will remove *all* the click handlers, including ones your plugin might not have set.
I don't use too many, since generally functions should be kept small, responsible for one atomic task., so you shouldn't be returning lot's of different things anyway. But having multiple returns is fine, in general, and isn't problematic in and of itself, the problems are more with consistency amongst the development team, so everybody understands each other's code. There's nothing wrong with stuff like: if(somethingWrong){return;} it's pretty easy to read imo.
Yes, as long as you write smallish and / or very clear functions. But if you do have different return statements throughout your function all over different levels of nested selections, maintaining that function becomes hard. As with most things: use with care.
Sure, but at that point, if you're returning things which are significantly different, then you should probably actually have multiple functions, to call for different scenarios, not always be calling one function that handles all scenarios. 
Exactly. Best Practices are rarely there to help the expert. They are there to help the novice not screw up this own code; and to help code maintenance when anyone tries to read each other's code, especially months after it has been written. I think people underestimate how difficult it can be to remember what one was doing months after they wrote a piece of complex code. I like one return per function mostly for maintenance reasons.
I've been using Backbone for the last few months and it has been really great.
as some have already mentioned here, there is really no "best", it all depends on your developer aesthetics and what kind of strengths you require from the framework. i am a backbone developer myself but it does have alot of boilerplate and patterns that you have to redo again and again(but if you are an experienced developer you would abstract these out and put them in your base instead) while ember for example will provide you alot of conventions for these patterns that you are going to need. I personally like backbone alot more because even though it has alot of boilerplate it is alot easier to get it to work the way "I" want it to work and bend it to my wants and needs.
To me what you're saying is something like "I never wear a helmet anymore. Looks cooler, comes natural for me and never caused any problems so far." Sure it's not cool and it takes a tiny bit of extra work, but simply wearing a helmet can save your ass in the rare instance something does go wrong.
Exactly. I view a function as something to get out of ASAP. Check &amp; bail immediately on bad data, bail as soon as you don't need to go any further and only finish out the function if you actually need to run through all the logic. Whenever I see if (param &gt; 0) { entire function } I want to cry.
Here's the best, most up to date, backbone reference I've seen. The author is a jQuery core contributor and knows his stuff. https://github.com/addyosmani/backbone-fundamentals
We'll be videoing the workshops and will have the slides online. We're taking an open source approach to the idea of workshops where all the materials, course structure, and even the name will be usable by others who might want to give similar sessions outside of San Diego.
that's the plan
&gt; That argument is largely meaningless in Javascript. Was going to be my statement. 
&gt; I was going to try and finish my projects without using anything other than pure javascript, php and mysql originally but I understand for some things I must just go with a more feasible solution. What about AJAX isn't pure JavaScript? AJAX just refers to using JavaScript to asynchronously request data from a server. You can see info on using AJAX at [https://developer.mozilla.org/en/AJAX](https://developer.mozilla.org/en/AJAX).
Nested methods do not mean unnecessary code execution... var ret = null; if(typeof arg1 !== 'undefined') { //logic here } return ret; and var ret = null; if (typeof arg1 === 'undefined') { return ret; } // logic here ...both execute the same amount of code. You could argue that you'd just return null instead of ~~declaring~~ define the ret var, but in JavaScript, all your vars are defined implicitly at the beginning (of the function) anyway, so you still ~~declare~~ define it even if you return early.
i think you are restating what i meant to say. | originally 
This is probably the most important factor to the "one return" methodology. There are exceptions (like you should handle undefined arguments) but one could also argue that you can handle those undefined arguments in other ways with your logic. If undefined variables an acceptable part of your method you might be doing too much as well. (e: clarification)
AJAX is your only option :) want some extra cool options though? Check out COMET (simulated TCP/IP via. AJAX longpolling or forever iframes), or Node.js (server-side JS) edit: Also understand that AJAX can be used in many different ways, ie. how do you format the information sent to the server, and how does the server format the information sent back; JSON is currently the standard in those regards
The (rather weak) argument I've heard was that you could fuck up people's debugging when they would put a lone breakpoint at what they expect to be the only way out. Hasn't really convinced me. What convinces me is that deep nesting is evil. The deeper nested your loops and ifs in a function are the harder it is to reason about the code etc. Quick exit out in certain cases to me simplifies the following method and makes it clearer. If you set breakpoints in my methods / functions, pay attention -- I have tried to make them quick and short, splitting it up into sub functions if nescessary.
Maybe OP is confused because AJAX is "Asynchronous Javascript And Xml." We are using JSON more than XML these days, but "AJAJ" isn't as catchy.
just a note. Should be using "on({click:})" now as bind has been depreciated
Yes that is just un-practical, tell you boss to get real. You think of return as any other functional block and use it where it makes sense, ok. That's it. I use a lot of early returns for parameter checking, e.g: bool OnMessage(in_message, out_messgae) { if(!in_message.name.IsValidUTF8()) return false; // disconnect the client if(!in_message.logintoken.IsValid()) return false; // disconnect the client // assuming that I have checked all input I can // just do my stuff without worrying about that shit. ... nice clean code ... return true; // keep the client connected }
IE isn't *that* bad. The leak you're thinking of is related to event listeners. Base libraries (like jQuery) take care of that glitch.
Also, there is gzip. Repetitive stuff is almost free.
This is /r/javascript, not /r/java. Also, you are definitely going to want to format your code if you are posting directly to reddit. class ReadOnly { protected int val; public ReadOnly(int arg) { val = arg; } public int getVal() { return val; } } class ReadWrite extends ReadOnly { private boolean dirty; public ReadWrite(int arg) { super(arg); dirty = false; } public void setVal(int arg) { val = arg; dirty = true; } public boolean isDirty() { return dirty; } }
if you have complex binary logic it might still be beneficial to factor out parts of the term into functions with speaking name.
I don't think the word feasible means what you think it means.
&gt; simulated TCP/IP via. AJAX longpolling All requests already use TCP/IP. :|
I was looking for information on why they've chosen that structure. I understand a bit better now based on additional reading and the replies here. Thanks.
The original wiki has an interesting discussion on it: http://c2.com/cgi/wiki?SingleFunctionExitPoint http://c2.com/cgi/wiki?GuardClause (I'm with you by the way; guard clauses early on to bail out early in some edge cases/degenerate conditions, then the rest. Not sure why you say 'return false', though - you should return what the function needs to return, that might be return 0 or return false or just return). 
&gt; I seriously **wish I could** do this. FTFY.
To be fair, OP was asking about a Java script...
How is this better than: bool OnMessage(in_message, out_message){ //declare return var ret = false; //if in_message name is UTF8 and the login tokin is valid execute if(in_message.name.IsValidUTF8() &amp;&amp; in_message.logintoken.IsValid()){ ret = true; } //return result return ret; } Nice and clean. This also allows you to easily see all variables that the function uses, gives you a single point of return and is the same amount of lines.
That's exacly what it comes to my mind when I read code from some of my ex coworkers: "ajaj"
from what I could see, it shouldn't be difficult. I will try :)
Just depends on your experience with writing coffeescript (or Ruby; you could instead modify [rocco](http://rtomayko.github.com/rocco/) to your purposes). Docco itself is so awesome and easy-to-use though, I hope you get it working! (and if you do, clean it up and issue a pull request or otherwise make sure to share it!)
With the canvas? Have any links?
I've used [jPlayer](http://www.jplayer.org) for a few projects. Its pretty awesome.
My impression is that jPlayer is a media player. I'm looking for an API mechanism that can be behind-the-scenes. Can jPlayer do that?
Now instead of looking for return statements, I'm following around this new flag that you introduced and looking for all the different ways it gets set. It depends on the circumstances. I would argue, who cares if I only have to change one line to change the return type when it takes me twice as long to understand the code. Guard blocks are also standard practice for another very good reason: it makes it really clear that we're jumping ship without side-effects.
This is just an obfuscated redirect. Most of the code is just noise that does nothing. The actual payload is `9ca79b`...`ad675f`, which is decoded by parsing every pair of characters as a hex number, subtracting 56, then converting using `fromCharCode`. The result is `"document.location=`...`"`, which is `eval`ed.
I don't see the additional simplicity of an if..else over a try..catch if that's what you're asking. But I have seen large code-bases do this and they're full of null pointer exceptions.
Makes sense. Thanks.
This simply relocates you to their website (http://oyroti.ru/) Check out the last line of code, var LOFO;wlboPtK[qvIaN](UBTFC);var xRBEEf;var RvkF=41;var Jyrz='REBzwWC';var nbjDH='eCWL';&lt;/script&gt; Notice the call being made, **wlboPtK\[qvIaN](UBTFC);** Now try loading this code in the console, to execute it manually, except make sure the remove the call (UBTFC). Now all the variables have been loaded and is ready to make its attack; type this into the console: UBTFC This should (note I am using Google Chrome's Inspector) print out what UBTFC is, displaying, *document.location='http://oyroti.ru/'* Cool! And who's the culprit that's allowing this disaster to occur? Type in the caller, wlboPtK[qvIaN] *function eval() { [native code] }* Ahah! Should have known it'd be that bastard eval!
Used to work for Hypem.com here. I did JS and frontend stuff with the player. Soundmanager 2 is your best option.
It's not about the if...else vs. the try...catch. It's about forcing the caller to handle a possible null vs. forcing the caller to handle checked exceptions for what probably ultimately amounts to a hash lookup. Edit: I just realized that the context of your initial comment was returning null in place of throwing some kind of invalid arg exception. Yeah, that's dumb. Who would do that? Edit: Unless your definition of an invalid arg includes "a nonexistent key," in which case it totally depends on the precise circumstance, and the above still stands.
The [Bulletproof Ajax](http://bulletproofajax.com/) book is the best one I've come across on the topic.
Just to throw in another library, try [Buzz!](http://buzz.jaysalvat.com/) which tries to use HTML5 but also provides fallbacks.
I am actually working on a JS connect 4 game right now. Do you want to have a 2-player game or single player against the computer? Might as well give some info about how I'm building it. The game has 2 players, a 7x6 array as board and a simple state-machine for the logic of the game. The AI uses alpha-beta pruning to determine the next best move. This part proved to be pretty tricky, I can't seem to get it right. It works great when it looks ahead an even number of moves but does some really wonky things when looking ahead an odd number of moves. Another tricky part for the AI was the board evaluation. Connect 4 has all sorts of important patterns that need to be recognized to play smartly and most patterns can occur in 4 directions: up, down and the 2 diagonals. Writing an evaluation function that finds these patterns quickly enough to check thousands of board permutations was quite a challenge.
Both SoundManager2 and jPlayer look like methods for playing mp3/wav/ogg files on demand. From my brief look at SoundManager2, it looks to be similar to jPlayer in capabilities. I used jPlayer recently to play dozens of mp3 files on demand (controlled by JS) with no visible player. 
I am seeing more and more of this, though, interestingly enough. I think there's a lot of interest in the realtime synthesis space in JS, which is a natural fit because of its eventedness (although its timing is often pretty sloppy).
i do but as you seen i dont have time to correctly capitalize or punctuate my sentence is because i dont have time to read it or time to keep the grammar Nazis happy but at least i didn't mix up "their" "there" &amp; "they're"
I'm not sure you really need fancy alpha-beta pruning.. the search space seems to be sufficiently small to just brute force it.
exactly, this is not tron
I have builded a connect four game last year with RaphaëlJS (SVG). The game also included an AI which worked by heuristic. If you are interested I have setup a jsfiddle that works : http://jsfiddle.net/83EN2/4/
From PhantomJS FAQ: &gt;Starting with PhantomJS 1.5, it is pure headless and there is no need to run X11/Xvfb anymore. 
https://github.com/mozilla/BrowserQuest Look at this, they used Require.js too.
You're definitely on the right track by using Requirejs. One thing too keep in mind is when a certain module starts doing too much it's probably time to split it into several smaller modules. Here's another great example of a project using Requirejs http://github.com/ajaxorg/ace
Going forward I'm implementing a modular combination of [Backbone and RequireJS](http://backbonetutorials.com/organizing-backbone-using-modules/) for all my projects.
In my opinion, the easiest way to find out what is going on is to throw this into your JS console http://pastebin.com/Q71ZYZT6 and step through it. When it gets down to the line wlboPtK[qvIaN](UBTFC); We can see that those are: wlboPtK = The window qvIaN = 'eval' UBTFC = "document.location='http://oyroti.ru/'" And that is what it does. 
I recommend Addy Osmani's Patterns For Large-Scale JavaScript applications article, it goes into great detail on common problems and how you can avoid them by modularizing your code base etc. [http://addyosmani.com/largescalejavascript/](http://addyosmani.com/largescalejavascript/)
With make. In Makefile you cat all your sources together with a prelude and a postlude to wrap your code into a closure. Then locals look like globals to you, e.g. "function myFunction () {}" is just another function and you don't have to constantly write mylib.myFunction, etc. When you want to export something you just write "exports.myFunction = myFunction". Use the "play" task to keep your build live if you want to play with it in the browser. prelude.hjs: var mylib = new ( function moduleWrapper () { var exports = this; postlude.hjs: return exports; })(); Makefile: my_library.js: src/*.js src/*.hjs Makefile echo '// Generated File' &gt; my_library.js cat \ src/prelude.hjs \ src/... my sources src/postlude.hjs \ &gt;&gt; my_library.js my_library.min.js: my_library.js yuicompressor my_library.js &gt; my_library.min.js play: while (true); do make; sleep 1; done 
Depending on the type of project you are working on, knockout.js might be of great help. It is slightly different from other types of frameworks, especially templating frameworks, but once you get into it you will love it. It removes a lot of ugly jQuery code from your fronted javascript files and creates much cleaner interfaces with HTML. 
Also games? I have used requirejs and backbone a lot in the last couple months, but not for games. The basic concept of having views and models is good for games, but I don't think backbone would be the right approach here.
Recently I started using backbonejs. It's really powerful tool. You can make your more modular and easier to understand using this library. BTW, Addy Osmani has a great opensource book on backbonejs https://github.com/addyosmani/backbone-fundamentals
I'm building my prototype in backbone, and intend to replace the render methods with calls to the canvas API once I have something working. I may switch over entirely to a canvas front end, once the logic is complete, having the canvas respond and post messages to the server. It is, however, a server based game, with relatively simple interactions and animations.
I would imagine it's just left-over forgotten code by one of the developers. Why they would do it, is beyond me. But then, Facebook have bandwidth to burn. One plausible reason they would do this is to make the developer life-cycle easier. Think of commented code an nothing more than a "breakpoint" in the script. It's clever, but gosh darn it makes Facebook painfully slow. And yes, sir, I feel your pain.
YUI 3 provides a nice module and plugin system.
This is unbelievably clever. I had no idea that Google/Facebook/etc. really reaches for that ~2000 ms improvement.
It sure is, but I'm not surprised they go for a 2000ms improvement. 2 seconds is massive, especially on the mobile web, in my humble opinion.
I'm curious about this too. mind discussing/explaining a little?
I've written a few large projects with Coffeescript after writing Javascript for many years. There's nothing wrong with it, you just have to think about it a bit differently. It's up to the original developer to choose what the right tool for the job is. No need to be an ass about it because someone likes a language you don't.
You haven't been around here long, have you. There has been sooooooo much debate over this in r/javascript I think you must have been under a rock or just not reading anything related to coffeescript posted in r/javascript. It is not FUD. there are many arguments in support of my claims. You almost sound like a troll claiming 'without any sources it sounds like FUD', because it's been widely criticized in the javascript community for quite a while now. lets see here... [The top 4 upvoted](http://www.reddit.com/r/javascript/search?q=coffeescript&amp;sort=top&amp;restrict_sr=on) articles with coffeescript in the title in r/javascript are critical of coffeescript: [DAE think CoffeeScript is ridiculously overrated?](http://www.reddit.com/r/javascript/comments/ig1ig/dae_think_coffeescript_is_ridiculously_overrated/) [CoffeeScript is not a language worth learning](http://www.reddit.com/r/javascript/comments/nc9g4/a_case_against_using_coffeescript/) [A Case Against Using CoffeeScript](http://www.reddit.com/r/javascript/comments/nc9g4/a_case_against_using_coffeescript/) [CoffeeScript under pressure](http://www.reddit.com/r/javascript/comments/pegf1/coffeescript_under_pressure/) Some people make arguments for using Coffeescript, but they are really just making excuses for throwing out the baby with the bathwater - the problems with javascript are mainly with the DOM, not the language itself. Coffeescript does nothing to solve DOM problems and adds a layer of abstraction and complexity that is unnecessary for anyone but syntax fetishists. I could go on and on about this, but go read the comments on those 4 articles. I don't expect to change your mind at all, but I'm not spreading FUD, there are many in r/javascript who don't need or want coffeescript in the web ecosystem, and there are lots of good reasons for that. 
I could write large projects in coffeescript too if that were the only language that existed, because that's what I do - work on large projects. But I (and most front-end coders) don't need an additional layer of abstraction and complexity between the code and debugging. There aren't any problems that can be solved by coffeescript that can't be solved by javascript, so adding coffeescript to the equation is practically useless, except for people who just can't wrap their head around C style syntax. 
&gt; No need to be an ass about it because someone likes a language you don't. This is the biggest problem I have with coffeescript-- it is NOT a language. Don't put lipstick on a pig-- this is syntactic sugar based on Ruby-esque (and other) syntax that transcompiles to javascript. It's a syntax, built on top of javascript. It cannot do anything Javascript can't do-- and in fact this limited factor makes it difficult to achieve specific tasks using ONLY coffeescript. There are many times I've been utilizing libraries made for JS (like, oh, jQuery) and find myself in a position where I have to escape CoffeeScript to raw JS-- mangling the syntax into ruby/js. If you prefer CoffeeScript, that's your jazz. I can see the use case for it. But don't call it a language-- it just transcompiles into JS, so it is a syntax.
You're right, it isn't a language. That was me being sloppy with my Reddit-ing :)
Very well put, need more upvotes.
We've written a number of Medium sized web apps and Backbone + Require.js is the way to go for web apps. For games I think it it is still excellent. If you're worried agout spaghetti code, make sure views and models don't do more they should be doing, make sure they don't reach into each other, and make sure the interfaces make sense for the view/model and not what they eventually will do. (if you have a button view that will open a dialog, the button view should fire a 'select' event, not an 'open dialog' event. Bonus: for those pesky non-AMD modules use https://github.com/geddesign/wrapjs
If you don't use backbone that's fine, but I highly recommend you spend some time looking at the overall architecture of the application you're building. Modules (with RequireJS) are a great start, but it's easy enough to get trapped in a mess of spaghetti code nonetheless. Spend some time looking at the big ones, like knockout, backbone, or ember. Eventing is key for decoupling your modules, but you can quickly write yourself into debugging hell. I like jQuery's event system, but lots of people like Radio.js (and it's got a snazzy website - http://radio.uxder.com/). I'd be interested to hear what sort of application you're developing.
Depends on your target audience. I recently did a iPad specific project and used local storage to auto-save shopping cart contents to great success.
of course I will share it
This is somewhat similar to Doug Crockford's reason for not allowing comments in JSON. People would almost certainly adulterate a comment's purposes by adding script or metadata to it. Or some other semantic meaning. Look at encapsulated PostScript to see how people can screw up comments.
I am not trying to be a troll. I have not been paying attention to r/javascript till recently so I did not see those threads. I have read many articles both for and against, and I have yet to make up my mind. Though I haven't put much effort into CS yet.
FYI: Assembly is not an editor. I think you've got your analogy crossed up. In all seriousness, Emacs is a very good editor; broadly usable, and highly customizable. The reason people use it is because Javascript is not the only language. People build systems with lots of piece-parts, and one needs a fully-capable editor to help with that. As a developer's editor for javascript, the particular capability highlighted here is just one piece of a full development experience. I'm not trying to persuade you to switch; I am trying to persuade you that you have overlooked some strengths of emacs as a developer's tool. 
Title is misleading, see [The Hacker News comments on this](http://news.ycombinator.com/item?id=3776599).
Added to my ~/.js
I just want a shortcut for the function keyword. What good is this?
While it certainly is handly, It's also dickish thing to opt someone into this kind of tracking if they don't want to be. I wish there were an equivalent mobile substrate plugin for iOS that would send Flurry trackers bullshit events.
2s is massive i run a much smaller sight and we spend huge amounts of time on 100/200 ms improvements.
it's improving.
Ere I leave reviled eval, a reason is revealed and relieves a riled writer. Relive eval!
how does scope work? e.g. a = 10; d = 20; foo = (a, b, c) =&gt; a + b + c + 10 + d; e = foo(1,2,3); e === ?
Presumably 36, same as with standard function syntax. The only scoping difference seems to be in the handling of 'this', which is lexically scoped instead of dynamically scoped, as the examples demonstrate. 
This syntax seems so confusing :S I thought the first example would return an empty object, nope, you need to use '({})' so that it is explicitly an expression. It's also hard to see where the arguments start. For the old syntax you would just look for 'function'. For =&gt; you don't have a simple word or character to look for. You'd have to figure out from the syntax. Why didn't they just try to minimize the function-syntax. Instead of 'function(x,y,z){...}' just '#x y z{...}'. That's less typing than '(x, y, z)=&gt;{...}' and even less than '(x, y, z)=&gt;...' (if you only want an expression). With the =&gt; syntax they just copied a C# feature/syntax it seems.
I currently use Node-style modules (the module portion of AMD is horrifically ugly and I don't want all my code to have to be one level down) and manual build scripts to bundle them up for the browser and compress them with Closure Compiler, publishing reusable modules to npm. There seem to be loads of modules for bundling Node-style modules for browsers ([browserify](https://github.com/substack/node-browserify) is the daddy here), but I have my eye on [modules-webmake](https://github.com/medikoo/modules-webmake) for future use.
I organized [Pretty Diff](http://prettydiff.com/) code into two files. * [pd.js](http://prettydiff.com/pd.js) - Contains all the UI and DOM references * [prettydiff.js](http://prettydiff.com/prettydiff.js) - Contains all the application code This way I have environment and run time freedom. The application is called relatively equally from the browser, windows command line, or Node.js. I organized the pd.js file into 3 primary parts: * DOM references * Packaging of arguments for passing to the application code in the recycle function * A collection of various interaction functions as properties of the pd object literal For the application code I create a global function simply called "prettydiff". In that I simply list each primary component as a child function with the final function, called "core", being the generic logic that calls the other components with the correct arguments and puts things together.
That link crashed it. At least for me @ Chrome 17.0.963.65
What is this improving? I love JS but this just looks like syntax sugar and not an advantage.
Every ms they can shave off of page loading is worth a lot of money to companies like google and Facebook. That's why google cares so deeply about making the web faster.
Its worked well in C#, everyone loves it. Why not copy it? Language designers really need to get over this kick of making things 'different' for its own sake. If you don't have a good reason for changing a construct that is widely used, just leave it.
It's perfectly fine for C#. C# doesn't have '{}' as an expression, so it's fine. In C# you -can- type your arguments, like (int x, int y) =&gt; {...}, which is why you need to separate the arguments with ','. In Javascript {} is an empty object: why introduce syntax that can have multiple meanings? In Javascript arguments are not typed: why introduce ','-syntax which isn't needed? I think Javascript is just a very different language compared to C# and it should be treated as such, not just copy over syntax of other languages just because they work in that language.
I can see why you'd want such small functions (Array.filter, Array.map) and a smaller syntax for these functions is quite nice. The syntax is just a bit off imo
Sure, check your message
I think it is just bad leadership. There is so much resistance to changing JS at all that it makes it difficult for them to distinguish bad ideas from good ideas. The sheer number of edge cases introduced seems to make this seem to be a poor idea. 
Well, the main problem would be that two JSON files that are otherwise equivalent according to JSON syntax and their target semantics, might be judged differently according to the comments, which should not affect the meaning at all.
You mean Knockout and Underscore, JQuery, MooTools, ... ? Frameworks are JavaScript too... You know the code is being used as well and not just beautiful for beauties sake. Much can be observed from the location of the implementation as well as the implementation itself for specific features in a framework: For example here are three implementations of trimming leading and trailing white space from strings: [jquery trim()](https://github.com/jquery/jquery/blob/master/src/core.js#L649) [mootools trim()](https://github.com/mootools/mootools-core/blob/master/Source/Types/String.js#L27) [dojo trim()](https://github.com/dojo/dojo/blob/master/string.js#L153) I would say MooTools looks the most "beautiful" but that could be subjective.
Many people actually do have a problem with retaining server logs, they believe they should be written to /dev/null. Like the person above you, there people who believe that the internet should explicitly ask you for every interaction. Reddit puts a cookie? It should specifically ask you each time, and you should be able to punish them if you don't agree. This script does that, by punishing those who dare use the web for commercial purposes. **HOW DARE THEY ATTEMPT TO CONDUCT BUSINESS ON THE INTERNET UNLESS IT DIRECTLY BENEFITS ME PERSONALLY**
[This Crockford piece](http://www.yuiblog.com/blog/2012/03/30/what-is-the-meaning-of-this) seems to indicate that this has other advantages over just being syntactic sugar. 
And it also confused Crockford, check the comment.
It solves a lot of the crap with `this`.
I'm definitely not tired of people bitching about JS but I sure am tired of people bitching about JS for irrelevant reasons. Shortening the word "function" while adding additional gotchas is a bad solution to a non-existent problem. Ditto for dropping braces or parentheses in arbitrary situations. As far as other people using JavaScript: There is pretty much no other viable option for client side development so we are all in this bus together whether we like it or not.
Reading up on it a bit and seeing Crockfords recent blog post about it, i can see some of its advantages. However, i do feel like its going to still cause some issues just like allowing the omission of {} in IF blocks. Ill try to keep an open mind about it, but aside from scoping, its really weird and non JS looking. But people said that about anonymous functions in PHP too...
CORS is supported in Firefox &gt;= 3.5 and Chrome &gt;= 3. However, that's about being able to make cross-domain AJAX requests, not DOM storage. And people have traditionally worked around that issue by injecting script tags, the basis behind JSONP, which allows seamless cross-domain AJAX in all browsers. (Of course, security-wise it's a nightmare as you're implicitly trusting the destination with your page assets, which is why something like CORS really is needed.) 
I get the feeling his hands are tied behind his back because it is design by committee.
Okie dokie then. Let's agree to disagree. I've happily written CoffeeScript for the past 14 hours or so straight. :) Thanks for pointing out the loop thing though, it'll be good to keep in mind.
This is the way CoffeeScript solves the 'this' scope problem and since CoffeeScript already uses the arrow syntax (-&gt; for regular functions), the =&gt; fits in nicely. Although I should add, CoffeeScript doesn't do dynamic binding (the context as a parameter) - or at least, I've not noticed this language feature. It seems that they thought, "Hey CoffeeScript solves some problems with Javascript, lets include them in the next version", without perhaps considering how well it fits. Although, I highly doubt the fat arrow will end up in Javascript after this addition has been debated.
&gt;window["project"] You should use JSLint. There is no point in writing it like that. You made it 3 characters longer. That's all you did.
:o
I generally break down things into interfaces/classes that are generic as possible and as I find I'm repeating a certain type of thing I try to use use that as an indicator that it's time to break something off. The benefit of this method is that it leads directly to building reusable libraries or abstractions. Sometimes a project has specific requirements that don't abstract well but almost always they do. This has led me to build these kinds of libraries, all starting from the above process: https://github.com/Benvie/reified https://github.com/Benvie/view-buffer https://github.com/Benvie/Rapper https://github.com/Benvie/Node.js-Ultra-REPL/blob/master/lib/utility/explorePath.js https://github.com/Benvie/listish I have got the best payoff by creating good abstractions and encapsulation for areas of functionality that end up consuming a large chunk of a project's time investment, even if it temporarily is a setback due to having to generalize the already build parts that need to be migrated.
You could screen capture the image using [CamStudio](http://camstudio.org/), then include the video, or convert it to a gif. Linux: ffmpeg -i video_origine.avi gif_anime.gif Windows: download ffmpeg [from here](http://ffmpeg.zeranoe.com/builds/), choose static build for your system type (x64 or x86). Commands should be similar to Linux version.
Can you not embed an html page in a powerpoint preso? if you are presenting where there is a network, then... there might be a way to use it directly. 
Learn JavaScript. Please.
I completely agree without your opinion about the mootools trim. The jQuery option looks horrendous. Still, though, if you are looking for examples of beautiful code and can't think past a framework I would say that you really don't know where to look.
Ha ha USA - Canada is stealing your air!
What height are these wind currents? I am guessing they are the height of a average wind tower. 
10M is the typical measurement height, so that would be the case for these predictions as well. http://www.nws.noaa.gov/ndfd/definitions.htm
The article doesn't really describe the meaning of *this*, it's more a design preview for new function calls, which will also fix some of the inconsistencies with *this*. I recently had a couple of job interviews where they asked "when does *this* not mean the object that contains it?" The simple answer is when Closures are used. It gets quite a bit more complicated than that, but if you realize that any function is also an object, then you know that *this* should always refer to the object (function) that it sits inside.
We are but human. Not reddit-raging here, just I don't want to see Coffeescript go the way of jQuery, and have people treat it as "a whole new language" and forget that JS is at the core of it all. It annoys the everliving crap out of me whenever we bring people in for interviews and they "know jQuery but not Javascript." These words you keep saying... I do not think you know what they mean.
INCONCEIVABLE!
Not sure I like this at all. It really doesn't seem necessary, and makes for less readable code, which is a massive faux-pas.
I'm still worried about the difference between 0.5 and 0.9. Is the api hugely different?
Ah, so it's definitely something for you, especially for 12$ - it's like for free. As far as I remember they cover different between 0.5 and 0.9, so don't worry.
So you want to automatically trigger this bookmarklet if the page title isn't empty? Every single page?
I really need to learn to read.
ok thanks
I'm genuinely touched.
Figured so :( Thanks though.
Worth pointing out that if this did work, pages could add themselves to your bookmarks without your permission. A good way for this to work then would be for google.com/bookmarks/mark to support an optional argument known only to google and the user so they could write a bookmarklet like this that would permit them to bookmark a site, and no one else to make similar calls. Okay, attacking that: override window.open to capture all urls that are opened, and record those tokens. A less good useful way to implement this (again, on google's part) would be to allow an argument to be passed into the url representing the site to be bookmarked, then to ask the user if they want to bookmark that (yes/no, so that if the page initiated it on their own, the user can cancel it).
Is it not possible to bypass the popup dialog and send everything directly to Google?
If it was (in JavaScript, as run from the first page), then any page could put this JS code into their own page, and force you to add their page to your bookmarks. Additionally, that same trick could be used to open up and control other pages (open gmail and send spam, open your bank page and steal money/info, etc). That said, from within that new window created by window.open, you could run a second bookmarklet to get the originating window (referred to as parent or opener) and get the url from there - simply requesting the url across multiple documents from multiple domains _is_ allowed I believe.
When I started learning Backbone I bought the Peepcode casts. They were definitely helpful in giving me a good introductory walkthrough. My suggestion after you finish watching those would be to checkout the DocumentCloud code base. It's open source and available [here](https://github.com/documentcloud/documentcloud.git). This is the project Backbone was extracted from and it's pretty beneficial in seeing how the team structured things. Good luck!
Alright, I will write a tutorial tonight! I have been working on the boilerplate a decent amount. Thanks for the feedback.
I promise to watch it tomorrow (I'm serious. Working on my first "real" Backbone based project, and pouring over the raw code in an effort to really "get" it, now so I'm keen to absorb all I can).
I would use some sort of server side language to serve the questions and store the results, probably in a database (though, you could go the flat file route if you wanted to).
Anything that ties things together. That shows non-trivial interactions between the models, collections and views. 
aha I wrote that tutorial =) more goodies can be found at http://backboneboilerplate.com which show how to run a smooth build process using that setup
the DOM is an API http://en.wikipedia.org/wiki/Comparison_of_layout_engines_(Document_Object_Model) that might help if you're looking for cross-dom compatibility or something. but if you wanted to a few of the java script engines are open source, notably googles v8 http://code.google.com/p/v8/
very fucking impressive!
Here is [WebKit's Document#createElement source code][1]. I doubt it's what you want, but I included it in this thread for completeness. [1]: http://trac.webkit.org/browser/trunk/Source/WebCore/dom/Document.cpp#L792
&gt; simply requesting the url across multiple documents from multiple domains is allowed I believe. No, one window cannot read the URL of a different window in a different domain. You can *change* the URL of any window regardless of domain, but you can't read it.
I can definitely see where this could fill the gaps that corporate browser adoption (even with Chrome Frame) could not.
I agree. It's also got a backbone-esque model system which is worth a look.
Wait, what is an OOB function? I recognise document.createElement as a native accessor, but what does OOB stand for?
You should be able to use yt's API to grab the videos off his channel, then roll your own bit of js to switch out the source for the background video. As for communicating from inside the iframe, I believe you might be able to get something done using an arrangement similar to how pop ups communicate with the parent window. Window.parent or something. Will flesh it out when I get to a PC. 
My work pays for peep code access so I was able to watch these. I must admit I didn't find them overly helpful. I found the example apps difficult to follow and I ended up having to watch/read a number of other backbone tutorials afterwards. Not to say they are worthless, they're worth watching but you'll likely need to do more research after. Also make sure you look into the backbone boilerplate, it helped me get my head around backbone by providing better organization of the code. 
No kidding!
Sir, I just want to say that #x y z{...} syntax is beautiful. I hate =&gt; despite loving lambdas in C#.
You don't have to use iframes. The youtube api allows you to embed a single video, and then you can change what video is playing on it, and load a playlist, etc. I recommend checking out youtubes api as it will not only make your life easier, but your code and the website much better. [https://developers.google.com/youtube/js_api_reference](https://developers.google.com/youtube/js_api_reference)
It's a bit like Haskell '\x y z-&gt;...'. Without arrow (which is a pain to type), but '{' '}' being explicit (since they are explicit for functions and recommended for if/for/while). Using '\' would be nicer than '#' though (saves you from pressing shift). I don't know whether '\' can fit in Javascript without problems.
[here you go](http://jsfiddle.net/HwbH8/)
Yeah probably the terminology. For those that don't know, the top one returns null while the bottom one returns undefined (ret is "hoisted" to the top but not the value).
I recommend the peepcode screencasts on backbone. I just watched them over lunch breaks (the third one I watched a few times) and that helped me be able to jump into backbone thinking I knew what I was doing. With that confidence, I could dig in and do the real learning which comes from actually building an app. On another note, Peepcode has some of the highest quality screencasts around. They're awesome.
Awesome, that clears things up quite a bit. I was just looking at .getJSON, didn't even know about using .Ajax thanks!
Hey! A Demo page would be great to have! Thanks. 
I think it is. At least, it’s not like you can just “start writing” in Coffeescript. Backbone is complicated enough that adding another layer of complexity _right in the middle_ of learning it seems kooky to me. Anyway, I like Coffeescript. I just don’t think it was a fair thing for PeepCode to do, especially for people who had paid for the first two installments.
And there are many who believe that these sites do exist for the **sole** purpose of entertaining them, and if they get nothing financially out of it, that these sites should not be able to acquire anything from them. At all, ever. 
Stackoverlow.com
 var cookies = document.cookie.split(";"), cookiel = cookies.length; Your strange naming convention is irrelevant to the parsing requirements the browsers set for cookie storage.
https://developer.mozilla.org/en-US/ /topic
I didn't realize that they did that :( I think that once I get the hang of it, I'll make my own screencasts, but for free
thanks
I don't mean to totally diss the videos. The first two are really good. 
The benefit of OpenID et. al. is the ability to assert that you have access to an account on some third party site, without providing the password to the account on that site. E.g., here on Reddit, you can be assured that I have access to the account "Nebu", but if you got a message on Facebook from someone named "Nebu" who claimed to be the same person as "Nebu" on Reddit, how could you be sure that that person was telling the truth? Probably, you'd ask that Facebook-Nebu to post a specific comment on Reddit under the Reddit-Nebu account as proof, and that's basically exactly how OpenID works. If you're relying only on local storage, then from the website's perspective, they have to rely purely on data provided by the browser, which is not sufficient proof. They want to be able to cross check your identity with other sites.
Who disables JS on IE?
Most of the heavy lifting can be done with SASS and Compass. If you want the fading to work for IE 6, 7, 8, and 9, then you'll need a JavaScript framework to do the opacity animations. I'm not going to show you that because it's perfectly fine to not have it fade for those browsers. I would use 3 HTML elements for each "image link". One &lt;a&gt; with two &lt;span&gt; elements inside: &lt;a class="my-image-link" href="/my-stupid-blog/"&gt; &lt;span class="my-image-link-image1"&gt;Click Me!&lt;/span&gt; &lt;span class="my-image-link-image2"&gt;Click Me!&lt;/span&gt; &lt;/a&gt; All 3 elements need to be made a block-level element and have a defined width and height. The &lt;a&gt; needs relative positioning. The &lt;span&gt; elements will have the 2 images as background images that will cross-fade : @import "compass/css3"; .my-image-link { display: block; position: relative; width: 100px; height: 20px; } .my-image-link span { display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: url(/my-sprite.png) no-repeat; @include transition-property(opacity); @include transition-duration(1s); } .my-image-link-image1 { background-position: 0 0 !important; @include opacity(1); } .my-image-link-image2 { background-position: 0 -31px !important; @include opacity(0); } .my-image-link-over .my-image-link-image1 { @include opacity(0); } .my-image-link-over .my-image-link-image2 { @include opacity(1); } The "my-sprite.png" image should have both images in it (one on top the other). The "@include" stuff is the SASSy goodness. It'll take care of browser compatibility and CSS vender prefixes. To get everything to work, you'll need JavaScript to add the class "my-image-link-over" to the &lt;a&gt; when onmouseover fires... and remove the class when onmouseout fires.
I know. If I do recall correctly, they don't even really support IE 7. Correction: Google doesn't support IE 7.
well it is for a client. it doesn't need to be ie6 compatible and not really even 7 but i do think it should have some ie capability such as 8 or 9. what i have right now is at http://markmarzeotti.com/blacknight/mz/index.php. i have it working with css3 but i have to test in ie. and i dont have high hopes.
If you want to share running examples, try http://plunker.no.de/edit
My example should work in all major browsers. The animation is handled with CSS transitions, so it won't animate with IE 6, 7, 8 or 9. I like it cause you aren't explicitly writing browser specific code, not heavy with JavaScript DOM manipulations, and REALLY bad browsers will be able to read it somewhat. I don't like the double "Click Me!", but I don't want empty tags... I didn't check your code. If you already have a good solution, I'd say use was you got.
neat. so it doesn't seem too worth it to persuade you into learning some of this neat and useful stuff but i can at least help your code function let us look at your collision code function detectCollisions(){ if(collisionX()) dx = dx * -1; if(collisionY()) dy = dy * -1; } function collisionX(){ if(ballLeft &lt; 4 || ballLeft &gt; 462) return true; return false; } okay - this function is the mess of the problem here. it's a little bit confusing if you want it to stay like it was so i've re-written it to how i think you wanted it. function collisionY(){ if(ballTop &lt; 4) return true; if(ballTop &gt; 470) return true; // i assume you want it to bounce off the ground as well ? //if(ballTop &gt; 470){ &lt;---- im not sure why you check this like that? // here is your problem //if(ballLeft &gt; paddleLeft &amp;&amp; ballLeft &lt; paddleLeft + 64) return true; // this means the balls left is further to the right than the paddle left // and the balls left is left of the paddles left by 64 } it is weird= why you are doing both Y and some kind of weird X collision in the y collision function. If you wanted to check the balls x position against the paddle position it seems logical to put that in the xcollision function. you want to be checking if the balls left is EQUAL or LESS than the paddles right. you can do this by checking (ballLeft &lt;= paddleLeft + 64) since i assume the paddle is 64 p.s nice sideboob
window.scrollY Compare this value against a position, and then set the element's class accordingly. You can use **window.onscroll=(function(){ ... });** for event handling
Do you have any other work around that doesn't use the screen dimensions? Like looking for &lt;div class="name1"&gt; in the text as reference?
Yeah, I saw the JS there but I kinda got lost somewhere. &gt; the height of each panel must be the height of the window. otherwise the .eq()-trick does not work. Thanks for that!
screen dimensions?... he didn't mention screen dimensions...
I highly recommend the tried and true Bloom Filter: http://www.jasondavies.com/bloomfilter/ This is a highly compact data structure that the first spell checkers used. It "compresses" a dictionary into a much smaller bit set which can answer the question "Is this a word?" very quickly but with two trade-offs: 1) You can't access the original words at all. So you can't say what are all the words that start with "ro", for instance. And 2) Depending on how compact you want the Bloom Filter, you can get false positives. In a nutshell, here's how you build it: 1. For each word in your dictionary, use 3 hash functions to calculate 3 hash values for the word. 2. Use each hash value as an index into the bit set and set the corresponding bits. (The bigger the bit set, the fewer "false positives" you'll get later. You'll have to experiment.) To ask "Is this a word?", do the reverse: 1. Calculate the 3 hash values of the test word. 2. Look up those bits in the bit set. If any bit is zero, you know your test word is not a word. If all 3 bits are set, you know with a high-probability that your test word is in the dictionary. BTW: To encode a bit set in JavaScript, you'll probably want to make it a string value that is 64-bit encoded or UUEncoded and then, at run time, decode it into an array of 32-bit values for quick lookups.
I see you're still a little stuck on this.. window.onscroll=(function(){ // note: effectMap must be sorted from lowest to highest keys var effectMap={ ($('.name1').top()): ($('.name1')), }, currentElement=null, clearElement=(function(){ if (currentElement) { $(currentElement).removeClass('effect'); } }), setElement=(function(el){ currentElement=el; $(el).addClass('effect'); }); return (function(){ var suitableElement=null, i; for (keyPos in effectMap) { if (window.scrollY&gt;=keyPos) suitableElement=effectMap[keyPos]; } if (suitableElement) { clearElement(); setElement(suitableElement); } }); }());
Bootstrap 2 also has a very nice Scroll Spy feature, you might want to look into that -- http://twitter.github.com/bootstrap/javascript.html#scrollspy
Looks far more painful and ugly than [JSDoc](http://en.wikipedia.org/wiki/JSDoc). EDIT: Being a user of VisualStudio, I am aware that the XML bullshit is how they handle documentation
I see where your coming from and I agree but I need it to animate in all browsers. Including the latest IE. The css animation is not even working in firefox and thats a big problem. I think the way to go will have to be Javascript. I was using this tutorial http://bavotasan.com/2009/creating-a-jquery-mouseover-fade-effect/ which worked awesome and exactly how i wanted it to but for some reason i could not repeat the script 3 times for the three different links...
 &lt;comment&gt; &lt;main_thrust&gt;Wow. Is there anything that can't be made better by &lt;abbreviation for="Total clusterfuck"&gt;XML&lt;/abbreviation&gt;?&lt;/main_thrust&gt; &lt;additional_comment type="sarcastic"&gt;I should think not.&lt;/additonal_comment&gt; &lt;/comment&gt;
Fucking MS. Want to know why you're hated? Quit fellating XML and going against the standards and practices already set forth by the ecosystem. _see also: [Another example of MS breaking standards to push their fucking XML ideology](http://groups.google.com/group/http-archive-specification/browse_frm/thread/d396f784a932061f/814e396e800e2697?hl=en&amp;lnk=gst&amp;q=ie#814e396e800e2697)_
Nice one :)
I have to second this. Furthermore, why are you reading an article from 2007 from IBM India about javascript memory leaks? With quirksmode example code that features `document.write`? If you want to find memory leaks in your code, look no further than your profiler.
I think this looks like it kicks ass. I hope there is a published schema out there used to formally define the documentation elements, structure, and so forth. It would be much cleaner if the documentation fit inside a single block comment. I cannot tell from the article if single block comments are support in this convention. I am probably going out on a limb here, but I am willing to bet that people who violently hate XML have 0 experience developing in it, particularly XML Schema or something else advanced. If that is the case then they can cry all they want, because their opinion is worthless anyways.
Use css transform and transitions when available Include this code or modernizr in your scripts function getProperty(arr0, arr1){ var tmp = document.createElement("div"); for(var i=0, len=arr0.length; i&lt;len; i++){ tmp.style[arr0[i]] = 800; if(typeof tmp.style[arr0[i]] == 'string'){ return { js: arr0[i], css: arr1[i] }; } } return false; } function getTransition(){ var arr0 = ["transition", "msTransition", "MozTransition", "WebkitTransition", "OTransition", "KhtmlTransition"]; var arr1 = ["transform", "-ms-transition", "-moz-transition", "-webkit-transition", "-o-transition", "-khtml-transition"]; return getProperty(arr0, arr1); } function getTransform(){ var arr0 = ["transform", "msTransform", "MozTransform", "WebkitTransform", "OTransform", "KhtmlTransform"]; var arr1 = ["transform", "-ms-transform", "-moz-transform", "-webkit-transform", "-o-transform", "-khtml-transform"]; return getProperty(arr0, arr1); } function getPerspective(){ var arr0 = ["perspective", "msPerspective", "MozPerspective", "WebkitPerspective", "OPerspective", "KhtmlPerspective"]; var arr1 = ["perspective", "-ms-perspective", "-moz-perspective", "-webkit-perspective", "-o-perspective", "-khtml-perspective"]; return getProperty(arr0, arr1); } var transition = getTransition(); var transform = getTransform(); var perspective = getPerspective(); And then use like this, it graceful degradate to jquery animation: var mypath = $("#mydiv"); if(transition){ mypath.css(transition.css, transform.css+" 1.2s cubic-bezier(0.190, 1.000, 0.220, 1.000) 0s"); mypath.css(transform.css, "translate(0,100px)"); }else{ mypath.clearQueue().stop().animate({top:100},{queue:true, duration:1200, specialEasing: {top:'easeOutExpo'}}); } 
one thing I'm worried about is whether or not they are rails-agnostic: a lot of tuts on backbone (for some reason?) have been using ruby on rails, and I'm using node
Looks like the stable channel upgraded to v18 on Mar 28 so everyone either has it or just needs to update. Awesome! I've update my post, thank you!
Yes, I should have used Object.getPrototypeOf() instead of `__proto__`. That would be more correct.
Very nice. Another good use for wide screen monitors.
If you use css3's 3d transforms it will kick in hardware acceleration and will result in much smoother animations. Just a little tip if you go that route.
JSDoc just looks clumsy and disorganized in my opinion. I was not aware that JSDoc was a recognized standard. What standard is JSDoc associated with? I believe JSDoc is just one implementation for automating extraction of documentation. I am not making any comparison of XML versus JSDoc, by the way. &gt; how is anyone better served by the inclusion of an XML-based formatting for javascript documentation? It certainly better serves applications with XML parsers. Another advantage in using XML is that XML from one instance can easily be included within XML of another or unrelated instance. Either way the comments have to be parsed by some automation engine.
That's only because MS adopted jQuery, and I believe they even provided the new documentation. So, the only reason it exists is due to MS's prosthelytizing. Can you name even one other open-source project that uses this style of commenting?
yeah no thanks
The one being defined for the HAR spec on that same newsgroup?
Thanks! I'm still new to *real* JavaScript (coming from using jQuery for a lot of web apps). It means a lot to me to hear that :)
1. Is it `xmlDoc` or `xmlDOc`? I see both in your code. 2. You are calling `document.write()` inside a callback function which is called after the XML data is downloaded. You can't do that. You need to use another way to insert your dynamic HTML into the DOM, either `innerHTML` or DOM methods. 3. Your `ActiveXObject` is IE-specific. Don't you plan to support other browsers? You could use jQuery for this instead, and also use jQuery for the DOM insertion. 4. When you post code here, put four spaces at the beginning of every line to preserve the formatting.
Also if you want to try this: https://github.com/louisremi/jquery.transform.js will use transform with jquery and this: https://github.com/louisremi/jquery.transition.js/ will do transition with your animate if the browser support it have still to test if the first one use real css transform (so hw accelerated) or it just manages to do transforms with jquery (like rotate and scale..)
Can we have this wrapped in a chrome extension?
think I'll give this one a go as well, for the sake of trying out more methods of doing this :)
Thank I'll be trying it :)
That looks nice.
The handlers are defined in bootstrap.min.js
But in this example, shouldn't the Esc/X/clicking outside the modal give the same behaviour as the close button? Just a little confused
Looks good, some nice ideas in there. Could be very useful as assertions in a test suite as well! What I've done in the past to verify complex object types is use JSON schema and a validator. It's quite useful to establish an API 'contract' so to speak. 
Simple and nice use of deferred. Better if it wasn't depending on an engine template like Mustache.
I ran your code through a beautifier and I am guessing it is supposed to look like this: var xmlDoc = new ActiveXObject("Microsoft.XMLDOM"); function loadXML(xmlFile) {} //xmlDoc.async="false"; xmlDoc.onreadystatechange=verify; xmlDOc.load(xmlFile); } function verify() { if (xmlDoc.readyState != 4) return false; } function traverse(tree) { if (tree.hasChildNodes()) { document.write('&lt;ul&gt;&lt;li&gt;'); document.write('&lt;b&gt;' + tree.tagName + ' : &lt;/b&gt;'); var nodes = tree.childNodes.length; for (var i = 0; i &lt; tree.childNodes.length; i++) traverse(tree.childNodes(i)); document.write('&lt;/li&gt;&lt;/ul&gt;'); } else { document.write(tree.text); } } function initTraverse(file) { loadXML(file); var doc = xmlDoc.documentElement; traverse(doc); }
I was waiting for this for soooo long!
Unless you're deliberately trying to make your solution IE-only, you're doing it wrong. You don't want to use ActiveXObject at all, unless you need to support IE 6 for some ungodly reason. And even then, you should check that you need to use it before doing so. [Here's a tiny Atom feed fetch/display tool I wrote a while back](https://gist.github.com/1596907). Look at the add() method which fetches the XML and traverses it.
I often do it when reposting URLs. Not necessarily "Your mom", sometimes I'll use "Goatse" or something appropriate for the subject matter.
Yeah, a Chrome extension would be awesome, especially if it let you enter your choice of parameters to replace on all links.
It seems like there are a bunch of programmers obsessed with maximizing the terseness of the language. When they went away and did their thing with CoffeeScript that was fine, because I could just ignore it. But now bad ideas from there are getting pulled back into JavaScript. I don't like syntaxy languages with lots of operators. That way lies Perl. If we need a new kind of lambda body with different semantics, something like var foo = lambda (x) { ... } would work fine for me. If people don't like the word 'lambda', use 'method' or something. There's absolutely no need to introduce a new infix operator and more precedence rules to remember.
I edited the plunker link with the latest code from the gist.
Check ut sitepoints learning: https://learnable.com/courses/javascript-programming-for-the-web-40 I really recommend this one.
Or... I don't know, maybe: (function () { // Your library comes here }).apply(this.ns); So your library doesn't have to concern itself with prepending 'ns' to everything.
I asked a similar question a while back, and I was provided with [The Mozilla Developer Network](https://developer.mozilla.org/en-US/learn)!
I use immediate functions all the time and have encountered a situation where apply or bind save me time only once, because I needed recursive access to the global Math object. If you never use the "this" keyword the apply and bind methods are of little or no use.
It's official - there are now more Javascript frameworks and libraries than there are tits on the internet. I have a very hard time keeping up with developments in the Javascript world lately as it has exploded, and I feel completely paralyzed by all the choices. Should I use ember or backbone? Or spine? Handlebars or moustache or whatever's new this week? We need a month long javascript-free holiday to digest everything. 
Oh, I didn't know that. In that case I should specify: Tested (by me) in Firefox9+
Wow. Amazing demo. I'm so excited to see how WebGL is going so fast. 
Isn't specifying it as a "client side JavaScript framework" redundant? :P (disclaimer: Yes! I know about things like Node.js)
Yes. And for anyone who didn't read the article, I'll point out that the OP is arguing to stop playing the game. Just make your for-loops look like for-loops and be done with it.
Specifically: https://developer.mozilla.org/en/JavaScript/A_re-introduction_to_JavaScript if you're looking to learn. The MDN in general is awesome for a proper reference place for JS and HTML as well.
By "in session" I mean just storing the parsed json object in a variable in the javascript sandbox. Read the examples for jquery ajax call. It should be easy enough from there...
You cannot make cross-domain AJAX requests. There are some workarounds like [JSONP](http://en.wikipedia.org/wiki/JSONP) or [CORS headers](http://www.w3.org/TR/cors/), but both require control over the other server.
Yes, if one window can see the other (A can see B), then the reverse is true as well. From the perspective of B, A can be called by talking to window.parent (whereas A can call B from the returned value from window.open). Edit: This appears to be what that question on SO is talking about, that from the opened window, you can pass information (though not really dom events) back to the parent window for later usage.
Shaders happen completely on the GPU, the speed of the WebGL api has nothing to do with it.
&gt;* Teaching a contractor how to use 'template language X' is a waste of my money &gt;* Finding a contractor who knows 'template langauge X' is a waste of my time Right. And the solution is to use another piece of technology which has the very same issues. Actually, Plates is quite a bit worse *because* it's different [1]. Underscore's templating stuff, Mustache, Handlebars, Dust, and the like are all very similar. If you know one, you know them all. The only missing piece is syntax and perhaps a few special features, but that stuff is easy to pick up. Anyhow. Handlebars does everything I want. It's fast, clean, and very straightforward to use. Plates looks like a big step down. [1] The author even backs this up for me: &gt;despite the "issue" reports asking for "nesting" or "collections" etc - as they're missing the point
But what did you leave there? I don't know whether or not to disagree because the blog post was a bit too high-context for me.
Another way: !function(){ //some code }()
If you want a more hands-on approach, I recommend you install Firefox with Firebug, then accessing a locally hosted webpage, use the console feature of Firebug and directly type in some JavaScript into the console. This will give you a live preview of your code. Sorta like IRB in Ruby. I highly recommend doing this along with the Mozilla links people have already posted. It will accelerate your learning and make it very enjoyable. 
For beginners the best is without a doubt [http://www.codecademy.com](http://www.codecademy.com) EDIT added link 
If you're using same-domain scripting then it's easy with parent.someFunction(); Cross-site scripting is a bit more difficult, and I think the topic is something that I'll save for an article later, unless people really want to know about it. Here's some code that can guide you in the right direction. Let's assume we're using JQuery for dom events, like pressing the button. **Parent.html** &lt;script&gt; $('#button').click(function(){ newwin = window.open('Child.html','MyChild'); } function alertHello(){ alert("Hello world!"); } function alertClose(){ alert("Child closed!"); } &lt;/script&gt; &lt;input type="button" id="button" value="Click Me" /&gt; **Child.html** &lt;script&gt; $('#childbutton').click(function(){ parent.alertHello(); } //do something when the window is closed or navigated away from $(window).unload(function(){ parent.alertClose(); ) &lt;/script&gt; &lt;input type="button" id="childbutton" value="Click the Child" /&gt; 
I found myself working with bootstrap a lot this days. So I need something like this. Also bootstrap modals are more light then jQuery UI.
I think what you need is javascript templating, http://stackoverflow.com/questions/552934/what-javascript-templating-engine-do-you-recommend
Very clever. Thanks for sharing.
I'll preface by saying I know nothing about the intricacies of using inline-block, but whacking in "vertical-align: top;" for #left and #right will cause them to vertically align.
apparently by default it's aligning the baselines of the blocks - and it has "helpfully" defined the baseline to be the last line of the inline-block.
Can you try adding a position:absolute; to the #right
as long as that was dummy content, here's the fix http://hgg.k.af weird as balls. source: http://avc.k.af
This is the correct answer in that "vertical-align: top" will get all of the containers to align along the top. The other 'problem' is the gap between each block. White space between inline-block items is collapsed into a single space. The easiest solution is just to remove the white space like so: "&lt;/div&gt;&lt;div&gt;". Otherwise, you have to do some trickery to remove the gap. (The trick I've seen is to set font-size:0 on the container, and then reset it on each container.)
A more sensible solution may be to simply use gzip compression.
The reason it is not lining up is because of the &lt;br&gt; tags you have in #left. The breaks essentially create 5 "lines" and the #right div is inline with the last line. Changing the vertical-alignment as suggested by andrew24601 will fix this.
Looks like a pretty clever idea. Especially if you are doing early testing and aren't using minified JS, so the line numbers in the error logs will actually be useful. 
I thought [this](http://www.reddit.com/r/webdev/comments/rspmp/canjs_released_new_js_application_framework/c48l3id) was a pretty fair assessment.
Even if you are using minified code you can supply hints along side the error messaging. I am not sure of the correct format for supplying additional information. I am testing today if the new line character is preserved in the GA logging.
also of note: [Github repo](https://github.com/bgrins/spectrum) [Demo](http://bgrins.github.com/spectrum/)
Yes, it's common. Examples are [jQuery](https://github.com/jquery/jquery/tree/master/src), [Knockout](https://github.com/SteveSanderson/knockout/tree/master/src), [PHP.js](https://github.com/kvz/phpjs), [PDF.js](https://github.com/mozilla/pdf.js/tree/master/src). Worth noting that some ([Underscore](https://github.com/documentcloud/underscore/blob/master/underscore.js), [Backbone](https://github.com/documentcloud/backbone/blob/master/backbone.js)) keep it all in one file, but these are comparatively smaller projects.
Use [requireJS](http://requirejs.org/)
you know what would be fun? use php as template language for javascript :)
Here you are friend. This free site assumes no prior experience: http://www.codecademy.com/
[Codecademy](http://www.codecademy.com). Easiest way to start.
It is not just common, it becomes basically necessary if you are working on a project of any decent size. Combination and minification are the norm for deployed code.
This question is asked frequently, so I (quickly) typed up a blog post a few months ago, [Learning JavaScript](http://derek.io/blog/2011/learning-javascript/). Hopefully it's a good starting point for you. I mostly learned from curiosity and on the job training. I've been in Web Development for ~7 years, and hacking on JS for about 5 of that. I'm now on the YUI team at Yahoo, meaning I code a JavaScript library full-time. JS is a really fun language with a shallow learning curve, but it's also easy to shoot yourself in the foot. So the best way to learn is just start playing around, buy some books, read some tutorials, and have fun. The great thing about JS is you need nothing but a text editor and a web browser to get started. Actually, you don't even need that if you start with Node.js (as my post recommends). Also, [http://jsbin.com](http://jsbin.com) &amp; [http://jsfiddle.net/](http://jsfiddle.net/) are good online editors that can let you live edit code inside your browser. I'm sure someone will say "Start with jQuery!" But keep in mind that isn't learning JavaScript, that is learning DOM manipulation with the jQuery library, a subset of JavaScript. So, if you really want to learn JS **as a programming language**, learn it outside of a library, and preferably not using the DOM API, hence, my suggestion for learning inside Node.js. But it's up to you and your interests. Good luck!
I wrote my own nodejs script to do it, but I've recently seen a couple of tools ship to help with this: - http://weblog.bocoup.com/introducing-grunt/ - http://livereload.com
Use AMD modules and then r.js at build time. 
Don't forget to consider compression of the resulting file.
You mean this http://twitter.github.com/bootstrap/ ?
Why are people downvoting this comment? Is requireJS not recommended?
https://developer.mozilla.org/en/JavaScript
It is fantastic. I suggest it whole heartedly. Funny note, the creator of yepnopejs uses requireJS for his own projects. (yes, they are for two different and partially overlapping use cases)
They're probably downvoting him because it isn't relevant to the question you posed. The purpose of RequireJS is to resolve dependency loading of multiple libraries across a large application in an asynchronous method. It saves you from loading ALL of your libraries on every page, regardless of if they are needed. However, from your title and description, I'm assuming you aren't referring to the joining of a bunch of individual libraries into a single file, but rather the splitting of a codebase into multiple files for easier management. If all of the code in those files is to be used on the page, RequireJS wont save you anything.
Yes.
[Advanced](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752/ref=ntt_at_ep_dpt_1) [Medium](http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/ref=ntt_at_ep_dpt_2) [Old, but probably still relevant](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1333691276&amp;sr=1-1) [Yet to be released, but you can get the in progress pdf from the publisher](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=ntt_at_ep_dpt_1) [Docs](https://developer.mozilla.org/en-US/) [The one that everybody recommends](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) [HTML5 spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/) [HTML5Rocks](http://www.html5rocks.com/en/) [Latest Webkit News](http://peter.sh/) Other than that build build build. Make demos and play. Ask questions here or on stackoverflow and read other people's code. Also, lots of great old JSConf videos out there. 
Ah thank you, that makes sense
And to use the .jgz extension if your server can't do it transparently. Safari hates .gz.
This really should be posted in one of the larger sub-Reddits where it would get more attention. It's really something that would interest the general public, not necessarily Javascript programmers.
Isn't that the right thing to do? If your site went down would you assume that something is wrong with your website or something wrong with the tubes? 
rjett's excellent list and [DOM Scripting](http://www.amazon.com/DOM-Scripting-Design-JavaScript-Document/dp/1430233893) really helped me get my head around JS and the DOM. Once I grokked all that book had to offer moving to and understanding jQuery was a snap. [Bulletproof Ajax](http://www.amazon.com/Bulletproof-Ajax-Jeremy-Keith/dp/0321472667) was an excellent follow-up to Keith's DOM Scripting.
Fuck whoever does this. I feel it's completely unethical to utilize JavaScript injection just to get ad impressions.
And to profit from web pages you don't own and haven't paid the owner to advertise on (or even asked permission to alter).
From his initial observations, it appeared to be a CSS layout issue specifically affecting his own site design. I don't see how his investigation should have gone any other way. He followed the symptoms.
A very valid point indeed. 
You have to do it. The best is to have scripts to build and deploy together both the standard multi-files clear version and the minified one. You'll have a fast version for the regular user and a clear one for your debugging needs. It's much easier to debug if you have 50 small js files than one gigantic one. Minifying is easy. You can write a minifier yourself but for a better result grab one like Google's Closure compiler.
and this is why I use an ssh tunnel+proxy any time I'm using an untrusted ISP.
He's kind of skipping over the fact that something like Mustache works well because the rules are purposefully kept simple and there are implementations for practically every programming language. I've used it on a lot of things and never felt the need to use the lambda feature. Someones who's smart enough to write HTML correctly surely can understand a simple templating language. That being said, Plates is interesting.
I believe it was standard operating procedure for NetZero back in the '90s, when they offered free ISP access in exchange for ad impressions.
Note that jQuery is not just a shorter notation. It also normalizes lots of browser differences and bugs when interacting with the DOM, like differences in event handling, dealing with attributes and properties, and xmlhttprequests. Not that I would always recommend jQuery. jQuery teaches you to do things the jQuery way, and although it will save you a lot of time, it's still very valuable to understand how pure Javascript works.
Long ago I had a proof of concept ad-injector proxy working; it did the job but it was also really good at breaking the web pages that passed through. The problem which led me to abandon the project was copyright - specifically the fact that I was building a machine to automatically modify and redistribute copyrighted material.
I can tell you flat up that I have confirmed that you are right. Any suggestions for formatting the event response text to GA?
$368 a night to stay at a Marriot? That **is** outrageous.
[caniuse.com](http://caniuse.com/#feat=queryselector) will give you a good breakdown of most newer web features. The best part is that it integrates with web usage stats to give you a total percentage of users that will be affected, in this case 89.57%. 
I would agree if you had been more clear about whether or not its a website you own. I see nothing wrong with injecting code into websites you do own.
Yes, but also keep in mind that they are altering copyrighted content in order to make a profit.
If I remember correctly, there were not injecting the ads though, they had a different toolbar that showed the ads. I believe there was also a way around the ads by removing certain files.
I seem to recall those ads being in a separate window, though.
Here is how I learned to write JavaScript: 1) JavaScript is a programming language. Determine a programming need. 2) Write an application to satisfy the identified need. 3) Test the application looking for errors. 4) Document results. 5) Refactor the code looking for areas of improvement in portability, distribution, performance, etc. 6) Modify the documentation. 7) Find users. 8) Ask the users for feedback. 9) Add enhancements. 10) Repeat steps 3 - 8 until enhancement is complete and documented. 11) Repeat steps 9 and 10. In order to get good at writing applications you need to practice writing applications. Over time you will refine your technique and polish your style. You will form opinions as to what conventions are appropriate and what to always avoid.
Pleeeease don't start with jQuery. Please for the love of all that is holy don't start with a library.
LOL, chill. I'm not insulting the guy or implying I wouldn't have done the same thing. I'm just saying that it's a common theme among programmers to do something like spend an hour checking out one possibility when it could have been solved by spending a few seconds to eliminate some obvious potential suspects. Again, I'd have probably done the same thing, and I guarantee the guy is a better programmer than I am. That doesn't mean it isn't funny.
I like that they allow predicates. Most modules die outside of the given type space.
YUI is awesome. I'm still an undergrad but I've really thought of applying to join the group sometime in the future since it looks like a fantastic project to work on. One of the few libraries I'm fond of, and I agree, it maintains the integrity of the language nicely.
This is a very good idea. I've done some testing about this using different approaches. I think these examples can help you: * http://jsfiddle.net/phms/tuQdd/ * http://jsfiddle.net/phms/nWdzR/ * http://jsfiddle.net/phms/GAyrK/ * http://jsfiddle.net/phms/D7GPs/ All in one: http://jsfiddle.net/phms/b34wT/
Could you post what you have on [pastebin](http://pastebin.com), or similar, so that it can be seen in context?
Exactly, I feel that it is an OO staple when doing repetitive things. Here I defined three instances of Fx.Morph and reuse them. I'm actually using it in production for Ajax requests. I have two instances of MooTools' Request and I queue up a bunch at a time, but those same two are being used over and over again. Here is the same example without a pool so everything will run at once and all 400 divs will create their own Fx.Morph object to use http://jsfiddle.net/XkTPJ/2/
This answer is so obvious, cant belive I didnt think of it. Thank you, worked perfectly! 
You want the first entry from A? A.shift(); shift will return the first element and modify the array
It's a private scope pattern, what you described. It's a bit too complicated the you put it, but should work. The most starngelooking part was assigning the values from the server in a synchronious way - which is never a case in client-server architecture, so your app is frozen while waiting for a slow network connection. This is basically the reason, why I wrote this post on my little blog: http://code.trzewiczek.info/2011/12/07/Callbacks-and-closures-in-JavaScript.html It's about using closures in an asynchronious environment. Have fun. BTW: Good approach - teach to learn!
&gt; Or you're in the middle of the queue stack and your objects are all in use and you invoke call, nothing should happen until an object is ready to use. So, by design the code using the pool has to repeatedly try to use an object, without knowing if the call failed or succeeded? There doesn't even appear to be a way to see if there are objects available. This looks like total diarrhea.
I personally would split my code out to separate files that I can manage and use a build script to concatenate and minify them for deployment.
Honestly this was very helpful seeing a practical example. I'm not sure as to its validity (since I've just recently been introduced to the concept), but I still appreciate it nevertheless. 
Good point. Updated with "private" members. I also changed the signature for the function added with act(), it now only receives the object and is bound as a member of the Pool instance. So where in older code you'd do pool_instance.add(object), you change it to this.add(obj); http://jsfiddle.net/XkTPJ/7/ Actually that is wrong and will cause all types of issues if you use multiple Pool instances as they all will reference the same queue and objects variables. Here is the fix: http://jsfiddle.net/XkTPJ/8/
What does that have to do with the use of closures?
Because that's what the whole article is about.
I think you forgot to add a link in your "edit". You got the example right, but it'd be a lot easier to read if the code sections weren't stripes :)
I hate the word "rich," used like it is in the first sentence.
That is exactly what my Frame.js repo was designed for: https://github.com/bishopZ/Frame.js For instance, this will cause most browsers to hang: for(var i=0; i&lt;1000; i++){ $.ajax('myserver.api', { data:i, type:'post' }); } While this will not: for(var i=0; i&lt;1000; i++){ Frame(function(callback){ $.ajax('myserver.api', { data:i, type:'post', complete:callback }); }); } Frame.start();
This guy stole/copied most of my code from another project and didnt give me any credits.
Dustin Diaz's domready is very good indeed but jQuery's implementation (the one used in onDomReady) covers two cases to make it bullet proof: * Fallbacks to the window *load* event * Makes sure *body* exists to prevent unexpected behaviors in IE. Another great function that I used is [Diego Perini's contentLoaded](http://javascript.nwbox.com/ContentLoaded/) but I've opted for the jQuery implementation because IMO there's hardly another library so actively maintained, so widespread and so well tested. 
Ah, I misread the code. I didn't realize this was an asynchronous object pool.
The void keyword is widely regarded as an antipattern as it has no practical use - a "clever" use just confuses maintinance programmers who lack in depth JavaScript knowledge.
Depending on what kind of tasks you're doing (if you're drawing to the screen) you may want to look into window.requestAnimationFrame which will automatically handle situations when the window is not visible.
I posted last night a [simple object pool in JS.](http://www.reddit.com/r/javascript/comments/rxkx9/simple_javascript_object_pool/) What is cool about pooling is that you can define the number of resources beforehand, tell the pool that you'd like to use one, use the resource, and give it back and you wont have to worry about using too many resources because you set the limit. 
I wonder if you could use that to get your users to generate bitcoins in the background for you.
I agree but it is hard to find a word to convey the required meaning. I changed it to 'interactive'.
The part where the author mentions securitization and game exploits..? 
Exactly, we all know frameworks provide a solution for this but when you're building a tool or library that is not tied to a framework and needs to manipulate the DOM you need a function/module like this one. I'm currently working on a tool that manipulates images so I needed a reliable cross-browser function for DOM ready detection, that's why I've built onDomReady based on jQuery's implementation. 
Exactly what this was designed for. 
I guess the thing I'm thinking about is, if general JS support is improving, isn't it the case that at least some parts of jQuery are becoming obsolete? I know that even the spec for Ajax is a pain in the neck (by design, apparently), but that's somewhat a different issue from DOM manipulation. Isn't it true that in part jQuery came to exist precisely because of the crummy interoperability between cross browser DOM APIs? So if the support improves, isn't it also the case that parts of jQuery will become relatively obsolete, depending on the defined browser audience? I kind of doubt that jQuery will vanish within the next couple years, but it seems reasonable to assume that it could, for some defined audiences, within the next, say, six or seven?
Here's an article about requestAnimationFrame by Paul Irish, and a shim which works in older browsers: http://paulirish.com/2011/requestanimationframe-for-smart-animating/
Are you sure about that? The minified version, sure, but the actual code is not that cryptic. [Here's the constructor that handles `$(...)`.](https://github.com/jquery/jquery/blob/master/src/core.js#L78). It's commented reasonably well and you can follow along what it's doing. 
generate bitcoins?
If you really want to learn Javascript, the language, then you don't need the browser and you may find it useful to run Javascript in a standalone interpreter or engine. You have a couple options: - Windows comes with WSH / Cscript.exe since 1998 or so, which allows you to run JScript (**nearly Javascript) programs from the command line. With a little motivation, you can convince CScript.exe to run the Chakra engine, which is EcmaScript 5 compliant and ships with IE9 and later. This is not "nearly Javascript", it's real Javascript, though there are still MS extensions like "new ActiveXObject". But you can avoid those easily. - On other platforms and on Windows as well there are Javascript engines like Rhino and v8 and SpiderMonkey that you can use to run Javascript. Doing this sort of forces you to focus the language, and to stay away from the browser APIs, including XmlHttpRequest, the canvas api, and the entire HTML DOM. Which may or may not be what you want. I once followed along on [a functional programming course from UC Berkley](http://www.youtube.com/watch?v=zmYqShvVDh4) using Javascript this way. The instructor used Scheme, but I did all the homework in Lisp and Javascript, in order to help learn the language. 
Right, I *want* the inner function. I'm intentionally invoking the outer function. I want both foo and bar to be a function-object that returns count (as if it was a static class variable). Sorry if that wasn't clear.
If you want it to act like a static class var, then you cannot define it inside the constructor. If you want it to be in a closure (or "private"), you can wrap the whole thing in an extra function. var foo = (function() { var count = 0; // This becomes `foo` return function() { return function() { return count++; }; }; }()); var a = new foo(); var b = new foo(); a(); // 0 b(); // 1 a(); // 2 **edit:** Like stated above, this all works without the use of `new`, and being you aren't using the object generated by using the `new` keyword, I see no reason to be using it. `var a = foo();` Works just as well and doesn't waste resources creating an object you aren't using.
**[a user wrote a response and then deleted it, so I wanted to preserve it for posterity, because I need an explanation. So pretend this comment is from another user:]** Is this what you want? I'm assuming you want count to be a different static var for each object that it belongs to. If you want count to be static no matter what object it is referenced from, do what kbjr suggested. var init = function() { var count = 0; return function() { return count++; }; }; var foo = new init(); var bar = new init(); document.write(foo()); document.write(bar()); EDIT: If you get rid of new, the code still works. The problem with your original code is that once foo is assigned, it gets assigned to the inner function. The entire concept of the outer function is lost. Thus, when you try to make a new foo, it is setting bar to be the evaluation of the inner function (a number). You cannot call () on a number. 
**[my response:]** &gt;The problem with your original code is that once foo is assigned, it gets assigned to the inner function. The entire concept of the outer function is lost. Okay, good, this is what I want. I don't want the outer function -- I just want count to still be available from it -- which as I understand per closure rules it will be, correct? &gt;Thus, when you try to make a new foo, it is setting bar to be the evaluation of the inner function (a number). You cannot call () on a number. Here's where I lose you. When I make foo, it is setting bar to be the evaluation of the inner function -- so let's not do that. Now, if I set bar to be equal to new foo: &gt; var bar = new foo; ...now what? Why does this not work? Foo is of type function, is it not? And what if, instead of **write(bar())** we **write(bar)**? The code *still* doesn't work -- even with incorrect results. 
Your #3 is actually helping, so thanks for that. I do otherwise understand exactly what new does -- in terms of creating an empty object and associating it with the prototype of whatever object you've set it to. &gt;This object is not a function, so when you try to call it as bar(), you get an error. So what happens when I try to **write(bar)** instead? http://jsfiddle.net/qn2tq/ Why isn't bar being assigned as 1 in this case? edit: Is it merely because you can't assign a primitive as a 'new' object? Or is that an incorrect assumption altogether?
`bar` equals a plain, blank object. That is why it prints `[object Object]`, same as if you'd written `var bar = new Object()`. The int that your `foo()` returned is completely irrelevant and is discarded, because: &gt; If the foo() returns something that is not an Object, then that return value is ignored and the return value is the newly constructed object 
A fine example of this is the jQuery's code. [jQuery build code](https://github.com/jquery/jquery/tree/master/src)
You could return `this` or have no return statement, but if that's the only change you made there would be no effect. Nothing in `foo()` does anything to set any properties on `this`, so the newly created object would just pass through untouched -- you'd still get a blank object out of the constructor. If you want `bar` to be an object that is callable, then `foo()` has to return a function that returns a count instead of returning a count, as in kbjr's example. You could also do this using inheritance, if you're not married to the idea of being able to call `bar()` but instead call some method on bar: function foo() {}; (function() { var count = 0; foo.prototype = {next: function() { return count++; }} })(); var x = new foo(); console.log(x.next()); // 0 console.log(x.next()); // 1 var y = new foo(); console.log(y.next()); // 2 
&gt;If you want bar to be an object that is callable, then foo() has to return a function that returns a count instead of returning a count, as in kbjr's example. Lightbulb moment. This makes a ton of sense. Thanks. And that new code is a complete mindfuck. [This is me right now.](http://suzumiyayuki.files.wordpress.com/2012/01/mind-blown_thumb.gif?w=300&amp;h=300) A variable floating out in space inside of an anonymous function -- being held in place from the top down? No wonder GC in JS is supposedly such a nightmare. I see how it works, though. 
While you used closures properly, you should NEVER, I repeat NEVER trust the client on something like this.
TAL is a pull-style language. It is not genuinely [push-style](http://www.perlmonks.org/?node_id=674225)
AMD?
Asynchronous Module Definition. Here's an article discussing it: http://addyosmani.com/writing-modular-js/
https://en.bitcoin.it/wiki/How_bitcoin_works#Bitcoin_Mining
You're right. In practicality I'd leave all the major variables/decisions to the server.
Ideally, it would also be predicted client-side.
You're right. I will draft up a newer post which takes that into consideration, thanks.
Yes there are a few around. I wrote one myself but can't get myself to put it to use.
No, it's *included* with the $368 you pay to stay in the hotel.
If you've got the means and know-how, you should teach others how to do it too.
Working on the project, I kinda look at it like every day is hackday. Many times is software development, you can look at other projects as a reference for how to do something you need to implement. But working on YUI, often times I'll realize that something we're trying to build has not been done elsewhere, so we're literally inventing new ways to do things all the time. If the project does interest you, my advice would be to learn the language &amp; library as best you can, and start contributing to the project by creating [Gallery](http://yuilibrary.com/gallery/) modules as well as issuing [pull requests](https://github.com/yui/yui3/pulls) to fix/enhance the core library modules. You can find all our bug tickets [here](http://yuilibrary.com/projects/yui3/report/). And feel free to reach out if you ever have any questions. Derek
One more question: If foo's function is called upon creation, why is foo **0** at the first call? Shouldn't **count++** be getting called? Look here with commentary to see what I mean: http://jsfiddle.net/K2bMR/
The post-fix increment/decrement operators work as they do in C: the expression evaluates to the value of the variable before it was modified, so it's as if you'd written this: return function() { var temp = count; count = count + 1; return temp; }; The pre-fix operators work the 'normal' way, so if you want it to return 1 the first time use `return ++count`. (FYI this is the reason that Doug Crockford says you shouldn't use `++` or `--` in JS and why his JSLint warns about it -- he feels they are too "cute" and lead to people trying to compress too much into a single statement. His general philosophy about JS is that anything that has the potential to break or confuse should be preemptively avoided.) 
Found via [CoffeeScript Love](http://www.coffeescriptlove.com/2012/02/backbonejs-vs-emberjs.html) ------- For those who don't want to read the whole thing, a quick summary: * Ember.js encourages binding and computed properties, Backbone supports methods of doing this but is not considered key * Ember.js is opinionated about templates (Handlebars.js) while Backbone.js is template agnostic * Backbone.js aims to be very decoupled much like Node **Executive Summary:** * Ember.js shares Rails goal of Convention over Configuration * Backbone.js gives you the tools without any extras allowing you to build or choose your own like Node
Thanks for the tips. I'll definitely follow them, and reach out if I need any advice. Cheers!
Just to be clear, ints do NOT exist in JS, all numbers are floats.
No, `$.ajax` should return the parsed result, assuming the content-type is correct. 
I didn't set a content-type in the $.ajax command, and as far as what's being echoed by PHP it's ONLY the JSON object that exists after using json encode on an associative array
Know the fundamentals (prototypes, type inference, et cetra). If you impressed a company with your technical skills, you probably have a good chance on the interview. And if it's for an intern level position, if you know that stuff you'll impress people. 
Thanks. I'm completely familiar with all of the fundamentals, and I've taught myself stuff like closures and interfaces to the point of familiarity. I'm going through some previous threads for front-end engineering positions and have found those questions pretty doable as well. My main issue is that I've never done a pure JS interview, and most of my other technical interviews in languages like Python and Java have gone badly (granted, I'm much more comfortable in JS). That's why I'm anxious. Cheers for the advice.
I'm referring to the content-type header that is sent by the server as part of the response, not the one sent by the browser as part of the request. And if you're not setting that header in your PHP script then that would explain it, because the default is probably incorrect. You can use tools like Firebug or Curl to see what's being sent but I'm guessing it's using the PHP default of `text/html`. 
 Array.prototype.duplicator = function() { this.push(this.slice(0)); return this; }; alert([1, 2, 3].duplicator()); Edit (if you don't need the array modified): Array.prototype.duplicator = function() { return this.concat(this); }; Which brings about this solution: Array.prototype.times = function (t) { if (--t &gt; 0) return this.concat(this.times(t)); return this; } alert([1, 2, 3].duplicator());
Just use Array.concat. Or if you insist on making a function: Array.prototype.duplicator = function() { return this.concat(this); };
if your ajax call looks like this (more or less) $.ajax({ url: URL GOES HERE, async:false, success: function(data, status, xhr) { my_params = data; }, error: function() { alert("AJAX call failed"); }, dataType: 'json' }); You won't have to worry about headers. 
Array.prototype.duplicator = function() { Array.prototype.push.apply(this,this); return this; }; alert([1, 2, 3].duplicator());​
It's just like any other language. If you have a class: class Poop { public Poop(options){ this.options = options; } /* Other Members */ } Poop myPoop = new Poop(/* some cool params *); what is myPoop? It's an object that is an instance of the class Poop. Calling myPoop(/* some cool params */); isn't going to re-call the constructor.
Thanks for the concern -- this is a paid internship. ;)
Thanks, I've been building a multiplayer game with Node and HTML5 over the last few weeks to learn it.
Curious, how much do you make? I haven't had a technical internship yet, so it would be nice to have a ballpark figure to compare whatever offer they give me to. Feel free to ignore me.
&gt; As far as I know, new foo; without the call is completely invalid and meaningless. As I posted below, `new foo;` does the same thing as `new foo();`. (See [this](http://stackoverflow.com/a/6439680/1215447)).
That was going to be my advice: create a few things in Node/JS. Good to see you're already doing that.
packaging all your scripts into a single file is the prevailing best practice for JS applications. recommended by both the traditions of computer science and specifically recommended in the HTML5-boilerplate. It is definitely not the only way to build an application. Library loaders like require.js, $LAB, and mine Frame.js (https://github.com/bishopZ/Frame.js) suggest a different application design where libraries are loaded on demand. Library loaders like this are the antithesis of frameworks like EXT, and are not good if you have lots of pages that have a very common code base. However, the page refresh is about to disappear, and applications that use library loaders instead of packagers offer the potential to use a vastly larger code base during runtime.
Crystal clear, thanks. :)
~~You still have to worry about headers: the only way jQuery knows to decode the response as JSON and not XML or something else is because of the Content-Type header, which must be set correctly.~~ 
 header('Content-Type: application/json');
Yes. For most common cases, combining your .js and putting it near the closing body tag will take site performance (regarding javascript) 90%+ to completely optimized. One of the reasons I like require.js is that I can develop modularly, load on demand, AND combine and optimize the scripts at will with r.js 
Check out the latest [spec] (http://api.jquery.com/jQuery.ajax/) - if you set the datatype explictly, (datatype: 'json' - you're good to go; I do it all the time.
Holy crap. This is surprisingly clever. Have you thought about making an iPhone app? This is addictive and challenging enough to probably sell pretty well.
Oh, right, I totally missed that you were setting that. 
WOW! ABSOLUTELY love it... great job EDIT: came back to say the gameplay is EXCELLENT and the random levels feature for me was a PURE shot of awesomeness would buy it on android, please port it over
&gt; You should probably closure the hell out of it though. :P 1. Breakpoint anywhere. 2. Change variables. 3. ??? 4. Profit! There are other ways to cheat (like just taking a screenshot). 
Aye. Ultimately you'd want all the important stuff to be fed from the server in for any kind of practical, production version but... closures and restricted namespaces can help alleviate a lot of pain.
&gt; and I've taught myself stuff like closures and interfaces to the point of familiarity What do you mean by interfaces? I'm familiar with interfaces in Java, just curious how you're using the term WRT JavaScript.
Some things I had to do in my JavaScript interviews: * Write a Roman numeral converter * Write a debounce function * Given a linked list, decide if there's a loop * Given a tree (not necessarily binary tree), decide if there's a loop * Write my own `document.getElementsByClassName` (given API for getting all of the DOM elements) I was interviewing for browser-based JavaScript, but learn Node if you're not familiar.
I like it, I like it a lot. It's simple, but works very well. Edit: one change I'd advise, when you walk off the edge, have the path fade a little like when you pick up a white dot. Sometimes you totally forget the path. Would you mind if I built my own version?
Well it's not really anything built-in, but there's a popular JS pattern which essentially allows you to manually build an "interface", that is a series of methods, and then check to see whether newly created classes include them, and if not throw an error. It's not fullproof and it's quite hacky, but I find interfaces to be very powerful when working with anything large-scale, even in JS.
Cheers! Was this for internship positions?
If you're using tools like Redis or Mongo, algorithms+DS would be pretty important.
&gt;What if I want to program an HTML5 canvas game with jquery, would using Node.js help me? Well, Node.js is generally server-sided, and canvas is client-sided, so no. You can use Node.js to run arbitrary JavaScript code on any machine that has Node.js installed.. most people use it to run webapp server software on their servers, because that's why Node.js was created. Maybe you should go to their website and do some reading.
Care to share?
Client-side MVC, like backbone (http://backbonejs.org/). It's the hotness these days.
Well, to state the obvious: add functionality to web pages. Or power Node servers. I myself use it to rapidly prototype 2d games that I later port to other, clunkier languages. JavaScript is just about as capable as many popular native languages, barring a few things like file system access. However, some people use JS in conjunction with a native framework to create mobile/desktop applications that can be used as stand-alone programs. These frameworks usually offer features that aren't implemented in browsers (like unfettered file APIs), but they might not be too reliable. JavaScript isn't used commercially except in web services, so it's more of a gateway language for those that start programming in it, then move on to lower-level languages.
Yes; a few places. RockMelt, Apple, UniversityNow, Twitter.
These days practically every site uses at least a little bit of JS -- to make interactive features; to display ads, videos, galleries, comments, recent posts, etc; to power all that god-awful insufferable "like this" flair, etc. Even the sites that don't appear to have any of those things probably uses JS to gather visitor statistics, or to deal with browser inconsistencies. Try disabling JS in your browser (or install NoScript) and visit your favorite sites and you'll quickly learn what JS is used for.
That is pretty fun. Make it so that you can select decrease score/lives with a keyboard press; it was a bit disruptive to go from arrow controls to mouse.
If you're letting maintenance programmers who lack in-depth JavaScript knowledge loose on your codebase, you have bigger problems than `void`!
Yeah I'm not implying that it's bad! I'm just saying it's a bit programmer art-ish. It could be tweaked a lot while still remaining its basic looks. As of late there are a lot of simply designed games but stylized. [Geometry Wars](http://www.youtube.com/watch?v=Kijt1dH1u2g&amp;hd=1#t=60s) comes to mind. There are a lot of tile based games which are stylized as well. It can even be as flat as this and still remain stylish. Look at Windows Phone's interface for instance.
yeah and you can definitely have the feel you have right now but stylize it more... it doesn't look bad by any means right now and I think you have a great concept at hand
Awesome game :) .. but I'd really appreciate if i'd be able to choose the restart options by using my keyboard. Switching between mouse and keyboard is a bit annoying :)
* Node.js uses CommonJS framework, so understand how to include and request modules using this framework. Don't waste time with other frameworks. If you don't know a favored framework then just be honest that you program in JavaScript and can read the documentation to use any framework. * Have some basic understanding of prototypes and closure. At the very least you should be able to demonstrate some rudimentary understanding of these concepts in a primitive code sample even if you cannot full talk through it. If you cannot fully describe these concepts then just tell them that you can show it in code. * Do not waste any time learning history, or facts, or other trivial knowledge. If you are being hired to program then demonstrate programming potential instead of blogging potential. * Know what NPM is. * Have some knowledge of basic performance knowledge. If your interviewer is a seasoned veteran JavaScript programmer then be prepared to speak to this based only upon discoveries made from your own programming experience. If the interviewer is not a JS god-like titan then you could probably bullshit your way through this by looking at a bunch of artificial jsperf experiments (risky). * If you really really want to impress them then use JavaScript for all algorithmic needs and only use Node.js code for API instantiation and for diverse transmission needs. If you focus a lot of energy on using Node.js to be more than an idiot HTTP responder they will either think you are the biggest badass that ever walked into their shop or they have no idea what you are doing. (Many programmers do not have a strong understanding of transmission innovation.) * Always keep your code simple. I mean dead idiot simple. Focus on completing any task given to you and not on being fancy. It is okay if a program is double in size of what it could be just because your logic is retarded easy to read so long as it performs just as well during execution. * Be able to talk your way through documentation. They may not even bring this up, but if you can put on your technical writing hat to mention documentation, organization, logging, and so forth they will look at you with the potential for leadership. * Be familiar using assisting applications, or ready to learn, such as diff tools and svn or git.
want help? I'd love to work on a project like this... I could port it over to android / iOS / WP7 for you PM me if interested
perhaps just green and red.
AWESOME! i hope you do contact me, that would be TONS of Fun to work on a project I enjoy :D
I've been a developer intern at a company for a year now and just got offered a nice full-time position. Internships may not be well-paid but if you put in the work and show prowess, it can lead to very good things. Good luck!
OP: Why are you going out for an internship instead of a full job? To me it sounds like you are perfectly capable to get a full time job right now instead of an internship. 
Sounds like a small Compiler, cool!
Green/red colour blindness is more common than green/blue.
best to allow for complete colourblindness and include symbols/words as well as colour.
Excellent, but I found a small bug: (on level 5) Going down from the bottom edge of the map to wrap to the top, *in the wrong place* was ignored instead of being detected as a mistake.
Please avoid using colors (especially green/red!) as key gameplay elements. Millions of colorblind users will thank you.
Lives can go below 0, which defeats the purpose, I think. Otherwise, I fucking love it. Great potential.
A detailed article on how to handle and log exceptions in Javascript. Also details how to show appropriate debug/release error message based on the environment
Another craptastic article from DZone.
nice, but it doesn't work when javascript is blocked (it does work when clicking on "full view")
Seems that it would make send for your minifier to have some knowledge about your enums. then when you minify your code, you'd get ride of all of your enums and they'd be switch with integers. does this already happen? 
Clever trick. CSS3 is really starting to amaze me in ways I didn't think were possible.
I really disagree with the "gateway" language thing. I personally know many devs who come from back end Java positions that wanted to become front end devs and did. You need a completely balanced stack of devs for enterprise level projects to be scalable.
Do you actually use any HTML5 features, or is it just normal HTML?
I like the concept and execution but the game is way too hard! Also, if you give a choice between decreasing the score and number of lives, my impulse was just to refresh the page (stupid, but that's human nature for you). Don't give people a choice, just decrease the score.
Pretty cool stuff. Clever usage of pseudo events.
Like Mario World?
This was a cool trick before all of the browsers implemented their own dev tools that allow in-place editing, since you could quickly alter the page to see how design changes looked, but now.....it's a worthless trick.
Basically exactly what Douglas Crawford writes about [here](http://www.crockford.com/javascript/private.html). I don't think you'd be able to access getHeight outside of Player in the example you gave, but yeah, something similar to that.
If you have any socket communication, check for direct use of it (like from the console). Always do data validation on the server additionally to the client-side.
Wouldn't it be better to use `console.log` and perhaps some `$.ajax` magic to build a system that logs errors and sends the errors to some sort of collection point? Alerts are... yeah...
Why wouldn't you just log to a console. You should check out this code base by (Ben "Cowboy" Alman)[http://benalman.com/projects/javascript-debug-console-log/]
because Javascript is all client-side, security isn't really an issue when dealing with a framework. Your security should be done server-side, not client-side. So, basically, when you asked what the big vulnerabilities there were... all the same ones you used to have. The JS framework won't change them.
First of all, it's always faster to use native methods. If you have access to JavaScript 1.6, you can use the [Array filter()](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter) method, which I'd recommend. If you *don't* have access to that, then your method is pretty good. Second, `ElementsFound` should be called `elementsFound` to follow convention. Capital first letter if it's not an instance (`Employee`) and camelCased if it's an instance (`elementsFound`). Third, you're declaring a couple of variables in the global scope, which you don't want to be doing. Change it to `var elementsFound = []` and `for (var e = 0 ...`. Worth noting a slightly faster JavaScript `for` loop that goes *backwards* through an array, but does it faster because it doesn't have to look up the `length` property every time (which is a computed property). var e = this.all.length; while (e --) { // ... } So, to put it all together... Object.prototype.getElementzByClassName = function() { var elementsFound = []; var e = this.all.length; while (e --) { if (arguments[0] &amp;&amp; this.all[e].className == arguments[0]) elementsFound.push(this.all[e]); } return elementsFound; }
Could you elaborate on how this is handled? 
You can just put the jquery code into your app as a file and reference the JS file.
Agreed. JavaScript is actually misleading as a 'beginner' language. They think it's JavaLite, and try to use object-oriented patterns and ideas. It takes a while for people to embrace the functional prototypal style. If you look at StackOverflow many of the JavaScript questions show misconception of how to 'think' about JavaScript. It was certainly true for myself when I first used JavaScript. I went away and used languages like C and Objective-C and then came back to it. Then I could really understand JavaScript. Actually JavaScript is a misleading name. ECMAScript is better, but hideous.
consider for instance if you load up a Twitter or Google plugin and their service doesn't screen out an XXS attack that loads a bit-coin scavenger or DDOS bot hidden in the user content. Worse yet, if an XXS is running on your page, it can modify the page content and trick users into re-entering their credentials.
Most common, I'd predict: Google Analytics, Ajax requests (avoid page reloads) and small animations (like scrolling something into view). The web is also moving towards building complete games and applications within a web page.
As a dissenting opinion, while EvanHahn is right on style and the `var` keyword, your original loop structure is clearer and more idiomatic. Don't optimize that sort of thing unless you see (or better yet, measure) that there's a performance problem. Code is read more than it's written; optimize for that first. Or, as Michael A. Jackson put it: &gt;The First Rule of Program Optimization: Don't do it. The Second Rule of Program Optimization (for experts only!): Don't do it yet. Also, you probably know most of this, but check out [JavaScript Garden](http://bonsaiden.github.com/JavaScript-Garden/).
The first parameter for [Array.slice](http://dochub.io/#javascript/Array.slice) is required according to spec. I see your point, but it seems safer to specify the zero.
Just double check everything when getting socket on the server. Like message length or valid username.
By "double check" I am assuming (and hoping) you mean, verifying the code you have in place handles out-of-bounds data such as that...and not that you actually have code that literally does this data sanitation/validation twice.
I recommend subscribing to [JavaScript Weekly](http://javascriptweekly.com/). It's the easiest way to stay up-to-date with what's happening in JS development. Not knowing about Node.js as a JS developer at this time is quite odd. I can understand not having any experience with it, but to be completely oblivious to it means that you haven't been paying a lot of attention to the world of JS development for at least 2 years.
Here is a link to the other article I was referring to which details logging to the server http://www.manasinc.com/robust-jquery-or-javascript-exception-handling-and-posting-exception-information-to-server/ It is also referred in this post. Hope that helps.
As a heads up - you can catch every JS error that ever gets thrown by listening for the window's "onerror" event. This will save you a lot of try/catch writing. See http://stackoverflow.com/questions/5328154/catch-all-javascript-errors-and-send-them-to-server for more detail. EDIT: Ok, so apparently there are some errors that don't fire the 'onerror' event, and unfortunately not much detail about the error is passed into the event handler, but maybe it's still useful to know that the 'onerror' event exists.
Depending on the application, you may not want to use this shuffle as it's biased. To make an unbiased shuffle, you should use Fisher-Yates or similar. See here: http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
Your friend writes bad code. He thinks he is clever... but he is just writing bad code. That is all.
They key feature of Fisher-Yates is that it's akin to pulling out a random card from the deck into a new deck until there are no cards left. This is what makes it fair. The above shuffle is simply swapping every element with a random element in the entire array, which is demonstrably biased. A good exercise is to try the above with a 3-card deck. The biases become fairly obvious.
I should have said simply concatenating and putting scripts at the bottom of the page will improve site performance drastically in 90% of the cases.
...not to use w3schools. http://w3fools.com/ This is not a joke. Please do learn, but use sources that are up to date and follow current best practices. The above link suggests many great sites to learn from and reference.
While I fully support your idea - learn javascript - I will voice my opinion similar to the others here: this is not the best tool for you to learn. There are a number of reasons why, but the two that have always spoken most clearly to me are these: * when errors are pointed out, w3schools is *terrible* at updating their site; it can take months (or even years) for them to do so. This is unacceptable. * they act as if they are affiliated with the w3c and as if their certification has some kind of meaning. **It does not**.
Paying someone to do it is just as bad, if not worse. As you said you know nothing, this is what your post leads one to assume.
Okay, so that's the reason, it changed for IE9. I was thinking that might have been it, thanks for confirming.
Ahh, I found it. http://rjackson.github.com/pivot.js/
This is probably the coolest thing I've seen on the internet in a long time.
1. if you learn vanilla jscript, what do you need a framework for. 2. again you learnt vanilla jscript what do you need jquery for, json is jscript native for turning objects/arrays into json formatted strings and vice versa 3. thats the way the web is going, like facebook, jscript frontend php backend. to coin a phrase web2.0 4. seperate your development, MVC architecture, CSS, HTML, Jscript front, PHP, mySQL back is common. Ajax calls to PHP Backend, JSON to push data back and forth. The languages are your choice really but youll generally have dbase -&gt; backend language -&gt; HTML -&gt; CSS -&gt; Jscript -&gt; Ajax -&gt; call to backend language -&gt; rinse repeat
Serious question: Is it just me or does everything awesome being released nowadays require node.js and/or linux? If so, I really need to stop developing on Windows.
That's all rather cool and everything, except I can just open a console and dick with their data.
Well.... it takes a package, like Node.js, to run JavaScript from the command line in Linux. You can do this natively in Windows with WSH. Mix that with some Powershell and you have a potentially fully automated run time environment directly from the command line. In order for Node.js to operate this way it has to use Python. I am not picking a favorite. I am just playing devil's advocate.
Yeah but all brogrammers know that cool &gt; security. Plus they all run Macs and everyone knows that Macs are born secure.
Ironically, you are pretty much correct, even though my sarcasm detector is going off.
I haven't seen any substantial reason to believe that node.js is going to become the industry standard framework 
SignalR was a reaction to node.js, it is not directly from Microsoft and its not even equivalent to the environment that node.js provides. Although I agree that there are some (hidden) gems from Microsoft ([CCR and DSS](http://en.wikipedia.org/wiki/Concurrency_and_Coordination_Runtime), [Rx](http://msdn.microsoft.com/en-us/data/gg577609), PowerShell) they are all eclipsed by the MS monolith. Meteor reminds me very much of the [MS Volta project](http://en.wikipedia.org/wiki/Microsoft_Live_Labs_Volta) that came and went. It might have been a hit if the code wasn't proprietary from inception.
As another .NET developer, who also loves Rails and Node, I have to say a lot of the technology coming out is actually pretty cool. ASP.NET MVC4, Single Page Applications with upshot.js, EF code first and migrations, Singal R for pushing content to the client. These are all awesome .NET technologies that get me just as excited as Meteor (which is awesome). I don't think .NET is a glacier per se, I just think too many devs get stuck doing the same old stuff "web-forms-&gt;gridview-&gt;databind" which even among the microsoft nerds is old school.
I completely understand where you are coming from, but honestly a lot has changed in the last few years. You can build full apps without a gui, the ide does offer nice tools, but it's not a requirement. There are a slew of awesome new microsoft technologies that are made by hardcore devs who love to code. 
Isn't that more meaning I can't run "rm -dfr /" on your server from my debug console?
Sweeeeeet, I've been preparing for decades.
&gt; it is not directly from Microsoft .. not even equivalent While it is a pet-project within Microsoft, it is directly from Microsoft's team. Calling javascript browser methods from a server and visa versa, RPC style, using Websockets (or long polling) is pretty useful sounding. Out of curiosity, is it the NPM registry that makes node.js a step above SignalR from your perspective?
It looks like we finally have a valid argument for using the same language on client and server.
[I really don't know.](http://pleatedjeans.files.wordpress.com/2010/02/dog-scientist.jpg)
&gt; If so, I really need to stop developing on Windows. Not necessarily, while Node was originally developed on linux, it has good support for Windows now. Node even has an msi installer - swank!
That's gotta be some fancy authentication action if it were to still allow direct access to the db api and prevent hacking the data up.
it's absolutely fine to ask for help - but just don't ask someone to do your whole assignment (esp easy stuff which just shows you can't program at all and are just gimping by)
Oh man MUCH better &lt;3 Please drop Arial though, it always gives me a very browserish feel to me. Loads of free usable fonts at http://www.google.com/webfonts or convert your own at fontsquirrel: http://www.fontsquirrel.com/ This was exactly what I was meaning by classier! :) Sehr schön mein Freund!
As a massive ms fan I'll say this; If you need a computer to do it use Linux. It will let you get lower down. If you only want to learn 1 OS Windows will do most things. Linux will do anything. The cost of this is fucking around in a computing environment that hasn't changed since the 80s and no one thinks that's a problem. 
I wondered the same thing... and found this: http://stackoverflow.com/questions/10100813/data-validation-and-security-in-meteor &gt; Auth is on the very short list of features we want to deliver, just as quickly as we can, because it's essential for most any public-facing site. On the other hand, we thought Meteor was interesting in its current form, so we chose to release it knowing there's still much more to be done. And prototypes or internal apps can sometimes get away without any auth, so perhaps it can be useful in those settings right away. &gt; We don't have a specific date on the roadmap for auth. But we've laid the foundations for it in the code and we have a plan of attack. The best I can say is "soon". 
&gt;The cost of this is fucking around in a computing environment that hasn't changed since the 80s My prime example is messing about with Git Bash for the first time a few years ago and getting dropped into Vim to input my commit message. Honestly, is there a legitimate reason to use Vim to input a single line of text? Being in the middle of a commit is not the time to be wandering off to trawl webpages to learn about a whole new (and irrelevant) concept.
 var cookieCount = 0, document.cookie.replace(/(^|;)cookiename\[\d+\]=/g, function(x){ x &amp;&amp; cookieCount++; }); Now the number of cookies will be inside cookieCount. the "x &amp;&amp;" is necessary because the callback will be executed with an empty expression in some browsers.
Well, git uses whichever editor is set as your default text editor. Vim tends to be the default one in $EDITOR, but it's not that hard to change, every once in a while I run into some system that's set to use something wacky like nano or pico and I change it to the one true editor again and all is well.
What are you using for nhibernate migrations?
I've tried this in the past. I think reddit has protections in place for "upvote all" scripts. It will silently discard your votes after you meet some secret criteria. $("div.arrow.up").click()
I've already said this elsewhere, but: node.js is great as a controller, and works well out of the box with anything that would normally block a process (like IO). However, if your business logic includes heavy computation and you're doing it in node.js and not delegating it (to SQL, to a business logic daemon, to a dedicated cluster behind a web service, I don't care), you're using node.js wrong. If it doesn't occur to you to put an Apache or some other good load balancer in front of it when the traffic gets high, you're using node.js wrong. Used properly, node.js doesn't crap out. Also, being dynamic, it is not really appropriate for enterprise-level systems; use Java or something where compiler will let you know if pieces fit together on the 100000-line code base. **tl;dr:** node.js is a great tool, like a well-balanced hammer... as long as you don't cut tomatoes with it. 
I goto these: The Github Pirates. Lots of JS + CSS3 + HTML5 http://codepirat.es/ Handpicked jQuery Plugins http://iwantaneff.in/repo I also subscribe to this guy: http://edanhewitt.com/blog/
I'm not much of a command line user, so apologies if I'm being retarded, but why not just prompt the user to enter a single line of text? Why would you need a editor at all?
Yeah much better! Alignment of the select a level screen seems the same here as it is on Firefox. The audio button is floating next to it on Firefox though. In Chrome nicely above your name in the lower left corner.
* [Javascript Weekly](http://javascriptweekly.com/) * [HTML5 Weekly](http://html5weekly.com/) (good for canvas / websockets / experimental stuff) * [Javascript Show podcast](http://javascriptshow.com/) * [Javascript Jabber podcast](http://javascriptjabber.com/)
&gt; I'm not much of a command line user, so apologies if I'm being retarded, but why not just prompt the user to enter a single line of text? Why would you need a editor at all? Are you kidding? because if it was just one line of text you would have used the -m command line argument. Having your text editor at your fingers in every situation where you enter text is a good thing, not a bad thing. and vi has been the standard unix text editor since it took over from [ed](http://www.gnu.org/fun/jokes/ed.msg.html). 
They don't have a date for the "roadmap"... which means they have no idea how to secure it. How are they going to secure it when one of their selling points is that the client has arbitrary access to the database?
Node.js does run on Windows, you know. There's even an [IIS hosting project](https://github.com/tjanczuk/iisnode) which I've successfully used. I'm not a huge fan of it because there are certain trade-offs the author made that I disagree with, but it works. The point is that node.js doesn't automatically preclude Windows. 
Have fun trying to get Node.js to talk to SQL Server or Oracle. We use node.js in house, but we have found that it's best to offload to a .NET stack server to handle communications to non-NOSQL (heh..) databases.
I don't think it's actually "direct access". As far as I can tell, the access is being mediated by the web server. It just feels like a direct access. The model they appear to have in place could work for some forms of security, but the nature of the APIs makes me worry it would be highly vulnerable to cross-site scripting attacks. 
Their "latency compensation" or whatever they call it, is exactly like a multiuser Net game. When a local client's action is performed that might conflict with another user's action, give the local client the benefit of a doubt and immediately show the result locally. If the action fails arbitration at the server, a veto message is sent back to the client and the action is undone.
v0.5 of the game will have working multiplayer support with node.js and nowjs.... Check out the trailer here... http://www.youtube.com/watch?v=HTZCMxNtloQ
you shouldn't. period.
I am enjoying this project, but I would like to point out the following tidbit from the docs: &gt;The only server asset is JavaScript. Meteor gathers all your JavaScript files, excluding anything under the client and public subdirectories, and loads them into a Node.js server instance inside a fiber. In Meteor, your server code runs in a single thread per request, not in the asynchronous callback style typical of Node. We find the linear execution model a better fit for the typical server code in a Meteor application. They run node.js in a cooperative-multitasking fiber rather than a full time-division multitasking process, then use a time-division multitasking thread for each request rather than node.js's demonstrably superior single-threaded model. They break two fundamental aspects of node.js: the process is king and it's single threaded. The first is for... I can't actually fathom the reason, but the second appears to be only because they have trouble coming to terms with node's processing model. My biggest worry is that by breaking this model scalability will be compromised. 
Nice article, but after reading, it still isn't clear how a View Model differs from a controller. A controller can certainly handle data formatting and conversion. Not sure what the difference/benefit is. Can someone explain?
git commit -m "I'm 12 what is this?"
&gt;so apologies if I'm being retarded yeah, I wasn't kidding - thanks for mentioning the switch. I've actually got into the habit of using vim now anyway which is probably a good thing ;) 
Naw, the most complicated part of XHR is its name. Here is what you do: 1) Call the global object and bind a reference to a variable. This is the second most complicated part after getting the name right because you have to account for older versions of IE: var xhr = (typeof XMLHttpRequest === "function") ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"); 2) Everything else is simple. First we need to define the connection using the "open" property. The first argument is the HTTP method, the second is the address, and third is a boolean for asynchronous, forth is username (optional), and fifth is password (optional): xhr.open("GET", "http://myLocation.com/", false); 3) Make the request: xhr.send(); 4) The response is on the property "responseText" var myString = responseText; That is all you need. Its more simple and less code than writing an HTML form. If you need more documentation then go to: https://developer.mozilla.org/en/DOM/XMLHttpRequest
Not that I'm trying to convert or say that the following is better but just to add you what you know. Whatever the windows 8 server version finally gets called. The default install is windows server core. That's no GUI / only the packages you want. I guess it's all managed through powershell. With MS making windows use the same kernel from phone to server I wouldn't be surprised if we start seeing much more windows hosting coming as managing it will be easier and with better performance on lighter hardware. Especially ARM stuff. Which as I understand is pretty boss for web stuff since power / watt is more akin to the workload the web has. 
Thanks, I'd so have fallen for that in my current state &gt;.&lt;
Nice! Honestly I don't see myself as being a resilient fanboy as much as I just have a lot of time effort invested in F.O.S.S, but I could see myself learning the ropes of a Win8 server (and the associated technologies) if only to expand my freelancing skillset. I have a client through whom I get a lot of work who have certain clients that use all windows servers that I'm essentially alienating.
How? r/javascript :P
http://www.reddit.com/r/javascript/
Yeah and I didn't mean to sound so harsh. But essentially right now you're layering and layering code on top of itself and that does create problems, I can't say for certain if that's causing your main problem here, but I wouldn't be shocked if it was the culprit. Now let me explain what $.ready() does. (*$ = jQuery*) The code that you have inside of your .ready call can be put anywhere in the document, but that doesn't mean it will run. This is because of the way jQuery queries the DOM. So what you're trying to do there is put all of your jQuery code in one place. Typically, I do the same thing but I call it at the bottom of the page once the DOM is fully loaded. The .ready() is essentially telling jQuery to not run the code that's inside of the .ready function until the document is ready. jQuery(document).ready(function(){ your jquery code here }); Says "hey jQuery, grab the document and when it's ready run this function (or functions)." You are grabbing it twice. Instead of doing it twice you can take your code that says var show_thumbs = 7; And put that right after your .fn.cleardefault function and get the same results. The reason I'm telling you this is that with your map you may be doing the same thing as you're doing with .ready and you may be calling something twice or more. There's just a ton of scripting going on in that , which is most likely unnecessary, that we'd have to read through to figure out the problem. Personally, I'd start over with all of your map scripting.
With MVC, a lot of your custom controller logic is just populating a view from a model, and re-saturating that model based on the changes in the view. By "magically" linking the two with a viewmodel, you have a direct data representation of your model tied to your view, and can manipulate either the view or the model and changes will automatically be synced. This reduces a lot of the "boilerplate" code that you would end up writing in a controller.
&gt; seek to understand everything This is the best advice, in my view. Don't waste brain cells memorizing frameworks, but definitely make room in your head for the rare novel idea or abstraction. Fortunately they're pretty easy to understand and remember, once you find them.
So does the VM also do the job of controller?
 javascript:var searchterms = escape(prompt('Enter Search Terms:')); var site = escape(prompt('Enter site to search:')); var query = searchterms + ' site:' + site;window.location='http://www.google.com/search?q=' + query;
Cheers for this.
I confirm that it does work.
I've also used SocketStream in the past. Honestly, I can't see what this has that SocketStream doesn't, and at this point SocketStream has more maturity.
Why don't you set it up to use the search functions of the respective sites? You can right click into a search text field (for example on Wikipedia) and then choose "Add As Search Engine" from the context menu. You can set name and keyword in the dialog window that appears.
Some similar projects: * http://derbyjs.com * http://knockoutjs.com * https://github.com/socketstream/socketstream Many different groups have been working towards this for the last 6-12 months. Meteor clearly has a lot of money and engineering talent to use though. Aside: What's the deal with "realtime?" It's not realtime at all. People should call it "auto-synchronizing" instead.
Ahhh, that would be it. Thanks for pointing this out.
It's quite cool (although it took several minutes to load for me on Chrome). I'd like to try to analyze the code, but 4k is a whopper. (I know from having written a 2k IOCCC entry whose analysis I wouldn't wish on my worst enemy.) It uses a compression technique, getting 9303 bytes of code from [a 3898-byte PNG file](http://adinpsz.org/online/fabrik/x), converting each pixel to an ASCII character, and then executing it. As clever as that is, there's no way I'm poring over 9kb of obfuscated code. But for anyone who wants to, [here it is](http://pastebin.com/ghH4bn75).
Crashed my Chrome
:O amazing....
I tried that initially, but compared to Google....every other search sucks. However, that technique is indeed useful for things that take specific inputs, for instance many bug-tracking sites have a specific bug ID search (or the main search tries to match the input against ticket #'s) in which case you can easily and predictably navigate to specific bugs.
It's worth it.
Crashing FF and Chrome ? .. I can do it in 1 line.
http://pastebin.com/raw.php?i=EZHXP4bp here it is slightly formatted
i'm tinkering with node.js on my windows box... what's stopping you?
My Chrome tab locked up for a few seconds, but it was totally worth it... it's absolutely amazing.
I really like what you have so far and look forward to seeing it grow. Keep up the good work!
[dbdeploy](http://dbdeploy.com/2007/09/25/dbdeploynet-v10-officially-released/) I admit the new migrations look nice, but some of us are not so lucky as to always be working on MS SQL Server
It works very well for me. For example, I have set up Wikipedia like this. I can now type "*w Reddit*" and it directly opens the Wikipedia page on Reddit.
NOTE: *very* long load time. It will start eventually; give it a minute.
As one of the 140byt.es hackers, I'm happy about the fat arrows: it'll enable us to do even more in 140b of JS! Yay! :-)
Maybe I'm missing something here. I was impressed by the moon(?) and the star field... but when it goes underground and you can see the gears and a brown plasma effect background ... everything was a silhouette and somewhat bland. You can't read the text at the bottom because it's obscured by the black on black.
That kid was brilliant..I wish I was that smart.
Started in about 15-20 seconds in Chrome at this end (didn't like Firefox here). Pretty cool.
[src](http://projects.latimes.com/prop8/donation/8930/)
Woosh
Why doesn't it work in IE out of curiosity? I see console.debug, is that it?
Gradle is fake, don't trust it
Ah thank you, I feel stupid now for not figuring it out myself.
No problems. Keep on truckin'. :)
damnit first OSC now Eich... I really have to stop admiring bigots :(
 function color() { ... setTimeout(color, 400); }
Better, though, would be something like this: &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript"&gt; // Define your list of colors var colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']; // This function grabs the next color in the list and changes the background function nextColor() { // Get/remove the first color from the list var color = colors.shift(); // Set the background document.body.style.backgroundColor = color; // Put the color back on the end of the list colors.push(color); // Recurse setTimeout(nextColor, 50); } // Better than &lt;body onload=""&gt;, keep js out of your html window.onload = nextColor; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 
Sure, do it the easy way...
Orson Scott Card author of Ender's Game. He's a far right bigot and despite being a Utah resident was very vocal in trying to gather support for Prop 8. He also wrote [How Software Companies Die](http://www.netjeff.com/humor/item.cgi?file=DeveloperBees) which is why I began to admire him.
how is it that one pixel of color which is 3 values, rgb, is less than one character? arent they both 8 bits? Or I suppose one could be 24bits.
You may enjoy reading the article [On Obtrusive Polyfills](http://webreflection.blogspot.com/2012/03/on-obtrusive-polyfills.html). &gt;A shim/polyfill that works 90% is OK, specially if the API is covered 100% and even if behind the scene things are not identical, but a polyfill that let a piece of code think everything is fine and the whole app breaks who knows when and why should not be exposed at all or, if you really want to bring similar functionality, it should be exposed prefixed, i.e. Object.$defineProperty() so that the rest of the code is aware that such method exists but it's limited. 
 if (currentColor === (colors.length - 1)) { currentColor = 0; } else { currentColor++; } Can be written as: currentColor++; currentColor %= colors.length; I.e. *always* increment and then make it wrap around. Also, starting at -1 is a bit weird. Starting at 0 and putting the line where you set the color at the beginning of the function is a bit nicer since there is never a point in time where currentColor has an invalid value. This makes it easier to read and easier to refactor.
I didn't not know about the %= shorthand. Thanks.
I'd actually like to give this a shot. I use screen and vi on and ec2 node for remote pair programming but I'd like to give teamview a shot. One caveat ... I'm not really a JS guy. But, if you want a second pair of eyes to look at the code, I'd love to help. PM me if you're interested. I should also mention that I wouldn't charge anything for this.
Damn I was excited! Til I came here to exclaim about it and saw your comment...
Did he have to splash his cash?
&gt;I feel like i could touch myself to programming videos all day, and even better I love seeing people figure things out on the fly I believe you a word there? lol... I'm good with jQuery and I'de be willing to give it a shot. PM me.
I was just wondering if you knew of a specific IE issue that was preventing it from working is all... for the most part code written on other platforms should "just work" in IE9+, and if it doesn't it's likely an issue the IE or Chakra teams should be made aware of. I certainly don't expect hobby projects to be thoroughly tested on all browsers or whatever :) So, console.log and reduce (and all of ES5) will work in IE9/IE10. I think you only have two problems: * Lack of doctype causes IE to render in Quirks mode, which also uses the legacy script engine. Add an HTML5 doctype &lt;!DOCTYPE HTML&gt; and you'll render in standards mode. * Call to console.debug in script.js, IE doesn't support console.debug. With those two issues fixed, it works for me in IE10! Looks pretty nice too :) Edit: Actually it works fine in Quirks mode, but you'll probably want the doctype anyway...
The security side look a little half-baked ATM, but it looks like this is something worth keeping an eye on.
Heh, that was no typo. I chose that wording to make it less vulgar. Seriously i watch programming videos while I eat dinner and brush my teeth. I can't get enough. I will PM you!
Cool project! How hard would it be to create an alternative export feature? I would like to create these functional notebooks, but at the same time have the option to export to a standard non-functional format like [Textile](https://en.wikipedia.org/wiki/Textile) or something similar.
This is pretty neat, and I might definitely go for it. That said, the only experience I've had with YUI has only been with the YUI compressor. :P Just curious though, how does the YUI team usually work on YUI itself? I know that YUI is on GitHub, but do you guys have your own internal development repository for code review and things like that? How does this work out for an open source project developed by a large company like Yahoo?
Assign "this" to a variable and you can access the properties of that variable inside your inner function.
``` var Something = function(a,b){ this.a = a; this.b = b; var something = this; function changeA(){ //no reason for the calling event to know anything something.a = "something else"; }; }; ``` 
[Usually the convention is](http://www.crockford.com/javascript/private.html) to use *that* as variable name to hold the outer *this* value.
I don't like `self`. It's meanless when you have multiple levels of indention 
Congratulations, you just used your first closure.
No IE support? Should a single fu be given? Nope :P
I saw "I like to use" and I thought, "this guys is going to write i like to use *this*"
Yahoo lays off thousands and replaces them with unpaid interns. I should try that with my team :x.
does not run on windows ... but very gripping project
You can't put code inside a script tag that already references a script by src. You'll have to put it in another script tag. &lt;script type="text/javascript" src="scripts/menu.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; document.write(menubar(Home, index)); &lt;/script&gt;
Or just coffeescript...
Wow, Well that's just a bit fucking retarted. Also, You just inadvertently helped me as well! See! Reddit isn't all memes and cats!
Just checked, Works in IE9 as well.
Pretty good. I picked up a couple things from it.
Are you using some kind of rpg maker?
 &lt;p lang="es"&gt;&lt;/p&gt; for content
For me it was complicated dealing with the ready states and such, but this was also 5 years ago and I was just learning how to program. Anyways when I discovered frameworks took care of all this for me and just about everything else I moved over. It's nice that I have a solid background in generic JS though.
Article at http://www.webgl.com/2012/04/webgl-demo-half-life-zombie-model/
I never checked the source-code, but appending a function to jQuery (like $.supersized) is not a problem at all: this behavior is called "utility". Now, since the $.supersized utility is registered, appending variables to the window scope is really dumb. Maybe is more like a bug (forgot to put a comma on the var declaration?).
Okay, so first of all it's a lot easier to read through and help if your code is spaced out better. I recommend using http://jsfiddle.net/ if you have trouble doing it yourself. Now let's get down to figuring out why your code doesn't work. First of all, this line: else{ &lt;input type="button" OnClick="show_confirm()" value="GO"/&gt; } What are you trying to do here? Are you trying to output the button? You can't just stick it in there, there has to be an execution command. Maybe a document.write? Next, it's Var, not var. &gt;var name = Adam Adam doesn't mean anything. It should be var name = "Adam", a string. Without quotations it looks for an object named Adam, which doesn't exist. Fixing those issues fixes the problem.
Definitely not a bug. Check the docs: http://buildinternet.com/project/supersized/docs.html#api_docs Also, adding methods to the utility is not the proper way to create a plugin (which Supersized.js) is...
repeatedly removing and adding (the same) elements to the array: not so efficent when you can just cycle on an index ;)
agree with DRBIGNAME - plus you can see that Something has a capital letter which by naming conventions is a big hint that it's meant to be instantiated with the new keyword
It's an **object** you're getting values from, not a *named array*. There's no such thing in javascript ;) Don't confuse this with PHP associative array (to name an example): they use square bracket notation, but it's not the same thing.
I will try, i just started taking the tutorial yesterday so it kind of new to me
This has nothing to do with javascript. Nothing! And, the site looks phony as fuck. (Check their shitty "SEO optimized" menu flyout, it's ridiculous). Thanks, but no, thanks. 
I have **NEVER** seen a valid reason for using constructors, so that point is largely irrelevant. Additionally, the original example/point never mentions constructors or *new*. Use of *new* and *this* are a common programming style that is confusing to read, excessively complicated to debug, and generally unnecessary. For every use of *new* and *this* there is likely an equally more simple means of accomplishing the same task without those key words that typically contains fewer lines of code.
In HTML documents it's been optional for a long time, so unless you have a lot of Netscape Navigator 1 users or something, you're fine (many argue that leaving it out is best practice, though that's obviously...arguable). AFAIK in XHTML documents it's not *necessary*, but you should still put it in there for validation. I was just trying to demonstrate the separation of the tags, not do fully valid markup but I do appreciate your note, thanks.
Talk to your teacher or classmates.
Cool! One great tool for beginners or anyone who writes JavaScript is [jsFiddle](http://jsfiddle.net/). It gives you an easy way to experiment with quick little scripts in an interactive way. It might seem a little overwhelming, but it's actually very easy to use. Just put in your JavaScript, HTML, and CSS then click "run" to see the results. Then, when you want to show other people, click "save" and it will give you a link. For example: [Here is your script cleaned up very slightly ](http://jsfiddle.net/mLdcs/). If you're working your way through tutorials, I recommend [Eloquent JS, a free ebook ](http://eloquentjavascript.net/contents.html). Also, feel free to PM me if you have any JS questions.
Yes, I should hope that we're able to *at least* double the resolution with computers that are over twenty times more powerful.
bloody self-entitled, disenchanted kids .... never impressed with anything \*grumble grumble\*
Check out [jsFiddle](http://jsfiddle.net) for experimenting with little scripts like this, it's also great for asking questions because you can give people a link. You'll have an easier time getting help when you have a live example to show. [For example, here is your script cleaned up a little bit.](http://jsfiddle.net/uECjL/2/) 
Well, your example code is fundamentally broken. I'm sure you mean something like this though: function something() { var a = "whatever"; return function ( b ) { return (a = b) }; } If the use-case was just to have something like a "counter", where you have one value you want to modify repeatedly and or a couple values you want to *access* repeatedly...I agree with you a closure is a good tool. (OP's question is poorly asked though, so it's not clear what the use-case is). However, it's completely ludicrous to suggest you should never use Objects and Methods... If OP's use-case is having a bunch of properties they want to modify, then it's nuts to suggest a closure. It seems to me what's going on is what OP wants to do is BIND a method on an object so they can just pass the function value around, and in that case...yes a closure would work. See [my post here](http://www.reddit.com/r/javascript/comments/s74a1/i_have_a_function_inside_another_function_i_need/c4byg65) for an example of what they most likely want using closures. 
There's **no way** that moshenwebcomic's code could work written as-is. (changeA is never exposed to the outside) You must be leaving some important part of your own code out. Can you explain why you don't just do this: function Something ( a, b ) { this.a = a; this.b = b; } Something.prototype.changeA = function() { this.a = "something else"; } That will work like so: var foo = new Something( "whatever", 10 ); console.log( foo.a ); // this will print "whatever" foo.changeA(); console.log( foo.a ); // this will print "something else" Alternatively, you can create "changeA" on the fly: function createChanger( thing ) { return function () { thing.a = "something else" }; } var foo = { a: "whatever", b: "whatever" }; console.log( foo.a ); // logs "whatever" var changeIt = createChanger( foo ); changeIt(); console.log( foo.a ) // logs "something else" 
"constructors" and "this" are completely separate things. Never using constructors? Sure I could see that closures, object literals, etc would work fine. Never EVER using "this"? That's just nuts.
&gt; Well, your example code is fundamentally broken. It is not broken and no, I do not mean anything like your example code. If it is broken then what is broken about it? It works just find and does not throw an error. &gt; However, it's completely ludicrous to suggest you should never use Objects and Methods... I never said that. You can use those without using *this*. The *bind* and *apply* methods do nothing without the use of *this*. If you are not using *this* you gain nothing from using *bind* or *apply*. &gt; See my post here for an example of what they most likely want using closures. I am not going to attempt to guess at what somebody wanted. He asked a question I provided the least insane answer.
I'm sure you will appreciate this..... click the green square, move around with the arrow keys, and i think you will find what you need I have a more advanced version of this demo if you are interested, with sprites, FPS system, powerups, retarded AI, and more. http://jsfiddle.net/chewy789/mt33B/
Ah! Thanks! I didn't know about the afterFinish method at all. 
That site is a lifesaver! As are you. Thank you so much for your help. I think jsFiddle will shortly be in my top 5 most visited sites. 
I don't think anyone's helping you until you stop capitalizing "Var". Also, this is just terrible. It's obvious you need to get some basics straight, because, really, there's not ONE little issue in there.. And it feels like, if I were to help you and write the code for you, you'd not learn at all. So please, for the sake of the internet, google some JS basics and start from scratch.
Or let me put it this way: Here's an example from the project I'm taking a break from right now. I have a Lexer and it needs to emit Token objects. These tokens are passed through several rewriting stages, and then later optionally passed to the interpreter. They look like this: /* Token object */ function T( type, value ) { this.type = type; this.value = value; } T.prototype.toString = function() { return "" + this.type + '("' + this.value + '")'; } It goes without saying, somewhere in the bowels of the lexer is a line like: emit( new T( type, value) ); The thing to note here is that by writing a toString method it lets me trivially treat the tokens as strings, which is super handy when working on something as messy as a handwritten lexer/parser (especially one written by ME) for debugging and other purposes. I can print them in singles, as arrays, pass them to templates for display...it all **just works**. I could rewrite it as: function T( type, value ) { return { type: type, value: value }; } and then just do something like: function tString( t ) { return "" + t.type + '("' + t.value + '")'; } ...but then **everywhere** where I want to treat a token as a string I have to call tString on it. Makes code harder to read and increases the potential for bugs. Anyone who writes an addon to my lexer has to remember to wrap the string as well....it's just headaches all around. With my method, everything is trivial. If I need to print a **single** token, I just: console.log( token ); If I need to print an array of tokens: console.log( token_array.join(" - ") ); To do the latter using your way, I'd have to iterate through the array, either every single time or by creating yet another formatting method. I could also do this: function T( type, value ) { return { type: type, value: value, toString: function(){return "" + type; //...you get the idea } }; } ..but then *each* token has it's own *copy* of the toString function, and tokens are something I'm going to have **a lot** of...and that's going to eat up memory that I may need for the interpreter. The only way that would be an advantage is if I wanted to be able to represent tokens as a string in different ways, but I don't. This "default" toString makes the most sense, and if I **really** needed another formatting I would create a function or method for it like toPrettyString() or something. The point is using "this" here makes everything clean and simple. You could work around it, but it's silly to do just because of some personal grudge against "this". I have a data structure of tokens Ican pass around the application and whoever needs and object or a string can just consume it and it just **works**. Additionally, this lets me easily see if a given object is a Token object or not, I won't get into why, but this is relevant in some places in my app. I just need to know if ( object instanceof T ); Otherwise I'd have to do some sort of duck-typing (which is fine a lot of times), but in this case the only way I could do that is add a property that's like "isToken" and check for it. That's just silly and wastes even more memory. For more examples, check out the [Underscore source code](http://documentcloud.github.com/underscore/docs/underscore.html) to see how it and libraries like jQuery implement chaining.
I like this idea. You could host this project in your own git repo and ask your candidate to do the work and then request a pull, so you can review the code in the pull request
Will do. Thanks, again!
1. It's not just his environment, it's a pretty well agreed-upon standard. 2. Yes, it's just a capital letter to the interpreter. 3. But, he wasn't saying it was anything more. He was just saying that, without knowing the rest of the program, it is a reasonable guess that this person was following universal style guidelines.
I'm game to try it
Yehaa "Multilingual Content Markup Supported by Google" i like it bye google..
All the codes I generated expired already. Have to wait until I push out an update. Sorry.
I don't even understand the question. Can you elaborate on what you are trying to do? Perhaps an example posted to jsFiddle.net?
Hello. Good guide! Here's some things you should change/add. * Don't use .live(). Use [.on\(\)](https://www.google.ca/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CDwQFjAA&amp;url=http%3A%2F%2Fapi.jquery.com%2Fon%2F&amp;ei=_P2IT-ejG4LagQf1m-m5CQ&amp;usg=AFQjCNFJf1Y9q7iSptlkW-9S_Ki4f0hD8w&amp;sig2=4WCYLsJqphTHZiZQHgmsQw) and .off() * console.log is your best friend, especially for console.log(this). Also, if you put a lot of console.log, consider console.log("this is a comment", this); * jQuery is good for chaining stuff. Instead of $("#example").addClass("error"); $("#example").html("ERROR!"); You can do... $("#example").addClass("error").html("ERROR!"); * For people coming from PHP.. php = if (isset($variable)) javascript = if (typeof(variable) != "undefined") * Let's say HTML: &lt;div class="action enable-button"&gt; Click here to enable &lt;/div&gt; &lt;div class="action disable-button"&gt; Click here to disable &lt;/div&gt; Instead of doing... $(".enable-button").click(fn); $(".disable-button").click(fn2); You can do $(".action").click(function() { if ($(this).is(".enable-button")) { fn(); } if ($(this).is(".disable-button")) { fn2(); } }) Even better, you can do $(document).on("click", ".action", function() { .... }) * If you are thinking about doing a lot of async request, consider [promise](http://net.tutsplus.com/tutorials/javascript-ajax/wrangle-async-tasks-with-jquery-promises/) Keep up the good work! 
Blogspam.
The demo is broken in Opera
If you watched the talk, you might have seen that Crockford agrees with you on your second point.
&gt; Security on the web is vapor and fiction so long as there is auto execution of script code and an onload event. I don't know... when was the last time Reddit was hacked? My sites would be hacked tomorrow if anyone with a little more than basic hacking skills had motivation enough to.... but Reddit has been a target for ages and hasn't been destroyed yet. Go easy on the hyperbole.
I don't get it. Is there any info on the page that I'm not seeing, or is this just a page with random words about web development? If this toolkit has something to offer, I'd like it to be up front about it. What am I signing up for?
You are signing up for beta access (you'll get one e-mail like this): http://createsend.com/t/r-ADB355F1D11CCDAE - You can also read more about Clarify on http://blog.clarify.io
Some people just enjoy JavaScript more than other languages.
There is a workaround with PHP. Retrieve the external JSON with cURL and return it. It can be done with this function function externalAJAX ($Url) { if (!function_exists('curl_init')){ die('Sorry cURL is not installed!'); } $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $Url); curl_setopt($ch, CURLOPT_USERAGENT, "MozillaXYZ/1.0"); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_TIMEOUT, 20); $output = curl_exec($ch); curl_close($ch); return $output; } 
By now you should have had a chance to solve it yourself. See what I did below. Note the way variables are declared and how to use document.write() correctly. After this you should start practicing how to use functions correctly. This is **not** how you should do things, but it's as easy as it gets so that you can understand it: &lt;html&gt; &lt;head&gt; &lt;title&gt;Bad JS learning&lt;/title&gt; &lt;script type="text/javascript"&gt; var uname = "Adam"; var pwd = "123456"; var uname_prompt = prompt("Enter your name:"); var pwd_prompt = prompt("Enter your password:"); if (uname_prompt == uname &amp;&amp; pwd_prompt == pwd) { alert("Welcome " + uname_prompt); } else { if (confirm("press one of those buttons")) { document.write("&lt;h1&gt;You clicked ok&lt;/h1&gt;"); } else { document.write("&lt;h2&gt;You clicked cancel&lt;/h2&gt;"); } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;
&gt; If you were to cut out this function and put yours in its place, would you be confident everything would still work? That is an irrational question. Any amount of additional code could render all provided solutions invalid when executed. &gt; Remember that creating functions inside a loop is very inefficient. I agree and I am not advocating such. &gt; edit: the more I think about it, the more ridiculous it is to never use "this" or "new". A limited imagination is another weak argument. So far it just sounds like you are speaking from inexperience. Ignorance of alternatives is not persuading me to your point of view.
&gt; 1.It's not just his environment, it's a pretty well agreed-upon standard. A common convention is certainly not a defacto standard. There are many common conventions that are not standards, such as the many variant commonly known functions named "$". &gt; 2.Yes, it's just a capital letter to the interpreter. Without any further information to the contrary this is all that really matters. I don't claim to read minds, and neither should you.
&gt; Do you have some examples where you're actually modeling something in your style? Here is something modular I wrote about half a year ago: http://prettydiff.com/jsgui/ &gt; Looking through your github all I see is mostly straightforward imperative script-y type things. Straight forward code is good.
Javascript has some inherent strengths, in my opinion. The main advantage is ubiquity. There is something attractive about using the same language on the browser as in the server. So many people know Javascript. The other advantage I appreciate is loose typing. This can make development easier. Java, in contrast, is strongly typed, every class needs to reside in its own source file. PHP and Perl are loosely typed liked JS. Javascript also offers a nice marriage of OO and functional design, which I find nice to use. ---- ok, that takes care of the core advantages. When making decisions I recommend you look beyond just the fundamental structure of the language and look at all the complementary things, including - libraries - are there sufficient libraries available, for your domain? - development tools - additional tools, like debuggers, profilers, optimizers, test frameworks - project management capabilities - server runtime model and behavior. Can it be properly secured? Can it be debugged? - performance - this is usually pretty low priority, because you can always throw more hardware at a problem. ----- The disadvantage of Javascript, to me is the lack of a single definitive programming model and metaphor. For MVC there are a myriad of choices, there are myriad extension libraries, and so on. [For illustration, see the recent post on reddit](http://www.hanselman.com/blog/TheBigGlossaryOfOpenSourceJavaScriptAndWebFrameworksWithCoolNames.aspx) It means not everyone is really doing the same kind of work, which lessens the impact of ubiquity. But this is more a strategic challenge to the language, and is not a weakness when being considered for any particular project.
I think you forgot to post that extensive list of advantages.
Worked great for me!
Incredible. My only complaint is that the openings in the corners aren't very forgiving
I wonder how well clarify.io will support multiple screen sizes/resolutions/device interpretation of css etc... The video on vimeo really needs sound.
Didn't work on Chrome (18.0.1025.151) or Opera (11.62) for me. Worked fine in Firefox (11.0) though.
I heard someone managed to do turing-complete computations purely in HTML5+CSS3. Not sure if it could be a security issue, but disabling JavaScript isn't enough to get rid of logic from web pages.
And then you see the shoes.
Works great for me. Controls are a bit tricky on a laptop. Might want to capture the keyboard events so they don't bubble up to the OS. On a Mac CTRL + arrow keys start shifting your spaces around. Can't wait until this turns in to a full blown copy of Rogue Squadron! :)
For some reason I feel that I should inverse the keyboard, keyboard up should be tilting down and keyboard down should be moving up. Also the general black / darkness of the obstacles makes it kinda hard to tell.
You can hook authorization into it. All it does is generate "automatic CRUD API" for your database that matches the mongo API on the client.
Consider a generic CRUD based website that has things like - GET /blog/:id - POST /blog - DELETE /blog/:id etc. Now consider replacing that with - Blog.find({ id: id }) - Blog.insert(doc) - Blog.remove({ id: id }) All it's doing is saving you the hassle of writing boilerplate serverside code. It's like [Backbone.sync][1] but the backend is written for you. You can also hook a session based [Auth system][2] into the API to limit DB access. I'm just taking the concepts from [firebase][3] and [meteor][4] and giving you access to a database on the client in a simple singular module. It's simply taking the concept of a SPA to the next level, rather then writing a backend to handle data storage you write a backend that implements the authorization rules on the database and talk to the database on the client. [1]: http://documentcloud.github.com/backbone/#Sync [2]: https://github.com/Raynos/clientmongo#Auth [3]: http://www.firebase.com/ [4]: http://meteor.com/
[Disclaimers][1]. You still need node &amp; mongodb on the server [1]: http://raynos.github.com/clientmongo/#Disclaimers
What DEADB33F said; my "fix" was to play full-screen.
Thank you and yes i did figure it out :)
Unless the backend also pulls the data and ensures that the user has access to the specific items that it's accessing, it's insecure. If you do go to the effort of pulling the data on the backend, then you're duplicating effort and wasting DB resources because then the client also ends up doing it. Sorry... I can't see any possible reason for this being a good idea.
If nothing else, it's nice to be able to run static analysis tools (like JSHint) and unit tests (like QUnit) server side so that you can integrate your JS automated quality control pipeline with your other CI processes.
https://github.com/twitter/bootstrap/issues/2579
&gt; Straight forward code is good. Sure, I didn't say your code was though :-) (not that I think it isn't). What I mean is it's a clean cut example of something. Did you get [my post](http://www.reddit.com/r/javascript/comments/s74a1/i_have_a_function_inside_another_function_i_need/c4bz9gn) with an example from my code and how you would do it in your style? I'm curious re: that since I think it's a pretty good example of a situation where "this" is basically inevitable.
&gt; They change the value of a variable held in closure and accomplish nothing more. Sure, that's why I was confused when you said "you didn't mean anything like it" since they are essentially the same (though nitpick, mine returns a value, where yours doesn't...but in an example that's tangential). Thanks for clarifying. I think we are mostly in agreement. If you see me around you'll see me suggesting to people quite often that they don't need to construct a new object they can just use a literal, or suggesting they simplify in other ways. I think after that our philosophies diverge a bit, probably due to working on different types of projects.
 require([ 'order!lib/jquery', 'order!lib/bootstrap' ], function(){ // Your app }) Using the [order plugin](http://requirejs.org/docs/api.html#order), assuming your scripts are at lib/jquery.js and lib/bootstrap.js relative to the your main.js file (adjust paths as required).
In the general sense it boils down to basically: - You get to use JavaScript. Some people don't know PHP, Perl, or Python...they know JavaScript. This allows them to stay with what they know. Or maybe they just **really** like JavaScript, but when told they couldn't in fact marry an ECMA standard they decided to just use it all the time instead. (**I'm kidding, I use JS all the time myself**) - You can share code on server-side and client side. I personally don't think this is *too* useful, but in some situations it is really handy (mostly things like templating and validation). - Async in JS pretty much forces an callback style. This means any library you ever find will have to use that style or something based on it, like promises) for async operations. Compare that to PHP, Python, etc where libraries can use whatever crazy style they want. After that it's mostly about what exactly you want to do....and that part is so important that it will usually completely eclipse any general differences in languages. For example Python might have an incredibly awesome library for what you're trying to do but Node has a pathetic one...in that case I think that would weight things pretty heavily in Python's favor. Likewise if you're trying to do something that Node has awesome support for, you're going to use that.
[You can find it here](https://www.youtube.com/watch?v=xECUrlnXCqk)
I don't think anyone got my obvious (bad) joke here.
1. Use the HTML5 doctype. 2. Don't use the type attribute, unless you want to embed/reference something other than JavaScript. 3. Use 1TBS or "hugging brackets". I.e. the opening curly doesn't get its own line. This is the only indent style which works 100% correctly in JavaScript. 4. Pretend that `==` and `!=` don't exist. Always use `===` and `!==`. 5. Indent your code properly. 6. Don't omit semicolons. 7. `document.bgColor=(text)` &lt;- those parens do nothing. 8. Replace `onClick` with `onclick`. 9. Don't use `onclick` in first place. It's obtrusive. It's better to attach an event handler later on or to use event delegation. 10. `&lt;button type="button" ...&gt;foo&lt;/button&gt;` would be the correct choice. It's a button which doesn't do anything. 11. `form` has two required properties: `action` and `method`. If you use HTML5, using a `form` element wouldn't be mandatory. 12. There is a principle called DRY, which stand for "don't repeat yourself". The code for your buttons is fairly repetitive since each line contains code for attaching an inline handler, which then sets one property of some object. You could, for example, use a generic handler, which takes the string from the `value` attribute, uses `toLowerCase` and then uses that directly. 13. Use JSLint or at least JSHint.
Holy cock smoke.
The real advantage of node.js is that it provides a single standardized approach to event-based single-threaded programming. Things *like* this exist in Python (Twisted, Tornado) and Ruby (EventMachine), but those projects haven't attracted the community that Javascript/node.js has. One of the reasons is that on Python, Ruby, the community is fragmented. To write an event-based, you need drivers for all of the services and databases you rely on to follow the same pattern. If you look at Ruby, Rails is a huge thriving community, but the libraries written for EventMachine/Fibers are very low activity, have few contributors, and are out of date. Python has various different event-based systems, each with a different style. And the eventing systems are written like a library that you tie into, rather than as part of the core programming model. In node.js, *everything* is written around a single event-based programming model. This means that it's easy to cobble together the pieces you need for your project. Javascript is a powerful programming language (read [Javascript, the Good Parts](http://shop.oreilly.com/product/9780596517748.do), if you haven't already), but is also a horrible confused beast that doesn't take a stand on programming model. Python and Ruby are better languages, IMHO, but node.js has the community.
If you're using WindowsXP, you won't be able to use WebGL. All major browsers have disabled it due to security reasons.
I completely rewrote it... there's no way I could use it as is.. While doing that, I found so much stupidity, and tons of code duplication. Ugh.
just a bit of fog to add contrast between near and far obstacles would go a long way.
 Something.prototype.changeA = function() { this.a = "something else"; } Probably, because there's a ridiculous number of JS users who have never heard of prototypal inheritance. 
I'm trying to view the tutorial ( http://www.firebase.com/tutorial/#1 ) on chrome on windows 7 and I dont see anything
That's because it doesn't sound like you're making a joke; it sounds like you're posting a serious response to Draders' very obvious joke.
Wow! Looks great, performs excellently for me too.
Tried 3 times and crashed 3 times after 2secs. They inverted the controls WRONG!!!!!!!!!! Forward arrow means nose of the aircraft goes DOWN not up! Just like a real plane or helicopter.
Yeah I can't play this at all.
Yeah, I'm like "SHIT OBSTACLE! PULL UP!" and subsequently nose dive.
To add on to this, I had a bit of trouble seeing the tight corner holes due to them being in front of the X-Wing and when I saw them it was usually too late. I agree with the inverse keyboard as well.
Worked in Chrome (18.0.1025.162) for myself.
Bug noted; will take a look at it. Thanks for reporting it with the user-agent! :)
Bug noted; is that Firefox? Can you post the user-agent?
Security that is strictly client-side embeddable is a ways out. However, if you have existing backend already spun up we do have something in place for security. Shoot me an email at vikrum at firebase and I'll send you a beta invite.
I'm not ... sure how to play? I typed in text at the top left. Took me a while to realize I had to have two entries for anything to happen... I don't see the point in naming the lines. They seem to spawn in random locations with random directions anyway. I have no clue what the drop-down with A/S and stuff means. 
[Here it is](http://pastie.org/3790630) straight from Firebug's net panel
If you do have that problem, for instance you have a Hand inside a Person object, use `self_p` and `self_h`. If you don't have multiple levels, then this won't be a problem, and `self` will be just fine.
&gt; …it sounds like you're posting a serious response to Draders' very obvious joke. Exactly *that* was the joke. I assume this only works in verbal communication where you can convey the irony by intonation.
Nitpicking here: &gt; The other advantage I appreciate is loose typing. This can make development easier. Java, in contrast, is strongly typed, every class needs to reside in its own source file. PHP and Perl are loosely typed liked JS. The contrary of strong typing is weak typing. And strong typing has nothing to do with putting things in their own source file, see Python, where you can cram everything in one file and it is still strong typed.
I've never heard of an unpaid internship in software. If you know someone who didn't get paid, they were either rolled or truly terrible. Some companies pay the interns the same as their starting developers, just no insurance or 401k.
I'm going to take a stab at it, don't take my word as fact, I'm more of a Java guy... The function Blog takes two parameters, body and date, you seem to understand that. Say, for example, you pass it body text (I assume String or something, doesn't matter in this context) but you pass it "NULL" for date. It first assigns the passed body to the "local" body, because the passed body actually has content (isn't NULL).Then, because "date" (the parameter) is NULL, instead of assigning the local date in the object to the passed date, it creates a new Date object, assigning that instead to the local date. ~~It's not that the parameter wasn't passed, it's that the parameter was passed as "NULL." You can't call Blog("This is the body") or Blog(new Date()), you must call Blog("This is the body", NULL) or the opposite.~~ If you're a Java guy like me, think of it like those special return statements that look like return (a &gt; b) ? 5 : 6; Edit: null -&gt; undefined in Javascript.
You actually can do: var my_blog = new Blog("This is the body"); You can pass parameters in order, and all of the remaining missing parameters will be replaced with "undefined". You're right on the other hand though, if you wanted to put in just the date, you would have to do exactly like you said: var my_blog = new Blog(null, new Date("October 13, 1975 11:13:00"));
cool, i had no idea Javascript could do that. I guess that goes to say that you can't overload functions in Javascript, eh?
In addition, you can always pass extra parameters to javascript functions. You can also reference an array of all parameters to a function with the protected keyword 'argument'.
I think it would do much better with an explanation... It's a two-player game minimum. The drop-down is the controls you're choosing for the players. It plays like a Tron / Light Racers style game, except with curved movements.
null == undefined null !== undefined
mmkay, thanks for the fixes. I know about the typing having nothing to do with the source file. I think I was missing an 'and' in the sentence. Requiring so many source files is a pet peeve of mine, which is how that statement got in there. 
You don't always want to follow that pattern. There are several values for "body" that would fail that test and leave you with "Nothing going on today" even though something was passed in: * false * null * "" * 0 * NaN (Not a Number... special value in JS) A longer, but more accurate test is: this.body = typeof body !== "undefined" ? body : "Nothing going on today"; Another alternative that's a bit shorter, but could be a problem if undefined is overriden someplace (so probably pretty safe): this.body = body !== undefined ? body : "Nothing going on today"; Note that the !== is important vs just != (which is similar to === vs ==). This means that you want an exact comparison, not a "truthy" or "falsy" comparison. 
Good job. Documentation and well-defined APIs are the way to go :-)
'arguments'
Thank you, this is correct. And it is an array type
actually, it's not an array... common complaint about the inconsistencies of JS :( Try doing arguments.slice(2); or something :) The alternative is Array.prototype.slice.apply(arguments, [2]);
I think that's a valid point, but I think they look like an eye sore. :P For someone who is used to seeing them on the same line they add a bit of mental overhead when reading code. 
These ‘JavaScript Hipsters’... I see them write in a language that is half of CoffeeScript, and at the same time loudly complain about CoffeeScript.
Okay, I admit, I write JS without semicolons. I don't blame people for hating me for it, but I do it. Why would it be difficult for someone to write a linter that compares ASI to indentation? ie, it warns you whenever it inserts a semicolon and the next line is indented, or whenever it doesn't insert a semicolon but the next line is indented? This is basically what python does, and I can't think of a single surprise it wouldn't catch.
tl dr // so what if it won't minify
Yep. I write programs in more than just JavaScript, and the languages I use demand semicolons. It just carries over. I do like the `cond &amp;&amp; action;` hack though. It can turn a 10 line series of if statements into about 3.
I see what you did there.
Am aware of who Brendan is - personally would not argue with either of them.
I'd recommend taking a look at backbone-boilerplate--lots of best practices all in one place, plus it's built on top of grunt. https://github.com/tbranyen/backbone-boilerplate https://github.com/cowboy/grunt
Really good stuff :D funnily, enough, the noise it makes when you make a wrong turn sounds like Link putting down a bomb in the first *Legend of Zelda* game XD
I'm not familiar enough with JS engine internals to get down to answer your question thoroughly, but it's not surprising. "if" and "&amp;&amp;" despite seeming similar in your use case have different semantics (in terms of ecmascript); "if" is a statement and therefore not expected to produce a value...where "&amp;&amp;" is an expression so it always has to figure out what value to evaluate to. That takes extra work. This difference in semantics will most likely have repercussions when compiled to bytecode or JIT'd, with the "if" probably being compiled to a simple branch and the &amp;&amp; compiled to a slightly more complicated shuffling around of values, though again I am only passingly familiar with JS engine internals and this is my educated guess. So, it's not surprising that "if" is *generally* a bit faster. As to why occasionally something else is faster; there's so many possible reasons. Tests like this are always a little iffy to begin with. Also, nowadays there's all sorts of optimizations going on in JS engines, so in the cases where one of the boolean expressions pulled ahead they are probably riding some optimization path in the engine (that may have been removed in later versions, recently added, etc), or just some quirk in whatever visitors' computing environment/platform (the biggest differences seem to be in V8 which just compiles straight down to native code, so it could be platform differences).
If you're using node.js you should consider stylus instead of LESS.
Right, it "feels kludgy", meaning it's a matter of personal preference. Technichally speaking, there's no reason that JS-without-semicolons can't be just as robust and error-free as JS-with-semicolons, as far as I can tell. All it would take is a linter written with that attitude in mind.
Meanwhile, I mostly write in python, where semicolons at the end of statements are optional, and nobody uses them, and nobody complains about it. I guess it's just a matter of perspective....
Don't be afraid to try scripts in any one browser of your choice. Unless you're using a really ancient browser, or using a really new/proprietary aspect of the language, you're going to be just fine. To shorten your experimentation cycle, use your browser's inspector tab/window, or use something like http://jsfiddle.net/ for slightly more involved tests. 
&gt;&gt;Also, don't add compilers and preprocessors to your build process lightly. Do they solve serious problems? No? Don't use it. I disagree strongly with this. The closure compiler gives incredible statical analysis, if used properly (read well annotated) it produces a tiny JS end product which is more performant.
use the google closure compiler at least, i can recommend the whole shebang, but the compiler is a great starting point. Use a lot of the inbuilt library functions to get inheritance and manage your dependencies.
But you've added an extra step to your build process that quite significantly rewrites your code. For what? A hypothetical increase in speed? A 10% reduction in size compared to gzip and minification? Is your app so performance critical that this is a necessity? I'm not against js compilers per se, but what is the problem being solved here? You've just made your debugging process a lot harder to gain very questionable benefits. 
I want that on a tshirt!
I can't see ANYTHING! It's too dark for my screen gamma (which is set for art). =( Really awesome game though. =)
I would recommend you to check out http://javascriptmvc.com which is built exactly for this type of apps. It also supports less compiler. Even if you don't end up using JMVC I recommend you to read http://javascriptmvc.com/docs.html#!organizing and http://javascriptmvc.com/docs.html#!srchr which talk about the organization of big js applications.
Fuck that shit: for (j=0 j&lt;upperLimit j++) { // you know perfectly well what I mean }
I guess up scrolling might prove useful for something like Twitter. It could eliminate a button click to expose new tweets, though intelligent up scrolling would be required to prevent unintentional rate limiting. You'd probably want to mark the first chronologically read tweet with a CSS class based on the upper most scrolled position as well. What other use cases might this work well for?
What's wrong with if (e) e.doSomething(); if (e) doThis; else doThat(); Yeah some people will hate you if you write your one-line blocks this way, but those people will probably hate you even more for the way you're using short-circuiting operators.
I really liked it =) Good job , kudos !! Just realized my immediate memory sucks =p thanks.
the orignal question was "How to structure a large scale web app?" Large. 
True... but you should still weigh the pros and cons before adding additional moving parts to your codebase or toolchain. That's the point. For example, adding a minifier that only saved you 5% bandwidth would be worth it for a large site with a lot of visitors. Equally, using Coffeescript might (arguably, depending on the dev) *not* be worth it, because it adds complexity (translation/compilation) without necessarily adding any benefits that the site or developers will actually benefit from. The key point he's making is *don't add complexity without being able to show it's a net benefit*, which is correct. You're blithely assuming he's criticising any and all minifiers, compilers, preprocessors and the like no matter how or when they're used, but ([his follow-up comment](http://www.reddit.com/r/javascript/comments/sb9zh/how_to_structure_a_large_scale_web_app/c4ct4v4) notwithstanding) that seems like your inference rather than his intention. He's not fond of compilers or pre-processors, and warns people not to use them *unnecessarily*. That's not a prohibition against *ever* using them, just sensible, mature skepticism before increasing the complexity of a codebase.
True, but sometimes languages grow beyond their designers. Of course, this is one of those cases. It really looks like everyone except Brendan came out looking bad in this mini-feud.
Isn't that [patented by Twitter](http://techcrunch.com/2012/03/27/pull-to-refresh-the-patent/)? 
quick google search comes back with this: http://seanmonstar.github.com/Shipyard/ mootools itself hasn't got an MVC framework baked in, which is why if you look at their closure example they're not sure if it should be in (though they do have goog.ui.Component which works as a nice control/view and goog.ds which can be models). Most libraries will have a framework written by someone (I've even started a closure one that I'll be submitting and example to later http://rhysbrettbowen.github.com/PlastronJS/)
Looking at the source code it appears your opening script tag is commented out. Fixing that will hopefully fix your issue. Good luck!
Actually, if() invokes the same expression parser used in his other examples to obtain its inner-value, which it checks for JS 'truthiness'. The difference is in the complexity of the expressions represented, just wrapping an if() around his other examples does not improve performance, it actual degrades it. The key is that the if() statements are using, by far, the simplest expressions (single values or negations thereof), while the other examples are invoking the expression-parser for multi-term expressions, which will always take longer as it involves deeply-recursive function calls in most cases to properly parse. For a simple 'if(!a) useless()', the pseudo-assembly might be (*very* high level -- not at all representative of actual bytecode, but gives you a basic idea): STO [a] AX JEQ label1 AX CALL useless :label1 While, say '!falseThing &amp;&amp; uselessFunction()' would be closer to: STO [falseThing] AX NOT AX JNE label1 AX CALL useless POP BX ;Get the return value, since we need to care about it in this context. Assume stack AND AX BX JNE AX label1 :label1 Which a 'somewhat-smart' compiler would recognize a few things about: 1) the JNE is irrelevant and 2) the value can be discarded as we're not actually using the value of the expression. This would reduce to: STO [falseThing] AX NOT AX JNE label1 AX CALL useless :label1 And a 'sufficiently-smart' compiler would further recognize that NOT/JNE is more effectively done as JEQ and reduce to: STO [falseThing] AX JEQ label1 AX ;Instead of NOTing, just change the jump instruction CALL useless :label1 Which you'll note is the same code generated for the first example. The key here is that statement-parsing is cheap. Expression parsing is expensive. The smaller the expression, the faster the parse, and generally the resulting code. The cases where if() statements are taking longer to execute are due to bad optimization and forward-prediction in terms of branching -- labels which are not needed are probably being generated and not optimized away by subsequent passes. This represents a failure of optimization (actually I would even say it represents a failure in code generation). As to the roughly 50/50 split between short-circuiting and stupid-short-circuiting, you'll note that in many cases, the intelligent compiler is actually optimizing them both to the same condition, and execution time is the same. Where we encounter differences has to do with at which point in the parsing phase JIT begins to occur. For your examples which use || and are slower, I suspect the expression-parser is generating additional, superfluous code because it has no way of knowing that your first terms are always going to be true or false. This means (at best) more labels and jumps, and at worst a full-statement evaluation even when it is not relevant (although lazy-evaluation of compound conditionals is an optimization as old as optimization, one can never tell). On the flip side, your stupid-short-circuiting example introduces an additional operation (!) and may suffer from similar optimization-problems as I explained above. Interestingly, there are a few JS engines which (correctly) recognize these as the same basic expression tree and generate basically the same code (with slight differences in execution time being easily attributable to parse times and very small performance-optimizations). TL;DR: Uhh. Different magic boxes do different things with different ingredients.
&gt;However, people using this library are able to do `jspy.count = 5` to manually adjust the value. And that is bad, because...? I adhere to the Perl philosophy of programming: that people don't come into your living room because you ask them nicely, not because you've got a shotgun. And if they ever need to still enter your living room it is because they have a legitimate reason. So don't block them. 
Hi thanks for the response... but i'm not sure i see where it's doing that. i copied and pasted the script without any changes on it's own separate edited and it seems to work fine there. i copied/pasted so i'm not sure why it would be getting commented out when i copy/paste it back into the wordpress editor? (i apologize in advance if this is something really stupid that i am over-looking, but i can't find it! im going crazy
Yup. Notice the difference here? You had this line: &lt;input type="BUTTON" value="Calculate" onClick="dosum()" name="BUTTON" id="BUTTON" style="color: #EFEFEF; font: 10px Verdana; background-color: #666666;"&gt; Which does nothing. I changed it to this, which works just fine (well, it does your math, I didn't check that): &lt;input type="BUTTON" value="Calculate" onClick="dosum();" name="BUTTON" id="BUTTON" style="color: #EFEFEF; font: 10px Verdana; background-color: #666666;"&gt; ; ***;*** Any questions? 
Blows my mind how Addy Osmani finds so much time to contribute so much. Good work! (and congrats to the guy on having recently joined Google)
Your issue is related to parsing errors. The first error is at line 104: if (charCode &gt; 31 &amp;#038;&amp; (charCode &lt; 48 || charCode &gt; 57) &amp;#038;&amp; !(charCode==46)) There are some [character entities](http://www.w3.org/TR/html4/sgml/entities.html) that shouldn't be there. The correct line code is: if (charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57) &amp;&amp; !(charCode==46)) Then, you have another issue with the ending tag of your form. In the original page, the `&lt;/form&gt;` is placed after all `&lt;input&gt;` tags. In the copied page, the `&lt;/form&gt;` tag is placed just after the `&lt;form&gt;` tag. So there isn't any `&lt;input&gt;` tags in the form.
&gt; Actually, if() invokes the same expression parser used in his other examples to obtain its inner-value, which it checks for JS 'truthiness'. Right, when I'm talking about the differences I'm talking about as a whole and in terms of ECMAscript semantics. Obviously they will be broken down into smaller pieces. IF is a statement, but inside it is an expression that needs to be evaluated. AND is similar , the first expression needs to be evaluated to figure out what to do. They both start with something like: ToBoolean( GetValue( exp ) ) assuming if (exp) {} or exp &amp;&amp; something The difference is that with an IF, once it knows what to do it doesn't need that value anymore and just need to branch one way or the other. &gt; just wrapping an if() around his other examples does not improve performance I'm not sure if you're saying this because that's what you interpret my post to mean, or as a general point of clarification. If the former you've misunderstood me. Thanks for the insightful post.
thanks buddy, that was exactly the problem, i guess WP was changing it to ASCII so i had to comment out some lines of code in the formatting.php file in the template so it would stop messing with the javascript code. 
&gt; I'm not sure if you're saying this because that's what you interpret my post to mean, or as a general point of clarification. If the former you've misunderstood me. No I understood what you were saying, I was just trying to get across how an expression is evaluated in any case. I rarely get to bloviate about my hobby, so I jumped on the opportunity. I wasn't trying to correct anything in your post, just expand on it.
&gt; I rarely get to bloviate about my hobby, so I jumped on the opportunity. A pain I know all too well friend.
I did that too as soon as I got it, then forced myself to back up and just address the problem. We could rewrite it to make it cross-browser compatible, W3C compliant, then address ADA compliance (Americans with disabilities act, since it looks like it's in the US), then reformat for "best practice" code. Eventually we'd just write it from scratch for him. Add the ; and everything worked in Chrome and IE, so I figure that'll get him moving. I started to reformat the whole thing out of habit too, but caught myself in time. It helped that I was by then running late for a lunch date. :) 
Well that's taking it a bit too far... The fact of the matter was just that the prefix is not only more understandable, but to my knowledge works in older browsers
This was a very readable and fast refresher to anyone who is either new at JS or has been doing it for awhile but needs to get the terms right for an upcoming interview. Nice job!
I'd love to see a toe-to-toe competition between ExtJS's best and JQuery/UI/backbone's best to build a complicated CRUD app, or a gmail clone. That'd be cool.
The second half, titled 'The Programming Gurus Playfully Dissed JavaScript', doesn't even talk about the language.
Can anyone explain what is meant by this quote: &gt;Goaded by Meijer as to whether it is possible to write big programs in JavaScript, Hejlsberg replied, “Yes, you can, but you can’t maintain them," much to the delight of the crowd that featured several prominent language and tools designers.
They are talking about this: http://wikipedia.org/wiki/ISO/IEC_9126 ... But really, nobody cares except language designers and other academics. They aren't taking about the actual real world, they almost never are...just the abstract models that they spend their lives with .. Like http://wikipedia.org/wiki/Halstead_complexity_measures and "cyclomatic complexity"
It was my experience that for toy apps, ExtJS was awesome, because the graphic design is just so beautiful...but when it came to integrating it into an existing framework or application of any size (the project I'm working on is about half a million lines of code), it just becomes impossible to get ExtJS to fit. ExtJS has a very specific way of working, and if you're unwilling or unable to adopt every convention of the library (basically rewriting your UI code from scratch to accomodate ExtJS), you're in for a very long, very complicated bunch of coding. jQuery drops right in...jQuery UI isn't quite as lovely, granted. But, there are options...I haven't quite wrapped my head around how we're going to solve all those issues (and there's still many elements of ExtJS I miss...but it was mostly just that ExtJS has good designers; the code always felt enterprisey and Java-esque in an uncomfortable way, to me; jQuery feels more lispy/perlish in a nice way that I really enjoy). I ended up giving up on ExtJS after spending 6 months or so trying to make it fit into our project. jQuery never presents any sort of "OMG, how do I scale this impossible integration task?" You just kinda stick it on like duct tape wherever you need it, and it works. And, I mean that in the best possible way.
Looks pretty nice. I've noticed a bug though: when you mouseover the pictures of the boxes, the tooltip sometimes lags, i.e. it'll show the text for what I had previously had my mouse over. (On Chrome, OS X Lion)
I like your joke about "all" frameworks: What needs to be done? _Todos._
Apparently sourcemap is supported by the latest Chrome release. Mozilla has also been working on support, but it is [blocked](https://wiki.mozilla.org/DevTools/Features/SourceMap), whatever that means. But the important thing is that sourcemap it is now supported by one browser. This is a great improvement for all systems using compiled JavaScript - CoffeScript, GWT, Dart, Mascara etc.
Actually, I find the default ExtJS to be pretty ugly and outdated. It's got a classic "designed by programmers" feel to it. http://dev.sencha.com/deploy/ext-4.0.7-gpl/examples/feed-viewer/feed-viewer.html is a prime example. It's got a nasty whiff of "Microsoft" about it. Each to their own, I guess... I'm probably being a bit snobbish ;) 
I don't really think a semicolon would change anything there. What happens when the browser parses onClick="dosum()" is something equivalent to this: element.onclick = function (){ dosum() }; so, basically all the code you write in an inline event handler gets wrapped in an anonymous function and assigned to the corresponding DOM event property. Now, what do we have here: a missing semicolon? So what? Javascript has automatic semicolon insertion (http://inimino.org/~inimino/blog/javascript_semicolons) which behaves pretty in this case. Only if you had multiple statements in a single inline handler (even more hideous!), problems would arise without semicolons: onclick="one()two()" &gt; SyntaxError: Unexpected identifier
Well, there are lots of projects (jQuery Mobile the last one I noticed), that use RequireJS on the server-side in a build step.
I am currently working on a site with approximately 26,400 lines of JS, and that's excluding external libraries. Here are my two cents. I split my projects into two layers. First I have modules, which are built by adding values to a global object for that module. For example on an IDE I'm building, I have the 'quby' object which has my compiler, 'play' which holds a graphics stack, 'pmc' which is the site, 'editor' which build code editors, 'skybrush' for a painting app, and so on. Of those, only 'pmc', the module for the actual site's JS, knows about any other modules existence. No other two modules know about each other, in any way. If they need to communicate, hooks are built in, which 'pmc' then glues together. The idea is that 'pmc' a dumb glue and site scripting module, whilst all the others can be clever stand alone libraries with clean APIs. The next layer down is that individual modules can either be built across multiple files in it's own project folder, separate to my site, or in one single file on it's own. The individual project files work in the same way, individual modules, but they can presume each other exists. They put their public interface to hang off the same global object. For example in my compiler I have all runtime components built under 'quby.runtime', the parser at 'quby.parser', the syntax stuff at 'quby.syntax', utility functions at 'quby.util', compiler hints at 'quby.compiler', and the entry point for the whole module is at 'quby.main'. Even modules which only exist in one file use this same structure. For example 'pmc' has the 'pmc.player' object that handles all of the game player, 'pmc.player.canvas' which is just the central bit, and 'pmc.player.canvas.pause' which handles showing and hiding the pause screen. All of those provide functions depending on context, for example 'pmc.player.canvas.pause.show()'. Modules also provide an 'initialize' method, which is run within the 'document.ready'. This is used for any runtime setup, such as needing to use jQuery, grabbing HTML components, and things like that. The modules also do a lot of HTML sniffing at that point; for example if a game player is there then it'll use it, and if it's not, then it won't. The files are then concatenated together for deployment, or for testing HTML pages, they are just included as script files. Note that magnification is not done when I copy these into the site, for debugging purposes. Deploying a module into the site's project folder is not minified, make debugging easier. Minification of any code only ever takes place when the site is pushed to live, and I have a build script (written in Ruby) which does all this for me. The emphasis here is that parts are built in total isolation, with as little knowledge about each other as possible. I've actually found that makes the code far more re-usable, and encourages me to build code in a way that allows it to be loaded in any order. If you build any cool modules, then it'll also be much easier to open source as it's own project. To summarize: * keep your structure as dumb and predictable as possible * build modules to be able to be loaded in any order * whatever structure or build tools you use, get them in place and setup early, as it's easier then fudging it in later * build modules in total isolation
That's pull to refresh, infinite lists are lists/tables with great number of records which load lazily and automatically as you scroll through them. For instance, iOS's "Music" track list, I have ~3000 tracks, yet loading the list is instantaneous. I can guarantee you the tableview is not fully filled when first opened.
I don't understand the connection. why are you comparing dependency injection with CodeKit? one is code reusability and scalability and the other is load performance. if op meant to ask why AMD is bad, then simply put; its not. Martin Fowler have some great articles on dependency injection and its benefits are obvious anyway. op might mean to ask about comparison between different loaders?
&gt; Besides, if you can implement your site with Zepto why not just use it for both desktop and mobile? Because zepto doesn't support the same browsers that ....say, jquery does? The whole point of zepto isn't being faster than jquery (necessarily)...it's removing the unnecessary bloat that supporting older browsers does (namely, IE)...it's primarily about providing a much smaller download (relatively speaking, of course).
I have been working with the AMD pattern for quite some time now and the the most annoying thing I ran into so far is the configuration and actually building. Getting the paths and configuration right the first time was tedious and annoying and required a bit of fiddling around and reading documentation. The implementations I have been experimenting with (dojo, dbLoad, requireJS) included some sort of build tools. All in all I am actually quite happy with AMD, it's a standard, it's getting adopted and tools for it are being build and some (dojo, requireJS) are fit for production use.
What? All those statements apply equally well to `e &amp;&amp; e.doSomething();`. I'm just saying that, in all cases and under every reasonable opinion I can think of, if (e) e.doSomething(); is superior to e &amp;&amp; e.doSomething(); Whether that spread-out syntax you prefer is superior to the one-liner is a reasonable opinion, but it's not what I was saying.
It seems that many people in this thread so far use it as a build tool on the back-end rather than a on-demand module loader for the front end. As a module loader for the front end, if you have a large app built of several sub-apps, using an on-demand module loader keeps bandwidth, and load times down by only requesting/downloading modules that are currently in use. The only downside I can think of, and have experienced using requirejs apps, is that there can be a small delay when waiting for modules to load, and not everyone gives good UX feedback when loading modules ondemand and an app can look like it's just sitting there (while it loads dependencies in the background).
I realized after I posted it that I had also corrected his mis-parsed "&amp;&amp;" from another function, thinking it was my copy-paste error, and the function worked. So yes, the ; was not the source, it was the first (well, I thought it was the first) thing I noticed. It does work without it, but... ew.
right, there's no function overloading in JS, if you redefine a function with the same identifier within the same lexical scope, it will replace the previous one. You can invoke a function with any number of arguments you like, their use depends on how its body uses them. Using the appropriate logic you can assign default parameter values (like in this case) or make the function behave differently depending on the number of actual parameters. Moreover, you can inspect the number of formal parameters the function was declared with, in this case: Blog.length &gt; 2
The project seems really cool, so I would love that!
AMD is nice - RequireJS is a bit bloated though. There are a few libs that are smaller and follow the same specification (NeedsJS, tease, etc.)
It's called [currying](http://en.wikipedia.org/wiki/Currying).
I also found require JS to be overkill, but I cant actually remember the game-breaker reason now... I ended up going with using scriptjs by Dustin Diaz and using concatenation via YUI compressor at build time to create a single JS file for production.
I'm not sure if I'm right, but it -looks- a lot like [Church encoding](http://en.wikipedia.org/wiki/Church_encoding).
You should add `var` infront of addFunc to avoid making it a global. The way you call `add` makes it look like currying, it's probably closer to chaining in terms of actual implementation. I'd caution against doing this btw, it's a little weird. I'm also averse to putting things directly on function objects, even though it's allowed by the language.
Accumulator? This might be useful if the individual call sites were farther apart and required more (perhaps a variable number of) parameters. 
Are you talking about adding the `var`?
I'd call it something like an object or function wrapper because you're taking a value and wrapping it in a function so it's callable, but then you're calling the total as object property. As you can only call the one operation on it then it's probably not too useful, you could return a math object that has things like add or multiply and that may be useful (not as a math object but something else) so you can use it like: math(1).add(2).mult(3).equals() // returns 9 which is pretty much how jquery works and allows chaining. This is the OO style of programming. The functional style is a bit different where you have a function that can accept a math or number object and do what you need to do: num = add(1, 2); num = mult(3, num); equals(num); // 9 They both have their place - OO is for when you have a small number of different objects that won't change - otherwise you'll have to redefine add() for each, whereas functional you only have to change add() in the one place to accept the new object. So basically it will only be useful if you define add() to take in multiple types of objects rather than just a number.
nothing wrong with using two different libraries, but to make your life easier and reuse more code you should write an interface to the libraries so you can make the same calls to the interface from your code and the interface will translate it for you.
Yes, it doesn't matter if it clutters the global scope as the code is only meant to demonstrate the principle, it shouldn't be used on a real site, this code only replaces the '+' operator which can't be a good idea. This is code I wrote just as an example of the principle, better to keep it minimalistic. I figure by keeping the scope down to adding a number to a total it won't distract from How it chains. That goes for how the total is stored too - just an afterthought to show it works.
See my other posts, I'm using simple maths because of readability. It isn't about adding numbers.
&gt; For my purposes, it is worth to use a Framework like jQuery? That depends on your purposes - do you care about your js working correctly on all browsers and are you doing things that would break in different browsers?
It took me 12 minutes to do them all, although I didn't bother with the pseudocode. I'm a software engineer though, and I work with javascript daily.
I like how you can just claim ownership to JSON with your own internal methods and call it the third generation. WAT?
I just want to say as a teacher, you must instill knowledge of Javascript's prototypal inheritance.
**Q1** &gt;pseudocode Why pseudocode? &gt;54321 Put a backslash in front of the \* characters to escape them. &gt;asks the user Via `prompt`? &gt;Notepad ~Your favorite text editor. Not everyone uses Windows, most won't like Notepad. **Q2** &gt;ensre ensure &gt;Hint: You can use the functions substring(), isLetter(), and isNumeric() to validate the input. Most people probably would use a regular expression for that. **Q3** &gt;For loop `for` loop. Got one of those O'Reilly pocket books about programming at hand? They got a short section about formatting conventions at the beginning (*Preface / Conventions Used in This Book*). I highly recommend to stick to those. They are easy to follow and about as intuitive as it can get. **Q4** &gt;displays a solid rectangle [...] of the specified character Console? Text in a document? **Q5** &gt;`type="text/javascript"` Use the HTML5 doctype and skip the type attribute. &gt;`ARRAYSIZE` `ARRAY_SIZE` &gt;`new Array(8, 3, 9, 6, 10, 2)` `[8, 3, 9, 6, 10, 2]` Never use `new Array` or `new Object`. Use `[]` and `{}` instead. &gt;`document.write` `document.write` is super horrible for performance. Be absolutely sure to point this out. **Q6** &gt;abd and --- For blocks of code, prefix each line with 4 spaces or a tab character. Most better text editors have a block indent/unindent function. Usually, you just have to highlight the relevant lines and then press tab to indent or shift+tab to unindent.
I don't think you switch from viewing a doc to viewing a spreadsheet on a single page, but I do see your argument which is what if there are many large but unrelated sections that you want to switch to on the fly (without a new page request). I can see why you would need to stream in JS files in that particular case, but are there really a ton of people who would need to use AMD for this reason? For example jQuery mobile is using requires.js but not for it's streaming capabilities. I look at their source and it just looks like a nightmare. Why would they need this?
it's awesome to see tools like this being built on top of d3.js
I came here to say that AMD is cool and all, but I had something I never quite got about it (and I think I posted about it a while back). After reading your comment and the excellent rant (which I completely agree with) that you linked to, and all of the linked linked from that article as well, I think* I prefer the CommonJS Lazy invocation because it's simpler. Lazy loading never made since to me either, I mean the amount of data transferred is minimal, why not just load it immidietly? We're downloading full HD movies in less than an hour, so we're afraid of some kilobytes? Anyway, excellent links, worth the read. P.S. I worked with RequireJS and quite liked it. Except for the exact same reasons mentioned in this [excellent article](http://tomdale.net/2012/01/amd-is-not-the-answer/).
I will see what I can do. I started while I was at work and it started to take a while because not only am I programming against what I would normally do, programming like that is very cumbersome haha. I will try to post the answers as I have time to as their own post, anybody else feel free to throw theirs in. _*NOTE: These will not be best examples of how to code these, and rather how I think a beginning programmer would write them_
Try doing as much as you can in native JS. Will get you some EXP points. Especially when doing AJAX calls, because last time I've checked, jQuery had a memory leak there that was known and not fixed for years. As for DOM itself, read this http://www.w3schools.com/htmldom/default.asp When you're familiar enough with the native code, check out [MooTools](http://mootools.net)
&gt; We're downloading full HD movies in less than an hour, so we're afraid of some kilobytes? And we still try to reduce the file size of those videos, too.
[ES5 §7.9.1 Rules of Automatic Semicolon Insertion](http://es5.github.com/#x7.9.1): &gt; There are three basic rules of semicolon insertion: &gt; &gt; 1. When, as the program is parsed from left to right, a token (called the offending token) is encountered that is not allowed by any production of the grammar... &gt; &gt; 2. When... the end of the input stream of tokens is encountered and the parser is unable to parse... &gt; &gt; 3. When... the production is a restricted production [ed: i.e. may not contain a LineTerminator]... and the restricted token is separated from the previous token by at least one LineTerminator... Translate: "When the program doesn't parse, try this." I'd call that an error handling mechanism. These rules, plus their subrules and exceptions, which I haven't quoted, add up to a fairly complex specification. The complexity of these conditions, and the fact that a minor edit to your code can cause one or more of them to no longer apply, thus removing the ASI and changing your code's intended meaning, are what cause the robustness issues. This applies even if you don't want to semantically define ASI as an error handling technique. Essentially, I'm saying that your code will be more robust if it's always crystal clear to *human readers* exactly where the statement is meant to end. You don't want a situation where the code looks mostly the same to a human but has changed meaning according to the arcana of the computer's parsing rules. I can't see the ASI rules as anything but arcana. "It always ends at the semicolon" is quick and easy to read. "It matches all those rules but not their exceptions" is not as quick to spot, *even if you are familiar with the rules.* &gt; I explained how a linter could be used to make JS-without-semicolons completely robust (and therefore maintainable, reliable, etc.). So what do you check in to SCM? If you're relying on your linter to generate maintainable code, the answer is the *output* of the linter, so that the next maintainer (i.e. likely you, tomorrow morning) gets nice, maintainable code, not unmaintainable semicolon-less code. I think perhaps you're using "robust" to mean "always executes successfully on a variety of potentially quirky platforms," because that's one of the big things you always have to worry about with JS on lots of different browsers. However, I consider keeping code easy to read and edit for people (potentially) unfamiliar with the codebase the more important and more traditional aspect of software robustness. 
Keep an eye out on event binding. Destroying elements does not necessarily destroy the events to which they were bound. If you aren't explicitly destroying them then you'll end up with dangling pointers (as it were) and those will just sit there, taking up memory.
Telling users to buy more RAM because you did a poor job with memory management is not an answer, it's an excuse. Also, delete does not delete an object, only the reference to it. You'd have to wait for the JavaScript engine's GC to come around and clean up which, if you have a high frame-rate app (game, ticker, video) will more than likely cause frame loss or freeze. Bad.
It's not really page refreshes that clean up memory. The garbage collector runs periodically whether you are refreshing the page or not.
Supporting IE is a reality for many JavaScript developers, especially those of us who work on big apps that go out to hundreds of thousands of users.
I'm using it. I think the worst part of it is the external configuration and build process - you can't just pick it up and start using it, it takes time, ans when things go wrong (like missing paths) it's generally not an obvious fix.
That's why you have the r.js optimizer as a build tool.
Ahoy, don't I look like an ass.
This looks great to be honest.
Even though slightly advanced, I believe this could work. Nope, I do not require data validation.
Yes, it should and it does.
If this is a new twist on pretending to be a girl online to get nerds to do your homework for you, I would have to say: well done!
False. The language itself only has a few small differences but some of them are very important: 1. the arguments object is actually sane so you can add prefixes for `box-shadow: 0 0 5px black` and `box-shadow: 0 0 5px black, 0 1px 0 red inset` with the same function/mixin 2. you can nest within mixins, pretty powerful http://learnboost.github.com/stylus/docs/mixins.html (scroll down halfway) 3. you can iterate http://learnboost.github.com/stylus/docs/iteration.html 4. it has a kickass 'standard' library ala [nib](http://visionmedia.github.com/nib/) (and more) but the main reason I recommended it with node is because the two work together so much better. Mainly it comes with an express middleware compiler and doesn't crash the server when your css has errors. Please don't be so quick to judge.
Ok, MDN might be better, but still, I've learned my stuff from there back in the day when MDN wasn't so popular.
Nice try student.
Infinite Pages (PHP) Alternative http://codecanyon.net/item/infinite-pages/117040
&gt; most people would use a regular expression for that. Consider the audience.
We have never run into memory issues, the issues we have had are with zombie setIntervals and event listeners, and too many elements in the DOM.
That's a bit of a loaded response. Of course he does, this does not mean that you have to use jQuery. This is coming from a JS developer that includes jQuery on nearly every project, but still, the day I can't code *without* it is the day I should stop coding, period.
The majority of your post is opinion (like what's the "right" use of a linter) that I don't really feel like debating right now. I hope you understand. I can agree to disagree. Do you mind if I focus on the example I asked you to give? &gt; First and foremost, code concatenated together is now likely to break. &gt; &gt; Next, code that's moved needs to be carefully evaluated, because statement termination is now context dependent. You're just claiming that these could happen. I think if you actually took two minutes to write out an example of where you think this could actually happen, you'd see it's not as strong a case as you make it out to be. Feel free to prove me wrong with an actual code example. &gt; Without semicolons, the best you can do is say, "if I put a newline after a return, I must have meant it." No, that's false, and that's exactly what my original post was about. You can do better. You can say, "If I put a newline after a `return`, AND I put the next line at the same indentation level, I must have meant it." (I'd really appreciate it if you didn't just repeat that indentation level should not be used to signal things to a Javascript linter. I know that's your opinion. You've said it many times now. You're not going to convince me without a code example of how this could go wrong.)
church homepages everywhere will be quite excited. 
I'm not saying buy more RAM, I'm saying that generally there is a lot of extra RAM so its not generally a problem.
Cool, quick question on that, is the "name" attribute global? If so, is there a good way to have a setup that has 1 poll per instantiated class?
&gt; I like to be able to swim, before I learn to drive a boat - and you? In the case of jQuery, it's more like swimming with sharks or riding the ferry. I absolutely think you should know what you are doing, but jQuery is much more sane than working with the DOM directly. And if you want any sort of animation or other interaction, there is no question; Learn jQuery!
Most jQuery plugins are complete crap. I re-write most of the ones I find useful.
My life is complete.
[Wrote this the other day](http://blog.nexua.org/requirejs-hell-amd-really-is-not-the-answer/)
When working with large blobs and createObjectURL, we started to add some memory management hooks. We were working with large amounts of images and a lot of decisions about Canvas buffers and latency. Some degree of memory management (or really good testing) comes up each time I work with media-oriented web apps.
As tasteful as it ever was... just like lava lamps, neon route 66 signs and plasma globes.
I remember sites where every navigation item was a JAVA applet... just to make a mouseover.
Yes, but when you refresh a page, the whole memory that was consumed by that page can be cleaned up without any kind of reference counting or reachability tests, hence the likelihood of memory leakage decreases substantially.
This was only a wee bit cool in the late 90's and it sure as hell isn't fun to look at in 2012. The worst part is there is rarely a situation where this looks good.
God no, it's fucking terrible, classes are coming and no other languages use it.
Those who downvoted this, could you please explain? I really don't understand why. 
Right now the name is global. For the time being, you could have every instance have a unique identifier and pass it into the PollJS definition for that poller. In the future (pretty soon, hopefully), I plan to update it so that option isn't mandatory, and the definition well return a "Poll" instance, which you can call "stop" on. That way you can have the poller tied directly to the instance it relates to.
Edit: that was uncalled for. 
It reminds me of [CallStream](http://dbj.org/dbj/?p=514); and no, definitely this isn't currying, not only because it doesn't do *partial application* but also the persisted state between calls is held in a (static) property of addFunc and not in a closure.
[jQuery version](https://github.com/tubalmartin/riloadr#jquery) added guys!
I call BS. Sounds like somebody doesn't feel like doing his own homework.
Thanks for the info and that link.
Honestly, I think there's been way too many of these style guides for JavaScript lately. As long as your code has consistent styling, well-written documentation, and the people you're working with are doing the same, I think that's all that matters. Things like the "semi-colon!" and "no-semicolon!" debate are ridiculous as long as the actual committers to the code keep it consistent.
I clicked this link like knocking on the door of an old friend I haven't seen in a while haha
Doesn't work in any supported flavor of IE.
Not sure if this is what you are looking for, but [Frame.js](https://github.com/bishopZ/Frame.js) wraps setTimeout, is not DOM-centric, and provides similar functionality to those presented in this blog post.
Still an excuse. Just because users have extra ram doesn't mean you shouldn't care about leaking or overusing RAM. Sloppy code is still sloppy, regardless of the excess of an environment.
So, two years after, are there any real life examples of this pattern? Would be interesting to see if this truly helps structuring complex oo based code.
It doesn't, just by looking at it, because it worsens readability instead of enhancing it. And it doesn't have any practical advantage over the alternatives. Makes the code look weird and breaks the [principle of least astonishment](http://en.wikipedia.org/wiki/Principle_of_least_astonishment) Also, the *chaining* or *fluent* interface is so much flexible (it allows you to call different methods from the same object). So if you have a function with a variable number of arguments, you best bet is using the built-in _arguments_ object, or just passing arrays, whatever sails your boat. serializer.addData(1)(2)(3)(4); vs. serializer.addData(1, 2, 3, 4); vs serializer.addData([1, 2, 3, 4]); And if you want to call the same function multiple times on the same object, the *fluent* interface is more explicit, readable and flexible. serializer.addData(1)(2)(3)(4); serializer.toString(); vs serializer.addData(1).addData(2).addData(3).addData(4).toString(); So, I don't think so. It's just "clever" weirdness.
Pledged $50. I'm ridiculously excited by the idea of an IDE that is designed with *user-testing* involved in any way. IDEs are a dime a dozen, but most of them are made by people like me who are better at adding and maintaining features than selecting the right ones in the first place. -.-
This is the best answer. It certainly isn't currying like others have mentioned, it is just a design pattern which is, apparently, called CallStream. It seems like a slight variation of [Fluent Interfaces](http://en.wikipedia.org/wiki/Fluent_interface).
[Fluent interfaces](http://en.wikipedia.org/wiki/Fluent_interface) like this are usually preferred because they are prettier. From that wiki page, see that myCar.setSpeed(100).setColor('blue').setDoors(5); is much cleaner than myCar.setSpeed(100); myCar.setColor('blue'); myCar.setDoors(5); If all you wanted to achieve was variable arguments, the overhead of the function calls would probably outweigh the performance hit of using `arguments` (which is [debatable](http://stackoverflow.com/questions/5325554/javascript-functions-and-arguments-object-is-there-a-cost-involved)).
I wasn't quick to judge at all, thats why asked what you saw. /rythm i am planning on getting into node, will be interesting to see how the two work together in express. Ill give it a shot sir, thank you for answering back
Good comment, and pretty much exactly what I meant to say, about the expected solution being "homeworky". Even though, I'll still stick to my "balancing parentheses" example - I'd do this one in regexp, too. :P /^(?=.*[a-z])(?=.*[A-Z]).*[0-9].*[0-9]/
The semicolon vs no-semicolon debate is *not* over style, it actually prevents errors. Style would be variable_name vs variableName, omitting semicolons does have side effects, you just can't treat it as "style". 
But everyone else is pissing their pants over the 32k-sized download that requires. :|
And almost broke my Chrome. :|
interesting, and it's an answer to http://www.reddit.com/r/javascript/comments/sec8i/design_pattern_abuse_add123total_6_code_sample/ looks like an okay way to implement a state machine. Problem is it can only return a state and you don't know what methods can be applied to it. With JQuery sending back an object then at least you do know what you can apply to it and you can pass it anywhere and reuse it, where as this if you apply a function you've lost the reference to the previous state. I can't think of an example where this is more useful as states that aren't well defined make things harder rather than easier, but it's an interesting concept and look forward to seeing someone think of a clever use for it
I don't see a difference between this and overriding a property via prototype or object decoration, except for strange-looking boilerplate and additional function call overhead. Maybe less access to state? I don't really know.
Depends on scope of the project. Not EVERYTHING in JS is browser-specific. But yes, jQuery makes sense to use most of the time *just incase*, I just don't think we should be 100% relying on it.
Yeah, this kind of thing happened to me to in http://english.stackexchange.com/. It is a little off topic, you'd do best to post on webmasters. This is a question about a service, in this case the google webcrawler. Not a programming language.
You're not an asshole, and neither is the mod. StackExchange is exceedingly strict with their question asking policies, and for good reason. That being said, I'm not sure where the proper place for that question is. I probably would have put it in JS as well.
That looks pretty nifty, and a good way to deliver a consistant interface to users. God knows I have dealt with some pretty crappy JS kludges in real life. That said, the comments on that post make my brain hurt. &gt;Tore Julø16 Apr 2012+20 Can this element be styled? &gt;George Barnick16 Apr 2012+1 If it's not, this can go on my list of reasons I dislike Google Chrome, and all webkit browsers for that matter. AKA : Damnit, the free interfaces I am being given aren't perfect! You all suck! Edit : Assuming this can be overridden without having to do anything too fancy. Hmm...
If you're referring to this: &gt; [JSON 3](http://bestiejs.github.com/json3/) was not developed by the same person as [JSON 2](https://github.com/douglascrockford/JSON-js) and works quite differently. Then I agree, to some extent. --- All I was trying to point out was that the developer didn't make the claims of ownership [which ocatone asserted he did](http://www.reddit.com/r/javascript/comments/seb10/json_3/c4dep2e). JSON is an open standard, as is the specific JavaScript API that is being shimmed here, so nobody really "owns" any of this except the implementations. Calling this shim "JSON 3" communicates that it is a drop-in replacement/improvement for JSON 2, but yes it could also lead people to assume that it's the next version of the same project instead of a new project which does the same thing. However, I don't think that distinction is particularly important to most of the people who will be using these shims. It's critical to understand that neither of these libraries "are" JSON, they are only shims to provide older JavaScript implementations with JSON-handling APIs. Maybe you think that the name was chosen purposefully with nefarious intent. Taking a gander at [Kit Cambridge's](http://kitcambridge.github.com/) other work and writings, I doubt this, but if you have concerns you should send them his way. Anyway I was puzzled by the downvotes so I just wanted to make sure it was perfectly clear what I was saying and what I wasn't. Hopefully this helps.
This is a seo question. Stop being so self righteous and try webmasters exchange
How do I try webmaster's exchange using javascript?
In my opinion, it should be able to be styled. Nothing fancy, but background and foreground colors should be stylable. If not, a stop-propagation event should be made available so we can continue to use jQuery elements that *can* be styled to our liking while having a semantically-correct tag in the HTML. However, others brought up a good point: Date formatting. Will it always return dates in a specific format? If not (and even if yes), can we specify a display format? What about alternate calendars?
what do you mean overridden? If you don't like it, you don't have to override it, you just don't use it.
It looks like this library is now available.
It was my understanding that &lt; input type="date"&gt; was part of the HTML5 standard. I guess my thinking was "associate as much meta-data with your data as possible". And as Texaswithadollarsign mentioned, you might want to use a different style date (which may be covered by chrome, I am unsure), or some different calendar style. I need to go read the documentation more though, as I obviously have gaps in my knowledge.
Because http://www.reddit.com/r/javascript/comments/sb9zh/how_to_structure_a_large_scale_web_app/c4dj1po
Well its great for quick forms that you don't want to pull in libraries for. But the polish is what I wonder... A few things I often run up against are: datetime, style, date format, and of course working cross browser. Good start none the less.... But I think it will go the way of a select list. Hidden away behind rich selection constructs.
the cookie is already written by the login call in the php backend. I can control the login, but because its AJAX (it used to be flat page), now the page itself remains active, but the AJAX calls return Logged Out. I want to add a check to the Ajax.Request to see if the cookie is active and if not ensure clean logout of page and redirect to home instead of call the AJAX request
You've got a misunderstanding of #! links **edit** and I probably do too, read the next response- point is your question is irrelevant
So that makes Opera and Chrome. Anyone know when it'll land in Firefox or (plzplzplz) IE?
 toLowerCase() + ans +
I was excited with the idea to start, but in-browser? Javascirpt only? Yep.. lost me there. Even the javascript only stuff I could live with, but how would I code for node.js in-browser and then sync with a server so I can run the code? I have tried several in-browser IDE systems before and none of them work once you take servers, ssh keys, VPN systems and proxies into account. Good luck but I don't see this solving any of my problems. 
This will actually be a great teaching tool
Thank you :) Yes exactly, as far as I know that blog post claimed the paternity of this JS pattern, at least of its name. While esthetically similar to fluent interfaces, whose intent is just to provide method chaining for repetitive mutator calls, CallStream goes beyond and tries to decouple interface from implementation. I think your usage falls somewhat in the middle between Fluent and CallStream :)
I don't know, probably didn't got enough attention or just didn't spread...
standing ovation for your answer!
Still not working, I'm using a iPhone app so it may be the app and not the code
JSLint. 'nuff said, really.
&gt;tl;dr: Decide if you're teaching JavaScript Language, Basic Algorithms in JavaScript, or JavaScript in Web Browsers. Mixing them is just bad education. This is why I didn't actually start learning the Javascript language until about 2 years ago (5+ years after the classes that *taught* it). While what you're saying is harsh, it needs to be said. I went to a fairly prestigious tech school and we were taught in almost exactly the same way. 
But people still need to update their version of IE :-(
best way is to use javascript to set position:fixed via javascript if the box is below a certain offset. using javascript to calculate the position just hurts.
Down vote for linking to W3fools. While there are some problems with W3Schools the trollish nature of W3fools is as equally counter-productive.
Did he/she ask to be a better JS programmer? It get's the job done, on multiple browser - if you read Ops message carefully you see that he/she fails at griping the concept of what's a DOM function and what not. It'd be insane to shove pure JS down that poor human. Let him/her play with jQuery first, then go a level deeper. Not the other way around.
As a "practical" application of this, I'm trying to write a library that takes an object literal, and returns a Module Pattern for it, private variables and all. Example: var module = ModuleMe({ _local:"local variable", myFunc:function(){ console.log(_local); } }); module.myFunc(); // prints "local variable"; module._local; // returns undefined - it can't be accessed externally. Edit: I'm currently using the Function("bodyString") constructor, which isn't really much better than eval.
No, but in older versions of FF (&lt; 4) you can access local scope through `__parent__` property of the object. But if you need it you're probably doing something wrong.
Ahh, that changes things :) Thank you. I am all for Adobe Air/Mozilla Chromeless style applications.
What you need is a loop that repeats a task for every element in your array. There are two ways of doing this: 1) Standard JS way: for(var i=0;i&lt;INFwindowFree.length;i++) { INFwindowFree[i].close(); } 2) Fancier way (requires jQuery or another library that supports an each construct): $.each(INFwindowFree, function(index, value) { value.close(); }); EDIT: Fixed per x-skeww's correction
Thanks so much. I've sort of known for a while now that with this project I'm at a crossroads. My jQuery is nice, the javascript is super easy to read but I'm just not advanced enough at programming. So the crossroads is what do I devote my time to now? Learning to be a better programmer or getting my UI stuff down? Also, this is totally unrelated, but I feel really comfortable with jQuery. I'd much rather be using that. However, I haven't been successful at all in using jQuery with google's map API.
Throwing around down votes is the least that could be done for providing detrimental career advise. W3Schools has its problems. I would not recommend its JavaScript guide to anybody, but surprisingly enough their separate JavaScript reference is the best I have seen online. It is not as informative as the MDN pages for the same subjects, but its not harmful either. Its organization and conciseness are what make it superior. W3Fools makes valid points, but it accomplishes nothing. Its a troll. Sorry for my tone, but I do get frustrated when web technologies are often water-down for the least common denominator (LCD), or least competent developer. The technologies are not that hard to learn, so there is no excuse in not learning them if that your primary profession or area of interest.
I'm pretty sure you can do this with Function.call/Function.apply function foo(fun) { //you don't even need to use 'this' here this.bar="asdf"; fun.apply(this); } function bar() { console.log (this.bar); } foo(bar); // Output: "asdf"
A LINQ-like API can be easier to read then a mish-mash of seperate function calls. Especially if those calls are nested, as then your reading right-to-left, which is unnatural in English.
cute
Because .close() is not a member method of [Array.prototype](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/). When you create a new array, as with var foo = [1,2,3]; You create a new Array object that inherits from Array.prototype. You could, conceivably (but non wisely) augment this - foo.close = function() { this.forEach(function(item) { item.close(); }); }; in which case foo.close(); would syntactically do what you want it to do. But only for that instance of foo. If you overwrote it with a new value, e.g., var foo = [4,5,6]; it would lose that property. You could go a little further and augment Array's prototype object - instead of foo.close = function() { ... }, you would do: Array.prototype.close = function() { ... } ... But that is extremely dangerous, and you should never ever actually do it. It adds that method to any Array object out there, even Arrays that hold things that may not have a .close() member method.
Ahh, see that makes some sense to me. That's what I'd do in jQuery, didn't know I could do that in vanilla javascript.
 TypeError: Object [object DOMWindow] has no method 'bind' How about vanilla javascript? I'd hesitate to assume everybody uses jQuery, especially considering better options are available.
You need jQuery included in the page before you run that.
Just note, it will be jumpy, where JS can smooth scroll.
"$" is used by most frameworks. In fact many have stopped making that the default to avoid namespace collisions.
Perhaps you should learn javascript first, then take on a framework.
Yeah, I apologize for being pedantic. It just bothers me to see people get into JS and use a framework right away without understanding anything about JS. Also they usually choose a framework (you know which one) without ever evaluating the ecosystem of frameworks. I prefer competition in a tech ecosystem where jQuery has almost become ubiquitous. 
Thanks.
Array.forEach is only available in ECMAScript 1.6+; MDN has a [nice shiv for IE&lt;=8 versions](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach) that do not support it.
jQuery is the end all be all solution. 
All of the Module Pattern implementations I've seen in Javascript declare "var" to create private variables, that only the Module can read. What I would like to do is generate Modules dynamically, like so: var module = ModuleMe({ _local:"local variable", myFunc:function(){ console.log(_local); } }); module.myFunc(); // prints "local variable"; module._local; // returns undefined - it can't be accessed externally. However, there is no way I know, without eval(), to give a function a local variable of arbitrary names. So I was wondering if one could do dynamic scoping in Javascript instead. P.S: niloc132 above helped me come up with a Module Pattern implementation that does not need to declare "var". Only issue is syntactic sugar of "this._local" vs "_local". EDIT: Also just curious if dynamic scoping in JS was possible.
Pretty sure that's why I'm here smart guy. Thanks for the insight.