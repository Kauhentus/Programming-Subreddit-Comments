I don’t see what this has to do with ego? 
Huh, weird
Doesn't it depend on why they're learning it though? What's are the relative proportions of Javascript use? If they never plan to do anything web related with it then fine. But what if they come back and try to do web stuff later thinking they know JS inside out and figure that's good enough?
So what you're saying is a I can start writing programs for webassembly 
I read oredi of course. For that much of advantage does not make sense at all
Don't pay for education that doesn't give you any recognizable qualifications.
WOW the site is the coolest learning site I've ever seen. I thought it was a video but then I realized you can actually type on it. 
Agreed
Brb creating pipernet
React Native?
I'm all ears. 
You haven't even Googled. &amp;#x200B;
Capacitor https://capacitor.ionicframework.com
NICE ! I didn't even know about this...thank you!
I don't think so, it's an nmp package
Isn't Ionic Cordova too?
React Native makes mobile apps, not hybrid apps.
The option that you said you did not like is what I like the most: &amp;#x200B; \`\`\` function performAction() { return getString() .replace( /(non-trivial) regex/g, (match, p1) =&gt; transformString(p1) ); } \`\`\` \-or- \`\`\` const performAction = () =&gt; getString().replace( /(non-trivial) regex/g, (match, p1) =&gt; transformString(p1) ) \`\`\`
It depends on your learning style. FCC is read the lesson and do the exercise, while Udemy is watch the video and code along with it. Udemy is really just a marketplace for video lessons; there are both high and low quality courses to be found there. 
You have to be careful still. 150k enrollments means it’s likely several years old and even though they’ve updated the course in the last 6 months, that doesn’t mean most of the material is up to date. You don’t need to pay to learn vanilla JS. I’ve done a good 5 or 10 complete Udemy courses and the sites I linked are just as good for the basics, and I know they are high quality and modern JavaScript.
Looking at the course, it does seem like it would be a fine choice though, so feel free to go ahead and do that if you want. Then maybe look at the sites I linked to fill in any gaps or revise what you’ve learned. Revision is extremely important; it’s why I tend to do multiple courses on a single subject. Solidify the knowledge and get exposure to greater context.
Did the first four or five parts tonight, it’s really cool. Presentation is clear and I love that he mixes theory and immediate application. Looking forward to finishing the series.
Thanks for sharing this valuable information.
Just a guess: is it because you’re using sudo?
Look in to global vs local variables and how scope works. If you're defining Minefield in a function, then you won't be able to use it outside of that function.
Ooooooooo downer....so it's all cordova huh...
Pulled it out of my init function and wrote it as : var minefield = new Minefield(10,10,cvx,cxt). Still getting the same error, am I missing something?
If you have it globally and your scripts in the right order, it should work. Perhaps there's an issue with your Minefield constructor. Is that constructor global and referenced in the right order?
Would you mind giving it a quick look? https://github.com/SherbazHashmi/MinesweeperJS/blob/master/scripts/Model/Minefield.js
&gt; but direct manipulation of style properties via js is considered an antipattern. Well, yes, as a general rule, and if you understand the implications of manipulating class names of an element. Changing the class name of elements comes at a cost: Every time you change the classname of an element, all of the CSS for all of the child nodes of that element will need to be recomputed, which can be costly. If your element has 5-10 child nodes, this won't matter much, but if it has a few hundred or a few thousand, it may, in particular if you're dealing with slower devices (and styles other than `display`). In those cases, it might be prudent to manipulate the style directly, and rather use data attributes to store component state. 
Idk how I didn't see this. Thank you for the thoughtful response. It seems like you have uniquely strong habits when it comes to memory leaks. That makes you good at this. My point was that normal JS devs, of whom I interact with a lot and am one, are susceptible. Perhaps it is that most JS projects don't deal with huge amounts of objects or long runtimes, and rely on the invisible GC, and so bad habits emerge in the absence of negative feedback. Regardless, I don't think this makes a JS dev shit, tho most of us would certainly be shit at writing professional CPP out of the gate.
Idk how I didn't see this. Thank you for the thoughtful response. It seems like you have uniquely strong habits when it comes to memory leaks. That makes you good at this. My point was that normal JS devs, of whom I interact with a lot and am one, are susceptible. Perhaps it is that most JS projects don't deal with huge amounts of objects or long runtimes, and rely on the invisible GC, and so bad habits emerge in the absence of negative feedback. Regardless, I don't think this makes a JS dev shit, tho most of us would certainly be shit at writing professional CPP out of the gate.
From what I can see there, it looks fine. Maybe you want to just start debugging. Put breakpoints in your code or in the browser or even just put console logs in there to see what is going on.
Except when it forces you to follow one rule, and then complains about it breaking another one. I have 30 overrides over the airbnb style guide :(
Thanks, that’s my thought exactly like it’s so cheap and if the course is really good it might be worth it.
Thank you, kept going with debugging figured it out. It was just a matter of not understanding that methods within a class don't have the function keyword. 
Good job!
Do the docs suggest they should work? If so, contact Auth0
Hi, just one more question I should just follow "Javascript Algorithms And Data Structures Certification (300 hours)" on FCC right?
Hi, just one more question I should just follow "Javascript Algorithms And Data Structures Certification (300 hours)" on FCC right?
My formation was on C and C++, not JS. I learned JS on my own because I had to at this moment. I'm currently developing a multi-threaded game server in C++ for a unity game.
Scriptable? It’s an app in App Store that’s kinda like Shortcuts but it runs JS. You can trigger it via Siri or the ShareSheet. 
Have you tried using prettier for any real length of time? I ask that because I had basically the same opinion before I sat down and just used it for a while. The only advice I can give to those on the fence or doubting using prettier is to simply get over it, and try it out for a while. It is a very freeing thing, being able to not worry one iota about style. ...so much so that often times I don't even format my code carefully anymore and just do a quick save to 'snap' everything into place for me...its liberating, its wonderful. You get used to the formatting, and really (as someone who was ANAL about formatting) ....you get used to it, and its really just fine.
Ionic is Cordova but the people behind ionic were unhappy with cordova so they created capacitor as a possible alternative.
Didn't spend much reading code, but it looks like it loads and parses whole JSON at once?
Here are 4 options you can guess from: 1. string string 2. string object 3. object string 4. object object &amp;#x200B; Here's the answer (basically the whole explanation): [https://www.youtube.com/watch?v=ziRMpx2UfTk](https://www.youtube.com/watch?v=ziRMpx2UfTk)
Just change the quote option in the config if you don't agree with it?
Working on a library to create simple graphs. Need to fix its drawing algorithm, but at least works for simple graphs for now: [https://www.npmjs.com/package/reactjs-graphs](https://www.npmjs.com/package/reactjs-graphs)
Thanks to all that commented. I've marked it solved as I've found another approach that's working fine atm :)
Where it's necessary to use?
It does not execute as it has a syntax error.
Oops, updated the code. Something happened while copying it. 
Nowhere. It just increses maintanability and its easier to work with than normal CSS (skipping classess and selectors alltogether) so use it everywhere.
As a guy who's been using styled-components for the last 1.5 years...I honestly can't go back. Working with styled-components (or any of the competitors, I presume)...means you never have to even think about what to name your classes. It makes you realize how costly it is to manage your own class names, BEM/SMACSS/OOCSS/etc are just bandaids...and honestly all pretty bad compared to CSS-in-JS solutions like emotion or styled-components.
One pro for TF is that you can build models in one language (e.g. Python) and implement them in another (e.g. JS). It's pretty common to have a data science group develop a model in Python then pass it to an engineer to implement. TF makes that flow easier.
Why not use css modules? You can have gazzilion classes named wrapper. Then in webpack mangle css names to say 4 base64 characters.
It's not about simply worrying about class names conflicting. styled-components/etc *solve* so many issues in css...one of which lets you not even have to apply class names to *anything*...you literally don't even think about classes when using styled-components. There are far many other advantages to using styled-components/etc...but not ever having to apply class names is one of the HUGE ones.
Question related, If ai takes so much computing power, doing it in js doesn't make the browser "crash" while computing the values?
😂
Different strokes
The curriculum has been updated since I worked through it. If you’re looking to learn web dev just do it all, but you should learn A&amp;DS regardless... So yes!
😀
Ah, ok. Capriza then?
&gt; Working with styled-components (or any of the competitors, I presume)...means you never have to even think about what to name your classes. That's easy, name them after the JS class that renders that component. I use the following convention: - Use capital class names for components (like "soft" id, of which you can have multiple instances). - Use dash for namespaces. - Use leading dash for relative names that should be selected via a root, for example: Foo-Bar-Component .-SubComponent - Use lowercase names for "flags", "states" and "mixins", for ex. "-active", or "-disabled", or "standardBodyCopy".
Thing is you keep saying "not having to think about CSS class names ever" as if that's a problem for most of us. It honestly isn't.
[removed]
It isn't a problem until you realize a life without that problem.
Thats a lot of thinking about something someone who uses styled-components never has to devote any time to at all. ...and that is just ONE of the plethora of things that makes styled-components/etc a truly awesome tool
My company uses a proprietary front end framework that implements components in a way that's similar to styled components in react. The thing is, I still end up needing to use CSS sometimes to handle special cases. So it doesn't eliminate the need for CSS, it just reduces it.
Thats cool...we use styled-components at my company and basically the only time we have to use class names is if we want to tag something for analytics or testing suites to hook into.
Instead, think of it as not having to think about specificity or creating and adhering to conventions and class namespacing ever.
&gt; Styled Components sells itself as the CSS-in-JS library for people that *like* CSS I *hate* CSS... what should I use??
For anyone interested, the guys behind scrimba have developed a basically new language called Imba I believe who's rendering performance is so stupidly fast that it allows for the cool live editing features you have in this site. They put out a medium article or two about it as well.
Bootstrap?
I think the future of this area is more interesting than its present with constructed style sheets/adopted style sheets, shadow parts and CSS module imports in JavaScript. With all of those and shadow DOM, I suspect many of these things will be replaced by the platform in (relatively) short order. 
You'd benefit greatly from even just CSS modules.
Bootstrap 
Cool thank you, I’ll give that a go :)
Sure. I’m open to benefitting. But how?
It’s easy. Dunno. Of course in the wrong hands it’s a nightmare. Or patching existing code. But then none of this helps with existing bad code either. 
It’s a lot of thinking probably first time you read it. But styled components also requires learning. 
Typing CSS in JS is a huge problem right from the get go for me. I use Sass. 
Investing into any tool worth anything often takes time.
I don’t understand why you can’t accept that prettier doesn’t work for everyone? There is always more than one solution to a problem, trying to force someone into a technology doesn’t make that disappear or work for them any better. S: use it, it’s good T: no, it doesn’t work for me S: you’re stupid, use it because I think it’s better T: I don’t think it’s better because x S: use it, it’s good...
So then the argument about “thinking” is suddenly void huh. 
Actually. He started with personal attacks on the team that writes it, saying their egos wouldn’t let more options, so I responded by saying it was his ego. And if you look a the rest of his comments, it’s pretty clear that it is. I’m not saying it works for everyone, but all of his comments are about how his company’s code revolves around him and his opinions. So I’ll make my claim with the data I have. Simple. 
I have for just over a year. The only arguments were around disabling it because it gets in the way, formatting the code in a way that’s it’s less readable. I don’t care if someone’s code looks different, if it’s more expressive in that case... it’s using the best tool for the job and prettier is a generic tool.
And then be usable in approximately 5 years when we drop IE11 support!
Your description reminds me of the Practical Javascript course of Watchandcode 
Thanks I'll go Google for that
It was for me as well...Sass was my go to on projects for years. ...then I learned styled-components after switching to react...and honestly, it's just better. The only thing that really taught me that was experience with it tbh....I see a lot of people who are speaking out against it who obviously don't have experience using it. I think that has a lot to do with it.
Initial investment is not comparable to a constant and large tax (cognitively speaking) when you compare styled-components to anything else. Look...I get it, you do things a certain way and think its the better way. Fine...I get that...I did things that way for many years too...then I saw a different way, which I begrudgingly tried out. And now, I think it is the better way. YMMV...but this is my (and many others) mileage.
Let’s get to specifics. How do functions and variables look in CSS for styled-complements? Because honestly it looks like a nightmare. Especially for responsive content. 
Copy pasting a class name is not a “large constant tax”. This is honestly sounds like a parody opinion. 
Hmmm doesn’t seem to work for my code, any other suggestions?
I will be so glad when we can drop IE11. Around 6% of visitors to one of our main clients still use IE11, though, and so we're stuck handling it.
We operate a SaaS company that has been moving upmarket and targeting enterprise type clients. Many of them actually don’t care about IE11 but a couple big ones do and likely will until it is EOL. That means IE11 support for a good long while.
If web development is your eventual goal, you will need to spend a good amount of time with html/css if you don't already know those, but if JS is where your interest is right now it's fine to start there and come back to the first section later. My strongest advice is to be consistent with your learning and do it regularly, regardless of which course you choose. Doing one hour each 5 days per week is more productive than 5 hours in a single day each week. It really helps to keep your brain in that mode even if it's just a small amount per day.
There's no straightforward way to do this. Read [https://medium.com/statuscode/building-a-basic-web-service-to-display-your-medium-blog-posts-on-your-website-using-aws-api-48597b1771c5](https://medium.com/statuscode/building-a-basic-web-service-to-display-your-medium-blog-posts-on-your-website-using-aws-api-48597b1771c5) Important part: " To acquire an access token, make a form-encoded server-side POST request". Medium will tell users who have not logged in after 6 articles that they should create an account. Even if you would do this, doing all of this in the front-end is like giving someone else the keys to your account. [https://github.com/Medium/medium-api-docs#21-browser-based-authentication](https://github.com/Medium/medium-api-docs#21-browser-based-authentication) shows that you can only retrieve articles from a certain user (if you know their username), not just random articles on the site. There are some ways around it, and they either involve abusing Google to find random stuff on Medium for you, or scraping the website repeatedly and selecting stuff at random from that. The first requires again an API key for Google and more than 100 requests per day is going to cost you, the second probably quickly lands you a block from Medium itself.
All I can say is you don't know until you truly use it... And honestly that has been a continual theme throughout my career as a developer...most tools I often hated up front that I now know well and love (react being a prime example - "ugh...mix my code *and* html...ewww"). Just try it for a bit...you might change your mind (or maybe not)..but then at least you can speak more clearly about why using classes is better than styled components. So far all I see is basic hand waving 'oh its not so bad' 'i dont think its a problem'...I have tried my best to outline specific advantages. And believe me...this isn't even scratching the surface...like I said, you don't truly know it till you use it.
Try [/r/LearnJavascript](https://www.reddit.com/r/LearnJavascript) 
And where is the code?
Here is a fairly thorough example from our live production app right now, it doesn't explain some of what is going on here (I would have to write a blog post to cover everything going on here). ...but to serve as an *example of syntax* it works: import styled from 'styled-components'; import { upTo } from 'js/services/MediaQuery'; import { rowGap } from 'config/theme'; export default styled(({ align, ...rest }) =&gt; &lt;div {...rest} /&gt;)` display: grid; grid-template-columns: repeat(3, 1fr); grid-row-gap: ${rowGap}; justify-content: ${({align}) =&gt; align}; align-content: ${({align}) =&gt; align}; margin: 3rem 0; ${upTo('md')` grid-template-columns: repeat(2, 1fr); `}; `; Keep in mind this that without context this copy/paste of code does not tell you what is really great about styled-components overall...its just an example of syntax.
That's exactly the one I was looking for thanks
I feel bad for you guys...my company works on a new product and I don't even have to support IE at all. It's a much better life...I've been on the other side.
Are you able to put the style component information in a separate file? In every example it’s in the same file as my component code which I don’t love. 
The point with css modules is scoping the style definitions. You emulate a scope which is exactly what JSS does, for example. 
Couldn’t you call function2 inside function1?
Styled components only covers just components. Now many people don’t have the luxury to work with only one framework. And some people need to maintain styles for many usages including projects that abstain from JS completely. Css in js is not a complete webdev solution. But it will be very interesting to see as web components mature, where this will take us.
I guess you could use something like [this](https://caolan.github.io/async/docs.html#parallel)
Figure out where the slowest part of function1 is and stick function2 there. My understanding is there isn't great multi-threading support in vanilla js.
This is correct...all of the arguments I made are within the context of using it with react (or other frameworks that support a variant of jxs that styled-components or another similar tool supports). But that said, within their context of use...they are great and IMO should be favored over plain CSS (compiled or not). That is my ultimate point.
You'll have better luck with this in r/learnjavascript. &amp;#x200B;
`.forEach(f)` if passings args isn’t harmful
So i've only done a cursory look at some CiJ solutions, but what are the inline functions for `justify-content` and `align-content` doing? Is it just late binding or is there something more complex happening?
Your CSS: .thing {} Your JS (React as example): import styles from './my-css.css'; const Component = () =&gt; &lt;div className={styles.thing} /&gt;; When Webpack imports the CSS, it runs it through CSS loader's CSS modules which mangles the output name. This means essentially that each of your CSS files has its own namespace. So `.thing` in your CSS and JS file really becomes something like `.thing_sfsg7f8ov` in the output, avoiding class name collisions, even if you've used a class called "thing" in a hundred other CSS files / components.
[Async/await](https://javascript.info/async-await)
If you don’t care about support in ancient browsers you could use [async functions](https://caniuse.com/#feat=async-functions)
Yes...as an example you can do something like this...in one file you could have an exported `css` style: import styled from 'styled-components'; export default css` border: 1px solid red; border-radius: 0.5rem; ` ...and then in another file, import and use it (assuming we named it `red-container.js` in the same folder: import redContainerStyle from './red-container' export default styled.div` font-weight: bold; ${redContainerStyle}; ` The common examples you see usually are designed to be concise and not show the various ways you can compose your logic.
With skip selectors i guess you mean styled-components?
Costly? BEM is incredibly easy. It's the easiest thing about our app. 
It costs more than you think and not having to think at all about it is a huge advantage. As 'incredibly easy' as you might think it is (or may actually be) ...it does have a cognitive cost to it...and styled-components completely eliminates that cost.
Those are standard css properties. https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
No I mean why the functions there, why not just return the align variable?
Since your first option doesn't work, I'm guessing function 1 blocks the main thread while it executes. I'm not sure how your workaround would help in that regard, since the UI would be completely frozen while the function executes and events would just get queued until they can be handled properly. \*If\* your functions are synchronous, your best option is probably to leverage \[Web Workers\]([https://developer.mozilla.org/en-US/docs/Web/API/Web\_Workers\_API/Using\_web\_workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)). Another option would be to cut the operation of both functions into smaller chunks that can be interceded, so that they execute concurrently. However, in that case, the total execution time will stay the same. Could you share the code of function 1 and 2? What kind of operation do they compute?
Or just use async/await.
Because the actual alignment is being provided via the props passed into the component...ie: &lt;Container align="center" /&gt;
What are the functions doing? Is it possible to move their calculations to a [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)?
Add a promise polyfill and wrap your functions with a promise object. You can then run the two functions asynchronously and await their result independently with .then or wait for both using Promise.all You can find a polyfill on the MDN website, you can alternatively implement Bluebird.js or another Promise lib.
My answer works under the hypothesis that both functions are purely synchronous, in which case async/await wouldn't help.
Hi /u/real_samuraijack, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/HodaNorouznezhad, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/codewizard05, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/vospit, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Historical_Fact, please refrain from personal attacks. Thanks.
You can make synchronous functions asynchronous by wrapping them in a promise though right? ``` async function foo() { return new Promise((resolve, reject) =&gt; { resolve(bar); } } ```
Nope. JS in browsers is single-threaded, so you can't run functions in parallel. Someone mentioned async/await, but async functions are about something completely different (if I understood OP correctly). If you need some lengthy tasks running in the background, you can use [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) though.
The technique i think you are referring to is called lazy loading. There is a multitude of ways to implement it in react, from ComponentDidLoad callbacks to server-side lazy fetching, just google lazy loading in react and you will be on your way in no time!
No, unfortunately you can't turn a synchronous function asynchronous by wrapping it inside of a Promise. The computation still needs to execute on the main thread, and everything else will be blocked while it executes. Take the following function, for example: ``` async function foo() { while (true) {} } ``` As soon as the body of the function is executed, your page will freeze and no other computation will be executed in parallel.
Good point! Updated
oh okay so a function there is receiving the props from the component. Doesn't that mix presentation and styling to a crazy degree? Do you ever run into issues with prop proliferation where your components will take tens of props due to styling changes?
I 100% disagree, I think the shadow dom a terrible syntax(and has been extremely unperformant, maybe that will get fixed maybe not) and css in js solutions have made it unnecessary for scoping. The nicest thing about css in js is that you can key css of component props, which is more of a hassle otherwise cause you gotta basically do classname swaps in non css in js solutions. So I see more people moving to it, not less, but we will see. 
Nice I’m going to try this. Im new to react and been learning things piece by piece. Thanks for the example!
Thanks! I think it’s generally the hard part to get started and the rest will follow. 
What if you put the loop inside the promise?
setTimeout
Prettier enforces things you can't change, which makes me indignant and comes off a little offensive. It's none of their business what I want my code to look like and I don't take well to people enforcing their opinions heavily in their tools. If they don't want to as configurable option for something, then either don't enforce it or allow it to be turned off. But just blanket saying "this is how all JavaScript should look because we say so".... Nah
Okay! I really enjoyed working with material-ui and experience with how their JSS implementation. Allows some very poweful theming and composition which i guess you do miss out on using separated CSS. That what excites me the most about CSS in js.
After switching away from it, I have found that it costed less than I thought and losing the features of CSS was much more costly than I thought.
Lol, everything has a cost. But it costs less than YOU think. A simple naming convention means you DO NOT have to think about it. I'm guessing you've never done it right or been on a team that did it right? You're not going to be able to convince me CSS in JS is not the absolute dumbest trend in JS for the past decade. I've tried it, used more than one implementation, and it's trying to solve a problems that don't exist. I'm the lead dev at our company. When we hire a dev, they struggle with the concept for maybe a couple weeks as they are ramping up, learning our ecosystem. Then when it clicks, you get to turn off your brain and it just works. Classes are powerful and easy and native. Why in the world would you want to fuck with styles in your code? I mean, if you really want me to list out all the reasons why CSS in JS is ass backwards, let me know which implementation you use and I'll write out 10 reasons why it's STILL a step backwards. 
`async` functions are already wrapped inside of a promise by default, so it wouldn't make a difference. [You can test it inside of your browser's console.](https://i.imgur.com/ugHIkEl.png) I'd recommend reading about JavaScript's single-threaded paradigm. I don't know any good resource on the subject but I expect Google can help you in that regard. 
Yeah, it's 5-6% (most from Windows 7 hold-outs)
&gt; Doesn't that mix presentation and implementation to a crazy degree? Do you ever run into issues with prop proliferation where your components will take dozens of props due to styling changes? &gt; I've always tried to stick with having a single prop that receives styles and leave the rest of props as implementation (for the most part, obviously there is some crossover necessary), and I've found that letting styles bleed into props causes an explosion in the number of props as well as complicated interplay between them. Does CIJ help solve that or make it a "non-issue" (similar to how JSX was consitered to be mixing HTML and JS inappropriately, but it ended up being a non-issue)? Yes, I generally agree. In all honesty, that example I gave *was from a production app* but slightly contrived and modified to show how you could pass in a property from the component props...this is the *actual* implementation we have on our app: import styled from 'styled-components'; import { upTo } from 'js/services/MediaQuery'; import { rowGap } from 'config/theme'; export default styled.div` display: grid; grid-template-columns: repeat(3, 1fr); grid-row-gap: ${rowGap}; margin: 3rem 0; ${upTo('md')` grid-template-columns: repeat(2, 1fr); `}; `; ...so in summary, yes I also tend to keep my styles out of the props. I also do things similar to you concerning implementation. For example lets say I wanted to have a tooltip component that I could declare as floating top/left/bottom/right - that is a property I would have supplied through props (but with some sort of default as well)...and then leave the implementation of *how to float it* within the callback inside of the styled component. 
SC is okay, but there are several things about it I don’t like. First, it’s impossible to modify the render method of a SC component without using something like the css prop (which loses you some of the SC benefits like handling refs). I sometimes want my core components to do things in render other than styling, and that’s just not possible with SC without composing multiple components The prop whitelist is annoying, and sometimes prop names will get to the DOM that you don’t want to. The inheritance is clunky and provides too many ways to do one thing, how do you pass defaults to a SC component? You can use attrs or defaultProps (but then you have to implement defaultProps inheritance yourself). These are all things I have to think about with SC that I don’t when using css modules, not having to think about class names comes at the expense of having to move prop logic (which imho belongs in your render) to your css. 
you can but the last code only will be execute
I might get persecuted for this but I'm a firmly against CSS-in-JS. I think it puts us in a very tough situation where you think about both CSS &amp; JS within the same context. CSS is for styling (duh!). JS is for behaviour. These things should be as independent as possible. In our projects, there's multiple times where we have components in both CSS and JS without any overlap. Think about two components that share a lot of their styling but have completely different interaction behaviours. Ever since we started thinking about CSS components vs JS components - complexity became manageable. You can have different JS components all have the same CSS component. Another problem I see in CSSinJS is constant wrapper components designed only to do markup (e.g: grids, gutters etc). These should be in CSS. Finding a React component called `&lt;Layout columns=5&gt;{...props.children}&lt;/Layout&gt;` just feels like an anti-pattern to me. Compare that to `&lt;div class="grid grid-5"&gt;{...props.children}&lt;/div&gt;`. The latter tells us that CSS is handling our column behaviour while the former hides both JS behaviour AND CSS. If I've never interacted with `&lt;Layout&gt;`, I have to always open that component before I pass anything inside. That's not to say CSSinJS doesn't do some good things. Naming is definitely something that it improves on but I think this is a problem that can be solved in much cleaner ways than introducing an anti-pattern.
Look for infinite scroll. A poor man’s simple implementation would be attaching the component to a scroll event, and updating the state accordingly (and debounced/throttled).
&gt; Lol, everything has a cost. But it costs less than YOU think. A simple naming convention means you DO NOT have to think about it. I'm guessing you've never done it right or been on a team that did it right? Something you have to think about &gt; something you don't have to think about. Period. Also...lets leave out the ad hominems please. &gt; I'm the lead dev at our company. When we hire a dev, they struggle with the concept for maybe a couple weeks as they are ramping up, learning our ecosystem. Then when it clicks, you get to turn off your brain and it just works. Classes are powerful and easy and native. I also am the lead...and the same is true here as it is anywhere. However the cost of understand our naming scheme or worrying about interoperability/conflicts with other code or components never has to come into thought...that is the difference. It's actually a benefit for new hires here because we worry less about them messing up existing stuff. &gt; Why in the world would you want to fuck with styles in your code? I mean, if you really want me to list out all the reasons why CSS in JS is ass backwards, let me know which implementation you use and I'll write out 10 reasons why it's STILL a step backwards. All I can say is try it before you knock it...and when I say try it...I mean build a project with it (small or otherwise). That will give you a more thorough ground to make reasonable arguments as to why standard CSS with classes/etc is better.
You're actually still writing .net code, the same which would be executed when starting a .net executable, but this time it's beeing interpreted by Mono which is compiled to WebAssembly.
These are valid critiques...and many (especially the prop whitelist) I have personally found annoying. That said, I weigh these quirks against the benefits and I still choose styled components any day of the week over compiled css with manually managed class names/etc.
What features of CSS did you lose?
[https://github.com/bvaughn/react-window](https://github.com/bvaughn/react-window) &amp;#x200B;
Also remember styled.div is just a normal function, so instead of passing it a template literal you can pass it an object (like the result of css), a function that takes props as argument, etc.
That's cool, thanks for the examples! I'm planning on trying to make an attempt at using CIJ in our systems soon, and I'm trying to soak up as much info on pain points and benefits as I can before I start. A Proof of concept normally doesn't tell you a ton, so I really like these examples from real apps which are always more messy and complex and ugly than the ideal versions you'd work with in a POC or while learning.
Applying css to a class conditionally based on classes on the parent element. Try applying a transition to a table without that, so much boilerplate. But honestly, the point was more naming collisions really aren't that costly, BEM isn't that costly.
I see, interesting, thanks for the example. But I use the same class names in JS and CSS including the namespace, so I have no collisions. 
I do really like JSS and its plugin architecture, wish they had a better syntax for template literals though, I like that about sc.
There's two answers here: the direct one and the real one. The direct answer is that you absolutely can do what you want to do, and it's not hard. You'd probably want to do this inside function1, but to do it inside the onclick itself you'd just do: onclick="setTimeout(function1);function2();" However, the problem with doing that is if you do that pattern too often, it will become hard to reason with your code. You won't easily be able to follow the flow of your program, because you'll have all these `setTimeout` calls breaking up the flow. So, if function1 is an AJAX call or anything else long-running, doing the `setTimetout` approach is fine (and in fact you don't even need a `setTimeout` in that case, as you have a promise from your AJAX call). But otherwise you're better off just doing: onclick="function2();function1();" because it's easier to understand, and truly good programming is code that is maintainable for a long time, not whatever is quick and clever.
This 100%. If you had to ask me what was the best thing about frontend in the past few years since React I would say the entire CSS in JS movement and most notably styled components. Styling, theming, and extending those styles is so much easier. 
Don’t do frontend dev
Ah...I see...well the benefits gained from styled-components are far more than just avoidance of naming collisions... That said, the issue you point out concerning child components is one I have run into as well. For those rare instances (in my experience) that I needed such behavior and couldn't solve it in another way, you could just tag the component with a class name and use it as a normal nested class. I guess thats one small deficiency/quirk that requires fallback to using class name...that said, I think all of the advantages gained far outweigh having to know a few small quirks/issues. Especially when you consider how many CSS quirks are *solved* via styled-components.
Sure, but you're having to maintain a load of mental overhead, and you'll have to teach this arcane naming convention to anyone you onboard into your project. Things like CSS modules exist for a reason.
Eh, there's still a lot of fun to be had with JS to make up for how tedious CSS can be
It's amazing how apparently little people know about asynchronous JS. 
I will eat a 7 year old hat that's been sitting in my closet if I'm wrong after 5 years time but here we go.... I think this is a fad that's going to taper out very quickly as soon as Microsoft drops support for IE. IE is the only thing holding back most developers from truly using how powerful CSS is now. Separation of concerns is a good thing and if you actually take the time to learn the mechanics of specificity and how to conditionally target elements you don't reeeally have to get lost in too many class names. I would much prefer the capabilities of CSS be expanded further rather than mucking about in more javascript, where really, javascript should remain focused on handling data and behavior as more of it moves to the front-end. 
If you work on a big enough team then you might be alone to avoid dealing with css 
You make some good points, I think some of that can be solved by adhering to good conventions. I like to only render one HTML element per component whenever possible for presentational components; then I have some business logic components that compose on those presentational components and often have state.
Progressive Web Apps (PWAs)
SC interpolates a component classname from within the template literals and replaces &amp; for the current component classname, so I’m pretty sure you can use `${ParentComponent} &gt; &amp;` and it should work.
The event loop can be confusing when you're not used to it ¯\\\_(ツ)\_/¯
ah...thats correct...good catch.
might be easier to hit reddit's API than medium's. scrape a few web dev subs and you're bound to find a handful of posts pointing to medium.com.
I just don't understand the intelligence behind these decisions "hey this one browser increases the cost of development for EVERYTHING that we do, but let's keep using it for EVERYTHING because we've done it for so long!" Like dude, just switch to Firefox ESR and everything will work just fine as before, with reduced cost of development for everything new that is to come. Geez.
Honestly they work great. Your styling is a function of your props and you can easily drop in constants as theme variables. Not a nightmare at all. Emotion is even better as you can interpolate entire css blocks. 
But css-in-js is still just css. All it does is inject your css into the page dynamically, and with a static export (pretender) or an SSR setup it’s no different to a css pre-processor like sass or postcss. With sass, less, etc you’re writing styles in a pseudo language that gets compiled to css, with CSS-in-JS you write in both JS and CSS which gets compiled to CSS.
I'm fairly proficient with css and haven't run into these kinds of oroblems. On a huge project I've run into maybe 2-3 times I had an accidental conflict with specificity? Though on the other hand I've been tempted to do styling with JS...js makes composition so easy.
I do also use SC and CSS-in-JS in general. I think it’s silly how many people dislike these but will happily use a preprocessor when they’re really the same thing, just with some extra steps..
I would certainly appreciate if our more of our clients took that mentality, but if you have even a single 100k+/year client that requires that support you can have at least 1 additionally developer year of time you can add to your team which will more than sufficiently cover the cost of that compatibility. It took about a week to get a solid transpilation/polyfill setup for our whole application to make separate bundles for IE11. A browserstack subscription is a few hundred dollars a year, and for a year worth of development well probably spend another week or 2 making doing additional testing and fixes for IE11.
In fact there’s an example of this in the docs to [style based on parent hover](https://www.styled-components.com/docs/advanced#referring-to-other-components) 
It starts out easy, sure. The thing is that conventions around naming are impossible to reliably enforce. Once scaled and at a certain maturity, every project will hit specificity problems or naming inconsistencies. Patterns like BEM, OOCSS only provide guidelines. CSS in JS eliminates the problem altogether (not to say that it’s without other issues)
I agree wholeheartedly. Also, I think appearance should always be as declarative as possible. Even some behavior, when strictly related to appearance (such as a button being pressed) should be represented in a declarative way. Which is why React doesn't really click for me. React mixes declarative with imperative code and it bothers me so much.
Ah I see. Thanks.
Note that you don’t have to skip classes and selectors. You can use something like SC to scope your css and then have all the css inside named classes if you want. Then you can consume them through something like `&lt;StyledComponent className=“blue” /&gt;` which will match your “blue” classname from the styled component definition but scope it to .sc-randomid so there’s no clashes with other “blue” classes. It’s just css and js, you can figure out a convention that works for you.
try this : function3(){ setTimeout(function1,0); setTimeout(function2,0); } onclick="function3();" Cheers ;) &amp;#x200B;
AFAIK there is no multi threading support in the browser. You can use a promise or a time-out to allow the DOM to update in the middle. But yeah it’s basically single thread.
I am also a proficient css dev and totally agree. I try to use BEM but it is difficult to enforce on complex apps with big teams and to really know what classes are not being used anymore, etc. I also use CSS in JS **when I have to** for simplicity (and composition) and love the fact that you know exactly what you are using. That said, CSS in JS is just CSS (will be a style elem in the DOM) written or imported in the JS module, I don't see the issue. In my experience, modularity is the greatest feature CSS in JS can give us, where you no longer have to worry about where the styles are or if there will be conflicts (assuming it is used correctly). I would love if vscode had a plugging to quickly identify the classes being used across JS files, if there are conflicts or don't exist, etc. And enforced it by throwing errors or warnings.
What’s bad about the syntax? It’s literally `element.attachShadow({ mode: 'open' });` and with the constricted style sheet syntax, ``` import sheet from 'path/to/sheet.css'; element.shadowRoot.adoptedStyleSheets = [ sheet ]; ``` If you mean the custom element syntax is terrible, then you must hate React and Angular too, yeah?
Because there are no polyfills or anything. 😉
I think what you are looking for is setTimeout(); but if function 2 depends on function 1 updating some variables then avoid timeouts. setTimeout(); will simulate multi threading. But AFAIK JavaScript in the browser is single threaded. The way it is simulated is by giving a slice of time to each function. Rather than two run in actual parallel. Moreover if you care about browser compatibility and supporting older browsers setTimeout(); should be okay to use. Another option is having both function use promises. Again it’s not actual multi threading, it is also simulated. But if you describe what functions 1 and 2 do, we can help a lot more.
When you want automatic 100% coverage of your CSS rules on a page load
100% agreed. I can't help but feel like this type of "solution" was designed by hardcore Javascript engineers who don't really understand CSS. CSS is a completely different animal than any other programming language, so if you try to reason about it the same way as other languages, you're going to end up with bad practices. The simplest example I can think of is engineers who try to "scope" CSS to avoid "collisions." Hell, Angular 2 has this built right in as a "feature," and it incentivizes either writing WET CSS or doing wild shit like you described and building Javascript components for styling, which is backwards as hell. Javascript engineers just need to stop neglecting CSS and learn how to use it properly. Come to grips with specificity, adopt a good naming pattern like BEM, and learn how to write purpose-built, flexible, reusable classes. 
Maybe I'm not understanding. What exactly is the point of CSS-in-JS? 
First of all, I doubt you'll get much persecution for liking vanilla CSS. It's not exactly an unpopular opinion and is a completely reasonable stance. However, I'd disagree that thinking about CSS and JS within the same context is bad. I understand the rational of wanting to separate the presentation from the semantics, but you can still do that with CSS in JS. You can create stylesheets ahead of time and attach them to different components. You can use object spread to share styles. Sure, you may see that as an antipattern, as it "hides both JS behaviour AND CSS", but that's precisely what I want. Information hiding is the bedrock of program composition. I don't want to know how the CSS is done in the Layout component and I don't want to be able to break it by changing some selector rules in a completely different component. Furthermore, when I *do* want to think about CSS and JS in the same context, say animations, I basically have to reinvent CSS in JS. I've been writing a lot of state machines recently that essentially animate div, wait, animate a different div, wait, etc. (separate divs so keyframes don't work). The way I manage this is a stateful component wrapped around a functional component whose styles are calculated by its props. If I were to do this with normal, non CSS in JS, I'd have to either create new classes for every single animation state or mount styles on the object with CSSOM, which is what CSS in JS is doing in a far better, far more performant way.
The functions don't rely on each other so I guess set time out is the way forward. I just want to fire the two at once (ish, I understand they don't literally fire at once), I just don't want to wait until function1 is done before starting function2. To give some context, I'm working inside a google sheets sidebar ui. As per my initial post, having a button hide and a new button appear makes the whole thing twice as fast (because I'm not waiting for function1) but now I want to add 15 or so functions (due to script timeouts set by Google I want to fire off several similar functions - it works well). I don't think Google scripts is on the latest JS release so maybe another function containing a series of settimeouts is the way to go..... 
&gt; I will eat a 7 year old hat that's been sitting in my closet if I'm wrong after 5 years time but here we go Be prepared to eat your hat
Yes, it’s at runtime. Styles can sometimes be optimized at compile time using Babel plugins and outputted as CSS, but often it’s just JS that injects style tags into the page and generated class names. I use it with React as it works very well in component-based architectures, and you have the entire power of JS so variables, functions, etc. are trivial to apply. Some libraries even use template literals to allow you to write pretty much 100% valid CSS directly in your JS file. 
Isnt the looking up of the Layout component not the same as me having to lookup what grid-5 does? 
If you have to support multiple themes, it's infinitely easier to with css in js
I might be misunderstanding what these solutions actually do, because I've never used one, but by the sound of it, this just strikes me as so backwards. How many CSS rules are you rewriting like a million times just for the convenience of not having to come up with class names? How is this not completely antithetical to the most basic best practices? And honestly, if you're having trouble naming CSS classes in the first place I can't help but feel like you must be doing something wrong. 
It's true, but if you use SCSS or other preprocessors you can do that as well (perhaps not as easily, but using variables for values would work for most). And as far as I can tell, you lose extensibility with CSS in JS. For example, using mixins, functions, etc. for common values is not as easy, is it?
Totally missed 'hat' the first time I read your comment. Made me lol I agree with you 100%. CSS-in-JS, just seems to be giving you rope to ultimately hang yourself with.
It’s hard to answer without knowing what you’re trying to do :)
There’s no single CSS-in-JS API so I’ll use styled components as an example as it’s the most popular, but they all do similar things. What SC does is it provides a way to pass in css as a JavaScript template literal (a convenience around strings with line breaks and interpolated JS code) That template CSS then gets compiled in runtime (there’s some performance optimisations to scale to lots of components like hashing the css rules and using a global cache where possible, and flattening interpolations) to plain old CSS. Most libraries use stylis for the actual CSS preprocessing as it does browser prefixing, nested css and scoping. Then the compiled CSS gets injected into a &lt;style&gt; tag. Everything can actually be prerendered as part of a static export with frameworks like Gatsby, Next, etc or just hand rolled SSR so that the initial page load already includes the compiled css. Main benefits include scoped css (similar to css modules), interpolation of JS into CSS and, for some people, having the css co-located with the component.
If you store your styles as objects, you can easily extend them. This also solves the less of mix-ins Conditional styles based on props also removes some of the need to extend css.
I am the third Wiseman of CSS proficiency and I concur. If specificity/bem headache is what's championing this CSS-in-JS crusade, this problem is easily solved with CSS modules. Then you can have the luxury of separate concerns and write meaningful class names without worry. Where .Success in a LoginForm automagically becomes .LoginForm-Success because that component imported that style. Then it's separate from the .Success in a PaymentForm component but if you really need shared styles, you're free to use a preprocessor with mixins or includes. There is way more sanity in this approach imo because then your components aren't littered with theme junk. Also, your head isn't jumping between camelCase and kebab-case keys (which CSS must eventually resolve to). 
CSS doesn't *have* "issues". It's designed the way it is for a reason. If you think that CSS needs to be "fixed," I can't help but feel like you just haven't taken the time to learn how to use it properly. Imagine someone telling you they "fixed" Javascript by completely eliminating the need to write or name functions. That is about how I'm feeling reading this. There is a *reason* classes exist in CSS, and they should not correspond 1:1 with Javascript components. 
I feel like most of the criticisms against CSS-in-JS come from a lot of people who haven't spent a lot of time using it. This is like how React is often perceived, with it's "mixing of JS and HTML". All I gotta say is, try it out for a non-trivial project and see how you like it. That's not to say that I don't think criticisms are legitimate, but it does sound like most of the criticisms are levelled by people who are considering adopting it, not people who've used it extensively.
It makes supporting multiple themes infinitely easier than any of the other options
There is no way to help without knowing what toggleDrawer does
or your teammates end up despising you.
Basically I’ve made a JavaScript that acts as a supreme bot, I need to put that code into an app or extension, instead of just using the iOS shortcuts, because when I sell it people can copy and paste my own code and sell it to others...
Unless `this.toggleDrawer` is supposed to be partially applied, return the actual callback, it is being invoked when rendering, before you actually click the button. I'm guessing that's not the case and not what you want. So you should change it to `onClick={() =&gt; this.toggleDrawer(...)}`
The Tensorflow library is extremely syntactically similar to NumPy with respect to low level linear algebra operations, so I'd back it as the better thing to learn right now.
I might have misinterpreted what was going on here, 3 pages deep of back and forth haha. If I did, I apologize. 
I guess the good thing is... it’s a fad, like all things JS. Enough people will get bored of the less than ideal output over time. 
Why would you possibly be persecuted for espousing the de facto standard worldview? This is like /r/unpopularopinion where people are just sharing conservative, therefore long-held and extremely popular, opinions.
Yeah, that's probably right. I'm biased, cos at worked we use material UI and boy, the grid is so broken there (it uses css in he, but it's my only experience with it).
A generator function might allow you to do this asynchronously without adding a web worker but I think it would take a lot longer.
Css newbie here. Ive got a lot of questions... Lets say you want a specific style in a button inside a “LoginForm”. Cant you just annotate the form wrapping element with a #login-form property, then declare your button as #login-form .button ? How can you even name clash like that? Why “css methodologies” dont use the nesting properties of CSS and instead rely on ugly concatenation of strings on classnames? I mean, the only big reason I really see for css modules and css-in-js is “css tree shaking”, which isnt really a big performance issue in most projects. And you trade de performance gains from having a cleaner stylesheet with a loading overhead. I am really failing to get it...
So... it seems like a scraper for you to buy limited product? I think I get what you mean by shortcuts, it’s a shortcut to a webpage, correct? So it appears on the home screen like an app would. In that case, I’m not sure about if it’ll be a good scraper if all the scraping is done on the phone itself. You might need some kind of server architecture. (So it can scrape 24/7) Then you can have an iOS client to notify you. You can develop iOS apps with JavaScript using React Native if that what you’re looking for. There’s a framework called Expo that makes the whole process easier. https://expo.io
Hi /u/keven33, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
No worries. I’m just trying to find out what people’s actual problem with the tool are to help if I can. He came out swinging against the tool authors, so I called him on it. Cheers!
Hi /u/horcrux_dec, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I actually mean the syntax for when you need to penetrate the shadow dom with cash(host element syntax) which works differently on different browsers. 
&gt; Main benefits include scoped css (similar to css modules), interpolation of JS into CSS and, for some people, having the css co-located with the component. Gotcha, this is more or less what I suspected. I have to be honest, every time I hear someone talk about "scoping" CSS it just makes me cringe. CSS shouldn't be scoped. I feel like software engineers really need to come to grips with *what CSS fundamentally is* instead of trying to reason about it like it's a programming language. Working in the "global scope" with CSS is what allows classes to be layered together and flexibly reused so you can write DRY code instead of repeating the same sets of CSS rules a million times throughout your application. 
&gt;Another problem I see in CSSinJS is constant wrapper components designed only to do markup (e.g: grids, gutters etc). These should be in CSS. Finding a React component called &lt;Layout columns=5&gt;{...props.children}&lt;/Layout&gt; just feels like an anti-pattern to me. Compare that to &lt;div class="grid grid-5"&gt;{...props.children}&lt;/div&gt;. The latter tells us that CSS is handling our column behaviour while the former hides both JS behaviour AND CSS. Emotion and styled-components both have a feature which allow you to do such a thing, and I use it all the time. You can create composable, reusable bits of styling with `css`, then apply them to any element with the `css` prop. const grid = css` display: grid; grid-gap: 15px; ` const grid5 = css` grid-template-columns: repeat(1fr, 5); ` &lt;div css={[grid, grid5]}&gt;{props.children}&lt;/div&gt; This gives you the named benefit of knowing it's just CSS being hidden away, among others, like being able to leverage editor tooling to know if its unused or not, or to rename it project-wide. It's actually quite lovely ✨ I think the main issue is that your point only primarily argues against the `styled\`...\`` paradigm, which, while popular, isn't the only way of doing things. I'd actually expect people to switch to using the `css` prop more often, with the reasoning you've presented here. If you haven't, try it out and see if you like it any better.
I've seen people call those who question CSS-in-JS "Luddites" FFS. Maybe it's just egocentric React devs (not surprising) but there's tons of pushback against vanilla CSS, which IME appears to be usually written by people who aren't really experienced in big CSS projects but wanna turn to another esoteric library to fix their own lack of critical thinking. &amp;#x200B; Don't believe me? Enjoy: [https://www.reddit.com/r/reactjs/comments/a5yk4j/sunil\_pais\_response\_to\_how\_does\_writing\_css\_in\_js/ebquu4i/](https://www.reddit.com/r/reactjs/comments/a5yk4j/sunil_pais_response_to_how_does_writing_css_in_js/ebquu4i/)
For most companies 100k in revenue won't even come close to covering the costs of a year of developer time. 
You can just write styled.div in this example. Props are always passed onto the element, eliminating the rest param spread.
You misspell length twice at the beginning and you need to interpolate to create the string you're trying to create in your loops.
No polyfilling for CSS though.
Not touching the entire concept with a 10 foot pole until I need to.
1. It's `musicians.length` not ".lenght". Same for instruments; 2. You didn't create the empty array to hold the sentenced. (Do it inside the function); 3. I don't think you should have a nested loop, but rather just concatenate the first index of instrument to the first of musicians, second to second and so on. 4. `output` is not assigned correctly, it will throw an error. You should return a string `output = musicians [i] + ' plays the ' + instruments [0]`, or use ES6 template literals; 5. push output to the empty array; 6. return the empty array; 7. the declaration of `y` should be inside the function.
Actually the spread operator is required. If the `align` property is not removed then it is applied to the underlying `div` and creates an error.
That’s odd, never seen that happen before. You’ve had to do this for all components? 🤔
With styled components if you have props applied to the underlying element that do not belong there it will produce an error. This goes for the `align` property for `div`.
Either way if these are long functions they shouldn't be run synchronously on the main thread. I don't disagree with web workers but that seems like a lot of overhead for a single use case (unless modularity can be taken advantage of). Why not wrap each function in a promise that resolves once it completes and use a promise all to execute them "simultaneously"
I feel like the reason we are using CSS in JS is because CSS still kinda sucks in some ways, especially in regards to specificity, reusability, and being able to parameterize style. I wouldn't be surprised if CSS becomes an "assembly" for styling eventually, with some saner language on top of it implementing what people actually need.
try this: npm cache clean or this: [https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package](https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package)
not true. the *event stack* is single threaded. the language itself has never been.
I think CSS modules make things harder to reuse. They are great for local styling but if you want styles that'll be reused across whole app you still end up turning them into components instead and then styled-components or emotion make things faster. 
Nice one! I had forgotten that non-strict mode coerces `this` to an object.
It's bad idea to make any style that is applied only when nested in some specific ID. That ruins the reusability and as you said leads to many leftover styles polluting the stylesheet over time.
Code in promises still runs synchronously on the main thread. You won't achieve parallelism with either promises or async/await on their own.
Please elaborate?
Well the two button approach is fine, but wouldn’t this confuse the user? What happens when they keep pressing the second button? Maybe a different approach is to use promises? Then you can use Promise.all(); to wait for both functions to finish to update the DOM. (Maybe show a spinner on the button then remove it?. Also are all 15 functions defined statically? Or are they dynamically defined based on user input?
Yup!
can you? tell me which part wasn't clear and I'll try to make it clearer 
Please give an example of running code in a multi-threaded fashion in vanilla JavaScript.
lol javascript is not single threaded. if it was there would be no async functions. no ajax. no web workers.
could also be .admin-form .button (not that it was meant to be reusable, it is a local customization of the global theme)
Whichever style of CSS development practice you use, let's not forget the common ground we have: shitty designs from designers that favour flashiness over user-friendliness.
Isn't reusability all about putting more things that css applies to? so initially #loginform .button { ...css-styling... } becomes #loginform .button , .sharedName { ...css-styling... } boom, css styling is reused.
I use Ramda, is there some particular aspect of it you are interested in?
web workers are the obvious example. if you want code I'll be happy to prove that later. its Christmas and I'm with family.
Yeah, the wording is bad, I know. :)
Everyone seems so preoccupied with whether or not they could (and which library they should use), they didn't stop to think if they *should*. If there is a valid case for CSS in JS, then by all means use it, but I have yet to see a situation where it is the only solution. We've managed so far without it, why is it suddenly needed?
I think you need to make your question a bit more specific.
How would I concat the first index of the instrument to the first of musicians? and thank you for your help, it was really needed!
Is it better approach then imperative or OOP style in JS in your opinion? Can you tell me some advantages and disadvatages? Thank you.
Ah, so to use CSS in JS you also have to be ok with HTML in JS. I am not ok with either, so yay. :)
Just don't do the nested loop, only write the assignment to \`output\` and push it to the new array. &amp;#x200B;
He just means you can obviously run multiple threads inside browser environment, but the event loop is a single thread.
Web Workers aren't part of the language, they're part of the browser API, **and a fairly recent addition at that**. Furthermore, Web Workers do not allow for shared memory ([yet](https://github.com/tc39/ecmascript_sharedmem)), so for now you're really just spawning another JavaScript context and serializing/deserializing messages whenever you want to communicate.
I'm not sure why you got downvoted, I think your opinion is entirely reasonable. I'd argue 95% of front-end developers don't need this.
the point is that its threading. if js was single threaded they wouldnt be possible.
Per that definition, any language is multithreaded. Just spawn another process and you're good to go :)
Done
Check out the first reply to this stack overflow question for some practical examples of places where threading shines through and can ruin your whole day: https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded
var musicians = \['John Lennon'\]; var musicians\_length = musicians.length &amp;#x200B; var instruments = \['Guitar'\]; var intruments\_length = instruments.length; &amp;#x200B; function theBeatlesPlay (musicians, instruments) { &amp;#x200B; var newarray = \[\]; for (var i = 0; i &lt; musicians\_length; i++) { var output = musicians\[i\] + "plays the " + instruments\[0\] newarray.push(output); &amp;#x200B; return output &amp;#x200B; }; &amp;#x200B; just to be sure, is this what youre trying to explain to me?
And please check out the replies to that reply... pausing the execution of a function is not multithreading.
yeah, see my previous reply.
The functions are static. 
thanks a lot man!
It may seem like the code in promises is executed in parallel when, for example, you are awaiting for response from XMLHttpRequest in a promise and you can process some other events in the same time. Whereas in fact all that code (including setTimout() mentioned here) is actually scheduled for execution by the single thread. The [event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Event_loop).
for the while loop, I did what you said and i basically got this for code &amp;#x200B; function johnLennonFacts (facts) { const newfacts = \[\] var y = 0 while (y &lt; facts.length) { y++; var newoutput = facts\[y\] + "!!!" newfacts.push(newoutput); &amp;#x200B; }; &amp;#x200B; return newfacts &amp;#x200B; }; &amp;#x200B; does that seem alright to you?
In my opinion it is better, because it forces you to split your code into small reusable functions that are quite well testable.. On the other hand it requires some getting used to and if you overdo it it can end up a mess that you will have bad time figuring out. I would suggest learning functional approach, because it will force to think in different way and can make you better programmer. And you can always start small and convert more code to functional later.
Again, not in favor of one over the other. I'm in favor of using both because both have pros and cons.
CSS class = JS class. Very easy. Very consistent. No specificity problems 
Well, a language is just a language. It's incorrect to say that JS itself is single- or multithreaded. Oh, and processes and threads are not the same thing, btw. :)
Prettier does let you configure some stylistic things (trailing comma, single quotes etc) 
LGTM, except you have to move \`y++\` after assigning \`newoutput\` or you will be incrementing too early.
Yeah, it’s pretty easy to let modularity get the best of me in larger projects. I usually end up writing quasi-global style themes in a .js/.jsx/.css file, leaving it in the same “shared-resources” folder that I keep my “utils.js” file in, or whatever. Usually I just set up the main color palette and add a few styles for widely used primitive components (e.g. buttons, cards, div-wrappers, etc.). Then for larger parent components (like a page header or a side-bar) I usually let those be locally styled in their own modules. Granted I don’t usually work with a big team, so I can pretty well keep track of the whole style structure myself...
I've used many custom props on styled components but never got an error. I see "align" is a standard html prop, so that must be the reason why you see the error.
Good things about FP: 1.) Testing. By splitting logic up into functions, all you are having to test is a function by providing inputs and testing against the outputs. there's often very little need to mock up objects. 2.) Transformations. Many programming tasks can be thought of as requiring some data to be changed. This aligns well with FP. 3.) Terseness. The FP form often is simply quicker and easier to write. Using higher-order functions (functions which accept other functions as input or output, or a combination of both) with anonymous functions can replace large swathes of classes, and in typed languages, large number of interface types. &amp;#x200B; I use Ramda. It has a lot of functions that aren't available in base JavaScript, even as prototypal methods on Array. Additionally, using the functional form R.map(fooFunction, collection) over the methods helps you think in terms of functions transforming data, rather than you mutting an object. I also like the TC39 pipelines recommendation ([https://tc39.github.io/proposal-pipeline-operator/](https://tc39.github.io/proposal-pipeline-operator/)). This is a language level proposal for adding the pipeline operator (|&gt;) to JavaScript. This can be added to JavaScript today by using Babel - which is a JavaScript transpiler - with the respective babel plugin.
&gt; Isn't reusability all about putting more things that css applies to? Is more like having the class .btn--cancel repeated everywhere you use a button for cancel and not having issues with styles of some other elements. &gt; #loginform .button , .sharedName { ...css-styling... } Why not just .button and reuse? Side note, I personally avoid using IDs for multiple reasons. For simple approaches, your examples are good enough and I would go for it. In fact, I wouldn't jump into the CSS in JS bandwagon unless I have to. Again, I'm not in favor of one over the other. I like both and use both. But, if you have a complex problem, e.g. a big web app which allows user customization, you end up either 1) building the stylesheet on the fly, 2) using a ton of inline styles, 3) maybe preprocess on the backend, etc. With CSS in JS, this is a breeze. I work on web apps that have these types of "white labels" where some clients want the app to be used by their clients and for it to look like if it was theirs (their colors, logos, fonts, language, you name it). Solving this with pure CSS requires building a ton of duplicated classes or a ton of modifiers based on the org, etc. With CSS in JS, we simply compose as needed on the fly without worrying about performance, duplication, prefixes, specificity, etc. and reuse all components as needed. Sounds simpler than what it is (it is still complex to solve 🙈).
I made a framework to make building microservices easier. [https://github.com/hntrl/microsjs](https://github.com/hntrl/microsjs) Except i'm no expert at building these things. If anybody who is has any recommendations, let me know :)
Functional approach is generally good for clean code practices, but when it comes to performance, nothing beats for... of imperative implementation. By nothing beats I mean 10x ~ faster, yes that is ten times than equivalent `::map()` functions which invokes a callback on each element of the collection for example. For immutability, V8 isn't really great either. As it plainly copies entire objects / collections. Map and Sets are bit better at this, but it's still very taxing. On the other hand. Javascript doesn't have all the tools necessarily to implement clean OOP practices either. You really need interfaces and class metadata for that. While typescript can provide the first, it can't do the second, which ends up with messy, disfunctional DI implementations. And without DI, there is no proper OOP, composition over inheritance. Javascript is still that weird scripting language which goes around doing a bit of both. I guess the best approach is not to fully commit to any of them.
I did respond saying on a different child that we have a polyfill setup. There is no polyfill for css variables. CSS-in-JS is about as close as it gets. Compiling syntax with PostCSS doesn’t give you runtime evaluation.
Do you have anywhere which demonstrates the imperative/functional performance of JavaScript? I am very interested.
You can replicate it yourself with few datasets. https://hackernoon.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7
Some... Very few
The requirement was to execute both functions at the same time and they are independent. Hence why I put simultaneous in quotes
Nope, scopes are pretty easy to wrap your head around. `this` keyword is way more confusing.
Maybe you didn’t get my point but Layout component can also do some JS. That’s something you want to avoid when thinking about dealing with CSS issues. Maybe some weird behavior isn’t a CSS thing but a result of some fancy JS happening in Layout. 
very cool! Can it work when the class isn't from a styled component?
pretty cool idea but in practice it's probably easier to just use bash which is, from what I understand, available on windows now.
Do you want to replace them or append them?
You have terrible designers then. 
I like the advice to avoid premature optimization. In real world scenarios your code may be transpiled to simpler forms like for loops or whatever and measuring fractions of a millisecond on this kind of code is probably not the performance bottleneck you may imagine. In my experience, it is much more important to optimize for maintainability (people to read and write) than these kinds of performance improvements.
So I'll admit I have zero experience using it and have relied on Sass for many years as well. For projects that also need to work with no-JS users, how does this affect that? Obviously you won't be composing elements on the fly on the client side in that environment, so where does the fallback CSS come from? It seems like coupling the style with the behavior introduces an issue for users that wouldn't allow scripts to load in the first place and would necessitate having a stylesheet and class structure anyway unless CSS-in-JS is being handled server-side and pushed out as part of the document or compiled into a static resource.
Imperative code is not more difficult to maintain by default. And we have huge long going use case study with this called Golang. What matters really seems to be consistency through out the code base. If there is prevailing patterns your brain can guess from few lines of code (much like reading words from first few letters and phonetics) it's fine. I don't think that by premature optimization people have in mind for of vs map. It's more like think of algorithm a such and not of it's specific implementation first.
Cool, thanks for the suggestion. Yeah I do basically understand JS prototyping, but just needed clarification here. The rot.js author observes that writing to "primordial" objects is now frowned upon; instinctively that makes sense but I should probably look more into why. Any thoughts on that? I mean it does seems sort of like JS "should" have a natural \`extend\` method. ES6 added it, after all.
 why not use [...oldEl.attributes].forEach(({ name, value }) =&gt; newEl.setAttribute(name, value) ); Instead of [...oldEl.attributes].map(({ name, value }) =&gt; { newEl.setAttribute(name, value) })
It does not have to be which one is better. You can have the best of both worlds. I prefer OOP (via typescript) for the overall structure of the app while mixing functional concepts such as immutability and pure functions in. 
Yeah, it could have been part of the original js spec but it wasn't. So he just means that it's frowned upon to alter "built-in" objects like `Function` or `Array`. Doing this was always a bit debatable and is much less common now than it used to be. If you alter them then you alter them for all code you're running, and you don't know what sort of assumptions that code is running. You're very unlikely to hit an issue altering the `Function` object, but it is possible in fringe cases if you're using 3rd party scripts. It's really just a convenience to do so anyway, there's nothing that couldn't be done via a different method, so usually it's a bad idea as the upside isn't very strong, just syntactic sugar really. If you wanted to do it just to get through the tutorial then there's no real problem with that. Or, as I mentioned, you could just alter the method to take the child as an argument rather than assume it's `this`. 
I agree. I find it annoying to type var that=this to leak that "scope" into an embedded function.
Totally makes sense. Thanks for the perspective! Ultimately if I take it beyond the tutorial I'll probably do it in ES6 anyway.
But the problem is that Layout component CAN also do some JS. So, you are never sure whether the problem you're facing is a JS or a CSS one. Esp when you're doing some fancy things
Sure, but conventions only go as far as the company/dev team. I dont see any sort of standardization within the React/CSSinJS community.
If you have trouble understanding ’this’, I would recommend learning Java first. 
Thanks for the detailed in-depth answer! I'm usually working with Angular or React for web dev projects and WPF/UWP for desktop applications. Haven't had the chance to work with Electron since I'm not really sure where to start. Especially when it comes down to the UI, native API methods and additional libraries. I obviously don't want to use web CSS frameworks like Bootstrap because they are not really designed for desktop environments for the most part. Are there any UI frameworks or resources in general that you can recommend or do you create everything from scratch? I saw Blueprint CSS a while ago which caught my eyes.
For example, say you've written a for loop instead of map-- there is more code to read and the intention of the code is muddied up by the for loop syntax. Declaring an iteration variable, incrementing it, having a loop body, all three of those are places for things to go wrong. I think it's harder to find bugs in for loop syntax than in map, for example. I would rather not have the problem. You can use for loops if you want, but in my experience you will not see a difference (especially after transpiling and minifying). You can crunch the numbers on how many milliseconds there are in 60fps. If there are animation problems and you can measure and prove that they are coming from the use of map (etc.) that's a better time to worry about it, I think. With these kinds of small performance optimizations you will get different results in different browsers/on different hardware and then what are you going to do? I've been in codebases where people start saving the length of the array they're iterating over to a variable and looping backwards and all kinds of techniques. What begins as a regular for loop can easily turn into performance nitpicking. And the loops are sometimes even known small numbers like 2. 
I will, at some point, just need to find a valid project to write in Java. That being said - to clarify, I don't necessarily have trouble understanding `this`, I just have to keep reminding myself what it points at in various situations. So I try to avoid it where possible :)
Arrow functions to the rescue, I guess. I love them as much as I despise the fact we even have to deal with it.
Why not split it up? I have components that just return children and no jsx but have heavy reusable behavior logic. You can “split” components at the ui level but also the behavior level. It just takes restructuring
if you have 6 lists with 6 things on them, could the average person comprehend all 36 items?
In this case the semantic way is to use forEach, the map function usually creates a new array with no side effect, forEach makes more sense with side effects and, by the way it seams, you don’t care about a new array. 
Agreed the JSX is fairly irrelevant when it comes to management. I'll make a component of something as simple as navigation links just to split up the content into manageable pieces.
Ya i do that. So anything that purely concentrates on UI level is outsourced to a functional component. But say I have a form with 30 input fields. I can't break it down further to sub component and it's hard to maintain a functional component with big forms.
Form state is a notoriously tough example, I’ve looked to technologies like https://github.com/paypal/downshift and https://github.com/jaredpalmer/formik for inspiration
I use formik too and its really helpful. However it's not that helpful (or i dont know how to do stuff) when it comes to using 3rd party libraries like phone Input with country select or date picker etc. to make validation smooth with formik and Yup
Ah yeah, sorry this question is super general so I’m going to have a tough time giving you what you want! If you provide some code examples, then I and others may be better equipped to give suggestions
The Gap Instinct
styled-components/etc are meant to be used with JSX components...they don't really work outside of that context. There is no 'fallback' CSS really...the clients have to instantiate and mount the components that use styled-components.
That was a somewhat contrived example I had shown before...align wasn't a good prop to use as an example...but other non-standard properties will indeed cause that error.
While there are times where I think UML is useful, it is usually less communicative than other methods of modeling - from verbal or written descriptions to well written tests to simple code to hand-drawn sketches when you're explaining something. UML would be useful if it could be understood ubiquitously by all stakeholders, but chances are the non-technical product owner won't understand it and even developers don't tend to learn it well enough - particularly not when compared to the code itself which developers spend all day reading . To my knowledge UML is seen as a bit "old fashioned" and has been for a long time. It was tried with great enthusiasm ... for a while. In itself that is not an answer to your question so I will try to answer that now. If you're determined to use UML look at something older (e.g. Building Web Applications with UML Second Edition from 2002) . If you need to write your own, there's tools like nomnoml ([http://nomnoml.com/](http://nomnoml.com/)) which allows you to write it in the browser with a text syntax. 
The language shouldn’t matter. For the examples you see in Java, you can easily interpret the example as if it were for a JavaScript project. If you know the differences between a concrete class, abstract class, and an interface, you should be able to understand a UML diagram in any OO language.
Yeah, that’s unfortunate. IE11 is still a thorn in my side, too, but we have a decent set up and don’t worry too much about it where I work. 
It’s just a place to download a package. Any site can go down, good thing it only needs to be up to grab the package at build time.
`:host-context` isn’t that bad. I actually prefer it to having another CSS build step, but My idea of an ideal build is just using UglifyES and minification for CSS. 
Unless you happen to know Java, by the time you have learned enough Java to understand how the Java code in the UML examples relates , you will probably have moved on a long way from this point. The overriding point true is true that UML should be understandable from any OO language and so Java lessons in UML apply to JavaScript. However, for a new programmer who does not know any better if all you are wanting to do is being able to represent JavaScript objects do not try and go down this learning route. If you want to learn Java anyway, go for it! 
Using npm is a great time saver, and the idea that \`if it went back down we'd be hopeless\` is ridiculous, for this reason: You still CAN download all of this software and manually plug it in. But no one does this because really it's a waste of time when there's a convenient tool that does it all for you. Most big packages even have their own website you can get them from (React, gulp, jquery, underscore, etc) really we'd be in more trouble if github went down. 
But with Cordova you can install apps native on iOS or android and also you can add the platform browser which creates a web app. So doesn't it do everything for you in the first place or am I missing something? 
Classes don't exist in CSS though. Classes are global HTML attributes... They don't inherently have anything to do with CSS, not any more than IDs or tags. It's just a way of selecting an element in CSS or in JS. That we inherently couple classes with CSS just goes to show how set in their ways people are. You know, there was a time when people didn't style things in CSS. Landscapes change, and having even worked with small React applications, CSS was immediately a pain point for me and CSS-in-JS is still a young but fantastic solution. 
This is the issue. Try to break up the forms in your design. If you're stuck with big forms... heaven help you. Maybe you can switch it to buttons? Or maybe restructure it like a survey? Data entry can be miserable.
You're way late to the anti-hype train here. So many things. - npm is hosted on a CDN and their stability engineering is world class - yarn (operated by facebook) offers a fallback mirror - yarn, pnpm, and I believe npm now as well will cache packages locally so you don't have to download them every time if you've already downloaded them - You can totally host everything privately - You can specify using GitHub as well - You can specify using local as well - Every language has bottlenecks like this, or worse, no package repositories at all. Consider that GitHub is probably less stable than npm So, to answer your question, we're not that dependent on this tech. But, if we were, not that big of a deal.
I don’t know if a single package that can’t be found anywhere but NPM. There’s also so many redundancies that if a server literally blew up we’d most likely never know the difference. 
I don’t mean to be a dick here but, aside from very few cases like applications, do you really think a user is going to fill out a 30 field form?
UML is definitely not standard anywhere outside of a classroom. That said it’s a useful thing to learn to shape how you think about building software. 
Try to install Cordova without NPM. Try installing Cordova with added platform without NPM, pick one, anyone, try android for example. The end. 
Try to install Cordova without NPM. Try installing Cordova with added platform without NPM, pick one, anyone, try android for example. The end. 
That is your answer ?! Good thing you only need it to be working for the one time you need it ? Man this is delusional, it's like you are ALL in some kind of cult.
Try to install Cordova without NPM. Try installing Cordova with added platform without NPM, pick one, anyone, try android for example. The end. 
you gotta be connected to the internet at least one time to download stuuff no matter how you slice it, why not just grab everything you need with npm install once and save it locally??? I get it sucks if you think you have everything and you don't....... but npm/yarn/apt-get/brew save so much time. now if the ONE tech known as the internet went down.. hoo boy
Why do newbies make rage posts like this? Do you know how embarrassing you look here? Calm down and read a little more about the ecosystem. Relax.
I mean, I can't really test because I don't know what cordova is, but you could try `yarn global add cordova`, for starters. You could also clone [any or all of their repos](https://github.com/apache?utf8=%E2%9C%93&amp;q=cordova-) which are linked on their main page at the bottom with "Source Code". This is a really silly complaint, dawg.
Your conspiracy theory misdirected anger is troubling. So you can hit Cordova for a bit, and your whole world comes crumbling down? At least your site/app isn’t down, or it should be if you have a decent build process.
I've been used to hate npm dependencies. npm here, npm there, npm everywhere. Especially when you are new to the scene and get frustrated quickly. Also many npm packages come with an heavy overhead for deployment. Often I just want the ready-to-deploy code of a package but often there's only a npm command provided. Why do I have to search a npm projects directory for the files I want, or in worst case why do I have to compile and minify them myself if I just quickly want them to throw it into a dirty project with short live span and don't have the time to set up everything? **NPM is awesome, but in smaller projects oftenly overkill when you just want to import a lib or a framework.**
But why would you? The entire point of NPM is to make your life as a dev easier. You can install and run Cordova without NPM but from what I’m seeing, it looks like a terrible, terrible experience. 
Cool, do you have any resources or recommendations for learning it (or any other code visualization technique) the context of JS?
This reminds me with a quote from an educator in 1812 or something about how students today are so dependent on paper instead of chalkboards and wondering what would they do if they run out of paper !!!! Why on earth would NPM go down for any significant time ? If it goes down go get a cup of coffee and come back, it will be up again 
I get that. It's more of a what I expect a tool to do and how it does it. Javascript syntactically is built to be programmatic whereas CSS is built to "describe" something which is exactly what it's supposed to do. Giving javascript that role to simply serve it to the DOM seems redundant unless you're really dealing with a large scale, modular site where there's 50+ variations of a particular module. Having separate code that describes "things" from code that dictates what things do and data they contain seems the most elegant way of handling those things to me. 
Ok, great, lots to think on here and I will look into the book. Actually, my main concern is finding *any* way to represent code visually - I guess I'm a visual learner and need some way to look at the structure. But finding actual examples of that has been hard so far.
Sounds like your problem is with Cordova, not npm. You could always make your own copies of things stored on npm.
ohh yeah u are right. and im actually stuck up with that exact use case :P the webapp is a portal kind of thing for a e governance site.
&gt; Why on earth would NPM go down for any significant time ? You Sir...are in a cult. I hope you can hear what you are saying someday with a clearer mind. Someday npm will be hated upon [you go up, you go down] and you will be another one of those that says how bad NPM is and you wouldn't believe what you are saying now. Especially this quote of yours...pure delusional ! No doubt I will be downvoted by more delusional npc !
Questioning this = newbie ? You are in a cult.
Ah fair enough. Sounds like a major pain in the ass. As others have said, Formik is probably the best out of the box solution but have you tried seeing what you get out of the context and hooks API? 
This is such a cultish answer ! 
Just look at how you are all downvoting this, this is crazy ! You are all in a cult !
&gt;Ok, great, lots to think on here and I will look into the book. Actually, my main concern is finding &gt; &gt;any &gt; &gt; way to represent code visually - I guess I'm a visual learner and need some way to look at the structure. But finding actual examples of that has been hard so far. &amp;#x200B; Have you looked into the concept of network/graph data structures and tree data structures? JavaScript objects can quite often be visualised as trees, if not graphs. You can then find different ways to represent networks and trees. Thinking in terms of data structures is less "OO" and more traditional "data thinking" but it goes a long way to understanding programming in my experience, particularly, in the realm of JavaScript, if you wanted to look into things like React - which is Facebook's JavaScript User Interface framework - later on which is based on the idea of a component tree. 
I’ve built like 10 forms with 30 fields in the last few years
they are still on my bucketlist. past two months are hectic to spend some "JavaScript time alone". Thankfully Formik gets the job done(Except for managing phones and dates) but travesing through this giant sphagetti of form inputs every time i want to add/remove something is real pain. 
Maybe it's just me, but scope in JS always seemed so natural to me. Now scope in php on the otherhand...
Yes, you could use any global class as the parent in the example, or a css module object or similar. The magic really is in the `&amp;` replacement. I’ve also used this to style headings depending on what their html tag is, h1-h6, while keeping the styles scoped.
i"ve build a form generator app, lately i've added a 89 fields form (heart disease survey for a medical app) im actuyally refactoring the whole form part but it sound like you just need to use render props and re-use fonctionnality no ?
JavaScript provides no way to create a new thread. A bowser providing an API to run multiple contexts and facilitate inter-context message-passing doesn’t make JavaScript multi-threaded. Consider the following (not perfect but may help provide insight) analogy. Running “cat foo.txt | echo” invokes two, independent, single-threaded processes: cat and echo. The pipe enables them to communicate, but it does not change the fact that the two pieces are single-threaded.
If NPM went away overnight with no warning, I'd probably just use Yarn or go to the package's github and grab it there. Honestly no clue wtf you're talking about.
Yah of course it is going out of time when better tools come out, the same would be the case for JavaScript itself. But while it is in wide use, why would it go down ? It will probably be at least 10 years before it is not used enough to go down without anyone maintaining it That is like saying how we do we know google won’t disappear one day. It may happen sometime far in the future yes, but not anywhere we have to worry about it now 
Wat? There's absolutely nothing strange about scope in PHP. There's no hoisting, there's no var/let/const confusion. As long as you don't use `global`, which hasn't been conventional in years, it's the same scoping as C++ or Java.
Dependency and package management is an important part of software development, especially when it comes to open-source software, since with open-source software it‘s quite common for your code to depend on a bunch of different libraries made by separate teams. Pretty much every community in the open-source world has decided that they would rather rely on a centralized repository for their packages, and a community-standard tool (or a small number of tools) for communicating with that repository. * The computer-typesetting system TeX has CTAN, the Comprehensive TeX Archive Network, which has been up for over twenty-five years. * The Perl programming language has CPAN, the Comprehensive Perl Archive Network, since 1995, which is based on CTAN. * The R statistical-manipulation language has CRAN. * For python there is PyPi, the Python Package Index, and the pip installer tool. * In the PHP world there is PEAR, the PHP Extension and Application Repository. * The Haskell community has a repository called Hackage. * And for Javascript, it seems that npm has become the standard. There’s no cult at work here—just a bunch of programmers who would rather spend their time writing code than wrestling with downloading packages and keeping track of dependencies and figuring out why their import statements aren’t working right.
&gt;30 field form -- &gt;e governance site. There it is. 
Mate, you're not even saying anything that isn't easily disproven. We're downvoting because you're actually making terrible points. "You can't install Cordova without npm. Checkmate!!" Oh, except there are like 5 different ways of doing it. "npm is unreliable!!" Oh, except it's not.
great analogy! but step back and look at the bigger picture. you've just written a program that has multiple threads. that's all a thread really is. used to be that the browser was a single thread. all tabs had one single thread to run javascript on. that is not so anymore. in a browser context you could just as easily create a headless iframe and run some code in it. javascript is thread agnostic. it doesnt currently provide a handle little api for crafting a new thread but that does not mean it can't be done. likewise in node there's nothing stopping you fro. creating child processes. 
&gt; CSS shouldn't be scoped. This doesn't make sense to me. CSS is always scoped by element type, classes, ids, media queries. The issue with scoping by names is that names can be inadvertently used by other CSS. CSS-in-JS solves this problem by scoping CSS via encoding the CSS into a unique string. &gt; Working in the "global scope" with CSS is what allows classes to be layered together and flexibly reused so you can write DRY It is also the major source of maintainability issues. It is the equivalent to defining global variables for everything you write in a program. How do you know you didn't already use that variable at some other point in time? 
&gt; I understand the appeal of having associated styles right next to its template literal, but the risk of making styles part of a call stack and event loop as well scares the shit out of me. This is a performance consideration, while valid, should be profiled before make judgements. You apprehensions are valid but don't knock it until you try it. I have built dozens of apps using `styled-components` and have not run into a single performance issue.
According to OP, anybody who likes NPM is in a cult. But we’re the crazy ones?
&gt; Ya i do that. So anything that purely concentrates on UI level is outsourced to a functional component. But say I have a form with 30 input fields. I can't break it down further to sub component and it's hard to maintain a functional component with big forms. It's hard to understand what you are talking about without some code. 30 input fields sounds like a lot but sometimes complexity arises from business requirements and there is only so much that can be done. Usually there's a point where 30 input fields on one form becomes a burden to the developer and the users and at that point breaking the form up into multiple forms helps aide in maintainability.
Also check out redux-forms, especially if you already are using redux in your app. 
Take a look at **react-advanced-form**. Dev is awesome and it has the ability to plug in with third party stuff really easily. Uses RxJS to handle input items so everything is very snappy and smooth. A little work to setup, but it’s work a try for sure! It does rule based validation globally too if you want! https://github.com/kettanaito/react-advanced-form
formik already provides render props which is kind what I need to some extent. but my question is more towards form reusablity and reduce amount of code(literally). lets say I have a \*Add Member\* and \*Edit Member\* pages. what I do now is, since they both have same form inputs, i outsource it to a functional component \`&lt;MemberForm\` and manipulate it from a parent container \`MemberManagementContainer\` depending on how the user was redirected.(like \`/members/add\` vs \`/members/edit\` also \`/edit\` gets some extra prop to prepopulate fields). But the thing is, this still has an issue because add and edit both have different submit handlers and validation handlers. So I have to write everything for both in the container and pass them as props to the \`&lt;MemberForm&gt;\` component. this works. But my \`&lt;MemberManagementContainer/&gt;\` is filled with things like \`addMemberSubmitHandler()\`, \`editMemberSubmitHandler()\`, \`addMemberValidateHandler()\`, \`editMemberValidateHandler()\`, and all their corresponding Yup Objects and stuff.
If you don't see the value in automating trivial tasks then you might be in the wrong field. This is what we do. We automate things to simplify our lives. You'd have to be insane to consider not using package managers for serious projects.
Oh, are we upvoting self-promotional Medium submissions again? OP has zero activity outside submitting their Medium posts.
Every company I've worked with has run their own package repo. It's fairly easy and IMO essential for all but the smallest of organizations.
I'd highly recommend looking at examples of code on the internet to see how others split things out. I saw you mention elsewhere you're using Formik. It should probably be used similarly to the redux connector pattern. With the validation schema, `withSchema` etc in a separate file away from all the jsx
Agreed. Took me a bit of practice to figure out the different contexts, etc. But everything does get better and feel more natural with practice.
thank you! ill take a look at it :) 
Styled components made life much easier for me when I first started doing styling in JS. So clean and organized.
I'm writing an open source library currently which will eventually have some decent examples of this. Flick me a DM if you're unable to find good examples and I'll try finish off one of the pages for you to look at
``` class Thread { constructor(fn) { this.context = this.getNewContext(); this.context.open(); this.context.write(`&lt;script&gt;(${fn.toString()})()&lt;/script&gt;`); this.context.close(); } getNewContext() { var iframe = document.createElement('iframe'); iframe.setAttribute('style', 'display:none'); document.body.appendChild(iframe); return iframe.contentDocument || iframe.contentWindow.document; } } new Thread(() =&gt; { console.log('thread 1'); }); new Thread(() =&gt; { console.log('thread 2'); }); ```
You could give either React Final Form or Redux Form a shot! My team has used Formik as well at one point but as our codebase grew bigger, more complex, and requirements kept changing, we've decided to step away from it.
Yeah, it definitely beats having to figure out *exactly when* I should use `.bind()`... I can’t remember a case where I *wanted* `this` to change implicitly. If I want the context to change, I’ll explicitly define the new context. I mean, I get why it works that way, but it’s nice to have a syntactically clean way to set context-binding as the default behavior.
It depends on what you are looking for. I feel that since JavaScript has tons of frameworks out there, it also depends what framework or architecture (component-based, etc.) it is you would like to work with. For example, a good one would be searching for the Redux architecture which is commonly used with React and Angular.
Probably the main justifiable reason for me tbh
Interesting. Ok, I will look into these things. Thanks for all the thoughts!
UML diagrams are not all class diagrams though, there are [many other useful types](https://creately.com/blog/diagrams/uml-diagram-types-examples/) too. For example, I frequently use and see others use sequence diagrams at work.
Awesome job -- I didn't think of using a helper function!
Someone doesn't know javascript
I learned scope in BASIC for c64 back in the for loops 4 life movement. What a time to be alive.
I do this. And with php I can control user access easier. The containment is great. It's actually working better than I thought it would. And seems so much less bloaty
Sequence diagrams (despite their name) are intended to show where logic is deployed, not the actual logic/flow. The issue with sequence diagrams is their sparseness, they end up with too much empty space when the contain many components and many operations (I've literally seen an entire conference room wall covered by one indecipherable sequence diagram). Logic/flow is properly (and more concisely) illustrated with robustness and activity diagrams.
They are not elements, they're attributes. And I'm putting them on a newly created element, which means there's no replacing going on. 
... you have Node.js and JavaScript which is cross platform. You're using a "shelljs" library to emulate shell scripts in JavaScript. Why not just write node scripts? This has no purpose imo. 
Diagrams for: data models + data flows + screen flows = as good or better than UML for most software projects.
Disagree. UML aweful, but it is the lingua franca of visual modeling languages in the software industry. Other engineering domains, like [Systems Engineering, have their own set of diagrams for modeling](https://en.wikipedia.org/wiki/Systems_engineering#Using_models), which IMHO are better than UML for designing software systems.
You’re confusing two technologies; npm which is a package manager (alike, say, apt-get), and the npm registry which is the “what if it goes down” part of your doomsday scenario. You can replace the npm registry with other registries and there are backup and caches. So even if it goes down you can still do npm install from another registry. You don’t have to use the official one. 
&gt; I can’t remember a case where I wanted `this` to change implicitly. Seems like you want to context to change most times you use a function defined in a prototype. &amp;nbsp; If you create a `new XMLHttpRequest()`, somehow `xhr.addEventListener`, `xhr.open`, `xhr.send`, etc. need their `this` keyword to change depending on the instance they're being called from.
What? Can you provide a bit of code to illustrate this?
Actually, you’re right, I stand corrected. Just a case of observation bias, because obviously I’m not observing every case where `this` changes context appropriately.
You can have an onscroll event that'll check if you've scrolled to the bottom of the page, and upon getting there, your event should load the additional items. In an array in the component's state, the data that's been loaded will be appended to it and then will be iterated through in the component’s render method. You can use setState with a callback function passed-in as the 2nd argument. The initial call to setState in a method that would load your items sets the value of loading (for scrolling/rendering purposes) to true, and then in the callback you can load some items and call setState again to append new items to the items that are already in the state.
&gt; Like for example, I was trying to install Cordova offline and there is just no way. You expected the code to just magically appear on your system with no network?
Why can’t you break it down? If your components are becoming too large, break them down. It sounds like you’re self-inflicting.
Seems fair if their posts are relevant. 
I think I’m seeing your perspective now. You’re saying that if you want multiple pieces of JavaScript to run on independent threads, you can absolutely achieve that (ex by cresting a child process in node). No disagreement there. My comments were from the perspective of threading in a process, where all threads within a single process share the same address space. JavaScript does not support that kind of threading, which is what first comes to mind when I think about multi-threaded software.
We must go one layer deeper!
Huh ? The scopes in any language have a definition. Read it, learn it, and you are good. I don't see why you would be confused unless you have trouble with programming as a whole and the notion of scope itself.
Another idea is to move the main logic of a very long handler to a separated file. So your handlers will be short enough.
this. content should stand on its own. you wouldnt want to upvote shit content from a hyperactive redditor either
Why would you give this example: ``` let name = "Cat"; { let name = "Dog"; console.log(name); } console.log(name); ``` Block statements like if and switch conditions or for and while loops and {} unlike functions, don't create a new scope. Variables defined inside of a block statement will remain in the scope they were already in. 
There is no fingerprint API available in JS. And there is no way the webcam API is going to give you the extremely contrast-rich imaging you need to isolate ridges.
I am doing this now. this looks like a good way. So I have a Handlers file which have exported functions, which are just wrapper functions and binds the "this" of the calling component to the respective local functions which do the dirty business. really helped clutter the mess a lot,
As opposed to naturally knowing all possible CSS class names, without having to use them before? We just prefix styled components with S (e.g.: `SLayout`), and it lets you know it's a styled component, and the IDE helps with prop types.
Tried styled-components - never looked back!
Split them. We have this hierarchy: View -&gt; Layout -&gt; Component Views are generally the containers, layouts the groups of components (ex: a form), and components are generally the reusable small to medium units.
You'd have to wait for a while. [https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API) Standard cameras are nowhere accurate enought to provide you with quality fingerprints
I expected a way to download it manually and be instructed on where to place the files in. Not using NPM doesn't mean any other way of downloading file is magic...gosh...such a cult like answer !
Why exactly do you need a fingerprint scanner? 
Thanks for the explanation, but in truth, if the npm is down, we are all dead yet everybody is downvoting me [probably including you] by just stating how ludicrous this is. You mentioned "You don't have to use the official one", you know what is scary ? It's just a company, a single company ! That single company manages NPM, that is crazy ! It's not an open source organization, it's a company ! We can talk smack about how there are many many ways to download beyond the "official NPM", but right now, the few [perhaps only] way to convert html to app is cordova, and you can only install it via npm, this is insane ! 
I don't know about Cordova and you are probably right. The thing with PWA is that is simple. With JavaScript you can do a lot of robust things for multiplatform and responsive. So your "app" work as a site, a web app or a "native" app, if you decide to install it. 
For difficult form components, it is generally advisable to build an adapter to formik/final-form. Usually, it's a component that wraps the third party one and transforms its interface to the desired value + onChange. Then, you use that adapter and hide the difficult part in a one-time effort behind some nice curtains.
Ugh can we just delete posts from people who just self-promote their shitty medium articles already? The javascript community is becoming a cesspool of idiots
If your components are getting big, break them down. You should have container components that do nothing but manage their children, and view components that display nothing aside from the data they receive as props. Define handlers in the parent, pass down to the children. 
If all of your inputs adhere to the input + onChange, you still get the same functional component structure and can technically break it up into smaller components, but all you'll get is just an n-th component calling the ones you extracted for a one time reuse. It is not adding any benefits except maybe making you feel a bit better. &amp;#x200B; If your app is having a really big number of forms and inputs and you their design is mostly uniform, consider building your forms from a schema, something like having a form builder that accepts an array of field names and types that just returns the desired jsx.
Have you tried breaking the form into sections? Conceptually, The main component would house the subcomponents rendering the entire field. 
If you're tracking that many inputs, use Redux. I'm building a form generated from an almost 8000 line JSON object with over 150 potential inputs and an expanding format; Redux with Reselect is the only real solution for managing that much state. If you use Redux you can abstract a lot of logic and state management out of your components and use actions and selectors to manage the state of your inputs while the container component is only concerned with creating the inputs
You can also clone it from GitHub and use Cordova from that. Now it's your turn to ask what if GitHub goes down so another commenter can provide another alternative.
Then maybe a function of functions as you meantime’s earlier.
Who cares as long as the article itself is worthy
Ideally you should write node scripts in place of this, this would be useful for shell script programmers mainly for portability and for people who are not much familiar with node.js but have years of experience in shell. Shelljs also has a command line tool implemented called shx, you can check that out as well https://github.com/shelljs/shx
Formik looks good but as far as I know it can't merge backend and frontend validation errors (easily): https://github.com/jaredpalmer/formik/issues/150 I haven't looked yet but any idea if downshift (or others) can do that?
This is some of my favorite work to do! As a lot of people have suggested you can always split your JSX into smaller components, but I'd also suggest helper files. Make a constants, utilities, and helpers file, then import and export your troubles away. 
That's an interesting approach, but testing this on Chrome, it's clear that iframes are run on the same thread. See the console output of [this sandbox](https://codesandbox.io/s/8y2kvkxq82): the iframe's JS code is run-to-completion, there's no concurrency whatsoever between the JS contexts.
You will be depending on the internet. What if the internet goes down? It is unbelievable what we have come true. All those companies that will go down if the internet goes down!!!! Luckily, someone send me the source code of Cordova by postmail. It takes some time to type it all over on your local machine, but then you are truly independent of those cult like technologies like the internet.
Why not use Context? Does redux offer something over context? I have hardly used redux.
You should probably not try to use the same container components for edit and add-routes. Better try to invert the control and put together what you need for each container component by composition instead. Trying to put it all in to the same component will in my experience lead to a bunch of conditionals and generally messy code.
The problem with this approach - just to give an alternative view - is that the person reading - and editing - your code now needs to understand both functional and OOP concepts and their representations in the language you are using. 
Yeah I learned it the hard way. As more and more the development progress, i End up writing a lot of. Conditions which could have been avoided if I just made two components.
oh ok. good to know. thank you.
I agree. But probably because I haven't bothered yet to actually try and understand how it works. No being sarcastic, I genuinely have the same viewpoint as you, but I also know I haven't actually properly tried to understand it yet. Just like the various module systems (require et al.) I just nope out and go for the simple packages that come with very few cross dependencies.
Consistent conventions are more important than avoidance of code duplication in most cases. =&gt; e.g. handle routing, routing-parameters and route traversal with a strict set of conventions and strict naming rules. &amp;#x200B; Minimize In/Out transfer for classes. Instead: Try to use the same prop-types and names =&gt; De-coupling routing, Route-State-Extraction and actual UI can greatly improve code-readability and composability. =&gt; Grab data from a global memory nap (e.g. dogMap.get(dogId)) and only pass ids (e.g. dogId) as prop. =&gt; If you pass a handler-function down 2-3 levels it's often a sign of overly complex models. Try to avoid it, unless it's a convention your team agreed upon beforehand. &amp;#x200B; Don't preemptively modularize UI. Instead: Stick to conventions. =&gt; You will have to refactor or adapt to new business goals later. Refactoring a heavily modularized codebase that doesn't fit the new requirements is hell. A heavily modularized frontend codebase looks only nice once. A composable frontend ages way better! &amp;#x200B; Comments and repeating meta-structure! Even a large file can be read quite easily if it's structured (headings, descriptions, spacing and repeating structure). Structure your code like you would structure a good, semantic HTML document. Use Comments as Headings/Description content. Repeat the same pattern over and over. &amp;#x200B; &amp;#x200B; &amp;#x200B;
what happened?
Sorry, but you're making quite a few unsubstantiated claims which you need to back up with evidence and I see the hype mind is already casting votes based on it. For.. of syntax is very clear and easy to read. And as I've mentioned before we have long lasting case study on this. Sorry, but what you propose is subjective piece of opinion on style. You don't need iteration variable in for .. of loop, however it can provide additional functionality, of which functional approach isn't even capable of due to the nature of how it's executed. Map doesn't transpile to for.. of. And the problem of it being slow, closely to 10x time slower is not due to how minified it is, but how it's executed. Calling a callback on each collection item is terribly inefficient way to work with collections. That being said, nowhere I claim that one should always use for.. of syntax. However, the opposite is also nonsense how you supposedly should always use "functional" style. You shouldn't. Use your head and give up to the hype-train. 
I think theres a method where you can programatically set any field error.
&gt;In this case the semantic way is to use forEach, the map function usually creates a new array with no side effect, forEach makes more sense with side effects and, by the way it seams, you don’t care about a new array. &amp;#x200B;
woah.
People who only got excited about flex-box once Bootstrap started using it...
Because you're trying to destructure 0, which isn't an object. So the JS engine implicitly destructures it as an empty object, which gives {}.
It is actually crazy. But there is a better approach to this by the original node developer. [https://github.com/denoland/deno](https://github.com/denoland/deno)
I think i read somewhere that it tries to destructure the object version of the primitive, so it would be the same as doing ```js { ...new Number(0) } ``` But the number object doesn't have any enumerable properties, so it would then be the same as destructing an empty object (I have no idea if this is correct, but kind of makes sense)
These kinds of things are mind trickery too where you think you are looking at a 4 period spread without what should be the more obvious fact that is is 3 dots followed by a decimal. 
Most other languages dont allow you to declare variables inside if statements, then use them outside said if statement. if (true) { $bar = 3; } else { $foo = 10; } var_dump($bar); // 3 var_dump($foo); // null, undefined variable notice Not to mention the way you have to implement use() in order to reference variables from within an `array_map`. There's also the God awful way that globals work... PHP is not like most languages. And if you work in an old codebase that used to be maintained by people with bad habits some of PHPs oddities become very apparent.
Be the change you want to see then? There's nothing stopping you from cloning modules directly from github and pasting it into your node_modules 
are you installing @babel/core (with the @)??
I find the most worrying part to be `I just found {....0} in friend's code`
What is your alternative? How should we get packages in your world? Do you have a solution? If not, then you're just complaining without having anything better to offer.
the fuck...I was assuming that someone had some code that accidentally tried to spread on a variable whos value was 0.... I am confused as to why anyone would literally spread `{...0}`
do not feed trolls
https://bundlephobia.com/result?p=react-advanced-form@1.6.4 That's an oof
It's not. There are countless, good quality tutorials on variable scoping.
Redux isn't the only solution...I feel the need to mention mobx and specifically the use of mobx-state-tree (which gets you observables + immutability + mutability) all at the same time. We have found it helps reduce complexity and LOC compared to Redux with the same benefits of immutability and replayability + a bunch of cool stuff that Redux doesn't provide. https://github.com/mobxjs/mobx-state-tree (no I don't work on the project, just a big fan)
&gt; 0.0 Accurate portrayal of my response to the `{....0}`
&gt; (I have no idea if this is correct, but kind of makes sense) If by "sense" you mean that the people who drafted this spec apparently were thinking *"you know what, `==` type coercion isn't weird enough yet"*, I agree
i figured it out. i had to delete npm from my AppData folder to remove all the old modules
Why exactly wouldn't you use Node? 
ō.ō
You don’t have an element with ID “root” in You html file (only with class)
Render is looking for ID “root” but you have class in index.html
You can think of the spread syntax example as `Object.assign({}, .0)`, where [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) copies enumerable properties, but in this case `.0` (short for `0.0`) has no enumerable properties, so there's nothing to copy.
This seems like a task in futility
Node or any browser is a correct environment that parse and compile (yes it is) your code when it is executed . Lot of work was made with theirs engines to provide you good performance experience almost on ANY and platform that supports C language. Just practice node / browser + DOM manipulations using ES6+ This is the best experience you van get.
hadn't noticed that. I changed the attribute from class to id but it still doesn't work. Also, if you could take a look at the dist folder. When html-webpack-plugin makes a new index.html file it doesnt show a div for the component to connect to. I remember once getting it to show the bundled js file without any divs in the body. How do I do that?
Not really. There is nothing that won’t be easily understood by reader. I’m taking about things like using map vs forEach or using pure functions. Rather than debate which one is better I prefer using the best of both paradigms.
it's interesting that this highly rated comment repeats the answer in the link, but does it in less measured and less helpful and more frenetic and accusatory way than the accepted answer.
Ha! Didn't even see it was a SO link. I like the accepted answer, succinct and and to the point.
PHP has some weird stuff going on too. $a -=- $b; $a += $b; $a = $a + $b; These are all equivalent. $a = $a +-0-+ 3; $a += 3; $a = $a + 3; Also equivalent. I can't imagine anyone actually using the "exotic" operators.
It still does not work because You try to load /dist/compiled.js file. That file does not exist in that folder. Try to check Chrome console for the errors, that will help. As for second thing - ReactDOM.render needs supplied container to render application to ([https://reactjs.org/docs/react-dom.html](https://reactjs.org/docs/react-dom.html)).
oh yeh i forgot about chrome console. yeh i figured it out. I didnt have i had Component instead of React.Component
You need something for the JS to operate on (like the DOM in the browser) otherwise you can't input/output so you're not left with much to play with. Eg. for a script to output something you create HTML, use `alert` (which depends on a browser dialog), or `console.log` (which again uses something built into the browser -- the console). What's your reason for not wanting to use the browser? I'm not going to ridicule you, everyone's situation is different. If it's to avoid the complexity of HTML or because you want to work offline you can just paste JS directly into the console in developer tools and it will run (but that still requires a browser). These might help a bit: https://en.wikipedia.org/wiki/JavaScript_engine https://www.codecademy.com/en/forum_questions/55edac31d3292f78cc000080
I hope everyone has seen the "goes to operator"? ```js while (x --&gt; 0) // x goes to 0 ``` One of the funniest SO topics: https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c
Previous editions: * [http://gsgc2018.gynvael.tv/](http://gsgc2018.gynvael.tv/) / [https://www.reddit.com/r/javascript/comments/91f4zs/a\_30kb\_360x400\_js\_shooter\_gamedev\_competition/](https://www.reddit.com/r/javascript/comments/91f4zs/a_30kb_360x400_js_shooter_gamedev_competition/) * [http://gwgc2017.gynvael.tv/](http://gwgc2017.gynvael.tv/) / [https://www.reddit.com/r/javascript/comments/7iy98o/a\_20kb\_js\_tactical\_turnbase\_gamedev\_competition/](https://www.reddit.com/r/javascript/comments/7iy98o/a_20kb_js_tactical_turnbase_gamedev_competition/)
This guy gets it
Try Prolog if you want to invent new operators. A sane person wouldn't write $a = $a +-0-+ 3; but $a = $a + -0 - +3; or $a = $a + 0 - 3; or $a = $a - 3; or $a -= 3;
There's no such thing as what you're asking for. The runtime evaluations for JavaScript from Node are the closest to native you'll ever get.
Object spread, like Object assign, convert a non object into an object. Object(null) and Object(undefined), for example, will produce an empty object Instead Object(number) creates a Number object that has no own properties. So the spread cannot get anything from that
I know, I'm not complaining about the ability to do it in javascript. -- `$a -= -$b;` `$a = $a + (-0) - (+3);` I imagine you can do that trickery in many languages.
&gt; And as I've mentioned before we have long lasting case study on this. Do you have a link to this? As for when to use map vs for...99% of the time, map'ing a data set is more concise, testable, readable, and reusable...assuming the reader is familiar with FP concepts. Is it faster? Depends, and not always...but *usually* that doesn't matter (ie: in real world scenarios the speed difference is so negligible that it is imperceptible)...so as a general rule: use map in favor of for .. of. Now, of course, taking into account exceptions to the rule...your requirements my indeed favor for .. of. ...but *probably not*...
Thank you, I know I am not alone, even if EVERYONE is an NPC here that has got to be someone here that realize how crazy this is.
Those aren't anything weird. Your examples are just: $a -= -$b; $a = $a + -0 - +3; With deliberately confusing spacing.
Interesting. I haven’t seen it in 10 years of professional software development. But I also have avoided too much enterprisey stuff so maybe that’s why. 
What does NPC mean?
Paste everything into a single folder?!? What if that folder gets deleted?!? You are all in the folder cult!!!!!
`use` is not specific to `array_map`. It's just how you tell a closure that you want to use an external variable, same with C++. You should have brought up variable variables because that is a totally fucked feature not present in many other languages. e.g., $foo = 'bar'; $$foo = 'baz'; echo $bar; // baz I ran my local PHP user group for over 10 years, I'm well aware of PHP's flaws and PHP is, at least syntactically anyway, very similar to most C based languages.
Emotion too. Those 2 are de facto go to into CSS in js.
If you are gonna be a developer you can't forget about chrome console, you should spend 2 hours debugging in the chrome console before it crosses your mind to post on Reddit. Same goes for when you are on your job!
I like how increasing the size of the arrow increases the size of the decrement.
&gt; and you can only install it via npm, this is insane I love how you keep saying everyone else is in a cult while you repeatedly spout things you have been shown to be untrue. Besides, even if it were true, your original point is "Everyone used to have mirrors everywhere", which might have been approximately true, but not completely. Not every language or environment had mirrors, not every library had mirrors, etc. Tons of projects have been hosted without mirrors for decades. If Cordova's just another one, well Cordova is just another one.
Virtual scrolling. Just use [react-virtualized](https://bvaughn.github.io/react-virtualized)
Good to point that out! Not the smallest library around, but shipping a product vs optimizing for speed even if it's a 0.5s load time; I'll pick shipping every time. Good enough performance all the way. Lots of good ideas out there, this is just one! ☝️ I bet there is a way to get this smaller too :) 
We've done it, Reddit!
Nice. Thanks
&gt; Do you have a link to this? Go language by google, which is imperative style language. The Economist had dedicated article about their migrations. You can find plenty of resources on how and why Netflix did it. And the reasoning why which goes directly counter to your talking points. Go beats node in all aspects, being imperative style language which doesn't even have while loop, other than talent pool and open-source packages. It's easy to get into, it's easy to maintain and easy to horizontally scale and is super productive. And as far as tech spec outperforms node in every conceivable way. Now you've been claiming that functional programming is somewhat superior to imperative, which it isn't. &gt; map'ing a data set is more concise, testable, readable, composable Sorry, I have to write this off to subjective opinion. 
&gt; Sorry, I have to write this off to subjective opinion. Same...you sound like someone who hasn't invested into FP concepts much. There is plenty of contrary evidence as to why FP concepts have advantages....you should look those up. Since you are unwilling to post any 3rd party references supporting your points but want to bash others, I will post something you can read and possibly learn something about FP from: https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming
That's what a search engine is for. We should set the bar higher than "relevant".
I don't think redux is usually the correct place to store form data. We use redux-form at work, and want to phase it out.
0 *is* an object (it’s an instance of Number), but it has no “own properties”, which is what Object.assign (how object spread is usually implemented) is looking for.
Reddit is a bottomless well of wonders. Merry Christmas stranger.
This can actually be a quite useful way to conditionally populate objects. https://codeandsuch.github.io/conditional-array-object-literals
Well, since we're being technical, I think 0 is a primitive, full stop, but its wrapper object is used often as well.
Or just write shell. Seems plenty portable to me. 
Non-Player Character. in video games they're the "AI" characters that only say what they're programmed to say.
i don't get the impression you're interested in learning anybody else's perpective here...
&gt; You mentioned "You don't have to use the official one", you know what is scary ? It's just a company, a single company ! That single company manages NPM, that is crazy ! It's not an open source organization, it's a company ! i think this is a fair point, i get the feeling that most of "the community" recognizes the flaws in this arrangement. but for a lot of people that's just not enough of a problem to overshadow the solutions offered. sure, some of them are bound to be crazy but you might just learn about some rational motivations if you stop reducing their entire perpective to insanity.
the downvotes don't necessarily mean everybody disagrees with every one of your points. i think it's because you asked a question and proceeded to attack everybody who tried to answer it.
How does Firefox matter if this is only for node?
Golang. Should I share let me google that for you link? Golang is a living example which debunks this "imperative style is hard to maintain" gibberish often used by functional-style apostles. This idea that imperative style is somehow difficult to maintain, read or scale is nonsense. https://medium.com/slalom-technology/golang-the-next-language-to-learn-for-developers-2c7c32b8a095 Introduction to what it is. Experience from one of major company migrating to it:. https://www.infoq.com/articles/golang-the-economist Yes. I'm very well aware of functional programming and what it does and how it does. That's why I recognize that a lot of functional programming patterns do not work efficiently in V8 engine, because state immutability requires memoization to work well. Javascript does not support it well. &gt; https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming Common text book arguments which do not map on reality all that well. &gt; Pure functions are easier to reason about Not really. There is a reason why Rust is called "Practical haskell" and Scala is not widely adopted. They aren't easy to reason about. That's a lot of theorycrafting, but practical world does not reflect this. And we have functional programming at least for 40+ years now. &gt; Debugging is easier Yeah.. No. It isn't. 3rd party tools like xdebug won't work well on functional patterns, because it requires values with allocated memory. If you know some functional programming debug tool which goes step by step through each value in your application, please share. &gt; Programs are more bulletproof Yeah, again theorycrafting. Little practical application. If programs did need to cause side-effects, it would be a plus. However, side-effects is what provides value to the business. So this is another case of supposedly solving one problem, by introducing another huge problem. Have fun interacting with database with clojurescript. Also, nothing prevents you writing stateless application in procedural or object oriented style. &gt; Parallel/concurrent programming is easier Golang is imperative style language. Which arguably is the best language for concurrency and is easy to understand. Unlike Erlang. Again. I'm not against FP. And I use some of the patterns myself. But to claim that it's someway "better way to write code" is a hype. And common pattern of "rediscovering" things which are already half a century old in programming world. 
Then just save the folder from your `node_modules` or look for another way to download the package and persist any way you would like. Solve your own problems instead of criticizing wildly popular solutions while offering nothing yourself. 
self-promotion _is_ addressed in the reddiquette. not saying i care here but it's a decent approach to the crap that can clog up other subs. also, for every medium blogger that skirts the reddiquette and "sees what sticks" there have to be hundreds that _don't_ stoop to that level, only post their very best and take part in the discussion the rest of the time. why should they keep doing that if nobody mentions when others are pushing it?
You cannot point to an implementation and say: see this is better. Golang for as great as it is has a context of use, and the patterns we are talking about here in the context of javascript and FP are useful and have their place. That is the entire point here. This isn't an either or discussion, but I guess you realized that. At first you were also pointing to performance as the overriding reason to not choose FP concepts but have now switched arguments, ones which are more opinionated and based on your own current use cases I believe. Others have other use cases, and FP concepts often make sense in the world of javascript...that is **the** point here. &gt; Yeah, again theorycrafting. Little practical application. If programs did need to cause side-effects, it would be a plus. However, side-effects is what provides value to the business. You bash against 'theorycrafting' in once sentence and then propose your own in the following...nice. &gt; Again. I'm not against FP. And I use some of the patterns myself. But to claim that it's someway "better way to write code" is a hype. And common pattern of "rediscovering" things which are already half a century old in programming world. You sound like it in this thread...the only thing people are saying here is that FP concepts have a place and provide benefits that you are handwaving against in your replies. You bash other for having opinions and use cases different from your own you put forth as factual and irrefutable.
you must have missed the post where [the gang accuses OP of plagiarism](https://www.reddit.com/r/node/comments/8hkljv/nodejs_1000_what_to_expect_as_a_backend)
Reminds me of this post: https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c
I orginally stated, that in javascript you should employ both based on situations. I even explicitly stated some of the situations where for..of would be of benefit. You however are arguing that one should effectively only use FP approach. Your first concern was that imperative style and for ..of stynax is hard to reason about. Which is common trope used to promote FP. I came back against it pointing to real life example of Go lang and how fast it's growing as a language by major and user base pointing to how easy it is to be productive with it. One of Go langs context of usage is replacing Node.js. Just FYI as simply better alternative as far as tech spec is concerned. I use this example because it's easy to point in order to debunk "imperative style is difficult to maintain". Which is again - made up nonsense with no evidence. &gt; You bash against 'theorycrafting' in once sentence and then propose your own in the following...nice. The only claim I made was that V8 engine is not optimized for immutability. It stupidly copies entire data sets instead of using some sort of memoizations techniques. Which makes javascript very inefficient and one of core FP patterns - immutability. This is why I suggest to use for..of for any higher intensity work. As programmer one should know the limits of one own tools. &gt; You sound like it in this thread...the only thing people are saying here is that FP concepts have a place and provide benefits that you are handwaving against in your replies. I say that there is a lot of unreasonable hype surrounding FP. There are good patterns to adopt and learn and use. However to make broad claim that it's "superior way to write code" which you did imply by neglecting for..of in obvious uses cases where it would be of benefit is asinine and misleading for people who aren't well aware of js spec. 
i think the reluctance to objectively understand and weight the costs and benefits from another perspective is the specific reason OP might be in the wrong field.
There is Photon - [http://photonkit.com/](http://photonkit.com/) \- a CSS library to make the app look like it's a native Mac app. Starting with Electron and Angular is a 2 minute process, just clone this starter repo: [https://github.com/maximegris/angular-electron](https://github.com/maximegris/angular-electron) I haven't tried React and Electron, but it's probably just as fast to start: [https://github.com/electron-react-boilerplate/electron-react-boilerplate](https://github.com/electron-react-boilerplate/electron-react-boilerplate) Interacting with the OS is easy -- the bindings are a one-liner with the angular bootstrap I used. You just listen to an event that's sent over from Angular: [example](https://github.com/whyboris/Video-Hub-App/blob/master/main.ts#L349) ipc.on('openThisFile', function (event, fullFilePath) { shell.openItem(fullFilePath); }); I gave a talk about how to get started with Electron and Angular - just 20 minutes and I cover pipes and animations: [https://www.youtube.com/watch?v=Gv7IfU78vxw](https://www.youtube.com/watch?v=Gv7IfU78vxw) 
Okay, but what does it mean in this context?
Many companies have an internal registry and only have the packages they approve available in it. It’s all cached and they have full control over it. You can do the same if you want. 
This is the correct answer. 
everyone who disagrees with OP is accused of being brainwashed, in an NPM cult, and on the wrong side of history. it's a pretty solid tactic for completely disregarding any answers you claim to seek.
The other commenter just gave you good advice. It was delivered kind of insultingly, but it's good advice. Learn the dev tools, they're very useful.
Context is a back door. Says right in the docs that overusing it is a pretty big anti-pattern, similar to refs. If your state is complex enough that you need to use context a lot there’s a good chance Redux is a better option. Redux offers a single source of truth accessible anywhere throughout your component tree, as well as the ability to add middleware, perform asynchronous fetches with Thunk or Sagas, and a normalized structure for data aggregation.
I prefer Redux to MobX. MobX is fine for smaller projects, but I personally view mutability as literally Satan and completely misses the point of immutable state in React Redux is based on the concept of a single, immutable, normalized data structure as a single source of truth. MobX is easier for OOP programmers to pick up but I view its paradigm as less robust, especially for larger projects. As a huge fan of the functional programming paradigm, Redux wins hands down. The purity and predictability of Redux’s reducers, the data normalization, and the immutable nature of its state are things I personally love. I rarely mutate even local variables, preferring to make shallow copies of data before operating on it. Just personal preference. I’ve found that most people avoid Redux because it’s seemingly complicated but once you get over the learning curve I’ve found it to be indispensable 
In my first post I clearly stated that for .. in is useful in specific scenarios but that there are clear benefits to FP which you then railed against by using what your obvious preference is...Go. Which is fine, but you need to understand the bias that your specific use case and environment are causing for you. Not everyone works on the backend, not everyone uses node either. Those are things you seem to assume with your argument here.
By the way I think you are confusing me with the person who originally started this thread...I joined in on it later on.
It's not just NPM. Java has something similar through Maven. Even Gradle and ant/ivy use the same Maven registry. Major enterprise applications, the kind used by multi billion dollar companies, rely on maven, rely on NPM. Guess what: they don't have any problems. Everyone is accepting this because it works. Everyone is accepting this because the benefits of dependency management via NPM outweigh the risks you are fixated on. Engineers who have been working with software far longer than you clearly have are ok with this. Fortune 500 companies, whose software has billions of dollars resting on it, are ok with this. But of course we're all brainwashed NPCs and you're the only one who sees the light.
I was attacked first by all the downvote for just asking RIGHT at the beginning, you have to be there to see the sheep like NPC behavior for just questioning the "authoritah" of npm.
mobx-state-tree is not the mobx you know. It is different although uses mobx...mobx-state-tree supports the exact same immutability and normalization that redux does...just without a lot of the boilerplate, allowing you to worry more about the logic rather than managing structures of data through reducers. You still get all of the same purity and predictability. I've used redux...mobx...and mobx-state-tree...I use mobx-state-tree because it garners the advantages of redux while providing for a more experessive api and allowing for more easily managed state logic. It is so compatible that you can even hook up to the redux dev tools and watch the same actions and history as you would with redux. Underneath its an immutable state tree just like redux. Take a look at: https://www.youtube.com/watch?v=HS9revHrNRI that will give you a decent intro to the benefits of it.
Well to be honest I use sass which adds those things. So you are right, and I consider it a must have for me. In my larger projects I abstract a few things into variables with sass. Such as color, weights, z-indexes, and maybe one or two more. But that's about it for my needs. In regards to specificity, I rarely have much of an issue. I usually namespace the specific page (id on the body tag) then do about 1-2 layers deep for the page specific styling or page specific tweaks to a reusable component. So the styles rarely leak and affect something I didn't intend. Only very global components or utility classes ever polute the first level / global space( if that makes sense). For some reason, this all adds up to my experience of rarely ever running into a specificity problem. In regards to reusability, that part I can't relate too. I reuse classes all over for things that are global (say a reusable concept like thumbnails). Overall I agree with you, SOMETHING is needed on top. For me I guess that is sass!
Are they not ? You can't see it because you were late to the party, if you were there RIGHT at the beginning, you would see the amount of downvotes just by me asking this question even without any reply from me as of yet. It's bordering cult/herd behavior I tell you, you have to be there to see if for yourself.
[removed]
ô.ō Raised eyebrow.
Ignore the guy who said putting styles in the id is bad. Your example is exactly how you use css sanely. Have a global .button style that covers the base button case. Maybe you have a few types of buttons, so you might include .button.small or .button.error. OR maybe the login button itself will be reused. So make a .button.login style and it's fine. But if something is really only used once, in one place, don't polute your button.scss file with it. Leave that a site-wide generic file of available options for buttons. Then, there's always that one time, on that ONE page, you really need some specific padding or margin or whatever. YES, definitely constrain that style and have it in a page specific file (assuming your using sass/imports) and use #my-page .button {}, and include your special stuff. Then when later you're tweaking stuff about my-page, you go there and know that's the most specific location and it won't affect anything else.
its cool. some devs dont get exposed to humans too much so i kinda expect it
While your approach certainly is good too and there's a ton of factors about those complicated situations. I want to say to others that this can easily be done via css only too. I've done similar things and it just requires, like anything, a good design to the system.
JS hipster object creation
The reason why I brought up Go, is to debunk the notion, that imperative style is somehow more difficult to maintain than declarative commonly employed by FP. Now you are trying to poison the well by suggesting that it's somehow a 'niche' language by alluding to 'specific scenarios'. That's why I brought up that it's pushing out node to counter the 'specific scenarios' claim. It's general purpose language at this point. Not sure how Angular and React comparison is relevant here. Not only corporations, a lot of individuals prefer Go too https://www.youtube.com/watch?v=9aXPKE2ND7w for non anecdotal explanation you can refer to stackoverflow yearly survey. It's not just enterprise thing. Also the idea that Angular was favored by enterprise was a myth. Angular JS was, because it was the only game in town to begin with. Angular 2 never reached it's popularity and React was de facto industry standard as far as I remember. 
wow you're really connecting the dots there... can you even make a point without painting the majority as some ridiculous caricature? you're absolutely unwilling to look at any perspective other than your own and it's going to hold you back.
&gt; Not sure how Angular and React comparison is relevant here. It is relevant because one of your continual themes is pushing the idea that because Go has been adopted and developed by a large corporation as a 'solution' then it must be THE SOLUTION...and that nothing else can be considered. "Oh and how dare you have an opinion different than mine which is OBVIOUSLY right" This is how you sound...well I hate to break it to you but by the same metrics a lot of people prefer to use FP methods over more imperative methods precisely because they are often times more simple to understand and debug within the context they are using them. But you just ignore all of that and refuse to give up ground on your *opinion* and obvious focus at the moment, which is Go.
I suggest to read the full response and try to actually understand what I'm trying to propose by using principle of charity rather than trying to come out as the person who has the rights on his side. It's not a competition, you don't have to try to select one sentence and try to beat me with it when rest of your post has been already answered in the same post you are supposedly responding.
I suggest reading back on your original responses calling into question everyone elses opinion that differed from yours because you were obviously right. I am not trying to prove I am right, I am trying to prove how your opinions is not necessarily right.
For f*** sake, mate. Where idea that consider the use case and that there are instances where functional approach is not preferable is not right, given that javascript does not have memoization and for intensive tasks it will overload your hardware. Point me to big contraversy? All I got from you was some theory-crafting about scala with common FP slogans which are not proven. Sorry they aren't. We do not have practical cases. We simply don't. And while I can point to Go you can point to what? Erlang?
There it is...your bias...and exactly what I was pointing out. You claim to know the better solution while proposing opinions about what is better and lambasting others for thinking differently. Ok buddy...have a good day. Glad you and your attitude aren't on my team.
&gt; proposing opinions about what is better and lambasting others for thinking differently. V8 stupidly coping entire datasets draining out memory is not an opinion. It's part of language tech spec.
&gt; V8 stupidly coping entire datasets draining out memory is not an opinion. It's part of language tech spec. Learn your s*** srsly. We weren't talking about V8's implementation of anything...but you want to move around the goal post again... ...so once again, have a good day... we specifically filter out attitudes like yours from teams like mine... who prefer take things like context and use case into consideration when considering what to do and how to do it. Rather than blind statements and offensively insulting others like you seem to love doing here. Have a good one.
&gt; We weren't talking about V8's implementation of anything. V8 is javascript JIT compiler. Any Chromium based broswer runs on it. Node runs on it. Upcoming microsoft browser will run javascript on it. Safari runs on it. It seems that the only thing which is insulting right now is that I point out how little you know about how js works under the hood. It's not intentional, but happens I guess.
k
Seriously. One time you're displeased that we talk outside javascript context. When I point to the statements I made specifically within javascript context (v8) you get displeased and blaming others for being supposedly offensive. Gheezh. Talking about being oversensitive these days.
Your anger and 'im better and know better' attitude is a nice confirmation. Like I said, glad you aren't going to be on my team.
Your form generator uses drag and drop?
I'd recommend looking at this series: https://jsblog.insiderattack.net/event-loop-and-the-big-picture-nodejs-event-loop-part-1-1cb67a182810 &gt; My understanding is that Node offers outstanding performance because of the event queue model. Well, the non-blocking model fits I/O operations well, but it's lackluster in others. It's all marketing my friend. 
Don't just "find some js", take the time to understand all your code in depth, or you will have endless bugs, and unusable websites.
(͡•_ ͡• )
Did you import React from ‘React’ at the top?
nice. didnt know you had to do it for every single component file. thx
falsy values { ...falsy ? { ... } : falsy }
I must be confused because I don’t see how this is relevant at all, except in that both are using the spread operator. Are you suggesting that OP’s friend also overrode the default Number constructor? Because that’s terrifying.
This is an interesting consequence of transpiling using Babel, where the syntax (JSX) is converted into normal JavaScript. Whereas to you as the developer see &lt;nav&gt;..&lt;/nav&gt; as your code, once it has been transpiled (converted to normal JavaScript) it will show, React.createElement('nav', ... ) where ... is the children of nav in place of the &lt;nav&gt; JSX syntax. &amp;#x200B; If you think of it in those terms - that by the time the transpiler has finished that your file uses the React object , the React object needs to be in scope. 
Or the slightly shorter version using `&amp;&amp;` instead of the ternary: { ...(condition &amp;&amp; { someProperty: "value" }) } Where `condition` is a boolean value.
I always wondered about this and this makes alot of sense. Thanks for explaining! 
Neat, I’ll add that to the article.
Type coercion was not part of any "spec", it was part of the language from the very beginning when Brendan Eich hacked up 95% of what you know as Javascript in a few weeks. 
Read my comment again: it's referring to the *spread operator* spec.
Try returning the value on getData and using that return value. 
myArrayData.toString().split(“,”).map(d=&gt;Number(d)) 
The performance of promises in Node is generally quite good, and is being worked on: https://v8.dev/blog/fast-async If you want to embrace async/promises, then consider [Koa](https://koajs.com/) instead of Express - it takes full advantage of async functions letting you write very clean code.
If you want a webapp, you won't directly have access to the user's filesystem, but you could still make it work. When you start the app, use the Google drive Javascript API to pull your sqlite files and images. Generally, file data is either stored in UInt8Arrays or blobs, I'm not sure which the Google drive API uses. These are just bound to variables. When you want to use them in the app, you can use data URIs for images as the image source and pass the sqllite file into your SQL library. When it comes time to persist data, use the Google drive APIs to write the new SQL file to the user's drive. I'd recommend not setting up your own server, it's just more to maintain, and on top of that you'd now need to implement more complex OAuth schemes.
Koa is so underrated. The Koa middleware architecture is actually easier to maintain than express. 
you can your component call the submit handler with a parameter like "create", "edit" and then have 1 handle for both action, i use that as well in my form gen code like so for exemple : submit() { const methodName = this.state.formMode === 'add' ? 'add' : 'edit' const response = await this.props.actions[methodName](data) if(response.success) { // done } i dont know if redux is used but it works the same with native js
you can your component call the submit handler with a parameter like "create", "edit" and then have 1 handle for both action, i use that as well in my form gen code like so for exemple : &amp;#x200B; `submit() {` `const methodName = this.state.formMode === 'add' ? 'add' : 'edit'` `const response = await this.props.actions[methodName](data)` `if(response.success) {` `// done` `}` &amp;#x200B; i dont know if redux is used but it works the same with native js
You aren’t awaiting the promise returned from this.getData() so that function returns the data before your asynchronous call completes. 
getData is asynchronous, so dumpData doesn't wait for it to execute before returning. If you want it to work keeping your current code style, add "async" before getData definition and "await" before the call. &amp;#x200B; Though I would recommend to avoid unnecessary side effects in getData and just return the whole promise and then get its result in dumpData either through another "then" callback or just doing `return await this.getData()`.
There are a whole swathe of things like this that are only tricky because people forget to realize they are merely semantic. Coming from C, I would immediately assume that you haven't instructed js to actually allocate or store anything. Therefore it evaluates to empty. 
I did, I got 'undefined'. I tried using async/await, but those give me syntax errors...
async/await gives me syntax errors, is that normal?
Hi /u/mehulmpt, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Depends on the browser 
Hi /u/Gdavis84, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This made me actually spit my food out of my mouth 😂
Hi /u/DinamoCode, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I rather use an older method to avoid these issues. So I'll pass on async/await. &amp;#x200B; Are there any ways waiting for an asynchronous process to finish?
Only `.then()`.
thanks for this q&amp;a. the discussion? idc. do we get the syntax? okay! ty
\[GJS\]([https://gitlab.gnome.org/GNOME/gjs/wikis/Home](https://gitlab.gnome.org/GNOME/gjs/wikis/Home)) resembles your comment. With Ubuntu/Gnome you can write "native" GTK applications with Javascript. GJS is just another JS runtime like Node with a different standard lib, but it comes installed with the OS.
Yep. Promises or callbacks. 
Thank you sir I apppreicate it! And thank you for your understanding. 
Agreed :)
Ok. I didn't notice webapp doesn't have direct access to user filesystem. I need to study on that. May I know how do you write a new SQLite file to user local storage? As, SQLite.js library doesn't seem to support exporting data back to SQLite file.
#Why?
Also, for webapp, user can close the browser anytime, how can I ensure all changes are being written back to Google Drive app data folder, before user quiting the browser? Or, this is one of the shortcoming of webapp, and I should solve this using desktop based electron app?
I’d like to see this “code”... 
That’s what voting is for. Cheers! I just downvoted you 
Taken from the wiki: "Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix. The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system." 
so as for local storage with webapps, your choice is pretty limited. you can use the [localStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) but your data has to be stringified, which you can do. You're probably going to want to keep the SQL file in memory, and when you need to persist it, write it directly to google drive. Since `SQL.js` can export a uint8TypedArray, you can then write that data to Google Drive (you may need to turn it into a blob first, but that's doable). You're probably going to want to just export and save the database and reupload to google drive whenever a user makes a change. That way, you don't have to worry about saving data when the user closes the browser.
Great stuff dude, keep it up!!
Thanks. I will then do some experiment with local storage API, and https://stackoverflow.com/a/24966298/72437 , to see whether it can work fine with a complex SQLite file.
&gt; That’s what voting is for. Nope. Voting is for submissions that follow Reddit and sub rules. The users who have been deleted by the admins for blogspamming this sub would know.
Wow this is weird. &amp;#x200B; So adding a delay before you call the move function makes it work. (Tested with a 5 second delay) &amp;#x200B; So if you are fine with a bit of a delay try that, you can probably go much shorter than 5 seconds. &amp;#x200B; But even if you don't add the delay the callback for the move function returns as if the move succeed. I also tried having it remove the bookmark that calls the "onCreated" event and then just create a new one but even that doesn't seem to work. &amp;#x200B; let defaultParentId = "2"; chrome.bookmarks.onCreated.addListener(function (id, bookmarkObject) { console.log(bookmarkObject); if (bookmarkObject.parentId !== defaultParentId) { chrome.bookmarks.remove(id, function () { chrome.bookmarks.create({ parentId: defaultParentId, title: "TEST" + bookmarkObject.title, url: bookmarkObject.url }, function (result) { console.log("result", result); }); }); } }); &amp;#x200B;
adobe acrobat also has a javascript environment, if you enjoy pain
# Evolution Aquerium I made a flocking simulation based on [Craig Reynold's](https://www.red3d.com/cwr/index.html) Steering Behaviors It's also implements Genetic Algorithm and mutations. demo : [https://](https://github.com/anuraghazra/EvolutionAquerium)[anuraghazra.github.io/EvolutionAquerium](https://anuraghazra.github.io/EvolutionAquerium) repo : [https://github.com/anuraghazra/EvolutionAquerium](https://github.com/anuraghazra/EvolutionAquerium) &amp;#x200B; inspired by Daniel Shiffman's YouTube Channel [The Coding Train](https://www.youtube.com/user/shiffman) and [Coding Challenge #124: Flocking Simulation](https://www.youtube.com/watch?v=mhjuuHl6qHM&amp;t=1978s)
lol the slide operator
Really good! Maybe making videos a little bit shorter might be a good thing, however, it's good so far. One little hint - create a playlist and split your content by its meaning, would be very easy to find things you need through specified playlists rather than lots of separate videos. Keep it up and good luck!
By the way, you can start covering very new things, for example like hooks for reactjs, or optional chaining. The last one is only in consideration to come, but there lots of things that covered not so much. Also, there are plenty of project's structures that really helpful to know, especially for newbies, they don't see a big picture yet, but it's important to start seeing it as soon as possible (in very my opinion). For instance, I find Atomic Design as a good one, but Presentational and Container Components to start with also good.
I was thinking of a prism/lens/webcam setup for some TIR.
Just mine - to explore what appears to be the boundaries of what JavaScript has done with fingerprints.
That's what she said
Thanks, appriciate it! 
I greatly appreciate your feedback, will work on everything you had mentioned! Thanks!
Sure, with bash available on multiple platforms you can easily write shell scripts which are portable. Mine is an opinionated take, I am in no way arguing if shelljs is the best way or the only way. You should be using whatever you are most comfortable with. I used shell js mainly for deployment scripts which had to be run on multiple servers which could have either a Linux disto or Windows Server running on it. The servers were not controlled by us (my company) and there was no way to ensure availability of bash on the windows server. Thus I ported an already esisting shell script into a node.js script. It suited my use case. Doesn't means it's the best option for any other scenario. Let me know if there's another solution. Will be happy to learn.
My first though was "why xml?", then I checked the readme and see &gt; `generate-resume &lt;path-to-JSON-file&gt;/resume.xml` &gt; path-to-JSON-file I'm confused.
I admire the effort. But, depending on the drummer, it might be easier to just get your drummer to play with a metronome
Is there a configuration file that is needed to be passed in?
Until the promise resolves you're going to get undefined on that variable. grtData is probably called and returning before the promose is resolved. 
Doesn't apollo cache already do this?
Shoot! I forgot to update the README file. Initially, I thought I would use JSON file to store data. Later, I decided to use XML instead since I figured this would make writing text in markdown easier. 
No JSON config file. Whatever config you need to add you can do that in XML file. Please check out the reference XML file in bin/reference-xml folder. 
All modern browsers should support it. Unless you are using IE to test your code.
Yep, came here to say this. He's saying block statements don't create a new scope, yet his console.logs are giving different outputs. Then suddenly: "Oh look, we're using let now".
So posting an article that’s useful and relevant to this sub isn’t allowed because they haven’t participated in discussions previously or because they wrote the article? if you disagree then downvote, that’s your reddit power. But as long as it’s new and relevant to the sub then let the votes sort it out.
It's ugly that way. Separate data from ui. Store the entered values in an array, and render the table from that. It's easy to iterate the array to find what you want.
Sort of, not quite and not always. The data may be flat but it's not really "normalized". Plus it's not transparent, it's opinionated and limited - it exposes just a few methods to interact with the cache. Also, it's an \`apollo link\` so it works with \`apollo\` but that's not always the case. \`graphql-normalizr\` is just a fast and lightweight tool that you can use to normalize the data, it's your job to store and manage it.
I would be extremely grateful if you could pop an example on my stack overflow posts please. I believe that's how I have search setup
Promises are callbacks in disguise. Since callback hell is real people found other patterns (promises) and added some syntax sugar (async await) to fix that. Is this helpful? Can you elaborate your question?
The time you spend solving this is the same time you invest learning React where data is cleanly separated from the view. Dumping state into the dom is a sure recipe for chaos. Jquery itself is a relict, and the type of code it encourages is the reason it is fading away.
You're not training the algorithm "in the browser". You're simply using a pretrained model to make a prediction. 
Isn't it the same for android development? Try develop something for android without installing some packages from android package manager.
[removed]
So the exercise said the learning objectives are algorithms, data structures and performance analysis... You went with a direct approach which doesn't seem to care much about performance (it's not the _worst_ approach, certainly, but it also doesn't seem to make much of an effort to be efficient) and does not use any sort of data structure. While the solution does work and is valid, to some extent I'd tend to think that it fails on some of the objectives of the exercise. I'd suggest looking for a solution that takes this into account. You can read the ideas proposed in the link you provided. Mainly, think about this: You're doing this operation... const i = q.indexOf(char); ...a **lot** more times than it is actually needed.
After watching your video I logged starting and ending of getExchangeRate() and getCountries() functions and saw that they executed one after another. So I changed your code a little bit to make them work in parallel. `const convertCurrency = async (fromCurrency, toCurrency, amount) =&gt; {` `const exchangeRateFunc = getExchangeRate(fromCurrency, toCurrency);` `const countriesFunc = getCountries(toCurrency);` `const exchangeRate = await exchangeRateFunc;` `const countries = await countriesFunc;` 
this looks great! off the top of my head i see it could use a feature to get the relative major/minor of a given major/minor scale. 
- https://github.com/bbc/waveform-data.js?files=1
Thanks for the feedback, I agree with you! If you liked the tutorial, you can leave feedback on youtube as a comment, and request what would you like me to cover in the next video, higly appreciated! :)
&gt;multithreaded &gt; &gt; &gt; &gt;Node is absolutely single-threaded. &amp;#x200B;
Check out [scribbletunejs](https://scribbletune.com) too, might be relevant to your interest
Really nice! I wonder whether you can bring the idea of keys in here - converting Gb into F# when in E major, converting F## to a G in G major. Also, more broadly, the idea of double sharps / flats (maybe this exists - I’ve only looked through the Readme). But these are only additions to a really cool idea for a lib!
That's quite insulting and stereotype.
You should definitely check out some (free) React courses. They explain a lot of basic stuff and how to build React applications.
While I'm all for generated resumes (having maintained mine ever since I've graduated high school), my immediate reaction to your example is that it looks... well... ugly. Luckily, now that you have a proof of concept, it shouldn't be to hard to improve aesthetics.
Node's queue is single-threaded. However the underlying engine that runs Node (V8 engine) is multi-threaded. 
I wonder if it is a library of pre-sampled notes or if it calculates the waveform on runtime?! 
"The results will surprise you"
Thank you! Please feel free to contribute, I’ve learned a lot while creating it
Метеор &lt;3
If you're on Windows using Docker is a con by default. But overall having a unified development environment that does not affect local host is great. Of course, it requires to sacrifice a bit of time to set-up but it's worth it. No more situations where the project does not work on someone's computer unless they messed up configuration.
*Narrator: They did not.*
It’s pure musical notation and math, you can translate all notes to MIDI or frequency to play them via WebMIDI or web audio
'is becoming' Yeah right
Well that kind of did not answer my question. Midi is also just a notation. Every note has a frequency no matter what source though. And for the part of translating, that it called transposing and its very easy to do it in your head. **My question is: do you create the waveform yourself by using some oscillator library for example?**
Ah I see. So there are no sounds in this library. Its pure notation and you have to use a vst plugin or whatever midi capable tool to actually get sounds for the notation you can create with your tool here?
Any relation to django?
You could also create a tree. Could be interesting to find out how to balance the tree when inserting new elements and such. Let me know if you need any help. 
React should be #1
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
As you might have noticed I don't have experience with ai. So I need to make my model "offline" then load it on request and calculate the results for new data, is that it?
Its not a con.
I use docker containers to run my mysql, redis, aerospike and mongodb for local development. The setup, whenever a new dev joins, is super fast and dev environments are consistent for all. 
Why do you think that? I wish I was 😄
Can you elaborate on this? 
&gt; converting Gb into F# when in E major, converting F## to a G in G major No, that would be awful.
Not to do across the board more to do as a normalisation. I think this would be pretty useful for correction suggestions in a given context.
&gt;When you send a message that includes media, you must provide the ID of the uploaded media in the request body. You must also specify the type of media that you are sending: audio, image, or document. When the request is received, the media is uploaded to the WhatsApp server and sent to the user indicated in the to field. https://developers.facebook.com/docs/whatsapp/api/messages/media/
I know what you meant and that - "correction suggestions" is precisely what I mean is awful. You don't "normalize" notes from sheet music - an F## written down is *not* a G. Accidentals and key signatures are very much not the same thing. 
The usage wouldn’t be input from sheet music it would be for software for students. Something I’m actively (albeit slowly) working on. Granted this may be achieved in other ways but while sheet music might not make mistakes, students certainly do.
The usage wouldn’t be input from sheet music it would be for software for students. Something I’m actively (albeit slowly) working on. Granted this may be achieved in other ways but while sheet music might not make mistakes, students certainly do.
I really do wonder if you’d have responded to me this bluntly in person. Given you lack any context for my suggestion, assuming something to be “awful” from the get go seems like a reaction that is reserved for online discussion only. Oddly I imagine given we seem to have interests in both music and programming we’d probably get along IRL. I hope you’re having a happy holidays.
I made one portfolio template with Vue and GSAP and you can download it and use it for free. Clean Design and GSAP and more here: https://coidea.website/categories/freebies/mh-portfolio-vue-js-and-gsap-template Any suggestions or critics are welcome. Cheers. 
we're about to implement it at work, and have only barely scratched the surface. i'd love to hear a reason not to, care to expand?
&gt; [It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account.](https://www.reddit.com/wiki/selfpromotion)
Currently sharp / flat is more of a stylistic decision in music-fns, I have nowhere near the experience you guys/girls seem to have :)
Given that, I think you’ve done an even better job with this - great work!
More or less yes. 
Thanks! I really appreciate it!
Containers for development are a terrible idea. They are ok if you use them as an alternative for installing databases like MySQL or Redis on your system. That is instead of using your system's package manager to obtain the software you just pull from DockerHub the exact version that you need. But running the code that you develop inside a container is a terrible idea. It's an unnecessary overhead. You should use the OS that best supports your programming tools. Plenty of programming tools like file processors and test suites don't work well inside containers. For example, [mastodon discourages the use of containers in its development guide](https://docs.joinmastodon.org/development/overview/) I like to look at containers as deployment targets. It makes things much easier if you only use them to create the perfect production environment for your app, rebuilding the container as little as possible.
As /u/ugwe43to874nf4 said, your solution isn't very efficient. Mine is probably not perfect either but it does improve efficiency in a few ways. By first sorting the array so that the longest strings are first, and then iterating over each letter, we immediately break the nested for loop if a letter is not found, and break the parent loop if all letters match. function test(string, array) { const sorted = array.sort((a, b) =&gt; a.length &lt; b.length) let output = null for (const word of sorted) { let matched = false for (let letter of word) { if (!string.includes(letter)) { matched = false break } else { string = string.replace(letter, '') matched = true } } if (matched) { output = word break } } return output } test('abppplee', ['able', 'ale', 'appple', 'bale', 'kangaroo'])
Probably not we used to have to use flash. 
Yes... You can read the file in with JS, and post Chunk's to an aspiring end point and append then to a file on the server. This will require a relatively modern browser IE8+ should work, but they server could be classic asp. If you want the server code in JScript, that should be doable as well. But COM in JScript is a pain.
Similar to how you when you use modules you have use strict enabled, by introducing new feature they could do something like binding "this" automatically so it behaves in classes as expecred without breaking backwards compatibility. And they did.
I think the only real cons are docker for Windows/Mac start with the user, not the system. And the docker host environment is a vm, so volume shares with the main os are wonky and not recommended for life data (not too bad for backup, import, export though). I've got localize scripts for the of the sub projects I'm working on that work well. DB, devauth, API. I'm mostly centered on the front end spa development and docker let's me have the rest running in the background easy enough to update and not think too much about. It's also useful for being able to setup/teardown for integration tests or to reset the backed DB to a known start. I use shelljs and the scripts all run cross platform without too much trouble.
My docker setup scripts run in Windows Mac and Linux via node. And I can run all the services I'm not actively working on in containers. I just leave them running and update every few days. It works great. I'm disconnected with a pretty fast tear down and rebuild. The DB in a container is extremely useful. But so are the other services I'm not working on.
Very nice job. Excellent detail on the documentation.
Can you point me in a direction online? I'm having trouble finding a resource that doesn't involve php. 
Yeah I get why you did what you did because you can go line by line and rewrite your shell script using shelljs syntax but JS is a dead simple language to pick up for exactly this kind of thing. I'm assuming you just needed to do a bunch of filesystem stuff. I just rewrote some of our deployment shell scripts using Node and you just get such a greater degree of control and cleaner more readable scripts using Node's filesystem and child process modules. 
The second equivalence is wrong
Very nice! Are you going to add any method for converting from the solfège naming convention? (Es. Do, re, mi, fa..)
Your code gets the job done, my biggest complaint is your variable name choices, single letter variable names take more energy to read and maintain. Here's what I ended up doing: export function isSubsequence(needle, haystack) { if (needle === haystack) return true; if (needle.length &gt; haystack.length) return false; let previousIndex = 0; for(let needleChar of needle) { previousIndex = haystack.indexOf(needleChar, previousIndex); if (previousIndex === -1) return false; previousIndex += 1; } return true; } export function findLargestSubsequenceSorted(parentWord, sortedPossibilities) { for(let possibility of sortedPossibilities) { if (isSubsequence(possibility, parentWord)) return possibility; } return null; } export function findLargestSubsequence(parentWord, possibilities) { return findLargestSubsequenceSorted(parentWord, possibilities.sort((first, second) =&gt; second.length - first.length)); } It's a bit longer, but it feels easier to reason about for me, especially separating out the job of detecting subsequence in general. From there I added these unit tests: import { findLargestSubsequence, isSubsequence } from "./main"; describe('subsequence word', () =&gt; { it('matches simple sequences', () =&gt; { expect(isSubsequence('a', 'a')).toBeTruthy(); expect(isSubsequence('123', '123')).toBeTruthy(); expect(isSubsequence('h', 'haealalao')).toBeTruthy(); expect(isSubsequence('hello', 'haealalao')).toBeTruthy(); expect(isSubsequence('haealalao', 'haealalao')).toBeTruthy(); expect(isSubsequence('ho', 'haealalao')).toBeTruthy(); expect(isSubsequence('o', 'haealalao')).toBeTruthy(); expect(isSubsequence('ao', 'haealalao')).toBeTruthy(); expect(isSubsequence('aaabbb', 'aaaabbbb')).toBeTruthy(); }); it('does not match simple sequences', () =&gt; { expect(isSubsequence('fail', 'haealalao')).toBeFalsy(); expect(isSubsequence('something', '')).toBeFalsy(); expect(isSubsequence('a', '')).toBeFalsy(); expect(isSubsequence('aaabbb', 'ab')).toBeFalsy(); }); it('matches complex sequences', () =&gt; { expect(isSubsequence('1234567890!@#$%^&amp;*()qwertyuiopQWERTYUIOPzxcvbnm,./:LKJHGFDSAZXCVBNM&lt;&gt;lkjhgfdsa```======', '1234567890!@#$%^&amp;*()qwertyuiopQWERTYUIOPzxcvbnm,./:LKJHGFDSAZXCVBNM&lt;&gt;lkjhgfdsa```======')).toBeTruthy(); expect(isSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')).toBeTruthy(); expect(isSubsequence('你好', '你好')).toBeTruthy(); expect(isSubsequence('你好', '你好')).toBeTruthy(); }); it('does not match complex sequences', () =&gt; { expect(isSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')).toBeFalsy(); expect(isSubsequence('________', '*')).toBeFalsy(); expect(isSubsequence('*', '________')).toBeFalsy(); expect(isSubsequence('你好', '再见')).toBeFalsy(); }); it('returns the correct largest subsequence', () =&gt; { expect(findLargestSubsequence('a', ['p', 'i', 'e', 'd', 'a', 'f'])).toEqual('a'); expect(findLargestSubsequence('123456789', ['12', '234', '345', '567', '678', '789'])).not.toEqual('12'); expect(findLargestSubsequence('123456789', ['13579', '5555555', '666666666', '999999999999', '000000000', '111111111'])).toEqual('13579'); expect(findLargestSubsequence('123456789', ['1', '2', '3', '123456789', '4', '567'])).toEqual('123456789'); expect(findLargestSubsequence('abcdefg', ['1', '2', '3', '123456789', '4', '567', 'a'])).toEqual('a'); expect(findLargestSubsequence('bad', ['1bad', '2bad', '3bad', 'bad4', 'bad5', 'badd', 'bbad', 'bbaadd', 'ad', 'ba', 'bad'])).toEqual('bad'); expect(findLargestSubsequence('sep-----arated', ['sep---------------arated', 'separated', 'sepparated', 'sseparated', 'separatedd'])).toEqual('separated'); expect(findLargestSubsequence('这是一个中文词', ['这词', '', 'zhe', '词', 'flowers'])).toEqual('这词'); }); }); Having succinct code like yours is advantageous in many ways, but having discrete working units can really help a project's longevity. I understand that this particular question is a single question in a long list of challenges, and you can't treat each challenge like a long term commitment, but learning to apply these principles will help you write better, more easily maintainable, and more easily understandable code.
Sounds like a nice addition. Can you open an issue for it?
Super light alternative (307 bytes gziped) to Lodash.get and Ramda.path! &amp;#x200B; [https://github.com/micheleriva/mjn](https://github.com/micheleriva/mjn)
Sure
Exactly
You can add attributes to your form to point it to an endpoint that your server file creates. Read up on https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data
Ah, great. Thanks for the pointer! 
Nice ! But a PNG is not usable and will turn blurry when printed. Can you make it output a PDF file ?
The very basic way is create a button that submits the data to the backend, but if you do it "purely" with html and js you are going to have some work. Create a button like this: `&lt;button onclick="sendData()"&gt;Send &lt;/button&gt;` Then you create the function \`sendData\` (in this case in the global scope) and implements it to send a request through [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) to your api endpoint. There are many tutorials to use XHR purely, by "purely" I mean like, in real world, with shared code in javascript, there are many "wrappers" that make it easy to send requests, but it's really good to know how it works under the hood. For help with your \`sendData\` function, you may do something like this: supposed that your student name tag has an id of "studentName": var studentName = document.querySelector('#studentName').value; // Then send to backend
Sure! Will do it in the next update!
It depends on how your API responses. You mentioned REST API, Therefore, I assume your API returns a JSON response. In this case, I recommend XHR (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). But if your API returns a HTML document, just use the basic HTML form (https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data).
I won one. Thanks for the heads up!
If the data is static, why not use a sorted array and two binary searches?
Why XHR over fetch?
Knowing how to use the stuff inside containers is way more important than knowing about containers, and that will run in a local installation more intimately. Anyhow, virtualization shouldn't be so complex you can't pick it up as you go.
Looks great! I love the idea of building things as a method of learning a subject. u/duivvv Just in case you haven't spotted already, there's a [similar functional library](https://github.com/danigb/tonal) that shares some philosophy with yours. Might be good for sharing/inspiration 👍
We use containers for development for many of our projects and it is great because it gives a consistent environment with production and allows us to not pollute our development machines with our code dependencies. This is less of an issue for dependencies coming from npm or PyPi but much more important for those coming from something like apt since that installation is much more specific to OS.
I didn’t :) thanks for sharing
ok, thank you
Uh, what?? No, that doesn't answer OP's question at *all*. 
Well, if you click the link you will see that indeed it does answer MATE! 
You want to trigger the device's Share menu, I presume - for that you'd use the Web Share API, but that's only going to work on Chrome for Android. Plus I'm not sure of a way to directly share the image (not just the url to it) from JS, but to be fair I haven't used the API much. 
Did you? Because that's about the Whatsapp Business API, which one would use to manage *their own* Whatsapp *business* account, *mate*. Never mind that it's the completely wrong direction to go in - even if it were a generally available API, I'm pretty sure OP isn't asking to handle users signing into their Whatsapp accounts on his/her site, giving access to their contact list and granting message sending privileges just to share a freaking picture. 
Now I see that i'm completely wrong, I was thinking that he wanted to do something like onClick={sendTheSongToWhatsappApi()}, sorry, long fucking week
If I click on create nothing happens, but I get the following error message in console: Error while reading CSS rules from https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons SecurityError: Failed to read the 'cssRules' property from 'CSSStyleSheet': Cannot access rules
Guess you’d be able to do that with the YouTube APIs 
I didn't test it on Brave Browser but I think the error is related to it because I use some native Chrome and Firefox libraries to perform the rendering operation, take a look at the source code and try tweaking it a bit for your browser ;) 
And you are making yourself look like a dumbass online. Go outside
Nice! Teoria is another one worth checking out.
Thanks. Nice workaround. It works with delays longer than 2 seconds. Still looking for an explanation though.
Note sure if you knew this but creators can upload their own thumbnails so, for the most part the thumbnail won’t actually be in the video.
Yh I guess but I’ll probably try find the frame in the video and if it isn’t there then it just wouldn’t load? 
&gt;console.log(hasAccidental('D')); // &gt; false Story of my sex life
In music theory, sharps vs flats are not really stylistic. They are more like "modifiers". So, for example in G major, F# indicates an accidental on the 7th, whereas a Gb would be more like saying it's a "modified" root, which hurts readability due to being an extremely unusual construct (in the context of G major).
I recently wrote a similar library for my own use (not as many features and not publicly available). I was working with synths and experimental music, so I wanted something that could be deeply deconstructed. A note is just a reference to a specific frequency. Letter name, sharp or flat are just metadata. You need to define the context. This is where we use a function that converts a note number into a frequency. That function takes two parameters - A fixed frequency on which to base the rest of the notes, and the number of discrete notes in one octave. If you're working in a traditional context, the parameters are 440.0 and 12, respectively, meaning the note numbers match up with standard midi. But those numbers are completely arbitrary in an experimental context. So each possible note is represented by a different number. To shift a note by an octave, you add or subtract the number of notes in an octave. To find out the "pitch class," you just do note number % octave to get a number from 0 to (number of notes in an octave). In theory, this all works from a data processing standpoint. But traditional music notation is more abstracted. It requires 12 notes per octave to function correctly. In addition to that, notes can have more than one name, depending on their context. So we need to introduce the concept of keys. A key is a sublist of all available notes. A major key can be represented by [0,2,4,5,7,9,11]. If we wanted to generate a major key based on what we've traditionally called F4, we take F4's note number (65) and add it to each scale degree to get [65, 67, 69, 70, 72, 74, 76]. But that still doesn't tell us if 70 represents A# or Bb in this context. We need to apply a context-aware naming system. So this is the part where we tell the computer that music uses 7 letters to describe notes. We'll use the enumeration [A,B,C,D,E,F,G]. 65 is an F, so we distribute the letters in order, looping after G. [F,G,A,B,C,D,E]. Since music is weird, we need to check for whole steps and half steps while we do that. F to G should have a difference of 2. 65 and 67 have a difference of two. All good here. Same for G to A. But when we get to A and B, the difference between the letters is 2, but the difference between 69 and 70 is only 1. So we need to bring B down by one to fit. At this point, musicians should see where this is going. The note number and the letter name haven't changed. We still call it B, but with an extra piece of information that tells us it's lower. Now it's B flat. You could theoretically raise or lower a note as many times as you want with more or fewer sharps and flats. I represent accidentals as an integer that modifies the base value. The name of the note, rather than being a property of a note object, is calculated only when it's needed, in relation to the key you're working in. 70 is B flat in F. But in they key of B, 70, ostensibly the same note, is called A# instead. The other advantage to doing it this way is it makes transposition trivially easy. Note names and strings don't get in the way. Everything is shifted in whole number intervals and the note names are calculated separately afterwards. I could go on describing how pitch names change depending on whether the note is part of a chord, which voice it is in the chord, whether it's diatonic or not, part of a secondary function, or within a temporary modulation where the key signature doesn't change... But that feels like enough for today.
Sorry, what's store availability data?
The table headers don't seem to account for the width of the scrollbar in the table body, causing them not to line up and look quite bad: https://i.imgur.com/PrYCthm.png 
I took a quick look at it...appears to be a library built to query a physical stores open/close (business) hours/availability.
That makes a lot of sense. I’ll look into a way to change it.
Great tutorials, thanks.
The js should be the similar for php or asp file uploads. Just search for asp file upload or something.
Second this, if it isnt avaliable from youtube’s api youd have to load the video and find the time point where the images are identical. Which isnt practical from a plugin perspective. 
The suggestion is to pull the data out of the HTML so you can manipulate the raw data and then have it update the table accordingly. The way you have it right now, you're storing the data in the HTML which is causing you to parse the data from the HTML each time just to figure out what you should do with it.
kk, no worries :-)
"Wrong #3: Three Not-A-Real-Number Values: Infinity, -Infinity, NaN" yet another example of how devs don't know what is IEEE floating point
That is exactly how reflectiveSingletion explained it: it let you know if a store is opened at the current moment, and gives you others information like the next date the store will close with other helpers. 
I'd rather use photoshop/illustrator, because it has font selector and font-preview built-in, but you obviously worked on those points and I will check out what you did.
When we get into experimental and non-tradtional music, the boundaries between music theory and physics get really interesting. Notes aren't always the same frequency due to temperament. It used to be the case that pianos were tuned differently than today and classical composers would write in "more difficult" keys like C# because each key had a distinctly different feel. Some types of music make heavy use microtones (things like the quarter tone between C and C#), and some modern music like percussive guitar style (think Andy Mckee) is pretty much untranscribable. Then there's stuff like black music, which is basically spamming every single note repeatedly in a midi file, but encoding the music in the volume parameter of the notes. Music is awesome. 
I work for a big company in the UK &amp; they specifically hire front end or back end Devs but then once employed you tend to work on a bit of everything. But there's no obligation to look at the front end if you're a Java dev, but if you're interested in it then you get the chance to
Yes and no. They don't necessarily hire more specialized people, but they hire them for more specialized tasks. Full-stack will always have a place, they're great for planning projects and bridging gaps between departments and specialists.
I dont think so ! Since im a full stack js developer i dont feel that im bad at front, no im good and my job is a front end developer but im using same syntax and same programming language in the server side in my freelance, what i want to say Javascript is the future, and its an exception specially when we talk about the front and the backend difference ( except somethings that any normal developer can manage it ) because a server is not the same as the client, im talking about the behavior and how it works etc... 
&gt; If you are lazy lol wat? 
&gt; But say I have a form with 30 input fields. This is when I try to abstract to data structure, and then map over it with a `jsx` function.
Is it possible to modify openings and closing after a store has been created? That seems like something that would happen often.
I'd try to use [cloneNode](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode) first.
From my own experience, if you're a front-end dev, it helps if you, at the very least, have a general idea as to what's going on in the back-end when you're discussing things with the backend developers, and vice-versa if you're a backend developer. Having said that, I'm under the impression most companies want folks who are specialized and have cutting edge expertise in their particular field. 
There's no way to change the tag name of the target element if you use cloneNode. Transferring the innerHTML and the attributes seem like a more fine grained and flexible clone alternative (except the event listeners probably). 
Yeah, was going to complain about that too. Floats in js are fine. As fine as in any other language that adheres to the standard. 
This is probably the weirdest package I've seen
Yes, those are issues but they might not matter depending on the use case. 
Great first issue :) Thought about this but did not find any use case, gonna ship it in 0.2 thank you.
Do you see the "closed" or "opened" beside each results when you search "Starbuck New York"? Now imagine the same thing, but on your own company website :)
Yeah I got that but the naming and API in general is just weird
&gt; Thanks to Cryptocurrency, we have entered the era of the Web 3.0, and there is no looking back.
Experienced dev here: this feels like a click bait advertisement to me. 
just expressing our views man... gotta find the code angels out there
Not to add a downer to this, you'd also have to determine if the thumbnail is actually in the video, cuz it might not be. So this is going to be process intensive since on worst case runs you'll need to image match the whole video.
What sort of connection do you have which requires this sort of reconnection? You're talking about a 200 response which implies an HTTP connection - but HTTP connections are transient - so the question is a little confusing.
It depends on the employer, and the industry is big enough to accomodate both those who agree with that famous idiotic article by Brad Frost ("a fullstack dev cannot be as good as an army of specialists") and the "we want good engineers, the technology is irrelevant since it changes so fast anyway" I currently work for a large company and am full stack, my previous company was small and I was a FE specialist... I think the way you put it is too simplistic. From what I have seen it boils down to the tech leads past experiences - if they tried full stack and then got a lot of grief because of, say, poor server security or badly implemented responsive design, they will then ditch the idea and hire specialists. And viceversa, if they experience lots of delays because FE and BE devs are constantly getting in each other's way and delaying each other, then they will go for full stack. Or else it's just personal taste If you are full stack and it goes out of fashion you can always have a CV with just your FE or BE projects, whereas if you are a FE specialist you cannot fake being full stack
I bet you have an MBA. I mean it just FEELS like it you know?
nope self taught entrepreneur . 
Nearly everything he is whining about is a non issue of you run a linter. What a wasted article.
Experienced devs are skeptical and doubtful before they value pragmatism over insipid fantasies of a web development movement driven by a lack of experience. Some of us are old enough to remember what the web was like when no one knew how to take advantage of JavaScript, and don’t care to repeat it.
The question is not specific enough. ES8 through a transpiler, or natively? Which features? Because those release names are honestly mostly perfunctory. Support for the features is mostly implemented one by one by vendors and compiler makers.
Seems like an inherently less testable paradigm which unnecessarily couples the success or failure of the promise with the receiving function all for the sake of slightly “nicer” looking code. I’ll pass.
I don't really understand what you're talking about with the "best range", but [this code](http://jsfiddle.net/3gv7tbpy/1/) hides or shows CPUs that are within 10% of the specified price. It's using [Vue.js](https://vuejs.org/v2/guide/) which I highly recommend over jQuery for this application. Vue is like React which other people are recommending, but I don't know React and I feel like Vue is probably easier to learn. &amp;#x200B;
What are you expecting in normal (fast) internet environment? Since the connection is fine and there is no connection failure, your code won't do the reconnection.
'Junior devs are always getting bogged down with the latest ideas or fantasies, they don't finish.' Oh look I can make sweeping generalizations too! Fuck I hope we never work together. 
basically in production the server reboots overnight and I want it to automatucally reconnect to the server once it's back up so in order to do that I thought to just try to reconnect every x seconds till it's back up. to simulate this I'm just killing the server once everything is loaded and functioning. when I kill the server in slow internet the timer will fire off every 5 seconds till I reboot the server,and reconnect after that. When I run the same exact code in fast internet that timer doesnt run at all 
I don't think so.
I suggest you post related code to get better help.
Thank you for your comment. Although it might be a bit less subjective and more constructive, it is definitely valuable.
fragments are syntatically cool but they're composed into divs, why is this a thing every beginner should know? it's sugar
It's not "ES8" - it's called ES2017. And as it includes async/await, I'd expect a very large proportion of devs to use it.
"ES8" isn't a thing. ES6 is not *officially* a thing, since it was renamed to ES2015 before it was published. That said, I'm guessing that you mean ES2017 (ES6 = ES2015, ES7 = ES2016, ES8 = ES2017), which is almost two years old. The only feature from it that most people would have used is `async`/`await`. So is your question really 'Do you use async/await', or is it 'Do you use modern JavaScript'?
Subjective is all we have bro - there are no truths in software development, only opinions ;)
PWAs are a also great way to speed up subsequent page loads for asset heavy sites. 
&gt;[It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account.](https://www.reddit.com/wiki/selfpromotion)
I may be wrong but fragments don’t resolve to divs. A Fragment tag will not show up on the DOM at all, only rendering the inner content. It’s a way to get rid of wrapper divs entirely. 
Like others said doing this would be either not possible because of custom thumbnail or slow but with that said the youtube player has a feature I think its called storyboard, basically when you hover your cursor over the timeline it will show you a preview image, you might be able to match images in the storyboard wih the thumbnail to get an apprx time.
I'd find a different hero image... It's really noisy and a bit hard to read the text on it.
I haven't checked the html served, but I think it needs a meta tag for device width ratio. On mobile there's a good bit of horizontal scrolling and the table goes off the left side of the screen.
With some YouTube videos the thumbnails are created automatically by taking a snapshot a specific times in the video. It would be great if all of the ones that are auto generated are based around the same times depending on the video length. But yeah I guess I’ll go for something more possible. This seems too much work for something insignificant. Thanks though. 🙏 
Sorry bro, there's a better project out there for you somewhere. 
If you place a username / password in their (obviously you'll need to be a t-mobile account holder, I'm ... um... not sharing mine :P) The thing is it just ... seems to stall on an api called "auth" I'm almost wondering if they detect the puppeteer tool and block it... I was hoping to create a tool to monitor my usage just for shits n giggles as they say. (I'll be headed to bed soon, but I'll try suggestions and give feedback as quickly as possible, tomorrow)
Try changing the user agent? T mobile probably blocks puppeteer and selenium in order to prevent brute forcing passwords. 
If it's a sorted array and you're looking for the min/max, binary search isn't necessary, and it's actually the worst case scenario (still just O(log n) though). Just take first/last directly.
Why in the world are people introducing Jquery into react projects!?!? That’s like plugging a VCR into a virtual reality headset..
Might want to elaborate on the features you are talking about. 
Is this really a big deal? Generic change handlers for fields are straightforward, so all you have is the JSX after that. From there, you can either write a function that builds your JSX from some internal representation of the form, or just break the form up into a file for each form group and give each group a form state slice and handler. Pretty simple refactoring.
What? Who did such an abomination? I can tell you who didn’t... me! There are two separate versions: one for react, one for jquery.
Found [this](https://medium.com/level-up-web/developer-roadmaps-all-in-one-place-75c0402db0e0) nice post on web developer road map. Biggest I've seen so far on the internet! 🤓
Don't duplicate things. Another place that will be forgotten the next week. Contribute to what's already there.
Are you using Typescript?
No. Not for this project.
Anyways, this kind of project structure might help. ⬇ [https://github.com/gilamran/fullstack-typescript](https://github.com/gilamran/fullstack-typescript)
I am using Vue.js and vanilla JS. Thank anyway...
This one is in typescript. But the same structure will work with JS too. Good luck!
What does this have over awesome-(insert tech here) github pages? As far as I can tell this doesn't offer anything too much more than a google search would. Especially over time when you have bloat from the hundreds of people who write articles.
Yeah it will work without any problems.
There's an extra pair of curly brackets on this update
Yeah it will work without any problems. Since the main problem was that your current structure couldn't find the file, since the shared code was outside the client code's root, which is not the case in the setup I sent you the link to.
The whole site is also not very mobile-friendly, though what can you do with a giant table?
If you are using Webpack you could create a **shared** folder and add an alias to it. Read more about it here [https://webpack.js.org/configuration/resolve/](https://webpack.js.org/configuration/resolve/) For node you can use **module-alias** [https://www.npmjs.com/package/module-alias](https://www.npmjs.com/package/module-alias) Then you should be able to import from both sides like this import UI from 'shared/utils/ui';
There’s a http://frontendmasters.com app. Might be worth a look.
For a list of "modern javascript" features, refer to [tc39 proposals](https://prop-tc39.now.sh/) People should use async/await when possible, and when performance is not that much a concern, `Object.entries()` and `Object.values()` for `for-of` loops. ES2018 comes with object rest/spread (finally), which is a good replacement for `Object.assign` for a lot of cases. Async gens are also nice, makes working with streams easier &amp;#x200B; I *hope* people are using ES8+ by now.
‘intention of helping developers master their concepts in JavaScript’ https://github.com/leonardomso/33-js-concepts
Look into responsive tables my man
Thanks
I'll check it out thanks! 
Perhaps, but I was under the impression that d3 is geared towards creating graphs and other sorts of data visualizations? 
https://github.com/getify/You-Dont-Know-JS
I find Github readme is easier to scan through the list. You put url too far on the right, and also, use label instead of adding another type column
True.
Yes, thanks for the report. Is not 100% responsive..
Thanks, i will.
Good feedback!
Good! I'm going to update it.
Hey, YDKJS or Kyle Simpson's courses on FrontEndMasters? What would you recommend?
Both books and courses are from the same author. I would say it depends more on how you prefer to learn. If by reading or by watching. That said, I prefer his videos. He is a good communicator. Also, signing up for frontend Masters you will have access to a lot of content, not only Kyle's. 
Wow! Considering your activity, I wasn't expecting a reply. Thanks! Is there a difference in the content of both resources? I ask because everyone recommends YDKJS but I don't see his videos recommended that often. I was also planning to do Will Sentance's course: The Hard Parts (I think he covers the same things like Tony Alicea's course). Anyway, are you currently learning as well or already working?
I don't think it is a problem, but it would be better if it is put in state - incase your component is accessing the filtered / sorted content and it is the only component that requires the filtered / sorted data. 
I don't think it is a problem, but it would be better if it is put in component's state - incase your component is accessing the filtered / sorted content and it is the only component that requires the filtered / sorted data. Also, it is best to keep your redux state as minimal as possible. &amp;#x200B; Also, if you want to have a redux state variable that contains the data - then you can filter / sort the data in the reducer or action so that your component doesn't become heavily loaded with all the code. Also, this will make things more readable.
Check your github repo for an issue. I've explained it there. :)
Looks really cool! My first though is how does this compare to parsimmon? What was the motive for creating this given parsimmon has a relatively similar API surface area, is inspired by parsec and aims to support the fantasy-land spec too?
I would suggest using a selector to do the sorting rather than sorting within the state object itself. By using a selector you avoid affecting any other parts of your application that consume the projects state (now or in the future). https://redux.js.org/introduction/learning-resources#selectors
When idle, use a laptop. Best way to proceed with programming. 🤓 If you want some really good books to read, then there's O'reily for starters. You can buy it [here](http://shop.oreilly.com/product/9780596805531.do)
Thanks /u/richieahb! I guess they are quite similar libraries, and I actually like parsimmon quite a lot. The main differences are: * Parsimmon is based on promises, [which have their own set of problems](https://medium.com/@avaq/broken-promises-2ae92780f33) * Parsimmon has fluent API, whereas Arcsecond is a true parser combinator library (i.e. It only exposes parsers and combinator functions for those parsers). The only method calls in Arcsecond are the ones that Fantasy Land requires (map, chain, ap, and of)
That's it! Of course, you are right, thanks!
I don't need to construct the tree, just use the tree search on a sorted array. this is the fastest implementation I found: [https://oli.me.uk/2014/12/17/revisiting-searching-javascript-arrays-with-a-binary-search/](https://oli.me.uk/2014/12/17/revisiting-searching-javascript-arrays-with-a-binary-search/)
Yeah I had considered this regarding the API, having all of the combinators hang off as method calls is definitely less pure, doesn’t allow for dead code elimination as easily, although I’m not sure parsimmon is stateful (it seems to return new Parsimmon instances for each method call). As for promises I the main issue for me is error handling vs failure, which is a big deal when designing APIs around this. Definitely keeping an eye on this!
Devdocs.io
I think it’s time now for higher order lists. Curated lists of curated lists. 
Yeah, I read about navigator.share but it doesn't have the capability to share media files
You are correct.
Yeah I thought so, just an image URL
Try hash table each word - list of books
All clicks have query appended to them with the add data.
Not regular google results though.
Notifications squad
Very cool idea, I can't wait to play around with this
[https://freecodecamp.org](https://freecodecamp.org) is a great resource and they phones in mind when creating the platform.
The key is that they want people who can own and deliver on projects/features/products. This usually requires very strong knowledge on at least one part of the stack, and it's always beneficial to know a person understands the entire pipeline for an application.
Very cool idea! Is it open source?
Totally! You can contribute on GitHub, here is the link: https://github.com/Merwanedr/Smithers 
Can you access all the json as an array? and it your text search going to be done in memory?
Honestly getting sick of link farms on this sub...
I usually transform data in the reducer only if it helps most selectors. Otherwise it's a job for selectors and is often using memoization (reselect library)
Right, that's a binary search. Could you tell me what problem you're trying to solve?
I tried just now using the user agent string from my browser - and it still won't respond on the "auth" query BUT I ran the binary ( node_modules/puppeteer/.local-chromium/linux-609904/chrome-linux ) directly and I could log in manually. So it's not working when in automation mode? I wonder if there's some feature that disabled in automation that might cause issues?
Unless your data-set is massive, there's really no need to sort it anywhere other than the UI component which is visualising it. Adding a whole dispatch cycle and updating the entire store just to reorder some data which isn't changing seems wasteful and probably more importantly it couples the ordering of the UI component to the data store itself, which renders it less generically useful to the rest of your app.
If "Auto-tagging" is turned ON in AdWords, all ad clicks will be forwarded with a \`gclid\` query parameter. That is a solid way to determine if the click was organic or ppc. But keep in mind that there are some users who will bookmark your site with that same parameter, giving you a false positive. That is if you want to do it only client-side. If you want to track it via backend, you can set a "Tracking template" on your AdWords account to make all your ad clicks go to different site (for example, your proxy) which will gather information and then forward the user to the actual page. This is more reliable in my experience. You can always use some 3rd party solutions for this. I am sure you can keep track of everything with Google Analytics. If you need very good ppc analytics (and protection from ad fraud), ClickGuard is a good service. 
He recently made some music stuff, that is why i thought. [https://www.youtube.com/watch?v=VvOsegaN9Wk](https://www.youtube.com/watch?v=VvOsegaN9Wk)
Also. I would rather use typescript instead of flow. It looks great btw.
Are there active mods here? I pretty much only see self posts with links to someone’s own blog. 
Do you have a link to a site like this that already exists? I'm not familiar.
[http://fusejs.io/](http://fusejs.io/)
Basically any JS awesome list on github. Start here and follow the rabbit hole if you dare: https://github.com/sindresorhus/awesome
I'd say that they have similarities, but the organization is different. You can get the free book from the series and see if it works for you. I mentioned the videos because I like the way he expressed and explains stuff. But honestly the others you mentioned should be as good as Kyle's. 
I finally got it to work, almost afraid to post the answer ;) https://www.npmjs.com/package/puppeteer-extra allows for extensions to be shoved into it... one of them was "stealth" Whatever extra steps it does finally worked!!
SoloLearn and a various ebooks you can buy or find free online.
Node will likely end up with multiple ways to disambiguate modules. Until then, you might dig [https://npmjs.com/esm](https://npmjs.com/esm). No special extension required.
Bold choice to use curried functions in your API. Not sure yet if it was a good choice, but undoubtably bold.
The trees are actually not evolving right now, just the "Pixlings" (you can see them in this video: https://www.youtube.com/watch?v=vUKkARH-dBQ ). Would be interesting to make the trees evolve eventually too though
Node will likely end up needing more than just an extension to disambiguate. The [`esm` loader](https://npmjs.com/esm) took inspiration for its approach from projects like Babel, TypeScript, and webpack. As a bit extra `esm` also allows specifying parse goal pragmas to disambiguate source. 
This is probably what you want. To elaborate a bit, this is called an “inverted index”, which is a mapping between words and a list of all articles it appears in. If the user searches for several words you fetch the corresponding list for each word and then return only articles that appear in all lists. Further points of improvement are stemming, eg normalizing words so an article that contains “beets” will match “beet” and so on. Just FYI, there are libraries for this (check out Algolia for example), but implementing this yourself will probably be a fun exercise.
Awesomely nice compact explanation! &amp;#x200B;
The canvas element is on HTML Element in itself from what you’re describing it seems like the button is being drawn with in the canvas and therefore isn’t accessible via a CSS selector the canvas itself is accessible via a CSS selector and property like cursor:pointer. Therefore, what you need to do is put a mousemove handler on your canvas element then check when the coordinates are within the boundaries of your button and change the cursor to a pointer then and back when it’s out. Sorry I’m on my phone so it’s a bit difficult to give an example otherwise I would. 
Fascinating! I would certainly like to read a short blog post about this if you want to flesh out the differences between the two libraries!
Did you even read your article? The code for 60% of the examples is the wrong one
Yeah that might be an option in the future indeed.
You've created a site without doing a single google search on the topic?
Hi /u/coderfriend, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/heyimkibe, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BraisWebDev, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/technewsninja, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/technewsninja, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
i think i get what you mean and will try to see how to do it, but if you got the time an example would be awesome. Either way, thanks you. 
No problem mate. Good luck and if you need some assistance I might be able to help you on your journey. 
No problem, don't hesitate to ask for help if you need 1 hand. 
Google does not forward granular referer data, I believe they only forward the domain (google.com). Makes sense from Google's POV, that data is their special sauce. Lending insight as to what results have what standing is what their business is built on. You probably get a hint of that data via query string if you pay them for advertising and stuff. If the referer is google without a query string, it's probably safe to assume they came from a search result. If you're paying for ads, surely you have some sort of campaign identifier that Google is forwarding to you.
OP is trying to say that they need to do a range query on a static set of data. I pointed out that they don’t need a BST to do a range query... they can just use a binary search.
Mistakes. Bad/inconsistent formatting. Failure to predict the bad things that could happen and handle them.
I teach Javascript to some of my classmates in what we call here a Javascript Lab where we try to push the boundary of the use of javascript and the biggest mistake I often see is thinking that they cannot solve the problem because they have never encountered it yet even though everything they need to solve it is already in their possession (language features). I think the biggest mistake IMHO is thinking that a problem cannot be solved. Why don't start by thinking that there must always be a solution but we do not have it. Yet. Maybe not the advice you waited for but I took the opportunity of your post to say that and I think most of us need to hear that. 
Bad naming. Not keeping things DRY. Massive functions that do many things. Not caching static values but instead querying them over and over again.
Most jquery code I see suffers from the last point. Thankfully it's easy to fix. Overall good points 
Woops, thanks!
Bad title as it mixes two orthogonal concepts! A *novice* is someone, who just started doing something - a *professional* earns his money by doing something. Of course you can be a *novice* and *professional* both at the same time. Of course you can be also a novice doing some sort of hobby, or a professional with large experience. Probably analyzing things like this makes the difference between a novice and a rather experienced person? 😉
God functions. One function to do all the things is a tell tale sign of a jr / inexperienced Dev. Code splitting, code reuse and organization to me are now staples of an experienced developer. 
Best thing you could do is show your code to someone, maybe a co-worker or something like that, that is more experienced than you and you have a good relationship with, and ask for a critical review. You should prepare your code. Show them something which: - works as intended - is _mostly clean_ (i.e. remember to format it well, to remove old code, old comments, old files...) - you feel is close to your best but gives you that feel that there's probably better ways to do it - is not too small, not too big - is, *of course*, yours, but also that you know it well, that you can explain not only the code, but also why you did it that way I suggest this idea because it works _specially_ well when they show you this kind of thing _on your own code_. Giving you a theoretical or generic resource may work fine, sure. But if you can see it on your own code, my experience tells me that it's generally one of the _best_ ways to learn this. Note: You'll need to find someone you have a good relationship with because they can probably spend a couple of hours going through the code with you and pointing out things that "could be better". Also, obviously, someone that is more experienced. It's not always easy finding a _senior developer_ willing to help, I know, but when you find one, they are almost always **very** willing to help. If you can find that kind of mentorship in a co-worker or someone that is close enough, that will probably work best.
I went back and forth on it, but I think in the end I'm happy with the decision. It was always going to be either fully curried or autocurried, but I'm liking autocurrying less and less these days because it's too *magical*.
The `client-side` import is looking for the `default` property. [This](https://stackoverflow.com/a/40295288/764384) stackoverflow answer may help.
Agreed, binary search would be much easier here. OP was specifically asking for a BST, so I figured there might be some other requirements.
Oh my, I have so many things I could talk about. There are some good points in this thread already. Here are my two cents, in no particular order, although these can apply to any language, not just JavaScript: - Coding before planning for the simplest solution: Thinking is hard, but it will make you a phenomenally better programmer if you think about a task/feature/story every step of the way before writing any code. What are my dependencies? How do other people do this? What risks could there be? Do I have to think of a smart solution or can I fall back on knuckle dragging a bunch of code/data? - Not leaning on your ecosystem (CSS, HTML, etc in the browser, filesystem, cli, etc on an OS): I'm talking about crazy keyframe tracking that should have been CSS, synthetic events that should have been regular click events, and enter key submit handlers for something that should have just been a form. - Not fully understanding your deliverables: Ask as many questions as possible before you do actual work. Keep asking until you annoy the ever living shit out of your boss/client/customer. This is how you cover your ass and build reputation for being thorough and professional. Talk is cheap, bugs are expensive. - Complaining about code: Everyone gets it, legacy code sucks balls. But there are a plethora of reasons that code exists in that state; and if that code has shipped, you should be grateful the bar was set so low. You never know what the past developers were going through; maybe they had a micro managing boss, an impossible deadline, or a personal life emergency. So do something about it, every where you go, clean it up a little bit. You know what complaining does? Absolutely nothing. - Blocking yourself: Sometimes you need art or copy or an API. ~90% of the time, you won't actually be blocked on a task. There is usually something you can do with placeholders, anticipating issues, and working around stuff. Basically you should get to a point where you are 1 button/command/operation away from your work being available to a stakeholder (that operation being "consume the dependency"). Only then can you say that you are "blocked", but until that point, do not say a damn thing.
No other requirements (as indicated by OP in the other subthread).
My biggest takeaway from "The Good Parts" is that languages are usually very large, and since they're created by humans (who make mistakes), not all language features are useful. It's up to us, the end-user, to create a subset of the language that we find valuable. I would say the biggest thing you see in professional code vs novice/amateur code is consistency. I'm talking about consistency in formatting, variable naming, patterns, etc. If we're talking about a single microservice, you really want to keep the code looking and feeling identical throughout the project. It's okay if two related microservices are developed with slightly different styles, but having too much goofy stuff within a single codebase is annoying. The other thing you don't often see in amateur code is test coverage, documentation, and ci/cd.
Neat, hadn't seen that. Thanks!
I agree with everything except the last point. It can be tempting to pre-optimize, but caches tend to be bug farms. Instead focus on getting performance data, then act on that if you need to.
 New pampTheGlobalScope(ctx,radius,canvas,jquery,fuckClearInterval,1000) ;)
Something small I see is being extra verbose without needing to be. For instance, checking a boolean value like (isTrue === true) rather than just saying (isTrue). Also unnecessarily declaring new variables inside loops to reference an outside variable, when you can just reference the outside variable within the loop: &gt;let out = [...stuff] &gt;for (...) { &gt; let outRef = out[i] &gt; exampleFunction(outRef) &gt;} When you can just do &gt;for (...) { &gt; exampleFunction(out[i]) &gt;} Small things.
Abstractions and Modular code.
I don't see a problem unless you're using 100%. Ram is meant to be used.
On the point of extra verbosity... stuff.forEach(exampleFunction);
one thing i notice i used to do a lot was ``` var _this = this; function(){ doSomethingWith(_this) }; ``` but now with arrow functions this isn't necessary anymore and makes me cringe whenever i look at old code i wrote.
Sometimes variables are made to make things more readable though. 
Sure, I'm not saying never to declare variables within loops. I'm saying that it's good to recognize when it's not needed.
Eh, verbosity could mean they were previously a Java developer.
Copy and paste straight from stack overflow rather than reading the answer and reworking the solution themself 
There's a general saying I like to follow: &gt; Junior developers write code that is easy to read. &gt; Intermediate developers write code that is hard to read. &gt; Great developers write code that is easy to _understand_. Or, Stop trying to be clever. Unless you're the guy that discovered the [fast inverse square root](https://en.wikipedia.org/wiki/Fast_inverse_square_root), your clever abuse of the parser, syntax, or other "weird shit" is just making life difficult for the developers that come after you. 
- The difference and use of `apply`, `bind`, `call` and when/how to use them. - Not managing asynchronous behavior correctly and ending up with race conditions. - Not fully understanding that functions are first class objects and you can pass them around as arguments to other functions. 
All of it, all the time, 100% of ram should be used by 4 passive softwares who's job is to sit in the background until I get a message.l and then notify me. What a rediculous opinion.
&gt;Coding before planning for the simplest solution It might just be because I TDD everything, but I disagree with this point a little. I find that too much time spent planning leads to procrastination and it's difficult to forsee every impactful design decision right from the start. Not only that, but if the spec changes significantly it can throw everything out of wack and much of the inital time planning has been wasted. It's more important to identify key area's to plan and let refactoring take care of the rest. Great post though, I strongly agree with the rest of your points! &amp;#x200B;
&gt; Complaining about code Sometimes it's useful to bring to the light just how much technical debt you have from the poor code. I think saying absolutely nothing about it can be detrimental to a manager who doesn't know the actual state of the codebase.
So... We avoid "callback hell" with "promise hell"? The await keyword is not as simple as a "thread.join()". Depending on the runtime engine is able to do some paralel optimizations that you loose with you aproach
[removed]
I used to complain about this with all real IDE's and looking back it never was really the IDE's fault it was writing bloated shit code. If your codebase is crap it usually runs like crap in an IDE. It will usually run much better in something like VSCode because it doesn't provide the versioning and caching at near the level of an IDE.
Lack of comments pointing out what the script does or what things it might control on a site. Nothing worse than looking at a bunch of functions with no comments as to what they are tied to. 
I didn't say that, I said that 4 programs using 20% of your RAM is fine. You're right the opinion you just mentioned (which I never said) is indeed r**i**diculous. Good thing that's not my opinion.
Hm... May I ask you a few questions: \- What do you think may go so wrong that it will create a "promise hell"? \- What is the relation between thread.join, await, and passing promises to functions? \- Unfortunately, I do not know anything about parallel optimisations in runtime in V8. Could you please point me to source where it is described? I've googled for it and only found something related to parallel garbage collections. Thank you for your time.
Even without fat arrows, it's better to give it an actual descriptive name rather than something like `_this` or `that` or whatever. You could also use bind or whatever.
The `isTrue` thing depends on context. If you want it to only be true when `isTrue === true` then you need to be that verbose to account for truthy values.
this is just an example. I usually did use descriptive names, and bind wasn't usually an option as I needed the natural context variable for the inner function as well.
[removed]
Glad I found this; was gonna post about this myself. Being clever is the most underrated sin in coding. Many times I've had juniors come up to me telling me how proud they are of their abstraction that reduces LOC to a certain number. Only to find that barely anyone can find out how it works. 
+1 to the blocked point. I don’t know the last time I really couldn’t work on a feature because I was blocked by someone else. Maybe I couldn’t release a feature until something else happened, but in almost every case I could get to within a few hours of release without being blocked. If someone is blocked, then they have two weeks of work to do after they get “unblocked” they weren’t really blocked. Sometimes I’ll pull down a branch and have to point out dozens of things that the developer can still do before they are actually blocked from doing anything else. 
[removed]
&amp;#x200B;
&gt;These are great. If you have more to say, I'd love to hear it. &amp;#x200B;
Totally agree with this. If you require a lot of planning; the task is too big and should be broken out more. For example, Product Owner says they'd like to search for users using several dozen filtering rules. Don't just implement one abstraction to handle all filtering cases, instead tell them to break it out in to stories to handle each filtering task individually. Then single responsibility the fuck out of it and create a method that handle that.
Can someone review this project? It's a small dependency injection lib that's very suitable for OO projects Thank you C: [https://github.com/munizart/arthemis](https://github.com/munizart/arthemis)
yeah careful with caching. lots of unnecessary things in memory can eventually become more detrimental to performance than a redundant query.
The main difference is software engineering principles, eg: modularity, good separation of concerns, abstractions, single responsibility principle, loose coupling and all that good stuff. This is generally not stuff you'll learn in a JS book, but there are books that cover it. Also people need to stop reading JS the good parts, it was over rated even when it was relevant, it's massively outdated now, a better book series for JS would be: You Don't Know JS
Any recommendations in that regard?
I think this is one of the most important things. I wrote a whole blog post about this crappy CoffeeScript function I found in the wild: randint = (min, max) -&gt; min + (Math.random() * (max - min + 1) | 0) Here's an excerpt: What is the bitwise-OR operator doing here? Does it have operator precedence over multiplication? I don't know offhand. Do you? Either way, it could be rewritten with more parens to make it explicitly understood, even by people who can't find or don't know to look for a precedence reference: randint = (min, max) -&gt; min + ((Math.random() * (max - min + 1)) | 0) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence Looks like `|` doesn't have precedence over `*`, so we can take `Math.random() * (max - min + 1)` as one operand, which is a random number between 0 (inclusive) and one more than the difference between `min` and `max` (exclusive). Then what? We do a bitwise-OR against 0. What's the bit representation of 0? What is this code actually doing? Turns out that almost all of the JS bitwise operators only work on 32-bit signed integers, in two's complement format, so the operands are all implicitly converted. - `0` becomes `0b00000000000000000000000000000000` - `Math.random() * (max - min + 1)` becomes whatever that result is after you convert to an integer and chop off any significant bits it had past 32. Doing a bitwise-OR against all bits being 0 is an identity operation, so this piece of code is just about getting that implicit conversion, basically trying to round any floating point result down. There's a Math library function that does that (`Math.floor()`), but it does it without losing all of the significant bits past 32. `-2,147,483,648` and `2,147,483,647` are the minimum and maximum values that can be expressed in 32 bits. This is a 10^9 exponent, versus 10^308, which the JS Number type allows. `3000000000.12345 | 0` evaluates to `-1294967296`, while `Math.floor(3000000000.12345)` gives you the expected `3000000000`. So, to review, to understand what this one line of code does, you have to know the operator precedence of the highly uncommonly used bitwise-OR operator, and then the implementation detail that it casts to 32-bit signed integers in JavaScript, and the other implementation detail that 0 is expressed with all 0 bits because of two's complement encoding. And to avoid errors, you have to know the limits of a 32-bit signed integer, and never call this function with a larger range than a little over 2 billion. And for what? So you don't have to type `Math.floor()`? Maybe so you can feel clever? Don't be an asshole. As a bonus, the cast to an integer occurs in the wrong place if you're not assuming that `min` and `max` are integers. `randint(0.1, 5)` will give you results like `3.1`, because `min` isn't in the cast to int. Also, maybe somewhere down the line, someone decides that their internal implementation of JS needs different number encoding, so that 0 isn't all 0 bits, and then the code just does something totally different. If you'd just stuck to the Math library call, which will be necessarily updated to work with whatever the new encoding is, you'd be fine. While this is unlikely in this particular case, this is always a risk when you rely on implicit behavior, rather than being more explicit in the intent of your code. And either way, relying on implicit behavior without justifying it in comments, so someone reading can at least understand your intent, is just rude. --- Sometimes you want to do weird bitwise stuff for speed or something, but that kind of thing should generally be broken out into its own function that has comments that document why it's being done and what limits that puts on it , and lets you put a descriptive function name (e.g. `castTo32BitInt()`) in the main code path someone is likely to be interacting with, rather than some crap nobody understands.
Current me hates past me for the technical debt he wrote. 
You gotta be careful about this. Most people know if the code is bad. It might be worth it to say it once if you really think everyone is oblivious, but past that it’s just complaining. I’ve noticed that with junior developers they tend to try to sound more experienced than they are. One way they do this is complaining the code they’re working on is bad. Unfortunately often they’re not even right. It’s “bad” because they don’t understand it. It may be because they just don’t have enough experience. I’ve seen far too often junior developers complaining about code that’s honestly pretty darn good. It makes them look bad, and makes it sound like an excuse for slow development. Whether you think the code is bad or not very rarely does it help anything to complain about it. If you’re a developer, and never have to work in legacy code you’re one of the few. It’s your job to understand, improve, and work with “bad” legacy code. Don’t complain about doing your job.
I get paid a lot of money as a JS developer, so I think I am quite experienced. I feel like your first and last points are outdated. Modern JS code don't need to to use apply/call at all and bind very rarely. Passing callbacks isn't too common either with the new async/await syntax. If this was an interview question, and you gave those answers, I would probably think you aren't keeping up with JS and would not hire you. Having said that, I definitely think it's important to understand our roots, and I value engineers to understand these concepts, but if this was given as an answer to "novice vs professional" JS code, it'd be a thumbs down for me.
DRY??
Do not Repeat Yourself
Read Code Complete 2, The Pragmatic Programmer, and Eloquent JavaScript. Now you know.
Not sure if sarcasm, but "Don't Repeat Yourself." Basically, if there's code you're repeating more than couple times in different places, you should probably refactor that into a named variable or function you can call.
No sarcasm just curiosity. DRY makes sense.
Nested (deeply nested) objects. Large functions. Bad naming. Bad/incorrect function composition. Not adhering to conventions, or well, not sticking to a single coherent style.
*See also: Code Complete 2: Chapter in Function Coupling (or some such name)*. Code is meant to be read by humans. When working with a junior dev this is the only point I hammer over and over again.
They might mean doing object.value or function(sameValue) 10x instead of just storing it into a variable. Is it optimization? Yes. But its easy and free so why not.
If anyone below senior level says code is bad I generally assume they are having a hard time reading it. Though they will never admit it, because no one explained to them that reading code is much harder than writing it. Universities do not push this skill nearly enough. 
It's an important concept because repetition becomes a liability for maintenance. If you have something written five times in five different places, if you ever need to change it it's way too easy to miss an occurrence or even just introduce a bug when changing (especially if they aren't EXACTLY identical).
I think this really applies to all code: 1. Copy and pasted code, as in I see the exact same functionality re-typed 5 times in the same code review. Make a reusable function. 2. Not following any sort of style/not linting your code, as in you sometimes put spaces between arguments, other times you don’t. 3. Side effects in your functions. I consistently see people updating a separate object in a map function, which is completely unreadable and hard to track for any engineer trying to figure out why something is being updated. 4. Using a full library for something really simplistic, or something that is handled in a lighter weight library. Don’t download $jQuery to just make $ajax calls (some would argue not to download Axios until you really need it). 5. Ridiculously complex code that is not properly broken down. I have seen 100+ line functions for munging data, where similar code is repeated throughout the code base. Specifically JS: 1. Using fat arrow and `function` interchangeably, not understanding scope in general. 2. Using `==` outside of very rare cases 3. Not considering falsely value when writing functions (is `0` valid compared to `null`) 4. Not using destructuring and param defaults, especially when you keep having adding params to a function where some can be null.
&gt;Blocking yourself: Sometimes you need art or copy or an API. \~90% of the time, you won't actually be blocked on a task. There is usually something you can do with placeholders, anticipating issues, and working around stuff. In some cases, however in many cases I find myself where the content that is provided doesn't match the structure of of whatever design/in-development application, forcing us to redesign/refactor code to accommodate the new content. Maybe not the content *itself* but how the content is *structured* is something that I can see as blocking. 
Haha yes. One time I was at a code and coffee meet up here in Toronto, where a coffee shop basically hosts and open time for random people to code. I overheard this one girl go on a rant about how 'stupid react was' and that 'i can do everything in jQuery'. To myself I was like... Oh yah I remember having this attitude towards new things... I remember having my own resistance to every site needing to be responsive , as well as any need for version control. Now, I'm all about responsive design and git is probably the single most useful tool I've used in the last 5 years. 
Adding a lot of unnecessary npm dependencies to avoid solving pretty simple tasks is a big indicator that it’s a novice dev Running into scoping issues/not being able to determine a bug is from a scoping issue Using jquery or manipulating the dom along with angular, react, vue, etc. where you’re explicitly NOT supposed to manipulate the dom Same 5 lines of code across 10 functions within the same file Over abstraction as well 
When you refresh the page, JS is setting the `firstVisit` variable again (per line 5). You'd need to store that value in localStorage as well (or a cookie, etc) for it to persist across reloads. 
Jesus christ. That's the kind of shit I would immediately decline a pull request for. 
Professional code tends to have long, specific and descriptive names for things. Beginners tend to try and optimize the coding process by abbreviating everything. I’ll also add: professional code doesn’t need comments. It’s simple, clean and clear enough to understand without added explanation. If you need a comment you’re being to implicit or tricky with your code. 
Do not repeat yourself
Do not repeat yourself
Do not repeat yourself
I won't pretend I understand what you are trying to do here but you set the localstorage.refresh to false at the very beginning, every time. Instead of counting seconds on a setInterval, store the time and compute the seconds elapsed from that.
&gt; Complaining about code: Hey now. Caffeine, and complaining about code, are how I get through my work week. 
&gt; Modern JS code doesn't need apply/call at all and bind very rarely Yeah, except each time you need to pass function as event handler and preserve this (I'm omitting function as class properties). &gt; Passing callbacks aren't too common either with the new async/await syntax Have you heard about that niche thing called Functional Programming? &amp;#x200B;
&gt; I feel like your first and last points are outdated TIL that passing around functions as first class values in JavaScript is "outdated"...
r/iamverysmart
&gt;their internal implementation of JS needs different number encoding, so that 0 isn't all 0 bits That's a bit too much no? lol
Comments are tricky area - good code is readable without any comments. Whatsmore comments needs maintanace just like code otherwise they could be misleading.
Benchmarks?
This is super sketchy. A function, by nature, should have no knowledge or opinion of what it's "tied" to or where it's used. It's a mercenary. You give it what it wants, and it will give you what you want. No questions asked. It shouldn't care, have any opinions, or even any knowledge about who is calling it. There's a formatting function in my codebase that's probably used in 300 different places. Should I have included every place it's used in a comment for that function? *What* a script or function does should be obvious from its code. *Why* it does it should be defined assuming it the reason why is not obvious. Comments lie and get outdated. They are mostly untrustworthy. Code tends to be honest, though sometimes even names of variables, functions, and classes can lie. 
DRY can be a bit of pre-optimisation itself.
&gt; Not keeping things DRY. It's funny because I would consider prematurely DRYing every piece of code a sign of an engineer who is following "standard practices" without understanding the pros/cons. I think "always DRY" is a sign of someone who isn't thinking for themselves.
Thinking you are done when your code solves the problem at hand. Experienced devs take what they learned from their first iteration and may rewrite / refactor some or even all the code. I'm usually happy by my second or third iteration. Not asking enough questions and waiting too long to ask questions. Senior devs are there to help when you get stuck. But don't be lazy. You should show up with your questions along with a list of what you already tried. Leaving comments with concrete examples of what a function does is great, but even better is a set of automated tests with several examples, especially the edge cases.
I rarely write comments and think people that do aren't writing them very well.
What coffee and code is this? I'm in Toronto and would like to come!
I've been on enough projects to see a pretty clear trend: if you did not write the code or do not intimately know the person that did, you will inevitably say that the code is crap and needs to be re-written. The fact of the matter is that it is really hard to read code. When we inherit code we don't clearly see all the requirements the previous engineers were operating under. All we see is the end result without a reason why.
Just to provide some context, this is what the [deleted] commenter /u/MystK posted: &gt; I get paid a lot of money as a JS developer, so I think I am quite experienced. I feel like your first and last points are outdated. Modern JS code doesn't need apply/call at all and bind very rarely. Passing callbacks aren't too common either with the new async/await syntax. &gt; If this was an interview question, and you gave those answers, I would probably think you aren't keeping up with JS and would not hire you. &gt; Having said that, I definitely think it's important to understand our roots, and I value engineers that understand these concepts, but if this was given as an answer to "novice vs professional" JS code, it'd be a thumbs down for me." The fact that he/she deleted the comment just goes to show how off the mark this individual is. Which I find ironic, this is the kind of comment someone that isn't a professional developer would throw at you - bragging about salary and trying to put himself in the context that he is may be interviewing you so as to cast the other person as lesser experienced instead of using constructive arguments to prove a point. 
I agree. It is one reason why code should never be clever: it's harder to read code than write it so if you are maximally clever when writing code, you'll never be able to read it.
&gt; I remember having my own resistance to every site needing to be responsive , as well as any need for version control. Now, I'm all about responsive design and git is probably the single most useful tool I've used in the last 5 years. Taking that a step further, learning the tools you work with inside and out. I CAN use Adobe Premiere. I CAN use Adobe Illustrator, but 50% of the time I have to look up how to use a specific tool or do something particular. My basic understanding of the tool does not make me proficient with it. Back to Git, I used it for several years just fine, but I'll admit I had far too many commits that were something along the lines of "fix this that and 3 dozen other things" with no real separation of concern. I still end up with a working directory full of 10 or more active changes on many occasions, but learning how to properly use \`git add -p\` and \`git diff\` has allowed me to avoid the super commit nonsense. I now feel like a professional git user. Before I was just making use of the tool somewhat effectively. &amp;#x200B;
This is a rarer problem among junior devs in my experience than the lack of concern for such best practice rules of thumb. And of the two, I'd rather have a developer who has habitualized thinking about best practices and architectural generalization opportunities (but often over-engineers) than a developer who lacks that metacognitive discipline (and therefore usually manages to avoid over-engineering). 
The much simpler explanation is that |0 gives you a truncated integer, and the programmer probably intended for that to be ((max - min)|0) to ensure that no matter what you pass into the function, it's always going to give you an integer output. Probably not smart, but also quite common for people to use |0 as short for Math.truncate or integer conversion .
&gt;Stop trying to be clever This is a great rule that takes people a while to learn from what I've seen. 