Isn't that a good thing?
why would it be good? I expect much reused code to be more hardened then home rolled.
Yeah, it's completely against everything the node.js community is about. * index.js = 9047 lines * internal.js = 3197 lines * utils.js = 2458 lines * nosql.js = 2317 lines * builders.js = 838 lines * image.js = 579 lines * mail.js = 567 lines That's nearly 20,000 LOC. I don't even want to imagine what debugging it would be like, it's fucking ridiculous and utterly retarded. 
I would like to see how it compares to CanJS.
Because then you are dependent on it's dependencies. So with something like jQuery where there are lots of libraries built on top of it that maybe don't need to be, if at some point several years down the line you want to use something other than jQuery, you've got to find replacements for all those libraries too (as opposed to something like backbone.js which works well with jQuery, but isn't dependent on it). But I haven't done much with node.js, just in general programming I thought it was better for libraries to have as few dependencies as possible (without reinventing the wheel). I don't know if this framework is reinventing anything or not (as, like I said, I'm not very familiar with node.js)
That has nothing to do with why it's easy to understand compared to Angular. It read like you're just trying to sell features.
that was the best interview I could have given. There were only two instances when I didn't know what he was talking about, but it was all good. Whether or not I get this internship lies on another candidate hitting it out of the park. I did my part. Thank you for your help!
Yes, you can simplify some things if you drop support for IE8 (ES5+). You can make things even nicer if you require object.observe (ES7+).
Great stuff; please [component-ise](http://component.io/) this shit!
Linux/Chromium, can't middle-click, or Ctrl+click links to have them open a new tab.
Noted, I'll test that too. Thanks!
Their documentation is definitely one of the best written one's I have seen in a long while 
I think the only serious users right now are us here at Google Creative Lab, but hey, I just launched it to public this week! Speed is actually not the major selling point of Vue - simplicity is. Also, Vue is only an interface library, not a framework. For larger projects it's intended to be used with a modular build system e.g. Component or Browserify. That said, here's why you'd want to give Vue a shot over several common frameworks: - Angular: if you like everything about Angular you should definitely stick with it. But it's not perfect for everyone. Vue.js tries to provide the benefits of MVVM data binding while being overall much simpler, so you don't have to bend your mind around $digest vs. $apply, preLink vs. postLink, or how dependency injection works. The core API is just a constructor that can be extended with a bunch of options. Vue is also much less opinionated, giving you the flexibility to use it as the view layer in a custom front-end stack. - Backbone: Backbone has a simple and friendly API, but it has no data binding and your View will be cluttered with lots of DOM manipulation. You'd have to resort to third party libs such as KnockBack or Rivets.js to achieve that, then it suddenly requires a lot of boilerplate and becomes not that simple. Also, hard dependency on jQuery... which you might not need if you are targeting modern browsers. - Knockout: using ES5 getter/setters gets rid of the awkward syntax of initializing everything with ko.observable() and getting/setting as invoking functions. Vue.js also provides a declarative way to nest and compose your ViewModels, which can be tricky in Knockout. - Ember: Ember is philosophically almost the exact opposite of Vue: heavy, opnionated, all-encompassing, convention over configuration... if you are into that then Vue is probably not for you. - React: React is probably the closest to Vue among all these libs in terms of areas covered and position in the stack. It is a great lib, but I'm not a fan of constructing all the HTML in JavaScript - I prefer to write actual HTML and work with the actual DOM, which is what Vue does. Since I'm also a designer, I find Vue's approach makes it easier to work with CSS. Finally, in React the DOM is almost completely abstracted away, but in Vue you still have the flexibility to reach down in custom directives. Take note these are my personal opinions and I'm most likely biased, but you are more than welcome to do your own research and see if you agree with me.
TIL... very nice indeed!
To echo on this, I wish that the textarea would automatically get the data back from the editor on post.
Great job on the animations, I was about to leave without reading anything but those sucked me in.
Actually it very much pertains. Angular is very elegant, until you start running into performance issues and complexity dealing with the dirty checking loop (and maybe the minification issue due to dependency injection, but that's oh-so-trivial by comparison). There is none of that in Vue. 
Very true. Much like the trade off between zepto and jQuery. I was impressed to learn that Knockout still supports IE 6.
The other day I watched a video from JS Conf EU 2013, (http://www.youtube.com/watch?v=mVjpwia1YN4) comparing two-way data binding in Angular, Ember, and Knockout, which ends with the following slide: http://projects.mariusgundersen.net/JSconf2013/#/summary-7 Interesting to note Vue actually wins on all counts. The cleanest syntax, observable properties, asynchronous operation (watch the video to see how seriously this can effect Knockout), support for computed properties, and excellent performance. I'm not saying that Vue is objectively a better project than any of the above, since as TheMoonMaster points out, Vue is a smaller/sharper tool, and as x-skeww points out, it requires ES5 support in the browser (in such a way that can't be shimmed, btw). What I am saying is that Vue is "doing it right", and it's worth a gander.
Sure, just about to hop on a plane but I will dig up some of the articles/videos/apps that I've been intrigued by this weekend and get back to you (assuming I don't totally forget)
I for one welcome my new non-opinionated overlord(s).
I use Ember, not Angular. I'm sure vue has problems, wether it's performance or not. I guess nobody knows since nobody is using it.
I'm definitely an Ember guy so I somewhat disagree but see your point and the reason for the project. I'm just thankful it has data binding.
You know this actually exists right? *Please don't respond respond with worthless technicalities about what oboe is parsing*
Stop writing articles about things you know nothing about. Not only are you replicating information, but you're twisting it the wrong way and making false claims. Pick something you're passionate about, and actually know. You're polluting the internet.
It may be because they do?
Hey VUE devs - the animation benchmark at the bottom doesn't render the circles in the latest version of IE. Looks like this is a relatively new project, so I just wanted to give you some useful feedback. I hear the documentation is eloquent compared to Angular or Ember. I'll check that out, but if it is indeed true kudos to you. I hate it when people try to dumb things down, why would they try to dumb people down? That's what it does.
Thanks, will fix it soonish...
Haha, good point. Can I use this in a blog post?
[They don't think it be like it is but it do](http://i.imgur.com/NyaZ98X.jpg)
An eloquence that transcends basic grammar.
Screen recording software for Windows and iOS must be really damn expensive. Come on, put some effort in your presentations! This shaking is unwatchable.
Hi, Thanks for the reply. I stumbled upon this claim [here](http://www.promisejs.org/intro/): &gt; You lose a lot of helpful debugging information and error handling ability relating to stack traces and the bubbling up of exceptions
You're welcome. It's always nice to hear that people are appreciating the work being done for them :)
D3 is what I do for my day job. I thought about d3 but I find it doesn't always fit so well with simulation type visualisations.
Yeah, snap would be good. You might notice the logos at the bottom of http://oboejs.com are 'inspired' by the snap site :-)
The parser behind the scenes is Clarinet - see https://github.com/dscape/clarinet - a project that I've been contributing to for a while and know very well. For certain, Clarinet is an asynchronous parser. It doesn't use recursion, true, but that isn't a requirement for streaming. I don't see how recursion is relevant but Oboe.js itself has plenty of recursive functions, partially because in my university days I spend a lot of time programming Haskell. There are integration tests which confirm that the parser streams, plus applications built on the library. In this context 'streaming' means like in the visualisation - reacting to a response bit by bit instead of waiting for all of it. Or, from the sender's perspective, writing individual parts out as soon as it has them instead of batching everything into a single write.
Two links: https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them and video: http://www.youtube.com/watch?v=qbKWsbJ76-s Needless to say any more.
Something along the lines of this? : http://www.w3schools.com/xsl/xsl_client.asp
This isn't about protocols. As we know, http already supports streaming. We also know that typically when JSON is being sent over http, http's streaming quality isn't being utilised as no parsing is done until the full JSON document is recieved. The important part of the story here is that Oboe allows the parsing of partial json formatted http responses and provides an api to allow them to be easily consumed prior to the complete response being recieved. 
Interesting. I'd give it a go if I had a Windows computer to hand. A photo on the github page of a keyboard on an ipad or something working with the desktop computer would help to understand what this project is for. At the moment it feels quite abstract - I can see what it does but I can't quite grasp what I'd use it for.
I would try to avoid thinking too much about Javascript and try to good design in programming independent of the language. The Design Patterns book is a good introduction to thinking in terms of program design: https://en.wikipedia.org/wiki/Design_Patterns Not every pattern is still used today. But looking at the patterns and asking why that might be is as good an exercise as any. Once you have the fundamentals of program design most problems in programming are much easier, regardless of the language you're programming in.
I am curious as to why this is getting downvoted, in /r/HTML5 I have no downvotes at all. Is it because this is a x-post?
laughable drivel
Hence the word "Basic". Thanks for the feedback though, I will try to implement lateral motion
Its because its not super interesting to people who have been developing javascript for quite some time, most people around here are js developers in some way shape or form. its not bad or anything, its just not very interesting
My interpretation of this claim is that when working with callbacks, it is easy to lose debugging information because very few javascript developers actually **name** their callbacks. The most common implementation of a callback is to simply pass an anonymous function expression as an argument to another function call. Take this code snippet: function doSomething() { var foo = 3, bar = 4; doSomethingAsync(foo,bar,function(result) { console.log(result); }); } Let's say this code runs in an old browser that doesn't have a `console` object; that `.log` statement will throw an exception. If you try to debug the problem, your call stack will look like: (anonymous function) doSomethingAsync doSomething This is a simple example, but you can imagine if you have callbacks within callbacks, this can very easily turn into a soup of anonymous function calls and it can be a royal pain in the ass to track down the cause of exceptions. However, if we were to use a **named** function expression as our callback argument, like so: function doSomething() { var foo = 3, bar = 4; doSomethingAsync(foo,bar,function myAsyncCallback(result) { console.log(result); }); } Now we have a stack trace that makes sense: myAsyncCallback doSomethingAsync doSomething ::time passes:: Oh good lord; I just read [the blog post](http://www.promisejs.org/intro/) that OP links to. He argues that promises can replace callbacks when dealing with asynchronous operations, and then immediately describes how promises are implemented using **callbacks**, and asynchronous ones at that. Sigh. Promises are great, and highly recommended when you need to hook into the completion or failure of some asynchronous operation...even **more** highly recommended when the asynchronous operation occurs somewhere else in your codebase, perhaps in a different AMD module. However, the use of promises and callbacks are not mutually exclusive.
I guess. It is extremely basic compared to most of the other projects on this sub.
In my limited experience, Fibers solve all these problems and more... check them out in Ruby.
This is good advice and is well illustrated by the provided examples. Whether it's using verbs for method names or adjectives for states, paying attention to parts of speech can help make your API easier to use.
Yes. Promises are actually a standard. I didn't dig into their code but even just a cursory glance at the api they were using in that article makes me fairly confident they are *not* following the spec. 
Ruby has an interesting convention: methods that update the receiver usually end with a bang. So a = [1, 2, 3, 2] a.uniq #=&gt; [1, 2, 3] a #=&gt; [1, 2, 3, 2] a.uniq! a #=&gt; [1, 2, 3] (I actually hate the `uniq!` method. If a Rubyist is teasing you about JavaScript's WTF design choices, ask them about `[1, 2, 3, 4].uniq!`)
https://news.ycombinator.com/item?id=7200979
My anwser to this question would have been the complete opposite a couple of years ago. Then I wouldve pointed you to the books in other comments, told you to practice, practice, practice with medium scale apps after that, contribute on github, etc. But now.....maybe ive become more of a hard ass, maybe I value life differently, Idk but my advice is different: If you really mean it when you say you are miserable and you KNOW this is what you wamt to do, its time to give up two years of your life. Doont WISH you had done it, go do it. Now. I know its difficult. I was in this exact same spot. I started programming as a kid and made momey with it on the side but for a long time I judt saw it as my primary hobby and went for a different and unfulfilling degree/career. Im not saying that to say our situations are exactly the same but I do get this is really hard to do. I had a wife when I went back, we had a baby my senior year and I was already working full time in development at that point. It was HARD. However, ive lived both lives and that sacrifice is well worth it. I do think people can get hired and work in the field without a degree, but that is becoming more and more difficult each year. In my opinion, just go do it. Being miserable in your career is just as debilitating as being miserable in your marriage, in my opinion. 
The naming is actually very clear, most beginners simply are not familiar with the word "splice" in the first place: it tends to be confusing because most beginners don't know the concept (or don't know it's called that). Slicing is always non-mutating. This isn't a JS thing. It's a bit confusing to an absolute beginner who's not familiar with the operation, but it would be more confusing to those *with* experience to name it differently. Unless you think splicing == slicing (which is a language problem, not a naming problem), you have no reason to use `splice` without expecting it to be potentially mutating. I think the problem here is actually that many JS methods are mutating, which may or may not be what the user expects. Ideally every method should be non-mutating, but that makes a couple of otherwise simple things a lot harder. I agree that *functions* should be named (as a rule of thumb) in past-tense if they return a copy rather than mutating the object. But doing so for everything is impractical and in many cases the semantics already imply something is non-mutating (e.g. `map` or `filter` -- it'd be awkward if these modified the array rather than returning a new one). I'd agree that never naming something which is mutating in past-tense is a good idea, though.
These issues are not a characteristic of callbacks, but rather of asynchronous execution of callbacks. When a callback throws an error, it is up to the caller to catch it. In the traditional callback pattern, there is not guarantee the error will be caught. The Promises spec ensures that thrown errors will be propagated forward and can be handled by the promise consumer (using the second argument of *.then*, or using *.fail*).
This statement by itself doesn't really make much sense. Promises are implemented with callbacks, so it's really just a very specific use of callbacks (though there is a spec for it and it does add a lot of useful behaviour). You could theoretically provide the same stack trace / exception bubbling behaviour that most good promise implementations provide without implementing promises, but the difference is just that "callbacks" is a less specific pattern whereas promises are a very specific one. So, yes, if you just use callbacks to handle async logic you won't magically get good debugging info if you don't take the necessary precautions yourself. But that's pretty much tautological. Promises simply let you avoid having to worry about this problem yourself.
I'm not sure about it. Secondary buffer means more I/O, and larger one can lead to more memory consumption which definitely will cause CPU stalls. avconv process can benefit from multithreading: pass '-threads 4' to use four cores. Video processing has never been an easy task, I think the hardware is a key for gaining speed here, especially with GPU (CUDA bindings?).
If you want to use getter/setters with Knockout, there is http://blog.stevensanderson.com/2013/05/20/knockout-es5-a-plugin-to-simplify-your-syntax/. Of course, then you give up support for IE6-9. You can also create the structure that Vue.js brings you in surprisingly view lines of JS when using Knockout. It is always good to have options (especially on the non-opnionated side) though!
I think it's pretty cool and that this sub has a tendency to focus on questions/discussions for newbies. I have rarely seen any tech demo at all get much feedback so don't sweat it. Remember the cardinal rule of programming: "You can NEVER impress another developer" Also, to be honest, there is just no possible reason why this isn't hosted on github. Linking to github for source rather than something in pastebin is pretty much a standard expectation these days. Put everything in github/bit bucket unless you have a strong reason not to (my 2cents).
If you were comfortable with the code before and the only new requirement is to migrate the data from static arrays to local storage, you shouldn't need to introduce the added complexity of a framework in my opinion. Local storage should provide plenty of space for the data afaict by your description and adds very little complexity in comparison to accessing an array. Edit: I just wanted to explicitly say that whenever you are evaluating the use of any framework or library you should consider what value it adds to your specific use case and weigh that against the cost of including said tool. Much of what we do is a form of risk management and becoming skilled at performing this sort of cost/benefit analysis is extremely important for pragmatic development. 
Works really well on a tablet! 
Thanks. I set up a Github repo and replaced the pastebin link. Although I may have received more upvotes in /r/HTML5, /r/javascript has been more helpful.
This convention is common in a lot of languages, including most Lisps. It's also common to use a question mark to indicate a predicate, such as `negative?` or `even?` in Scheme. I personally prefer such a convention to the one recommended in the article since it puts the extra emphasis on functions that mutate stuff, reflecting the fact that mutating functions should be treated with extra care compared to functions that just get data.
You are right. I've noticed, that conversion to webm with avconv didn't benefit from multithreading (I'm not a ffmpeg guy, maybe there's a compatible codec?). Good to know about GPU capabilities, thanks.
Thanks. I plan to put together at least two more posts. One about the server-side strategy and another covering the client-side/browser.
The code has been completely re-written and I am substantially adding to the functionality of the app as a whole. I am also looking at this as a learning experience, so I wouldn't mind exploring a framework from that standpoint, but I'm not sure which one makes the most sense when not building a whole app on the framework.
I dislike the way you are spamming the global scope. A little Object Orientation, and be it an Object for your methods, doesn't hurt. Also, your code has unneccessary complexity, e.g. function $get(name, inChildren) { if(inChildren) { return inChildren.querySelector(name); } else { return document.querySelector(name); } } could have been written as: function $get(name, inChildren) { return (inChildren || document).querySelector(name); }
Can't really help without looking at your code where it doesn't work. Easiest way to check on this is run firebug and see what external files are being called.
Try libx264 with a newer ffmpeg (currently using 2.0+ for my project). As far as I know, webm (libvpx if I'm not mistaken), doesn't support multiple threads. So it comes down to the codec, basically. It's take a while to compile ffmpeg if you wish to customize (there are static builds available as well) it with more "bells and whistles", but once built, it works like a charm. 
Will do, thanks for the input.
Everything has dependencies, especially a framework like this. A lack of specified deps only means the deps are not explicit. In fact that's exactly what it does: there are several third-party functions directly inlined into its codebase. It also means the framework likely reinvented solutions for various problems that have already been solved in better ways. And this means the solutions likely suffer from the same issues the existing ones had to go face. Software development is about standing on the shoulders of giants. Trying to ascend to the same height in a single leap raises suspicion - because you'll likely come crashing down shortly.
Matz stole bang from Scheme, he has said many times that Ruby is 50% PERL, 50% Scheme, and 50% Smalltalk.
Worse than that, that's three files in the 2-3k range and one 9k god module. Yikes.
Man, this one is an ugly beast, but may do what you want. Don't bother with the video. (I didn't.) http://www.developphp.com/view.php?tid=1253
This would not work because "theme" as used inside the &lt;link&gt; is not a variable. It's just the word "theme".. and the presence of the single quotes and the plus signs would make it so that even if you had a file called theme.css it would fail.
Except for the arguments part, most of these are easier to catch with linting. That said, it's still a good default.
I didn't think you could/should use IDs/classes outside of the BODY tag. I'd like to hear people's opinions on this.
Hehe, it just makes me wonder why the usual approach is to target by using getElementsByTagName and specifying which one by using brackets... when IDs make it all very simple.
Keep in mind the onload behaviour of iframes is a bit unreliable especially with older browsers. This is especially problematic if the iframe content changes.
cool. mobile friendly? I f---ing hate modals.
From [w3](http://www.w3.org/TR/html401/struct/global.html#h-7.5.2) Almost every HTML element may be assigned identifier and class information.
As I said in the presentation I hope framework makers can learn from each other and take the best features from the competitors. At first glance it looks like Vue has done just that. I look forward to see how it develops. 
Cool but weird name
Basically, this is equivalent to https://github.com/MoonScript/jQuery-ajaxTransport-XDomainRequest though this is library agnostic
Who enforces the "standard?" Even MDN says it's still experimental and unstandardized. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise &gt; **This is an experimental technology** &gt; Because this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.
[Essential JS Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/)
Sorry "proposed standard" would be more fitting. However, it does have a rigid specification http://wiki.commonjs.org/wiki/Promises/A which is why youll often see people stating that jquery deffereds do not follow the specification. Id like to point out though, that the fact that this isnt a standard as of yet, but the development community has begun adopting it so rapidly, means library creators need to be even more cautious about terminology and claims. Another great article to check out on the promises/A spec is this https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md
Maybe I just haven't used Knockout enough, could you show me an example of how to elegantly compose knockout viewmodels?
&gt; I dislike the way you are spamming the global scope. A little Object Orientation, Putting them all under a single object, so you have `library.get()` and `library.http()`, is not object orientation (even if `library` is implemented as an object). &gt; Also, your code has unneccessary complexity, e.g. Your example is nitpicking.
The routes defined in Express are for the back-end, i.e. the REST API routes. You'd need to defined Ember routes separately.
You can check [theses slides](http://www.slideshare.net/nzakas/scalable-javascript-application-architecture) that give IMO a good introduction to the structure of a med to large-scale application. I also think that there are some libraries (not framework) made to help you structure like Riot.js, Aura.js...Just reading their getting started page can give you some hint about how to proceed with your own structure.
It's a bit late, so pardon me if this makes no sense, but I'll try. I've never been one much for paper and pen planning, if that's what you're asking. Obviously when working on a team planning your approach is crucial, but for personal projects I find the single most important (and often only) planning step is thinking through my project until can picture it entirely in head. I know how each part will work, I know how each concern will be separated. At the end of the day, code is a bit like a fractal (if you imagine the deeper you into a stacktrace the farther you're zooming in on the fractal). You have objects, which have methods, which you call from other objects' methods, which you call from other objects' methods, and so on. Looking at any layer (i.e. any method), your code should be descriptive enough that you know what's going on in all layers below if not exactly **how** things are happening. For example, if I've already written and tested my reddit.getUserSubmissions method, then when I use that method, I don't particularly care how it's implemented, I just know what it does. Ideally your code ends up with both horizontal separation (I.e. your code to pull reddit posts is separate from your code to optimize your database) and vertical separation (your code to make HTTP requests is separate from your code to parse the returned JSON). If you imagine this as a grid you end up with beautiful, modular code which is perfectly organized. This doesn't actually happen. It's just a dream, but this is the extent to which I try to think through my implementation before I start work. Once I think I have the perfect implementation planned then I start writing code and let reality blur some of the lines. Tl;dr think through your problem before you write code. Ensure that you can see the end before you begin. Then don't be sad when your structure isn't perfect. 
I thought about this question a lot. One trick which often helps me - look back and think what you've done. Answer simple questions: * **Does this code solve my original problem?** If the answer is no, and you feel like you wasted time writing this code, answer: "What should I do to avoid this in future?". * **Is this the simplest possible solution to my problem?** Always challenge this, with "Can it be done easier?". This will prevent you from over-engineering apps at the beginning, and again, will save you time later. * **Are my tests covering all aspects of my code?** This is one of the best questions to keep your code clean. If you can't test something - it is a red flag for "something is wrong with my code". Find what it is and fix it. Tests really help you to structure your code better. Don't hesitate to prototype if you are in doubt. Designing an API? Write a client for the API first. Change it until you feel comfortable with it. Books are one of the best ways to gain experience without spending years yourself. Two books, not javascript specific which helped me a lot: [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) - Years of experience expressed in one book. [PoEAA](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420) - Classic work about enterprise apps. Reading books and programming a lot will definitely help. Reading other people's source code is also very enlightening. I found [angular.js](https://github.com/angular/angular.js) code very amusing. 
Cool! I think you can use event.clientX instead of event.pageX and freely center the canvas.
Then it would be a completely different library, if it changed from a set of functions, into a set of classes with methods. There is also nothing with libraries which are just a set of functions. Especially for small libraries.
Red-Green-Refactor is the method I use. Basically, you don't plan out your entire architecture ahead of time. Instead, you focus on developing a single feature at a time. You take that feature, and first you write an acceptance test that follows the happy path of the feature if possible (in the Rails world we use Cucumber or Capybara, or if it's a large JS app we can write some of these directly with Jasmine), or you write some unit tests if you can't write an acceptance test for any reason. You make sure that the tests provide good coverage of all of the business rules and requirements around the feature. These tests should fail, and they should fail correctly (meaning that they should be failing right at the point where your feature is missing.) This is "red" (your tests are failing). Then you write the code to make those tests pass. During this phase you shouldn't write any code that isn't covered by a test, or that goes beyond the scope of the story. YAGNI. At the end of this phase your tests should be passing. This is "green" (your tests are passing). Then, you refactor. You look at your code in the context of all of your other code. Is there duplication that can be extracted? Is there a domain concept that is now more fully formed and can be encapsulated in some new type of object? Is there a more efficient way to rewrite the code you just wrote? All of these are possible refactorings, and your tests should give you the confidence to refactor and rely on the tests to tell you if you mess up. Sorry if I missed anything or any of this doesn't make sense, I just woke up but this is something I like talking about so I wanted to provide my two cents.
Guys I just release a small library for make calls against your Rest Api with a Promise based interface, I called this "Chainable Api", please check it out and tell me your opinions! :D
&gt; Then it would be a completely different library, if it changed from a set of functions, into a set of classes with methods. That'd be the whole point of the exercise, yes. &gt; There is also nothing [wrong?] with libraries which are just a set of functions. Especially for small libraries. Except for spamming the global scope, which some people really dislike, but I take your point, they don't have to use that library.
&gt; That'd be the whole point of the exercise, yes. But, why? Do you really need to throw in classes just so you can do `$append( parent, child )`, `$get('a.button')`, or `$http({ url: 'google.com', good: callback })`? edit: You'd also still pollute the global namespace if you use an OO solution, because those constructor functions will still all be stored there. You'd need a module system to help with that, not classes.
Very clean code and nice functionality, it should be good once you have corridor generation involved :D
Not at all, you can either use a very simple Object: $ = { get: function(selector, base) { ... }, http: function(url, callback) { ... }, ... } Or store everything into the Object your stuff is related to: $ = function() { ... }; $.fn = $.prototype = { ... }; Therefore the only thing that remains in global name space is $.
Working groups were created for the express purpose of speeding up the standardization process because it is so bad. CommonJS proposed it but the people in the other working groups seem to be behind it. Thats why the more widely community accepted implementations mention conforming to this spec on github. One group of people should not be the only ones who have input on standards. Thats definitely not the web I want anyway. 
Which is what I was talking about above, in response to your original comment that he should use object orientation ... &gt; Putting them all under a single object, so you have library.get() and library.http(), is not object orientation (even if library is implemented as an object).
Working on that at the moment. Thanks!
Make a PR and I'll merge that shit!
You should name it dunGen (dungeon generator) or something like that :) 
Thanks! I'm getting this response from more people. Next up is refactoring my code and making it more modular!
Good idea, thanks :)
For me it depends on if its adding a feature to an existing project or if its a new project. If its adding a feature I usually discuss the dependencies with my team and then just start free writing about the theoretical use cases and architecture. Then I iterate over this while looking at related code and branch it out into seperate documents and diagrams. When I go to code, in either case, I start with a failing test. If its a new project I am usually more meticulous about diagramming use cases and I find that starting out by describing the application as a finite state machine is the easiest way to segue into coming up with a plan for what the architecture should look like. Again, though, I cant stress enough how much starting with a failing test and branching out the design has increased my code/design quality since ive adopted TDD/BDD. It may be difficult at first and feel extremely slow but it has actually increased my productivity and being in a situation where I cant begin with a test actually makes me uneasy these days. 
As in an iframe? You mean something like the following, inside an iframe?: setInterval(function(){ window.location.reload(); }, 11000);
I'll try that, thanks for the response!
Hmm doesn't seem to work. It responds with an error, telling me that the information wasn't received or something. Here is the website I'm trying to use this on. http://www.bellacollinamansion.com/Bella_Collina_Experience.html When I vote, the vote frame changes to "Vote successful". If I reload that frame, it resends my query. That's what I'm trying to replicate automatically using a script.
If you're using pure javascript you'd want to set up a nested loop to step through each value and then use something like the document.write() function to build the html be able to reference the array[x][y] values
You're trying to fix the votes? -_-
As for actual code advice, you should look into graphs, nodes, and graphing algorithms. While this solution seems to be on the right track, it will not scale. You may be able to create a relatively complex/good looking map out of this, but you won't be able to, for example, store information in your map, it will just statically display on the screen. Some concepts to look in to: graphs, trees, path finding(dijkstras algorithm), depth first and breadth first traversal. Good luck leveling up! 
Well not fix. I'd like to automate my action so that I don't have to right-click and reload every 10 seconds. I call it adequately using the resources made available to me. 
Always start with data structures, once those are correct the rest mostly writes it's self.
Thinking in this fashion is a great way to create a terrible user experience (but a great one for programmers that consume an API exposed by your app)
gmail and g+ are definitely not gwt.
Yes so sorry i'm kinda new to reddit so where should i post this you think
good tip!
ugh, seriously? Screw YouTube -.- NinjaEdit: Thanks for the heads up...
Given the context of "something weird happening", and taking a brief look at the code, the first thing that stands out is that you are using an incremental "i" variable from the global scope (i.e., you aren't declaring that variable in the function's scope); function initialDotSetup() { allDots = document.getElementsByClassName("dot"); for (i=0,max = document.getElementsByClassName("dot").length;i&lt;max;i++) { allDots[i].onclick = function() { So, even if that's not your issue *at this point in time*, you should fix that anyway. 
This looks awesome, would be interesting to try and integrate it with AngularJS as I am using that a lot at the moment, have you looked at how you could make it compatible with Angular?
looks neat
I think for the basic assignment and given the level of knowledge of the OP it's perfectly fine. This isn't going into production or anything
Hi Jona! I'm glad to hear that, thanks you bro. Your proposal sounds very good I'm don't know how integrate this with Angular but I think that is a great idea, I worked with Angular in the past, and know the $http module as I know is not Promise oriented. I'm currently work with Ember which is a amazing framework for me (if you don't try never you should taste :) ), they have a really good promise integration for work with routes, models, controller injection, etc. What do you think about help me to create a module, open a PR, or whatever for integrate the "Chainable Api" in Angular? I hope your answer!! 
From how I understand the clues I've found on the 'net, consider the Google libraries to be like the apache set of libraries, or the kde framework: huge, all kinds of purposes, all kinds of interdependencies. Client libraries likely won't contain backend support, but they might rely on common libraries that they're not willing to push out in the open (and commit to their interfaces). But that's all guess work based on running into random statements, so I might be totally off (the most famous statement being "Google uses Bayesian filtering the way Microsoft uses the if statement"). It's also possible that these clues (as said, java and c++ based) don't translate to javascript - I have no idea if Google uses JS on the backend, or how much. But they're certainly willing and capable to mix java code into javascript projects (eg. through the tools that underlie GWT), which might be part of the puzzle.
I've been trying to use the line below when I define my table data, but this doesn't seem to work. Any suggestions? &lt;td onclick='alert("hello");'&gt; 
Why can't i store information on my map? If i, for example, create a Tile object for every tile, i can store information about each tile.
Khoker is right; Also a good programming problem solving technique is to make a jsfiddle with the problem stripped down to the bare bones. Often times by stripping away extra bits of the page or the code, you'll find that your example suddenly starts working when you don't have x, y and z in the code, and can work backwards from there.
Nice find! I'm a still pretty much a javascript noob and have been messing with backbone to make a phonegap app for about ~2 months. It is nice to see an example of app structure. The grunt server feature seems really useful also.
You are very close: [Solution](http://jsbin.com/bamut/1/edit?html,output) I don't know what printCellValue does, so I made it return i+j. Anyway, that's not affecting the outcome.
Okay... Youtube is like a magic box that sometimes works as expected, but most of the time it just punches you in the face with exotic objects.
Thank you so much! I totally forgot about those escape characters. It worked perfectly. 
Glad I helped!
Like I said, there are many alternatives, but they're all pretty slow. WolframAlpha in particular is much slower - I tried out your example (42 from base 10 to 2), and the initial page load took 6 times as long, I had to type 6 times as many characters, calculating the result took several hundred times as long (Wolfram uses their server, basetranscoder is clientside), and copying the result took about 10 times as long. I made this because existing solutions are less convenient than they could be, not because they don't work.
Another question I have for you is: I'm now trying to do now: &lt;td onclick="alertInterest()"&gt; but for some reason this method doesn't get called and an alert isn't displayed. function alertInterest(){ alert('hello'); //place holder for now, it will do other stuff. }
For the love of Pete, use punctuation! Not to mention that I is always capitalized for crying out loud. You're an educator, own that title.
Dunno man, for me it works: [See Here](http://jsbin.com/bamut/3/edit?html,output)
Oh boy, I haven't done this in like 5 years. This quick result I got from a search reminds me of the sort of stuff I used to read...may start to point you in a good direction: http://pcg.wikidot.com/pcg-algorithm:dungeon-generation
We do not know where is he from.
Yep, tested it, and it works.
If he insists on using a variable he can define it somewhere and then modify this line: swapStyleSheet('style1.css'); To this: swapStyleSheet(variableHere);
User *Dencho* is correct: [His comment](http://www.reddit.com/r/javascript/comments/1xdvbz/help_using_javascript_to_determine_stylesheet/cfagoew) Check for yourself: [Download Demo](https://mega.co.nz/#!BQBBQLxZ!3srSloJAnsRJRNjoLOpUWd3KgH-CXvDpEZtvmDiSbOQ)
Closure Library is the underlying framework. There are modules that are not released to the public.
In essence what you want is an SSCCE: http://sscce.org/
Probably something like this http://stackoverflow.com/questions/10580388/youtube-embedded-video-start-stop-event
That's slick
Not sure how you're embedding it, but if you're using an iframe, reference this [doc](https://developers.google.com/youtube/iframe_api_reference). You'll want to load the YouTube iFrame API according to the doc, then create a new YT player object in the onYouTubeIframeAPIReady callback function using the id on the iframe. The YT.Player constructor takes an event object, which defines what functions to call when certain YouTube API events fire. The event keys are listed in the doc. Set a function name as the value for the onStateChange event property. var player; function onYouTubeIframeAPIReady() { player = new YT.Player('playerID', { events: { 'onStateChange': onPlayerStateChange } }); } Define the function being called by onStateChange. From there, you'll want to check if the event data is the YT.PlayerState.ENDED constant flag. function onPlayerStateChange(event) { if (event.data === YT.PlayerState.ENDED) { // show image } } 
[Gmail doesn't use GWT](http://programmers.stackexchange.com/questions/109094/why-doesnt-google-use-gwt-in-most-of-its-applications)
Your `freebieDotSetup` function leaves much to be desired. It looks like you get all elements with class name of `dot` and set up some arrays with the lengths which I assume to be the number of 'dots' that should fit in them. You then assign members of the `dots` collection to the appropriate array I think your logic might be a bit off here, it'll work for the first two, but once you get to `disciplineDots` you're assigning from `allDots` with `i+abilityDots.length` -- this would be the 150th to 180th -- but you've already counted up to 195 from the first two arrays. --- If I was you, I'd rework your markup a bit to use multiple class names -- it may be valuable to keep 'dots' there to get everything, but there's nothing stopping you from putting `str`, `dex`, etc. as an additional class name to get just these "dots". You can then use, `document.getElementsByTagName('str');` to get all the str elements. 
That link doesn't prove or disprove my statement. I thought that they publicly said that gmail was using GWT, but I can't find any definitive source.
Can you provide a source either way? I had thought that Google said gmail did, but I can't find any definitive answers.
It's a common misconception. [Gmail is done in Closure Tools](https://developers.google.com/closure/library/?hl=pl&amp;csw=1).
Awesome, thanks! +/u/dogetipbot 10 doge
There's currently no option for that. Without any statistical data, I designed the site for my needs, and I've never actually needed to convert to or from a base other than those provided. If you don't mind my asking, is your need for those bases very rare, or more common? I'm planning to add customization eventually, sooner if there's interest. My current idea on that point is just a "customize" button, which lets you add and remove arbitrary bases, then remembers your selection through page loads. My thinking is that while user needs may vary, it's not often a person needs to convert to/from a base they've never used, or anticipated using, before. The design is actually very amenable to extension - if the HTML just contained an extra input element with a `data-alphabet` attribute of the appropriate length (in this case 4 or 62), everything else would happen automatically.
This can be accomplished in JS just as well as in Java.
Lets give vanilla JS answers for such elementary questions. If someone does not know how to create DOM elements in JS, lets not go the extra mile of making then learn CoffeeScript.
Learn to use StackOverflow, this was super basic. Check the sidebar if you can't find the site yourself.
No, but I'll put one up in a minute. I did leave everything unminimized though, so that any curious devs could look around.
This is pretty cool. I wished it supported other platforms. Alternative input devices are always nice to see. Now if only touch screens had tactile feedback...
The copyright issues on YouTube are kinda complex. On the one hand a lot of music and video does not fall into fair use, on the other hand Google bends over backwards to make automated mass takedowns easier and seems to use this as a tactic to turn users against the copyright holders. Currently the safest bet seems to be to avoid non-royalty-free music (including radio) and just stick to CC-licensed content for videos like this. But yeah, YouTube can be quirky -- especially in countries like Germany where the music industry doesn't fully co-operate with them.
Hopefully no-one ever asks for compiled JS as project code :)
How can grasp differentiate between a call to Array.prototype.last and some other function named last? Is this even possible using an AST?
Thank you! It's true I'll probably get out-SEO'd, but hey, if you give me a link somewhere it'd help.
At this point it's kind of a farce - native methods are used and just fed the alphabet's length. Once the attribute is fully implemented, though, it will be case-sensitive in a sense: it is intended to serve only as a set of glyphs. So, 2 would be rendered as `x.dataset.alphabet[1]`, and thus reflect the alphabet's case. The native methods are also the reason you can't currently go above base 36 - that's the highest base they accept.
What about, for example, a path through tiles? What if a monster needs to chase your player? What if you want to command multiple characters on your map rts style and want them to not all take up one space? They need to connect in some way. If you create a tile object with a path to other tile objects, and maybe added a render/update mechanism, then you are applying graph theory! 
[Request Quest](http://jakearchibald.github.io/request-quest/)
Put this on github so I can fork it for base 58 and 32 please.
I've looked into it, and it seems like i have to convert my dungeon generation to graph theory! Do you know any scripts for this? It seems like an enormous amount of work to create all those points, vertexes and edges myself.
Thanks mate.
This is great for subtle animations like animating graphs, pie charts, fading images etc. when user scrolls down.
This looks useful in some cases but introduces some new restrictions such as not allowing http headers to be set, only supporting GET and POST, and requiring a Access-Control-Allow-Origin header in the response. It might be possible to use it selectively if the user opts in though.
There is no common framework at Google, some things are still written in GWT (though I believe most are trying to move away from that to Angular). Larger applications are pure Closure. I don't believe there is a framework that can be pulled out and open sourced. Gmail and G+ are large applications so they've been written from the ground up. There are some modules and code that gets shared beyond the library but they will mostly be Google specific. If you are looking for a framework that works with Closure then you can try: https://github.com/rhysbrettbowen/PlastronJS or https://github.com/steida/este
Thanks camus! Glad you like it. 
Closure uses a fair bit of Guice as well.
Thanks for your answers. I've just found [Single page apps in depth](http://singlepageappbook.com/) which looks interesting too.
Anyone know what Google is using Dart for?
Thanks! I could use this in our next web refactor :)
By "fix" do you mean completely wipe IE from existence? Thanks!
Just wanted to emphasize *subtle*. Please don't use this on every image featured in your latest article (lookin' at you Medium). 
I think I found a suitable library after a quick search. It appears to be free with support options if you need them. http://web.chemdoodle.com/
/r/dogecoin 
may be helpful https://github.com/kyberias/orgchem
Thanks for the reply. I know the code: {document.getElementById("youguessed").innerHTML = "XYZ";} will switch the h3 element to whatever I want. What I'm having issues with is that I don't know how to compare the user entry (1 or 2) with the random variable of what came back when the coin was flipped. If the coin came back &gt; .5, it came back as tails. So the innerHTML should say, "great job" if the user guessed right, or "too bad" if the user guessed wrong. I can't figure out how to compare the the variable "guess" with the variable "userguess" and make it change the h3 accordingly, is where I'm stuck right now.
Well, your code has decided that values &gt; .5 are heads and values &lt; .5 are tails. So, when the selected value is &gt; .5 then the correct guess is 1. When the selected value is &lt; .5 then the correct guess is 0. Note that you have no case for when the value is equal to .5. pseudo code: if guess &gt;= .5 if userguess equals 1 then victory! otherwise failure if guess &lt; .5 if userguess equals 2 then victory! otherwise failure 
here is a possible solution: http://jsfiddle.net/9bZN5/ have a peak if you are still struggling. note that I normalize the value right away. The comparisons could be done with === but it doesn't matter in this case. 
http://i.imgur.com/bazqF.gif
 if(object.type === Type.Zombie){ // run away fast! }
Very crafty :D
Really nice article -- I like how you build up from a naïve implementation up to the A+ spec. I also like how you are honest about the shortcomings.
Yes, this is a good approach too, but would not work with more complex situations. Imagine a n if with &amp;&amp;, which requires 2 variables to have a certain value.
If that's true, ok.
Thanks for this, but I really wish it wasn't in coffeescript - such a shit language.
So I searched a bit more and found a really cool one here: http://www.scilligence.com/web/jsdraw.aspx I downloaded the evaluation copy and played around a bit but the javascript code is minified and I'm not sure how to make it easily readable. 
nice work, but i honestly hate the trend to animate every f*cking thing while scrolling. it's ok if you want to draw attention to a certain part of your page, but when everything jumps around all the time i just leave that page because it's annoying (and i thought that what flash was for - at least that's the reason i hate flash)
PS: You have to join the group too.
Question. Are you assuming that the return value of the grabPoint() will be what you do in the callback of the get? The reason I ask is, that's not all all what's happening here. you're calling the get, and then immediately returning txt variable (which you haven't defined anywhere), then when the .get comes back it creates/assigns a global variable txt the value you're trying to retrieve. I don't know what you're trying to accomplish , but generally speaking you'd call some function from the callback (the function you're passing to .get) that needs this data. It might look something like this: function grabPoint() { $.get('stats_final', function (data) { var txt = Number(data)/1000000; updateChart(txt); }); } 
seems legit
Whoa! This is too trill!
I love this blog. The earlier post on Thorax was great, too.
I'd *strongly* suggest you use promises for this. Nice thing is that jQuery returns the jqXHR object which uses their deferred object (a promise implementation) So you have: function grabPoint() { return $.get('stats_final', {cache: false}); } Now, wherever you call this you can do this: grabPoint().done(function(point_data){ var point = Number(point_data)/1000000; updateData(point); }); This is a better than embedding the logic in a callback within grabPoint (as it makes grabPoint context agnostic, it's just grabbing the point and returning the promise of the data), and it solves your problem of not correctly understanding the variable scope and the delayed execution of the async get call in the original code.
On a more JS philosophical level, why use promises? I can read on the positives and negatives but is there a real reason to switch or is it merely a technical fad. 
In the long run, Javascript will be forced to add some proper "async" syntactical sugar to reduce the flow complexity of complicated asynchronous workflows. In that sense, promises are indeed a "technical fad" because as soon as JS has proper syntax to deal with this problem, promises become useless. However, given the glacial pace of Javascript development, I'm not optimistic that an async syntax can be formed and implemented and widely disseminated in the next decade, therefore rendering Promises a very viable design pattern for JS development for the foreseeable future.
The unfortunate thing about this definition is that the term isomorphic is used in the definition of the word isomorphic, so people who don't understand what the word means still won't understand. Do we have a definition that does not rely on the word itself? 
excited to start playing around with generators!
If you're targeting the browser and don't want to use something like Iced Coffee Script as a preprocessor, then you have two choices for the foreseeable future when writing **non-trivial** (bolded for emphasis) async code: 1. Struggle with callback hell using native syntax 2. Use a library like async.js or a Promise implementation And of the two options, using a library is much preferable, because there's no good way to handle callbacks without it in non-trivial code. And of the libraries, a good promise library like Bluebird would seem to be optimal. The positives are "much better than all the other feasible options for wrangling complex async code", and the negatives are "not as good as some of the non-feasible options for wrangling complex async code". The tradeoff is pretty simple. Now if you're okay with using a preprocessor, then you can write your code with magical awesome syntax, then let the preprocessor mangle it into callbacks or whatever behind the scenes. &gt; is it merely a technical fad. No. Actually, promises are being added to JS natively ([see this](http://www.html5rocks.com/en/tutorials/es6/promises/)), so they would seem to be here to stay. And ES6 promises use a compatible API, and should interoperate nicely with promises from libraries like Bluebird. And even if we all end up programming in Dart rather than JS, Promises (under the name Futures, but they work the same) are how Dart handles async code too.
&gt; In the long run, Javascript will be forced to add some proper "async" syntactical sugar to reduce the flow complexity of complicated asynchronous workflows. In that sense, promises are indeed a "technical fad" because as soon as JS has proper syntax to deal with this problem, promises become useless. Actually, that's sort of already happened, and the proper syntactical sugar JS is getting is...promises. See [here](http://www.html5rocks.com/en/tutorials/es6/promises/). JS development is indeed glacial, but Promise support is already shipping in Opera and Chrome. :)
This doesn't work well on mobile at all. It waits until the touch stops, then animates. Additionally, there are issues with the animations firing again on next touch. 
Seems to be working for me http://jsfiddle.net/D9tEp/1/ Note that your CSS is transforming the divs within the div.reply container
Thanks for the reply. I was actually reading about it on html5rocks before seeing your reply. I finally understood why it's useful. PS: it's welcomed coincidence that I'm struggling with a modular implementation of a small project I have. The ajax success function takes time to run to the point where everything else has to stop and wait until I fetch the data first before allowing the rest of the code to run. 
Note that Math.random() returns a random floating point number between 0 (inclusive) and 1 (exclusive), or &gt;= 0, and &lt; 1. That's anything from 0.0000000000000000 and 0.9999999999999999. You have two cases, one for &lt; .5, and one for &gt;.5. That means 0.5000000000000000, an unlikely case (but it's "random", so we don't know that), will do nothing in your program. So your cases are for these ranges: &lt; .5 = 0.0000000000000000 - 0.4999999999999999, \&gt; .5 = 0.5000000000000001 - 0.9999999999999999. That comes down to 4999999999999999 chances for the first case, and 4999999999999998 chances for the second case. TLDR; The odds are in favor of tails by the slightest of chances. Change your if statements to &lt; .5 and &gt;= .5, or just use an else statement. Edit: Grammar &amp; further explanation.
the browser caches xhr requests by default. this will work function grabPoint() { $.ajax('stats_final', {cache: false}).done(function (data) { txt = Number(data)/1000000; updateChart(txt); //define this update chart function }); } check out the docs for the ajax method and the cache property here: https://api.jquery.com/jQuery.ajax/ good luck
are you going to add instructions to the readme?
Generators are another technique to dealing with async "call back hell" which has some rather exciting use cases - yielding when required. Libraries like [Co](https://github.com/visionmedia/co) are a good example of using generators for this purpose.
It works as expected in Chrome and the stock Android browser for me. Which OS and browser are you using?
 I'm not recommending OP make async calls synchronously but since this seems to be a bit of a learning experience I'd add if you check the docs you can also pass configuration options to Ajax calls to make them perform synchronously. Actually, the jquery docs are quite good. Giving them a once over would have probably solved the problem straight away. Never forger to rely on those docs. 
This is great, [thanks!](http://i.imgur.com/g3gO23Q.jpg)
The jQuery docs *are* excellent, but in this case it seems to be both an issue with OP's understanding of callbacks, scopes, async code, and caching. The solution above fixes all of them AND makes it a clearer code flow.
TIL that Animate.css added more animations to their library.
Thanks to both of you. You are right that I am not a web developer, and haven't touched a lot of this since college. This was just handed to me because I am known for getting things done quickly. 
Definitely. I was hoping to be gentle as this seems like possibly new territory. Although, starting out with promises to solve async problems is probably the best thing to do. Hopefully everyone learning async patterns is picking up on them early on these days. If OP is seeing these replies: if you have more questions as to the "why" on the things /u/abritinthebay mentioned, feel free to ask. 
I haven't read this tutorial but I wish all tutorials had such a clean and elegant layout. At first glance it simply invites me to read it and it looks like a joy. I hate cluttered tutorials that are hard to read..... they're the worst. Do you have a template layout I can fork?
Thanks, that was an unexpected compliment :) My blog is built with [Wintersmith](http://wintersmith.io), it got me started and handles the more tedious stuff like code syntax highlighting. Then I tweaked the styling to my liking from there. I guess you can look at my blog's [repo](https://github.com/city41/blog).
But ... but ... Ecma International has promises and concurrency scheduled for ES7, not 6. Why is it that various working groups are describing the specification for promises? Are they working with Ecma International? Also, why are we using promises anyway? Why not use existing research on concurrent software development? Why not have `async`/`await` instead of reinventing the wheel, and creating a whole new host of features and the problems that come with them?
iOS Chrome
&gt; But ... but ... Ecma International has promises and concurrency scheduled for ES7, not 6 Frankly, the management of the spec process is confusing. I wouldn't even know where to go to figure out what the official roadmap is, if there even is one. :) &gt; Also, why are we using promises anyway? Promises are good enough, and they work today, because they don't require any new syntax or sugar. async/await don't, because they *do*. That makes promises an easy "gimme" to add to the language. As of today, I can install Chrome, open up a console, and type p = new Promise(....); and have it work, and if I want it to work in older browsers various polyfills that will expose a compatible Promise object in older runtimes. And if I don't like Chrome's implementation (and the current implementation has some warts, eg, Promise.race() has completely broken semantics) I can use one of a number of Promise libraries like Bluebird in all browsers. On the other hand, none of that is true for async/await. It's not supported by any browser, and there won't be polyfills even when it is, because there are no libraries that enable async/await, because it needs new syntax. And *that* makes it too major for ES6; it'll be ES7 if at all. Besides, all is not lost. Generators (also coming in ES6) offer some scope for significant improvements in syntax, clarity, and speed. :)
The process goes like this: 1. People realize threads are a pain and decide to use async callbacks instead. 2. Then they realize callbacks suck and that promises/futures are better. 3. Then they realize promises suck and async syntax/generators are better. 4. Then they realize generators suck for asynchrony and actual coroutines/fibers are better. Most of the JavaScript community just reached step 3. (I'm guessing there's a step 5 that's monads and/or continuations.)
Is there any reason you defined your own max and min functions, instead of using Math.max() and Math.min()? Performance? 
You could [check this](http://jessefreeman.com/game-dev/rot-impactjs-awesome-random-maps/) out as well.
Graphs are relatively easy to design the model for, the tricky part is generating them. This is ultimately left up to you, in my data structures class, we just parsed a text file, and generated nodes and edges based on the text file. Since you will probably be using this to create a video game, a hard coded text file would be pretty silly, so I would use random numbers to create your graph. Think of edges as corridors and vertices as rooms, each vertice has a random room template attached to it, the edge's weight represents the length of the hallway. This is my github [github/aclave1](https://github.com/aclave1/3102-HW2/tree/master/Graph/graph), where I implemented some graph stuff (and a trie). It's in java but maybe it could be a starting point. 
Ooooo, thank you! I like your Z buffering algorithm.
Sorry to reply so late. I've tried updating sigma to the most current version but it doesn't seem to be working. Do I have to do more than just simply replacing sigma.min.js file? That's what I did.
Oh totally, I'm not trying to bag on him. :) I just find that sometimes the best way to learn is to see something implemented in a way you wouldn't expect. Like... a zen koan of programming :) Plus, honestly, this is probably the best way for them to implement it so why not teach the best form? ;)
No worries! I hope the example I made makes sense. Let me know if you have any questions.
thanks for this
Not using jQuery is so cool man. So cool.
Use a for loop set i equal to 4 or 5. Would be my first change. The timer functionality, is that something that needs to be done as well? Or is there code you're not showing? The basic idea of the timer I guess is to change the text of your 5 numbers every second. You could use a while loop for that if you'd like. And somewhere in the while you delay for a second. I feel like giving you the code would not be useful. And it seems like you would need more than code to understand what is going on. If you need someone to work for you for free then say that. 
weWhereAllIntoTheCamelCaseJokeConstant = true;
As Async syntactic sugar, with node.js, I use this module: https://github.com/salboaie/asynchron to reduce promises complexity and code ugliness. On web that could not be so good because modifies the prototype of Function but in controlled environment it works nice.
Or simpler, natural syntax: var content = asynchron fs.readFile("fileName.txt"); console.log(content); // the code could be embedded in a 'wait' callback automatically because is using a promise returned by asynchron keyword 
That's step three. The main problem is it doesn't compose. For example, let's say you had an `async` keyword that would automatically do the async CPS transform for you. Now you want to write a test for it using some DSL-like unit test API: test("reads a file", function () { var content = async fs.readFile("fileName.txt"); expect(content, "the contents"); }); test("reads another file", function () { var content = async fs.readFile("other.txt"); expect(content, "other contents"); }); Oh, wait. That `test` function doesn't expect the callback I pass to it to be CPS transformed. It needs to explicitly check that, and then I need to explicitly make my test calls async too: async test("reads a file", function () { var content = async fs.readFile("fileName.txt"); expect(content, "the contents"); }); async test("reads another file", function () { var content = async fs.readFile("other.txt"); expect(content, "other contents"); }); Now, consider things like `map` and `filter` where you'd like to be able to pass callbacks to them that happen to be async or not. With async syntax or promises, you still have two separate worlds of code, the async world and the sync, and the two worlds do not compose together in any graceful way.
No d&amp;d on mobile. =(
Very cool to see lambda functions. Could someone explain the swap and Object.isz? 
Swap uses destructuring as you can see above. It's like parallel assignment. Isz I think came to be because object.is distinguishes between +0 and -0.
For the swap, I'd say that first, the right-handed side of the expression is evaluated, so if a = 1 and b = 2, [a, b] is [1,2]. Then, this evaluated value is assigned to the left handed side, [b, a]. JavaScript thus assigns the value 1 to the variable b and 2 to a. This [a,b] = [b,a] would not work in some other languages because of the order in which things are done. For instance, you could end up with a = 2 and b = 2, because the language would evaluate and assign the first variable of the left side, then the second variable, effectively putting b in a then the new a (aka the old b), in b. Hope that was clear. For Object.isz, the idea is that the standard Object.is compares values differently than ===. Typically, NaN === NaN will return false. However, Object.is(0, -0) will return false. So, Object.isz is a comparison that return true if either === or Object.is returns true, taking the best of both and catching the "mistakes" of ===, such as the one with NaN (because the "last word" is the one of Object.is).
Math.max used on an array was already possible. Math.max(1, 2, 3, 4, 3, 2, 1) = 4 Math.max.apply(null, array)
This makes total sense. I'll have to do some research to figure out what that canvas thing is but thank you very much for your help! 
This worked perfectly, btw. Thank you. function grabPoint() { $.ajax('stats_final', {cache: false}).done(function (data) { txt = Number(data)/1000000; }); return txt; }
I'm guessing you meant; 2. Avoid using ~~IDs~~ **classes** to select elements... Edit: I stand corrected. I try not to use classnames as selectors, but I guess it's just preference.
I don't think there are any good reasons not to use the native functions, but it's likely a tiny bit faster. For reference, see [Chrome's Math.max](http://code.google.com/p/v8/source/browse/trunk/src/math.js#113). However I'm guessing he just wasn't aware that it was build-in. If performance truly was the concern he'd instead inline it to avoid the overhead of function calls, which at least seems to give a little performance boost in Chrome and IE.
I've refactored the code and split everything into seperare functions and objects. Would you mind to take a look? It's still on the same GitHub page. Thanks again!
Just as a warning: this is true only when array has at least 1 element and no NaNs (or values that convert to NaNs).
you are going to have something a bit weird happen but it might not be a huge issue. this line return txt; happens before this line txt = Number(data)/1000000; so every time you call your grabPoint() function it actually returns the text for probably the previous call. it isn't huge and you might not notice. for actual JS devs, dont do that.
And now you can do it way more concisely!
What is ES6?
If he's saying that in relation to CSS (and I think he is, since I can't find ID selectors elsewhere) then he actually did mean to say "Avoid using IDs to select elements ..." The reason being that if you use an ID selector in your CSS, then you've created style rules that will only be used once for a single element on the page. I think it's better to create descriptive class rules in your CSS that you can then reuse over and over whenever you need them
Yeah IDs are ideal for small applications with very few of them. Or where something is unique and constant in a large application (e.g. a menu bar). When things get larger its tempting to select elements using classes to cover alot of elements genericly, but its better to just fall back onto a framework such as knockout at that point (imo).
Mozilla has ported CoffeeScripts to JQuery so it can be ran in Browsers instead of just Node Servers. Or, it's the [next version of Javascript](http://code.tutsplus.com/tutorials/eight-cool-features-coming-in-es6--net-33175) sent from the future to help prevent web developers from developing substance abuse problems. Really depends on who you ask.
[ECMAScript 6]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla)
ECMA Script Version 6 -- basically the next release of the Javascript language as commonly agreed on by the various browsers. The [MDN page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla) has a nice list of features (slightly oriented towards listing what Firefox does &amp; doesn't support). Most browsers (and IE9+) [support](http://kangax.github.io/es5-compat-table/) ES5, the current revision. Which means when ES6 gets finalized, it'll be another 10 years before you can use it, while we wait for IE24 to play catch up. From what I can recall.. ES3 was the last one. ES4 got tabled because of disagreements, and ES5 was the pared down release of all the features everyone *could* agree on. ES6 is now a re-attempt at what was in the ES4 standard, along with of course new features that have been identified since then.
Updates to JavaScript coming sometime within the next year I think. Here's a [general overview of other cool stuff](http://espadrine.github.io/New-In-A-Spec/es6/). And [here's the spec](https://people.mozilla.org/~jorendorff/es6-draft.html). 
Thank you all for your replies.
I know, and its fine. The data refreshes every 5 minutes, and a lag factor is not going to be a big deal.
10 years until it's implemented in an IE release. 15 years until that version has enough market share to matter.
10 years until it's implemented in an IE release. 15 years until that version has enough market share to matter.
It was a spelling mistake on his part, I was just correcting it :)
Collision detection is off, and you can fly above the course if you hold spacebar.
Firstly, I did not know about code.google.com and being able to view the source for V8 - very interesting, thank you! Secondly, I thought in my years of using JavaScript I knew most of the stupid / strange / crazy parts, but TIL there is +0 and -0 if (arg1 == arg2) { // Make sure -0 is considered less than +0. return (arg1 === 0 &amp;&amp; %_IsMinusZero(arg1)) ? arg1 : arg2; } \* sigh *
IE11 (released some months ago) has a number of ES6 features already.
Shhhh. Don't interrupt the baseless anti-Microsoft circlejerk with *facts*!!
Good on them, then! No call for the snarky "here in reality" bit though... MS doesn't have a track record of prioritizing or giving many resources to the IE team, and they do have a track record of requiring the IE team maintain backwards compatibility (a noble, but hobbling, goal). Though my "IE24" comment was probably also uncalled for. I should give them a chance :) Looking at this [es6 compat table](http://kangax.github.io/es5-compat-table/es6/), IE11's support is spotty at best... but so is the support under Chrome, Node, etc. Looks like FF is far and away the leader in adoption. Which makes me a little worried, actually... IIRC, ES4 died due to disagreements between MS &amp; Mozilla... I hope the lopsided support isn't a sign ES6 is going to fall to a similar fate, just with Google thrown in the mix. 
I don't think that's right, I think it works in those cases too. If the array is empty, you get `-Infinity`, which is probably what you want. If the array has a `NaN`, you get `NaN`, which is probably what you want. In both cases it's the same as if you had called it like regular, ie, `Math.max()` gives you `-Infinity` and `Math.max(1, 2, NaN)` gives you `NaN`.
So what's taking so long for the standard to be finalized?
This is not a quirk of JavaScript, but rather of the IEEE 745 standard which specifies floating point number representation and operations. ECMAScript requires all number values to correspond to a double precision IEEE floating point unit. Incidentally your computer's hardware uses this standard as well... Because signedness is represented by a bit flag of its own it's possible to represent zero in two distinct ways. I don't think that's a bad design choice -- apparently it has its applications and to be fair zero is a pretty weird number. The IEEE 745 standard states that `+0 == -0`, so you don't really need to worry about it. The reason they had to take it into account in this case is because the ECMAScript spec (for reasons which elude me) requires `+0 &gt; -0` for the `max` function, even though `+0 &gt; -0 == false` just like `3 &gt; 3 == false`.
Good stuff, enjoyed it. Sounds like a pig fapping each time you flap its wings.
Which tool to use is perhaps the least important consideration here. Some key points: * Apply some governance to keep the documentation as uniform and standard as you can. This will make finding information and understanding it easier for everybody. This is much easier if your users are internal employees, because you can have their boss slap the shit out of em when they harsh your mojo. * Organize the information into a few simple categories, such as: bugs, getting started, cool tricks, and so forth * Always keep the documentation easy to read even for high school drop outs. Not everybody is a programmer. * Use some basic design skills. Its not like you are trying to sell sun tan lotion to eskimos or other ambitious marketing exhibition, but a little bit of basic vanity goes a long way even in documentation. * Use as few words as possible and yet always strive to be specific as possible. This is basic exercise of your spoken language, but its amazing how many people with college degrees still fuck this up. * Pictures are helpful. * Keep as much of the documentation in a single location, or at least accessed from a single jump page. * Don't expect your users or engineers to magically understand how important documentation is. Occasionally you need to leave your man cave and visit with people. Sell the Kool-Aid. Get buy in and convince them why its important and why it saves them time only if they do it the right way. * If you fail to convince anybody of the importance of this then it is certainly not important and should fail.
I've used Docco for a JavaScript project. If I'm not mistaken that's what Backbone or Underscore use on its documentation pages. http://jashkenas.github.io/docco/
Sounds like you're modifying your scope outside of the digestion cycle. Without code its hard to get specific, but are you using any third-party libraries, setTimeouts, etc which would be modifying scope inside of async callbacks?
How wacky is your stuff? I have a few graphs wrapped in components, using NVD3. One [line with focus graph](http://nvd3.org/ghpages/lineWithFocus.html), and a couple of donut charts. One of the donuts gets static data from the server, with global stats, and the other gets derived data from the line graph, with your personal stats, from a computed property on the controller. The pie data gets updated based on the brushed focus area, just showing the proportions of the totals of the different lines. They all have legends, and if you toggle any of the lines, it will also toggle the display of the corresponding line in the other graphs, but the donut with the derived data will have its legend stop working to toggle state (you can continue to use the legends on the other two graphs). Like, you click on one of the line names, and it'll act like it's toggling, but then it changes its mind almost instantly. I have a callback for when the focus on the line graph is changed: chart.dispatch.on("brush.myNamespace", function(e){ var lowBound = e.extent[0]; var highBound = e.extent[1]; component.sendAction("setBounds", lowBound, highBound); }); And if I remove the last line, the legend problem goes away. I can accept that. Something in how I'm coordinating is going on the wrong order, maybe. But then, if I restore that line and wrap the contents of that callback in Ember.run.later(thatCallback, 10000), the legend problem comes back, and it's the same behavior, where it changes back almost instantly, not after a 10 second delay, like you might expect. But if I comment the line out again, it goes back to working, even though it wouldn't get executed until 10 seconds later. So basically I want to kill myself.
Hey /u/illderpal, This isn't working likely because your domains don't match. If you're the administrator for the BHS USA site, you can setup that domain to allow requests from the requesting address if you need to. You should read into Cross-origin Resource Sharing: http://en.wikipedia.org/wiki/Cross-origin_resource_sharing Best, whataboutthecheese
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cross-origin resource sharing**](http://en.wikipedia.org/wiki/Cross-origin%20resource%20sharing): --- &gt;**Cross-origin resource sharing** (**CORS**) is a mechanism that allows JavaScript on a [web page](http://en.wikipedia.org/wiki/Web_page) to make [XMLHttpRequests](http://en.wikipedia.org/wiki/XMLHttpRequest) to another [domain](http://en.wikipedia.org/wiki/Domain_name), not the domain the JavaScript originated from. Such "cross-domain" requests would otherwise be forbidden by [web browsers](http://en.wikipedia.org/wiki/Web_browsers), per the [same origin security policy](http://en.wikipedia.org/wiki/Same_origin_policy). CORS defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request. It is more useful than only allowing same-origin requests, but it is more secure than simply allowing all such cross-origin requests. &gt; --- ^Interesting: [^JSONP](http://en.wikipedia.org/wiki/JSONP) ^| [^Open ^Web ^Platform](http://en.wikipedia.org/wiki/Open_Web_Platform) ^| [^Same-origin ^policy](http://en.wikipedia.org/wiki/Same-origin_policy) ^| [^XMLHttpRequest](http://en.wikipedia.org/wiki/XMLHttpRequest) *^\/u/whataboutthecheese ^can [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfcushz)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 53200:%0Ahttp://www.reddit.com/r/javascript/comments/1xn687/i_need_to_grab_a_divs_content_from_another_site/cfcus6b)
I'm not using any other libraries. In the example you can see the tile images updating when a filter is changed. It's a ng-repeat using the same filters minus the length: ng-repeat="tile in tiles | filter:query | filterBy:allFilters" and it updates those as it should. The issue is isolated to Chrome and works as expected in other browsers. The value *is* updating but only reveals itself in Chrome when it *has* to re-render (selecting the text, scrolling, etc.) If I put the text *below* the tiles and the tiles change, the text updates. Not sure why it's not rendering on it's own though. 
And the ES5 equivalents. var nodeList = document.querySelectorAll('div'); var nodeArray = []; for(var i=0; i&lt;nodeList.length; i++) nodeArray.push(nodeList[i]); var hash = { one : undefined, two : undefined, three : undefined, one : undefined, two : undefined }; var array = []; for(var key in hash) array.push(key); var hash = { one:'foo', two:'bar', three:'baz'}; var one = hash.one, two = hash.two, three = hash.three; var a = 1, b = 2, c; c = b ^ a; b = a; a = b ^ c; Edit: I meant to type this. var a = 1, b = 2; a ^= b; b ^= a; a ^= b; Math.max.apply(undefined, [6,7,5,4,8,9,0,1,2,3]); var a = {one:'foo', two:'bar', three:'baz'}; var array = []; for(var i in a) array.push(a[i]); array.join(" qux ") [{id: 1}, {id: 2}].map(function(a,b) { return a.id; }); Object.isz = function(x,y) { return x === y || isNaN(x) &amp;&amp; isNaN(y) } || Object.is(x, y); var isHidden = function(file) { return !!file.match(/^\.|~$/); }; isHidden('.DS_STORE') new Array(7).join(NaN) + ' BatMan!';
/u/whataboutthecheese Is there another way that I could do it? I unfortunately do not have admin access but I do have permission to do so. I just need to grab the listing content and add that under a section in my new site so I don't have to manually update my site everytime there is a new listing or the listings are removed. I'm just lost on how I can get this done. Thank you again for your response though.
Hmmm, again without looking at the code, I can't say. I assume filterBy is a custom filter, right? I'm not sure whats up, but I've definitely encountered a handful of weird AngularJS bugs like this. Do some googling and if nothing comes up, file a bug report.
You could use a server-side scripting language like [PHP](http://php.net/manual/en/features.remote-files.php) to access the remote site's page. Since this PHP script would run on your domain, this would let you work around the cross-domain problem. edit: spelling
Yeah, it's strange. See how it updates when it [scrolls out of view](http://gfycat.com/TalkativeCaringAmericanredsquirrel)?
 // Enable Sunday only $("#datepickerID").datepicker({ dateFormat : 'mm-dd-yy', minDate : new Date(2014,2,16), beforeShowDay : enableSUNDAYS }); //Logic to enable every sunday function enableSUNDAYS(date) { var day = date.getDay(); var oneDay = 24*60*60*1000; //milliseconds in one day var startingDate = new Date(2014,2,16); var diffDays = Math.abs(startingDate.getTime() - date.getTime()) / oneDay); return [((day == 0) &amp;&amp; (diffDays % 14 == 0)), '']; //sunday and every other weeks }
But can you inherit data from the parent View? This approach looks like the two nested views are completely disconnected.
No thanks. 
ID selectors are much faster than class selectors for manipulating DOM.
No, I figured it was something along those lines. Hopefully -0 !== +0 ... but the fact that i'm typing such things amuses me :-) 
Amen. It's this reason I'm turned off from CoffeeScript, LiveScript and the like. I want to know what I'm doing—if an operation is so cumbersome that it impedes readability it's surely not difficult to abstract it into a utility function.
I've not found docco docs to be very helpful. They look pretty, but I think they have a hard time capturing the architecture of your code.
This person was being too clever in some of these rather than actually showing what ES6 code could look like. **NodeList to Array** var headings = Array.from(document.querySelectorAll('h1')); **Unique Arrays** (which will rarely be necessary once we have sets) Array.from(Set(array)) **List comprehension:** The given example is bad since it assumes the order of object keys is consistent. And with `map` and `filter` already in place, list comprehensions add little. var obj = {name:"Harriet",age:178}; obj.name + ' was ' + obj.age **Object.isz!** Not really useful (the same as ===, except NaN is equal to itself). **Arrow functions** Arrow functions are nice, especially for `map`/`filter`/`reduce`. (And they already exist in Firefox!) **Repeat with me!** "NaN".repeat(7)+ " BatMan!"
You can do most of these more simply: var nodeList = document.querySelectorAll('div'); var nodeArray = Array.prototype.slice.call(nodeList); var hash = { one : undefined, two : undefined, three : undefined, one : undefined, two : undefined }; var array = Object.keys(hash); var a = 1, b = 2, c; c = b; b = a; a = c; var a = {one:'foo', two:'bar', three:'baz'}; Object.keys(a).map(function(key) { return a[key]; }).join(" qux "); Object.isz = function(x,y) { return x === y || isNaN(x) &amp;&amp; isNaN(y) }; var isHidden = function(file) { return /^\.|~$/.test(file); }; isHidden('.DS_STORE'); Array(8).join('NaN') + ' BatMan!'; // has to be 8 to get 7 NaNs
What you describe is not possible. Are you just viewing an html file in the browser?
Well, perhaps not directly. I could wrap sqlite in a servlet and make ajax calls, but I was hoping for something already hardened.
There are tons of options for documenting your API. [Swagger](https://helloreverb.com/developers/swagger) is pretty popular and has ports for various languages. But from an user-facing documentation perspective, if you want alternatives for SharePoint or a wiki, look into something Markdown-based that you can host. I used the same code as what's running NuGetDocs before for hosting internal, end-user facing documentation and it worked out pretty well. You can run the whole thing off of a source control repo, so you get version control and rollback along with easy deployment, etc. Any of these should work: https://github.com/NuGet/NuGetDocs https://github.com/ravendb/docs http://fubuworld.com/fubudocs/
Wasn't saying that promises "suck", just that generators offer another alternative to handling callback chains... but yes, the JS community is always chasing the next solution :)
Oh, no doubt. I threw these together during lunch, so there's nothing terribly clever going on. Good suggestions, though. I was wondering how to get the regex `test()` method working. I also didn't fully grasp the `Object.isz()` method. I think the check for `isNaN()` might make it incorrect. `Object.is()` already returns true if both objects are NaN. As for swap, this is what I intended. My memory failed me regarding the whole "swap with 2 variables" solution. var a = 1, b = 2; a ^= b b ^= a a ^= b
Not that I'm aware of, not without using some sort of thing server-side proxy/layer to push things around. Does it need to be SQLLite? there are some other database technologies that can be exposed as a restful service - might fit your needs. 
Opening up a database on a server like that is just asking for injection attacks. Not saying it can't be done (it sure can - and have seen crappy apps do it before *shudder*). You would need an endpoint on the sever (e.g. API/webserver) which could be PHP, NodeJS, Python, anything which backs onto the SQLite database... and then have your remote browser hit the endpoint using XMLHTTP requests containing your queries.
~~$.live()~~ $.on()
Try binding the event using the ".on" event-handler. http://api.jquery.com/on/ http://stackoverflow.com/questions/203198/event-binding-on-dynamically-created-elements
So when should I use this? Before I append the element? After? Should I do it like this: `$('#save').on('click', buttonClick);` or like this: `$save.on('click', buttonClick);`
So when should I use this? Before I append the element? After? Should I do it like this: `$('#save').on('click', buttonClick);` or like this: `$save.on('click', buttonClick);` 
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
try harder
These are cool! However, the [Batman theme song](https://www.youtube.com/watch?v=1qP-NglUeZU#t=9) would need eight NaNs instead of seven.
If you are experienced, it often saves time to build your own rather than find some jquery plugin a noob created that only half works and the other half isn't relevant to your use-case so it has to be hacked anyway. If you are inexperienced then you may find something and hopefully it covers your use-case, if not you're either screwed or you may have to write it yourself anyway but you'll have something to learn from. There are no wheels that fit every type of vehicle. YMMV. 
I'm torn. We've all seen the links from [name escapes me]'s blog, in which complex problems are boiled down into a few lines with Python. To that end, the "pythonic" syntax is incredibly useful. The exact implementation of how values are retrieved from lists, or how numbers are incremented, etc. stays out of the way. I feel like the brevity of these statements is great for small, one-off things. Throw together an example, or a test, or whatever. In a larger application, I'm more apt to make that Array NodeList its own object rather than "casting" it to an array. In a language other than JavaScript, the casting wouldn't even be a consideration. I will continue to work with the less-magical methods for the foreseeable future anyway.
bind, takes a function and context and returns a function where all instances of 'this' refer to the supplied context. since 'this' is determined at the calltime of the function, the only way to implement bind is to trap a context in a lexical scope inside another function which uses apply to explicitly set the context as the function is being run while passing along the arguments.
I lol'd at else { // wtf? clearInterval(drawInterval); alert("wtf?"); 
How about a CORS proxy? http://www.corsproxy.com 
http://api.jquery.com/on/ You want to use the ".on" event handler - but read the section about "delegated events". From the page: "Delegated events have the advantage that they can process events from descendant elements that are added to the document at a later time."
First thing first, make your developers comment their code and give meaningful variable names.These are the most crucial steps. Earlier, no JavaScript developer used to comment or use long variable names with a good intention of reducing the payload but now we have great minification tools available. So make them do this. You can later worry about documentation. With above things done, rest would be pretty easy.
$(document).on('click', '#save', function(data) { ... } );
It sounds like we work at the same company.... if they don't stop pushing that share point shit I am going to go crazy. It doesn't even work half of the time I try to look at it. I get some weird error pages. Are you on the east coast by any chance? 
Array.from is neat, but it's not yet implemented anywhere! :) 
I'd expect null or NaN with empty array but not -Infinity.
[Discussion from when this was first posted](http://www.reddit.com/r/javascript/comments/1oyqxn/javascript_has_a_unicode_problem/)
oh I see what you're talking about, my bad, I just corrected it in my blog.
Why? Null is certainly not the maximum number. Neither is NaN - it's not even a number. What's the maximum number you can have? `Infinity`! and the minimum number? `-Infinity`! What I'm unsure about is why `Math.max()` is `-Infinity`, while `Math.min()` is `Infinity`. I wonder if there some asymptotic reason for it.
If you are using visual studio, then web essentials is, well...essential: http://vswebessentials.com/ It's a Microsoft supported/engineered plugin that turns Visual Studio into an actual web dev environment. Combine this with the XML documentation: http://msdn.microsoft.com/en-us/library/bb514138.aspx And you are fast on your way to building a commercial grade JavaScript library that supports features like regions and intellisense.
This is really key. Making people own their documentation and making it a priority (this means allocating time to also write *and* maintain it). This means you need support from the enterprise (or whoever doles out the cash) to actually being able to solve the documentation challenge properly. This applies both to inline code annotations and straight forward docs that explains basic design ideas in the solution.
From the previous discussion I was able to understand how to implement the workaround. jsfiddle did not handle external resources as links so I had to embed the source but what you'll need a reference to [punycode](https://github.com/bestiejs/punycode.js/blob/master/punycode.min.js) and [unorm](https://github.com/walling/unorm/blob/master/lib/unorm.js) then you can run this as a ECMA5 and ECMA6 compatible sanity check if (!String.normalize) { String.prototype.normalize = function (strType) { var str = this; switch (strType.toUpperCase()) { case "NKFC": return unorm.nfkc(str); case "NKFD": return unorm.nfkd(str); case "NFD": return unorm.nfd(str); case "NFC": default: return unorm.nfc(str); } }; } // function countSymbolsPedantically(string) { // Unicode Normalization, NFC form, to account for lookalikes: var normalized = string.normalize('NFC'); // Account for astral symbols / surrogates, just like we did before: return punycode.ucs2.decode(normalized).length; } // alert([('mañana').length + ' wtf? ' + ('man~ana').length, countSymbolsPedantically('mañana') + ' A-HA! ' + countSymbolsPedantically('man~ana')]); http://jsfiddle.net/wpmqg/4/
Yea, I did some more thinking about it. If you're trying to find the minimum number, it must be lower than infinity. If you don't have any numbers, than infinity is the lowest number if the set. Vice versa for max. It makes sense to me, but we don't have to agree on it. I think if you pass in an empty array, you get NaN. That makes sense too, because how can something that is not a number be less than or greater than -Infinity or Infinity?
You're right, in current scheme it's just the same. But I really like how D3 handles it - skips `null`/`undefined`/`NaN`-converted values and returns a number (or `undefined` for empty array). The code: https://github.com/mbostock/d3/blob/master/src/arrays/min.js
Let me cite RFC 1925, 3): With sufficient thrust, pigs fly just fine. However, this is not necessarily a good idea. It is hard to be sure where they are going to land, and it could be dangerous sitting under them as they fly overhead. Your idea implies that your db is open to anyone who knows the credentials that are neccessarily in your JS that is working on the browser, which is a really bad idea. What you can do is create an abstraction on the server that allows for a restful interaction - preferably after some sort of login.
Great idea!
Really cool, could be useful for pages with large resources, although it will not handle long draw times. 
Hi Boris! I like how you write and you may be interested by a different approach. I am the author of a MVVM framework and I took a very simple approach for binding (I call it chain based binding) This approach is inspired by Flex and is similar with Angular in modifying DOM but the syntax and implementation is created to allow extreme MVVM: manipulate models but views and controllers are automatically instantiated, showed, deleted etc. Take a look: https://github.com/salboaie/SwarmShape/ I can explain to you how it works if looks interesting.
Why was this not a thing already? Genius! *Edit:* Or was this perhaps a thing somewhere already? 
Maaaaybe that `sendAction` is ultimately throwing an exception that that third party lib catches? Might be good to switch on "Pause on all exceptions"
Chrome does this. One fun way you can see this is set up a quick node server with middleware logging all requests. Chrome will start requesting for pages before you press enter in the omnibox. I'm sure all the others follow suit, especially on mobile.
Oh man, this is something which really irritates me. **Always comment your code!** There are many reasons to do and none (I believe) against. * Firstly, whatever you are writing, you may think it is very obvious but I guarantee 6 weeks down the line, you'll (let alone anyone else) be thinking "What is this doing?". * Secondly, during the maintenance phase, many tweaks will be made to the code to cater for certain scenarios. If you don't comment them, you (see first point) and everyone else will be wondering why it was done in that seemingly bizarre way and, if they are feeling brave, will refactor it and reintroduce the bug. * Thirdly, it is said that productivity, if it can be measured at all, should be measured by how quickly programmers can read and understand a piece of code - not by how fast it can be written. * Fourth, it can be very good programming practice. Before actually writing the code, write out all the major elements in comments and arrange accordingly. To get the flow and set it right in your head. Then fill in the code. * Fifth, it is javascript. It's not exactly a strongly typed language and normal sane programmer conventions don't appear to be adhered to as strongly as other languages (at least not where I work). Commenting helps. It doesn't have to be overly verbose, you don't need to comment the bleeding obvious, but explain what is going on. Source: Programming for 25 years
That's a pretty elitist reasoning on why not to include comments. In fact, I can list more rational reasons to include comments than not. * Structure in human readable text: Comments can be used to segregate code into different parts. For instance "sanitising variables", "calculating reference point for click event" or "routine to resize image". This is useful because: * It helps in teams: When you work with a team, the other people usually don't know the code you are working on as well as you do. This means that if they have to touch your code, they have to interpret it first, line by line, to figure out what it does before they can actually work with it. Summarising several lines of code with one comment at the start helps the other developers find the relevant part of the code faster and get the job done quicker. * Flag parts of your code or leave messages for yourself or other people: We all had it at some point or another: We had to implement something in a quirky way because of technical or time constraints and it looks like a horrible hack (or maybe it is a horrible hack). Comments help identify those places or give additional context as to why the code is written the way it is. This avoids useless time sinks, most notably from other devs who aren't aware of the constraints and find out after trying to optimise the code for a few hours. * Explain particularly nasty code snippets: When you try to solve a problem long enough, you start to enter a kind of zen-phase where everything is clear. You find a solution, write the code and pat yourself on the shoulder. The next day (or week), you have no idea what you did and how you did it. You just know that it works. Using comments to explain the general idea is very useful for you, and again, your teammates in order to get into the code faster. Now, there is an argument to be made that all these advantages can also be achieved by putting these things into functions and methods and naming the functions/methods after the job they are supposed to do. Keeping the functions very short eliminates the need to summarise code, and according to some people, is preferable to comments. It's a good argument, but it's not always possible, feasible or effective. But anyway, that's the only rational argument against comments that I ever heard, and even then, I see it more as a preference than an actual argument since short functions and comments aren't mutually exclusive.
Personally, I like [Sphinx](http://sphinx-doc.org/) for [all sorts of documentation](http://ericholscher.com/blog/2014/feb/11/sphinx-isnt-just-for-python/), as I always end up jumping through hoops with doc comment-based generators and not quite getting what I want out the other side. With a /docs folder in the same repo as your code you can be submitting code, test and doc changes at the same time.
var arr = ['banana', 'apple', 'orange', 'banana', 'tomato', 'apple']; How would you filter unique items inside the array? If the answer involves using Array.prototype.indexOf, ask about how it could be done faster (hint: hashes). Optionally talk about algorithmic complexity. How would this be done faster?
I've seen browser plugins that for this for years, mostly those 'Boost Your Internet Speed' type of spam utils. But this JS way is nice if it fits your site.
Yeah I was thinking mostly of libraries for your website, perhaps a more established project doing the same thing.
Agree that this is a great idea, nice man! Would this mess with analytics though? 
The problem with comments is that they rot and they don't tell the whole story, just what the developer was thinking at the time. They create a cognative bias to believe that what the comment says, the code does. This is the worst fallacy a developer can fall into. The code says what the code does and nothing else. Everything else is speculation and opinion. A huge part of being a programmer / developer is being able to read code. In fact, I would argue that reading code is more important than writing. If the code is so complicated and obtuse that it demands a comment like "load events from google server" then perhaps it is poorly implemented. Why? function loadEventsFromGoogle() { .... } Or maybe GApi.prototype.loadEvents = function () { ... } If you can't discern what the purpose of that function is, then we will never agree. A caveat here are doc comments. Suppose that function takes an argument. You would want documentation to indicate what type it is, since it is relevant, can be validated, can be compiled into API documentation, and so on. Doc comments might be the exception to what I said because they are, in fact, a form of code -- the output is generated documentation that can be verified independently of the thing it is documenting. I would still argue that these comments would rot easily (not the params, the descriptions). I'm on the fence about that literacy thing -- where a tool generates documentation that puts code to the left and comments on the right. It's interesting. But you're still creating a cognative bias and creating assumptions about the following code. I am biased a little because I've worked in the past with programmers who like to flesh out their thoughts using comments and then fill in the code. Five months later, they've forgotten to update the comments as they changed the code and it becomes a completly unreadable mess that becomes a "defensible argument" simply because "the comments say so" The bottom line is to ask yourself if writing the comment is worth the investment in maintaining it. Sometimes there are good reasons to -- generated documentation is the best I can think of -- but it must be maintained more diligently than the code unless it can be automatically verified.
I tend to comment functions, especially publicly exposed / interface implementations. Once getting into the heart of the code - my comments start to drop off. If the implementation of a function is so overly complex that I need to write a book to explain what the hell is going on - then something is wrong. But seriously, I don't see much value in comments like. // loops over the arr array and adds the value to the total int total=0; for(var x=0;x&lt;arr.length;x++) { total+=arr[x].value; } If you can't tell exactly what is going on there w/o the comment, then there is something wrong with you as a developer. In recent years, I've also become a fan of more descriptive/expressive and less 'clever' code - longer function names, better parameter names, better variable names, etc. I used to be big on the 'lets see how many clever tricks I can cram into 5 lines' - of which you might need documentation to understand, but if you can do the exact same thing in 10 lines and have it be easily readable without needing comments, I'm leaning more towards the '10 lines'...bit of a simple example but you get the idea. 
Thanks. NVD3 throws about a million typeerrors. Same line every time. Seems like a dead end. All of the legends have the same names. try { nodeTextLength = legendText.getComputedTextLength(); // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead if(nodeTextLength &lt;= 0) throw Error(); } I could just hide the legend on the pie charts, and not care, because the syncing starting from the line graph works no problem, but now I'm mad at it.
Cool, I've always wanted to know how these things work. I've also seen a different way to do that [here](http://flippinawesome.org/2013/08/19/ractive-js-expressions-and-the-new-wave-of-reactive-programming/).
The `*` is a new thing with harmony and gives you the extra information about whether there are more yields for that generator. They don't behave differently in a `for..of` because (i'm guessing) the for...of loop stops when `.next()` returns undefined. AFAIK, Generators already exist. The existing `for...in` uses them if I'm not mistaken.
Like Amazon "anticipatory shipping" for websites :)
However it loads the page each mouse hover whether you click it or not. Hovering over I got 10 page loads of the same page before I clicked it. Put a flag in to indicate if you've loaded it and then don't load it again.
To prevent name/keyword clashes with existing code, they defined a generator function as using an * in the definition and only in those functions yield is treated as a keyword. However, some javascript engines treat yield everywhere as a keyword. This is not according to the specifications so I would assume that those engines will change in the future. So when you are writing new code, always use * for a generator function.
newer models track fingers above screen (or at least my galaxy s4 does). but i doubt it will ever return in the numbers it had.
The `.make` and `.year` of your `car` instance never get assinged a defined value, that is why the console logs `undefined`. You do that in the `Vehicle` constructor, by using the constructor arguments. But when making a `Car` these arguments never get used (see the `Vehicle.call(this);`). So you'd need to edit the `Car` constructor to receive and pass the `make` and `year` to the `Vehicle` constructor.
Your `Car` constructor isn't passing anything for `make` and `year` when it calls the `Vehicle` constructor. One possible solution would be to change your `Car` constructor to look like this: function Car(type, make, year) { // parent Vehicle.call(this, make, year); this.type = type; }; Then you can invoke the constructor like this: var car = new Car('Car', 'Honda', 1989); and `car.getMake()` will log `Honda`.
Ah of course ! So I just changed Car() to : function Car(type, make, year) { // parent Vehicle.call(this, make, year); this.type = type; }; And then when creating the instance to this : var car = new Car('Car', 'Renault', '1995'); And now car.getYear() and car.getMake() work as planned. Thank you!!
Hm, I admit I've never been great at treating NaNs properly. But I thought the whole point of NaNs is that they propagate. Having them silently ignored seems like a recipe for overlooking bugs. Letting `max(5, NaN)` be `5` seems as dangerous to me as letting `5 + NaN` be `5`. Just my first impression.
Seems to me that you wouldn't feel much benefit from this on a touchscreen device. That seems both good and bad... Touchscreen devices are often mobile devices, and if they're not on wifi you don't really want to be causing the client to fire a ton of requests they aren't going to view -- especially if your site has a lot of heavyweight content. Thing is though, that mobile devices suffer by far the most from latency issues (of current internet-connected devices) when sending requests and getting replies back, and particularly when they're accessing content over a mobile data service of some kind. If your site only serves content that doesn't require much bandwidth, it would really be ideal to be able to predict user intention for mobile devices, and this could really result in a huge UX improvement when browsing through wireless data services. The earlier you have any certainty that a user is going to access something, the more time you can save -- assuming the prediction is correct. This seems like a cool thing for desktop website access but unless device manufacturers come up with a decent way of providing information about user intention on mobile devices this doesn't really provide the monumental benefit that it could. As mobile data gets cheaper though, this kind of technology could become a really common website feature though.
No, the JS on the Ajax loaded page wouldn't be run at all 
always comment your code.
These problems are not unique to JavaScript. They are shared by all languages which represent strings as arrays of UTF-16 code points and expose that as their API to "characters." Such languages include Java and C#, probably every language based on either platform, and probably a ton of others. There was a good excuse for this a while ago when the relevant standards body thought that 65536 was going to be enough. That is why Java and Windows went the path they did and probably JavaScript too. I look forward to the day when programming languages don't claim to support - or have API's that suggest that they support - arbitrary indexing of characters in strings. They never really have and no one ever really needed that feature.
You should visit the site on your mobile, the timing page showing time between hover and click also shows touchstart time, which is around 300-400ms. Phones have to wait to make sure you didn't mean to scroll and really wanted to click on the button instead. 
Is JS1k over 1024 bytes nowadays? Becuase that demo (which is awesome) is reportedly at 1975 bytes.
There is a ++ compo this years for demos with 2048bytes.
`-Infinity` actually makes sense for `max()` if you think about it. If infinity is the maximum of all numbers, then -infinity is the max of no numbers. Practically, if you're taking the max of a list of numbers that could be empty, it's often because you want to compare it to something, and this makes the comparison correct. For instance, if you want to tell someone if they get the high score of all time in your game, you could check for this by seeing if their score is higher than the highest previous score, ie, `your_score &gt; max(...previous_scores)`. What if there are no previous scores? Then you want this to be true no matter what `your_score` is, which means you want the right hand side to be as low as possible.
If your stored procedures take 0 arguments from the client (and regular select statements too) it MAY be ok. If they do any updating, deleting or inserting it's not ok. The fact that the query is run in a stored procedure doesn't do anything to protect you from the fact that anyone with the url to your site can now run arbitrary commands against your db. There is just no reason I can fathom to do this anyway. What format would the data come back in that would be useful to you in the first place *if* this were possible, ya know? However, as I said, I don't know of a way to do this and it's most likely by design (although I must admit I have never actively sought to do it either so I could be wrong ;))
Good point about the data format. Seems like having some kind of server middleware ought to -- at the very minimum -- be responsible for maintaining some kind of consistency in data format. I think you're right. Even with stored procedures you'd have to be behind some kind of walled garden of authentication for this to even possibly be safe, and then you're still vulnerable to activity by anyone that knows their way in -- even if it's an accident. Some things the server should just be the one to do, and it is indeed hard to fathom why this would be a design paradigm to use in an application, especially considering that the APIs you'd be using to do it BARELY make it possible.
I didn't know that. That's definitely long enough to make the preloading worthwhile. Pretty significant savings. I'll try it out.
For me, when reading someone else's code, I prefer to just see comments describing *why* something is there (if it's not obvious), and maybe the overall function of the class, or how a file relates to the other files in the structure of the whole program. Comments saying *what* something is doing is usually worthless if the code is well written. This is also how I like to comment my own code.
Thanks for you project template! I have also made a slightly simpler starter template. Check it out: https://github.com/3bola/gulp-starter
The hover does not imply indent to make a request. The click does. This is a fraudulent script.
Menu bar of website itself.
Thanks for the responses, and sorry for the delay in responding. I ended up adding a new variable after the guess &gt; or &lt; parts (strings, I don't know what to call them.) http://jsfiddle.net/drakmar/Ufw7B/1/
Yeah, I noticed that. For the purpose of this practice it was just to introduce me to the code and see how I can manipulate it. EDIT: In an actual program I'd be more diligent in completely balancing the chances.
The HTML Prefetching spec should be enough. This feels like a machete where a scalpel is called for.
Lots of people know how to code, but so many lack the creative spark that drives new development. You won't find many "how to build..." articles, but what you will find are lots of open source projects on github and elsewhere that you could learn from. Unlike flash, javascript code is out-in-the-open and usually easy to learn from.
I'm curious as to why people are downvoting this?
For the most part I agree with /u/somethinghorrible. It has DEFINITELY been my experience, with multiple groups that comments are often more harmful than no comments because in an "agile" world they become out of date and then Really confuse the reader. The main exceptions are todos and hacks you know you are hacking in due to say, a bug in safari needing some bizarre step to make things work. Based on the reasons you and others state that we should be commenting, our code I have to wonder how much testing your team does. Comments should definitely not be used to define the specs for your objects and processes and that seems to be what is being described here. Tests are the best possible documentation for your code because a good test spec should describe the "normal" behavior of the object along with extremely detailed tests for the edge cases that show you exactly what the author ran into during development and why they chose the design they did. Comments are not inherently bad but this is indicative of the problem. People treat comments like they enforce the contract on the object that a test is supposed to and they don't. When I go alter an object, I can run the tests, re read through the spec they describe and then see where my changes broke that contract. 
Will javascript's regular expressions ever correctly match word characters with `\w`? /^\w+/.test('Ænima'); // false /^\w+/.test('Aenima'); // true
I hear the sound of a thousand server admins weeping. 
I'm a little confused. They list their browser support as: &gt; IE 10+, IE Mobile 10+, Firefox 10+, Firefox for Android 25+, Chrome 23+, Chrome for Android 32+, and Opera 15+. But then immediately under that they say: &gt; In the worst case, localForage will fall back to `localStorage` And according to [this](http://caniuse.com/#feat=namevalue-storage), `localStorage` is supported by IE 8+, Firefox 3.5+, Chrome 4+, Opera 10.5+, and Safari 4+. So which is correct? **Edit:** The author clarified: &gt; Sorry, I should clarify: asynchronous storage is supported in those browsers. But you’re right: any browser that supports localStorage is supported.
Written by one of the [core contributors](https://github.com/marionettejs/backbone.marionette/graphs/contributors) to Marionette. Legit.
You're awesome.
Midori?
This is closed source?
I'm glad I'm not the only one to feel this way...
It may be worth using a vps with x11 forwarding if it runs acceptably and isn't outside your budget/skillset. I'm not aware of a browser that suits your needs.
I really like that it was designed around the simpler localStorage API, which is much better for simple apps. *Edit:* Also, this is only 4.5K gzipped. That's pretty decent, given that it support 3 separate storage drivers.
I recently started playing with Phaser (phaser.io) and I was curious as to how PandaJS may be different to it. From what I can see with the demos it seems to implement Pixi in pretty much the same way so I'm not really sure what its advantages are and where it may be heading in the future... I'm not knocking on it, I just genuinely don't know because I'm new to these libraries. Edit: No reply from OP just means that it doesn't offer anything special and probably won't for some considerable time. Ok.
Actually Firefox intentionally doesn't do this as they've taken the stance that performing actions for the user (chrome will also pre cache the highest ranked search result page as well I believe) to be against their values. Another easy way to verify is to fire up fiddler and type in the omnibox while you watch all of the requests chrome kicks off. 
Are you sure you can't upgrade the 256 MB? 2GB+ has been standard for over 5 years. Not sure why you'd want to develop with handcuffs on.
It's obsfucated. Whether it's normal or not depends on where you got the JS from and what it's supposed to do. [The code it runs](http://pastebin.com/phfCUmEn). Note it's loading two more scripts, so who knows what they do. One looks like it might be [jsbn](https://github.com/jasondavies/jsbn)
It is scrambled, but it's unscrambled before being `eval`'d. If you remove the surrounding `eval(` and `)` and paste the rest into a JS console, you'll see the unscrambled code.
Thank you so much. I've been going crazy over this for the past few hours. It's from [Steve Gibson's](https://twitter.com/SGgrc) (security expert) [website](https://www.grc.com/haystack.htm). I wanted to know the formulas for the calculations... and [he told me to just look at the js file of the page, on twitter](https://twitter.com/SGgrc/status/433602370627317761).
Thanks for the reply! This helped me a lot! Sorry for being a noob. Just started coding (for real) last week...
&gt; If you really don’t want any wasted request, you may preload on “mousedown”. This is when you press your mouse button (a click is when you release it).
Midori is great! I also found Xombrero and Uzbl. Not sure which one I'll settle on. Thanks!
Actually I made a mistake: it's 512MB, but that's not much better :-) I do have a more typical desktop if I really need it, but trying to squeeze every drop of performance out of my old laptop is sort of a hobby in itself. I put an SSD in it (game changer), and I run Arch Linux with Spectrwm (minimalist tiling window manager). I work mostly in the terminal and Vim is my editor of choice. It boots in 25 seconds, gets 6 hours battery life, and never slows down unless I open a ram hog like Firefox/Chrome/Eclipse.
gulp is always lowercase and isn't written with JS at the end of it. [gulp FAQ](https://github.com/gulpjs/gulp/blob/master/docs/FAQ.md) 
Damn I really could've used this a week ago instead of muxxing around with IndexedDB and its incredibly annoying versioning system.
Off-by-one errors. You just can't escape them.
I created this because i wanted to play around with all of these javascript frameworks but didn't want to develop a full featured backend RESTful api first. [Here's a video demo](http://youtu.be/etJ0MYGU3RM). Hopefully some people will find it useful!
As [optimist](https://github.com/substack/node-optimist) is now deprecated, ESLint has switched to [optionator](https://github.com/gkz/optionator).
I'm a heavy user of JSLint, but I'm interested in the new features that ESLint is bringing to the table. The ability to add new rules, and to have all the rules as separate modules allows for a lot of flexibility. I've been following ESLint development for a while, and working on using it with Grunt.
This is awesome! 
Looks awesome! thanks for creating this
Yeah you are right, that every engine should "support" CocoonJS. There are though many little bugs, that you have to solve to fully support it. Panda.js also has some specific options just for CocoonJS (like scaling options) and it is actively been tested on it.
JavaScriptCore (what's included in basic webkit) produced by apple is already (almost) ready to ship their LLVM compiled solution, right now its disabled by default and no performance metrics have been shared (typical apple to do the big unveil) but you can find out more here: https://bugs.webkit.org/show_bug.cgi?id=112840 http://trac.webkit.org/wiki/FTLJIT Maybe JavaScriptCore will overtake V8 as the fast kid. FTL seems to implement a more novel approach by not enabling itself unless a function has been executed more than a certain amount of times, thus saving memory by not bothering with the overhead of smaller functions.
Which language have you used for your backend?
Saving for later. 
https://github.com/dieulot/instantclick/pull/25
Looks cool! Was kinda hoping it was "Jsons Tub" though.
It's quite alright! You're initial suggestion got me up and running just fine. Thanks again. 
Funny, I just finished building something like this.
Here you go: http://www.jasoninternational.com
Awesome tool! Well done
I know that feature detection makes much more sense when it comes to features. BUT: some features can't be easily detected before they are used, e.g. firefox not firing keydown/-up events for umlaute. In that case, browser detection is still a valid way to go. BUT: for heaven's sake don't do it like we did when there were only Netscape and MSIE.
Does anyone know of an extremely lightweight and easy to use tool that I can run locally to achieve the same thing? I know I could just fire up a blank web framework template of choice, but I was thinking of something made for the task and dirt simple to get up and running?
To be fair, Chrome seems to identify itself as "Netscape" in the example code.
Yes the module/class syntax is inspired by Impact, like Phaser is from Flixel. I think pros are features, mobile support, easy to understand API, open source and that it is developed full-time, so it's not a hobby project. Cons are again features, there are still many features need to be done.
Will check back later
excellent! I think the biggest pro for me at least is being able to build with Node! I'd love to make some contributions if that's cool
And everyone identifies themselves as Mozilla and/or compatible. And Chrome believes it's Safari from the future. User Agents are prime evidence for the deeply schizophrenic nature of browsers.
That would be great! More contributors, better engine ;)
Choice of language is unimportant. It's the result that counts \^_^
A shame that it's an on-line service. Would be way more useful as downloadable tool. If you work in an environment that deals confidential data, these tools (same goes for http://httpbin.org/) become essentially useless. It's frustrating to see these awesome tools and not be able to use them :'(
Official forum is now open at http://www.html5gamedevs.com/forum/19-pandajs/
If you're using jQuery for your JSON requests you can use a tool I made a couple of years ago that can intercept these requests in the browser and "respond" with a randomly filled in JSON template: http://experiments.mennovanslooten.nl/2010/mockjson/ 
It's pretty trivial to set this up locally. Just have your local server (nodejs, XAMPP, w/e) route to static JSON files.
&gt; Actually, that's sort of already happened, and the proper syntactical sugar JS is getting is...promises. As soon as native promises are mainstream people will be looking to generators and then coroutines. Actually, people already are, at least in node.
Just throwing this out there, but if you want to do the same thing locally and are using Ember, Ember App Kit (http://iamstef.net/ember-app-kit/) actually comes with a way to stub out your API using NodeJS. It's very useful if you want to work on the client application without working on your RESTful API first / at the same time.
I would not dispute the statement you made, I was just a bit curious.
This is my favorite piece on the subject and really sold me on promises: https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/ 
short of running back and forth with a thumb drive that's about the best you can do
I put [something](https://www.npmjs.org/package/reflector) together last week just for testing in Node against a json api. Its very young, but basically will run a local webserver that will bounce back any get/post args as json in the response. Check [the tests](https://github.com/tleen/reflector/blob/master/test/index.js) for examples.
Good stuff. This video should be on the home page of http://jsonstub.com/. Also, audio would be nice (but not totally necessary).
This looks very, very useful. Thanks for sharing!
I like Katana https://github.com/Shogun147/Katana
Have a look at [ember app kit](http://iamstef.net/ember-app-kit/). It comes with a node express app for this exact purpose. That sounds like more of what you're after in terms of running locally, version controlled stubs, security concerns, etc. I created JsonStub for people who may not be comfortable setting up backends and want to be productive immediately. 
Your wish has been granted! It's changed!..except it's still one word :p
What's the line: /**/name/**/ = (/**/func/**/); For?
Writing html inside of js like that is incredibly annoying and really is a bad practice of mixing html/js. Just like you shouldn't be writing js inside of html, you shouldn't be writing html inside of js. Try looking at how many other templating libraries handle this.
the express app inside of ember app kit is what i was pointing out. It's as generic as can be. I felt like it being a web app was quick easy way for people to start using it(and even see if people like it). I thought more people would be more apt to give it a try without having to download, install, configure something to get started. Maybe i'll develop something like what you're after in the future!
@path411 you can easily set template: '#my-template' as a selector and pull from your template.
If you are debugging your own code, I would assume you would have your own source code. A lot of the common libraries are already open source so getting the source shouldn't be difficult.
I built this guy for that purpose a while back: https://github.com/natlownes/headrest
jshint/lint - great for curing bad habits and general just a good idea
Obviously, you're not familiar with [reverse engineering](http://en.m.wikipedia.org/wiki/Reverse_engineering), otherwise you would recognize how helpful this would be.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Reverse engineering**](http://en.wikipedia.org/wiki/Reverse%20engineering): [](#sfw) --- &gt;**Reverse engineering** is the [process](http://en.wikipedia.org/wiki/Process_(engineering\)) of discovering the technological principles of a device, object, or system through analysis of its structure, [function](http://en.wikipedia.org/wiki/Function_(engineering\)), and operation. It often involves disassembling something (a [mechanical device](http://en.wikipedia.org/wiki/Machine), [electronic component](http://en.wikipedia.org/wiki/Electronic_component), computer program, or biological, chemical, or organic matter) and analyzing its components and workings in detail—for either purposes of maintenance or to support creation of a new device or program that does the same thing, without using or simply duplicating (without understanding) the original. &gt; --- ^Interesting: [^MythBusters ^\(2010 ^season)](http://en.wikipedia.org/wiki/MythBusters_\(2010_season\)) ^| [^Reversing: ^Secrets ^of ^Reverse ^Engineering](http://en.wikipedia.org/wiki/Reversing:_Secrets_of_Reverse_Engineering) ^| [^Chinese ^wall](http://en.wikipedia.org/wiki/Chinese_wall) ^| [^Intellectual ^property ^in ^China](http://en.wikipedia.org/wiki/Intellectual_property_in_China) *^\/u/DrHenryPym ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfeevik) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfeevik)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 55585:%0Ahttp://www.reddit.com/r/javascript/comments/1wdi6e/beautifywithwords_unminifies_js_with_unique_words/cfeevd2)
Brain fart. 3AM coding getting to me. Thanks. :)
Very cool. Thanks for doing this for us. Here's a coffee on me /u/changetip PS. Would love angular support!
Hi /u/dadamssg, you've been sent 2.3190 milli-bitcoins ($ 1.50) from /u/gorillamania via /r/changetip. **[Collect it](https://www.changetip.com/collect/376)**. **[What's this?](https://www.changetip.com/tip-online/reddit)**
&gt; Saving for later. In case you don't know, you can simply "Save" the post in your account. It's the "Save" link near the "Share" link just bellow the post.
Lol. I'm going avoid getting into a flame war, to each his own. I specialize in web development (client and server side) and I don't see the appeal of variable renaming especially if the variable names are generic and aren't descriptive (chrome and firebug already formats minified code). Reverse engineering requires you to understand what the author's intent was, this is usually done by debugging or reading the documentation. If you use this plugin and find it useful than kudos to you. I haven't run into an instance where I needed some variables renamed in order to reverse engineer or understand what the code was doing. Like I said, if you find yourself having to use this...you're probably doing something wrong.
I second this motion.
hey thanks! that's awesome :)
CORS is enabled. All OPTIONS requests are responded with a 204 and the appropriate CORS headers
Very cool! Are the magnets movable? 
Add that AngularJS support is added in [WebStorm 8](http://confluence.jetbrains.com/display/WI/WebStorm+8+EAP)
very cool, you planning on making this a paid service or perhaps open sourcing it?
httpbin is a simple Flask app you can download and run locally
This was always the easiest solution for me until requirejs. If you're using requirejs its extremely simple to reference your static json as a require module.. Var responseJson = require('mock/jsonObj123');
I love laravel so much...
Its pretty easy to toss together a python flask app which tosses back some json.
For talking to the server from client-side, you would make use of [AJAX](https://developer.mozilla.org/en/docs/AJAX)! [Google Cloud SQL](https://developers.google.com/cloud-sql/docs/admin-api/v1beta3/) already provides a [RESTful API](http://en.wikipedia.org/wiki/RESTful) for creating / updating / deleting records... it essentially *is* your backend, so you can make direct calls to GQL from client-side via your [JavaScript application](https://api.jquery.com/jQuery.ajax/), instead of going through your Python server.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**RESTful**](http://en.wikipedia.org/wiki/RESTful): [](#sfw) --- &gt; &gt;**Representational state transfer** (**REST**) is an architectural style consisting of a coordinated set of constraints applied to components, connectors, and data elements, within a distributed [hypermedia](http://en.wikipedia.org/wiki/Hypermedia) system. REST ignores the details of component implementation and protocol syntax in order to focus on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements. &gt;The term representational state transfer was introduced and defined in 2000 by [Roy Fielding](http://en.wikipedia.org/wiki/Roy_Fielding) in his doctoral dissertation at [UC Irvine](http://en.wikipedia.org/wiki/University_of_California,_Irvine). &gt;REST has been applied to describe desired web architecture, to identify existing problems, to compare alternative solutions, and to ensure that protocol extensions would not violate the core constraints that make the Web successful. Fielding used REST to design [HTTP](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) 1.1 and [Uniform Resource Identifiers](http://en.wikipedia.org/wiki/Uniform_Resource_Identifier) (URI). &gt; --- ^Interesting: [^Representational ^state ^transfer](http://en.wikipedia.org/wiki/Representational_state_transfer) ^| [^Clean ^URL](http://en.wikipedia.org/wiki/Clean_URL) ^| [^Restful ^Objects](http://en.wikipedia.org/wiki/Restful_Objects) ^| [^Restful ^Place](http://en.wikipedia.org/wiki/Restful_Place) ^| [^The ^Restful ^Mind](http://en.wikipedia.org/wiki/The_Restful_Mind) *^\/u/will-wc-lo ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfekzfa) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfekzfa)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 55853:%0Ahttp://www.reddit.com/r/javascript/comments/1xt19l/webdev_newbie_want_to_add_upvote_functionality_to/cfekzaz)
what were your thoughts on codeacademy?
Yeah , this is trying to solve a non existent problem 
I think it is excellent for beginners and helped me with my first 'major' project.
Nice functions, few comments: * searchObjects doesn't have any recursion checking, so running it on the following will infinitely loop (Until the stack screws up): var a = {}; var b = {}; a.member = b; b.member = a; Also, this may just be me playing with my damn fast and loose nature, but you do a lot of unnecessary typeofs, is there a particular reason why if (typeof obj[i] != "undefined" &amp;&amp; typeof obj[i].id != "undefined" &amp;&amp; obj[i].id == id) can't be represented as if (obj[i] !== undefined &amp;&amp; obj[i].id == id)?
Make some stuff in vanilla js without using any jQuery whatsoever. Open up https://developer.mozilla.org/en-US/ in another tab, when you have a question try to find it there. repeat
I don't think "PRO" "js developers" go trawling through this sub for amazing opportunities to be perfectly honest.
What was that?
I like [apiary.io](http://apiary.io/) for this. It advertises itself as an API documentation tool, for every api spec you create, you can send requests to it. So, in addition to getting a stubbed-out api, you get an api that is excellently documented, and allows others to contribute and comment on it. Great tool.
Saving this for later.
[You might try posting here.](http://craigslist.org)
who knows.
Headache? What headache? :] 
Udacity or Treehouse, both great resources... Or start working on a project that takes your fancy. I did the very same, I've now wrote a python program that takes info from a spreadsheet and plots it onto a google map along with associated info. I've made a webform with php using a couple of libraries which sends me a PDF of the completed form. I've also rewrote my sisters website after learning HTML, CSS, Jquery and JavaScript (www.brookebentham.co.uk) - basic, but very fluid so looks good on most screen sizes. Just find something that suits what you want to do and take a crack at it, google and stackoverflow were my favourite go to places for help.
What the fuck are you talking about? If you're reverse engineering then you can't use source maps. That was my only point. I'm not sure why you're being so defensive two weeks later.
Sorry, but they really are not there just yet. I think they will come faster then, say, PHP, but it still took PHP years to consolidate. [Ghost](https://github.com/TryGhost/Ghost) is a start....
This is subreddit is for JavaScript, not Java. See /r/java In JS: function roundTo (num, places) { return +(Math.round(num + "e+" + places) + "e-" + places); }
Thanks for the reply. The major issue I'm having is that the number I need to be rounded is a variable that changes based off the user inputs from the above sections. Based off your (num, places) setup, would I just put "BACMale" in place of num?
I'm not a Java developer. JavaScript is a whole different ballpark.
Shit I posted this in the wrong place...
My thoughts exactly, before I made this. ;) But really, I created this with the intent of offloading processor-intensive activities (sorting a length 1,000,000 Array of random floats, for example). The JSON.string, JSON.parse in the main thread would take about 700ms, (350 before, 350 on response) but the sort itself takes &gt;8600ms on my (rather average) home machine. You can't hold up the user without any indication of activity for close to 10s. A more common application would be doing a smaller sort (10,000 - 100,000 items) that compares multiple object properties. (Keep in mind, though, JSON serialization!) It's most applicable to UIs dealing with parsing large amounts of data (and perhaps HTML5 games). I'll likely push some changes tonight that increase speed when dealing with specific data types (.processInt32, .processUint32, .processFloat64, .processString) as to not have anything hang on JSON serialization.
[DocPad](http://docpad.org/)
In the land of Javascript, we code up a dirt simple Node.js server to spit back some JSON!
inb4 posted java homework to javascript subreddit
Can it really get much easier than this? # mock.py from flask import Flask, jsonify app = Flask(__name__) @app.route('/user/1234') def api(): return jsonify({ 'first': 'dave', 'last': 'qwerty', }) app.run(host='127.0.0.1', port=5000) Then just run `python mock.py`. You could do the same thing just as easily in Sinatra or Express if you prefer Ruby or Javascript respectively. Maybe I'm biased by writing these kind of apps regularly, but I can't imagine it getting any easier than that. 
Are you going to do it in a website/browser or in a program?
Yeah ... JavaScript is not Java. Even though it shares a common name, it has so very little in common but a bit of syntax.
havent heard of it, looks interesting. i've looked briefly at linemanjs which attempts to do some similar things (definitely two different beasts though). while i can't say anything informative about either, i do agree with the premise of each completely. javascript, server and client side is an extremely powerful weapon, which can get unwieldy in a hurry. i'm a big fan of proven convention, i can't wait until the new JS world comes into its prime with regards to ease of use/productivity that a solid set of best practices would garner. one of the most promising things about javascript i must say is its ability to enforce conventions by laying some syntactic sugar around common problems. it will be a glorious day :) 
Great idea. I would change the property to 'role' and the value to a string array.
The reason the font is so small is because the default &lt;span&gt; font is set to that. Use CSS to change this: &lt;style&gt; span { font-size: 30px; } &lt;/style&gt; Add that code to the &lt;head&gt; section and change 30px to what ever size you want
you don't need source maps to reverse engineer genius. My point is that renaming variables won't help either. 
I could probably help out more if I knew what the setup enjoyed was exactly. Do you use firebug? It's *almost* as good as chromes development tools. Although with the stock tools you have the ability to debug and log to the console in Firefox afaik so I'm not sure what it is you are looking to add to the mix. As far as reloading the page, what tools were you working with before where you didn't have to at least have something like grunt do builds for you, etc? The only other thing I can think of is that sublime text will let you set breakpoints in the editor and break in them in Chrome but Idk if there is anyway to integrate with firebug. It's possible. Finally, to put it bluntly, Chrome is a necessary tool for front end development regardless of whether or not the apps will ever run on it. It has far and away the nest profiling of any browser and it's the only browser that has the added tracing tool for really intense study of want is going on with your code. Not allowing chrome is handicapping your ability to do your job. If there is one mildly open minded person there with any pull create a new thread directly discussing this here so you can point them to it or even let them join the discussion. I bet you'd get tons of input. Giving developers the same restrictions as the rest of your company on this front is utterly ridiculous and does nothing but __cost__ them money 
Would work nicely with http://plnkr.co/edit/ (though .json files can be used directly to stub apis). Looks good and useful!
I actually disagree, I think the *only* thing of any value here is that this is an online service, mocking static JSON data from your backend couldnt be more trivial.
Why would you use confidential data in a fake data back end?
You aren't `alert`-ing until after the do while loop is completed. In order to exit the loop, you have to enter `99999` as the value for `entry`. When `entry` is `&gt; 85650` and `&lt;= 178650`, `tax_owed` gets set to `entry + parseInt((entry - 85650)*.28)`. So when `entry` is `99999`, `tax_owed` is set to `104016`. You're forcing the user to enter 99999 in order to get the alert, so it will always be the same value. Why are you surprised? It's what your code says to do!
When the user enters 99999, the code goes into the last `else` block before exiting the loop and alerting the result of the tax on 99999. Did you want to alert the tax owed after each entry? If so, move the `alert` up two lines so it's inside the loop. You'll still see the tax for 99999 at the end so you might want to add another `if` to prevent that.
Thank you all very much for your help. I got it working. How would I implement an if statement to prevent it from returning a tax when 99999 is entered? I am new to all of this.
Have you looked into http://trackjs.com/ at all? You'll need to have internet (as opposed to intranet) access as it's a cloudy service, but it'll capture errors, logs and exceptions and store the session history + traces for you to review via their website. I wouldn't use it in production (I haven't looked into it enough yet to see how it affects performance) but it's great for mobile development where you might have a hard time getting access to that sort of info. Sounds like it'd help out your situation as well. As far as FF plugins go, ask for FireBug. I don't use FF much at all, though from what I do recall it's the go-to plugin for working with JS.
build shit
As a sidenote, I've added the .processInt32 and .processFloat64 functions I mentioned. (Decided these were the most needed, String can just be JSON serialized without much of a penalty)
you can do something like this; if(entry == 99999) return; 
every one of your commits would be shown as part of your public activity
I wanted to point out Angular already has an A+ compliant promise implementation. [$q](http://docs.angularjs.org/api/ng.$q). By using the built-in promise code, it will start a digest cycle for you. Many of Angular's utilities are actually promises themselves. From the Angular docs on [$http](http://docs.angularjs.org/api/ng.$http) &gt;Since the returned value of calling the $http function is a promise, you can also use the then method to register callbacks. The others I can think of off the top of my head are $timeout, $resouce, and possibly the newer animation code. However, I can't confirm as I haven't got a chance to check that out yet. This implementation looks good though. Is it fowards compatible with the [native promises in es6](http://www.html5rocks.com/en/tutorials/es6/promises/)? 
I got a job in web dev with no experience. I had hardly ever looked at html/css. I learned html/css and jquery in a weekend on codecademy. Once I started the job I was working pretty heavily in php which I had never even thought I'd be using. Learned a lot of the basics from coworkers - all the while, I was going home and doing the js courses on codecademy. I'd come back to work and apply concepts from the js directly to my php projects (Stuff like multidimensional associative arrays translated perfectly to php). I got a lot of sql experience in a grad db course and used php and mysql for the project. I also got some serious linux training one on one with our sysadmin. I started taking apart other peoples libraries line by line, attending user groups and reading books. Pretty soon, I was refactoring other peoples code and writing some relatively advanced stuff. I can't comprehend how far I've come in one year. I've always been fascinated by development but it''s always been too daunting to approach. Now I know it's exactly what I want to do. Codecademy changed everything for me. The courses are well structured and gamified to keep you coming back. I think everyone should try it out - even seasoned devs.
I am considering this as a lightweight replacement for Angular, since I don't really need the heavy-duty SPA type functionality. Can someone convince me? 
It will help more than source maps, jerk.
I agree with you completely !
Try solving problems using javascript. Project Euler would be a good place to start. It will help you get a better understanding of javascript. 
You kinda sound like a genius. Props to you, man
I used touchpad to play the game so for me it didn't feel laggy, you are totally right – fixed that, thank you!
Whelp, now I'm afraid to do my taxes online.
If you were building a game engine with an IDE then and why can't you continue to use it? Games are way more complicated than business sites / intranets. You really need the correct tools to do your job properly... if management, etc. at your place of work is blocking your ability to be productive, you need to argue your case for proper development tools and just go forth. It's fine to have a standard browser on an intranet and to ensure the site works properly. Hell, I have to develop for IE8 in my 9-5 job -- I stoll do all my development in decent browsers and only use IE to verify it still works. But honestly, if I was limited to using IE8 to do development because that is corporate standard and what everyone uses -- I would probably not be working there very long.
Make sure you change your parseInt to base 10... parseInt(var,10);
It will probably always be Backbone, but I'm looking forward to using reactjs in combination with Backbone in some future projects.
honestly who cares?
over saturation of angular js content in the past couple of weeks probably.
http://vuejs.org/ or http://ractivejs.org/ 
I find your lack of choice disturbing.
the functional javascript workshop is the beez neez
gets pretty mathy as you progress and isnt really applicable to javascript specific issues, but the same can be said of any other programming sets really
Nobody* seems to like Knockout. Having used Knockout in a project I can understand why. Knockout is great, but its automatic dependencies between computed observables and bindings is just asking for trouble. If you're not constantly aware of what dependencies you're implicitly creating, you will create unintended behaviour and possibly bugs. Other than that it's great. Except IMO AngularJS does a better job at what it is trying to do (although with more baggage). *i.e. less than the other choices
There are a lot more frameworks than this. Personally my current projects are mostly written in Meteor.
It depends. I probably write less comments than I should, but most people write too many. First of all, comments need to be maintained. They're related to code but unlike, say, function calls they can go out of sync without causing the code to break. This makes them intrinsically harder to maintain than regular code. There are different kinds of comments. Most of them are useless at best. The most useless kind of comment is the JavaDoc kind of comment, which is really just a machine-readable annotation of code that is not meant to be consumed by humans directly. Your functions should be simple and composable. If it is not obvious from a cursory glance what arguments your function takes and what it returns, you probably should improve the code before trying to amend this shortcoming with a comment. Your functions and variables should be named clearly and unambiguously in a way that makes sense in the context of where they are defined and where they will be used. An array's `length` property does not need to be called `numberOfItems` because `length` is sufficiently clear in that context. You don't even need to add a comment like `returns the number of items in this array` -- that should be obvious unless you're using comments to generate API docs (which may be a bad idea, but let's not have this argument). It should also not be necessary to describe what your function *does*. If your function body is hard to understand, you should refactor it. If it has to be hard (e.g. because of optimizations), you should also comment why it is hard to read in addition to what it does. I would argue that (inline documentation aside) most comments can be eliminated if your functions and variables have meaningful names, your files are structured consistently (no "utils" catch-all modules!) and your function bodies are sufficiently short and readable. Generally the part that is hard to understand isn't what your code does but why it does what it does. This usually has more to do with platform quirks and business concerns than mere logic: e.g. "we need to delay this because triggering a re-render at this point will create a circular dependency (see ticket #12345)" or "does not include sales tax because sales tax needs to be calculated after deduction of gift vouchers to comply with legislation XYZ" That said, there may be situation where you know code is broken (i.e. incorrect or hard to read) but you don't have time or authority to fix it. In this case, again, explain what it does, what you think it does wrong and, again, ideally reference a ticket (broken code is a bug and should be treated as such). Finally, commit messages are probably more important than comments. They are necessarily higher level than code comments (they will often be read without looking at the code itself) but more fine-grained and temporary (in the sense of referring to a particular moment in time) than documentation. I would argue that (in maintenance, because 99% of all programming is maintenance) tickets are where you discuss the rationale leading to changes, commit messages are where you describe the changes and code comments are where you describe quirks of implementation details of those changes. Ideally your implementation should have no quirks.
I'd recommend finding a way to get jshint integration in your IDE/editor. This one step will dramatically cut down on your time per iteration. Browser-delivered syntax errors are terrible. If that's in place, then the answer depends heavily on environment and preferences. 
It sets some css attributes for ie (panel gets box-shadow: 0 0 4px #444) and firefox/android (div#trans gets display:none). There are better ways of doing that, but apparently they were not used.
Incremental game ^^[link](http://lakiller.github.io/html/warwick)
These are simple operators. x &gt; 0 &amp;&amp; func(x); is the same as if (x &gt; 0) func(x); The commas don't work as an OR. The comma has the same use as a semicolon, but without ending the command block, e.g. var x = 0, y = 0; In this case, x and y will both be initialized with var. Beware: this doesn't do the same: var x = y = 0; // y will be defined global
The &amp;&amp; operator checks to see if both operands are true. If it sees that the left operand is false, it will [not bother to evaluate the right operand](http://en.wikipedia.org/wiki/Short-circuit_evaluation), and return false "early" -- since there is no possibility that the expression A &amp;&amp; B can be true if A is already false. So... Browser.ie &amp;&amp; $("panel").css("box-shadow", "0 0 4px #444"); Browser.ie is first evaluated: * If true, it will move on to evaluate $("#panel").css() -- we don't care whether $().css() returns a truthy or falsy value, we just want to take advantage of the side effects. The important thing is that the expression gets *evaluated* anyways. * If false, it will skip the right operand -- $("#panel").css() -- entirely and move on to the next statement. 
Thanks for that - this code might be the result of minification and not the coder being deliberately obtuse. I've seen var x = 0, y = 0; so I thought maybe it was the same but I wasnt sure. Interesting to know anyway. 
Interesting - cheers.
I use ratpack and a groovy script. super simple and flexible.
1 vote for CanJS 
Haha. No. Certainly not. But I find myself reciting this to people all the time because I think it's easier than ever for regular people to get in to programming. Codecademy is great example of a tool that just didn't exist until the last couple of years. Not everyone wants to be a programmer but, those who do shouldn't be worried that it's unapproachable. 
During development and unit-testing we usually mock out most of our stuff, and it would be perfectly valid to use an online-service. During integration testing, we actually use production data in a sandboxed environment. Sometimes, even after everything passes with hand-crafted data (during development) everything passes fine. Real-world data tends to have the most obnoxious outliers sometimes which you did not think of during development. This comes to light in integration testing. I like to keep the environments uniform. So we use the same tech on the development and the integration boxes. In fact, as others mentioned, these tend to be dead-simple flask apps returning the data.
Agreed. As I mentioned further down, we just whip up a quick Flask app to solve this problem. Granted, they don't have a flashy web UI to go with them \^_^
Great article. [This talk from ng-conf](http://www.youtube.com/watch?v=62RvRQuMVyg) outlines how google controls access on DCM (Doubleclick Campaign Manager, their advertising management application). Very interesting video and covers a lot more than this article as it's more geared towards large applications. 
Clearly [the author does](https://github.com/3bola/gulp-starter/commit/8a7ac9f0d762fd80c02cbbe79757bccd7d386ce9#diff-04c6e90faac2675aa89e2176d2eec7d8). As for you, I'm just curious. If I were to title the following articles as such: &gt; **javaScript:** The ubiquitous programming language &gt; **Jquery:** The must-use javascript library &gt; **nodeJS:** Javascript on the server &gt; **mac OS x:** Unix for the rest of us That doesn't bother you at all? Doesn't it seem a little sloppy to mess up something basic like, oh, the *name of the thing you're writing about*?
Some extremely ugly side-effect-inducing (the side effect is the dev who has to maintain it vomiting, amirite?) code that should have been written as a simple if/else, but somebody decided to be cute. If you are using any kind of decent build process your code *will* get mangled and crunched up for deployment, so being "terse" in this way is not good practice.
I agree - as I mentioned in the question this was code I unminified so it may be that this was done in the original minifier and not unminified when i beautified it. Still thought it would be interesting to see what was going on. I agree though code should be human readable and saving bytes should happen at the build stage. 
More people need to realize this. I know many people in my university who pride themselves on writing "minimalist" code which is just a PITA at best for other devs to work on. Any production environment should have that shit automated, a programmer should always focus on writing clean and sensible code. 
Ahh, I see. Right on. Yeah, usually when you see a logical operator outside of a conditional (if/else/while/for,etc..) in a non-un-minified snippet of a stateful language, probably somebody was being cute. Side effects suck :( In fact, it's almost worse when it *is* in a conditional, because then if assignment is involved it is highly likely to be "corrected" on sight by a helpful dev who isn't thinking of the side-effect. if (!test (val) &amp;&amp; val = 1) { // blah blah } becomes if (test (val) &amp;&amp; val == 1) { // blah blah }
This thread is super relevant to me -- I blew through Team Treehouses offerings and I need to keep the momentum going. I stumbled on this: https://github.com/petehuang/Projects/tree/master/Numbers It gives me ideas for things to build so I can practice what I've learned. Also, I started my first plugin which I aim to unleash unto the world. I also started doing the codecademy tutorials too.
If you haven't seen falcon.js it's a mvc structure for knockout.
It's bad code, unless it was submitted for a 'code golf' minimalist type thing
Thanks for the answers.
jCMS works pretty well, you can pull it down from npm as a CMS component to a larger app too
[Source code](http://liveweave.com/EMvAdg) 
I assume it hotswaps the unoptimized functions with the optimized ones. You don't change code, the runtime does, so it won't constantly compile. I assume there are heuristics for what functions are candidates for advanced optimizations. If you can get a system to compile code and run it, you already can DOS it trivially. And even when you do, Chrome will flag the script as not responsive and prompt the user to kill the page.
Yeah the logic he has is entirely wrong. 
@kuenx @mordocai058 @magenta_placenta @a-t-k @UnapologeticalyAlive Thanks for your comments! I submitted a 1k version of this game today on js1k. (981b). I made it a bit less difficult than the current one.
Nice effort. However, the variable margin width makes the layout look sloppy. I think you should opt instead to keep the margins consistent and crop the images slightly.
Isn't the point of the deferred/promise structure so you can handle the deferred/promise separately - for example hand the deferred off to some object which could resolve it (perhaps one that isn't available at the time of instantiation of the promise) then resolve it later. I assume is this example you would use a closure to capture the revealed functionality?
It probably runs on a refresh cycle as well, so that it won't rebuild for every single change.
I don't understand why web components aren't already extremely popular. I am guessing that the main reason is that people just aren't familiar with the concept? Or perhaps more likely, like many new and superior technologies, it just isn't popular yet, so people discount it. And then they rationalize about the reason they are ignoring this technology, even though the real reason is that they just don't see a lot of other people using it yet. Basically, you are just a bunch of herd animals, is what I am saying. Sorry, I'm just a little more bitter than usual today because its Valentine's Day.
Make simple 2D games with frameworks or make them by yourself, then when you feel that you're ready jump into 3D games. If you're not the gaming type then try to find challenges on /r/dailyprogrammer.
mot at all, its just improper capitalization which i am equally guilty of a lot of the time. 
I think it's fine to be lazy with capitalization in your comments, instant messages, etc. However, when you're writing software, documentation, or articles, this kind laziness takes away from your credibility in my eyes. I feel there are certain standards we should hold ourselves to when we're trying to be taken seriously, and using the accepted form of an organization or project's name is one of them.
No, it's because the browser support isn't there yet. 
If you don't use jquery and want to use a more mathematically robust algorithm: https://github.com/jonathanong/horizontal-grid-packing
Indeed, but if you must have it today then Polymer is pretty good in polyfilling this for many browsers. Although it tries to add a lot of it's own opinion to it which can be confusing.
What /r/mwd410 said, plus that it is complicated tech that requires some adjustment.
Browsers don't support Angular, or Backbone, or anything else people are building systems on these days. So I don't buy that as a rational reason. I know people are using it as a rationalization. However, with Polymer, some of it actually IS supported by the browser, and more and more will continue to be added, and Polymer fills in the rest. 
Not quite. A factory method returns a new instance of something. This takes a function in the constructor that gets passed it's methods. This means those methods are only available to whoever instantiates the object instead of having methods visible.
I don't know much about canvas optimization, but you could move everything inside only one for loop https://gist.github.com/agentcooper/b89fb90c437f2156ac74/revisions
At least he improved it :) http://js1k.com/2014-dragons/demo/1647 Where's your submission?
Some notes: - Your `putImageData` is really inefficient. [See here](http://ajaxian.com/archives/canvas-image-data-optimization-tip) for a proper implementation, using a loop that modifies the array and _then_ uploads the image data once. - You should _almost never_ use per-pixel modification of the entire canvas every frame (instead, use WebGL for that). Just draw images, lines, or rectangles. It will be loads faster. - Don't resize the canvas every frame. A general rule-of-thumb is to avoid touching the DOM (i.e. accessing/changing a node's size or innerText) within your game loop. - Don't use closures within your game loop. You should just write `requestAnimationFrame(update)` - Use `x*x` instead of `Math.pow(x, 2)`. - You don't always need to use `sqrt` -- for example, in you velocity check, you could instead do `if (velocitySquared &gt; 10*10)`. - You can also avoid some trig functions by using vector math -- [see here](http://mike.newgrounds.com/news/post/265836) The main reason the performance is terrible is because of putImageData. Very rarely is it wise to do per-pixel operations every frame in 2D canvas.
Huh? How does Object.observe suddenly solve the issue of figuring out which dom nodes to rebuild after a backing model changes its state?
IE is wrong.
Will do.
&gt;Or perhaps more likely, like many new and superior technologies It's actually just not superior--it's yet another unproven _theory_ on how web development should look in the future. &gt;Basically, you are just a bunch of herd animals Well, yes, but do give herd animals some credit :P
&gt;Browsers don't support Angular, or Backbone, or anything else people are building systems on these days. That's simply untrue; browsers support _javascript_, so anything built in javascript is de facto supported. While Angular might appear to move towards something similar to web components, that's all done through javascript. Web components are proposed modifications to the DOM and browser API; they are environment modifications. That's why the whole thing is wonky (and in my opinion, pretty shitty), because there's a line between handling this in C++ (browser layer) and javascript (Polymer). Having a bunch of javascript code so you can _pretend_ the browser layer is prettier is not a real solution. 
I accidentally aligned it just right. Got 514 before I accidentally moved the mouse.
touche
A common misconception is that the virtual DOM is only a temporary workaround until browser performance gets better. This isn't true; I go into a little more detail in a comment on the original post here: http://agentcooper.ghost.io/react/#comment-1245000197
What makes you think your spamming?
Layouts are so easy with polymer :(
Weird... I'll see if I can fix that.
lol yea the vertical velocity is reduced if you bounce within 15% of the middle of the paddle. Anywhere else and it's increased.
fixed, good call.
Is it on touches only? What about touch and move?
At the immediate point I touch it points it to the center.. I can make it move from there, but it causes significant delay in movement. 
Those charts/graphs are wildly out of scale for at a glance viewing
IIRC, their original difference from 'single threaded firefox' was that each tab was an independent process, not necessarily anything about their JS handling itself.
I did notice that the collision box isn't 100% on. Even though the ball will touch the upper corner of the "paddle", it will pass on through for a miss. 
why the downvotes? hes right. 
Create a function that ajax's the page in question with a GET request, takes the response, and parses it for the div in question. Once you have that back, just insert it into the DOM node you wish. If you have issues with CORS, that can be solved by simply writing a proxy pass in your .htaccess file for apache, or in your server block for NGINX. If you have any questions please ask. See here for writing proxy passes for apache. http://scandilabs.com/technology/knowledge/Proxy_to_external_se You just proxy the URL you want to ajax through your own server which eliminates the CORS issue.
they did, but it was in the same thread as the JS executing. Now it is in a separate thread to avoid compiling slowing down the main code. Source: http://blog.chromium.org/2014/02/compiling-in-background-for-smoother.html
web components are dead in the water. http://trac.webkit.org/changeset/164131 
Chrome doesn't compile JS functions until they are used. In the article they explain that the first pass is quick and dirty. Later when a JS function is executed repeatedly it gets a second optimizing compilation pass. They are putting these compilation passes into separate background threads.
You can get the ball to travel with no angle, up to 700 and counting. Edit: Gave up at 2000.
https://news.ycombinator.com/item?id=7243122 The shadow DOM code removal is because the code wasn't actually being maintained after Chrome forked WebKit to create Blink. It's not to say they won't support it in the future.
they purged the code out of the code base. you live in a dreamland if you think removing all that code means they are planning on supporting it. dead i tell ye, nailed to the perch.
I think you should definitely have a look into JS frameworks, but as to which one you should learn... it really depends on what you're doing. The ones I would look at: -&gt; Angular -&gt; Ember -&gt; Knockout -&gt; Backbone Knockout and Backbone aren't trying to be as fully-featured as Ember/Angular, but you can more easily fit them into any workflow, whereas Ember/Angular are more opinionated (with Ember being REALLY opinionated.). There are also fully featured "meta-framework" which use KO or backbone, though. You could look into DurandalJS for example. Keep in mind that using a framework (or even jQuery) should not be automatic, and should always stem from good reasons to do so.
Upvote because I'd be interested in answers to this too! The most popular frameworks to my knowledge seem to be angular js, backbone js, and node, but I'm a big js noob, so I'm not 100%.
We just moved to google charts. Flexible and free.
I wasn't aware google charts support realtime updates.
To replace php by js look at expressjs or sail . You should be able to do anything you did before IMHO mixing both language in server side app is source of headache . 
If you're looking to replace PHP it would have to be with another server side language such as Ruby. Edit: before bombarding with more downvotes, the comment I replied to mentioned replacing PHP. Maybe I should have understood the context, however if you're replacing PHP altogether, my thought is replace it with another server side language, not a JS framework. 
Angular, ember, react. Those would be the three I'd look at 
jQuery and Backbone are libraries. Angular and Ember are frameworks. The difference between a library and a framework is [Inversion of Control](http://stackoverflow.com/questions/3057526/framework-vs-toolkit-vs-library). You call a library, a framework calls you. Which one you should learn depends on what you want to do. If you want to work on large enterprise applications then you should learn Backbone and Angular. Those are the two most popular. A lot of green field projects get started in Angular, and older (aka mature) systems that are being updated with Backbone. If you want to do server side stuff, or write command line utilities then you should learn node. I recommend building at least one app in all of them. You can do anything in JavaScript that you could do in another language. (Except maybe write an OS). You can write web apps, desktop apps, mobile apps, even things like 3D games and GUIs for Linux (Gnome) and Windows! Ever use the Pandora desktop client? That's JavaScript. There are even microcontrollers that run JavaScript! JavaScript is a fantastic language (despite the haters) and you can go anywhere you want with it. The real question is where do you want to be in 5 years. Then you can focus on the libraries and tools popular in that area. 
Except that JavaScript can do server-side. If he wants to use JS, it can be done easily enough.
In hindsight, we are refreshing the whole chart, so maybe not what you are looking for. There are some hints to dynamically adding data, but maybe not what you need. https://developers.google.com/chart/interactive/docs/animation
If you really like javascript, start learning node.js since it will let your program JavaScript code server side and completely replace/substitute/alternative to PHP. There is a fantastic website to help you get started called http://nodeschool.io I am currently on this track myself but am coming from Python server side rather than PHP. 
Yes you would still need some server-side technology to provide an API, and that can be done in any server side language. But it seems like the OP is more looking to replace he front-end. So rather than using PHP for templating, etc he could use a JS framework to provide the front-end.
For ease of learning, I would start with KO (or Ractive.js) and if the concept of data-binding seems agreeable, move on to Angular. 
I don't think this would be suitable for us. We do up to 10 updates per second. Plus Googlecharts ddon't support panning and zooming as far as I know. And we need that ...
Well ... http://node-os.com/
Yup :) If you've paid for the subscription. Goto Settings and under Audio Quality on the left hand side is a link to install the desktop app.
Have you tried learning [VanillaJS](http://vanilla-js.com/) framework?
if you learn a full featured framework before youve made anything with just straight js, youre gonna have a bad time. Forget jQuery, backbone, angular, knockout etc etc.. for now. learn the language, learn the APIs, learn to develop an application using different patterns and understand the pros and cons of them. then, approach a framework. you people have fetishized external libraries to the point of fanaticism, christ.
dump his body somewhere no one will find it
I really like JQPlot.
Once it's bouncing horizontally it never went back to 'normal' (stays horizontal) for me even after moving the paddle so the ball hits on an edge. I guess this is because you increase the vertical velocity by a percentage from the centre but if the vertical velocity is 0 then any percentage increase of 0 is always still 0.
It's broken. eval will have access to the scope in which it's invoked, which is your Array.prototype.fasterForEach definition. new Function will have no scope access. var n = 42; [1].fasterForEach(function() { alert(n); // =&gt; undefined });
What should I be able to make with straight js? At what point can I confidently know I'm ready for js frameworks?
I'm not sure about the point the website is trying to make but it was funny
Anything and everything you make with 3rd party tools is just straight js at its core. You can make and create anything from a simple slideshow, to gmail. There's never a single point where youre 'ready' for a framework, by all means go ahead and learn one right now if you want. its just a lot easier to learn and use them effectively if you can recognize the need for them, and apply as needed. Remember: *there are no silver bullets* Fit the tools to the occasion, not the other way around. 
node.js isnt exactly ideal for every single app though, PHP/Python have their places as well.
Great job! I love random dungeon generation.
I saw this long ago and never paid attention. It's the best framework out there that few people have ever heard of anymore.
SenchaTouch
If your wanting to replace PHP/learn a new server side stack and stick with JavaScript, then learn node - and look into frameworks like Express, HapiJS, Restify, Sails, etc. Depending on how you want to structure your app, can leave your server as just a restful API that spits out JSON then let the client side take care of the rest.
http://en.wiktionary.org/wiki/vanilla#Adjective
I should have said, I'm adding to my Python with node.js so I can have more choices.
Some great responses and some interesting points made. I think a lot of people agree with me, no matter how well written the code and how well it reads there is always room for comment more for the why and not the how. 
I've done both node and angular and I think they're great. I highly recommend angular if you want to do any front end. It's drop dead sexy. 
&gt;The difference between a library and a framework is [Inversion of Control](http://stackoverflow.com/questions/3057526/framework-vs-toolkit-vs-library). You call a library, a framework calls you. Perfect put. 
I'm like you; I used to do everything with LAMP. Actually, you could still say my backends are LAMP, it's just that I don't generate the frontend with PHP anymore. The big thing that you need to get away from PHP on the front is JS templating. I started out using lower level stuff like handlebars, but then switched to full Angular apps. Yes, very reasonable to build an eShop with Angular. However, my backend would still be LAMP. I'm biased to Angular; it's the only one I've used. I think of jQuery as a library for DOM manipulation. If you're using Angular, avoid including jQuery by default so that you're forced into thinking "the angular way" for DOM, which means using directives.
"Classic server-side programming" has two categories: front-end templating and backend systems. Still use PHP for the backend. However, I suspect you're still using PHP to generate HTML... that is what you replace with a JS framework.
Completely agree with what everyone is saying. I've been going back to the beginning to study JUST the language, and things are clicking more now than ever. I have to work on Backbone at work, and I've just wrapped an Angular project, and I kick myself wondering how much time I wasted because I didn't know what I didn't know about JS. A book that came highly recommended to me and I wish I'd started years ago is JavaScript: the Definitive Guide. Yes, this book is over 1,000 pages, but the second half is actually just reference material for basically every part of JS and a few libraries and commonly used items. It is broken into four parts: 1. Core JavaScript. I'm surprised at how much I get from every chapter. Ya, this is the stuff I used to gloss over when I was looking for a "quick fix" for how to do a specific thing. (Old man chuckles at young man). "Data types? Why waste my time?" Right? Well, did you know that null is a primitive data type? But oh wait, running 'typeof null' says it is an "object" ?? Ya, that was an interesting section. Oh ya, so I just created an array, but typeof myArray says it's an object. Ya, part one will shed light on what you don't know you don't know. 2. Client-side JavaScript: this section walks you through everything you'd do with JavaScript in the browser. Helpful to at least know about jQuery while still focusing on the language. 3. Reference material for Part 1 (think 'man pages' for core JavaScript) 4. Reference material for Part 2 I hated spending days digging into a JS framework only to get caught up on some stupid JS syntax issue. This is slowly changing that, and I'm reading framework source code now and actually understanding it. The book is big, so break away from the pressure to fly through it and somehow be all-knowing immediately. I've been sticking to a schedule: at least one chapter a week. This is super easy to do, but gives me time to think each part through and open CodeRunner and try things out until I can explain the idiosyncrasies confidently. It's been refreshing to just allow myself to step back and say, "you know, three years from now I'd really like to be a master of my craft" instead of frantically searching for a good framework tutorial. Wow, sorry this got so long. Send me a DM if I can be of any help. 
What demarcates a framework vs. Iibrary is not inversion of control and "you call a library a framework calls you" is simply not correct. IoC is just a well known design pattern that you can do in any language. The fact that angular (I'm not sure ember even does?) implements it doesn't mean that the boundary is IoC. What about the new flavor of the week, Vue? Most everyone would consider that a framework yet, afaik there is no ioc (actually from what I've read vue is a special case because of the following) This is all my opinion because the truth there is no quantifiable answer here: what is conskdered a library is a collection of tools that simplifies things for you and gives you tools to structure your app. It makes no design decisions for you. This has become a marketable idea for backbone. With the proliferation of opinionated frameworks like angular, backbone can say "hey this is not a framework, its flexible and can be molded to your use cases". What is called a framework is "opinionated" and thus makes some of the design decisions for you. Currently, a common design decision these frameworks impose is IoC. IoC is slightly more complex in js but has proven very beneficial in other ecosystems so the new frameworks have started including it as a core paradigm. Vue appears to be special in that people claim it sits in the middle but id say (again just an opinion since these are all just marketing terms) if the tool determines any opinion for you while also implementing a solution based on that opinion, it is a framework. The only other real metric is size and that's not useful. As a side note I am not advocating/denouncing vue here. We actually only use backbone because our use cases just require that level of flexibility. It sounds like vue has some ideas id be into since I've heard it includes an implementation of mvvm and the perf tests show it being more performant than knockout (was heartbroken by knockout because I loved the idea of mvvm on the web but it was just to slow for the apps I was working on when it came out). Only time will tell.
I don't know if this is your type of thing (it's not actually building web apps, widgets etc) but if you use JavaScript to solve the challenges it gives you a chance to work on pretty unique problems: http://projecteuler.net
Like I said, HighCharts/HighStock has some serious problems (we are using it and pushing it to the limits).
He didn't read the comments on the hacker news article so he missed the joke. Lol. Anyway I think the last few versions of chrome and Firefox work well with polymer and the biggest thing web components need at this point is marketing. Because people are getting things sold to them constantly now a lot if times without a converted marketing effort it just doesn't register as being relevant. So even in cases where devs can easily tell their users to use a new browser, people won't consider web components a real option until they see a commercial or a ton of hacker news articles or evidence of large scale developer adoption. Its a herd.
&gt; I am still a little confused as to what types of websites are built with purely javascript frameworks. Is it reasonable to build an eshop using a JS framework? So are a lot of the folks answering in here. Yes, you can build a full stack with pure JS. For example, MongoDB (JS database), node.js (JS server), express.js (node web app framework). The question of how to build the front-end is wide open and there are plenty of answers in this thread about it. In my experience, the best way to start simple is to use something like Knockout or Ractive to make a traditional page 'come alive,' and then to move on from there later.
Good catch. Easily fixed by changing eval(... to eval.call(window, ...
[Relevant](http://youmightnotneedjquery.com/)
Its a big divide right now. Its funny that "node people" are focusing on tiny modular tools that do one thing well, while the client side frameworks continue to grow. All of this occurs while others are saying "you may not need jquery". Its confusing, especially for the newer folks (which the web front end will consistantly have a new crop of coming in for quite some time). People want to get things going quickly so they errantly learn these things first. Rest assured though, once your thick client side app needs to be performant on android 2.2 phones from walmart you'll be in a world of pain trying to figure out how you actually manipulate the dom because you are going to have to actually cull out even jquery.
I think a lot of people here are only reading the title. Your question is more about how to develop full stack with Javascript, and the word "framework" has thrown people into a loop. Some language clarification: Javascript is just a scripting language. It was originally designed only for the browser, and it's the only scripting language that comes native in a browser. The fact that you're confused by this makes me think you've done very back-end heavy PHP development, and never did very much client-side logic. Client-side Javascript is everything that happens in the browser. Drop-down menus, games, dynamically loading content (no new page loads!). All this is client-side Javascript. It can be written with "Vanilla" JS, using native objects to manipulate the browser, or libraries like jQuery to make interacting with the browser simpler. As your client-side logic gets more complex, especially when you're trying to do the "single page app" thing (no page reloads), you might eventually want a more robust way to organize your client side code. That's when you'd use a CLIENT SIDE FRAMEWORK. This field includes options like Backbone, Ember, Angular, and many more. But you may not even be wanting client-side logic to start! Coming from PHP, asking about making e-shops, you're talking about server-side programming. That means you're asking about Node.js. Node is the engine that lets Javascript run on the server, access the file system, run an HTTP server, and much more. There are core libraries that make creating a simple server-side application very easy, and many people love Node because it excels at not overcomplicating a problem that could be simple. (A hello world server application could be written in four short lines). A way of learning node that is gaining popularity is [Nodeschool](http://nodeschool.io/). As your application complicates, and it sounds like you're coming from a background of complicated applications, many people choose a SERVER SIDE FRAMEWORK to help organize the routes, the logic, and the data of the server. I don't know what the scene is like in PHP-land, but there are TONS of frameworks for node, each offering different degrees of opinion and abstraction for developing different types of applications. These include Express (a simple, sequence-oriented middleware router), Geddy (a large, Rails-like application structure that includes an ORM), Happi (Walmart's contribution, I don't really know about it but it's new and big), and MANY MANY more. Anyway, when asking about "Frameworks", Javascript is a complicated place since you have both client and server side frameworks, and there are so many options that the things you choose become a very personal choice. It's the wild west out here in Javascriptville, but if you learn how to use NPM, you'll have access to a real trove of powerful modules and a way to contribute as well, and we hope you'll do both.
I've commemted a couple places in here about when I think frameworks should even be considered but I wanted to point out one thing to you op: node is not a framework. Its just js running on the server (actually on the same js engine chrome uses). So, its just js. It happens to include some tools to leverage the CommonJS method of importing scripts and has available libraries for things like making and receiving http requests but its still just js. To be honest I wish node had been available when I started. I would've started building command line tools for normal OS tasks and ran them in node, then learned to use js to manipulate the dom in vanilla js, and then adopted libraries and frameworks because of the in depth understanding of what they are doing and the related benefits/costs. I think learning node is great if you are just starting out because it decouples js from the browser and the dom. Js is a full fledged language that happens to be offered apllicable apis from the browser implementers so we can make web apps with it. However, if people start out learning with node (ignoring the web handling libraries at first) they could focus more heavily on using the language properly and its an amazingly powerful language if you really understand it. 
Wow, a whole readme!
Looks like the only versions of IE it supports is 10+. http://www.polymer-project.org/compatibility.html
It only shows the most basic functionality. I've used few of the older frameworks on that list and when it comes to "really advanced stuff", suddenly you have to use trickery to get things done and hack around the framework. I don't think I can submit myself again to something that abstracts so much over plain web components, or has a crazy learning curve. Something like angular where you can still feel and see the html is what I'll learn for my next client side project
The point it's trying to make is perfectly serious. Nowadays, people think they **must** use a framework or jQuery and nothing could be further from the truth. I have a pretty successful web dev business for 10 years now and have never had a need for either. And most people don't. No, we don't do simple web sites. We just know how to code and don't need others to do it for us.
I've been using AngularJS pretty extensively for the past few months, and I'd definitely recommend it. (also, check out firebase if you are going to use angular).
That won't fix it. You're still not going to have access to the scope in which .fasterForEach was executed in.
&gt; The difference between a library and a framework is Inversion of Control. You call a library, a framework calls you. So, *frameworks* are the *Chuck Norris* of libraries? Wow! 
It has nothing to do with SSH, in fact if you tried to run that on a command line you'd almost certainly get an error. That code is coming from the blog this was posted on. I'm guessing that the author has a Wordpress plugin that obscures email addresses in an effort to block spam. "my_username@complicated.server.address.com" looks like an email address; I'm guessing that the plugin handling email obfuscation and the plugin that renders code blocks are not aware of / compatible with each other. The actual command should simply be alias sshcon='ssh my_username@complicated.server.address.com -p 8743'
This is the JavaScript subreddit so I will probably get buried for this. But there isn't actually a more appropriate subreddit to promote these technologies, so I am going to anyway. I have found that CoffeeScript and now ToffeeScript make JavaScript development much more practical. CoffeeScript is a standard in Rails and at organizations like Github. ToffeeScript is relatively unknown still, but gives a big advantage because it mostly makes callbacks go away -- instead your code looks like regular synchronous code for the most part. If you are interested in building a web application for a specific client or internal system where you can dictate that they use a new browser, then take a look at Web Components with Polymer. It is going to be several months, or maybe even a few years, before it gets wide adoption. But I believe that it is a superior system and its the direction that the web front end is going. And its a solid approach to web development. Also if you don't have to develop for old versions of Internet Explorer then using the new JavaScript features to accomplish things rather than jquery usually works well. Occasionally there may be something you want to add a few lines of code for convenience, and there are still compatibility issues, but we are very far from where we were when jquery came out with compatibility and browser features, so depending on your application/target audience it might not be hard to lose jquery and a few other libraries. You should definitely learn Node, its awesome. Again I recommend ToffeeScript. People like to hate on MongoDB but it has a very convenient API. Mongolian Deadbeef was the most convenient module last time I checked although that may have changed. Redis also can be a fairly convenient API if you want to store hashes in it and redis has a massive amount of support in the Node community. You should also learn TDD/BDD. Things like mocha were popular last time I checked. Realistically, if you try to say "I am just going to learn X, Y and Z" and then put your head down reading a book or something, that is not going to be an effective way to learn or use your time. There are way too many good libraries, tools, languages out there, and they are evolving major improvements too quickly, for you to put your head down and think you are going to master any particular technology or that you _should_ master any particular technology. I say, become a master at reading Hacker News, and using Google to find out how to use the latest thing based on Stack Overflow answers. If you aren't doing that, you are actually going to be stuck solving the same problems that some new framework or language has already made trivial after literally 500 people solved the same problem. For example, you might end up building an internal web application for a company, and decide to use Angular. You might then go and look at how you can build custom elements using Angular Directives, and waste two months trying to make that work, and find out that it is not very easy to build that way and not very maintainable. Whereas if you use web components it will be much easier. The new paradigms are often created for a good reason. 
I'd say that you have to consider some things. First, are you planning to add stuff to a pre existing app, or start from scratch? Ember is very opinionated, and I don't think using it as an add-on would work out well. Angular is better on this regard, but if you don't need all the features, is probably overkill. Ko and backbone would probably both be reasonable choices. The second question is what features do you need? For simpler stuff, I prefer lighter/more versatile things (ko/bb), while complex projects probably suit more complete frameworks better. There is always the option to mix and match smaller pieces together (say ko, requirejs and jquery) to have the possibility of using parts that you like most (this is what durandal does). And then, there is personal preference. I like Ember better than Angular, and ko better than bb, for example, but that's only opinion. Last thing is, do you actually need a framework? Even jQuery alone can be overkill, depending on your app. 
Ah, I misunderstood you at first. I see what you mean now. I'll think about it and see if there's a workaround.
I'm also a big fan of d3 but if you have a hard ie8 dependency it might be trickier. The important thing to understand about d3 is that it isn't strictly speaking a chart library but a data visualization toolkit. Ie there aren't a bunch of charts with a zillion options to set, but a bundle of APIs that make it easy to make whatever visualization you want. So with d3 you would be writing your own chart, but it provides a framework that takes care of the hard parts - at least once you wrap your head around it. In my case I used it to build a set of 3d pie charts and bar charts that supported animated real time updates, including dynamically changing categories, but yet maintaining consistent colors between the graphs.
https://github.com/charliesome/jsos
By the same argument: The clouds don't imply there will be rain. Therefore taking your umbrella when there are clouds but no rain yet is fraudulent.
Not to get all SE theoretical here but none of these things are IoC.DI can be used with IoC as is commonplace, however. IoC is the binding of dependent objects (dependencies) at runtime in a way which is not known (not obvious at compile time). DI can be as simple as injecting through the constructor. Also, the service locator pattern can be used to perform something similar to get necessary dependencies at runtime. It is only IoC if the dependencies are declared in a given context and a contaner then injects the actual instantiated objects into the object dependendent on them AT runtime. So IoC accomplishes DI in a transparent matter and only at runtime (that is the inversion part of it...). Mixins could be accomplished in a similar fashion through an IoC ish container but mixins in js almost always alter the object they are imposed upon and therefore aren't injecting a depenency (removal of dependencies is a strong argument for mixins as well as reducing dependence on inheriatance hierarchies). The observer pattern is basically unrelated. I am not sure what you mean there.
Check out [Marionette](http://marionettejs.com/). It's a framework built on Backbone [heavily inspired by Prism](http://lostechies.com/derickbailey/2013/03/25/marionettejs-v1-0-now-with-stickers/#comment-842831764), written by Derick Bailey (a straight-up Backbone guru).
&gt; I looked briefly into Meteor, but I don't want to invest my time in learning it until it is proven to work on bigger scale projects, not just prototyping. Meteor recently got 11 million in funding. I think it's a good investment to learn.
Alright I could understand that somebody may not know the term which would kind of defeat the joke. I think the point about the speed and the capabilities of JS without any libraries is important to know, but personally I write everything with jQuery for legibility and consistency.
This has actually nothing to do with Javascript - nor ssh (directly). It's a bash command to create a shortcut (alias) for a actually longer command, so you don't have to type the longer command every time, but can just use the alias instead. So after executing the command, you can just type in 'sshcon' in bash and the whole 'ssh...' command will be executed. In details: *Ajay@Ajay-pc* Current user is Ajay on host Ajay-pc */tmp/Pypix* The current directory is /tmp/Pypix *$* The command is not executed with elevated rights (non-root) *alias sshcon='ssh my_username@complicated.server.address.com -p 8743'* This one's the actual command: alias. It creates the alias 'sshcon' that will connect you via ssd to 'complicated.server.address.com' on port 8743 as the user 'my_username' just using the newly created command 'sshcon'. 
Chuck Norris is Soviet now? You gonna be the one who tells him?
You could certainly make HTML-only D3 plots so I wouldn't say that it "relies" on SVG. However it is worth noting that most examples you'll see use SVG.
There's a bigger problem than ie8 with SVGs, that is older Androids (2.x) which still are, depending on your country, a market you should not ignore. Reference: http://caniuse.com/svg
Pandora Desktop is ActionScript, right... ECMAScript != JavaScript
You mean you went back to school ya? What kind of program would you recommend? There's like... web design (I think I'm past anything I could learn there though), or should I consider actual computer science/programming? 
Not a mistake. Backbone is a library. Let's take [Angular](http://angularjs.org/#todo-html) for example. You include it on your page, mark up the HTML, and it calls your functions. Take a look at their example. The HTML tells Angular which function to use (ng-controller), but it's angular that calls your code, you don't call it. Now let's look at [Backbone](http://backbonejs.org/docs/todos.html). You extend the Backbone objects, but Backbone doesn't call anything for you. In the example the application doesn't actually do anything until you call `var App = new AppView;` And even then, it's only doing what you told it to do. In the Angular framework, you tell it you have some functions, and it calls them. In the Backbone library you extend Backbone objects and you call them.
Please don't learn from this example (yet) :) I am not an advanced JS developer so this is kind of learning example for me. But I am trying to make code better each day. For example first thing I did – get rid of Object.create and refactor everything to constructors, then I pulled all constants to config object. You can see commit history in repo [https://github.com/makaroni4/flappy_block_js](https://github.com/makaroni4/flappy_block_js) And of course feel free to contribute)
Would love some pure Javascript enthusiasts ITT to show us some of their polyfills for: Consistent Ajax APIs Animation Event binding HTML5 element support Feature detection You need most, if not all these, in any good site, and building them yourself is total madness and way less maintainable.
good job dude! very impressive!
Looks amazing! I especially like the modularity of this version, compared to the previous one. It allows for further expansion, and can help developers (like me!) understand your code better, and how it works together. The link on the OP is wrong, the correct link is [here](https://github.com/stefanweck/dungeongeneration/).
Nice work! Couldn't find license details, however, so hoping you might add one to the repo (or point me to where it is in case I overlooked it). If you are unsure about which license to use, may I suggest using the [ISC license](http://en.wikipedia.org/wiki/ISC_license)?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**ISC license**](http://en.wikipedia.org/wiki/ISC%20license): [](#sfw) --- &gt; &gt;The **ISC license** is a [permissive free software license](http://en.wikipedia.org/wiki/Permissive_free_software_license) written by the [Internet Systems Consortium](http://en.wikipedia.org/wiki/Internet_Systems_Consortium) (ISC). It is functionally equivalent to the simplified BSD and [MIT](http://en.wikipedia.org/wiki/MIT_license) licenses, with language that was deemed unnecessary by the [Berne convention](http://en.wikipedia.org/wiki/Berne_Convention_for_the_Protection_of_Literary_and_Artistic_Works) removed. Initially used for the ISC's own software releases, it has since become the preferred license of [OpenBSD](http://en.wikipedia.org/wiki/OpenBSD) (starting June 2003 ), among other projects. &gt;Before accepting the license as a [free software license](http://en.wikipedia.org/wiki/Free_software_license), the [Free Software Foundation](http://en.wikipedia.org/wiki/Free_Software_Foundation) (FSF) asked for clarification of the text. In July 2007, as a result, "and distribute" was changed to "[and/or](http://en.wikipedia.org/wiki/And/or) distribute". &gt; --- ^Interesting: [^Internet ^Systems ^Consortium](http://en.wikipedia.org/wiki/Internet_Systems_Consortium) ^| [^BSD ^licenses](http://en.wikipedia.org/wiki/BSD_licenses) ^| [^OpenBSD](http://en.wikipedia.org/wiki/OpenBSD) *^\/u/Dvorak_Simplified_Kb ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfgfa3u) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfgfa3u)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 58606:%0Ahttp://www.reddit.com/r/javascript/comments/1xzevt/random_dungeon_generation_update/cfgfa0a)
continue learning vanilla, and read [this book](http://www.amazon.com/JavaScript-Good-Parts-ebook/dp/B0026OR2ZY/)
Your web developer sounds like a joke. Since first its most likely that it would work. And secondly its a trivial thing to test. The thing to realize is the user will end up on the other website. Also there is no actual need to use a JavaScript submit. Best to test with a traditional form. 
return promises from you test instead of juggling done() callbacks: https://github.com/domenic/mocha-as-promised
Pick a type of web application and build it with each of the libraries and frameworks. You'll easily discover quickly which you work best with.
You guys are spamming pretty hard to keep this framework relevant in this subreddit, bravo.
Ok, wow, you're REALLY confused. Let me explain a bit. You probably already know that there's a separation of client and server side logic on the web. The server accesses databases, does heavy lifting/processing, then send data back to the client browser, which handles the visuals and user interaction. Keep in mind that there is always a boundary between the client and the server. You cannot call a function from one to the other directly, and neither one has any idea what language or framework runs on the other. Your browser does not care whether the server it's talking to runs .NET, PHP, or Node (Node = Javascript on the backend). With that said, the only thing that matters is how data is passed: The traditional model has the server send a fully constructed HTML document to the browser on page load with all of the page elements rendered. This is how something like 90% of the internet works, and it's what the majority of PHP and other backend frameworks are geared toward. When you interact with them, most communication with the server involves being sent to a new url with a new page being requested by the server. A more recent model is the SAP (Single-Page Application) approach, using Javascript MV* frameworks. This would be sites like Pandora, Google Drive, Seamless, etc work. When you interact with them, the page does not generally refresh; the page is only loaded once along with a bunch of templates for other configurations, and when you interact with the app, an AJAX call is made to the server for the relevant data, the server responds with only that data (typically in JSON format), and the relevant DOM elements on the page are rerendered on the fly by the JS framework based on the response. The url is sometimes changed with either hash variables, or using the javascript history push state operation in newer browsers where they can "fake" a url change to allow deep linking. BUT, and this is important, both approaches have different uses. SAPs are generally best for something data heavy or template heavy. A marketing site generally would not want to use the SAP approach because most pages will have different designs. Additionally, SAPs often get a bit of a penalty to SEO because they're not really intended to be used as static resources. The URL acts more to manage the application state than it does as a pointer to a page. But applications, like Google Drive, Pocket, Pandora, Plex, etc, benefit greatly from the SAP approach since there's no reason to reload the entire page if you're just getting new data. It saves bandwidth and makes for a nicer user experience. Generally, if a site will be very templatable and have lots of AJAX calls, it should be an SAP, otherwise it's a bit of a judgement call depending on your specific needs. With that said, Javascript on the server = Node. The question of Angular with PHP or Backbone with PHP is irrelevant. Anything that can serve JSON will work with Angular and Backbone. Those are front end frameworks, and you have to make sure you're distinguishing clearly between from end and back end. If you're looking to replace PHP on the server, then you're looking for Node, so Angular and Backbone don't factor into the discussion in any way shape or form for the most part since those frameworks are client side frameworks, they cannot run on a server, they can only talk to servers from inside a browser. They tend to work well with Node but neither requires the other. Does that clear anything up for you? Let me know if this rambles a bit and you want clarification, it's 2AM here :P
Yeah, there is [chai-as-promised](https://github.com/domenic/chai-as-promised)s as well. Both great tools, but it is always nice to know the pain a particular tool solves :)
In this case the OS is primarily the Linux kernel, with node/npm replacing bash/[apt-get|yum|...].
Although, from their own [Getting Started guide](http://vuejs.org/guide/index.html): &gt; ... It is not a full-blown framework ...
WTF guyz ? The man asked what framework ( if any ) he can get into not about the inner workings of DI and IoC. Anyhow ... I used BB + ko ( wrapped up with knockback + require js ) for a large app and although it seems apealling, after some time the app starts to crumble ... So if you want to build something big, I rather suggest to go with Angular / Ember. For me I`m a more pjax guy and I like using something like KO and server pages partially returned ... but that`s me ... 
So you just want a model-view-presenter pattern in JS? Well, Backbone is more of less implementing that pattern, except you'd need to have a secondary View to play the presenter. Or you could implement the composite view as an instance of View that listens to events in its child Views.
Not sure why your code even needs eval, it isn't very fast.
Geez, I just wiped out humanity. Nice website, very interesting indeed.
Thanks :) !
Exactly, it was a bit hard to figure out which module should be responsible for which tasks. But i think i've figured it out now. And thanks for correcting the link! I've removed the JS folder last night and it still linked to it.. Corrected it now!
Thank you!
Thanks for reminding me, i've added the MIT license :) 
Thanks. I'm going to add more ways for you to wipe out :)
is there an example with Reactjs + Authentication?
Harsh but fair :)
General rule of thumb that I've always been told when coding anything is to always set your variables to private and ONLY use public if you know exactly what your doing and you HAVE to use it. 
React.js and Authentication are completely unrelated. React.js is for rendering. If you need some hints how to implement it, try googling for Authentication + one of the other famous frontend MVC frameworks (backbone, ember, angular, ...)
One downside of private variables is they can make code harder to debug. The public/private distinction is important from a design perspective, but that distinction can be made without enforcing it by hiding variables in function scope.
I tend to make things public when I'm the only one that has to work with the code. If I'm not the only one that has to work with the code i will usually make the variables that are only used within the API and doesn't make sense to expose a private object, that way i only have to do one variable lookup per function call to where i assign it to a new variable that i can then refer too so i don't have to go through as many variables on lookup.
I really don't like the way Crockford presents Javascript. All this talk about public and private just clouds the one pretty simple reality behind all of it: closures and scope. Especially what he sells private comes with quite some performance overhead since all "private functions" are now created per-use instead of once in the prototype. I often use "privacy", but usually on a module level -- that is wrapping all code in a module in one isolating closure that provides "privacy" but is only declared once at load time.
I actually like the posts since react is seriously underrepresented in comparison to what it delivers. This is more interesting to me than about many of the other, much more frequent framework/lib posts here.
For internal debugging, why no just `window.myapp=this`?
Yeah I came here to say that. Javascript doesn't have 'private' functions like how I am used to them in other languages. You have a scope, and you can define functions that are only a variable in that scope, but they aren't 'private'. Generally in Javascript you want all functions to be prototyped (so public) with a naming convention to signify they are 'private' (e.g. underscored). As you said, this prevents every new instance of the object from creating a new function.
There can be some advantage to hiding things. Some modules just do their work on the page and don't really need to be interacted with from the outside. The isolating closure really reduces the number of symbols exported into the global namespace, thus preventing modules from accidentally overwritten parts of each other. If the module has is used from other modules, the isolating closure makes it very clear which things you can and should touch and which not. 
I, too, like to see more about React. It seems there is no community for it, unlike Angular. Please post more, but especially post in-depth articles or tutorials, not just very introductory presentations like this one.
Hi, thank you for the answer! You changed my mind and I will look into Backgone rather than Angular, you are right that it is fashionable and it was probably a reason I was inclined to try it. But why do you recommend I look at Bootstrap? I may be missing something, but do developers working with Angular/Backbone etc. also working as coders (doing CSS)? As a PHP developer I get finished HTML and CSS and just add functionality. Does front-end developer's responsibility include doing the CSS? This might even be more generalized question: who describes himself as front-end developer and what does front-end developer actually do. Thank you!
I can't wrap my head around how the investors think they will get their money back since the frameworks is licensed under MIT. How do you think they will do that? 11m is a lot of money!
Unfortunately the apps I currently develop are supposed to run on IE8. But I will keep your advice in mind, I tried to look into web components briefly but didn't quite get what they are. Do you recommend some well written article? You are also right about the flexibility that is necessary and that I'm having a wrong perspective on the things. I guess I'll master javascript and than I'll be able to pick the right tool for the job. New technologies evolve and emerge faster than I learn.
I just like that jQuery takes care of browser incompatibilities for me, I'd rather not learn hacks for IE8 if I don't have to. But I get your point.
Thanks, until now I didn't know there were frameworks for Node. I supposed Node encourages a way to build apps.
That statementnos true for object oriented programming languages, but JavaScript isn't one so it doesn't apply here.
Yah, im subbed to several programming subreddits and misread Javascript as java. I chose to keep my comment up after all the other comments because its still something they should be aware of even if its not directly related to this language. 
In my job, we work with backbone and requireJS and we have the convention to mark the 'private' objects with an initial low dash although they're actually public. But my question is if it's worth to use private variables despite losing running speed.
Title doesn't indicate that status :) But is it faster? Looks complicated.
JavaScript has no concept of private/public internally, so every implementation of it will be a little different. The way Crockford's code is working, you are initializing the "private" functions in the constructor instead of using closure scope to manage access control of these variables. That's why in this example you have to take the performance hit. Personally, I prefer to just use closures and binding to achieve access control in JS. One way to do that is with the [module pattern](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html).
Its also extremely useful for preventing people from editing things you don't want them to. Salesforce.com implemented a lot of private variables on mouseenter/hover/mouseout events that made writing a helper plugin at work a pretty big pain. If your data was more sensitive though, you wouldn't really want it to be on the client side at all.. So there is that.
How?
I think what you are getting at is namespacing but that doesn't mean your functions in app.obj1 can't be called by app.obj2. You may know how to use it but your co-workers can't know every possible side effect of every design decision you have made in any reasonably sized application. Encapsulation is a basic tenet of software design for a reason.
Prototypal inheritance is much faster and also much easier for engines like V8 to optimize. If you really want "private" functions or members, you should use a module system like NodeJS/Browserify (which you should be using anyways). Here's an example of how it would look: http://pastie.org/8739582
This is a forum for programmers. Expect pedantry ;) . I do apologize though, I was just replying to the reply. However, I also feel its important to reinforce things properly in the js community though. This idea of IoC is pretty new here (at least in terms of popular libraries including an implementation of it at its core) so its important that we are all on the same page. I feel like that is particularly true because in our community, if enough people end up agreeing a solution, it becomes part of the spec eventually! (Usually, eventually).
More important to focus on closures and scoops.
This is a blast! Any chance that we could make the samples faster as well?
As has been generally said, just make stuff. Anything you want! If you're not sure, games can be a pretty good start, though it might be best if your write the entire game yourself, rather than relying on an engine. That way, you will get a better understanding of how it all works.
This post is very relevant to people who have been interested in writing responsive javascript and are just getting started
Wow! I think I might use this in my game, could definitely offload some more complex stuff. Great work! Never really liked the way Web Workers work.
&gt; is primarily the Linux kernel Pff, I'm waiting when linux kernel will be ported to Javascript.
But does a front-end developer who works with say Backbone or Angular decides on the actual design? I thought that would be seperated - a person who will code the html/css templates and then the developer who will use JS to add all the features and functionality to it. Edit: One more thing - are these JS frameworks appropriate for websites that are not SPA? Edit2: Sorry for so many questions, but I gotta utilize the fact that you can explain these concepts very well: I think I now understand the advantages of frond-end doing most of the work and just accessing the data from server via REST api (is this what all frameworks do, or is there some other method of retrieving data?) - it is probably easier to scale, to create mobile apps and work with 3rd parties etc. What are disadvantages of this model? When would classic 90% server, 10% client approach be better?
TernJS is pretty cool, though it is not actually an editor. Brackets (I think) has Tern built in, though either way it has pretty good "intellisense" (only called that in MS' VS, otherwise it is autocomplete, etc). Sublime Text, what I use, has a Tern plugin, which I think works quite nicely. Sublime is not free, though the unlimited trial will nag you occasionally. If you can't put up with that (or pay for it) then I would recommend Brackets. TernJS - http://ternjs.net/ Brackets - http://brackets.io Sublime Text - http://www.sublimetext.com/
Consider the code in the performance test, doing as you suggested: window.myapp = new Public() vs window.myapp = new Private(). Now suppose you want to debug it. In the case of new Public, you can check console.dir(window.myapp) and see the state of myapp. In the case of private, you can console.log(window.myapp.getNumber()), but this requires added an public accessor method for every private (which I wouldn't want to have to do). 
[Weakmaps will be one way to handle this in the future](http://www.nczonline.net/blog/2014/01/21/private-instance-members-with-weakmaps-in-javascript/)
Yes as with anything coming from the client - assume its all faulty, malicious and stupid. Verify and clean everything on server side. No processing of real value should be on the client, it should just be creating acceptable requests to the server and helpful interface for the user.
&gt; But does a front-end developer who works with say Backbone or Angular decides on the actual design? No, not often. That's usually handled by a dedicated visual designer. You'll probably have to build the design in CSS/HTML though. Probably from just a photoshop file/pngs. &gt; I thought that would be seperated - a person who will code the html/css templates and then the developer who will use JS to add all the features and functionality to it. Nope, not likely, because these things aren't *that* separate. It *could* be done that way but it's really rare outside of some advertising and marketing shops. &gt; are these JS frameworks appropriate for websites that are not SPA? Single Page Apps? Well yes, you can use them that way (and some would prefer that way) but frameworks are rarely going to force that on you. A View can just be a module/widget on a page for example. &gt; is this what all frameworks do, or is there some other method of retrieving data? Could be passed to you from the backend in objects. Ruby for example has ERB files and they are basically it's template/views and can make data available. You might have a template variable and to a to_json call on it when building your model. There's lots of options. Some are more useful and practical than others. &gt; When would classic 90% server, 10% client approach be better? Ooof big topic. Well... that would depend on your app really. If you find yourself having to do a lot of data processing on the client... that's bad. Generally you want the server to do all that. Sometimes you have to, but... try to avoid too much on the client. Templating is really just the last 10% anyhow but it's also possible to have the server build the templates and have the views be just "get x template, then add behavior". Again, sort of depends on your application and its performance characteristics.
Down-modded for the "signified as private" baloney -- if it's public and I can console.log it, I might just try using it directly if it suits my needs, leading underscore or not 
That's fine as long as you recognize that you're losing the stability/consistency guarantees that you can (in principle) expect from the "public" API.
Nice. How much can it stretch? Does it stretch in real-time? I had an implementation in Java of PaulStretch's algorithm, which leads to some pretty cool effects. I was hoping to port it to JS one of these days..
I can't believe how fast it processes a 6 minute mp3. With that said, I notice after time stretching you get this reverbish effect like the audio is in a tunnel. Is this a normal artifact of time-stretching?
VanillaJS is great if you're only supporting modern browsers, don't have to worry about mobile, or otherwise control your deployment environment. Otherwise, I'm so glad that jQuery exists to smooth out the majority of incompatibilities.
Most of that javascript will disappear as modern browsers implement the spec so you're really just gambling on the polyfills being redundant sooner rather than later.
Might be a bit advanced stuff, but gives you some ideas. [Ideas](https://github.com/karan/Projects)
VanillaJS supports any browser. jQuery doesn't support older browsers including IE&lt;9.
k
codewars.com has some good stuff to work out javascript. You are not going to know how to solve a lot of these. I feel these are here so you can research things you never knew javascript could do.
Make sure you change the color scheme in your ide to something cool
not sure if this is why. just a beginner js programmer here. but if velocity is 0, then 0*(0.75 + %fromMiddle) will always be 0. 
after codeacademy i did a couple of the problems here https://projecteuler.net/ is fun.
Its different for each question, you can always just try a different question.
Yes, this is normal, and gets more exaggerated the higher the stretch ratio.
The app stretches about 2.5x, and gets pretty shaky after that. I'm experimenting with some different ideas to improve the ratios even though most users typically stay under 2x.
I think (s)he is talking more along the lines of (function(){ var privateThis; function privateThat(){} var privateTheOther = doSomething(); // do stuff })(); leaving no references that can be touched by external code
I always wondered why Carmack didn't use Lua instead of rolling his own scripting language like QuakeC. The article makes it sound like it might have been a performance issue. Interestingly he has suggested in interviews that if he could do QuakeC again he might have gone with Scheme.
Looks like flappy bird just got schooled
I apologize that my first lines of code were in the eighties, you ol' codger you, and it was about the first time I saw my first *ix. (That was before SCO bought Xenix from Microsoft.) The first JS code I developed was back when Netscape and IE were battling. I hated it and swore off the web, saying that DHTML or no DHTML, this was a shit environment. Targeting multiple VMs is still asinine, even if it's not nearly as bad as it used to be. It *still* is a shit environment -- I'd still rather go back to Delphi some days, especially on the front end. Using a library that smooths out cross-VM concerns, however, is at least a good start. But keep eschewing jQuery, or zepto, or a handful of similar libraries so that you can whip out your e-penis. I'll keep on creating value for my clients instead. (Now, if you control your execution environment and never have to worry about cross-browser compatibility, or you're writing a library that shouldn't depend on a particular library, then go ahead and write pure javascript. The advantages may not outweigh the disadvantages. If you've ever had to worry about testing for Android 2.2, though, well let's just say zepto doesn't suck.) 
Right. Maybe I was thrown off by the word "app" here. I hope everyone is using this pattern but the entire app shouldn't be created within that single closure. Either way I don't think there actually meaningful gains to be made here anyway unless you are completely blowing it in terms of scope resolution. Certainly not enough to outweigh the importance of encapsulation decades of software design has taught us. 
Beautiful 
CodeWars is a site about the new trend of Code Kata. The idea is that it serves as a small bit of code to practice on and keep your skills sharp. You can also use it to learn new things, if you are a motivated self starter. The sign up task is a fairly JavaScripty example involving prototypes if I remember properly. Play around with it and read up. If you google around enough people have out the answer up. 
Since it's initialized to something &gt; 0 to start there is no way for it to get to 0. it can only get smaller by some factor &gt; 0.75. 
I'm getting an error on line 134: Uncaught SyntaxError: Unexpected identifier EDIT: I'm on chrome 32/win7
When the browsers will implement those features it will be easier for frameworks like CanJS and Ember to implement them. So, learning one of those framework today is present and future-proof. Again, no need to learn Polymer (which I see more as a marketing tool for web components).
The downside being that any private property can be accessed almost as easily as a public one with a simple `(&lt;any&gt;obj).privateMember` Typescript tries to anticipate es6 though, so with a wee bit of luck, we'll get proper private members in javascript at some point. (or it'll be es4/as3 all over again.) 
that's kind of answer I was looking for. Thank you!
I've actually been working with this issue for the past year or so. While prototypal inheritance is great and has its many benefits, I find at times that encapsulation (and even polymorphism in certain cases, say for instance with serialization) can have its many uses as well. I find it to be extremely beneficial when working on a larger-scale project, and also on libraries when you need much more control. The nice thing about a classical design pattern is that it provides structure and order, and allows a developer to specifically differentiate which data should be accessible solely within the class, within inheriting classes (and potentially by other classes if supporting "friend" classes as in C++), and within an entire application. I've come up with two different ways to efficiently accomplish this using upcoming ES6 components such as Symbols or Proxies. When using Symbols, two separate prototype-chains could be utilized to have internal and external class definitions separated. Then instance objects could be created which inherit from these individual prototyped-instances. These instance objects could then have a private Symbol reference to an array of data, and the specially constructed prototyped-instances could be written to access this private array of data (as in, the library manages it all and the developer just has a simple functional "this" context). This would then only require private instance objects for each class context, and a public instance object for the current class being instantiated. To reduce the overhead of creating multiple objects, other instance objects could be constructed on the fly when needed instead of all being constructed during instantiation (such as the public instance objects of base classes). The other method is a little more straightforward and uses Proxies. In this implementation, the target object of the Proxy would be the hidden array of data, and all object accesses would be trapped by the Proxy. Now, instead of creating instance objects with hidden Symbol references, the Proxy can act like an instance object. They can be created using the same pattern as the Symbol-based instance objects (and have the construction for some of them delayed as well) but offer a little more flexibility and control with all the Proxy traps available. I've laid out some basic information regarding this class-based Proxy architecture, which can be found here: http://www.jtypes.com/reference/how-it-works To simplify the casting-scenarios involved with this design pattern, I am now in the process of incorporating type constraints into my design. Therefore, properties on objects can be restricted to certain types of data. This reduces the need to manually check object types and to manually control the casting of instances, which can become quite tedious. But I mean, if a developer is going to perform a type-check on a piece of data anyway, then it doesn't really matter if they typed up the check themselves or had a library simplify that for them. Plus, if data types are managed by a library, the actions involved in type-checking can be further simplified and will reduce the chances of developer error. More information about these type constraints can be found here: http://www.jtypes.com/reference/type-constraints I would definitely like to collect feedback from anyone that finds this idea interesting and would be willing to take the time to share their thoughts. Thanks.
If you need jQuery, then you're telling me you can't do it on your own, which tells me all I need to know about your inability to code on your own, and why I would never hire you. Telling me you can't add value for your clients without it tells me you can't code. Telling me you can't handle cross browser problems on your own tells me you can't code, you don't know how, and you don't want to know how. You might be interested in [this article](http://youmightnotneedjquery.com/) that made the rounds on reddit and HN last week.
It's a really simple trick, but it saved me some time &amp; effort, and it's fun to have some use for the old Mutation Events API!
This looks amazing! I can't wait to make some cool visualizations of my home town.
Simple prototype versus closure resolution: http://jsperf.com/pro-vs-fun Cross browser prototypes are 100x slower to access than closures even if both only have 1 step of scope chain resolution. I experiment later with these in a loop to see if prototypes obtain some sort of cache benefit over functions if called from within a loop.
Glad you like it! :)
Twitter probably uses its own FlightJs too...
Thanks for the advice, it's actually a tagline we came up with right at the beginning. No doubt we'll tweak it soon to fit the new open approach. Glad you like the project, and thanks for sharing!
Another to consider: /u/draganmatek
try b-popup at dinbror.dk/bpopup/‎ Its good and lightweight and has many features that work like a charm. I have tried it on www.inschool.co Its easy to implement and customize, and you can use ajax and POST easily. All the best
Oh my, this is going to be powerful. 
The site is polished BUT, this is really underwhelming once you start working with it. It's very incomplete and the performance is bad.
That's the plan, though it's still early days. Glad you're as excited as we are!
&gt; https://github.com/makaroni4/flappy_block_js 
I AM NOT SUPPOSED TO SEE THAT!? Edit: I thought that was supposed to be the end. The game gets very weird after that `-` does not register for me, enter key gets rid of `-`. Edit 2: I can't get rid of the `?` at all. :(
thank you
It's not a very clear ending message when there still are characters left for me to type afterwards. Pretty cool game nonetheless.
So, forgive me if this is a dumb question but Google has introduced 3d buildings to Google maps; Is this fundamentally different somehow?
&gt; OpenStreetMap Oh my god, you are awesome.
I like you too! (Seriously, OSM is amazing as a data source and open data movement)
I love it. Reminds me of tuxtype.
I can only really speak from the perspective of v8 but these tests make sense. Scoping basically binds variables to the scope as a prototype chain to sorts that is looked up progressively based on the nesting level as well. So, very similar strategies are employed here. Closures can be used to limit this scope and increase performance. Try a test (I am on mobile at the Dr's office so I've only seen your observations thus far) where you cache the variables in a higher up scope, locally in the nested closure. You should find a noticeable difference between the variable being referenced by searching up the "closure tree" vs. caching it locally for this same reason. 
Thanks, Rob. I've been following your project for a year now and I've kept up with your blog. Great work!
No worries. I'm glad you like it!
I enjoyed this idea. As someone learning to program, I like seeing your weekly posts.
sure thing! I'm already ~~checking~~ built the code, there's not too many dependencies that's great. I was using [Physijs](http://chandlerprall.github.io/Physijs/) that wrap ammo. here are the results I got at the time testing 1000,2000 *colliding* cubes start to spawn in interval: Chromium v26 ammo.small.js - closure version of a 9.1 MB ammo.js (1.6 MB) ammo.fast.js - a non-closure version of a 9.2 MB ammo.asm.js (3.2 MB) **1000 object 100ms spawn interval** ammo.small.js: 16-19 FPS at max physics. ammo.fast.js: 20-26 FPS at max physics. **2000 object 75ms spawn interval** ammo.small.js: 7-11 FPS at max physics. ammo.fast.js: 10-14 FPS at max physics.
I had a bit of a problem with the beginning levels due to being a fast typist -- the actual english sentences would not get input and I had to fix them. Other than that, it was a pretty amusing time. Great job!
I'm not 100% sure but I think that I got the inspiration from z-type that you can find here http://phoboslab.org/ztype/ Of course is more polished, and has a higher level of difficulty as you beat the levels! Still great work!
These are great, keep it up
I'm a little confused at why you would design your tests the way you did. You should isolate what you're actually testing, rather than e.g. creating the constructor function, adding its prototype methods, creating the object, etc every single iteration of the test. Unless I'm completely missing the point of this test? And why are you returning a primitive value from a constructor function? Here's a test that uses a more real-world kind of scenario for object creation, and does all the setup beforehand rather than including it in the test runner: http://jsperf.com/prototype-closure The performance difference here is negligible. The *real* difference is that every time you create an object with private/privileged methods, a new closure has to be made for every one of those methods! So if your type has 4 methods and you have 1000 instances, you're creating 4000 closures, as opposed to the prototype scenario where you're only creating 4 closures. So while the performance difference in this scenario would be negligible, the memory difference is very substantial.
Very cool of you to make it open source! Been following the project since Day 1 and also saw your talk at Campus Party. I am eagerly looking forward to what's coming next :)
you son of a bitch. you got me with typing -&gt; tping
If you don't understand something on Codecademy, click on the forum, and look at other people's threads on the task. Normally you'll find solutions, but also descriptions as to what's happening – which really helps with understanding it. I'm working through the Javascript course too!
I think best practice is to use a simple constructor and attach your instance methods to the prototype. To "extend" the class you would use Object.create on the base class' prototype, then reassign the constructor. See pixi.js source for reference. Nothing wrong with using "new" to create objects since it keeps your code clean and generally seems to lead to better performance. This pattern ensures functions aren't being created in the constructor, and its easier for V8 and other engines to optimize. I have my own utility for this sort of thing as IMHO the `Object.create` and `Object.defineProperty` boilerplate is tedious and error-prone. https://github.com/mattdesl/klasse EDIT: [Here](http://book.mixu.net/node/ch6.html) is a good article that talks about object-oriented approaches, "embracing" the power of prototypes, and composition over inheritance. You can also read about [hidden classes](http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/) which may influence how you end up writing your constructors (i.e. ensuring that instance variables are defined in the constructor, rather than added at a later point or placed on the prototype chain). 
I would expect someone to be able to do these things with it: * inheritance * simple for loops and while loops. Call functions. Pass functions. Control flow basically. * conditional statements * mixins * know javascript the good parts book. Optionally i would expect the person to understand and be able to apply javascript in some of these ways but not all necessarily * recursion * manipulation of data structures such as objects, arrays, linked lists, tree structures. * divide and conquer scenarios * how to use frameworks such as jQuery, underscore, etc... Im sure other things but that's a good start.
this looks great. does anyone have any comments on it?
So sort of a more dynamic deployment tool, similar to grunt but looks leaner and faster. Sounds nice but there are *so many* tools out there now!
http://i.imgur.com/Ut0oRjB.png Freak me out why don't you? Second attempt and I was all "WTF IS GOING ON... WHY ARE YOU TYPING?!?!? AAEHEAHHAFARRGHHH" no really. =( Stressful. [edit: also, hello again. I'm not sure what sort of mod I could make for this. I must say.. I haven't checked out the last few weeks and will do so right now.] [edit 2: thanks for the hip Azeirah.. I've now saved 1710 lives and was also stuck after the "Are you a hacker?" part] [edit 3: looking at the source.. that is indeed the end....] [edit 4: speaking of that.. load the game. Dev console -&gt; paste -&gt; var sentences = [ "you wont get here this fast", "reddit attack", "not the end yet", "abcdefghijklmnopqrstuvwxyz", "zyxwvutsrqponmlkjihgfedcba" ]; Too tired to create an actual mod like before =( ]
This looks fairly easy to pick up. As someone with no experience with a JS framework only vanilla/jquery, would this be a good stepping stone to use vs something like knockout or vue, or would I be better off jumping to those instead?
https://news.ycombinator.com/item?id=7253288
I'm really confused on this. For kicks, I ran it through jsPerf: http://jsperf.com/bignumber-js-vs-native
brilliant.
Math.sqrt, not math.sqrt If you pop open the console, your original code will log "Uncaught ReferenceError: math is not defined". Always check the console.
Thank you so much +1 internets
Figured I'd follow up. Took your advice! https://github.com/jsplaine/HiveMindHealth/commit/d19d38fdd30bfbec9c69e29311d30f9ceb5885d9
Glad I could help
Why?
thanks for the mention. I shall check and have the guys include require.js, hogan.js and flight.js in the article appropriately.
I've had success with Rackspace Cloud Files.
It's not stupid or foolish, but I think you've fallen into a common trap: you're spending more time trying to invent your own object system than you save over just using the one JS provides out of the box. There's nothing wrong with `new`. It solves an important problem: objects that maintain state (most of them) need to initialize themselves after creation. I think you'll find that ignoring `Object.create` and just using `new` makes things simpler overall. 
awesome execution, would be great to see more. really loved how well you were able to create a compelling storyline with such a short game. i was surprised at how invested i became in the city's wellbeing 
Very nice. I can verify all the problems you've identified with gulp and grunt, and this looks like an elegant solution to those problems.
Does the article load scrolled halfway down for anyone else? It was rather annoying.
How about https://github.com/MikeMcl/bignumber.js/ ?
[Works fine for me](http://jsfiddle.net/8JG9W/1/). Edit: Just seen your edit, cool :)
Sure but TypeScript is not about runtme protection but focusses on compile time, which is most important for practical consideration. they try not to add much runtime code but keep close to plain js. Benefit of staying close simple JS that you have all the optimisations of modern JS engines, and if it compiles properly you can be sure you're safe from unexpected access (unless you consciously hack like in your exampl). But then you shouldn't run hostile JS code anyway :D (before the single-export landed your could do `(module).exports = {}` for example of flexibility)
component.io is technically a lot better then bower: I like how it is all commonjs and strict enough for automated building (unlike the huge mess in bower). too bad they choose that super generic name (google for it.. nope).
typeof navigator.cookieEnabled == "undefined" Since there is already a check if the cookieEnabled is true or not, this is checking if it exists at all. If it doesn't exist then to try setting a cookie ("testcookie") and then testing if the cookie can be retrieved ("testcookie" again back out).
There should be no reason ever that anyone should be redirecting a user with javascript. I just don't see a valid use case. The page should only change if the user clicks a link or submits a form. If you need to 304 redirect a url or page, then use server side redirects that are actually meaningful and valid.
A headless one: PhantomJS for example is popular with devs: it is a webkit browser without UI that you can control with a javascript file. You can use it on it's own but there are also *many* wrappers and tools built around it using node.js: search npm for 'phantomjs' or some other relevant term. If you just want to grab screenshots you might like [node-webshot](https://www.npmjs.org/package/webshot) for example. Besides PhantomJS there is also SlimerJS, it is similar but newer and it runs Mozilla's platform (FireFox/XulRunner) instead of webkit.
I think you may be missing the closing div tag for `div.wrapper`.
that was beautiful. i love how the instructions and the narration are also your ammo.
I will definitely give it a try. seems like it perfectly solved my problem
Well, a good start would be to look into OO practices and restructure your app around those principles :) 
Please explain further as I'd like to give comprehensive alternatives to any seemingly realistic usage cases.
You log out with an ajax call from a website, and will be redirected to a logout landing page. I dunno, there are a few valid reasons to use it. Although, I agree. Use it as less as possible, because analytics software and search engine crawlers (except Google) can't handle those redirects very well.
Brand new: [pageres](https://github.com/sindresorhus/pageres) It's based on node-webshot but it allows you to capture a page in a specific size and therefore create screenshots of a page, for example, the way it looks on a phone. I personally haven't tried it but maybe it's worth checking it out.
[Worked!](http://imgur.com/Bq3HugX) in pic boxes spawn in random position in fixed square area every 250ms, sometimes they collide with others and fly to different directions (simulation using Ammo.js).
&gt; You log out with an ajax call from a website, and will be redirected to a logout landing page. Either use ajax and don't redirect, simply showing the message they are logged out, or use a logout link that destroys the session and also is the logout landing page. &gt; I dunno, there are a few valid reasons to use it. There aren't and I would be glad to strike down every single use case that anyone can come up with. I sound like a jerk, but I am dead serious.
[CasperJS is build on Phantom](http://casperjs.org/) and has [builtin method to take screen capture](http://docs.casperjs.org/en/latest/modules/casper.html#captureselector). You might wanny try this.
Wow, nice one! What's the performance like now? Is there a demo online?
sure, [have a look at you network tree of the project on github](https://github.com/robhawkes/vizicities/network), It have a branch called 'test_1'. should be working ... I included 3+ MB ammo.js inside just to make things easy until I figure out how the grunt build systems works. I did some changes to some core stuff like the Scene and Renderer for this to work, but this clearly can have better implementation.
that's pretty interesting, thanks - also, saving
I mean drawing all particles offscreen - it's faster because the screen doesn't have to update. So you draw each particle to an offscreen canvas that isn't attached to the body and then copy the contents of that canvas. If you google offscreen canvas or canvas optimizations you'll find loads of tricks.
surprisingly little insight there given the amount of words written.
why is this in /r/javascript
Because it's an article about javascript frameworks?
These are front-end frameworks consisting chiefly of CSS and HTML patterns. They have JavaScript elements but are not JavaScript frameworks. For JavaScript frameworks, see that of Backbone.js, Angular, Ember, etc. You'll notice the difference.
Ugh, even if this belonged in /r/javascript in the first place, half of these aren't even Bootstrap alternatives. Blogspam.
http://w2ui.com/ w2ui for jQuery is better than all of these, in my opinion. 56kb Javascript and it's pixel perfect. I found it when searching for a grid that could handle thousands of records. http://w2ui.com/web/demo
It is a good start! Congrats on jumping into the JS world. I would try to get your feet wet with larger frameworks that others have made that are in vogue these days. Maybe something with Google maps? Learning large APIs can and will get you into the swing of things. http://www.cdnjs.com &lt;-- explore what's out there. It took me an entire afternoon to breeze through the list of libraries, and I could do it a half dozen more times and still learn things! If you're going to comment every line, put the comments on the same line. BUT, remember that comments which are obvious to almost everyone are not really useful. Also - no matter what style you settle on, keep your code consistent. Use more whitespace between symbols (like + ). Putting your code through http://www.jshint.com is a good idea no matter how many days (or decades) you've been writing JS. Or jslint.com if you're a masochist. Your CSS looks much more structured. Did you do web design before starting to learn JS? 
Rainbow colored console.log, woooooo!
It is a good start! Congrats on jumping into the JS world. I would try to get your feet wet with larger frameworks that others have made that are in vogue these days. Maybe something with Google maps? Learning large APIs can and will get you into the swing of things. http://www.cdnjs.com &lt;-- explore what's out there. It took me an entire afternoon to breeze through the list of libraries, and I could do it a half dozen more times and still learn things! If you're going to comment every line, put the comments on the same line. BUT, remember that comments which are obvious to almost everyone are not really useful. Also - no matter what style you settle on, keep your code consistent. Use more whitespace between symbols (like + ). Putting your code through http://www.jshint.com is a good idea no matter how many days (or decades) you've been writing JS. Or jslint.com if you're a masochist. Your CSS looks much more structured. Did you do web design before starting to learn JS? 
Its funny I saw this. Just yesterday I broke out my "inherit" method for pseudo classical inheritance based off of how the googles closure library does this, see https://github.com/erickj/js-base To set up the prototype chain appropriately you want to do it once on your constructor function's prototype object. Set it to be an object whose prototype is the prototype of the "class" you're inheriting from via Object.create. 
Jquery comment is best comment.
I'm the author of the library. I'm looking for feedback on how to make it better!
I like the look of Sphinx (especially readthedocs.org) but it's lack of JS documenting tools isn't great. I have a codebase documented with Jsdoc style comments and converting it to Sphinx style is going to be a nightmare. Does anyone know what lodash uses? I love their documentation it's really useful. 
It's a front-end framework like Bootstrap, if that's what you mean by presentational. It's not comparable to Backbone.js, Angular, Ember, but the submitted link is called "8 Bootstrap Alternatives" and this is a good alternative to Bootstrap. So, neither of us are wrong. I shouldn't have nested my comment. With that said, it doesn't have everything bootstrap has (i.e. glyphicons, breadcrumbs), but if you need a grid with a backend with some bootstrap-like layout functionality, it's extremely competent and fast. 
No shortage of PhantomJS tools out there :) But I see CasperJS now has support for both PhantomJS and SlimerJS, that is very cool. SlimerJS can use a full FireFox (not stripped), iirc you can run tests with addons and plugins enabled (if you like creative hackery).
Thats a good idea, i'll look into that!
To expand on my previous commment a little, once you start to get your head around OOJS (and it can definitely be a little tricky in JS because there are many ways to implement OO and much debate over what methods are better in what situations), you'll be in a much better position to then take on some of the popular libraries and frameworks that all operate on OO principles. You're in a great position to learn though, because you already have some code that you're intimately familiar with and can start reshaping as you learn new things. That's a lot easier than just reading about it and mentally trying to figure out how it would all work in a real life situation :)
 I appreciate the help! I have during the past 2 months been learning and practicing a lot with front-end development and I started out with CSS /html via code academy and Treehouse. Its been only recent (2-3 weeks ago) that I have actually been learning Javascript. 
You might to try r/learnjavascript . You'll prolly get a better response there.
I know its slow. I did this to understand the mechanics behind these simple operations as the number of digits increases. I will work on it to make it faster and thanks for the link :)
The following function is used by modernizr to test for cookies, in it's none core detects. function testcookie() { // Quick test if browser has cookieEnabled host property if (navigator.cookieEnabled) return true; // Create cookie document.cookie = "cookietest=1"; var ret = document.cookie.indexOf("cookietest=") != -1; // Delete cookie document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT"; return ret; }
Hello! Thanks for response. I'm just looking for better approaches of creating classes and inheritance in js
Any other way to change the prototype without __proto__?
Hey, noticed you're looking for feedback, got a couple of things: * It took me a few minutes to work out exactly what this actually does! Could do with a slightly clearer introductory text. * I originally thought this would be for *vertical* breakpoints, but it's for *horizontal*, it'd be nice to see vertical functionality as well! * It'd be nice to have a toString function in there mapped to PointBreak.getCurrentBreakpoint(), [example using a basic object](http://jsfiddle.net/S66uH/). * The demo doesn't do this justice - add some cooler stuff to the demo! Other than that looks pretty cool, will fork it and have a poke around the code! Edit: Just a small thing after poking around the code a bit, this function: PointBreak.prototype.getSizeOfBreakpoint = function(name) { if (this.hasBreakpoint(name)) { return this.breakpoints[name]; } return 0; }; Why does it return 0? Wouldn't it be better to return null or undefined? Or even better, throw a console.error? Returning a number means that someone couldn't use this to have a breakpoint of 0 (not likely, but maybe needed?)
Maybe Im missing something here, but why would I use js to handle breakpoints as opposed to just using media-queries in sass/css?
You can use Object.create(Animal.prototype) and expando that rather than using the object literal form. Edit: Or, use Object.create(Animal.prototype, { ... additional own properties ... });
It's great. This pattern is basically what ES6 classes desugar to. The only substantive difference is super and static-side inheritance (ie. in ES6, Elephant.__proto__ === Animal).
Also try [pageres](https://github.com/sindresorhus/pageres)
__proto__ doesn't work in IE, at least up through IE 9 (latest version I have handy right now). Also not sure what you were looking to accomplish with those "constructor" fields.
This looks really interesting and could harmonize with some other stuff I'm playing with at the moment. How easy is it to bridge external code into the JS environment?
Then what *is* your test doing? In what real world scenario would you ever create the constructor and prototype for every single instance? That's more than unnecessary, it completely defeats the purpose of using prototypes. The results of your tests largely have to do with the time it takes to define new functions and create objects, which doesn't seem to be what you're trying to test. The closure pattern with `new` I have there is not unnecesary, it's a very common pattern for imitating private/privileged methods, famous for being endorsed by Douglas Crockford. Note how in both cases the `new` operator is in the prep code, so that's no what's being tested. I can't really pinpoint what real-world pattern your tests are mimicking. Your second test doesn't make any sense. You can cache `a`'s return value rather than calling `a()` every iteration of the loop. Either way, you're mixing creation and usage code into your tests, which makes the results much less meaningful. JSPerf has a preparation code section for this reason. The point I'm trying to make is that the reason to use prototypes over closures is that is greatly reduces the memory usage of your app. The performance in any real world case (where you create the prototype once and then use it many times) is going to be negligible. But in terms of memory, closures are not free.
The data set is in [JSON](http://en.wikipedia.org/wiki/JSON) format. This means it can be easily converted into a hierarchical set of JavaScript objects and arrays. It is superior to CSV as it can represent heirarchy, similar to XML, but less verbose.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**JSON**](http://en.wikipedia.org/wiki/JSON): [](#sfw) --- &gt; &gt;**JSON** (/ˈdʒeɪsɒn/ **JAY**-soun, /ˈdʒeɪsən/ **JAY**-son), or **JavaScript Object Notation**, is an [open standard](http://en.wikipedia.org/wiki/Open_standard) format that uses [human-readable](http://en.wikipedia.org/wiki/Human-readable) text to transmit data objects consisting of [attribute–value pairs](http://en.wikipedia.org/wiki/Attribute%E2%80%93value_pair). It is used primarily to transmit data between a server and web application, as an alternative to [XML](http://en.wikipedia.org/wiki/XML). &gt;Although originally derived from the [JavaScript](http://en.wikipedia.org/wiki/JavaScript) scripting language, JSON is a [language-independent](http://en.wikipedia.org/wiki/Language-independent_specification) data format, and code for [parsing](http://en.wikipedia.org/wiki/Parsing) and generating JSON data is readily available in a large variety of [programming languages](http://en.wikipedia.org/wiki/Programming_languages). &gt;The JSON format was originally specified by [Douglas Crockford](http://en.wikipedia.org/wiki/Douglas_Crockford), and is described in [RFC 4627](//tools.ietf.org/html/rfc4627) and ECMA-404. The official [Internet media type](http://en.wikipedia.org/wiki/Internet_media_type) for JSON is application/json. The JSON filename extension is .json. &gt;==== &gt;[**Image**](http://i.imgur.com/hXb8fJ5.png) [^(i)](http://commons.wikimedia.org/wiki/File:JSON_vector_logo.svg) --- ^Interesting: [^J'Son](http://en.wikipedia.org/wiki/Jason) ^| [^JSON-RPC](http://en.wikipedia.org/wiki/JSON-RPC) ^| [^JSON-LD](http://en.wikipedia.org/wiki/JSON-LD) ^| [^JSON-WSP](http://en.wikipedia.org/wiki/JSON-WSP) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfitubi) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfitubi)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 62237:%0Ahttp://www.reddit.com/r/javascript/comments/1y9vwd/help_with_javascript_api_syntax_and_deliminators/cfitu51)
www.snapito.com 
You might need: - js to handle a navigation menu for small screens - a fallback for handling hover events
This is a nice idea, but why is it done via the ID? It even makes use of jQuery, so why no plugin?
http://convertcsv.com/ This site will convert it into csv format for you.
Does it support labeled edges? If not, are there any plans to add that as a feature?
[Image](http://imgs.xkcd.com/comics/frequency.png) **Title:** Frequency **Title-text:** This comic shows estimated average frequency. I wanted to include the pitch drop experiment, but it turns out the gif format has some issues with decade-long loops. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1331#Explanation) **Stats:** This comic has been referenced 30 time(s), representing 0.30% of referenced xkcds. --- ^[Questions/Problems](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Website](http://xkcdref.info/statistics/) ^| ^[StopReplying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
http://www.tumblr.com/docs/en/custom_themes Amazing what Google search will do for you. Also, this is a sub reddit for js, nothing related to tumblr themes. Since you are new to this, I will cut you some slack, but ditch W3 schools. Pretty much worse learning you can do. 
yeah I've been to this site a lot, and I have no fucking clue whatsoever on how this stuff works. Is there a subreddit for tumblr themes?
I was surprised it wasn't just tagged by data-frequency="10" or the like 
Let me give you the best advice anyone ever gave me when I first started. Before you ever ask, try a quick google search.
No, dude. Data-driven JavaScript Controls.
Sounds like buzzwords to me. I've always hated the term data driven. 
Done, turns out to be an easy mod since it's jQuery based. https://github.com/lisson/frequency/tree/data_attribute 
It's not the easiest or cleanest (yet), but it's doable. The ejs-llvm bindings (for self-hosting) can serve as a reasonable example of where things are at the moment: * [the ejs-llvm module initialization function](https://github.com/toshok/echo-js/blob/master/ejs-llvm/ejs-llvm.cpp#L37) * [the code which adds the `Module` type to the llvm binding](https://github.com/toshok/echo-js/blob/master/ejs-llvm/module.cpp#L274) Associating `require("llvm")' with that native module requires an additional command line argument: `--module "../../ejs-llvm/libejsllvm-module.a,llvm,_ejs_llvm_init,$(LLVM_LINK_FLAGS)"` What sort of stuff are you playing with at the moment? :)
In *theory*, `Object.setPrototypeOf`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf In *practice*, as the linked article says: &gt; Mutating the `[[Prototype]]` of an object, using either this method or the deprecated `Object.prototype.__proto__`, is strongly discouraged, because it is very slow and unavoidably slows down subsequent execution in modern JavaScript implementations. As others have said, set the prototype with `Object.create` or with `new MyPseudoClassFunction(...)`.
Ok so your table structure seems whack to me. Why isn't this all just in 1 table instead of having many different tables? Also you really should use CSS instead of hard coding the styles here. I'd start trying to solve this by getting rid of all the inner table tags and focusing on making this 1 table and then loop the data into the rows.
Sorry I didn't mention: the nested tables are used to display fractions. For each cell in the 'main table' where the fractions are to be displayed, there is another 2x1 table within. One row for the numerator, the other for the denominator. The reason why I didn't use CSS is simple: I don't know how. (I would still consider a complete newbie to JavaScript and HTML. I haven't brought CSS into the picture yet.) Also, thank you for your reply!
One thousand three hundred thirty-fir*th*.
How long is it going to be until we can actually use ES6? Most of this invalid ES5 syntax so no older browsers will ever support it. Will it just be common to pump our ES6 code through a es6to5 compiler before production? What's the point then?
I wanted to keep it minimalistic so that there would be no additional javascript required, but I guess I went a little overboard there. I'll make it a jQuery plugin as well. Thanks!
Mother of God. I had one job....
I found http://kangax.github.io/es5-compat-table/es6/ but I don't know if it's up to date.
Well, if Node.js supports it anytime soon you can use it in production code much sooner.
I would imagine the 'compile to ES5' as a polyfill - if the engine supports ES6, it just runs, if not, it compiles to ES5 (or ES3 or whatever) first
Really does it matter? I choose to use Gulp like it's more faster to setup and for me that's what it's about! But I had some good times with Grunt as well both are great tools!
This is really excellent feedback. Thanks very much! I'll try to address each of your notes. As for vertical functionality, that's on my wish list for version 1.0. Might require a bit of refactoring.
I'm actually using this library on a big project at the moment. We have several cases where functionality changes or layout changes drastically. For example, changing a dynamic carousel from displaying 3 items to displaying 2 or 1 depending on the screen size. I wish I could do everything with CSS (and without duplicating lots of work) but I ended up having to resort to JS in the end.
It's maintained very well, yup.
Those are some beautiful slides
Fucking **slideshows**. God damn it. While you're at it, contribute more to this community. You are spamming this subreddit with this account by only linking to your blog and to your own github.
Here's one. http://www.reddit.com/user/markdalgleish
You forgot to complain about the pointless meme slides...
How does this compare to Sentry? https://getsentry.com/welcome/
Not enough energy. Busy battling /r/webdev about their LCD content.
What was it that you were wanting to achieve in particular that their API documentation wasn't showing you how to do? 
Excellent comparison, and beautiful slides, thank you. My front-end team chose to go with gulp as it is more scale-able and elegant for large projects with many sub-gulpfiles. With the help of [gulp-chug](https://github.com/robatron/gulp-chug), (Full disclosure: I wrote it :P), we've created a "cascading" gulp pattern where running a root gulpfile will recursively run all gulpfiles below it, but if you're on a leaf or below, it will only run that gulpfile. Makes for a super fast build for developers, and a thorough build for our CI and staging servers. 
Why reinvent the wheel? You're already overcomplicating things by not using the Router and History classes/methods. I'm building a Phonegap app right now and and by using Router/History, not only does Android's back button functionality already work, I can of course bind any button to do the same thing.
From the moment I heard for gulp I switched to it immediately. It's what I always wanted from grunt
EDIT: Replied to wrong parent. Derp. 
I wondered this so I checked github and found the change had already been made, nice :)
I wish standard places like CodePen supported these crosscompilers.
Awesome, I really wanted to see your talk @MelbJS but couldn't make it at the last minute. Cheers for this.
Not everything is made for the wide range of browsers, for example for internal applications it is possible to significantly limit the number of supported versions. And non-browser environments (servers, build systems, automated tasks) can use it even sooner.
Googling the blink tag returns [interesting results](https://www.google.com/search?q=blink+html)
Works for me in FireFox but sloooow, Chrome does well. Soe there _are_ significant performance &amp; implementation details between browsers? Who'd expect _that_?! ;-)
Exactly, I don't understand the furor. This whole thing seems like a duel of handbags at twenty paces. Personally, I use grunt, am perfectly happy with it, and really don't like the approach gulp takes.
I don't think it was even tested on Firefox, as slow as it was.
I thought this at first and you're right, this does have very limited use cases, however, consider some gedanken examples: * You have a canvas game for which you have 3 different art sizes * You want to remove/add some events for small/large screens, for example you might remove large tooltips on smalls screens. (admittedly you could have media queries on the tooltips, but then you'd still be firing JS events) * You've created a UI that is built (partly) in JS (e.g. built via AJAX requests) and for example the number/type of elements that might appear in a menu bar depend on screen size. 
You're confused because you don't understand web development yet. It's hard for beginners to see how concepts might be applied to different scenarios without experience, so focus on practicing web design / development first and the rest will come easily.
Managed to build it, though your build instructions need a bit of fixing. Now what?
I have to admit, if I needed something like this, I wouldn't use this library. It doesn't really *add* much, I'd just whip up something [like this](http://jsfiddle.net/HtMxz/5/). I just can't think of when the functionality from the library would be needed that much :/
Firefox 27, OS X 10.9 - works just fine for me
You can break the console by running `document.documentElement.innerHTML='hi'`
Why does it matter when you compare Nvidia to ATI, Ford to Chevy, Microsoft to Apple? Because there are differences that people would like to understand before they invest time into understanding the product they'll be using. I really don't understand why everyone gets so annoyed when they see products being compared. God forbid the community was educated on what tools are available to them along with their strengths and weaknesses...
I’ve faced a similar issue in the past when working on a image resizing library, It was a while ago but I believe it is down to safari on IOS subsampling the images over a certain size and when the image is drawn to canvas it doesn’t handle the subsampling correctly. I did a quick search and this library came up: https://github.com/stomita/ios-imagefile-megapixel it should hopefully fix the issue for you. Otherwise feel free to drop me a message and I can send over the implementation I put together.
I think it could be [slid.es](http://slid.es/).
This is really handy, but is it just me, or is the example of iterators a little lacking? It shows how arrays are iterable using the for-of loop, but doesn't show anything about actually constructing iterable objects, which I thought was half the point of the new iterators.
Can I ask the OP, if you are the one who created the slide show, how you go about finding images to use in the slideshow? Do you already have pictures in mind for each slide? Or do you just browse a gif site until you see something that might fit somewhere in the presentation? Or do you google for particular keywords that are relevant to each slide? 
you've done an excellent job on it, thank you. 
[You](https://www.youtube.com/watch?v=VLQ3s2o_z5w#t=3)? :P
Gulp adds the complication of managing pipes, it makes it harder to hack custom tasks, and the plugins are not so mature. Grunt is super established and has plugins for almost everything, and if not then you hack one in 10 minutes. I wouldn't choose a build system just on the basis of being able to split your config into different files as some ppz here in thread suggest. 
Could be [cleaver](https://github.com/jdan/cleaver)?
&gt; .. though your build instructions need a bit of fixing. They really do. I've switched gears and started spending more time writing *about* ejs just to make things a little easier to get started and use. Clearly more work to be done. Did you have any specific issues with the build instructions I should take a look at? &gt; Now what? Now you can compile javascript to native code. Unfortunately running the node version of the driver is also annoying at the moment. 1. `pushd echo-js/test &amp;&amp; export NODE_PATH=\`make node-path\` &amp;&amp; popd` 2. `echo-js/ejs foo.js another.js`, and it'll spit out foo.js.exe containing the compiled bits from both files. There's a very small amount of the node api (in `path`, `fs`, `child_process`, `process`) that's implemented, mostly so I could use the same compiler driver code for both.
I don't know my r/ subreddit, so well so thanks for the advice.
thank you. The reason I was using csv was sole because it allows me to more easily isolate the array so I can manipulate its vectors.
Ahh, interesting. Does your code generator support multiple JS engines? IDE support is one of the biggest problem areas looming on the horizon for ejs. I really don't like any of the options (writing/supporting an IDE, writing/supporting a set of IDE plugins, making developers maintain custom build rules in their chosen IDE.) And doing cross language stuff makes it even more of a problem. 
&gt; pushd echo-js/test &amp;&amp; export NODE_PATH=\make node-path` &amp;&amp; popd` Anyone know how to escape \` inside a \`\` block?
I'm giving it a go since it's free and we have an upcoming deploy on one of our apps. I've pushed that we should be doing this but can't seem to get anyone on board. I think it's because we would have to deal with the results :) Nothing to see here, let's just bury our heads in the sand. At my last job I even made my own (I was just capturing window.onerror and pinging my personal server with the details to log/present the info). It was ridiculously simple. 
Such space coin.
This is extremely easy to find with google. 
Or http://logentries.com