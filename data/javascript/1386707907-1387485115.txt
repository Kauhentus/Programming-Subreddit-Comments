I think that convention makes it clear. Convention is powerful, which is why most devs (in my experience at least) adhere to common code convention/styles. Having a leading `obj.` in front of each method call would be more explicit, but that doesn't mean that the chaining isn't clear; just less so to someone with no knowledge of `obj`. Brevity and better readability is a good tradeoff for that, IMO.
A bit off topic but why does the text on the page you linked fade in based on the scroll position? It effectively reduces the content height dramatically
Probably because it looks "neat". Good UI principles are constantly trashed in the name of zazz.
Amazing. I can't wait to use this.
Totally agree. People forget that *reading* code is harder than *writing* code, and code spends far more time in maintenance than it does in initial creation. Responsible programmers put more effort into maintainability than ease of initial creation. I strive to make my code [screechingly obvious](http://alistair.cockburn.us/Screechingly+obvious+code). I don't want people to read my code and say "ooh, that's clever"—I want them to read it and say, "oh yeah, that's obvious." So, yeah, chaining has its place, but if you're just using it to save some typing—at the cost of making your code take a bit longer to figure out, or requiring that everybody know your conventions—you're doing your code a disservice. 
Also; I think people should feel free to be as clever as they want behind the boundaries of their public API.
&gt; What I really really dislike is chaining a bunch of functions and then assigning the output to a variable. Unless each method is pure, in which you must assign the result for there to be a point. For example, one of the best uses of chaining is functional sequence manipulation/querying, creating a kind of DSL.
You think the set of JS users bitten by map getting an index is larger than the set of JS users who get utility from that behavior? I'm honestly surprised because I've never once been bitten by map's behavior, and have used the index parameter of map with some frequency. I won't get in to my experience as I think appeals to authority are mostly useless, but suffice to say I am qualified to have an informed opinion here :)
Doesn't work in FF 26
Yeah...unfortunately many of the other teams in the class also experienced issues with enchant.js in FF. Specifically, this game only works in webkit browsers because of enchant's current dependency on WebAudio. 
I think changing arity needs to be done carefully regardless (and certainly when designing and implementing the language we treat these sorts of changes extremely carefully). Note that, even if the built-in map behaved as you described, there might still be thousands of user-land libraries with a "broken" map (underscore, jquery, whatever), and we'd still have a responsibility not to break that code.
I'd actually say that the next step is Python. Javascript has lot's of gotcha's that make it difficult to learn and it's functional abstractions can be difficult to wrap your head around. Conventional OOP languages like Python (especially with it's whitespace formatting) are much friendlier and more versatile. Start teaching him some server side programming in Python. It will teach him far more than trying to absorb all of the various conventions and tricks that make up javascript programming. Source: Front end engineer, have tried to teach people JS and Python before. I don't even have experience programming in Python and it still went way better.
Awesome.
Nicely done.
Nice! One thing I noticed though: after a while (not sure how much time but I had around 5000 points) the music stopped. A lot of fun. I may actually come back and play this again later today.
For me, chaining is great when the chain returns a consistent api. Jquery returns jquery (most of the time), but d3 traverses api's, which can throw (me) curveballs. I like chains in promises and middleware a la express, for example.
I do agree that a simpler approach to `map` seems preferable, as its current form is less suited for its essential function. But I hesitate to push that opinion, because usually when I receive data I don't need it is because it is necessary in use-cases that I haven't experienced. Either way, though, I don't see an issue with `Number`. Adding extra arguments should be considered a breaking change, and therefore either perpetually avoided, or grouped with a very visible version bump (like ES6), in which case we would already know that our code requires review.
very cool! may i suggest putting some kind of elasticity or tension on the grid points so that when u kill something they dont just jump back to being static but rather ease back into place with maybe a Back ease? would make it feel way cool
position(up(left(obj))) &lt; a different kind of chain, but do i change the object, or present a view of it? If you want that kind of sequential freedom, the chain should capture the change, not the state i guess?
This isn't what I think of when people mention chaining. It IS technically the same kind of thing, but it's really hard to read, and I try to avoid that as much as possible.
That is "chaining" multiple function calls in a loose definition of the term, but it's a different meaning of the word "chaining" in the context of javascript.
Actually, in the case of an uncaught exception, the stack trace will have the failed method call and a line number where it happened in that method. Now if it failed silently, that's another story. But then stack traces will be exactly as much help in either a chaining or a non-chaining API.
Method cascades is on of the syntactic sugar enhancements I really like about Dart. Cascades are strictly better than manual chaining in every way: you get chaining for automatically for free, it works for properties, and your methods can still return useful values, but the called decides whether to use it or chain. Your example in Dart would look like: $('body') ..event1() ..event2(); http://news.dartlang.org/2012/02/method-cascades-in-dart-posted-by-gilad.html
how about composition? Something like: var runEvents = compose(event1, event2); runEvents($body); It starts to make a lot of sense when your chain gets longer and you want to re-use it
True, I suppose its only when you chain the same method multiple times that you do not know which method failed. I might be wrong on that too :) too busy to experiment currently.
WebAudio is in the current and previous version of Firefox.
Looks like enchant is depending on webkit's implementation only: if(!window.webkitAudioContext){ throw new Error("This browser does not support WebAudio API."); } 
Hey thanks for playing! And yeah, enchant doesn't have a way to loop the music natively currently (v0.8). We did have a solution that looped the music, but enchant would throw an error to the console. We didn't want any errors when our professor went to grade it, but looks like we could just put it back in now! edit: re-enabled DOMSound that should loop the sound when githug pages updates
saving you the frustration of not being able to move, since motion control in our game depends on the keyboard.
Well, not major ones. A quick google search seems to turn up one breaking change: `for (var x = 1 in [])` is no longer valid.
I just chain my methods like this: $('#selector').doSomething() .doSomethingElse() .doAthirdThing(); it avoids the sloppiness, and I think it's cleaner as you don't have to reiterate the object reference.
&gt; I don't want people to read my code and say "ooh, that's clever"—I want them to read it and say, "oh yeah, that's obvious." That's brilliantly worded, and exactly how I try and code. Any advice for a programming student on creating maximum code maintainability?
You're absolutely correct, not major ones is a better characterization. If you're curious, some more detail... a major breaking change is effectively defined as "anything where we have evidence of real world breakages". Any potentially breaking change is usually preceded by massive effort on our parts to make sure the risk of breaking anything is extremely low. Even adding a property to a prototype (eg. adding new Array methods) is potentially a breaking change. We try to avoid adding anything into global scope for this reason as well, although this is super hard to do. In the case of for-in initializers, since the value is typically discarded it's unlikely anyone depends on those semantics, although it's true that some code might start throwing syntax errors. I searched through all the JS code I could scrape off the top 10,000 websites (~1.5gb of script) and didn't find any occurrences in that pattern, so it seemed safe to take for ES6. Currently deciding whether if(1) function foo() {} can be made an error. I hope we can...
Ah - fair enough. 
And what's wrong with that? It has a specific purpose, it's well known, and it looks a lot cleaner than `parseInt()` or `Number()` (considering that the `Number` constructor can be called with or without `new`, returning a primitive or an object, respectively).
Life is even simpler if you avoid `new` altogether, except inside an `Object.create()` polyfill. Objects inherit from objects, no need to try and retrofit classical inheritance.
The best argument for using jQuery is that it normalizes a lot of behavior between browsers. As an example off the top of my head, [here's some *fun* keyboard event behavior that we don't have to worry about with jQuery](http://unixpapa.com/js/key.html).
&gt; Did you read the section I linked for the ~ operator? I skimmed it, but I had read its behaviour in a different spec back in my previous post when I looked up what `!~` did. (specifically, I had read the spec http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf but hopefully your spec and my spec say essentially the same thing) &gt; Yes, when I say i = 0, i holds a float. But as soon as I invoke ~ on it, it is converted to an int32. I disagree with you. The section http://es5.github.io/#x9.5 that you linked to never states that the type of the value changes. It gives **variables** names like "int32bit", but this is merely intended to be descriptive of what intent of the variable. These names do not have any effect on the type system. It's like if I create a variable `var redditUser = ...`, that does not mean "Reddit User" is suddenly a type in the JavaScript type system. There simply is no type "int32" in JavaScript. There are functions, e.g. "ToInt32", whose domain is Number and whose range is also Number. &gt; It's certainly clear that there isn't just one number type, It's actually quite clear that there is exactly one number type, called Number. See http://es5.github.io/#x8 which says: &gt; The ECMAScript language types are Undefined, Null, Boolean, String, Number, and Object. Not sure how much clearer you can get than that. &gt; but in case you need more evidence - why would the spec define abstract operations for converting to Int32 or Uint32 if those numbers didn't exist? There does not exist any abstract operation in JavaScript for converting to Int32 nor Uint32, because there are no such types "Int32" nor "Uint32" in JavaScript. What exists are abstract operations named "ToInt32" and "ToUint32" which convert from Number to Number (possibly the same Number, possibly a different one). The same way that the function `Math.abs` converts from Number to Number (possibly the same Number, possibly a different one). Maybe we should file a bug in the spec, because it seems like this is unclear to some people? &gt; for all intents and purposes in your day-to-day life you can consider JavaScript's behavior 100% documented. Part of my day-to-day life is formal software verification and compiler design. So, no, I can't consider JS's behaviour 100% documented. &gt; It seems you disagree with the specification authors (who themselves represent implementers from all the major browser vendors, academics, practitioners across industry, etc) I disagree with you about being in disagreement with the specification authors. I'm highly confident that if we contacted to specificaiton authors and asked whether their spec was closer to a formal semantic language like lambda calculus or closer to "plain English", they'd probably say plain English. I mean, I bet even a 5 year old could correctly identify whether the ECMA spec looks closer to https://upload.wikimedia.org/math/5/2/7/527ef46c5fd47e4bd72b132e05161c54.png or to &gt; ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax is relaxed to enable it to serve as an easy-to-use scripting language. For example, a variable is not required to have its type declared nor are types associated with properties, and defined functions are not required to have their declarations appear textually before calls to them. &gt; Well the intention of test262 isn't to have a test for all possible programs with all possible inputs, that space is infinite. I agree with reservations. &gt; What it attempts to do is equivalence class things that are identical as far as the semantics of the language are concerned. I disagree. The spec attempts to do that, but the test suite does not. &gt; In your particular example, 1+1 and 1+2 have identical semantics I disagree. I suggest that "mean" different things (one refers to the concept of adding one to one, the other refers to the concept of adding one to two), and thus have different semantics. &gt; the types involved are the same, the steps through the abstract algorithms are the same, so it is sufficient to test 1+1 and leave it there. I disagree that it is sufficient, merely because "the types involved are the same, the steps through the abstract algorithms are the same". For example, for "1 + 1" and "1 + NaN", the types involved are the same (Number throughout), and the steps through the abstract algorithm are the same (http://es5.github.io/#x11.6.1 the only branching happens in step 7, but both expressions will take the same path through the branch) but I wouldn't be surprised if a naive implementor could write an implementation that would correctly handle the first, but incorrectly handle the second.
Incidentally, there's a similar discussion in /r/programming that might interest you: http://www.reddit.com/r/programming/comments/1si624/stop_being_cute_and_clever/cdyhi68
A suggestion from someone who played more Geometry Wars than they're willing to admit: Acceleration is a big thing. The character's movements should have a little time for it to reach "full speed" - not a lot of time, but enough to make it noticeable. Also, bullets should take the current velocity into account (so shooting bullets in the same direction you're going makes the bullets fly faster, where-as shooting bullets while moving in the opposite direction makes them slower.)
Which is why some touch js toolkits implement scrolling and zooming as animations. Handle the events yourself, implement the features as animation, and cancel the original event to keep the browser from taking over and ignoring you.
This looks pretty slick. How does it stack up vs Derby/Meteor/raw Socket.IO etc....? Is there a realtime ORM type of deal here, kind of like realtime Backbone models? Edit: Also, how is concurrency handled? Do you do OT like Derby for keeping the data consistent? Or is it basically just last in wins?
It's great we can have this awesome discussion without getting upset at eachother. Pretty rare in my experience on Reddit! &gt; hopefully your spec and my spec say essentially the same thing The PDF is normative but they should be the same. On the topic of the number type, I think what we're debating is whether ES has any notion of a number type other than float. I hope we agree that there is considering how we can observe the behavior of the binary operators and see this representation in action. Also let me say that I agree that the spec could be more clear. I'll ask the editor, see what he says! When the specification talks about the Language Types, it is talking about the types that programmers of the language can observe. On top of language types there are internal types that cannot be observed directly by users of the language. The reference type is another exmaple of such a type - it is well specified in 8.7 but it does not appear in the list you refer to. When you use binary operators, what happens is you convert from float to int32 or whatever, and then back again. &gt; Part of my day-to-day life is formal software verification and compiler design. So, no, I can't consider JS's behaviour 100% documented. WI mean when I say 100% documented is that it is extremely unlikely anyone would stumble into some ambiguous javascript production. Certainly the grammar is 100% documented using a BNF-like formalism, and as far as every implementor of JS is aware, the abstract algorithms that descripe the semantics of JS are largely complete and unambiguous. Keep in mind that this is coming from a set of implementors that run millions of websites with billions of lines of JS code. I won't contest that there may be bugs, but I'm not aware of any ambiguities or omissions and given the scale we're talking about here I find it unlikely that developers would stumble into something like this. So, practically speaking, it is not useful to consider JS some ambiguous pile of goo. Millions of websites manage to run across multiple implementations without issue (in the pure JS space, other areas like DOM or other host objects differ, often significantly). &gt; I disagree with you about being in disagreement with the specification authors. It sounds like you are disagreeing with the second sentence of 5.2 which states clearly that the algorithms in the specification precisely define the required semanitcs of ECMAScript. &gt; I'm highly confident that if we contacted to specificaiton authors and asked whether their spec was closer to a formal semantic language like lambda calculus or closer to "plain English", they'd probably say plain English. &gt; I mean, I bet even a 5 year old could correctly identify whether the ECMA spec looks closer to... I guess you have to define closer. Are you talking about visual appearance? Because that's about all a 5-year-old could tell you. But I highly doubt a 5-year-old is capable of making a judgement about formalisms used to specify language semantics. Also note that you quoted a prose section rather than an algorithm description. Why not take a look at some of the abstract algorithms instead, which read a lot more like pseudo-code than plain english (at least to me). &gt; I disagree. The spec attempts to do that, but the test suite does not. Having wrote or reviewed the majority of collateral in test262 and I can say that this is the intention of the test suite. I wonder if you think it would be better if we had a different goal? With your background I would be very interested in what you think. &gt; I disagree. I suggest that "mean" different things (one refers to the concept of adding one to one, the other refers to the concept of adding one to two), and thus have different semantics. All I mean is that if you follow the algorithms in the specification you will find that 1+1 and 1+2 follow the exact same steps. The data involved in the calcuation is different, but at the level of the language, the semantics in play are identical. In the case of 1+1 and 1+NaN, your analysis is correct as far as 11.6.1 goes, but you need to also check the spec for the addition operation (called out as a note in the last step of 11.6.1, see 11.6.3). Specifically, the first bullet point applies to NaN. Any of those bullet points are special cases that have different semantics and are tested individually in Test262. 
The reason we built intention.js was because it seemed that there was a lack of an appreciation for DOM-variables, and it grew from there. Besides intentions, I'd say that angular.js has quite a bit of conceptual overlap, although they go off the deep end in terms of the intersections with the upcoming web components and shadowDOM standards (and not necessarily in a bad way).
Namespaces sound like a good idea, but is it really this unnecessarily complex? http://javascriptweblog.wordpress.com/2010/12/07/namespacing-in-javascript/ If so, I think I'll just preface my functions with a common keyword (E.g. audio5_functionName()) Reusability is something I definitely had in mind as I was making it. Are you suggesting possibly making a function myself that writes the proper code to insert, that way all the user has to do is call that function to write in the HTML structure?
&gt; It's great we can have this awesome discussion without getting upset at eachother. Pretty rare in my experience on Reddit! To be honest, I was pretty irritated (for reasons outside of Reddit) going into this thread. I tried not to let it affect the content, but it's unavoidable that it would affect the tone somewhat. Cheers to you for remaining civil, though. &gt; On the topic of the number type, I think what we're debating is whether ES has any notion of a number type other than float Yes, with reservations. I'd prefer to call the number type "Number" than "float". &gt; I hope we agree that there is considering how we can observe the behavior of the binary operators and see this representation in action. In my view of type theory, a type defines two things: The (possibly infinite) set of values that are of that type, and the set of operations that can be performed on those values. An interpretation that is consistent both with this view and (in my opinion) with the spec is that JS has exactly one number type, called Number. The set of allowed values happens coincidentally to be the same as the set of allowed values for the IEEE floating point type, but the IEEE floating point type does not actually exist in JS. The two types are distinct because the set of operations that are available are distinct. I see operations like `toInt32` not as necessarily revealing some "underlying type", but simply that their range happens to be a subset of the set of all possible values of the type. As an analogy, consider some fictional language which has an explicit int32 type and a "times2" unary operator (which multiplies its operand by two). The range of the times2 operator happens to be a subset of all int32 (i.e. it doesn't include the odd integers), and yet I wouldn't say this language has an underlying evenInt32 type that is implied by the existence of an operator. &gt; When the specification talks about the Language Types, it is talking about the types that programmers of the language can observe. On top of language types there are internal types that cannot be observed directly by users of the language. I guess by "internal types", you mean what the spec calls "specification types". I don't consider these to be "real" types, in the sense that they "really exist" in JavaScript. I saw them more as convenience for conveying the specification in a way that is easy for humans to understand. I think the question starts to become philosophical when I make claims like: "A language which is identical to JavaScript, but with all specification types removed, be indistinguishable from JavaScript, and is therefore the same language as JavaScript." There's lots of clauses in that claim whose meaning are unclear, so it gets hard to discuss what the claim even means, let alone whether or not the claim is true. That said, it's sort of a moot point, because the spec explicitly lists the "specification types" as " Reference, List, Completion, Property Descriptor, Property Identifier, Lexical Environment, and Environment Record." Specifically, int32 and uint32 aren't specification types either. &gt; It sounds like you are disagreeing with the second sentence of 5.2 which states clearly that the algorithms in the specification precisely define the required semanitcs of ECMAScript. I guess I consider algorithms, written using mostly English words, using instruction primitives whose meanings are themselves mostly written using English words (and so on, however deep you want to go), to be a form of "plain English", and therefore I don't feel my claim to be in conflict with the claims of the spec. I'm basically setting up a dichotomy between "formal semantics" and "everything else", and I'm claiming that the spec lies in the latter camp. It's hard to pin down a number, but I probably wouldn't contest that the semantics of JS is 99% documented, or even 99.99%, or even 99.9999% documented (e.g. the chances that there is some ambiguity in the spec is equal or less than 1 in 1 million). But it takes a LOT of effort to come up with the formal semantics of a language, and thus it's usually only done for toy languages, which one reason I'm skeptical that it has been done for JS. E.g. is there some machine-readable format of the spec that we can feed to a theorem prover that will confirm that the language is sound? One glib answer would be "The machine-readable format is the source code to Chakra/Spidermonkey/V8, and the theorem prover is the C/C++ compiler", but that just pushes the question one level back to "What's the mathematical proof that the source code and the PDF are exactly equivalent?" and in the case for "big" language like C/C++ itself which hasn't been formally verified, "What's the mathematical proof that there are no bugs in the C/C++ compiler?"
Ross McKelvie
Thanks! Two ideas to start with. Good code is something you'll pursue for a lifetime. :-) First, you've probably been taught to write comments that explain *why* your code does something, not just what. Now try to make your code explain "why" without needing the comment. Second, try to get regular code reviews of the stuff you write, or, even better, do some pair programming. You'll discover that what's obvious to you is completely un-obvious to your partner. Refactor your code until you *both* agree it's obvious. Alternatively, take some code you haven't thought about for a while (at least three to six months). Look at it with a very critical eye. You'll probably see a lot of stuff that made sense at the time but doesn't make a lot of sense now. Add comments explaining all the complicated parts, then work on refactoring it so the comments aren't needed. Good luck! Good readable code is where the real challenge is, in my opinion. Hardly anybody needs original, cutting-edge algorithms. *Everybody* needs code that's easy to understand, extend, and maintain.
Consider the case where obj is stateful and/or your methods mutate it/the world in a way that depends on the previous method call. How about some turtle graphics? turtle.penDown() .forward(10) .right(2) .forward(3); These operations don't commute.
I guess I approach this with a more pragmatist viewpoint. I agree the spec could be more explicit, but I think it's clear that the bitwise operators are intended to be carried out as if operating on int32s, given the conversion (otherwise there would be no need to constrain the values to some arbitrary range for floats). You're right the spec isn't formal semantics. My background is mostly in engineering so I'm not as strong in theory. To illustrate what my claim is meant to mean, consider some randomly generated, semantically correct EcmaScript program. Once generated, you are able to write probes anywhere inside the program. My claim is that the specification is sufficient to tell you what those probes should output. There may be some omissions (enumeration order might be one of them), I admit, but from a developer standpoint it seems more than good enough. There actually is an effort to create a formal semantics for EcmaScript! See: http://blog.brownplt.org/2011/11/11/s5-javascript-semantics.html
Those are method calls, not property manipulation operations. The comment you replied to is in response to the following: &gt;I do miss the brevity when I'm working with objects that have a lot of **setter/property-manipulation methods** that don't chain.
Oh man do I ever chain. Something like this is not uncommon to see in my projects: // Reset dialog dialogs.editEvent .find('.alert') .hide().end() .find('input') .val('').end() .find('select option:first') .attr('selected', 'selected').end() .find('input[name="date"]') .val(date.getFullYear() + '/' + (date.getMonth()+1) + '/' + date.getDate()).end() .find('input[name="hour"]') .val(date.getHours()).end() .find('input[name="minute"]') .val(date.getMinutes()).end() .find('.response') .text('').end() .find('i') .attr('class', ''); As long as it's clear whats being done, I don't see a problem with chaining.
I actually like it a lot (a hell of a lot more than the nonsensical and philosophically divergent from node way that Grunt works.) Substack's talk about streams really changed the way I think about data flow between software components in a profound way (I even started building my UI components, like input boxes that filter lists as streams of typed characters that get piped to the list which uses the streamed in text to visually filter itself) Pretty creative and clean way to think about a build process too; never though about it that way. 
Simple and easy to understand code for Creating image slideshow using JavaScript
[Looks like they've already a handle on this](https://github.com/wise9/enchant.js/commit/c300499b94dfc30cec9e2f1566860a41fc7c3f9c), it's just not in the current release yet.
I agree the jumpiness of going from warped to normal could be a lot smoother! we actually wanted to implement this, but ended up prioritizing performance optimizations since drawing the grid involves taking the canvas from enchant, drawing on it, and putting it back before the game elements are added on top.
http://i.imgur.com/rdgIwX0.gif
I don't concur with the notion that it's *really* hard to read, but I agree it's a *little* harder to read. You need to evaluate it from inner to outer rather than left to right. If you're used to Clojure or Scheme, then it's not that bad - but most importantly it's not mutating obj... Having said that, if the object you're operating on is some form of UI component, then that's a suitable occasion to mutate it directly.
I'm aware of that, but as the OP is asking a question about whether chaining is good or bad - I wanted to show how composition and chaining might affect the flow and mutation of data. Chaining in it's most common use case tends to mutate the source of the chain, but it can be applied in a more commutative fashion if you design your chain API to keep sequence and data separate. 
"Composing" is probably a better term for that kind of nesting.
Saying that `f(g(h(obj)))` is "a different kind of chain" is orthogonal to both this topic and your excellent point about composition and mutation of data. It just confuses the issue. Better to stick with this established nomenclature: `f(g(h(obj)))` is an example of composition `obj.f().g().h()` is an example of chaining
True, iOS stops all JavaScript from running while interacting with the UI. If you look at Skrollr, the method it uses on iOS is to create a fake page within a screen size div. It captures and prevents all scroll events and then moves the 'page' element within the 'screen' element by manipulating margin-top or something. 
fair comment - it's just muddying the waters about clearly accepted terms.
I think the following example summarises my thoughts on chaining: var $notice = $('.notice'); $notice.fadeIn('fast').delay(3000).fadeOut('slow'); $notice .on('click', '.okay-btn', undo) .on('click', '.cancel-btn', close); I have chained together methods that are short and related to each other, and separated out the groups of methods that are not. More importantly, I have cached the jQuery variable so that I'm not calling it excessively.
+1 composition The primary motivation for chaining is it's readability and concision re:maintenance. If you compose common operations out of lower order functions, however, you have less code overall to maintain.
I'm not a great coder, I've never collaborated with anyone else.. but I wholeheartedly agree with you. I find that if my code is not "super obvious" then the next time I want to re-use some code I look at it and think "that's such a god damn mess.. I'll just start over and make it way better" The end result is never "way better" than the original, just a mild improvement that took me 4 or 5 times longer than it would have taken to merely improve the original. My point is, I don't go to the effort of writing clean easy to understand code for others.. it's for my own benefit. In the moment everything seems so clear and elegant, but often if I revisit something even a few weeks later it really takes some effort to understand what I was doing. 
No, you're wrong. Method chaining has been around in object oriented programming a lot longer than javascript has been around and is not restricted to cases where the method returns the same object. It's merely syntactic sugar for where the next method acts on the return value of the previous method.
Doesn't get better than http://eloquentjavascript.net/
&gt; life is simpler if you don't call any capitalized functions without new i disagree: &gt; ok = new Boolean(false) {} &gt; ok == false true &gt; ok ? 'foo' : 'bar' 'foo' &gt; ok = Boolean(0) false &gt; ok ? 'foo' : 'bar' 'bar' life is anything *but* simpler if you zealously apply simplistic rules without regard for their utility. &gt; In the vast majority of cases, the result isn't something you'd want. when i use a builtin constructor function as a cast to the primitive type because that's what i want, the result is exactly what i want.
Oh, very funny. Of course you shouldn't use those wrappers at all.
Unless you're working on a team, do whichever is easier for you. There are militant camps on both sides, and neither is correct. Generally I recommend using Javascript over Coffeescript because it's more widely used.
http://www.stanford.edu/class/cs242/readings/backus.pdf
You can easily implement linked lists in js :) I'd say just go with what you're most comfortable with and have the most fun using. Keep in mind you'll be using It for a while. If you're also really productive with that language, that's a plus
Very interested in ember atm , resources aren't the best but seem to be getting better.
Yeah we can implement linked lists in JS :) Like I was saying all data structures/algorithms I know of seem implementable in JS. Don't you think it isn't fair for people who just have extreme expertise in one low level language like C? Think how much they would struggle to simply maintain a stack. People who know JS could just fly by such technicalities (considering a larger problem) at no cost?
Achieving OOP in C is tough, while in JS it's just there already. Also, JS has manual garbage collection, while C requires you to free up memory you've allocated.
As they said, you should go with the language you're most comfortable with. That should be the one you feel you can code anything in and answer any "trivia" questions about. If you feel you can't code certain things on the spot (for example, a linked list), do some learning/practising before the interview. Look at programming interview questions posted on the Internet. Know all of the keywords, operators, and JavaScript-isms (== vs ===, undefined vs null, call() and apply(), closures, let vs var, "" vs String("X") vs new String("X"), "with" keyword, etc). P.S. for questions about interviews/jobs, another good sub is /r/cscareerquestions
Well think about it in a more modular fashion, what happens if your page could have 1,2 or n amount of players? Does it still work? What happens if someone also has a "finished" function? prefixing the function name with audioN_functionName() might seem like a good idea now but it requires someone to rename all the functions if they're going to use it more than once on a page. Using constructors you could pass in the name of the target div/id into the constructor class, and within it define all of your functions namespaced so that the component could be reused as many times as needed without a worry about collisions. Consider: var player1 = new AudioWidget(document.getElementById("SOMEID")); player1.play(foo); This would allow you to create as many players as needed, they bind to whatever element is passed in (by bind I mean expect the html structure and dynamically attach to events. You can create a "class" and "object" in javascript using: function AudioWidget(myElementId) { ... attach your bindings and events ... this.finished = function(foo) { ... } this.play = function(foo) { ... } this.pause = function(foo, bar) { ... } } It's not absolutely necessary, but if you want to reuse it over and over or it may be used more than once on the page consider taking this approach. Hope it helps.
Dear god... NO! **Real answer:** I hate being not a hipster but CS is really really ugly for my eyes and what's the worst - I find it difficult to read it's code. Even though it should be similar to Ruby with which I am fine.
Chaining is good for readability. Bad for debugging. I myself prefer to chain just 1-3 simple methods. Like DOMel.css(...).fadeIn();
What is the job actually for? Is it for working in C or JS or something else?
It is a general SW profile. I haven't been told my actual job. I'm sure the company uses both. 
It wasn't really a problem for this particular project, so I just left it as is. I could switch to CSS animations though, good idea.
Will, take a look at my page. It does have two elements on it already, for that reason, to make sure it would work with n players. I considered having n audio elements, but that screamed memory leak to me, so instead I only use one audio element. If the user switches to another file, the currently playing one is paused, and the new one begins. The only loss on this is the buffer. A small cost to prevent a browser lockup. Oh, and if the user returns the playing the previous file, position and volume are read from the position of the HTML elements.
Well performance-wise linked lists are linked lists, arrays are arrays. We have dynamic arrays in Python, vector in C++. We still create linked lists, don't we?
One of the fundamental user experience guidelines to the web is that you **do not break the back button**.
no, why add a layer of indirection like that to your code? You will find the biggest proponents of Coffee are the rubynistas because it follows many of ruby's code formatting conventions.
It's just a template with a collection of libraries and folder structure? You'd have to figure out of you like each seperate library.
nope :)
http://lmgtfy.com/?q=javascript+image+slider
Throw some code into jsfiddle, it makes it easier - but from what I can see you should change the .css() method into a .animate() method like this: text.animate({'height': 'height to animate to'}, 'slow'); here's the docs for the correct syntax, mine memory is a bit lame [jquery animate()](http://api.jquery.com/animate/)
$500.
IMO that is a horrible API design, and doesn't relate to chaining at all - it's just a reference to a deeply-nested object.
Because if performance at that scale is an issue you probably shouldn't be using python.
I've been trying a long time, just can't seem to figure it out... I guess i give up to easily haha !
what do you mean by "those wrappers"? `Number`, `String`, `Boolean` etc functions?
I agree, it should be done by myself. But I asked the teacher if i needed too do it myself. And he said it shouldn't be a big problem if i got help as we yet have learned javascript. But i'll do my best and try to learn the basics !
If you're a rails person looking for something like Angular and want to get into CoffeeScript, you might want to take a look at [batmanjs](http://batmanjs.org/). 
No, it really is called method chaining regardless of the objects that are returned. Method chaining just means chaining multiple method calls into a single expression, rather than using multiple statements.
Nope, but I'm about ready to give up evangelizing co-workers lol.
yes, coffee all the things being faster to type is a red herring, coffee is better because it's faster to read to people who object to 'useless' abstractions: may i suggest you go write some assembly?
http://4.bp.blogspot.com/-jW7BQ1CDL-A/TrirMEvBtOI/AAAAAAAAAPc/_Ku7ZGLeaRY/s320/sliders1_medium.jpg 
You could start here https://www.codeschool.com/paths/javascript I read somewhere in this sub, that it´s a good and interactive way to start. You won´t regret it ^^
Thanks just what i needed hahaha !
Thanks ! seems like a real good solid site. Too bad our school use w3schools....
But i'll use the one you sent of course haha !
Even as a Rails developer I now stick with vanilla Javascript. Coffeescript is fine when it's just a bit of jQuery and other assorted libs but can become quite a pain when moving onto frameworks like Ember and Angular. I've started to write Ember apps with Coffeescript twice now and have since abandoned it for vanilla Javascript instead since it's arguably much simpler.
That's the biggest problem with it along with needing a solid and stable version of ember-data being released. I do sit on IRC and help a few guys in one of the reddit based dev channels though. Community support in general via IRC, discourse, Stackoverflow is really good from what I've seen too.
*Using CoffeeScript Promises to Reason About User Interaction* ftfy edit: also, /r/coffeescript
It's not really "functional" programming. It's just programming. In the last example there is a "todos" global that is changed by functions. That's state and mutability.
That's what's always blown my mind about CS. If it's based on Ruby's syntax, which is beautiful, clear and easy to understand, why the fuck is CS so esoteric and harder to understand? Yea `-&gt;` for functions is a nice shorthand, but it's always wildly confusing and looks terrible.
By that logic, this JQuery statement is not method chaining either: $("body").click(handler).find("div").addClass("foo") Because the find method returns a different object from the click method.
Right, this isn't an example of purely functional JS, it's just an example of doing all the DOM manipulations in a purely functional way.
Awesome job! This is amazing work for a student project.
If you write clever code you're a Ninja, if you write good code you're a developer, if you put thought into your code you're a programmer, if you actually have design specifications and unit tests for it you're an engineer.
Adding real-time adapters for client side frameworks should be pretty straightforward. I started working on one for CanJS since that is what I normally use and be happy for any help with other frameworks. For databases, we started a project for extendable in-memory and MongoDB services at https://github.com/feathersjs/legs. But those explicitly don't go down the ORM rabbit hole. For concurrency and data consistency Feathers is, much like Express, pretty unbiased. You will have to handle that in your services yourself, everything gets dispatched in the order it comes in.
I would say that the difference between Feathers and Derby/Meteor is that it's much less opinionated. It's so unopinionated that you can use it alongside a more traditional Express app. This differs from, for example, Meteor, where you have to buy in their way of doing things completely, and have to wait for them to patch things like authentication because, again, you're subservient to the framework. The cool thing about Feathers is that anyone with a little bit of Express experience can use Feathers with virtually no learning curve at all. Real-time becomes a feature of your app, it doesn't consume all development decisions.
_NO_ Why would you want to make your life/learning experience even more difficult?
one solution: do the animation manually $(document).ready(function () { var maxheight=56; var showText = "More"; var hideText = "Less"; var stepSize = 10; //pixels var stepInterval = 100; // 0.1 second var textContainerIsAnimating = false; $('.textContainer_Truncate').each(function () { var text = $(this); if (text.height() &gt; maxheight){ text.css({ 'overflow': 'hidden','height': maxheight + 'px' }); var link = $('&lt;a href="#" class="btn-3"&gt;' + showText + '&lt;/a&gt;'); var linkDiv = $('&lt;div&gt;&lt;/div&gt;'); linkDiv.append(link); text.after(linkDiv); text.data('full-height', $(this).height() ); link.click(function (event) { event.preventDefault(); if(textContainerIsAnimating) return; var newHeight, step; if (text.height() &gt; maxheight) { $(this).html(showText); step = function(){ newHeight = text.height() - stepSize; if(newHeight &lt; maxHeight) newHeight = maxHeight; text.css('height', newHeight + 'px'); if(newHeight &gt; maxHeight) setTimeout(step, stepInterval); }; step(); } else { $(this).html(hideText); var fullHeight = text.data('full-height'); step = function(){ newHeight = text.height() + stepSize; if(newHeight &gt; fullHeight ) newHeight = fullHeight; text.css('height', newHeight + 'px'); if(newHeight &lt; fullHeight) setTimeout(step, stepInterval); } step(); } }); } }); }); haven't tested this but looks correct to me
**scary and horribly unpredictable** The problem with JavaScript and actual application development is that many developers can code in JavaScript and are not very good at it, or think they are brilliant but invest all their time in a mess of a billion frameworks. This is bad, because if you go into the interview with 5+ years dedicated experience in writing applications in vanilla JS then you are like a unicorn. People have heard fables of such creatures, but don't really know what they look like. They sure as fuck don't know how to interview them and you will really have to restrain yourself from talking over the heads of the interviewers. On the other side of the coin, if you invest all your time in reading framework and abstraction APIs you will likely not do well with interview questions that require advanced application capabilities in vanilla JS. This may seem trivial, but it unlocks all manners of unforeseen interviewing consequences well outside just JavaScript. It is my experience that people who spend all their time swimming in frameworks cannot solve challenging problems, such as: accessibility, novel data analysis approaches, and such because you are typically hoping the frameworks are worth a shit in the first place. My suggestion, if you really want to program in JavaScript, is have an application portfolio handy. Speak to your work and experience. If you have no idea what the interviewers are talking about say so immediately so that the conversation can shift to something you are comfortable with. If there is something the interviewers don't understand then break it down like you are talking to your neighbors children. Don't waste your time speaking to syntax, patterns, styles, or any other amateurish crap. If you are interviewing for actual application development the company probably has its own internal style guide and is more concerned with your capabilities, understanding, and approach. Instead talk about actually building applications and simple solutions to challenging problems.
Sorry if I'm plain dumb, but what?
regular old javascript is about to get the -&gt; shorthand anyway.
I think you're getting "functional" confused with "using functions". The right name for this would be Procedural DOM programming. You could definitely change the example to be more functional though, just pass the todos array around. This will also have the effect of making things more testable.
It looks like a CLI for publishing to github and npm?
Can Coffeescript just fucking die already? I can honestly say that nothing pisses me off more than seeing an entire open source project written in the crap.
Yes, I guess that's what it's for. Seems like it'd be useful if you're making a *lot* of NPM modules, but it's really just automating a small number of steps you'd have to do by hand otherwise.
Stick with JS. CoffeeScript is for lazy hipsters.
Are you seriously comparing vanilla javascript to assembly?
Seriously. The jump from javascript - &gt; Coffeescript is absolutely negligible. 
Yes. It runs for you 'npm init' to create a new package.json. Based on your answers it creates minimal set of files (Readme.md, Licenes, main entry point), initializes git repository and publishes to GitHub. It's just nice to be free from repetitive work. I don't think it's gonna save a lot of time (two minutes per new package, maybe?). Edit: Also "yo n" is two times smaller than "npm init" :)
&gt; Don't you think it isn't fair for people who just have extreme expertise in one low level language like C? Think how much they would struggle to simply maintain a stack. I'm guessing you don't have much experience with C... it's pretty trivial to implement data structures like a stack. Granted, C doesn't have built in hashes, but general data structures aren't too difficult.
No you don't need it to "start" jquery, everything will be usable without doing .ready(). However, the DOM might not be fully ready and if you try to do any binds or manipulation on elements that aren't loaded yet they wont work, but it will be silent and you wont get any errors. But you'd be able to use the non DOM related jquery features prior to calling ready(), however many there are.
Love this
Yeah thats what I thought, and said, but he was so sure and kept persisting, went to demonstrate but couldn't get his demo server working or something and I didn't want to push it because I felt I must be an idiot and didn't want to labour the point! So angry right now!
I don't think there's enough information to go on to answer your question. I think there are factors you need to balance: 1) Know the company and what they do. When going to an interview, the #1 thing you can do is research the company, products and people, and learn as much as you can about what they do, so you can ask intelligent questions about what they do, and know how you can fit in. That means, all things being equal, you should pick a language that will fit into their culture the best, so it looks like you are ready to fit in from day one. 2) That said, you also want to do well on the interview. So you have temper the advice in #1 with using a language that you feel like you know well enough to demonstrate your programming abilities in the best light. If they're an embedded systems developer that uses C, you probably don't want to use JS. If they're a web house, you probably don't want to use C. Only you can really balance the two aspects above. But no matter what, be sure and do your homework and know as much as you can walking through the door. It's actually amazing how much people are too lazy to learn about a company before they get there. If you can ask intelligent, insightful questions about what they do and why and how they do it, that *will* make an impression.
You should setup a couple of jsFiddles proving your point and email them over just to be a dick.
Okay... interesting.
I don't think you want to work at a place where your senior developers act like that.
the .ajax() api doesn't rely on the DOM existing for one.
Totally doing this!
Umm... What's in the actual script file? I mean script01.js.
Writing any non-trivial application in javascript without a framework is a waste of time and energy. The vast majority of the time you end up either repeating yourself all-over throughout the app discovering patterns as you go, or you write your own framework in order to handle it all. The problem with writing your own framework every time is that it never becomes `battle hardened`, it will inevitably have bugs to work through, there won't be any references or help available for you when you do encounter a bug, it will take you weeks to ramp up to a place you could have gotten simply by using an existing framework, and you won't be able to easily add team members since they will have to learn your new framework without robust documentation and examples. 
I think he's focussed on backend development, which I have expertise in also, but this is for a frontend role which I think his knowledge is limited of clearly!
So I'm not getting confused about this since it's not procedural. The DOM manipulations are a pure function of the parameters read by render(). But yes you're right that the overall application could be made more functional.
Well, your post only contains HTML. It has no javascript in it at all. There is, however, a &lt;script&gt; tag that tries to load the javascript from a file called "script01.js". If you don't have that file, no javascript will run (because it doesn't exist). I'd be surprised if your book only contained that HTML code, but not the javascript. Can you check your book again? Also, what does this have to do with bootstrap?
It's a horrible interview question no matter what his expertise. Adding to that the fact that he thought he needed a server to provide an example of a javascript problem... In a spot like that it's really easy to realize this is not the type of person you want to be working with and end early saving everyones time.
No, I don't know CS very well, I still tend to Google things I don't remember off the top of my head. JS it is!
I don't like arguing stuff like this, just go to the source code and let it settle the argument - https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/core/ready.js#L10 Beyond that method, the rest of the file is fairly short and easy to read~~y~~ ( unless a person only knows jQuery in which case there is now a bigger problem ). edit: spalling
the way in which I wrote my script -- yes; there uses a few more 'advanced' techniques like the anonymous function, no variables, etc. 
By the way, you capitalized the wrong letter in jQuery. Just for that fact and how you obviously don't know how to instantiate it, I wouldn't have hired you either. /s
That is quite the unreadable mess. You got this from a book?
Especially when he's in the position of employing JavaScript developers when he appears to clearly know nothing about the subject.
Yeah I'm all for using delegated events over binds these days I just wasn't totally sure whether it needed the DOM to be loaded first or not.
I agree with this a lot. Although I see their point kinda. It's unlikely that a real world company actively using JavaScript is going to want someone writing these things from scratch, especially when they have deadlines. Why employ someone who is going to write their on library with utility functions when they can just use underscore or lodash?
Hi! Sorry for the late reply. [Here's](http://www.surrealix.com/reddit/39days/unminified.html) a version with the unminified files. I've said this in other places but it bears repeating: Remember that this was written in an afternoon so the coding style is terrible and the code is probably not the best place to learn things. Speed of implementation (and copy+paste) trumped best practice every time. That said, have fun playing with it and feel free to shoot me any questions you have about it :).
I copied out your html and javascript below and they seem to work fine... although admittedly I'm not sure what it's supposed to do. On loading the page, the "bingo card" is populated with random numbers. I'm not quite sure how the bootstrap framework works but based on what I've read here http://getbootstrap.com/getting-started/ it looks like you are missing references to bootstrap files. I threw your HTML into their 'basic template' on the above page, added your script references and it seems to still work. What problems are you having? EDIT: Also, when posting code please add 4 spaces before anything so it gets all nice and formatted. EDIT2: Also, don't press the "Click here" link while the board is being populated -- it results in an endless loop... might want to disable the link while it's doing it's thing and re-enable once finished.
If you are going to write an article about JavaScript (clearly tagged as such) then write your fucking code in fucking JavaScript.
what I would have given to be at THAT interview
Coffeescript makes me want to barf.
&gt; if you try to do any binds or manipulation on elements that aren't loaded yet they wont work offhand i think it is possible to bind events to dom elements that don't yet exist. this was added to query for ajax reasons.
Well played snarky turtle
Don't know how to do what?
That you're making un-founded assumptions again. They seem to be your specialty.
LOAD "jQuery", 8, 1 RUN
Jesus, that code is terrible. You guys are expected to learn good practices from that? 
But you didn't call .ready() before that. How is it going to know if JQuery is .ready() or not? Just kidding. The interviewer must have watched some youtube walkthroughs and missed a step or two. All he remembered was that there was a .ready() somewhere so it must most definitely be something that is done to make JQuery "ready". 
Jesus fucking Hitler I hate the way coffeescript looks.
Had this happen arguing with some dipshit on partial views in MVC. They tried to schedule me for a 2nd interview, I said no thanks. You obviously get stuck in minutia (and was wrong about it as well) and that's not the kind of place I want to work. He'd built some boiler plate code from what I can only guess were tutorials and thought a partial view had to have a specific filename, lmao. I certainly don't know everything and haven't used every part of MVC, but come the fuck on. If I can pass the MCSD test over it, that should be pretty telling. Already have a job, you failed the interview.
Yes, coffescript is to javascript as c is to assembly. Obviously assembly is not portable, but even if it was you wouldn't want to write anything major in it, so I think the analogy stands.
I think you mean SHIFT+RUN/STOP and then insert the jQuery cassette and press play.
Just thought I'd add, if you do want to load stuff 'ondomready', don't use the ready method, just pass a function into the jQuery function: $(function () { // code }); Edit: just to be clear, this is the same thing - it attaches the function to ondomready. Just a better way to write it.
 $(function () { // code }); is how I do it too... it's technically just a shortcut for document ready: http://api.jquery.com/ready/
Lol @ jQuery cassette. Hahahaha! :D
It also apparently didn't occur to the OP that you only need a browser and a text editor to use jquery. Yank it right off a cdn. The value of the interview question is of course does this person understand dom fundamentals. Which the OP does not with any measure of confidence. Furthermore he says: &gt;despite never ever having used it in that way Which is like, whut??? How does one use this library "for so many years" and not be ridiculously familiar with the what and why of document.ready()? I'm just saying, I think they both have a lot to learn about front-end development.
Well, come on, I mean who had a C64 Disk drive?
You're not going to find many fans of CoffeeScript here. There is a deep hatred for the language on this subreddit. I'm pretty sure some of the users here were beat up by jashkenas as children. It's not that you can't find an impartial debate about JS/CS, it's just somewhere else. Also, there's nothing wrong with learning CoffeeScript. I believe it will make you a better JavaScript developer, when you read how your CS code gets converted to JS.
I read it as OP being confused at being told ready() was required for it to work at all/needed to initialize jquery and getting hung up on that. But reading it again you may be right.
Inexperienced developers are always spouting the same nonsense. JavaScript is not that hard, but is radically different than most similar looking languages and has many pitfalls than only experience can save you from. JavaScript scales just fine in a manner that executes far faster than most other languages and requires very little overhead in the code. If your biggest concerns and frustrations have anything to do with how to actually write the code, such as patterns, then your problem is basic competence in this language. Frameworks may provide some boundaries and parenting, but they only shift your problems into a different layer of the technology stack in your application that you avoid. Just because you cover your eyes and hide from the problems doesn't mean they have magically vanished. Use of frameworks has absolutely no bearing upon the quantity of bugs that will be present in some application. The only thing that has bearing upon this is how exhaustively the app is tested and the attention to repairing bugs before major releases. It also has no bearing on timeliness to market unless the developers lack confidence with a given set of business requirements. Additionally, documentation for a given framework is not documentation for your application, which provides very little support for adding additional personnel to an existing product at cost to substantial overhead and additional documentation. Learn to program in this language and scale your application properly and these problems will diminish as your experience grows. No amount of avoiding this reality will make you a stronger developer. Frameworks are not an adequate substitute for experience and training.
Sometimes it is cheaper to write the tools internally from scratch than to use existing tools. This tends to become more true as traffic grows when traffic is a substantial cost factor. A/B testing tools and analytics tools are examples of that. Two developers working for a year writing a tool are still cheaper than spending a million a year to Google and Adobe for these tools.
Funny, I never had a professor teach me, either.... There's about a million web sites that describe every aspect of web development in full detail -- if I was you, I'd learn to teach myself &amp; start reading some of them. In terms of bootstrap, or any framework/toolkit/whatever, you need to read the documentation to get any idea of how to do anything with it.... try reading that 'getting-started' page I linked above for how to put it in bootstrap. Bootstrap is just a script and some css you reference -- this adds a bunch of classes and js objects you can can reference from your own page.... again, read the documentation: http://getbootstrap.com/css http://getbootstrap.com/components http://getbootstrap.com/javascript
&gt; Frameworks are not an adequate substitute for experience and training. This is absolutely true, but that's not what I'm arguing. Again, you **WILL** be using a framework for your site*. The question is: do you spend a lot of time developing it yourself or do you let a large group of experienced developers do that for you? Do you want to spend your time seeking and destroying every possible edge case or do you want to actually build something? Really, your aversion to relying on peer-reviewed code just shows everyone your inability to adapt to and use new tools as they arise rather than your superior javascript skills. *non-trivial js-driven site
A linked-list implementation in Javascript won't give you any performance benefit over an array, and will actually probably be slower. There are no true pointers in JS so you're really just creating a series of references that contain a reference to the next item in the list. It's effectively the same thing an Array does, but in JS instead of native code.
I think many interviewers don't realize that a good developer is interviewing them just as much as they are interviewing him. Good job on dodging a bullet!
I'd recommend getting a refund for your class. That seems like a terrible learning experience. Also check out treehouse, or any one of the zilliions of online resources for learning webdev, it'll serve you much better than your class: http://teamtreehouse.com/library/javascript-foundations 
That'a the same thing just less code, right?
yes
Nice job! I took a shot at making a Geometry Wars clone in WebGL awhile ago, you can check it out here if you're interested: http://davertron.github.io/geometry_wars Source is here: https://github.com/davertron/Geometry-Wars-WebGL
I only applied to the place because a friend of a friend got a job there (said it was a great place, they were "doing it right") and my salary blows where I'm at. However the job where I'm at is a friggin breeze. So in spite of getting paid poorly, I have tons of freedom, great benefits (gubmint job), and I mostly like my coworkers (a bit hyper sensitive but so am I). The dude hadn't programmed since the 80s looking at his "resume" (linkedin). So any positive info I got from the friend died talking with the fucking idiot that would have been my boss. I have no boss where I'm at currently (well no direct boss, I actually have about 18 bosses, hard to describe...).
&lt;raises hand&gt;
Nice.
So has or hasn't he ever used the jQuery ready() method? Does not matter, the dude lacks the confidence that comes with understanding something. The lack of understanding revealed itself in his interview and has now again come up by what he is asking this forum. --- I wanna add, the OP was right that calling the script is how to "start" jQuery. Since that instantiates $. But only one in a million cases would you ever *start using* jQuery before the page is loaded. Neither of them confidently understood the difference. --- I was going to javascript developer interviews not too long ago. I was asked questions like, "explain some real world cases when you might access the prototype construct and explain why?", "on this computer, stub out a javascript based tic-tac-toe game with inputs to allow infinite number of rows and columns, we are mostly interested in how you will check for a win", "how would you create a singleton in javascript?", "take 5 minutes and mock up the architecture for a javascript based chat room", I got hammered with grunt, bower, angular and d3 questions. So let's get a little perspective here.
That's fair, though I definitely prefer limiting the scope of delegations as much as possible. Events having to bubble up all the way to the top is definitely slightly less efficient, which could become an issue for very complex pages. More importantly though it gives you a lot less granularity in controlling event bubbling and the order in which different handlers are fired by the events + whether they can decide to pass the event higher or not.
&gt; So has or hasn't he ever used the jQuery ready() method? Yes, just not to "initialise jQuery" (which is understandable since that's not what it does). &gt; Does not matter, the dude lacks the confidence that comes with understanding something. The lack of understanding revealed itself in his interview and has now again come up by what he is asking this forum. So everyone should know, and instantly be able to recall with 100% accuracy, absolutely everything ever about JavaScript and jQuery before interviewing for even the most entry-level JS position and/or being allowed to post on /r/javascript? It's pretty clear to me that OP knew what document.ready and $.ready do to start with. It's also pretty clear to me that they were confident the interviewer was wrong until the interviewer pushed the point enough that they decided to defer to the interviewer's (assumed) expertise and/or decided it would be unwise to labour the point; now they've had a chance to look at the docs and find out the interviewer was wrong, they're here to confirm their understanding. Refusing to ever entertain the possibility you're mistaken isn't confidence, it's hubris.
Obviously you don't know c or assembly ...
Done. Check it out if it interests you.
Got it... thanks. I'll think about it some more.
&gt;But no, he was under the impression that you needed to use .ready() to ~~activate jquery~~ and **'start' the script**. Did OP add that first part? I say that cause he put start in quotes. I think we both see what the interviewer's point was. OP wasn't catching his drift then, isn't now, frankly these responses might just be confusing him further. &gt;went to demonstrate but couldn't get his demo server working or something server???? &gt;However now I am home and I have had a chance to test it Would love to see that test... &gt;Refusing to ever entertain the possibility you're mistaken isn't confidence, it's hubris. Well that's true in a big picture life perspective. But techs will be frequently challenged and are required to be experts in their field. We are under constant siege by marketing, design, management, sales and even other developers who are trying to push the latest thing they read on a blog or saw in a dream or whatever.
Pseudocode is the only correct language for an interview. If you're concerning yourself with syntax you are wasting precious interview time on trivia when you could be focusing on understanding what matters: the candidate's thought process.
take a look at my edit... there are 20-trillion permutations on a 16-element array.
I wasn't actually going to use that array, I just made up a new one because the real one was my last name. (only 7 letters)
Absolutely. Try: `$('selector').on('handler', function)` I believe it binds the event to `body`, so it will fire once the event bubbles up to the root element. 
&gt; Did OP add that first part? I say that cause he put start in quotes. I think we both see what the interviewer's point was. OP wasn't catching his drift then, isn't now, frankly these responses might just be confusing him further. The part you've crossed out? I don't think so, he put 'activate' in quotes in the first sentence so it sounds like that's also a direct quote. If you're trying to say that the interviewer was correct and OP was misinterpreting, keep in mind OP used the phrase "ready event on the document", whereas the *interviewer* was talking about "starting the script" and "activating jQuery" - IOW, communicating poorly using imprecise/incorrect terminology. &gt; server???? The interviewer's server. No idea why he thought he needed one, maybe he was trying to demonstrate existing code tied in with something running on the backend. &gt; But techs will be frequently challenged and are required to be experts in their field. I'd argue that the proper way to respond to a "challenge" of one's knowledge is to externally verify it, rather than blindly insist you're right. As for the experts thing, all the more reason to be constantly open to the *possibility* you're wrong. If you go through your career thinking that you have a 100% complete and correct knowledge of everything, you'll never be an expert, but you might end up one of the "experts" often featured on The Daily WTF. Besides, technology moves quickly; to keep up, technologists must continuously learn. I'd wager that someone not willing to verify or correct their existing pool of knowledge is also not willing to add to it.
Being confident in your experience is rather helpful also because you are free to admit what you don't know without anxiety. I hope it didn't sound like I have been advocating stubborn arrogance by any means. And I definitely agree that a smart person, heck a good team member, listens and stays open minded always.
I would go with natural language.. instead of focusing on the syntax of the code itself, focus more on the expression of what the code is supposed to do. Unless you have to write the code and compile in front of them.
Same for $.each(), which I use frequently to easily iterate over objects and arrays since Javascript is missing a native foreach() function.
ES5 has forEach https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
$(document).poke(53265).peek(53265).or(32);
The place I work at now, I broke their test. I exposed a flaw in the test criteria that prevented it from being completed, and explained why. They admitted they were new to web-based software and gave me the job. Later I asked what other candidates did, apparently none of them considered that the test might be wrong. So putting a wrong question into tests is something I do for junior devs now, to see what they do when presented with instructions that can't be carried out. Their response can show how much they know, how much they think they know, and how sheepish they are about squaring off with someone in a position of power. 
The special case of returning `this` is a way of implementing **method cascading**, which [originated in Smalltalk](http://www.inf.ufsc.br/poo/smalltalk/ibm/tutorial/chap3.html#3.70). In Smalltalk, it allows several messages to be passed to the original object by separating them with a semicolon. It doesn't require each method to explicitly return `this`. Instead, any return value is discarded and the next message in the sequence is again passed to the same object. The feature was also [proposed as an addition to Dart](http://news.dartlang.org/2012/02/method-cascades-in-dart-posted-by-gilad.html) using a different syntax. It is a technique that is often implemented using **method chaining** in many languages that lack a specific syntax for it by having each method in the chain return `this`. But **method chaining** is not limited to that specific case. 
sadness. It's getting hard to find people that know JS. they know jquery, and/or they know backbone, and they have some vague blurry idea that js has something called prototypes, but it's not important. grah. 
I think you need to understand more about functional programming, I do understand that it means different things to different people, but to me this isn't functional programming. For example pure functions, no referential transparency, IO and is grossly mutable to name just a few things... Like @rhysbrettbowen said I see this as more of a way to "using functions" in a specific way rather than pure functions. Which doesn't mean I don't like the idea! The following video[1] does give a better explanation than I ever can. [1] http://www.infoq.com/presentations/io-functional-side-effects
 $(function(){ // your code here }); does exactly the same thing as ready. They are both functionally identical.
Although as far as I know there is no IE7/8 support, I know this usually isn't an issue but I work for clients that still want IE8 support 
Have never heard of this before but good luck and please update us with your progress 
Without knowing the site nor having time to look at it: In the function setStartBet(), you can run $('#double_your_btc_min').click(); twice; if that doesn't work, try $('#double_your_btc_min').click(); $('#double_your_btc_2x').click();
Find the function setStartBet() and either double the first uncommented line or add "$('#double_your_btc_2x').click();" afterwards.
Is tip 3 missing?
Nice work :). I love filesize challenges like this!
well all i can say is holy shit this is awesome :D
I on the other hand, wait for the DOM to be ready before I do mostly anything. window.website = new function Website(){ var website=this; $(function onDOMReady(){ website.elmo='frog'; // do things }); }; I wrap all of a website's behavior in a website object which initializes itself when the DOM is ready.
If you have money then some of these people might be interested in taking on that role https://helpouts.google.com/search?q=JavaScript I would take the example of Bruce Lee who eventually recognized that adhering to a particular form or style was ineffective. Likewise a good programmer doesn't restrict himself to a particular language or dialect. I have been programming JavaScript for many years. About two years ago I found CoffeeScript, which is similar to JavaScript and gets compiled to JavaScript, but it is significantly better. Then I found ToffeeScript, which is similar to CoffeeScript but better than CoffeeScript. This comment will probably be buried since I am saying there is another language better than JavaScript. http://www.codewars.com/ &gt; Train in the Dojo on kata, real code challenges. Designed to improve ability and brain performance, they also help strengthen your coding skills and technique.
The issue I have with your comments is that you're making a judgement about OP based off one question he had. Take it back a notch - he might have gotten everything else right, and like he said, he doesn't typically deal with front end code.
This is how you implement a singleton: var singleton = new (function() { this.publicMethod = function() { console.log('hello world'); } this.publicProperty = 'test'; })();
If I passed the mutable state in as formal arguments rather than closed over them would you consider this functional then? The Dom manipulation is referentially transparent and there are no side effects outside of the external mutable state. The only improvement I could think of would be to avoid the closure and pass the state in explicitly. 
Are you supposed to write the javascript from scratch yourself? If not something like this might help: http://unslider.com/ or a non-jquery version http://www.richnetapps.com/fancy-javascript-slideshow-no-jquery/ 
A more thorough resource on the subject would be http://addyosmani.com/resources/essentialjsdesignpatterns/book/
Head over to /r/javahelp. You are in the wrongsub. This is for JAVASCRIPT - totally different thing. Also, when posting there, please check the submission guidelines and include a bit more of your efforts that you already have done.
Why leave debug lines in at all? I see it as just a waste of processing when it calls to see if it should log. Write a test on JSPerf and see the same code block with run slower by calling a function that does nothing. 
I'll take that as a "no".
Binding all delegated events to `document.body` is **not** a good idea. It works for small numbers of elements, but what if you had 500 elements with click events, 1000? Then every time someone clicks *anywhere* on the page, even blank whitespace, jQuery will check every single delegated event for a match.
You should repost this to /r/tinycode 
Thanks! Well, my goal is not to make money, nor filling my resume, it's just to have fun making crazy things :) -- especially code golfing. BTW, you can check my last project here: http://xem.github.io/MiniSweeper And my website here, with more front-end hackings: http://xem.github.io Cheers
You didn't really address any real benefit of linked lists. JS arrays are dynamic. Maybe after a limit is reached it reallocates itself into larger space. That can be slow. Linked lists don't face that issue. Insert an element into the middle of an array vs linked list? The same? And how does it matter if there are *true pointers* or not? There are no true pointers in Java. But we use linked lists there.
Interviews are stressful enough, although I can see the value in this. Most places just fucking suck and have no idea how to interview. I consider MS/Google/Amazon/etc to be in this group as well.
I think the correct syntax is $(body).on('click', selector, function () {});
His syntax above is correct. You don't bind directly to the body, you bind the delegated event to the selector that you know is there, or will be there at a future point. Binding it directly to the body would make the function trigger any time you clicked on the document body area. EDIT: I see what you're saying, misread your post. Both are correct actually.
Hey, happy to help out? Maybe we could work something out?
&gt; Really, your aversion to relying on peer-reviewed code just shows everyone your inability to adapt to and use new tools as they arise rather than your superior javascript skills. That might certainly be true, but it is very ignorant assumption. It is also a poor set of reasoning on which to make foundational managerial decisions regarding how you should code or plan application development. Ultimately, I am far less concerned with what other coders think of my code than I am in how it performs for my users and all costs associated.
done: http://www.reddit.com/r/tinycode/comments/1spyai/an_online_htmlcssjs_editor_in_162_bytes_save_load/ thanks for the link.
CoffeeScript is not significantly better. It makes some things better some things worse. And then you have toffeescript. [@x, y...] = a! b This makes sense right? I love to run my code through my internal python/ruby interpreter before I run it through my internal JS transpiler to figure out what the fuck that's going to mean. 
If he's got a real interest in continuing with web development, then, yes, javascript is where it's at. The other posters are touting Python, and Python should be touted. I learned python when I was 15, but it didn't do me any favors until I was older and could actually understand the logic that was being performed. Keep in mind, I probably wasn't your typical computer guy then either. I mainly learned code back when I was younger so I could properly format and set up personal webpages, and later, myspace, so that the chicks at school would be totally in to me. It partially worked :P
Kind of changed you generate_permutation function var permArr = [], usedChars = []; function generate_permutation(input) { var i, ch; for (i = 0; i &lt; input.length; i++) { ch = input.splice(i, 1)[0]; usedChars.push(ch); if (input.length == 0) { console.log(usedChars.slice()); } generate_permutation(input); input.splice(i, 0, ch); usedChars.pop(); } return permArr; }; generate_permutation(['h', 'e', 'y']); });
fast. that's a big plus. I'm actually using it :) for some knockout.js testing. nice work.
&gt; setInterval( "slideSwitch()", 5000 ); \**twitch*\* setInterval( slideSwitch, 5000 );
That's great! I just played mini sweeper and won on my first go but I didn't get any sort of "you win!" Message. I'm on chrome mobile so I'm sure that's the issue but I thought you may like to know. Good luck and have fun!
No, it's normal. The game is finished as soon as all the cells are white. If you won, you only see flags, if you lost, you see bombs too. :p
&gt;You don't have to sign up You have to sign up...
No you don't: http://www.playverse.com/Anonplayer/0-a2aadd1b76e14d0e848ea1de18dca4e8
You can just use toString, parseInt, and parseFloat. Or you can coerce the type via ''+whatever or +foo. &gt;we should always use new Boolean(...), never Boolean(...) You shouldn't use those wrapper objects at all.
150 pages/$40?
Yeah, I generally stop propagation of events beyond the level they're needed, since it's caused me headaches before for things where I wanted things like buttons inside clickable divs and the like. If you attach all things at the document level you need to be careful about the order in which you attach things to make sure the right element is capturing the events and calling StopImmediatePropagation. Unless I'm wrong and event delegation is smarter than I remember + automatically runs events in the order of the smallest applicable scope first.
Holy smokes, this is extremely impressive.
Yes, it's just a shortcut for using `$(document).ready()`; it doesn't matter which you use. [See docs](http://api.jquery.com/jQuery/#jQuery3)
You shouldn't need to be careful about propagation order, and you should almost never need to call `stopImmediatePropagation` or `stopPropagation`, unless you're either doing some really custom things with interactive elements (i.e. click events on nested divs or other elements), or if you're binding some events directly but other events via delegation. All you really need to do is be mindful of which event-target elements you're passing to the delegation. If you're binding click handlers to all links for example, rather than to links of a given id or class, then yes I could see issues arising. And you have to be aware that the delegated event handlers will fire after the directly bound event handlers. I have an article describing all of this with some visualizations too, btw. [The Difference Between jQuery's .bind(), .live(), and .delegate()](http://www.alfajango.com/blog/the-difference-between-jquerys-bind-live-and-delegate/)
Wow thanks guys! although this makes no sense to me yet, I just can't get the hang of it, but I hope I will over time! I just started :) and Aren't you supposed to to type something at the beginning of the HTML to make contact with the javascript? Anyway thank you all so much for the anwsers! Appreciate it so much!:D:D EDIT: By the way, does anyone have a website or tutorial I can practice it more on? Thanks again! :)
Cool - but a tip, if you want to add anything more, I'd recommend a small setTimeOut/or an option for a timeOut on getting user input. Like 100-200ms.
Wow. This is amazing, I plan to embed some of this into a project that I've been working on! 
While JS arrays are dynamic, they are very highly optimized in modern JS engines and operate in native code (where they are JIT compiled into C-arrays) as opposed to interpreted JS. Here you can see that Arrays can be over 3x faster than linked lists. http://jsperf.com/usage-of-linked-list-vs-array/8 
This post is bananas.
Just yesterday I was marvelling at a tweetable js templating function and now I see this.
well then let's agree to disagree; i consider array.map(Boolean) way better than array.map(function (x) { return !!x }) and array.map(Number) way better than array.map(function (x) { return parseFloat(x) })
This thread is about chaining. If you look at other comments, you'll see some examples of chaining where the methods are returning different objects each time. In particular, some of the JQuery examples.
I think it's better to just pass the right types from the very beginning. You shouldn't do this kind of thing at all.
I've been working on this plugin on and off for the past couple years. I just recently rewrote the library to make it more memory efficient and faster (using more prototypal inheritance and more plain JavaScript over jQuery where it doesn't affect browser compatibility), and created all-new documentation. Please let me know what you think!
So place a flag on ALL the fields? :-)
IE 11 is really picking up the slack isn't it, I can't believe how many great things I'm hearing about it - especially about page load time optimizations.
`{"success":false,"error":"DuplicateEntryException","message":"\u0027Anonymous2900\u0027 already exists."`
&gt; I love filesize challenges like this! Now add the size of the browser and the operating system into the criteria. ;-)
prototype.js also does this, checks for the $super argument, so it can pass the parent class function to the child class override, for basic inheritance. 
Looks great. The importance of not having to restructure your entire data model to get the most out of the library is invaluable. I've been using jQuery Data Tables on this current project since it was really the only library I could find. Now I wish I had done more research.
Nice, I like the simplicity. Open this in a new tab though. It will flood your back button history. 
thanks for this. I've been looking for similar plugins for the last few weeks. Does your plugin support dynamic dom rendering for rows and columns as needed?
Impressive stuff :) I think i broke it:P http://xem.github.io/miniCodeEditor/prod/#Cg==,,PGJvZHkgb25rZXl1cD0nbC5oYXNoPVtqPXQxW3Y9InZhbHVlIl0sYz10Mlt2XSxoPXQzW3ZdXS5tYXAoYnRvYSk7KEQ9ZS5maXJzdENoaWxkLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpLndyaXRlKGh8fGN8fGo/aCsiPHNjcmlwdD4iK2orIjxcL3NjcmlwdD48c3R5bGU+IitjOiI8cHJlPlJlc3VsdCIpO0QuY2xvc2UoKSdvbmxvYWQ9J2ZvcihpPTQ7LS1pO2UuaW5uZXJIVE1MKz0iPHRleHRhcmVhIGlkPXQiK2krIiBwbGFjZWhvbGRlcj0iK1ssIkpTIiwiQ1NTIiwiSFRNTCJdW2ldKyI+IithdG9iKFtsLmhhc2guc3BsaXQoLyN8LC8pW2ldXSkpbD1sb2NhdGlvbjtlLm9ua2V5dXAoKSdpZD1lPjxpZnJhbWU+PC9pZnJhbWU+PHN0eWxlPip7Ym94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO3ZlcnRpY2FsLWFsaWduOnRvcH10ZXh0YXJlYSxpZnJhbWV7aGVpZ2h0OjUwJTtib3JkZXI6MXB4IHNvbGlkfXRleHRhcmVhe3Jlc2l6ZTpub25lO3dpZHRoOjMzLjMlfWlmcmFtZXt3aWR0aDoxMDAlfQ==
Why not? It passes JSHint, except for a few cases where JSHint is overly protective. And I wasn't suggesting learning JavaScript from CoffeeScript's output, just that reading how CoffeeScript is converted to JavaScript certainly won't make you a worse JavaScript developer. It's more of an "oh, that's how CoffeeScript does that. I bet I could also do it like __________".
ready() is just yet another way to register a particular event handler. This one is triggered when the document is ready. You need to do this if your script tries to look up elements which don't exist yet. E.g. if your script is included in `head`. If your script is at the very bottom (just before the closing body tag), you won't need it. Everything is already there. However, still using ready won't really hurt either.
Say I wanted to use this with some data binding library like Knockout. Any way to get it to dynamically update the table contents? I'm using Knockout with http://datatables.net/ now and the only way I could get it to work was recreating the entire table from scratch every time the data changed.
I'm sure this is somewhere on the internet, but I just found this out today. In the linked example I show 2 dates that are being parsed (sure, maybe parsing is unnecessary but that was part of the discovery process). One date is in February the other in March. This is significant because daylight savings time starts in March when we spring ahead. In Chrome the timezone offset for February is -8 GMT for Pacific time and -7 GMT for March. This is correct since the date (March 25, 1998) is after the time change. In IE the timezone is -8 GMT for both dates, seemingly because we're not currently in daylight savings time.
I work on a rather large thirdparty js framework for a very popular ad network. I'll take a look if you want. I am always curious to see how others approach the problems in the 3pjs world :) 
I will take a look for you - I have been in the same situation before and know it's good to have a second pair of eyes.
Greatly appreciate it, I'll forward you an example.
Awesome, thanks! I'll msg you!
If I plan on relasing a new JavaScript framework and I make a new account to do this because I don't want my real identity (github) to be associated with my reddit account...will it be considered spam because I am a new user with no post history? 
I had a similar problem, at ~8000 points or so, the whole game stopped :( and I was doing so well. ... thanks for killing the last 30 min of my day's productivity!
If they implemented the suggestions in this thread, and added your webgl graphics (which look great btw!) - they'd have quite the awesome clone!
Doesn't work for me using Chrome on OS X 10.8.5
it depends on the problem. personally, i feel that if you can get away without writing a server component you should do so. A good example of this is [prose.io](http://prose.io/), which is a client side application for editing markdown files on github (and hence jekyll/github pages sites). It uses a very very very tiny authentication component hosted on heroku (iirc), that basically just gives the oauth a url to connect back to. Would it have been more secure to give the attacker a much larger surface area to attack? I don't think so.
You could always just pass "null" as your second argument and make the third argument optional.
Thanks! I was pretty happy with how the shaders came out. They definitely did a more complete job overall and they have the background grid warping (I'd love to get the actual spring-based physics geometry wars grid but have never had time to figure it out...).
Well, if you dive into the chrome console, go to "resources" -&gt; "local storage" and pick kanyezone.com, you can change the JSON, and thus your highscore. I also found "la.submitHighScore" in http://www.kanyezone.com/js/zone.min.js?9, but can't seem to trigger it though. edit: You need to make this a valid post. jQuery can be used ($.post()) ("/hs",{action:"put",name:a,score:c,kanyes:d,game_time:b,game_id:[ta,c^e,d^e,b^e].join("_")}
Handy tutorial.
[SlickGrid](https://github.com/mleibman/SlickGrid/wiki).
Great, more gratuitous sexualisation of women in games. It plays like a pile of trash, too.
For the lazy: /r/programminglanguages --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
After watching the video and reading your comment, it seems the only right way to do this is by passing in the array of strings vs. the param names, otherwise compilation will overwrite the param names and the dependency injection will fail to match. Does it make sense to ever use the param version given that 99% of the time your code will be minified when it goes to production?
Honestly can't think of any though I tried in order to be devils advocate. Any use case for "var" over "let" is simply bad practiced, and most conventions around "var" are only in place due to its limitations, which is what "let" solves.
ok, so I tried pasting that code into the dev console. It threw a syntax error at the curly paren on the end, so I checked it out and decided that the problem was that it needed an additional close paren after the curly one. This worked, but it threw a reference error saying that a was undefined. after i defined a and all the other variables (by typing a=my name, c=desired score, etc), It said that "object was not a function". Unsure of what to do now. Also it's saying POST http://www.kanyezone.com/ 405 (Method Not Allowed) 
MEANY stack?
if you use tools like [autoprefixer](https://github.com/ai/autoprefixer) or any css preprocessor, you're going to need a build step anyways. if you have a watch command, by the time you save your changes and alt-tab to your browser, your assets will already be built.
Hey no problem. Great question. Yes it does, but I think the support for dynamic columns could be better. ## Rows It renders a row for each record in the working dataset (i.e. the filtered, sorted, paginated subset of the whole dataset). For each row, it renders each attribute corresponding to each column. So, for example, let's say you have a table that looks like this: &lt;table&gt; &lt;thead&gt; &lt;th&gt;Car&lt;/th&gt;&lt;th&gt;Color&lt;/th&gt;&lt;th&gt;Mileage&lt;/th&gt; &lt;/thead&gt; &lt;tbody&gt;&lt;/tbody&gt; &lt;/table&gt; And you ahve a record that looks like this: { "year": 2004, "car": "Ford Taurus", "color": "green" } Dynatable will render the "car" attribute to the first column, the "color" attribute to the second, and will ignore the "year" attribute since there's no corresponding column header, and it will leave the last column blank since there's not corresponding "mileage" attribute. I hope that answers your questions about how the dynamic row rendering works, but let me know if it doesn't. ## Columns For dynamic column rendering, that's a little more tricky (but it shouldn't be, and I'll be working on that soon). Dynatable reads your table headings to figure out what columns are there in order to be able to attach the clickable sort headers and functionality (and caches some info about the columns to make the row rendering process faster and more efficient). Really, if you were to just add the column to the table using jQuery, you could then ping the dynatable instance to add it to its column set. var $myTable = $('#my-table'), dynatable = $myTable.dynatable(...); // do some other stuff, then... // add a column to the table just using jquery var $newColumn = $('&lt;th&gt;New Attribute&lt;/th&gt;'), $th = $myTable.find('th'); $th.filter(':last-child').after($newColumn); // let dynatable know there's a new column, // the second parameter is the new column index dynatable.dom_columns.add($newColumn, $th.length); The way I'd like this to work instead is to provide a function through the dynatable API that lets you pass in just a column title and optional index, and have dynatable automatically insert the column header into the table for you and update its column data all at once. Something like this: var dynatable = $('#my-table').dynatable(); // this function doesn't exist yet dynatable.dom_columns.append("New Attribute"); I'd want the above function to also accept an options object to pass in the index (default would just be to add it as the last column), and other class and data attributes for the column. Or maybe the first argument could optionally be html for the column heading element or a jquery object, instead of just the label.
I take it that this is using WebGL?
One of the things I've been trying to do with dynatable is to make it play nicely with other libraries (like in [the Highcharts example in the docs](http://www.dynatable.com/#an-interactive-chart)), by keeping the internals very modular and exposing a lot of the internal API to the developer. I don't personally use Knockout, but if you could open an issue on Github for Knockout integration and show me what you need, I can show how to do it with dynatable. I'm assuming though that with Knockout, you maybe have a collection of JSON objects you're using? So, it will probably involve passing the JSON collection to the dynatable instance, and then calling dynatable's `process()` function. Something like this: var dynatable = $('#my-table').dynatable(); dynatable.records.updateFromJson(myRecords); dynatable.process(); Note in the above example though that the `myRecords` collection passed into `updateFromJson()` must be a certain format which includes not only the records, but some meta-data about the records to update the pagination UI and such.
If you are willing to pay for it, you should check out http://www.thinkful.com It is a learn-to-code organization that provides you with a mentor to have one-on-one, face to face discussions with as you move through the course. 
MBEN... MENB... NEMB... BENM... goddamit backbone
Indeed, another problem would be the line "You cannot use reason to extract from a position arrived at without reason." Despite the code and showing they're mistaken, I've met a few people who would double down on their beliefs.
You. Need. A. Build. Step. At. Some. Point. ANYWAY. Plus there's no way that the latency of loading individual files could be any better than the time taken by a build step.
Too true.
Angular is good stuff. The most basic uses of it are actually fairly simple. There's a handful of books on it; I've made use of Packt Publishing's Mastering Web Application Development with AngularJS. It's pretty decent but if you're not overly familiar with JavaScript yet, it might be tough. I also learned a lot of fundamentals from Dan Wahlin's AngularJS Fundamentals in 60-ish Minutes video on YouTube. The Angular docs are pretty solid and I've found a lot of good tutorials online. Stack Overflow is a great resource, of course, and there are HTML, CSS, JavaScript, jQuery, Angular, and web development subs on Reddit. I've only been using it for a few weeks and am not a very strong programmer yet either, but I've managed to develop a couple of apps with it. If you're unsure of something, there's always Google!
Check out [Javascript Allongé](https://leanpub.com/javascript-allonge/read) if you like playing with this kind of high level stuff. It's fantastic.
Your code is basically what I'm doing with DataTables now, but it's not ideal. I posted an issue: https://github.com/JangoSteve/jquery-dynatable/issues/10 I haven't looked at your code at all, so it could be that this problem is basically impossible for you to solve. But if you could solve it, it would be really cool and I think a lot of people would find it useful. And if you think it's feasible, I might be able to help you work on it. I'd appreciate hearing your thoughts on it first before I jump in though.
&gt; You. Need. A. Build. Step. At. Some. Point. ANYWAY. Yes, RequireJS has good support for that. But it's nice to not have to worry about it during rapid development. It's one more thing that can go wrong, and it introduces a variety of problems described below. &gt; Plus there's no way that the latency of loading individual files could be any better than the time taken by a build step. Maybe not. I don't know how fast your build steps are. My current project has 3 MB of JavaScript and my build step takes longer than a page reload, but that's with minification and everything too. I guess you set it up to just concatenate for development, and then do concatenation+minification for deployment? Fun, another step for you to worry about. With RequireJS you literally don't have to worry about that at all. The problem just doesn't exist. I'm a big fan of simplicity. In general, it's nice that I don't have to worry about setting up some kind of auto-build environment, or whatever you CommonJS folks use. This has numerous benefits: * I can do development on any computer with a text editor. No environment set up needed. * People who aren't well-versed in the latest hipster tooling can still make contributions. I'm sure it must be fun for you to explain to them how to set up their system for The One True Way. "Just install NodeJS and all these packages and blah blah blah." I hope The One True Way runs just as easily on Windows as it does on your Mac, although maybe you wouldn't want to work with Microsoft-using scum in the first place. And the costs of RequireJS are... my import statements are a bit uglier? Anything else? I definitely agree, CommonJS syntax is nicer, but it's not like I spend all day writing import statements. That's like 0.01% of my programming time.
Good read. A few reactions. &gt; Antipattern #3: No View Tests I am a sad panda. I'll be better I promise. &gt; Antipattern #5: Data Attributes in the DOM Hm. I need to think about this one. I used data attributes in lists and it's never caused me any problems--everything's lightweight and easy to work with. But the author makes some good points. &gt; Antipattern #6: Rendering Templates Asynchronously I'm using RequireJS and its text! plugin to load templates, so they're always treated like they're loaded async--but require does the loading for me and my module doesn't run until its dependencies are available, so it's no overhead.
I'm one of the countless horde who once couldn't figure out what it was good for, and now cannot imagine doing development without it. Just being able to auto deploy changed source from my git workspace to JBoss... I'm still not sure how the other people on my team can live without it. Then I lint, run unit tests, sass... it's just magical. EDIT: Which is not to say it couldn't be easier to use.
I believe there are already some smaller sized console shims out there. http://www.paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
You have already chosen a camp of thought and have your walls up, I'm not going to try and convince you. This post isn't about convincing you either. It's about effective testing patterns for those who are already using AMD.
Pretty cool. One thing though, on my monitor I had trouble seeing the pink square in the white area.
Check out Crockford's videos. http://yuiblog.com/crockford/
Yet another way for people to make a living as professional programmers without actually learning how to program.
came here to mention this, it's impossible to see on all but my IPS display.
This is great - I recently started trying to implement my own in Java, but had to stop when classes got too intense. My friend suggested I do it in javascript so it could be playable in a browser - like yours - but knowing next to no javascript, I opted for Java first. How much experience do you have with javascript? I think this would likely be a really good way to learn. **Edit**: for instance, how does the "jquery-1.10.2.min.js" file work? What does it do? Besides what it says in the description :) 
I'm on a fairly powerful machine. Played this for a few to take a break and it was choppy and sluggish as hell. I've played a lot of Flash games with drastically better performance :-\
that is a great feature since it allows people to keep hidden id rows/collumns so they can match cells by collumn and row id's. What i meant was to ask how it handles large amounts of cells in a table. For example DataTables can be setup so it only adds the rows you can actually see to the dom(if that makes sense) so the app is fast even with 5000 rows. What it can't is do the same for columns. If you have a 5000 row long and 5 column wide table it will handle it ok, but if you swap those, suddenly it will add all the cells to the dom since it can only render entire rows. That's what i was referring to. In any case great work, it's nice to see another player in the table/grid display area.
Oh god. You just broke the Internet.
&gt;And the costs of RequireJS are... my import statements are a bit uglier? Anything else? Yes. Crap performance, silly amounts of configuration, and you make it an absolute bitch for people to reliably consume your code in any environment (even strictly speaking within the browser.) AMD is not the way going forward in any sense. It's an evolutionary dead end that served its purpose before more capable tooling came along.
Yes. It is not valid code. Values need to be updated correctly and I'm not sure how
You clearly don't know what kind of problems grunt solves for you. If anything, grunt will help you become a better programmer since you can configure it to tell you what parts of your code that might be prone to bugs (with jshint).
thanks for this idea. I will try to add it in the "prod" version.
Thanks for the info. Are you part of some ECMAScript/JS committee? Your writing seems authoritative. Part of the absence of initializers in for-in loops may be that it's rarely taught. I would call myself an expert of JavaScript's quirks, yet I had never heard of this syntax. And now that I have, I can immediately think of code I've written where I would have used it, had I known about it.
I've been using Karma and Mocha for over a year, and I'm really happy with the combination. Especially Karma. The ability to run my tests against all my supported browsers simultaneously is a godsend. (I can't tell you how many things worked everywhere except IE 8... but you can probably guess.) Mocha's support for asynchronous code is nicely done, too. A couple of things: chai is a nice assertion library, but last time I checked, it won't work on IE 8. Neither will should.js. I ended up using [expect.js](https://github.com/LearnBoost/expect.js/). It's not my favorite, but it gets the job done. Also, if you use CommonJS modules, check out the [karma-commonjs plugin](https://github.com/karma-runner/karma-commonjs) I and a few others created. It's faster than running Browserify before testing and it preserves your stack traces.
awesome work. just dont put an alert() in the JS box
Thanks for this other example. Sounds quite similar to the approach mentioned in the article I linked. They both seem non-traditional, it's interesting to see things evolving as browsers allow scripts greater capabilities.
Ahhh I see! Well since you gave me your github and site here's my blog http://garrettblackmon.wordpress.com/ It contains pretty much all the tech things I'm working on if you are interested in any of the sources, its not too terribly old I'm a freshman in college and I just started really picking up interest in personal projects so let me know what you think!
Thanks for the link. You're right. The only place where linked lists were faster were in insertions.
an alert is ok as long as you close it with your mouse =) you'll see it at every keystroke indeed, but it's the same on all concurrent HTML prototypers that have automatic refresh...
That's very nice! You should insert the source code of your demos (like the crawler) in your blog posts =)
You should check out this tutorial if you're interested, its pretty good. http://simonsarris.com/blog/510-making-html5-canvas-useful
&gt; Firstly, if your app is using some sort of database as the backend (highly likely) What?
Depending on your workflow there are a few grunt tasks that can safely minify stuff for you without needing to use the array format. That said, I stick to using it just to be safe. On some bits of my code, I have a number of things that I need to inject (although have been refactoring to minimize them) and things were looking ugly, so have started to do more: angular.controller('SomeController',['dep1','dep2',SomeController]) function SomeController(dep1,dep2) { } been finding it easier to read when I have a large number of injections. 
Books have never worked that well for me, but if that's your thing then the books you have (the good bits) are really popular. I think the first thing to really come to grips with is javascript's weird prototypal inheritance instead of proper inheritance. I say this because coming from java / c++ you will have a lot of assumptions which aren't true of javascript. There's loads of good resources which explain this, but it's worth dedicating some time to because I think it will help you to quickly identify what you're looking at when you work with someone elses code. If you're trying to cram a lot of learning into a short time, keeping a glossary helps a lot. That's especially true with web development, because you're dealing with such a chaotic mixture of technologies. Whats a value, a property, or an attribute. They all mean different things and if you're trying to absorb information, writing down definitions helps you to quickly make sense of sentences and paragraphs rather than having to re-read the same sentence several times. Thirdly, find some good resources. I spend years googling what I needed to know, and ending up in weird half-assed advert based poorly maintained wastelands. (looking at you w3schools!) I not-so-long-ago discovered mozilla development network and haven't looked back. It's got loads of clear, maintained documentation for a range of technologies you'll be working with. Also in the resource department learn to love jsfiddle, jsbin, or codepen or whatever.. if you haven't already. Other's have mentioned taking on a small project or something of your own. But to be honest I think it would be too easy to get sidetracked on stuff that doesn't really matter or is only vaguely relevant to your new job. Is it not possible to get your hands on some recent project they've completed? Read their code, and try to understand. Good luck with it anyway. I'm sure you'll do fine.
A library for manipulating the DOM, in other words to change the view.
If you use ng-min to preprocess, you can safely use the normal syntax and still minify. It does not correctly support injection for resolvers, though, so you will need to continue to use the array syntax for them.
Google is your friend.
If you're using the Closure Compiler then they've added in something for it. You need to use a flag: --angular_pass and then annotate any functions that are injected in to with: @ngInject Not sure what it does behind the scenes, probably just tells it not to rename the passed in variables. If you do that then you don't have to declare the array.
Maybe use some kind of orchestrator that worries about firing the events. If you want them all fired off 1 at a time, once the orchestrator fires the first one it could listen for an event you fire from the 'animationComplete' callback, then the orchestrator can fire the the next animation. 
YEMAN
I'd try to get all the tiles in an array and the loop over that array. Then I'd use some sort of wait function to wait for a certain value (true) to be set by the animationComplete function, and when that's done it continues the loop, starts the next animation or whatever. Might not be the right approach though.
Yeah it's poor form, but that's just my opinion. Your blog doesn't really tell us anything about the book, at least nothing that we couldn't gather on our own by reading the publisher's blurb. And why not just make a self-post here instead? Oh that's right, a self-post wouldn't drive traffic to your blog. You have to ask yourself: what is my post contributing to the /r/javascript community? If the only contribution is the _chance_ to win a modest prize, then it's not going to be useful to the majority of us here.
For one, that's CSS....I thought the discussion was around JS. Two, for a project of even mediocre complexity, a full build can take much longer than it takes for you to "save and alt-tab", so that's kind of a red-herring argument.
Ohhhhh, got it. Dynatable does not yet do lazy-rendering, but it's definitely something I wouldn't mind adding (open an issue on Github if you could and would like this feature, to remind me). My guess as to why datatables does lazy-loading of rows but not columns (and maybe you already know this), would be the technical issue of how tables are structured in HTML. Let's say you scroll down and need to load the next 20 rows. Datatables (and dynatable once this feature is implemented) can easily do this by building the html for all 20 rows in JS as a string newbody = "&lt;tr&gt;...&lt;/tr&gt;...&lt;tr&gt;...&lt;/tr&gt;"; and then appending it to the DOM with one insert operation. Now let's say you scroll over to the right and need to load the next 20 columns for all the rows currently in the dom. The plugin would actually need to build the 20 columns for each individual row row1 = "&lt;td&gt;...&lt;/td&gt;...&lt;td&gt;...&lt;/td&gt;"; row2 = "&lt;td&gt;...&lt;/td&gt;...&lt;td&gt;...&lt;/td&gt;"; row3 = "&lt;td&gt;...&lt;/td&gt;...&lt;td&gt;...&lt;/td&gt;"; ... and append each one as its own operation, since they all are nested in separate sibling row `&lt;tr&gt;` elements in the dom. The alternative would be to just reload the whole `&lt;tbody&gt;` with all rows/columns currently shown plus the new ones (so loading larger and larger table bodies as you scroll, each one overwriting the one already in the dom), which may actually be faster than forcing the browser to reflow the page 30 times for 30 rows as you insert the new columns in each row. Either way though, it's not going to be as simple and efficient as the lazy-loading of rows. And you'd probably have to have a lot of columns (which likely isn't as common a scenario as having a lot of rows) for it to pay off in terms of performance.
Shit like this should be banned from the internet for killing productivity. I've played with GoL so much over the years, still gives me the OCD's. Nice take, works well (too well :)
I attend TC39 and work on Chakra! Thought I mentioned earlier, sorry. Can you explain where you would use such a feature?
&gt; Wow, I like this MUCH more than JS fiddle. _You might also like:_ * [plnkr.co](http://plnkr.co/edit/?p=catalogue) (favored in the AngularJS community) * [jsbin.com](http://jsbin.com/welcome/1/edit) * [codepen.io](http://codepen.io/pen/) Nothing against OP's link at all, just offering options. There's probably others I'm missing too...
I'm very much in favour of this abstraction as well. My only problem with it right now is that JS apps are still a little slower than server side rendering albeit the gains you make with regards to concurrency may be worth it.
agreed the contrast is not enough. It's as bad as google's advertised links in the search results.
Oh shit, MindJet will be sending you a job offer any minute now. They get off on this as a programming test.
Thanks, I'll delete it.
Wow, awesome job!
The code for this is disgusting, it's all globals ;) I don't think it'll be getting me any job offers soon. 
Point #1 could be condensed to "don't write a single-page app without knowing what you're getting into." If you're doing anything that is more "app" than "site," you should probably be thinking about it in terms of (API+Single-page client) instead of (DB+Serve pages) anyway.
Where are the plastic cars with the pink and blue pins which designate you, your spouse, and your brood of children? Where is the colorful spinner? Worst game of Life ever. /s (That's actually really cool!)
Does this do what you want? (function(){ var i=1,killAt=4; while(i &lt; killAt){ var theTial = $("#tile"+i); theTial.liveTile({ mode:'flip', speed: 500, delay: 2500*i }); i++; } })(); You could change the speed and delay options with different expressions involving 'i' as well as something like Math.round(Math.random()*1000)+500;. Also the stop method does seem to work when used like this: (function(){ var delay = function(){ $("#tile1").liveTile("stop"); }; setTimeout(delay,10000); // after ten seconds stop tile1 })(); I would write some sort of thread that would manage all this in an interesting way, is that what you have in mind?
.liveTile accepts an object as its argument. One of the properties it looks for in this object is "animationComplete". This is a callback. A function that you pass in that will be called when the specific animation is complete. If you want to play animations sequentially, you can put subsequent animations inside the previous animationComplete callback. $('#tile-6').liveTile({ animationComplete: function(tileData, tileFront, tileBack) { ('#tile-7').liveTile(.....); } }); Now you can store the tiles in an array and move through the array in the animationComplete function, or you can find them using DOM methods, which would be more maintainable over time.
In V8 (node, chrome, safari's javascript engine) even insertions are faster on arrays.
I don't know anything about this particular plugin and it's specifics, but I'd go with what tastychicken and abramz have to say: Use an array and iterate through the items, then use a callback to initialize the next item. Really quickly I came up with this as a basic prototype to maybe get some ideas from: var liveTiles = $(".live-tile"); var liveTileLength = liveTiles.length; function initLive(index) { $(liveTiles[index]).liveTile({ animationComplete: function(){ if (liveTileLength&gt;index) { initLive(index + 1); } } }); } initLive(0); This particular one uses a recursive function, itself being the callback with an internal counter that will stop at the last item. It also just leverages jQuery as the array, as grabbing a class returns an array of jQuery objects. Good luck, I hope this helps!
We're in the midst of adding support for node_modules now, actually. :-) See https://github.com/karma-runner/karma-commonjs/pull/10.
Needs a clear button to start with a blank slate if your glider swarm isn't working.
That's like saying an automatic transmission keeps you from being a real driver.
I like it. Good job! Suggestions: * Have a means to clear the grid * Maybe have a simple copy/cut+paste tool so you can move your gliders into different positions without redrawing. * Perhaps larger grid cells or a zooming capability. A small grid can make things tedious. * Crosshair mouse cursor can obscure parts of the grid while you're drawing. Make it smaller or instead of changing the mouse cursor just highlight the cell that it's hovering over. 
Yeah I don't really see programming involved in manually concatenating js files.
For me, Grunt feels like Maven--a useful build tool, but with an unnecessarily complicated interface. I still think `make` + git hooks is the best build system.
Shit guys, we got a real badass over here. Guy is so fucking pro that he writes his code in 1s and 0s. Fucking magnificent.
Nice! :-) Does it support loading json files as well as js files?
&gt;I'm using RequireJS and its text! plugin to load templates, so they're always treated like they're loaded async Perf tip (with minimal changes to your code) if you're using underscore templates. Use the tpl plugin instead to serve compiled javascript to the client: https://github.com/ZeeAgency/requirejs-tpl
Just use angular and you should be better off.
Chris Coyier is a great teacher. If you're into front end development, look him up.
How would you approach my requeriment? I'm about to develop a widget that will request from my server. The issue is only registered domains will be able to use this widget. The usual approach is users register on a site to generate public/secret keys and use them to start communicate with the api. I have no clue if this is what I want because: 1. Using Javascript exposes the public key. Will this allow someone start using the widget someone else registrated for? 2. I think I cannot validate who is requesting me by checking the referer because it is easily spoofed, and being javascript which is executed in the client I suspect the referer will be the user ip (maybe I'm saying something stupid here, didn't tested). I'm certainly very lost here.
Loving that username.
Not at the moment, but [patches welcome.](https://github.com/karma-runner/karma-commonjs) :-) I'd be happy to walk you through the issues if you're interested in tackling it... just open an issue on the project.
How many ways would you say there are to skin a cat? Mine wasn't minified, the minified version is small as well. -rw-r--r-- 1 ********* users 4.2K Dec 13 16:08 smarter_console.js -rw-r--r-- 1 ********* users 1004 Dec 13 16:05 smarter_console.min.js Plus this version includes additional features, not just shimming console.log, it also puts safety checks on other console funcs for better control of debugging code. Different strokes, use it, don't use it, up to you. edit: updated code to support another posters design pattern for console extension, updated file sizes listed in comment.
I find it very interesting that nearly one quarter uses a language that compiles to Javascript. I didn't know that CoffeeScript and TypeScript were this popular.
This. When you need to re-use code again in the future which is all time time for things like objects, classes, loops just to quickly refresh yourself on the syntax, you will read your own code easier than anyone else's, just make sure you write in the most logical way to you.
Why would you constrain yourself to the advice of a single person or two? Why not ask here?
"Node.js is the world's fastest-growing programming language"
This is pretty cool!
Except in the case of should.js it works exceptionally well for writing semantic tests. Would I want that kind of API on anything else, probably not. But for tests, it is particularly effective. "Good" API design is not something that is overarching over all of programming; it is entirely specific to the problem at hand.
+1 In the case of jquery, it's fairly easy to debug what is going on. Most calls are display related and debugging is not super complicated. However, for more nuanced data manipulation, method chaining can make things a little confusing.
Is it online course ? On video ? I'm interested, but I'm not in America, and there is not enough info, just asking to pay :( 
It is an online video course, yeah. I'll send him your feedback, it's brand new so I'm sure he'll appreciate it.
Thx you very much, I think I'll definitely take this course, so. I usually prefer paying by PayPal, so it could be a good option, if you are able to give him feedback.
Using a wait to let asynchronous tasks complete? Guaranteed to fail randomly. Not a good idea. 
the best thing to do is go to meetups here in SF :) you'll meet/make friends/sifu's/sensei's/ninja's/rockstars/humanbeings but if you want to talk more code, pm me. i have no life and all i think about is code from javascript to haskell :P
More like using a dishwasher isn't really washing up.
Sure, no offense :) Thanks for the links. All these sites (and many others) made me want to make that tiny editor.
Just skimmed through the code, from what I can tell you have to either add all js files from your node_modules or explicitly tell karma which to include?
Yeah, you have to tell Karma about any file you're including in a test, or it won't get loaded. Then you also have to tell the CommonJS plugin which ones are CommonJS modules. In practice, a `**/*.js` would do it.
I know they're trying to make the course sound informal and fun, but the copy makes it sound like every other douchey brogrammer training course.
The first thing I looked for when going to the site was a demo video of their teaching style, and preferably teaching something lightly or moderately difficult as to not get sucked into the 'this is easy' marketing hype. 
I think it might be possible to do this with a browser plugin. Reddits API gives access to a users saved listing.
how would someone do that?
I agree and you're right with the intention of making the course approachable and fun. What are some of the more bro-y parts? 
&gt; Get Awesome Now Loosely related to #3 &gt; ... taught by two super-dorks I know this is supposed to be self-deprecating humor, but it strikes me as somewhat patronizing. I'm not sure why. &gt; ... also slings mad code No. Please don't ever use anything involving "Slinging code", "crushing code", "rockstar" or "ninja". &gt; We're Real Good At Teaching Node Should this be "Really good"? I also agree with /u/taoist_wa on the demo video. Show people a glimpse of what they're buying rather than taking them straight to the payment page. It's a bit off-putting.
Kindof.... Javascript, conventionally, is a website level thing that allows a web developer to modify elements of the website without many of the restrictions that pure html imposes. For example, this means tha if you have a table on a website, you can use javascript to sort the table when the user clicks on the different fields they want the information sorted by. Traditionally javascript has very limited access to your browser and your file storage (there are some exceptions to this). Remember those old ridiculously sketchy porn sites that would add a hundred different screwed up bookmarks just cause you made the mistake of visiting their site once? That behavior is blocked in the current version of website level javascript. That being said, chrome extensions (and I'm assuming firefox plugins as well) are written primarily in java script also. But those will be following different rules, because they are not executed from a website on the outside inward, rather, they are installed on your machine to be executed as per the rules that you define. Like others have said, what you're really looking at is an extension or a plugin. What you want is not something some generic website would be able to do just because a user clicked on their link. Those features are blocked for java script from those types of sources. At least without some significant runarounds (you ask a user to install your plugin, then you have your website communicate with your plugin to do funky things)
I'm not sure if it supports RSS, but you might be able to just click in your profile and select the RSS feed version of it. I'm on my phone otherwise I'd test it. If it did you could add it to a lightweight reader in chrome or a live bookmark in Firefox. 
it only goes back to 25 of them. 
This is awesome. Thank you very much. Once the the script is injected, how do you handle things jQuery? It's obviously much easier to manipulate the DOM using jQuery vs. raw JS. Is there a way to include jQuery in the script I am injecting, while making sure I don't break anything on the client side? EDIT: Added question about jQuery.
You can get started with Chrome extensons [here](http://developer.chrome.com/extensions/index.html) and the reddit API is explained [here](http://www.reddit.com/dev/api) There is also /r/learnjavascript if you're not familiar with javascript and /r/learnprogramming if you're not familiar with programming at all. If you've never done anything like this before it won't be easy. It might take so long and so much effort to learn that it won't be worth it. (unless you've got a lot of time on your hands and want to learn a new trade.)
This book is excellent. One of the authors works at Disqus, which has one of the most impressive/elegant third party javascripts I've seen.
I dont like how they suggest running your web server as root.. I mean, I know what that means, you that are about to comment that you have to be root to bind port 80 know what it means, but as Meteor markets itself as *easy* you attract coders that cant sort out the keyboard from their own ass that will definitely not understand why running servers as root is a bad idea, It might be better in the long run to tell them to put the port in the URL when developing instead of telling them to start with sudo.
You absolutely do NOT want to inject jQuery into someone else's page that is embedding your script. That's a lot of overhead for your little embed. What is the goal of your embedded script? Is it really doing so much DOM-manipulation that you need jQuery, or are you just reliant on jQuery?
Basically, this script handles email collection. It's a little widget that slides into view, presents some text, and asks for an email address. Sort of like a contact form, but more specialized. The email address then needs to be POSTed back to the server where the script resides.
Do it without jQuery. Animations are easy enough, do them with CSS or not at all (why slow things down with a fancy animation on an old browser?). Also, you will not be able to POST cross-domain without CORS, which some older browsers don't support, so you might as well just do it with JSONP. Writing you own JSONP method is really easy, so again no reason to use jQuery.
Select2. I just had some issues with it because it doesn't do dynamic live binding with Angular. If the select box is open and the data is updated via an AJAX call then the select2 options don't update until you close the selector and reopen it, but if you select an old option and don't reopen it to select a new option then the value of the select2 menu is whatever the old value was. To fix this I had to get the select2 box that was in focus when an AJAX call returned, blur it, refocus it, and reopen it.
No. But there are good and bad ways to use a language. 
You might have better luck with your question on Stack Overflow. I've never worked with pinch events, so I can't be of any direct help, sorry.
C2 ("bmp")
Just use Nginx to reverse proxy using the proxy_pass directive.
That looks really interesting, I'll definitely give it a spin. Thanks!
&gt;if anyone spots something wrong, feel free to correct me Well, *ideally*, you should be using "head' instead of "body".
Or just use iptables to redirect 80 to 3000.
Or better yet /r/learnjavascript
If you need to inject a form, create an iframe. That iFrame will call a page on your server. That page could use jQuery and whatever you want need and you do not put in risk the third party site, also you have the freedom on your page to handle the form at your best.
That's what I'm starting to lean towards after reading the book 420da5665f978dbb suggested. The issue I'm potentially struggling with is cookies, but other than that, I'm definitely considering leaning towards the iFrame.
That looks really interesting, thanks.
Okay, thank you.
/u/bamtron5 takes you part of the way. The other big thing is that document.getElementsByTagName("tbody") returns an array of objects (that's why it's getElements, not getElement). In this case, there is only one object in the array, but you still need to call appendChild on the object IN the array, not on the array itself: document.getElementsByTagName("tbody")[0].appendChild(row); Look into Firebug if you're using firefox so that you can see the errors and debug more easily.
I don't think you want to modify the array prototype for use in instances of a single function. If I were building this I would create a Sound function and then set the prototype on that. For example: var Cat = function() { this.sounds = []; } var Sound = function(str){ this.sound = str; } Sound.prototype.getSound = function(){ return this.sound; } Then maybe change how Cat works: var Cat = function(){ this.sounds = []; this.sounds.push(new Sound("meow")); } // then maybe something like... Cat.prototype.meow = function(){ return this.sounds[0].getSound(); // or whatever }; 
This is great - thank you for looking over it! I'm still a little stuck, though - I don't understand how/why to change the code to select bike 1, 2, and 3. Since the tourBikes array contains each bike object, can't I just refer to them as tourBikes[1], tourBikes[2], and tourBikes[3]? And then access the bike model name in the for-loop with dot notation, tourBikes[j].model? [ http://jsfiddle.net/D7UkA/9/ ] 
Ok, I've changed your code (with comments) showing a working example. http://jsfiddle.net/rxR99/1/ Things of note: * syntax was messed up on the bikes array. It had extraneous semi-colons and missing commas. * You were looping over the bikes array twice. Use firebug for Firefox or Chrome inspector. They'll both help you find bugs easier. 
Other thing of note, there is no such thing as a center element with the html5 declared doctype.
There were several syntax errors related to the object creation, as well as the HTML. This example should be working: EDIT - I am sorry I didn't save the fiddle properly, but luckily the PrivacySchmivacy fixed it similar to the way I did, except I used a for loop to loop through the bike properties instead of referencing each one by name. I wanted to point out your table structure. The table should have 3 levels of elements under the &lt;table&gt; tag. There are shortcuts you can take, but I always follow the full standard so it's easier for other developers to read my intentions right off the bat. *Row Type (thead, tfoot, tbody) - This essentially describes the child &lt;tr&gt; element immediately under it. *Row (tr) - I think this is basically constant for defining a row. *Cell (th or td) - Use th (table head) for the header row, and td (table data) for data rows and footer. In this situation, I like to name the tbody and use that when referencing it in Javascript just to clarify my intent to other developers. JQuery is just a superset of javascript, and I could have done the same exact thing using the document object to get an object by ID. 
what are we supposed to be doing with this?
This is awesome for a beginner! Here are the changes I'd make to get it working: http://jsfiddle.net/D7UkA/22/ - There were a couple of little syntax errors: 1. You need commas between the items in an array. 2. You don't need a semicolon after the last item in an object. - I couldn't figure out why you had two nested loops over `tourBikes`. Could you tell me? I got rid of the inner one. - `document.getElementsByTagName("tbody")` returns a *list* of nodes, so you can't call `appendChild` on it. `[0].appendChild` would have worked. Instead, I gave the table an id, which is more common way to find an element in real-world JavaScript. - `&lt;thead&gt;` can't be inside `&lt;tbody&gt;`. - You can't just have text inside a table (like your heading), it always has to be in a cell. I moved the heading outside the table, that's a better place for it. My biggest suggestion would be to try out your browser's console and developer tools! Chrome's pointed out some of these errors right away.
there are more comments than code and the name of your method is longer than the number of lines in this snippet. This should not be a jQuery plugin, it should be a snippet of code that you reuse sometimes. 
Agreed, excellent book. 3rd party JS is a minefield. Both authors actually worked as Disqus, they know what they are talking about.
You can tweak the syntax to give it proper name and make it less verbose, function Sound (str){ this.sound = str; } Sound.prototype = { getSound = function(){ return this.sound; }, playSound = function(){ //.. } }; Extend using Object.create() function Cat(){ Animal.apply(this, arguments); //.. } Cat.prototype = Object.create(Animal, { meow = function(){ return this.sounds[0].getSound(); // or whatever }, //.. });
I say add nothing to the global scope. Perform a self calling anonymous function (I'm sure there's a real name for this) to scope all your variables, then you can easily prevent conflicts. Edit: it looks something like this. (function (){ var myvariable="whatever"; })();
There was also a syntax problem with your array. I can totally see how you made the error, being new, so I'll spell this out--not to be pedantic, but just to be really clear about the syntax and clear up any confusion. The syntax for creating an array is a set of braces (`[]`) surrounding zero or more objects, separated by commas, like so: var myArray = [thing1, thing2, thingEtc]; What you've done is confused this syntax with the syntax for creating another type of JS object, an object literal. The syntax for creating one of these is two curly braces (`{}`) surrounding a list of zero or more name-value pairs, where the name and value are themselves separated by a colon, e.g. var myObject = {greeting:'hello', greetee:'world'}; So your code here was actually throwing a syntax error: var tourBikes = [ bike1: { model: "REI Novara Safari", picture: "http://www.rei.com/media/kk/651a7c68-d4b3-424e-a400-1d7d5f684368.jpg", price: "$899", material: "Steel", weight: "29.89 lbs", notes: "Advantage: REI customer service" }, // ... ]; See, `bike1: {some:'stuff'}` isn't an object. That syntax is only for the name-value pairs *inside* an object literal. [Here's a fixed version.](http://jsfiddle.net/nPXVN/1/) All I did was remove `bikeX:` where it appeared. By the way, you can see the syntax error this threw in your browser's dev tools, but only by right-clicking in the output pane and selecting 'Inspect Element', then showing/switching to the dev tools console. This is because the output is a separate document in an iframe--when you just open dev tools, it's looking at the top level doc, and won't show you errors from the component iframes. It's one of the things that really irritates me about jsfiddle, though I'm not sure how they could code around it. Mozilla dev net has a decent reference on [array literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Array_literals) and [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Object_literals).
I'm assuming el is an argument to preempt the need to var it? Also on your function you reference document instead of doc.
Oh, breakpoints as in responsive design. Boy was I confused. Can we not name things names that are already names of other things?
Just remember that Object.create is ES5, so if you have enterprise-class backwards compatibility issues, careful.
As long as you don't use its second parameter, this polyfill works great (from MDN, I believe initially created by Crockford): if (!Object.create) { Object.create = (function(){ function F(){} return function(o){ if (arguments.length != 1) { throw new Error('Object.create implementation only accepts one parameter.'); } F.prototype = o return new F() } })() }
Yes, underscore's `_.isEqual(object, other)` works well for deep comparison. [Check out its implementation.](https://github.com/jashkenas/underscore/blob/master/underscore.js#L888)
I find it scary that so many devs embraced the Angular magick
I gave it a whirl, but unfortunately ["apple","pear","banana"] and ["banana","pear","apple"] are not treated as equal. In abstract data type terms, these would both be considered equivalent Sets (see [Set](http://en.wikipedia.org/wiki/Set_(abstract_data_type)); as such, I need the evaluation to return true...
Do you care about the ordering of the arrays for the sets of objects? *edit If not, here you go: http://jsfiddle.net/c6y3c/4/ I just sort the arrays first, and then do one loop to compare
Adding a flag to the jQuery data object is a nice touch. I would imagine this issue lies mostly with users double clicking buttons, though.
Sorry about that, I glossed over what you were asking and thought you wanted a more generalized deep comparison function than your `Match.prototype.equals`. As digitaltsai mentions, it's easier and faster to compare sorted sets - perhaps you could keep your sets sorted from the beginning?
Not sure if I should tell you this, because it might be TMI right now, but there is this really cool function in browsers these days. querySelector and querySelectorAll. document.querySelector('tbody') will give you that element directly.
Hmm... I like that, however it feels a bit off in that the new equals function alters the objects passed in as args. That said, I could copy the supplied arguments and sort those. Or, as living monstrosity points out, I could simply keep the collections ordered all along... that might be the best approach to this situation.
&gt; Perhaps you could keep your sets sorted from the beginning? That... is probably the best thing to do for my situation. I guess that means the original question is more academic at this point.
Yep, I believe comparing sorted sets is O(n) while any non-sorted set comparison would have to be slower. Of course there's extra overhead on every insertion in a sorted set.
Yep, I should've thought to mention that.
It's too bad `Object.create` is so slow - it would be nice to use pure prototype inheritance and avoid all the classical-ish JavaScript.
That would make things waaay too easy..
Try and put a cjs lib up on jam and see how that goes. That's such a stupid argument. Just accept that there are different strokes and time is what decides these things.
Yep, it's actually pretty annoying. For a while I had been blissfully using pure prototype inheritance for instantiating objects - it was so nice and clean. Then I found out how slow it is. It's fine for creating prototype objects without running constructor functions (you would only use it once per derived type), but as for actually creating instances it's way too slow. Maybe they'll optimize it in the future? (fingers crossed)
omg bjork!
Plus there's no flow control with this what happens if you need to validate a form and resubmit you can't. Using ajax response would be much better.
Others have made similar examples. [Here's mine](http://jsfiddle.net/D7UkA/24/). The key difference is it uses a for-in loop for the table contents, which is much more dynamic than hard coding the columns into your code, but it requires the data structure to stay the same as the table. I also hyperlinked the pictures. Ideally you would load thumbnail pictures and not a resized large image.
Its easy enough to not modify the original with Array.slice(0). Also you can use Array.every if you don't need legacy support (although there are polyfills available). http://jsfiddle.net/c6y3c/8/
I had to change the alpha beta names :p they were bugging me. Explicit names are fantastic when they convey more information about what's going on, otherwise its just more reading/typing.
I just wanted to see what the pictures looked like ;) [http://jsfiddle.net/rxR99/3/](http://jsfiddle.net/rxR99/3/)
I tend to go for something like underscore or jQuery as you know its always going to work. 
So, they're not "breakpoints" but really just css constants that connect with javascript? How's it doing that again? The explanation is a liittle short on detail...
Thank you for this, I've been looking for some reading material for my journeys to and from work. This should keep me content for quite some time.
Seems like you define your variables and values in your less/cass stylesheet files, these values are then read when the page is loaded by the browser, and fed into the JS runtime via the Unison.js file. Seems pretty neat, esp the ability to do simpler stuff via HTML markup alone. But doing ui stuff with breakpoint values in JS is tricky anyway, so I try to avoid it if at all possible.
This technically will work in most cases, but it's not a good idea for a few reasons. * Stringify has some incredible overhead when dealing with large objects * Stringify skips or converts properties to null if they are functions or are set to *undefined*. The conversion depends on if the parent object is an array or not. Either way, two objects with different functions assigned to the same property name won't register as different since they will both be skipped or converted to null * If an object has a property called "toJSON" and it is a function, that function will be called instead and the result will be stringified. If two very different objects implement a toJSON function, you may get false positives or false negatives depending on what your interpretation of "equal" is. * Property order in non-arrays is not guaranteed by the spec even when stringifying the same object twice
Awesome!
I try to keep a loop's iteration parameters within the loop's definition. I've found that when I write something like: var i = 0; for (; i &lt; 10; i++) {} The initialization will sometimes drift away, and I'm left looking at a loop without knowing its range. My solution is this pattern: var i; for (i = 0; i &lt; 10; i++) {} I assume a good compressor will reclaim the lost byte, and that a compressor will be used if a single byte matters. My preference for the for-in loop is an extension of the same principle. I don't remember the exact piece of code, but its purpose was, roughly, to iterate over an object, and then provide some feedback, or, if the object was empty, a specific value (which had to be something special, not `false` or `undefined` or something). I had written it something like this: function foo() { var item = 'default'; for (item in items) { // do something to items[item]; } return events[item]; } Yet I believe the following version would have been more durable through future edits: function foo() { var item; for (item = 'default' in items) { // do something to items[item]; } return events[item]; }
I don't believe you. Because if you did, you would not be making that comparison. 
oh cool.. where'd you pick up that nugget of knowledge?
It is very weird that it is so slow, I'm hoping for some optimisation there. What I would really like is to have a official support for classic `__proto__` to re-assign prototypes on-the-fly. It would be great for hackery.
That's a neat idea, but I don't appreciate the fact that it updates the hash on every character typed, with each update counting as a new history entry. The result is that my browser's history storage is littered with hundreds of useless entries, and the ability to use the back button is completely ruined. I'd rather have a version that wasn't so proud of being 128 bytes and which used the HTML5 history API to prevent that. 
when someone holds an opinion different from yours there are 3 possibilities: 1. you know something they don't 2. they know something you don't 3. given the same information they have reached a different conclusion Certainly the gap in complexity between assembly and C is greater then that between js and coffee, but it's still a sensible analogy. How would you define a necessary vs. unnecessary level of abstraction? Consider that abstraction by definition does not give you the ability to do something you could not do without it.
Thanks for the feedback, I added the grunt-cli global NPM command. even though the second paragraph already stated to make sure that you have Node.js, Grunt CLI and Git installed which link to the respective vendors.
I've added a "behind the scenes" section to explain better how the script is working. Thanks for taking a look!
Thanks for taking the time to spell it out! I think the exact pattern you describe will continue to work - the production that doesn't anymore is the **for** **(** **var** *ForBinding* **in** ... **)** production, where previously *ForBinding* was *AssignmentExpression* (so you used to be able to declare a var and assign to it in the initializer but now you can only declare)
You'll be happy to know ES6 adds a Set container type which would make this scenario much easier.
Durr disregard my comment, just reread what you wrote and thought you put HTML5 storage.
thanks for the idea! I have to admit that I didn't think about that "history pollution". I'll try to fix that: https://github.com/xem/paste/issues/2
ST2 code completion really sucks. I don't understand why many folks have an almost religious reverence for ST2 except that perhaps they haven't been exposed to better editors. For code completion to be useful, the editor must semantically understand the language it is editing. For this, you will have to use an IDE such as Visual Studio, IntelliJ or Eclipse with Javascript plugin.
The Orion Project also does what you want. Put a screen shot in a twitter link - https://twitter.com/kwalker/status/412332736473346048 Orion can leverage JSDoc if you use it, introspection, and index file comparable to the ones used by Tern.js. Currently work on providing those for commonly used Node.js libraries. Info about our releases and features here: http://planetorion.org/news/ try here: https://orionhub.org download here: http://download.eclipse.org/orion/
[tern.js](http://ternjs.net/) is what you are looking for. There is support for Sublime Text (and for Vim, etc). [example](http://i.imgur.com/rvIs35e.png)
If it makes you feel any better, it's used in jest. The word, funner, is an informal English word being used here in the autological sense.
JetBrains WebStorm is really good - but you need at least an hour to set it up. Well, or you don't but what's the point of using that beast if you don't configure all the details, the many many different kinds of warnings, properly for your particular environment? Disadvantage of this or any of the large (Java) IDEs: Some tasks that command line tools on Unix like **awk** and pipes do with 500 Javascript files in 10 seconds take 10 minutes in WebStorm even on the strongest of developer workstations. On the bright side, you usually don't use many of those, for everyday use I found the many warnings I get to see immediately while typing invaluable. Have a look, it's one of the best editors out there and maybe one of the most feature-rich (and they keep updating it a lot), part of a big family of editors for various languages. ---- An interesting project to follow is (open source) [Brackets from Adobe](http://brackets.io/) --- *([Brackets at Github](https://github.com/adobe/brackets))*. It is itself written in HTML5/CSS/Javascript, which is the main point why I decided to name it here, even though it's a) from Adobe ;-) and b) not yet "ready".
There's a sucker born every minute.
It's in the very first example table of the link you originally posted to google. It has 4 employees and their salaries with string fields but sorted by their numeric values.
Grunt is so verbose and clunky... Surely it should just be a config file and not a JS module (with all the attendant cruft and bollocks just to import and define tasks).
Have you tried using the sublime code intel plugin? https://github.com/SublimeCodeIntel/SublimeCodeIntel
Weird, somehow my tweet was deleted, here it is again with screenshot https://twitter.com/kwalker/status/412394016504676352
Most Sublime Text users don't use vanilla ST. Packages are what make it a great editor. With a few packages, you can get the features of a full blown IDE (plus some extras): * [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) - syntax error/warning highlighting for various languages. For JS you can choose between JSLint, JSHint, and the Closure Linter. * [TernJS](http://emmet.io/blog/sublime-tern/) - Intelligent JS autocomplete, with plugins for libraries like jQuery and Underscore. Also understands comment documentation for type inference * [Emmet](https://github.com/sergeche/emmet-sublime) - CSS selector style shortcuts for code generation. Basically snippets on steroids * [Git](https://github.com/kemayo/sublime-text-git) - Git integration * [GitGutter](https://github.com/jisaacks/GitGutter) - Shows per-line git diff status (added/removed/modified) in the gutter * [DocBlockr](https://github.com/spadgos/sublime-jsdocs) - Shortcuts for comment documentation * [SublimeREPL](https://github.com/wuub/SublimeREPL) - Run code for various languages inside an interpreter (NodeJS, Python, etc) * [BracketHighlighter](https://github.com/facelessuser/BracketHighlighter) - Highlights brackets and shows the brackets for the current block in the gutter * [Color Highlighter](https://github.com/Monnoroch/ColorHighlighter) - Highlights color codes (#FFFFFF, rgb(255,255,255)) with their actual color. Just because the core Sublime Text program doesn't natively understand language syntax doesn't mean you can't get that ability with packages. The idea of Sublime Text is that you get a solid text editor with multiple cursor support, with tons of optional packages that add in advanced features *as you need them*. Each plugin has a consistent settings manager through JSON files. I prefer this to a monumental, expensive IDE with tons of features I'll never use and lacking many features that I can get with free Sublime packages. ReSharper is $250! That's on top of the $500 price tag of the IDE itself. I used Visual Studio and Eclipse for years before moving to Sublime Text. I don't plan on going back.
Oh also don't forget SideBarEnhancements - gives you a full-featured context menu for the sidebar
I can't say for sure if you're TOC will render fine but as a suggestion for a tip for where to look, try Calibre ebook management software. 
&gt; they haven't been exposed to better editors. I used Eclipse for over 6 years, before switching to SublimeText 2 or 3 years ago. "Real" code completion is nice, but using the same editor for everything is nicer. And I couldn't stand waiting for Eclipse to boot up to edit a 3 line config file.
Ah yeah forgot about that one. Sublime Text opens almost instantly with all of my previous files open. The BufferScroll package even remembers the previous scroll position of the open files.
You know about imgur right?
It's cool, really it is. What problems will you run into with long urls? I just did a quick test and ie will definitely give you some dramas. View the linked page in chrome, copy the url, paste it in ie (I used ie10) and the url is truncated to 2047 characters. Apparently you can click links which are longer than that length, but your address bar is only good for 2047 chars. I haven't thought about what problems you might have server side. But it seems to me you can't just pack data into the url and expect it to work. There's limitations imposed by the client and the server.
Well my best advice at this point is to take a look at WebStorm. We use IntelliJ at work and as a Sublime convert I can't recommend it enough. It took maybe 2 weeks to really get used to it but I have to say now I wouldn't use anything else. The only thing I really miss is the multiple cursors, but with the refactoring tool built in it becomes a non issue. Good luck on your hunt! Edit: The 30 day trial should be a good enough trial period to really decide if you like it or not.
Okay, thanks.
I can see how that would be useful, though to me it seems like it would lead to more confusion than explicitly using `.call()`, `.apply()`, and `.bind()`. Either that or "changing" the prototype by creating a new object based on the existing one with a different prototype: var copy = _.extend( Object.create( newProto ), obj );
It would be nice to test it out without having to login.
CoffeeScript aside, I'm curious (based on some of the other comments) if this is tenable in a large project, or generally a good idea at all. I haven't considered using promises quite like this, though it makes sense in retrospect, and seems interesting.
Have you tired Chrome workspaces? You can bind your source view in the Chrome debug tools to files on disk and then save changes you make in Chrome to your source files. I does some code competition without running the code, but if you put and hit a breakpoint just before where you're editing it knows what the current objects are.
This seems to work for me. Clicking the header will open all links in new windows -- no tabs are opened.
Do you have a link to the plugin?
Yeah, I noticed that bug too (on IE11), but I don't really care about IE's limitations. Good people don't use IE. :) Anyway, I don't think long URLs can cause problems server-side... Only IE seems so suck.
" I currently pay for Intellij and Rubymine." huh? you know rubymine is "free" in the form of a plugin in intelliJ...
Thank you, it's amazing and exactly what I was missing in my set up! 
If you were calling it lots of times on the same array and you dont care about the order of your array I would keep them sorted before hand probably. And may try to avoid using slice thousands of times as I would guess you would be triggering avoidable GCs, but then that's premature optimization without testing the actual impact.
I thought that was only for IntelliJ Ultimate?
If you're doing any kind of regular Javascript work, Webstorm is pretty much the only way to go. Well worth the setup time.
given that community is free, I can only assume OP has ultimate
For Apple the illusion of smoothness is more important then correctness. this is one of those things.
&gt; teaches the user good functional programming habits. There have been several replacement libraries for underscore (for example lodash) just because underscore is *not* following good functional programming habits.
Yeah, that's not what I want. I want them all to open in new tabs.
It doesn't work in IE or FF though EDIT: Just tried it without the width and height and it now works in IE and FF. Thank you!!
Oh, oops... I misread your post. This is mostly controlled by user-preference.... however, by default, most browsers will indeed open tabs, so that shouldn't be an issue for you. If you have height/width specified in the third parameter of window.open, as you do with that fiddle, it will open a new window with those dimensions. Omit the last parameter and you should get the behavior you're after. Except in chrome, as /u/PicturesOfTrickery has pointed out. I tested this in latest FF and IE11 and it seems to work well. 
Can you star the bug on the link I sent? Been trying to get it fixed for months but its not important enough
dude, that's a brilliant idea... that would be, like, a multiplayer notepad powered with HTML5's P2P API (webRTC). I'll definitely give it a try! (maybe as a separate project) 
Thanks for the detailed comment. I was wondering about the reliability of this approach as well. Do you have any pointers about your 1. point (overhead)?
Sure, done. Also asked a couple of friends to vote too who will use it.
Just what I need right now :) Need to find out how to write testable JavaScript.
Are you asking us to make your homework for you? In that case I hope no one is stupid enough to do so. You're getting those assignments to learn from them and make/solve them yourself. 
I guess it's just the side effect of never really knowing which prototype object is going to be delegated what method. Part of what I love about prototypal inheritance is that it is conceptually simpler than classical inheritance yet more powerful - without having to do crazy things like change the prototype of an object. If you need multiple inheritance, it's easy to just compose the prototype.
I didn't look, but you probably have to reverse engineer the encryption algorithm. Figure out how it works, and then you can do what you need to with it.
I took a quick look, stepped through a bit with the dev tools, and this is exactly the case. ~~The only potentially tricky part involves knowing/finding character codes.~~ Ok, maybe that's not the *trickiest* part, but I'm still not doing the work for you. Sorry /u/vezx, but you'll probably get no real "help" from from anyone here.
If you want real SMART completion, use this emacs plugin: https://github.com/ScottyB/ac-js2 It get's the completion data from Webkit, which is pure smartness.
You pay for a year of upgrades (including major versions) but can use continue to use it forever after that. I usually wait to renew my update licence until there is a sale. I got my latest yearly upgrade for 22 euro, which is a steal really considering the insane amount of stuff the thing can do. You could argue that yearly payment is undesirable but then you need to remember they continually add new stuff.
You should try WebStorm, it has all of this integrated (not piled together).
Wheee, so advanced!
Am I the only one who likes a little less integration than a fully featured IDE? I can personally go without the constant warnings, error messages, and the performance of a water buffalo.
Dear god, I forgot to push you about the refactor tooling.. seriously it is amazing. It is so clever. No more shabby search &amp; replace mistakes when refactoring code, or bad file paths because you moved your modules. When using it with TypeScript it is even better because of the language allows the tool 'know' so much about your code it is scary.
Thank you!
Yeah but my company reimburses me for rubymine. I use intellij for my side stuff.
ES6 will become the next javascript. While yes, I do think they made some smart decisions. In the end i'm going to use what I must use to get the job done. I've never liked transcompilation because at the end of the day what I have to debug in is javascript ( or ES6 in a year ). The rest of these languages .. meh.
I've been wanting to use TypeScript for my next new big project, but have been having a hard time figuring out how to get more than a single file to compile at a time. I also got single-file building via Sublime working once, but not again when I scrapped it and started fresh. The only big problem I see is the lack of examples and others' documentation. Nearly everything I find is from early October 2012, within a week of its launch announcement. Not only does it seem very outdated, but also isn't very encouraging; it's as if the excitement around TypeScript disappeared almost entirely within the following couple weeks. Otherwise, as an AS3 veteran myself, I really like what I'm seeing with the language and would love to use it. Sorry, that's not answering your question, but I just thought I'd share that. I can imagine just as many people disliking the use of TypeScript on open source projects as they do CoffeeScript, for similar reasons: no universal adoption, dislike of syntax (just as many dislike the verbosity of static typing as they do CS's "expressiveness"), added step of compilation, etc.
Have fun manually managing and recoding your editor while I get some work done instead.
Thanks!
That was a joke, I've never had to actually edit a package. I need to work with multiple languages from the same editor. Simple as that. I can't think of a single WebStorm feature I need that I don't get with Sublime, but the opposite is not true. Also, it's not like "managing" the editor is hard. Installing a package isn't some intense process. It's pretty much muscle memory by now: * cmd+shift+p * type "in" (for install package), hit enter * search through package list, hit enter Bam. It's done. The package is installed, and will stay updated. I don't need to restart the editor or anything.
This is exactly how I feel. Dart looks interesting, though, because there is a vm embedded in a version of Chrome which you can debug natively.
Agreed, I like dart, I haven't found a project I couldn't express in javascript enough to make me want to switch. After a few years of living without types and relying more on tests, I'm through with the overhead of having to specify types everywhere. ES6 will also challenge Dart's winning edge of being a language that is extremely readable to class based language developers.
I would expect that within a year all the evergreen browsers will be ES6 browsers, IE12/FF/Chrome/Opera...don't know about Safari I don't really pay attention to it but I would expect it to have ES6 support so we will be looking at ~50%+ market share which is more then enough to write ES6 and compile to ES5 for legacy IEs. I don't see what CoffeeScript provides over ES6 and would be put off if I saw it's use in a library/codebase. I'd love ES to incorporate what TypeScript offers but it's benefits (over ES6) aren't large enough for me to write in something that I can't run natively in modern browsers.
Strict types in Dart are optional and really only for development. It's meant to be loose in production.
TDD is basically a way to make sure that your code is 'doing the right thing'^tm by running it through a set of asserts. Asserts are small tests; like questions for your code, to make sure it's returning correct values. So for example, if you have a method that adds two ints, you would write tests that make sure your method works properly in all the cases you want to check: does it add 1 + 1 and get the value 2? does it add properly in the case where I add zeroes? does it return the way I want it to if I add a negative number to a positive? These tests allow you to see if your code satisfies all those requirements, and if it doesn't then the tests tell you exactly how it fails. In some TDD methods, the tests are written *before* the rest of your code. A great framework for doing TDD in JavaScript is [Jasmine](http://pivotal.github.io/jasmine/) Another is [Qunit](http://qunitjs.com/) which is what the jQuery framework uses for their tests. Hope this helps! 
I've not really paid attention to ES6 yet, but it seems like dart is really gaining momentum when working with WebGL.
Please note that a new version of the app that makes the above link unusable. And the size changed too. Please go to http://xem.github.io/paste for the new Paste app that fits in 140 chars :)
Is it really that simple? I understand how TS is being developed to align with ES6, but I guess as someone brand new to TS (and who hasn't exactly kept up-to-date on ES6 until very recently) I figured to find a lot more on it specifically. More case studies, more examples of larger apps written with it, etc.
&gt;ST2 code completion really sucks. I don't understand why many folks have an almost religious reverence for ST2 except that perhaps they haven't been exposed to better editors. Its because not everyone wants full on code completion. It helps a ton in some languages (C#, Java), but I find it far less helpful in languages like javascript. Maybe that's because I have yet to see an IDE/plugin that really does a good job with javascript code completion AND ALSO DISPLAYS DOCUMENTATION.
I was taking a piss at the typical nonsense comments in these threads. But my point is ST3 doesn't work with all the languages. Sure you can get syntax highlighting plugins for every language ever but that doesn't quite cut it anymore. Tern.js is nice idea, but it is lacking and just another loose component on the pile thta does it's own thing. I'd like a little more, like the advanced refactoring or 100% integrated VCS. I gladly wait a few secs for that kind of power.
Thanks, I'm using Sublime on OS X, though. I've found some resources on using TS with Sublime, but it seems to be mostly outdated build snippets. I only recently started looking into Grunt, so maybe that's my answer in making a more comprehensive compile/built script work.
I've never use a plugin for anything, I try not to depend of them because they always disappoint. But you could if you wanted, there is a decent list of them available but they tend to be a little more esoteric because the stuff you'd expect to work comes built in (and is *integrated*, not piled on)
There's no need to use `$injector.get`to get your services. You can get those directly from the `inject` function: inject(function($controller, $rootScope) { rootScope = $rootScope; }); or if names matter to you, you can wrap the injected services with underscores like so: inject(function($controller, _$rootScope_) { $rootScope = _$rootScope_; });
To me, "integrated" means *bloat*, and "piled on" means *flexible*. Sublime's packages are implemented in a way that make them feel *as if they were built into the program*. Text highlighting, autocomplete, the command palette, and JSON options are built into Sublime Text and are at the core of the experience. Packages simply add to those systems.
Lame. Most of what I do nowadays is custom classes. It's small enough to not need something so advanced but it would be nice. If I have time today at work I'm going to see if I can get it running. Thanks for the advice!
I use `$injector` because my services/factories/etc. are namespaced by periods. Perhaps it would do magic and find them anyways if I omitted the periods, but I'd rather be explicit.
fyi: /r/angularjs
Thanks, I already understand that but appreciate the response. I think my confusion is that test driven development is really about validating code your confident in writing, not helping you solve problems you don't know how to exactly code for. In short its called "test driven development" but in practice its actually more like " validation driven development"
&gt; edit a 3 line config file which is when you'd use notepad++
Your twitter link doesn't work...
You keep changing the subject, but the point of "lightweight and flexible" is that you choose the features you actually need. I really don't get your logic. "It doesn't have all these features that come built in to my favorite IDE!". Well, there are packages for all those features, and they're super easy to install, and integrate directly into the program's core features. "I thought you said it was lightweight and flexible! Now I have to install a bunch of packages to get more features?" Yes of course you can get bloat if you try to load it up with every single feature of an IDE. At least the GUI stays nice and minimalistic - until you go digging you can't even tell you have any packages installed. The point is *I don't want every feature of an IDE, just the ones I actually use*. If, some day, I decide that I want feature X, I can install it in ~15 seconds. Even fully loaded with tons of packages, it still feels lightweight - starts up *instantly*, non-bloated GUI, unified command palette, keyboard-centric text editing experience. I don't spend all day customizing it. I upgraded to ST3 yesterday - even though I had to reinstall my packages it took me all of *10 minutes* at most (the horror!). If you like expensive, single platform, GUI centric IDEs (which still need $250 plugins for the full experience), something like Visual Studio is probably good for you. That's not how I like to work. I work with keyboard commands, not GUI windows. And I didn't have to dish out hundreds of dollars for it.
That's kind of my take on it too, I've tried SublimeText several times, but I always end up 3 hrs later on some random forum downloading a version of a plugin written by some guy with 2 lifetime posts. Sometimes it works, sometimes you get errors and it won't install, sometimes it just doesn't work like you want. And that plugin is only 1 small feature, and I need 50 more like it to make my editor work like I expect it to. It's usually at this point, when I realize that I have 20+ hours of manual installation and configuration left, that I think that "well maybe Eclipse isn't so bad after all".
&gt; I don't need to restart the editor or anything. I don't think that goes for all of them. I had several plugins not work or give errors, and once I found a bug report/forum post about it, would learn that "oh you have to restart ST for it to work". 
Hmm, I've never personally had that problem, though supposedly TernJS + Emmet sometimes needs to to forcibly update PyV8. Seemed to work fine for me though. Still, the vast majority of things in ST don't need a restart. Edit: actually, I take that back. The Soda theme needed a restart in order to style the tabs correctly.
After a few years, I got into the habit of writing tests in lieu of prototype code. There's a little learning curve, but it's a good routine to get into if you can. I used [QUnit](http://qunitjs.com/) for Javascript, and, once installed and working on a project, I would write tests instead of prototyping. Occasionally rewriting as needed.
It's funny that ActionScript (or ex AS) developers seem to forget that we also had to battle with prototypes before AS3 (If I remember well, AS2 was just "sugar") - As another AS3/Java/C dude, I feel much more at home with Dart, and yes it's off topic :)
I want all those features of an IDE, they make me more productive and keep my costs (for me or my boss or my clients) down by not wasting time. I have no problem with 'bloat' of my IDE and GUI centric workflow, I run modern hardware and use big screens. They all make me more productive, my eyes are faster then my fingers. If you orient your workflow on a laptop then you'll work very differently then on a real development workstation. &gt; If, some day, I decide that I want feature X, I can install it in 15 seconds. And then visit the forum to fin out why it doesn't work, that it only works on other OS version, that you need to install more dependencies, then solve their dependency conflicts, browse some more forums for a fix, email the guy who wrote it, fork his shitty project, try to get a PR in, google half an hour for fixes to his botches work-around, get depressed, forget about the tool and go back to plain text editing. So flexible.
Who the hell codes on Windows. Just kidding you. But not really. I just like using a single text editor.
Indeed, finally some sensible reply. If you are happy with Eclipse you might also like IntelliJ (pick a flavour that suits you), it is pretty neat.
I found a few plugins that I would not necessarily have found by googling... I guess it's good for just random browsing once in a while...
Not happy with it so much as being unable to find a fitting replacement. PHPStorm seemed nice when I demo'd it, but I'm not positive I'd stick with it, and that's a $99 gamble I'm not really willing to take.
In what way? Colours or layout?
It seems to be fixed now. Originally, there was a lot of inappropriate spacing in the code making it really hard to read.
&gt;I have no problem with 'bloat' of my IDE and GUI centric workflow, I run modern hardware and use big screens. They all make me more productive, my eyes are faster then my fingers. If you orient your workflow on a laptop then you'll work very differently then on a real development workstation. I work on three different workstations - my desktop with 3 23" monitors , my retina macbook (which I often hook up to my 3 monitors), and my work desktop with 2 30" monitors. I prefer Sublime Text in all four setups. No matter how much real estate I have, I still want 95%+ of it dedicated to my code. With sublime text, everything that I don't have a keyboard shortcut for I can access with the command palette, faster than navigating menus. I never find the need to use an "advanced refactoring" GUI - cmd+d for multiple cursors lets me do the same thing in less time. Every other feature I seem to have in Sublime Text, except for the node.js debugging which I just use node-inspector for because it feels just like my client debugging system, the chrome inspector. &gt;And then visit the forum to fin out why it doesn't work, that it only works on other OS version, that you need to install more dependencies, then solve their dependency conflicts, browse some more forums for a fix, email the guy who wrote it, fork his shitty project, try to get a PR in, google half an hour for fixes to his botches work-around, get depressed, forget about the tool and go back to plain text editing. So flexible. Yeah, I've never had any of those issues. Could you elaborate? Which package was causing those problems? I've never had a package that had to have dependencies installed... Unless you mean like a compiler for transpiled languages like SCSS? You have to do the same damn thing with WebStorm, or at least you did when I used it. I've never had any OS issues with ST, but maybe that's because I only code in unix OSs like most other ST users? Every package I've ever used in ST is literally a 15 second install. Look, it's really simple. IDEs are Windows. ST is Arch Linux. Get it? One tries to be a one size fits all system that just works out of the box, but offers limited customization. The other is a barebones system that lets you add in functionality so you get exactly what you want/need. *There's no one right answer*. Jesus Christ.
If you keep the documentation in vanilla JavaScript, and have precompiled the files such that someone can use your code from a plain JavaScript project, then its not a real problem for anyone not using TypeScript to use your library. If you do not do these things, then I personally do not believe the project belongs on NPM.
Wow.. thanks man. Good trick.. have you seen this one: console.table([{a:1, b:2, c:3}, {a:"foo", b:false, c:undefined}]);
I think this is how you'd test this one: 1) Create a new webkitAudioContext().createOscillator() 2) Create a jQuery slider 3) Call the code-under-test, which should associate the slider to the oscillator 4) From the code, change the slider value. Check that new webkitAudioContext().createOscillator().frequency.value also changed. So yes you do need to understand how the code will work before you write a test, and its normal to spike a little bit with APIs to understand how they are supposed to work. This is especially true for unit tests. Now for end-to-end tests, the test might control a web browser. In this case, you can test much of what is happening simulating user behaviors (click here, type this, click there) and in this case your test is not dependent on so many internal implementation details. I prefer to start with such end-to-end tests, and then break out unit tests for special cases in the code that the end-to-end test does not hit. That said, the browser automation I use is not much help when measuring the behavior of video and audio.
This pretty much sums up all my complaints about OSS Coffeescript projects. If someone is able to work better in CS than JavaScript, great, I'm happy for them. But if your project does not have pre-built JS in the repo, I cannot use your library. If your examples are not written in vanilla JavaScript then I cannot learn your library. If all modifications to the library have to be made to the original non-JS source code, I cannot contribute to your library. In short, your library has presented so many barriers to using it that I am much better off either using a competitor, or writing my own, so it being open source is of little value. I have much stronger opinions about people who answer JavaScript questions on SO with Coffeescript examples.
&gt; Wheee, so advanced! Followed by &gt; Grow up. Ahahah... oh wait, you're not joking =/ As an Intellij and emacs user, both have their strong points. An advanced editor like emacs is pretty much superior to any IDE on all points _except_ advanced intelligent stuff (autocompletion, refactoring and whatnot). They have plugins to help about it, but an IDE is usually better (slightly, unless we're talking C# or java). Everything else is faster done on emacs though.
You've already gotten some great answers, but I can't help but respond, since this is one of my favorite subjects. :-) The one thing I want to add to what everyone else has said is that TDD is *harder* than regular programming. In regular programming, you're trying to figure out how to write code that works the way you want. In TDD, you're trying to figure out how to write tests that *make you* write code that works the way you want. It's weird, and backwards, and really hard to do if you don't already know how to do the thing you're programming. (So why do TDD? The advantage is that TDD makes you think really deeply about what you're programming and how it's designed. When done well, this leads to better code. It also gives you a nice suite of regression tests, which are invaluable for refactoring, and—when done well—those tests can also act as documentation. It's pretty powerful, but that power comes at a price.) Anyway, because TDD is hard to do when you don't already know how to program something, a lot of people use [spike solutions](http://www.jamesshore.com/Agile-Book/spike_solutions.html) when they're trying to figure out a new technology. A spike solution is a bit of throw-away code, often written as a little standalone app, that you use to experiment and explore the tech. That's how I would approach your Web Audio problem... I wouldn't use TDD at all. Instead, I'd write a little spike solution, figure out how it works, *then* start over and test-drive it. One more thing: some technologies are *way* harder than others to use TDD with. That includes UI, and I assume that includes Web Audio API as well. That's part of why I started the TDD JavaScript video series you mentioned—because JS programming involves *so much* UI, I really wanted to dig into the hard questions of how you test it. So don't be disappointed if it's really hard to TDD your Web Audio code even after you've figured out how it should work. ... By the way, you've probably already seen people talk about how TDD works, but here's a bit more detail. It's a quick cycle that people call "Red-Green-Refactor": 1. "Think." Think about what code you want to write next, then figure out a small test that will fail until exactly that code is written. This is the hardest step. 2. "Red." Write the test (try to keep it under five lines of code), run all your tests, and see that it fails just like you expected it to. This confirms that you wrote the test correctly. 3. "Green." Write just enough production code to make the test pass (again, less than five lines of code), run all your tests, and watch them all pass. This confirms that you wrote the production code correctly. 4. "Refactor." Look at the code you wrote, including your tests, and how it fits into the rest of the system. Is there anything you can improve? If so, make that improvement in small steps, confirming that all the tests pass each time. Keep going until you run out of good ideas. 5. "Repeat." You probably noticed that the code you've written doesn't handle every case it needs to handle. Repeat the cycle again ... Aaaaand this is why I shouldn't post to reddit. I'm incapable of writing two sentences when 20 will do. ;-)
They actually don't work together anymore. They removed typescript support for web essentials. They have been putting much more effort into vs 2013 integration than 2012, but its still possible to get things going. 
"Certainly the gap in complexity between assembly and C is greater then that between js and coffee" understatement of the century.
"Spike solutions' are how I pretty much test everything but I never knew there was a professional phrase for it. It seems like the best way to get into TDD is to grab QUnit or one of the other packages and just write test for little useless functions as a precursor to understanding the process.
I get this as a concept, but how is it actually done?
Yea, I know, I can't help myself trolling these threads. But that advanced stuff is where the magic happens: I'm now having a great time using WebStorm with TypeScript. It is pretty cool, nice hybrid between dirty JavaScript and Java/C# style classic OO, but with some fancy new stuff in the mix. It is amazing to project-wide refactor stuff without breakage and have super-tight auto-suggest because the editor can really know what is going on and can do amazing things with it. Project-wide usage reports is nice. Quick navigation options make you fly trough the code. The only 'issue' is that you can now create more complex code more easily and get away with it. This is a mixed blessing of course (like they say in the movies: great power, great responsibility). 
I'd recommend Jasmine
What you really want is curry. I wrote an implementation before for closure http://modernjavascript.blogspot.com/2012/05/functional-closure.html and one for underscore: https://github.com/rhysbrettbowen/Underscore.Extras With those you can do things like put in placeholders to only fill out certain arguments. There is also a "flip" function for shuffling the order of arguments. The other thing you may want is something like this: http://docs.closure-library.googlecode.com/git/closure_goog_functions_functions.js.source.html#line93 which locks how many arguments a function accepts. That helps a lot with things like map/reduce/etc. that pass through more items than you need
what about the internet explorer, best browser in the world?!
I hope jQuery will come to heel and finally support the proper standard instead of being obnoxiously following their own ideas.
When I open your site from within reddit is fun app, it crashes the app/internal browser after I scroll down about half way. Samsung s3. Android 4.1.2. Happened twice in a row. 
Just tried it with ST2. It needs to be configured manually (include, exclude, libraries, plugins, loadEagerly...) and doesn't seem to work very well. You have to run *TernJS: Reload* manually or it won't pick up changes you made in other files inside(!) ST2 and some of the completions are just wrong and TernJS doesn't even know where those come from (*TernJS: Jump to definition* does nothing in that case). This is with, like, 2 dozen files and less than 1kloc in total. The code works fine and it JSHint also doesn't complain. It really shouldn't have any problems with it. I also couldn't figure out how to make it pick up JSDoc comments. I also tried it with Brackets, but I couldn't figure out how to configure it. As far as I can tell, you're supposed to use a ".tern-project" file for that, but it doesn't appear to work. It's only (somewhat) aware of the currently opened file. It will also only tell you that something is a function, but it won't show you its signature. Compared to the tooling you get with TypeScript or Dart, this is pretty disappointing. I spent 2+ hours with this and all I got was slightly less brain-dead auto-complete.
That's a great way to get started. The section on TDD in my book is [online for free](http://www.jamesshore.com/Agile-Book/test_driven_development.html) if you're interested.
I own my own web development company. This requires me to purchase the commercial license for IntelliJ which is $500 (and no discount for multiple licenses). Plus, upgrades are $240 a year. Sublime Text 3 is $70 for either an individual or a business license (price drops with multiple license purchase). The upgrade from ST2 to ST3 was $30. I don't see what value I would get from IntelliJ. Yeah, I wouldn't have to install packages to get autocomplete and linting. It took me about 10 minutes to reinstall my packages for ST3... 
Pretty easy, just change the css properties of the div holding the text. `article.style.fontFamily = "Georgia"` or `article.style.width = "30em"`
CS is only a problem if it's used in whatever**JS** projects. If your project claims to be a JS project, it better fucking be a JS project. Naturally, your documentation should use JS, too. Use whatever you want for your project. It's your project. You can use any language you want.
Are promises something that should be added to the following table? http://kangax.github.io/es5-compat-table/es6/ It's a genuine question. Intuitively, I would think the answer is yes, but maybe there is some other reason for not including it (like it's already a subset of something else, or it's not definitively included in ES6.) At any rate, it'll be exciting to use them! (Eventually.)
this +10000
* [Mozialla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) (learn the array functions like forEach, map, reduce, etc) * [HTML 5 Rocks](http://www.html5rocks.com/en/) * ~~W3Schools~~ (haha just kidding) * [WebPlatform.org JS](http://docs.webplatform.org/wiki/javascript) * [Free JS books](http://jsbooks.revolunet.com/?1) from [another post](http://www.reddit.com/r/javascript/comments/1sxewy/free_javascript_books/) * Let me know if you find any other good ones. 
While not an advocate of TDD (writing tests before code), I'm very passionate about the value of unit testing -- particularly when the inevitable refactor becomes necessary. For me, unit tests prove behavior (perhaps I'm more _BDD_ than _TDD_) and implementation. With that in mind, I write tons of tests around all my functionality in order to prove that the expected behavior is supported and correctly implemented. For example, when I've got a function/class that does form validation, I may write tests for three different (but likely) kinds of data I expect to be valid, in addition to five tests for different examples of predictable input that I expect to be invalid. So in the case where you've got a slider that changes a parameter, which is then fed to an oscillator, the idea is to design your code in such a way that the slider can be seen and used independently of the oscillator. You don't test other people's code (browsers, libraries, etc) so the oscillator isn't what's important. So how would you test the slider then? You create a fixture. In your unit test, you create an HTML fixture that duplicates the necessary parts of the slider (without all the CSS fluff) and then send it mousemove events and test for the value to be what you expect. Test that mousemove causes it to move. Test that moving it all the way left gives you zero. Test that moving it all the way right gives you 100 (or 11, if you're a Spinal Tap fan). Test that mousemove changes the value when mousedown is triggered. Test that mousemove no longer changes the value after mouseup is triggered. Why do you test those things? Because later on, you or someone else will come along and want to tweak one thing, or add some new feature. And when that happens, that developer is only going to be worried about the feature they're adding... they're not thinking about all the basic work that went into making a slider work. But your unit tests will remember, and they'll catch regressions before those bugs get into productions where your users can complain.
Finally, you can now map a local source directory to your filesystem and edit, save and refresh without even hitting alt+tab To get the gist of how to hook this up, just check this picture: http://i.imgur.com/RuzELX6.jpg Being able to work in a file directly, then saving, setting breakpoints and running to cursor with the real data just revolutionized the way I'm coding. This is like having lighttable on steroids!
That. is. awesome. I'm currently working on a wrapper for WebSQL / IndexedDB that takes the pain out of CRUD / Find and working with either of those async api's. The whole callback thing is an absolute mess if you are creating anything larger than a simple todojs app. I'm using promises throughout, and i've blown my own mind several times by how powerful they are. You can just put some in an array, and then use Promises.all to wait until they're all done, then go on with what you want to do next. I'ts made the whole process of creating a database, creating tables and inserting default fixtures before allowing the actual code to run a breeze. Can't wait to finish and release this :) Sneak peek: http://schizoduckie.github.io/CreateReadUpdateDelete.js/demo/
Just a minor correction for red: &gt; see that it fails just like you expected it to. This confirms that you wrote the test correctly. I would actually say that it confirms that you *didn't* write the test *incorrectly* - the test could still be wrong. That just demonstrates the importance of writing short, simple tests.
Lo-Dash comes with `_.curry()` now: http://lodash.com/docs#curry
If you are in node you could just use q or bluebird today. Or the linked polyfill, which is based on an existing promise implementation.
You can use Q in the browser today as well, right?
Right, so what I'm saying is you'll be able to use native promises in Node much sooner than you'd be able to in client-side javascript.
Oh, yea, Node.js is just one engine and it uses V8 which is also in Chrome, so I guess it'll be soonest and have it's users upgrade quickly. Browser support will likely stay shitty for a long time with old users and many different engines and at least one implementation who fucks it up and requires an ugly hack or chunk of shim-code (as per always).
http://www.rent-acoder.com/
Those were the days. I've been there since AS1 naïvely writing code on timeline frames and attaching instance scripts to random MovieClips (the horror! :), and I did all the things until Steve Jobs mortally wounded the platform (and some time after that but it is dying on AIR life support).
You'll want [grunt-ts](https://npmjs.org/package/grunt-ts) as compiler and later also [grunt-tslint](https://npmjs.org/package/grunt-tslint) to lint your code. I don't like compile on save (WebStorm has it too) because it is developer specific. By using a grunt build you can use free services like travis-ci to test it (works very nice with github on Pull Request as the build will fail if it has invalid code.
Same can be said for TypeScript. But I quite like the safety of compile time checking although I admit at times it can be a drag to fight the compiler. But I'm pretty much sold on the ES6 structural elements, they work very well once you find your way, which is why I'm thinking of using Traceur next time and see how that goes.
I'm a little disappointed that nobody else has taken the approach that a promise is a single state transition and there's no particular reason to limit yourself to two outgoing states (success and failure).
Finally I can write interfaces to my libraries that rely on promises instead of callbacks. I'd been avoiding that because that makes a promise library a dependency... But now it'll be built in :). By "now" I mean in like 2 years lol
They're bring it to Chrome but not Node? That doesn't make sense, do you have a source on that?
Little hard to tell this from your screen shot, thanks for posting! This is pretty cool, hopefully there can be a slick way besides FUSE to do remote (though maybe that's the easiest).
I see that James Shore (and others) have already given you some great answers. But if you feel like you need something a bit more concrete, I gave a talk a few months ago that walked through JavaScript TDD step-by-step with the Jasmine test framework. Slides here: http://joshuacc.github.io/tdd-with-jasmine/#1 Video here: http://www.youtube.com/watch?v=T76rwjqJk3w
If you create a brand new promise inside your first callback and return that, iirc that's what is going to happen - your initial callback will be called when the new promise resolves. Not 100% sure about this, maybe its implementation specific. 
Same here, multiple crashes... 
Coffeescript is just obnoxious to me. So I'd like to paraphrase what you said: Use whatever tool is best for yourself and best for the job. If you are repulsed by a language syntax and can't stand coding in it. You probably shouldnt be using it.
Or Sublime Text, right? Basically, the idea is using a lightweight text editor instead of a heavyweight IDE.
Fighting the compiler will probably become less of an issue in the following months. 9.1 and 9.1.1 have been a nightmare though.
Thanks, as I mentioned, I've been meaning to look into Grunt for some time. I finally took the plunge and, wow, so much easier than I expected. I haven't tried the TypeScript compiler module just yet, but if it's as straight-forward as the handful of others I've tinkered with, it seems like it'll be a breeze, and *exactly* what I'm looking for!
Imo, coffeescript is never the best tool. :(
If it's a brand new project, I don't think there is anything wrong with using TypeScript. Obviously vanilla JavaScript will always have a bigger audience but the fact is TypeScript is not radically different from JavaScript (by design). So adoption should be fairly easy. Having documentation and examples for people not familiar with TS will go a long way though. 
Can I ask what informed your decision to use Traceur instead of TypeScript? I'm in the process of weighing the pros and cons of both, and could really use another perspective. As far as I'm concerned, it comes down to vanilla ES3 Javascript or TypeScript, or maybe ES6+Traceur. CoffeeScript isn't even an option in my mind, as it offers nothing that TypeScript or ES6/Traceur offers as well, minus the pitfalls (forever it's own beast and unaligned with ES6; "expressiveness" at the expense of readability (somewhat subjective, and again as a AS3 vet)).
 document.location.href="http://something";
That's my thinking as well. As attactive as static typing is for detecting issues during compile, I could continue to live without it if it makes my code *that* much close to 100% ES6 in 1-3 years time.
Here is an example that will spit out the contents to an alert. If you need to change the url you would do document.location.href = textareaContents http://jsfiddle.net/ybzes/
your both legends. the scriptsfool was a throwaway and in between the bus home i forget the pasword. The alerts not a prob (most of my debugging has been done this way :/ console.log just seems blah.) how would. ill check out document.location . So excuse my noobness say in the 2nd example below i could use the var textareaContents like this document.location.href=textareaContents // ?
Make that [january 2018](http://support.microsoft.com/lifecycle/search/default.aspx?sort=PN&amp;alpha=windows+8), 6 years :'|
Fair.
For what it's worth, you don't need canary for this. Saving dev tools edits to files mapped to the local filesystem has been in the beta channel since July or August.
Browser support is basically all of them. At least the ones that jQuery supports. It uses pushState for caching pages, sorts, and queries, when available; so that part doesn't work in IE&lt;10, but you can use a pushState polyfill and you're good to go.
TypeScript and Dart has type hinting, so type guessing is much easier ;). Tern worked for me without any configuration, so maybe the ST2 plugin is buggy ([screenshot from vim](http://i.imgur.com/sCfz3MW.png), type hinting is working, and JSDoc comments are recognized more or less). Of course TernJS is not *perfect* it's still under active development, but it's a very promising project.
There's a content scripts and styles flag in the settings panel. I'm guessting that's what you're referring to. 
That's amazing. Thank you for this, I've been dying to be able to edit CSS in my browser ever since Firebug came out. Gotta try this. I hope they will polish it some more for stable and also add SASS support. I'd be in heaven.
Of course, that was my point: most machines have lightweight editors available. Why use a hammer to crack walnuts?
I guess I had trouble understanding why in my argument for using ST over Eclipse, you'd decide to jump in and make a point that one should use lightweight editors, since it seemed kind of redundant given what I had said.
&gt; And I couldn't stand waiting for Eclipse to boot up to edit a 3 line config file. To be honest, I'm not familiar with ST at all. But you seemed to be arguing that heavier editors were bad because they weren't suitable for all tasks. I use WebStorm and I absolutely love it. But I don't use it for all my text editing work.
&gt; But you seemed to be arguing that heavier editors were bad because they weren't suitable for all tasks. Is this an explanation for why you decided to jump in and make a point that one should use lightweight editors?
coffeescript is from god him/herself. fuck the haters
Ah, thank you, I guess I misunderstood. That makes it irrelevant to me, as I subscribe to the var-first rule, or at least a version of it. But it does seem inconsistent, if `var` is still legal in `for(;;)` loops.
I worked in AS3 from beta till a couple of years ago, so type safety was important to me from the beginning. Our code basis tend to be big (50-&gt;500K loc). We went down the closure route. Static analysis + fully fledged component system (akin to the flex livecycle) pre-renderable on the server using the jvm. Typescript is awesome, it is probably the best thing to happen to the JS world in a while, but the closure eco system beats it hands down IMO. 
Actually I switched from vim to Sublime Text 3.. :P 
But I wasn't making that point. My point was to use a fit-for-purpose editor for the task at hand.
&gt; TypeScript and Dart has type hinting, so type guessing is much easier ;). So does JavaScript with doc comments. However, you don't really reach a point of absolute certainty where you can flag things as errors. Like, if you make a typo, Tern can't actually tell if that property really doesn't exist. So, if you update some library and one of the functions was changed/removed, Tern won't be able to identify this issue. &gt;Tern worked for me without any configuration I'm not sure if there is a scenario where it works 100% correctly out of the box. Even if you use RequireJS, you have to configure the RequireJS plugin (baseURL, paths). If you don't use RequireJS, you have to tell it which files to load eagerly. &gt;Of course TernJS is not perfect it's still under active development, but it's a very promising project. Yea, it's pretty impressive given that they had to jump through so many hoops, but I really hoped that it would work a bit better. I still use JS for one legacy project and I really hoped I could improve the experience a little bit.
tried to play couple times. both times crashed my browser (chrome) before the game even started. nice
see the getJSON example in the article, is this what you mean?
Although the promises API will be there, it remains to be seen whether they'll use it in their APIs
Not exactly vi for the inspector, but if you haven't seen it already [Vimium](http://vimium.github.io/) is awesome for chrome.
This works with COLT: var myObject = {"hello", "there"}; myObject["field" + (3*10)]; myObject. [sreenshot](http://media.tumblr.com/7467cceed356bf1b040128cf4d221640/tumblr_inline_mxa9e10Bq61qlv1g2.png) Read Article: http://blog.codeorchestra.com/post/68973544159/sublime-colt-add-100-intellect-to-your-favourite-ide
You can check the recording of this thing in action at http://www.youtube.com/watch?v=qkscS1aI2JI (note that COLT is standalone app, you need to install it along with sublime plugin before it works like in this video)
If only it didn't shit the bed after logging 1 MB of net traffic.
And then there are those, like you, who never learned all of vim or emacs.
you can always roll your own. how deeply do you need to query, and how unpredictable is the structure of the object?
One way is to use [linqjs](http://linqjs.codeplex.com/). It's a port of Linq to javascript, and works much like a query builder. var queryResult = Enumerable.From(jsonArray) .Where(function (x) { return x.user.id &lt; 200 }) .OrderBy(function (x) { return x.user.screen_name }) .Select(function (x) { return x.user.screen_name + ':' + x.text }) .ToArray();
Does your angular site have direct DB access? Edit: [I've found your component](https://github.com/SchizoDuckie/CreateReadUpdateDelete.js). I couldn't find anything information on security.
Could you elaborate on your requirements? What exactly do you want the library to do?
yes, I understand now. Thanks
Ye, well, 0.9.5 is very nice but has some ugly thing with the ordering of method overloads. It works well with a neat single library but if you need to mix or expand definitions it can be ugly since the ordering in which the compiler see the overloaded signatures now matters. There is plenty of discussion on DefinitelyTyped and the Codeplex forum.
That is what I like about grunt, it all works similar: specify files with the standard API, set some options and off you go. And it is easy to make new tasks too so there is a plugin for everything you can imagine. Compile on save is possible if you'd want it, some tasks support it by themselves, but there are also helpers like `grunt-watch` and `grunt-regarde` that can tirgger other tasks when a file changes. Extra fun with LiveReload browser previews (like in `grunt-contrib-connect`)
The only excuse I would allow: the blocking request is neccessary, because otherwise it gets killed when its context is removed by a page change. In any other case, it's a sign of lazyness/incompetence.
I haven't yet used ES6+Traceur in a real project but why I think I will like it is because (as I mention in the OP) it supports the ES6 structural elements. So basically how I use TypeScript now (`module`'s, `class`/`extend`, arrow functions etc), but without the compile time type check. Sometimes the TypeScript compiler is annoying, and for small projects not really worth the hassle: the big pay-off of type-checking is in big projects that don't fit in your mind all at once and need the compilers safety (as extra check before testing).
What do you mean with the 'closure eco system'? I only know of the compiler/linter/minifier, is there more to it? What I like about TypeScript is how is works with any JavaScript library, especially when using DefinitelyTyped repos to get some definitions.
Note source-map's solves a lot of these issues. It use it all the time, works excellent in node.js (via npm module `source-map-support`) and many modern browsers. But you are right in many of this, as they say: &gt; "if you think you are being clever you are probably not"
&gt; Browser support is basically all of them. At least the ones that jQuery supports. I was kind of skeptical, but I'd have to agree. I fired up an IE7 VM and all of the features I tested do indeed work (though slow as shit, which of course is going to be IE's fault).
compiler, library, linter, templates compiler
I tried this earlier - but it does not return the top level JSON item. So, if you have a JSON array of schools.classes.students.first_name and want to search for matches with first_name == 'John', the above returns a list of objects that are {first_name: 'John'} which is kinda useless. What I am after is the list of schools that have a student with first_name == 'John'. Or - have I been staring at this too long, and I am doing something stupid? Maybe, am I confusing this outcome with one of the many other libraries I tried?
Doing this now and leveraging jQuery. Seems the only way to go.
Most of that is available in other forms, except the "industrial-strength JavaScript library", it looks very good (and battle tested).
At this point there are no valid justifications. The only time to use synchronous XHRs is when you're in the context of another thread (e.g. Web Workers).
What's wrong with setting up Express to use [your favorite data store] and just doing a tiny bit more work yourself? That's what I'd do, but I guess you could look into Coke or CompoundJS. Just out of curiosity: Is your reason for going for a Node framework strictly that you're tired of writing Ruby? If so, Node may be a bit low level for this. I'd personally go with Django if I just needed a ready-to-run MVC.
Oh neat, I didn't notice 9.5 was released.
It's been a while since I've used it, and I remember using it to filter through just flat table data, but I think the functions you can specify as method arguments give you enough flexibility to do what you are asking.
I've wrote this for IRCAnywhere - a project which some of you may heard of is currently undergoing a full rewrite, although I'm so pleased with the node-irc replacement I've created I decided to spread the word. It boasts a neat forking feature which puts clients in the background and keeps them online when your main process disconnects, you'll be able to reconnect to clients without any downtime and get any missed updates sent back to you. It also has a barebones api for node-irc-like clients which sends IRC events back to you formatted neatly. It's based on the lightening fast [irc-message](https://github.com/expr/irc-message) and [irc-socket](https://github.com/Havvy/irc-socket) - which are both super awesome and also worth a checkout :P
For the lazy: /r/irc --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
I tried Sails and it's awesome! Very much rails-like, generates all the CRUD and/or REST api of your models for free. And loads more.
&gt; The typical approach to making Ajax requests in an application is to use jQuery's Ajax, pass a success callback and update the DOM with the response. No, the typical approach is to pass around the promise that `$.ajax()` returns and then anyone can add `.done(handleResponse)` or `.then(pipeResponse, pipeError)` to that promise. &gt; Take a look at how 3 objects having separate responsibilities can use postal and not know that each other exist, thereby decoupling the application, and making it testable as well! What happens if the `$.ajax()` request errors out? You now have to subscribe to two different events: `fetched` and `notFetched`, correct? And the error handler isn't even setup yet.
I recommend Sails. It is super easy to work with, and the main devs seem super responsive/helpful/friendly/etc..
Most devs have handled this problem with the "module pattern" which is made possible with IIFE (immediately-invoked function expressions), which in turn are supported by the idea of closures. The basic idea is that a function is used to contain scope (since JS is functionally-scope), and "public" methods and variables get returned inmediately, creating a public interface: var outer = (function() { var a = 2; // public since it's explicitly returned var b = 3; // private since it's not returned var c = function() { // private since it's not returned return a + b; }; // need an inner IIFE here. IIFE inception! var inner = (function() { // public since it's explicitly returned var d = function() { return a + c(); }; // public values and methods return { d: d } })(); /** * Public values and methods * It's in an object simply so you can return multiple public values and functions. * If you only want one public thing, you can simply return just that, * i.e. "return a" or "return inner". * You can also change the name of the "public method" if you like: * "return {two: a}". Then access it with the new name: "outer.two; // 2" */ return { a: a, inner: inner } })(); // don't be afraid of this - () just means to execute the function. You can even pass in args: (arg, arg2) // tests outer.a; // 2 outer.b; // undefined outer.c; // undefined outer.d; // undefined outer.inner; // Object {d: function} outer.inner.d(); // 7 Will annotate this more after I get off my phone. ;) EDIT: Ok, off my phone now. Hope this helps! EDIT2: formatting, space-before-brace consistency
EDIT: Rewrote! This is a pretty solid implementation of the OP's question, especially for a phone post ;) /u/plopzer, for a bit more background Addy Osmani wrote a book called [Learning JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/) which includes a section specifically on the [Module Pattern](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript ).
I recommended it above, but I just want also mention that Sails uses Express for its controller layer / routing. Building out your own custom framework on top of Express is definitely the route a lot of people take, but there are some great frameworks emerging in the Node ecosystem that take care of a lot of that boilerplate for you.
If you use jQuery to do functional-style iteration on big json you might like http://danieltao.com/lazy.js/ This is pretty extensive query engine: https://github.com/bevry/query-engine I see this mention too but less advanced: https://github.com/crcn/sift.js
Oh interesting, I didn't know about invoking functions immediately. It looks intimidating to try and visually parse; I guess I need to go lookup this module pattern. Thanks.
Only thing I dislike (but understand) is it's on a subscription and not a one time fee. Not open source, and dev has to continue.
I think SASS kind of works in devtools, if you can make source maps: https://developers.google.com/chrome-developer-tools/docs/css-preprocessors
http://node-modules.com/search?q=CRUD
It's an ugly pattern for sure, but it's extremely helpful. JavaScript was around for over 10 years before this was created, so don't be intimidated! (judging by this article from 2007: http://yuiblog.com/blog/2007/06/12/module-pattern/)
Thank you! :)
People tend to be a bit leery of 'compiles2js' languages CoffeeScript, TypeScript, etc The tooling isn't always the best, and now and then trying to track down a big in the browser and figure out what's causing it in the 'source' language can be tricky. Although at least with dart, you could use Dartium and get native browser support for purposes of development/testing. I think there was also a time when the resulting code from Dart was pretty awful, but it's been greatly improved in recent releases. In terms of if Dart will make it, or the other compile2js languages - I'm wondering how much of a need there will be for these as ECMA script progresses. However, with TypeScript - it's still mostly just JavaScript with some extra stuff mixed in, where Dart is a new language that compiles to JS. I haven't looked into it that much yet, but with the newest release it's one of those things on my 'perpetual-to-do' lists as something to look into and play around with. Not everything that you need to learn needs to be a 'need to learn for the direct use of it in your day to day code' - there are lots of little things I fiddle with in my free time just to learn something new, and often I might get introduced into a new idea/approach/way of doing things that I can then translate into my usual workflows. So, "learning it for the sake of dabbling in something new", why not. But, "learning it and focusing it as a career-oriented goal and banking my entire financial future on it" ... might want to reconsider that. 
Hehe, I never knew that approach had a specific name, it's just the natural way to get certain things done! In fact, I recently found some old code at work that I wrote from 1998 where I did that (along with a form of AJAX using hidden frames)... guess I should have come up with a fancy name and made myself famous, huh?? :)
Will it ever take off? I think that's still unknown at this point, but it seems unlikely to me. That said, there's nothing wrong with the language itself. If you're familiar with other popular, strongly-typed OOP languages like Java or C#, Dart should be pretty easy to pick up. I don't think there are strange or alien concepts in there. Learning new programming languages, if only at a high level, helps you better understand the languages you already know. If I were going to pick a language to learn from the set of all interesting languages out there, it wouldn't be Dart. (I'd pick clojurescript)
&gt; I took a look at it and noticed that they had a module to make synchronous (and thus blocking) HTTP requests, and that this module is used by at least a few components. Seeing incompetence at the UI/UX level of application development for a framework targeted toward SAP devs is about as surprising as seeing incompetence in government. *Edit: Just looked around the site a bit more. Yikes: http://sap.github.io/openui5/getstarted.html*
Awesome idea! Does it work with source maps? And what about functions that return different values depending on the arguments?
Sails was a leading candidate for me but I couldn't tell if it had view support. Looked like it was only for serving up JSON?
&gt; Possible? Yes. Very much so! This is exactly what i do in my demo. If you check out the source [here on line 19](https://github.com/SchizoDuckie/CreateReadUpdateDelete.js/blob/ipromise/CRUD.SqliteAdapter.js#L19) you see that the verifyTables function executes and returns only after multiple promises (check if table exists, then see if there are fixtures to be inserted, then insert fixtures) and only returns to the parent promise (called from the Init function after this.db.connect(), which is in turn also a Promise. At that point there's like 5 or 6 promises chained up and queued up (Promise.all is awesome as well, it returns .then() when an array of promises has been resolved) As said above, i've blown my own mind multiple times while writing this. It's an absolute delight versus Callback Hell 
&gt; Yikes why yikes?
That's beautiful! Thank you!
Could be worse. My last job required all developers use Netbeans. Even frontend guys.
There is no long-term viability of Coffeescript. ECMA6 will make it obsolete, save for the select few who will inevitably cling to it for some reason. Dart's ECMA TC52 standardization will be important, and once its VM is included in Chrome (which isn't far away at all; the unified GC was already proposed to be merged) there will be a lot of discussion about Dart's future in other browsers. And none of that discussion will include Coffeescript.
One thing I see as sure: **IF** something replaces javascript in any meaningful capacity it is Google dart. Google put a lot of development into it and is committed to make it successful, and Google has the weight to push it into the minds of the developers and onto the machines of web-users, either by natively supporting it with chrome or by compiling it to an efficient enough javascript. There are other approaches to replace or augment javascript, like Typescript and Ceylon. They may be just as good or better than dart, but they are missing a powerhouse like google to establish them. On the language itself, from what I could gather in my short tryout, it is everything that javascript is not that makes javascript such a pain in the ass. There is a decent module system, there is a type system that makes the code statically analyzable, but you don't need to use it. It can call javascript and use javascript objects without much fanfare. I wouldn't be surprised if in 5 years the majority of new web projects are started in dart.
I dislike this architectural style, as it's not very intuitive. If you're writing an application, I don't see the problem with coupling a couple of classes together
yeah, it's like a full blown desktop UI framework like Windows Forms or Swing: https://openui5.hana.ondemand.com/#docs/guide/ApplicationSkel.html ugggggggggh :( 
Build your client-side using AngularJS, or EmberJS, and then you can share some code between both sides. 
Unfortunately this won't work when running frameworks like Meteor. For now I'll stick with [Tern](http://emmet.io/blog/sublime-tern/): * Intelligent autocomplete with types for object properties/methods * Auto-snippets for functions/methods * Understands docblocks for additional type information for methods * Scans all JS in your project folder so objects and properties are available for autocomplete everywhere * Jump to definition, next/prev occurrence, rename identifier * 100% free, MIT licensed
I'd suggest finding an XPath-equivalent matcher for JSON/Javascript. There's [JSONPath](http://goessner.net/articles/JsonPath/), but it's only limited XPath 1.0 (but it can do subserlects, returning the parent). Also see [this StackOverflow question](http://stackoverflow.com/questions/8481380/is-there-a-json-equivalent-of-xquery-xpath).
It definitely makes for a cleaner interface -- no argument there. I'm a bit hesitant to say its generally cleaner code, though. To my mind clean code is synonymous with obvious correctness. With that mindset I find your Attempt #1 pretty attractive for a simple object. For something a little more complex/portable, you could do something like this... var Outer = function() { this.a = 2; this.b = 3; this.c = function() { return this.a + this.b; }; this.inner = {}; var that = this; var d = function() { return that.a + that.c(); } this.inner.d = d; }; var outer = new Outer(); This gives you the flexibility of calling internal functions from Outer with a different context. var foo = { a: 3, b: 5 }; outer.c.call(foo) // returns 8 instead of 5 EDIT: I should note that internally mapping `this` to either `that` or `self` is extremely common in JS. EDIT2: HM. By proxying `this` for the `d` function I introduced a bug where you can't do something like `outer.inner.d.call(foo)`.
It seems really complicated at first but after a bit of reading it makes more sense. [This article](http://benalman.com/news/2010/11/immediately-invoked-function-expression/) helped me while I was learning about IIFEs.
I forgot gss. When used together you get compression levels of up to 80% on your code + battle tested pre-rendering. The trick is to use all of them.
This also works for CSS!! You can edit the styles in the "styles" tab or sources and the file will be changed.
This would be extremely difficult to use if the fetch operation needs to take an argument and has a chance of being called twice with different arguments in the same execution thread. The receiving end would have to filter the responses until it got the one it asked for. This method would also get really ugly and hard to maintain in a large application.
&gt; either by natively supporting it with chrome or by compiling it to an efficient enough javascript. It already compiles efficiently though*, and Dartium proves it can be in Chrome whenever Google flips the switch. I think a lot of people express disdain for the language when they really mean "meh, I don't feel like learning it." I mean, it's now at a stable release and it's backed by one of the largest companies in the world and one of the big 3 browser vendors. How much do you have to lose by giving it a shot? It may not take over the industry, but you'll be able to use &gt;= the 1.0 API for *at least* the next 5 years before something better even has the chance to take over. How many RIA's aren't rewritten within 5 years? Anyway, I wouldn't say you *need* to learn it, but if it interests you at all it's not going to be wasted time by any means. *[benchmarks](https://www.dartlang.org/performance/)
1 It has now basic source maps support, i.e. if you turn COLT error shield off you will be able to see original javascript in chrome when error is thrown. We do not have, however, typescript or coffee sourcemaps so far. 2 Plugin does not really track functions return values. But if you assign it to some variable, you will be able to see its fields once that code runs.
hmm, OK, not sure that I know enough to argue but just playing devils advocate. * what's wrong with the name spacing? it seems reasonable enough? * property/method names are always arbitrary? what's wrong with "text" to set the button text? ("press" seems like it should have been "click") * what is a better alternative approach to injecting gui components into the DOM rather than "placeAt" ? 
Interesting, I was told it can only find definitions in the same js file, has problems working with html script blocks, and then, being ast-based, it can't see dynamic stuff like https://www.dropbox.com/s/h9tz0f3cgermf7t/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82%202013-12-17%2021.18.51.png Any way, with COLT you know exactly what's there in the running app, while tern/webstorm/etc have to take their best guess. E.g. in webstorm, you type var foo = { bar: 123 }; foo. and you have looong list of useless unrelated suggestions, while COLT tells you what really was there (bar).
You can get 6 months of free COLT for Christmas, see https://twitter.com/code_orchestra/status/412598016886190080
As long as you set up your sublime project file it searches all files in the directory. This lets me automatically get all properties/definitions on the `Meteor` object, for example, which lives deep inside the .meteor directory. The problem for me is when using a framework like Meteor, my application has to be started in a specific way, live reload automatically happens and running files get version identifiers appended to them, and I need autocomplete for the server environment as well. Unless I'm misunderstanding how COLT works, it doesn't seem like it would work with this kind of setup.
IMHO (I've only done a few tutorials) Dart is pretty spiffy. Where it 'fails' is in browser support. Until it has broad browser support I can't really justify digging in. But if there are not enough people digging in, there will be no pressure to incorporate Dart in any meaningful way into browsers...
Glad you like it! I noticed that I left in some code in the "onclick" property of my facebook share button (within the html) that referred to a nonexistent function, while also explicitly attaching a listener function for that button within the JavaScript. Woops. I fixed this, but I doubt that this will fix the problem. If anyone is feeling brave and wishes to try posting an image from the app to facebook, I uploaded a corrected version.
I get a "App is in sandbox mode" error when attempting to share on facebook. This then directs me to the "else" block as you mentioned. Also, certain users may have issues depending on what browser they are using. I imagine not all browsers will support encoding images in this way.
Definitely an important part of writing modular JavaScript. I used it a lot before moving on to RequireJS.
You can use vanilla JS (with [polyfills](https://github.com/inexorabletash/polyfill/blob/master/es5.js) if you're dealing with older browsers). So using the example [zhubrixxx](http://www.reddit.com/r/javascript/comments/1t3a6l/how_do_i_query_json_object/ce3war0) used with LinqJS you could do the same with less with plain old JavaScript: var queryResult = jsonArray. filter(function (x) { return x.user.id &lt; 200; }). sort(function(x) { return x.user.screen_name; }). map(function (x) { return x.user.screen_name + ':' + x.text; }); Seems silly to need a seperate library to do what JS does on it's own. If you're doing a lot of this stuff, however, have a look at [Lo-Dash](http://lodash.com/) or [Underscore](http://underscorejs.org/). (LoDash being the preferred of the two)
I took a peek at both and was not intrigued in the slightest. If there's anything to Dart, I think it needs more love from someone good at writing compelling tutorials.
JavaScript is a programming language. Browsers have a 'Document Object Model', DOM for short. With JavaScript, you are able to manipulate the DOM - although you can do much more with JavaScript than just that. There are many libraries / tools / frameworks to make dealing with the DOM easier, jQuery being the most popular. For example, given the following markup of: &lt;div id="someItem"&gt;Text to Change&lt;/div&gt; You could use jQuery to modify the CSS properties of it by doing something like: $("#someItem").css("color","red"); With jQuery, the stuff that goes between the quotes is a selector. You could do the above without jQuery by doing something like document.getElementById("someItem").style.color="red"; If your just wanting to do things like 'make things fade in/out/change color/etc', maybe just focus on learning jQuery - it greatly simplifies interacting with the DOM, and will probably save you a lot of headache for the time being. 
I really dig sails, their Gruntfile could use some work (live reload etc), but sails is pretty solid.
Sails is pretty robust
You can use NPM packages in Meteor.
seen Hapi? By Walmart labs - heard it's pretty good (although I haven't used it myself) http://spumko.github.io/
hi again. if your using pure javascript use something like: var x = document.getElementById('idOfTextArea').value; document.location.href=x; jQuery makes it a bit easier: var x = $("#idOfTextArea").val()
Thanks, I'll try out jQuery. 
I've been looking into Sails lately. It looks really nice, I'll probably use it on my next small project. 
I can't believe nobody on here has mentioned [lodash](http://lodash.com/docs) yet. Its like a pocket knife for JavaScript, I never leave 127.0.0.1 without it. Check out the .where, and .pluck methods. There are lots of reasons to use lodash beyond that. All of the methods are chainable, you get a pretty bangin' templating tool, a sane .forEach method, and more. Its very lightweight and more sensible than underscore.
This blog has both some really good articles explaining different topics but the best thing IMO is the road map for learning Javascript. http://javascriptissexy.com/how-to-learn-javascript-properly/ It's mainly aimed att people who really want to learn javascript from the ground up. There is also another roadmap for those who want to get into more advanced javascript.
not without 'meteorizing' them.
It's a different approach to building apps, and seems more targeted at enterprise-developers more comfortable with back-end/server side code than web-developers. Being able to build up a UI programmatically is something that some developers are comfortable with. The target audience of this seems to be different than the target audience of many of the other JavaScript UI frameworks. Seems like it's more in the realm of things like Ext JS than Angular, Backbone, etc. Sounds like the SapUI5 has been developed / used internally within SAP for a few years now, so quite likely it does have it's roots as far back as 2006. There are a few interesting bits to it, but it's not likely something I'd invest time in learning/trying out myself. But as someone who does build 'enterprise-level' line of business type web-apps, I could see where someone might want to consider this and how it can have a place for some people. 
There are huge problems using frameworks like Angular or Ember with Sails atm, best route is to go with Backbone. You essentially have to create a fake controller that routes partials in sails, meaning you have to replicate every route in angular in sails. Ugly hack, but it works.
No, the meteor-npm package lets you require npm modules with a packages.json file and `Meteor.require()`. "Meteorizing" NPM modules just means creating a package that depends on an NPM module and automatically exposes it as a global variable on the server (and the client, if applicable). It just means adapting the NPM module to Meteor's isomorphic style.
You write specialized code to traverse that object tree like everyone else.
Right, that's what I was going for there. Good catch.
I mean if you want to require NPM modules without Meteorizing them, you can. You don't have to meteorize them. You can require them directly in your application with `Meteor.require()`. I never said anything about forcing modules to run synchronously, where did you get that? Edit: I think you're talking about fiberizing callbacks. I wouldn't call that "meteorizing", nothing about fibers is specific to Meteor. Fibers also don't cause code to run synchronously, they allow you to run asynchronous code in a synchronous style.
JavaScript only has function scope at this time. (I am intentionally ignoring let.) Public and private are dictated by the functional (lambda) structure of your code. var a = function () { var b = 5, c = function () { var d = 10; }; }; In the above code the function c inherits access to the scope of function a. This makes b public to the scope of c. Function a cannot see into function c, so variable d is private and unknown to function a. 
It say my error is that "Yes" is not defined. How do I fix this?
Put quotation marks around Yes, as in "Yes". Also, use two equal signs or you're assigning "Yes" to userAnswer.
It'd be cool if you could `.push(promise)` into the `Q.all(array)` assuming it hadn't already been resolved.
I'll be needing something similar to this myself, and was planning on using google maps. Assuming you have looked into that one, why doesn't it work for you? 
&gt;Fill the code section with the code, to get the previous result, without modify obj. &gt;Why this happens? What?
I got the first one right but I have no idea why it invokes. If someone so inclined could please explain 'why' without giving away the answer to others that would be nice. +++no spoiler+++ function test(){ alert('test');}(); 
So I did that &amp; it still says something is wrong, so I'm thinking there is something wrong with the way they programed the assignment. I sent them an email, but until they fix it I can't advance to the next lesson. 
I can't say much against it as I didn't really give it a chance. I judge too quickly. I'd HIGHLY recommend leaflet though. It's a fantastic library with tons of plugins for whatever you need it for. [Here](http://www.getkeyps.com/#map) is my map, using it to plot whenever someone sends a tweet regarding a specific term. Site JUST went up I've still got to edit titles and meta tags.
cheers got it working, wary of jquery until i understand the basics of vanilla javascript. I dont need any of the fancy dom manipulation yet! Thanks again 
Post your code here again. Also, putting 4 spaces before your code will format it like this Also leave a blank line between each line of code so that they actually end up on separate lines, otherwise you will get this: Line 1 Line 2 Look at the source of my comment to see what I mean Also keep in mind that strings are case sensitive. There is a possibility that they are testing an all lowercase "yes"
Is "But you seemed to be arguing that heavier editors were bad because they weren't suitable for all tasks." your explanation for why you decided to jump in and make a point that one should use a fit-for-purpose editor for the task at hand?
Also I tried to slim down the syntax signficantly. Is it viable? Would love to hear some opinions.
My answer actually didn't use any of those characters and still launched. 
Check out http://locomotivejs.org
I agree. I'm not sure what he was going for there.
Dart is meant to be run natively. Technically it compiles to JavaScript, but only after being ran through dart2js.
There's some sort of logical fallacy here over number of users vs longevity of a development language.
Ah this is good stuff. I actually planned on messing around on a 2D game but haven't got to it because I want multiplayer, and I want to be really comfortable with Node before I even start it. It looks like you are loading XML files. Can it be done on the fly or is the whole map loaded at once? I was planning on doing an on the fly style where if you got closer to the edge of the map it would load up the next part. Good job, by the way. I knew there were some isometric projects up on GitHub but this runs pretty smooth. It might also help if you set up a to-do list, as I like messing around in projects but I'm not quite sure what's busted and what's in planning.
I haven't really started looking at the *content* of the site, but the site itself is almost unusable for me. First of all, a light font on a light background === headaches. Second, I go to scroll down, and there's no more content! I realize what's going on, so I start to scroll over (two-finger scroll on a Mac), and it starts scrolling over AND down, and then I can't use the two-finger scroll to get back up. I'm sorry to put it this way, but the site is a nightmare. Edit: With a little more playing, I've found that I'm unable to use my usual two-finger scroll unless my mouse is in one of the section divs. That's why I can't scroll back over/up when I'm taken too far down. Edit 2: OH GOD, THE CONSOLE.
... Really? Works perfectly fine with a regular mouse. Actually looks and works better on my tablet. And my phones seems to be fine too. What browser are you using? I'll try it out... Are you using Opera? Gestures might be messing with the UI. It is guided with a left and right button.
Hmm. I dont have a problem with the colors... I find it funny how you use a === iteration instead of == to describe your discomfort.
 // I *think* this will work var outer = { a: 2 }; outer.inner = (function(context) { var b = 3, c = function() { return context.a + b; }; return { d: function() { return context.a + c(); } }; })(outer); 
I don't want to hate on the site, but I do agree with /u/minrice2099. The white on light-blue is kind of difficult to look at for an extended period. Also, the scrolling to the right is a little difficult to understand. Once I got to the Documentation "page", it's cut off slightly. I recommend changing the colors and maybe making the navigation a little more standardized. Good luck with the language!
You're using = instead of == or ===, and Yes needs to be in quotes (single or double). Consider converting the test string to lowercase and testing against "yes" to eliminate case issues. 
The browser is the latest version of Chrome stable (31.0.1650.63). My computer is a bit older (6-year old MacBook Pro) running an out-of-date OS (10.6.8). I know the hardware/OS is probably to blame. I can pretty much rule out gestures, as this hardware only supports scrolling (not true multi-touch). I'm trying to debug the issue, but It's a tangled mess of minified jQuery/jQuery plugins with event handlers and timeouts, so I don't think I have the stomach for it at this particular moment.
Of course I used `===`; this is /r/javascript, after all :P
It doesn't work well in chrome for me. In fact I'd go as far to say it's the worst web page I've used in the past few years. You've invented an entirely new way to browser web pages that instead of scrolling up and down, requires the user to use a left and right button (but not those on their mouse). The implementation of this is both slow and non-intuitive. If you want people to get get excited about your idea, show a compelling example, with dark text on a light background on a normal looking web page. People can then evalulate jsql, not your web design.
Fair enough. I thought it'd be a cool design. I don't have a problem using it. Guess I have to do the same old drab everyone else does... Am I right?
Additional: You might want to prototype the methods if you're planning on having multiple instances of Outer objects. Otherwise it would duplicate the methods for each instance. 
I would also like to add that JavaScript is loosely-typed, which can lead to a few headaches if you aren't paying attention. You can also use JavaScript for some object-oriented programming functionality.
Maybe http://krakenjs.com/ would suit your interests? 
I'm interested in hearing more. but as is I'm having a hard time taking you seriously because, as others have said, your website is that bad. I am absolutely holding my judgement though, because maybe your experience with web dev is somewhat limited.
lol don't even bother with that. I'm dumping that page. Going to remake it with a standard web design and a scrollspy.
The trick is that function declarations cannot be invoked inline. When you start a line with the `function` keyword, that's a function declaration. If you can trick the line into being treated as an *expression* (there are many ways to do so), then you can call it immediately. Edit: I may not have everything *completely* correct here, so take a look at [an explanation from someone much smarter than me](http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/#question-about-surrounding-parentheses).
If your goal is to communicate your idea for jsql then I'd suggest you do it in a way that feels as familiar to your audience as possible. Think about scientific journals - there is a reason they all look the same. It's the ideas that matter. If you want to introduce a new way to share ideas on the web then do that separately.
 var foo=window.backgroundColor; ... console.log(foo); &gt; undefined
When the rest of an application is waiting upon the response text of XHR the request is always blocking. This is common in applications that are focused upon computation where the computation is longer than the request opposed to user interaction focused applications. Asynchronous requests are more beneficial the larger quantity of requests there are. There is a lot of application overhead to each request though so a 100% increase in the number of requests does not mean a 100% increase in performance by running all requests simultaneously. Each request requires IP resolution, DNS lookups, proxy/router negotiation and so forth with packet headers at layer of the stack. Additionally, asynchronous requests require a bit more overhead in the JS compared to synchronous requests. This the various points of overhead, some of which can be mitigated and others of which are increasing cost factors, must be considered the are pros and cons to synch and asynch ways of fetching requests.
The users response is a string and the if statement needs to check the variable for a string, so yes needs to be in quotes. Also a single equals sign (=) means you are assigning a value, but you are not, you are comparing values, so you need to use 2 (==) or 3 (===) equal signs. Lastly, there is a semi-colon missing at the end of the if true console.log event. Here is what the code should look like - http://codepen.io/anon/pen/bfzFa
I can't tell if he's trying to call me a "foo(l)" or not... &gt;.&gt;
I'm pretty sure you meant natively, but saying it runs naively is just too funny.
Very loose typing.
You're grabbing a value that doesn't exist, and the engine is telling you that it didn't exist. That's not typing at all.
He wants you to write some code in the section // Fill the code That will make that snippet produce the sample output. Then he wants you to explain why your code works.
Dart is great! Think jQuery meets Java with easy to remember JavaScript-like DOM methods and OOP classes! Here's the gotcha, Dart just hit 1.0 and is being sent to ECMA for standards approval, if approved that will force a hand to other browser vendors to include it as an alternative to JavaScript. (Not saying they will but it will force some vendors to include it as part to openness of the web). For browsers that don't support it, dart2js can convert dart code to optimized JavaScript. Another few pluses is you can build Chrome Apps with Dart, and build sites with AngularDart. 
"Oh, iterate through this array starting at index 0? Aww, \*yawn\*, what could go wrong if I start a bit closer to the end instead? I'm sure no one will mind, lol"
Why is it a flaw that something which isn't defined would return undefined? It allows the language to be more flexible and easier to use.
Yeah, it might not be needed to have dynamic loading (although it doesn't hurt). Probably would be fine just having the map built but any AI inserted when the user gets close to that point. But, sooner or later someone will want a Daggerfall size map, and loading a piece of it beats loading that size. Is it possible to work with it in a turn based style? It could definitely work for a XCOM/Jagged Alliance/Fallout 2/Civ style if it can be "paused" here and there. Your demo has rain falling down, it would be awesome to have a Fallout 2 style action pause with rain still falling down, that's gold right there. The refocus issue from what you say, sounds easy to fix. Although, I'm sure if it was easy it would've been fixed by now. Is it able to work with 1 texture for rotating 4 times? Starred by the way, even if I don't contribute, I want to see it keep going! 
It's worth noting when people actively choose a language on a completely voluntary basis. That indicates a need or a benefit which is provided by the language. Although a specific language may come or go, that need will remain and will influence the languages that come after it. Also, note that longevity only has meaning when talking about number of users, otherwise, as long as a single user remains, all languages would have the same "longevity". You do know that COBOL, FORTRAN and many other obsolete languages are still in active usage yes?
This project would be great to have on [npm](https://npmjs.org) so that people can just `npm install isometric`! I [posted an issue](https://github.com/beakable/isometric/issues/5) about how to do that.
No, you don't need this.
WRT less hate. It is likely that a large proportion of Javascript 'programmers' only know Javascript and have no formal CS education. It is unreasonable to expect reasoned argument from ignorant people.
Oh, I didn't see that comment. I was just confused by the grammar of the instructions and skipped that one.
Nothing is absolutely bad, nor absolutely good. There are a lot of examples where the best solution isn't used because something else got there first and took the majority of the userbase (and therefore the majority of the extension libraries) Learn it if you want, best case scenario it becomes popular in the future, worst case, it doesn't and you get something useful out of the design ideology, but never actually make a thing with it. Either way it's not totally wasted time.
 I know people on the closure team have worked a bit on the dart compiler, but I agree, currently the output is to big. 
You should start with nothing but regular, or vanilla, javascript, and then when you fully understand that, you can move on to a library like jQuery.
Which part do you disagree with? IIRC, all passing is by value but when we pass a "complex" obj into a fn, it passes the value of the *reference*, and not of the object itself. Which is why this works: o = {a: 'a'}; (function mo(obj){ obj.b = 'b'})(o); console.log(o); // Object {a: 'a', b: 'b'}
We do understand that COLT is not for everyone. tbh I have 0 meteor experience, but I can imagine there are specific ways to write your app in the way that you do not need a tool like COLT to hot-swap some parts of code. maybe meteor is one of them, and then you don't really need COLT :) then again, if your app is not written in one of these specific ways, COLT is the tool for you.
It would be nice if I could inject COLT into any arbitrary browser and/or node environment and have that linked to my Sublime project. That would definitely make me think about subscribing.
Getting ECMA standardized doesn't force anything from anybody. But it _may_ be enough to encourage other companies (eg, Microsoft) to release support in their development tools, and perhaps ActiveScript, which could eventually lead to browser support after a very long time. 
There are enough of those already out there.
Codeacademy has its own Q&amp;A section. It's likely your question is already asked by someone else.
Oh definitely. That's pretty much the one thing right now that annoys me about Sails... enough to consider contributing... so maybe it won't be the case for too much longer ;)
If you go through your code and monkey patch various functions with code like below, you will get huge performance improvements. Way better than ASM.js, you can even have the ORM output to dev/null for ultimate DB throughput. function naive_random() { //determined by completely random dice roll. return 5; } function naive_sort(arr) { //the indexes are already in order return arr; } edit: i dont actually know dart syntax :(
&gt; Google put a lot of development into it and is committed to make it successful until they decide it's not doing as well as they'd like and drop all support for it like they've done to other projects of theirs that have seen a ton of use. I like google products, and I just took a peek at Dart yesterday, and plan to spend some time this weekend running through their tutorials, but I don't entirely trust google to stand by their toy projects. I want to try it out on a project and see how it does compiling to javascript. from my little foray into it yesterday, i kinda like it.
I think this is not a problem of this subreddit, but of in programming and development in general. Most developers tend to think in terms of absolutes: black and white, good or bad, sucky or not-sucky. Where experienced developers understand that all tools (whether that be a framework, language, IDE, text editor) have its pros and cons. And the context of how the tool is used determines if it "sucks" or not.
[Looks fine to me](http://jsfiddle.net/rFD7u/)
You might have an easier time if you place your 0,0 point at the center of your canvas using [translate](http://jsfiddle.net/rFD7u/2/)
[And show center for good measure](http://jsfiddle.net/rFD7u/3/)
&gt; Again, I really don't understand the blanket hatred and dismissal sometimes exhibited in this subreddit. Getting over that will avoid many instances of "confusion" when people you respect say good stuff about what you've been manipulated to hate. Nothing to do with this subreddit. This is a feature of anything where anyone puts all their time and effort into adopting something. When something new comes around that invalidates all this work, people will get defensive. PC vs Macs vim vs emacs Netbeans vs Eclipse Ubuntu vs Mint FreeBSD vs OpenBSD .net vs jvm the list keeps going
 So... low level programmers think in binary while higher level programmers think in functions? ;)
First of all, you want &lt;form action="myphp.php" onsubmit="return !ajaxSubmit(this);" method="GET"&gt; instead of what you got now. Then your function ajaxSubmit looks like this: function ajaxSubmit(form) { // Serialize form for (var data = [], elems = form.elements, e = 0; e &lt; elems.length; e++) { // do not serialize disabled elements, unchecked radio/checkbox inputs or buttons if (/submit|image|reset/.test(elems[e].type) || (/checkbox|radio/.test(elems[e].type) &amp;&amp; !elems[e].checked) || elems[e].disabled) continue; // serialize if (elems[e].options) { data.push(encodeURIComponent(elems[e].name) + '=' + encodeURIComponent(elems[e].options[elems[e].selectedIndex].value)) } else { data.push(encodeURIComponent(elems[e].name) + '=' + encodeURIComponent(elems[e].value)) } } var formUrl = form.action + '?' + data.join('&amp;'); // now make that AJAX request (I guess you can do that yourself), return false on error return true; }
&gt; Hit up the Dart /r/dartlang subreddit. seems to be more of a circle jerk around Notch writing a game in dart than anything actually useful
First of all, your code sample is incorrect. If you try to access a _variable_ that doesn't exist, JS will throw an error: &gt; var foo = my_array; ReferenceError: my_array is not defined What you're doing in the previous example is trying to read from a hash table (`window`) using a key that doesn't exist (`randomAttribute`). In that scenario, JS returns a default value of 'undefined' as a graceful fallback. It's up to you, the developer, to know if there is a chance for that value to not exist and test accordingly. Are you just complaining because JS doesn't have training wheels and expects you to know what you're doing? As any mother will tell their child, *"Because that's how other languages do it"* is a poor argument.
There's another weird one like this. I think it's .delete
Cool, that didn't work, but it did get me far enough along that I could fix it myself. Here is what I did to fix it: First, 'this' was passing an [object Window] so length wasn't being defined. So I had to update what I was passing as 'this' as shown: &lt;form id="myform" action="javascript:void(ajaxSubmit('myphp.php', this.myform))"&gt; Then I tweaked the ajaxSubmit, probably unnecessarily, but made it more readable for me: function ajaxSubmit(destination, form) { log('Destination:' + destination); log('Form:' + form); // Serialize form var data = []; var elems = form.elements; for (var e = 0; e &lt; elems.length; e++) { // do not serialize disabled elements, unchecked radio/checkbox inputs or buttons if (/submit|image|reset/.test(elems[e].type) || (/checkbox|radio/.test(elems[e].type) &amp;&amp; !elems[e].checked) || elems[e].disabled) continue; // serialize if (elems[e].options) { data.push(encodeURIComponent(elems[e].name) + '=' + encodeURIComponent(elems[e].options[elems[e].selectedIndex].value)) } else { data.push(encodeURIComponent(elems[e].name) + '=' + encodeURIComponent(elems[e].value)) } } var formUrl = destination + '?' + data.join('&amp;'); // now make that AJAX request (I guess you can do that yourself), return false on error var xmlhttp; if (formUrl=="") { document.getElementById("result").innerHTML=""; return; } if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp=new XMLHttpRequest(); } else {// code for IE6, IE5 xmlhttp=new ActiveXObject("Microsoft.XMLHTTP"); } xmlhttp.onreadystatechange=function() { if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { document.getElementById("result").innerHTML=xmlhttp.responseText; } } xmlhttp.open("GET",formUrl,true); xmlhttp.send(); return true; } function log(msg) { setTimeout(function() { throw new Error(msg); }, 0); } So thanks for the help!
Use a linter like jshint. It would have warned you about using a reserved word.
It can't remove b from y because y doesn't have a b yet. Delete does not follow the prototype chain. So the b you are seeing is from x.
Well, I don't want them anywhere near my codebases
That's true; I missed that. Also, Python has an awful habit of throwing exceptions that originated seven levels up through sixteen different libraries because it expected a list, not a tuple for example.
You are not utilizing promises at all really, see how much simpler it could be https://gist.github.com/petkaantonov/8027804 Never use new Promise when you already have a promise. https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern. You are still thinking too much like callbacks or async helpers. There is no need for example to duplicate error handling code because exceptions bubble all the way from deepest individual mapped chain to the top level .all.
Yep, specifically, IE&gt;8 will allow keywords as property identifiers per ES5, IE&lt;=8 will throw a SyntaxError per ES3.1.
See, that's much more helpful than a one-word answer of "no".
Acknowledged. Your being accustomed to something lame will not warrant my tolerance of it. May we improve.
True that, some developers apply absolutes to opinions. Maybe it's the experience or age, but I've gotten to a point where my colleagues no longer think that way -- both online and in person. This makes the blind dismissals particularly flagrant and, in a case such as this where someone is "confused", perfect for improvement. 'Tis our own choice. 
Thanks, didn't even think about that since I never do that, but shouldn't be too much trouble to fix in 1.1.1.
When evaluating `1 == '1'` the '1' is not converted to 1, it's the other way around. Try running `'1' + 1`, what do you get? Numbers are cast to strings when combining them in an expression.
the first return is just a set of two expressions that are logically ANDed together via &amp;&amp; so you can read it like: if expression1 AND expression2 are true. So if word.chartAt(0) == word.charAt(4) (expression1) is true, AND word.charAt(1) == word.charAt3 (expression2) is true, the return returns true. Otherwise, the entire evaluation of the two expressions is false, so return returns false. A more verbose version of that would be: var firstAndLastAreEqual = word.charAt(0) == word.charAt(4); var secondAndNextToLastAreEqual = word.charAt(1) == word.charAt(3); if (firstAndLastAreEqual &amp;&amp; secondAndNextToLastAreEqual) { return true; } else { return false; }
I dont know how live editors work but it sounds like it would be pretty buggy. I would just make a function that can be accessed in the console that will position the elements: window.setpos = (function(el) { return function(pos) { el.style.left = pos + "px"; }; })(my_element); You can use this to find the settings you want and then use those in your script. Hope this helps! 
Omg seriously, wtf. Thank you thank you thank you!
Another word that MSIE trips over is "default", and that's a word I like to use a lot for a property in my objects.
Including [JSHint](http://www.jshint.com/) in your workflow is by the far the best way of preventing these sorts of gotchas.* [Grunt](http://gruntjs.com/) has a plugin for JSHint. If you use a different build tool, I have a simple [JSHint API wrapper here](https://github.com/jamesshore/Autocommit). There's [more options here](http://www.jshint.com/install/). *It won't catch all of them, but it's still totally worth it.
niceone. 
Hmm, it's a little vague about how it works on the website. But what I mean is if I have an existing node application running, with an existing browser connected to that application, it would be nice if I could access the global variables of that app from an arbitrary Sublime project without having to run the server in any special way. I'm not sure if that makes sense, or is compatible with COLT's philosophy. Edit: I guess what I mean by injecting is this - what if I could add some JS to run on both Node and the browser, and COLT would run a separate web server that communicates with those scripts, getting access to variables for Sublime's autocomplete?
Had a fine time getting around all the browser security and conflicts with other page scripts. Had to avoid using any dom framework like jQuery or Zepto. requestAnimationFrame and translate3d made a big difference to performance particularly on Chrome. Couldn't find a workaround for Facebook blocking the loading of external mp3s, interestingly only Chrome respected their content security policy directive. [Source code](http://srv.re/catmas/html/assets/js/build/catmas-bookmark.src.js) is here for anyone interested.
Sometimes I porposly use == when expecting an array since an empty array is false.
[Brackets](http://brackets.io/). I think for JS the page reloads on save, but HTML and CSS are updated live. Or use your editor of choice and set up [LiveReload](http://livereload.com/), which I think works with JS.
Even shorter guide to faster image loading: Do not simply resize a 1.3MB 1389px x 2448px image, it will take forever to load.
I'd recommend not using a javascript uri in the action attribute. This mandates the need for javascript to be on in the userAgent for your form to work at all. You want to keep the action attribute clean and pointing to the php page that handles the request, you can reference 'myform.action' to get a reference to this page. I would think the following should work : &lt;form id="myform" action="myform.php"&gt; .... &lt;/form&gt; &lt;script type="text/javascript"&gt; document.getElementById('myform').onsubmit = genericAjaxSubmit; function genericAjaxSubmit(e){ var ev = e || window.event; var form = ev.target || ev.srcElement; // form#myform var action = form.action // myform.php // etc. } &lt;/script&gt; Although it is untested... if you want it to be really generic, use a class attribute to the &lt;form/&gt; and attach the onsubmit handler to any forms with this class -- the script could then be used on any page with a form of that class. Of course you'd need a #result element to hold the results -- but DOM manipulation is a wonderful thing, you can always just append a DIV to the FORM you get to house the result. Finally, `console.log` for the win! edit : also, you return `true` and perform an ajax XmlHttpRequest... the form will submit and bring you to 'mypage.php' likely before the ajax routine returns and changes the #result element.
There's no really good answer to this without knowing exactly who your clients are and what their security policies are. To me it seems unlikely that a large organisation would simply disable client side javascript, but of course if you have a large number of clients then it's likely that a few of them may have done that. To me, the real questions are: * which of your clients have disabled javascript? Don't just think about it, ask some key clients, you need to know exactly which clients might fall off the boat if you go with client side logic. * what sacrifices / costs will you have to incur to go with only server side logic? These may be less than you think.. most serverside MVC frameworks can handle templating as well as angular can. Sorry if that's not very helpful :-/
[I find promises to be much easier/better to compose or reason about.](http://promises-aplus.github.io/promises-spec/)
If you use AMD it will cause your loader to blow up for IE8 as well. define([ 'foo', 'bar', ],...);
Use Google Chrome's dev tools! The [workspaces](http://www.html5rocks.com/en/tutorials/developertools/revolutions2013/#toc-workspaces) feature is coming out of experimental (it's automatically enabled in Canary), but it's actually in stable right now (behind a flag and settings menu). Whenever you save a script in the sources panel, any event listeners (and many other things) are updated immediately; you don't (necessarily) need to refresh the page to see the script change. Editing CSS in the sources panel is even better - changes happen *as you type*! You don't even need to save to see the difference. Unfortunately, HTML does not live edit. It requires a save and refresh to see the changes.
Brackets *is* pretty awesome. It's still fairly young, but it's got amazing code completion for JavaScript (it respects JSDoc syntax for code suggestions), and it can do live HTML editing (you can see the changes in the browser while you type them; you don't even need to save). Plus it's hugely extensible (you can write changes to it purely in HTML/CSS/JS), and it's got JSLint built-in for easy static analysis.
So why is this better than just using CSS 3D transforms? Their demo just looks like some simple rotation and translation. 
Doesn't scale to fit my phone. Cant even read home page.
The positioning of everything is done using CSS 3D, and CSS 3D is hardware accelerated, therefore everything is hardware accelerated.
If the function is coded for a 5 length palindrome, even a valid 11 length palindrome should fail, as you noticed. They probably just wanted to keep the complexity down (what about a 9 character palindrome? A true palindromic check function would need to handle any arbitrary length string). The function name suggestions it only validates 5 anyways. It is good for you that you are noticing this.
What's the difference between JSHint and JSLint? JSLint looks like an angry old lady to me
Or they could require Gmail / YouTube users to use a Dart compatible browser. I wonder what Mozilla, Microsoft, and Apple would do then?
But its open source... You do not need to rely on Google to do all of the work, and if they drop it you can still use it and update it further.
yeah I agree. seems if they want to go the commercial route, they will need to be selling support/maintenance. but then why not make the source available unsupported? who knows what they will do in the future. I just wish it was somewhere I could "follow" it or maybe "star" it somehow so I could track its progress.. 
As a professional Javascript developer (web developer in general), I would recommend creating a simple function that accepts any string and is generic enough to deal with the 5 character limitation as well as not hard coding it. This function should do that: /** * @param word {string} - a word to test * @param limitNumChars {int} - optional, a number of characters that the word should be tested against. */ function testPalindrome(word, limitNumChars){ //can't be a word of 0 length or a length greater than the limit if(word.length === 0 || limitNumChars === 0 || (limitNumChars &amp;&amp; word.length &gt; limitNumChars)){ return false; } //we passed the length test //The following is a naive reversal that doesn't work with some Unicode characters //note: other examples will have the same problem. var newWord = word.split('').reverse().join(''); return newWord == word; } Here's a variation on the way others are writing it. This one is more generic. /** * @param word {string} - a word to test * @param limitNumChars {int} - optional, a number of characters that the word should be tested against. */ function testPalindrome(word, limitNumChars){ //can't be a word of 0 length or a length greater than the limit if(word.length === 0 || limitNumChars === 0 || (limitNumChars &amp;&amp; word.length &gt; limitNumChars)){ return false; } //we passed the length test //The following is a naive loop that may not work with some Unicode characters //note: other examples will have the same problem. var i, j, passed = true; for(i = 0; i &lt; word.length; i++){ //calculate the letter position opposite to i j = word.length - 1 - i; //check if opposing letters match, break when one doesn't if(i === j){ break; } if(word.charAt(i) != word.charAt(j)){ passed = false; break; } } return passed; }
I like you.
I'm curious why IE wasn't tested if you know you have customers using it.
I like to use it when dealing with data from an API. I often know what value a variable might be, but its type might get fudged along the way
Kind of a hack, but you can convert a string to a number by multiplying it by 1, ie. '42' * 1 //=&gt; 42 This will only work if the value of the string is numerical. Not sure about browser support.
Hehe, the light on the top flashes on and off!
There is something wrong. If you used &lt;form onsubmit="console.log(this)"&gt;, console.log should give you the form tag on submit.
There's a video I can't immediately find the reference to, but wherein Douglas Crockford (creator of JSLint, identifier... specificator... something of JSON) says, in response to this very question, "There are a lot of stupid people out there in the world, so I'm glad that there's a tool like JSHint out there for them." JSHint is basically JSLint without the unbearable arrogance.
That's what I am talking about :). Every other Javascript article of 'techniques' or similar always have to show the same combination of tricks. Come on, just read a bit about Javascript and it will all be explained. == vs === ? Almost every imperative language has these, no need to explain the difference everywhere. Javascript has global objects? Yes, no need to repeat that all over the place and so on and on. Seriously I stopped reading anything on Javascript except for htmlrocks and MDN because JS guides are a big failure. MDN is enough instead of these praised articles which strangely seem to be popular. Everyones likes them, upvotes them, comments on them: "DIDN'T KNEW THAT THANKS"
Actually, no: http://jsconsole.com/?if%20(%5B%5D)%20alert(%27empty%20array%20is%20true%27) But when an empty array is converted to a string, you get '' (the empty string) which is indeed equal to false, if by equal you mean == and not ===.
In my limited experience working for a large government organization, JavaScript wasn't disabled for us.... From what I've seen, most people that have JavaScript disabled are privacy/security enthusiasts running NoScript. If scripts were disabled, the enterprise in question is probably rolling with a locked down public security zone -- these security zones are pretty customizable -- trusted zone in all likelihood allows scripts (and probably other stuff, for intranets; if they use are a Microsoft shop they are in all likelihood using SharePoint which requires a trusted zone with scripts enabled).... adding your domain to the trusted sites would be enough to make it go. Of course, that's in the hands of IT but if you are selling this product and management has bought into it -- there's not much they can do but to enable it or find something else. In all honesty though, even with a locked-down IT setup where users don't have local administrative rights, firefox/chrome will install successfully to the AppData folder.
yes, you should be able to have two COLT instances, one dealing with client code running in the browser, and another dealin with node script. in both cases, COLT communicates with running app over websocket (in browser there is native support or ajax fallback, in node you should install ws package first).
Still too much for their "Mastering NGINX" book.
What about DOM elements, nodeLists, arrays, arguments object...? These objects are not simple objects but complex objects. As you know a primitive is created by Javascript using the same constructor type that could be used explicitly. var str = 'string'; var oStr = new String('string'); // true str.constructor === oStr.constructor
The two things you'll here from regular programmers first seeing Ember are 1.) This is amazing 2.) And probably the steepest learning curve I've ever seen. I also am always amused by how closely what I'm working with parallels what you're working with. Props for actually writing down though :D
Have you looked at window.setTimeout? 13 minutes are 780000ms, by the way.
TeamJ Hollowaychuk
no, just the number.
Looks very interesting. Thanks! How does ember stack up against angular and backbone?
Just some things that ive noticed: You're declaring an array of Images, setting the src of that array of images. However, when you access that array again, all you do is read off the src of the images. Instead of doing that, you could do var faces =["dice1.jpg","dice2.jpg","dice3.jpg","dice4.jpg","dice5.jpg","dice6.jpg"]; Then later access the images with document.dieimagea.src = faces[choice]; However, since the image names only vary by one number, you could simply skip the array and do document.dieimagea.src = "dice"+(choice+1)+".jpg" You assign the value of choice to be Math.floor(Math.random()6); But i believe you mean to write Math.floor(Math.random()*6); Instead of declaring a form and a input to use to show the status of the game, you could simply do &lt;div id="status"&gt;&lt;/div&gt; And set its value with document.getElementById("status").innerText = "You lose." Instead of doing document.write("&lt;center&gt;"+msg[today-1]+"&lt;/center&gt;") You could declare a center tag like so at the bottom of the page &lt;center id="centeredStuff"&gt;&lt;/center&gt; And in the same script tag, window.onload = function() { document.getElementById("centeredStuff").innerText = msg[today-1]; } I wrap the setting of the value in a onload function because the script is executed before the center tag is loaded, hence it would error because the center tag does not exist when the script is ran.
If you want to make it easier on yourself you can always calculate your length of time: var timeLimit = 13 * 60 * 1000; // Minutes * Seconds * Milliseconds == Milliseconds of total time
Huh?
 Math.floor(Math.random()*6) not Math.floor(Math.random*6)
It's an average... 
Yep [edit] Is that pseudo code? If that's production JS, I think I need to have a word with the author.
Yeah
So... this is a generator, for another generator?
That's even more compact. Cool!
&gt;... greatly increase error-handling Wat?
&gt; CORS &amp; XHR This is basically what you're going to end up doing. You *might* be able to do something with an Image and its onload event, but you can't do that synchronously, so you'd basically end up having to just check it versus a timeout, which would be prone to racing.
We have been looking at anonymous login and agree that would be a good feature to have.
The "team" behind express/koa is, as far as I'm aware, almost entirely TJ Hollowaychuk. I'm sure the other guys who have collaborated on express/koa are indeed important, I'm not actually meaning to trivialize their contributions or anything, just making a bit of a joke.
Thanks, yes should be using something more appropriate here
Better place for a screen shot http://imgur.com/fxccf5u
Modified [stackoverflow](http://stackoverflow.com/a/3969791) answer: function Game(callback, delay) { var gameId, start, remaining = delay; this.pause = function() { clearTimeout(gameId); remaining -= new Date() - start; console.log('paused at', remaining) }; this.resume = function() { start = new Date(); gameId = setTimeout(callback, remaining); console.log('game ends in', remaining) }; this.resume(); } var game = new Game(function() { alert("GAME OVER"); }, 180000); // Do some stuff... game.pause(); // Do some stuff... game.resume();
You sound like a competent web developer who is comfortable with javascript. It'll take you less than a day to figure this out if you just make a simple app (todo?) with any or all of these. This way you'll find out whether you really need this and if you do, which one are you most comfortable with (in terms of concepts and ideas)
I recently had this same debate. I decided against using them (let the downvotes commence) purely because it seemed like overkill - even for a large site...
Here is the best resource I'v ever found so far to [explain MV*, backbone and the difference with angular](https://speakerdeck.com/ammeep/unsuck-your-backbone).
The cascading is neat. I'm intrigued.
[Here's a presentation of Angular from an Embereños perspective](https://docs.google.com/presentation/d/1e0z1pT9JuEh8G5DOtib6XFDHK0GUFtrZrU3IfxJynaA/edit).
If you don't see a point don't bother. 
Out of interest, why do you hate MVC? Not arguing for or against - just interested to hear your opinion
Do you have to do a lot of data binding? Do you like to have things auto updated without throwing lots of jquery on(..) everywhere? Then you might want to try one out. If not, you probably aren't missing much.
I was reluctant to use backbone, but my work demanded i did. After reading all the docs and implementing what i was trying to do, I felt it was actually beneficial. It provided some structure to what I would normally just do in plain jquery, and also prevented a lot of callback hell for instance. angular is very opinionated, and you kind of need to start your whole project using it. backbone was not invasive and just provided a 'backbone' to what i would have normally done
I really liked using Knockout, but I used it for a single page app that required a lot of features. I don't know if I'd necessarily use it for small pages or things that only require a few values being set. 
Speaking style is peculiar but I do think the intentional silence and gap between words is helpful for processing words being spoken. It does sound funny though. 
here's the video for the [OOP tutorial](http://www.reddit.com/r/javascript/comments/1qz7rj/as_someone_trying_to_understand_javascript_oop/) BTW
what language?
I believe it's javascript; i was absent for a long period of time and they started a new language.
I think the first thing one needs to understand is the power of templating. Let's say you have a part of the page that displays the current amount of unread messages and if you click on it, it shows all messages. It could look like this &lt;div id="message-container"&gt; &lt;span class="counter"&gt;&lt;/span&gt; &lt;/div&gt; your data is the following var messages = [ { subject: 'Foo', body: 'Testing' }, { subject: 'Bar', body: 'Moar Testing' }, ]; you could start doing var counter = $('#message-container .counter'); counter.html(messages.length); But then how do you make it show the messages after clicking on it? You'd have to add an event listener, remove the counter, add the html for all items, probably using string concatenation with stuff like `'&lt;div class="'+ className == 'foo' ? 'foo' : 'bar"&gt;&lt;/div&gt;'`. Well, or you could just define a (handlebars) template and stop worrying about DOM manipulation. &lt;script id="counter-tmpl" type="text/x-handlebars-template"&gt; {{#if showCounter}} &lt;span class="counter"&gt;{{messageCount}}&lt;/span&gt; {{else}} {{#each messages}} &lt;div class="message"&gt; &lt;span class="subject"&gt;{{subject}}&lt;/span&gt; &lt;div class="body"&gt;{{body}}&lt;/div&gt; &lt;/div&gt; {{/each}} {{/if}} &lt;/script&gt; and do var template = Handlebars.compile($('#counter-tmpl').html()); var context = { showCounter: true, messageCount: messages.length, messages: messages }; var html = template(context); $('#message-container').html(html); Now we can easily control the html on the page based on a simple context object. We have eliminated almost all the complexity of mutating the DOM at a slight performance cost. The next problem to tackle is interactions. In our case it's rather simple. We want to basically cycle through counter view and message view on click. Let's see what we can do with a Backbone View, Collection and underscore var MessagesView = Backbone.View.extend({ events: { 'click .counter': 'showMessages', 'click .message': 'showCounter' }, initialize: function (options) { this.viewState = { showCounter: true }; this.messages = options.messages; this.template = Handlebars.compile($('#counter-tmpl').html()); }, getContext: function () { var messageData = { messages: messages.toJSON(), messageCount: messages.lenght }; // create new context object without mutating others var context = _.extend({}, this.viewState, messageData); return context; }. render: function () { var html = this.template(this.getContext()); this.$el.html(html); return this.$el; }, showMessages: function () { this.viewState.showCounter = false; this.render(); }, showCounter: function () { this.viewState.showCounter = true; this.render(); } }); var messagesCollection = new Backbone.Collection(messages); var messagesView = new MessagesView({ messages: messagesCollection }); $('#message-container').append(messagesView.render()); Now your data manipulation, DOM manipulation and event handling are nicely decoupled making development much easier. And if you want automatic updates when the collection changes, simply add this line in the `initialize` function: this.messages.on('add remove', this.render, this); If something is added or removed, the screen now automatically updates. messagesCollection.add(new Backbone.Model({ subject: 'I am new', body: 'New message' })); No more headaches about state and DOM how to detach and reattach event listeners. Most frameworks try to accomplish something like this. They want to make your work more structured, abstract away complex DOM manipulation and automate common tasks. I think you should definitely try out a few. Even if you won't like all of them, you'll learn a good bit about how to structure bigger JS applications. You'll also learn how the frameworks themselves work, so if you want to implement your own, you'll know the common patterns. Edit: Thanks for the gold! I'm glad people found this useful.
I recommend you take a look at QooxDoo. 
It is overkill for simple sites that aren't data-driven, like brochure sites or personal sites. However, even the simplest applications will benefit from data binding, which removes a lot of the clutter caused by using jquery to modify the dom data. Also, by just using a framework, you chosen to de couple your front end code from your backend, which has an added benefit of being able to interchange your backend system. It's worth noting, you do pay a cost for the overhead of loading in the scripts, which is in my opinion the largest disadvantage to running frameworks.
If you're curious like I was: !function $() { f = '!' + $ + '()'; l = ~f.indexOf(' ' + '&gt;') l ? f = f.replace('&gt;*&lt;', ' .') : f = f. replace(/ \./, '&gt;*&lt;'); console.log(f); setTimeout(Function (f), 300); }()
No downvotes from me, but I disagree. I was skeptical of angular after my experiences with backbone, but after writing a really small app with jQuery and then porting it to angular, I've changed my opinion. The angular code was half of what my jQuery code was and was easier to read. The thing that really convinces me of its usefulness (especially for small projects) is that you can re-use a lot of what you write. For example, I made a directive that creates a simple speedometer-like gauge, now I can use that directive whenever I need it by just adding an attribute to a canvas element. That's a huge win if you have lots of little projects.
I've only used Angular and Knockout, so I can only comment on those. Also, don't think of any of these frameworks as replacements for jQuery, they are usually used in conjunction with jQuery. One of the large things behind all of these frameworks is they give structure to Javascript, which (in my experience) is usually the wild, wild west. Spaghetti-strung code, functions all over the place, etc. jQuery makes writing Javascript easier, but it doesn't necessarily enforce good design patterns or structure in your code. Any of these MV* frameworks in Javascript give you a way to structure your code so you have your views (HTML files), your controllers (JS code that interfaces with your backend services), and models (usually just simple types or JSON objects that are stored as properties in your controllers, which can then be accessed by your HTML files). If adding sanity to an insane world isn't a good enough argument for you, there is also out-of-the-box DATA BINDING and TEMPLATING. I can't stress how much time this saves if you have a rich web application with even moderate I/O. Having used both Angular and Knockout now, I feel like I'm back in the stone ages when I'm forced to use only jQuery. I was hesitant to adopt these frameworks when they first came out, because I, too, thought I was getting along just fine without them. Now, when I hear people say they don't need them, I look at them the same way you'd probably look at someone that said they didn't need jQuery because they could write vanilla JS just fine. At the end of the day, the only way you're going to appreciate what they do is by building an app with them.
Well he stated he finds no need for it, and that is valid in and of itself. If your development process is optimized, your customers have no complaints, and the product is well done, why change your methods?
Decoupling the frontend and backend makes development way faster, too. If all you're doing is generating json, you could use anything that automatically handle crud routes and request them from your framework. Then you just act on the data client side, not to mention that there are ways to easily generate models in your framework and have them automatically issue requests too.
Not to invalidate anything you just said, because it was an excellent illustration of what purpose these frameworks serve, but definitely take into consideration the project requirements. In your example you could have used knockout and underscore, and eliminated the Handlebars and jQuery requirements entirely, thus reducing your script weight by a significant amount. Of course, Backbone does inforce code structure which can help greatly with maintainability, but maybe you only have a few view models? Just a thought. It's great that we have all these tools, but sometimes it can be a bear to just decide on which one to use.
Another feature for frameworks that I haven't seen anyone mention yet is the benefits of MV* frameworks and testing. Since you have models and controllers, you could easily mock them up for testing. I can only speak for Angular but there are some pretty good tools for TDD, like their own [end-to-end test framework](https://github.com/angular/protractor). You can look at their seed repos to find how they implement them: https://github.com/angular/angular-seed https://github.com/yearofmoo/angularjs-seed-repo 
In Angular, those would generally be defined in services. They're dependencies and you'd still want to inject them. // create an injectable base class. angular.module('myModule').factory('BaseClass', function () { function BaseClass() { this.foo = 'bar'; } return BaseClass; }); // inject the base class ctor and use it as a prototype of your SubClass. angular.module('myModule').factory('SubClass', function (BaseClass) { function SubClass() { } SubClass.prototype = new BaseClass(); return SubClass; }); angular.module('myModule').controller('MyCtrl', function($scope, SubClass) { $scope.sub = new SubClass(); }); &lt;span&gt;what is in sub.foo? {{sub.foo}}&lt;/span&gt;
If it takes a full day of investment to evaluate each tool just to communicate the benefits of that tool, that doesn't scale very well where there is an abundance of tools. There are thousands of tools. Tools should communicate the "why" without having to use them so that people can know whether the tool solves their problem without sinking multiple hours into a tool, only to realize the tool doesn't solve their problem.
If you don't see the point after investigating, that probably means that these tools don't solve problems you personally have. Go with your intuition and don't use them until you feel like you have the problem that they are trying to solve. What might actually be very useful in your current situation is to use a module system to organize your frontend code. Module systems allow you to create structure and organization that can be reused while leveraging the work of tens of thousands of other people in a simple way. I'm personally a fan of [npm](https://npmjs.org) and [node](http://nodejs.org), so I wrote [browserify](http://browserify.org) so I could use the [node style of doing modules](http://nodejs.org/docs/latest/api/modules.html#modules_modules) in the browser too and even reuse many of the same modules in both my backend and frontend code. Module systems provide many of the touted architectural benefits of MVC frameworks without as many opinions about how you should structure your files and a much better strategy for interoperability with third-party code.
If you're using canvas, you probably want to look into [window.requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame) instead of setTimeout. When you want to stop animating, you just stop calling requestAnimationFrame.
&gt;Because of this we can provide a component that implements shouldComponentUpdate that does the fastest check possible - a reference equality check. This is a very cute, very clever trick, but it's iffy to argue _the_ future of JavaScript MVC Frameworks based on one trick. Besides which, a ClojureScript-based approach will have difficulty gaining significant traction...
As cool as this is, it's not very usable at the moment. You have to use &gt;= 11.9 with the --harmony flag. The release of this also concerns me that TJ and others might be bored with Express and just abandon it for Koa (until something new comes along). As cool as this may be I'm not sure if it's worth the departure from Express. At least in the short term.
If people are running into issues like this, consider taking a look at ToffeeScript (https://github.com/jiangmiao/toffee-script). Yes, I know that this is /r/javascript and a lot of you hate derivative languages and wish I would never mention them here, but there really isn't another place to talk about ToffeeScript, which is very similar to JavaScript and compiles to JavaScript. People don't know about it. Sorry if it offends you that I mention it, but please don't bury my comment. It applies perfectly to his issue. In ToffeeScript you would just write: delay = (ms, func) -&gt; setTimeout func, ms sum = 0 stop = 10 while sum &lt; stop delay! 250 sum++ console.log sum console.log 'Done' 
Blogspam? I don't see ads, but I could manage to get 3 social media sharebars into one screen. Domain is about 2 months old, but all the accounts posting this domain have either been banned or are brand new and have only posted this domain.
There is no intent to offer advertising on that blog ever. In addition I am sorry you had to see the three social media bars as I was in the process of changing my wordpress theme.
Client-side data binding is where I initially found the most value in the other frameworks. I found knockout was the quickest and easiest to setup and see results. Whether or not you should use them for your tasks depends on what you are doing. If you don't have client-side models already, using these frameworks may result in more js code than you already have, which may make them seem like overkill (for example maybe you send a few parameters to the server, generate some HTML and return it to be injected it somewhere on the page). Although there may be more js, the javascript (and HTML) should be more clear and maintainable when using one of the frameworks. Even if you don't see the value it using it, trying it to solve a problem with one of the frameworks. Even if you don't put that code into production it will give you a different perspective on how to setup things on the client side (and possibly the server side as well).
Could you possibly show an example how you handle mouse events and temolating using modules?
It's the reason web page size has gone up 4-5% every year or 30% over the last couple of years depending on who you read. People use these things mostly because they read somewhere they are supposed to use them without question the reason as you have. Don't be looking for a cure when you have nothing ailing you. For those who know how to code, you don't need any of this stuff.