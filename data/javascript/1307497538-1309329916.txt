I think the important thing to remember with this is simply that the caller sets it at runtime, always. This is not lexically bound in any way. foo(); // this == global object. bar.baz(); // this == bar; Whenever the host calls a function the this object will be the global object because even if you pass bar.baz to setTimeout, setTimeout is essentially implemented like: function setTimeout(func) { // eventually... func(); // this is global object. }
Weird... Google's first result for your exact question is: http://www.programmableweb.com/apis/directory
Since your question was already answered, I'll go with something different. &gt;[...] an img tag that changes it's src attribute [...] It's nicer to use a new `img` node for this. Add an `onload` handler, set the source (after you've added the handler!), and once the image was loaded you can do a swap/fade/slide/whatever.
how much time did it take to you?, looks pretty impresive! i saw a lot of details on it, really good work.
On line 13, you create an anonymous function as the first argument to setInterval. That anonymous function creates a new scope where the this keyword refers to the anonymous function, not the object that contains it. To get around this, you have to store a reference to the object that contains the setInterval function, ImageSequence. To do that, just store a reference to this in a variable. var that = this; is a convention commonly seen in JavaScript. (I'd put that expression on line 3, by the way).
Freaking awesome stuff, Grant. GameBoyCore.js is an epic piece of work. Nice to see dynamic sound &amp; typed arrays in there, too. :) How long did this take?
[I think they mean...](http://www.programmableweb.com/apis/directory/1?sort=date)
Why not link to the full emulator? [http://www.grantgalitz.org/gameboy/](http://www.grantgalitz.org/gameboy/) Very impressive stuff! I never thought I'd see the day when we have javascript-powered emulators running at full speed in a browser.
A long time. Not nearly as long as JS GBA is taking. :/
[Mashape](http://www.mashape.com/)? Actually, I just realized it's invite only (and I'm in the beta). If you're really interested in this stuff, sign up for an invite! (CAPTCHA/disclaimer/whatever here.)
this is so epic! awesome work :P
Wow this is really impressive. It looks like I'll be staying up late tonight.
I just saw the BMP data: URI fallback scheme -- really cool idea. I'm guessing this is to support IE8? How's performance?
lol 1 fps. It was just to see if I could make a fallback at all. :P
There's always flash canvas polyfills. :)
But but... This is JS! :O
The resolution of the timers is 1msec. This is good enough. A temporal jitter of 0.5msec isn't perceivable by humans. Well, there are two things: 1. There is no vsync. Without vsync it will never be perfectly smooth. (You can't enable it. It's up to browsers and drivers.) 2. Simple (high contrast) examples always amplify the issue. Small irregularities are a lot less obvious if there is more going on and if there is some actual art in place.
Oh psh, you're already polyfilling audio when a good data uri [could suffice](http://js1k.com/2010-first/demo/409). (well actually, it probably couldn't, but you know ;) )
Flash is only used for audio support as a fallback method and if a browser falls back to flash, but doesn't support flash, I do actually do wave pcm data uri generation in js (And it's horrible to use, since there's bad latencies and memory leaks in most browsers (WebKit leaks the WAV PCM data URIs at 15 MB/s)) This is how I do my audio support: (mozilla audio data api or webkit web audio api) -&gt; flash swf -&gt; WAV PCM data URI generation in realtime. I made a library out of it so others don't need to reinvent the wheel - https://github.com/grantgalitz/XAudioJS Hint: Try it in Firefox 4, there's no flash used for audio, but rather firefox's proprietary mozilla audio data api being used instead directly in javascript. Chrome also has an experimental api (a.k.a. web audio) that will be used if detected. Moz Audio: https://wiki.mozilla.org/Audio_Data_API Web Audio: http://chromium.googlecode.com/svn/trunk/samples/audio/index.html
Awesome! Your library is the best and most useful abstraction for this purpose I've seen. WAV PCM generation is gnarly. I was interested to read how you handled avoiding clicks when adding new data to the buffer. Thanks for sharing, and kudos!
indeed
thanks for your input. Yeah, it actually allows the JS dev to see how many audio samples are left in the internal buffer, so the js code can automatically know when to supply more samples to the API (It actually dispatches a dev-specified callback to do that).
that's true. i suppose if it worked exactly like css selectors you could just do ".drinkPref" (?)
And please, learn it right. I'm quite happy javascript is not considered something "it's ok to screw as long as it works", anymore. Dhh conference about the new rails' asset pipeline was very delightful, in that way. Still, the more devs turn into thinking javascript is worthy, the more I hear : "yeah, it doesn't work without javascript enabled browser. Come on, we're in 2011, man". Please, backend devs that want to code worthy js, consider the following. When I code some server side feature, i write tests for it, i write the feature, i check in my browser, just to be sure, and that's ok. *if it works for me, it will work for anyone*. That's not the case with client-side features. Each visitor has its own environment : browser, OS, plugins, extensions, memory usage, bandwidth usage, you name it. Having a lib that enforces cross-browser compatibility is one thing, but it's not enough. If you want a robust app, you'll need a fallback for every single feature. That's all the point of progressive enhancement. If you have coded your app so it works without javascript, if you script crash in fly and your visitor click a trigger link, that's ok, because it will use the server side fallback. Of course, that's also means we should take fallback in consideration while writing the js as well, with the timeout event of requests, for example. 
The problem you were haveing has to do with implicit unbinding. When you're using setTimeout or setIntevall the "this" refference isn't resolved until the timer activates. In you're case it resolves to window, wich is not what you want. (about this )[http://trephine.org/t/index.php?title=Understanding_JavaScript%27s_this_keyword] When it comes to closures just remember that any function object you create remembers the local environment at the time of creation. That is why the that=this trick works. The anonymous setIntervall callback remembers the environment it was created in and by binding this to a var you resolve this to your object and then use that instead. hope that helps :)
My understanding of Direct2D (IE9) is that it had VSync built in. No?
IE 10 will likely have those things given that MS has already implenented them at http://HTML5Labs.org for IE9. The express purpose of HTML5Labs is to keep non-concrete standards *away* from IE9, recognising that a buggy implementation is worse than no implementation when it comes to IE's lifecycle...
Personally, I feel we should separate the concepts of Web Apps &amp; Web Sites. A website should definitely utilise Progressive Enhancement. On a site content is king and all visitors, regardless of their browsing environment, should be able to access that information. Since the content will be either words or images or media, all Javascript can provide is a more efficient/slicker way of accessing that info. Javascript, in this case, is not *necessary*. For a web app however, the rules change. If you're targeting the general populace, I think it's perfectly fine to assume they'll have a Javascript enabled device. For some web apps, Javascript (or Flash etc..) can be a fundamental. There is no fallback for a paint program for instance.
This. Web apps consitute a much smaller segment of the field than plain old web sites, even if there is some overlap.
Well, I found that most webapp features can be realized through progressive enhancement. It doesn't have to be as nice as the js counter part, it doesn't even have to feels the same way, just achieve the same goals. All the point is in asking the question : "what happens when it goes wrong? (and it will, since there are so many environments)". We, developers, will instinctively reload the page. I think an average user will try the same thing several times, then say "well, it's broken", and go somewhere else. Fallbacks are way more important in webapps than in websites, imo, since webapps rely heavily on javascript. Your paint example is a very good one, of what can obviously not be done without javascript. That's ok, if we can provide a fallback an other way. What I would do in that example is to save change through ajax in server sessions when the user do something, or on an interval basis. And wrap the draw area into a link to the same page, which click event is stopped in javascript. That way, if something goes wrong, when the user click the draw area, the page is reloaded and use the session values to redraw what the user has previously done, rather than simply "not working". It's not as good as if it did what the user requested, like a good fallback would have done, but it's ok, the user won't be stuck, frustrated and gone.
Is this a joke? Node.js is for "high performance" web apps? Node.js is "close to the metal"? WTF?
I think requestAnimationFrame should theorically solve the first issue.
This stutter might be because of the garbage collector. 
If you open the chromium debugger and use "Timeline" feature, you'll see there's no garbage collection during the animation.
*My math background made me realize that each object could have several algebras associated with it, and there could be families of these* I have trouble understanding this, can someone explain this to me?
1. I would hope that requestAnimationFrame takes care of vsync issues 2. Yes, absolutely, I think misdirection is perfectly fine for slight stuttering like this, use some lower contrast images, a background, some distracting particles and the problem mostly 'goes away', but for some reason I thought I could 'solve' this particular problem ! maybe wishful thinking ?
That's what I thought for a while, when I was doing the breakout game I could see garbage collection events in the timeline feature (chrome), but in this simple example I took some time to really try to minimize the amount of object allocation and I no longer see any garbage collection events... ... so perhaps garbage collection was a red herring ? 
basically, an *algebra* is a mathematic structure made of: * one or more set of elements (finite or infinite) * some operations performed on those elements The structure needs to satisfy one or more axioms. The set(s) has to be **closed** under one or more said operations, meaning that the element resulting from the operation belongs to the set, or it doesn't "fall" outside of it. formal description: http://en.wikipedia.org/wiki/Algebraic_structure given this analogy, it appears clearly how it led to the formulation of OOP: an object(set) has some internal state(members) which is manipulated by its methods(operations). At least this is my interpretation of it... :) edit: and oh yes, by *families of algebras* I think he envisioned the concept of *classes*
&gt; var that = this; Isn't an expression (evaluation doesn't produce a value). This would be: that = this; /melvin trollface
Others have answered your question pretty well, one thing I wanted to note though was this (on line 12): alert(this.position); You don't want to use alert for debugging. You can only see one value at a time, once you click it it goes away, it stops everything, etc etc. These days just about every browser comes with (or has easily available) a set of JavaScript debugging tools, including a console you can write to. So you would use: console.log(this.position); This way you get a nice list of the value of this.position over time that you can watch as the script runs, and refer to later. You can also log multiple values at once, and log things other than strings. Logging is just the beginning, the console also allows you to run little bits of JavaScript against the page, and all sorts of other incredibly useful things. Refer to the docs of your browser on how to use the console/dev tools. It's really easy, you can pick up the basics in an hour and it will help your debugging enormously. In Firefox you just install Firebug, in Chrome you just open the developer tools from the menu (or use the keyboard shortcut), etc etc. 
 This guys is about 15 years late to the game. 
Crockford sez: http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/ But here is a more intresting and anti-fascist discussion about it: http://stackoverflow.com/questions/61552/are-there-legitimate-uses-for-javascripts-with-statement other pros and cons: http://webcloud.se/log/JavaScript-and-the-with-statement/ Anyway in ES5 strict mode *with* is forbidden.
IBM's Developerworks consistently puts out good articles, this one looks no different.
Maybe for this example, but I've definitely come across it having a noticeable impact in my [early WebGL work ](http://www.youtube.com/watch?v=kXFMPshxHkU) because I'm always allocating new vectors in my calculations.
Also, he made that tell-tale "opinionated beginner" mistake, by confusing "javascript *the language*" with "javascript support in browsers", and/or "the DOM API". Javascript the language is fantastic - Brendon Eich at Netscape was only given a very short time to develop a scripting language from scratch, with the instruction that (for marketing reasons) it had to *look* a bit like Java/C/C++... so to cut a long story shot he basically tried to implement "Scheme with syntax". It's got a few odd quirks (let's be honest, what language hasn't), but I have to say it's honestly one of the more flexible, expressive languages I've ever used.
Node may not be high-performance right now because it's still developing and hasn't really been optimised, but from what I've read it has the *capability* to be because the non-blocking nature allows for very, very efficient use of the processor (basically, it's executing useful code *all the time*, instead of spending half its time busywaiting for IO or network requests to come back). Compared to normal methods of writing web apps - running through an interpreter running on top of/through Apache or nginx - it's also *relatively* "close to the metal". Not in the absolute sense it's actually close to the bare hardware, but in the sense that it's clos*er* - it has fewer layers between the code you're writing and the hardware.
&gt;Compared to normal methods of writing web apps - running through an interpreter running on top of/through Apache or nginx Why is that the "normal"? Normal for me is running java servlets. Node.js doesn't even begin to compare.
If vsync were enabled, you wouldn't be able to exceed 60 fps (assuming your monitor runs at 60hz). The only vsynced desktop browser I've seen so far is Opera's WebGL-enabled build, which uses OpenGL for *everything*.
You can't exceed 60fps on IE9 AFAIK. I *think* I remember seeing IE9 demo streams where they were talking about Direct2D's native vsync... edit; might be this one but i'm on a mobile connection so can't watch: http://channel9.msdn.com/posts/Charles/IE-9-Surfing-on-the-GPU-with-D2D/
As I mentioned, it's up to the browser and the graphics drivers. If you're using Windows, try the WebGL-enabled build of Opera. Being highly experimental it's of course pretty buggy. However, vsync is enabled and OpenGL is used for every step. The things that work correctly (pattern fill for example doesn't) are rendered butter smooth.
Fair point. You're entirely right, of course, it's just that on the net (outside of "enterprisey" communities) Java servlets (and the equivalents for .NET) don't really have much in the way of mindshare, so I tend to forget about them when discussing "web development" in general. ;-)
Does vsync even matter with LCDs? 
Yes, without it you get visible tearing. Surprisingly, there is no difference to CRTs in this regard.
&gt;native vsync Haha. But yea, that sounds like something Microsoft would say. I don't do much testing on IE9 (and I can't run it here). I'm not really sure if there is vsync with IE9.
FF4 here and it's not showing up. Anyone else, or have I done something wrong?
Looks clever, but I'm not really sure I would use it. On the other hand, it could clean up some funky code functions that have really variable signatures... I'd like to see some more examples.
V8 (node uses it) compiles down to machine code. End of discussion. **Edit:** Apparently this is news to some: [V8 compiles JavaScript source code directly into machine code...](http://code.google.com/apis/v8/design.html#mach_code)
That makes no sense. Nothing about the paint app works without Javascript. There is no fallback, you just don't get a paint app. You are talking about a different kind of "fallback" I think. You're talking about error handling, which has nothing to do with gracefully degrading when features are lacking. Yeah, errors should be handled.
Can you explain 2 a little more? It sounds like you have some misconceptions about the performance of V8. I am pretty sure its actually very fast.
For example, imagine that you write Canvas framework, you write method curve, if this method called with 1 argument then it's lineTo; 2-quadraticCurveTo; 3 - bezierCurveTo framework.prototype = { curve:function(){ sugar(arguments, this) (['to']) (['p1','to']) (['p1','p2','to']) ([{to:'to'}]) ([{to:'to', points:['p1','-p2']}]) .def({p1:null,p2:null,to:null}) .end('p1,p2,to', function(){ if(p1 == null) { this.ctx.lineTo(to.x, to.y) } else if (p2 == null) { this.ctx.quadraticCurveTo(p1.x, p1.y, to.x, to.y) } else { this.ctx.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, to.x, to.y) } }) } } 
The app we are using now is a good example. There is *nothing* about this site that needs JavaScript. And yet it does.
What a bunch of shit.. no implementation is worse. Its holding back the web deliberately.
UPDATE: I have had some success in chrome12 by forcing hardware acceleration on the canvas using the 'magic css bullet' css trick #canvas { -webkit-transform: translateZ(0); } Makes it much smoother.... and since IE9 automatically has a hardware accelerated canvas and is pretty smooth, that just leaves Firefox and maybe I should just wait until a future version has better hardware accelerated canvas ? 
I don't understand why you used the word "Maybe". Especially when you look at this comment: &gt; //If function called with unexpected number of arguments then Maybe throw new error with message 
That's a much better example than the one on github.
Using Maybe was confusing to me as well. Perhaps ArgsList, MyArgs would have been better choices.
That's exactly what I said. Let me rephrase it : app should works, no matter the env ; error handling is good enough when the feature can't be done on server side ; progressive enhancement is better because happens what is supposed to happen, even in error case. There are really no reasons not to do it each time it's possible (and yes, it's possible most of the time).
Looking at your code more. I have done something in the same domain but more strict. Instead of allowing multiple signatures I enforce a signature and allow optional and default keyword arguments in an object passed as the last positional argument. I have found that allowing a function to be called with multiple signatures causes a function to lose its leverage as an abstraction. Also I don't understand the purpose of end() and chaining. Why not just wrap the function once with a list of accepted signatures, etc.? function Point(x, y) { this.x = x == null ? null : Number(x); this.y = y == null ? null : Number(y); } // sugar(func, finalSignature, acceptedSignatures, [options]) Point = sugar(Point, ['x, y'], [['x','y'], [['x','y']], [{x:'x',y:'y'}], { wrongMessage: 'Point - Unexpected number of arguments' }); EDIT: Mixed up examples.
Reddit is not an app.
&gt; the ceremony required for creating objects is distasteful. WTF does that even mean? I don't think I've ever seen a language with a simpler syntax to create objects. var obj = {}; // HERE'S YOUR OBJECT JERK-BUTT
Why is 60fps necessary? Motion pictures are only 24 fps...
I still think you're mixing up two completely separate ideas. With progressive enhancement, errors in Javascript will still cause a site to become unusable because errors are unexpected. If an error causes javascript to stop running halfway through progressively enhancing something, it may well be broken at that point. 
True, but isn't tearing different than the stuttering the OP is seeing?
I'm not sure what exactly he is seeing, but tearing does make things kinda jerky.
So wait, by "javascript" you mean "using a Microsoft server-side script to sanitise user input" and "using Microsoft's ASP language to add a CSRF field to forms"? Boo.
It's things like this that are the cause of me hearing arguments like "Java's too slow, we should use Ruby"
haha what &gt; Microsoft.Security.Application.Encoder.HtmlEncode If that's how you escape output the Microsoft way, no wonder there are so many insecure ASP sites. I'd *hate* to litter my code with that.
Take a look at [SproutCore's statecharts](http://docs.sproutcore.com/#doc=SC.StatechartManager).
Nice! that will certainly help me out!
Meh, it still looks cleaner than PHP.
You have to wait for it to load in the game files. The gradient background will turn white when it starts. If your connection is too slow it's possible something might time out.
From the chromium project page: &gt;In our implementation the important bits are that we don't invoke the requestAnimationFrame callbacks unless the tab is visible, __we don't invoke the callbacks at a rate faster than 60Hz, and we don't invoke the callbacks faster than the page is actually rendering.__ I played with this a bit, and I believe the problem is Windows. There is no guarantee you will always get 60fps in a window. I removed delta time and timestamps entirely and made dx and dy = 1. This way the block should move exactly one pixel in the x and y directions without any rounding errors. In the modified version, the loop consists of: var frame = function(now) { update(); render(); requestAnimationFrame(frame, canvas); }; The stuttering still remains.
Actually, around the time of IE9's release - Chrome *removed* Websockets due to protocol concerns. WebGL they're opposed to and it's not an adopted standard. I don't know why they didn't implement web workers. 
It is on my iPhone. :)
Yep, my point is precisely that mix : progressive enhancement is an upper form of error handling. I don't know for you, but I took the habit to make all click interactions through links, rather than other elements like div, li or whatever. I also concatenate all the js for a page in a single script. Hence, two things. 1°) if something crash, the whole script interrupt, 2°) each link, if not bound to a callback while script is still running, will forward to the server side backed feature. Interrupting all js features at first error is really something I want, because it's way easier to fall back on the server side handling (which will ultimately reload js) than to test at each event what will work and what won't. Of course, as I said in my very first comment, we still have to think about how nojs features play with error handling while coding. And we also have to think about error handling of timeouts and requests. But really, a strong link-triggered interface makes more than half the way.
Firefox removed it but they are putting it back. WebGL is adopted by everyone except Microsoft. They are opposed to it because it competes with DirectX and Windows. Web workers also competes with Windows because it allows web applications to use multiple cores which is otherwise an advantage for Windows apps.
Yeah it worked when I loaded it on Chrome. Not FF4 though? Not that I care. I musta been a bitch to do this, but it only ran at 1/3-1/2 speed on Chrome, and the VBA emulator has it beat to shit anyway, performance-wise. Still, musta been a labor of love.
Just and FYI, this seems to work perfectly fine in IE 9 and Chrome 13 both have Hardware Accelerated canvas on Windows.
Uhhh, no. V8 is compiled, but the JavaScript it reads is still interpreted raw text. No different than the V8 that is in the browser, except that the DOM is exchanged for the CommonJS framework.
Works in FF4 and fullspeed for me. Takes up no more than half of one core of my core 2 duo Mac. Seriously, it's faster in firefox 4 than chrome, not because of js performance, but because of blitting performance to the canvas. Try http://www.grantgalitz.org/get_the_hell_out/SuperMarioLand2/ as well. If it doesn't work in firefox please disable some addons and greasemonkey scripts.
That actually works, at about 98% full speed. Just the Pokemon one doesn't. Thank Cthulhu for VBA. I've been playing Crystal on and off for the past decade, even when the cartridge battery died.
Works for other people too with Firefox 4. You should check to see if the Ajax request is timing out from slow Internet. It can take like 25 second to download everything.
they should both be running about the same speed. Chrome frameskips a lot because it's seriously 40x slower than firefox 4 at rendering.
Movies typically have motion blur which fools the eye into perceiving motion at only about 18fps. All CGI movies are rendered with motion blur because of this, and if they were rendered without blur then you'd need a much higher rate than 18fps or even 24 fps. Computer games don't typically have motion blur and so they need a much higher frame rate to compensate. Quake at 18fps is horrible on the eyes and so is 24 fps. Many people prefer games at 60 or 72 fps. Basically eyes are analog and they'll take average frame samples as often as they can. This can be up to 200-300 frames per second. The new Avatar movies are being filmed at a 48 fps because of the improved sense of motion. HTML5 canvas at 60fps will certainly be distinguishable from HTML5 canvas at 30fps, and it's reasonable to want 60 fps.
You were right. Took a long-ass time. I'll stick to VBA. Still, the Mario link you posted wasn't quite full-speed.
What are your computer specs? And tested in which browser?
Sir, I am extremely drunk (an entire fifth of 70 proof). However.... 4gB ram, 2.8GHz core2Duo p9700. The hand of god is in here somewhere..... And then, Firefox 4.0.1.
Hmm, if you're on windows the audio might be buggy from a bug in firefox 4, rather than as a speed issue. Your computer has better specs than my MacBook. As for alcohol none for me, as I'm still underage though. :|
Not terribly insightful.
I thought my comment would be enough to cause readers to google it and learn for yourself, but [here you go anyway](http://code.google.com/apis/v8/design.html#mach_code). It wasn't really an opinion.
&gt;Your computer has better specs than my MacBook. No shit. Also it didn't cost 2 grand. Plus No one I know has let age get in the way of alcohol.
I'm not a drinker anyhow. Heh, I bet you've already stereotyped me into the Mac user group. :(
Sterotypes exist for a reason.
So, how does the overall JS engine determine which of these schemes to use? 
:/
In his latest book, John Resig shows that a minimum delay of 10-15ms between setInterval/setTimeout code executions should be expected and planned for. 60fps means your update loop happens every 20ms. This give you, at very most, 5-10ms for your code to update the objects in the frame *and* render it (2D drawing or WebGL). I don't expect to see anything averaging more than 55-60fps anytime soon, and would expect most cases to be between 40 and 50fps. 
You are not setting the first tab's class to "tabInactive" when you do your first click to another tab. There is something quirky about the first time that function is run. I haven't dug through the code to be able to tell you exactly what though.
I'm no expert, but I had a look at it and it's bad. Real bad. It sure is written in 2005. I'd say you look into another type of tabs. [Jquery UI](http://jqueryui.com/) perhaps? It's well documented and can do a lot of fancy things. Tabs included.
TIL that Dr. Claw is partially responsible for Google Chrome.
That is blatantly (NaN === NaN).
translation: That is something that seems blatantly true, but is in fact false, against all logic and intuition.
I'll give you an answer after I go out back behind my shed and set myself on fire.
JS code is compiled after it is statically interpreted from raw text. This saves on name lookups during future execution, but at the end of the day text is still fed into an interpreter and executed prior to the compilation.
Actually I think that's just a specific example of general over-opinionated idiocy. It works the other way around, too - I've heard Java and ColdFusion fans claim "you can't really write large software projects in languages like Perl or PHP" because it's too free-form and open-ended... neatly ignoring sites like Facebook, Wikimedia and numerous open-source projects, which can run to hundreds of thousands (even millions) of lines of code and tens or hundreds of developers, and which are written mostly or entirely in PHP, Perl or similar languages. The sad thing about ignorant, over-opinionated idiocy is that it's present in practically *any* community. :-(
Well, I do know that *I* can't deal with more than a a couple 100 lines of dynamic language code. I've tried too with Python and Javascript, and coming back to such code after 6 months is always hopeless. Even when working on it, I can't remember that much information.
&gt; Well, I do know that *I* can't deal with more than a a couple 100 lines of dynamic language code. *Now* we're getting to the core of the criticism. ;-) A language is just a tool. Dynamic, permissive languages require more in the way of experience and discipline than static, bondage-and-discipline languages, but that doesn't mean they're *bad* any more than it means bikes are better than cars just because cars require more experience and discipline to drive than bikes do. I've developed (and worked on) codebases in dynamic languages that stretched into tens (and on occasion *hundreds*) of kLOC, and never once have I had one implode under their own weight. It's silly for anyone to assume anything "objective" about bikes, just because *they* never learned to ride without stabilisers. :-/ See also: [the blub paradox](http://www.paulgraham.com/avg.html).
I guess you're the real Douglas Crockford after all. :-D
Tried it at work today. It ran at 65-66fps, which is kinda weird. Looks like it's capped, not vsynced.
As for the use cases for configuration: Yes, but. But what about function literals? JS config files can contain them. JSON can't and shouldn't. Using JS allows putting logic in your config files (Python frequently does this, too) and JSON can't. Then again, maybe that is a case for using JSON: what if you don't _want_ the config to contain executable code? Also, his arguments still hold for document storage. JSON is not just an exchange format, it's also a serialization format and therefore a document format.
In FireFox restarting the browser can make a big difference. I've had games running at a crawl (like 10fps) and after restarting they ran fine. Although I also have FireFox open permanently until it eventually falls over from memory leaks (and it's generally pretty bad just before). Another small improvement for FireFox is to use: window.addEventListener("MozBeforePaint", mainloop, false); in conjunction with requestAnimationFrame. I find it's slightly (by just a couple of frames) faster then requestAnimationFrame. Usage is explained [here](http://hacks.mozilla.org/2010/08/more-efficient-javascript-animations-with-mozrequestanimationframe/). But ultimately this is for the browser to solve. Even the very simple demo shown in that link above ([here](http://people.mozilla.com/~roc/mozRequestAnimationFrame-demo.html)) can stutter horribly for me in FireFox.
I can't think of a reason you would want executable code in a configuration file :/
Well, I have more experience and discipline than most, by far. When I say I can't do it, I mean, I can't, and nor do I believe the vast majority of others can either. Most people are blind to their own failures.
Hear, hear! I like using JSON for config files, and it is silly to have to hunt around for a parser that will strip out the comments.
I would be against using this. For me it made no difference, except breaking the CSS for items I have on top of the canvas.
Check out the old-school plasma in the examples: empaempa.github.com/GLOW/examples/oldschoolplasma.html Nerds! Demo! Yay! :D
So it's a different thing from [Glow](http://www.bbc.co.uk/glow/) the JavaScript library then.
Seriously? Bright yellow background? Please forgive me if I'm not eager to melt my eyeballs while trying to read your code examples.
It will stutter less on different machines, in different browsers, and at a lower fps. So an idea I had was to detect stutters, and often, and lower the fps dynamically to smooth this out. For example both a high and low-end PC might be capable of running at 45 to 60 fps, but stutters much more on a low-end PC. So on the low-end machine you have it dynamically reduce the fps to say 30 or 25fps, so it stutters less often and so becomes smoother. Essentially that a consistent low frame rate is better then a stuttering high frame rate. It's just an idea, and I tried implementing it a few months ago but found it just perpetually lowered my fps (I presume it's my code to blame). Then FF 4 came out, which was much smoother, so I gave up.
&gt; Well, I have more experience and discipline than most, by far. With respect, I have no doubt you have a great deal of experience *working in a static language*, but if you're incapable of writing a maintainable codebase of even a few hundred lines in a dynamic language, you emphatically *don't* have much experience or discipline in the areas important to programming in one. Look at it like this: I can have a great deal of experience in "driving a car", and as mental shorthand I'll generally tell people I have a great deal of experience in "driving". However, I don't have much experience in driving an articulated truck, and would be at much more risk of having an accident if I got behind the wheel of one. I'm not dissing your programming ability, just suggesting it's apparently rather more specialised than you realised. ;-) &gt; I mean, I can't, and nor do I believe the vast majority of others can either. You do realise there are plenty of well-factored, maintainable, open-source codebases written in dynamic languages, right? This isn't a matter of opinion - it's *empirical fact*. And equally that there's some truly *horrible* spaghetti code in Java and C++ out there, too? &lt;:-) (Edit: FWIW, I didn't downvote you. ;-)
You can [load custom tiles into the Google Maps viewer](http://code.google.com/apis/maps/documentation/javascript/maptypes.html#CustomMapTypes). It's the nicest slippy map thing going imo. There's [OpenLayers](http://openlayers.org/) for a free alternative, but it isn't very nice looking, perhaps something in Flash would be a nicer interface.
Or, instead of spouting even more silliness, you could just read about it. For one, Node.js (which we are talking about) leaves the process running, so this static interpretation happens once and only once, on server startup. Similarly, browsers only do that once per page load. Although I'm not sure if this is implemented, they could even keep from having to statically parse if the browser is working from cache. Additionally, name lookups are not the only thing converted into machine code.
Check out Seadragon: http://gallery.expression.microsoft.com/SeadragonAjax
Curious... can you describe how they broke ?
We have a pause overlay that appears when the canvas loses focus, it no longer showed up after applying your CSS change. As a rough guess it could have messed up the z-index. But tbh I didn't debug it much further. My main point is that it had no effect for me, even on games which applied heavy amounts of drawing.
This is a few reasons why you'd want executable code in config files (and isn't trying to be specific to JSON). First variables are useful to help remove duplicate constants (or more duplicate magic values). Define them once at the start and then set the variables to all the places where it's needed in your config file. Second it's also better to expand constants, like: var timeout = 4*60*60 ; // 4 hours in seconds ... if you want to go back and change the above to 3 or 5 hours, it's trivial. A third is so you can have relative values, like: editorWidth = 400 ideWidth = editorWidth + 100 barWith = ideWidth - editorWidth ... that helps to show the dependency between the components, and updating editorWidth now updates the others accordingly. Finally some things you just have to work out manually. For example in a website config you could have it work out if it's running in dev mode or from localhost; and if so you turn off any mail or other public broadcast features. Another example is that I also once had a project that worked on top of a product (not by us) which required explicit file paths for project files. I built a config file that to set this up, which also doubled as a script to turn these into explicit paths. It also setup a large bunch of registry keys. Far form ideal, but it meant new users required no setup when they first ran it. But I would agree that ideally it's best to avoid handling lots of logic in a config file.
Had this in mind too! Worked with it back in the days... But it's dead now that they've (BBC) decided to abandon the idea of having an in-house JS library. I think the guy behind it (Jake) left the Beeb as well.
Well, why would you downvote me? The thing is, when you have a powerful tool, you learn to do things in such a way that you leave those things that the tool does well for the tool to do, and you thus focus your energies on other things. If it's a new tool that takes over many things that you used to focus your energies on, then you find new worthwhile things to focus your energy on that you never had the opportunity for before. Some of these new worthwhile things don't even exist except that the tool allows them to exist. This yields productivity improvements that those without the tool don't even know exists. So, which is the more powerful tool, dynamic languages, or static languages? Well, there's where we differ. I don't see anything that dynamic languages provide that one doesn't have in static languages, other than the opportunity to skip some documentation steps. I don't think you want to argue that skipping documenting your code is a productivity enhancer, right? OTOH, static languages provide tools a programmer can use that free him up to tackle problems at a higher level, leaving various lower-level activities for his tools to take care of for him. Refactoring, auto code generation, code completion, static analysis tools, code navigation, pop-up documentation, etc. Sometimes some of these things are provided for dynamic languages under certain conditions, none of which are guaranteed to hold, by definition, and so, the majority of dynamic language programmers poo-poo IDEs as tools static language writers only need because their language is flawed, preferring instead to use tools that are focused on *editing* capabilities. I suppose I have to demonstrate that a tool that is providing you with the most powerful text editing capabilities is helping a programmer at a lower abstraction level than a tool that is providing you with the most powerful code management capabilities, but I'm not going to. I tend to think if I really have to argue that, that someone can't see it, we're just not likely to see much the same. Meanwhile, static programmers use their IDEs and wonder why the dynamic programmers can't see that this tool is freeing them to work at a higher level of abstraction. &gt;You do realise there are plenty of well-factored, maintainable, open-source codebases written in dynamic languages, right? For every 1 million line python project, how many java one's are there? For every Ruby project, how many C++? They won't keep up, they won't be that productive. &gt;I'm not dissing your programming ability, just suggesting it's apparently rather more specialised than you realised. So, why would you dis? I'm the one who told you my limitations, and now you're telling me I don't realize them? &gt;And equally that there's some truly horrible spaghetti code in Java and C++ out there, too? Of course, and some of those large ruby projects are also hopeless, right? People are generally terrible at programming, across the board.
Next time, Gadget!
&gt; Well, why would you downvote me? I didn't. From the look of it you'll note that someone's come along and upvoted my comments and downvoted yours - that's how you have 0 (+1 of yours and -1 of someone else's) and I have 2 (+1 of mine and +1 of someone else's). If it bothers you I'll upvote your comments in the thread, but that's all I can do - if someone else decides to downvote you I can't do anything more about it. &lt;:-) If you don't mind I'll respond to your points tomorrow if I get the chance - it's nearly 02:00 here, and I have work tomor- *today*. :-(
How do you get the save to work?
I don't know what your scenario is, but check out http://zoom.it They're based on Microsoft's Seadragon stuff and have an API and an embeddable option.
Don't suppose you know a bit of JavaScript? url bar pastie javascript:document.body.style.backgroundColor="#FFF";void(0);
I saw a configuration file that would define a variable according to a little calculation based on the number of available processors. Remember that `1 + 1` is executable code, too.
Totally agree on the class thing. That's why I so much love Mootools (and loved Prototype before). Sure, Class is only a wrapper around prototyping in those, but it makes a real difference to me when trying to write legible code, especially when dealing with inheritance and mixins. That's also probably the major point to me of coffeescript. It would be damn time to have it as a core feature.
needs silverlightplugin
*e-books
O RLY?
Oh you're right - that sucks.
Through serializing (JSON) the emulated SRAM (The cartridge's RAM) into localStorage during the unload event.
This is certainly cutting-edge material here.
Thanks for the ideas all, but really I'm looking for a reasonably lightweight javascript only solution. I'm sure I could build it myself but I didn't want to bother if it already exists. Literally just a basic image zoomer, but for super-high res images. It might be a good project for me if I have the time. - A php script which splits an image into tiles - A javascript script which takes the tiled image 
Any recommendations?
Um, how do I get the save to work? In other words, what did you say?
[JavaScript: the good parts](http://oreilly.com/catalog/9780596517748/) - Douglas Crockford [JavaScript Patterns](http://oreilly.com/catalog/9780596806750/) - Stoyan Stefanov [High Performance JavaScript](http://oreilly.com/catalog/9780596802790/) - Nicholas C. Zakas These will give you a really solid foundation/review in JavaScript. (I recommend reading in the order of the list here)
You still have to save in the game like on a real gameboy. The emulator saves for you automatically when you leave.
I totally prefer ebooks for programming books. Search and copy-pasta FTW.
I haven't had this happen yet. I have tried using Firefox 4 and Chrome, neither seem to allow me to save. Also, it doesn't seem to work when I load the URL into the emulator.
I like the concept but don't really understand the syntactic choices you made. Namely why you decided to make many invocations for the patterns instead of just passing a list of all the possible patterns - can you think of a use case where you would want to add more patterns later? I think I'd prefer something more along the lines of: Point = sugar({ pat: [ ['x','y'], [['x','y']], [{x:'x',y:'y'}] ], def: function() { this.x = x == null ? null : Number(x); this.y = y == null ? null : Number(y); }, err: 'Incorrect number of argument to Point' });
URL has to be of an uncompressed binary, not a zip. Also has be an http URL, not HTTPS. Just make sure you save in the game normally before exiting, it works for other people too and me in both of the browsers you've listed. Check your setting and maybe clear your browser cache, since that could be blocking new data entries from being saved. It's also way easier to just load in the game via the local file option, since it loads it in straight from your computer, just remember to load in the .gb or .gbc file and not a .zip
Ughhhh I don't see how you can learn by that method. I surely can't. I'm not telling you what to do, I just feel like this is cheating.
I don't copy and paste as a method of programming, it's just nice to have the option, especially when dealing with JS structure examples. Also, you can't knock search.
Ahhh I guess I understand your point of view a little more. I guess I don't mean as much that you aren't learning, I tend to learn better by typing everything out. I have programming experience but just started learning JS so I usually go that route. You can see by how many "I's" there are in that post that it is clearly my opinion and not necessarily yours. It is just the way I learn.
I don't mind that for tutorials, but for references and cookbooks I'm still a fan of dead trees.
Thanks! I just picked up a few of these. HTML5 and iPhone ones, Unobtrusive Ajax and Developing Large Web Applications. I hope I love it.
You are definitely right, I dabbled with JS for a long time but didn't really start learning and understanding it till I made a point of going through the motions and retyping everything from tutorials.
omg, i totally almost paid for it then i realized it's all ebooks. :( not that they aren't worth it, i just prefer hard copy for programming books.
'Javascript the definitive guide' just came out with a new edition (6th) this May. Read thru it at a Borders, very comprehensive but it was $50 there (more then msrp it seems). Im getting this right now.
You don't have any JavaScript errors on your page. I would try looking at your server logs, specifically for something from include/inc_sendmail.php. The request (seemingly) makes it to that server okay.
Thanks for the quick response. I'll see what I can find in the logs.
Do you know the name of the template your friend used? Something related to the configuration of sending that message could be missing.
Javascript doesn't send email. The JS you see probably only validates. You will have to look at the script handler which is this guy: &lt;form action="somehandlersomewhere.php"&gt; 
pardon my ignorance, but where would I look for that?
On your site it is this file: include/inc_sendmail.php
What's the content of this file? /include/inc_sendmail.php
And several of the books I wanted are still 50% more expensive than the kindle version. I know kindle has DRM. Not sure if it is worth the difference.
Right before the mail() function I would overwrite the $headers variable with the following: *$headers = 'From: somerealemail@yourdomain.com\nReply-To: somerealemail@yourdomain.com\nX-Mailer: PHP/' . phpversion();* Paste that right before the "if (!mail(...)) {" line
Object.create(money)... Bugger. Not implemented irl yet...
We think alike. But you dropped the args from the def and I think they additionally need the args for the def as strings unless a convention delegated one of the patterns as the final pattern.
Poorly worded but I think they probably meant the wart known as "new". Object.create will clean that up though.
It's just-in-time (JIT) compilation. Never heard of it? This is what makes JavaScript running on V8 (or any other modern JS engine) faster than PHP, Ruby, Perl, or Python. In V8's case even the very first stage produces machine code right off the bat. There is no interpreter. It goes from quick and dirty machine code to better machine code (and back again if necessary). JM/TM on the other hand uses an interpreter initially and then replaces stuff with machine code based on usage patterns (sorta like the JVM does it - just not as advanced). JS engines are still getting faster. I expect that they will get about as fast as LuaJit in the not too distant future (maybe within a year or two), but I'm not really sure if it will get as fast as Java anytime soon. (Yes, Java is actually very fast these days.)
You might like the DailyJS code review posts that started recently: http://dailyjs.com/tags.html#code-review
Douglas Crockford usually has pretty nice comments in his code. There's usually a very large "documentation" block at the top, and then more minor small comments throughout. Examples: https://github.com/douglascrockford/JSON-js/blob/master/json.js https://github.com/douglascrockford/ADsafe/blob/master/adsafe.js https://github.com/douglascrockford/TDOP/blob/master/tokens.js I may be biased though, as this is exactly how I always comment my code, so I obviously prefer the style.
and thats why im going to switch to node.js
Perfect timing! I had been looking for Javascript and HTML5 books recently, but didn't want to spend the money just yet. Half-price for ebooks is great for me! I prefer ebooks to paper now. Just took a little getting used to. Thanks!
The underscore docs are good, especially as [annotated source code](http://documentcloud.github.com/underscore/docs/underscore.html) I do wish the docs were more descriptive about function params and stuff; I get confused about what's being passed around in reduce and bind and such.
I really like documenting my JS with JSDoc which also helps with checks through google closure compiler. The best codebase for this doc style may be the closure library itself. There are also a few smaller comments in there.
So, I'm obviously a novice programmer, and my issue with JSDoc (or javadocs for that matter), is that it feels rather ... silly at times. It's the best way I can put it. By that I mean, my function parameters, and variables within my function are all rather well named, and descriptive. Using something like JSDoc notation makes me feel a little silly, because I'm sitting there explicitly and consistently describing function parameters/return values when it is already very clear what purpose they serve. It feels awkward when I'm commenting in that fashion, and I wonder if it's just simpler, or even better, to describe the function and describe whatever parameter/variables I feel need to be described. I'm also completely open to the criticism that I don't know what I'm talking about, and potentially might be on the path to developing bad coding habits. Definitely interested in opinions here.
Just use what feels more comfortable (i.e. [docco](http://jashkenas.github.com/docco/)).
Thought you might find this interesting: it's now working :) http://ricostacruz.com/js2coffee/
Why would you even want to? Seems like there's no reason to do this, and it would be much simpler to just not do it than to go to the trouble of asking. The argument name doesn't matter at all, and even if it's legal, it's not really a good practice to use the same name. Wouldn't it be better to use something like: function(_num) { this.num = _num; 
Worth asking because I'm trying to learn, which in this case means figuring out why I can't do this. :) Sorry to be dense, but aren't you suggesting exactly what I've done? What I don't understand is why 'return this' works fine, but 'this.num = num' doesn't appear to resolve scope the way I expect (or something).
try this: getNum: function () { return this.num; } That being said, I don't really see why you would want to do this in this way.
Your "var num" right after the function definition of MyObj, is not this.num. These are different things in JS. Either rename your parameter in the setNum function, then you can just do num = whatever, or in getNum return this.num instead of just num.
I'm assuming your problem is with the getNum method? First, your setNum method is not assigning to the local num variable. It's assigning a property to the object. If you want to assign to the local variable, simply take out "this." setNum should look like... setNum : function(x) { num = x; return this; } 
When assigning a value to this.num you're adding a property the the object literal you created and returned. 'num' by itself returns the value of the num variable you created at the top of your constructor.
I tried this, actually. It doesn't appear to define a new variable, because getNum() still returns 'undefined'. In the end, I suppose I just can't use the same arg and local variable names because the scope resolution can't be made explicit with 'this' as in Java, etc.
I tend to agree, but even with good naming conventions, sometimes it's not obvious what arguments are expected and what the return value is. I've been toying with using jsdoc for only those things that may be ambiguous. I'm not sure how its working out yet though. So far, it still feels silly. I'm beginning to think that the jsdoc's semantics don't fully apply to JavaScript. It feels too verbose, and yet there are things I feel *need* to be expressed that jsdoc doesn't seem to help with.
Sweet. Will check it out and add to my utilities. Are you active in the google group for coffeescript?
No i'm not, sorry.
If you are using jQuery, a simple tabs widget implementation actually just needs a few lines of code. Looking at the thing you are trying to do, here's what I'll do :) ======= ==HTML== ======= &lt;div class="tabs-widget"&gt; &lt;!--Wrapper for the whole widget--&gt; &lt;ul class="tabs-nav"&gt; &lt;!--It's a standard to use UL instead of DIV or P or other tags for navigations as navigations are, semantically, a list of links--&gt; &lt;li class="active"&gt;&lt;a href="#pane1"&gt;Pane1&lt;/a&gt;&lt;/li&gt; &lt;!--Add the "active" class to the default pane nav --&gt; &lt;li&gt;&lt;a href="#pane2"&gt;Pane2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#pane3"&gt;Pane1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="tabs-pane active" id="pane1"&gt; &lt;!--Add the "active" class to the default pane --&gt; &lt;!-- insert content here--&gt; &lt;/div&gt; &lt;div class="tabs-pane" id="pane2"&gt; &lt;!-- insert content here--&gt; &lt;/div&gt; &lt;div class="tabs-pane" id="pane3"&gt; &lt;!-- insert content here--&gt; &lt;/div&gt; &lt;/div&gt; ======= ==CSS== ======= .tabs {/*insert style for the whole tab widget wrapper if any such as width*/} .tabs-nav {text-align: center} /* Aligns the navigation to the center */ .tabs-nav li {display: inline-block; *display: inline; zoom: 1} /* Inline-block IMO is more reliable than floats. The *display:inline and zoom:1 are hacks for IE7. */ .tabs-nav a {display: block; padding: 4px 8px; width: /*optional*/; height: /*optional*/} /* Do add your additional styles here ya such as the borders, color, background etc etc. You want to do it at the &lt;a&gt; element instead of the parent &lt;li&gt; element because it's easier to implement the hover states and you want the whole tab to be clickable all the time. The &lt;li&gt; element with inline-block acts as a vessel to make all the tabs align to one line. Actual tab button styles are defined at the &lt;a&gt; element. As for the width and height, if you want a set width and height for all your tabs feel free to add in, if not we can use the *padding* attribute to add space to the link, regardless how long or short the tab name is. */ .tabs-nav .active a, .tabs-nav a:hover {/* insert your style of choice for the hover/active states*/} .tabs-pane {display: none} .tabs-pane.active {display: block} /* This hides all panes by default, and will only show the pane with the class *active* */ ========== ==Javascript== ========== // I am using jQuery here $(function(){ //When the page is ready, do the following script $('.tabs-nav li').click(function(e){ // Bind a click event to the tabs navigation $(this).addClass('active').siblings().removeClass('active'); //Add 'active' class to the clicked tab newActivePane = $(this).find('a').attr('href'); // Get which tab-pane that we need to show $(newActivePane).addClass('active').siblings('.tabs-pane').removeClass('active'); // Add the *active* class to the new active pane, and remove the *active* class from // the other tabs-pane. This way the inactive tabs will automatically go hidden, // because in the CSS we already set that only the .tabs-pane with the class of *active* will appear e.preventDefault(); // This will prevent the page from jumping to the top of the page // when the user clicks on the tabs navigation }); }); So there you go, a very simple implementation of the tabs widget with jQuery. Stripping off the comments I think it's less than 10 lines of code in total for the JS, lol. Personally for me most of the time I don't need the extra features that plugins like jQuery UI offers, so I just cook up a few lines to do the job. :) BTW, I don't think you need the AJAX script because all your content are already coded in your HTML and you are not calling external resources to load your tabs content, so I think you can take that off too if you want. If you need more help feel free to buzz me! :) 
I'm using YUI Doc for bigger stuff. For smaller things I only write a short description for each function and anything that's wtf-worthy. E.g.: https://github.com/mahonnaise/Komodo-Macros/blob/master/css_color_palette.js The obvious downside is that you cannot generate proper docs from this bare minimum of comments.
Talk about mobile web and mobile apps and you do tests with Chrome on a desktop? Stopped reading after I saw that. 
&gt; But I would agree that ideally it's best to avoid handling lots of logic in a config file. Oh, I absolutely agree with that. There are programs out there that have configuration files that are more like build scripts than like a simple key/value mapping. That shouldn't be the case for most software. I'm not sure it should ever be the case at all. Still, as you said, there are many advantages if your config file lets you use a language powerful enough to do these things (great power, great responsibility, etc). A similar example is templates: everybody agrees that it's a good idea to keep business logic out of them. Yet, even "logic-less" templates like Mustache provide you with conditional blocks and loops. A good case can even be made for JSP and Python's Jinja2, which theoretically let you execute arbitrary code in their respective languages. Of course all things should be taken in moderation. Nobody wants another PHP.
Well, you also get lifetime access to the ebook in all three/five formats including PDF. What if you ever switch to a different reader? I don't mind AZW as a format, I just don't like vendor lock-in.
They totally should buy `or.ly` as a URL shortener domain.
I'm a little on the fence about that one. On the one hand it's so much easier to carry around several ebooks than carrying the same number of print books (at one point I was frequently lugging around up to three of them -- not pocket references, either). On the other hand the experience just isn't the same, even using a reader. I've been considering switching from my regular Kindle to the DX due to the larger screen size and some "ebooks" only being available as PDF (O'Reilly is one of the better publishers when it comes to multiformat ebooks). That said, one major benefit of ebooks is that they are easier to backup. I have all my ebooks in a folder that is synced with [Wuala](http://wuala.com/). Try and do that with dead tree stuff!
Exactly. I think it's pretty obvious that a native app is better, but a javascript / HTML5 app can be completely suitable depending on the application.
&gt; For one, Node.js (which we are talking about) leaves the process running, so this static interpretation happens once and only once, on server startup. No. To be clear node is the service and not the script it is running, and that said each time a script is fed into node it has to be compiled, which I do understand is different than a connection request to a given script. &gt; Similarly, browsers only do that once per page load. No, because not all the script is available to a page from the onload event. Sometimes script requests additional script code from a distant source which can then make an additional request and so forth ad nauseum. The request for any such additional script may not necessarily be fired onload, and that would result additional compilation work per page load provided some of these requests may be the result of dynamic addressing schemes. &gt; Additionally, name lookups are not the only thing converted into machine code. Ok.
&gt; This is what makes JavaScript running on V8 (or any other modern JS engine) faster than PHP, Ruby, Perl, or Python. I doubt that. Do you have realistic web benchmarks to back that up? A realistic web benchmark is one that takes HTTP requests, including dynamic HTTP requests, into account. While SunSpider and its peers may be acceptable for measuring performance of JavaScript execution they are not realistic benchmarks to conditions of the web. This said I bet Perl and Python smoke this shit out of V8. Furthermore, Node is written in Python. &gt;In V8's case even the very first stage produces machine code right off the bat. There is no interpreter. It goes from quick and dirty machine code to better machine code (and back again if necessary). That does not even make sense. JavaScript is plain text, which requires interpretation initially no matter what. This could mean that the interpreted code is compiled prior to initial execution, however.
&gt;I doubt that. Do you have realistic web benchmarks to back that up? A realistic web benchmark is one that takes HTTP requests, including dynamic HTTP requests, into account. While SunSpider and its peers may be acceptable for measuring performance of JavaScript execution they are not realistic benchmarks to conditions of the web. This said I bet Perl and Python smoke this shit out of V8. V8's regex stuff is top notch and it easily beats PHP/Ruby/Perl/Python when it comes to computational throughput. Take a look at the Shootout for some rule of thumb figures: http://shootout.alioth.debian.org/ &gt;Furthermore, Node is written in Python. V8 is written in C++ and JavaScript. Node is V8 + some native stuff (written in C/C++) + some JavaScript glue. The only piece of Python here is V8's build script (SCons). &gt;JavaScript is plain text, which requires interpretation initially no matter what. Parsing isn't the same as interpreting. An interpreter (parses and) *executes* some source code (or byte code). See: http://en.wikipedia.org/wiki/Interpreter_%28computing%29 There is no such thing in V8. JM/TM or Java do have an interpreter though. V8, however, skipped this step. It starts with very crude machine code instead.
yep. i dont know why people need to discuss that. a native app will always run faster and more fluent giving a snappy response. but you can write a html5 app if youre an online shop etc. 
Replace "native app" with "desktop app" and "html5" with just "html" and you realize it's the same conversation people were having ten years ago.
You are making yourself look silly. When node starts up, it runs a script and then just waits for events to happen. But it is **still** the same process. It **does not** parse a new script every time a request comes in. In fact, it is just a program that runs which may or may not even **be** a server. Sure, if you include an outside script, it has to be parsed. **Once**. Just like everything else. And your points about the browser are non sequiturs that make no sense. If you are dynamically loading scripts after page load, you are already sacrificing Javascript load speed for page load speed. But if you want the javascript to load fast and all at once you optimize it that way. Unless a site is set up by some wordpress hack that just throws "widgets" all over the page in random order, you don't do a lot of script requests after page load. &gt; dynamic addressing schemes. WTF?
This problem is not js-specific. In general, comments which are totally obvious are not necessary: /** get the object's name */ getName : function() { return this.name; } If you do that, you're just documenting for the sake of documenting, not improving the readability of the code.
Despite any merit this project may have, calling an open-source project "language" seems unfortunate.
&gt;The website at languagejs.com has been reported as a “phishing” site. Phishing sites trick users into disclosing personal or financial information, often by pretending to represent trusted institutions, such as banks. doh!
&gt; even if the ceremony required for creating objects is distasteful This isn't tasteful enough? var obj = {} I'll assume he means prototypical inheritance, which is merely different.
FYI: I added some articles to explain how the game is built: * [Game State](http://codeincomplete.com/posts/2011/6/12/game_state_in_breakout/) * [Canvas Rendering Performance](http://codeincomplete.com/posts/2011/6/12/rendering_breakout/) * [Collision Detection](http://codeincomplete.com/posts/2011/6/12/collision_detection_in_breakout/) 
Implemented, although the unit tests I wrote for this are not so great right now.
Couldn't help myself. Had to fork and add in some of my own stuff. Very cool.
'this' refers to the context object, which is not necessarily related to the scope. Context and scope are identical in most common programming languages, but in Javascript they are distinct. Inside every function is a scope which is like an object, the prototype of which is the containing scope. This is why when you just say 'num', the variable you get is the one in the current scope, or the one in the containing scope, or the one in the scope containing that ... and so forth. Whereas if you say 'this.num' you'll get the num property from the context object, or failing that the num property from the context objects prototype object, or failing that ... and so forth. The scope of a function is entirely dependent on where it is defined. But the context of a function can be different at each invocation. This means you can define and pass functions that close over parameters that you don't want to lug around with them like var unknownClassName = convolutedExpression() , fItem2Html = someFunctionReturningAFunction() ; someEl.innerHTML = someArray.map(function(item) { return '&lt;div class="' + unknownClassName +'"&gt;' + fItem2Html(item) + '&lt;/div&gt;'; }).join(''); while also allowing you to define functions which operate on their context to create methods of abstract data types or prototypical classes of objects like MyComplexNumberType.prototype.add = function(c) { this.real += c.real; this.complex += c.complex; return this; } Javascript allows you to express things functionally (you can just pass a function in cases where Java makes you write a class) while also allowing you to use object oriented programming for problems it's very good at.
The tree implementation compares values using native comparison operators, which means it only works on strings and numbers, or otherwise coerces the values to one or the other as necessary. If you want to store custom objects in the tree you'll need to provide a toString() method on your objects which returns a value that always compares appropriately, lexicographically. This may or may not be easy to do. Alternatively, you could modify the tree to accept a comparator in its constructor and use that when available. new Tree({ comparator: function(a,b){...} // return -1, 0, or 1 });
You may be confusing yourself, just set the href of your A tag to the page you want to go to when you click the link.
There are actually 2 other options: 1. fillRect - if your Canvas is opaque (not any faster than clearRect though) 2. not clearing at all - if you overdraw everything anyways (e.g. games with scrolling)
Seems pretty sparse to me.
Whoa. 
Someone should create an open source Canvas or WebGL version of Terraria
no i mean that I want there to be 3 button states - the regular one, one when the mouse hovers over and one when it clicks - i havnt got a problem with the actual hyperlinking
Call me a troglodyte, but I don't see why a 3D engine is required for what is, essentially, a 2D game. I've tried other 2D games that have used 3D graphics (e.g., Civ4, EU3), and I just don't think their UI is as good as their 2D predecessors.
nice extension!
WebGL yields far greater 2D performance than a generic 2D canvas does, since WebGL allows for better hardware acceleration.
Intentionally so. If you don't know that "+" performs addition or that the "." operator looks up attributes, this refresher sheet is not for you. :)
Methinks you missed my point.
It's 3 years old, so I'd be weary of presuming that those benchmarks are still accurate. Perhaps someone could redo this for current browsers (I am lazy)?
This page seems incredibly useful for someone who is just learning Javascript. Does anyone know if there exist other examples of benchmarking commonly used code in Javascript?
This helps to show something that a lot of novice programmers just don't realize: it's language implementations that are fast, not languages.
Wonder if there's a [JSperf](http://jsperf.com/) version of these tests? Would be an interesting set of results. 
all of those supporting history API, precisely: http://caniuse.com/#search=history
I was trying to explain to a beginner today what the deal was with all the callbacks.
Just made this: http://jsperf.com/which-loop-is-the-fastest It's not all the tests, just the basic array ones.
Just saw your comment after posting exactly that!
More often than not, you should be writing your JS for the poor son of a bitch who has to inherit your work, not the fastest way. In other words, don't sacrifice readability/understandability/maintainability to save 25ms.
Good page for people writing a tool that generates compact javascript. But if you write code like that, i will personally hunt you down with a paddle. 
My skin started to crawl after read a few (had to close the page).
 for(var i=0; i&lt;arr.length; i++) { // done, this was the fastest code for me to write }
&gt; a=a||Infinity &gt; a|=Infinity These ones aren't equivalent.
Ha, yeah, these days you'd have to re-publish the results every month to stay relevant. In any case, for those interested, you can [run the tests yourself](http://blogs.oracle.com/greimer/resource/loop-test.html).
&gt; for(int i=0 I see what you did there.
Argh, thanks. Been writing Java all day. :-)
Of all the horrors in that page, there were actually two techniques that appeal to me in their concision and lack of side-effects. I *might* even use them. &gt; a = [b, b=a][0] &gt; a=[];i=0;for(a[i++]in window);
That first line is a neat trick.
`for(var i=arr.length; i--;)` Is shorter and faster. It's a reverse loop though.
You're assigning numCheck = true, rather than checking equality. Just change it to if (numCheck) {...
For future cases, you should use '===' instead of just '=' in your conditional statement. However, here you can just do if(!isNan(guess)){ --do this--} This says "if isNan(guess) returns false, proceed" Also, I would highly recommend [eloquent javascript ](http://eloquentjavascript.net/) - A free and very good online javascript resource/book for beginners. 
[i won](http://i.imgur.com/VWPfd.jpg)
&gt;if (numCheck **==** true){--carries out the rest of the code}
I bestow onto you the greatest award known to the jdduenas.com empire...the black asterisk --- *
You can use //host.domain.tld/path for URLs instead of detecting http/https
This isn't cross-browser, though; which is why Google doesn't do it when detecting HTTPS for their public codes like Analytics. I forget which browser it doesn't work on, but the first time I saw someone using it, I noticed because the site to which they linked me wasn't loading correctly; and it turned out that this was the error.
String.replace() accepts a function in place of a replacement string, which is called once for each match, and is passed arguments corresponding to each matched parenthesis in the regex.
is there any good hack to avoid all those annoying typeof x !== 'undefined' checks of arrays and more mulidims of that array to make sure some key all the way down exists and to avoid undefined errors?
A double not (`!!`) works for detecting if something is not undefined.
even if the parent of th checked dim doesnt exist?
take a guess, yup, it's IE6 :) [here's a post about it from Paul Irish](http://paulirish.com/2010/the-protocol-relative-url/) from what I understand, there's an issue with IE6 with a specific configuration, because of the security certificate on the google analytics domain. also, in IE7 and 8, this causes stylesheets to be downloaded twice
3. putImageData - probably the slowest way I can think of. :)
In some cases you can just check for Boolean truth, if you know your array will not contain any falsy value. You can also test identity againt `undefined` (as a value) or `void 0` (`undefined` is not a keyword and may be overridden — though that's unlikely — while `void` is an operator and can not ve changed)
lets say i want to check if obj.key.key.key exists and is length &gt; 2 but i dont know if even the first key is present
When it gets deep like that I usually throw it in a try-catch block (and maybe throw custom errors if there are further checks to be done on the resulting value), a lot simpler than checking for each attribute. When you do this make sure you don't run too much code in the try-catch otherwise you may get a speed penalty. In your example: try { if (obj.key.key.key.length &lt;= 2) { throw new Error(); } // truthy instructions } catch(err) { // falsey instructions } I also saw a new library pop up recently that can help with this: http://jsonselect.org/
**WARNING:** some of these tips are trivial or browser-specific, not good general tips. In particular David Calhoun's: &gt; You can pass arguments into setTimeout and setInterval Not unless [you want your code to break in IE](http://msdn.microsoft.com/en-us/library/ms536753%28VS.85%29.aspx), you can't. Moreover, architecting your code assuming you can pass references and complex objects into `setTimeout`ed/`setInterval`ed functions and then finding out that it doesn't work in IE (where the entire function call has to be decomposed back down to a string) *hurts*, and often requires hideous hacks (dumping objects into global variables - *shudder*) or a complete re-design of that part of the system. Believe me *I know*, because I was bitten by exactly this issue when writing a custom Javascript library for my employer. &gt; Old String functions Whooo. Someone's realised that they can browse the Javascript [String object documentation](http://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String#HTML_wrapper_methods) (developer.mozilla.org seems to be down temporarily, but it's all right there in the documentation, and always has been). &gt; An HTML element with an ID creates a JavaScript global with the same name Not in Firefox it doesn't. Try it.
You know how a lot of people do &lt;img src="" /&gt; with the " /"? The " /" is completely pointless unless you're serving the same page as application/xhtml+xml to some browsers and as text/html to IE (which almost nobody does). Also, the HTML, HEAD, and BODY tags are completely optional. And you don't need the closing tag of some elements such as P or LI so long as the parser can figure it out: &lt;ul&gt; &lt;li&gt;Abc &lt;li&gt;Def &lt;/ul&gt; And a bonus fact which doesn't work in any browser that I'm aware of. The following two lines are equivalent according to the HTML4 spec: &lt;span/Some text/ &lt;span&gt;Some text&lt;/span&gt;
When I come across this in your code, I'm going to have to *think* about it.
It's the regular JS reverse for loop. There isn't anything to think about. For reference, the regular Java reverse for loop looks like this: `for (int i=a.length; i&gt;=0; --i)`
ok, i'll bite if (obj &amp;&amp; obj.key &amp;&amp; obj.key.key &amp;&amp; obj.key.key.key &amp;&amp; obj.key.key.key.length &gt; 2){}
artifacts of long ago days we're trying hard to forget.
~~wait, what?~~ I see what you mean from other posts in the thread. [leptons' answer](http://www.reddit.com/r/javascript/comments/hzxzt/what_are_the_most_interesting_htmljsdom_hacks/c1ztxui) is the proper way to do it, but australasia's method works too.
&gt; The " /" is completely pointless And in fact if your doctype is HTML4 strict or HTML5, it's invalid. But you're gonna get downvoted hard for saying you can leave off end tags. That's just a really really bad idea.
Well, is it? edit: It appears it is, but the rendering still has some quirks. This has HUGE potential, we've been looking for a way to display PDFs embedded in a page without having to use flash or plugins.
No need of the ugly and slow json.parse http://jsfiddle.net/3Uset/
I don't typically like to modify native objects, but Resig came up with this little gem that makes removing an item out of an array much simpler: //Array Remove - By John Resig (MIT Licensed) Array.prototype.remove = function(from, to) { var rest = this.slice((to || from) + 1 || this.length); this.length = from &lt; 0 ? this.length + from : from; return this.push.apply(this, rest); }; Also, it isn't a hack, but always always always try to minimize the number of DOM writes and events. If you have a list of 500 widgets to put on a page, don't loop through and append each one, and use a delegate event instead of attaching to each item. 
yea! good finding, I think you should report it to the author
&gt; Moreover, architecting your code assuming you can pass references and complex objects into setTimeouted/setIntervaled functions and then finding out that it doesn't work in IE (where the entire function call has to be decomposed back down to a string) hurts, and often requires hideous hacks (dumping objects into global variables - shudder) or a complete re-design of that part of the system. &gt; &gt; Believe me I know, because I was bitten by exactly this issue when writing a custom Javascript library for my employer. One way to pass variables into setTimeout/setInterval: (function(foo, bar) { setInterval(function() { console.log(foo, bar++); }, 1000); })("foo", 2); YMMV though, as this might not be even close to optimal for specific cases. EDIT: my second example didn't work nearly as good as I thought it would. Sorry.
If that works in IE, it's brilliant! Edit: It's brilliant.
Another thing you can do is: var fooInterval = function(initial, fn, timeout) { setInterval(function() { fn.apply(initial, []); }, timeout); } And you can go: fooInterval({ foo: 1 }, function() { console.log(this.foo++); }, 1000);
Many things might be needed to be taken with a grain of salt, but the first entry (style contentEditable) is pure gold to me. knitting this right now in the admin view of current project, designer and client will like it. thx. 
Considering you can render individual pixels in canvas, it should be possible to support (most everything, if not everything) in a static PDF. You can infer that if someone had enough time to polish up this javascript reader, it could handle most any static PDF. Knowing this, perhaps you should contact the author of this project. If this has serious monetary value to you, you might even consider offering him a small bounty to fix certain issues or to keep adding support for more aspects of PDF. :) BTW, the project looks great, despite the current limitations.
And a blog posting about the site, http://www.schillmania.com/
It's an open source github project that's been widely publicized on twitter this morning. When I left that comment 3 hours ago it had 2 forks; as of this moment it has 15. I don't need to pay anyone, it'll be working flawlessly by the end of the month :D
So the daily WTF changed their domain name? Don't do any of this. Don't even cache the length, we're talking 1ms here people!
Not if the value you're looking at is 0. Or ''. Or false.
Usually a really really bad idea. Google folks do it habitually, though. Shaves bytes, and given their traffic, that's some serious dollars. But yeah, I wouldn't recommend it...
You can drive a car with your feet if you want to. It doesn't make it a good fucking idea.
Pretty sure this is a troll. 
This is true. !! is mostly used for feature detection. I assumed that's what tobsn was using typeof for.
This times 1000. DTHMLGoodies stuff was nifty, but it is way out dated now.
My favorite was Ben McMahan's postMessage trick for faster event yielding over setTimeout. I incorporated it into my [timer library](https://github.com/ChiperSoft/Timed).
After seeing a later comment, I think he meant an easy way to do "if ( foo.bar.baz.fuz &gt; 10 ) " when you don't know if all the properties exist. The answer being no, there is no way. But it would be a trivial function to write. function getval(obj){ var cur = obj; for( var i = 1; i &lt; arguments.length; i++ ) { if ( typeof cur === 'undefined' ) { return cur; } cur = cur[arguments[i]]; } return cur; } Or something. I haven't tested it. Edit: use: getval(foo, 'bar', 'baz', 'fuz', 'blah', 'blah')
Or even http://www.schillmania.com/content/entries/2011/wheels-of-steel/ ...though the site designer did not make that easy to find.
http://www.reddit.com/r/javascript/comments/hzxzt/what_are_the_most_interesting_htmljsdom_hacks/c1zwk71
It works surprisingly well: http://i.imgur.com/Hd2ma.png (My fonts are not anti-aliased)
Isn't the Google Docs viewer pure javascript/HTML? It also shows PDF files. 
Former linguistic QA guy here. What I did was take an English idiom, destroy it completely, translate into my language and translate back. Result: Only a couple of superfluous E's in a conjugated verbs and an incorrect translation of a homonym. Very good work for a first app.
You want to check for obj.key.key.key.length. If you're not sure if a obj exists or not, there's no way to avoid either checking obj's typeof first or catching reference errors. Once you know obj exists, you just need to make sure it's not null(etc) and non-existent properties will just return undefined. So if you know obj exists, something like: if ( obj &amp;&amp; obj.key &amp;&amp; obj.key.key &amp;&amp; obj.key.key.key &amp;&amp; obj.key.key.key.length ) { } or maybe: if ( ((((obj || {}).key || {}).key || {}).key || {}).length ) { } (The latter one is probably not the best way to go as in the worst case it's creating a bunch of objects, you could mitigate that but really I just included it for completeness) Really though if you need to check that deep that way, you might want to re-evaluate what you're doing. That's not to say there aren't cases where you need this of course, but there might be a more elegant way to do what you want. Usually, either you're dealing with a certain reference type, and you should know what properties it has (and what properties the properties have etc) or you might be querying some dynamic data structure, and then it might be better to develop a more robust selection scheme. 
Nah, the Google Docs viewer doesn't process PDFs on the client. Google use iText by 1T3XT which is a server-side Java PDF library that spits out HTML/JS for some basic interaction but the grunt work is done on the server. 
I often throw 5-10 bucks towards a developer of a program/application I like. I'm not saying you should, just that you still could. (I don't recommend throwing it at all the forks though, haha)
Err... Thanks... The translation is provided by google... but thanks! The real work was in the animation and cleaning the DOM after.
i love schill. tr42!
Really cool effect!
What is Scribd currently doing? For some reason I was thinking they'd solved this problem, but perhaps it's not by means of a client-side parser.
Thanks! Any ideas on how to improve it?
FWIW, this would be the first open source PDF viewer that I know of that is not under a copyleft license. I hope they stick with the MIT or similar license. :)
Good old Schill. Love their arkanoid.
Here's a blog post by the authors (members of Mozilla's graphics and JavaScript teams) explaining the motivation and plans for the project: http://andreasgal.com/2011/06/15/pdf-js/
The &lt;img /&gt; bit was trolling a little - I don't even know why people do that, it's entirely pointless (unless you can't remember which three or four elements have self-closing tags). The rest are genuinely things that people have been surprised to learn - people who've been writing HTML longer than I have.
Why not say they should? It's a normative model we want, right? I think people should donate to free software projects like we do--it doesn't mean you're a bad person if you don't. I don't mean to pick on you in particular but I'd like to see more polite and unambiguous suggestion.
The fellow doing this is employed by Mozilla. Kinda surprised that the license is not the tri-license (MPL/GPL/LGPL)
I initially assumed that, but the result from the plugin don't correspond with google translate.
Your example, faustoc4, does not work with multiple parameters, but it could probably be implemented "your way" somehow.
It's an extensive testing and exploration on loop speeds, not a "best practices" page: it's from 2008, when less was known on the subject and JS interpreters were slower (did you notice Chrome is missing from the benchmarks?). And oh, FYI: caching the lenght dramatically improves iteration speed over HTMLCollections (*live* nodelists).
Interesting to see a small, lean framework trying to fix up the DOM API instead of a huge, bloated one trying to completely replace it.
What about using CSS3 transitions or animations when available ? The animation would be smoother.
You have a trailing comma in your setting object which will cause certain browsers to die.
Most of the rules in this are completely arbitrary and some don't make any sense. &gt;Heading styles should only be defined once What if I want to define a common style for all my headings and only differentiate them by size? h1 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 160%; } h2 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 135%; } h3 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 120%; } h4 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 100%; } h5 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 95%; } h6 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; size: 88%; } -------- vs ---------- h1, h2, h3, h4, h5, h6 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; } h1 { size: 160%; } h2 { size: 135%; } h3 { size: 120%; } h4 { size: 100%; } h5 { size: 95%; } h6 { size: 88%; } Smaller, more readable and maintainable
Saying people should IS rude. People are offering their services for free (I contribute to open source stuff all the time and expect nothing), and random blokes on the internet saying "you should give money to them" are saying they feel others are required to do so. They aren't required to do so. It is nice, yes - required, no. I'm not sure why you think MY post was the rude one... 
&gt; How come it’s such a pain to code in JavaScript? Because "everyone" "everywhere" doesn't take the time to learn the language before thinking they are a competent developer in it.
I am sold on the idea of micro-frameworks that aim to do one thing really well and frameworks that try to remain a fairly transparent extension of JavaScript.
I think that rule say that you should not define a h1 again, using your example h1, h2, h3, h4, h5, h6 { font-family: serif; color: blue; font-style: italics; text-decoration: underline; } h1 { size: 160%; } h2 { size: 135%; } h3 { size: 120%; } h4 { size: 100%; } h5 { size: 95%; } h6 { size: 88%; } and then adding one or more another places: #container h1 { color: white; } .leftbar h2 { font-family: comic-sans; } 
True. JQuery (for example) is really *useful*, but I've always been a bit uncomfortable with it because it drifts so far from the usual Javascript/DOM API model of programming. It feels a little bit like Visual Basic did back in the day (say, up to and including VB6) - sure it's productive, and sure it's easier to grasp than the alternatives (C/C++, etc), but the abstractions it teaches you are so far from the underlying reality of the platform that there's very little that's transferable to other systems, or to lower levels of the same system... and as we know, [that's very dangerous](http://en.wikipedia.org/wiki/Leaky_abstraction#The_Law_of_Leaky_Abstractions). Back in the day, if you learned C then you could quickly pick up many of the concepts behind C++, or Perl, or PHP, and from those moving on to Java, or Ruby, or even Python wasn't too bad. However, if you knew VB you knew VB, and that was it. Everything else was weird and terse and funny-looking, and full of brackets and braces, and didn't fit the (very VB-centric) mental tools you had to even *think* about programming. Learning procedural programming makes changing languages relatively easy, and even going from procedural to OOP wasn't too hard. But if all you ever learned was VB's Forms and GoSub, everything else was completely incomprehensible. Likewise, I get itchy when confronted with tools like JQuery (or, for CMSs Drupal) - they're great tools, and you can accomplish wonderful things with them, but over the years I've developed some very useful heuristics for judging the long-term usefulness of technologies, and one of them is "stay close to the trunk" (ie, by all means experiment, but if you want to be safe long-term then stick close to what lots of other things are doing, because that's your safest bet for the future). Sticking close to the trunk means the technologies will be generally tried and tested, the ideas behind them will map fairly well from one technology onto another, there'll often be an easy and obvious upgrade path from older solutions to newer ones, and your knowledge and skills regarding older technologies will largely be transferable to newer ones. For programming languages, that generally means things that look like C/C++ and use C-style syntax, libraries, bindings or concepts (Perl, PHP, Ruby, Java, C#, Javascript, Python, etc). For CMSs it means MVC architectures with templating systems. For web development it means open standards and not coding to specific browser features until they're part of a draft spec or implemented in several major browsers. JQuery, like Drupal now and VB before it, seem to me to be uncomfortably far out on a branch. They're excellent tools *for what they are*, but you can spend your life working in JQuery and very little you learn will necessarily be transferable to any other framework, and you could have spent your life working in VB6 and got a very nasty surprise when VB.NET came along (which was more "C# with different syntax" than VB6), or learned everything there was to know about Drupal and then been fucked when/if you ever had to use almost any other (properly-architected, MVC) CMS in the world. Drupal is handy, and JQuery is handy, and even VB6 was appealing to people who didn't already know how to program properly, but I suspect they're also largely dead-ends in terms of the skills they teach, and that makes me acutely uncomfortable as a developer.
I didn't say required, I said should. Normative. I feel like I explained that pretty well. And I certainly didn't find your comment rude. Wtf?
You're right... that's really odd.
thanks!
It's not logic-less. It merely simplifies conditionals into for-each loops. Since when does hiding your structure behind cryptic characters count as "logic-less"? Also, those aren't "partials". It's just plain old inclusion.
To be fair, many people make this mistake because primarily what they use JS for is to manipulate the DOM API... and it has a bad reputation after years of incompatible implementations in various browsers (also not the language's fault). javascript isn't a pain - it's a very flexible and expressive language, and you can do amazing things with it. The DOM API, however, is fucking *horrible* to develop in directly - it's incredibly low-level and fiddly. I.e., it's a pain to *code* in JS (because the code is usually hitting the DOM API or browser quirks, and those are often deeply annoying), but (aside from a few edge-cases) JS *the language* is pretty nice.
Ok, maybe the value of this was to show you that it really doesn't matter how you write your loop because the differences are negligible. HTMLCollections were a good example.
&gt;We call it "logic-less" because there are **no if statements**, else clauses, or for loops. Instead there are only tags. Some tags are replaced with a value, some nothing, and others a series of values. This document explains the different types of Mustache tags. Except the example has this: &gt; **{{#in_ca}}** &gt; Well, ${{taxed_value}}, after taxes. &gt; **{{/in_ca}}** So, which is it? EDIT: I know they call them *sections* but I could call them *kittenbeaters* and they're still if statements.
&gt;I don't mean to pick on you in particular but I'd like to see more polite and unambiguous suggestion That seemed a not-so-subtle dig to me. As in "Not to be mean, but you should be more polite and unambiguous."
Oh so you were serious. Just because it is allowed doesn't mean you should do it. Close your tags. People were surprised to learn it because it is such a bad idea and you wouldn't expect it to be valid.
It seems this library extends the DOM (cf [documentation](http://flowjs.com/docs/core/Flow.php)), I thought it was a [bad practice](http://perfectionkills.com/whats-wrong-with-extending-the-dom/)... BTW, [drag'n drop example](http://flowjs.com/examples/) does not work properly on IE9. Some examples do not work when IE9 runs the page in compatibility mode too. Edit: Finally the [source history](http://code.google.com/p/flowjs/source/list) seems to show this project is dead. Edit 2: no feature testing, only (obsolete) browser detection :(
I wasn't trying to dig on you at all. I really meant that I didn't mean to pick on you in particular, just a trend that I see around a lot (including myself).
The cake is a lie... http://perfectionkills.com/whats-wrong-with-extending-the-dom/
Great comment, I could suscribe it word by word. It feels bad not to join a platform bandwagon when everybody seems very excited about it, but then you see good projects languish because they are dealing with very idiosyncratic code they can't maintain or even move away from. There was an interesting talk about this in the PHP UK Conference last february: http://vimeo.com/21145583
Excellent!
Anyways, as far as the actual animation and interface goes, no problem there.
Honestly, a lot of JSLint stuff is equally arbitrary and pedantic.
According to this, you shouldn't use ID's as CSS selectors. 
Using this to prototype a new mobile site at work, in conjunction with solr queries. Working out nicely so far.
This is a horrible, horrible idea. Ninja edit: Horrible idea because screwing with the DOM will screw you.
How about XPath?
First off, exclude me from any argument ... I just want to make a friendly comment in here. :) Actually, I would hope that it would not even be "Normative" I don't like it when the software acts like shareware ... where it is kind of expected of me that I need to pay or donate something. Still, I think it might be a great option if more projects offered the *option* for companies or individuals to "pay" (a token amount) for a particular feature or bug fix that they might particularly need. Haiku OS uses this model (called bounties) to get certain things developed -- although it is mostly multiple people donating. However, in the end, I would still prefer that open source projects stick by the commitment that you are neither required or even expected to pay or donate -- no matter how much you use it or how key it is.
For multiple parameters $_GET must turn ?value1=xxx&amp;value2=yyyy&amp;value3=zzzz into a hashmap {value1:xxx, value2:yyy, value3:zzz} This should work http://jsfiddle.net/QZhEZ/1/
Here is the reasoning found on their [FAQ page](http://csslint.net/about.html) for the ID selectors: &gt;IDs shouldn't be used in selectors because these rules are too tightly coupled with the HTML and have no possibility of reuse. It's much preferred to use classes in selectors and then apply a class to an element in the page. It seems like some of the points are useful for a tool like this to spot (typing errors, vendor prefixes, empty rules), while a lot of the others are pretty arbitrary and debatable (any of the &gt;X number of floats/font-sizes/fonts warnings). Some things just don't adhere to one-size-fits-all rules.
I still find pure.js templates superior template system, because view and logic are separated. A view is a plain old html with ids and classes, you use DOM selectors and JS objects/hashes/arrays to fill the view. http://beebole.com/pure/demos/
We were just talking about this yesterday: http://www.reddit.com/r/webdev/comments/i0mpl/css_lint/ Totally agreed. 
That really got me into rage mode when investigating Grails. There was lots of hype like how their tags mechanic was so great cause it made their views so clean free from template logic. Third tag example? The if tag.
But it gives you the ability configure it to remove the more opinionated options and if it's not enough for you there's jsHint
In the Real World reuse isn't the _only_ purpose of CSS. This rule is ridiculously idealistic.
Does anyone have a link discussing the overuse of float. I'm worried that I don't understand when best to use float anymore! I'm pretty sure I would use it more than that on a page of decent complexity. When is an appropriate time to use float? I'm struggling to find anything decent about this.
Yep it works, and it's faster. Thanks for the rewriting. It really does not matter much though, since the code is executed only one time each load of the file anyway, but for micro optimization purposes is good to have in mind (then one have to consider code length, and maybe readability as well...). 
Great comment. I remember hearing a friend say once that the first time he saw "Zope programmer" advertised he knew it was time to pack up and leave while he was still a python programmer. This seems similar to your argument. I've worked with jQuery a bit and always found it very appealing. I fundamentally am not interested in JavaScript or client side programming and it lets me get the function I want with minimal knowledge/effort. I've been a Drupal user since the 5.x days. What's amazing is how little I know about it and how little interest in knowing more it has sparked. It is clearly right with the kernel for worst ratio of use to interest&amp;involvement on my part. The reason for this ratio is totally different for the two projects: kernel is an issue of problem domain, drupal it's a code style thing. All of which is a round about way of asking how did Drupal end up in your post?
If you just click and drag the mouse on an empty spot, it's kind of like fucking with an ant trail. It'll get all confused like "what the fuck?" but it'll figure itself out.
This contains some good tips about effectively managing memory in the browser with AJAX driven sites. 
ooh, shiny.
How are you going to study Javascript if you get off your ass?
At first I was like, "Oh boy a bunch of dots. Truly this is on the cutting edge of technology" then I noticed I could continue on to other experiments and I shat myself in amazement at some of these.
Scribd appears to be using a server side parser same as google.
Cool! Nice source code too.
IDs don't provide any benefits. There is no reason to use them.
https://github.com/stubbornella/csslint/issues/26 **Edit:** Basically, it's an indicator that you might want to use some grid system and maybe something like OOCSS's media block.
Here's some of my thoroughly JSDoc'd code: [https://github.com/chriso/redback/tree/master/lib](https://github.com/chriso/redback/tree/master/lib) ... and the output of the documentation generator I use ([dox](https://github.com/visionmedia/dox)): [http://redbackjs.com/api.html](http://redbackjs.com/api.html)
PCPlus shill. Doesn't quite fall under my definition of spamming, so sadly nothing to do but downvote and move on.
ID's are excellent javascript anchors, and really should only be used sparingly (as in main document nodes). It's also less prone to breakage when your code moves around.
Yes, they are great for JavaScript hooks. On the JS side, however, there is no performance benefit, since the ID usually won't be the key selector. And even if it is... who gives a fuck... it's just one element. There is nothing to gain there. IDs only ensure that you cannot reuse a rule. That isn't a desirable feature. I stopped using them about 2 years ago. I never missed them.
thx
How do you guys load your templates? Store them in one file, and make a get request?
It's cool and all but I don't think it's amazing. Fancy style is extremely slow, as is the candle example. This is the kind of thing you'd really want to use a shader for but unfortunately that isn't widely supported on the web platform as yet...
Interesting, thank you. OOCSS looks quite interesting. I'll put some time into playing with it and see how well it works out. Have you used it before? I've been in a position where I've not being writing a whole lot of CSS for a few years and I'm feeling a bit lost! Our designer left a few months back though and he was a bit of hack so I've got an opportunity to clear up our CSS - I'm starting to worry that I will make a mess of it!
It could handle 3D objects in PDF's too....
agreed!
yeah, kind of...I believe the original intent was just to explore all the possible ways of iterating over an array and test their speeds. Of course **now** we know that in many cases it doesn't matter which way you choose, but trust me: before that post (and another one,which I can't find right now) nobody ever did such an extensive benchmark and JS programmers had no clues on the subject. Also, keep in mind that older JS engines didn't have all the optimizations like the newer versions of V8, JägerMonkey or Nitro, so different looping patterns delivered different speeds, even on standard arrays. On top of that add every JS programmers' nighmare: old IEs! If you write a non optimized loop and execute it under IE7, or worst IE6, well...good luck telling those users that there's only 1ms difference in Chrome or FF! ;) And yes, HTMLCollections is where length caching shines the most. While It's true that many libs and snippets always convert node lists to arrays after a DOM selection, to get all the useful methods, it could happen you have to work on the live list directly, making changes on the fly for example: in that case this simple optimization can save you a lot of execution time.
i think that if the templates are very small, you could even embed them directly in the html page or in the relative js views. Otherwise I wouldn't mind put those in a single external file, minified and gzipped for production use.
What browser are you using? I don't notice much slowdown in chrome on a few year old laptop
Hey, nice trick. Works (no crash) FF 3.6.17 Linux Mint "Julia" x64. The fascinating thing is that Firefox also disappers from the apps bar. Doesn't work in my main Firefox profile, which forbids JS window resize. :-)
I fell asleep playing this while drunk/[5] last night. Was probably nearing an hour... I felt like an astro-physicist observing atoms being split
methinks [Netflix](http://i.imgur.com/UvAUh.png) uses Mustache...
What is the purpose of this? Some info would be nice.
&gt; drupal it's a code style thing... All of which is a round about way of asking how did Drupal end up in your post? I joined a company as senior developer, and shortly before I assumed the role the directors decided to transition away from writing raw PHP to using a CMS. They tasked a very green junior developer (seriously: the guy could barely program) with choosing a CMS to base the entire efforts and development of the company on. In retrospect this should have been a warning sign, but I'd been made redundant at the time and couldn't afford to be choosy. He looked at Drupal and CakePHP (and that was pretty much it), and decided on Drupal because "it gave you more out of the box" than Cake did (no joke - that was his rationale for the entire decision). Cue three and a half years of working in Drupal, becoming more and more frustrated with its complete lack of architecture and horrible inconsistency. TBH, three-four years of grinding my teeth at Drupal is pretty much *what* firmed up my ideas in this area (transferability of skills, "sticking close to the trunk", etc). And once I'd recognised the heuristic, I began seeing it elsewhere, too - historically my dislike of VB6, currently my suspicion about JQuery (also hugely recommended and supported by the same junior developer... hmmm). So...yeah. Drupal was in there because it was basically the first thing that really prompted the realisation, and firmed up my niggling suspicions into a defined position and heuristic for the future. ;-)
Messing with users, I guess? \- or - "Click here to increase your productivity!"
For me the interesting bit is at the end, around using 'postMessage' to allow a faster callback then using 'setTimeout', 'setInterval' or 'requestAnimationFrame'. However the point of 'requestAnimationFrame' isn't just to give you a regular interval; if that were true then it would be pointless (we have setInterval/timeout already). The point is that you get the callback just before the browser renders, at the best point in time, rather then a random one. It's explicitly saying "I want to draw during this callback", which neither of the other two methods do. This makes it the best option to use, not only today but especially for the future. You can also improve this further using the 'MozBeforePaint' event in FireFox. But otherwise this is pointless (as your monitor won't update more then it's refresh rate).
The LCD 60hz refresh rate has been pointed out in the post's comments as well - that factor didn't occur to me at all. In the end, as you said, the value is more about avoiding the inherent delay when using timers. As for rendering, if you have something taking 20fps, removing that delay may give you a few more frames each second.
I saw it pop up in the JavaScript Weekly email list, but hadn't heard of it before. Any thoughts? It looks a little like MS Access on the web. In a good way though.
This looks really nice. I wish I had something to use it on right now.
yep, use Unicode RLO symbol, but be careful RLO is evil character... alert('\u202ePewpew') // alerts wepweP More info about RLO http://www.fileformat.info/info/unicode/char/202e/index.htm
While passing through I've always really liked the Drupal community and thought that the aspirations of the project were great. The end results are impressive too but like you said you've really have to commit to being a Drupal dev because it's its own world. I haven't had a chance to look at Drupal 7 yet. I wonder if it's faster? I hear they are trying to remove some of the code/template/config/everything from the database. That should make it much easier to manage. Regardless, good post; exceeded expectations; would up vote again. 
Meld is pretty nice, but I fail to see what it has to do with javascript specifically...
One of the takeaways for anyone who's worried about in-JavaScript performance. &gt; ...eval, with, and throwing exceptions are not only generally slow operations, but they can deoptimize nearby code and cause much greater slowdowns than you might expect. Another big one is that dense arrays are much faster than sparse arrays–see the slides for details.
"loading ..." is all I see in chrome. Not cross-browser?
I got to "playing" but no sound in chrome.
Works in firefox
According to the GitHub page it looks like Chrome support is broken. Firefox works fine though.
Why not? How else are you supposed to, I dunno, _cascade_? Tool sounds dumb.
CPU utilization is amazingly low too... what's next? Javascript synths?
Definitely a good point, we don't know that it doesn't matter until we test. 
So, I did actually try this before I posted. It doesn't appear to work in FireFox.
Also, for the next guy, I figured I should mention the RTL embedding char too: "\u202b". This is what I already had in my code to fix Chrome. This does not attempt to reverse non-RTL encodings, so is safe for use with embedding multiple character sets. \u202e will reverse LTR embedded text chunks as well. So you've get things like " מהדורת elloH מהדורת " instead of " מהדורת Hello מהדורת " Cheers.
Yeah, no Chrome support, which - as far as I'm concerned - makes this project useless until it is offered. Unless you are in some weird scenario where 100% of your users are using Firefox.
[Atwood's Law](http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html)
I can't wait for a browser that lets you select your JS engine from a dropdown menu under Options.
Does this use the Audio Data API?
Why? For testing purposes? Would that change rendering engine too?
[github: jsmad](https://github.com/nddrylliog/jsmad) seems to have source code, which is anything but useless.
Is this any better than html5's audio tag?
I know the source code is provided, but it only works in Firefox. It is useless if only half your clients can use it.
Of course it isn't useless. No, it's not production-ready, but it's still a fascinating experiment that can be improved on.
&gt;No, it's not production-ready, So, right now, it is useless. It has no valid use. There is no reason to use it. It is useless. It _won't_ be useless when it is done; but right now, it is.
Doesn't Chrome support MP3 natively, or has that been dropped now?
Hi guys, lead jsmad developer here - will try to answer your questions one by one, so deal with me :) Most of your questions are already answered on this HN thread though: http://hackerne.ws/item?id=2665607 Enjoy!
JS synths have existed for a long time - relatively speaking. The Web Audio API and the Audio Data API have been in nightly builds for some time and people didn't wait for us to play with them ;) In fact, jsmad *does* use a kind of synth (see synth.js), and the audio library we're using, ie. audiolib.js, has a bunch of built-in synths.
Chrome 13.0+ is supported. Go into 'about:flags', enable 'Web Audio API', and restart your browser. Enjoy!
With HTML5's &lt;audio&gt;, I'm sure it does. But Firefox supports HTML5 too.
Hah, that's reddit for you - I'm the lead dev, I give meaningful information, and I get downvotes ^^. Feels like home.
It's not better nor worse - it's just different. See my complete response on HN: http://hackerne.ws/item?id=2666529
Chrome's HTML5 &lt;audio&gt; tag supports MP3. Firefox's doesn't. That's one of the many possible applications of jsmad.
What's the reality of trying to get this running in an older browser without any semblance of an Audio API? I also briefly glanced at the code and see you're trying to accommodate for lack of typed arrays, for example. 
Crashes Safari on my 2nd gen iPod Touch... Works fine in FFx 4. Doesn't work in Safari 5.0.5 (osx) Doesn't work in Chrome 12 (I know you mentioned Chrome 13 with a flag enabled) Not hatin' on you. Really cool thing you got here. Expand the browser support and you really got something going on here ... ESPECIALLY if you can get iThing support going.
&gt;OOCSS looks quite interesting. I recommend to take a look at Nicole Sullivan's talks and slides. Latest talk (which is available): http://www.stubbornella.org/content/2011/04/28/our-best-practices-are-killing-us/ &gt;Have you used it before? A little. The reason for that is that I can now use something which is a bit nicer (from my point of view anyways) and way simpler, since I don't need to support IE6 anymore. This means I can use the child combinator all over the place. And that's exactly what I do. I also use *very* restrictive naming and structure conventions. Seems to work f-ing great so far. It's *super effective* at avoiding bloat till the end of time. It also feels kinda unfair that I'll be able to utilize CSS Lint much more effectively with my rules. There is much more useful information available for static code analysis. Well, I hope I'll be able to blog about it soonish. Got a bit too much in my queue right now.
Excessively clever, in both a good and a bad way ;)
&gt; In other words, don't sacrifice readability/understandability/maintainability to save 25ms. ...unless that 25ms is critical to your application's performance. Sometimes it adds up. that 25ms savings on a particular loop which may get called by another loop, multiplying 25ms x iterations.. I've seen that happen plenty of times. Premature optimization isn't a good thing, but sometimes it helps to hit the 'Profile' button and tighten things up a bit. That and the fact that javascript is being used more and more in algorithmic processing - [mp3 players written in javascript, for example](http://www.reddit.com/r/javascript/comments/i2brg/javascript_mp3_decoder_allows_firefox_to_play_mp3/).
Gosh, it sure is a good thing you came along when you did. I'm pretty sure they didn't know where to go from here. 
Might not be exactly what you're looking for but I wrote something recently that has made it simpler for me to do type checks http://pastebin.com/MRnA5zyQ
Wow, memory consumption goes through the roof when a song is loading, both in Firefox 5 and Chrome 14. Also, switching to a different tab when playing a song makes the audio crackle a lot. Very interesting work, by the way!
They're dark blue tiny particles until I found the "Fancy Particles" button in the middle - far right.... If one's got a high res monitor, click this button to see the particles much clearer!
It's like a penis! I can't stop playing with it!
Would it be possible to get a simple example of how to embed this in a page? I'm a beginner to complex JS projects like this, but I'd like to toy around with this a little in my own pages.
very nice!
&gt; There are even more possible ways to achieve this conversion—try to find one! Here's mine (only working with chome): function fromCharCode(charCode, callback) { var arrayBuffer = new ArrayBuffer(1); var uint8Array = new Uint8Array(arrayBuffer); uint8Array[0] = charCode; var blobBuilder = new WebKitBlobBuilder(); blobBuilder.append(arrayBuffer); var fileReader = new FileReader(); fileReader.onload = function(event) { callback(event.target.result) }; fileReader.readAsText(blobBuilder.getBlob()); } fromCharCode(65, alert);
No questions, just want to say I really, really appreciate projects like this... Thumbs up, and keep up the good work !
That is not real Chrome support though. You couldn't use that in production.
I believe FireFox 5 is getting an mp3 player, which is out in 3 days.
Tee hee... You're trying to be snarky. How cute. 
In the same way a seed is useless...
maybe, but I'm really intrested in explorations, and how people come up with so many different and crazy solutions :)
another useful developer's tool in the box? ;) Yeah, I mean, not strictly js-related but turned out very handy for me in Gnome, to quickly compare two different versions of a js file I wrote. I tought other js developers would find this useful. Also, i created a nautilus action calling Meld, from the context menu, over 2-3 files or folders: super smoooth!
Here's a jQuery plugin called [TubePlayer](http://www.tikku.com/jquery-youtube-tubeplayer-plugin)
I don't see why the refresh rate makes this pointless. Plenty of games have an internal loop that runs faster than the rendering loop. Perhaps for calculating physics steps or handling user input. This technique allows for having a game loop run at 100fps and the display refresh at 60. So you shouldn't actually try to render more than 60 times per second, but that doesn't mean you shouldn't be doing anything more than 60 times per second.
Is there any distinction between this and the "observer pattern"?
Why not just `return` ?
it's an implementation of the observer pattern, also called publish/subscribe mechanism ;) The intresting trait to note here, IMHO, is the architectural one: a centralized pubsub/observable controller which dispatches events to subscribers, decoupling (in this example) the datasource from the views. On a side note I really don't like the implementation in the article; I'm using a different lib to handle events/signals in my current project: https://github.com/millermedeiros/js-signals
Are you being deliberately dense?
Because fileReader.readAsText function will return the value asynchronously
404 link.
Works on Android browser too. Cool. 
Eloquent JavaScript http://eloquentjavascript.net/
I do not agree. If you run faster then the refresh rate then you are creating updates which will not be seen. There is no reason why you cannot update physics, or receiving user input, at 60fps too. After all, none of this will be seen by the user if it is drawing at a slower frame rate.
Anything involving the Nyan Cat gets a vote from me!
Very nice page. It's clear, laid-out well, and gets to the point. Too many people forget a good example. The only thing missing is some more extensive docs, such as what the signature of the custom save function is, etc. Whether you put them inline or on the github wiki, a reference to more information would be great!
I have that in the readme but you are right it probably needs to be more extensively explained with a wiki page.
Awesome... Everything but the sound works Ipad here
I saw that. You just need to reference it in the page, because it's not in a clearly-delimited spot in the README. I would even say putting it inline on the page is better.
Wow, had the stereo waaaay up. Scared the shit out of my wife, was well worth it.
I wish [this](http://nyan.cat/) didn't use the cat gif.
letsDanceBeeAch
Ya know... I don't think this project is ever supposed to show up in production, what with &lt;audio&gt; and all.
I am more and more impressed with the default android browser daily. 
I hate when people do that to me.
Or if you're using MooTools var pub_sub = new Event();
what about more accurate collision detection? make sure basic one updates at 60fps but then try and fine-tune it during the extra milliseconds
Basic example did nothing for me in Chromium 14.
Hey! Hey, you! Yeah, you JSON request! This is you: "I'm a JSON request! I'm going to talk to a server and get information in a widely-readable format! I adhere to the same-origin policy in most browsers!" You DISGUST me.
Seems to be a bug with Chromium http://code.google.com/p/chromium/issues/detail?id=84365&amp;colspec=ID%20Stars%20Pri%20Area%20Feature%20Type%20Status%20Summary%20Modified%20Owner%20Mstone%20OS
This is awesome, but it is entirely the wrong subreddit. It even specifically mentions that the single line of JavaScript is for the audio. Everything else is done entirely in CSS with no JavaScript, which is why it's so awesome. Try popping this baby into r/programming or r/CSS
That is outrageously excellent, both the plugin and the demo. Worked stunningly on iOS. Congrats!
Hey JSONP, here's a request for you: ShutUp! I'm tired of your "Ohhhh XML is too hard, let's use JSON" just shove it, JSON. You know why there is no DOM to access you? Because nobody cares! Nobody wants to access your objects. How many bottom values do you have? Let's count them; there's false, there's null, and there's you; a big fat zero; I'd reduce you to a EBNF but there is no normal world that you could possibly form. You think this is a *lazy* parser? Wrong! I just don't care. I encode you with Content-Type: text/boring
Thank you for the clarification! I appreciate you taking the time to share your info.
You should give some example images, in case I'm too lazy to actually find an URL.
Good point.
You should also make it possible to slide more than just 1 block at a time.
Don't put JavaScript in the head, put it at the end of the page!
Thank you, this looks perfect
you're welcome :) I like to help or share informations about things I know, not just limited to programming. Hope my answer was useful, cheers!
This is how it looks rendered [with CSS outline](http://i.imgur.com/gNKIe.png).
do what?
I can't understand if this is sarcastic or what but... this comment is fantastic! :D Made my day. EDIT: oh, daaaaammit! Now I got it...MOCKING JSON!! Hahahahahaha! :D Sorry, I'm not native-speaking english, took me some time to realize the joke.
Works fairly well in Safari. Only thing off were: no audio and some of the sprinkles on the poptart were below where they are supposed to be (but then this just looks like the poptart is shedding crumbs so... works for me).
&gt; Instead of using **Google Windowing Toolkit**, Rich Faces, Django, or any other **server side technology** I'm not sure he knows what he is talking about... reminder: GWT means "Google Web Toolkit" and compiles Java code to JavaScript, so it's a client side technology.
You could also allow to use local images with FileReader API.
Client side *and* server side
You're right but the server-side API is a tiny part of GWT and totally optional.
mockJSON. =(
JavaScript, especially in the browser, is a terrible environment to learn programming. It's like trying to learn how to fire a gun by becoming a secret service agent. So much going on, a strange munging of several different environments, and a rushed very quirky language to boot. If you really want to learn to program, I recommend picking up a more uniform, well thought out language such as Python, Ruby, even Java or C#. The foundations of what you learn there will still apply to JavaScript.
I feel like I've been Forever-alone-rolled.
Oh I'm sure it's not the best language to learn programming in general. But JavaScript will be of most use to me. I don't want to be a programmer, but rather a designer who uses code properly.
Workaround: save the web page to your local disk, open it from your local disk, then file://localPath URLs should work. For IE, use back slash: file://c:\abc\xyz.jpg For other browsers, use forward slash: file://c:/abc/xyz.jpg For images in the same directory where you saved the web page, you can just use the filenames directly (xyz.jpg) as the URL. 
I don't understand why there are string names for the classes? (like com.example.hello.Hello in the examples)
Personally, I'm OK with the use of string to emulate classe name and classpath at the API level. It's quite common with this kind of JavaScript libraries and I do not see any other reasonable way of doing it. With this library, it seems objects seems don't have any member to get their full class name. I think it may be cumbersome sometimes. Now, the questions are: When do I need to use this (kind of) library ? What about the last sentence from Douglas Crockford [here](http://www.crockford.com/javascript/inheritance.html) ? : &gt; I have been writing JavaScript for 8 years now, and I have never once found need to use an uber function. The super idea is fairly important in the classical pattern, but it appears to be unnecessary in the prototypal and functional patterns. **I now see my early attempts to support the classical model in JavaScript as a mistake**.
I still don't understand *why* though. Like... what does it accomplish? The class is still in a variable after all (eg Hello), why create another name for it?
It works on any webkit browser afaict -- Chrome != the world.
I think joose (Perl's Moose done in Javascript) supports AOP, although I have yet to actually use the library. It's on my todo list to try it out, as it looks pretty sweet.
YUI seems to have elements of AOP built-in to the plugin architecture as well as elsewhere: http://jsperf.com/default-function-vs-aop/3
Looking at the source code, I'd say it's for caching previously created class constructors. if( !superclass &amp;&amp; !protobject &amp;&amp; map[classpath] ) return map[classpath]; 
I find it confusing to call it passing an "object scope" since call and apply modify the this value and this has nothing at all to do with scope. My stab at a summary: Call and apply set the this value inside the function you call.
Indeed. He means *context*, not *scope*
I think calling it context is also confusing. This isn't contextual, it's set by the caller at runtime.
It's more accurate as the function is performed in the context of the object set at runtime. Scope is a different beast.
It's not very appropriate to use Comic Sans font for a programming blog, I suggest you pick something slightly more readable.
Pretty poor "stab". Here's the 2 pages I reference most when explaining call &amp; apply: * Trephine.org: [JavaScript call and apply](http://trephine.org/t/index.php?title=JavaScript_call_and_apply) * OdeToCode.com: [Function.apply and Function.call in JavaScript](http://odetocode.com/blogs/scott/archive/2007/07/04/function-apply-and-function-call-in-javascript.aspx)
Too gray for me. The same drab gray that Windows uses. May not bother some but to me it looks very dated (1990's).
Started reading this a week or so ago, it's well written and hammers over the basics. Haven't finished it _yet_ but I've been very pleased with it thus far. If you've been working in JS for a bit you could probably skip the first few chapters but they'd be excellent for new users.
https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call
It may be slightly more accurate but it's still not helpful to think of this as being contextual in any way. It's a binding that evaluates to whatever this object you passed in, either implicitly by calling a function directly or by using call and apply. You have no idea what this is by examining the its context.
Coming from an engineering background of C and C++, Garbage Collection has always freaked me out with it's black magic-ness. How does it know when the object will not be in use anymore? End of scope?
Not a very good article. Pretty much the same as any of the "Javascript 101" articles you can find.
Stopped reading at "There is more *then* jquery"
Check out http://en.m.wikipedia.org/wiki/Reference_counting for one solution. As you might infer from the page name, you just keep track of ref counts. When it reaches zero for some object, you can get rid of it.
Essentially they maintain a list of in-scope variables and previously instantiated ones, when a variable marked for collection cannot be reached from any path of an in-scope variable it's instructed to tear down. Note: variables declared globally are *never* marked for collection until the page itself closes.
Objects, not variables, are marked for collection.
I would hesitate to be so quick to judge content based upon a very minor English problem. Considering the industry we're in, you should be very well used to dealing with people on an international level, and on that same token I believe the work should be judged on the technical merits and not it's adherence to strict English usage. Unless the English is so poor that you cannot understand what they're writing about, you're only doing yourself a disservice by not reading the article; and in this case I didn't have any problems at all understanding the content. It's also obvious that English probably isn't the author's primary language -- can you write perfect German?
Can someone explain why it's better to prototype the calc area function please.
Sure. A few reasons, probably, but chief among them is the fact that, when you do this.calc = function() {} inside the constructor, you're creating a new function object for every new rectangle. This isn't exactly a lightweight construct as it has to enclose the surrounding scope as well (though I believe most modern Javascript implementations will optimize this case somewhat). When you make a prototype with a calc function on it, all instances of Rectangles share one function. It's also good from a code separation standpoint. It's a lot easier to find the things that rectangles do by examining its prototype object than to dig through the constructor which will have initialization code and other things.
In a langauge where pretty much everything is an object, same difference.
Finally, function call is a lot faster when using the prototype object.
I'm suspicious of this... function calls will check own properties first and then check the prototype chain, which makes prototype functions more work. Other than that, the amount of work required to call a function should be identical. I would think that, if anything, own functions would be faster.
edit: It's faster on all modern browsers but not firefox. See [this test](http://jsperf.com/instance-method-vs-prototype-method/2) for example. edit 2: I was a bit wrong, this test shows that it's faster when calling a function (1000 times) *and* creating the object.
I recently tested Object.freeze() because I really wanted to use it. However, I found that it is not really usable in current browser environments. The problem is that there are three possible behaviours when modifying a "frozen" object: 1. In an ES5 environment that employs "use strict" you will get an error 2. In an ES5 environment that does not employ "use strict" modifications are silently ignored 3. For all other environments the modifications work without error I can't manage code that has such vastly different behaviours dependent on platform. EDIT: I'm assuming a shim for Object.freeze() in option 3. 
&gt; I'm a bit of a n00b, any help would be greatly appreciated. You're not a "n00b" you're a lazy developer. Do your own fucking work.
I really don't see how asking a question about something I'm not particularly familiar with is being "lazy". If you don't have something useful to say, don't bother: all you've done is successfully waste both my time and yours. 
Under what situations are you not sure what environment your code is running in WRT strict or non-strict, assuming an ES5 environment?
I'm providing a library.
(function() { "use strict" // my library code here })(); Won't all your library code be strict mode under an ES5 environment in this case?
It seems like the "use strict" thing only applies in the outer scope. I can provide a test case if you need but you can also extrapolate from your own example. 
If this is true, you're testing on a buggy implementation I think. ES5, Section 10.1.1: Code is interpreted as strict mode code in the following situations: * Global code is strict global code if it begins with a Directive Prologue that contains a Use Strict Directive (see 14.1). * Eval code is strict eval code if it begins with a Directive Prologue that contains a Use Strict Directive or if the call to eval is a direct call (see 15.1.2.1.1) to the eval function that is contained in strict mode code. * Function code that is part of a FunctionDeclaration, FunctionExpression, or accessor PropertyAssignment is strict function code if its FunctionDeclaration, FunctionExpression, or PropertyAssignment is contained in strict mode code or if the function code begins with a Directive Prologue that contains a Use Strict Directive. * Function code that is supplied as the last argument to the built-in Function constructor is strict function code if the last argument is a String that when processed as a FunctionBody begins with a Directive Prologue that contains a Use Strict Directive. Bullet 3 seems to apply in this case.
I wouldn't worry much about strict mode throwing an error. If your library exposes frozen objects, and you clearly indicate that properties are read-only, there's nothing wrong about strict code throwing error on writing. Yes, of course behavior is different but... so is writing to any other read-only property: (function(){ var x = 1; delete x; })(); ^-- will throw when run from within strict mode, but silently ignored when run from within ES5-non-strict (or ES3). Strict mode throws exactly for the reason to indicate that you're doing something wrong (assigning to read-only property, declaring identical property name/argument, etc.) And if user opted into strict mode, they are likely aware of increased "noise" (and possibly want exactly that).
I do worry about it because I can potentially get different code-paths for each browser. My JavaScript library is already complicated by cross-browser deficiencies, this just makes it worse. I'd really like to freeze my API but I don't think that it is currently viable. EDIT: There's a lot more to it than that though. It's about providing a consistent API and consistent error messages.
I tested in Firefox 4.0. If that's a buggy implementation then fair enough. My point is about cross-browser inconsistencies though.
Could compare against the IE 10 platform preview just to see :)
Damn. I created an account for posting quizzes in /r/soccer and I accidentally answered using that username. Sorry for the confusion! :)
I bought this book whilst trying to teach myself JavaScript. I returned it after a week... it just wasn't for me. It didn't reflect my learning style very well. Plus, the book is available online for free: http://eloquentjavascript.net/
Hi speek, I feel compelled to add my 2 cents in here. (and no I didn't down-vote you!) :-) This is an argument I see all the time both online and offline (and argued incorrectly), and this message might sound semi harsh - but its all in the hope of making you see things from a slightly different angle. Any programmer saying that they are more experienced and disciplined than most will always leave me skeptical and when they do things such as comparing the lines of code between python apps and java apps, this shows to me that you may be an excellent java programmer, but programming paradigms and languages in a more general context is something you need clearly need to work on, and there is no need to feel shameful (I think this is the norm for the majority of programmers out there for a number of reasons). My advice: Just be humble and aware of your short-fallings (EVERYONE has them) and work to improve them over time, even if that means spending extended periods of time learning other non-java technologies just to "fill in the gaps" - it might not sound worthwhile now but believe me, if you can get over the initial speed bump of learning a new language (static or typed) and get into it, it is totally worthwhile doing! I wish all programmers did this - but I know that is a total pipe dream! ;-). Now back to the static vs dynamic debate. The answer is simple: Having extensively worked with both types of paradigms under a bunch of different languages with a bunch of different sub-paradigms attached, I think it is mostly like comparing apples and oranges when trying to compare Java to Node.Js (for example) with things such as "lines of code", "performance" or "helping write bad code". These metrics are bunk for such a debate. For example 1. Python apps will ALWAYS have less lines of code than their java counterpart due to the syntax differences between the two. 2. Performance is variable based on the language and technologies/frameworks you are using and often has nothing to do with static or typed. Just because your language of choice is static typed does not mean that every static typed language will do garbage collection better or worse than a dynamic language because all their garbage collection routines totally differ to one other. 3. The myth that dynamically typed languages cause more errors or helps to write bad code more than a static is one of the most ridiculous to me, a bad programmer will always write bad code, and a good programmer will (usually) write good code and an exceptional programmer will write very little (but very good) code. Even calling a programmer a programmer is something I don't like to do too often - because there are extreme differences between the mindsets of javascript developers vs java developers which would alter how they would go about solving a given problem. I think it is all about knowing the generic programming paradigms and picking the right technology for the job, as opposed to being a seasoned developer in one language (with its own paradigms) yet being totally closed off to all the other interesting paradigms and different ways of doing things that are out there. You may ultimately choose to always be a Java developer (and theres nothing wrong with that!). Not being interested in or un-willing to pick up other languages and paradigms means that you can't truly call yourself anything more than a java developer (And theres nothing wrong with that either!) Until you start talking like your a python or javascript developer... ;-), that is when you should just stop and let the other people argue pointlessly about this stale topic :-)
Looking at the tests i don't see any evidence to suggest that it is measuring the time taken to complete the SQL transactions, just the time taken to dispatch them. LocalStorage has to be synchronous which means that the backing store must essentially be flushed at the end of every write, whereas the SQL API is entirely asynchronous so nothing happens in the current iteration through the run loop. An equivalent test to this (for localStorage) would be function localStorageTest() { ... } for (var i = 0; i &lt; whatever; i++) setTimeout(0, localStorage); This way the localStorage approach will "finish" much faster, but won't have stored anything to some time after you've "finished" the benchmark. What you're looking at is the basic reason for the storage and communication APIs becoming increasingly asynchronous.
You're not completely off base. `keyword` looks like it should be right. But you can't use `keyword` in html like that. you'd need to add a script tag to the dom and set the src.
Continuing with what he said, the general concept for selecting a keyword looks about right, but I would suggest some changes to the style and formatting of your code (like using semi-colons and declaring all your variables with *var*, for example). I would re-write that something like this: &lt;script type="text/javascript"&gt; var keywords, index, keyword; keywords = ['name1', 'name2', 'name3']; index = Math.floor(Math.random() * keywords.length); keyword = keywords[index]; &lt;/script&gt; From there, you still need to insert the script tag into the DOM, which might look something like this: var script = document.createElement('script'); script.type = 'text/javascript'; script.src = 'http://twitter.com/...' + keyword + '.json?...'; var head = document.getElementByTagName('head')[0]; head.appendChild(script);
 var a = document.createElement('script'); a.src = 'http://example.com/'+ keyword +'/whatever'; document.body.appendChild(a);
&gt;`setTimeout(0,...` This adds 4 or 10 msecs (depends on the used browser).
This is one of the best JavaScript performance talks I have seen ever. Very informative.
&gt; Unless a site is set up by some wordpress hack that just throws "widgets" all over the page in random order, you don't do a lot of script requests after page load. It sounds you have almost no experience working on large commercial websites or websites generating heavy advertising revenue. In light of that ignorance I can completely see how my post must look silly. &gt; You are making yourself look silly. Now you are sounding like a troll.
Well, localStorage uses Webkit SQLite by having two text rows, one with the id and the other with the value. localStorage basically grabs the value and JSON.stringifies it into the database. So when you JSON.stringify something into localStorage, the localStor- oh.
A setTimeout call definitely does not take 4 (let alone 10) msec.
&gt; Looking at the tests i don't see any evidence to suggest that it is measuring the time taken to complete the SQL transactions, just the time taken to dispatch them. Yep. JSPerf has facilities for handling asynchronous tests, but they're not used here. I updated the test [to revision 4](http://jsperf.com/lawnchair-webkitsqlite-vs-domstorage/4) to use JSPerf's async test APIs, and suddenly WebSQL drops from being twice as fast as localStorage to being a hundred times slower.
Uh... [yes it does on most modern browsers](http://www.belshe.com/test/timers1.html) Quick test using all the browsers immediately available to me (on Windows 7): * FF4/Safari 5: 10ms (average) * Chrome/: 4ms (average) * IE8: Jumps around too much to be clear, but seems to be around 10ms longer than whatever you set the desired interval value to. Admittedly from [this bug](http://code.google.com/p/chromium/issues/detail?id=888) it looks like Chrome doesn't *enforce* any minimum setTimeout() delay, but there appears to be one nevertheless.
Because the test is written incorrectly, as olliej noted WebSQL is an asynchronous API, you're just testing the time it takes to send the initial insert call to the db engine here not insert + select + delete. I edited the test (rev 4) to use JSPerf asynchronous testing for WebSQL, and the performances of WebSQL are about 1% of localstorage's.
The minimum values for setTimeout and setInterval are clamped to 4 or 10 msecs.
Not relevant, that's the time it takes before the callback is called, not the time it takes to call setTimeout.
&gt; Uh... yes it does on most modern browsers No, a `setTimeout` call is instantaneous, the delay before calling the callback is not. Olliej was referring to the cost of calling `setTimeout` itself.
Sorry - I re-read the thread and (in context) see what you mean now. Mea culpa.
No trouble at all.
All that without saying anything other than some generalisms. Don't compare apples to oranges - got it. Performance varies depending on various variables. Got it. Good programmers write good code, bad programmers write bad code. Got it. And I haven't learned any dynamic languages. News to me, but, got it. Anyway, wtf did that have to do with my comment? Did you read what you responded to?
I did not do much, I just checked "this is an async test" and added a call to JSPerf's `deferred.resolve()` in the callback of the final (`.remove()`) lawnchair_sql call, in order to tell JSPerf when the test actually terminantes (as in, all modifications are committed to the db). Lawnchair apparently handles both styles and you have to know if the underlying data store is synchronous and asynchronous. I think I'd prefer it to commit to a single style, probably async (and synchronous data stores would just call the callback synchronously) since as far as I know JS does not provide any way to synchronify async APIs (via locks, for instance).
In short: it can't be done. You can try to fake it but the demonstrated technique requires client code to call a verification method. Instead of a native compile-time (interpret-time?) implicit assertion, you're left with a runtime validity hook which requires [actually, there is no way to enforce such, so it's more like a suggestion] implementing clients to call a "check interface" method. IMHO such a technique is more academic than anything; in the real world, trying to emulate this behavior seems like a losing battle. You'd probably be better served moving all of the code into unit tests, because that's essentially what you're doing.
Thanks for that.
Pretty sad that you're on Reddit asking for tech support for web design, JS and a CMS, for a guy who is trying to sell his services in web design, JS and CMS. Especially given what the actual problem is. "My buddy the carpenter needs help holding this hammer." There's a point at which you have to start asking yourself whether you're actually qualified to do the work you're trying to sell.
Dude. It's a problem in chrome only. I develop professionally, and I can't figure it out. Thanks for your snarky remarks. 
It seems to be a bug with chrome 12. It works well with chromium 14.0.786.0.
&gt; Dude. It's a problem in chrome only. Dude. It's a bug. Undefined behavior not being obviously broken everywhere while browsers try to Do What You Meant is a classic problem that tricks novices into blaming the browser that guesses wrong, instead of actually finding the bug. &gt; I develop professionally, and I can't figure it out. Yes, which is why I said &gt; &gt; There's a point at which you have to start asking yourself whether you're actually qualified to do the work So, there's that. &gt; Thanks for your snarky remarks. Thanks for the incorrect downvote. But hey, you can pat yourself on the back, because when someone said they knew what the problem was, instead of being humble, you showed them who was boss. Or ... did you?
Dammit, I fed the trolls again.
It also works in chrome &lt;= 11, firefox, opera, safari and ie6+ 
Did you try to compare the execution step by step (put a break point in your click handler) between chrome 12 and another chrome version ?
Hrm... I really tried but couldn't even find where is the code. Any pointers? Have you considered cleaning up a little bit? Seems like you're calling jQuery twice (1.4.4 unminified and 1.3.2 minified) and you got it kind of chaotic. With Chrome the issue seems to be jQuery miscalculating how much needs to be scrolled, but I haven't found WHERE is you code :P
Enjoy abusing that downvote button. Don't worry: sooner or later someone else will know what the problem is. Maybe you'll be smart enough to ask them, instead of making incorrect accusations and insults.
Don't waste your time. He doesn't know he's giving you incorrect data. Check it in browsers yourself.
What is your problem? Why are you spending so much time leaving replies to my comments? Do you really have nothing better to do?
Well I'm assuming that it is plugins that are botching each other. Like I said, not my site, just trying to hunt down a bug for a friend. Also, I'll try to help him clean out some of the duplicates when I get a chance after work today. 
&gt; What is your problem? (headpat) &gt; Why are you spending so much time leaving replies to my comments? HOW DARE YOU REPLY TO MY REPLY oh wait. Red envelope, remember?
I looked at the source of that site and jaw -&gt; desk. over 9,000 &lt;script&gt; tags to do *this?* Your first thread was spot on: &gt;There's a point at which you have to start asking yourself whether you're actually qualified to do the work you're trying to sell. Neither is the friend who runs this site, of course.
I have experience with that. If your "large commercial website" example is loading large scripts at random times, it needs optimization. If it is loading tiny snippets for ads, then it doesn't matter because it isn't important for user experience.
Hey, pro tip: do take the time to sort out the actual bug. I laughed for almost 20 minutes straight when I figured out what it was. Sadly, he's just off bulk downvoting.
I could *maybe* see something like this being used as a sanity check in unit tests, or a starting point for them if you're into TDD, but they should be proving that the interface is implemented by exercising it anyway, so still redundant. Quack, quack.
So you linked to a submission comment page at Hacker News that links to a page about a podcast and that podcast talks about a separate website, the question I have is this: why didn't you use a URL shortener and go the whole nine yards?
yeah, you're right in general, but the article shows a basic attempt at it, which sure can be improved or attacked in another way. Sure, it's just client code checking, as you say, since it's not supported natively by the language; but put that way, all the other frameworks implementing utilities, abstractions or simulating other languages' constructs, are made of "client code" (sorry I can't find better words now,not native english:P) so the real point is: if we want this or that feature, how do we code it in the least verbose form? And if it relies on some boilerplate, how can we automate the process? First solution that comes to mind is to use some AOP for enabling checks, or a built-in interface system in some *Class*ical style framework. In conclusion, I partially agree with you on the academic aspect, but I think it can be useful in some case, again for your personal OO framework, for tests, and so on.
You dropped this ---&gt; ; :)
seriously... another article on the differences between NodeLists and Arrays? In 2011? Please... However it's largely explanatory, good for beginners I would recommend.
I had no idea Patton Oswalt was a coder.
Good points, I agree. I just got my hopes up thinking it was a new ECMA spec that I had missed or something. And your English is _great_! I couldn't even tell that you were speaking a 2nd language. I used the term "client code" because, when talking about abstractions like interfaces and such, there is the expectation that there will be a consumer of those things, and as a consumer then that also makes it a client, just as a web browser is a consumer of HTML, and thus web browsers can be considered web clients. [For example](http://en.wikipedia.org/wiki/Abstract_factory_pattern): &gt; Each of these products is derived from a simple abstract class like Letter or Resume of which the client is aware. The client code would get an appropriate instance of the DocumentCreator and call its factory methods. Perhaps you were thinking of _userland_ code? That might also be an acceptable term.
&gt; I have experience with that. If your "large commercial website" example is loading large scripts at random times, it needs optimization. I don't have any control over what Google and Microsoft send in their ad tags.
Those are not slowing down any site. 
Have you looked into [Amplify's Pub/Sub](http://amplifyjs.com/api/pubsub/) functionality?
and yet you missed the point *facepalm*.. If you can't compare Java's garbage handling to javascript or pythons garbage handling, or how object orientation works in java vs python vs javascript in regards to their static and dynamic natures and how that changes the way things operate under the hood, you really have no place in saying whether one is better or worse than the other or saying there is little difference between them (such a statement boggles my mind). There is a great deal more of a difference between dynamic and static languages than "skipping a few documentation steps" and without realising these differences, you really don't know as much as you think you do, and even if you do, you still don't! It seems you are the one who is "blind to your own failure" by failing to recognise that you have much to learn in the ways of python, javascript, lisp, ruby and anything else that is not java and is not static, and if you only know one language and only understand the paradigms and algorithms and syntax attached to that language, you really have no place in saying things like "I have more experience and discipline than most, by far." or implying that java will always be around and reign supreme (which is a laughable thing to believe about any technology)
Hello, I first used pub/sub when I tried out AmplifyJs (previously mentioned). I like it so much that I ended writing my own slightly modified version and made my own mini app framework. I'm right at the end of a project using this framework and can report that all of the developers seem to be happy. It is great for interfacing flash-&gt;js code (webcam site). I wouldn't use this on a large project but for small to mid size (~20k lines) it's great.
Wow, I haven't seen framesets for a long long time now. [Direct link](http://soft.vub.ac.be/~tvcutsem/traitsjs/). [Wiki](https://code.google.com/p/es-lab/wiki/Traits).
You just said such code cases are inherently inefficient and such sites are in dire need of optimization. Are you shifting ground because I mentioned brand names?
I don't fully get why Traits are needed, as it's a native javascript feature.. at most it would be handy to just have a 'Mix'-like function as they appear in many libraries/frameworks.
You haven't got any point except your invalid assumptions that you want to repeat over and over again. If you would like to make an actual, concrete point, you are free to. I doubt you can do so, however.
Nice article from @addyosmani!
No, I said the code used by companies like Google and MS isn't going to be some giant javascript library, its going to be some tiny highly optimized piece of javascript likely cached on the client's machine anyway. The kind of code that would make a noticeable difference (a jQuery, e.g.) should not be loaded at arbitrary times during the page load. If they are, you need to fix that.
This man is a hero.
Good point! Sure, the article doesn't delve deep into the implications of using or even needing interfaces at all, but I'm still convinced that the *contract* is a very important concept in this case. Other languages call them in more meaningful ways such as Roles (clearly states what a class of objects *can/should* do), or Protocols (Objective-C). Just found a nice and enlightening discussion on the subject: http://stackoverflow.com/questions/91618/is-there-any-point-for-interfaces-in-dynamic-languages Contract vs Duck typing ;)
After this talk I took a look at jslint.js; and it doesn't strike to me like it's the most maintainable thing ever. I certainly wouldn't want to be that person. 
Thank you very much! I really appreciate that :) Yes, it's my 2nd language (I'm italian), and I always strive to find the proper words and can get really crazy when I don't. Guess I'm sort of "language maniac", not just for programming ones hehe. And yes, definitely *userland* code was what I meant, like when you use other's function/class/library. By the way, have a read at my other answer, where I link a very intresting discussion on the subject: http://www.reddit.com/r/javascript/comments/i58u6/programming_to_the_interface_in_javascript/c21b29d
Excuse me, but how are traits a native feature? Could you please explain more on this?
Unless I'm missing something.. In 'classic' OOP languages, traits would add functions (and properties?) to classes. Where 'interfaces' provide the contract, traits can provide the implementation. So if I have a set of methods in my trait: var myTrait = { method1 : .., method2 : .. } Can't I just loop through them and add them to : AnyConstructor.prototype Or is there something I'm missing? If you'd for instance add trait-based scoping, shouldn't this be called a multiple inheritance model? P.S.: Seems your site is down now, couldn't go to it and find out what it does and doesn't do so my point may be invalid.
yes, just did, thanks for the link ;) Didn't know (or remember) that lib, but seems very nice and clean overall. The publish/subscribe module, however, still follows the canonical implementation where events are strings. Instead I really prefer another lib (which I'm using happly) called [js-signals](http://millermedeiros.github.com/js-signals/) where events are objects. This has some advantages over the usual approach, all explained there.
ohhh yes, now I see what you meant! :) Well yes, sort of...I wouldn't call this *strictly* native but yes, it can be accomplished relying on JS dynamism. Sure, traits and mixins are ways of doing multiple inheritance, and what this library does is handle the boilerplate for you and provide some higher-order utilities. Oh pity...their nice-domain frame is down, really. Here's the direct link: http://soft.vub.ac.be/~tvcutsem/traitsjs/
Was it the raw version or the compressed distributable version?
I generally like Crockford but I disagree with him about a few fundamental things. One of which is using 4 spaces instead of tab for indent. Space indenting is for idiots. Tab is obviously the right way to go. The idea that tab is bad because there's no "standard" is complete idiocy. If you like 4 spaces, set your tab to 4 spaces. The lack of tab standardization only becomes a problem when idiots mix-and-match tab and space indentation.
Interesting, I wasn't aware of that approach... Thanks for your link as well, I'll make sure to investigate.
Browsers will block this behavior when it's not activated by a user action such as clicking. It might be annoying, but possibly throwing in a confirm dialog might help. EDIT: if(confirm('Open Google Reader?')) { // window.location magic goes here }
Franksvalli is right, but it's likely to block confirmation boxes too. Instead, insert a clickable element into the page and put your js functionality on that.
Hmm, I'm already clicking the bookmark. Will this work if I open the window from there? (as opposed to the actual script that is loaded)
This did something quite reasonable: javascript:var a=document.createElement('div');a.setAttribute('style','position:absolute;top:0px;left:0px;right:0px;bottom:0px;background:white;z-index:10000');document.body.appendChild(a);a.innerHTML='&lt;a href="http://google.com" target="g"&gt;Testing&lt;/a&gt;';
The bookmark doesn't generate an onclick event, and that's one of the few places where code is allowed to open a popup.
I agree. I don't think a 1000+ line case statement is typical of Javascript programs, but I might be wrong about that :)
Actually, I just tried javascript:window.open('http://google.com','_blank'); and it wasn't blocked. Now I have to figure out how to pass the URL produced by [http://www.google.com/reader/ui/subscribe-bookmarklet.js](http://www.google.com/reader/ui/subscribe-bookmarklet.js) to the bookmarklet. (I don't actually know javascript, if this wasn't apparent)
Thanks, but I would rather avoid this if I can.
I made everyone at my work set their IDE to tabs and yell at them if they commit code that fucks up the indenting or uses spaces...Yeah, I'm that guy. And I am ok with that.
Do you use a monospace font for code?
&gt; Space indenting is for idiots. Most reasonable people, including other engineers at Yahoo (Crockford's employer) and elsewhere, don't care one way or another, as long as it's consistent. The same thing goes for single quotes and double quotes, except in cases where it matters (i.e. JSON). Consistency is key.
Huh, actually I tried what you suggested in your original post and it seems to work fine for me actually - I'm using Chrome 14 with popups blocked. Here's a copy of the minified code (the previous revision has the beautified code): https://gist.github.com/1041931 But basically I did exactly what you did: Replace this: window.location.href = b; With this: window.open(b,'_blank'); Strange. 
Obviously the sourcecode on github. 
Yea I had the same feeling. This is far from a typical program, so I guess there's some code in Chrome 13 now that specifically optimizes the jslint case ;). 
Well, there are pros and cons to both if you write JavaScript - or more generally: code in some programming language. That's why we always see heated debates about this fairly mundane topic. However, spaces don't have *any* advantage if you write CSS or HTML. There is just indentation. There isn't anything to align. **Edit:** @downvoter please explain why one should use spaces for indentation in CSS or HTML.
I was using 12 but it gets blocked in 14 too. Perhaps the site you tried this on had been added to your exceptions? Also, I just realized that this opens a new window, not a new tab as I wanted. Surely there is a way to change this?
I recommend to automate this. Auto-nag if there is/are: * a BOM * trailing white-space * leading spaces (or tabs - depending on your code conventions) Verify everything which can be 100% accurately verified by a machine.
I think there might be an option in Chrome to open these links in new tabs instead of windows, but I forget (sorry, on my iPhone right now).
stackoverflow.com
Consistence is better than inconsistence but space indenting is for idiots. It really is. It's more work for anyone who ever has to maintain your code ever. You can just change your tab character to be however many spaces you prefer. Space indenting is for stupid assholes. Single quotes and double quotes don't always matter but there are places where it matters (or could conceivably matter) vs. places where it doesn't matter (and never will matter.)
Since I use vim, yes.
I also insist on tab indenting but I make an argument why. I have never, ever remotely been convinced that there is any reason for space indenting other than being a stupid dick.
That 'Download' banner looks like some scareware/malware download banner, haha!
haha yes, it's terrible looking! :D
**ADDENDUM** here are some more articles on the subject: http://blog.reinpetersen.com/2008/10/interface-in-javascript.html http://stefancameron.com/2011/03/interfaces-in-javascript/ http://files.trygve-lie.com/examples/js_object_interface/ an insighful and more general discussion about interfaces in dynamic languages: http://stackoverflow.com/questions/91618/is-there-any-point-for-interfaces-in-dynamic-languages
Thank you. I've always wished there be a place for bookmarklet lovers.
Why use a monospace font?
Why not?
Because it's hard to format code when the letters are different widths, right?
How does this relate to [CommonJS](http://www.commonjs.org/) and their [Packages](http://wiki.commonjs.org/wiki/Packages) spec? From a glance, it looks like they've ripped off CommonJS and hoisted it as their own.
I was looking for this! I am going to resubmit [this post](http://www.reddit.com/r/reddit.com/comments/gr4uy/what_are_your_favorite_bookmarklets/) there, as I didn't even know about /r/bookmarklets
I realize you're trying to make a larger point that relates to spaces vs. tabs but I don't think it's as good as you think it is.
this is pretty good, but I think it suffers from one major usability problem: discoverability of the facets. With some additions in this area (perhaps a default drop-down with all the available facets) it would be killer I think. Also, if you hold down backspace to delete everything you'll end up going back in FF5.
&gt; VisualSearch Dependencies (jQuery, jQuery UI, Underscore.js, Backbone.js) Eesh, that's a lot of dependencies.
I built a bookmarklet yesterday but it won't work in IE (fine in FF and Chrome). I keep getting "unterminated string literal" but damned if I can find it in the code. Code passes jshint as well, might have to post up on reddit see if someone can see something I'm missing.
I think you must be using a SSL enforcer. Link works with http, but not with https. http://engineering.socialcast.com/2011/06/javascript-memory-management/
This beats the crap out of the [jQuery Autocomplete](http://docs.jquery.com/Plugins/autocomplete)
I wrote a pop under last week you can benefit from it, its very self contained and its standard JS (no libs required). Just remove the window.focus()/ mockWindow.blur() and you'll be set to go ;) - Did i mention its completely cross browser compatible? :D (Note: this works by attaching its self to the DOM click (so that it doesnt get registered as a pop up, and the browser thinks the user is clicking on a real link), so anywhere the user clicks it will popup. But in order for it to work the user MUST click somewhere on the page) (function() { function popUnder() { var firstUrl = "about:blank"; var url = "&lt;your url here&gt;"; var width = 316; var height = 266; var left = (screen.width / 2) - (width / 2); var top = (screen.height / 2) - (height / 2); if(document.detachEvent) { document.detachEvent("onclick", popUnder); firstUrl = url; } else if(document.removeEventListener) { document.removeEventListener("click", popUnder, false); } var preferences = "toolbar=0,statusbar=1,resizable=1,scrollbar=yes,menubar=0,location=1,directories=0"; var mockWindow = window.open(firstUrl, "specialoffer", preferences + ",height=" + height + ",width=" + width + ",left=" + left + ",top=" + top); mockWindow.blur(); if(navigator.userAgent.indexOf("MSIE") != -1) { // ignore the location.href } else if(navigator.userAgent.indexOf("Firefox") != -1) { mockWindow.puPop = function(url) { this.window.open("about:blank").close(); this.document.location.href = url; }; mockWindow.puPop(url); } else { mockWindow.document.location.href = url; } setTimeout(window.focus); // ensure that it will show for the least amount of time possible setTimeout(window.focus, 200); // for IE and Safari setTimeout(window.focus, 400); // for IE and Safari setTimeout(window.focus, 600); // for IE and Safari setTimeout(window.focus, 800); // for IE and Safari setTimeout(window.focus, 1000); // for IE and Safari window.focus(); } if(document.attachEvent) { document.attachEvent("onclick", popUnder); } else if(document.addEventListener) { document.addEventListener("click", popUnder, false); } })();
Working/ tested copy if the code you want/ need :D (function() { function popUp() { var firstUrl = "about:blank"; var url = "http://google.com"; var width = 316; var height = 266; var left = (screen.width / 2) - (width / 2); var top = (screen.height / 2) - (height / 2); if(document.detachEvent) { document.detachEvent("onclick", popUp); firstUrl = url; } else if(document.removeEventListener) { document.removeEventListener("click", popUp, false); } var preferences = "toolbar=0,statusbar=1,resizable=1,scrollbar=yes,menubar=0,location=1,directories=0"; var mockWindow = window.open(firstUrl, "specialoffer", preferences + ",height=" + height + ",width=" + width + ",left=" + left + ",top=" + top); if(navigator.userAgent.indexOf("MSIE") != -1) { // ignore the location.href } else if(navigator.userAgent.indexOf("Firefox") != -1) { mockWindow.puPop = function(url) { this.document.location.href = url; }; mockWindow.puPop(url); } else { mockWindow.document.location.href = url; } } if(document.attachEvent) { document.attachEvent("onclick", popUp); } else if(document.addEventListener) { document.addEventListener("click", popUp, false); } })();
&gt; No, I said the code used by companies like Google and MS isn't going to be some giant javascript library, its going to be some tiny highly optimized piece of javascript likely cached on the client's machine anyway. That depends on how you define giant. Its takes substantially less when the request is asynchronous. Even a 43 byte tracking pixel requested by third party JavaScript is enough to permanently delay the onload event thereby possibly creating a race condition between HTTP requests and failed event execution. Considering the size of HTTP headers and the delay of lookups the size of the code is largely irrelevant in the face of increasing quantity of requests. I do say the size of the incoming code is largely irrelevant in this broken puzzle, but the super promo code supplied by Google to my Alexa 500 employer's former homepage was incredibly huge even after obfuscation. A quick analysis of the code revealed patterns that gravitated towards spyware conditions. Fortunately, this mess is gone and the site loads **DRAMATICALLY** faster.
&gt;case statement You mean switch statement, right? The cases are just jump labels. (That's why there is fall-through.)
I'm not weighing into either side of this discussion, but I'd like to point out that standard JavaScript libraries actually *can* be used unmodified with CoffeeScript (e.g. [jQuery](http://geekiriki.blogspot.com/2010/08/jquery-meets-coffeescript.html)).
Why not?
I fully support you in your alternative lifestyle.
a bit late to the thread, eh? coffeescript has already been booed off the r/javascript stage. nobody cares that it can be used with 'unmodified javascript' as you call it. it's still a worst practice to abstract javascript into a made-up language.
Looks like gst is trying to steal your karma...
At least it doesn't try to reinvent the wheel. I prefer these dependencies because if I want to reduce them/replace them, I just have to write a piece of code that "interface" to the same API. What's more these libraries are well known and understood. (However we feel here the lack of "Interface" in javascript, we could then say "take in argument a DOM accesser, a collection manager, a MVC manager and a UI builder")
javascript newbie here, i sort of get how closures work, but what i dont understand is why they are important or where to use them. Could someone point out some useful stuff that can be done using closures?
It is generally a very good idea that indentation for a closing tag be identical to the indentation for its opening pair. In that spirit I fail to see any differences in value between the importance of uniforming indenting for JavaScript opposed to markup.
&gt;It is generally a very good idea that indentation for a closing tag be identical to the indentation for its opening pair. You can do that with tabs. "There isn't anything to align." &lt;- *After* the first printable character in a line.
Check out the module pattern: http://www.yuiblog.com/blog/2007/06/12/module-pattern/
Nathan Longs comment: &gt;Closures are a way to let a function have persistent, private variables - that is, variables that only one function knows about, where it can keep track of info from previous times that it was run. Link: [http://stackoverflow.com/questions/111102/how-do-javascript-closures-work/4926486#4926486](http://stackoverflow.com/questions/111102/how-do-javascript-closures-work/4926486#4926486) E.g. You could have a function that prints out how many times it has been called and keep the counter local to the function itself.
The [Simile Timeline Widget](http://www.simile-widgets.org/timeline/) is also worth a look. It's mature, with excellent documentation and I've used it successfully in several projects. There are also several [other widgets](http://www.simile-widgets.org/) available with similar quality and style.
Yes, but OPs works on the iPad. 
Ah, good point. A quick google threw up [some patches](http://code.google.com/p/simile-widgets/issues/detail?id=278) for simile timeline but if TG works out of the box then that's certainly a benefit.
&gt; After the first printable character in a line. I think you are confused because you are presuming a certain definition for what is a "line", presumably a line of code. Lines of code in markup, due to interpretation of tokenized white-space, as interspersed with content and singleton tags, are inherently less clear than the same such definition as applied to a language with a regular syntax. I only come to this conclusion because I have, at least to my knowledge, written the most complete beautification algorithm for markup in the JavaScript language and advanced a separate such algorithm for JavaScript.
I bet you use closures all the time :) Consider a case like the forEach function. Basically, call a function for every element in an array, passing the element to the function. Without closures it would be impossible to use variables around your forEach call. Eg: var outer = "hi"; array.forEach(function(item) { print(outer + item) }); would be impossible. With closures, no matter where or how you pass that function expression (maybe forEach passes it to another function and so on), it always drags its outer scope along with it.
Do you even read this reddit or do you just farm karma from it? :-P This was already submitted.
Love how Nyan Cat became the Youtube's slider, rainbow and all!
Ok, lets try this again. What else do I need beyond basic indentation in HTML or CSS files? Why **must** I use spaces instead of tabs for indentation in HTML or CSS files?
GST is a bot. I'm not sure about Magenta_Placenta.
Oh ok... I didn't think it was acceptable to have bots posting to reddit.
It's just a matter of scoping. It's much more trivial than some people make it out to be. JavaScript only has function scope and global scope. Anything you define in a function only exists within that function. Function scopes can however be nested if you define functions inside functions. This is why the following works: var adder, addTwo, addThree; adder = function(first) { var innerAdder; innerAdder = function(second) { return first + second; }; return innerAdder; }; addTwo = adder(2); // returns function(second) { return 2 + second; } addThree = adder(3); // returns function(second) { return 3 + second; } addTwo(5); // returns 2 + 5 = 7 addThree(5); // returns 3 + 5 = 8 Keep in mind that a new scope is created on each function invocation. As for how to use it -- as I said, it's pretty trivial, but it's also very useful. In a way, it is similar to what you can achieve by creating class hierarchies in other languages. Many libraries use closures to create "private" variables in JavaScript "classes". You can also use closures to create function factories as in my example.
I figured out a way: I changed GetE('txtUrl').value = url ; to: GetE('txtUrl').value = 'http://mydomain.com' + url ; works great for newly selected images.
Good Tip!
You can name anonymous functions (that you create anyway.) this.m = function anon_something ( data ) { do_something( data ); } $.ajax('a.php',{},function anonProcessMessageUpdate( data ) { f(); }, 'text' ); 
i_flip_sides already mentioned you can if fact name your functions and they are still an expression which evaluates to that function. I'd like to add that this is a problem with the debugger (or ide or whatever that is), not the language or the convention. Not having to think up a name for a function reduces cognitive load. Having to name a function is no stupider than having to name any intermediate value. You can write "a + (b * c)" in most programming languages without having to give a name to the expression "(b * c)". I can give that value a name if I want to. If I had to name it though we'd call that language stupidly verbose. If the debugger just told you the file name and line number that would at least be useful. The IE debugger is similarly broken. I feel for you.
*I* realize that... but based on a lot of the code I come across, I don't think most folks do.
It's not that I don't know, it's that I don't care. I don't feel like trying to come up with a descriptive name for yet another sub-sub-sub-function.
Can you use SSL instead? The problem with using javascript is that your key will be public so if someone has access to your source (and they will) then your encryption really isn't adding much to the security of the login.
Why not give the anonymous function the same name as the key? I should note that I wasn't trying to *flame n00bs* or anything, just blowing off some steam and hoping to enlighten *at least* one person as to why: obj.foo = function foo() {}; isn't redundant.
It doesn't matter what kind of white space you use for your indentation in markup. What is most important for markup, and thus most different from JavaScript, is when (or if) that indentation is applied. All I am saying is that indentation is as equally important to markup languages is it is to JavaScript for the exact same reasons, but that indentation cannot be so freely applied to markup without potential disruption.
SHA is not encryption. It's hashing. (Encryption can be reversed, hashes can't.) Using only a hash doesn't make the password any more secure than sending it in open text. To safely send a password over unencrypted communication, you need to use a [challenge-response system](http://en.wikipedia.org/wiki/Challenge-response_authentication), where the server provides a salt which is combined with the password on the client before hashing and sending it to the server. If the password is already hashed on the server side, then the client needs to be able to duplicate that hashing before combining with the challenge. e.g. The client sends "sha1($challenge . sha1($password))", and the server compares the sent value against "sha1($challenge . $hashedPassword)" where $hashedPassword is the sha1 value that's stored in your DB.
How do you think this is different then any other login. The only difference between a standard http request and an ajax http request is that ajax is done with out needing to refresh the page after. A regular form login submit will have the same issue about sending the password in pain text. Your best option for security is to use SSL on the server. Further more. Using a hashed passwords is great, but the security you are adding by doing this is for the protection of the passwords if some one were to get into your database. If you hash the password before sending it up to the server and some one sniffs out the request, they would still be able to send that hash they sniffed to be authenticated as easily as if you were sending pain text. So back to square one, use SSL.
Yes, all flavors of SHA are currently safe for common use. If you are paranoid, such as running a bank website, then use sha256. Here are your options: 1) Your AJAX code only uses HTTPS. The login field generated from the top menu bar on DeviantArt.com pages is an example of this. They use AJAX via HTTPS to allow users to login on unencrypted pages without exposing account data in the clear. This pattern may be vulnerable to a variety of client-side scripting attacks, but is safe across the wire. 2) You can hash the password on the client-side and transmit the hash back. This is absolutely insecure unless part of a multi-factor authentication process. Even still I strongly suggest challenging the user every time the hash sequence is received just as an extra precaution.
On a related note: Named function expressions (NFEs) were a lot slower than anonymous function expressions in Chrome. Wrote a jsperf test case, nagged them, and they fixed it within a few days. Love those guys. :)
I avoid use of bloated object literals because they are the slowest form of container in JavaScript when compared to access times for functions and arrays. That said I assign all my anonymous functions to variables instead of object properties and I don't have any confusion and I don't have the access lag afford to object literals.
SHA* doesn't have a "key".
Right. And my point was that there is no advantage in using spaces for indentation in HTML or CSS. It doesn't matter which tab size is used by whom.
not so much a JS test as a remembering char codes test.. but ok. signed up.
i think this is a good news for node.js users
It's anonymous! they are after you!
&gt;It's much more trivial than some people make it out to be. I read several articles on it and just could not get my head around it. When I actually understood what it meant, I realised it was something I had been doing for a while.
Won't that approach still fill an editor's function navigation or a profiler/debugger/etc. with a bunch of anonymous references?
Not to be dick, but if you name an anonymous function, then by definition it's not anonymous. Not having a name is what makes a function anonymous.
Fair point. But it costs nothing and makes code much more readable.
I don't know this text editor / tool. Can someone please explain what the meaning of the tree of menu items is?
Oh, yes, I agree completely. Actually I think the only interesting thing about anonymous functions is that they are a simple way to show that functions are first class objects in your language. First class functions are awesome and useful and powerful and flexible. But why would people not want to name their functions? Are we going to advocate anonymous variables next?
It's [TextWrangler's function/method navigation feature](http://www.barebones.com/products/textwrangler/twprogrammer.html).
Google uses spaces, I guess they are idiots too? http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
#EANF# [important Introducing HTML5 (Voices That Matter)](http://www.amazon.com/gp/product/0321687299?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0321687299).
I do that almost all the time. But I think it would be awesome if the runtime would recognize how an anonymous function was being used and give it a default name (for debug purposes only). Would it be hard to automatically store the name of the first variable or parameter the function was stored in? Of course, if you were just passing it as "handler" to some setEventHandler function, that wouldn't be terribly useful, but better than nothing.
No, that's a problem with your IDE/editor
Hard Mode: http://www.ruckmakers.com/wp-content/uploads/2010/11/whitenoise.bmp
&gt;Are we going to advocate anonymous variables next? The counterpart are unnamed constants. Everybody hates those though.
JSLint uses the name of the variable/property for its messages.
I might've clicked your link, except I googled EANF and learned it means "Extraction Anchor Not Found". Also it's not as relevant as you want it to be. Bye spambot.
It's just a matter of scoping. It's much more trivial than some people make it out to be. JavaScript only has function scope and global scope. Anything you define in a function only exists within that function. Function scopes can however be nested if you define functions inside functions. This is why the following works: var adder, addTwo, addThree; adder = function(first) { var innerAdder; innerAdder = function(second) { return first + second; }; return innerAdder; }; addTwo = adder(2); // returns function(second) { return 2 + second; } addThree = adder(3); // returns function(second) { return 3 + second; } addTwo(5); // returns 2 + 5 = 7 addThree(5); // returns 3 + 5 = 8 Keep in mind that a new scope is created on each function invocation. As for how to use it -- as I said, it's pretty trivial, but it's also very useful. In a way, it is similar to what you can achieve by creating class hierarchies in other languages. Many libraries use closures to create "private" variables in JavaScript "classes". You can also use closures to create function factories as in my example. [to the point Learning JavaScript, 2nd Edition](http://www.amazon.com/gp/product/0596521871?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0596521871).
Isn't this polluting the global namespace?
Yep.
No, it's not... http://i.imgur.com/hKjZE.png
Exactly. That a lot of people talk about it doesn't have to mean it's complicated. There's a lot of talk about (Java-style) OOP out there, too. But that, too, is pretty simple once you understand encapsulation (and, in the case of inheritance/interfaces/polymorphism, how type systems work).
Using a hash makes it more secure for the persons password in general, but not more secure for OP site. Plain text would essentially make the password public where a simple hash would only make this website's and user's password public. 
Anonymous functions are a part of javascript, it should be up to the profiler to determine a more descriptive name, via a stack trace or something.
[No](http://ejohn.org/apps/learn/#11)
http://en.wikipedia.org/wiki/Argument_from_authority
It isn't redundant but unless I'm using a code browser like yours, it doesn't make a difference to me.
it's a widespread problem but still a problem
That's bad programming. Your code wouldn't be legible.
Wow, ad hominem attack in your argument then linking someone else to a fallacy? You're a special kind of guy, ebbv.
[An excellent rule to follow.](http://en.wikipedia.org/wiki/God_object)
whats this editor? I've been using visual studio and I hate it. advice?
No, actually, it makes no difference. Simple password hashing is absolutely 0% more secure than a plaintext password, because the destination server simply compares the hash against what it has stored locally. Without either SSL, or challenge-response, an attacker (and let's be serious, the only reason we secure passwords at all is because of attackers) can simply post the hashed password to the login form just like they would a plaintext password, with the same results.
The editor in the screencap is TextWrangler, which is freeware for OSX. It's very utilitarian and will totally get the job done if you don't feel like paying for TextMate. If you're planning to stick with a full blown IDE, check out Eclipse. Otherwise, I like gedit (environment willing) or Vim, if I'm feeling adventurous.
Do be sure you've read [Named Function Expressions Demystified](http://kangax.github.com/nfe/) if you do this though.
I would recommend asking on Stack Overflow. It's better designed for it. Then link to your SO question from here if you want.
use SSL and get over it. If someone can MITM you they'll just inject their own code that will steal the password before you can "encrypt" it.
That JavaScript editor looks really good. Anything like that for Windows?
This is the cross posted Stack Overflow question: http://stackoverflow.com/q/6474454/313758. Note that the author of Rangy, Tim Down also contributes actively to Stack Overflow - http://stackoverflow.com/users/96100/tim-down
It's much more trivial than some people make it out to be. I read several articles on it and just could not get my head around it. When I actually understood what it meant, I realised it was something I had been doing for a while. [pertaining to Learning JavaScript, 2nd Edition](http://www.amazon.com/gp/product/0596521871?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0596521871).
i_flip_sides already mentioned you can if fact name your functions and they are still an expression which evaluates to that function. I'd like to add that this is a problem with the debugger (or ide or whatever that is), not the language or the convention. Not having to think up a name for a function reduces cognitive load. Having to name a function is no stupider than having to name any intermediate value. You can write "a + (b * c)" in most programming languages without having to give a name to the expression "(b * c)". I can give that value a name if I want to. If I had to name it though we'd call that language stupidly verbose. If the debugger just told you the file name and line number that would at least be useful. The IE debugger is similarly broken. I feel for you. [significant Tropes: Properties, Objects, and Mental Causation](http://www.amazon.com/gp/product/0199608539?ie=UTF8&amp;tag=polidebanews-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0199608539).
Check out the module pattern: http://www.yuiblog.com/blog/2007/06/12/module-pattern/ [pertaining to Learning JavaScript, 2nd Edition](http://www.amazon.com/gp/product/0596521871?ie=UTF8&amp;tag=idenprop-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=0596521871).
TIL: Function expressions aren't recognized by the lack of identifier, they have a context being the right hand expression. Identifiers for function expressions are only visible inside this function.
&gt;I assign all my anonymous functions to variables instead of object properties and I don't have any confusion A function assigned to an object is called "a method". If you assign it to a variable it's "a function". You know the difference between functions and methods, do you?
Yes, in JScript, which is IE's nonconforming JavaScript implementation. Named function expressions create global variables, are hoisted to the top of their scope (like function declarations), and create multiple instances of the function. Source: http://kangax.github.com/nfe/
Definitely. Named function expressions are horribly buggy in IE (up to at least IE8).
That's only in conforming JS implementations. See my other comments - these pollute window (global) in IE up to at least IE 8 unfortunately.
Currently I'm just programing my site using DreamWeaver 5.5 and hosting the site on my work laptop locally using EasyPHP for training purposes. However, I'm not sure how I should go from there and obtain a ssl certificate. Would it require further tools to enable it? For example, I've watched a couple of YouTube videos but they all seem to require tools such as ASP.NET. Sorry about my English.
Without some sort of challenge-response your scheme would be susceptible to replay attacks - instead of knowing your password is teddybear, an attacker would know it's hash enabling him to login submitting the web form manually. With challenge-response, you are still at (somewhat smaller) risk if your attacker gains the ability to actively tamper with your user's traffic, serving him the javascript file with hashing commented out. HTTPS would be the best solution, or at least Ajax/HTTPS. If you're doing anything security critical, you also need to consider the risk of user session hijacking once the user is logged in.
No - that's not the problem; the pattern is the problem. [This](http://i.imgur.com/hKjZE.png) shows the results of profiling said code. Good luck sifting through (?)-soup, should the need ever arise.
Openssl is available on [windows](http://www.openssl.org/related/binaries.html), linux and mac. EasyPHP includes a Apache with SSL support, so you can use SSL with that stack. A SSL certificat from RapidSSL is cheap for about 10-20$. But for delevopment purposes a SelfSigned certificate should do. [Link to generator](http://www.selfsignedcertificate.com/). 
Do a stack trace of several unnamed function expressions, you'll get the same thing across browsers. This is not the fault of the editor.
jsawk has been really useful. Install it on whatever system you prefer, of course.
In JavaScript it is anonymous because the identifier you give it is only scoped within the function itself. I guess that depends on your point of view, you could argue that it's still not anonymous but practically speaking I don't think that's a useful distinction to make. It's a function expression. var a = function A() { return A } A // throws a reference error a === a() // true
Yuck. Why would anyone want to do that? I think I know. And the answer is function makeFoo () { return new Foo; } if you're that worried about it.
via: http://vikasrao.wordpress.com/2011/06/24/preventing-javascript-memory-leaks-with-dojo-disconnect/
#EANF# [significant #EANF#](#EANF#).
Full disclosure: I am the author of this blog post. Figured this may be interesting to some here, and I'd be interested to see if there are more elegant solutions. (Also, I originally posted this to /r/reddit.com by accident)
KISS
I've been thinking about this a couple of weeks ago but didn't do anything about it. Now that I've seen yours I've created a more complex (or flexible? :P) solution: https://gist.github.com/1047516
I see this in Firefox Nightly as well, but it works on files I upload.
Sound doesn't crackle on Firefox Nightly builds when I switch to a different tab. Maybe they fixed this? My memory consumption isn't anything out of the norm. I am getting 250 MB for Firefox, and this is with 7 tabs.
&gt; You know the difference between functions and methods, do you? Methods are functions. The only difference is whether it is called on a name or a property. Distinguish that.
Most of the time I treat functions as closed containers for use with closure, so in that pattern your concern is meaningless. Otherwise, I am more concerned with what is calling the function and where that execution is occurring than I am with the name of the function being called.
I don't see what that has to do with what I wrote.
Actually, I was replying to this: &gt; However, spaces don't have any advantage if you write CSS or HTML. There is just indentation. There isn't anything to align.
This might garner a bit more karma over in [/r/node](http://www.reddit.com/r/node) as well.
I haven't actually delved into node at all, so it probably isn't my place to do so - feel free to post it there yourself if you're so inclined.
Yes, and you didn't manage to explain why I **must** use spaces for indentation. (Of course you didn't. There isn't even one reason for that.)
Who are you even talking about, the guy who wrote the book or the webpage this is linked to?
TL; DR: Make Javascript more like Python. Not that I disagree in the slightest. I'd love to use Python instead of Javascript. Edit: To clarify, I like Javascript, use it all the time, and use Node.js or Python as my server-side environment. That doesn't mean Javascript doesn't have it's issues, some of which were discussed by OP and suggestions made to correct (which another commenter pointed out are in the next language spec). The article is worth a read, most definitely.
then go to r/coffeescript, and leave r/javascript alone. we discuss javascript here, not python. there is nothing wrong with javascript that actually learning the language won't solve.
I really blew it if you came away from my article thinking that is a suitable summary. My point had nothing to do with making JavaScript like any other language. My point was make JavaScript so that a wider varieties of languages can compile to efficient JavaScript. JavaScript should still stay JavaScript. 
Introduction to [/r/CoffeeScript](http://www.reddit.com/r/coffeescript)
Came here to say this. I'm pretty sure the code could be abstracted and simplified using the new Deferred paradigm.
I don't mind coffeescript, but I do mind videos that start with like a minute-long ad.
he replied to my question!
&gt; we discuss javascript here, not python. Easy killer, I do believe the term `Javascript` is contained within the text of his comment. &gt; there is nothing wrong with javascript that actually learning the language won't solve. Yes, yes there is. I love JS but I'm not blinded to it's problems. JS has the onus of not only being one of the most popular languages at the moment (in terms of use and ecosystem activity), but it also has the stigma of being one of the most problematic. It's ok to admit that JS has problems; it's an important 1st step in approaching them.
Your article was very long, I read most of it but skimmed the last half or so. Good read, I'll bookmark and finish later. Sometimes I feel like JavaScript is in a weird state of limbo. It has a lot of powerful features, but it is still stuck executing in a browser, which I feel leads to "duck tape" code. A lot of JavaScript code out in the wild just feels slammed together, like the programmer is aware that the code only has to exist for that page. I feel that a major problem with JavaScript is that people don't "get" the language. For most programmers it is their first foray into a "functional" language and it causes some headaches because of this. So I always feel that JavaScript has to decide which camp to cater to, does it make it easier for OOP style, or does it continue to advance as a functional language, at the risk of scaring off more people?
It's definitely true that this could be simplified for serial requests, but how would you do the parallel requests?
I believe that you're contradicting yourself: &gt; Here we look at just four of the many examples **where JavaScript’s syntax could be improved** to remove verbose idioms from our daily programming existences. &gt; * Optional Parameters and Default Values &gt; * `let` &gt; * Modules &gt; * [classical] Inheritance How could you make those changes without also making wholesale changes to the language? I don't believe that you could. Also, you can't deny that those suggestions are a parallel of what other languages (notably python, ruby, etc.) already implement. 
right but the chances of people's passwords being the same for multiple accounts/servers whathaveyou are high. And if it is transmitted in plaintext then someone listening in on that communication gets their password for everything (email, bank, ebay, amazon *everything*). So it is certainly more secure to send a hashed password then a plaintext password, even though for a single site it is " 0% " more secure.
As mmsh points out, perhaps try and read the docs; I believe that you've just addressed the same problems that all of the Deferred functionality was implemented to solve (yet likely not as robust as the Deferred stuff)...
99% of complaints about javascript are acually people confusing DOM for javascript. The article talks a lot about changing the syntax of javascript and the parent reply seems to support this sentiment. It's all really diverting the topic of r/javascript away from actually discussing the great things one can do with javascript, the problems are trivial and overblown by syntax fetishists.
I was exaggerating for hyperbole, but now I'm inspired to create an example of just such a use case: Event handler for DOMContentReady Event handler for a click event Return callback on an AJAX request Array.each callback to loop through the returned results This is not that farfetched of an example. Could this be abstracted? Sure, but it doesn't need to be if the page is simple enough.
This is false. Most of his proposals are in the short list of things being considered for ES.next. Discussing new language features are DEFINITELY something we should be doing. Javascript cannot and will not remain the same forever.
lol "tadpoles"
Quite fantastic. I look forward to playing around with this.
I don't see it as a contradiction. JavaScript can evolve while still keeping its essential character.
What you're asking for is a tantamount to a new language, though, and not the natural progression of any existing language. I don't think that you can make such broad, fundamental changes and also retain its _essential character_. I see similarities here between the real vs proposed as being nearly the same situation that C/C++ suffered. You couldn't add all the stuff that C++ did and still call it C, just like you couldn't add all this stuff to JS without also creating a new language.
True. The goal was basically to make sure these were legit people signing up for beta. Thanks for signing up! We've got about 50emails so far. If we hit 100 we'll kick dev into high gear.
We would basically provide a jQuery plugin that's a wrapper for cross site requests to our server which returns your data from SimpleDB in JSON. Then theire are the added services of session management, facebook connect methods, email templates, and encryption. So really you could use it for phone apps too.
This looks brilliant, exactly what I've been waiting for. Looking forward to seeing how it fares against Processing.js.
I like the Nyan rainbow
It's a TL; DR, so it's not totally accurate, but a lot of what you're asking for are features built into other languages. I agree with you completely - Javascript, though a convenient and easy to use language, is not necessarily the best language for the Web, and has a lot of rough edges that need smoothing over. Instead of compiling TO javascript, though, how about we target a bytecode like llvm?
Thanks for the backup. I was going to respond with this, but you can just have an upvote instead.
If you click they start swimming in a heart pattern.
That's interesting, The proof of the pudding, to me, would be in mobile browsers, that's where the performance is lowest. In a similar vein I'm wondering if(for non scrolling) setting the background of a canvas element to the backdrop image would be faster than drawing it each frame, It's replacing a draw with a clear, so can't really judge without making some tests, I might do that today. 
This is exactly why I'm building [serverCyde](http://servercyde.com) so that dev's don't have to reinvent the wheel for common things like user signup, facebook connect, image upload, encryption, and database connection. I hope to be helpful to you when it's done :)
I bet this is absolutely fantastic for people who can't be bothered to learn to read JavaScript. Otherwise, if I wanted Coffee Suger I would avoid JavaScript and just write in something stable on the server that does all this craziness, like: (name another language here).
I never made that argument, and I never replied to such a point.
But that was the whole setup of this discussion branch. (And that's also the reason why I got kinda irritated by your replies.)
It will take a very long time for ES.next to become the standard and replace JS 1.5. Likely a very, very long time, if ever. JS1.7 never even made it into widespread use. Many people will remain on XP for the next 10 years, which is unable to upgrade past IE8. I'm willing to bet a lot of people won't be upgrading their OSX anytime soon either, and won't be able to install the latest and greatest safari. If you can't see that this fact alone will be holding back ES.next, then you don't live in the real world, where legacy browsers must be supported. Sure, there are ways to cross-compile to javascript, but then it's not about coding in javascript any more, is it. I code in ES3 all the time in .NET, and that has been around a very long time but never made it into widespread use. It never made it into the browser natively. Mozilla will support ES.next, chrome might, microsoft, uhhhh maybe. Even with support for new browsers, you can't cut off the millions of people still running XP and IE7, which will remain a formidable size for some time to come.
Assembly
And here we go with coffeescript in r/javascript AGAIN. Don't you fucking coffeescripters get it? take it to r/coffeescript. We don't want to discuss coffeescript in r/javascript. r/javascript is for JAVASCRIPT. r/coffeescript is where you want to be posting this shite. I really think we're all being trolled in r/javascript. WTF.
Most of what you say is true (some is absolutely absurd) but I fail to see how this means that we can't discuss potential changes in the Javascript language in /r/Javascript (or relates in any way to what I said).
I saw it as a thinly veiled attempt to promote coffeescript &gt;CoffeeScript &gt;"I can tell you right now, I don’t know why CoffeeScript has the magic combination of features to garner the attention it has when other projects have failed. Significant whitespace and arrow function syntax. My gut reaction is yuck. There is plenty of things to like: default parameter values, rest parameters, spread, destructuring, fixing the whole implied global mess, even classes if you’re into that kind of thing and more. Many of CoffeeScript’s features are part of Harmony and so may be in browsers sometime in the future but if you use CoffeeScript then you can have them now. There is nothing like instant gratification." syntax fetishists who like coffeescript should talk about it in r/coffeescript. the article has very little to do with javascript, and more to do with syntax fetish. What part of what I said do you think is 'absolutely absurd'? 
You must be trolling. As I already said, most of the things on his list are being considered for ES.Next. Do you think we shouldn't discuss upcoming Javascript language changes in this subreddit? I think it's perfectly on topic.
This has been discussed here before - some of the changes being proposed by brendan eich are trying to make javascript more like coffeescript, and there is some speculation that this is because eich is friends with ashkenas (creator of coffeescript). Luckily, there is ECMA in the way of that decision and it isn't clear that ES.next will adopt a more coffeescript like syntax. We've been over this several times already in r/javascript and the coffeescript hype machine just never stops. Blog posts like this are pretty useless and posting them in javascript with such a heavy coffeescript spin does not put them in a good light with people who read r/javascript for JAVASCRIPT. Talk all you want about this article, but it does little to shed light on any real progress being made on ES.next. it's more about coffeescript than it is javascript, so it doesn't really belong in r/javascript. If you can't see that, then we just see things differently. I'm here to read about javascript, not coffeescript, and not what a coffeescripter thinks about what ES.next might be.
cool. good luck. have you posted to HN?
I wasn't intentionally promoting the CoffeeScript language over other to-JavaScript languages.
Pretty sure those things are not Eich's pet projects. At a recent meeting ALL PARTICIPANTS (eg. Microsoft, Apple, Google AND Mozilla) agreed to consider most of those items as candidates for inclusion in the next version of Javascript (see this thread on esdiscuss: http://old.nabble.com/May-24-26-rough-meeting-notes-td31712613.html). And even if they weren't, this is a subreddit about Javascript. Language changes TO JAVASCRIPT are entirely on topic. If you don't think so then maybe you should make /r/JavascriptCodeMonkey so you can get all the W3Schools content you love without all the theorycraft "syntax fetishists" ruining your fun :)
The article was intended to be about JavaScript the compilation target. That aspect of JavaScript's life seems appropriate for r/javascript.
Oh sorry, forgot your last question. It is absolutely absurd to think a significant number of people will be using XP in 10 years. That's the equivalent of Windows 3.1 today.
IE6 is still around, and still in use by fortune 500 companies and the average joe on his still working Pentium II. I and many other devs still have to support XP/IE. There's no evidence to support your claim that XP won't be around in significant numbers in 10 years, and there is plenty of evidence that it will.
History is evidence. You could also extrapolate based on current usage trends. Your argument seems to amount to there are a lot of people using XP now and therefore there will be a lot of people using XP in 10 years.
The adoption rate of Windows 7 is rising but maybe isn't as high as you might think it is. XP's survival is due to the same reason why IPv6 isn't being used in any meaningful way despite the fact it has been around for so long. The human tendency towards "if it ain't broke don't fix it" still applies to XP and will for quite some time to come. Your optimism is commendable, but the reality of the situation is always about the lowest common denominator.
When I say extrapolate, I mean look at real data. Just google it. Year over year XP usage drops off significantly. Even if adoption of Win7, 8, 9, and possibly 10 combined tapers off XP will still be long dead in 10 years. Just like 3.1 is today.
time will tell.. I know my mom doesn't want to ditch XP, I know all of her friends don't want to, and I know many CEOs of large companies who don't want to. They may have to for some reason, but there will be millions of XP users around until their computers die and they can't buy a new one with XP. That could take a while.
Chrome's Web Audio API is still very much a work in progress. It's totally out of our control that it isn't enabled by default, and it's actually a good thing, because it's pretty unstable. Time will tell...
Thanks for the support! We strongly intend to keep pushing the limits of JS engines. Stay tuned :)
I have family that is the same, but I also had family/friends that said they'd never leave 3.1 ("Wait, 95 doesn't boot to DOS?"). Just look at 3.1 compared to 7. Can you imagine using 3.1 today? It will be the same in 10 years, if not more pronounced. 10 years is HUGE in computing.
First off, there *are* obvious things that jsmad can do that browsers can't - full ID3v2 tag decoding, for example (not what took us the most effort, but nevertheless), so you get for example Title, Artist, Album, Track number, etc. etc. directly from the .mp3 file, whereas with &lt;audio&gt; you're stuck with.. basically nothing. Also, Firefox's &lt;audio&gt; tag doesn't support MP3 at all, and they have no plans to, because of licensing issues - this is actually where jsmad is the most useful at the moment. It also offers streaming decoding, something current browser Audio APIs completely disregard (Chrome's Web Audio API for example, only gives you access to the wholly decoded data, not to portions of it while it's still streaming). This is really research concerning browsers+JS, the whole field is a mess because of the Mozilla/Google antagony. Us poor devs are stuck in the middle :/ Other reasons that pushed us to do it was obviously 1) to learn stuff (I always wanted to know how mp3 "worked" under the hood, and it did give me a good insight), 2) to see if it can be done, and how fast it would be with current JS engines (answer: it depends wildly, can take as low as 8-9% CPU on certain browser/OS combinations, and as high as 103%!) 3) for the lulz.
Yes we do accodomate for the lack of certain facilities - although we might require typed arrays in the near future (see pull request #4) as it proves to be too much hassle to maintain all these codepaths. Other problems are the W3C File API Draft (not sure when browsers began to implement that), binary XHR requests - but otherwise everything should be running smoothly. Maybe you can test and report on https://github.com/nddrylliog/jsmad/issues ?
I didn't know what to expect at first, but this is really cool and impressive. The JavaScript game development ecosystem is getting better every day.
Post a url it's much easier to view, thx
Post a url it's much easier to view, thx
Could provide an example/link so we can see what you're talking about? Normally I'd suggest just tweaking the CSS associated with the widget (if it uses a CSS file), but you're going to get a more accurate answer with an example.
Sorry about that, I just threw in an edit and provided more info.
First, I've formatted your question into an example jsfiddle here http://jsfiddle.net/eWpZY/, please take the time to use something like this when posting code examples, it helps with the whole clarity thing :) Second, you'll need to post your stylesheet (CSS file), or the relevant fragment that applies to your code so we can understand what it is you're working with. Ideally you should post your entire stylesheet so we can see what's going on. Third, the default jQuery tools markup for the overlay looks like this: https://gist.github.com/1050450 I would suggest taking a look at the style attribute properties there and seeing if you have some conflicting z-index properties in your own stylesheet. That's most likely the cause of your problem.
fuck that's awesome
Drag a selection marquee around the area you want to move, then use the move tool to position the element where you want it... But why you would edit an image instead of css... I don't get it.
Just an example from Mr. Eich's "Paren-Free" blog post that makes my brain hemorrhage: if year &gt; 2010 { syntax++ } Man, just TYPING that feels like regression to me... 
I lost it when I saw Nyan Rainbow. Great work!
 string homepage /^http:/; integer {1500,3000} invented; That is a bit inconsistent to look at. I can understand why the range might be closer to the type than the regex, but in one case you got the name in the middle, in the other you got it at the end. Meh.
That's sort of what I do with [ESDAO](http://www.esdao.com). Users interact heavily with my canvas based map, including dragging it around. Performance was fine until I tried it on the iPad - the map is text heavy which is very very slow to render on it. My solution was to have a non-visible canvas of the whole map and copy the portion the user can see to a visible canvas. Doing this sorted my performance problems out really well. [Here's a video of it on the iPad I did last year](http://www.youtube.com/watch?v=5yDcTQl5h0k) The caveat being that if the users zooms in too far or is playing on a very large map it can blow the limited memory allocated to each browser tab on the iPad. iPad2 doesn't suffer as much from this problem.
Can &lt;canvas&gt; be transparent (e.g. could you scroll &lt;img&gt; tags behind it?)
Yep.
That's an interesting solution. It's possible to build an hybrid strategy where the 9 half canvas I use are just one big hidden canvas for (1.5x the size of the screen) where you draw the needed parts and then "copy" them to the final place. I wonder how that would compare to the one I have implemented.
What I've implemented is a [buffered](http://en.wikipedia.org/wiki/Multiple_buffering) solution, I only have the need for a single layer. Due to the wrapping nature of the map I can be copying up to nine sections with each full draw of the map. I've found it to be more than quick enough for me at ~1ms on my MBP.
I think I'll integrate it soon in [PrettyPrint](https://chrome.google.com/webstore/detail/nipdlgebaanapcphbcidpmmmkcecpkhg) chrome extension :)
I don't know if anyone "ripped off" the other one as both CommonJS and PackagesJS are copyrighted in the same year (2009), or so it seems from the pages. I think they're just two different implementations of the concept; also the contributors are different (compare http://www.commonjs.org/contributors/ and the **credits** paragraph), but on Packages JS i see more known names :) Just my 2 ¢.
That code seems more than excessive for something that could be handled with just a few `replace()`s and a decent regex.
I've used this one many times... http://www.lonniebest.com/FormatCSS/ 
I think that's the price to pay for reliability.
this is Uber-cool! I really liked the way they used parse-js to implement operator overloading on their base classes (Point, Line, etc): really impressive work overall!
Comments like this about other people's work wind me up. Nothing personal against you, but do you think maybe check_ca already tried that and found this was a better solution?
very neat syntax, I really like it!
Forcing a trailing semi-colon after the last declaration of a ruleset would look better in my opinion and would improve consistency.
Could we have tabs instead of spaces ? EDIT : the author merged my change, now it's available :)
A fast comparison : * your lonniebest beautifier needs beautification. It's really ugly. * I don't like lonniebest's lonely '{' * lonniebest has a decisive advantage : it uses tabs instead of spaces 
It seems to be planned for the future: &gt; Not handled yet &gt; * Directives such as @import, @media, etc &gt; * Optionally separate each selector and put it in its own line &gt; * *Custom indentation (n spaces or n tabs)*
Just test in my iPhone an it works great! The API looks very easy too. Really cool!
Yes, I saw. What I meant is : Can we have it **NOW** so that I can forward the link to my wife before I forget the existance of this site ? The problem with reddit posting is that it's a one pass filter : it is OK now or lost forever...
It's implemented as a very clear and easy follow state machine that compiles to a little over 1 KiB. It's not quite ready for production yet, but it is nicely done.
Replace [line 158][1] with `formatted += '\t';` and you can have tabs instead of spaces. Or wait. [1]:https://github.com/senchalabs/cssbeautify/blob/5ce586ecfa5474a659ea5fd19b29afeb503b8494/cssbeautify.js#L158
Actually, I'd prefer this library not to modify the source because that's just a code formatter. For example, that's the way [jsbeautifier](http://jsbeautifier.org/) works.
That is an interesting stance. Personally, I would prefer it did; consistency is perhaps the most important aspect of beautiful CSS.
It's pretty cool, but I got used to beautify my CSS when writing it just for the sake of not wanting to kill myself when I'd want to revisit the scripts. But I can see it's use in making some CSS sheets readable, which is great!
I see beautifiers as tools more for other people's code than mine.
nice solution there! Yes, as others are pointing out, Promises are the general and elegant solution to escape "callback hell" (you'll understand what I mean if you've done or read anything complex in Node). Here is an article which really inspired me, it's the third in a series so take the time to read the others too it's really worth the time: http://www.reddit.com/r/javascript/comments/gst9q/promises_are_the_monad_of_asynchronous_programming/ Cheers!
I've forked it in order to let the user choose its indentation. It can be tested here : http://canop.org/cssbeautify I made a pull request. EDIT : merged
Sometimes you have to take over someone else's code. Then this kind of tool is useful.
Can you set the space amount optional too (eg. i use 2 spaces), since you got it checked out and all...
That's what I mean.
Easy. I'll ask the author if he wants to make it or if I make it (he already merged my code). The best way should probably be to propose 2, 4 or 8 spaces (is there somebody using another value ?).
I foresee another religious war coming up... :/
How about splitting the indentation into two options 1 for style and 1 for number
jsbeautify may be a source of inspiration, it defines 2 options: * opt_indent_size (default to 4) * opt_indent_char (default to whitespace)
It's what I was planning for URL parameters (?indent_type=tab&amp;indent_number=2) but I think I'd let the links hardcoded on the right (user could then change the URL and bookmark it).
It's the same story repeating over and over: people trying to transmute JS into some other language. Like all the attempts to implement all the features of *class*ical inheritance: yeah, really intresting (I'm not sarcastic, really), shows off the great flexibility of JS, but I prefer the built-int one: prototypal inheritance. I really like it, and I'm definitely not missing Classes. (my personal POV, sure). Other people like Bob Ippolito built an [entire framework](http://mochi.github.com/mochikit/) trying to turn JS into python :)
Here: https://developer.mozilla.org/en-US/learn/javascript And Here: https://developer.mozilla.org/en/javascript Also, tons of code on Github if you're a visual learner.
There's no way to say this without sounding like a dick but... why do you use tabs instead of spaces?
Is there the place to reignite an old war ? Honest question : do you guys really want this discussion ? I'm sure there are a lot of places where all the arguments are available so that anybody can choose his side...
I know arguments for both sides, and I know it's a bit of a religious war. Whenever I read the commentary about it, I find myself still not understanding how people end up choosing tabs (no offense intended). I wasn't asking it in the "lol, hurr hurr, why you still using tabs, dummy?" way that a lot of people do. I actually meant it as it sounds: what are your reasons for using tabs? I'm genuinely interested in the discussion (not an argument though).
For my part I thought the discussion was long close with almost everybody agreeing to choose tabs. After all it's even in the specifications of the Go language (tabs as indentations are mandatory). With tabs, you have no worries with a developer wanting to have an indentation taking a lot of place on screen and another developer wanting a more compact display. With tabs you cannot have discussion like "2 spaces or 4 spaces or 8 spaces ?". But for me it's mainly a logical thing : when there is ONE indentation, I don't want to manage more than ONE char. And I cannot find now one advantage of spaces as indentations (I've long forgotten the reasons that were given the last time I saw this kind of discussion). But I'm sure you'll give me a few :)
Oh sorry. I'm still not really fluent in English. I think I overlooked the *code* token in your sentence.
5 spaces = 5 bytes. 1 tab = 1 byte. EDIT: I just tested with a 1k line file. One version had one tab on each line, the other had 5 spaces on each line. The tab file is 2.92KB, the space one 6.83KB (234% larger). Two tabs/ten spaces per line yields 3.9KB vs 11.7KB (300% larger).
The [Crockford Videos](http://yuiblog.com/crockford/) are a good way to get yourself adjusted to the space you're working in. Keep the [MDC Reference](https://developer.mozilla.org/en/JavaScript/Reference) handy and work on a substantial project: a library, a game, whatever. Read, write, ask questions—it's the only way.
I think the easiest, quickest, and best way to go from JavaScript chump to a JavaScript appreciator is to read [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742). I know your folks won't let you read other stuff (sounds familiar, mine were similar) but if you can either sneak reading this, or convince them that this is a really good career move (it is), I would. I'm not kidding when I say that book will make you understand JavaScript. If nothing else, download a copy of it in torrent form and buy it later.
This is excellent book for learning JavaScript - JavaScript: The Definitive Guide http://oreilly.com/catalog/9780596805531 but unfortunately is not free. IMHO the best way to learn JavaScript or any other language is learning by doing. Invent some mini project and try to do it with JavaScript. Programming is all about problem solving and that you can't learn from book or tutorial. So like I sad before try to create something with JavaScript. That is the best way to learn the language.
Cheers, it looks awesome. They're not usually *this* anal about studying, but I suppose it's because I'm in Grade 12. Ehh, as long as I bring home decent marks, I'm fine :)
Wow, this is awesome, thanks :)
Cheers!
Will do, cheers!
Yeah, that's what I usually do, and it's how I learnt Javascript, learn the theory and apply is to a useful project. Cheers :)
You need to explain to your parents that learning a programming language is a life skill that will benefit you for the rest of your life. If my parents hadn't purchased me "HTML 4 in 24 hours" I don't know where I'd be today :)
It's a nice thought, except it can still be done more efficiently. A lot more. No amount of down votes is going to change that.
By all means, explain how regex is less reliable.
Maybe I'm late to the party, but I've never heard of "reactive programming", which I must admit sounds precariously close to _event-based programming_. The linked article is a typical [horrid] MSDN page that gives **no context** as to what RxJS actually is. From inference it looks like "RxJS" is simply the observer design pattern.. which is how the entire DOM event model already works, so there must be something I'm missing here. Here's the [only explanation](http://msdn.microsoft.com/en-us/library/hh242985(VS.103\).aspx) that I could find in my brief search for info on this. In a nutshell, it looks like MS "invented" another paradigm vis-a-vis copying existing techniques and slapping a [long-ass EULA just to download the source](http://msdn.microsoft.com/en-us/devlabs/ff628422.aspx). IMHO either OP and/or MS needs to do a much better job of presenting what this is actually supposed to be/do.
From my point of view, they are prone to be buggy and hard to maintain.
Wow. I can't thank you enough. I did solve the problem after all but did not post the result here. But jsfiddle is an awesome tool that i did not know about. Again, thank you.
That's the point; if they're going to implement the Packages/1.0 spec (as defined by CommonJS), then they should give proper reference to the spec. The way it stands, they are offering their implementation with no mention whatsoever of the spec; to the casual observer, it would appear that the author not only created the implementation, but invented the spec that drives it as well -- and in the mean time slapped a CC license on his implementation. I don't know if what's transpired is "ok" or not, just saying it seems shady to me. Regardless, thanks for sharing.
A regex can't be buggy, it can only be poorly formed by its author.
I totally agree :)
Looks like someone's set themselves a project!
I prefer tabs too but, counter argument. You're mini-fying production code anyway so that doesn't really effect the end product. 
There's also http://procssor.com/ and http://www.hieu.co.uk/blog/index.php/css-tidy-up/
I don't feel the need to put in my points unless you want to hear them. Yours are well thought out and interesting (more concise than a google search on the topic was for me). In Python, using PEP8 specifies that for new projects spaces are preferred over tabs and I tend to match PEP8 most of the time if I can. The most personal "why" is that I guess part of me does not like giving another developer the control to make my code ugly with 8-space or 10-space (or 2-space) indentations. ;)
Found some additional resources: * http://channel9.msdn.com/Blogs/Charles/Introducing-RxJS-Reactive-Extensions-for-JavaScript * http://msdn.microsoft.com/en-us/data/gg577609
[This](http://download.microsoft.com/download/9/E/4/9E42D3CD-CC53-4BCF-BBC9-15E7DF92A653/Rx%20HOL%20JavaScript.pdf) is helping me understand it a little bit more. It seems to be based around being able to treat event-data as first-class objects. Still not quite sure about it, but yeah - they could have done a better job with this announcement to make the use of it more apparent.
Your variable exists only in the scope it was defined in. If you want to functions to have access to the variable, you need to define it outside of both functions. var userIcon; function loadIcons() {} function addInfo() {}
works perfect. thanks!
Thanks, I might look into it more if I get a masochistic urge. I can't help but feel that this is yet another ill-conceived new idea that MS is trying to usher in as _The Next Big Thing_ without a single bit of input from the developer community. They have lots of work to do to convince me that this is something that I _need_.
Others have mentioned "Eloquent JavaScript" and "JavaScript: The Good Parts" which are great books. When you are finished with those two, there's "Secrets of the JavaScript Ninjas" by John Resig (creator of jQuery), which isn't even published yet but you can find it online. Major eye opener. Very clever techniques he's showcasing in that book. Another good one is "JavaScript Patterns" by Stoyan Stefanov (creator of yslow and a lead architect of the YUI library). 
http://www.reddit.com/r/nodejs
If you need a schema to define/validate the description or structure of data then you are likely defeating any benefit of using JSON.
haha this is cute!:) unexperienced js developers always make the opposite mistake, that is omitting the *var* keyword and thus declaring an unwanted global. Yeah, *cryptographite* already gave you the correct solution, however since you only need that global image and functions accessing it, you could just declare it like so: function loadIcons(){ userIcon = new Image(); // no var, implied global userIcon.src = "images/user.png"; } function addInfo() { // do something with userIcon... }
Does anyone else write their CSS like this? .class-a { /* stuff */ } .class-a .class-b { /* stuff */ } .class-a .class-b .class-c { /* stuff */ } .class-a .class-d { /* stuff */ } /* etc. */ I find it much easier to read and find code. 
You should avoid to use implied global variables. Thus, there's no need for a global variable here. Wrap the code into an anonymous function and it will be better. For example: (function(globalObject) { var userIcon; // local var globalObject.loadIcons = function() { userIcon = new Image(); userIcon.src = "images/user.png"; } globalObject.addInfo = function() { // do something with userIcon... } })(window);
There does seem to be some use to it on the server-side and they are just trying to bring that functionality to the client side. I didn't start to get a bit of an 'ah-ha' with the actual use of this until they started to flesh out their auto-complete example and adding things like throttling/etc to the event chain, filtering out duplicate requests/etc. Not sure if I'll be jumping into this just yet, but it does seem like it's more than just a pub/sub - and instead of replacing the DOM event model, it's extending it to make some things easier, and also extending some LINQ like functionality to creating the observer chain. One example that I was playing around with was along the lines of Have an array of "People", and I only want to greet people who are over 30. Using RxJS, it could be something like: function Person(firstName,lastName,age) { this.firstName = firstName; this.lastName = lastName; this.age = age; } Person.prototype.sayHello = function() { return this.firstName + " " + this.lastName; } var People=[new Person("Person","One",28),new Person("Person","Two",32),new Person("Person","Three",32)]; $(document).ready(function() { var greet = $(People).toObservable("greet") .Select(function(event) { return event.target}) .Where(function(data) { return data.age &gt; 30; }); var greetSub = greet.Subscribe(function(data) { console.log(data.sayHello()); }); $(People).trigger("greet"); Not the best example in the world, but I think it shows some of what RxJs is trying to do beyond recreating the wheel.
personally I agree with you, but getting to the API documentation stage I was looking for a clean way to describe the interface. some way to communicate the expected input/output is useful. if it can be this clean though, I don't see a reason not to just validate using the same description.
yea, it's surely not perfect. I do like that they at use a grammar though, and acknowledge the language's shortcomings. 
Nice
It's available online for purchase through his publishers [early access program](http://www.manning.com/resig/).
Thanks! That does help a lot. Still not sold on the idea but I do appreciate you taking the time to share what you found.
yes I know how to use a lambda for keeping private vars out of the way, I was just keeping things easier for a beginner ;) He will have time (if he's willing) to learn about function scopes, self-invoking functions, global name clashes and so on...
You're welcome :)
I agree: the description on their page is not the best, but as shallow as I looked into it, seems like a porting of an existing backend library (.NET stuff I believe) to front-end JS. Not just a simple pubsub implementation, but also has utilities to deal with concurrency in asynchronous data streams.
Oh, I completely agree that any data format can benefit from a schema. There are two problems with JSON: 1) It was intentionally created to be weak on description in order to avoid that which makes XML bloated. This means it can do a great job of representing a deep multidimensional data instance, but that is all it can do well. 2) JSON is a subset of JavaScript and JavaScript is already a fully formed language with types and constructs built in. This is the opposite approach to organizing data compared to absolutely everything else that instead starts with the data and forms adequate types. The problem with attempting to disarm the first of these two obstacles is that JSON looses all its strengths of being light-weight and convenient. Contrary to popular belief browsers, including IE, do a pretty good job with XML that is certainly far heavier and slower but otherwise vastly superior in every other form. The problem with attempting to overcome the second obstacle is that any attempt to supply a means of formalization, typing, or extension will run in conflict to JavaScript, whose intention is contrary to the objectives of a data schema. Furthermore, validation is actually not an action of schema, but rather an application action. In this case a schema is used as a regular language pattern definition for an otherwise irregular language and a conforming application applies a data instance against the pattern. This is golden for XML Schema because it has the rare benefit of becoming self validating, which is more complicated to explain. In this regard JavaScript is superior in that it is a regular language for writing application logic, so therefore you can write a validator without any need for a schema, however, this impairs JavaScript, and certainly JSON, from ever being self-validating.
the intresting fact is that it's compatible with Mustache templates; if you already use that, the switch can be painless. I like Mustache.js, and start to like Handlebars too!
Compared to [vaporjs](http://vaporjs.com/) (any benchmark ?) I find this library too verbose!
Even if JSON was created specifically as a response to XML's bloat, I don't think that creating a schema mechanism takes away any of the benefits. JSONSchema goes a bit too far, in that it writes the schema in JSON and is ludicrously verbose (like XML Schema), but that doesn't negate the value of schemas nor JSON itself, just that particular schema format. I like Orderly's solution because, while one may lose a little expressiveness (possibly what you're getting at?), they gain the ability to communicate concisely and validate user input using the same artifact, with no human error translating. In this regard, Orderly is not attempting to make JSON self-validating, but rather be an input to application code that validates JSON based on the schema.
Lonnie's sort of looks like a very early version of csstidy.
In addition to the tutorials, videos, etc recommended here, a **great** way to learn about Javascript (and many other things) is on IRC. Get yourself a good irc client (Ilike irssi), then get connected to freenode, irc.mozilla.org, and any others you can find. Then join channels like #javascript, #jquery, #js, #ecmascript, #dojo etc.... Whatever server you get on just find the relevant channels; both for JavaScript in general and the major libraries. To start, just hang out there; just sit back and watch. This is a tremendous learning opportunity, you have a chance to learn directly from some of the smartest people in the community as well as many of us everyday javascript devs. This is a great way to learn because you will get answers to questions you didn't even think to ask. You'll learn about things that you might not have come across on your own. Someone will come in and ask for help with a problem, you'll see someone help them...and later on when you have the same problem you'll already know the answer. You'll get a chance to see all the cool things people are actually doing with JavaScript, and get inspired for your own ideas. As you get better with JavaScript, you can start to help the newer people with their questions...and this too can be a learning experience for you. 
Bloated.
This would mostly be used for 'unminifying' a chunk of code into a readable format.
I would look at the css of the parent element, possibly the padding.
I wasn't the one that downvoted you, but the active subreddit is http://www.reddit.com/r/node 
Awesome, will do, cheers :)
This isn't a boilerplate... it's full of unrelated code. At first glance I thought this guy was suggesting that every library should be assigning itself to $. I'm getting a distinct vibe that this is a bait &amp; switch.
It is mustache templates with added template and child item selection. An enhanced version, if you will. iCanHaz is very similar.
This looks super cool and I want to try it out right now. Any downside to using a js-based templating system (aside from the obvious "WHAT IF JS IS TURNED OFF!")?
Wow, that's excessive. There was also [Objective-J](http://cappuccino.org/), which struck me as equally unnecessary. Don't get me wrong, I do like JS, but I wish I had some *options* when writing code for the client. Further, I'd like to stop transmitting the source code to every application each time a page is loaded; the overhead isn't extremely significant, but it does place a sort of limit on how big you can make web applications. What I'd really like to see is LLVM make some significant headway in being a target bytecode for clients. That would really open up the web for some interesting apps, and enable plenty of developers without JS experience to target the same. sigh. /pipedream
This too awesome. are you the author? 
The problem is that css logic is not hierarchical. So you typically have some of you rules that follow this kind of logic but not the whole. And sometimes you may choose one hierarchy or another one. I just had a look at one of the css files on which I'm working : your system would just have led to the indentation of a few rules. Maybe it can be helpful in specific and very hierarchical cases, I don't know.
&gt; I don't feel the need to put in my points unless you want to hear them While we're at it, why not ?
ya know, they already support javascript.
Try to come up with a regex that takes into account block comment and strings in the property value.
I imagine this is targeted more at the node.js crowd than the browser crowd.
Do you have a css reset file being used? Does it do this across all browsers?
On this note, does anyone know a JS templating language that uses `&lt;...&gt;` tags? For instance, maybe something like: &lt;t:with var="author"&gt; &lt;h2&gt;By &lt;t:firstName&gt; &lt;t:lastName&gt;&lt;/h2&gt; &lt;/t:with&gt; Instead of: {{#with author}} &lt;h2&gt;By {{firstName}} {{lastName}}&lt;/h2&gt; {{/with}} Reason i'm asking is I'd like to write my templates in HAML.
What's the difference between this an jQuery [tmpl](http://api.jquery.com/tmpl/)? Given that tmpl is going to be rolled into jQuery core, would you agree that this is somewhat pointless for devs who use jQuery?
An option to pad values to a particular column would be nice. I like to see my values lined up in my CSS "source code", for the sake of readability. Like so: div.whatever { margin: 2px 5px; padding: 4px; background: #ccc url('/images/foo.gif') no-repeat left top; } The whitespace is removed by the CSS minifier that it gets piped through en route to production.
tmpl will not be rolled into jquery, actually. more details on that here http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/
dunno about &lt;&gt; but Jade is very haml'y http://jade-lang.com/
Would love that, but I'm not sure Jade works in the client side of things. :)
This is a.... how do you say... an april fool's joke.