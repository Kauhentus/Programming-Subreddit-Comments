What? Why not newTextUser.style.color = data.color;
I'm not sure what you're arguing here, as neither Atwood's post nor my comment mention (or necessarily even have anything to do with) node.js or Javascript running on the server or command line. For reference though, node was far from the first time you could use JS on the CLI (JScript.net) or the server side (Netscape Enterprise Server, JScript.net, etc).
That's normal if you're constantly improving. One thing to keep in mind, especially in JS: don't forget about the "why". If you include comments, you can have an easier time figuring out why you did what you did. If you research the "why" to a methodology, you will find that the "shoulders of giants" we stand on, have figured things out the hard way early on. People are constantly trying to reinvent the wheel because to make things easier. In the long run, "easier" may not be the best method. Sometimes crappy and dirty code is a byproduct of the project management. Learn your lessons and move on. In time, everything becomes easier to do through repetition. 
Good point, you are correct, updated my answer.
There is no period in my life when I would have used string concatenations to create html.
Thanks. It's essentially an implementation of the `run()` method utilized in the article. But even the author states this in the readme: &gt; It is a stepping stone towards ES7 async/await.
Thanks for this, I appreciate it. Adding the plugin didn't reduce the size. That visualiser tool -- which is a really cool thing, by the way -- reports that 94% of my bundle size is node_modules, 50% being React, 21% being jQuery, 20% being css-loader, all much larger sizes than make sense. [Here's the JSON file](https://drive.google.com/file/d/0B-Tc679Oc9PUNjY5MkpxNElIcVk/view?usp=sharing) and [my Webpack config](http://pastebin.ca/3613247) if that helps.
Definitely sounds like you're building your bundle in Dev mode which explains the huge React size. Also why jQuery? I doubt that you actually need it, you probably want to avoid direct DOM manipulation to begin with, and even if you do need to do it, you could do so without jQuery. 
These are the production sizes, though, that's the problem. The dev sizes are ~250 KB larger. And jQuery's a dependency of Bootstrap, that's all it's there for. 
 example = document.createElement('DIV'); // do some stuff with the DIV, give it children/style/events/etc, under parent // later on, you remove that div parent.removeChild(example); As long as `example` is around, that DIV and everything in it will be kept in memory. Lots of times library caches and such are the root cause of these kinds of memory leaks, but also the sort of complicated closures and convoluted scoping that happens when you have a large application doing lots of DOM manipulation. You'll almost always discover these problems by profiling as any non-trivial example won't usually be obvious from the code by itself (IME it usually "looks like" the elements are cleaned up but by some quirk of the application architecture keeps a reference around).
You know about Math.PI, right? ;D
Have you tried using the UglifyJs-plugin directly? I had to add it for my bundle to actually be minified. new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false } })
Scanning through the JSON w/ [webpack analyzer](http://webpack.github.io/analyse/) looks like all of the comments are still there, try configuring uglifyjs plugin: (add this to plugins array) new webpack.optimize.UglifyJsPlugin({ output: { comments: false } })
Javascript in MC has been done before though.
[Off topic] Do you really need jQuery and BootstrapJS? 
Forgive me father for I have sinned (too). Seriously, this reminds me of me. You should be moving to Vue or React. It's a huge paradigm change.
You should show your config, but I bet you either need to (in order of likelihood to be the problem): * change module.exports.devtool to 'source-map' from 'eval-source-map' or some other flavour of eval * remove hmr plugin and 'react-hot' from your production js loader config * add DedupePlugin to prod config * add OccurenceOrderPlugin to prod config * add NODE_ENV=production as others have said (using DefinePlugin). It's an odd name, but this "defines" globals that can be used by your modules after. React has a bunch of stuff that will remove if NODE_ENV=production, but is unlikely the main problem.
http://www.w3schools.com/tags/att_a_target.asp you're right it's blank, but strangely block works as well. But blank seems to make more sense. I may have started using block by mistake and then never noticed since then. 
Here's a link you might find useful: https://deck-of-cards.js.org 😉
Removing eval-source-map drops it down to 1.1 MB, thanks for that tip! I probably should have thought of that...
This is really cool, thanks for linking this.
No problem, had this same issue when I started using webpack. Surprised it didn't drop more tbh, keep playing around with stuff. Post your config too maybe.
That's because it's not a function! You should assign a string value to the style property directly: foo.style.color = '#fff';
I don't think you can justify a sweeping statement like that. Although React et al. provide robust and 'light enough' frameworks for more 'modern' code, it's naive to assume that by switching you'll automatically end up with a better code base. If you go down the React/Redux route like so many others, you introduce a heavy dependency on a 'cool' but fundamentally flawed architecture. Sure, devs can pick it up quickly and get help in a jiffy (cos all the cool kids are following the same tutorials this week), but what happens when it falls out of favour? It's going to look just as dated in another 2 years, plus it relies on a huge and antiquated framework, and it's less understood because in the name of progress you've abstracted away a key part of your app architecture. Don't get me wrong, new paradigms are exciting and can lead to simpler and more elegant code, but please be careful invoking words like 'sin' in this context. I consider it a sin that a redux store notifies all the connected components in an app of every action, irrespective of whether it applies to them. OK, rarely a problem, but hardly optimal architecture design either...
Do you mean, can I get by just using Bootstrap's CSS, not its JS (and the jQuery it relies on)? I hadn't thought about it; I don't know how much of Bootstrap's core features actually rely on the JavaScript.
Hey there, I'm working on a nearly identical challenge I believe, and I've been stuck on this one for a few days. Everything I found on stackoverflow and other sites had slightly different specifics. They also said it could be solved with reduce, and I haven't had any luck there. I've written and deleted several attempts, most recent attempt was just a start: ``` function extend() { for(var prop in props) { if(props.hasOwnProperty(prop)) { obj[prop] = props[prop]; } } } ``` What did you end up with?
Ah, yeah I mean once you load the initial route, pushing new state is pretty trivial. You could always take a look at the source code too for more specifics :)
Uh... it's closer to typing `node` in the terminal and then typing `const PI = 3.141593; console.log(PI &gt; 3);`. It's a REPL (read-evaluate-print loop), but it also has all the variables that a script at the bottom of the page would have access to, so you can do DOM manipulations etc. as well.
Have you considered using a CDN for react and jQuery, instead of bundling them?
The arrow functions make a lot of those kinda hard to read. 
As I understand it's a replacement in a sense of compilation target for other languages which compile to js now. So I'd say this is means to circumvent js.
&gt; This should start by mentioning that it intends to follow the Fantasy Land spec and link to it at the very beginning. https://github.com/fantasyland/fantasy-land
If you're using it for layout and visual stuff only you can definitely get away with cutting the JS. http://getbootstrap.com/javascript/ Are you using anything on that page?
You can also look into using Webpack's dll plugin. Essentially what it does is build all of your dependencies (react, bootstrap, etc) into one bundle and then all of your code into a separate bundle. What is nice about that is when you want to test your changes you only need to build your much smaller bundle containing just your code. the dll bundle is relatively static so it would only change if you added removed or updated dependencies.
Why just not use developer tools in chrome? You know still use developer tools for mobile in Chrome if you connect your phone and type in chrome://inspect in your browser
For me it's frustrating having poor IDE feedback due to the weak typing. TS is great because I can actually keep track of shit.
What do you mean by saying that React is fundamentally flawed?
Yea, I do understand it's purpose, and I like the warnings and Eclipse like experience. But I just don't get why it needs to look and feel like Java. Not that I dislike Java, I feel the same way about Jruby or any pretend you're using another language wrapper. 
I don't think that just because a language embraces the concepts of classes and types that it's a "make believe" Java. I mean, we had C++ and Ruby before we had Java, and those have classes as well. If you really meant, "Why use TypeScript instead of JavaScript?" then it's because TypeScript allows for better tooling. The only alternative is Facebook's Flow, which hasn't gotten as much traction as Typescript.
TypeScript is not very much like Java at all. Also, you seem to be conflating type-safety and OOP. Using TypeScript does not at all force you to author your code in an OOP style. Java's type system is actually pretty bad. This is readily apparent when compared to languages like Scala or Haskell, but even TypeScript is miles ahead in many ways. Some examples of things that TypeScript has over Java: * Type inference: `String someString = "foo";` is completely redundant. `val someString = "foo"` would be sufficient. TypeScript lets you get away with just `let someString = "foo"`. It goes even further than this, since type guards allow for even more sophisticated type inference. * Strict null checks: This won't be out till 2.0, but the potential for all types to be `null` is a big issue in Java. It's why many codebases get littered with `if(x == null) { /* some error handling*/ }` everywhere. * Structural typing support: Think of this as static duck typing. This allows for a great deal of flexibility with specifying contracts without forcing customers to writer converters and the like. * Union and intersection types: In TypeScript, we can express a type as being either a union or intersection of other types. This allows for the ability to loosen or stricten a type contract. * Support for string literal types: When combined with union types, this can get pretty powerful. Angular itself seems to feel Java-esque in many ways. That can be a good or bad thing, depending on one's preferences. However, your complaints don't really seem to be related to TypeScript itself at all.
Angular is made by Java people, that might be why.
I believe the React/Redux combination to be flawed... not React itself (although JSX is a hack for sure). As I mentioned; although there are benefits to keeping your app state in one place, it's nonsensical to notify connected components of state changes that don't concern them. Of course you end up writing logic to map your app state to each component's properties, but you're still essentially registering event listeners that for the most part do nothing. Not a problem with CPU cycles to burn, but definitely sub-optimal. Plus you expose the whole state to components who are only interested in a small slice of it, which seems inelegant. Oh and since now we're all supposed to use as many stateless dumb components as possible, React is fast becoming one of the heaviest HTML templating engines out there! The 'virtual DOM' is clever stuff, and React makes prototyping components a doddle, but it is also a highly-opinionated and heavyweight solution to a well-understood problem. Nothing you couldn't do with a zillion other pub/sub and DOM manipulation libraries.
Ever used PHP? ;)
Well when I said Java, I was more thinking Scala, I feel it looks a lot like Scala, but I also consider C++ to be a C plus Classes extension. 
Unfortunately I have to use Angular. 
&gt;I cannot use anything other than if, so please do not include new terms like min, max, array, for, and while. Much as I would love to use this and if I could I would have used these already, but I cant, sorry. Why can't you a loop or these other constructs? You don't have to apologize! But an explanation as to why you can't use them would be nice!
&gt; all much larger sizes than make sense. The numbers do make very much sense. It shows that jquery is about 250kb large - which is exactly the same size as the uncompressed dev version of jquery you can download from jquery.com. Which makes sense as webpack.json sizes are before any minification with UglifyJsPlugin.
To add a touch more clarity to this already great answer, the `get` keyword before a method has the effect of allowing code to call that method as though you were accessing a value type. So, instead of something like `x.getName()`, you can call `x.name`. Similarly, `set` allows you to call `x.name = 'hello'` instead of `x.setName('hello')` This, however, means that `return this.name` in your `get name()` function is actually calling the get function. It's recursing into itself endlessly.
You probably have a typo in your html. When you do this javascript: document.getElementById("KilobytesProgress") you're getting a reference to the html element: &lt;input id="KilobytesProgress" /&gt; (I'm guessing it's an `input`, it could be something else). If you have that javascript without that html, you'll get an error.
Wow, quite an apt analogy. I'm going to steal this if I come across a suitable situation for it.
That makes sense to me. I had poked around with implementing a `Maybe` monad in Typescript (just as a learning exercise) in the past, but I kept running stuck on getting `ap()` to work with monads (since Monad implements the Applicative specification), and if I understand correctly, `ap()` should only work with an Apply of a Function (so `Maybe&lt;Function&gt;`, in this case), and the tooling got *really* weird when I tried supporting that. I could make it work with some pretty serious typecasting hacks, but I lost all the proper typing in every IDE, which sort of defeated the purpose of the whole thing. Side note, do you know why `join` was the chosen word for the unwrap / unbox ish method? That doesn't strike me as very intuitive. Side note #2, how *do* you handle something like `this.chain(f =&gt; m.map(f));` (the derived `ap()` taken from fantasy-land Monad specification) with a static language? `m.map(f)` would only work when `this` wraps a `function`, but how would you add `ap()` to the class? Or would you just leave it off, and end-users would have to use the `chain`/`map` method since `ap()` wouldn't be available to them directly?
I do know a bit about events.I knew that in multipart/formData uploads, the body of the request contains the relevant information of the file being uploaded.How do I actually do this if I wanted to emulate this myself.As far as i think we have to make a writeable stream and then look for the event of the arrival of the information present in the request body and write it to the stream.But it is all incoherent in my mind.Could you please guide me.Anyways,thanks for responding.
Right, I think that would work perfectly in javascript. Typescript wouldn't let me "compile", since I couldn't guarantee that I would have a `Function` when attempting to use `ap()`, and I couldn't figure out a way to say that `ap()` could only be used with `Just&lt;Function&gt;` but not with `Just&lt;AnythingElse&gt;` (which feels really weird to me, anyways). I tried going down [this](http://stackoverflow.com/questions/36732440/how-can-i-cast-a-generic-to-an-executable-function) route, but that's how I broke all of the useful typescript tools. :\ Maybe I should've just done it in basic javascript. :)
It's going to take me a long time before I can glance at the fat arrow and understand what's happening.
Got a demo of it running?
In addition to stripping out unused Bootstrap JS, you can also get rid of CSS components - Bootstrap's structure has become increasingly modularized to allow for the leaner customizations. The main Bootstrap Sass should be importing partial sass files for all the UI components; drop the ones you don't need (i.e. modals, progress bars, etc) and recompile the Sass.
Sure with that attitude! Let's try with some extra english sprinkled in: let Add = (first, second) =&gt; first + second Make a function called `Add`, which takes two arguments `first` and `second` and returns the result of `first + second`. Add(1, 2) // 3 If you want to get the hang of it quicker, open up the chrome/firefox/edge/node console and type some for yourself! Here's some fun ones to get you started. [1, 2, 3].map(number =&gt; number + 2); [1, 2, 3].filter(number =&gt; number &gt; 2); [1, 2, 3].some(number =&gt; number === 2); [1, 2, 3].every(number =&gt; number === 2);
&gt; it's naive to assume that by switching you'll automatically end up with a better code base I never said that. React, Vue, etc, are just tools. The result depends on how one uses those tools. &gt; but what happens when it falls out of favour? I know how this is going to sound, but I doubt that is going to happen with React. 1) There is a huge company behind it using it in production on one of the biggest sites ever 2) Such company is also working on React Native and that goes way beyond what any other JS framework/library has accomplished. I could be wrong of course... &gt; but please be careful invoking words like 'sin' in this context What context? I was referring to the bad practices OP wrote in his post and I used "sin" as a joke.
Sarcasm maybe?? The link was about using constants in javascript, using PI as an example, if you weren't being sarcastic
In general, people like github pages demos (they never go down and show what you're doing). I always push libraries with no demo to the bottom of the list personally. 
Dropdowns, carrousels, etc will rely on jQuery. You can definitely use jQuery and bootstrap.js if you're used to it and don't mind the extra weight, but you'll be missing the entire point of writing your UI with React, and you might run into issues. My point is, jQuery is a library that mutates the DOM state. Having a bootstrap dropdown for example will mean that you're delegating the state of those DOM elements to bootstrap.js (showing or hiding, adding or removing classes, etc). This state, managed by bootstrap.js, is not reflected in your React component's state (or props), which makes your UI code difficult to test, difficult to reproduce, and you're opening the gates to possible bugs that will be hard to debug. Example: if React re-renders your dropdown for whatever reason while it's open, you'll lose your component's state (the state that's handled by bootstrap.js). Depending on how you write your `render`, it could mean that re-rendering your component will result in only partial state being applied (e.g. current link in navigation preserved, but other aspects of navigation might not). If you find what I just wrote a little bit confusing, then I think I've successfully made my point. TL;DR: If you're using bootstrap, you should be using [React-Bootstrap](http://react-bootstrap.github.io/getting-started.html#setup), because: - &gt; React-Bootstrap is a complete re-implementation of the Bootstrap components using React. **It has no dependency on either bootstrap.js or jQuery**. If you have React setup and React-Bootstrap installed you have everything you need. (emphasis mine) 
Why use let or const instead of function? function add(first, second){ return first + second }
You've got the gist of it. Basically you'd want to read the HTTP stream and parse its contents, then (at least if you're emulating busboy) emit the individual fields from the form (as 'file' or 'field' events). Busboy consumes a readable stream (the incoming HTTP) and emits events through its own writeable stream, essentially acting as a duplex (even more specifically transform) stream. If you look at [where busboy consumes the multipart stream](https://github.com/mscdex/busboy/blob/master/lib/types/multipart.js) (the method is determined from the already-parsed headers from the Node-standard HTTP stream), you'll see that it actually uses [Dicer](https://github.com/mscdex/dicer) to do most of the parsing of the form data, busboy does some extra cleanup and standardization and sends that along. Dicer itself uses something called streamsearch to search for the multipart delimiters. So from my quick read through the codes, if you use multer to receive multipart data: multer adds Express middleware wrapping to the stream provided by busboy which does some cleanup on the stream provided by dicer that uses stringsearch to partition and match pieces of the original HTTP stream. Seems pretty convoluted to me! You could probably write one slightly more complex module that uses a Transform stream to make a straightforward pipe between the HTTP in and the application that wants the (busboy-like) file/field events out, maybe with an intermediary stream inside the module if parsing multipart data is more complex than I thought (I don't really recall the spec offhand), I'd leave the Express middleware stuff separate. If you look there are a few other [long-lived libraries](https://github.com/felixge/node-multipart-parser/blob/master/lib/multipart_parser.js) for parsing form data, you might want to compare them to see differences in their approaches while you decide how to clone busboy's behavior too. The one I linked seems to parse a buffer rather than a ~~string~~ stream, but that makes it a bit more straightforward and might be easier to understand.
Aren't NPM repos all flat packed now (as in, they're all in the node_modules base folder)?
If I used `function` it wouldn't make for a very good explanation of arrow syntax. If you're asking why *ever* do that, well to avoid hoisting, or to have fewer differences in syntax (treat everything as a variable). I'm sure you can find a ton of literature about function expressions vs function declarations, I say just use what suits you and / or your team.
You have always been able to have paths up to 32k characters by using the NT syscalls and the `\\.\` prefix. There is no need to wait on Microsoft for that. If npm was limited to 260 characters it was entirely a limit of its own choosing (in the sense that it was using the wrong syscalls.) 
Anyone who finds these concepts cool should at least try out Haskell. It does all of this more concisely, cleanly, and safely and its something like an order of magnitude faster than JS.
Flatter, yes. "All flat"? No. Nesting is still a thing for multiple versions.
You should be able to `yield` either / both. Take a look at [this](https://github.com/tj/co#yieldables) (it's the library that koa utilizes for async flows). Post some code, if you still need help. 
Triggered
I'm going through "Learn You A Haskell For Great Good" right now and I really like the language!
Promises should return just one value. Think of promises as da delayed value, not a generic function. So yielding in one doesn't really make sense 
I always wondered why there was a tool that cold navigate and help with those path too long errors without encountering the same issue itself. Though I do hope that this removal of the limit doesn't encourage people to nest things just because they can. 
Unfortunately it only works with modular es6 dependencies. Things like jquery are monoliths.
Just throwing this out there, here's a couple of nice alternatives to Bootstrap/React-Bootstrap: * http://react-toolbox.com/ * http://www.material-ui.com/ Biggest difference between the two is that Material UI uses inline styles for its components, which will usually require `!important` to override with CSS, while React-Toolbox uses CSS Modules and SASS. Both follow Google's Material Design patterns, which in my personal opinion give them a more modern feel compared to Bootstrap.
&gt; Are you accidentally having sourcemaps enabled in your prod config? I spent hours trying to figure out why my production builds were giant, realized like an idiot later that I had sourcemaps enabled. &gt; I had the sourcemap config option higher in the config and had tunnel vision. how u fixed it? I've got the same problem
 var n1 = 1, n2 = 2, n3 = 3, n4 = 4, n5 = 5, min = n1, max = n1; if (min &gt; n2) min = n2; if (min &gt; n3) min = n3; if (min &gt; n4) min = n4; if (min &gt; n5) min = n5; if (max &lt; n2) max = n2; if (max &lt; n3) max = n3; if (max &lt; n4) max = n4; if (max &lt; n5) max = n5;
Think the bigger problem was deleting your folders again :P Windows users had to install rimraf which was prior to version 3 the only easy way to delete deeply nested folders of NPM.
Could you share your config? 
React isn't written using es6 modules afaik. Also I guess there is not a lot of unused code in react given how small its API surface.
The old "readability" vs "ambiguity" issue. If proper tail calls are implemented, this should work quite well :D
I'm not familiar with TypeScript outside of knowing Angular 2 prefers it, so I wish I could be more helpful with it. :/
You can actually derive both map and ap from chain. Just.prototype.box = function(x) { return new Just(x); }; Just.prototype.map = function(f) { return this.chain(a =&gt; this.box(f(a)); }; // a bit trickier Just.prototype.ap = function(other) { return this.chain(f =&gt; other.chain(x =&gt; this.box(f(x)))); }; // but chain map is a bit clearer. Just.prototype.ap = function(other) { return this.chain(f =&gt; other.map(f)); } Map just needs a signature of `(a -&gt; b) -&gt; a -&gt; b` and similarly Chain has a signature of `M a -&gt; (a -&gt; M b) -&gt; M b`. And finally ap: `M (a -&gt; b) -&gt; M a -&gt; M b` (accidentally switched up the operands before). In this case, `a` looks like `c -&gt; d`, a function that maps from type to type which means we can pass it to map. Since chain puts all the impetus of returning a new boxed type, and map does that, it just works. Writing the type signature is a bit easier when you have a more expressive syntax (my favorite thing about haskell). But really, you could just say: function ap(other: Just&lt;a&gt;): Just&lt;b&gt; And everything inside is a black box. 
&gt; I mean, we had C++ and Ruby before we had Java, and those have classes as well. This sparked my interest as I, like a lot of other developers, wasn't exposed to Ruby until Rails was released in 2003. So I looked it up. It turns out Java was released in May, 1995 and Ruby was released in December the same year (as a 0.95 release, the 1.0 release didn't come until a year later in 1996). Fun facts!
Ah gotcha. Will have to check it out. Thanks for posting
Why would you care about deep path nesting in npm and stuff like that? It is not like you're going to manually work with these paths.
Yep. I've had way too much internal dialog over which way I prefer.
Thats basically what I just did, you're just keeping it on the same line...
http://tympanus.net/codrops/2011/09/20/responsive-image-gallery/
Only on Windows where explorer can't delete anything that's deeper than 260 characters. The feature discussed in this thread resolves the problem. EDIT: but my primary area of work isn't web development, so I rarely have to deal with node.js and npm.
Haven't checked how it's implemented but Youtube does something to remove start time hash on video load (probably so it doesn't accidentally get bookmarked or shared).
"Wrong syscalls" is pretty insulting considering they are the correct syscalls and you need to use the "wrong syscalls" to get a proper full path. The windows del command even fails to delete directories which are too deep. Windows APIs are 100% at fault here
I thought finding and even/odd number is determined by the quotient itself as the even or odd number and not by the dividend or divisor. So if I am trying to find an even/odd number, its the dividend I am trying to determine? 
Oh my god, finally
One issue I found, the modal does not prevent keyboard navigation if you are using a screenreader. And I would probably add a description or title to the tooltip buttons, as just a expanded/collapsed state doesnt really indicate what can be done to them.
Nice project. It is missing snapping though. I don't want to view half of day, ever. This would introduce some challenge to keep the overall scrolling smooth.
The UX is not great though - when scrolling fast, years and months become blurry. Consider to show current year/ date as a statically positioned element in the middle of calendar when scrolling.
It would be interesting to have multiple speeds of scrolling depending on where horizontally in the calendar the mouse cursor is: the more to the left (years) - the faster, the more to the right (months, days) - slower.
Currently using "isMobile.js" on a project, :) Nice list!
Npm (or rather, node) is actually one of the projects that goes extra mile and converts paths to UNC format (\\c:\foo), and can deal with long paths because of that. It's everything else that's broken. Npm just made this problem mainstream because of the pre-npm3 node_modules layout that broke for everybody
Perfect! Thanks?
Do you make one right on the github page? 
I love this. I used to do this all the time when I was learning JavaScript. Which was much easier before everyone was minifying code. Which was way more people even just a few years back. Most recently I've done it to try and understand the anti anti adblocker scripts.
something like //save var elem = document.querySelector('#bar') elem.addEventListener('change', function(event) { window.localstorage.foo = JSON.stringify(elem.value)) } // load var elem = document.querySelector('#bar') elem.value = JSON.parse(window.localStorage.foo)) || "default_value_here" 
It may sound kinda bias, but in terms of a working tool, React &amp; Flux is as good as your going to get right now. I would work more on ancillary tech, you might want to look at async and await, which I believe you can get with stage-0 using babel... or maybe ES7? I can't rmb off the top of my head. As mentioned by whiteswitch, React Router is a good introduction to building a router/controller well, and webpack is probably going to be around for a while so it does't hurt to get comfortable with that. If you want to work on code quality stuff, Whiteswitch reccomended Immutable which is great, but you might want to try looking into some testing stuff. Chai/Mocha, or Jester are popular ones. You could also try branching into the server architecture more and take some time with Amazon Web Services or Google Apps. The cloud infrastructure seems to be here to stay, its a safe bet getting comfortable with one of those toolsets will put you in a good place moving forward.
You're right, I was misinterpreting the equation and dividing by a **diff number** instead of by **two**. I changed '**first %= divisor**' where divisor was users input, to '**first % 2**' and then changed my condition to '**if (first != 0) then odd, else even**'
[removed]
 * [Addy Osmani](https://addyosmani.com/) * [Peter Cooper](http://peterc.org/) Both super active in the community. Check their twitters if their sites aren't enough.
The optimisation on that regular expression is inhuman.
On the plus side, while code these days tends to be minified, we actually have best practices now. So those learning JS are way less likely to end up cargo-culting horrible stuff like: function getValue (obj, key) { return eval('obj.' + key); }
I wasn't saying minifying is a bad thing
- [Axel Rauschmayer](http://www.2ality.com/) - [Dan Abramov](https://github.com/gaearon) - [James Long](http://jlongster.com) - [Nolan Lawson](https://nolanlawson.com)
Ok!! I made that part of the site not require a login for now. Should be non-mandatory.
Not quite getting this. You asking the spreadsheet to tell you todays date? Not sure why. Just do this: var rightNow = new Date(); var month = rightNow.getMonth() + 1; var day = rightNow.getDate(); alert(month); alert(day); So you have the day and the month in two separate variables.
[react-router-redux](https://github.com/reactjs/react-router-redux) is an elegant and accessible binding for the combination of react-router with redux. Be mindful that you will have to [write a custom, immutable-friendly reducer if you use this with Immutable.js](https://github.com/gajus/redux-immutable). 100% agreed on webpack: once you get the hang of authoring your `webpack.config.js`, it's a real pleasure to work with. For bundling, [Rollup](http://rollupjs.org/) also seems to be gaining a lot of traction this year.
Not really... they did go the extra mile. Npm or node itself never fail with long path errors. The problem comes when you go into explorer and try to edit or delete those files; it blows up because the files exceed the limit.
Sorry. I mean. I didn't write it... It's a library for Gmaps I am trying to intergrate in to my script, but I need to pass dynamic values via the script without hard coding hence me trying to put them in the function.
Well say you placed my snippet of code in your gotoCurrentDay() function and told the spreadsheet to open up column day (day as in the variable day). EDIT: Since you said the spreadsheet has columns for every day of the month, The 11th of may should correspond to column 11. 
You could take a look at cyclejs and functional programming. They seems to gain momentum in the javascript cpmmunity and could be one of the next "cool thing" to pop out. I've seen a lot of developers going that way after using react for a while.
async/await is in stage 3. =)
Column one lists students' names. So is there a way to increment the gotoCurrentDay function by 1?
checkout nativescript. it's like reactive native but works with angular To answer your question, react native (and nativescript) are faster then ionic because they use native components rather then the HTML DOM 
Okay, I tried that and I am still getting the "Cannot convert Sun May 01 2016 00:00:00 GMT+0900 (JST) to (class)." error message. Here's how my code looks currently. I removed the two alerts from your initial suggestion because it was returning an error message about the alerts and I don't need an alert returned. function onOpen() { var ui = SpreadsheetApp.getUi(); // Or DocumentApp or FormApp. ui.createMenu('Navigation') .addItem('Today\'s Date', 'gotoCurrentDay') .addToUi(); } function gotoCurrentDay() { var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getActiveSheet(); //Get current day value from the MATCH spreadsheet function //Example of cell value: 73 var range = sheet.getRange(1, 2).getValue(); var rightNow = new Date(); var month = rightNow.getMonth() + 1; var day = rightNow.getDate(); var dayColumn = day + 1; //Go to bottom cell so that when it goes back up to current day, it's at the top of the screen sheet.setActiveCell(sheet.getRange(sheet.getLastColumn(), 1)); Logger.log("Select Last column: " + sheet.getLastColumn()); //Go back up to current day cell sheet.setActiveCell(sheet.getRange(range, 1)); Logger.log("Select Current Day Column: " + range); }
OK so I don't know how sheet.setActiveCell() works but if you can give it a single column as in: sheet.setActiveCell(dayColumn); Then that might solve it.
Here's a screenshot of the first level: http://i.imgur.com/sMrsDEm.png?1 I don't want the tiles to move, just rotate. A brief example would be in the first level the user would click the top and bottom tiles to make the whole puzzle go in a straight line. I can also PM you the link to the code itself if that would help more, so you can see what we already have. Thank you so much for helping!
&gt; sheet.setActiveCell(sheet.getRange(sheet.getLastColumn(), 1)) My apologies for sounding like a pest: Where would I do this? Am I replacing a line of code or entering a new line? I have two instances of "sheet.setActiveCell"... so if I am replacing one, which would it be? Or would it be both?
I cheated and looked at the documentation: sheet.setActiveCell(sheet.getRange(sheet.getLastRow(), dayColumn)); You probably only need one setActiveSheet(). (Not really sure what row you are trying to go to so I'm just going to the last one) 
That did it! Thank you! 
One more thing - it takes me to the bottom of the column for that date, how can I have it take me to the top of the column?
You *can* use Angular 2.0 with it, but you certainly don't have to. Unlike RN, NativeScript has a basic bridge layer that you can use with any framework.
That did it - though I had to tweak it to row 2 because of reasons that are too boring to go into*. Thank you for your help! I hope you enjoy the gold. *The reason I had to tweak your last suggestion is because row 1 has the date and is anchored to the top. But sending it to row 2, it takes it to the first point of actual data entry. 
Heya, real quick, I just realized it's taking me to "yesterday's" date. I am certain this is because the first column, ColumnA, is the Student's name and data entry starts in column 2, ColumnB, which corresponds to the first of the month. The function is likely merely matching the date to the column (May 1st? Go to ColumnA). I must need to throw in a (+1) somewhere. Any ideas?
Yeah change to: var dayColumn = day + 2;
I wish they would of just contribute this to another project. There doesn't need to be a new module builder every 6 months. 
I checked myself.
what is wrong with my website content ? Can you give me tool where you checked?
It's all copied from other sites. That's content theft. You can't copy other people's work and claim it as your own.
Can you give me that website name. This is my fresh content. Please give that website name from where i theft? 
Thanks for this, I was looking for a dom diffing library to use with hbs today and found this, appreciate it :)
A function returning a function returning a function that sometimes returns a function is the main source of confusion for me. Maybe for others too. It's just not intuitive. Is there really no alternative pattern to middleware?
I like the extension quite a bit! My one recommendation is add some sort of metric for not showing alerts. I'm getting notifications for every conversation, even if I'm the one who started it. If a person starts typing a message and actually sends it within 5 minutes of the start, I don't think a notification should appear. Perhaps even make it configurable. Even if that isn't implemented, it's easy enough for me to filter through the alerts to figure out which ones are of interest. :)
Range selection would be nice. I'd consider using this in a current project if it had that.
Hi kenman, please remove bann. Just because of one post you banned my site. 
https://github.com/getify/You-Dont-Know-JS
&gt; Yep, Facebook always runs the master branch of React. That’s pretty ballsy. wow.. relying on the master branch in a web app that serves over a billion people. Not sure how I feel about this.
They must really trust their peers not to fuck up in the slightest.
That only resolves the issue if before deletion it was lower than the path limit but with recycle bin it was more than the path limit. I am referring to the "del" command via CMD, not just Explorer interaction. 
&gt; Python/Django Little offtopic cos your current project has PHP for backend, but for those who use Django for backend: there's awesome `StaticLiveServerTestCase` that allows you to run selenium tests against dev server while still having controll over backend state.
Not sure about specifics of your task (if there is a difficulty level etc.), but Gulp has many open issues which they "promote" as good for "first-time" OS contributors. Check their ["help wanted"](https://github.com/gulpjs/gulp/labels/help%20wanted) section.
Pidgin has this for XMPP (where the XEP-0085 chat state notifications are also sent in advance of any actual messages). It's fun to have conversation windows open early, and quickly type "Hi" back before the other person sends the first message. :D
Doesn't work in Firefox 38.5.2 or Internet Explorer 11.
here are some area you can diversify: - Elm: a language which is source of inspiration for redux - React Native: for writing native apps. - Vue: another view layer library like react. - Aurelia: a js framework known for clean and unobtrusive syntax.
Is this needed now that we have web components templating?
I personally really like old school service class. I use async actions for side effect and it just makes more sense to me rather then "hiding" side effects in middlewares. Of course i say hiding but its not, its an absolutly fine way of organizing your side effects but as its new to most people i encounter it has the sad problem of just being too new. Bringing lots of cognitive loads and pressure. Use a service class and Async/Await for side actions functions. An action would be &gt; var result = await service.sevicecall(someparam); &gt; return {type:actionType,data:result} Its clean efficient, service definition are exported like this &gt; export function sevicecall(param){ &gt; return fetch(someUrl + param); &gt; } So you end up with 2 actions type, Async actions, and actions. Async actions waits for calls and actions goes straight in (toggles or non server actions). 
Nope, not going to do it. I checked several other articles on your site and they all feature stolen content.
This is what functions are for. Put the loop in a function and call it when needed. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
From my tests or wasn't much slower for updates and the initial render can be taken care of by the server anyway. I'll have to write some more tests though and bench mark this properly. If you give the library straight Dom instead of html it is faster than react and most of the tests on vdom benchmark though.
This appears to be based on the virtual-dom library (the library used by Cycle.js and Mercury), which implements it as a two-step algorithm (diff and patch). Newer libraries use a one-step algorithm that have smaller memory footprint and faster best case scenario handling. If you're interested in implementing vdom libraries, definitely look at Snabbdom, as it's the smallest implementation one around among the ones using the one-step algorithm. Personally, I consider it a litmus test for quality: I don't pay attention to any vdom implementations that aren't at least as good as it. [Mithril's implementation](https://github.com/lhorie/mithril.js/blob/rewrite/render/render.js) is also fairly small (also ~500 lines), but it supports a lot more interesting features (e.g. components, fragments, HTML strings, DOM recycling), it handles a bunch of edge cases (form elements in particular are full of them) and it has hundreds of tests.
It will be ridiculously slower on updates if you test it on real pages. And I should have been said that it will be slow for any kind of rendering in IE/Edge, like creating a new subtree (usecase with switching pages), not just initial rendering :) I wrote vdom benchmark, vdom benchmark is broken, and I've told this many times, DOM ops will be significantly slower in real application.
https://github.com/DylanPiercey/set-dom/blob/33199b94ea7b104d39329138c2bef9a68bb21775/lib/index.js#L145 With code like this it will be hard to beat react diff performance :)
Hey. Are the slides available as well? Cheers.
There was actually a proposal for a reworked middleware signature a couple weeks ago (offered up by Dan Abramov himself), but after discussion the conclusion was that there wasn't enough justification to change things: https://github.com/reactjs/redux/issues/1744 
You don't need javascript for that... but you _do_ need javascript for posts to /r/javascript.
Example?
It is so noted. :-) https://github.com/Jeff-Mott-OR/xmultiple/commit/ccb37c2ced8eaba9a029c4aed181e00c271f189b In the future I think I'd prefer to throw an exception when there's an ambiguous call, but that might incur a runtime cost on every property access. I'll experiment and see how it works out.
This is just a paid advertisement for a Javascript obfuscation tool.
Check this video out: https://www.youtube.com/watch?v=pB0WvcxTbCA Watch that and pick one that looks like something fun to learn.
Yeah, I think it might be due to those browsers not supporting ES6 class declarations? If someone wanted to target those browsers I think they'd want to run the cards.js JavaScript through Babel [on the convert-to-ES5 setting].
[Here you go!](https://docs.google.com/presentation/d/1YoMoQwik6iDEoi4U7o81SNZSzILMUQNvCx3he-QT8H8/edit?pref=2&amp;pli=1#slide=id.gcb9a0b074_1_0)
I posted about this several times in this subreddit using Web Component spec with diffHTML and it never caught on. I get the feeling very few devs care about web components. The specs are changing so fast too that it's probably not even worth thinking about them until vendors make the spec dust settle.
I think all browser vendors agreed on on V1 standards already :-) 
Try React + MobX, it is quite different from the Flux approaches
Thanks for all the replies... there are some really good ideas here. I'm going to dig in!
I am actually building a very similar app at the moment and I think this is the perfect use case for [AWS Lambda](https://aws.amazon.com/lambda/) or [Azure Functions](https://azure.microsoft.com/en-us/services/functions/). Have your Heroku app call a lambda function which will handle all of the screenshot generation with Phantomjs.
Wouldn't you need it for logging though?
 var xmultiple = require('xmultiple') let count = 0 const foo = { get count() { return count }, } const bar = xmultiple(foo) count += 1 console.assert(foo.count === bar.count, 'Counts are the same') // pass! Nice. :-)
Well, no. You don't have access to console logs in production, where your users end users will be. And I'd strongly advise against ever encouraging an end user to open up their browser console. That can only end in tears. You should do all of your logging on the server. Even JS, you should be sending any information that you need with an AJAX call.
I made a webservice to track the ELO ranking of the foosball players at work. There's no frontend but there is a simple express web api and some mongo integration. It's simple, it's working and we use it everyday at work: https://github.com/jakobmulvad/foosball-rankings
Gotcha. Thanks for explaining.
That's a pretty rad repo actually. In this case though I was looking for something a bit more - due to lack of a better word - "economically relevant". You know, such as php people will shout "facebook" when you ask them who uses it.
It's one of those things that everyone says not to do but plenty of libraries and big websites do it anyways. There are 'safe' ways to do it, a google search turns up lots of answers. I find libraries that use console incredibly annoying because I don't want their output cluttering my debug while working in dev.
If you have a look in their website (they offer a free trial) you will see it isn't a traditional obfuscation tool. 
Can you post some HTML markup? Without it there's not much I can help with.
The term you're looking for is "[wysiwyg editor](https://www.google.com/?ion=1&amp;espv=2#q=wysiwyg+editor)".
Correct, and for those confused: **wysiwyg** = **w**hat **y**ou **s**ee **i**s **w**hat **y**ou **g**et
Warning: AWS Lambda is amazingly slow. I have an ImageMagick job that runs through Node. On my dev machine, it takes about 8 seconds (high resolution compositing job), on a medium EC2 instance it takes about 30 seconds, and on Lambda it takes 80+ seconds and maxes out the memory. The specs of the containers for Lambda are very slow compared to running it on a standard instance. I'm okay with this because it saves me money and I don't need the result quickly, but just putting out there for consideration.
How is this different from faker (edit: faker.js)?
There are no frameworks that do that. But you could build it with HTML5 and Javascript 
That number is larger than what is supported by JavaScript so its not going to work as expected. You can read some more about this behavior here: http://www.2ality.com/2012/07/large-integers.html
I just went through a project like this where we needed to support text editing/formatting inline, adding/replacing images and background images, adding embedded videos, and adding and modifying links. We did not add support for positioning and more advanced CSS features, but could easily be added at this point. We used the following pretty heavily which you should be familiar with: * window.postMessage: to communicate between your app and the page being edited in an iframe * contenteditable: yes, it can be the worst, but it's an old and proven technology for the most part. Here's a cool talk from one of the React devs which highlights some of the fun things you might run into: https://www.youtube.com/watch?v=feUYwoLhE_4 * Selection and Range APIs - these will come in super handy when formatting text and inserting spans, and you will have some fun when you have overlapping styles and keeping the resulting code clean Also, be aware of the current changes going on with browser security and loading mixed content. If your app is secure which it should be and you are loading insecure content in the page within an iframe being edited it will be completely blocked in Safari, Chrome used to give you an option to opt-in via a gray shield in the address bar but that is about to go away and actually did briefly before enough WYSIWYG type apps complained and they brought it back in limited cases, and Firefox is moving in the same direction. Think about proxy solutions to load that site securely and even if you do that there will still be CORS issues with some third-party resources like web fonts where that site owner, hopefully a client or user of your app, will have to white-list your app's domain. Good luck! 
That'd be great if true, although my enthusiasm is pretty low for them now.
I have no doubts big brands are using features from the Web Components specification, as I use them at one. Do I think they are going to displace the usage of React here? Hell no. There just isn't enough benefit. HTML Imports literally suck, and my prediction is that they aren't going to be used by anyone over the ES modules/loader. The Shadow DOM is very useful at times, but isn't necessary for every use case or component, you can use it piecemeal. I'm interested in how companies other than Google are using Web Components, for instance: - Are they internal apps that no paying user would ever see? - Are they experiments in an A/B test? - What features from Web Components are used? - Are their shims production ready? I can say that at Netflix there is some mild interest in Web Components, but overall it seems everyone is pro-React or anything React-like.
Awesome, I will look into it! Thanks for the help
ckeditor has a great plugin architecture. http://ckeditor.com/ We're using it to create a document assembly system for legal docs. 
It's so close to real I can taste it...
There is a draft spec, but it's still not on a standards *track* despite interest from both Ecma and the W3C: https://github.com/DeveloperToolsWG/console-object/blob/master/api.md
It was working better for me earlier. I think they're just getting bogged down with all the first day attention.
Sorry, faker.js, the library he references in his readme. I wasn't clear.
What would you use as an alternative to insertBefore?
Thanks mate! Glad you like it! 
The short version is that ideally you want to be able to express your views very simply. You don't want to express changes, you want to express the entire state. That way you only need a single `render()` function that says, "here's how my view looks". You don't need to worry about how to change the existing DOM to look like that, you just say what you want it to look like. With your example, you can't do this, because you'd either be recreating the real DOM every time (which is slow), or you have to create manual update functions that do some kind of diffing and only update what's needed. A virtual DOM library takes care of that diffing and patching process for you, so that you can just give a single consistent view of how you'd like your data to be rendered, and the library takes care of turning that into actual DOM, and performing updates. In many cases it is going to be faster than the manual approach, because you don't need to traverse the real DOM (slow) to make updates, and it's going to be easier because you don't need to write all of those update functions yourself.
&gt; It's already been solved many times by many popular libraries. That's a bad sign. I don't want "solved many times"; I want "solved once and used everywhere".
Doesn't do anything
Good presentation! the cat search is pretty much the same example I've seen several times already but I like how you started from scratch first.
It is a live collection that uses cached array internally, each time you insert/remove/reposition child in the parent it will be invalidated and then recreated. https://chromium.googlesource.com/chromium/blink/+/master/Source/core/dom/LiveNodeList.h
DRY? 😏 
[This blog post](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) does a really good job explaining why the virtual dom approach makes sense.
So similar to what .map does just more concise? I honestly like it.
meh, they break the mobile site often, and apparently would occasionally break the app to see how frequently you came back to see if it was working. I don't think they care about something breaking
If it was up on GitHub and you were open to collaboration, I am sure there would be people interested in help with that. I, for one, would be happy to look at developing some unit tests and documentation.
Thanks!
The most popular text editors are sublime and atom. To run your code outside of the browser download node. Once you do that you can run your code in command prompt or terminal (for mac and linux).
It is ok if you just read from childNodes, like in [this](https://github.com/DylanPiercey/set-dom/blob/master/lib/index.js#L167) case but when you start updating children, you are writing and reading: writes: - https://github.com/DylanPiercey/set-dom/blob/master/lib/index.js#L150 - https://github.com/DylanPiercey/set-dom/blob/master/lib/index.js#L147 reads: - https://github.com/DylanPiercey/set-dom/blob/master/lib/index.js#L145
I like this very much.
Sorry for the downtime, we got a little overwhelmed!
Just out of curiosity, what do you need to work with such big numbers for? Other languages, in particular Python, handle large integers more simply. If you're just banging out a few quick calculations and not as part of some larger program, it might be easier to use that.
I would keep the data separate from the events, makes it easier to reason about the data and also easier to work with data persistence. I think you might need something like [RxJS](https://github.com/Reactive-Extensions/RxJS) or [Mobx]( https://github.com/mobxjs/mobx) if you are using React.
I'm just usung jquery and Javascript for this. Is there any best practice to store data without using those frameworks? 
Ha! I was just telling someone about jsfiddle today and I even explained that it is just for HTML/CSS/js and you can't use it for server-side stuff but that would be cool if you could. Get out of my head Joel!
You're right, eslint / various other tools like deepfreeze or seamless-immutable help tremendouly with avoiding mutations, but for me at least the pain point is more about creating new derived immutable objects.
Coffeescript isn't very hard to run locally. It is compiled using coffeescript itself. Keep trying. 
Looks cool, but the misspellings / text speak in the readme make it seem unprofessional, like a side project that will be soon abandoned. 
Its more like arr[].a -&gt; [ [{b:10}, {b:15}], [{b:20}, {b:25}], [{b:30}, {b:35}] ] arr[].a[1] -&gt; [{b:15}, {b:25}, {b:35}] Because you access the second ([1]) element in every a that you find.
thanks for asking... my idea is that each property accessed after [] applies to each of the inner objects targeted by the map accessor. `arr[].a -&gt; [ [{b:10}, {b:15}], [{b:20}, {b:25}], [{b:30}, {b:35}] ]` `arr[].a[1] -&gt; [ {b:15}, {b:25}, {b:35} ]` `arr[].a[1].b -&gt; [15, 25, 35]` if you wanted `[{b:20}, {b:25}]` you would simply access `arr[1].a`. if you look at it as a multidimensional array, the map accessor would let you access 'columns' within it by getting `[1]` within each item in the collection.
Ah, of course. The problem with the forest and the trees. Thanks for the clarification.
I don't really think we need to introduce new syntax for something that can be easily accomplished using smart getters, map, and function composition.
In the first case you're asking it to match a non-digit followed by either three or four 'a's. 'aaaa' matches, because 'a' is a non-digit, and it's followed by three 'a's. The 7 is completely irrelevant and is not part of the match. In the second example you're asking it to match a non-letter followed by three or four 'a's. There's no way that can match. There are only a few potential matches: 'maaa', 'maaaa', or 'aaaa', and none of them fit the requirement that the first character is a non-letter. I think what you're missing is that in the first example, `a{3,4}` does not match four 'a's, despite there being four 'a's in the string. One of those 'a's is not part of that element, only three are matched. 
One of the problems with Javascript is that it allows / encourages you to place all your actions, your events, your logic and your data in the one place, which leads to large files and spaghetti code in even moderately sized sites. The various frameworks set out to solve this problem, though you can do it yourself if you are disciplined. One way is to create various objects. So in your case you could create a single object or a small group of objects for your data . You could also create objects to hold your action and logic functions, though this could also be part of the main Jquery routine or even be in the data objects if the actions relate directly to the data. This is the classical Object Oriented approach to data management, which works quite well in Javascript. Currently Javascript does not have classes but it does have objects. This approach required discipline on your part, since Javascript (unlike Java) does not provide you with any type checking. Another solution is using modules, though this is hard unless you are writing in ES6/ ES2015 and using Babel / browserify to precompile your code. Another solution is to take the functional approach, in this you try to have as much of your logic/events/actions in small single purpose functions as possible. It would be better if these function were pure (no side effects). This is hard in Jquery but possible in pure Javascript. In the functional approach you also try to have a single source of truth for your data, again a single object is usually best. Any time that data needs to be modified the data is passed to the function which creates and returns a new version of the data. In this approach it is often best to use immutable data. A further solution might be to move all your data manipulation to the server and leave the client side as simply a view layer. In this solution Jquery would need to call ajax routines to provide the server with the new information and receive the new display information. However this simply moves the problem to the server language, which may or may not have better tools than Javascript. Most javascript developers are now working within frameworks because it helps to solve the problems that you are now facing. I have not used Jquery now for over 3 years since I started using Angular, and now using React for the past 2 years. It did take a while to make the transition, to learn the tools that are needed (webpack, gulp, grunt, babel, browserify etc), but my code now is clean and easy to reason about. There is nothing wrong with Jquery, it is an excellent solution for the problem that it was designed to solve, making Javascript as easy to use as CSS for website. For small scale use on websites it is an excellent tool. However for web applications and single page applications the newer frameworks (Angular, React/Redux, Meteor, Ember, Backbone etc) provide much better methods for handling and reasoning about data. 
OK read, seems like a click bait inspired headline though 
What exactly are you trying to do? JSON data basically are JavaScript objects/arrays. You can just save it to variables and work with them. Why do you want to write it to a file?
What do you mean by a dataframe? If you use JQuery you can specify the return data will be JSON formatted and JQ will convert the response into a JS object for you which you can then manipulate. If you are not using JQ then use JSON.parse() to convert a JSON string to an object. Promises are used to manage program and data flow when performing asynchronous actions, they are not a solution to achieve a specific outcome.
There's some discussion in the repo's issues. I'm not sure if this was ever raised on esdiscuss as well, but, if so, there may be some ideas more there as well.
A little E4X-ish
yes you are right they will close, I was talking about deploying parse-server, they open-sourced the platform. https://github.com/ParsePlatform/parse-server
This is the exact same comment you left in /r/webdev. How much are they paying you?
Yeah ok. Netflix is the only thing that comes to mind then. They have been using node for a while now, although they use react for the frontend not angular. http://techblog.netflix.com/2014/11/nodejs-in-flames.html http://techblog.netflix.com/2015/01/netflix-likes-react.html
That's because i'm getting it with asynchronous requests. 
You still haven't explained what your dataframe is. I don't really understand what df$V1 is sorry. Depending on the structure for your 'dataframe' the df object will probably contain arrays, you can then manipulate those arrays into a data structure your graphing library will understand. I suggest using http://www.chartjs.org Take a look at their examples and figure out how to convert your incoming data to their required structure. I also suggest looking at the Math JS library, eg. Math.max() Additionally some reading on two dimensional arrays might be useful: http://www.javascriptkit.com/javatutors/twoarray1.shtml 
I would just integrate your as a word press theme . It's quite easy to get started. Using the google doc option you can create a doc save the text you need then press file publish and use the embed code which will give you an iframe link. Then you would put that iframe in your page. Hope this helps
I like the idea, I just wonder how it fares in practice (as in, how does it insert itself in the prototyping/dev process).
If you're looking for an excuse to build something on it - there's a contest: https://hyperdev.com/blog/developer-contest-get-back-nature/
https://github.com/nathanuphoff/Reveal-JS There you go, I’ve added some utilities that were required and started on a readme. I’m very much open to collaboration so feel free (GitHub *is* somewhat new to me, so bear with me). Thanks!
[✔︎ GitHub](https://github.com/nathanuphoff/Reveal-JS) 
I just want to say you did a good job on the port!
My head hurts.
&gt; If you've already got the data being extracted in one JS file there is no need to write that data into a file. Keep it in memory and render your chart without saving a file. Yes, but how can i keep it and display as chart on index.html? 
¿Que?
What?!? Type louder! I can't hear you.
Might want to be a little bit more specific.
Thank you! Science ought to be shared :)
Indeed. I had started my Masters in 1996 when this book came out and a couple of weeks ago I was thinking of those simulations. My whole Masters thesis was done in VB and I wouldn't dream at the time of the resources available today. 
my js has requires node modules. &gt;Then you do your asynchronous request(s) and save it to a variable. sure, but i can handle my data only in 'then' blocks, am i right?
Are we speaking of serverside JavaScript? You have of course serve the data to the client to use it clientside. About the second question: No of course not. You define the variable, then do the requests and save it to that variable. Any functions working with that variable should of course only be called iafter the requests have finished, but the variable will be acessible from everywhere in its scope: http://www.w3schools.com/js/js_scope.asp 
Egg on my face. You're right. I knew about this trick before, but I haven't used it in a while so it slipped my mind. But you're right, this achieves the same thing more simply.
Hi /u/gaurav3222, this site is now banned due to plagiarism. Here's the exact same article from 6 (six!) years ago: http://www.htmlgoodies.com/beyond/article.php/3893911/Web-based-Mobile-Apps-of-the-Future-Using-HTML-5-CSS-and-JavaScript.htm
window.€ = $; ¯\\_(ツ)_/¯
This sounds really cool. Thanks for putting it up on GitHub too! I don't fully understand how it works, though. How does one get sufficient data from the image to make a thumbnail without actually downloading the image itself first?
I'm 31, sorry too busy working with COBOL to read this.
I don't want to. I was just not sure if it's OK to just use the api database without an own db xD. Would I still take the Api Data If I have to talk to my Db anyway?
I'm sure you can write a function almost like how `Object.walk = (path, o)=&gt;path.split('.').reduce((o,k)=&gt;o[k], o)` allows you to do: ``` obj = { a: { b: 5 } }; Object.walk('a.b', obj); // 5 ```
Oh jesus hahaha rlly?
So I guess you could argue it is full-stack JavaScript, but not Angular and not MongoDB?
It does require the image to be downloaded first, or better yet, it should encode an image when/before it’s uploaded instead. You’re right to thinks that would be challenging (or quite impossible). The encoded files are rather small, but do require storage on the server side. Perhaps the readme could be more clear on that.
The Euro sign is harder to typing than a dollar sign. At least in the Netherlands everyone uses an US-Intl keyboard. Still, nice project though.
What? € can definitely be encoded in UTF-8 otherwise it wouldn't display here on Reddit... UTF-8/16/32 all cover the same range.
Should have gone with eQuerry for EU Querry. /s Also the example is poor why use a european country that doesn't use the euro ? /s
I doubt it, since he mentioned UTF-16.
This particular user is stealing content from everywhere (usually from some top google search result) and posts it in their "news aggregator" site (as the user claims it to be), omitting the original author and link - so basically *copyright infringement* and *theft of intellectual property*. Then they post "their" content to reddit. Please help shutting down that user by reporting them to the reddit admins in /r/spam. Regards from a fellow mod.
Basically you can take mod c as much as you want on intermediate results (as long as you're just doing addition or multiplication). So for instance: x ^ 3 % 10 = (x * x * x) % 10 = ((((x % 10) * x) % 10) * x) % 10) Since you keep taking mod 10 at each step, which reduces the range to 0-9, the intermediate values stay small. So the simplest general solution would be: function powmod(a, b, c) { var n = 1 for (var i = 0 ; i &lt; b ; ++i) n = (n * a) % c return n } There's a much more efficient way if b is large, but this might be enough.
Come back OP, we need answers.
&gt; But then again, that makes it quite problematic. On the one hand it changes the meaning depending on content and on the other how do I actually get the real a[1] array? Could you just slice the array, effectively mapping over `[arr[1]]`? Of course that would be ugly if you had to copy an array every time you wanted to map just a part of it.
First off, you have a lot of dropdowns (&lt;select&gt;), (more than 3) - which are you exactly referring to? Second, you don't need more than 1 $(document).ready(function(){}), you should read up a bit on jQuery &amp; just wrap your entire code with the referenced code (simplest/easiest way to handle it for a new coder). Regarding how you are adding listeners; let's take a look at how you added a listener in your code: // Shower Finishes var list = document.getElementById('FinishSelect'); var tag = document.getElementById('Finish'); list.onchange = function() { Finish.innerHTML = this.value; }; I searched through your sample code and no where do you actually define Finish. Likewise, for all your other listener events you do something similar. Additionally, you repeatedly define duplicate variables in your scope - this is no bueno ;). Here's a fiddle showing you how to add a group of listeners (I left it simple, but it could be further optimized for performance): https://jsfiddle.net/ts00ab70/
Wow the remain campaign have stepped up their propaganda. 
Thank you for all of this and going above and beyond. AS YOU CAN SEE, I know jack squat about Java Script and JQuery. I'm honestly trying to make something for my companies site and since I made the website the powers that be thought I could do this too. I mean, wordpress and themes with some HTML/CSS tweaks is really nothing compared to this. I have this due by Friday. I'll sort through all that you wrote and try to learn/understand it. Thank you again for going above and beyond. 
What would you suggest If I would have to call the api 5 times?
Obfuscate your way to success!
UTF-8 can represent every Unicode code point.
No worries and we all gotta start somewhere! I also gave you code that is 100% native JS by the way (the ready function is a simple version of jQuery's ready method). The main thing to grab from my sample is the addEventListener method; this can be applied on any single element and in your case you can use something like document.getElementById('someID').addEventListener... However, if you want to use jQuery (which is a bit slow, but fine if you're using it in small apps), then you can just do this: $('someCSSselector').on('change', function() { console.log($(this).val()); }); As a new coder, I would also recommend using console.log() often and hitting F12 (in Chrome or just opening whatever browser's you're in console - google it) and then you can use that output to debug your code, etc. Also, sublime text editor is great for a free syntax editor.
Mine is in French: [jacquerie](https://github.com/Canop/jacquerie) *just in case: don't miss the warning!*
Wouldn't let me use `array.reduce()` to get the sum of array values. Feels bad man.
yeah I think its a bug in that example. You can get to the array via `arr.array` but I think that's what was meant to be passed into the function (`arr.array` rather than `arr`).
**D**on't **R**epeat **Y**ourself
Having problem getting my array to alert out.
I bet a significant amount of that RAM is being eaten by your _"desktop application"_. Why didn't you write that in C++ and QT? The result will be cross platform too, but less resource intensive. You could customize it as much as you want to have the same look and feel, and it will be fast and friendly with your battery. If I were concerned by the usage percentage of the RAM and/or CPU in my computer the first thing I would kill is every web based application.
&gt; €('#greatBritain') Shouldn't it be £('#greatBritain')?
Would you keep your array? And how would you implement this?In script or some new function? 
You're saying those two large numbers are a and b? If so it's still possible, but yeah the exact strategy I had won't work. Also if you need the last digit, why are you taking it mod 4 and not mod 10? (I think I know the answer but I want to be sure.)
Babel, and Universal Module Definition/ http://babeljs.io/docs/plugins/transform-es2015-modules-umd/
Great article DeathMood, I feel the Javascript community needs more people like you. There are so many frameworks, each requiring time and practice to learn how to use their particular abstractions that will be "out of date" in a years time. Time I have spent learning how to do something I could do in Vanilla JS, just to conform to a framework is a waste of time. For example I have to learn Angular 1, time I could be spending learning something new like Scala and Akka, but NO! I need to learn how Angular well enough to properly hack it to do something it was not designed to do. Sorry for the rant, and thumbs up on the article. 
Thanks for catching this. We've fixed it.
For a production implementation that's not much larger than this, check out [snabbdom's core](https://github.com/paldepind/snabbdom/blob/master/snabbdom.js).
Yup, those two numbers are a and b. My strategy right now is based off this thread: http://math.stackexchange.com/questions/368973/finding-the-last-digit-in-a-large-exponent So I'm doing b mod 4 in order to see where I'm at in that cycle, based on whatever the last digit of a is. If I can get the correct remainder, I should be able to find the number in the cycle, which should = the last digit (unless I've gone wrong somewhere...) 
Thanks, yeah it's pretty obvious. Unfortunately, he looks just smart enough to avoid reddit's spammer detection.
JSON is just.. Javascript Object Notation. A format for passing data around. You'll want to JSON.parse(yourJson) and do things with the return value
Okay, right. So this won't work for general moduli, but since you know c = 10, then: a ^ b % c = (a % 10) ^ (b % 4) % 10 by Euler's Theorem, since the totient of 10 is 4. So you just need to take a % 10 and b % 4. If you have it in string form, you can just take the last digit of a to get a % 10, and take the the last two digits of b, since 100 is divisible by 4. So in this case: ...723 ^ ...651 % 10 = 3 ^ (51 % 4) % 10 = 3 ^ 3 % 10 = 27 % 10 = 7 Again, this is not a very generalizable solution (which is why nobody suggested it in response to your OP). If they wanted you to take it mod 11, it would be a lot more work. But in this case, you can just take the last 1 and 2 digits of a and b, respectively.
Awesome article, I was just tinkering about this. I posted a question elsewhere but it seems more relevant here: &gt; Perhaps a stupid question, but why is the (virtual) DOM diffed in view libraries instead of a data object that belongs to (and render/populate) a component? &gt; It seems to me comparing an object is a order of magnitude faster than comparing a DOM tree. And with events, whether its a request or user action, I’d say its obvious if and when data is manipulated. Note I don't mean some abstraction of the DOM when I say data, but the actual content that is used to create the markup.
I'll consider using this if Trump is elected.
Still feel like we're talking past each other a bit here. _Some_ portion of your UI logic is going to have to translate that data into the corresponding UI output, whether it be HTML elements or Android Views or iOS NSWhateverThingsTheyUse. With a virtual DOM, that's a two step process: _your_ component is responsible for doing the "data -&gt; desired UI structure" translation, and then the VDOM layer is responsible for translating that into the actual UI pieces. If you've got `{likes : 42}`, React has no idea what a "like" is, what it means to have 42 of them, or what it should do with that information. Your code has to tell it what that means in terms of something to actually draw.
You still can't reference it as a global variable if you do that, only as a property of window. Any valid string can be a property name, but a variable has to begin with a letter (which includes "letter numbers" like Ⅶ - yes, that's a single character), underscore or dollar sign. The example on github: &gt; €('#greatBritain') Will never work. You'd have to do: &gt; window['€']('#greatBritain')
The main advantage is that if your diff happens at the DOM level, you're guaranteed that the DOM winds up in the state you expect even if someone has modified it out from underneath you in a way you do not expect. The other main advantage is that it imposes very little structure on the layers above it while doing it at the model level would require writing against an interface or extending some prototype. There are a number of approaches to change detection at the model level. I usually see it done in JS at the model level using key-value observation (e.g. knockout, mobx, ember) or a full-on reactive computing chain (e.g. rx, most). Using KVO systems, you do generally get faster updates than with dom diffing approaches and these systems will generally beat vdom only implementations in microbenchmarks. Where the vdom approach comes out ahead is that you can defer performing diffs until the actual DOM update needs to happen (many KVO systems can also defer updates) and the performance of the DOM diff is based on the size of the vdom and not the size of the input data. For cases where you're displaying a few dozen DOM nodes as a view into a large amount of data, this can be a significant performance and memory win over naïvely diffing two copies of the input. I like the approach because I have confidence that even if my app isn't the fastest, I know I can get it to be fast enough simply by reducing the size of my vdom. The dom diffing approach isn't incompatible with using observables. As an example mobx, angular 2, and Ember's glimmer 2 use both and only generate vdom nodes based on what the KVO part tells them could have changed. On the other hand, if you read stuff about React perf, you'll run into immutable datastructures fairly quickly. What these give you is a very fast way to determine the parts of a data structure that didn't update (they're === the previous value) and simply skip generating the matching vdom nodes.
Yet another recommending to use shell scripts, because that's easier and more portable/maintainable than grunt/gulp right?
Why not use makefiles?
I absolutely agree that semi-colons should be omissible in JavaScript, but they are not. This notion that they are optional is stupid. Having to implement hack-ish solutions to prevent errors being thrown is awful practice. The only other significant change this style proposes is adding spaces before the brackets in function definitions, which I intensely dislike. 
thank you, I thought I was going nuts.
I think this app needs to learn JS first.... expected: 2 | actual: 2 | status: fail
 $("hrz_counter") Should be $("#hrz_counter") Also, you're missing a closing parenthesis in your code you copied over, but that could have just been a copy/paste mistake. Finally, when submitting code on reddit, make sure to indent it with four spaces so that it doesn't lose its formatting. I dunno if this is a RES-only feature, but you can highlight your code and press the "&lt;&gt;" button on the post toolbar to indent things properly. Or use a service such as http://gist.github.com Nobody wants to read code formatted in the way that you posted.
Technically what it can't be is an identifier.
There are other ways to display out-of-range characters, although I was mistaken about the range that UTF-8 is able to cover.
Thanks for the write up, but more importantly, thanks to you and your team for open-sourcing these libraries!
All we need is a babel transformation for it and we'll be good to go
As a functional JS programmer, the use of array mutations rubbed me wrong. While there is a place for them, they're mostly carryovers from an older time in JS development, and I would generally argue against their use if possible.
A character in UTF-8 can be anywhere between one and four bytes (it was up to 6 bytes for a while but they changed the specification so UTF-8 matched the limitations of UTF-16, which is limited to 4). You're correct that UTF-8's first 128 characters do match ASCII though.
How about the Canadian JEhQuery? It uses $ but it's in CAD and is about 30% less performant.
Still better than working with legacy poorly written code 
Scratching my head on "Multiply with precision" in the "Numbers in Javascript" section. I finally solved it, but I think my solution only works on the specific cases that are tested. Is there some trick to precise multiplication of floating points that I'm not aware of?
Standards are born from experimental functionality. Would you like this if it were standard?
No idea; I would be asking for the latter: to look into the grunt tasks already in place and probably for you to get an idea on how to create new ones if you don't know how to do that already.
Wanted to say thanks for all of the content you put out. I randomly came across your 'Hardcore Functional Programming in JavaScript' course on pluralsight and proceeded to have my mind melted in a good way. Long story short it encouraged me to go down the rabbit hole of functional programming. The various learning material that you have put out continues to play a large part in me busting through the learning curve of a lot of things.
No, because it can't work with the static nature of ES modules. Adding as non-standard behavior will severely fragment the tooling and the users.
The postMessage library interests me. I'm the developer of [PM.js](https://github.com/ajbogh/PM.js/tree/master), which also wraps the postMessage system in an easy-to-implement API. I like the use of .on and .send, I might need to wrap those into my codebase. I've build PM.js to work with IE8+, I see they've gotten post-robot to work with IE9, which is a fun task. The thing that troubles me is the passing of functions. Since IE has the tendency to only pass strings, I assume the function is getting stringified and then exec'd on the other side. This can lead to XSS if you're not careful. However, if the idea is that the function is executed on the calling-side before sending the payload and the value of the function is sent, then it's fine.
Will try this out within the next hour, thanks for being the blessed soul to catch that and help me out. Also, I pasted in the code and didn't know how to format it sorry :O. I'll let you know if adding those works!
I see, great how I've ‘come up with’ a methods that has been battle tested for years. Figures. I didn't realise the data set would be (could be) larger than the resulting DOM, but with filtering it makes sense. Thanks for the response.
Neat that should also be on /r/proceduralgeneration 
Have a look on Qml and qt quick. It has its own DSL however you can program it in Js and will get native rendering on all the platforms. 
Thanks much)) it is only the first article in series)) Next is about setting/diffing DOM attributes (props). And by the end you'll know how to build React-like lib with stateless components and state management via Redux :))
I’ve never used redux, but ‘state’ basically means data? What I meant was this: https://www.reddit.com/r/javascript/comments/4m1jkd/how_to_write_your_own_virtual_dom/d3sug9h You seem to be right on the money.
It's probably both. Let's say he asks you one day to write a Grunt task that generates a file containing the current version of the project. You would need to know: 1) how to write such a task 2) where to place it, considering the current project's structure 3) how to run that task locally / in a CI environment via the Grunt CLI
I think it is viable alternative for small projects. I would not use it for anything big and long lasting. There is also react-lite if you haven't heard about it. It is 2 to 3 times faster than react.
Bummer, thanks for follow up, never know when might come in handy.
and then what? you conditionally import something, which most likely means you conditionally have to do something in your code? That's probably going to turn into spaghetti code? Isn't this 'feature toggle' something you'd do server side &amp; conditionally load the files there?
@madole, can you share the code that's failing for you?
@mdboop, I'm one of the authors here. Yes it's definitely tongue in cheek. Suggest a better title and we'll gladly replace it :).
lmao
your point exactly? i said that filter parameters are part of "data" (of viewmodel) because they are required to determine DOM tree. I can not see any argument against it. 
Invalid video id
Upvote for react-lite.
Why stick to currencies? :)
What's the difference with preact? Also does inferno has router library?
I am not a native English speaker, but I do not find it clearly negative at all. Standing for itself, a "consequence" is just something following from something else.
Cool! BTW, I think it's kit and caboodle.
And UTF-16 is the worst of all possible versions. It's both space inefficient and doesn't guaranteed a fixed length encoding per code point. 
If it's not utilizing `this` then it's just a function to me, otherwise it's a method.
Methods are called from another object. Functions are independent and can be called alone. // a method of myObj myObj.myMethod(); // a function myFunc myFunc(); Methods don't have to be associated with classes (constructor definitions). They can be part of object literals as well. var foo = { barMethod: function () { // ... } }; Where this line blurs is when you have functions in namespaces. There is no distinct namespace construct in JavaScript. Instead, objects are used. var com = { example: { proj: { utilFunc: function () { // ... } } } }; // calling utilFunc com.example.proj.utilFunc(); // or place in a more easily accessible var utilFunc = com.example.proj.utilFunc; utilFunc(); You don't see namespaces like this so much any more. What you see more now is the use of modules, but they can have a similar behavior with exports needing to be referenced from another object. // just one of different variations of module use var myUtils = require('./utils.js'); myUtils.utilFunc(); Here, utils would have multiple definitions defined within it, each of which would be accessible from the container object returned from `require`. However, each one of those definitions do not depend on the state of that container. They work independently of it so aren't necessarily methods, just functions defined in an object. Something similar, is the `console` object. It contains functions for logging output into the clients console. Unlike namespace containers, though, the functions defined in `console` do, in fact, depend on the state of the `console` object itself. So these functions are, in fact, methods. // log to the console console.log('hello'); // requires to be called from console var log = console.log; log('world'); // Error Now look at something like the `Math` object. `Math` contains functions related to mathematical operations. Each function in this object does not depend on the state of `Math` to work. Additionally, despite the capitalization, `Math` isn't a constructor, so you can't create instances from it. It is a static object definition (class?) full of static methods (functions?). // call a Math function Math.cos(1); // works fine when called off the math object var cos = Math.cos; cos(1); // OK `Math` itself is effectively just a namespace. It serves no purpose other than to be a container that encapsulates other, independently functioning definitions. However, we still consider the functions in `Math` to be methods. So up to a point, it is really a matter of semantics. But other times it can be clear depending on how a function is used, whether it is intended to be called from another object, or if it is meant to work on its own. It's not something I think too many people will ding you on if you use it incorrectly, though. Now if you want to talk about whether or not you should use semicolons... _runs away_
I'll try to explain this based on C# knowledge and terminology (as I also do a lot of C#). First of all, I will not touch on the question of weather or not js has classes. Cause the answer ranges from "yes" to "no" and all the "sort of... maybe?"'s in between. With regards to functions vs methods there is no difference. At least in my opinion (and some might argue differently). Let me explain why. In both C# and JS, functinos (methods in C#) takes a hidden/implicit 0th argument, generally referred to as `this`. The exception in C# is static methods, but let's just ignore that for now. To see this in action in js, try the following code: var fn = function() { return this.name; }; var a = {name: 'a'}; var b = {name: 'b'}; a.fn = fn; b.fn = fn; a.fn(); // returns 'a' b.fn(); // returns 'b' fn.call(a); // returns 'a' fn.call(b); // returns 'b' Here, I clearly defined a function, yet I use `this` inside of it, and I invoke it as if it was a "method". As you probably know, JS is a dynamic programming language, so we have little to no type information available to guess what the programmer intended, so as opposed to C# where you can know that `Foo` is a method (and thus requires an implicit `this` argument), in JS it's handled at the callsite. Basically, the following holds true: function fn(a) { return [this, a]; } // normal invocation fn(5) // returns [null, 5] (in strict mode) // method-like invocation var o = {fn: fn}; o.fn(5) // returns [o, 5] // call fn.call(a, b) // returns [a, b] // apply fn.apply(a, [b]) // returns [a, b] // bind var boundFn = fn.bind(a); boundFn(b); // returns [a, b] As you can see, `call` and `apply` allows you to explicitly set what will be treated as `this` inside the function. And `bind` allows you to "bind" a function to a `this`, meaning that whenever you invoke the resulting function, it will be invoked with whatever `this` you bound it to. So, takeaways: 1. `this` is not magic 2. `this` is just another function parameter. 3. You can pass in whatever you want as `this`. 4. When you do `a.b()`, `a` is automatically passed in as `this`. 5. Passing something custom to `this` requires you to use `bind`, `apply` or `call`. 6. JS has only functions. 7. "method" is generally just a label placed on functions that require a `this` to be passed in (implicitly or otherwise). 
&gt; I know there's no direct equivalent of classes (right?) They're just functions, really. Functions can expose functions and properties, which then makes them a "class". But not in the sense you're used to from a C# POV. Only ES6 makes an attempt, but even then it's just sugar for prototypal inheritance. &gt; but what actually defines the difference between a function containing objects and a method? A method is just a function. Semantics, what the other reply said. ### ES5: You have functions: function doSomething() { return true; } doSomething() // true var doSomething = function() { return true; } console.log(doSomething()) // true Also fun, named functions: var something = function doSomething() { // stuff } [Which means](http://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname) basically: var xyz = function abc(){ // xyz is visible here // abc is visible here } // xyz is visible here // abc is undefined here And you have "objects", defined by a function simply exposing properties and methods through itself: function doSomething(blah) { this.count = blah; this.what = function() { return this.count; } } var something = new doSomething(1); console.log(something.what()) // 1 There are no constructors, the "class" itself is one. You could read `arguments` and work with that the simulate different constructors. And then there are [prototypes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype): doSomething.prototype.add = function(howmany) { this.count += howmany; } something.add(2); console.log(something.what()) // 3 ### ES6: And then there's [ES6 classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes): class doSomething { constructor(blah) { this.count = blah; } what() { return this.count; } add(howmany = 0) { this.count += howmany; } } Which is basically sugar for ES5 prototypal inheritance. Only allows for 1 constructor, though. And you could use the [spread operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator) to iterate the `arguments`: constructor(...blah) { // blah is now an array of constructor arguments } And extending: class somethingElse extends doSomething { constructor { super(); } } And so forth.
Vuejs will be doing a mix of both - kind of - in the upcoming version 2.0 (which moves to a vdom implementation from using the actual DOM in 1.*): * Each component has a vdom (based on snabbdom) which it will diff similarly to the system outlined in the article. * But through Vue's reactivity system, each component automatically tracks what data is used in the template/vdom, and only does a diff when that data changes. * So instead of doing a full vdom diff on any change like React does (and having to optimize manually with `shouldComponentUpdate`), the diffs are driven by the changes in data. No change to relevant data? no diffing nessessary. I'm not good at explaining this stuff in english, I hope it makes some sense.
Cool game
Hi /u/jbs__, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
The most important thing is consistency, choose one and stick with it. My team uses single quotes for javascript, double for HTML/JSX. More discussion here: https://github.com/airbnb/javascript/issues/110 Also may be good to use an established style guide like AirBNB: https://github.com/airbnb/javascript
Most of the devs use single quotes everywhere. And yea, consistency. AirBNB, Google, Standard, XO, Node Style Guide, what you want. https://github.com/felixge/node-style-guide https://github.com/feross/standard https://github.com/sindresorhus/xo
As the top comment points out consistency is the most important thing. I use single bc I'm a lazy ass and shift quote for double is too many keystrokes for my simple little mind. :) But that's really only for js.
I'm pretty sure " is recommended by either Google or Mozilla, whereas ' is used for "nesting" strings. This is how I was taught, and I think it looks best.
It makes perfect sense, this looks to be nearly exactly what I meant, with undoubtably some smart sugar on top. Thanks
I think [the spec](https://tc39.github.io/ecma262/#sec-ecmascript-overview) has a good ELI5 description: A function that is associated with an object via a property is called a method. I would then clarify that "associated with an object via a property" is another way of saying "uses its `this` value in some interesting way". So `function foo() { }` is a function, but `function foo() { return this; }` is a method.
The leading slash (`/` at the start of your URLs) make them relative to the root of your site. Omit those to make them relative to the current file. Example: Your page is at `mysite.com/page/hello.html` `/js/script.js` = `mysite.com/js/script.js` `js/script.js` = `mysite.com/page/js/script.js` This isn't really a Javascript question by the way, but I hope this helps anyway. 👍🏻
Looks like a wetware problem rather than software, check the spelling of the folder name, the 'slide' part of the path is plural in your error message while it is singular in your snippet. 
&gt; it’s trivial to implement branches of logic via type coercion Maybe you meant "via type-checking"? &gt; used to *compliment* HTML The word is "complement"; it has no "i".
Surprised it was not mentioned yet but the [JSON](http://www.json.org) data format requires double quotes, so using single quotes allows you to embed JSON data in JavaScript with less character escaping.
I use `'` for property names and `"` for string literals. Tells me whether I'm looking at a value or a key. So I guess I'm consistently inconsistent. It derives from typography where commonly ‘notions’ are put in single quotes and literal citations are put in double quotes.
Interesting. I prefer " because on the [german keyboard layout](http://i.stack.imgur.com/K1nww.gif) you have to use shift for both - and I'm more comfortable to type " because I use both hands for it. Though I notice using ' when writing in English isn't that big of a deal, too. xD
I just use ``` ` ``` these days.
Same here. I also notice most popular libraries use single quotes. 
ECMA 7 doesn't really address many issues anymore, since it only has two nice to have changes. Most of what we previously considered to be ECMA7 has been pushed back. (in reference to the bullet point)
Sorry about that, was a typo on my part; "slides" is plural throughout the script as well as the local folder name.
Thanks! :)
I'll read into the recent state surrounding ES7 and any features that have been pushed back. Cheers!
You'll have a chuckle when you see the complete list of ES7. It's basically nothing. Which personally I'm fine with. Let ES6 catch up.
Wow, there are very few stage 3s thus far. I agree though, ES6 has been such a big jump that I'm not against a hiatus of further ES specs. Reminds of Peter-Paul Koch's article on how quickly the web is moving, and [argues for a moratorium](http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html).
Other way around then I guess :3
Hey, sorry for the delay ... been super busy past several days. [Here's a jsfiddle of the relevant pieces of code.](https://jsfiddle.net/droqgow8/) I can't use HTML/alt/ASCII codes or whatnot, because it's copying directly from one source into a textarea, after which it's summed with other fields and outputted into a larger textarea, which is then copied to another area.
Glad to have helped! 
Single for Scripts, Double for Markup
When you say meme-type, I imagine you mean mime-type? I've heard of those, and it's an interesting thought to look into since I don't know much about 'em. It's being copied from a terminal-like application that displays customer information pulled from a central database. However, even if I manually type a greater-than symbol directly into the place it's going to be pasted, the output still shows &amp; gt ;
That's a great question. For IE, I'm using .innerHTML because during testing at the very beginning of this project, I found that it wasn't working for .value for some reason. A friend recommended I use .innerHTML to rectify the issue. You can see the code in this [Fiddle](https://jsfiddle.net/droqgow8/).
Oh that is so useful when I have no browser to write my browser appl.. wait..
[Done.](https://jsfiddle.net/droqgow8/) :) 
Are you sure? I tried dropping preact-compat into our existing react project and was hitting a problem with componentDidMount that I assumed was the problem in 65. I'll take another look at it and submit a ticket to you guys if I find it's a different problem.
I don't really know what's going on in the load() function. You probably need to rewrite the load() function to where it just loads the next ten images, then delete: document.getElementById('images').innerHTML = "";
[Are you sure about that?](https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.2)
Yes, on the US keyboard ' has its own key on the home row near the enter key. " is slightly harder to type because it is shift+'. 
Did you write that function yourself? I would rewrite it in plain JavaScript without any jQuery so that you know what everything is doing. It should be easy to fix if you know what's going on. 
My team does the same, but the double quotes in JSX bother me. No need for it IMO, and JSX is still JS.
Everything should be local (js, css, html) for this test to be valid, otherwise you're just fighting some security settings in your browser that would prevent mixed content to be loaded. Can you confirm jQuery is not loaded from a CDN and what version you're using ? [edit]: your browser also yields *"HTTP "Content-Type" of "image/png" is not supported."* which is a typical message found with erroneous image async/ajax-loadig (do you use a lazy loading plugin?), and refusing to do HTTP when context is file:/// is also typical for most browsers. 
You should use ( . )( . )
Probably not because WebViews only run when they're open and the phone isn't sleeping. However, maybe a Cordova expert could find a way to do this? But I do know that the WebView is probably going to fall asleep. 
From a project management perspective your first solution would be a nightmare. Secondly, you don't have to traverse the DOM in your second solution (at least with a search or find option) - If you're using jQuery in the first place and you're structuring your HTML to where every delete button has some type of widget class associated with it; then why not just use .index() to remove the widget accordingly? e.g. $('.WidgetDelete').on('click', function() { $('.Widget:nth-of-type(' + ($(this).index('.WidgetDelete') + 1) + ')').remove(); });
I believe UTF-16 is more space efficient than UTF-8 for Chinese and Japanese as most characters are in the basic multilingual plane and can be encoded in 2 bytes, but often require 3 bytes in UTF-8.
Depends on your tooling. If you use an editor like VS Code, there's no added complexity. My typescript compiles to javascript on save.
That's a good point, so I think it is worth an example. The following are lines of JavaScript code that have JSON strings embedded. JSON.parse('[{"title": "Mary\'s \\"little\\" lamb", "in_stock": true, "num_available": 40, "author": "Dwayne \\"The Rock\\" Johnson\'s nephew"}]'); vs JSON.parse("[{\"title\": \"Mary's \\\"little\\\" lamb\", \"in_stock\": true, \"num_available\": 40, \"author\": \"Dwayne \\\"The Rock\\\" Johnson's nephew\"}]"); Neither is great. First you have to escape the title and author strings to make it valid JSON and then you have to escape the entire JSON string to embed it as a string literal in JavaScript. But for me, if I'm investigating JSON data I'm usually focused more on navigating the object keys and structure vs reading the content so I prefer having the keys be clearly readable.
TL;DR, but there I noticed there are a number of small syntax errors and style choices in the code samples that make it a little distracting, some of which are obvious with the code formatting. Also wanted to point out that constructor(_charName,...arr){ and constructor(charName,[gender,species,vocation] =["male","human","fighter"]){ Are not the same. The second expects 2 arguments, the second of which would be an array containing the values for the properties vs additional CSVs of the first example. A more appropriate version of the first using default parameters would be constructor(charName,gender="male",species="human",vocation="fighter"){
How often are you putting JSON as a string literal into text? That feels like a solution in search of a problem.
Grab a beautify plugin for your favorite IDE and it'll make things a lot easier following consistency. The beautifier plugin I use goes with single-quote.
[Google's JavaScript style guide uses single quotes] (https://google.github.io/styleguide/javascriptguide.xml#Strings) [Mozilla uses double quotes, unless it is more convenient to use single quotes] (https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#Literals) Mozilla's is kinda strange.. like most other people in here, I think consistency is more important. Having to constantly adjust how you read the string literals in your code is just error prone.
HTML, CSS and JS are in same folder with videos and images in subfolders of that folder, so shouldn't be an issue with files being local. jQuery is 1.7.2.min saved locally; double checked that I used it vs the CDN. Disabled all my extensions other than Firebug and Omnibar. No dice. Plugins installed: * OpenH264 * Primtime Content Decryption (adobe) * Shockwave Flash * ActiveTouch General Plugin Container * Adobe Acrobat * Coupons Inc. * Google Talk * Google Talk Video * Google Update * iTunes Application Detector * Java (currently disabled) * Microsoft Office * Photo Gallery * Silverlight * Surveillance (allows video playback from a CCTV system) * Unity Player (currently disabled) * VLC Web To my knowledge none of these should be interfering with loading the images.
That was an interesting read, do I understand correctly Angular dirty checks the entire data model, opposed to data bound to a component only? Because that would clarify how it's quite slow when an application grows.
In deployed code almost never. Using object literals in JavaScript is way easier var a = { title: 'Mary\'s "little" lamb', in_stock: true, num_available: 40, author: 'Dwayne "The Rock" Johnson\'s nephew' }; But in test code having JSON in string literals shows up a whole lot.
The lackadaisical approach to indentation and whitespace in the code examples is extremely distracting.
haha im thankful someone looked into that
I would also add that `` looks a lot more similar to '' than "", and people have confused the two before.
We do something similar. Basically, use one for code and the other for templates. Then, when you want to refactor an inline template to its own file, you can just cut and paste without modifying the source. OP, why not use string templates instead of strings? JS finally has interpolation and it's very convenient
Or JSON.stringify and spit the output to a file.
...provided there are no escaped quotes _inside_ any of those strings. Its not _hard_, but it won't take 5 seconds and still be right that way.
what are you basing this on?
what's the use case for embedding JSON data in JS? Wouldn't you just store it as an object or array?
+1 for the airbnb guide. I use it with eslint 
You could also use: var WidgetID = $(this).sibling(".WidgetID").text(); I guess I should've also mentioned, the thing I normally do is put an attribute "data-id" on the parent element, then you can just do this: var WidgetID = $(this).parent().data('id');
I've always avoided using custom attributes for some reason. I don't know why. Thanks for the tip!
wouldn't this be way nicer? alert(`&lt;b&gt;${o.name}&lt;/b&gt;`) edit: People, his example is using `let` already, cmon now
most popular libraries he's seen? 
Well, then I guess it's just a matter of laziness and keyboard layout. I stick with " ' ' " instead of ' " " '
@
I think it's also a good idea to follow the majority with things like this, and the majority seems to use single quotes (57%, to be exact). Source: http://sideeffect.kr/popularconvention/#javascript
My Atari 800XL had the double quote above 2.
Well yeah, style is style. By "no need for it" I'm saying I'd understand if it were a syntax requirement of JSX or something, but it's not. Most of our other style/linting rules favor concision -- e.g. we don't use semis -- but doublequotes means more keystrokes.
&gt; My typescript compiles to javascript on save. In your editor, in your environment. What about all of the other places it needs to be compiled?
Another vote for preact! I'm currently using it in a project in conjunction with preact-markup to re-use server side templates in dynamic web component on the client side. It's been working really well so far. I think one of the largest benefit of a smaller filesize is that it also implies a smaller codebase that's easier to reason through and has fewer vectors for error. 
Hi /u/ozoria1, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `xbsoftware.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [xbsoftware.com](/search?q=%28and+site%3A%27xbsoftware.com%27+author%3A%27ozoria1%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|8|80%
Basically since wrapping a string in ' and " are interchangeable ( for the most part ) in native javascript this is an interesting place where you can actually develop your own symbology ( preferably with your team as part of style guide ). For example, by deciding to use ' for all strings that stay inside of javascript and " for strings that are going to be rendered to the page your code is now easier to understand.
Bear in mind that while they are interchangeable in JS, they have different meanings and behaviours in other languages. PHP differentiates between `'` and `"`, Bash has `'`, `"` and `, etc. Might be obvious to some but I thought it worth pointing out.
Yeah, second level was too intensive for my computer as well, froze up.
No way their site has millions of lines of JS. 
But why? 
why not let o = {name: "First Last"}; alert('&lt;b id="oB" &gt;'+o['name']+'&lt;/b&gt;'); or let o = {name: "First Last"}; alert('&lt;b&gt;'+o.name+'&lt;/b&gt;');
I see your kung-fu is strong. I thank you for your alternative solution!
I'm going against the general opinion here: it doesn't matter the slightest, and even consistency doesn't matter at all. You don't notice the difference, and "mixed quotes" isn't something that introduces bugs or causes confusing. Please, don't waste your time finding if you should use `'` or `"`, just use whatever is easiest for you, or the thing that causes least complaints from your colleagues. There are way more important things to spend time on.
Objects in Javascript, Test 3 Says: &gt;Return a string of object's own properties in the following format &gt; [ 'foo: bar', 'baz: bim' ] But what it's actually expecting is an array of strings of the format `'foo: bar'`
Thanks. Will definitely give them a try.
I got the number from &gt; Millions of lines of JavaScript have been checked into source control at Airbnb over the past 8 years https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.7k3efhdu7 So maybe they don't literally have millions of lines right now, maybe they do, but they've added/removed/modified millions of lines throughout time. The point is, it's a massive JS project.
Your comment would be appropriate if the only thing I said was "they have a great looking site" and nothing else. The point is it's a massive project that's able to iterate quickly and keep working.
I'm the same way. Why use an extra keystroke if you don't have to? Work smarter, not harder!
PERFECT!! Just wanna let you know that I replaced innerHTML &amp; textContent with value, and everything works as intended on all the browsers I've tested now. I appreciate your assistance with this semi-weird project. :) I'll also try the modification to the clearForm function you suggested to see if that helps. Thanks for the bonus tip! ;)
I mean yes and no. The Broadway decoder was made by using Emscripten, then hand optimizing the resultant code to the Closure compiler, and it runs surprisingly well. I think Emscripten is a better place to start than reimplementing decoding in JS simply from a dev time saving perspective, even if you still have to do manual tweaking after. Up to you though.
My server doesn't.
Global variables, in general, make code difficult to reason about: "Is 'foo' defined globally? Where? Is it safe to modify? Who's using it?" If it's a small code-base and you're the only developer, go nuts. Do whatever you like. Personally, I wouldn't allow anything like that through a professional code review.
Oh my god... `Array.from`? How did I not know about this?! So excited.
double quote crew or die. single quotes are lame and some sort of hipster like fad thats been recent for months (like for almost a year or or two now). embrace your inner c-style syntax master and accept the double quote.
Depends on what you want to use it for. From a glance it looks like it is similar to React, but React has a far bigger community and backing from Facebook so it's not going to go anywhere fast. Lastly go on any job website and take a look at web developer listings, the majority will list React. 
Whenever i'm considering frameworks i like to do a google trends, try it for React and Preact/Preactjs... 
Yup, I use it with atom/sublimetext 
Not that I'm even in a remotely comparable situation, but I'm curious about this process. What was being used before react? How easy is it to rebuild into react? I've been writing a meteor app using blaze, but react looks really appealing and I want to learn it. I'm just a bit hesitant about going back and breaking everything in the process of react-ifying it.
Or you can use the polyfill. I'm just happy to know that it's spec compliant.
your pattern is off... as the javascript is written, what you need to do is make your ajax call return 10 new file names not the same 10 :D you can test this by opening the console and doing `loadall('misc')` 2x, it always returns the same 10 another option is refactoring so it calls the next ten: var current = 0 function loadall(folder){ $.ajax( '/gallery/'+folder+'/?n=' +current) // pseudo code, can also use the data option: data: { n: current } current += 10 }
Array.prototype.slice.call(myarraylikecollection) 
I was talking about jquery plugin for lazy loading or (the opposite) preloading images, because some of those may try to open a HTTP request. As for your browser plugins, the only way for sure to tell it's none of them interfering is running firefox in safe mode an observe the same error you had.
Very good point. That's exactly why we standardized on single quotes for JavaScript when working with PHP. Double quotes in PHP can do unwanted things, which is not a good idea when dealing with sensitive data, and anything you can do with single quotes and explicitly saying what you want. So we standardized on single quotes for PHP. PHP often has intermingled HTML, so we standardized on double quotes for HTML. This finally left JavaScript, which in theory is isolated into libraries away from everything, but in practice is sometimes intermingled into HTML, or vice versa. So we wanted JavaScript to be the opposite of HTML, so this left JavaScript as single quotes. It helped that the common standard for HTML is double quotes, and once we had a reason for standards with HTML and JS, we kept them them everywhere, not just when PHP was involved.
[HTML5 attribute quoting](http://www.w3.org/TR/2014/REC-html5-20141028/introduction.html#a-quick-introduction-to-html) says the same, btw.
I am not consistent with my quote use. Sometimes I just want to include apostrophes in my strings, and sometimes I want to include a double quote and I am too lazy to use the \\.
I usually start with ' ' but if the string wriggles its way out I use the stronger " ". J/K, it makes no difference. I use either one depending on where my fingers fall.
I don't think you lose anything in the backend by having conditional imports. For instance, in Python, it's common to have an import within a try/catch block and if the import fails, then load a fallback module. 
Ticket would be great, helps to have a bunch of real-world examples to test fixes.
&gt;account for this What do you mean? What can eslint do about that? Just like this guy, if I need to use apostrophes in a string, I usually switch to double quotes. Rest of the time I use single quotes.
do you still need help?
We are consistent because everyone tells us to be consistent... but yeah, this is probably the single least important rule, to the extent that even consistency doesn't matter. It's not like you're going to make mistakes, as long as you have syntax highlighting.
Okey let's go! First off all who cares about best practices when filesize is the goal? With that in mind on line 5 `==` is just fine, this is also true for most of the following if statements. Secondly I notice that that exact same if statement is begin used just after the following function, combining those should be no problem. In the same boat I see `window.onfontreadyTestReporter` and `process.env.NODE_ENV` being used quite often, instead consider storing them in temporary variables. Taking it further, consider storing whether it's test mode or not, saving quite a few comparisons. Also inlining the `reporter` object instead of having a function being being used just once would be a good idea. The `tests` object could be defined as a single number without any problem AFAIK, saving one character. Next up is inside the startupIframe, on line 54, 56, 65, 71, are all unnecesary brackets, since they are followed by a single expression. This is seen throughout the code actually. On line 165 through 173 there's a lot of duplicated. Here's one way that could be shortened. root.innerHTML = ['serif','sans-serif','monospace'].map(function(a) { return '&lt;div style="position:absolute;right:999%;bottom:999%;white-space:nowrap;font:999% \'' + fontName + "'," + a + '"&gt;' + (options.sampleText || 'onfontready') + '&lt;/div&gt;' }).join('') Saving about 269 characters! The function `areEqual` also has a lot of repeated code, but I don't really see an easy way of reducing that! Lastly on line 200 through 210, I see the first and only place the `startIframe` function being used, and the a lot of repeated code again. One thing would be to _not_ pass shutdown to the function, since it seems to me that it stays the same throughout the following lines of code. Secondly the e a o combo is being duplicated twice, consider specializing the code to handle all those three cases identically, like what was done earlier with the `root.innerHTML`, fx. ['e','a','o'].map(function(n, i) { startupIframe(startupIframe[n] = document.createElement('iframe'), shutdown); root.childNodes[i].appendChild(startupIframe[n]); }) Saving about 230 characters! Lastly consider removing all of the semicolon, most of them are not needed, besides maybe at the begin of the last code example. I might glimpsed over a few things, but that should be a good starting point! Nice work with the code and good luck :)
You're not calling the function, you should be doing `document.write(deal());`. What you're doing is using the function as a value and passing that into document.write, so it's just using that as a string. It would be the same if you did `var str = 'Random number is ' + deal;`.
Uh, I got stuck again. http://imgur.com/Yi4S5ZE Why isn't it adding card1 and card2?
He noticed it.
I don't understand. I put *card1* and *card2* in as parameters for *score*, where else should they be? 
Follow your heart!
because its adding as many as it needs, since there are like 55~ pictures it will add a &lt;img&gt; for each one
Is CloudRed a startup as well as an open source project?
Ok, then on each button click, check how many images there are, and then only append how many you need and otherwise change the src on the original. It'd be more efficient processing-time wise.
When you write a function function add (a, b) { return a + b; } The `a` and `b` are the things that are *passed* into the function when it is called. In other words, if I call `add(12, 34)`, I should get back 46, because inside the function `add`, `a` is 12 and `b` is 34. If I write `add(x, y)`, I would pass in the values of `x` and `y`, whatever they are on the outside of the function - that is, `a` and `b` inside the function now takes on the value of `x` and `y` from outside the function respectively. It doesn't actually matter if I have previously defined `a` and/or `b` outside anywhere. Again, please read the book. It will probably explain these concepts better than I can. 
Best way to reduce code is to use `reduce()`: const inputs = [ inputFirst, inputSecond, inputThird, inputFourth, inputFifth ]; const largest = inputs.reduce((x,y) =&gt; Math.max(x,y)); const smallest = inputs.reduce((x,y) =&gt; Math.min(x,y));
Several parts of the `Array.from` spec that differ from `Array.prototype.slice`. Example: `Array.from` supports an optional `mapFn` that can be used to transform the results that end up in the initial array. So if you ever are planning to do a `.map` on the result of `Array.from`, you can skip the extra call. `Array.from` also supports `Map` and `Set` objects.
In addition to the problem with the `score` function, you're defining the `deal` function with a `card` parameter, but you aren't passing anything into that function when you invoke it -- you're just declaring `card` as a local variable inside the function. So as you're using it, it should look like: var deal = function() { var card = Math.random() * 52; return card; } Note that there's no parameter necessary. Or you could be a little more concise and return the result directly without declaring a local variable at all: var deal = function() { return Math.random() * 52; } Also, /r/learnjavascript is a good resource.
Just like most things, the command line is right at hand and faster. I use caniuse-cmd all the time.
[no need for decrement if increment takes a delta](https://jsfiddle.net/n6wajLkd/) (628 bytes gzipped) cc /u/Oeb25, /u/qgustavor
Yea brackets is real nice I just create a html doc and run my code inside of a script tag
pretty cool, definitely want to play around with this. Not the clearest instructions on getting the examples running locally but figured it out quickly
What's the answer to "Test 2: Wrap lines at a given number of columns, without breaking words"? EDIT: Remove the last \n and test should succeed.
Thanks for trying, but my code is intended to be run through a preprocessor before being measured or gzipped. We aren't specifically trying to save on characters, but gzipped filesize. As a result, the number to beat is 492 bytes, after minifying and gzipping. &gt; First off all who cares about best practices when filesize is the goal? Well, there's a spectrum. The library is designed to make use of every trick in the book inside the library, but not abuse the outside environment. I could probably save some bytes by not declaring my variables internally, and just let them hook onto the global namespace, but that might collide with other values. However, inside the library, maintainability goes out the window for the sake of filesize. &gt; In the same boat I see window.onfontreadyTestReporter and process.env.NODE_ENV being used quite often... Anything inside `if ('test' === process.env.NODE_ENV) { ... }` is like a Preprocessor Directive from C++. My gulp build tool (command: `gulp build`) sets the process.env.NODE_ENV to 'production'. By the time UglifyJS2 gets the code for minification, the if statement actually reads `if ('test' === "production") { ... }`, which is always false. UglifyJS2 will remove this dead code for the distribution builds. The code inside the if statements is intended for testing the memory effects of the code, and will only execute in test builds (see `gulpfile.js`). Placing it inside a directive like this prevents the need for separate test versions of the library. Please ignore this code as it does not effect the distribution filesize at all. Use the gulpfile when testing changes. Not does it have automatic watchers for changes you make to the files, but it will also run the minified versions through gzip, so you can instantly tell if your changes were effective. &gt; Next up is inside the startupIframe, on line 54, 56, 65, 71, are all unnecesary brackets... These are already getting eliminated by UglifyJS2 in the build process. That's also why I'm not going ahead and implementing things with boolean operators and tenary operators. UglifyJS2 does it anyway, and better than I can do it manually. Look at the output of onfontready.min.js. There's not a single if statement. &gt; On line 165 through 173 there's a lot of duplicated... Using the map function instead of duplicating the string results in a gzipped size of 508 instead of 492. Plus, Array.prototype.map is only compatible with IE9 and above. &gt; The function areEqual also has a lot of repeated code... From the comments: `// Looking up the childNodes each time compresses better` &gt; One thing would be to not pass shutdown to the function, since it seems to me that it stays the same throughout the following lines of code. The shutdown function is being recursively wrapped inside startupIframe(). After each execution of startupIframe(), shutdown() is a different function. This hack prevents the need to loop over shutdown functions OR store references to the four different shutdown functions. Instead, I only have to keep track of 1 and a half shutdown references. The singular shutdown reference (that is reused), and the internal, closure reference to the previous shutdown function called "outerShutdown". &gt; Secondly the e a o combo is being duplicated twice, consider specializing the code to handle all those three cases identically, like what was done earlier with the root.innerHTML... Again, map can't be used due to browser support. Additionally, all three startupIframe functions have to be called before any of the iframes are added to the DOM. Otherwise the onload functions will potentially call before the system is set up to handle them. I have already tried to interlace these function calls and the result was a broken implemntation, due to the way iframe onload events occur in browsers. From the comments: // iframe elements will not trigger onload until added to the DOM // To ensure everything is set up, the insertion is not interlaced // Otherwise, the 2nd startupIframe might be called after shutdown &gt; consider removing all of the semicolons... These are already getting eliminated by UglifyJS2 in the build process.
See comments below, but the modern version after minification and gzipping is 492 bytes right now. You're gzipping a version with the test code unremoved.
It's based on a depth first maze generation algorithm (described on wikipedia [here](https://en.wikipedia.org/wiki/Maze_generation_algorithm#Depth-first_search)). It took less than a day to write in total. Once you understand the algorithm, it's not too complicated.
&gt; Is virtual dom worth implementing? When? If by "implementing" you mean, "using", then yes it is definitely worth using when you have complex state that must be represented using complex logic such as in large applications. If your site is mostly static, then probably not and you should just stick with plain HTML and some javascript additions/sugar of your choice (jquery, https://github.com/bendc/sprint, etc...) &gt; Which is considered to be the "best" standalone implementation? https://github.com/paldepind/snabbdom is pretty good, small and fast. I've also made a small vdom lib that I use for complex apps, though it is not a bare vdom lib and closer in spirit to a modular micro framework which has a vdom component: https://github.com/leeoniya/domvm &gt; All implementations I have seen have some special render methods and are not creating raw dom elements. https://github.com/fiduswriter/diffDOM seems to do a diff of two raw dom nodes. How much faster will something like virtual-dom be compared to diffDOM? Comparing raw dom will be slower. Not only do you have to actually create the new real nodes to diff (which are complex objects), you also must access expensive properties/attributes that must be recomputed by the browser on-demand. The overall mem usage will be larger and some of the code may not be optimized by modern javascript JITs.
To add to madman86's opinion, your app looks like a webstorm-generated app by someone who doesn't understand concepts like views. You don't really have a template here that would be maintainable. Maybe you are looking to hire a single developer to write an actual codebase instead of posting on a relevant subreddit (which is more curated to front-end than back-end by the way).
The best front end framework ^
Can you try to replace the png src attribute in your javascript with the src of a layout image that loads fine ? And also get rid of that "type:image/png" attribute when building your image. Depending on the result of the test it should tell you if the problem comes from the PNG, the filesystem (perms/owner), or the browser. 
Thanks for your feedback, this is very useful. I really didn't intend to conflate strong and static typing, but maybe it has come off this way. I'll re-read it and give it an update. I know JS++ is relatively unknown, but it really annoyed me how yet another developer believes they have "finally solved JavaScript's typing flaws!"
I know it is the javascript sub-reddit and not the HTML one, but the "for" attribute in label tag is for id of input. Personally I prefer put the input inside the label. Only for curiosity: where you learn to identify the element by class instead of by id? the class can be shared between controls instead the id must be unique.
&gt;2) Which is considered to be the "best" standalone implementation? React. It is boring and just works.
That is exactly what I needed!
check out /r/tinycode we have an AMA of some JS gode golfing experts online right now
Don't confuse the boy. Eventually, you must touch the DOM when you update it.
If you've got the @ symbol on Shift+' then you have UK layout keyboard
OOP is dead. long live functional edit: I welcome all the downvotes from butthurt dinosaurs who refuse to evolve
SOLID is always is a good mindset, in my opinion. It's harder to enforce with JavaScript's type system, though. You could [try using TypeScript](http://www.typescriptlang.org/), the `interface` feature as well as the type annotations, enums and the arrow function syntax are really nice. But the best read I had concerning the grander topic is [this article by Mark Seeman - SOLID, the next step is functional](http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/) - not in JavaScript but has many useful insights. @chazmuzz is probably right, functional is the way to go, just wait for the hype to buzz out :-)
Some points are definitely worth keeping in mind, even when choosing going with a more functional approach. IMHO SRP also applies to your modules and functions, OCP is a bit harder to enforce, yet it's good to keep in mind. As /u/eddyvanhelgen said, you could use something like TypeScript or flow for LSP. The hardest is probably Dependency inversion principle. Depending on abstractions without the help of TypeScript/flow is not really doable. OOP is not dead, but not the one true philosophy in frontend engineering. Keeping the principles in mind is always a good thing, though.
You seem to be mixing things? ES6 specifics are still not overly performant. You certainly don't have to use ES6. If you have specific requirements for a project, use what's available. There's nothing stopping you from using an older version of node and transpiling via Babel if you absolutely must have the latest toys. Node itself has little/no control over package managers. NPM itself is a separate entity. OS package managers often pin to stable versions for LTS. This means there's often a large delay for releases on that side (very little to do with node, it's down to distro maintainers). Node itself is very active, especially since the split with io.js and reformation under the foundation. There have been 2 major releases this year alone, with v7 scheduled for later on this year. You're also calling the developer of an open source library that you have benefited from, lazy. They haven't been active on github in quite some time. Whilst I sympathise that it's annoying, they have absolutely no obligation to keep something updated, nor respond to unsolicited emails. People aren't immortal either. Many of us have other commitments that often take priority.
Principles are always helpful, though it's rare that you should employ them like a zealot. You should be thinking about what the principles are meant to accomplish, and not just following them blindly.
Hi /u/panzerdp, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `rainsoft.io`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [rainsoft.io](/search?q=%28and+site%3A%27rainsoft.io%27+author%3A%27panzerdp%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|9|100%
Maybe 80% of the benefit of SOLID is in the first one: The [Single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle). And it's not only for OO code, it's for any sub-unit of code.
Thanks a lot, this works perfectly and I understand what's being done.
design principles are nice, solid works, but don't be too dogmatic about it or you'll end up in "I'm using a singleton instead of a global variable" terrain. the most important principle is KISS
Thanks for the tip. Will do!
&gt; XHTML Alas, wrong again here. The [XML spec](https://www.w3.org/TR/REC-xml/#sec-common-syn) says either single or double quotes are fine: [10] AttValue ::= '"' ([^&lt;&amp;"] | Reference)* '"' | "'" ([^&lt;&amp;'] | Reference)* "'" And XHTML is supposed to be valid HTML. The [XHTML spec](https://www.w3.org/TR/xhtml1/) doesn't specifically mention single-quotes vs double-quotes, but does list the differences between XHTML and HTML4, and while it mentions that XHTML requires quotes, it state specific ones are required. It even has single quotes in an example (where XHTML is mixed in with HTML): &lt;p xmlns='http://www.w3.org/1999/xhtml'&gt; This is also available &lt;a href="http://www.w3.org/"&gt;online&lt;/a&gt;. &lt;/p&gt; It's quite likely that you've run into a style guide or style enforcement program that forbade single quotes, but the spec allows them, and generic user agents (that aren't requiring a specific style) should too.
No
&gt; wondering if it's helpful when writing javascript? Yes, it is. &gt; can I say OOP is dead in the front-end engineering? I would not recommend it.
That said, it's a double-edged sword. Taken to the extreme, SRP can take an otherwise simple, straight-forward function that "does more than one thing", and break it out into dozens of 2 line functions and possibly several files that all "do one thing". It's great that you have lots of easy to reason about functions and more files to keep them logically separated, but now you have *lots of functions and files* where before you just had one. This in itself adds noise and complexity to the application, and makes it harder to grok and understand. It's now much harder to trace what the previously "doing too much" function actually does because data transformations happen in *several different places* instead of just one. This means WAY WAY WAY more context switching and opening/closing files to trace through them. SRP cannot be blindly applied as if it's a universally good thing with no downsides. SRP must be applied with an understanding of its cost and benefit with respect to the refactoring or design problem in front of you. Before I start hacking apart multi-operation functions (or classes) into lots of single responsibility functions/classes, I ask myself the following questions: 1. Are the bits of behavior I'm extracting significant and useful to the rest of the application? That is, can they be re-used / composed, or are they really only used in the context of this one function? Would extracting them out into the public "namespace" simply add unwanted noise to the application by making them seem more significant than they really are? 2. Am I actually gaining any readability / understandability by making this part of my application more declarative and abstract? 3. If it is hard to read/understand in its current form, is it *really* because the function is doing too much, or is the function just written poorly? Can I simplify it? Can I improve the naming of variables and functions? Can I go point-free? Can I clarify things with a few well-placed comments? Can I apply more idiomatic patterns to better clarify intent (e.g. `map` instead of for loop)? 4. Did I need to re-use only some parts of this "big" function and the reason I think I should break it up is because all of the other bits of this function are dragging along unwanted behavior? If so, can I just extract the bit I *do* need to re-use, and then compose that extracted behavior where I wanted it, and in this big function too? (related to #1). E.g. do I need to break up ALL of it, or just one part of it? 5. Even *if* I'm extracting behavior to be re-used, why am I doing it? Is it to save me time typing, or is it so that behavior can be a single source of truth? If it's to save me time typing the same 3 lines of JavaScript in different places, it's not always worth it. Typing is fast and cheap. If it's to be a single source of truth or to insulate one part of my application from change in another (e.g. an adapter), then it can be worth it. I've gone down the path of following SRP like a zealot and absolutely does NOT always make your application better by default. Adding more functions and files BY DEFINITION adds complexity to the structure of an application. So you *must* evaluate whether that added complexity is profitable or not. If it's not, don't do it - you're just adding technical debt.
Going functional doesn't absolve you from design principles like single responsibility or liskow.
I don't really use OOP much, but neither do I think it is dead. The nice thing about a multi- paradigm language like JavaScript is that you can use OOP, functional, procedural, etc. programming where they are most strongly suited. 
Joker would appreciate your joke ;) `Array(16).join('ha ');`
I've seen some css and component fuckups. Didn't last more than a few minutes though. I wonder if they develop frontend on prod too
Dope
In regard to programming to an interface for LSP, and Dependency Inversion... duck typing sort of removes the need to create interfaces in dynamic languages. In my mind, it's not that certain SOLID principles need to be enforced in JS as much as certain SOLID principles are implicit and thus not relevant. For instance, LSP dictates that any subtype of Shape should implement the method area(). The implementation of area() alone is all you need to follow LSP since the interface is implicit. You can implement some sort of static checking that subtypes do indeed implement the method (using typescript, or otherwise), but that isn't necessary to follow the principle.
#### **S**ingle responsibility principle Of course - this is just good OOP design. #### **O**pen/closed principle This is hard to *enforce* for JS objects due to the dynamic nature of Javascript, but it's a good *guideline* (and you can get some of the way there with closured-in "private" variables/methods, etc). #### **L**iskov substitution principle Again hard to *enforce* because of a lack of formal interface definitions in JS, but still a good guideline to follow as much as you can. #### **I**nterface segregation principle Again, tough to formally enforce, but it's also just a good general principle to follow in any language. #### **D**ependency inversion principle Again, tough to enforce, but good design that's perfectly possible to achieve in JS - the only difference is that the interface(s) are conceptual in nature, instead of defined in the code. There's a repeating theme here - statically-typed OOP languages allow you to *enforce* a lot of these requirements, whereas JS lacks the mechanisms to enforce them, but still allows you to *use* them perfectly well. OOP principles aren't "dead" in front-end engineering - that's inflammatory and silly. However a lot of them also can't be *mandated*, because that kind of top-down control and explicit restriction runs counter to the very idea (and negates many of the strengths) of a weakly-typed, dynamic language. **TL;DR:** SOLID in a language like JS is not a set of rules that you can explicitly define and rigidly enforce on others - it's a philosophy that you should subscribe to and emulate yourself, and trust others in turn to do the same.
Ember excels at large apps because of its strong conventions and Rails-like generators—all Ember apps have the same or similar file structure. As mentioned, the basic "Hello world" is not as lean as other frameworks but that's not the point of Ember. I also like how devoted the team is to developer experience. To add server rendering it just takes two or three commands! Ember doesn't get much press around here because it's not as "exciting". As the link you posted said, it gets things done. Not to say it gets left behind though. The Ember team always takes the best things from other libraries and frameworks and is constantly evolving Ember.
What exactly did it change?
Doesn't js2.coffee go both directions?
Seconding this, use it in all sorts of production apps. Usually I always need moment-timezone instead of plain moment. Luckily both are supported by the same developers. To answer more directly about the question, you want to stick to a single timezone in your database, and that timezone should 99.9% of the time be UTC. You should do the conversion to the user's timezone in two common places: In the browser (browsers should be expected to be configured to the users' locale and so converting to a date object and displaying it should show the correct timezone), and when making a query to time-series data if you have any of that (things you would get out of ElasticSearch, for example).
Just letting you know for the future, it's much easier for us to debug your problems if you copy and paste your code. That way we can copy it into an ide and run exactly what you wrote. 
Woops. It's fixed now
&gt;"does more than one thing" That's usually not the definition used for SRP, but a very common misunderstanding. A much more helpful way of looking at it, is thinking about reasons to change. See [here](https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html) for an explanation by the principle's 'inventor'.
I've been banging my head on a desk for a day and this comment finally solved my issues. Many thanks
&gt; can I say OOP is dead in the front-end engineering? You can say whatever you want, but that doesn't make it true. I wish it was true, but I've seen too many people flocking to Angular 2 especially because of Typescript, to believe that OOP will disappear in the short or medium term.
which is what new Date(a).toISOString() does right? I'm storing this value in postgres. So instead of storing it as an ISO , i store the unix timestamp as a bigint for fasteer processing?
&gt;can I say OOP is dead in the front-end engineering Far from it. OOP has only just begun in front-end engineering. ES6 is the first JS spec that really allows you to do OOP in a non-prototypal way, which opens up all kinds of possibilities.
I'm more confused about the data-type i need to use .. is it better if i store the unix timestamp as a bigint in postgres and let the browser worry about converting it to local time? Or would it be better to store it in an ISO format in postgres? 
Your code is an example where obviously this philosophy makes sense. The person you're replying to is talking about cases where this might be taken to much more of an extreme to the point that it stops making sense. Because that's where the problem lies - people take programming philosophies and follow them exclusively without ever questioning why they're doing it, which leads them to do things inefficiently, and their response to that is to assume that the philosophy is faulty. 
Thanks for the reply! &gt; Why should I use an ORM? An ORM in this project merely means two things: 1. Data we receive/send to RESTful services isn't always in the format/data type we want to have in our JS. 2. You can define relationships like "A user has many posts". With this definition you can say many things - when I save the user - save the posts - when I add a post to the `user.posts` collection - add the foreign key and save the post - store the posts directly on the user object - as you save posts - update the user record (how to work with relational data in non-relational back-ends like document-stores) - when I save a post and the user is not yet saved - wait until the user has finished saving in order to avoid foreign key errors on the RESTful backend I'll add that to the FAQ on the website/README (rewrite the answer some based on your feedback if you can). Rekord was developed with the idea in mind that we should steer away from the "fill out a form - hit save - watch progress bar - ok it saved" and more into an optimistic approach in order to make a user's interaction with an application more responsive. Rekord has events which communicate when there are problems with saving a record, you're offline, the record still has unsaved changes, the record is pending a save or removal. Ideally all of these possible states should be seamlessly communicated to the user through the UI. Maybe a yellow hint if the user is offline and a record isn't saved to the RESTful service - maybe a slight disabled look if the record is actively saving, etc. These are only cases where something might be wrong - but since Rekord is aiming for offline &amp; realtime applications it would be good to nicely communicate to the user the status of their actions. Thanks for your input - I definitely plan on making the Lists example an application you can use online or download for your phone (maybe without a backend - haven't figured out a cost effective way of doing that yet)
I ran this code through Google Closure compiler, but my code isn't designed for Closure compiler. As a result, it's mangling the object references, changing window.onfontready() to window.h(), and changing the options values. This is not acceptable. The outward-facing interface needs to remain the same.
SRP, Open/closed, ISP, and DI are nice guidelines. If you don't follow them, your code might be messy or excessively coupled. But Liskov is different from the others. Failing to follow Liskov's substitution principle is usually a bug.
Conversely, can you argue why you think they are modern `goto`? That would help kickstart the discussion.
I suggest [AVA](https://github.com/avajs/ava) as it comes with Babel built and it's awesome in general.
Because you can't go to anything/anywhere with generators? They can pause the execution of a function, leaving it until it is resumed again, but pause/resume isn't going anywhere except out and back in and generators can't control what that out is. It's not much different than a return in that respect. The only difference is that you can't recover from the point of return. So really, returns are a point of no return. Something to think about ;)
Oh ok. That makes sense. Thanks for clarifying!
You’d need a tool method for subclassing, because the canonical pattern for subclassing is as follows: function Employee(name, title) { Person.call(this, name); this.title = title; } Employee.prototype = Object.create(Person.prototype); Employee.prototype.constructor = Employee; Employee.prototype.describe = function () { return Person.prototype.describe.call(this)+' ('+this.title+')'; }; Note that the superconstructor, `Person`, is mentioned three times. That means that you would have to store the composed superclass in a variable so that you can refer to it multiple times.
I usually consider wysiwyg only for text editing, I wanted to use it for the entire template. Am I incorrect in that assumption?
Just an FYI, G3E9 figured out what I needed to change, so no further need for assistance, but thanks anyway! :)
I'm sorry, what is the use for this?
I mean... really? It absolutely does. The preview utility may not but the main library Readme does.
I just thought it was nicer, because you can format comments like real HTML.
eetisi?
I was unaware. Thanks!
That's gonna get lost when you minify.
But minification makes debugging very painful. Maybe I can just change the templates to strings when its time to go to production.
If supported in your environment: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find
Single Responsibility Principle can be applied even inside of a single function though. You pointed out that better variable names can make it easier to read - that is just one way of applying SRP. For instance: if ((width * height) &lt;= 20 &amp;&amp; color === blue) { // do stuff } This condition is doing way too much, and is hard to reason about. let area = width * height; if (area &lt;= 20 &amp;&amp; color === blue) { // do stuff } A little more expressive -- the condition is no longer determining the area, but we didn't necessarily need to split this off into a separate function/module/etc let area = width * height; const maxArea = 20; let tooBig = area &gt; maxArea; // You could argue that the following is unnecessary, but it remove the responsibility // of knowing how to determine color from the condition. This could be replaced with // some other code that checks hex values, and the if condition doesn't change let isBlue = color === blue; if (!tooBig &amp;&amp; isBlue) { // reads like english now I think the argument shouldn't be against SRP - it is just about not doing things that don't actually help. I could split out the area calculation to a different variable, different function, different module, or entirely different project. It all depends on how it needs to be used, but that is an organizational concern that doesn't change the fact that the area calculation should be separated out from the condition
We've been using Ember.js for over two years in Intercom and we continue to be extremely productive and happy with the framework. We've gone from 15 to 100+ engineers in that time
I used it to start my last company and they're still going strong with it 2.5 years later. There's definitely a learning curve, but it's not much different from other frameworks. I use React nowadays, but I wouldn't hesitate to jump back to Ember if needed. (In fact, my current side project uses Ember.)
&gt; Note that the superconstructor, Person, is mentioned three times. That means that you would have to store the composed superclass in a variable so that you can refer to it multiple times. Certainly. Even with ES6 class factories, we end up storing the superclass in a variable. It's the parameter we pass in, called "Sup" in your code above. We'd have the same parameter to use in an ES5 constructor function factory. EDIT: Nevermind. I misunderstood. I thought you were talking about the superconstructor we pass to the factories. But yes, Employee would need to run the factories to create the chain of superconstructors *first* so it can reference the final result in each of those three places.
If it's not, grab a polyfill! Worth it I think.
Fucking sweet mate.
Wouldn't array filter go through all elements? Even if the first index matches you would still have to go through all other elements in the array. So the filter version would be more equivalent to this: function findStuff(stuff) { const result = []; for (let i = 0; i &lt; stuff.length; i++) { if (testIfTrue(stuff[i])) { result.push(stuff[i]); } } return result[0]; } 
[array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) might do what you want. E: function getFirst(arr, match) { var found = false; arr.some((el, idx) =&gt; { if(el === match) { found = el; // or found = idx depending what you're looking for return true; } return false; }); return found; } 
I use `shift()` as in... ``` stuff.filter(filterFunc).shift() ```
What you are doing is basically Array.some()
I'd challenge the bad perf rep, Ember has actually good performance, and is about to get much better when Glimmer 2 lands, which is to happen soon. Watch the relevant part of the EmberConf keynote: https://youtu.be/OInJBwS8VDQ?list=PL4eq2DPpyBblc8aQAd516-jGMdAhEeUiW&amp;t=2691
`array.some` will return a true/false value based on the return value of the callback. If 1 element in the array returns true then it stops and returns true. If not it returns false. I believe OP is asking how to actually get the first element that returns true.
&gt; This has gotten me in trouble a few times where I don't handle the case where there are no matches. How so? Seems like it would return `undefined` in that case, which is the best thing to do. (It's what `find` does, at any rate.) Looks to me like the downside of your method compared with `find` is that it doesn't short-circuit at the first value it finds that passes.
You may be too lazy to get anything done.
Nah I love coding. I'm bored and idk what to make
That's quite a url
Well I'm wolring on a CSGO gambling website but I like to have multiple projects
How about an extension for that site? Lots of fun. Will suck away hours of your life, and may even improve it a little too. Years ago I played lords of ultima which is a browser based game and hacked together an extension that helped with it. I may still have some info on that around somewhere.... [here](http://senocular.github.io/chrome-extension-lou-tdk/docs/LoUDefiant_about.html). Just little things built up over time, but time savers and it was fun to make as it also involved some reverse engineering of the game. And yes, The Defiant alliance won World 24 then ;)
I already made plugins for other csgo gambling websites but I'm making a CSGO gambling website myself right now so no extensions needed :P
I got that suggestion before haha. The thing is I don't like to do random stuff I like to do sometimes for other people
Well then /r/javascript is your place * https://www.reddit.com/r/javascript/comments/4masrf/rekord_clientside_rest_orm_offline_realtime_is/ (... looking for contributors) * https://www.reddit.com/r/javascript/comments/4m9ya5/cloudred_is_looking_for_developers/ * https://www.reddit.com/r/javascript/comments/4m9ee4/cosmic_js_is_looking_for_developers/
You can do `.filter(...).pop()`, which will return undefined if the result is size 0.
You can use [**this**](http://www.www.reallyhugeurl.com/) if you want.
Actually, there's no return statement in the Page.prototype.elementIsPresent(). By default, then, it always returns undefined. The second method is, as others have stated, the correct way to use Promises. Just change Page.prototype.elementIsPresent to read {return elementsLocator.count().then ... and the second way will work just fine.
Array.find isn't [supported in a lot of places still as of now](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Browser_compatibility), even though it's a far more elegant solution. I agree that reduce is the current solution if you want to avoid [0] at the end. I like to code a bit more defensively, in case you have multiple matches and only want the first for some reason. Return the output you already have if you've matched to prevent overriding with later indexes. Or don't, fit your scenario. stuff.reduce((out, arrItem) =&gt; { if( out === undefined ){ return arrItem.truthyCheck() ? arrItem : out; } return out; }) For me, reduce is correct semantically. If you mean to take in an array and return a single object, you should use reduce. If you intend to return a subset of the original array, you should use filter. If you want to transform the array and return the whole thing, use map. As some other people have mentioned, while this looks nice, a simple for loop can be terminated early, and may make a difference if you care that much about performance. Reduce, filter and map all go through the ENTIRE array. for( let i=0; i&lt;arr.length; i++ ){ if( arr[i].truthyCheck() ){ return arr[i]; //or assign to some variable and break; } }
You are correct. For IE 8 and IE in some compatibility modes, the console is not defined unless the developer tools are open. This no longer is true.
also... http://subprotocol.com/system/cloth.html https://github.com/subprotocol/verlet-js
Invisible balls have shadows
Thank you for the thoughtful response, I will try to implement what you suggested in the future!
that's definitely more convoluted than it needs to be. .find is what hes looking for
This wil throw Uncaught Error: Missing parameter in asdf(…). You could also do arguments.callee.caller.toString() in the requiredParameter function to get the entire function as a string and then regex the parameters from that. function requiredParameter() { throw new Error('Missing parameter in ' + arguments.callee.caller.name); } function asdf(param = requiredParameter()){ }
Babel-polyfill?
Hi /u/TehuPL, we're not going to do your homework for you. If you want to take a stab at it, then come back once you get stuck, or if you have some questions, that's all fine.
Something many haven't mention is the idea of null safety. When filtering an array, consider not removing it from the array context: doSomethingScary([1,2,3].filter(x =&gt; x &gt; 4)[0]) // might blow! [1,2,3] .filter(x =&gt; x &gt; 4) .map(found =&gt; doSomethingScary(found)) .map(result =&gt; console.log(result)) // never runs if null Here we are printing to the screen, but we could write to the Db, send JSON, alter the DOM, etc. Never need to leave the [].
ES6 all the ~~things~~ strings!
I'm responsible for supporting nested `import` statements in Meteor 1.3.3. It's based on a technique that works in every version of Node, and I hope it will catch on outside of Meteor and Node: https://github.com/benjamn/reify This comment thread was brought to my attention by a coworker this morning, and it inspired me to write a document explaining why I think nested `import` statements are a good idea, and why each of the common objections is misplaced. It's still a work in progress, but I recommend giving it a read-through before you go guessing at my motivations: https://github.com/benjamn/reify/blob/master/WHY_NEST_IMPORTS.md
whoops, I missed that
WatMan
I'm just spit balling here on mobile so I can't really verify, but if you had a reference to the function could you not call `toString` and parse out the name of the parameter from there. Might look something like `myFunc = guard (target, ['mandatory'])` Inside guard you have the function and call toString and you have a list of required params you can return a function that does the default throw Ehh... thinking about this more I'm not sure if this would work... I'll edit once I get to a real computer **edit**: Nah, didn't work out like I expected. You can do this with a `guard` function like I indicated, but it's not nearly as clean as the `mandatory` function that just throws if nothing is available.... it does throw back the parameter name, but in general I'd describe it as an unholy abomination : function guard (fn, params = []) { if (!params || params.length === 0) { return fn } const comments = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/g const parser = /^function[^\(]*\(([^)]*)\)/i const splitter = /\s*,\s*/i let args = fn.toString().replace(comments, '').match(parser)[1] if (!args) { return fn } args = args.split(splitter) return (...calls) =&gt; { const err = args.reduceRight((memo, arg, index) =&gt; memo !== true || !!calls[index] || new Error(`${arg} not defined`), null) if (err !== true) { throw err } fn(...calls) } } It'll blow up though if the name isn't exact.. and doesn't deal with destructured parameters or default arguments.
Can someone tell me the best way to get the async/await syntax to work with Babel and run in the browser?
I feel like I'm going crazy reading some of the responses here. The Array.filter method is going to O(n) at best case and worst case because it's going to iterate over each element even if the element is already found in the first index. This is probably the worst solution for seaching for something in an array. Your second solution is a linear search algorithm. Which isn't super fast but it's perfect for what you're trying to achieve because its worst case is O(n) but it's best case is O(1). Stick with the linear search. That's what Array.find is anyways.
That's a good observation if you formulated that yourself, on account that the creator of EmberJS is Yehuda Katz, who also created Handlebars.js (of which Ember uses a variant, HTMLBars). Yehuda was also a core team member for RoR, among others, and there are definitely some crossover paradigms. http://yehudakatz.com/projects/
https://reactforbeginners.com/ You have to pay a small cost, but this has videos going through an entire react project. He also provides source code. It also provides you with a slack group that is pretty helpful for questions about react.
Hi /u/RagingCatbtt, please indent all of your code with 4 spaces so that reddit formats it correctly. You can also use a site like jsfiddle to post your code.
Shying away until the spec changes may be a good choice for code that needs to work for the long term while minimizing maintenance cost, but trying this on examples, demos, and other non-critical projects, would be great for feedback on whether the spec should be amended. I'll be trying nested imports out on my personal site, which I use as a playground for experimental code; nothing mission-critical there.
Specifically, the element being clicked is `event.target`. --- BTW, if you also want to support oldIE (using a wrapper around both `addEventListener` and `attachEvent`), then the event is a global variable, `window.event`, and the target is its `srcElement` property; I hope that you won't actually need to support oldIE though, because there are many more translations you'll need to do.
JSON is mostly for passing data between applications; for this, what you want is a plain JS object, and ideally you'd define that object outside the function so it doesn't get re-created per invocation: var seasons = {w: 'Winter', s: 'Spring', m: 'Summer', f: 'Fall'}; function season(s) { return seasons[s]; } Also ideally you'd have this `season` function returned from a closure, so that the `seasons` object wouldn't be accessible directly to outside code. --- Anyway, if you do wish to complicate things, you'll need to use `JSON.parse` to turn your JSON into an object: function season(s) { var seasons = '{"w": "Winter", "s": "Spring", "m": "Summer", "f": "Fall"}'; return JSON.parse(seasons)[s]; } Here, I'm less concerned about putting the string inside the function, because that's a literal, primitive value. --- By the way, this pattern is useful as a way to avoid huge case-lists or chains of conditionals: var primitives = {boolean: false, number: false, string: false, symbol: false}; function isPrimitive(val) { return val !== document.all &amp;&amp; !(val &amp;&amp; primitives[typeof val]); } (This example works around the fact that `typeof null === 'object'` in all versions of JS, and that `typeof document.all === 'undefined'` in HTML5, even in browsers that implement the object for compatibility with oldIE-specific sites.)
Yea, that makes sense. I ended up solving the issue by just avoiding it entirely (see: https://www.reddit.com/r/css/comments/4mef2u/help_with_pixelperfect_alignment_potential_bug/)
Yehuda is a core member of everything! Rails, jQuery, Bundler, Ember, Cargo, etc.
I fully understand the motivation behind the effort (and I'd even say it's a good one), but frankly, I don't care about the author's credentials as much as I would about technical arguments. Otherwise we might as well just defer to Brendan Eich to make all the spec decisions. That document does address some obvious objections, but imho it doesn't address any of the technical implications of what actually would happen if this were indeed part of the standard. To put it bluntly, I don't think this is thorough enough about every possible edge case, as a standard should be. As I mentioned, there are many issues: hoisting is one. How the loading of modules actually happens is another (i.e. does it block execution over the network? when?). What happens with a circular import that mutates the value of the symbol? etc etc etc. If the proposal seriously is, "let's ignore what's currently standard and just do it my way", ok, fine, that's not unheard of for a proposal, but I don't think it's realistically going to land.
As this looks like homework, I'm not going to give code. I will say that you should read up on how prototypical inheritance works. Oh, and don't forget that parseInt has a second parameter! Also, document.write is not really a good way to write into the page. Look for other ways.
Well you're already half way there using `split()` on the string. Next I'd loop through every character and add the current character, plus a `"#"` character to a blank string outside of the for loop. When the for loop is done, the previously blank string now has what you want, so you return that. ***** You could also do this with [map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), would be shorter using `map()` actually.
Can you elaborate on how to use map() for this?
Adding a dependency that's already available with the platform is unnecessary. It creates a cycle that encourages devs to plug in huge libraries to implement single bits of an API. I'm not saying lodash isn't useful, but I haven't found it necessary while working on a large front-end codebase.
I would like the function to be able to automatically have the symbol logged, so I can simply enter the string. For instance if I enter interpolateToken('cool') the output is "c#o#o#l#"
It works so well on mobile!
or... I could modify the params and use the `...theSpread`, but the exercise was in ES5.
Cool thanks. First starting out read a lot about it doesn't so much matter what language to learn first just learn one, just didn't want to "limit" myself to much. 
Questions like these are probably better suited for /r/learnjavascript
Hi, I first used JavaScript on a research and development project at one of my internships. We used an in-house framework coupled with requirejs , knockoutjs, and visual studio I found it difficult to learn to program the right way, debug, JavaScript gotchas and best practices. I poured over resources and had all my code reviewed. I learned functional programming. It took a few weeks to learn how to code everything and a few months working on it the first time The second time (came back to intern) rewrote it within 2 months and added a full behavior driven ui tests Before the first experience, I had only done some c# MVC , telerik, linq, SQL, JavaScript minimally. I understand templates and stuff, which was great for working with knockout (a Microsoft baby) One thing looking back is I learned a lot but now we are rewriting the whole front end stack. We are changing core pieces of our framework in favor of new es6 stuff. That was like, 4 years ago when I started. Now I know much more than I did then. I learned a fuck ton since the beginning.
I think you mean the currently still-patched 1.x branch, but especially if you do XHR and support oldIE, that's a good idea.
Its kind of a tough question to answer since most languages can be manipulated in ways to make them do just about anything. For JavaScript I think its good to understand where its roots are - in web. It was a browser language first and remains the primary language in that environment. That said, it has also managed to find its way into other environments such as the OS (e.g. Windows Script Host [WSH]) and extensibility layers for other apps (e.g. JavaScript/ExtendScript in many Adobe products). This _where_ it can be used depends on where other people (programmers) are putting the JavaScript runtime. For JavaScript to run, it needs a runtime. Browsers all have a JavaScript runtime (at least those that support JavaScript) allowing JavaScript code to be run in the context of a web page. A runtime can be put just about anywhere. Once there, hooks can be added into the JavaScript API to allow the JavaScript code running there to do more than whats in the standard library (which isn't a whole lot). Browsers add a DOM API which allows JavaScript to manipulate elements in a web page. WSH, on the other hand, lets you create ActiveX objects with JavaScript. Anyone can decide to put a runtime anywhere and whatever functionality they want to it. So yes, JavaScript can do more than just web stuff, but web stuff is where JavaScript shines and where its the most deeply rooted. And as far as just starting out with programming goes, having this web-centric nature makes it really easy to incorporate UI into your applications with just a little extra HTML. No complicated UI frameworks needed which may be the case with other languages. The next step from the browser would probably be NodeJS which is effectively taking the browser runtime for JavaScript and bringing it to the desktop (similar to the previously mentioned WSH - JavaScript running on and directly interacting with the OS rather than just browser content). Node adds a bunch of additional APIs for file IO and all that wonderful stuff that aren't available in the browser but make sense once you're out of it. So if you want to rid yourself of the prison that is the browser, [NodeJS](https://nodejs.org/en/) would be your next stop. The internet has made JavaScript one of the most popular languages out there. As a result you're seeing it get applied just about everywhere. Its popularity is in turn driving its flexibility and capabilities. You just need to find where its being used.
In JavaScript, undefined and null are different. In your case, you could just check if the result is "falsy" and it would cover the cases when the value is an empty string, undefined or null. Make sure the you do the parseInt call after the check. You can do a falsy check like this - if (!a) { ... }.
The amount of effort people will go through just to avoid writing a for loop is ridiculous.
Your code as typed has a syntax error: The line with the `parseInt` should be var a = parseInt(window.prompt("What is your #")); (with the two close-parentheses to balance the two open-parentheses).
Pretty much anything. I used Node.js to write a command-line tool that automatically formats Shakespeare's complete works. As one off beat example. In terms of what you want to spend time learning, I think that should depend on your goals. If you want to get into designing apps, Java is probably going to be a somewhat better use of your time. It gets used pretty widely for that purpose. If you are looking at learning Unity3d (which I highly recommend for games), then you probably want to learn C# (you can sort of use JS with Unity, but it is pretty jenky). Obviously, if you are looking to design web apps, JS should be your first choice... But really you should probably be considering what is easiest to learn. One of my instructors phrased it this way: "The first thing you should always optimize for is developer time, not CPU time" If you've got access to good JS tutorials and know half the language already, boom, do that. If it's just as easy to do one or the other, then maybe look at what gets used the most widely for the things you want to build. Pretty much any major language can get used to do just about anything though, and once you're really good at one language, it's easier to learn others.
Reddit clone?
I'm not sure I'd use the word ignored, but yeah, that's the gist of it. It's like a regular try / catch -- once the error is thrown, you'd jump to the `catch` block without hitting any of the remaining statements. Promise.resolve(0) .then(x =&gt; x + 1) .then(x =&gt; { throw new Error(x); }) .then(x =&gt; x + 2) .catch(err =&gt; console.error(err)); The `x + 2` callback will never fire, and the error's message will be `1`. I don't know what `axios.all()` is, but [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) is the standard, and I imagine `axios.all()` would work the same.
 let splitAndJoin = function(original, joiner) { return original.split('').join(joiner); }; splitAndJoin('cool', '#'); Something like that is a little more generalized than what you asked for, but then you can use it to make a more specialized version if you want: let joinWithHash = function(str) { return splitAndJoin(str, '#'); }; joinWithHash('cool'); Or you could just hard code the hash in the first place.
i had no clue spaces was an actual way of coding until i took operating systems where my professor decided to make a fake kernel formatted with spaces. do you know how blood boiling it would get. looking at space indenting coding makes me and my ocd go haywire . 
Isn't a polyfill a dependency too though?
So if I understand correctly, if any one of the ```axios.get``` call throws an error, we lose the results of all the remaining ones too ? .then((r) =&gt; r.map((f) =&gt; axios.get(f.git_url))) // wait for the promises to resolve .then((r) =&gt; axios.all(r)) .then((r) =&gt; r.map(({data}) =&gt; data)) And in the same example, map is only called after all urls have returned data even though next computations are independent. This is the "bottleneck". 
Yes, that's what my doubt was. Current behavior: - get file contents - wait till all are downloaded - check for spaces v/s tabs - wait till all are checked - compute total Ideal behavior: - get file contents and check for spaces v/s tabs - wait till all are checked - compute total
More lines of code, more mistakes, takes longer to understand what's happening. I hate seeing for loops, whose intention is often unclear, scattered throughout the code. Unless you extract that code somewhere and make sure it's available for people to use...in which case you might as well use lodash which does short circuit. Unless that codes in a real tight loop somewhere, or running through millions of array elements, it's not going matter one bit performancewise in real life. 
Mapping isn't for performing actions with side effects. Mapping is for mapping array elements to a new array. You can use forEach to accomplish what you are doing and it's much more clear what your intention is. 
 JSON.stringify(obj, null, 2): Is all you need.
We are talking about a single for-loop here. If you can't understand what's going on in a simple linear search algorithm then I don't know what to tell you. Suggesting lodash is just a terrible idea. Bring in an entire library just so you don't have to write any for-loops? is that your suggestion? cmon man.
Looks like you want a templating engine. Take a look at [ejs](http://www.embeddedjs.com/getting_started.html). So in your case, you'll convert all the input data into a object and pass it to the EJS.render method.
Yes. Here are just a few reasons: For loops are more code. It's more mental overhead, and it gets in the way of understand the *intent* of the code. Unless you are in a serious optimization scenario, in front end world having clear, understandable code is of paramount importance. K.I.S.S. I'm going to be using lodash in many places if I have it, not just one. It's a small, modular tool belt from which you can import only the functions you use, if that's what you want. I'm not sure if you're writing embedded JavaScript or what, but I've never worked on a project where lodash was a comparatively large dependency, or where it would improve performance in any significant way to remove it as a dependency. Lodash is fast. It uses while loops underneath. It's 'find' method is a linear search, which you are describing. Whoever writes the code might not be intelligent as you or missed their morning coffee and may introduce a subtle bug. Then we waste time fixing something for which there is already a perfectly adequate solution. It's a very premature of an optimization to hand roll a search algorithm in the face of the downsides I outlined above. --- I would personally use the well tested functionality built into a library that does exactly what I want (and I do). Maybe it doesn't feel as cool and you can't tell people you implemented a linear search algorithm at work, but I have reasons for believing it's going to result in better code overall. 
If you're doing a lot of data manipulation (like parsing a complex API response and trying to get it to a renderable format), then you should absolutely go through some effort to use declarative functions. You're not "just avoiding writing a for loop", you're making a large codebase significantly more readable, and less unnecessarily long. Not to mention less prone to bugs, because if you write 500 for loops with some custom logic, there's a decent chance are at least one of those will end up being slightly broken.
This doesn't do the same thing at all.. It mutates the original array :/
Spaces look the same no matter what editor you use. I've always used sides because I hate going into the editor settings and switching the tab size to 2 instead of 4.
It is id, because a label is only supposed to describe one element. 
I'm not sure how that relates to the original question of a utility function that is 4 lines of code. Using a for/while loop in small reusable functions is perfectly acceptable and that's how your "declarative" functions are implemented anyway. You don't have to use functional style programming absolutely-fucking-everywhere in JavaScript, an imperative language.
I really don't understand why I should use this when I want a single page application and could just as easily use server side rendering with my framework of choice. 
This is the correct solution if OPs issue is only communication between tabs or windows. However, once you need to support older versions of IE or need to communicate with the server in a two way fashion, this solution will not suffice.
Thank you for posting this; I love it when people spread the word about promises! /u/nayanshah pointed out that a lot of fetching and processing could be done in parallel to reduce waiting time. (I suppose this would be more useful in a situation with more generous rate allowances.) In my own code I like to split out functions that each return a promise to improve composability. Here is how I would write this program, with attempts to address both of those points: https://gist.github.com/hallettj/e73091df244a4582b788893053616f51
You can put multiple `catch`es in a promise chain if there are cases where the program can recover from an error. This example recovers from a failed HTTP fetch by referring to a previously-cached result: axios.get(someUrl) .catch(_ =&gt; { return cached[someUrl]; }) .then(({data}) =&gt; { cached[someUrl] = data; return dosomething(data); }) // ... In the tabs-vs-spaces program there is no error recovery, just logging; so there is no use in putting a `catch` anywhere other than at the very end. *edit: code formatting* Edit: Oh yes, you are right that `axios.all()` and `Promise.all()` will reject on the first failure in the input array, and will not provide any data from any of the other requests (whether the others failed or succeeded). If you want to do something with individual requests regardless of whether the whole set succeeds, you put callbacks on the intermediate promises: .then((r) =&gt; r.map((f) =&gt; { const req = axios.get(f.git_url) req.then(({data}) =&gt; logResultOrWhatever(data)) return req })) // wait for the promises to resolve .then((r) =&gt; axios.all(r)) .then((r) =&gt; r.map(({data}) =&gt; data)) 
Can really appreciate that quote, thanks. Right know I now more JS than any other languages and have some great tuts lined up for it. 
If you want to use async functions (which may be part of ES2017) in Babel on top of ES6, you need two additional plugins: * Transformation: either one of the following two plugins: 1. http://babeljs.io/docs/plugins/transform-async-to-generator/ (requires support for generators, which are part of ES6) 2. http://babeljs.io/docs/plugins/transform-async-to-module-method/ (requires Bluebird) * Either plugin will automatically also enable the following plugin, which is required to parse async functions: https://babeljs.io/docs/plugins/syntax-async-functions/ More info on configuring Babel 6: https://leanpub.com/setting-up-es6/read#ch_configuring-babel An alternative to async functions is the library co, which is based on generators and can thus be used with plain ES6: https://github.com/tj/co
If it were homework the question would be phrased more coherently and wouldn't use `break` (which is a reserved word) for the name of the function.
Yeah, I know it exists, but some editors (like Atom) don't recognise it. Edit: Also, people can view the files without editor configs if they want in the same way as I do if I use spaces.
Yeah, you're right. I am thinking more of [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself), which is related when splitting up code, but is not the same as SRP.
Atom does, actually. The plugin for it is having a bit of a battle but overall it's decent.
We are on the cusp of it. There's a few things that, when finalized, will put us in a good spot. Webworker Shared array buffers for one will drastically speed up webgl games, webgl 2 is coming, heavily optomizable webasm too.
Building off of your answer, it appears that Chrome and Firefox also return `null` when cancel is hit on a prompt. Safari however returns `""` so there are still some cross-browser issues to consider here. It seems like this prompt should probably be handled some other way, like an input field that has a validation callback that alerts the user visually if the value is incorrect. Not knowing the context of the intended usage makes it hard to suggest a proper workaround. 
Yes (but I can almost hear the slurping noise from the battery).
We use client side because dynamic websites are better to use. Waiting for the entire page to load every time I go to a different big post or a different forum thread is time that I'd rather spend up front waiting for JavaScript to load. 
Totally right, I had a misfire with my macro. Sorry about that!
I would love some feedback! [Original post](https://www.reddit.com/r/reactnative/comments/4me0hg/i_built_a_library_which_improves_the_structure/)
Inferno does not currently have a router library, that is on the roadmap :) Inferno differs from Preact in many ways, especially in terms of technical implementation. Inferno attempts to leverage some of the fastest implementations of handling keyed arrays plus Inferno makes a big effort to reduce garbage collection and DOM re-use without dampening the V8 optimisation patterns for object creation. In other words: Inferno should be a faster in every scenario.
Personally, I used to not be very consistent with it. After I started using Python for basically everything, I ended up using only single quotes. If I want to output something human readable with quotes, I can easily put double quotes inside the single quotes without escaping them. That principle holds true for Javascript Plus, for Python, I think a '''single quoted multi-line string''' looks better than """one that is double quoted"""
Thanks for the resource, I'll check this out for sure. I was doing some research into PhantomJS last night and it looks super cool as well. Do you know if Phantom would work for this purpose as well? Or why would Google Scripts be superior in this case, just out of curiosity? 
Making "random" "breaks" in the image. I've considered using 1D Perlin noise, but that's sorta intensive, and I've also considered making Voronoi diagrams out of the image, but that also seems too intensive. I'd like to just draw lines at random to create the breaks, but I'm not sure how to get the image coordinates. I honestly haven't worked with Canvases much, so it's taking some trial-and-error. Thanks for telling me how you'd do it, I'm glad that at least I'm not way off ;)
It gives you most of the benefits of a virtual dom and makes it easy to just say "Here is my html, make it so". It maintains the dom state while performing a diff making it more useful than just completely resetting innerHTML (input values, event listeners etc are all maintained during diffs.).
hah, of course
Well, was too lazy to shorten it. I really like the Babel repl. Putting everything into the URL means no storage for them obviously
Thanks for chiming in. Pardon my ignorance here, but how do I use the event.target here?
Check http://www.nightmarejs.org/ - it's based on Electron/Chrome (so more modern than Phantom.JS)
Since I see `let` and `const` in the original code, you may already have babel going, so this should be included in `babel-polyfill`.
There is no way to predict with certainty how long something like React will remain popular. There are lots of new libraries and frameworks being released all the time. I love react and honestly only program in React Native most of the time because of the love I have for the technology. I won't last forever, but should will be around for at least 3-5 years more. I started supporting Ext JS in 2006. Ten years later, the technology is still around and works pretty well for developing apps. 
Disagree, the web will go the way of desktop/app/game development for view -- with GUI tools. Only the fractured ecosystems of clients and the fact that the original web was not designed with apps as a centerpiece have stalled this transition. It's going to happen faster than you think though... 
I'd put the #1 most useful letter as L - Liskov substitution principal. Using objects properly in JavaScript relies extremely heavily on substitutability. For example, if you're using React and you create a class that extends the `React.Component`, it's vital that anything that expects a Component have access to the properties it expects in your subclass. It's far from a classic example of LSP, but in my view that's actually more of a reason why you need to understand the concept. If you're in a language like C#, Java, PHP, etc., then LSP is obvious because you're explicitly defining your class types (indeed your code may even fail to compile/execute because it fails LSP). In ecma, you're on your own, and the "type" of object is very flexible. Look at [Array.from](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from), which can run on anything "arraylike" to build an array from. Unlike other languages where you'd expect it to formally define the object's type somewhere (e.g. `myobj instanceof ArrayLike`or something like that), you really only care that the object acts like the thing it implements, which is how you informally define its supertype. This makes subsitutability really tricky to implement, but also extremely powerful, since it means all these are valid: * `Array.from([1, 2, 3]);` * `Array.from(document.querySelectorAll('p'));` * `Array.from(jQuery('p'));` * `Array.from({ length: 5 });`
Can you show proof of this? Just curious.
Got any proof or reasoning for your claim? I personally think web will become more and more popular due to the rise of JS since you can do anything a GUI frame work can do but across every platform with the same code 
Programming for 20 years in industrial (SCADA/PLC), kiosk, game, mobile and desktop dev. The tooling is pretty identical in fundamentals in everything but web dev at this point. XCode/Unity/Visual Studio/Unreal/PanelView etc. 
(I currently develop front-end web systems)
Still. You do a small sample size as a stand in. Weird that he went thru all that effort and didn't even run it on a small subset and post the results. 
Or retarded editors that have the default at 8...
I would implore you to look at the state of some of the other existing technologies. jQuery is still popular, it had and still have an ecosystem of libraries around it. It is unlikely to die out in the short-term as there are millions of LAMP apps out there written using it, plus it is still faster to implement/scaffold over React/Angular for non-SPAs (e.g. one-off splash pages). I would also implore you to look at challenges to the stack React is based upon. The biggest challenge to JavaScript I see is WebAssembly. In the past 5 years, people from different programming backgrounds (Python, Java, .NET, C++, PHP) are all forced to do some JavaScript for web app, whether they like it our not. There has been noticeable effort by people from various backgrounds to bring their way of doing things into JavaScript (CoffeeScript from Ruby/Python folks, dependency inject libraries from Java/.Net folk). With WebAssembly, that is going to change as those people can simply compile whatever language they want onto WebAssembly. That is going to effect how FE code is written. 
I agree -- GUI dev systems will compile layout constraints into apps for you, and WebAssembly is likely to be the lingua franca of these systems. I commented on this below -- but already got downvoted out ;(
Noticed a bug where you take a hit and want to take a second hit the game indicates that was the wrong decision saying I should have doubled. I've never been to a casino where you can double after your first hit. Nice work though! 
Yep. That fixed it!
The for loop just adds the listeners. It doesn't wait for them to run. The for loop finishes running before you click on anything. This is an example of JS being asynchronous.
I've been having a lot of trouble getting into React and Angular. This may be slightly off topic, but isn't it just easier to use Vanilla JavaScript? (I happened to be checking out the React Todo example before stumbling upon this post). Maybe someone can show me what React is all about? Anyway, here's my Vanilla TODO. It seems easier to understand in my opinion? &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Vanilla TODO&lt;/h1&gt; &lt;ul id="ul-id"&gt;&lt;/ul&gt; &lt;input id="input-id" type="text"&gt; &lt;button id="button-id" onclick="todo();"&gt;Add #1&lt;/button&gt; &lt;script&gt; var i = 1; function todo() { var todoItem = document.getElementById("input-id").value; document.getElementById('ul-id').innerHTML += '&lt;li&gt;' + todoItem + '&lt;/li&gt;'; i++; document.getElementById('button-id').innerHTML = ''; document.getElementById('button-id').innerHTML = 'Add #' + i; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
On a brief glance, it looks like instead of setting `var that = this;` and then referring to `that` everywhere, you could just refer to `event.target`. (In old-style event handlers, `this` is the element that received the event, and in event listeners, `this` is the same as `event.target`, for compatibility reasons, but only in the scope of the event handler itself and not in any inner functions.)
Downvoting minority opinions into oblivion is a pretty depressing way to encourage discussion among devs... (not quite the original idea behind the up and down votes on Reddit)
React was a natural progression of web tech. Only recently did we have the tools/ecosystems to have it widely adopted (that and Facebook's name behind it). Before React came out, I created an extremely similar system - declarative, component-based, real-time, batched updates, GraphQL/Relay-like system built into its core. React even ended up having the same/similar method names. And of course, my project and React weren't the only ones of their kind. So it's interesting to me that multiple sources have come to the same conclusion, which I consider proof that it's just a natural progression. I think it's going to be hard to really devise a better system for non-trivial web application development at this point, and other mostly interchangeable libraries (like Preact) are awesome. There are definitely some kinks to be worked out and some pain points to address, but there are some really cool things in the works now to solve these problems while fitting perfectly within this ecosystem.
Here's my take on my experience with many frameworks. I've dabbled with angular, react and Ember. Out of all of them, I find Ember to be the most positive experience I've ever had with a y of them. People complain about the learning curve but I disagree. With the client tool, it's by far the most impressive and easiest to use out of all of them. We do some heavy computational work at the company I work for. U was able to solve many issues that took several hundred lines of code and simplify it to about 40 lines with Ember. That coupled with the fact that their new rendering engine is faster than all frameworks makes it invaluable even on mobile. The architects at our company was so impressed by the entire thing that they've chosen to do the entire app in Ember. 
The key is that JavaScript will continue to exist and be developed. In that way, WebAssembly is not a replacement. However, WebAssembly will allow developers to write code that is capable of the same functionality without thinking about JavaScript. https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md
Great catch! I updated the code so that should be fixed now. I appreciate the feedback!
When your app gets to a certain complexity, the overhead of Angular/Ember/Backbone/React+Redux+Router/etc becomes beneficial. Your todo list is extremely trivial - you can't even complete items, just add them. Check out [TodoMVC](http://todomvc.com/), which is a comparison of a more full-featured todo app with better architectures. [VanillaJS source](https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs), and the [React source](https://github.com/tastejs/todomvc/tree/gh-pages/examples/react).
So if your application is complicated, React makes it less complicated. But if your application is not complicated, it may actually make your app more complicated. Thank you! 
Thank you for the reply! I think I understand now.
Pretty much. It all depends on the scale of your project: if you are building a tree house, you probably don't need cranes and tons of concrete; if you are building a skyscraper though, just some plywood, hammer and nails won't do the job.
Have a look at this: https://laracasts.com/series/do-you-react/episodes/5
http://slay.one/ Slay.one, a free multiplayer top-down shooter, ive worked on the last months.
Yes, if that is the extent of your app, it would be crazy to use Angular or React. Even if your app is 2x, 3x, even 10x more complicated it would still be crazy to use React. If you want to know why to use React, watch this: https://www.youtube.com/watch?v=x7cQ3mrcKaY If you've not experienced the problems Pete talks about in that video, you don't need React.
This is a classic JS gotcha that you'll get asked on job interviews, FWIW. With modern JS, if you just declare the counter variable in your for loop as `let i = 0;`it will behave the way you expect, since `let` is block-scoped.
Short version: sure, for a small app, or one with not much data to pass around, React is probably overkill. But, as you get into a larger app with more data, it's harder to track what data is where and how things fit together. Also, while jQuery is great at manipulating the DOM, it's easy for it to turn into a nested maze of callbacks and triggers and problems trying to keep the DOM in sync with your data. React is intended to give you a very straightforward approach to managing your UI and your data. You have a tree of components, and data flow goes from to bottom.. Parents pass data as "props" to children, children can have some internal state, and pass whatever they want to _their_ children, etc. Components simply say "given _this_ data, I want _that_ UI output", and React takes care of fixing up the DOM to match what's expected. If your UI doesn't look right, then it's because your data isn't right. Is it perfect? No. Is it right for every use case? No. Does it make a _lot_ of application development a whole lot easier to think about? Absolutely. Beyond that, let me point you at some resources. I keep a big list of high-quality tutorials and articles for React and related topics at https://github.com/markerikson/react-redux-links , specifically intended to be a great starting point trying to learn the ecosystem. Also, there's a community called Reactiflux on Discord, which has chat channels for many React-related technologies. Lots of people happy to answer questions. There's an invite link at http://www.reactiflux.com.
Is there no standard ```Promise.map``` construct like [this](http://bluebirdjs.com/docs/api/promise.map.html) ? The idea is to avoid multiple calls to ```Promise.all``` by creating a flat array of promises which returns data for each file from each repo. Finally this array can be resolved in a single call. Also adding a ```.catch``` for ```processFile``` since an error while processing a single file shouldn't fail all the others. E.g something on the following lines: processFile(file) { return getFileData(file) .then(processFileData) .catch(error); } processRepo(repo) { return listOfFiles(repo) .map(processFile); } processRepos() { var r = listOfRepos() .map(processRepo); return flatten(r); } Promise.all(processRepos()) .then(aggregate) .then(log) .catch(error);
It's hard to say without knowing the html structure you're manipulating here, but I'd at least advise a review of the [jQuery API](http://api.jquery.com). You're not really taking advantage of a lot that jQuery has to offer, such as the arguments passed to the .each function, .width() and .height() methods, using css selectors instead of .children(), etc. What's weird is that those errors look like event-based errors (missing target properties), no idea why that would be happening.
I can confirm
Here's a chunk of the HTML I'm trying to manipulate (page on BoardGameGeek.com): &lt;div id="collection"&gt; &lt;div class="fl sf"&gt;User: &lt;a href="/user/myusername"&gt;myusername&lt;/a&gt;: Board Game Collection&lt;span id="collection_viewlabel" style="display:none;"&gt;&amp;nbsp;|&amp;nbsp;View: &lt;span id="collection_viewname"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; &lt;div style="text-align:right; margin-bottom:5px;" class="sf"&gt; Download board games: (&lt;a id="csv" href="/geekcollection.php?action=exportcsv&amp;amp;subtype=boardgame&amp;amp;username=myusername&amp;amp;all=1"&gt;all&lt;/a&gt;&amp;nbsp;|&amp;nbsp;&lt;a id="csv" href="/geekcollection.php?action=exportcsv&amp;amp;subtype=boardgame&amp;amp;username=myusername"&gt;owned&lt;/a&gt;)&amp;nbsp;|&amp;nbsp; &lt;a id="permalink" href="/collection/user/myusername?geekranks=Board+Game+Rank&amp;amp;gallery=large&amp;amp;rankobjecttype=subtype&amp;amp;rankobjectid=1&amp;amp;columns=title%7Cstatus%7Cversion%7Crating%7Cbggrating%7Cplays%7Ccomment%7Ccommands&amp;amp;own=1&amp;amp;wanttoplay=1&amp;amp;objecttype=thing&amp;amp;ff=1&amp;amp;subtype=boardgame"&gt;Permalink&lt;/a&gt;&amp;nbsp; | Current Filters: &lt;span id="currfilters"&gt; own=yes [&lt;a href="javascript://" onclick="$('own').value='both'; CE_GetCollection( 1 );"&gt;X&lt;/a&gt;] wanttoplay=yes [&lt;a href="javascript://" onclick="$('wanttoplay').value='both'; CE_GetCollection( 1 );"&gt;X&lt;/a&gt;] &lt;/span&gt; &lt;/div&gt; &lt;div class="geekcollection_pager"&gt; &lt;span class="geekpages"&gt; 1 to 74 of 74&amp;nbsp;&amp;nbsp; Page 1. &lt;a href="javascript://" onclick="CE_SetPage( 1 );"&gt;1&lt;/a&gt; &lt;/span&gt; &lt;form autocomplete="off" id="form_pager_top" style="display:inline;" onsubmit="CE_SetPage( $('pageset').value ); return false;" class="ng-pristine ng-valid"&gt; &lt;input class="geekinput" type="text" name="pageset" id="pageset_top" size="4"&gt; &lt;input class="geekinput" type="submit" autocomplete="OFF" value="Go &gt;" onclick="CE_PageJump( $('pageset_top').value ); return false;"&gt; &lt;/form&gt; &lt;/div&gt; &lt;div style="margin-top:1em;"&gt;&lt;/div&gt; &lt;div style="float:left; text-align:center; width:220px; height:210px;"&gt; &lt;center&gt; &lt;a href="/boardgame/68448/7-wonders"&gt;&lt;img style=" width:151px; height:150px; " src="//cf.geekdo-images.com/images/pic860217_t.jpg"&gt;&lt;/a&gt; &lt;div class="sf"&gt; &lt;a href="/boardgame/68448/7-wonders"&gt;7 Wonders&lt;/a&gt; &lt;/div&gt; &lt;/center&gt; &lt;/div&gt; &lt;div style="float:left; text-align:center; width:220px; height:210px;"&gt; &lt;center&gt; &lt;a href="/boardgame/148951/tiny-epic-kingdoms"&gt;&lt;img style=" width:200px; height:134px; " src="//cf.geekdo-images.com/images/pic1876006_t.jpg"&gt;&lt;/a&gt; &lt;div class="sf"&gt; &lt;a href="/boardgame/148951/tiny-epic-kingdoms"&gt;Tiny Epic Kingdoms&lt;/a&gt; &lt;/div&gt; &lt;/center&gt; &lt;/div&gt; &lt;div style="float:left; text-align:center; width:220px; height:210px;"&gt; &lt;center&gt; &lt;a href="/boardgame/150312/welcome-dungeon"&gt;&lt;img style=" width:99px; height:150px; " src="//cf.geekdo-images.com/images/pic2436689_t.jpg"&gt;&lt;/a&gt; &lt;div class="sf"&gt; &lt;a href="/boardgame/150312/welcome-dungeon"&gt;Welcome to the Dungeon&lt;/a&gt; &lt;/div&gt; &lt;/center&gt; &lt;/div&gt; &lt;div style="float:left; text-align:center; width:220px; height:210px;"&gt; &lt;center&gt; &lt;a href="/boardgame/179217/wonky"&gt;&lt;img style=" width:126px; height:150px; " src="//cf.geekdo-images.com/images/pic2560714_t.jpg"&gt;&lt;/a&gt; &lt;div class="sf"&gt; &lt;a href="/boardgame/179217/wonky"&gt;Wonky&lt;/a&gt; &lt;/div&gt; &lt;/center&gt; &lt;/div&gt; &lt;div class="clear"&gt;&lt;/div&gt; &lt;div class="geekcollection_pager"&gt; &lt;span class="geekpages"&gt; 1 to 74 of 74&amp;nbsp;&amp;nbsp; Page 1. &lt;a href="javascript://" onclick="CE_SetPage( 1 );"&gt;1&lt;/a&gt; &lt;/span&gt; &lt;form autocomplete="off" id="form_pager_bottom" style="display:inline;" onsubmit="CE_SetPage( $('pageset').value ); return false;" class="ng-pristine ng-valid"&gt; &lt;input class="geekinput" type="text" name="pageset" id="pageset_bottom" size="4"&gt; &lt;input class="geekinput" type="submit" autocomplete="OFF" value="Go &gt;" onclick="CE_PageJump( $('pageset_bottom').value ); return false;"&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;
Those technical implications may become more apparent if we have something that actually works in practice, so this experiment is good because it will help all of us determine if the spec should or should not be amended. As pointed out in Benjamin's comment, hoisting is not a problem with Benjamin's scope-wise implementation, but it is with SystemJS' hoisting (in terms of complexity). Network-based imports could be allowed inside async functions, and throw errors otherwise. ```js await import foo from '/foo' ``` The await keyword would not be needed if `/foo` is a locally registered module. There are issues to be solved, as you said, and you are right! This experiment will help solve those problems while proving or disproving that such a change to the spec is worthy.
Don't go looking to learn the tools that will last long. It seems like you just want to learn the least. Instead learn a mix of popular and novel tools, and in doing so, learn how to learn. If you're a full time developer, youll learn a hundred more react-sized libraries in your career. 
It's because the site is very new and there are no comments yet on that topic.
It's because the site is very new and there are not many comments yet.
I think that's just for non-controversial PR presentation. If WebAssembly gives access to browser API's, and can do everything JS can do, then JS is definitely challenged.
Gotcha. I mistakenly thought it was going to pull disqus comments from related articles. 
Haha yeah, I guess I don't really explain it clearly.
The site is still very new and there are still very few comments.
I think over time React will become an implementation detail. That's the cycle of web technology. A good idea comes up in the community, then its fundamental ideas are baked into the browser engine and standardized, then the library becomes unnecessary.
I think React is the current best in class. But to solve the problem it's solving, self-adjusting computation is probably a better paradigm than the virtual dom. If/when someone implements such a thing for JavaScript, it will have surpassed React on a technical level. Once a better alternative is in place, mindshare will eventually shift. 
If they were using four spaces, I'd rather keep it that way so I see exactly the same code as they did.
Nothing in /bitchplease
So, the first and obvious thing is that when you run the for loop, you don't actually call that function. You just add it as a listener. So nothing gets logged at all when the loop runs. Stuff *does* get logged when you click on the squares, though. In particular, whenever you click on a square, this line gets called: console.log("I loop " + i + "times"); What's `i`? It's `4`! You've already run through the loop. `i` started at `0`, but then you added 1 to it a few times and now it's `4`. So when you log it, you get `4`. If you want to actually get the number of the iteration, you have to be more clever than that. One way is to wrap everything in the loop in a function that takes `i` as a parameter and returns the listener. So, right now you have: submitSOBox[i].addEventListener('click', function() { this.style.backgroundColor = "blue"; console.log("I loop " + i + "times"); }) You can change it to this: submitSOBox[i].addEventListener('click', (function (a) {return function () { this.style.backgroundColor = "blue"; console.log("I loop " + a + " times"); }})(i)); There are also more convenient ways of getting this done if you're using ES6.
It's also wrong, so beware.
Like you just said 'leaner React-inspired libraries being released'. Does that even still count as React? Because if you go work with someone on a Preact project you are 100% have to know Preact and not do React. By the way this is the first time I ever heard of Preact. But that is the way the web is. Someone invents something new every day. Its sort of funny to me to hear people say that some web technology is likely to remain popular/important etc. after seeing how many different things have come into fashion in the last 15 years or so. Having said that, if you are 15 years old, you probably don't have a lot of solid memories before age 5, so if React stays sort of relevant for 2 more years, that is 20% of the life you can remember. Whereas for me, I am 38 so 2 years is only 6% of my life which doesn't seem like much. Nothing on the web stays popular for very long. That doesn't mean it isn't still useful technology or that there aren't a ton of people using it. AngularJS is still pretty popular, but it is not even close to being as 'in' as React anymore. I mean, there are plenty of people doing PHP still. That doesn't mean you can't keep using it for X years. It just means in X years there will be another technology that all of the younger people think is wayy cooler (and probably does have some advantage). But that won't stop plenty of people from using React still X years down the line nor should it. 
I deleted my comment because it was going off topic, and I didn't feel like defending it. Now that a bot mirrored it, my deletion was pointless. So I guess I will speak for why. My statement was as follows: &gt; I would say from monotheism. &gt; Having spent years growing up in another culture, it is fairly apparent that many western cultures prefer a single solution to things rather than a pantheon of solutions. My statement was basically a commentary about why some feel threatened by WebAssembly. As an engineer, you should have a lot of tools in your toolbox, because engineering is about finding solutions to problems, not applying the same tools over and over again. JavaScript has its own assumptions (e.g. `number`, GC, closure, single-threaded), which make certain applications sub-optimal or difficult to implement. If an engineer is being doctrinal/dogmatic about their tools, like having irrational attachment to JavaScript or irrational fear of WebAssembly, they are doing themselves a disservice. In my statement, I made vague attempt at connect it to religion, which is a hard jump. In real world for example, of the 4 "assumptions" I mentioned, all of them has real applications in everyday software engineering, while it is possible to get around them in JavaScript, the solution is not optimal. 
Absolutely useful, during high school I did VEX and programmed that shit all in their derivative of C
You need to change your approach slightly. Instead of updating the `src` attribute of a single image, you should instead have an `&lt;img&gt;` element for each image you want to show, and then animate their positions. [Example (in pure CSS; not for use in production)](http://codepen.io/birjolaxew/pen/qNdMLj). That being said, if you're actually going to use this on a site, I'd suggest using a library instead of doing it yourself.
The ideas react inspired are never going away. React changed the way we think about UI development. Given that Facebook is supporting react, I think it will probably remain the most popular implementation of its ideas for several years. I personally prefer Cycle to React and think it is a superior paradigm, but I am skeptical of whether truly reactive programming will ever go mainstream. The learning curve is a major barrier to widespread adoption, but if this barrier is overcome, I see MVI as the next big thing at least at forward thinking organizations.
Very nice! (Even though it's more of a python interface than a js one) Very cool none-the-less, I actually decompiled some parts of the dashboard for a project myself, so I saw how complicated it can be (the camera/jpeg decoding)
Nice game! I died.
Will this teach those fools who think they can make money consistently playing Blackjack that they're actually simply fools? Seems like something worth educating people on, though those people operate with a great deal of cognitive bias.
I love React because it's fast and component-y, but 5 years is an eternity in this context. WebAssembly already has experimental support in a lot of browsers and is going to change everything. We won't be limited just to JavaScript on the frontend anymore--we'll have (in theory) a client-side runtime for any language that targets assembly. Where does React fit into a world where JavaScript isn't the only game in town on the frontend? Who knows?
Only M$ fanboy promotes TypeScript
You still should learn React though. It is one of the most influential libraries out there.
I just reread it and seems to backup everything I have just said. Perhaps you misunderstood me?
For my money, React's strengths are 1) Building re-usable components is very intuitive well thought-out, and 2) It's very fast. 1) Because React focuses on components, it's very easy and natural to write code whose structure closely mirrors the structure of the DOM. (This is the virtual DOM you may have heard about.) This makes it easy to reason about what components go where, and to keep track of it all. It also makes it very painless to write re-usable code. 2) The way React updates the DOM is very fast and efficient. Rather re-rendering an entire component when its data changes, it uses your `render` method to generate a new virtual DOM, diffs that with the existing virtual DOM, and only mutates those parts of the DOM that have actually changed. Typically DOM mutation slows things down, so this is a great feature, especially if you're prone to mistakenly re-rendering unnecessarily. (Ember has also taken this approach, starting with the Glimmer engine.)
Can you elaborate? for (let i = 0; i &lt; submitSOBox.length; i++) { didn't change the output, but I wouldn't expect it to because it's still a closure issue.
1. In most real-world use cases there is no need to generate any reverse indexes, etc: https://gist.github.com/DylanPiercey/80b307f817bcbdadfe4e4622ee1a239c#file-set-dom-no-childnodes-js-L127-L128 2. `Array.splice()` is a O(n) operation: https://gist.github.com/DylanPiercey/80b307f817bcbdadfe4e4622ee1a239c#file-set-dom-no-childnodes-js-L155-L156 3. Unnecessary DOM ops everywhere: https://gist.github.com/DylanPiercey/80b307f817bcbdadfe4e4622ee1a239c#file-set-dom-no-childnodes-js-L182-L183 Here is how I've done it: https://github.com/localvoid/kivi/blob/44e54839ea4420321649cefb6cb294a0b2dfcc55/lib/reconciler.ts#L447-L678 but it is probably too complicated if you are building a simple library, so you can look at one of the simplest implementations in snabbdom that works really fast in almost all important use cases, it can be easily modified so it will work on real dom elements: https://github.com/paldepind/snabbdom/blob/master/snabbdom.js#L133-L187
We did: It's called Browserify.
It's not possible to use the standard functions to do this. You'll need to use JavaScript. Try to find a modal library that suits your project (this is a solved problem). The downside is that it can't block execution like `window.confirm`, so you'll have to handle the response with a callback (or promises if that's your preference). 
Closures never freeze values of variables - they only freeze the scope. I believe this is true for other languages with closures as well. As for why that is exactly, I can't say. 
The whole point of software is to improve productivity and automate away as much drudgery as possible. By that score, Webpack fails miserably.
I suggest bootbox of your application supports bootstrap
MicroSucks amirite????
Yes, but keep in mind the extremly large amount of ready to use JS libraries... will the .NET or i.e. python folks want to rewrite all these tools? I dont think so...
Fucking finally. Phantom is so lacking.
In certain use cases. And I don't mean raw rendering speed. I mean from a completely blank slate, it takes a long time to load as the scripts are quite heavy. Fast boot helps quite a bit, and with more service worker support you'll get very good performance but those are definitely edge cases
I thought about that. The (small) issue is, you often want to switch to a weapon before you pick up the ammo so you can start reloading right when you pick up the ammo and lose no time. You couldnt do that anymore then.
The Facebook website is generally considered to be in the "high-traffic /complexity" category. If React can work there I think it is fair to say it passes some form of a maintenance and scalability test.
Thanks for sharing!
Well personally love that html is coupled with JS. When building an React component you can have its CSS, tests in a single folder which is very easy to reason about.
Yeah... that's why I'm stuck, lol. Thanks for checking it out :)
Python is just for the webserver, JS is used for everything else. But I guess you could say that. Awesome! I'd be interested to see what you made with it.
So React gives you a few benefits: declarative UI, unidirectional data flow, and from this arbitrary backends (React native, React canvas). But the way it does this is by diffing. Diffing can be slow, and this leads to leaky abstractions to address this. `shouldComponentUpdate`. Having to add IDs to your objects when you have a large list. There are even specialized performance tools to identify unnecessary diffs. Self-adjusting computation lets you do the same stuff except without diffs. Basically you have a function (like the React virtual dom function). The function takes state and returns the dom. In React, when state changes, you do a diff and apply the changes. In self-adjusting computation, the state change propagates through the calculations. The engine sets up dependency tracking, and is able to know exactly what output changes as a result of an input change. These changes propagate through arrays, functions, etc. For example, let's say I have an array bound to `li` and the array is 1000 items long. I can insert an item at location 300. Instead of diffing 1000 items, or even running through a list and checking IDs, the engine propagates the change to the array at 300 to the array of `li`. Originally it was applied to these calculation algorithms written in C. What they found was that, in many cases, applying it to the fastest algorithms made them even faster, because self-adjusting computation was able to track state changes more efficiently. [Here](https://blogs.janestreet.com/introducing-incremental/) is an example of a self-adjusting library written in OCaml, if you want to read more about it. I think the JavaScript needs one. If we had a library like this in JavaScript, we could do the same thing that React does, without running into any of the problems introduced by the diffing process. 
*If* this gets on a path to becoming a standard, then yes, it's totally worth exploring, and I'll be very happy if the issues are resolved. If it's on a not path to becoming standard, then imho it qualifies as an ad-hoc extension to the language, which imho is a mistake.
This comment has been overwritten by an open source script to protect this user&amp;apos;s privacy. It was created to help protect users from doxing, stalking, and harassment. If you would also like to protect yourself, add the Chrome extension [TamperMonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and add [this open source script](https://greasyfork.org/en/scripts/10380-reddit-overwrite). Then simply click on your username on Reddit, go to the comments tab, scroll down as far as possibe (hint:use [RES](http://www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top. Also, please consider using [Voat.co](https://voat.co) as an alternative to Reddit as Voat does not censor political content.
Probably JS
I agree -- I think it would more or less disappear behind tools the way a lot of UI code is generated in through visual designers.
it's desperately needed but i think people have tried and it fails because people reject it and rather code their UI for some reason. Usually a GUI tool that allows you to edit css/html and have the tool render the changes is the ones that somewhat survive. A hybrid. Unfortunately it has to be a fucking smart tool to account for all possible browser scenarios and behavior and render the UI code framework independent. there are bootstrap builders but they're locked to that framework. However i suppose it's the same reason there isn't a GUI builder for code itself as once you get down to it, there are alot of ways to do things in css/html that are hard to cover and the tools always fall short you end up back in the code editor editing css/javascript etc... 
I don't think it's about shame or finding balance. I think it's more efficient to become a learner. If you try to reduce how many tools you learn in your career, you're going to build a lot of things with the wrong tools. Think carpentry. With the right tools the job gets done faster and better. 
Right. JavaScript never really freezes variables (var). To get a freezing like behavior, you need a distinctly different variable to use in place of the original. For example, looking at the loop, you can loop over an iterator variable i and then check out its value at the end of the iteration: for (var i = 0; i &lt; 10; i++) { console.log(i); //-&gt; 0-9 } console.log(i); //-&gt; 10 Here there is just one variable, i. It is used for every loop and continues to exist in the scope after the loop is complete. Its final value is the value that causes the loop condition to fail (`10 &lt; 10`). With closure functions, you have functions which reference variables in an outer scope. If you have two functions referencing the same variable, they'll each reference that same exact variable rather than each having separate copies. var n = 1; function a () { n++; console.log('a', n); } function b () { n++; console.log('b', n); } console.log(n); //-&gt; 1 a(); //-&gt; a 2 (using same n) b(); //-&gt; b 3 (using same n) console.log(n); //-&gt; 3 Now put these together and you have multiple closures created in a loop which all reference the same instance of a single variable. var a = []; for (var i = 0; i &lt; 10; i++) { a[i] = function () { console.log(i); } } a[0](); //-&gt; 10 a[1](); //-&gt; 10 a[9](); //-&gt; 10 And this is effectively whats happening with your handler functions. So how do you fix this? What you need is to have your functions reference _different_ variables rather the same variable. There are a bunch of different ways to do this, most of which have already been mentioned in the thread, but I'll summarize: * Using let in your loop instead of var (ES6+ only). let in ES6 gives you block-scoped varibales for(let i = 0; i &lt; submitSOBox.length; i++){ // ... } for loops are a special case for scoping rules where let and const variables declared in the for definition become local to the for body block. Being local to the block, a new instance of those variables are created for each iteration of the loop, and magically, the iterator incrementing is retained for each value. This way the i in each loop is a new i variable with the correct iteration update (++) that will remain that same value after the loop is complete. If you check the value of i after the loop, you'll get an error because the let variable is scoped specifically to the loop block and is not available outside of it. * Capture the variable in a function called in the loop. There are a couple of ways to do this one. But the idea behind it is creating the iterator variable copies through function parameter variables. Whenever a function is called, a new scope is created for the body of the function and with it new variables to act as function parameters taking in the values passed in. The parameter would be the "frozen" version of i and its value would be the original version of i passed into it. forEach is the (subjectively) cleanest way to do this. Its an alternative loop to for that uses functions for each iteration which automatically captures the iteration variables as function parameters unique to each iteration submitSOBox.forEach(function(value, i) { // ... }); You can also use a IIFE in the loop, (subjectively) the un-cleanest way to do this. The original i is passed in to the inner function where it becomes a value assigned to a parameter i which is unique to each loop because the parameter, as being part of the call, is unique to each loop. It can even have the same name because the parameter i will shadow the loop i. for(i = 0; i &lt; submitSOBox.length; i++){ (function (i) { // ... })(i); } Similar to the IIFE you can use existing function transformers like bind() which can capture the value of i and automatically pass it into a version of the function it creates as an argument. Your particular case works well for this because your entire loop body is simply defining a function. for (i = 0; i &lt; submitSOBox.length; i++) { submitSOBox[i].addEventListener('click', function(i) { // ... }.bind(null, i)); } * Store the value of the iterator in a unique, persistent location. Given that you're looping through a collection of objects, you have the ability to associate with each of those objects a value which represents their location within the array in which they're contained - effectively the value of i in the iteration as it exists for each object in the loop. This can be assigned at some point in time prior to the loop, within the loop itself, or even get looked up dynamically on demand by querying the original array (a safer approach if the array is mutating) for (i = 0; i &lt; submitSOBox.length; i++) { submitSOBox[i].index = i; // saved submitSOBox[i].addEventListener('click', function(event) { var i = event.currentTarget.index; // or var i = submitSOBox.indexOf(event.currentTarget); // dynamic }); } In the end, you just need to make sure that if you need unique values for each closure within an iteration, you give those closures unique variables to close over :)
I use [this](https://github.com/HenrikJoreteg/hjs-webpack). Never had to "learn" much.
I feel like I've read this before...
Hi /u/sohamkamani, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `sohamkamani.com` and `sohamkamani.blogspot.in`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [sohamkamani.com](/search?q=%28and+site%3A%27sohamkamani.com%27+author%3A%27sohamkamani%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|9|75% [sohamkamani.blogspot.in](/search?q=%28and+site%3A%27sohamkamani.blogspot.in%27+author%3A%27sohamkamani%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|17%
This doesn't make a lot of sense, could you elaborate on what you're trying to accomplish?
That doesn't make sense. We're talking about indentation, you see the same code no matter how it's indented. 
Indentation is part of the code in my eyes. The formatting of the code is important.
You would have to update the reference in variable b as well. In other words you need to run `var b = a` again. However you are spared the issue entirely if you use the single reference to the object, I would be curious to see why you want two references like this.
As stated, native methods don't support that. Sounds like you can have a good learning experience writing one by hand :) Or, if you would like something more supported there are lots of plugins that do this
what is the name of your library/system? Is it on github?
Erm... I'm sorry that what I said upset you. I only work 40 hours a week. Maybe a bit more sometimes. I'm not advocating you need to learn every tool as you said. I'm advocating to learn the right tools at the right time. Focus on determining which tool is right for the job and apply that. Don't ask, "is react going to be around a lot because I don't want to be bothered if it's not going to be around in a few years." The thing is that these are all pretty small libraries. You can learn the basics of React on the job as you implement your views. It's not like you need to go perfect it before applying it. My first react app evolved every time I went to maintain or add features, because each time I learned more than what I did before. I'm advocating being a lazy programmer. Pick the right tools and learn them at the right time to enable doing the least work to the most effect. 
Browserify is great, is the one I used originally and then slowly moved onto Webpack to see what all the hip was about. Do you know if with Browserify I still can have hot reloading and if I can include CSS from JS files? 
Indeed they do! I just edited the original JSFiddle and swapped var for let and for me it didn't work. Fuck knows why :/
Is XVFB that bad? 
Will it suck up 10GB or RAM too?
F'n sweet! Is this written in pure JavaScript? Did you use Node? I agree with with drk4, it feels weird and not very intuitive to be able to switch to guns you don't have ammo for. Jumping also felt a little strange to me, but maybe I'm just not used to it. The stamina bar wasn't very apparent at first. Great work though!
All of which are extremely large and extremely popular, so I'd say it's fairly "tried and true"
Page not found Unfortunately the page you were looking for can not be found.
That was really interesting, thanks :) 
Of course you can but that's not the point. You want your testing environment to be close to your production environment and phantom is seriously lacking. I use Firefox headless testing with xvfb.
Chrome also has some proprietary, closed source modules (I guess some kind of video decoder?) bundled together, that can't be included in Chromium's due to incompatible licences. Aside from that, they're pretty much the same browser, but with a blue tone icon.
Yep, I was including that as part of the custom build. As for the closed source modules, Google refuses to admit that they can be added on to Chromium (as that would mean the DRM could be easily bypassed). That's why we have patches [like this one](https://git.archlinux.org/svntogit/packages.git/tree/trunk/chromium-widevine.patch?h=packages/chromium) which adds support for an external Widevine DRM module to chromium (not the actual module, that's [here](https://aur.archlinux.org/packages/chromium-widevine/)).
I consider myself a coding noob for sure, but if you have some JS experience I think you'll find jQuery pretty easy, just different syntax... 
It looks fine when clicking from the URL here, what is your browser displaying on the address bar?
I'm on my phone, and it is putting this error. 
Well... I mean if no one else is gonna eat it... I suppose we wouldn't want it to go to waste, right? 
I know what you mean, that's why feedback is critical. I would look to your favorite games and see how they're doing it. Off the top of my head, it would make sense to not be able to switch to a gun you don't have ammo for. Have it grayed out. And perhaps don't even show the gun until it's been picked up. I think the stamina meter could go above the player's head like you did with the 'cool-down' for the gun, which by the way I think you should probably remove that as well. Most games don't give an indicator of how often I can shoot. Kudos on developing this though. Reminds me of an old PC game I used to play called Threat for DOS. Let me know if you ever make it open-source, I'd like to scrim through it for learning purposes.
I agree that only learning javascript libraries that will be around in a few years will result in you learning probably just jquery and nothing more. Nothing else in the ecosystem today has that kind of longevity so it's too strict a criteria. And React is currently #1 so anyone interested in a career as a full-time senior front end dev should definitely learn React at this point. You should always know the #1 lib at any given time. (actually let me qualify that by saying it probably depends on the nature of your job whether you are doing lots of projects in an agency/freelance setting vs building and maintaining one long-term product) It sucks that there is so much churn but that is the business. We are in agreement there.
I began with Python that has a beautiful standard library. Whether the best tool for a job or not, it ensures we are all at least using the same tools. JavaScript's churn really has me struggling for a long time. It pained me to see efforts spread so broadly. It made reading source code so much more difficult, for example. "Oh yay, another async library to go understand briefly." I try to mix exposure to what's popular and what's neat or novel or different. But I would probably never implement the latter in any non experimental project. 
Doesn't work on phone, PC works though
~~You can check by simply attempting to get the current position, which will [error with `1. PERMISSION_DENIED`](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) if you don't have permissions.~~ If it's the first time you ask for their location, this will obviously show the permission request to the user - there currently isn't any way to avoid this, unless you're ok with [limiting your users to Chrome &amp; Firefox](https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query). [Edit] This doesn't work in Firefox! Firefox simply doesn't call the error handler if the user denies the request - I haven't tested in other browsers than Chrome &amp; Firefox. [Here's a test fiddle if you'd like to do that](https://jsfiddle.net/L2xbh8uu/) As for asking again, that quite simply isn't possible. Once a permission has been declined, that's it. Unless you manually guide the users to update it (in Chrome this is done by clicking the location icon in the right side of the omnibox, and selecting "Clear these settings for future visits"), there's no way for you to ask again. On the other hand, there's a spec in the works which allows you to [revoke a granted permission](https://developer.mozilla.org/en-US/docs/Web/API/Permissions/revoke), but it hasn't been implemented yet.
Firefox?
It's a replacement for phantom and xvfb and is usually used for unit testing and continuous integration
suggestion you can reduce ethis a lot var width = $(this).children('center').children('a').children('img').attr('style')['width']; var height = $(this).children('center').children('a').children('img').attr('style')['height']; just do `var width = $(this).find('center a img').width()` (or `attr()` .. ) your problem is probably this line $(this).attr('style')['width'] = width; $(this).attr('style')['height'] = height; i dont think thats how you set the style..... probably this is what you are looking for $(this).css('width', width + 'px') // or $(this).width(width+'px') // or this.style.width = width + 'px' 
Reloading the page programmatically might get you another prompt, as a last resort.
the loop happens on the button click. you most likely have to edit the backend script to accept a `lastN` parameter..... or use a cookie `setcookie('last_images_sent', 20); images = dropFromArray(20, images); echo json_encode(images); `
Isn't this what Electron is?
C'mon, they just want you to support those users who still own an iPhone 4. /s I get you, though. Having to polyfill Function.prototype.bind is a very small edge case these days.
Not helpful no, but fun for art. How did you choose the functions? edit: To be more clear, it's not helpful because it's not very accurate, but that being said.. is this really meant to be used as a cheatsheet? I would think not, in which case accuracy isn't super important. I would change a ton of stuff if it was.
Hadn't seen find() before, thanks, will start using that. Good point on setting the variable, will give those alternatives a shot.
Should be helpful a bit, considering it's a mug of course, mostly for spelling. For example I usually don't know if I should use math.pi or Math.Pi or Math.PI etc. I chose things that I have trouble with, for example substr vs substring. What would you change? EDIT: Or you can give me your own list of function, it would help me a ton. Also, I understand if you're an expert on JS you won't find this helpful and would make entirely different cheat sheet. What's your level of experience?
Pff. Details. :P
[removed]
I was saying that Firefox also can run headless. At least from my experience testing Rails applications on my development box that doesn't have a GUI environment.
You technically can't because reassigning variable "a" to different object will always change the reference. If you need to keep the reference, you'll need to copy the properties from the other object into "a" object. e.g. var a = {foo: "bar"}, b = a; var key; //clear all "a" object properties (optional) for (key in a) { delete a[key]; } //copy properties of other object into "a" object for (key in otherObject) { a[key] = otherObject[key]; } 
I mean, what you described is a chatroom. There are a huge amount of tutorials out there specifically describing how to make a basic chatroom app with various frameworks. Here's a mostly VanillaJS one that uses Node.JS and Socket.io: http://williammora.com/nodejs-tutorial-building-chatroom-with/ 
Showing this again because it recently got a small popularity bump and I thought people were finally ready to move away from tj/co a little bit.
People have this misconception that programming is an ever changing doctrine but in reality you just have to learn the eternal fundamentals and you will be set for any CS job. The knowledge is highly transferable.
Ask a lot of questions
I would not use that other example it is from 2013 so most of the dependencies are way out of date. I would look at the docs on the socket.io page they have chat examples there
Yup, I did end up fixing it
I'm doing some extensive user simulation, and selenium (using python bindings) + xvfb + chromedriver + docker has been amazing.
Well, obviously it isn't directly related with js, ...but is a machine learning topic. You're pretty much saying the math of an algorithm has nothing to with /r/javascript 
https://github.com/koajs/koa/pull/751#issue-158584439 this could help speed things up in that regard :D
Brilliant! Thank you so much!
Worked! Thank you so much!!
Thank you! I took your advice and done somehting like this(Really sorry if im taking your time!): http://codepen.io/anon/pen/Mewdvb But the radios arent acutaly sliding the images, I beleive there are no syntax errors, otherwise the console/codepen would point it out. Any ideas where I did go wrong? I am completely stuck here 
Besides, it's not like you can't download more if you need it...
Didn't see the content of the question, but I thought the way they implemented linear kernel for SVM in JS isn't bad at all: https://www.csie.ntu.edu.tw/~cjlin/libsvm/
Take a look at MustacheJS
I've run into memory issues leaving chrome running for long periods but besides that it works fine. Added bonus that you can create screenshot when visual elements fail to load. 
Your code basically works, just two problems: 1. You didn't add an eventlistener so clicking on the radio buttons does nothing 2. Missing brackets in leftAnimation Fixed: var featuredRadio = document.getElementsByClassName("featuredradio"); var images = document.getElementById("images"); // loop over the radios and add a click event for (var i=0; i&lt;featuredRadio.length; i++) { featuredRadio[i].addEventListener('click', leftAnimation); } function leftAnimation() { if (document.getElementById("featureditemslider1").checked == true) { images.style.transition = "left 2s linear 0s"; images.style.left = "0"; } // you were missing { on this if if (document.getElementById("featureditemslider2").checked == true) { images.style.transition = "left 2s linear 0s"; images.style.left = "-500px"; } // i fixed the spacing below here and added the function end } too if (document.getElementById("featureditemslider3").checked == true) { images.style.transition = "left 2s linear 0s"; images.style.left = "-1000px"; } }
This is good news, but isn't it pretty easy to do this already, by running Chromium with the dummy xorg display driver?
like vue.js and mobx?
[flow•studio](http://www.flowstudio.info) 
Does this mostly mean it's beneficial for node. I don't understand why graphical web page devs would want something like this. Thanks
The headless version will let you read and manipulate its state using code. If your JS is supposed to make a form's "Submit" button disabled until valid input is provided, you can test various sets of inputs/clicks/events and then read the `disabled` attribute of the button. You don't need pixels to actually be drawn to a window on a desktop (or human eyeballs physically looking at a screen) to do this kind of testing. Or, you could use a headless browser to load a page, optionally simulate some clicks/events, and then dump a screenshot to a PNG and then use another tool like imagemagick to check if the PNG differs from the previous run.
You can probably start here: http://phantomjs.org/headless-testing.html
How about wolring on an Idea Suggestion site?
Wow everybody seems to be wanting that so I will after my finish my current project. I'm currently busy with a website with nodejs using express and socket.io to make an interface where you can manage your steam bot. You can set up chat commands, and trades to accept all on the panel. 
What I'm getting at is that you don't need an actual browser to do gui testing. All you need is the Dom and the Javascript that manipulates it. 
For the use case of automated testing, sure. People might also use this to create crawler/scraper bots that understand dynamic single-page apps, for instance (I.e. pages where the content isn't finished rendering until some third party scripts and resources are loaded). 
He's given control of most of his JS projects to other developers, but I think he said he would still be active with Co/Koa.
Nice work guys :D We did this a while back on a project with Campfire NYC. It's a pain but once you get it in JSON format it's a just a bit of math to implement some great stuff around it. The hardest bit is accurate timing with HTML5 video. If you want 100% sync, there's a bit of black magic involved in getting a ms accurate `currentTime` from the video element. As it states in the spec, that currentTime reported is not the actual current time of the element. In any case, nice to see some real cutting edge work being done. Great read!
Thanks! :) Sharing is on my "near future" list and I'm definitely going to add it soon.
Thanks, that's very insightful! 
You're right, though not necessarily a replacement, but it seems people expect React to be very similar to JQuery considering that was what they were introduced to as their first library (again, generalising)
I know lots of people that would say the exact opposite :) I guess it depends which one you follow and look for info on, you will hear different things. In the circle of people I know React is the winner, but I know that's not universally true. React has reached a released state, moving from "beta" 0.x status to 15.x, and it's backed by Facebook and picking up speed in terms of react native on different platforms as well as the surrounding libraries and best practises.
What kind of disagreements? 
Yup, that's the repo :-)
Filter returns a new array, and therefore shift mutates the new filtered array, not the original.
Good news, if I am right, according to the file endings in your screenshot it probably Cerberus. Info article about it: http://www.bleepingcomputer.com/news/security/the-cerber-ransomware-not-only-encrypts-your-data-but-also-speaks-to-you/. Here is a tutorial to remove Cerberus and decrypt the files: http://malwarefixes.com/remove-cerber-ransomware-and-decrypt-files/
Expect to work with people, not code.
since the encypted files are named .cerber i guess this might just be it! Thanks a lot for now, ill report back if i managed to undo the damage or not.
Are you having issues with JavaScript itself, or with the browser / DOM? 
I think it's great seeing everything together (component state, html, controller code) in one component rather than a collection of components, so it seems to somewhat lose the simplicity of React. Also if you're splitting out the html and the directives, why not just keep the html external instead of jsx? 
No. BUT -&gt; You can use Chrome/FF add-ons named **TemperMonkey/Greasemonkey** to execute scripts on the pages you predefine and all that stuff is visible only to you/computer where you installed it.
So your problem is that the tools we have are too configurable? That people are using too many different tools? That the tools are too specific? That different tools have different configurations? What is aggravating you? 
Java != JavaScript 
I don't see how restful crud interfaces with simple UIs need such things. Most of the time, the features of the software aren't more complex and the business needs haven't changed. Yet the modern solution is an order of magnitude more complicated. It's almost like people are being fancy just for the sake of being fancy - as if they are bored.
This has nothing to do with JavaScript as a language, but the problems arising from the HTTP protocol. In order for apps to load fast, you cannot have many different JS files, as the HTTP protocol forces the browser to load every file individually, then interpret and execute it before loading the next file. This problem exists both in production as in development environments. To solve it, files need to be combined and compacted. And developers wouldn't be developers if they would stick with just one build tool. So, that is what you see. HTTP2 allows the download of multiple files over one connection, and as such solves the root of the issue. Together with ES6 modules, it will even only download the files that are actually necessary. 
The instructions are very clear.
In almost all the languages you describe above, you have the UI library on the system. The web is one of the few places where for every app you have to include your own. Together with the DOM (with all its flaws), with JS it is possible to have a full Qt like desktop library in 300kb compressed.
(Including citations) You're talking about [HOL](https://en.wikipedia.org/wiki/Head-of-line_blocking). [TCP persistence](https://en.wikipedia.org/wiki/HTTP_persistent_connection) and [connection pipelining](https://en.wikipedia.org/wiki/HTTP_pipelining) have been around in browsers [since the 90s](https://en.wikipedia.org/wiki/Libwww). You also alluded to render-blocking which is solved through async/defer which [is in HTML5](https://www.w3.org/TR/html5/scripting-1.html) (defer has been in [IE since IE4](https://www.sitepoint.com/non-blocking-async-defer/), also from the 90s) and is a simple attribute. In fact, out of order interpretation of JavaScript files based on multiple connection load time can lead to a variety of heisenbugs. So a few of your claims were either inaccurate or had been addressed for many years.
well it seems panda doesn't do the trick. I even managed to recover a original file over dropbox for the advanced mode but it couldn't get the key. it seems she had most files on the network though. so there all least isn't too much damage. thanks for the help anyways.
It is a HTTP problem: https://http2.github.io/faq/ =&gt; Why revise HTTP? 
this page completely supports what i said. And how does the difference between the two justify multiple transpiled X =&gt; HTML, Y =&gt; CSS, Z =&gt; JS languages having to exist in a single project? Again, most of the time, the goals these modern solutions seek to build are actually pretty modest and could have been achieved with vanilla HTML, CSS, and JS in a very reasonable amount of time. It's as if after solving the browser implementation differences, developers had to invent new problems to make their lives difficult again.
One of the issues there is that famous quote from Douglas Crockford that no one actually wants to learn JS and (partly) because of that there were a lot of people who wanted the language to be more like the language they wrote in before (look at Ruby vs CoffeeScript). I agree that a lot of stuff would be easier sometimes to build using vanilla stuff, but because of the lack of a proper standard library, a lot of things then have to be re-implemented. Not to say anything yet about all the differences between the browsers...
What is "the wild" to you? Provide some examples of what you're talking about.
&gt; There is more disagreement about the future of React. Like what?
i like turtles
I hope it's not normal - it's at least a different experience than I have. Half of these files is redundant, that sounds frustrating indeed.
There is one other aspect which is important. Most programmers who are going to do web things are not necessarily traditionally trained programmers. So, a lot of concepts are either unknown or overused. Ember started out as a rewrite of parts of SproutCore (a project I happen to be a part of). SproutCore is a native-like approach to writing web apps, so it is single-page, has a full MVC and many other native like features. Ember started out with the idea that this system is way too much for many simpler apps (which is true to a certain extent), and as such doesn't really have a view layer. I wouldn't be surprised however if people are using Ember to force out an app where they would have had a much easier time writing it using SproutCore. The CSS XML/XSLT is a typical example of having a hammer and seeing every problem you encounter as a nail. And I agree in that sense that there is a part of the JS world which severely suffers from this. But my impression is that the JS world cannot be the only one.
how about a script that would pretty much click that check box if that page was open? is that possible?
The Java ecosystem has always gotten knocked for this. I see this same kind of crazy with JS but I see blog posts and internet comments giving the crazy fawning praise as if it's totally awesome and great.
python has its own issues but I don't have such a visceral seething disdain for it. Try "False - 3 * True / True / 2 + 3 * False" in python 3 and 2 ... see how it's both valid python *and* different results... see how "False == 0" always, and you'd have to do "type(False) != type(0)" because == is ostensibly *already* type and value? (Yes I know why this is too but that doesn't make it unstupid). At least the python community readily admits problems like this instead of pretending it's a special thing that makes their language awesomer.
Thank you so much for your very detailed explanation! Now I understand where I was going wrong in the rest of my code. There were some areas with the exact same problem and I had to figure out a workaround, that was very ugly :P. I very much appreciate your help on this question!
No they acting like legitimate people but you need still pay for unlocking the files. In fact it IS a malicious project.
custom-built orm. I always wonder why people don't just google. You already use it for porn!!!
Yeah this is more or less normal. People in this sub will probably disagree though. So far it's way too convoluted to wrap your head around, especially if you try to follow the cool kids and do everything in like react+redux+webpack+Babel+hmr+eslint+sass etc etc etc. For most small projects it's still much easier to just download jquery and just *do it* I personally plan to take a break from js and return in maybe a year to see if the tooling, language and community has matured
&gt; This **does not happen** with C, python, **java**, perl or PHP. &gt; The **Java** ecosystem has **always gotten knocked** for this. I'm sensing some inconsistencies in your complaint. No one fawns over complexity. And, while people may get excited about an individual tool or build-process, you shouldn't blame one solution on whether or not it is ducttaped together with other solutions. 
This is a genuine lived experience and if you put those quotes in context, it's clearly not inconsistent. I'm certainly not trying to manufacture my lament. Why would I fake a complaint? Honestly I am hoping there's something I'm missing about the process. I don't want to hate this stuff.
1. Things that might be advantages for solo developers and personal side projects often don't scale for professional settings... where teams are larger, and developers come and go from the team. Unfortunately, technical leadership at most companies tends to be well-versed in server-side tech, and less engaged with browser-side tech. So they let the web devs go crazy with less oversight, and end up with a bowl of spaghetti that needs total replacement after one or two developers leave. 2. If you're using *both* Grunt and Gulp (or whatever) within a *single* project, then that's just tech debt that you were too lazy to clean up. You're not developing, you're dabbling. I respect people who stay up to date with their programming language (e.g. writing ES6 today with Babel or TypeScript). I don't have respect for mediocre developers who endlessly tinker with build tools and think that's the same thing as deepening their programming knowledge.
Have any examples? I'm always a fan of simplicity and minimalism
Hopefully [sharedArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) make it across browsers and I can finally start doing real asynchronous things and not just out of order synchronous things while pretending they're async. 
Not literally "hello world" but figuratively as in, ostensibly a simple and direct goal only to be surprised by an unusual amount of ceremony, scaffolding, and complexity required. Perhaps the psychiatric part is that I'm old enough to remember building the same kind of thing with far less stuff and getting the same results. Things like a bank website don't need JavaScript, at all. I'm looking at a balance and transferring money to pay bills. Nobody cares if it's a single page app. Not a single customer will close their account or open based on this. They could have the same site from 1999 and literally nobody would complain.
I think React is great for people who love JS and people who keep up to date with what is going on in the JS world. React allows them to pick the specific tooling and libraries they like and allows them to use them in the way they want. The React &amp; Redux data flow is also great but it is different and takes some getting use to. JSX is also great, much better then Angular's templating engine. In React you write templates in JS, which sounds like a bad idea at first but once you use it, it's great. Angular on the other hand is a full fledged framework. It provides you with a set of tools that everyone in the Angular community will use. This can be a good thing because it provides the platform with stability. Developers don't need to research a hundred different libraries then decide on which one to use. You also don't have to worry about a library that you're website depends on losing popularity and the maintenance of the library slowing/stopping. It's good for new comers because every tutorial will use Angular in the same way (the same can't be said for React). It was written for typescript and all of the guides and documentation are written in typescript. Typescript is great and can help developers catch a whole class of problems that you can't catch in JS. The Angular team has also announced that it will be coming to more languages such as Java, C#, PHP and Python. This is a huge deal because there is a huge community of programmers out there who dislike JS. Angular is going to be more familiar to enterprise developers because it uses a lot of design patterns that they are use to (dependency injection for example). React on the other hand uses all kinds of crazy new ideas (which are great) but the enterprise community doesn't like crazy new ideas, they like tried and tested patterns. I think React will remain popular among people who love JS. If you love JS then you're going to love React, it's great. I foresee Angular gaining popularity in the enterprise community and among programmers who dislike JS. 
This is what I came here to say. It sounds like you just do not understand the JS environment you are working in. Someone who does would not have Grunt &amp; Gulp scripts, for instance.
And by "in the wild" you mean your own dev environment, which sounds horridly bloated unless you are actually developing complex single page applications. I think you just need to learn and understand what the frameworks do, and then make the decision whether you need as many as you currently have. Its insulting to say that there are too many options, or JS is too customizable. The developers working on a project choose what to use and how to use it. So the fault lies with your team.
Update 2: **issue has been fixed** (I had to update the router library for Chrome 51)
I've seen Java projects switch from Ant to Maven to Gradle in &lt; 5 years and also projects that use some combination of those all at the same time.
Update: **issue has been fixed** (I had to update the router library for Chrome 51)
If it's a single digit, you can figure out which one it was: for(let i = 0; i &lt; 10; i++) { let a = (i + 7) % 10; let b = a - 7; if (b &lt; 0) { b += 10; } console.log(i, a, b); } Output: 0 7 0 1 8 1 2 9 2 3 0 3 4 1 4 5 2 5 6 3 6 7 4 7 8 5 8 9 6 9 `% x` becomes a one way thing if the range of the input is larger than x: &gt; 13 % 10 3 &gt; 23 % 10 3 Since several inputs yield the same result, we can't tell which one it was. Anyhoo, as /u/luckygerbils already mentioned, your code contains two bugs. `7 % 10` is always 7 and since you have a string on the right-hand side, you're doing string concatenation instead of addition.
I engage in many open source projects along with lots of side contacting. This is a smooth and easy operation with the exception of what i call "modern js" projects
I say, there's simply too many programming languages!
&gt; It's quite normal for me to find the following files in a modern js project: Not in any of my company's modern js project. &gt;then I have to run multiple daemons simultaneously to get a simple hello world page to load ... its obscene. Yes it is. It means your project was created by people who read about things on the internet and then let the internet tell them they needed these things without doing the smart thing and questioning whether they really did and why they couldn't do those same things themselves or what was wrong with how they were already doing things. Now you've got all these tools that have creeped into your company, not just your project, and everyone will tell you it's impossible to do anything without any of them. Now people will tell you it's impossible to just open a text editor and create a "simple hello world page" without all those tools. In the meantime, my multi-million dollar development company creates amazing web sites and applications using only make and git.
I usually use pornhub for porn and, to be honest, most of the packages you find there are just too bloated 
You should definitely check out Promises: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
&gt; React is the wild west and Angular 2 + typescript is the standard. This sounds like something a corporate Java dev would have said in 2005
This is a case where client-side Javascript is probably not even necessary. One of the attributes of the &lt;form&gt; tag lets you specify a URL where you can submit the data. This will either be a backend you wrote yourself, or a 3rd-party mailing service. Many of the 3rd-parties will supply you with a full HTML snippet you can drop into your site.
Fun fact; I actually learned something from this line: if (new Date().getYear() == new Array('2016')[0]) { When I saw it at first I thought "that will never work" because I know that `date.getYear()` is supposed to return `(year - 1900)`. That line would always be `116` and the condition should always evaluate to false. Then I checked, and it turns out IE8 returns the full year (`2016`). This is a subtle and clever way to determine if the user is on a vulnerable browser. I guess this is why using a 7 year old browser is a bad idea. EDIT: Whoops! I had replaced `getYear` with `getFullYear` so I could see the output code running in node. That was kinda the whole point :|
Those files are part of tools that are are for **your** convenience, i.e. they are part of the developer build process. Don't use them if you don't want to. They have nothing to do with javascript. If you want to write your JS frontend in notepad as separate .js files, go ahead - there is nothing opinionated about JS development. 
Hi Chunky, you're kind of asking your question wrong here. Let me explain, PHP is a back-end language that can be used to deliver html/JS/ (files in general), run it's code server-side, create sessions, etc (just like any back-end language) - to create a client-side interaction, which is what you're asking about (a contact submit form), will almost always be based around utilizing JavaScript (that's the point of it after all) to contact a back-end server of some sort, which will then handle creating/distributing/sending the e-mail. NodeJS is JavaScript, but it is used on the back-end (like PHP) and thus has a different environment to be utilized in. Consequently, if you wanted to create a contact submit form from scratch, you would need to both setup a front-end and back-end environment that work together to collect the requests/data from your users and in-turn handle their requests on the back-end; for someone with a month of just JS experience this will be a challenging task. Luckily, there are sites like https://postmail.invotes.com that handle all the back-end concerns for you and also provide you sample form HTML that you can simply copy/paste into your own front-end materials as you need. I'd read it over and setup an account/token and see if it will meet what you're looking for. Good luck!
Reading through the comments it sounds like the issue is with all the frameworks, libraries, and developers that try to use as many as they can in a single project. Javascript itself is flexible enough to let the developer do what they want. If you want sanity and structure it'll let you do it. Unfortunately there's a lot of people out there that don't know how to use javascript for what it is and try to make it like other languages or shelter themselves from it by adding library after library. Javascript is what you make of it, and a lot of people make horrible things of it.
What system specs are you on? I test largely on iPhone/iPad/Mac OS X, and occasionally windows. 
Kind of... I don't blame you for thinking JS has a lot of flaws, because it does. However, as I read somewhere, "javascript is the only language that people use without learning how to use it" - this will always result in a bunch of bad practices combined with bugs; this, summed with the fact that it has a low barrier of entry: it's way too easy to program anything in JS, and this end up resulting in another batch of bugged and horrible programs. If you want to be a good JS programmer, you have to learn how to use JavaScript, what is a good practice and what is a bad practice. For instance: NEVER using == and != operator, and always === and !==. JS received a lot of hate since ever because of all these flaws and weird things in the language, but things are getting better. Read the documentation for the ES6 and ES7, and see how many features are being added/removed to make a more consistent environment. Another thing to keep in mind that the 'cool kids of JS' are not a good example to follow: "Today I will show you how to make a very simple app that prompts and displays your name. Let's start by downloading Sails, Angular, jQuery, Bootstrap, Morgan, Bunyan, Gulp, Browserify, and these other 600Mb of dependencies". Just stay away from projects that do this kind of crap, it is just plain stupidity. About 'not happening in C...' - I worked with C, Java and PHP before, and I *kind of* agree with you, but that is because these languages are not receiving the same attention JS is. When you start having problems with memory leaks in C that you don't know why they are happening, or working with an extremely convoluted program in Java, with hundreds of plugins and dependencies, you understand that it's not because of the language, it's because of bad engineering. When I started programming JS, I loved php, and hated JS. Nowadays, I love JS and hate php - I realise now that most of this hate was because I didn't really understand how it worked, so I tried to do something stupid, it failed, and I blamed the language. But let's thing about some of the advantages of all this hype about JS: it can 'unify' the programming languages. In my opinion, we have waaaaaaaaay too many languages nowadays, and instead of all of these languages, we should have 1, and focus in making this 1 language the best we have. In my opinion, JS is a great language to do this, since it is extremely flexible and popular. Yes, there are flaws, but we can correct them.
Been there, decided to Vanilla JS everything. Then I took them one by one - first, I messed around with RequireJS (yeah, I know). Then I played a bit with some small NodeJS scripts. Then I took a ride on the Webpack train. Then ES6, then React, etc. My point is - take it easy, one at a time. Of course it's overwhelming if you want to understand everything JavaScript at once. It took me two years to go from kinda-vanilla with jQuery to VanillaJS to nice, modular React components + NPM modules all wrapped in a codebase that doesn't make me go crazy.
It's a good read. But if you want to help newcomers I doubt that make them drown in a bucket full of nouns is actually helping.
This is a must have. Fetch is essentially useless for any real-world application without cancellation of requests edit: people who downvoted: could you at least be bothered to explain why? 
she did have 11 installed though ;&lt;
You still need a database to store user data on a server if that's your app requirement. Flux is a just an architectural pattern which is supposed to make it easier to figure out which part of your app is triggering state changes. Your database requests would just be part of that system.
i like turtles
&gt;Use no framework at all, and try building a site with jQuery and little else. 
Well, they usually ask you to create a webpage of some sort (institucional, shopping, presentation, etc) so practice exactly that. Make some simple webpages with technology you get asked alot to use. After a few ones you will have hit some of the time consuming problems, will have some reusable code and fell more confident to just go for it and try to complete one of those contracts. Be ready for long days on the first few ones and don't slack even if the project is going at a decent pace.
getYear does what you said, but they're using getFullYear which returns four digits. 
&gt; Cannot you find the files you need? &gt; Is the content of the files that you looked for not readable? &gt; It is normal because the files' names, as well as the data in your files have been encrypted. &gt; Great!!! &gt; You have turned to be a part of a big community #CerberRansomware. Oh, cool!
I have yet to build a web app where I didn't need cancellation for something like an API response cache.
Yeah, that's pretty much the standard idiom for "load all files matching a certain pattern and do something with them". Would seem the OP could use that type of approach to do what he wants.
then release a v1.0 like every other library ever - not move from 0.15 to 15.0. It's ludicrous. It shows wonky judgement, and a "do whatever we feel like" mentality. No thanks. It just shows me I really need to think about ever trusting it. Maybe Angular should go from v1.5 to v20 instead of 2.0? Then React would play catch up and go from v15 to v150. That's what react has done, and it's just plain dumb. 
#lolangular
If a number is even then its remainder when you divide it by 2 will be 0. If it's not 0, then it's odd.
Thanks for the advice. How do you get contract jobs exactly because I'm currently Learning JS and I'm clueless on how to get job(contract/freelance) Thanks
correct me if i'm wrong, but this sounds a lot like vuejs's reactive model?
Basically it "lies" about the current time every time you check it except in the `timeupdate` event. How we handle it is by using that time to set a historical start time of the video (in relation to `Date.now`, or `performance.now`). From there, to get currentTime (at any arbitrary point in time) you subtract the startTime from the current time (`Date.now`, or `performance.now`). Of course this has to be recalculated if the video buffers or if it's paused. But most of this can just be solved with a simple abstraction layer around the video element itself. 
React is not a framework, it's a fairly sparse(albeit powerful) view library. 
&gt; &gt; This code is just concatenating a "7" in the end of each character if the input. And you could reverse that by just using I understand, I tested my code with alerts and saw that modulo wasn't applying anything additional. I'll just substring the last digit and swap my elements back to order.
Can the javascript framework explosions finally stop?
[Domino](https://github.com/fgnass/domino) might be useful - it's an standards-compliant implementation of the DOM, for Node. You can write your code so it gets given DOM nodes, and then either call it from the browser with real ones, or from Node.js passing Domino DOM nodes instead, and everything should Just Work. In reality there'll be a few little differences here and there, but it'll almost certainly be easier to get working than using an entire headless browser to power your application.
&gt; just javascript ecosystem things
&gt; XVFB It is when the distro your company is using is too ancient to install a prebuilt package for `xvfb`.
Yeah Phantom is pretty bad. `Nightmare` looks like a suitable alternative to Casper/Phantom, [available from npm](https://github.com/segmentio/nightmare). Since its a node module you can actually use packages from node in your test scripts, which is a big plus. 
I have very little invested in this as I've never used Angular really but I am curious to see if we have a repeat of the Python 2/Python 3 schism here. . . I'm all for making improvements and big changes but if you do too many all at once, you run the risk of pissing off a LOT of people.
It seems that the same use case is already handled by reject. new Promise(function(resolve, reject) { reject(new Error("failure to resolve value due to ___.")); reject(new CancelledError("failure to resolve value due to cancellation)); resolve(value); }); It is then a simple matter of type checking to determine if the request was cancelled. .reject(function(error) { if (error instanceof CancelledError) { ... } }); I believe the semantics of a rejected promise allow for cancellations. If, for any reason, a promise does not resolve to its promised value then it is rejected.
Sweet, if any questions come up let me know.
Let me know when you get it done, I'd like to fork the project, barely rename it, and "improve" it in completely unnecessary yet incompatible ways.
What would be very useful is to be able to inspect a promise's status externally and get its value/error synchronously without chaining a callback. There are many cases when I've wanted this but it is missing from the ES6 flavor.
Well I had a function that substringed after organizing the place holder. function swapElements(swap) { return [swap[2].substring(0, 1), swap[3].substring(0, 1), swap[0].substring(0, 1), swap[1].substring(0, 1)]; } 
I roll my eyes every time I see a project that is jam packed with all of the hippest trends like. A widget built with Angular, Coffeescript(last weeks fad), Stylus, Haml(out of fashion last week) that all need to have extra tools just to compile them right for something that could be simply done in Vanilla JS, CSS, HTML. I am currently working on a Angular 1 legacy project that was built with all of the latest trends in 2014. I love learning new programming languages, especially ones that EXTEND what I can do. For example I am currently learning Scala, but I hate learning CSS-&gt;Less-&gt;Sass-&gt;Stylus which are all essentially the same thing just written in a new syntax. Also I don't buy the fact that Massive, Abstract, Monolithic plugin heavy JS Frameworks really solve any problems. Often times people think "oh if I learn Angular, then I don't need to learn JS", which leads to a wiring of vendor plugins. Also Angular was sold as "The Amazing solution to all problems", but now they're just like "Eh, yeah it had problems". So right now I am essentially converting the Angular App into modular Vanilla JS + RXjs components. 
That's merely a design choice. You could use a different methodology for response caching.
To put it another way, your `MySQL` or `Postgres` would be a data store for persistence (i.e, long term storage), whereas `Flux/Redux` are data stores for the client side, just for use within your app. The Flux/Redux store caches some of the persistent data, and typically contains data that never makes it into your database at all. Understanding the difference between a server and a client would help clarify this for you.
We've come a long ways in the past 5 years, why ask for it to stop? 
It's no less webpack-ish than taking a bunch of JS modules and compiling them into a single file :) It's just the underlying languages and output format is different. [This is a common thing for Angular 1 apps to do too](https://github.com/dmachat/angular-webpack-cookbook/wiki/Angular-Template-Cache)
nobody is saying it nullifies the need for cancelable promises, just that promises aren't useless without it. 
Don't forget to write multiple posts on Medium.
I don't know, we've been using Angular 2.x here in production and everything ̢̝̖̩͓͕͈̞̣͜h̨͖̞͕̩̰͔̜͎ͅa̡͇̝̣̱̘̞̭͚̙s̡̢̥̮͈͍̰̝̭͉ ̧̡̣̺̱̝̗͕̯̬been going j̼̣̗̟͇̻̝̠͈ͅu̡̜̲̭̻̟̯͎̭̱s͎̳̤̹̟͖̞̝̩ͅt̢͕̹̺̹̣̪͎̞̖ ̝̟͚̣͖̠̫̱̯̹g͕͓͈͍̺͙̠̬͜͜r̡̢͕̺̳͔̥͖̻͙ȩ̨̞͓̯̺̠̫͜͜a̦̤͎̠̞̩̭͈ͅͅt̡̜̱̗̳̦͕̮͕͎ ͍̥̠͙̩̼͖͇̟̥w̟͇̬̫̗̻̞͔͎̙į̺͉͙̥̪̹̹̟͔t̢̜͔̥͓͙͉͖̤̼h̞̰̬͎̝̱̼͇͉̙ o̮̺͕͉̼̣̣̻̘͙u͎̦̞̬͉͎̞̺͜͜r̗̝̳̥̝̬̰͓͈͜ ̨̘̜̣̮̞̹͇͈͇s̗͖̤͉̱̣͚͍̫̯į̞̟̭͎͙̭͔̖̬t̯̹̫̥̜̥̜͇̱ͅȩ̝̪͚̘̣̺̼̩ͅ'͕͈͇̩̻͎̣̱̮̲s̡͙̺͉̝͍͙͔̞͜ ̧̧̜̭̖̘̯̫̘͙B̬̣̜̳̮̥̮̻̞͜L̞̪̲̺̣̥̺͔̟̗O͇̥͓̹̙͚̣̳͎͕O͈̣̮̯͇͇̟̬̱ͅD̡̡͚̜̩̺̦͎̠͍ ̪̟̱̥̹̺̺̺̗̭I͍͍̖̟͉̬̙̮̼ͅS̳͉̻͚̝͈̯̮̙ͅ ̧̢̟̹͔̻͙̺͍̟A̢͇̘̬͔̣̲̥̜ͅS̪̯̭͍̞̼̤̭͔̟ C͇̝̤̜̜̺̫̺̘̝U͓͚̱̜̱͓̙̮̮ͅR̡͇̝̭͕̙̙͕͙ͅD̘̦͈̺̻̯̰͙͉̼L͖̖͚̻̻͈̻͈̟ͅE̯̪͈̯̮̦̮̰̲̙D͍͖̬̥͔̲̱̘̣̤ ͎̞̯͔̹̭̠͙͜ͅŅ̧͔̜͕̬͓͍͕̫I̧̢͈̘̫̹̮̳̪͎G̡̢̨̻̫͍͎̬̺͓H̖̩̰͙̪̝͔̣̲͜Ṱ̢̖̥̟͍̰̩̱͎M̨̠̺̞̳͎͕̗̪̥A̧͔̩̲͇̤̝͈͎̘R͓͚̘͎̞͕̰̙̗̺E̢͇͕̹͈̺̥̥̗ͅS̹̺̞̤̦͎͙͚̻͜ Ǫ̨̻̰͇̳̬̗̗͜N͕̳͙̲̟̺͕͓̳͈ ͎̦͎̖͈̻̣̬̬̳T̪̳̗͎̭͙̻͉̙ͅH̡̧̯̖̯̰͙̭̭̞E̲̗̗̳͔̺͉̖̤ͅ ̳̩̹̥̟͔̘̱̮̘B̜͇̪͎͇̪̜̱͓͙Ǫ̧͉̰̭̱̳̟̝̥I͖̞͎̠͖̲̖̳̠̬L̢̜̮̙̹̩̘͔̞͎I̢̙̟͉̦͎̭ͅͅͅN͇̖̭̩͎̣̠̻̯͚G͚̤̜͉͕̺̲͜͜ͅ ̡̤̯̗͈̗̖̪̤͙S̡̺̮̹͓̰̬̱̗̜Ę̡̢̱̺͚͈͈̺̗A̞̣͉̙̮̭̙͖͙̩ ̼̝͈̦̪̤̖̼̲̱O̞͈̘͇̪̙̳̝͖̟F̙͎̼̫̗̤͎͖̻̰ ̥̰̻̰̦͕̟͔̰̜T̩̠̤̖̞̠̹̻̮͙H̡̧̜̥̻̻͕̝͉̲E̲͉̺͇̗̩̳͖̝͔ ̧͈̹̥̬̺̝̟̖ͅV̢͙͙̣̲͍͙̭͜͜O̡̱̲̹͕̼̭̺̺̪Į̪̖̮͓̭͔̺̤͜D̢̬̠̠͕̞̗͜͜ͅ ̢̧̺̳̭͍̞̼̼̺H̨͙͓̳̱͇͔̦̹ͅĘ̨͉͉̭̤͔̹̖̤ ̢̡̯͚͇̹̘̯̩ͅC̨͚̠̲̘̬̹̼̘͜O̢̢̢̡̳͕͖̝̞͙M̡̮̹͎͚̲͚̗̖̲Ẹ̜̼̦̠̭̬̥̜̖S̳̳̦͎͈̱̺̞̤͖
react is basically guaranteed stability since they actually use the tech in their main products 
Yes but I would suggest using a library that can hash the array to make this more efficient. Alternatively use a library like Immutable.js to allow for easy comparisons. This is how I compare the redux store to a react components state when deciding whether or not to update state.
And the grief I get when I say that I prefer React/Redux
I loathe Facebook, but react is awesome.
My take away here though, is that once you learn the framework... it's not really any more *time* to use. The complexity increase is negligible. Especially on something smaller. However, why do things 2 different ways. Learn one way, and just stick with it for a while. It's much easier that way. Even when building small stuff... Sticking with something useful that you know is going to make you much much faster, and will be much less of a mental burden.
Modern JS is a relative pleasure to work with. Getting one's head around the functional parts can be a challenge. Mpj has some really good walkthroughs. https://medium.com/humans-create-software
You will definitely want to understand react really well before having fun. The good news is that it's relatively small :)
We can hope.
ActionScript 2 did the same way back.
Ember is a beast. 
I think the top voted comment from 4 years ago still applies. &gt; Not to be a hater, but the original design patterns were made for C++ and Java and many (most) don't apply to javascript. Eg, What's the point of a command pattern in a language with first-class functions? What's the point of a Singleton in a language with global variables and no classes? Design patterns for javascript would be an awesome idea, but it requires more thought than simply translating them from other languages.
I... _think_ the answer is yes. Also, you may want to look into using memoized selectors in your `mapStateToProps`. If the return value from `mapState` is shallow-equal to the last return value from `mapState`, React Redux won't re-render your component. See http://redux.js.org/docs/FAQ.html#react-mapstate-speed, https://github.com/markerikson/react-redux-links/blob/master/react-performance.md , and https://github.com/reactjs/redux/issues/1783 for more performance information.
You likely should use the term "JS tooling" instead of JS. ES2015 is a really fine language.
Has anyone told them that Angular 2 isn't being adopted as much as they had hoped? I think the Angular team should look at what happened with Python 3. 
Yes. Not only did they make significant breaking changes, they also expect developers to adopt typescript. 
Learning the quirky parts of js is no different than learning how to effectively manage memory in c++ apps or using Java's clunky web APIs. Just because it's not inherently familiar to you, it doesn't make JS a bad tool. It's blazing fast on the server, small usage footprint, and is excellent for prototyping. A lot of companies start with JS and migrate to something else when their APIs mature. If you're referring to clientside JS? Well that's not going away anytime soon so I'd soften up. 
ill fix that. thank you for pointing this out
&gt; It has somehow become the most complex, elaborate, time-consuming, fragile, and convoluted platform for writing software. I'm glad you included some specific examples of things that you are upset about, or comparisons to these other ecosystems to show how they are doing things better.
The tooling in JS is no different than any other language to be fair.
Thank you for the detailed response. Could you briefly explain what a "code assertion" is. I see the line with TestTool.assert.
And remember to sell courses worth hundreds of dollars, which should be released exactly around the time the framework best practices actually start to emerge and change the way it was supposed to work when it was first launched.
&gt; The Angular team has also announced that it will be coming to more languages such as Java, C#, PHP and Python. I had not heard that. I would be really surprised if it gains any traction with those languages given the great frameworks that already exist. 
I really like react, and have used it for web development for just over a year. I have not used react native outside of "hello world" and toy apps on iOS. But from my perspective, it looks like a lot of the code could be shared, or at least allow you to leverage what you learn in React. 
Classes in ES2015 are not the same as classes in C++ or Java. They are convinient for prototypical inheritance. And that's exactly what your link says. &gt;JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax is not introducing a new object-oriented inheritance model to JavaScript. JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance. They are not the same, treating them as such will lead to pain. Class based languages like C++, C#, and Java will have different patterns than functional/prototypical languages. ~~A specific example is that ES2015 now has Object.observe,~~ ~~So the Observer pattern is not needed.~~ Proxy would be used to implement the observer pattern by using its "set" trap. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy And generators or promises remove almost all of the scaffold code in the State Machine pattern. https://davidwalsh.name/concurrent-generators , scroll down to "State Machine: Generator Coroutines" Edit: Object.observe is not going to be in ES2015, discussion here: https://esdiscuss.org/topic/an-update-on-object-observe
The "framework explosion" is a symptom of working around JS deficiencies - so not until the language gets better. 
I agree (for the most part) that having multiple builders is indicative of problems. However, I have seen such madness due to "compatibility" issues (also known as I didn't want to mess with it long enough to figure it out, so here we go), where grunt is used to kick off integration tests while gulp is used for production pushes. I'm not sure this style of architecture is necessarily limited to personal side projects... nor are these problems. Poorly designed projects can exist in javascript AND in other technologies (recent example from my past: nuget references + direct DLL imports of the same packages, but from other solutions such that build order matters. I believe I got a lot of gray hair during that unwinding.) I'm not that experience in JEE, but I imagine the same problems can exist there too. I think it's oddly "en vogue" to bash javascript because it's so maliable, you can cherry pick terrible ideas and apply it to the entire ecosystem. It obviously is of no concern if that's what you do in your personal life, but to make such a blanket generalization seems rather limiting.
React Native 
Yes! Changing the method for setting the style did the trick. Thanks much \^^
Thanks, I'll take a look into those methods to see how easy it'll be to implement into my workflow. :)
Thanks, I'll take a look into that to see how easy it'll be to implement into my workflow. :)
Every new language is required to "reinvent the wheel" to some extent, right? The difference is often in the approach. It bums me out to see people think in terms of "but you can already do that in [language]!!!", while dismissing that aspect. For example, I once tried to use Laravel (PHP framework) and I hated it. Later I came across Express JS and I loved it. This doesn't make a lot of sense, because one borrows heavily from the other. You see, the problem wasn't the library -- it was the language. I just didn't like the PHP implementation. As for interesting things that are more JavaScript-specific, I think the isomorphic stuff is really cool. And hot-reloading with projects like React and Vue are pretty amazing.
That definitely looks like it would fit the standard HTML bit, and I could probably pull the document.getElementById block into a separate .js file to clean up the main document. If some of the other suggestions don't pan out, I'll definitely play with this!
Let the "Airing of Grievances" commence 
I pay attention and I loath Facebook. React is their only contribution to this world.
This is a very impressive project with a lot of use cases to easily imagine.
This is going to change the game for sure. https://lisk.io/
Lots of OS work and big company that dodges the enterprisey office culture (its a meme here to hate this though I guess) the resentment towards fb here versus something like amazon seems to suggest that perception here is just shaped by a few bad articles that manage to frontpage
I haven't downvoted you, but my assumption as to why people are doing so is your use of "must have" as opposed to "nice to have" and your use of "useless" as opposed to "less useful"
I believe the traditional method of commenting out TODO's, is just to do it as such; // TODO update function I can't say I've come across anyone who makes the console or a debugger output pending changes (seems like more work than necessary). Usually I will at least make the function return or step correctly when putting up shell functions, e.g.: if (function1()) { function2(); } function1() { // TODO update function return true; }
They're just sugar. Worse than that, they are sugar that actually remove (or obscure) existing features from the language. Object.create is a much more robust solution for inheritance in JS. Even with the class keyword, there is no such thing as a "class" in JS, there are objects and objects have prototypes. No matter how you slice it, this will always be true unless they decide to break the internet. This trend of accommodating lazy devs coming from other languages who don't want to learn how prototypal inheritance works, or why it's actually a much nicer system (in JS) of handling inheritance really kinda bugs me. 
This looks promising, but unfortunately I'm not able to wrap my head around a couple missing pieces. Using the template/example on [this page](http://www.embeddedjs.com/index.html), I typed the following in the template box: Hello, I need to get some new &lt;%= title %&gt;. I already have a &lt;%= supplies[1] %&gt;, but my &lt;%= supplies[0] %&gt; is gross and I can't find my &lt;%= supplies[2] %&gt; anywhere. The result displayed as expected: &gt; Hello, I need to get some new Cleaning supplies. I already have a broom, but my mop is gross and I can't find my duster anywhere. So, the concept here works for what I want to do, but I can't get my own working. I downloaded the ejs_production.js file, linked to it, created a template.js file and put in a few variables. It's displaying the code (" &lt;%= %&gt; ") without rendering the variables. Thoughts on what I'm doing wrong? 
You're trying to paint a house with a drill. Use Gulp.
Because native language developers dismiss all of javascript because they don't care to try to wrap their brains around prototypical inheritance /bitterness
Object.create has a performance penalty http://mrale.ph/blog/2014/07/30/constructor-vs-objectcreate.html