If it's pure HTML, why are you posting in /r/javascript?
Here is the shareable result : [https://www.chatappvisualizer.com/viewResults/Ohj9e7JlEfYljTfDCtgo](https://www.chatappvisualizer.com/viewResults/Ohj9e7JlEfYljTfDCtgo) Let me know if there are some issues, mainly bugs will appear due to date formats. If so please paste the date string and let me know your date format.
Thanks!
I showed up late to the party last week, so I thought I'd post again...really looking for feedback to see if this is something others might find useful. Anyone is free to use it for anything. I'm not a pro JS developer, but I am interested in it. (Mostly I do games in C#.) &amp;#x200B; COMPO is a "reactive" templating system...basically, you take a chunk of HTML and create replaceable tags wherever you like. The code then allows you to instantiate the template anywhere in the DOM, and generates setters/getters so that you can update the property however and wherever you want, and the DOM updates instantly. You can use it not just for dynamic text, but for style properties, tags, etc. Literally anything. You can also have hierarchies of components to create more complex components. &amp;#x200B; Here's a link to the jsFiddle for the code, and at the very bottom is a simple demo of it working. Thanks! [https://jsfiddle.net/an57etg2/4/](https://jsfiddle.net/an57etg2/4/)
I don't think so. Since PHP is dynamically typed language there is no way to compile it to Wasm because Wasm is strongly typed and needs this information to work. JavaScript has the same problem but there is a project for TypeScript that should by able to compile TS code to Wasm (but it's not ready yeath as I know). So I believe that TS is possible future of JS... a chance to survive.
Great tip! Yeah I do end up querying the Dom every frame, but storing the elements in an array would eliminate that, very good idea. Thanks!
just one image. I am using math.random to get the length of the image array and get one image from there. Then I set that Image in one of the image tags (there are 16 img tags and they are selected by random using math.random)and that is all working. I am stuck at implementing this if(userClickedBox==HasImage){ you win. } else{ try again }
Yes it definitely improved my understanding of how JavaScript processes touch and keyboard input. Was a fun experience all around. 
Looks interesting so far...curious as to why you went with real-time database instead of cloud firestore, which is recommended for new projects.
Node project without a `package.json` 🤔
That's really cool! I couldn't figure out how to rotate though lol
Very cool but jQuery in 2019?
btw, does anyone know why is fps low on ios safari, until you touch main stage on codepen... 😕
Personally, I took a liking to the real-time database which is one of the reasons. Another is I have in plan to use electron application for clients which will be connected to Clockuvo server, so the real-time database seems like a good deal for let's say project manager to check how developers are using their time.
I love it, it works great! Just a couple of suggestions, in case you’re a perfectionist. When I slide my finger down to quickly drop the Tetris piece, it seems that any slight left or right movement will cause the piece to land left or right of the intended target. I think it would be better if it could save that position and recognize the down-swipe, locking in the lateral position. I haven’t looked at the source code, but if your control logic loops through possible touch inputs, you might consider testing whether a down-swipe occurred before allowing normal lateral movement. Although that would still allow the error to occur if there was slight lateral motion prior to the down-swipe detection. One way you could sort of circumvent that is to implement a delay timer for controls. Basically you could set a timer each time control input is detected, and not allow the movement to change during that time (we are talking less than 0.02s). And store all the inputs that occur during that time interval into an array. Then you can see which inputs are in the array and prioritize which inputs to execute, which ones to ignore, and the order of execution. Just a minor detail, but something to think about. The other thing I noticed (and I could be totally wrong about this) was that the pieces wouldn’t move after they connect to set piece below. If I recall correctly, the old school Tetris game actually maintained a timer once the piece was touching another piece, allowing you to move the piece left or right until the timer ran out. Actually, I think I’m some versions of the game, each time you moved it left or right along the pieces at the bottom, it would *reset* the timer to connect it, allowing you infinite time to actually set the piece as long as you kept moving it around.
Finally finished [chatappvisualizer.com](https://chatappvisualizer.com) Drop in your whatsapp conversations and get some insights. Here is an example: &amp;#x200B; [https://www.chatappvisualizer.com/viewResults/Ohj9e7JlEfYljTfDCtgo](https://www.chatappvisualizer.com/viewResults/Ohj9e7JlEfYljTfDCtgo)
I enjoyed this! Great job! 
You can be associated with organizations outside of work. Ever heard of open source?
I played it, touch controls are great! Although when I got to level 2 with ten lines completed, the whole gride was cleared and nothing happened after a minute. I was using Firefox Focus on a Note8 if it helps (Android 8.0)
Thank you in advance!
The key here is that you didn’t use canvas. That’s tricky and you did a great job! You nailed the touch controls too they feel fantastic.
&gt; most newly developed sites aren’t using jQuery Nope. There are still new website created using jQuery everyday. It isn't going anywhere and it's a good library for DOM manipulation. We use it everyday at work.
Eh, you’re probably right. I mean, unless you’re building something with a ton of DOM nodes that need high performance manipulation, jQuery is usually fine. But things like smooth animation of large graphs and other uses... there are better alternatives.
I'm on phone and can't look it up, but have you tried detuning it? A semitone is 100 cents, 12 cents in an octave, so at a detune of 1200 it will be twice as high.
&gt;most working front-end devs I know would look at me concerned if I said proudly that I had build something in jQuery It's funny in a sad way that most devs I know wouldn't even be able to select every &lt;p&gt; inside a &lt;div&gt; with the class "main" without jQuery. :( But that's likely because of my company, which doesn't do any effort to improve the quality of new developers. That's how you create someone with 5 years of JavaScript experience who can't do anything without external libraries. Not everyone seems to be motivated to improve themselves if not specifically asked for by an authority. 
In the case of this app – why not? What is the pro/con for the user?
Thanks for the tip. Yeah I think your suggestion is good, one thing I could do is detect of the downward motion is greater than the lateral motion then prevent the left right movement altogether. The game does allow sliding while along the bottom though it's easier to do on keyboard.
Thank you!
Thanks I'll see if I can recreate that
Is it open source? I'd love to contribute, make it a PWA, maybe add some sound and a scoreboard.
Thank you!
Ah yes, so I was definitely wrong about that. I bet the touch controls make it a bit more complicated, lol. But yeah, overall I think it’s awesome!
Lot of work on MySigMail - UI email signature generator [https://github.com/antonreshetov/mysigmail](https://github.com/antonreshetov/mysigmail) Current release 1.3.0 Some stuff: * fix: correct view base64 in email client * fix: correct view social icon in email client * feat: preview color without save * feat: if press clear in colorpicker set black color * feat: add stackoverflow icon [\#9](https://github.com/antonreshetov/mysigmail/issues/9) * refactor: template via "table rule" [\#5](https://github.com/antonreshetov/mysigmail/issues/5) * fix: hide empty field by [#12](https://github.com/antonreshetov/mysigmail/pull/12) * fix: remove height in social img * fix: center social icon via table * fix: break new line job separator [\#13](https://github.com/antonreshetov/mysigmail/issues/13) * fix: break new line job separator [\#13](https://github.com/antonreshetov/mysigmail/issues/13) * fix: download link for firefox * feat: add xing icon [\#15](https://github.com/antonreshetov/mysigmail/pull/15) * feat: add image tips * fix: reset image object, not reset the values * feat: show/hide avatar option **Many thanks to the new contributors** [**@BerniWittmann**](https://github.com/BerniWittmann)**,** [**@alxwrd**](https://github.com/alxwrd) 
I was really expecting some sort of functional ADT runtime type library like tcomb or something. While it's nice that vscode can infer types from jsdoc style comments, it's a bit like saying that it's nice that you can rub your hands together to stay warm instead of building a campfire. Handy for a one-off thing, totally underwhelming for "real" projects.
Yep! Here is the github link - https://github.com/nbarkhina/TetrisJS
Whoops, J and K rotate, not sure how I missed that for the controls list!
The controls feel really good on mobile. But I couldn't figure out how to rotate the blocks. Maybe you could map it to swiping up
jQuery itself as a library is okay. While you can certainly perform DOM manipulations perfectly well without it these days, it bundles several niceties that are convenient to have around. No, the issue isn't jQuery itself - it's how jQuery is often used. Before the days where frameworks like React started getting really popular, most people (myself included) never bothered divorcing their "rendering" from their "data". It was also a time before Promises were really widespread (although jQuery had it's own, non-spec compliant Promises, IIRC). So a lot of sites that use jQuery wind up being simple to read and modify at the beginning, but monstrous in a few years time. The simplest changes could break a site in unexpected ways, because you never know what DOM elements the "fetchNewsArticles" function is going to end up mutating. And what if you wanted to do X after function Y, which is being called in function Z, which is being called in function A, and all or some of these functions have to wait for some network result? I've seen many people pass around callbacks 3-5 layers deep, which ends up being massively confusing. So yeah. jQuery itself is fine. Adequate for simpler sites, and a bit clunky for larger "web apps", but you could still probably architecture a front-end app fine if you put in the time. No, the problem isn't jQuery - it's just 95% of sites that use it.
I think this is great. I got to about 40 lines on my phone. A drop button would be nice vs the swipe down, I would rotate by mistake a lot
Thanks - yeah it's just tap for rotate but I could see how that may not be intuitive 
It wasn‘t for me. Looks and performs great.
Yes, I have. I assumed this wasn’t the case because your github only has contributions to 2 different organizations in the past 6 months or so, if you count yourself as an organization. Given that, most OSS is on GitHub, and that reduces the window to work for “multiple organizations” to a 1.5 year time period at best, it seems unlikely what you originally said is true. I could 100% be wrong and making myself look like an asshole. Seemed otherwise though and that you were trying to sneakily push your ideals in a dishonest way. Cheers. 
There's still a massive fuck ton of headache that jQuery helps alleviate. While bashing jQuery is the new "in thing", go ahead and code a .toggleFade() or .fadeIn() or .next() or .closest() in ES6 with full browser support. I'm happy to expedite my development and worry about refactoring (if it's an issue) later. 
In your dreams old man &amp;#x200B;
Very cool! I had to make a Tetris game for my CS class recently using Java so I think this is awesome! Do you happen to include wall kicks in this game? I tried doing it but I’m on mobile so the one-way rotation kind of screwed me up.
You need Colt Steel’s coding boot camp on udemy. He has a second part that covers advanced concepts as well. 
Could it be the case that other services exist besides GitHub? That seems almost too crazy to be true.
Thank you so much for the feedback!!!!! I'll definitely take a look into it for sure. :)
No worries :)1!!!!! 
Thank you!! That's really encouraging to hear. Feel free to leave any feedback on r/Thredd and I'll get back to you as soon as I can.
Thank you! I am watching YT reviews atm. Promotional price is only 10$ right now for the whole course.
If you can, DON’T use queryselector. It’s a really expensive function.
Yeah, that’s definitely a good point. Design patterns matter more than just about anything else when it comes to performance.
I wanted to get to know more about RxJS &amp; marble-testing and learning by doing is my favourite way of getting better in particular topics. So, I wrote Neuronite - open source language-learning app. This is not the most useful application ever made, but it has taught me a lot. GH: [https://github.com/endetti/neuronite-client](https://github.com/endetti/neuronite-client) Main features: * **Managing collections** \- create as many decks and cards as you want * **Sharing is caring** \- decide whether you want to share decks or keep them for yourself * **Problematic words** \- browse through the cards that caused you the most problems * **Leaderboard** \- each public deck has its own leaderboard with time-range selection * **Progression tracking** \- find out how well you are doing * **Questions tailored to your level** \- the type of question depends on the correctness of the previous answers
Not sure why “no Canvas” is being mentioned as a handicap factor. In my opinion it’s easier to make rectangular UI (even with animations) using HTML and styles rather than Canvas – just set your elements to position: absolute, and you’re good to go. You then benefit from a debugger-inspectable UI, too.
This is the most in depth video course I know. Incredibly thorough, he breaks everything down bit by bit: [https://frontendmasters.com/courses/javascript-hard-parts/](https://frontendmasters.com/courses/javascript-hard-parts/) It could be accused of not being as 'practical' as some courses, but this is your 'meat and potatoes' you want to get down first! If you like it he has two more courses in the same style, so you can keep on learning with the jolly cheeky Englishman Will Sentance :) This guys knows what he is talking about.
I do this in VS Code and love it, you get 90% of the benefits with non of the drawbacks! No need to learn another language, just spent a while working out how the JSDoc syntax works and you are rocking. Print this out: [https://github.com/Microsoft/TypeScript/wiki/JsDoc-support-in-JavaScript](https://github.com/Microsoft/TypeScript/wiki/JsDoc-support-in-JavaScript) The main danger is the edge cases where you keep getting errors and there is no obvious solution, just add a TS ignore comment and move on quickly... you don't need 100% perfect coverage and can waste time easily.
Thats pretty neat
down key issue is now fixed
Great work! You should change your gitignore settings. 😉
&gt;ed up the drop, it should return to normal speed when the tetromino drops, requiring you to press the button again. So yo fixed
Thanks! lol you mean because it included the .vscode folder? yeah makes sense
FreecodeCamp, codeacademy are good for a start. MDN(Mozilla Dev Network) for documentation and Mosh Hamedani, Traversy Media and Coding Train on YouTube.
cool, latest commit?
Yep
Django uses PBKDF2 as a defult, which is not safe anymore - I wrote an article about this just last week (although it's just an update of an older one :-) ) [https://medium.com/@mpreziuso/password-hashing-pbkdf2-scrypt-bcrypt-and-argon2-e25aaf41598e](https://medium.com/@mpreziuso/password-hashing-pbkdf2-scrypt-bcrypt-and-argon2-e25aaf41598e) I'd use Argon2 or scrypt!
I just published my first TypeScript package on NPM and I'd love if someone more experienced could take a look at it and see if I'm doing everything according to standard practices. It's a package which does a sort of "weighted shuffle" of collections (arrays or objects currently) but it's not really important. Any and all ideas and comments are most welcome! [https://www.npmjs.com/package/weighted-shuffle](https://www.npmjs.com/package/weighted-shuffle)
Very cool! But I would request simpler controls. And the game speed is a bit high for my taste. That seems to be messing up the controls for me. Good job, though. 👍 Is source code available for study (if I ever learn how to program)?
Can still move left and right when paused. Either way good job
pretty sure "TETRIS JS" clears up any confusion about whether or not it uses javascript..
Thanks! Yes it's on github https://github.com/nbarkhina/TetrisJS
I think Wes Bos has a tutorial about this in his free JavaScript 30 course. 
Wow thanks for catching that! I'll fix it
&gt; I'm using the 'Prettier Formatter' in vscode &gt; I hate having the formatter .... Then do use prettier. There are other options if you really want to invest your precious time on such nonsense. eslint for example has a ton of configurable options
We used it in one of my previous jobs, I think it actually reads much better. You only need to scan the text vertically to find an else, no imprecise sideways moves. Having said that, the benefits of using prettier much outweight the benefit of that kind of indentation.
Hey! I would take a look at ffmpeg and various things you can do with that (super powerful) - however, if it’s a rabbit hole, I’d probably look at making a nice frontend visualiser for cloudinarys (link below) video editing api? It’s really nice to work with and all the grunt work is already set up by them. You just pass the video with the start and end trim times you want and it returns the trimmed video. Hope it gives you some ideas and good luck! https://cloudinary.com/documentation/video_manipulation_and_delivery#trimming_videos
This reminds me of the silly Tommy Cooper joke "Doctor, doctor, it hurts when I do this" "Well, don't do that then"
It looks very realistic and the performance in firefox mobile is great
Can it roll back time and unhack my password? 😂 haha in all seriousness this looks super useful. I’ll give it a go when I’m back at a computer. Thanks!
jQuery and typescript.... what a weird combination
I got to 70 lines and then it was too fast. It is missing the gravity lock as I tried to spin a piece into place but as soon it touched bottom it was locked in place, after a certain amount of lines you simply cannot hold up. It certainly is a Tetris but it doesn't follow the whole ruleset. Otherwise kudos for the programming.
Nope, it hasn't caught on. I wouldn't waste my time with it except if you are looking for good fringe project to get some inspiration from.
Every day ! And very often i set "console.log(somevar)" in a conditional breakpoint - this is a very neat trick.
What’s the alternative?
Thank you :)
document.getElementById | className | tag ... &amp;#x200B; I think they are more performant
http://dumbmatter.com/screw/ does both. Here's the code: https://github.com/dumbmatter/screw This library does the bulk of the work: https://github.com/dumbmatter/screw/blob/master/src/vendor/soundtouch.js Not sure if there's an easier way, this was the first and only thing I ever did with the web audio API.
FYI, in your js file, it might be cleaner to create HTML element objects and under them into the DOM directly rather than concatenating strings to create HTML tags
That's pretty cool. Did you have a use case or were you just playing around?
Canvas is html.
Let's have this conversation again when you step out of amateur world and realize that nobody with a site of serious reputation, volume or corporate identity uses public CDN for hosting jquery files.
I don't understand why I can have a normal discussion on all subs except those who are about programming. There will always be someone who tells others that they are inexperienced and that they are wrong, getting personal very quickly. But whatever makes you feel better. Let's just quickly summarize what I DIDN'T say: jQuery is good. You should use jQuery. jQuery is used on newly built websites. All websites serve jQuery via CDN. And now what I said: jQuery is still used on the majority of websites and most users will have it cached. Do with that whatever you want. 
http://youmightnotneedjquery.com/
Nice, much better. If you like programming for fun check out Advent of Code (if you haven't already heard about it) I'm doing it with typescript, although I'm bit behind because finals. :)
But does this actually give you type safety? I mean, these are just VS Code hints and are not really enforced anywhere, right? Whereas TS won’t compile if you are doing something that is not allowed. Also, you yourself admit that you DO use TypeScript behind the scenes to give you all the type warnings, so I agree with you that you used clickbait in your title. Or am I mistaken?
Exactly my point. Look at the ES6 code for Fade In. I would much rather just use jQuery. 
The amount of code required in ES6 to do basic things like .toggleClass() is the reason why jQuery is still widely used. 
http://youmightnotneedjquery.com/
&gt; And now what I said: jQuery is still used on the majority of websites and most users will have it cached. &gt; &gt; Do with that whatever you want. OK, since you really don't seem to understand my counter argument, let me put it this way. The assumption that most users will have it cached is based on another assumption that most sites pull the jquery script file from the same place. If Site A pulls from cdnjs.com/jquery.js and site B does also, your assumption holds true. As soon as Site A pulls cdnjs.com/jquery.1.0.js and Site B pulls cdnjs.com/jquery.1.0.1.js however, your assumption falls apart. The same rings true if site A chooses cdnjs.org instead of cdnjs.com. Then, you have to consider that any considerably large site of a private or professional nature is going to bundle and house its assets internally and render the entire assumption above irrelevant because reddit pulls its code from www.redditsatic.com which no other site in the web is going to be using for hosting its own assets. EVEN IF reddit uses the exact same version of jquery that my site uses, a user who visits both sites will be downloading two separate files. There is no caching in play. Does it start to make sense now? 
What would be the point of compiling TS to WASM instead of JS? 
I love coding train!!
Asdfghjkl I'll go add it :&gt;
Cool I haven't heard of it I'll check it out thanks 
You must be some really great shit. Sound really amateur, come talk with me when you grow up.
Yeah, i used it for some Google Ads HTML5 banners. Actualy the other version which is also on my Codepen. This one was just playing around, I was learning Sass back then.
See [my comment](https://www.reddit.com/r/learnjavascript/comments/afd13n/using_push_with_canvas_for_javascript/) in your r/learnjavascript post
Added it!
To be honest you’re the type of person that thinks whatever they think is correct. It’s usually the way for those programmer type that are stuck up there own asses. There’s very rarely a reason to be a wanker like you are so early into a discussion. Simple as that really.
I don't have anything to offer in terms or recommendations or additional info regarding security incidents above, but I simply want to say that my mind is blown that someone thought "Hey, if I become a maintainer of package X I can steal bitcoin!"
You know what’s hilarious? Even huge companies like Hue go for human readable code over performance when writing in vanilla JavaScript. And why is that? Because even in tens of thousands of lines of code the performance hit of most of the various different ways you can achieve the same things in JavaScript is often negligible for the most part; the obvious ones aside.
At the end of the day, as software developers we write code for human beings. The computer does not care what our code looks like, hence the reason we minify our JS for performance reasons. We should be more concerned with our performance as developers, with how easy it is to modify and/or maintain our existing code bases, not how to save a few milliseconds. Also code splitting is a very effective way to drastically increase performance regardless of what libraries you are using. If using a library like jQuery really hinders your applications performance you probably designed and or architected your software poorly.
I had literally no idea of this until just now, and I've been playing around with Node since v0.10.
Don't listen that guy opinion, nice job is all about doing amazing things with any library or language you use and it works pretty fine, i would like to see some animations but other than that good work.
it is good but the drop down speed when pressing down is too fast
I made a theme for ghost blog called news outlet https://github.com/Fried-Chicken/news-outlet
That looks great! Have to find a use case for it :) And it's hard to stop playing with it! (that's what she said)
Updated it, on small projects it really doesn’t matter, but when working on larger projects it can tank performance. Same with inner- &amp; outerHTML assignments,
I published an update for my first NPM package (for Node &gt;= 10) written in TypeScript. It's a set of useful functions to find files in directories upwards or downwards from other paths. I've used `AsyncIterable`s so that a simple `for-await` can be used to traverse the resulting files. Check it out: [https://github.com/MartyO256/find-files-by-patterns](https://github.com/MartyO256/find-files-by-patterns)
Thanks man. I'll need learn about regex it seems :)
Do this: https://watchandcode.com/ Then this: https://javascript30.com/
You've solved the same problem in your code already. Each recipe needed its own list of ingredients, so you defined a 'recipe' to be a thing that has an ingredient list. If you want each section to have its own list of recipes, you need to define a 'section' as something with a list of recipes.
Sorry, I was bored, so I made this simple snake game [https://codepen.io/bsehovac/pen/ebQoob](https://codepen.io/bsehovac/pen/ebQoob). 😬 Anyway, you should read about vectors, they will make your life so much easier in making games. I made a simple one here to help you get started. So snake head, and all her body parts will be defined by vector which has x and y position. So we should have snake length, let it be 1 until we eat some food, and increase it by one with each bite. Here is the part i think you were looking for: this.body.push( this.head.clone().sub( this.direction ) ) if ( this.body.length &gt;= this.length ) this.body.shift() On each snake movement we are adding part to her body subtracted by snake direction. So on next move, that body part will be on place where her head was. And with shift() funcion we are removing first element from array, if length of body is greater of snake length. I Hope I helped you a bit, I'm not so good at explaining suff, sorry, i think you will get it from the code.
Really clean and the mobile friendly makes it better. Great work! Please share your github because this would help me a lot in learning since I am just a beginner level. 
I mean, the tag, yes sure, the rest not so much.
Hahah wtf I was thinking 
React and Vue both do more than just rendering to the dom. They handle the digest cycle for creating, modifying and deleting DOM nodes. You don't have to do this yourself now, and the minds behind those projects have found ways to optimize these tasks beyond what you might be able to do yourself. If you didn't know, DOM manipulation is an expensive task. Not properly optimizing it can lead to a lot of bugs.
Roger that, **Maverick**.
On the backend, the rule I've made for myself is that I need to keep the dependency graph small enough that I could reasonably hand-audit all of the third-party code. So far, I've found this to be an extremely beneficial practice with a lot of unexpected benefits. My applications are faster, easier to reason about, and easier to debug. It turns out that a lot of the crap that people mindlessly stuff in their applications isn't actually necessary or useful in the first place.
Thanks! Here you go https://github.com/nbarkhina/TetrisJS
Do you have a tutorial for how to make svgs like this in sketch?
Traversy Media on YouTube is great: https://www.youtube.com/user/TechGuyWeb 
Postman for API testing, Querious for DB management, and GitKraken for Git are all part of my day-to-day flow 
What about lawful good JS developers stepping up to maintain unmaintained packages before some evil actor takes over? &amp;#x200B; I remember seeing some initiative in that direction, something along the lines of identifying unmaintained packages in a single list on github, can't remember...
Premature optimization IMO I've yet to see this as an FPS bottleneck
That's not ES6. Change "What's the oldest version of IE you need to support?" at the top of the page to IE10+. You should really be using CSS to animate stuff these days. `toggleClass()`, your other note, is as simple as `element.classList.toggle(className);` jQuery is dying rapidly. There are still some things it does better and more cheaply than a quick and dirty implementation but I'd prefer to see coders use a smaller library to assist with that as needed. jQuery is an entire toolbox, and I don't really need all of those wrenches anymore.
You missed u/ripvannwinkler's point entirely They're not disputing the usage of jQuery, they're disputing that it will be cached if served by CDN. There are many CDNs and many different versions of jQuery that are served by those. Given those permutations, it's extremely unlikely in practice that a user will hit a warm asset (speaking from experience).
What makes custom elements exciting is that they enable creating reusable views using the standard DOM API: HTML tags, HTML attributes, JS properties, JS methods, and DOM Events. While pretty much every framework / library offers a way to componentize views (jquery plugins, angular directives, React components, etc) we now have a standard way to define these components with an API all the frameworks already understand (the DOM API). This is great but dependencies become a big concern. If you have shareable custom elements from ten different authors, you don't want to be coupled to ten different frameworks / libraries. To me, the biggest offerings of jQuery are the following: 1. Provides a good, cross-platform api for dom manipulation: This is much less of a concern nowadays. Definitely in jQuery's prime the DOM apis available and the cross-browser consistency of those apis were a joke. We are in a much better place now largely because of jQuery. The document.querySelector() api was inspired by jQuery (in turn inspired by CSS selectors). The event systems behave consistently and the compatibility between browsers receives much more mindshare. Most browsers have open issue trackers / issue reporting tools and there is even an issue tracker dedicated to reporting cross browser compatibility issues: https://webcompat.com/ 2. Providing a componentization approach via jQuery plugins: With ES6 modules for componentizing libraries and custom-elements for componentizing views, we now have standards based ways to solve most of the problems plugins were solving. 3. Making "AJAX" easy: The fetch api is a modern replacement that is very ergonomic to use: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch Are jquery's apis even better? In some cases yes, in some cases no. If I'm now making reusable views that can actually be reused and potentially live on for many many years, is it worth having? I would say no, not anymore. Is the vision of custom elements and web components fulfilled in browsers today? No, the full vision is not completely there yet, but it is definitely usable today. Just this week GitHub started shipping native Custom Elements without the use of transpilation: https://twitter.com/mislav/status/1083063045360939013 If you are interested in building applications with custom elements / web components, the ones I find most interesting are: - [SkateJS](https://github.com/skatejs/skatejs) - [StencilJS](https://stenciljs.com/ and https://ionicframework.com/) (developed to implement Ionic) - [Angular](https://angular.io/) - Keep an eye on [lit-html](https://github.com/Polymer/lit-html) and [material web-components](https://github.com/material-components/material-components-web-components) Unfortunately I can't say I've shipped anything major with those frameworks yet (but getting closer). We ended up rolling our own custom elements implementation / use a proprietary solution for the application I spend the most time on. My only consolation is that at least I know our parts are standards-based and can be reused in other frameworks in the future :)
There ya go. https://github.com/PipeChess/tetris_js/
What are you using to parse the chat logs? I made [whatsapp-chat-parser](https://github.com/Pustur/whatsapp-chat-parser) a few months ago, maybe it could be useful for your project.
One big company doesn’t do much of it and makes a nice OS. Linux is the other option. Seems like I don’t have to live with it. 
Cursory glance at the code says they literally use the midpoint by latitude and longitude to start with at least.
https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var-to-declare-a-variable-in-jav
Let is block scoped.
I love it!!! Great range of depth 
IntelliJ is for Java; WebStorm is for JavaScript.
Thank you!
Store the direction and add a new part on every move, then trim the array to the snake length
&gt;Hey I was just curious how did you calculate the midpoint of the route?? Google maps doesn’t have API for that I guess Exactly, still plan to add mode of transport and accordingly find midway as per time required to travel.
Technically, IntelliJ can be used for JS (or any language supported by the other JetBrains IDEs) by adding in the specific plugins and figuring out all the configurations you might need to change. But yeah, for someone that *only* wants JavaScript, WebStorm is the way to go. It's less expensive and has only the specific features you'll need. (Same goes for Python -&gt; PyCharm, etc.)
You could as well build maintainable/reusable components using jQuery or even plain Javascript. There's no magic.
depends entirely on how the input is setup, and you might be better off just emulating the request sent out? i'd suggest looking through the code to see how they trigger the submission, if it's a form then you can just target that and submit it, or potentially try sending a 'enter' key press event to the input field
I created a tools that convert custom element to iFrame with ease. Just put the js script source and the custom element name, the generator will do the job. (it also support all other attributes) &amp;#x200B; The project is open source at GitHub: [https://github.com/superoo7/ce-to-iframe](https://github.com/superoo7/ce-to-iframe)
I created a tools that convert custom element to iFrame with ease. Just put the js script source and the custom element name, the generator will do the job. (it also support all other attributes) ​ The project is open source at GitHub: [https://github.com/superoo7/ce-to-iframe](https://github.com/superoo7/ce-to-iframe) ​ I am open to any suggestions
You mean .classList.toggle() is too hard?
This isn't directly answering your question, but you can get all the data in one query using a join. Joins are a bit tricky in that they might challenge your understanding of how SQL works - a join is not a loop, even if it has similar results. See https://www.postgresql.org/docs/8.3/tutorial-join.html Otherwise, you should be able to await the result of `client.query` and access the data directly (rather than the `row` and `end` events), and query each sub result separately, awaiting those in a for loop. Your existing code is out of order because the `end` callback isn't waiting for the queries in the `row` callback).
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I'm very familiar with SQL - a join is something I wanted to avoid as it means I'd have to parse things in JavaScript (i.e. build the 'discs' array myself) which didn't seem right to me. You say 'end' does not wait on the 'row' callback - is there a callback that does, of is this just a bad idea to do and would it be better to use 'await' in such situations? Thank you for your reply, I'm trying to understand the 'proper way' to do these things in JavaScript (my main language of choice is C++, with Python being my scripting language of choice) so I may need to unlearn certain habits!
I'd suggest looking up how the 'event loop' works in JavaScript. You're most of the way there though. The order of execution you've listed should show you how it's working. The problem is as soon as your original query emits the 'end' event, the http server sends a response. Basically the 'row' event callback is being executed immediately, but the results of the query within that function doesn't get handled until the 'rows' and 'end' event messages have been processed. Don't know the exact details Either way, the JS way to handle (though u could refactor this in a lot of ways) is to push all the nested queries into a promise and wait for them after the end of the original query. router.get('/:id', (request, response) =&gt; { pool.connect((err, client, done) =&gt; { const artistId = parseInt(request.params.id) const nestedQueries = [] let results = [ ] var query = client.query(new Query('SELECT albumid,year,name FROM album WHERE artistid=$1', [artistId])) query.on('row', async (row) =&gt; { console.log('on row') nestedQueries.push(db.query('SELECT discid,volume FROM disc WHERE albumid=$1', [row.albumid])) }) query.on('end', () =&gt; { Promise.all(nestedQueries).then((data) =&gt; { // you will get an array of query results here u will have to loop through and combine with map or reduce or a for loop or whatever response.status(200).json(results) done() }) }) }) }) As the other guy says though, i haven't taken a detailed look at the sql but u probs want join.
Based on u/throwaway12933428233 suggestion, I've reworked the code to the following (which still does not work): router.get('/:id', async (request, response) =&gt; { const artistId = parseInt(request.params.id) let results = [ ] const { rows } = await db.query('SELECT albumid,year,name FROM album WHERE artistid=$1', [artistId]) await rows.forEach(async (row) =&gt; { console.log('on row') const { rows } = await db.query('SELECT discid,volume FROM disc WHERE albumid=$1', [row.albumid]) console.log('got answer', rows) results.push(rows) }) console.log('sending results') response.status(200).json(results) }) Also router is now express-promise-router. However, this still gives the same result as previously.
Seems cool, what I'm supposed to use it for?
You need a for loop, not "forEach". "forEach" doesn't wait for the inner queries to complete, so you get the same problem (as you say). Try replacing that line with `for (const row of rows) {`.
FWIW, I ended up going with the JOIN suggestion as that makes things a lot easier. Thank you all for the kind help.
I really love your canvas ribbons pen, was there anything you used for reference for that? It reminds me of the Vita/PSP/PS3 menu background.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I used this pen [https://codepen.io/loktar00/full/tbgDv](https://codepen.io/loktar00/full/tbgDv) as reference, i just made lines animation loop, but i was trying to make something similar to Xperia LiveWallpaper.
1. Instead of `router.post('/', (req, res) =&gt; projectModel.saveProject(req, res))` You can simply write `router.post('/', projectModel.saveProject)`
They have different sizes, I will see about shapes, I have to learn about sprites in WebGL first...
For some reason, I cannot figure out why my routes don't work when I use `router.post('/', projectModel.saveProject)` &amp;#x200B; Also I am still learning async/await so my plan for future is to include it :)
Tryna pitch bend some 808's?
Thats strange, it should work. Do you get any errors with `router.post('/', projectModel.saveProject)`?
Also take a look at https://github.com/i0natan/nodebestpractices
Some of the sites wanted to use these widgets but it isn't AMP compatible, therefore, iFrame is one of the solutions. &amp;#x200B; Other than that, you can embed into markdown for iframe into your blog post, so that you dont need to code and load the js file. &amp;#x200B; &amp;#x200B;
Thanks for a link, I will take a look. I am getting the error that route is wrong and server crashes. If I add req and res, everything works as intended.
Micro-packages don't work. We need bigger packages that group similar functions and are maintained by responsible group not single guy. Standard library like in other languages.
FTFY router.get('/:id', async (request, response) =&gt; { const artistId = parseInt(request.params.id) const { rows } = await db.query('SELECT albumid,year,name FROM album WHERE artistid=$1', [artistId]) const results = await Promise.all( rows.map(async (row) =&gt; { console.log('on row') const { rows } = await db.query('SELECT discid,volume FROM disc WHERE albumid=$1', [row.albumid]) console.log('got answer', rows) return rows }) ) console.log('sending results') response.status(200).json(results) }) 
As a JS dev who started when ES15 was already a thing, JQuery's existence has been nothing but a distracting pain for me. I've wasted so much time finding stackoverflow "solutions" that use some outdated JQuery rubbish to do something that the language can already do. Seriously screw JQuery
Not really but there are tons of tutorial on sketch and vector design out there. The easiest way it to download other vector graphic and remix them to do something you like until you develop the skills. Freepik is a good place to get some.
Adding a website to homescreen has worked for Android and iOS for quite a while. iOS, however, will clear all data stored in \`localStorage\` after the app's not been in use for a few days and push notifications don't work. Also since the PWA is basically rendered in an Safari WebView, there are a couple of browser features that won't work (e.g. displaying a camera video directly — you can only open the Camera app from the PWA). &amp;#x200B; But what you want is all solvable with a \`manifest.json\` and some \`meta\` tags.
Has anyone had experience combining anime.js and d3.js? I work mostly in d3 and had never heard of anime.js until now. It's beautiful, and I can imagine the two working together well. I'm curious about what use cases there may be, how easy it is to combine the code, and whether anyone has some examples to share. Also, props to the anime.js devs!
If I'm understanding you correctly, this is not possible in node, or at the very least it's extremely not traditional without going pretty low level. Javascript is single threaded, you cannot have another javascript script running concurrently. What you can do is what is called clustering, which lets you run multiple instances of the node, but for the most part these instances are meant to be running the same code, not something different. If you really want to go down this route, you could explore worker threads (https://nodejs.org/api/worker_threads.html), but these are experimental and quite frankly are not really in the "spirit" of node.
Yeah it's not the single threaded nature of node that's the issue for me, it's the amount of data that I need to be sorted and stored without clogging up the event loop. I have ran the whole project in a single thread and on high volume data it craps the bed (understandably). I had a similar issue in python and used the threading lib to mitigate it but python was inherently too slow. I'm hoping that I can get something along the lines of a secondary websocket process that sorts the data then feeds it to the main loop to be actioned. Some actions in the main loop come with a delay and I don't want a load of incoming data causing it to either crap the bed or become unsynchronized. I'm actually thinking If all else fails I could run multiple node instances and write to SQL from each but it seems very messy.
Cheers, I actually approached the logs exactly as you did. However I believe your regex is better/more flexible. That is probably why 2 logs where not working. The paywall is indeed annoying got this back from multiple users, it was also an experiment to see how to set up stuff like this. Any ideas on how to improve from here? Appreciate the feedback 
Yeah, instead of using a socket like you're suggesting, worker threads should cover that. Since they are experimental, I can't really recommend or explain how to use them, but they are there.
Have a look st this site https://medium.com/wdstack/bootstrap-4-chart-js-39006427f08f I suspect MDB just use a third party chart library and their own styling. Or have a look at their source code on the page you linked.
very cool
If the service is free then you are are the product. I would look at the response times before using these on a production site people paid money for. Also check with legal if you're allowed to add third party hosted scripts to your security sandbox.
Use ES6 standard! It added some really cool features to JS and it's a lot more readable sometimes.
Now we're working around the shitty google AMP limitations by adding heavier versions of the components AMP is attempting to keep down. Fuck everything about this and AMP, both equally much.
They're all chartjs based, except for the one you're interested at. The charts are listed on [this page](https://mdbootstrap.com/legacy/4.3.2/?page=javascript/charts) as well. If you view source on it, the "minimalist" ones are invoked at the bottom of the pages: $('.min-chart#chart-sales').easyPieChart({ barColor: "#4caf50", onStep: function (from, to, percent) { $(this.el).find('.percent').text(Math.round(percent)); } }); I suspect it's a copy or derivative of http://rendro.github.io/easy-pie-chart/.
Thanks for your reply. I’ll take look.
They are using [easy pie chart](http://rendro.github.io/easy-pie-chart). You might need to set some of the API options to achieve the same minimalistic style.
Really cool! 👍
[Original /r/programming post here](https://www.reddit.com/r/programming/comments/afgbww/godaddy_is_sneakily_injecting_javascript_into/) and there's quite a discussion going on.
Try [this](https://gitbookio.gitbooks.io/javascript/content/), it has a lot of examples and guides you through the basics of programming and Javascript. &amp;#x200B;
The Terminal 💻
Checkout [The Coding Train](https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw) on Youtube. He posted a lot of really cool Quick&amp;Easy "projects". 
Very soecifically for this app, jQuery is really heavy, not just in it's initial load, but in the way it deals with DOM elements. &amp;#x200B; Everytime, you say, simply read the position of an element, it causes a CSS reflow and the entire page has to be repainted, so imagine that multiple times a second on multiple elements, then scale that up, you can see it can start to slow a page down. Have you ever been on a mobile device and you're scrolling down a page and it freezing and a nightmare, it is because of excessive CSS reflows. jQuery is one of a few frameworks that are guilty of this because they mutate and read from the DOM in real time, rather than a virtual DOM, then apply those changes as a batch onto the real DOM. This is 8 year old standard practice now when dealing with the DOM/JS in the world of shitty smart phones because the DOM/CSS/HTML/JS is single threaded (unless you use WebWorkers which won't solve this problem). Further reading. [http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/) [https://gist.github.com/paulirish/5d52fb081b3570c81e3a](https://gist.github.com/paulirish/5d52fb081b3570c81e3a) [https://www.paulirish.com/2011/dom-html5-css3-performance/](https://www.paulirish.com/2011/dom-html5-css3-performance/) [https://www.youtube.com/watch?v=q\_O9\_C2ZjoA](https://www.youtube.com/watch?v=q_O9_C2ZjoA)
IKR, AMP doesn't allow custom element but they themselves are using custom element lol But to make ur page more friendly for SEO, AMP are not going anywhere ...
Those are good considerations. For now, I am using it for free (nobody is the product) hobby/portfolio projects. Apparently these CDN's are the main distributors for VueJS and ReactJS, so they must have some some performance. Perhaps non-open source libraries pay for that performance?
The majority of NPM packages are written to adhere to some kind of module system. You most likely aren't using any of them, so you need to try to find NPM packages that use UMD (universal module declaration). UMD tries to determine which module system you're using (CommonJS, ES Modules, AMD, none) and act appropriately. In the absence of a module loader, it just puts the module on window for you in the browser.
&gt; Luckily there is a way to turn this off By moving your domain &amp; website to a different host immediately? I'm sorry but this is inexcusable. I wouldn't trust GoDaddy for a second with my domains after this bs.
Can you give a little more context to the problem?
In addition, I'd recommend you consider using a module bundler and writing your code in a more modular fashion, separating the different parts of your app and importing or requiring them as necessary. Putting everything in script.js is going to be a nightmare as your project gets larger. &amp;#x200B; I'd recommend npm installing webpack and webpack-cli, creating a src folder in your project, and moving script.js inside there. If you open up your package.json file and change the start script to "webpack", webpack will handle all module related stuff for you. You'd get the require function and import statement syntax for free, along with being able to separate your code as you see fit. &amp;#x200B; If you go this route, I believe you can use matter-wrap like so: /* imports go at the top of the file */ import MatterWrap from 'matter-wrap'; Matter.use(MatterWrap); &amp;#x200B;
I don't think it is. I think most companies will self host these libraries, probably bundled with the rest of the code. You don't want to be in a position to have to explain to a paying client you want to keep their site isn't working because you cheaped out on hosting some javascript. Account managers and business people don't understand any of this. Even a 15 minute phone call trying to explain this costs more then the bandwidth for these files for years. I would not assume to much about performance of these free services but test and see. At a place where I worked Google Font has been a huge bottleneck for example, holding up the page rendering for hundreds of milliseconds (with random spikes). So we sourced the fonts and put them with the rest of the files.
Shout out to Brad. Dude is a great teacher 
Author here - thanks for sharing! :)
Good bot!
Don't get me wrong, I totally agree with your concerns. I make a habit of self-hosting fonts as well. Off topic, but here is library that make that easy for NPM: https://github.com/KyleAMathews/typefaces
Sure pal, I have a websocket that receives and sorts a lot of data, this data overwhelms the main loop. I would like to use a seperate process to run this but have the output available in the main loop. I have a similar implementation using threading in python but it is too slow and goes out of sync causing dropped data. I have run this websocket as a single script using node (translated) and it works like a charm. If you want I can add some code but I'm more interested in how to accomplish it rather than a specific implementation. Cheers
what you mention is all over the place. Might help to show data source, and what you are trying to accomplish with it. &amp;#x200B; When you mention the asynchronous javascript I think you want to start with things being event based. they should fire from client websocket events. If you have high enough volume / second you will want to batch them somewhat. As for the array of changing things you'll want immutable.js or something similar. I did a linkedin article about it here: [https://www.linkedin.com/pulse/maintaining-position-buffers-changing-javascript-array-aragues/](https://www.linkedin.com/pulse/maintaining-position-buffers-changing-javascript-array-aragues/) for other streaming visualization things I have some links and examples to play with here: [https://github.com/SuddenDevelopment/Visualizing-Streaming-Data](https://github.com/SuddenDevelopment/Visualizing-Streaming-Data) working on a big update of all of it for another edition of the book. I hope that helps.
Nice project, I'll try it out at work tomorrow. Nice comments btw, everything is super understandable. 
This is what I have made so far but it has two issues: https://codepen.io/ivan-salim-rasoel/pen/yGQzMr -If you click on an icon/text, that is the only thing that will go to the other box. You have to click a free space in the box to aviod this. -There is no animation
This is what I have made so far but it has two issues: https://codepen.io/ivan-salim-rasoel/pen/yGQzMr -If you click on an icon/text, that is the only thing that will go to the other box. You have to click a free space in the box to aviod this. -There is no animation
I'll boycott it as long as I'm in my current position (can 100% ignore SEO, luckily).
get used to using [http://alasql.org/](http://alasql.org/) it's quirky but makes things like this very nice, you can create multiple tables of your returned data and SQL query it client side as needed
Maybe something like [this](http://caolan.github.io/async/docs.html#queue) could help?
You should use .currentTarget instead of .target in the onClick function! e.currentTarget always refers to the element to which the event handler has been attached, as opposed to e.target, which identifies the element on which the event occurred. &amp;#x200B; Btw upvote if the solution proposed works for you.
If *this* is the one thing that gets you to switch, you've been asleep for a looooong time.
Offload the sorting a processing to other processes. [e.g. Communicating with child processes](http://2ality.com/2018/05/child-process-streams.html)
... use Brave Browser :)
https://nodejs.org/api/worker_threads.html https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953 Marked "experimental", but there are some npm packages with binary-extensions of node.js to allow similar things. 
https://nodejs.org/api/worker_threads.html https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953 Marked "experimental", but there are some npm packages with binary-extensions of node.js to allow similar things. 
This is really usefull! Haven't downloaded it yet so I can give any feedback, but i'm definitely going to try it out!
Thanks. Ping me if you have any question/problem. Cheers
So who is a good registrar? I was going to move mine a few years ago, then some shit came out about the company I was going to move to, so I just said screw it.
You, my man, are amazing! It worked haha
Technically, yes. From the perspective of a beginner, I recommend using the correct tool instead of finding the right plugins and configurations for a tool that’s “close enough.”
Edit: The only remain part now is the animation. This is what I have so far. [https://codepen.io/ivan-salim-rasoel/pen/yGQzMr](https://codepen.io/ivan-salim-rasoel/pen/yGQzMr)
Namecheap is pretty good. And companies that don't rely on making a profit off the domains but require you to use their products for it like CloudFlare and Zeit Now.
True. Let me tell you a worse story about iPage. A few years ago, I bought a domain/PHP hosting off of iPage since they were a buck cheaper than the rest at the time. I used it to host an info page about me and some other random stuff. One day I'm at a conference where I'm going to demo my software working with a potentially new standard metadata format in xml (riveting stuff). I upload a sample `.xml` file to my server hoping to reference that and hand out the URL for folks to try out. Unbeknownst to me, iPage had activated their "virus scan service" free of charge (how nice of them), and it flagged the xml file that I uploaded as "potentially dangerous." Now anytime anyone tried to access my website, they got a html page saying "This website contains potentially harmful files on it and is being quarantined. Obviously I freak out, and call them. They provide a "report" of the offending files (which was the xml file I just uploaded). I call back expecting just to explain this misunderstanding and to get my website back. The guy on the phone tried telling me there's no way he can turn it back on. I can either remove the offending files and wait a day, or pay for a "Virus removal" service they were offering. I told the guy straight up that I knew he was trying to extort me, but he didn't budge. In the end, I removed the xml file and re-uploaded it as an html file (which curiously didn't trigger their virus detector). My website came back the next day a couple hours before my presentation. Next week my website was on aws, and I've never looked back.
&gt; Any ideas on how to improve from here? I think that you should just show more charts to non-paying users to let them see the value of the product, then leave a few goodies (but not too many) behind donation.
Are you talking about in the frontend, the backend, or in the data store (e.g. The database)? 
I personally am using [domaindiscount24](https://www.domaindiscount24.com/en) with no complaints, but it's an EU company, which makes it easier for me as an EU citizen.
Digital ocean
It'll be in the database eventually and users will be able to sign up and create notebooks and notes within.
This is the most ignorant thing I've read on this subreddit.
The latter is more easily translatable into a relational schema.
???
VanillaJS
In the DB, store them as 2 separate related tables. In the frontend and backend, store the notes as a nested object, and use the IDs to load them into the correct notebook. 
Great, any chance you could give me a quick idea about how I would use the ID of the notebook to gather the relavent notes? I was thinking that I'd have to use the index of the notebook it would be something like notebook\[i\].notes
... and that helps the people actually visiting your website how, exactly?
I'm pretty sure this doesn't work in IE10 and earlier. 
Heck, comcast does this to customers, not even as a web host. If you use comcast, anything you receive over https may have comcast code injected into it. Their rationale is that they want to alert you to a possible hardware upgrade you need for your cable model. But their customer service reps will deny it for a while. I keep getting these every 6 months even though they admit my cable modem is up to date. I finally got it to stop on one machine by adding https-everywhere. But I can't do that on my other machine as it's for work and I need to be able to see regular http.
https://cointelegraph.com/bitcoin-for-beginners/how-blockchain-technology-works-guide-for-beginners#hash-function
I'm interested as I'm primarily a backend C# and .NET guy, but I also use Typescript and Angular 6-7 for front ends at work. I want to learn JavaScript and have side projects built with it, as well to increase my hireability knowing Typescript and JavaScript. I'm familiar with node.js ecosystem but not as well as I'd like to be either. Are you starting a github repo or where will this group reside? Thank you. 
lit-element and lit-html or some equivalent, no legacy cruft, proper web standards. Small modular utilities vs a behemoth. Shame they were financed by Satan, but at least there is money and support behind them. Official language features will always win in the end, JSX will be forgotten soon and es6 template literals will probably outlive you :) Of course, if you want money quickly then React.
I've never heard of iPage prior to this, but that sounds like utter insanity. Did they ever give you a formal explanation of *why* the XML file was flagged by their "virus scan service"? For that matter, what on earth is this "virus scan service"? I'm assuming you were hosting this on some kind of VPS - was this "virus scan service" installed onto it without your knowledge? Would it have been possible to disable it from within the VPS itself? Or was it one of those confounding "shared hosting" platforms where they only give you access to a crippled web frontend interface and call it a day?
Blockchain is a special version of the linked list data structure. You make use of it like you would do with any kind of technology: You have a specific problem and evaluate available solutions and then you might come to the conclusion that Blockchain is the data structure of choice. Sometimes you have a problem and Blockchain might be a better solution than available options. But often the downsides/tradeoffs of Blockchain create new constraints that introduce new problems that need solving. When you come to the conclusion that Blockchain is your solution you can start looking for specialists or managed solutions, like the one on AWS. 
&gt; anything you receive over https may have comcast code injected into it How can they achieve this without breaking TLS? 
Second part of the series available here: [https://www.reddit.com/r/javascript/comments/afl688/organizing\_code\_that\_doesnt\_belong\_to\_page\_objects/](https://www.reddit.com/r/javascript/comments/afl688/organizing_code_that_doesnt_belong_to_page_objects/)
If you're using a relational DB, after you query the tables, loop through all the notes and add them to the matching notebook. To make it easier to reference, you can use an object that's keyed by the IDs, or a Map, instead of just an array. 
Thanks! I checked out the immutability stuff, and perused through some of the links you provided. In doing so, I came to realize my problem was super simple to solve. I can just call my array variable whenever I want while the websocket function continues to act on it. Sorry, I don't really know how to explain it, and I probably bungled the question too, but hey! You helped. If I keep at this stuff I might have to check out that book. Here's my code if interested: [https://pastebin.com/VZLz41vi](https://pastebin.com/VZLz41vi)
Very impressive!
&gt; I finally got it to stop on one of my machines by installing https everywhere (browser extension) This story sounds like it came from years ago, when http:// was still normal.
Do you have any solutions for cypress and universal react apps? The page simply keeps on loading.
I would love to. I’m just learning JS, html and css though. I have been a software engineer for about 23 years but have only done desktop and mobile apps for my whole career. But I’m very interested in web technologies and want to make the jump to doing full stack development. I’m wanting to eventually learn node, react, react-native, GraphQL, sql and python. So if you would like a total noob to help, I would love it.
Your ISP does the same thing.
Finally started work on the #1 most-requested feature for [Video Hub App](https://videohubapp.com/): manual tags! [https://github.com/whyboris/Video-Hub-App/issues/53#issuecomment-453714689](https://github.com/whyboris/Video-Hub-App/issues/53#issuecomment-453714689)
Yeah, I think just this would go miles to reduce packages that do only one small thing. Of course, cases like left-pad should be an anomaly anyway haha
In the front end there is a lot of tooling for some things to work well, so there are always a few packages in my dev dependencies. But as normal dependencies I try to limit as much as I can, only using packages by established orgs.
hey, out of curiosity: do you have any automation set up for the TypeScript compiler? I've got a project wherein I'm just committing the output in a \`dist\` directory, but this definitely isn't ideal. I'm interested in how you're dealing with this!
I think the YDK series is aimed more at intermediate-level JS devs than beginners. It might have better been titled *You Don't* ***Really*** *Know JS* because it's about the nuances of the language that are lesser known to people who taught themselves the basics of the language (like most of us). I recommend [Eloquent Javascript](https://eloquentjavascript.net) as a good intro to intermediate book.
He has some lectures on Frontend Masters lectures that are better at connecting the dots. They take some discipline to get through though. 
You have no idea how many senior devs should be reading it 
Just use Babel my man! Also if you work somewhere that supports IE10 and earlier *leave*
So this is kind of funny. I began reading that and found the examples extremely confusing. It’s what made me think I’m not anywhere close to intermediate. Maybe I need to approach it slower and in order? I would read a section of it when I thought I needed it. For instance, I read the Async chapter randomly out of order, and it made me feel so dumb that I stopped reading it because I couldn’t follow his example. I thought I first needed to understand how to code at the level of its examples, which is what I’m looking to learn. It sounds like maybe YDKJS is how your code behaves. I feel like I first need to build code at an intermediate level to even see it behaves lol
I used the books before I knew anything about JS and found them really helpful. I especially liked the fact that the books cover quite a lot of not-so-popular features of Javascript and suggest an alternative programming paradigm when working with JS. Most of the books and tutorials I’ve glossed over just seem to state the most common features leading to a lot of confusion when things don’t work in the expected manner. The book on “Async and Promises” is a must read. It has helped me immensely in writing quality code for some of my projects and also picking up libraries quickly.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Vanilla JS choice is always a good choice
Thank you for your precious input.
https://caniuse.com/#feat=classlist It does work in IE10.
It’s worth mentioning that only the paid version of IntelliJ supports the JavaScript plugin.
I’d be interested too! I’m just learning CSS, HTML and getting more comfortable with JS but I haven’t really dived in node yet. I was just looking at an article about making a discord bot and I’d love to give it a go. 
I use OVH and have zero problems until now. 
I haven't tested a universal app with Cypress yet, though, I don't see why it shouldn't work (from Cypress point of view, the pre-rendered html markup is just plain old markup, same thing for the JavaScript part). If it works in development / staging, it should work on Cypress. Your problem might be some configuration but I can't tell you anything without the source code. You should open an issue on the Cypress repo.
Really great to hear your feedback and know I'm not spinning wheels. I haven't gotten into what I think are his really popular books. Just finishing up Scope &amp; Closures today. I'm really looking forward to the Async and Promises book. I think it was in fact the Promises feature of JavaScript that had me take a step back and realize I don't understand what I'm doing.
mate, when you start working in a team, this post will be so insignificant :D &lt;3 Bikesheddin' 4 days
Someone clearly has no fucking idea what's going on in this thread.
This is the best tl;dr I could make, [original](https://www.igorkromin.net/index.php/2019/01/13/godaddy-is-sneakily-injecting-javascript-into-your-website-and-how-to-stop-it/) reduced by 79%. (I'm a bot) ***** &gt; All my pages were being served with the following &amp;lt;script&amp;gt; injected into them just before the closing &amp;lt;/html&amp;gt; tag.... Of course that comment in the script was a give away of what was going on but I didn&amp;#039;t immediately want to believe that the website host itself would be injecting a JavaScript script into my website without my consent! Turned out that&amp;#039;s exactly what GoDaddy was doing and they justified it as collecting metrics to improve performance. &gt; Most customers won&amp;#039;t experience issues when opted-in to RUM, but the javascript used may cause issues including slower site performance, or a broken/inoperable website. &gt; After opting out this JavaScript disappeared from the website. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/afmhvt/godaddy_is_sneakily_injecting_javascript_into/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 2.02, ~376708 tl;drs so far.") | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **JavaScript**^#1 **website**^#2 **out**^#3 **host**^#4 **being**^#5
Good bot. I knew I forgot something.
Really cool project idea! This is the kind of thing I want to do when I get to learning NodeJS 
Update: I see JSdelivr rated as best of class in uptime and response time here: https://www.cdnperf.com They have no traffic limits and receive sponsoring from the likes of Cloudflare and DigitalOcean. Not sure who they share data with, but surely that can never be more private than an IP address. Looks like a solid choice to me
A few semesters of Computer Science would help. &amp;#x200B;
&gt; I want to be at that intermediate level where I feel more confident about my JavaScript skills and toolkit. Write code. Make little widgets. Play with Web APIs.
It wasn't a VPS, it was just a standard PHP hosting service that's dirt cheap. You can't ssh to the server, you can only ftp static assets &amp; PHP files. Useful for running wordpress but not much else.
I didn't know about that site, thanks. For small projects it'll be great. They can see a lot from a http request (ip, referrer, user-agent, special headers etc). If they set a cookie and the browser keeps third-party cookies they can track across sites. If they would be evil (or get hacked or a malicious package gets pushed) it means Javascript access to your page (eg: an XSS attack). 
You can also check understanding weird parts of javascript video course. And also, check out this book https://books.google.co.in/books/about/JavaScript_Patterns.html?id=WTZqecc9olUC&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y
I last saw it 3 months ago. I still have screenshots.
Pro-tip: When posting code, use the markdown editor and place 3 backticks on the line preceding and the line following the code block.
No need. They just intercept the http request and modify the result. It's really not any different than if you were to let neighbors use your wifi and flip all browser results upside down. http://www.ex-parrot.com/pete/upside-down-ternet.html
What testing framework are you using? What errors are you getting? What have you tried to solve the problem?
[TDDbin.com](https://TDDbin.com) I have tried many random changes, but nothing has worked. I managed to fix the 5 errors in the "Arrow Functions Basics" kata (part 1 of the assignment), but this one is considerably more confusing. The following are the errors I'm receiving: ## bound at definition time, use `=&gt;` AssertionError: {} === {} ## can NOT bind a different context AssertionError: {} === {} ## `arguments` does NOT work inside arrow functions AssertionError: 2 == 0 
Content security policy for the win. 
that's not what they are talking about
Is the code posted the original code of the problem, or has it been modified any?
Since none of the other commenters cared to explain why this wouldn’t help, using Brave Browser is a moot point in this case. We are talking about GoDaddy adding scripts that will be served to visitors of your website. If you think even 40% of users that visit your site will use Brave Browser than you are delusional.
Oh we’re talking about registrar? Hover.com
It is the original code.
I remember this email from Google maps, isn't it only like 3% of Google map users had to pay? 
&gt;Is Kyle Simpson's "You Don't Know JS" good for a beginner that is ready to transition to the intermediate level of JavaScript? Not really, no. There are many, many things in the world programming that are move valuable to understand than what is in YDKJS.
 createResults doesn't return anything. You return what it returns in your async function, so it is "undefined".
What exactly are those things?
When you have strong basis, spending your time programming is better time spent than reading this book. The book is about really advanced things, you may not ever meet in your career. It's more of a book toward senior devs in JS shops.
Which does not work if http**s** is being used ... and this is what OP wrote.
Would I be better of doing something like [javascript.info](http://JavaScript.info)?
No, find an idea of a webapp and go program it. You'll make some world class crappy code. Heck you'll struggle to write fully working crappy code, but you'll do it.
I get undefined when I try to access it like an array. (thePosts[0]) but if try to console log it just like this - (thePosts) returns me arrray of array of objects with data. And I rly don't know what should I return in createReeults to get data
Data structures and algorithms is a good next step once you have the basics of programming down. Doesn't matter what language it is in; in fact a course that uses a different language might be the most beneficial since it will give you another perspective on programming.
Maybe you should come back to it once you've played around with the language more. It's written in a way that assumes you've made some logical mistakes throughout your time with js. If you haven't made those mistakes yet then the books may not trigger your learning as much. I personally started reading the books about a week ago, and after a few chapters I actually learned enough to realize how to refactor my old code in a much better way for my company. So to me it was worth it. There are concepts explained in this book that I had felt like I needed previously but didn't even know what to look for. Depending on what you're using js for, it could be really good to take a step back and dive deep into the details of the language before starting you're projects. You'll design everything better from the beginning instead of trying to work with code that was designed without this knowledge. Anyways, good luck!
I'm interested in. I'm also learning js and node.js. I have commercial experience with git, java, old angular js. I have a lot of free time after work. I can help
I shall be making a GitHub repository. I am going to also make a Discord server to talk to each other. If you want more info, please message me with your Reddit username at Newt#6876. If you can't do this, then feel free to just PM me and we'll sort something out.
I shall be making a GitHub repository. I am going to also make a Discord server to talk to each other. If you want more info, please message me with your Reddit username at Newt#6876. If you can't do this, then feel free to just PM me and we'll sort something out.
I shall be making a GitHub repository. I am going to also make a Discord server to talk to each other. If you want more info, please message me with your Reddit username at Newt#6876. If you can't do this, then feel free to just PM me and we'll sort something out.
I shall be making a GitHub repository. I am going to also make a Discord server to talk to each other. If you want more info, please message me with your Reddit username at Newt#6876. If you can't do this, then feel free to just PM me and we'll sort something out.
Truth is [native mobile apps are dying](https://the.gt/mobile-apps-dying/) in the way that for most businesses it would be cost effective just to focus on web code base instead of going through pain of supporting 3 of them (2 if you do mobiles apps with smth like React Native)
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_function_parameter Though I must admit I don't understand how ... works when destructuring objects.
&gt;Though I must admit I don't understand how ... works when destructuring objects. https://developers.google.com/web/updates/2017/06/object-rest-spread#esnext_object_rest_and_spread_properties
(Disclaimer: I’m the creator of Ortum) You might want to use funcyjs with functional state management library: Ortum. github.com/alber70g/ortum 
Because IE 11 is literally the biggest pile of steaming garbage ever produced, it doesn't support SVG but only some weird Microsoft rip-off of SVG. You'd have to use Raphael.js or something for having the animations work everywhere, but honestly the best option is to just turn animations off for IE 11. 
don’t fucking use fucking godsddy as everyone already fucking told you. idk who still uses them... if you use godaddy you deserve shit inserted into your pages.
You meant http, not https, I presume? 
100% agreed!
Good point. It's been so long so I've looked at their product pages, I'd forgotten IntelliJ even has a free/community version.
In my experience, you're probably not going to get performance improvements with node over python. I'd look at Golang, c#, or Kotlin for higher performance.
Git gud with the command line for git before using a gui for it
Is there any way around this issue? &amp;#x200B;
Ok thank you so much. Guess I'll surrender and try out webpack. I was definitely planning on splitting my code into different files, just wanted a hello world for now basically. Thanks again for the comments.
Good bot
Thank you, GuardianAnal, for voting on autotldr. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
The code has multiple issues so I'd suggest a complete refactor. Since the getJSON method has support for callback, you dont need to use async await at all in this case. The main issue or rather a conceptual flaw in the code is that you're assuming the getResults would run after your API request is fulfilled but since js is asynchronous, it doesnt wait for it to complete (unlike php). Console shows response because it runs again when your request is fulfilled. I know it might sound confusing so I woukd suggest starting with something simple like the fetch api might help you understand async await better.
Neat!
The first test expects the function returned by `LexicallyBound.getFunction()` to yield the exact instance as defined before. In that function, however, a new instance is created by the line `return new Lexically bound();`. The second test checks whether a new context can be bound when executing that function. Interestingly, the assertion is opposite of what the description of that test claims. The last test only tests whether the `arguments` keyword returns a value. To solve test 1, you will have to replace the line `return new LexicallyBound()` with `return this`. As for test 2, I think it is a mistake. The fix for test 1 should yield an assertion error, although the description clearly emphasises a new context should NOT be bound. If we stick to the test description, which I believe is more likely correct than the test itself, the change we have made to fix test 1 is correct. The description describes intent. Check this with your teacher/mentor/whatever. Test 3 can be solved by replacing the `function` in `LexicallyBound.getArgumentsFunction()` with an arrow function. Off-topic: I’m not sure how much you have asked of your fellow students and I am not sure if you feel like you’re wasting their time or you’re afraid of being judged. The former is a legitimate reason to ask others. The latter, however, is not. You stop learning when you stop asking. Everyone is different and being 'slower' than others doesn’t make you less intelligent or whatever. In fact, I basically have to spell out the arrow function syntax every other week to someone ai consider very intelligent and writes JavaScript for a good couple of years professionally. It’s not a big deal. Giving up on yourself is. Just ask the bloody questions.
Reminds me of when godaddy held my domain name hostage and wanted me to pay 11x the original price.
I sent you a friend request on Discord.
.... cue WA sending github a takedown notice in 3... 
... they're asking you to... make these asserts correct by changing the code above them? jesus. 
namesilo is pretty decent. I moved there from dd24 and namecheap. If you need lots of support, I'd lean toward namecheap. Namecheap also improved because of competition from namesilo and other sites.
 changing the syntax of the code slightly... let newArray = array.map( ({address, lastTimestamp, ...keep}) =&gt; { // for every element of the array, // you have extracted (also known as destructured) // the address prop into a variable called 'address', // the lastTimestamp prop into a variable called 'lastTimestamp', // and all remaining props, bundled into the variable called 'keep' // making them available inside the map callback function return keep // right here, you ignore the address and the lastTimestamp variable // and return keep (which is EVERY OTHER property) // which is exactly what you wanted to achieve });
That sounds fun. I would like to join. Work primarily in Node and Java right now, but this would be a fun side project. 
yep, that’s why nobody is using them for 10+ years... subreddits should pin “DONT BUY FROM GODADDY!” on top of all posts...
I think people are too negative here. I would say, yes, dive into it. skip the parts that seem too obscure, then go and build a few small things, then go back to it. It's a fine book and very thorough, and it will give you confidence you know your JS. The only issue I have with it is that it's beginning to show its age.
I mean it's not bad but.... it's very 2012
Yes, you're quite correct.
I miswrote https, and didn't notice in your response. My mistake.
Correct. My mistake. I'd meant to write that comcast can inject into http code.
My main issue with it is that it broke a ton of existing projects and tutorials. IMO, the free tier should have remained. Now it's behind a $200 credit. 
`event.key`? Don't know off the top of my head but check out the source code for [keycode.info](https://github.com/wesbos/keycodes). If you want to easily keep track of whatever keys are being held you can check out [keybinds](https://www.npmjs.com/package/keybinds) -- although this may be manual to do in this case.
Namesilo is the best these days. I used to use Namecheap, but their new DNS and domain management changes made it awful to use.
With Github now allowing free accounts to have private repos, I think I'm just gonna switch to them completely since I already have my site url redirecting to my portfolio on Gitpages. All my projects are hosted under my free Heroku account so I'm really not hosting anything on my iPage account anymore. 
Google Domains and AWS Route 53 as well.
Do you have an example of the json file?
I think the solution to the last assert is just changing the class getArgumentsFunction to use `() =&gt; ` instead of `function ()`
Thank you, since I’m garnering sooo much hate from keyboard warriors! Trump shut down the government and is currently a snowflake nightmare, I enter javachat;... watch this, hold my beer me president.
Google domains for the win, especially if you use any of their cloud services, like I do
Ok I made a new folder with just an empty html and js file, went to the webpack [installation page](https://webpack.js.org/guides/installation/), ran: `npm install --save-dev webpack` `npm install --save-dev webpack@4.28.4` `npm install --save-dev webpack-cli` then followed their [getting started guide](https://webpack.js.org/guides/getting-started/) and cd'd into my directory, ran `npm init -y` and `npm install webpack webpack-cli --save-dev` which made the package.json and node\_modules folder respectively, I moved the js to a src folder and edited the package.json to remove the link to the script and added private set to true, moved the html file to a new dist folder, added `&lt;script src="`[`https://unpkg.com/lodash@4.16.6`](https://unpkg.com/lodash@4.16.6)`"&gt;&lt;/script&gt;` to my html, and ran `npm install --save lodash` in my folder, which added it to package.json and node\_modules. I added: `import _ from 'lodash';` `function component() {` `let element = document.createElement('div');` `// Lodash, currently included via a script, is required for this line to work` `element.innerHTML = _.join(['Hello', 'webpack'], ' ');` `return element;` `}` `document.body.appendChild(component());` to my scripts.js file, realized I needed to update the link to ../src/scripts.js after moving the index.hmtl. It took me FOREVER until I realized I HAD to rename my scripts into index.js, then it still didn't work and said module is undefined, and I checked the tutorial and saw I had to now REMOVE the link to lodash from before and index.js and add to the dist folder main.js file, renamed and moved it accordingly, and still got unexpected identifier on the underscore in line 1 of my main.js, then gave up and continued the tutorial only to find I needed to undo my rename and moving the file so their command could do it, then ran `npx webpack` which gave some warnings but no errors and generated a main.js file. I opened the index.html and still couldn't get their hello world going, checked the console, and I got can't read appendChild: `Uncaught TypeError: Cannot read property 'appendChild' of null` `at Module.&lt;anonymous&gt; (main.js:9)` `at r (main.js:1)` `at main.js:1` `at main.js:1` Now I'm completly stuck, I followed their tutorial perfectly and just get a useless error in their huge minified javascript file.
I guess I haven't been keeping up, it's good to get away from the big Google, awesome article!
Wow that's crazy. I used to use ipage. Moved to Google domains and haven't looks back. It now costs me 1/10 of the ipage cost to host a simple static project.
Does your work make you use some dumb webapp that looks like it hasn't been updated in fifteen years? I hear there's a lot of legacy systems like that kicking around where the businesses don't want to invest in upgrading to fix something that's not ~~broken~~ unusable.
Try opening it in Chrome and use the JSON Formatter extension here: https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en You’ll have to do a bit of manual searching to find what you’re looking for, but it will be much easier to read when it’s formatted nicely.
I would use event.key but it only has 80% browser coverage. I decided upon making an object to associate keys with their keyCode but I'm not sure if it will work with Android browsers. I will let you all know when I test it!
JSON file are just text files that are formatted a certain way so computer can understand them easily. So if you just have one file and want to read it you can open it in a text editor. Most likely it will contain something like this { speakerID: somespeaker, Date:12/12/2018, Message:” hello there , I am the message content “ } Problem is that it will probably contain all the information in one line without spaces or lines 
Google Domains is great. It's one less password to keep track of, is pretty cheap (and has pretty transparent pricing), and has a very pleasant dashboard. 
Your ISP doing it can be blocked by the host using https. This wouldn't solve the issue though as they are the host. Different ball park.
Try jsonlint.com
https://imgur.com/a/H21Yvok I just made this album so you can see what I'm talking about.
I disliked the conclusion, basically summed up to “every framework has their differences.” Author could have added in a general sum up of each framework and given a concise opinion on each one.
No. My work is development, and I need to be able to test different sites for both http and https. If I were to only ever open my client's sites with https, it wouldn't be an adequate test.
Why would you use GoDaddy anyways?
http://porkbun.com/ pretty good, only 6.95$
Actually, his code would work as intended if (1) getJSON return a promise that only resolved after the callback was executed and (2) createResults returned any kind of data.
Eloquent Javascript does sound look a good book for your level. I'd recommend reading it in order. Even as a native English speaker I found I had to re-read chapters a couple of times to really drill the information in. Take your time, go over the bits you don't understand again and again - It's a great book!
I’d need to see more of the data in the files - your 2nd file shows who is speaking and when in the recording they are speaking. From what I can see, the first contains what they are saying but in one continuous stream of text with any time markers. So it’s hard to know who is saying what if we don’t know how fast they are saying it to use the timestamps in file 2. I would guess that the first file has more information adjacent to the “transcripts” element. If I had the actual files or even a redacted version I could write you a quick script to write your output to a webpage in a few minutes.
There is just one json file, it has the text including what was said, all the timestamps and speaker info all in one json file. If it would be helpful and you'd be willing to do it, I could share you the json file if you'd write the script you mentioned. That would really help me. 
Sure no problem, message me a link to the file
Use jq to investigate and extract info... Fast, works great... Even with extremely large files... https://stedolan.github.io/jq/
Added you on discord. I would be very interested 
You can’t “just view” it. You have to create (or find) a program to format it the way you’d like
That would not protect against an iframe that returned a DNS error page with a script since CSP does not get inherited by embedded pages.l, and apparently there's nothing stopping GoDaddy from putting a script in an error page.
Huh, interesting. Your clients' sites need to support http? What's the use case where their customers prefer that over https?
Any idea where I can find such a program? I'm not a programmer and cant make one myself unfortunately. 
JS isn't intended to be a compilation target. JS engines have to do a lot of work to optimize JS on the fly (JS have no clue about data types). Wasm is solution. It's a compilation target language and is something like shortcut to optimized byte code for Engines. 
I don’t know where you’d find one at all, sorry.
I'm pretty much the same as the dude above but I havent really worked with angular but I'm pretty good with JS. I've sent you a reuquest on discord as well.
hacks
 I shall be making a GitHub repository. I am going to also make a Discord server to talk to each other. If you want more info, please message me with your Reddit username at Newt#6876. If you can't do this, then feel free to just PM me and we'll sort something out. 
Nice.
\&gt; One of the first projects I want to work on is a Discord bot made with discord.js. &amp;#x200B; nice
The "correct" answer is [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key), but compatibility with some browsers is dodgy. The pragmatic means, since you seem to only be interested in printable keys, and not detection of dead keys individually is to simply read the `.value` of a focused, invisible form element on either of keyup/keydown events
If you want to take part, feel free to sign up for Discord if you haven't already and add Newt#6876. You shall be added to the chat whenever I am next online!
Are sure you're using the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API), the one with `AudioContext` etc and not `&lt;audio&gt;`/`Audio`. They both support `playbackRate` (see [HTMLMediaElement.playbackRate](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)) but [AudioBufferSourceNode.playbackRate] should be exactly what you need.
Jsx is not templating. It's quite inaccurate to compare the two. Official language features and web standards always lag behind. For example, browsers do not support async rendering. In turn this means that non web standard technology is more performant than vanilla bare bone. However for people who are obsessed by "use the platform" you may want to check such tools like Svelte or Stencil which allow to build web standard compliant web components, while using framework workflows. You may also want to check Rawact, React which compiles to web standard compliant components. It's still being worked on. Like it or not React is not going anywhere. Even if due to some cataclysm it dies, all other tools will mimick it's patterns one way ir another. As we already see it with web assembly tools (blazor for c#, yew for rust). To abstract HTML away, turns out to be very practical idea.
It’s more about the concepts that it takes to put a carousel together and using it as a learning tool 
What about HostGator !? Are they trusted!? Do anyone have any idea about them? Seriously. I never hosted with GoDaddy but now Never buying domain with GoDaddy 
&lt;3
It always pains me to see developers using GoDaddy. They should know better. 
Yeh basically GoDaddy can go fudge themselves
Namesilo.
You have popular python packages then do worst then this (they connect directly to the WA network) alive and well for more then 2 years. They would be better off detecting the app is running on a testing environment and just brick it then going after every little project doing this. 
Sorry can't help in that field (yet), I am just learning as I go... You probably want to search for CI - continuous integration - so that when you commit your git host triggers the build script and so on. Or if you commit to a server, it runs the built script, moves the files from the output dist to their places, run anything else you need, etc. 
The sad thing about using mapbox is that in some countries, e.g. Lithuania, mapbox can't reverse geocode addresses. Therefore I must use Google 🤷🏻‍♂️
Please format the stuff better :) What are the exact commands that fail?
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash $ nvm install node
That is the command that fails? What does that have even to do with the original post that is about installing packages? Are you on linux or windows. If on linux don't you have node in the distro package manager? If on windows, you probably want [https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows) instead.
&gt;I never said I hated it. I was just curious if this one aspect of it was configurable. There are other things about it that can be changed in the settings. &amp;#x200B;
Perhaps update node js on your machine? 
TSLint is the goto standard but you wouls still extend the airbnbs ruleset
I’d just use strings.
If the user is entering the value (e.g. in an input field) it's going to be a string by default. You can then use `parseInt` to change it to an integer. const inDec = parseInt(inBin, 2); e.g. const inDec = parseInt('0101', 2); // 5
TSLint has been around for a long time, so it's the standard choice. ESLint only gained the ability to analyze Typescript recently, so it's a more bleeding-edge choice. Our organization already uses ESLint extensively, so we would naturally want to keep using that as we port from Flow to Typescript (still just dipping our toes in the water at this point, though).
Interesting, any example on a reasonably large sized project? 
thinks
Hey, not yet, sure will add more cases later. This is the idea, to have large projects explained with “codecrumbs”. But, this a key point here, it will work same way on small or big project, does not matter, since it will build and show only “important” spots on diagram (imagine that there 100 more folders, they just hidden). Like here on [standalone version ](https://bogdan-lyashenko.github.io/codecrumbs/src/public/dist/standalone/index.html#) you can click “Source -&gt; open all” to see how big is that structure.
You have to use both tslint and eslint. Refer this: https://github.com/sw-yx/react-typescript-cheatsheet#eslint--tslint
Be carefull with data as it referenced so if you change it in one place it will be changed everywhere :)
You have to use both. Refer this: https://github.com/sw-yx/react-typescript-cheatsheet/blob/master/ADVANCED.md#eslint--tslint
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Fixed!
I can share my experience. I don't really know where I fall on the spectrum from novice to advanced. I'm completely self taught and I've been programming on and off for as long as I can remember really but just started doing it professionally 2 years ago. I work on the front end for an internal app my company uses and after the first year I found the you don't know js series. I learned a ton and I mean a ton. I also realized though, that without having the context of having made a lot of mistakes in my work I don't think I would've gotten as much out of them. The scopes and closures book really hit home and gave me a really good understanding of them because I could relate what I was reading to problems I had encountered already. So my advice is if you want to read them, then read them, but if you're looking to improve your skills start building something. You're going to make mistakes. You're going to get stuck at figuring out the directory structure. You're going to wish you did it differently after you finally do. You're going to find places where you're not quite sure if code belongs in one place vs another. You're going to make those decisions and regret some of them. All of that is ok, we all do. Some of it you'll probably refactor and some of it you'll probably just plan to. Going through that process and learning from your mistakes is what is going to take your skills to the next level. If you don't have an idea of what to build then build a reddit clone or a twitter clone or &lt;insert app here&gt; clone or make a full fledged TODO app. It doesn't really matter. Just pick something and start building and when you get stuck or have a difficult decision to make, make it, and move forward. That's what you'll get the most out of in my opinion. Good luck on your journey.
There are plugins you can use with `tslint` to extend it’s built in rules, namely `tslint-eslint-rules` https://github.com/buzinas/tslint-eslint-rules
Cloudflare just opened up its doors as registrar. they're very cheap and work fine! I just moved all my domains from godaddy to cloudflare. https://www.cloudflare.com/products/registrar/
es6 introduced `0b` and `0B` such that `0b11 === 3` is `true`. Read more (here)[http://www.ecma-international.org/ecma-262/6.0/#sec-literals-numeric-literals]).
Very interesting. Definitely going to try this out on one of my existing repos. Look forward to seeing it expand more!
I'm not sure if this is the tool for me, but one tip I'd give you to make it even easier to get started is to introduce it using [`npx`](https://www.npmjs.com/package/npx), which most people will have installed nowadays (probably more than Yarn). Then getting started could just be a single command, e.g. `npx codecrumbs -e src/index.js -d src`.
Are you hosting through Google, too, or just using their nameservers?
TypeScript is very helpful with this. Knowing the data structures around which an application is formed is half the battle.
That's something to think about.
Not to side with GoDaddy or their doing this, because it is shady af behaviour, but it's worth noting that OP experienced this behaviour as a hosting customer of theirs. So surely they're still good as a registrar?
Have you guys tried using GraphQL for the data exchange? It generates a schema for you. 
GraphQL like someone else said, OR make an NPM package you can use in both locations.
That's not what I said. I said I need to be able to test against http and https. How can I verify that a site is correctly redirecting to https if MY browser is always doing so?
Disclosure: self-submission
It’s been a while since I used Grunt. But try looking at the plugin grunt-processhtml I think that allows you to do exactly what you want. 
Thank you very much!
Thanks for the feedback, I will add npx instruction to readme as well
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Added a license
aside from the API , we have other services that depends on this data model, we have machine learning microservices that send messages to Kafka using the same model format. We are looking towards a solution even before the API layer. We could use GraphQL but the schema used by the GraphQL server itself would be taken from a shared location which will be used by other internal microservices and data processors as well.
This is fantastic. Such a useful tool - I work with a large codebase and the visibility this provides is awesome - the ability to just comment in the file and leave a breadcrumb is inspired - also showing the content of each file is handy for quickly jumping through relationships and building a picture in my mind. Bookmarked and using. Thanks!
I find TypeScript more of a hindrance than anything. 
Hi /u/mjain99, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/nmahser, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/macdaddylol, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/anamdeo71, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/blackelfxd, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dudewith3faces, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Skimbeh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Greate guide. thanks.
Hi /u/InterplanetaryFry, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Brofessors, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/sanzo03, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ivano1990, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Naturepower, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Kuritzu, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Blooker20, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Why?
Hi /u/amwmedia, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/AdamWacker, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
More boilerplate, extra translation layer, syntax is annoying and, honestly, I can figure out what I am looking at in 2 more seconds because I have good tooling set up in my local environment. It's just a crutch for people who don't understand how javascript works very well. We audited the tech on our team and immediately discarded it after the first week. Gave zero benefit for lots of annoyance.
Hi /u/ripvannwinkler, please refrain from personal attacks. Thanks.
Static typing will not yield benefits immediately. They benefits become known when you have to refactor. Spending one week on typescript is not enough time to determine if it’s worth it. Furthermore there is a right and wrong way to type in typescript. If people are new to it trying for the first time then there will be mistakes.
Hosting. And database, and serverless back end. Check out [Firebase](https://firebase.google.com). You can get a free ssl through their hosting, even a free uro, if a custom one is not important to you. The only challenge is that you will have to deploy from a node.js command line. It's not hard, and they have good documentation and tutorials, but if you are not comfortable with that it can be daunting at first.
I would really suggest to through these links. Trust me these have helped me more after reaching comfortable state in JS. &amp;#x200B; 1. Design pattern in JS - [https://addyosmani.com/resources/essentialjsdesignpatterns/book/](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) (important ones are revealing module, module, mediator, pub/sub, factory) 2. Large scale JS architecture - [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/) and [https://www.youtube.com/watch?v=b5pFv9NB9fs](https://www.youtube.com/watch?v=b5pFv9NB9fs) 3. MVC in native JS - [https://alexatnet.com/model-view-controller-mvc-in-javascript/](https://alexatnet.com/model-view-controller-mvc-in-javascript/) 4. Open ended questions like improve web page performance (caching, CDN, sprites, minification etc) 5. Security in web pages (HTTP headers, CORS, XSS etc) 6. ES6 features 7. Closures in JS - [https://stackoverflow.com/questions/111102/how-do-javascript-closures-work](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work) 8. Coding guidelines - [http://jstherightway.org/](http://jstherightway.org/), [https://github.com/airbnb/javascript/blob/master/README.md](https://github.com/airbnb/javascript/blob/master/README.md) 9. this in JS - [https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work](https://stackoverflow.com/questions/3127429/how-does-the-this-keyword-work) 10. Inheritance in JS - [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance) 11. Debounce and Throttle in JS - [https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf](https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf) 12. prototype vs \_\_proto\_\_ - [https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript](https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript) 13. Open ended question - AngularJS vs Angular vs React vs Vue. (when, which, why etc) 14. Generic curry in JS - [https://gist.github.com/shidhincr/7315316](https://gist.github.com/shidhincr/7315316) 15. Polyfill for forEach, map, reduce etc - [https://gist.github.com/githiro/5819142](https://gist.github.com/githiro/5819142)
I use `grunt-string-replace`. [here's one of my gruntfiles](https://github.com/Pamblam/jSQL/blob/master/Gruntfile.js#L74) you can reference for example.
What are "Dunning Kruger JS developers"? The raw, reek arrogance is hilarious here, considering that static types have been proven to increase software quality and velocity, but you guys were like nah, we taught ourselves JS so we clearly know more than the entire state of CS academia. God this community is cancer 
Plan more -&gt; less changes
&gt; It's just a crutch for people who don't understand how javascript works very well. Knowing what something returns is not the same as knowing how it returns it. 
Have you every worked with a typed language before?
&gt;It's just a crutch for people who don't understand how javascript works very well. That is unnecessarily condescending to other developers you don't even know.
Setting up TypeScript can be annoying the first times, but once it is done, it's absolutely invisible. I've been working in TypeScript for all of my personal (and most professionnal) projects for the last year, and the benefits in intellisense and refactoring are way more than worth it. Discarding it after a week is like giving up development as a beginner because you can't immediately figure out the difference between a "for" and a "while" loop. Of course it has a learning curve, everything has.
Don’t feel bad, I had a really hard time digesting Eloquent JavaScript, too. Rather than dig in with learning the ins and outs of the language, I think the best way to transition from “beginner” to “intermediate” is to start trying to build stuff from scratch. You will find the gaps in your knowledge fairly quickly. Fill in those gaps along the way to being able to make useful things. You don’t necessarily need to fully understand closures, higher order functions, etc. in order to do that. In my opinion, Eloquent JavaScript and YDKJS are intermediated-to-advanced books that take you from being capable with JavaScript to being competent.
What do you think? 
I've looked into Firebase before. But only for push use. For certs, I have had a really good experience with LetsEncrypt.
Graphql is great like everyone is saying. Just hosting it will work.
And it’s not even remotely true.
&gt; It's just a crutch for people who don't understand how javascript works very well. It’s only monday and I already have a contender for the dumbest thing I’ve read all week. Typescript isn’t for you to realise what you’re looking at more quickly, typescript is to keep you from breaking it when you spend equally as much time modifying it. I bet your javascript is just a bunch of unstructured jQuery DOM manipulations, because any sane person would kill for typescript in anything even remotely more complex than that. Just argument type hinting alone is absolutely worth it.
My mistake, I related them because this was written in JavaScript and uses websockets to create the web experience.
... pretty hard to get an MSCS without it
Only if you suck at naming conventions
Polyfill, perhaps?
I used to poo-poo static-typed languages, but I'm working on a game in C# and omg it is so helpful.
yeah that is really cool 
You must not have worked with very complex applications before, ot at least not with very complex data structures. As for TypeScript's "annoyances", they're almost exclusively down to people not understanding how it works. When you learn how it works, you'll appreciate why it works the way it does and the benefits it brings. I disliked it and static typing until I used a strongly typed language in Rust. Then I understood the benefit. You're being downvoted a lot because you're arguing against virtually the entire field of CS, but I'm happy to converse with you if you're open to reconsidering (I will, as well, in good faith).
Ironically, not a private repo.
Implementing type enforcement in JavaScript just hamstrings every reason you would use it in the first place. I'm an Enterprise full stack and ML engineer. So I understand why people tend toward it early on. But there's a reason languages like python and JavaScript never implemented strong typing. Those languages are meant to be used to avoid some of the problems that come with typing (code bloat, interpreter/compiler slow down, development sluggishness, etc). I am obviously not arguing against all of CS if these are some of the most widely used languages (out pacing many mainstay compiled counterparts, mind you) and they refuse to implement typing. I understand the benefits of strongly typed languages. I, in fact, pick java and c++ often if they are better suited for a task. But JavaScript is not a place for it. It simply makes it bad at solving both sets of problems.
I think a lot of the issue is people don't have any exposure to static typing and it seems like more work without any immediate benefit, or they're only used to Java as a static language and conflate the ridiculous cost of writing Java with writing static types. I've been showing Kotlin (which is structurally and conceptually very, very similar to Node) to some Node juniors at work who haven't ever really professionally written anything but Node, and universally, they're all like "I want this." It just takes looking at some real code.
&gt; Implementing type enforcement in JavaScript just hamstrings every reason you would use it in the first place. It doesn't, because although TypeScript is statically typed it's only a layer for the compiler atop JavaScript's type system, and so coercion for example is still totally valid (for better or for worse). You can still use a number in a template literal without casting, and you can still test anything for truthyness without casting. &gt; there's a reason languages like python and JavaScript never implemented strong typing. TypeScript is not strongly typed. The JavaScript community is adopting TypeScript at very high rate, and I think Python recently implemented some sort of static typing system? Not familiar with the ecosystem but I remember reading something about that. &gt; the problems that come with typing (code bloat, interpreter/compiler slow down, development sluggishness, etc) Bloat implies that it's without benefit, which I'd challenge. Every type I write is beneficial for the code that follows it, whether that be avoiding type errors, or improving readability or data structure knowledge for those that follow me. The compiler is very quick, and most people are already using Babel anyway. It's a slightly higher upfront cost in exchange for invariably less code debt, and an easier time in the future interfacing with what you're writing now.
I started to read the original article it's great... Still needs to dive into each of these topics for which you seem to provide great references. _NB: it lacks the 34th.._
But that's my point, it's not even fully solving the problem. You basically get the worst of both worlds with typescript. All the problems if typing with all the problems of a less-structured language. The only reason I use JavaScript is to speed to development time or set up quick APIs. Otherwise I use more fitted technologies. Typescript is simply an attempt to make JavaScript a (poorer) version of something it's not meant to be
cool tutorial!!
I am a complete noob but could it be that this could revolutionize the way code is documented for newcommers that join a company and have to start digging to find where they actually need to place the code of new features? Or do I overvalue this and there are other better practices/tools out there?
Some links do nothing, some opens a popup telling me to log in to read. &amp;#x200B; *"Pardon the interruption. We’ve seen you here before. Let’s make things official. Already have an account? To make Medium work, we log user data and share it with service providers. Click “Sign up” above to accept Medium’s Terms of Service &amp; Privacy Policy."* **Yeah, how about no?** # Oh, and fuck Medium!
That's incorrect. TypeScript understands the semantics of the language, so when you coerce for example it knows what the output is based upon the input. JavaScript may have a very ill-defined dynamic type system but it's still rooted in rules and logic. There are very few serious limitations to type safety with TypeScript's compromises, though it's not perfect, for example stuff like [this](https://github.com/Microsoft/TypeScript/issues/13778). But the language is improving all the time and, if you opt-in, becomes stricter in useful ways all the time. If you only use JavaScript for very small projects that you'll never touch again, then sure, don't worry about TypeScript. The same can be said if you only care about development velocity now and care not about the tech debt your lack of explicit types inherently creates. For a large project where you care about maintainability there's simply no question to me about the benefits that TypeScript brings. I'd urge you to give it another try next time you're working on a personal project. I'd be happy to answer any questions you have about it, or solve any roadblocks you've hit (I probably hit them too). I don't come from a statically typed background, in-fact the only language I learned before JS was PHP. I don't like Microsoft as a company. I was overruled by my boss to start using TypeScript a couple of years ago. But now I wouldn't develop anything serious in the web space without it.
Didn't want to go into that rabbit hole, but agreed :)
thx 4 sharing
If we look at the statistics, React has been more popular so far: **2017**: [https://2017.stateofjs.com/2017/front-end/results/](https://2017.stateofjs.com/2017/front-end/results/) **2018**: [https://2018.stateofjs.com/front-end-frameworks/overview/](https://2018.stateofjs.com/front-end-frameworks/overview/) But let's see what happens in 2019 though.
No it's explained in the README the difference between ponyfill and polyfill.
this seems completely unironic actually
&gt; Rawact Cheers, I had no idea about Rawact, that seems very cool! I will admit I am a beginner at React, so I am not going to debate you on it at this point. Lit-Element/HTML is at rc2 stage, going to try them both properly soon, and once I have had enough experience of all of these libraries I may return to lay more scorn on React :)
This is definitely one of top open source projects of 2018.^^^/s
You are totally right :) and this was my intention, to build a tool which helps to “get up to speed” with new code, and, make it easy to share knowledge about code architecture (something newcomers don’t have and spend too much time to learn on their own)
Ahahaha! Very interesting. Thank you!
You made another account just to upvote your own post...
Crap, I forgot what happens when you use the word *irony* on the Internet.
She is a friend of mine.
Sure... because normal people create a brand new Reddit account at the exact time that their friend creates a post so they can upvote it, whilst providing a very low effort generic comment so it seems like there is some discussion. Its not very believable.
Not that it's bad, but I hardly see any reason to introduce a dependency for a module that essentially exports a oneliner.
That's a fantastic way to say you were against something
haha it's funny though. because when I read your message, I read it as if it was on "a private repo", missing the "not" modifier actually I agree with you about it being (slightly) ironic, and I dunno why you're the one getting downvoted instead of me. perhaps your snide and condescending remark is mostly responsible
How did I miss this news?! I wonder if this was a Microsoft move or was planned before they bought them out.
Giddy-up!
Why, though? Also, can’t you just add a new remote repository (GitHub) and push?
Poor bitbucket 😄
I recently went through this exercise getting familiarized with TypeScript. At work, I use the Airbnb React config and Prettier config. I ended up continuing with eslint for the following reasons. 1. TSLint's airbnb is not actually being maintained by Airbnb like the eslint config and lacks parity 2. Despite the config being called tslint-config-airbnb, it is actually an implementation of eslint-config-airbnb-base (AKA missing the React-specific rules) 3. Even if the user wanted to implement the react-specific rules, because some rules are not implemented in tslint, it would not be possible (Example: [https://github.com/palantir/tslint-react/issues/117](https://github.com/palantir/tslint-react/issues/117)) 4. The roadmap issue on the TypeScript repository seem to suggest that they're going to utilize eslint rather than tslint. [https://github.com/Microsoft/TypeScript/issues/29288](https://github.com/Microsoft/TypeScript/issues/29288) It took me a bit of time to get eslint working happily with TypeScript though.
Heh, its a pretty common phrase: https://www.merriam-webster.com/dictionary/pooh-pooh &gt;&gt;&gt; Definition of pooh-pooh intransitive verb : to express contempt or impatience transitive verb : to express contempt for or make light of : PLAY DOWN, DISMISS
Gitlab has had free private repos since it existed FWIW to all who haven't heard of/used it.
Well shit. TIL. 
I agree that it's fantastic though!
No it hasn't, you had to have an account to make your repos private. If it's free now that change is less than a month old. Source: I'm on GitHub weekly.
np :D Although I get the point. If you started to learn programming, you've probably started with HTML, when CSS to give some make up and when breath in some life to it with code and keeping things reasonably separate. And it's fine. That's what you should do. But there is one assumption being granted in your approach. And that is that you're doing a web app. React aims not to make assumptions on what platform it's being used. So abstracts the html away, because in some platforms, like VR for instance, there might be no HTML to begin with. Instead all you have are React create element functions which output view. The tags "mark-up", which are a bit misnomer, mark the interface of the function, that is to say that it ensures that the return type will always be thing of specific set / type of things. In this case, React Element. To illustrate that it's not actually mark up, lets check common example of react-router: const route = { path: '/event', component: props =&gt; &lt;MyComponent {...props} /&gt; } return &lt;Router path={route.path} render={props =&gt; &lt;route.component {...props}&gt;} /&gt; See, how our "mark up" changed is identifier? Well, that's because it's not mark up, but a function. The \`&lt;&gt;\` while allows for easier readability, signifies that this is specific type of function which can be used in specific way. There is no "view" you breath in life with code. Code is what makes the view to appear to begin with. You start from the other end. Frameworks like Vue tend to have templates. But in reality, those are not templates either, as in fact, Vue deals with very same render functions as React does. Difference is that Vue puts an additional abstraction on top of that to mimick the template workflow. React doesn't bother, and in turn is more 'raw', that's why you get the slogan "it's just javascript". As for web standard compliant stuff, it's kinda cool how far the web gone, but if sharing components between different tech stacks isn't one of the requirements or you are in really dire need of very small bundle sizes there isn't much reason to use them as it currently is. And I like Stencil.js, which is build tool to make web standard compliant web components (although it uses JSX and virtual dom), I would still generally pick React for productivity and performance.
So you're telling me Microsoft didn't manage to alienate users and kill it straight away? What's the catch?! 🤔
You might want to at the MediaDevices interface ([https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices)). If multiple devices are connected you might be able to toggle between them.
Just sign up, half of the internet has your data. At least this is for educational purpose and not for watching videos on youtube about "Stupid, Crazy &amp; Angry People Vs Bikers" 
It's only been the case for a couple of weeks.
Git_lab_ not Git_Hub_.
Oh, you're just testing that http redirects to https. Sorry, I was assuming something silly like your clients had actually asked for the full site to render normally via http://.
If you're actively working on every single one of your small number of repos, sure. Don't know about anyone else but that's certainly not the case for me.
not the community man. just this "imverysmart" ass.... 
I've used bitbucket for private repos for years and been happy with it. I'm glad Github is offering this but is there a good reason I should switch?
sveltejs! :D
“Strong” typing is not a thing. “Static” typing is the term. 
Oh, well damn. Forget I said anything, then.
Awesome, thanks man. I'll mention that maybe you can try changing your for loops to foreach for readability but otherwise looks clean.
So if I’m comfortable with all of these is it safe to say I’m capable of handling a jr position? I’ve been having a hell of a time because everyone seems so focused on the fact I didn’t go to college and taught myself everything like that’s a bad thing. 
Bogdan: This is so ridiculously good!!! Love it. I don't do much JS development but am bookmarking this for use the next time I do. Might even help in some of my own code.
&gt;Oh, you're just testing that http redirects to https. Pretty much, plus whatever else might come up. Don't really want to tightly lock down my browser. It needs to be able to be the same as the average user. &gt;I'm just wondering how you'd ever get to a state where you would see content injected by Comcast. Well, not when I am testing my client's sites. But if I'm using my browser for other things, other than visiting my client's sites, then I occasionally get Comcast injections. For example, if I open json pretty print, it's not going to default to https and I don't normally need to use https for them.
If you're comfortable with half of these you'd be more capable than a lot of juniors I know.
Not really 
You may want to mention the lower bounds of support. Things like array spreads and Object.assign aren't supported all the way down to e.g. IE11.
Embrace, extend, extinguish ;) - this is the extend part. Soon Microsoft will extend the git protocol and make some paid ‘pro’ parts ;)
I bet you work tirelessly 24/7 365?
you came tot he wrong place. r/javascript hates javascript, and loves static types. Python doesnt get nearly as much hate for being what it is. The fans of static typing is quite numerous; and they viciously downvote anyone who doesnt effusively praise the glory of static typing. For those of us who specifically choose javascript because of it being dynamically typed and thus suitable for generic programming, its quite disconcerting to constantly have typescript pushed on us. It woudl be like going to r/python and finding 90% of people saying "python sucks, just use java instead". lucky for the python crowd, they dont have it deal with that. 
Say what you will, but they aren't Yahoo!
For those of us who want to work in a dynamically typed language, any support for static typing is bloat by definition. We dont want it. The only use for babel i see is backwards compatibility with older versions of JS by compiling down to es2015. &gt; I don't come from a statically typed background, in-fact the only language I learned before JS was PHP. Ive used static types for over 20 years, and I've come to see that they are counterproductive. You never quite earn back the time you spend dealing with them or rationalizing them. I feel the same way about OOP; it seems nice at first, but it makes refactoring a large codebase 100 times harder than it should be. 
Personally, I'd prefer to have everything in one place. But other than that I don't think there's much reason.
Thanks for a nice feedback) What language do you use usually? Eventually it will support all popular languages, so it’s not just “JavaScript tool”. It’s one of the next big features I am planning to add, so I would say wait a ~ month;)
Are usually use Objective C, C, and Perl. Not for web development. But I follow JS subs because I do do some JS from time to time.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [TIL: A promise can await itself, thereby creating an infinite (never-resolving) promise.](https://www.reddit.com/r/programming/comments/afzgdb/til_a_promise_can_await_itself_thereby_creating/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Does that push the full history?
Yes. 
BitBucket = Atlassian = Australian.
I see. So the only thing which is different per language is AST parser. For JavaScript I use babel-parse to build AST and identify comments, and, eventually it will be used for much more, since then I can make predictions about code and build some smart behavior around that. So for now, for other languages, I think to write some “dumb parser” (as a first step) to parse comments in code (kind of fallback solution) and later will figure out language by language if there is good AST parser I can integrate.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [I've found a bug in webpack](https://www.reddit.com/r/webdev/comments/afznb5/ive_found_a_bug_in_webpack/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
&gt; For those of us who want to work in a dynamically typed language, any support for static typing is bloat by definition. We dont want it. You're speaking for every one of us now? &gt; The only use for babel i see is backwards compatibility with older versions of JS by compiling down to es2015. Right, but that defeats your argument about not wanting to introduce a compiler. You're already using one. You can replace it with TSC or use a TS plugin in Babel. Same outcome, no additional tooling, no slowdown. &gt; Ive used static types for over 20 years, and I've come to see that they are counterproductive. You never quite earn back the time you spend dealing with them or rationalizing them. Dealing with them is a case of experience. Rationalising them is a case of understanding the data you're working with; I'd argue forcing you to rationalise this is a benefit in and of itself. &gt; it seems nice at first, but it makes refactoring a large codebase 100 times harder than it should be. Microsoft actually developed TypeScript specifically because of how painful it is to refactor a large JavaScript codebase. Don't tell me you've figured out something that Microsoft (TypeScript), Google (Dart), Facebook (Flow), et al haven't.
It's good for if you want your code to be in Microsoft's purse.
Do you happen to remember the username? Also, feel free to report suspected vote manipulation directly to the admins.
Microsoft has been supporting Git in its developer tools and ALM products (TFS/VSTS/Azure DevOps) for years. They have also contributed significant features to Git itself, like the Git Virtual File System. Embrace, extend, extinguish is not the way today's Microsoft operates, at least not in developer space.
If Github is going for feature parity with other git hosting providers then the next step would be to implement pipelines for builds. That would probably be limited to 300 build hours/year for free edition for non-open source orgs, or something like that. I really hope they do implement pipelines because this would allow them to truly distinguish themselves from the competition. I'm currently a bitbucket user for work, and I'm less than impressed with their pipeline implementation.
GitHub has free private repos?
I'm assuming that you aren't self hosting, which cdn are you using?
You can also create an always unresolved promise using the `Promise` constructor and never call resolve or reject. `new Promise((resolve, reject) =&gt; {})`
reddit is not a backup for github issues
[Since a week ago](https://blog.github.com/2019-01-07-new-year-new-github/).
[Since a week ago](https://blog.github.com/2019-01-07-new-year-new-github/).
I think [the (beta) Actions feature](https://blog.github.com/2018-10-17-action-demos/) can be used for this already. Someday I'll figure out how to use it and try it out, since my account was already let into the beta…
If you contribute to open source projects you by necessity need to have a github account, might as well keep everything in one place.
&gt; You're speaking for every one of us now? I'm speaking for people who never want to use static types. Its not presumptuous, its tautological. They dont like what they dont like. &gt; You can replace it with TSC or use a TS plugin in Babel. Same outcome, no additional tooling, no slowdown. I avoid babel whenever possible. But even when I do use it, I avoid TS, because someone could introduce java style code which I would then have to refactor. &gt; Microsoft actually developed TypeScript specifically because of how painful it is to refactor a large JavaScript codebase. Its a drag to write static OOP style code in a dynamic environment.So yes, doing static OOP is es6+ is tough, while Ts makes that style easier. But not a drag to write dynamic code in a dynamic environment. What static OOP people often call "refactoring" is usually "renaming things" or "changing signatures", but that is not refactoring at all. Code without spaghetti includes doesnt have those issues in the first place. The encapsulation brought by OOP is lost when your class has to known the types and structures of 100 other classes. Real refactoring is when the data relations and multiplicities change, which is common when your problem space moves. OOP is still a known drag on that real refactoring; All your classes have various dependencies on each other, and it becomes hard to fix one place without breaking several others. Often entire class hierarchies go in the bin, and you get to restart from scratch. Static types fall in the same space imo, especially when type information leaks out between modules. Static OOP programmers trying to be DRY usually throw encapsulation and modularity out the window fast in order to maximize reuse. I see microsoft reacting to the large pool of engineers who went through college on a diet of java and OOP and feel most comfortable when they are allowed to revert to that style. Coming off a TS + angular 2 project you wouldnt know you were using a dynamic language at all but some sort of FE java dialect. They are going to write object oriented static style code with whatever tool they have, and sure its better for them to have a tool that uses their preferred style. But not everyone wants to work in that type of environment, and not everyone thinks that static OOP is the best way to write code. Its my preference to save the spaghetti for dinner time, and keep the TS away from my JS. 
If you care the slightest bit about security (because of a new Australian law both forcing employees to comply to backdoor requests while keeping them secret and allowing them be fired if found out because of it), then yes.
To clarify, they have made a series of laws allowing * spying on the constituents' devices if you're a governmental authority * asking for employees to create backdoors * not allowing those employees to admit such * allowing them to be fired for creating the backdoor. * among more
And Australian means insecure. [Anti encryption bill](https://techcrunch.com/2018/12/05/australia-rushes-its-dangerous-anti-encryption-bill-into-parliament/)
[Australian anti privacy and encryption laws](https://techcrunch.com/2018/12/05/australia-rushes-its-dangerous-anti-encryption-bill-into-parliament/)
/r/totallynotrobots
Yes - if you care the slightest bit about security move it over to Microsoft.
High quality article. Thank you for sharing
OK, removed post.
F
I don't understand how people can be this silly * it is *illegal* for MS to steal code. * it is *easy to find out if you should suspect* that MS steals your code. * it is *easy to determine* if MS steals your code. * it is *easy to sue and win* if MS steals your code. Just ask Apple. They settled out of court but we know it included a 150 million dollar inveatment into non-voting Apple stock and keeping MS Office up to date on Macs for 5 years (and as part of the settlement because MS wanted something too, they did 1 wrong but so far are doing 2 retributions, IE was made the default browser on the Mac for some time). They were going to be a a multi billion dollar lawsuit but MS threatened to stop MS Office for Mac support. For Apple that was more important than money because MS Office is the standard office utility suite. But for little ole you, take the money. 
I believe you can even omit parameters in callback, it doesn't use them anyways. Hey, this can be a coding challenge - to make the shortest never resolving promise in JS.
Some advice: Keep looking, or start doing some freelance work. I'm currently looking for my second job, and I'm struggling with the fact that I've studied 1 level below what most companies require. Fortunately approximately 2 years of experience at a company with only people of that required degree doesn't mean nothing to employers. You could also try getting an internship, and if you do well then maybe the company will hire you. That's how I got my current job. Good luck! 
https://www.reddit.com/r/javascript/comments/afw27x/_/ee2ncvu
Thank you for choosing to help keep communities clean `:)`
Can you npm install the missing package? 'strip-ansi'? I had a similar issue earlier with 'ansi' and that worked for me 
That depends, do you have an up to date portfolio with a few recent projects?
Oh my god this is so dumb 
This is a good reason. I hadn't made the connection about Atlassian being Australian. Thank you
`getJson` is not returning a promise so the `await` doesn't do anything.
Thanks! I didn't know about jest.each method, will take look and refactor. Also, Joi looks good for my case, will definitely take a look.
&gt;mistat44.github.io/MovieReviewFinder Thanks man, If you find a bug or suggestion, let me know. &amp;#x200B; Btw, How can i see review on your page? Just shows a list of movies
Put another way, Promises are not guaranteed to resolve, since resolution has to be triggered by something, and the "something" is totally arbitrary.
&gt; It's just a crutch for people who don't understand how javascript works very well. I'm *sure* Microsoft engineers don't know how JavaScript works very well...
 new Promise(()=&gt;{}) maybe?
Static typing is always short term pain for long time gain. Even if you are working on a solo project you are eventually going to reach a point where you have so much code, you can't remember how parts of it work. Large multi-person projects are especially nasty with dynamically typed lanuages. Javascript's variable re-assignment is the icing on the cake. Strict with compartmentalisation / modularity can help somewhat, but it is reliant on the whole team being very disciplined.
async f() = {} Does that count
How romantic!
I remember seing a couple of libraries and thinking none of them worked in both nodejs and browser environments, so I made my own. Also, I learned a lot of things in the way.
Thanks! 
Eloquent JavaScript is the book for basic mastery and technique. The ydkjs series is more of a deep dive on advanced features of the language and the applications. If you want “how to JavaScript”, this probably isn’t the series for you. But if you already know what the conventions of JS are, and want to know why those conventions were established and get a deep dive under the hood, this is an excellent series
By calling out Australia as being a problem, I'm assuming you're referring to the recent encrypted communications laws. Those laws affect any company that offers products or services to Australians. GitHub is equally affected by them.
Unfortunately no! It resolves to `undefined` immediately.
The last 3 points in your list are myths. No individual employee will be secretly compelled to do something without their employers knowledge. Requests will go through the same channels as any other legal request. 
Good bot.
Awesome, great explanation. What resources are best for "how to JavaScript"? I was actually going to start this long path from p1xt: https://github.com/P1xt/p1xt-guides/blob/master/job-ready-javascript-edition-3.0.md Not sure if that is worth my time. For some context, I understand JavaScript variables, loops, closure (although I never really knew that I've been using it all along), how to build a **very** simple REST API with some MongoDB, and can also get HTML and CSS to do what I want..but I still feel like the CSS has control over me for the most part. I don't know flexbox or CSS grid, for isntance.
Do you have a source please? Everything I’ve read so far has Said otherwise. 
I dunno about other people but I think githubs tooling and UI are wayy more refined 
"Stealing code" is not the only implication of "purse."
A tad shorter: \`new Promise(x=&gt;x)\`
Thank you!
I prefer to host my source control with an outfit that doesn't have a rich history of down time and data loss, thanks.
Source? Literally every source has said otherwise. So much so that Australian companies are starting to in greater numbers higher remote positions.
Yeah, one major incident they were transparent about. It happens, they have backups, their backups work. Dunno about downtime, but you do you kiddo.
What implication are you thinking of then? Because other than that the only thing you could be referring to is monetary gain, and most third party repo integrations (CI/CD/issue panel/whatever) offer Github support, so thats not MS's purse.
What implication are you thinking of then? Because other than that the only thing you could be referring to is monetary gain, and most third party repo integrations (CI/CD/issue panel/whatever) offer Github support, so thats not MS's purse.
&gt;youtube.com/watch?... Sorry, what?
When the law came into effect, my company's lawyers briefed us on what impact it would have and that was one of the myths they debunked. Also, Bitbucket and GitHub are not communications providers and are not targeted by the new law anyway. They were and still are subject to warrants requesting information according to pre-existing laws. Nothing hosted on those services is encrypted in a way that prevents the companies accessing the data from any account anyway, unless you encrypt it yourself before committing and pushing.
Bonus. If you define `f` like: `let f = f =&gt; Promise.resolve(f).then(f)` then `f(f)` is also an infinite promise.
I'm gonna cherry pick off OP's comment..but you seem to have an opinion on what a Jr. should know. I was going to start doing [p1xt's JavaScript guide](https://github.com/P1xt/p1xt-guides/blob/master/job-ready-javascript-edition-3.0.md) to hopefully land a Jr. position in the coming two years or so. It's *a lot* of work, but it seems rewarding. I think it teaches a lot fo things I would miss by doing just one Udemy course (the Colt Steele one is a classic one people do). I have familiarity with basic OOP concepts, as well as some other things like loops, arrays, HTML, CSS, etc. but wonder if you think the concepts covered in that guide are useful for aspiring Jrs like myself. I really appreciate your opinion.
Any plans to support Angular or Ionic projects? I've tried several different versions of the start command, but I continue to get an empty browser window when I click 'src'. Very cool idea otherwise, and I hope to be able to use it in the future.
Turning GH into a shitty website in general in order to make it pay for itself, for one.
I prefer GitHub because the enterprise settings I've been in use GitHub Enterprise. It's nice to have the same UI between work and home. Plus name recognition and popularity, employers ask for your GitHub, not your Bitbucket. I use the GitHub logo to link to my profile on my portfolio. I wouldn't recognize the Bitbucket logo if I saw it on a portfolio, and I don't want to risk potential clients not recognizing it either.
PKG worked pretty well -- the --help docs were better then the readme for sure. Thanks for the tip &amp;#x200B;
Nice try buzzfeed
Good bot.
nice 👍🏽 
Soon we'll have a quine promise: a promise that promises itself.
1. That's not putting code into their purse, it's putting repo management into their purse. 2. They haven't done that yet. 3. It's ridiculous to think they will do that, it is a horrible business model and switching would be easy 4. It's even more ridiculous to complain about it before such a thing even occurs. 5. It's even more ridiculous when you realize that A, Github could have done that before the buyout, and B, every hosting service can still do that as they please. Just because MS owns it doesn't mean the liklihood of such a thing increases. 6. No matter which host you use, you will *always* have that problem unless you run your own host (whether it be a simple git server or Gitlab/Github/BitBucket/whatever enterprise), which has it's own problems because hosting will always cost you. I'm surprised that the "Microsoft more like Micro$hit" fanboys have resorted to arguments not against MS but against the idea of hosting itself but treating it like it's only a negative for Github because MS I'm not saying you should *like* MS. But you shouldn't blindly hate them either. 
With respect, that's your companies lawyers, and not a group of independent lawyers willing to tell the masses. I can't verify that source, not to mention the obvious bias it has. In the exact same way you said this, like I mentioned, there have been reports of Australian companies switching to non-Australian developers for exactly these laws, both communication providers and not. Are you to tell me that their lawyers are fools and yours aren't? Again, not against you. Just that this source is not verifiable.
Where did the OOP argument come from? TypeScript does not make you write OOP code, it does not force it nor does it advise it.
That certainly explains things.
F
BitBucket sucks in a lot of ways, but it does have better branch protections, and merge strategies. Gitlab and BitBucket are better than Github in this way. Github Enterprise offers serverside git hooks which *can* be a solution, but it's less elegant than BB and gitlab.
this function is less correct, since it returns the resolve function, however it is just as useless, because you don't call the resolve function with a parameter
Yes... FEED the /r/javascript bandwagon.
I'm liking how more and more articles are buzzfeed-like titles on /r/javascript. Can't wait until this subreddit is nothing but articles telling me the top x to y with javascript.
if only it were just 33
https://www.zdnet.com/article/australias-encryption-laws-are-highly-unlikely-to-dragoon-employees-in-secret/
See [my other replies starting here](https://www.reddit.com/r/javascript/comments/afw27x/since_github_now_has_free_private_repos_heres_a/ee2u2pv/)
&gt; It's ridiculous to think they will do that, it is a horrible business model and switching would be easy Famous last words!
Ballmer’s gone. So it’s no longer about developers, developers, developers, developers... Actually MS seems a lot different/better for developers now. 
Awesome!
It is *git*. I can switch any repo to any host with at most 5 commands.
Thanks. I'm still skeptical and personally wouldn't risk anything because of it, but I'm more at ease. Poor wording will screw over all, eventually.
It is called [parallax scrolling](https://en.wikipedia.org/wiki/Parallax_scrolling). It is easy to do poorly. Though on websites like your example it can look good. It does tend to produce a rather large website to download the images and other media add considerable amount of data to download to make it work. It looks like for your specific example they are using the [Vue.js](https://vuejs.org/) framework. With a component that extends vue.js to support parallax. The exact framework is not super important. There are plenty of ways to do that design. [Including some that don't rely on a framework](https://www.google.com/search?client=firefox-b-1-d&amp;q=pure+js+parallax). 
Also, GitHub will automatically import your BitBucket repo (one at a time). Just paste your BB repo's HTTPS address here: [https://github.com/new/import](https://github.com/new/import)
Just a piece of JavaScript that will help you in no way.
Cool, haven't seen that tool before. Thanks for sharing. &amp;#x200B; However, checkout the [official documentation for the tool](https://help.github.com/articles/importing-a-repository-with-github-importer/). Specifically: &gt;GitHub Importer is not suitable for all imports. For example, if your existing code is hosted on a private network, our tool won't be able to access it. In these cases, we recommend [importing using the command line](https://help.github.com/articles/importing-a-git-repository-using-the-command-line) for Git repositories or an external [source code migration tool](https://help.github.com/articles/source-code-migration-tools) for projects imported from other version control systems. &amp;#x200B; Only seems to work with public repos.
Considering github hasn't rolled back their racism against white people. Nah.
Very interested in this! Unfortunately the tickets on eventbrite currently says "Unavailable" despite the blog saying they're selling early bird tickets.
The image links in the html do not work.
Hi /u/fitbodybootcamp, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/enexorb, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/amadaface, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Good, fuck you atlassian.
I did something similar a little while back but with multiple arguments [Multiple argument memoize](https://gist.githubusercontent.com/WebRTCGame/940a2eaae46c66f13c8148da69d2d045/raw/d59ecc7631c71d9c15631218614123455605c289/Memoize.js) I would love it if you took a look and let me know where I could improve it.
Neat! You should read up on Zones. They're a way of handling async that give you some guarantees that I think you're looking for. https://github.com/angular/zone.js/blob/master/README.md
At first I thought this was just an unprovoked shot at Australians. I laughed. Then I figured it out.
Whut?
In regard to what exactly?
It worked without a hitch importing my private BitBucket repos, it will just prompt you for your BB credentials after clicking import.
Nice! This would be the right tool if you only have a couple of repos to migrate. 
Just two related questions: is it a good idea to use an IDL like protobuf if interface need frequent changes? Also is constant change interface a bad smell?
Aren't these 'laws' contradictory? Am i missing something? 
Personally, when dealing with Typescript, the pain is soooo low. Sure sometimes you want to do some bonkers non trivial structures, but those wouldn't be trivial anywhere else either. That said, most of Typescript is inferred! If you enable strict mode for everything, you basically never write a type name beyond what's absolutely necessary. Unlike, say, Java where you need to write `FactoryServiceProviderImpl service = new FactoryServiceProviderImplBuilder().build()` (though Java 10 helps with that, but who the hell upgraded beyond 8 right ahahahha) My favorite feature is how types are shape-based rather than name-based. An `interface A{ b: number; }` and `type B = { b: number }` are functionally the same and 100% compatible. Type aliasing complex types is also super good, like `type FSPI = FactoryServiceProviderImpl` will allow you to use FSPI for every place you'd use that huge type name. I *wish* Java was as flexible as Typescript tbh
No offense but is this really a til? Wouldn't this just be obvious? Or am I missing something here more subtle? Honest question here. Like if I made an article 'Til a function can call itself, instead of returning, this creating an infinite loop'. Would anyone upvote that?
Imagine saying and thinking this ironically. The fragility of other white people will never cease to amaze me.
Those repos (at least AFAIK) aren't limited on the number of collaborators you can have, whereas GitHub is. So if you need more than 3 people on a project that you want to stay private you either need to pay GitHub $7USD/month or use GitLab.
Lack of effort and grammar mistakes aside, not a bad pitch. Anyone interested?
I'm assuming you mean the latter 3 bullet points? No they aren't contradictory. The government can * force an employee to create a backdoor under threat of prison/fines * force the employee not to talk about it under threat of prison/fines * put a law in place such that even if the backdoor is found out, and who put it in, the government won't protect that employee from getting fired. If they admit they put it in, on top of being fired, as mentioned previously, they will incur prison / fines.
Do you hide your money under your mattress too?
This is truth. Source: Work for Atlassian. Have heard too many misconceptions. 
This is correct, the limitation on the github repos is not oft discussed, people just say "wow, free private repos!" which, truthfully, is enough for most.
Yeah, to be fair to GitHub their free tier is just targeting like one-off projects and small time developers, wouldn't want teams or something abusing the free tier.
As someone who works at Atlassian I'd like to understand your sentiment - what do we need to work on /u/rsvp_to_life? 
Is this considered a side job? Full time? For fun? I'm interested depending more info. 😀
Compact number formatting in JavaScript. &amp;#x200B; For example, did you know to properly abbreviate 19600, it looks like this in different languages? &amp;#x200B; English &gt;The product has 19.6K reviews Japanese &gt;The product has 2万 reviews Spanish &gt;The product has 19,6 mil reviews &amp;#x200B; [https://github.com/snewcomer/cldr-compact-number](https://github.com/snewcomer/cldr-compact-number) [https://github.com/ember-intl/ember-intl](https://github.com/ember-intl/ember-intl)
Right. It's definitely within their target market and it was the easiest way to not piss off people already paying them for repos. But, Gitlab has had this option for a long time - so it's good that Github is catching up in that regard.
&gt;perhaps your snide and condescending response is mostly responsible I typed it as I twirled my mustache. As inefficient as you’d imagine. 
Any advice on getting further into the freelance scene? I’ve had a a few jobs that all went well but things have been slow lately. 
I agree with you unfortunately I looked at GH enterprise pricing and BB is still way cheaper, only $2 a month VS $9. 
More of a side job till we get funding.
I'm not paying the GitHub Enterprise, so that's not really my concern. My employers are paying for it. It's nice for me to come home to the same UI as I have at work.
Lol I was never the brightest when it comes to English grammar 
Contradictory was kind of the wrong term to use. Let's call the dickheaded. Cunt-ish. Asshole-ish.
&gt;EDIT: I'm not sure why there's such a pre-occupation with a couple people I quoted rather than discussing the actual content in the article. As someone starting in JS and who for starters found the article interesting: realizing that the quoted people are bad sources forces me to consider the whole **content** "dubious" and requiring independent corroboration. What else could I do if I want sane foundations? Isn't that the same one should do anywhere one founds your favourite dubious source being cited? it's all tainted and needs independent corroboration before being trusted. 
I mean I just use the git cli, but I get what you mean. 
If youd like, I have a basic template setup for a discordjs bot! 
Frankly, I doubt that this will last. And then, you're stuck on GitHub.
Australian law
It's something [we're actively fighting for more freedom in](https://www.reddit.com/r/australia/comments/a3j466/assistance_and_access_bill_2018_just_passed_the/eb75et6/), but keep in mind we're as equally impacted as github/gitlab/anyone else who provides services in Australia by their encryption laws. These laws reach far past Atlassian.
https://twitter.com/jamiebuilds/status/1002696910266773505
You are a hypocrite - ignoring the reality of the corporate American and the political climate in America - advocating the switch to a known abuser of individual rights in favor of some worry about a company based out of Australia.
I don't use the CLI at all, which is one of my flaws, but I didn't think you could do PRs or Code Reviews with the CLI.
Does the assignment in the ternary condition always evaluate to true, and is that intended? 
What? How high are you? What conspiracy theory are you trying to imply here?
Woops.. kinda forgot I posted this question ha. Thanks for the comments all. 
Watching other people learn and share their findings is interesting to some, even if not to you.
Unless Github has employees located in Australia that have the access to where they can cause harm, they cannot do shit to them. So I wouldn't say it's equally affected. The Australian government cannot force someone in the US to install a backdoor or else... They'll simple tell. Them to fuck off. 
Githubs's only profit was through the subscriptions I assume. Now that's its acquired, Microsoft can comfortably afford the move to compete with Gitlab and Bitbucket 
Too bad, really. I barely use any Atlassian products, but SourceTree blows GitHub Desktop right out of the water. 
No. The law is designed to target encrypted communications services like WhatsApp. Facebook, who owns WhatsApp, does not have any employees located in Australia. But they are absolutely subject to the law because they offer services to Australians within Australia.
wow you're absolutely retarded arent you
I see. So basically a company like Facebook will have to comply or pull out, no other choice. 
With respect, James Kyle was found out to be completely bullshitting on that during the Lerna debacle, and he is a constant SJW and fool. https://www.reddit.com/r/programming/comments/9b6kpa/_/e5112rk https://www.reddit.com/r/programming/comments/9b6kpa/_/e51zxuw This is the guy who weaponized his maintainership of Lerna to make a software license political, as that thread is about. [Direct thread link](https://www.reddit.com/r/programming/comments/9b6kpa/_/). In short, that twitter thread is a lie. MS *did not* steal his code. Some concepts in Rush are similar. But his code was not stolen.
Hey, thanks. Did you configure params to match your project? I mean, you project source code is in “src” folder relatively the root? And entry point is “src/index.js”? -e and -d params should be set to yours ones. Let me know if that helped.
I personally haven't done any freelancing (yet) so I can't really give you any advice on that, but I would recommend watching Brad Traversy's video's on freelancing. https://youtu.be/m2N3tmJ_A0Q And maybe listen to Syntax episodes on freelancing if you like podcasts. 
Was hoping for some feedback! Quite simple to make really, though. Source on [github](https://github.com/ameya98/WebPPL).
without the exact code it's hard to tell what's going on. it depends on what you're doing in `singleChunk`and how you're writing the csv. do you want this to work, or do you want to understand what's happening? if it's the latter, post your code. if it's the former, try this: https://stackoverflow.com/a/48433034/92446
Being able to rebase and merge with a single button click. Also I personally like github UI way more.
The thing is, I want to believe this, but I’ve seen too many counterexamples to actually do... Time will tell :)
I edited the post to show the full code for one of my attempts.
If I understand correctly, you’re wanting to use one MediaRecorder to record different MediaStreams to a single file, switching between them using some UI controls? I’ve tried to do something similar myself and it doesn’t work, the MediaRecorder picks up on the initial tracks in the MediaStream and then doesn’t change them, ever. I raised it with the Chrome dev team and they won’t fix it. You could probably work around it by doing some manual muxing, but that’s mental.
Remove the `chunkOutput` array. It doesn't seem to serve any purpose there.
32 second abs, man! &amp;#x200B;
Ditto. Plus, your understanding is wrong: &gt; As I understand it, what this code should do is reinitialize the array, output, to be an empty array, every single time that singleChunk is invoked. Therefore, node will never be using more than one array, and it's size will never exceed one million. "singleChunk" is not present in the code you provided. In it, you only call 'makeChunk' once and output 10 000 000 entries within one loop, not 1M/call.
Conspiracy? please. are you so ignorant or is it willful? Microsoft has a proven history of sending telemetry without user interaction - making it difficult if not impossible to turn off. They were a part of the illegal sharing of personal data from Facebook. The cloud act forces US companies to turn over data to US authorities even for people who are not US citizens and the data is not held in the US. Explain to me rationally and with facts how this is so different from Australia and Atlassian. 
Thank you so much for this sharing.
Can you eli5 on how/why I use pipelines on GitHub?
People are just dicks sometimes. You guys make good software - keep it up!
1280 new ES9 tips to give you a blood clot in your brain
&gt; Microsoft has a proven history of sending telemetry without user interaction - making it difficult if not impossible to turn off. They were a part of the illegal sharing of personal data from Facebook. How is this related to stealing code and or government requested backdoors? &gt; The cloud act forces US companies to turn over data to US authorities even for people who are not US citizens and the data is not held in the US. From Wikipedia, &gt; ...Principally, it asserts that U.S. data and communication companies must provide stored data for U.S. citizens on any server they own and operate ***when requested by warrant***, but provides mechanisms for the companies or the courts to reject or challenge these if they believe the request violates the privacy rights of the foreign country the data is stored in. Keyword being *by warrant*. As in, a judge must go in and make that call. Warrants are provided only when a judge determines that there is probable cause of a crime. In contrast, the Australian law has provisions for the creation of widespread backdoors *before* any crime occurs. Not to mention the CLOUD act does not hold water legalese-wise when it is *impossible* for the company to provide the data, whether they aren't keeping it or it is end to end encrypted. The Australian law doesn't care, and has language that provides for the storing of data and creation of a hole in said end to end encryption. So before you go on being a conspiracy theorist calling me a hypocrite about how MS is bad or US law is bad or whatever (because you aren't even clear on what your point is), read up on what your billigerantly spitting at me over a damned keyboard.
I will try it 👍
Oh no, they said fragility! My argument is invalid! Oh no! 
Perhaps, but thats only one piece of the law (Australia cannnot force some random US employee to make a backdoor), and companies have said that they'd rather pull out (in some cases). The difference with Atlassian is that they can't easily pull out, and definitely have Australian employees.
[removed]
What? 
"Looking for an experienced developer that will work for free on our project. And here is absolutely zero infos about it."
As the other fella said, TS does not in any way enforce OOP conventions. It's a misunderstanding many have merely because some of the first additional features TypeScript had were for classes. I personally practice something closer to a FP style. I think this proves my point that you really don't know what you're talking about regarding TypeScript. Do yourself a favour, give it another try - without false preconceptions clouding your judgement this time - and give it more than a week.
You are ignoring history - making assumptions that support your assertions, rejecting assumptions that don't and labeling them as conspiracies. It's just weird and makes continuing a waste of time. You seem to be able to know things but think warrants aren't given freely to US law enforcement. You are apparently unaware of US law enforcement surveillance abuses. You don't seem to generalize in your thinking and grasp the implications of how these things go together. You seem fixated on stealing code, unable to imagine that Github has access to much more data about its users than just the code they check in. You are willfully ignoring that MS has a proven history of collecting and using consumer information in a deceptive way. You label the historical records of these events that have already taken place as conspiracy. You ignore US law as apparently only just or irrelevant but insist, despite posts by Australians who have engaged on this with lawyers that your skepticism carries more weight than the legal advice they have had. Yet I'm belligerent and spitting. I appreciate your sense of humor even if it is unintentional.
Damned if you do, damned if you don't.
[removed]
What "argument", you presented a claim with 0 evidence and i[n your post history say you're not looking to fight with](https://i.imgur.com/CdsIa0x.png) "SJWs". Have fun being a disingenuous bigot tho!
&gt; You are ignoring history - making assumptions that support your assertions, rejecting assumptions that don't and labeling them as conspiracies. It's just weird and makes continuing a waste of time. About what exactly? You're making a wide blanket claim without saying what I'm assuming here. &gt; You seem to be able to know things but think warrants aren't given freely to US law enforcement. You are apparently unaware of US law enforcement surveillance abuses. You don't seem to generalize in your thinking and grasp the implications of how these things go together. I know about the abuse of US law very well. However, warrants aren't given out like candy. Don't kid yourself. It is a scrutinous process to get a warrant. &gt; You seem fixated on stealing code, unable to imagine that Github has access to much more data about its users than just the code they check in. You are willfully ignoring that MS has a proven history of collecting and using consumer information in a deceptive way. You label the historical records of these events that have already taken place as conspiracy. Yes, because we are talking about moving code to Github and your original comment implied that in doing so your code would be insecure because of Microsoft. So either you're shifting the goalposts here or backtracking, both are indicative of bullshit. &gt; You ignore US law as apparently only just or irrelevant No I don't. I go based off the wording of the law &gt; but insist, despite posts by Australians who have engaged on this with lawyers that your skepticism carries more weight than the legal advice they have had. No I don't. Again I go based off the wording in the law. Said lawyers and/or those communicating with said lawyers that have popped up in this thread have a vested interest in promoting the very company this post is saying to drop. If an unvested group of lawyers went to a news agency and said "nah it's probably fine" (which was linked), probably does not mean definitely, because again the wording of the law is unfortunately vague.
100 dependencies no thanks
I would remove any code where you're pushing data into an array. The purpose of using a streaming file writer is so you don't have to store a bunch of stuff in memory all at once, and instead write to the file in small chunks and keep memory allocation to a minimum. You write to the file in chunks, but negate the benefits of doing so by pushing everything you write to arrays. I would suggest just using string interpolation to build your data and write that to the file. Arrays in this instance are wholly unnecessary.
this happens all the time to those who code for creativity only :-) if you're looking for productivity, stop adding features, do something else during a couple of days and re-read your code later for best benefits you will discover *problems* in your code (a.k.a. "why the f** did I write this code?") that will help you identify all those debts you created by maintaining the illusion that everything is self-explanatory when you use too much of your memory 
I tried to create a really advanced wallpaper engine that took every video format and individual frames it also had a basic version of photoshop and video editing it got so big that it probably had more letters than my DNA 
how is it less correct? The criteria are to make it never-resolving and as short as possible, indeed useless but correct.
Been overwhelmed by a large codebase? Yes, from time to time, but it's temporary and happens alone or in a team. **Mental breakdown**?? Uh.. no. Never. Not in 20+ years as a developer.
you should not have to keep large parts of it in you mind. that is what abstractions are for.
&gt; a project that starts to get so big that I am starting to cry inside I had that in the past. Decades of experience in systems development taught me that the most important thing in a codebase is to be **readable**. It's easy to write code that a machine can understand, but it's hard to write code that a human can understand. In other words, a good programmer is the one who writes code which is easy to understand by others and himself. After I learned that, I started paying attention to readability, and I refactor my code as many times as needed. It may seem a lot of work now, but it will save my ass in the future. If your codebase is so big it gives you a mental breakdown, I'm sorry to say, it's your fault.
Well my brain apparently has amazing garbage collection. And since my projects are mostly garbage...
Half of these are fairly useless concepts to know in my opinion. When you hit a performance bottleneck, then learn about how the call stack works. Until then it's not something that's really going to help you. I learned it, and have since forgotten it, because it just isn't that helpful to know for the CRUD apps 99% of us are writing. It's much more about how you implement the theoretical knowledge you have, and how capable you are at learning new things when you hit roadblocks.
First off, we're very welcoming over in /r/typescript, ask there next time. :-) Secondly, I've much less experience with libraries as they relate to TS but I think most libraries that package their own declaration do so by adding `index.d.ts` to the root and then referencing that in `package.json`.
&gt;So if I’m comfortable with all of these is it safe to say I’m capable of handling a jr position? Definitely. And being comfortable with the concepts doesn't mean knowing all of them inside-out, being comfortable means knowing what they are, knowing the basics, and knowing what to do to learn/practise the details as you need them (or preferably a little before, seeing where things are heading is a skill in itself). There are many seniors out there who don't know *all* of that *intimately*. Remember: perfection is often the enemy of actually getting good stuff done. &gt;I’ve been having a hell of a time because everyone seems so focused on the fact I didn’t go to college and taught myself everything like that’s a bad thing. Being self-taught *can* be a bad thing, depending on the teacher! Some self-taughts have learned a lot of bad habits, and some lack the soft-skills to work well in a larger team. It can also be an *excellent* thing, showing the drive needed to dive into and keep up with a complex and rapidly changing area with minimal guidance. Your task is to convince people that the latter applies to you and not the former. I essentially self-taught before my couple of years of CompSci at Uni - the first year of that course taught me nothing technically new but was very helpful on the soft-skills front and formalised some of what I already knew and did (essentially, helped me talk about things in the "right" way). I dropped out after two years (of four) for personal reasons, but the time I spent there was useful and I can articulate why going was the right decision and why leaving when I did was correct too. I also know other self-taught people in high positions (above me) who had no formal education in the area *at all* so it can be done. A key problem you will have is getting past the initial CV scanning phase especially if you are applying to larger companies. If a college education is high on the recruiters list then you need something special to replace that. Remember: the first stage of recruitment may be people who know little of technical matters and may in fact be robots (in either the modern-AI sense or the human-with-a-script sense) scanning for keywords/phrases that have been given points values. But don't be disheartened: sometimes your application will be viewed by a human with some knowledge and there are a number of things you can do to really help yourself at that point. Try build a portfolio of well documented projects and also notable contributions to other projects that show off your own technical and communications skills and your ability to work within an other's project. Also, tune your CV: for each application make sure you highlight specific things you have done that might be most relevant to that job instead of sending the same generic CV to everyone. At the interview stage if the college thing comes up, keep positive. Say you might have liked the opportunity but that you are proud to have built your skills entirely the other way: keep the conversation moving towards your selling points without making it a me-vs-the-system thing - it is about explaining why you are in the right place and how you got there, not putting down other routes that might be equally valid. The portfolio is useful here too: a regular interview question is asking to state something you are proud of and why, if you have a selection of (even small) things you have worked on, you can pick the one that will give the best impression to your current audience. Remember that when applying for a junior position they won't be expecting you to have changed the world, they just need evidence that you understand the world you'd like to help them change.
I use TSLint at the moment, but I think point #4 here is the most important. The TS team are focusing on ESLint, and so for new projects that's probably the way to go.
I understand, but I am looking for how to write correctly this \`index.d.ts\`
It may be because this is was over my head, but I just don't see a use case for this or scenario where you would use it. Also, while a promise not resolving or rejecting is an annoying one, it's avoidable in most situations, I think. 
Why are you stuck on github?
I've worked with some enormous, shitty codebases in my time (mostly of my own doing), but I can't imagine any amount of bad code causing me to have a breakdown. Not in my job, not in my hobbies. It's just not important enough. I have family and friends and even pets that are more worthy of my emotional energy. Worrying about it is just not worth it. Everything can be fixed, refactored, abstracted. Eventually. If "not worrying about it" takes me 2x longer to complete a task because I'm unable to keep the whole stack in my brain at once, and therefore I'm constantly referring to different components to get the task done, that's absolutely fine with me. I'll plan a refactoring project for next month (even if just a small one) and get on - slowly - with my current project. Then clock off at 5pm so I can have dinner with my wife and my kid. I guess my point is that having an _extreme emotional reaction_ to writing code is more of a symptom of a poor environment or culture enforced upon you by your employer, your clients or yourself.
[removed]
10 gbs! Still got the code for it?
Every time a single module becomes too complex to keep in mind (and hopefully, a bit before that), you should break it into smaller modules and abstract them away in the main module.
Yes, I've had this. The solution is to find a couple of bright kids, spend a week training them up, then set them to work doing the donkey work while you finish the architecture. Code overwhelm is a real thing. 
Yes, I know that feel. My solution has been to rip out a large chunk and rewrite it. Made me feel better and the code quality improved too!
no i gave up on the idea and just bought wallpaper engine off steam
write tests so you can trust chunks of your code and not think about them very often.
How easy is it to migrate away from Github, back to your old version control system? Probably it's harder than migrating towards Github.
do you write and read your docs often?
Lots of upvotes if I could. Code readability is by far the most important issue once correctness - semantic and structure - is addressed. There's an ever-present temptation towards 'cleverness', usually manifested as highly compacted code. For instance, if I have a complex calculation I will quite often generate an intermediate variable, even if the intermediate variable is just then used one to plug back into the code. My reasoning is that I'm unlikely to be loosing anything in performance terms - the compiler should be generate the same code - a little extra verbosity (within reason) easily pays off in maintenance later.
Not really. The thing, though, is that you **have** to plan for growth. I'm guessing your main problem _might_ be here: &gt; I know I know, Modules, OOP, BLA BLA BLA, yes I do all these but let's face it, as a lone ranger you really have to keep track of what's what. You _think_ you're doing all that. Heck, you may even _be_ doing it. But, clearly, that "BLA BLA BLA" is missing some piece. To _plan for growth_, those things you have mentioned, of course, matter. But they are, by far, not _enough_. Planning for growth works at a larger level than "Modules, OOP, BLA BLA BLA". So, what is it you're missing? Well, it's hard to guess, since you haven't really explained much or shown anything that pictured your problem. So, instead of guessing, I'll give you a rough idea of what it means to plan for growth and you can see for yourself what is missing and ask any questions. I'll try to point out the important words and parts, and it may seem tedious, but it _is_ important to acknowledge what those are. ### The goal First of all, let's point out very clearly and precisely what is the goal. The goal is this: You want to work as a single programmer in a very large and growing project, and still be able to manage every detail and the whole project in itself. Note, though, because it _is_ important, that I did not say "at once". You don't **need** to manage every detail of the project _at once_. Believe me, you don't. ### The principle This is _the_ thing that should guide you through _all_ this endeavour. I say "all", because it applies in many ways, levels, forms, aspects... &gt; Separate the things that should be separated. Join the things that should go together. (You may know this formulated in other words as the principle of _separation of concerns_, or other related principles such as _single responsibility_, etc. I like this simpleton wording better, because, while equally unhelpful^(in appearance), it is harder to misunderstand.) ### The process The process you need to follow is not rigid. I'm not going to give you a fixed X-step plan because that would be stupid. You can organize the process however it best fits you. However, you _need_ to address all the key points. So the idea is this. You need to _plan ahead_. Planning ahead means that you can't just jump into writing code like a mindless block of wood. So before writing code, you make a _map_. I would recommend sitting _away from the keyboard_, with pen and paper, but I guess you could still do it on the computer with some tool. But, at least, stay away from your IDE/editor. You think about what you want to do and you _draw a map_. A _map_ can take different forms. Some people draw boxes and arrows. Others mainly write little words here and there. Others use more strict methodologies. In general: don't be too strict, specially at first. What you want is to have a _rough but clear_ view of what you want to do and the problems you're going to be encountering later. But you can't predict the future! This is un-Agile. Bollocks. I'm not asking you to predict the future, just to write down a solid, even if rough and undetailed, description of _what you want to do_. Also, fuck Agile. This is not about Agile at all. Also, this is not a _plan_ but a _map_. Once you have this picture of what you _want_, you start thinking about _how_ to do it. No, please, don't write code just yet. So now you think about a solution, about how you're going to do it. And now you start applying _the_ guiding principle. And the way to apply it at this moment is by _separating detail_. I mean, what you do is separate concerns into _levels of detail_. At first, when you have nothing yet, you need to look at the largest picture. So you ignore, even forget, any sort of detail _at all_. You want to sketch just a general idea of the general parts... In fact, you're just defining what the general parts _are_. Also, you _may_ need to think -depends on the circumstance; it may be just obvious- on how those parts interact with each other - I mean, protocols or formats, etc. Now, on that first level of detail you _only deal with that large picture_. Think about black boxes if you want. Avoid at all costs trying to think what happens inside those black boxes or how they work inside. You then build that level. Then you now have a number of _separate_ black boxes that don't actually do anything yet. So, you pick each one **separately** and repeat the process. This is the key point: separately. If you do this right, what happens inside one of the separate parts, _only affects_ that part. So the problem is smaller and it "fits in your head". But remember, for this to work well, you need to focus all your effort on two things: - separating/grouping things correctly - considering only the **current level of detail** ### The problem This is _hard_. I know. And it's hard because it's _very boring_. The first level of detail, he, even the first two or three levels of detail, is very boring. You'll seem to be doing nothing, or at least nothing interesting. Not only that, being alone on the project, it feels rigid, it feels constraining. And, oof, you want to do the cool parts. Yeah, but those parts will still be there, you know? It's not like you _won't_ do them. You're the only one working on the project after all; nobody else will take those parts from you. So don't worry about that. _Au contraire_, think that making the effort first will make it _much more enjoyable_ later, precisely when you're on the "cool parts". Another problem is that shit with the "levels of detail". It is hard, even _quite hard_, specially if you don't make the effort to train for it, to "just focus on the current level of detail". I know. We've all been there. But it is just something you learn to do and then it's not that hard at all, and you start not only getting the rewards but actually _getting_ what all this about making a large project means, which you have no idea about now -no offence meant. The hardest part with the levels of detail is probably keeping yourself from _looking below_. As you start from the larger picture and the most generic and general parts and then work your way down, looking "up" is not generally such a problem because you already did that. But you need to make a constant effort to only look at your current concerns and just disregard any detail that should be "below". Something that _may_ help -it works for some people but not for others- is taking "notes to self". You notice something that you _will_ need to acknowledge but now is not the time because it is a "lower level detail"? No problem. Just write it down in a notebook **for later**. That means: write it down and _forget about it now_. Yes, it is a valid concern, it is an important detail, yes, you need to do it... _later_. A good way to identify when some detail is on a lower level and not in the current one is this rule of thumb: If it concerns only one of the pieces you're managing at this level but doesn't affect the rest, then it should go inside of that box and be addressed when you dig into that box, not now. ### How does this accomplish the goal? Well, if you do this correctly you end up with... probably about the same amount of code. The size of the project is what it is; it can't be changed. But then again, you also end up with fairly well structured code. And what I mean by "well" is that it has this property: It is structured following those _levels of detail_. Having the code structured that way means that when you work on different "parts" (in the most general sense) of the code you'll be tied to a certain level of detail and -except on the root level- a certain piece or box. And so: 1. The problem in your head is much smaller because only that piece is concerned 2. The problem in your head is much smaller because you're only dealing with a certain level of detail. I will insist one last time, even at the risk of being annoying: The key is that when you need to think about "the whole thing" you **shouldn't care** about "the small details", and that when you you're thinking about some more specific part you **shouldn't need** to be thinking about unrelated parts. ### In closing / further reading This is, _extremely summarized_ of course, what a large part of "software architecture" and "software design" means: structuring not only your code, but also your ideas and the original problem. You may seek further information on all this. I mean, do, please. This thing I've written here merely scratches the surface and does so clumsily. Read about software architecture, about software design, about abstraction, about layered applications, about general system design... Note that your current tools -"Modules, OOP, BLA BLA BLA"- are tools that work on a _lower level_. They are good tools, sure, but they don't solve the problem you face. Notice that I didn't mention anything at all about OOP or "modules" or any particular _bla bla bla_. So do not expect to solve this problem using those tools or reading more about OOP or trying to "get better at OOP". Look explicitly for subjects that go _beyond_ that.
Exactly this. There are many solutions to this problem, from TypeScript to design patterns to just not plain better naming. “How do I make this comprehensible with little or no context?” should be one of our chief goals. 
not while working on it, but regularly when returning to projects I haven't touched in a year or so.
[removed]
Yeah, that's the gist. I've come up with a different strategy, having the clients stream the bytes to a Node server
Very well put 
To use your analogy, I think you need to take a long hard look at how you're writing it. The human brain is limited to 7 +- 2 bits (and generally assume the 5 for simplicity). You'll never hold a all large codebase in you mind at the same time. *What you do need to do is make it so whenever you have to go and read part of the codebase back into your mental ram at whatever level (module, function etc) the amount of effort required to parse it is as minimal as you can make it.* This requires all the usual good practice - judicious comments, meaningful naming, proper abstraction etc - but a relentless emphasis on human comprehension should be your priority. And if you find a function you don't understand the purpose of in a few seconds you should write comments and/or refactor so next time you do understand it. Always be on the lookout to resist the temptation to write overly 'clever' code. These days with machine cycles far, far, cheaper than human cycles a few nanoseconds theoretically shaved off your execution (and often not that - a modern compiler will often remove things like intermediate variables). Unless you are writing code that will be executed tens of thousands of times at the bottom of a loop, then ease of comprehension is far more important that overly clever code. &amp;#x200B; 
This is the pretty much the reason I've given up being a technical artist at games studios. My set of tools was decent, I was doing up keep on the previous guys stuff and we where about to update our main animation software again so everything would need to be tested. Ended up in a situation where only certain things worked in certain packages, bit of a nightmare but doable. Then things updated again but engine side which meant a good 75% of older animation rigs no longer worked from the newer animation package, the old one worked but only if you didn't save. All the while I was expected to still make the new things while trying to stem the backlog of pain from the past work. Just flipped the desk, wasn't worth the low salary and stress. Nothing is worth that kind of stress.
"The next programmer is a crazy serial killer that knows where you are!"
no, that line is about private NETWORKS, not private repos. Ie, when the server hosting your repo isn't accessible publicly over the internet, regardless of the permissions of the repo itself.
Need better comments in your code
Haha
They're definitely useful. A way approach a guide like this would be to go over in enough detail for a basic understanding, then did deeper when you find yourself needing to implement something IRL. Building a Node app? Try with promises and try with async/await. See how each affects the control flow of the program. Ask yourself which is easier, more readable, faster, more maintainable and why. There's a difference between "oh yeah I read a Medium article about that once" and "I'm doing this for these reasons." If you're in the first camp, you're already at the level of a junior developer.
Run it using Wine https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=2983
GitHub is owned by Microsoft, and Microsoft has employees located within Australia too. There's not chance of Microsoft or GitHub pulling out of the Australian market.
This never worked for me. The more understandable the code is, the more beautiful it is usually, and striving for beauty is a much better motivation than virtual fear.
Sort-of. I probably don’t have as many lines of code as you do, but when I look at the ever growing list of features I need for my project to be just barely usable, I pretty much just shut down.
If you are, would totally recommend the four rules of simple design as a starting point for getting your gnarly codebase back under control http://www.theguild.nl/4-rules-of-simple-design Sometimes come at your codebase thinking "I need this new feature" but just as often come at it saying "this code needs to be more habitable, let's change it so it works better for me"
Good code should be its own comments! #nocomments
Interesting read. Did you happen upon any situations where Typescript caught errors that were missed by Flow entirely?
I am thankful we aren’t in the same codebase.
There's a command line flag to increase the memory available to Node. https://futurestud.io/tutorials/node-js-increase-the-memory-limit-for-your-process
Write them early, even for functions that may seem perfect at the first glance
I usually say it to beginners. I agree about the understandable code and IMOHO the code should provide the "how it's done?" and "what it's done?" and the comments should provide the "why". In other words if you have to write how/what it's done in comments that the code have failed. (of course there are exceptions, like very optimized code) 
Really? Code habitability and maintainability should be achieved through good abstractions, naming things well and having tests that accurately describe and cover the features you're building. 99% of the time you can refactor that code to illustrate what you were trying to get across in the comment imo
I forget what my code does all the time. When I need to edit it, I just read it and remember what it does and how to edit it. I do this by not implementing classes, only functions that have very descriptive names and do only one thing. When something is too complex to remember but I can't break it down further (usually having to do with regex), I put comments on it. Don't hold it all in your head. 
My solution was to learn something other than JS. I've found that it doesn't lend itself to big solo projects particularly well.
I suffered a breakdown once over a project and it broke me for a year. The circumstances were different, but not so much that I don't know where you're coming from. Firstly, don't try to be a hero and don't add features just because you can and there's nobody peering over your shoulder saying "are you sure this is a good idea?". You need to be that person. Secondly, don't make work for yourself by overcomplicating what could be simple. If something's getting overcomplicated to the extent that you've lost sight of where you are, go back and simplify. Refactor until you're comfortable. Thirdly....The word "NO" is your best friend. Learn to use it wisely and push back on a stakeholder/client who is asking for a mountain but paying for a hill. And if YOU are that client then stop treating yourself like a slave. There's more to life than work and money does not help when you go mad.
Document it! Your brain is for fun stuff, documents are for boring stuff. 
Lol this can’t be serious
Nah man pretty big weeb. I do now own a body pillow but was expecting something anime related. Something like an integration with trace.moe which is an “ai” project that can identify the anime, season, episode, minute, and second that a screenshot occurred at. 
Thanks man, I knew about this channel but never watched it frequently. But now that you suggest I may often watch it very often.
Yes, but only because i was not writing maintainable code. Keep splitting shit up and make abstractions. That will help a ton
There's a lot of good stuff! Thanks for sharing !
Why the restriction on modifying the method? You can change the implementation of the method but keep the existing API. If you need to access data, it's not 'internal' anymore. I'd move the logic to get that data to a separate method with an appropriate name and reuse it inside your existing method. For your particular example you could add new method `getDivisionQuotients` where you store the data in an array and update the `getDivisionCountByTwo` to essentially be `return getDivisionQuotients(num, 2).length`, or something similar. Also, class seems to be unnecessary here, but you probable have your reasons.
Thank you! But wouldn't this create a strict dependency between `getDivisionQuotients` and `getDivisionCountByTwo` ?
Yes. And it (still) hits hard after all those years in the industry. I have come to terms with the fact, that i might not live to see the first human walking on mars. Not being able to quickly trace a simple variable from UI through frontend-logic, caches, Redis and DB kills my idea of myself as an able, mature human developer. Complexity always happens. Nothing can prevent it. Good readability/documentation and concise architecture won't save any complex project from being complex. It's either that or letting code/tech dictate your business goals. Humility towards my own person (and the team) helps me to overcome the mental issue. It's 100% ok to spend 5-10 minutes reading code for 1-2 minutes of writing code. It's worse when working with people though. Recognition might not kick in and patterns/logic might differ oh so slightly between team members. You won't find any consolation here. Devs on reddit are immensely gifted and know all the tricks to keep software in mint condition forever. 
pony but no apple jack? iam disappointed.
Helpful. 
It’s actually just a good idea to include what you think this block of code is intended to do so that when there is a bug in it later you can easily figure out if your approach or implementation was wrong. 
I mean if you use a component-based framework like React, it scales well with big applications. And if you then use good naming conventions, I don't see how you can run into this issue.
require('more/information.js');
Yes, i have. HTML5 + Jquery can easily lead into a chaos.
Of course it it. I forgot to mention that my above comment is about comments nestled in code. The comments documenting the function must contain what it does, what it returns etc.
It would I guess, is that a problem? I'd think it's pretty standard to reuse methods in a module.
I totally get where you're coming from. My solution these days is to use types. Aggressively. Typescript on both front and back. And GraphQL for the API. Now I sleep easy knowing I can forget any part of the codebase, because even if a total stranger opens it up, they won't feel totally lost is a sea of untyped JS code.
I would separate generation of quotients and specific api methods that work on them(count them or return all of them etc): function* generateQuotientsByTwo(num) { let quotient = num; do { yield quotient; quotient = Math.trunc(quotient / 2); } while (quotient !== 0); } class Calc { static getDivisionCountByTwo(num) { const quotientsGen = generateQuotientsByTwo(num); let iterations = 0; while (!quotientsGen.next().done) { iterations++; } return iterations; } static getQuotientsByTwo(num) { return [...generateQuotientsByTwo(num)]; } } I'm not very familiar with the terminology here so method names should probably be different.
Down voted for toxic masculinity
&gt; Devs on reddit are immensely gifted and know all the tricks to keep software in mint condition forever. Started my morning with a laugh - thanks!
I've spent most of my professional programming career in vast legacy codebases. You don't need to keep the whole thing in mind. You just need to solve the problem at hand. However, it requires research and can often have side effects. One of the benefits of putting your code under test is to ameliorate unintended consequences. However, I can definitely remember a SQL query I wrote one time that did some rather tricky stuff that I had trouble maintaining because even I couldn't really tell how it was doing what it was doing a few months down the line.
Visual Studio Code is a great free solution to text editing on macOS.
This is going on r/pcj soon...
Lol wut
There is a lot you can do to update your example function, but I'll do my best to keep my response as abstract as possible. &amp;#x200B; It sounds like you should be pushing back on the modifying the method restriction. The spec for that method has changed and you should be updating the name to reflect its new result. If you are sharing this API with other teams, you would want to create a new method for the new spec and flagging the old as deprecated. &amp;#x200B; I think it's valuable for functions to return a single result. If possible I would create a `getQuotientsByTwo` to live with `getDivisionCountByTwo`, but I'm assuming you want to calculate both together for performance reasons, which is complete acceptable. If you are doing that is javascript, I think the best practice would be to return each result as an array and destruct them. i.e. `const [count, quotients] = getQuotientsByTwo(num)` &amp;#x200B; &amp;#x200B;
Stop and take a break, 2 days to a week. Come back to it and refactor some high level things to make it simpler. Delivering something 7 days later will not have any impact whatsoever on the outcome. If anything, the outcome will be improved by a cleaner codebase and your sanity intact. Wishing you all the good vibes!
It sounds like you could benefit from a few things like refactoring, paying down tech debt, etc. I'd recommend reading the book Clean Code to learn how to write and organize your code better. Sounds like it might also be good to learn how to use whatever text editor you're using. Things like jumping to where a function or file is defined is super useful. 
I'm not sure if it's necessarily enormous, but something like this happened to me when I was working on a project in Assembly where I basically had to do almost the same thing around 60 times and keep track of the differences for each. I can't remember how many lines it turned out to be, but I think the most frustrating part about writing that program was the fact that I had to comment every line(per requirement), which resulted in me copy pasting more times than I can count, and just altering a single number every comment, due to how subtle the differences in the lines were, which made the comments themselves just about as readable as the assembly, which is..pretty bad.
Unless you need a decent SFTP integration but let's be honest, moving away from SFTP and direct editing to version control with git (or other VCS) should be a goal for any developer.
it will be a sad day.
Not looking to fight them while they cut themselves off at the knees. Cheers.
Since I don't know anything about github I'll talk about bitbucket. Pipelines are basically a toolset to implement continuous integration and continuous delivery from your source code. When someone checks in source code to the repository, a pipeline is triggered. The pipeline will execute tasks, such as building the project, running all tests, deploying to a qa environment. I believe the bitbucket philosophy behind pipelines is to have a single pipeline deliver a change to all environments - test, qa, production. So an example pipeline would look like this: push code changes to master, launch pipeline, build, test, deploy to integration environment, run ui tests, deploy to qa env, pause for manual intervention, user logs in to bitbucket and continues pipeline, deploy to production env. In bitbucket these tasks are run in docker containers. The pipelines are configured in a YAML script, and the tasks can be implemented in any way that fits your needs (node, bash, ruby, etc).
CSS in JS makes my syntax highlighter puke rainbows
The code is often not the problem but we have customers with wishes and edge cases what makes it very hard to keep track on everything. Everything is hidden behind classes and OOP Structure. But when you ask me why a special thing is like it is. I have no idea. The only way to find that out is to look in the specification with now over 1000 papers or in some E-Mails.
The stop function sets t.s to true such that the following execution is aborted.
Thanks for the tip!
My reaction to reading your post: maniacal laughter followed by sobbing 
Just to clarify, you're looking for a React+Redux front end that interacts with an Express and Postgres backend? If so, they're going to be 2 different projects. Express would serve routes that would allow users to request data from Postgres server. These can be simple GET requests, that return data. React and redux would provide your front-end with state management, but it doesn't care about your backend at a core level (how you display and parse data is where it cares, but the projects are still independent). I don't have any examples to hand right now, I'll try and drop in again later with some, but in the meantime, google for 'Node Express Postgres' boilerplate. A super simple express server app looks like this; const express = require("express"); const http = require('http'); const config = { application: { port: 9001, } }; const app = express(); const server = http.createServer(app); app.get("/test", (req,res)=&gt;{ res.send("test") }); server.listen(config.application.port, (...args) =&gt; { console.log(`Listening on ${config.application.port}`) }); If you use `create-react-app` to generate a boilerplate, and tell it to `fetch("localhost:9001/test")` - it should return the string "test". Essentially, it's within your routes that you'd tell postgres to return data, which when returned to your front-end, can be parsed and you'd choose where to display it using JSX syntax (most commonly JSX is used, but there's other options too). If I've misunderstood what you're looking for, please expand further. (FYI: MERN is Mongo, Express, React, Node - in that context, react may be used for server side rendering)
I haven’t suffered a mental breakdown, but I am definitely in a position where the code base I’ve created is too large for a single developer to handle. I’ve learned the hard way how this can slow a project down. I’ve learned the hard way the importance of documentation. I am currently building a documentation server which combs the entire project tree(s) looking for documentation so it can be shown in a searchable/display friendly way, which is a project in-and-of-itself that is exacerbating the timeline of an already long overdue project. Don’t underestimate scope. Overestimate implementation times. Beware of feature creep. Knowing how to manage your own project is more important than knowing how to code it. Heed my words and save yourself from this hell-unending.
I am astounded by your ability to be crestfallen by mild sarcasm.
What's a lonely ranger?
You should write and comment your own code in such a way that if you don’t look at it for months and come back to it and have completely forgotten what it does, you can figure it out again. If that’s not the case you’re not writing clean enough code. Even though you’re a solo dev, always write as if you’re working on a team or could bring someone else onto the project at any time. If that’s the case, you obviously want your code to be readable by your teammate. Lastly, for more complex pieces of code be sure to write good tests. This way, even if you’ve completely forgotten how a piece of code works, you can be sure that it does what you think it does.
Have you ever read a comment so large that you suffer a mental breakdown?
Oh, sorry.
Code habitability...
Lol.
Comments are still completely necessary for explaining “why” in a codebase. Yes your code should speak for itself in terms of what it’s doing, but you should always comment pieces of code when it’s not clear why you need to do that thing. This is both to justify to yourself that the code you’re writing is necessary and also to help the sanity of your teammates trying to figure out why the fuck you need to reverse sort the list instead of sorting normally.
Also, comments are your friend. Comment to as if talking to your future self, and assume he is an idiot.
Great article that simplifies a complicate idea, as well as introduces readers to language features like generators/proxies with directly usable examples.
I've never worked in a static-typed language before and I used to think it was a lot of hassle. For the past month I've been working on a game in Unity, which uses C#, and the static typing is SO HELPFUL. The IDE literally won't let me write code that assigns the wrong variable type. It knows I'm making a mistake before I do. When I open up.a different part of the program, I can just mouse over a variable to see what type it is. And I know it will never change. And because it's object-oriented, I can make abstract classes and know the code will work. It's been a real eye-opener. I loved the flexibility of javascript, but I have been able to get so much more done in C# because I'm not making as many mistakes.
But why?
Unless that stranger doesn’t know typescript
Maybe finish thinking about it, learn more, use it in a real project then write an article. This seems like low-quality stream-of-consciousness stuff. 
How well does it work? Is it fast, reliable, efficient? If so, I would leave it alone. A big program with no errors is better than a small one that doesn't work at all. But if it's as clunky and baroque as it sounds, I would consider wiping it away and rewriting it from scratch. I'm not sentimental about code I'm responsible to maintain. Archiving retired software is what my "Greatest Hits" folder is for.
jooc how are you dumping the video on the node side?
While its true, well executed abstraction that makes sense at large scale is a talent that one can only acquire through trial and error going large scale applications. I know of many design patterns but going big is a challenge even the best engineers at google or amazon often fail. 
Hi. Yes, reading and keeping in mind big codebase is a hard task, I”ve been thinking a lot about this recently. Community spends all the time for inventing “new frameworks” to write code in a slightly different way and don’t pay attention to the problem you just described. But believe me you are not alone ;) If you allow, I can give you and advice: don’t try to keep application logic mapped on file structure of your codebase in your brain only - you miss details after a while and need to learn it again and again, and when you think about way you do it: well, it’s not the most efficient way, when we investigate the code we are just blindly jumping from file to file, there is too much noise around the places which are important for particular data flow. I wrote few articles about that and right now trying to solve this problem. Check [this article I wrote fee days ago](https://itnext.io/how-to-navigate-the-maze-of-javascript-code-541250447cbb) let me know what you think, I am glad to help.
Spoiler alert: the next programmer is Future You. 
Only vim only hardcore
Yeah. Maybe the problem is these projects use typescript and the entry point is src/main.ts.
TS ecosystem is waaaay better, dev tooling, third party typings, ongoing support, etc. There are a lot of really good reasons to switch from Flow to TS, but type coverage isn’t one of them. Flow can still type things that TS can’t, and it’s type refinement makes less assumptions and is less likely to be wrong. All that said, I’m using Flow right now and wish we could switch to TS.
I remember being a novice programmer and being scared as hell of large codebases. Like others noted, it does come down to organization and abstraction. I think it really helps to have multiple people work on a project for these reasons. As the author, it's easy to try to remember where everything is. A new person will ask where to find certain pieces of code, and can ask "Why isn't it X done in the same place as Y?" and add some considerations about organizing and abstracting the code. Scaling a codebase is an important part of Software Engineering, and yet something they generally don't teach directly in school. One of the first larger projects I worked on (maybe 10k LoC) was organized into modules pretty well, but still relied on some spaghetti/leaky abstractions. We realized it was not scaling well and was having more and more issues with maintainability (regressions when we tried to add things). We moved to a Plugin-based architecture for new features, and while that had its own set of issues, it scaled really well and was easy to throw away bad or unused code.
Yes. I have a project that I've been working on for 3 years. For the first 2, I wouldn't make it more than a few months before giving up for a bit or just completely rewriting it. But after so many rewrites and becoming more experienced, learning from past mistakes, I've been able to continue without large waves for about a year.
A personal nitpick: I think the extra clutter of an intermediate variable can sometimes make the code less readable. It depends on how you structure your code, but if you are just sending a value though a pipeline of functions, whatever variable name you come up with is going to be less meaningful than just “the thing that comes out of foo and goes into bar”. 
Can't judge if you're right or wrong without seeing an example ;)
React lets you get as messy and you can! But no, its the coders fault for not providing comprehensible architecture. Its actually one of the arguments for things like Angular where its opinionated. Containers and "dumb" component should make sense in the way that containers handles incoming data and dumb containers handles UI display. I personally don't like Redux at all. The path you have to go through to understand what an action does is too long and I'm annoyed by following it so I went the Mobx Way. Where store have actions part of the class with observable values. But to each his own. Good luck on the messy code!
I like this. Thanks dude!
This made me smile :)
I'm a rogue developer myself, self taught and I don't associate or surround myself with programmers. The only type of interaction I have with other coders is through github, reddit or gitter and even that form of communication is minimal. The point I'm trying to make is that if you're rogue and you're working on an extremely large code base that is starting to become heavy on your mind then you need a break or you need to shift your creative focus for a period of time. Most importantly though and the best advice I can give is compartmentalizing your code.
Write them before
I've had that before. Currently I’m working on the biggest code base I’ve ever written, and it’s not a problem. The reason is that I’m using ember.js, which forces me into certain patterns. It’s quite annoying while I'm writing the components, but this clean approach is the reason why I’m not going crazy now after more than 40000 lines of code.
Too many bums trying to be startup owners these days.
Not since college. Even on the project I'm working on with ten other people I've organized it in such a way that you dont need to know how it all works to understand the codebase. It sounds like you made some mistakes and need to refractor your code so that it's easier to reason about. That's a big part of maintaining a large project and I've had to do it a couple times as well.
Ah, also, I disabled TypeScript support for now, want to test and clean it up for JavaScript first 
Fair enough. Thanks for the background!
Early in my career, I inherited a messy codebase from another team, and I had to refactor it solo. This is what drove me towards TypeScript, and I've never looked back. You can't always control the quality of the code you work on, but with the right tools, the computer can at least help you keep everything straight.
That's obviously a bug or something haywire in your system. VSCode is slow. Slow is smooth. Smooth is fast. ^and^memory^efficient
When I started programming, I thought programming was about memorising syntax. Then as I spent more time, I thought it was learning how to do things with as few lines/characters as possible. Then I thought it was about memorising eclectic patterns and data structures. Now, I think programming is mostly about expressing something complicated in a way that seems simple when you say it right.
Thank you, now I understood that await needed a promise. I changed the getJson function, now it returns a promise. It works) async getResults() { let thePages = await this.httpGet(`${schoolData.root_url}/wp-json/wp/v2/pages?search=${this.input.value}`); let thePosts = await this.httpGet(`${schoolData.root_url}/wp-json/wp/v2/posts?search=${this.input.value}`); return this.createResults(JSON.parse(thePosts), JSON.parse(thePages)); } createResults(posts, pages) { this.resultsDiv.innerHTML = ` &lt;span class="search-content-title"&gt;Новости :&lt;/span&gt; ${posts.length &gt; 0 ? '&lt;ul class="search-content-links"&gt;' : '&lt;p class="err"&gt;Нет подходящих результатов&lt;/p&gt;' } ${posts.map(i =&gt; `&lt;li&gt;&lt;a href="${i.link}"&gt;${i.title.rendered}&lt;/a&gt;&lt;/li&gt;`).join('')} ${posts.length &gt; 0 ? '&lt;/ul&gt;' : ''} &lt;span class="search-content-title"&gt;Страницы :&lt;/span&gt; ${pages.length &gt; 0 ? '&lt;ul class="search-content-links"&gt;' : '&lt;p class="err"&gt;Нет подходящих результатов&lt;/p&gt;' } ${pages.map(i =&gt; `&lt;li&gt;&lt;a href="${i.link}"&gt;${i.title.rendered}&lt;/a&gt;&lt;/li&gt;`).join('')} ${pages.length &gt; 0 ? '&lt;/ul&gt;' : ''} `; return this.isSpinnerVisible = false; } httpGet(url) { return new Promise(function(resolve, reject) { var xhr = new XMLHttpRequest(); xhr.open('GET', url, true); xhr.onload = function() { if (this.status == 200) { resolve(this.response); } else { var error = new Error(this.statusText); error.code = this.status; reject(error); } }; xhr.onerror = function() { reject(new Error("Network Error")); }; xhr.send(); }); } &amp;#x200B;
Thank you!)
Thank you!)
I will PM you details.
MobX is life
Dont be an hater.
Let's see the code.
Here's my advice for you 1. Get a job 2. Build some capital 3. Try making a start-up again
aye, the mental breakdowns are always for other reasons
Use TypeScript. Flexibility of JavaScript, type safety of C#. It's the best thing that has ever happened to web development.
&gt; TS does not in any way enforce OOP conventions. My criticisms are leveled at static types as well as OOP; they are fruits of the same tree. They both lead to the same problems. &gt; o yourself a favour, give it another try Trust me, ive used it plenty enough to hate it. The only upside I can say is that it helps some IDE's do autocompletion. I dont think that is worth the baggage, and I find IDE's to be too bloated and slow. &gt; I personally practice something closer to a FP style. FP style has a lot of upsides, and a dynamic FP style even more. Please stop assuming my opinion is a lack of experience; I have been at this game for longer than most people in this sub have been alive. Static typing is a false god that has led far too many people astray. The only types that are beneficial are assembly types which are semantically significant in controlling the final machine code. So the level of "static typing" you find in vanilla C doesnt bother me. But the level found in Haskell is the peak of Mt Stupid. I'm not sating you have to agree with me. I would appreciate if you would respect my choice of tool and stop pushing typescript on me. 
For what it's worth, we recently added an ["action stack trace" feature to the Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension/blob/dae9929a116d59f19d0c78c0c8659a833ae414eb/docs/Features/Trace.md) that shows you exactly where an action was dispatched from. Also, our new [`redux-starter-kit` package](https://redux-starter-kit.js.org) includes utilities to simplify several common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state automatically without writing action types or action creators by hand.
Hi /u/newbiiie, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/SherifBakr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FundAuthor, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/notacooleagle, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/maki_js, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/000modder, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kennyp77, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
Hi /u/Crailberry, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Fasyx, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/speckz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Luuk2005, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/jarednielsen, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RoyalRoXXoR, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/IndisputablyNotACop, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/diggs_89, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/EliHood, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Thank you! I feel bad but nonconstructive criticism of such a great technology. Its amazing work and most likely my own shortcomings that prevent me from enjoying it. I make realtime applications and can't wrap my head around how to make highly efficient quickly updating (5-10 updates per seconds) state tree. I know you can watch part of the tree but if i remember that was another class. Which made just so many files and then I was anxious about coworkers. Where in mobx Stores are larger class with everything related to a data domain in one place. Where I can have high level flow kept there and implementation kept in services/utils classes. Which makes the store human readable. I have not looked at redux for a long while now and I know the Duck pattern solves some of the concerns I had. Still I have learned so much because of it and it made me think in an entirely new way for state management. So thank you so much for this great work and what you are providing to this community. I think the world is a better place with Redux in it :P 
THE SOLUTION IS TO NOT USE GO-DADDY! NOT WHATEVER GARBAGE-HACK TEMPORARILY DISABLES THE EXPLOIT.
Create a README for your project and document what's going on. Also do not skimp on comments in your code. Consider using JSDoc style comments for every function and even document your function's types. Providing full JSDoc comments for code in a large code base makes it much easier to come back later and understand what obscure parts of a large code base are doing.
&gt; better naming I cannot stand things being named wrong as the code evolves. Typescript goes hand-in-hand with keeping names meaningful.
This is not JavaScript, so why is this being asked here? JS does have this too, but why not make an applicable example for this post?
&gt; My criticisms are leveled at static types as well as OOP; they are fruits of the same tree. They both lead to the same problems. Go back and read your own comment, come on, that's clearly not what you meant. &gt; Trust me, ive used it plenty enough to hate it. The only upside I can say is that it helps some IDE's do autocompletion. I dont think that is worth the baggage, and I find IDE's to be too bloated and slow. You used it for one week. You said that. That's nothing. The TS language service means that all editors benefit, not just IDEs. &gt; Please stop assuming my opinion is a lack of experience; I have been at this game for longer than most people in this sub have been alive. Experience isn't unchallengeable. My first boss refused to learn version control because he'd worked decades without it. He was still wrong. &gt; So the level of "static typing" you find in vanilla C doesnt bother me. But the level found in Haskell is the peak of Mt Stupid. Most people with experience in other languages compare TypeScript's type system to C#, though I can't say how accurate that is. If you do TypeScript properly, essentially the only things you need to explicitly type are your function parameters. Virtually everything else is inferred with type safety. &gt; I'm not sating you have to agree with me. I would appreciate if you would respect my choice of tool and stop pushing typescript on me. I am happy to agree to disagree, but I'm not going to allow you to make objectively false claims and pass them off as fact. As I said in my first or second comment, if you'd rather save a little time now at the expense of future devs, fine. That's your prerogative, each project has different requirements.
Bitwise operators... I have not needed to use these since university. Some of those are definitely "nice to haves" not "should know".
I have not had a breakdown, but the way I now structure things are heavily influenced by the coping strategy I started to use when a project got big enough that it was no longer possible to reason about the whole of it at once. It is all about learning to mentally fold pieces of code and only seeing the APIs and how they interact. It has also made me very very sceptical against stuff that acts at a distance and made me appreciate clear contol flows. &amp;#x200B; That of course requires the design to be black-box-friendly and not expose a lot of internal details. &amp;#x200B; Size of total feature: It took a week or two for me, the author of it, to mentally page in enough parts of it to solve any nontrivial task, every time I had to start at a new feature in it. &amp;#x200B; Also: Since then I religiously avoid lone ranger jobs. I learnt that I need people to bounce ideas against. 
TypeScript can generate these declarations, so as an experiment, you might get a useful starting point by renaming all your source files to .TS and running the compiler. Doesn't matter if you have type errors; it'll still spit out .d.ts and then you can correct all the missing types. I would also look at examples from other libraries that bundle their own types. DefinitelyTyped, for example, keeps track of libraries that bundle their own types. (that do *not* need to be typed via DefinitelyTyped). Or you can ask for a short list of examples here or on r/typescript.
Start with the [handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html).
This makes the most sense to me, among the comments here. I see your post much more about how you can take care of your responsibilities, handle your coworkers expectations and be transparent about what you can really do. As a human, you cannot be expected to keep all the twists and subtleties of a relatively complex platform in your mind. Don't expect that of yourself and don't let anybody else expect that. Making complexity explicit when you discuss with non-technical people is key. They have to understand the depth of detail required to make the thing actually work. Keep a sane distance. You are not the code. Once it's out there, it's not yours anymore. You navigate in it, but you should not have to wrap it all inside your brain. Let it go.
Thanks. Let me know if you run into any issues.
I’ve teeter on the edge of that a few times. Generally speaking, I find that the feeling that some code is too overwhelming and upsetting is a sign that it needs a serious refactor. It means that I’m forced to think about too much at a given time, which means my abstractions are wrong: they’re too complicated, they combine in odd ways, there are too many side-effects, they’re named poorly — things like that. Adding TypeScript was a godsend in that it got so much out of my head and into the compiler. Baking in time for refactoring problem areas has been crucial. Preferring simple abstractions that are easy to read and understand over complicated, “slick” code has saved a ton of effort, too. Set clear boundaries between objects, fight tooth and nail to maintain single responsibility, name things clearly. There’s no one solution, it’s all about best practices over time. 
Author here. I created this tool in order to help code review on Gitlab. This tool allows to generate diagrams of JS function. Super useful when you want you and your reviewers to understand some crucial high-level functions in your codebase. Instead of drawing diagrams on one side, and coding on the other side, with all the translation errors between both sides, we just code a clean high-level function with the specified behaviour, run it through this script, and share the diagram on Gitlab. Since Gitlab supports embbeding diagrams in Comments/Issues/MR using Mermaid JS, the process is super streamlined, it takes 2 clics from code to diagram sharing.
TLDR; sends back analytical data like timing (current time, page loading, content loading etc), your browser's info, the website url and an unique-identifier for your connection which most likely violates some EU laws.
Sure. If you ever do have any questions I can help with, let me know!
That is a quite excellent writeup. It confirms my own observations that Flow used to be more expressive thanks to advanced type constructs but TS has caught up. And since TS has always had better tooling and ecosystem, it's taken a clear lead overall.
This means you are doing something wrong. It takes experience to effectively plan organization, and it's hard to get quality experience when the diversity of your perspective is restricted to yourself. I would suggest diving into some well maintained open source projects to see how things are organized. Maybe start with the 3rd party tools you are using so you can see how concepts apply to your existing experience as an end user to those abstracted tools. You should be abstracting away complexity so you don't need to worry about the dirty details of completed parts, and modularity needs to be well thought out for you to avoid refactoring those abstractions.
If it's messy then it's because you made it that way.
A problem with not setting the SVG height makes the CodePen useless on Firefox. You might want to add... #container svg { height: 700px; } ...to the CSS or some similar solution.
Install nvm via Homebrew. This problem was solved a long time ago
Well its mine right now :P Now if only decorators where not in the forgotten stages. 
It sends the user agent and sets tracking cookies. Besides the performance metrics, here's what info it sends: ``` nt: performance.navigation.type ht: The string "perf" dh: window.location.hostname ua: window.navigator.userAgent vci: rand() cv: internal version number z: rand() vg: a random GUID named "visit" vtg: a random GUID named "visitor" ap: The string "cpsh" trfd: {"cts": new Date().getTime(),"tccl.baseHost":"secureserver.net","ap":"cpsh","server": unique customer ID} dp: window.location.pathname ``` Definitely not GDPR compliant.
I disagree on commenting that. You can just look at what it returns and not maintain a comment that tells you what it returns and code that tells you what it returns 
Thank you, didn't notice it before. Probably have to rewrite the library to set the height.
Ah, sorry. I didn't look at the library, but I imagined it might also need some fix itself too. Hope it's nothing too hard to fix easily.
GitHub still only allows 3 users on a private repo .-.
[removed]
Software engineering is mostly about managing complexity, through smart code organization, abstract patterns for simplified coherence, and planning / documentation to convey the complexity later on. This is the bulk of all production programming .
I'd say it's fairly typical wording and also generally typical requirement for a senior position. What's throwing you off?
Sorry cant do strict policy against where I work. If it helps though as an example another component has a table with special headers and it contains one main container with a component that has another 4 containers for header, table, edit and create components. More curious if this is the norm i feel like one container and one component should be enough. 
How are you learning? If you can find a project to do if you're anything like me you'll learn it a lot faster than watching videos! Katas are also a great learning tactic to help you practice what you learn and think of problem solving techniques and stuff! I definitely found JavaScript to be a huge step up from html &amp; CSS, but just hang in there and keep practicing and it'll start to click!
It takes time. If you practice enough you will get more confident, i know it's overwhelming in the beginning. You can't rush through html, css, javascript, react, node etc. in a short amount of time and be good at it. Get your hands dirty and practice this stuff, functions are the very basics of programming in general. 
Just learn it. Give it time. The longer you work in a project the more you know, and its not like you remember it, but when something doesnt work, you will automagically the bulb above your head. At least that's how it works for me (around 2 milions of LOC).
I read more pdf though, and watch little udemy and youtube videos. I haven't started any projects yet cos I was thinking I was't good enough yet. What projects would you advice I start or join? &amp;#x200B; Thanks for replying
I was learning JavaScript for about a year in my spare time. Using Udemy, pluralsight and lynda. It wasn't until I actually got my first web development job that I actually started to understand js and be able to start figuring out problems for clients. Stick with it! It will start to click in time :)
Here are some links which will help you from frontend perspective 1) [https://addyosmani.com/resources/essentialjsdesignpatterns/book/](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) 2) [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/) &amp;#x200B; More generic system design interviews [https://github.com/donnemartin/system-design-primer](https://github.com/donnemartin/system-design-primer)
A reasonably complex project that everyone understands: Tetris. It involves timing, state management, animation, rendering or dom manipulation, and all the underlying functions and code to support it.
You are right, I really dont want to rush through all of em. That's why I am trying my best to be knowledgeable with JS before moving to the next one.
&gt;Reply &gt; &gt;share &gt; &gt;report &gt; &gt;Save &gt; &gt;Give Awar Now, that is a point you just made "It wasn't until I actually got my first web development job that I actually started to understand js and be able to start figuring out problems for clients." How good in (percentage) were you, before you applied and had your first web development job? &amp;#x200B;
Tests should also confirm the inputs and outputs, further removing the need for "obvious" comments.
Yes I agree. My work place takes no comments seriously. Perhaps a bit too seriously IMO. I think they’re appropriate for weird solutions that are hard to make obvious with well named functions and variables
Fixed the issue, I set SVG height using the `style.height` property instead of `setAttribute("height")` . 
Comments are definitely your friend, but NEVER trust a comment. Comments get out dated and are not always well maintained.
Can I ask how big your code base is? I'm actually intrigued. There have been times I have been a little overwhelmed by how many files I could have open at once for an issue, but I've never felt like I was totally lost. We structure our folders, routes, pages, etc. in a very diligent and organized way to help prevent stuff like this. If it helps, I don't know much about it, but my boss recommended swagger docs for when we open our api. It looks at your code and automatically makes api docs for it. I forgot the name, but there was another reddit post where someone linked a project called codeship or code base or something. It looks at your files and can tell graphically show you the relationship of whatever code and files you're working on with a cool net-style graph. As far as structure conventions, I can recommend something as simple as: if they're similar, put them together. For example, if I have a bunch of pages in react, I will group them together. I may have a pages folder that will have folders for each page type. I may have two or three pages that are part of the same thing (like a checkout) so they will be I'm the same folder with its own CSS. For APIs, we separate routes, interfaces, and models. Client hits a route, route uses interfaces, and interfaces may use models to retrieve data. Have a component or multiple components that you wanna use on multiple pages? Make a component folder inside pages to separate it. Same goes for the code itself. I wouldn't expect you to have files longer than 800-1000 lines at any point in time. If you feel like you have a lot of code for something that is only a part of the page, break it out into another file. For example, if I have a form, the form itself gets it whole own file, and then I import it into the page. Pages themselves are imported into a layout, which has a head and footer that are separate files too. It may be because we are using react for our project, but I find it's easy to break it down for your own mental sake. 
It is common problem with self-learning - if you missed some crucial block, some metaphor in programming, some fundamental information, you will struggle and think it is all absurd. A skilled tutor can fix it in a second. You, by yourself, may wander around the solution to the end of time. I remember how I couldn’t grasp machine language on Atari XL. I had books, I had time, I reread everything forth and back. Nothing. One day a lightning strike! Aghhh!!! Opcodes and operands are interweaved one after another in memory just like that! It was 25 years ago. I still remember that feeling - If only somebody could say one word to me I would save a month of my life. 
I'm still not on board. I still dont like having to declare types. I get that I'm missing out, but... how do I really see it in action? How do I come to the "aha" moment?
How so?
lol... that is really true. I guess that is one dangerous path we self taughts have to pass through
I will think about a project soon and let you all know. Thanks
I comment those functions because I use that documentation to create api documentation for others. 
I wasn't confident at all in my js skills when I applied. I just really hated the job I was in and wanted a career change. I'd say I was at about 20%, I could add click listeners, loop over arrays and manipulate the DOM. that's about it. I've been at my new job as a junior dev for about 3 months now and I'd say I've learnt more in that time than I did by studying in my own. That being said, I learnt the majority of the basics in my time studying alone. So that definitely helped when it comes to solving more complex problems
There is a world of difference between formatting pages and writing logic.. there's no reason to assume an ability in one transfers over to the other, so don't let that frustrate you. Personally I'd park the ideas about getting hired until you've learned at very least the very basics, it will help keep you focused on what you're doing. This isn't just a few boxes you can tick and then you're useful - it requires you to understand what you're doing and that takes time - and a different amount of time for everyone.
Brave of you to put your github in your flair!
I will most definitely yield to your suggestions 
Woah, that is one big leap you took man. Happy to hear that
I've never seen it specifically called out before and it's been about 5 years since I've interviewed, so I thought I'd ask. What is your interpretation of it? What would you say if someone asked you to design a system? What topics would you cover?
Strong typing is a thing
Yeah that's what I was thinking. Github was taking tens of millions of dollars in annual losses too.
Still trying to figure that out :) any suggestions?
Definitely learn Node _before_ learning React, because you'll need to be familiar with the Node ecosystem before setting up a React application (unless you're just dropping script tags into your page which is not recommended).
If your beef is with *declaring* types, languages with [type inference](https://en.wikipedia.org/wiki/Type_inference) can largely avoid that, while still being strongly typed. Also, typed languages can save many keystrokes by enabling IDEs that can reason way better at autocomplete while you're typing. But even if it didn't save all of that time/effort in typing, the effort of declaring types is very worth it. It's information that you should already know and think about anyways to write a quality program and jotting that down in the code is helpful in so many ways from efficiency to debugging to documentation. While typed languages can be frustrating at times, 99% of the time when the issue is coming from typing (rather than OOP) it's because there is something legitimately dangerous/stupid that you're doing. Also, in many languages/cases if you still want to do that stupid thing, you can but you have to write a bit of code that basically says you acknowledge it's stupid. That helps you recognize the risk but also helps you find it later if it leads to problems.
Why would you have to write a comment in your own code to justify something to yourself? 1) Justification of doing something comes from communication, with your team, about the right way to solve a program. 2) pair programming automatically improves knowledge dissemination across your team and stops that sort of thing in all but a small amount of cases. If you need to genuinely explain that the reverse sorting of a list is necessary, then either it should be in a helper function which describes the intention of the reverse sort, or simply put in your commit message; anyone who wants to know why you did a thing can git log -p --reverse and see exactly why you did the thing. Never, ever found a time when an inline comment couldn't be better put in docs, commit messages, or isnt a result of a lack of refactoring 
No-one is talking about any problem here.
&gt; As I said in my first or second comment, if you'd rather save a little time now at the expense of future devs, fine. That's your prerogative, each project has different requirements. If you use typescript, you can waste a little time now, and even more for future devs also. &gt; Experience isn't unchallengeable Make up your mind: do you think im a green newb or a set in my ways greybeard? &gt; I am happy to agree to disagree, but I'm not going to allow you to make objectively false claims and pass them off as fact. You arent listening, just spouting the same lines without even considering that you might be wrong. Nothing you are saying right now is even slightly objective, nor slightly convincing, its just unsupported "trust me i say so". Appeals to authority when yourself is the authority are often the subject of mockery. Why dont you at least humor the idea that everything your professors pounded into you might be the usual orthodox flat-earthism. If your mind hasnt been welded shut: at least look at the other arguments and try to form an independent opinion of your own: Start here: https://vimeo.com/74354480 
Why Java? Is there something wrong with JavaScript? React Native would potentially let you put it on web &amp; mobile app from same code base.
So glad I moved all my hosting away from them a year ago. Will be transferring my last couple of domains before they expire. 
Happened because of MS. They don't care about paltry $7/mo subscriptions. They want enterprise licensing fees.
I think the general idea is that it differentiates someone who can "add to a system", from someone who can "design the thing". This is something I have seen somewhat frequently. That is, one person can understand and be comfortable with OO, design patterns, etc. They may identify patterns in a system, apply them, follow an existing design that someone else has created and add to it. Maybe they are even able to modify certain structural things. I mean, not only _adding_ to the system but they are also able to identify existing problems in the design and propose solutions. But then, then there's a different ability that goes, let's say, _beyond_ that. It's the skill to confront a problem and being able to actually analyse the problem correctly, identify the needs, propose a solution, and finally implement it from scratch. It is just a different skill because it requires more experience and, to some extent, a clearer vision. You start from nothing and can propose solutions that will be able to grow, to be modified, etc. ---- In an interview this topic may be a bit _too big_ to ask very specific and detailed questions. Usually it's presented in the way of a more vague and general question in the form of "How would you implement a... &lt;whatever&gt;?" Say, how would you design a Reddit clone, or an application to produce music based on generators and filters and modules, or a mail client. Obviously, going into all the detail that would mean explaining that is usually too much for an interview (though sometimes people _do_ ask it that way). So, sometimes it may take another shape. They may ask you just for a _"general description of what's involved"_, or they would want you to start explaining what decisions you'd make and discuss them with you. Sometimes they do ask you for a more detailed design explanation, but then choose a smaller example. Somewhat typical may be _small_, very well known games. Like a poker game, or chess, or even tic tac toe, or maybe something a bit more involved but not too complex. The idea is not to present you with a very complex system because that would require you to have a fairly long time to think about it. So instead it may be something of low or medium complexity -hence why I said "small games", small in complexity- but that both the interviewer and you are familiar with.
will give more info if needed 
Do you mean Java, or JavaScript? Automating LoL through OCR and screenshots sounds like a terrible idea and likely against the terms of service of the game. If this is your first programming project, I suggest you start with a less extreme project.
Tough to tell without seeing your data, but you're not summing anything in this function so why are you calling it "sumarray"? Also your if condition isn't returning anything or doing anything with the return value of its recursive call
I have a site that I maintain and its large. I just remember to breathe, re-factor and stay positive. Overall I am grateful for the task!
You don't need `=== true`. Each time the function runs, you get a new sumarray scoped to that function. Try moving it outside the function. 
&gt; crazy serial killer as opposed to very-stable serial killers
 11 2 4 [ 11, 2, 4 ] 4 5 6 [ 4, 5, 6 ] 10 8 -12 [ 10, 8, -12 ] [] This is the debugged output I'm getting the argument being give to function is a grid/matrix nested within other arrays. sumarray is probably not the best term, but my ultimate goal is to get add up the diagonal numbers sum. I don't know if this can be shared but here's the full problem; https://www.hackerrank.com/challenges/diagonal-difference/problem.
I actually disagree. IMO the vast majority of comments are dumb restating of the code’s self-evident execution. // set user variable from user id let user = getUserById(userId); Comments are only needed to explain code that isn’t obvious and if the code isn’t obvious you should **rewrite it so it is** instead of commenting it. The only reason for comments (again, imo) is to explain business rules or external requirements that don’t have meaning in code. // 15 is a legacy trial account // only used in an old system const LEGACY_TRIAL = 15;
Click here for one trick developers don't want you to know.
[Stable serial killer!](http://twistedminds.creativescapism.com/serial-killers-introduction/holmes-typology/mobility/)
Depending on what you're working on, an integration test may be more helpful than several unit tests. Probably if you're dealing with internet resources/servers/etc
&gt; the old one worked but only if you didn't save. Wow, what a tease.
Hey that worked! I don't know if I'm technically allowed to do that in [this](https://www.hackerrank.com/challenges/diagonal-difference/problem) problem. I'm wondering if there's anyway to return the sumarray without globally scoping it.
I used to worry about in-progress code. Until I was told to "first make the code work, then make it pretty". 
&gt; Also your if condition isn't returning anything or doing anything with the return value of its recursive call Is that bad? I wanted to do it with the else statement. I had it the other way around the first time though.
it will sink in just keep trying. That is a normal feeling as you learn programming 
Wrap the whole thing in another function. 
Yup, and with the new pipeline operator this will become even more readable.
IFLY
See if you can minimize your choices, because the sheer number can be overwhelming. It helps to break items into smaller pieces. If a step is too much, you probably can divide it.
That's all good advice but I'm going to be snarky to point out 7 bits is only one character in ASCII. 
This is why you don't want to spaghetti code.
I don't see why it would be.
1. Visit /r/LearnJavascript for this kind of question 2. Why are you calling `diagonalDifference` recursively? You don't need to do that at all for this problem. It is _much_ simpler than what you're thinking. 3. Leaving the original problem aside, you're calling your function recursively, right? But when you call it, you _don't do anything with whatever it returns. So... Your function gets called like: diagonalDifference([ [11, 2, 4], [4, 5, 6], [10, 8, -12] ]) and so you get the first element. It's an array (`[11, 2, 4]`), so you call `diagonalDifference([11, 2, 4])` (line 6). This returns `[11, 2, 4]` but you _don't do anything with that, just discard it_. So it serves no purpose. Second element. Another array (`[4, 5, 6]`)... same thing. In the end, as you haven't done anything with the partial results you got from calling the function recursively, you don't have anything to return but an empty array.
I don't know what the function is supposed to do.
I am categorically writing all code for the sake of future me who will come across it in 3 months and think "what in all that it holy was I doing?"
So after a few years working professionally I decided to do a personal project. I didn't want to waste time with all the process and structure of my day job, so I just started throwing shit together all cowboy like. I have since regretted it. The codebase is sloppy and I ended up doing a major refactoring time make it even somewhat maintainable. Learned a valuable lesson in the process.
The people here saying that it gets easier are correct; it does. However, I want to address two points you made: &gt; After learning JS, I need to delve into ReactJS, then NodeJS, MongoDB and React Native and what next. &gt; &gt; &gt; &gt; I ain't gat any choice, I really need to know all these stuffs, become a fullstack and land myself a job asap. &amp;#x200B; First, you need to learn to walk before you run. Don't worry about all the other stuff that you need to learn yet, focus on your building blocks and take it by stride. I personally don't agree that you need to learn all of these specific systems and such. They might not be around forever and it's much more important to learn fundamentals early than trying to learn stacks and frameworks. &amp;#x200B; Secondly, and this is one that people don't like to hear, but some people aren't cut out to be developers. Some people burn out, some people have trouble with the concepts more than others, some people just think differently. You have a choice, you don't have to become a fullstack. If you find that A. you don't like it or B. you have a lot of trouble with understanding it, then maybe another route is best for you. I've seen far too many people try to force themselves into CS or IT just because of the job security or the money, only to crash and burn 2 years later. &amp;#x200B;
Mercilessly refactor. It helps you keep tabs on your whole codebase if you’re relentlessly looking for improvements!
Typescript is not another language. In fact (speaking from experience) learning the quirks of JSDoc syntax is more of an effort than learning TS syntax.
Excellent video/post. Very low level and understandable explanation. one mistake though at the very end of the video: you were looking at the wrong thing on caniuse. though modules support isn't all that different from what you showed.
Has no formal technical meaning. It means whatever the person saying it wants it to mean
&gt; I'm sorry to say, it's your fault. Not always. Management not allowing for enough planning / maintenance can be the cause. &amp;#x200B;
I guess I just don't know what I'm missing.
&gt;I am currently building a documentation server which combs the entire project tree(s) looking for documentation so it can be shown in a searchable/display friendly way, which is a project in-and-of-itself that is exacerbating the timeline of an already long overdue project. Oof the former CTO at our job went about this before he rage quit. You know how many devs use it? None. Just stop. Get a good IDE and show the devs how to global search. I am of the opinion that retroactive documentation is a waste unless absolutely critical. In theory going back and explaining stuff makes sense. In practice your time would be better spent refactoring.
Could you talk more about your code induced breakdown and the year you mentioned? I feel like I’m about to get there.
I'm the only dev. I'll use it.
Any idea if media temple is also doing this?