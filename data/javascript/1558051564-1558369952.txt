Writing the polyfill isn't what takes time. You can do that in a handful of lines or even copy and paste it directly from MDN or Stack Overflow if you don't know/understand how to. You don't need to tie your site to a 3rd party service for that. What takes time is rewriting a large, pre-existing jQuery codebase to be vanilla JavaScript because "vanilla is better". Which is why I wrote the last sentence in my previous post. Telling people to just use "magic" services like polyfill.io also gives new coders a false sense of security. Polyfills can't cover syntax additions and IE11 can't handle template literal strings for example. Adding a script tag to "enable ES6 in old browsers" doesn't actually work like that.
I really enjoyed using Firefox when they launched Quantum, then they started repeatedly pushing updates that broke various features in the DevTools. Frankly, I'm afraid to use it again.
Hey, no worries! I feel like half of learning JavaScript is Googling shit that you half ass remember, so I appreciate any help I can get! Thank you!
What version are you using? I'm on 68 (Developer Edition) and it works just fine. It doesn't work on 66 (my current "regular" Firefox).
But you're not rewriting anything, that's the point. It exists natively. If you have to write anything it's wrapper functions to make the more verbose stuff easier to use, and any of those will be infinitely smaller than the jQuery implementation. Example: const $ = function (selector) { const s = document.querySelectorAll(selector); return (s.length &gt; 1) ? s : s[0]; }; Now I have a sizzle-like selector that will return any single element or a nodelist. Compare that to the 300+ lines for the sizzle implementation in the latest jQuery version. Also no one expects polyfills to magically make everything work, that's silly. Part of learning javascript should involve knowing what works and what doesn't for your target browsers. You don't NEED to use template strings and nothing in jQuery even replicates that, so I'm not sure how that justifies using it over native javascript. For almost everything else useful, like nodelist foreach loops, polyfills have you covered.
`console.log('should not see this')` `console.log('why am I not seeing this')`
SSRing a SPA was always an absurd concept. SEO and performance justifications never made it less absurd, just undertaken by people with poor engineering aesthetics.
To pieces, you say? Tsk tsk tsk
Hi /u/feathercaps, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gamerkidben89, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/piecioshka, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shellsbells567, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hiperhiper, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nenegoro, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's Clojure actually ;)
And SSE
I think you're complete misunderstanding what I'm saying so I'll spell it out the best that I can. &gt; Yes you can polyfill or write around it I understand that polyfills and wrapper code is easy. &gt; but if the bulk of your code is like this (ew!) then just save yourself the hassle and use jQuery. I'm talking about writing new features on a legacy codebase. I'm saying if all the existing code in your codebase uses jQuery, its probably not worth rewriting the entire app just because vanilla JS support is better now. Just use the existing jQuery (update it with jQuery migrate if you can). It will probably be fine and has the advantage that it still handles IE and the remaining crossbrowser quirks. I do not need examples of polyfills. I know they exist. I've written my own. I've mentioned places where people might find a polyfill already if they wanted one. &gt; Also no one expects polyfills to magically make everything work, that's silly. The world is full of silly programmers (and new programmers, which is a good thing!). Polyfill.io is complex but it endevours to make things easy. It has a box you can check to include polyfills for es6 and es7 features. But this does not and cannot cover new syntax like template literals or arrow functions. Babel handles transpliling template literals and arrow functions but does not by default include polyfills for new methods. It is dangerous to tell new programmers "just use x and you don't need to worry about browser compatibility" because it is a nuanced problem. This is how your *someone did that for you* message reads like to me: a bit of a rushed over simplification. Polyfill.io is a very cool service though. No you don't *need* to use template literals, arrow functions, fetch, async/await or a dozen other features. But they're a big part of what makes es6/es7 competitive with jQuery, handlebars and other old school, unfashionable technologies. Yes you can write a selector wrapper and polyfill the "useful" bits and transition quickly from writing jQuery style code to pure vanilla code but that wasn't what I was talking about. I was weighing up the perceived benefits of a full vanilla js + polyfills rewrite vs just using es5 + jQuery. Hope that's a bit clearer.
This is a really good idea. My question is, if someone were to download a web app from the phone would an App appear on their phone? And so then anytime they click on that App Icon it directs them to the website where they can use the Web-App?
My Firefox dev tools crash all the time. Probably every 45 minutes when I am using them. It sucks, but I use Firefox because I feel bad using Chrome.
Yeah, Chrome doesn't count the whitespace between the sourceMap declaration and the start of the actual code. The result is that the line numbers and breakpoints get thrown off. The trick is to have the `sourceURL` or `sourceMappingURL` immediately after the start of your closure. Also, Google just changed the syntax rules for the declaration 2 weeks ago, which might explain why some people are now having problems. [Here are the details](https://developers.google.com/web/updates/2013/06/sourceMappingURL-and-sourceURL-syntax-changed)
Look into PWAs, or a cross-platform app builder like Cordova or React Native.
I see where you're coming from now. Sure if you have something already written in jQuery and jQuery is already included there's no harm in using it. At the same time there's also no harm in using what native javascript APIs exist with good support and without the need for polyfills (querySelector, insertAdjacentHTML, forEach, etc.). I just started a new job recently and we have apps that were poorly written with jQuery. It is an absolute nightmare for me to read, understand and maintain because I have to go through poorly structured spaghetti code that is partly enabled by how easy it is to write lazy code with jQuery. I've inherited bad jQuery more often than seeing it used properly during the course of my career which has contributed immensely to my disdain of it. In all cases where I've encountered bad jQuery I can think of a cleaner native javascript solution that works just as well if not better. That's just me though, someone else may prefer to just refactor with better jQuery.
https://developers.google.com/sheets/api/
React and react native are good for what you're asking about. But if you're specifically wanting a web app and not a native app then you can just make it in regular react as long as you optimize or for mobile.
Overview: * [Speed improvements](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#speed-improvements) * [The Omit](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#the-omit-helper-type)[ helper type](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#the-omit-helper-type) * [Improved excess property checks in union types](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#improved-excess-property-checks-in-union-types) * [The --allowUmdGlobalAccess flag](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#the---allowumdglobalaccess-flag) * [Smarter union type checking](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#smarter-union-type-checking) * [Higher order type inference from generic constructors](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#higher-order-type-inference-from-generic-constructors) * [Breaking changes](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5-rc/#breaking-changes)
Thanks for the feedback will definitely update the UI for now I am just focusing with some basic UI on mobile but once backed completes I will focus on improving client UI, please do share your ideas
Note that this is an interview about his self. There's nothing about cypress other than a couple of mentions. It serves as introduction for some conference he'll be doing. Just so you know and don't expect otherwise.
```js console.log('what 1'); foo(); console.log('what 2'); bar(); console.log('what the hell');```
If you had to choose one for this which would you choose? Seems like React Native is quite popular.
Thanks for the positive attitude there. Willing to learn. Where did you go to learn how to use React and React Native? What do you mean by "wanting a web app and not a native app"? Is the whole idea of someone being able to download from their phone and then have a executable Icon on their phone which opens their browser and directs them to the web-app possible? Or does it make more sense to just make a website that someone can straight go to and interact with the web-app there? Is postgreQL like the #1 database to use for JS?
Already in!
Yes and no ;) The book entity is stored in a database, and somehow delivered to a client app over HTTP. Depending on the entity you decide what state the state machine should be in with [guards](https://xstate.js.org/docs/guides/guards.html). For example you could have an initial state called `Pending`, and then implement a guard that transitions either go `Lent` if the book is lent, or to `In Stock` if it's not. If it's `In Stock` and a user changes the state, it's again up to the app to communicate that to the backend and therefore the database. How that is then communicated to *another* client is again a question of implementation (HTTP, HTTP/2, Websockets, etc.). &amp;#x200B; Does that help?
Hi mate. Sorry you didn't like the article and the scenario, but it's actually what had happened. The DBAL, etc. was provided and we were asked to build a UI on top of that. Obviously you're right: mashed data in your database is by far worse than a confusing error message and in a real world application should definitely be handled at a lower level as well. Yet I disagree that it's using state machines for dumb reasons. Obviously before rendering a "Lend" button we could check `if (state !== 'Lost' &amp;&amp; state !== 'Lent' &amp;&amp; state !== 'Damaged') { /* ... */}` and we'd get the same *result*, but IMHO this would be way less maintainable and readable. If we add a new state to the model, e.g. `Reserved`, we'd have to add the check everywhere again to ensure correct flows — or you can add it to a state machine and render based on that. I'd love to hear your thoughts on that.
I tried this editor for a month, it's quite good but PHP Storm is well better
We usually have a `Pending` state where we fetch data from an API with [services](https://xstate.js.org/docs/guides/communication.html#the-invoke-property). When we receive the data we implement [guards](https://xstate.js.org/docs/guides/guards.html#guard-functions) to transition into the state we actually want. So let's stick with the book example and say it has a boolean `damaged` field and a nullable `due_date` field (null if it's not lent) in the database. { states: { Pending: { invoke: { src: () =&gt; fetch('https://example.com/books/42'), onDone: [ { target: 'Damaged' cond: (_, { data }) =&gt; data.damaged === true, }, { target: 'Lent', cond: (_, { data }) =&gt; data.dueDate !== null, }, { /* The last one without a condition is the fallback transition (optional) */ target: 'In Stock', }, ] } }, Damaged: {}, Lent: {}, } } The second argument cond receives is the event, with the HTTP payload in the data property, so we can check the data received from the API and transition based on this. Does that help?
It actually was date. The dialog was supposed to show something like "Lent until May 25th 2019". Oh well.
damn that site is very weird to use on mobile.
Google Play Store just recently opened itself up to allow PWAs, which I think is almost exactly what you're asking for. It runs your site in limited Chrome runtime by linking to your website. https://developers.google.com/web/updates/2019/02/using-twa
Yeah I’ve run into this before as well. An easy mistake to make. But it’s worth noting that, in some cases, mutating an existing object might be your desired behavior. The most obvious use case would be to maintain an object reference instead of returning a brand new object. This could be useful when performing a deep property merge that expects certain references to remain in place.
Am I the only one that thinks shit like this hurts your code more than it helps? function composeCtor&lt;T, U, V&gt;( F: new (x: T) =&gt; U, G: new (y: U) =&gt; V): (x: T) =&gt; V { return x =&gt; new G(new F(x)) }
Maybe they use Chrome :p
Haha very true. I’m not going to lie I am handicapped by writing code in typescript because of things like this and eslint “no warnings” for pull requests to be merged.
Soon :) It's being worked on as part of Google Summer of Code. The bug: https://bugzilla.mozilla.org/show_bug.cgi?id=885508
I don't think it hurts the code, but proper functional programming in typescript indeed is painful.
Right, so you would rather hide that complexity behind all the possible runtime errors and possible bugs? No thanks. It's not that hard to understand, it saves me the time of trying to read a shitty description, if it exists, and if it doesn't build this mental model from scratch, and btw, there is no automated check for any of that.
jsdoc
TypeScript doesnt stop runtime errors. Those happen all the time even with the type safety of TS when you're writing it. Secondly, I've worked on a number of .NET apps that not only require extremely cumbersome, obtuse code to do simple things because of how buttoned down they were with type safety, but they *still* suffered from runtime errors anyway. &gt; It's not that hard to understand, You literally think the string of symbols I posted above is not that hard to understand? Must be nice to be a one-man genius team. Here in the real world though, teams of people with different abilities to parse symbol-dense code are actually more productive when code is kept simple and straight-forward instead of trying to be some crazy combination of flexible and type safe at the same time. &gt; The solution to the problem you're stating is simply don't write overly complicated things whether it be JavaScript or TypeScript I agree with you, which then begs the question why TypeScript even has this level of type safety since nobody in their right mind should be writing code that's this obtuse.
This sucks
I take this as a feature that's mostly useful for library authors. I read somewhere that this will help specifically with Ramda, which is famously extremely difficult to use with typescript
Oh my god my team has been working on a project that uses styled components and we thought we were going mad! There is sometimes up to a 5 second delay between typing code and red squiggles appearing in vscode. I googled around briefly and didn't find anything, but it didn't occur to me that it might be related to a framework we happen to use! This blog post made my week
Libraries are a good example of making complicated things that should have type safety
Hmm, Perhaps the router should not have such a big responsibility? Like, you could probably re-build it to initiate a component matching path and then nothing else. Have the framework itself to care about the rendering process, then you could in theory split your code to smaller libs ``` import Home from '..' const routes = { '/': Home } ``` Your component === `new routes[location.hash.slice(1)]()` Hopefully something you find interesting And again, nothing wrong with having a big monolith, but splitting is always a nice idea (y) Cheers mate!
You'd very rarely actually need to write this, but for some libraries this expressiveness can be incredibly useful and those benefits obviously trickle down to all the code that uses it.
problems with typescript... - makes mistake more costly. programming is organic experince where i change code several times until it becomes very clear what i was thinking. I have to write code down to better visualize what i had in mind and only then i see obvious flaw or optimizations. sometimes successfully and sometimes incorrectly and then have to back track. with types it asks you upfront what needs to happen, the time it takes to change all types is enough to delay eureka moments because you are too bogged down with manual labor of changing types and interfaces. - 50/50 chance library you are using isn't supported, whole codebase is littered with @ ts ignores. or type any - wait for compilation EVERY TIME.
`&lt;html&gt;&lt;body&gt;&lt;p&gt;yea, probably&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;`
Yes, this is something I’ve been waiting for. I thought maybe they would never be able to make it work, to be honest. I was at the point where I preferred plain JS while using Ramda, as the TS support was pretty bad.
The occasional time you want it, you really want it. Especially as people say for libraries. Have a look at the code for my state management library: https://github.com/gunn/pure-store/blob/master/src/index.ts It's 45 lines of very type-dense code - it took a while to write and I wouldn't want to have to code like that normally. *BUT* having gotten it right once, any time I use the library it does everything type-safely automatically.
Typescript has excellent support for gradual typing (set `noImplicitAny: true`) but will still catch errors for you even if you don't give it type information. With a good hot-reloading setup (parcel-bundler gives you this for no effort) you don't have to wait much for compilation.
Thank you for answering! Yes, that help. I wrote on graduation a state machine to syntax the C language as one of the parts of a C compiler, but I had never imagined to use a state machine to solve a simple real case like this one on your article. I'm glad for that.
also @types are not necessarily in sync with actual api of module
Well, you introduced that unreadability when you used one-letter variables and that weird identation. ``` function composeCtor&lt;TInput, TIntermediate, TOutput&gt;( First: new (x: TInput) =&gt; TIntermediate, Second: new (y: TIntermediate) =&gt; TOutput, ): (x: TInput) =&gt; TOutput { return x =&gt; new Second(new First(x)); } ```
what errors that vscode already doesn't
Wait, what was the issue?
What tool/framework/tech do you use that breakpoints seem to fail?
I think its not only the source map but how the libraries use Javascript. Or better: abuse it to do what they want. Especially if it gets parsed and processed multiple times it gets pretty hard
And later `console.log('how is it reaching this')`
While I do like these features, it still feels like they are still behind Chrome on their devtools. Many features Chrome has for a longer point of time, Firefox only just now is implementing. And while it becomes a better competitor because of it, I feel that using these devtools sets me back a little. Not to mention that many people now started mainly using Chrome, which means I got to make sure it runs there more than Firefox.
Well if you're using vscode to catch JS errors for you then you're already using typescript.
that's what im thinking is there much more then what i'm already getting for 'free'
Oh I had no idea it's a feature now. Last time I used the developer edition it wasn't a thing.
There are many companies building software for other companies and you don't usually hear about their products on reddit. I can't answer that question.
It's in the name, you get a real representation for data types which can prevent some of the common errors that come with weakly-typed languages. It doesn't have anything to do with VSCode as hints, indexing and live error checking is pretty much standard in every decent IDE at this point. I don't think that it's required in every single instance (e.g. React development, etc) but i've found it useful plenty of times when making applications that require true object-oriented design such as things like; * Type checking (obviously, types) * Type inference * Enumerated types * Generics * Namespaces * Interfaces * Some other goodies... The discussion of "why typescript is useful" is one that needs to be had once again because it's been asked a million and one times and ultimately comes down to - it has benefits and it has drawbacks. The answer to your question entirely depends on what you need from typescript and/or what you need from a typed language.
How often do you write a function like that even without type definitions? Vast majority of real-world code has type inference with simple type definitions. Type-safety just gives you a better IDE experience and ensures you don't miss potential errors. At least for the past two years of working with TS, I write utility functions with generic parameters maybe like once a month and even then there's a good chance a better one is already provided by Ramda, Lodash or whatever. If you use functions from third party library, it's nice if they don't compromise your type-safety. And someone working on FP library is probably motivated to ensure maximum type-safety, even if the signatures and definitions get a bit verbose/complex. The compiler limitations tend to show up as "Oh, this function loses my type" to the average developer. It's great when the TypeScript team makes the language and compiler more advanced to ensure that happens less.
You here to start a war.. again?
i said concise... Enums - const variables do that Generics - very narrow case Namespace - dont need types for that Interfaces - they are types just more detailed
[removed]
I choose not to use Typescript. My concise description of the differences between TypeScript and JavaScript with and IDE are this: TypeScript is a contract. JS w/ IDE is an agreement. You can't violate a contract. You can violate an agreement on purpose or by accident. That's it in a nutshell. If you screw up in TypeScript, the compiler will not let you continue until you fix it. JS with an IDE has no such protection. It will happily let you shoot yourself in the foot. There's one additional benefit for JavaScript, though: No compile step necessary.
i would prefer to get concise arguments with example.. enum, and namespaces don't require type, that pattern can be replicated in js as is. generics are useful in very narrow situation. ROI isn't there. Interfaces are types, just more detailed.
can you give an example of such situation. I remember reading that 80%, or something like that, bugs are specification related, meaning design was wrong to begin with. if you diligently implement a wrong design with all types, it's still incorrect solution.
Typescript/ Javascript feels like abortion right now... the subject is super loaded, both sides have valid arguments, and both sides are super entrenched in their belief that they are right. I don’t personally use typescript much but i can see the value in it for stuff like published modules that will be consumed by another developer. I don’t feel like the juice is worth the squeeze on dev that my team produces and consumes...
Gotta love the "please do my work for me" posts.
The benefits/drawbacks are already discussed a thousand times on reddit alone. Just use it or don't use it.
&amp;#x200B; TypeScript can also compile your modern (ES6 or later) code into older JavaScript. You can specify what version of JavaScript you want your JavaScript to compile to in the `tsconfig.json` file. Here is an example showing what I'm talking about. { "compilerOptions": { "target": "es6" } I hope this helps.
I won't lie, without the function name it would have taken me twice as long to figure out what the intent of the function was.
See below method. https://pptr.dev/#?product=Puppeteer&amp;version=v1.16.0&amp;show=api-elementhandleevalselector-pagefunction-args Based on the example code, use it to select all of the `source` elements in the `picture` element, then retrieve the `srcset` property on each `source` element. See the description for the `Page` class on how to retrieve a page object.
&gt; Yes, I think this example is very straightforward. Where do you work, so i know never to apply there?
Disclaimer: I strongly support the use of the standard (i.e. vanilla js), but I've also been using TS in a series of projects. So far, the only reason why I would use TS over vanilla js is in a "complex web app", specifically when dealing with complex models/objects. The rest is faff and leads to over-engineering.
Hi /u/eindel, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
have you tried \`document.querySelectorAll(\[srcset\^='imgurl'\])\` ?
You can do the same thing with regular JavaScript and something like babel.
You already have a comprehensive list of the benefits but you're not really understanding the implications of the benefits based on "despite the costs". All code is a liability, it ages as time goes on. People get added into a project, people leave a project, rewrites happen etc. In those scenarios Typescript lowers costs (code liability) to a degree that no amount of good naming convention can match.
nice one. love what snipcart guys are doing. btw...you can find similar case studies and more on jamstack at r/JAMstack_dev ;-)
Or just do `const objB = { ...objA };`
I started using Typescript when I started building web apps using Angular. Now I use Typescript everywhere I used to use plain JavaScript (within reason), really for one simple reason - interfaces. I still like vanilla JavaScript, but I lead a team of 9 developers and the illusion of type safety that Typescript gives you makes it easier to enforce conventions and reduce the risk you get with people of different experience levels working on the same codebase. The other reason I've gone all in on Typescript with my team is that we also have other dev teams that need to build apps on our platform. Those other teams are largely Java and C# developers, and Typescript is an easier transition from those strongly typed languages. It looks more familiar to them. In the end, if you like JavaScript the way it is, use that. If you like Typescript, use that. The only thing I'd strongly suggest is to at least give Typescript a try and then make your mind up. It's good to step outside your comfort zone and try something new.
TypeScript is just an object oriented mask given to JavaScript to make old school programmers stop bitching about how bad it is. I can’t stand TypeScript, coming from a functional background. Classes are for Java, and in my opinion that’s where they should stay. If a JS programmer needs a static superset to avoid making mistakes, they simply don’t understand how to write proper JS.
Autocomplete in typescript can be 1000 times better. It can show you your options exactly and their types. My typescript projects have many situations where my types and functions force a set of values and types. For example, a function to animate an HTMLElement can take an animatable property as a string and various types that are acceptable for that property. It shows you a list of all valid properties for that animatable type and once selected it tells you the types of values you can use (number, array of numbers, object with x y, function that returns on of those values, etc). If someone were using my library they wouldn't really need to study my documentation to understand how to do everything. Another example for the same library is when creating animations. the animations are created with an object which specifies animation types, modifiers, etc. It completes everything I start to type at every level, and if a required property is missing it tells me. You can also have functions with complicated overloading or generics which really allow you to force the user to use it properly. As a library writer TypeScript is a godsend, I have some large and complicated libraries that I even forget how to use myself and with TypeScript I can pick it up instantly after months of not using it.
hi. srry. I just edit a bit. Can you recheck it? Thanks
The only thing making that unreadable is your deliberately obtuse generic, variable, and parameter names.
 hi. srry. I just edit a bit. Can you recheck it? Thanks
it doesnt work ! I just edit a bit. Can you recheck it? Thanks
r/iamverysmart
I don't really care much for this discussion, as I feel like most people come to it with a very prejudiced mind -and I mean people from *both* sides. So, instead, I'll just focus on *one* thing you wrote, almost in passing, as if it's not that relevant. It is, to a large extent, *exactly the point of it all*. You said: &gt; This means complexity exists in situation and types are just pushing it somewhere else in some cases. And before I address this, I'm going to clean it up a bit and morph it *a little*: &gt; Complexity exists in programming. Types are *just* moving some of that complexity somewhere else. And now, I'm going to cite one of the few *solid* principles we have in programming to manage complexity and build well-structured, clean and maintainable code. It has various *related forms* and you may know [some](https://en.wikipedia.org/wiki/Separation_of_concerns) of [them](https://en.wikipedia.org/wiki/Single_responsibility_principle). I'm going to cite [this particular form of the idea](https://en.wikipedia.org/wiki/Abstraction_principle_\(computer_programming\)) because it comes from a great book on *typing*. &gt; Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts. Any way you look at these various forms of the same idea, the principle remains: The best way to *manage the complexity* that exists inherently in programming is by keeping related things together and keeping unrelated concerns separate. So, back to your almost-casual comment. Types are a tool. What they allow you to do is not "just" but **precisely** moving certain information, certain complexity, to a different place. That is exactly what they provide. Types allow you to take a certain amount of program complexity -about the shape and transit of data- and encode it *as types*, that is, in a different part of your code. Now, sure, that's "all" they do. They don't reduce the complexity, "just" move it somewhere else. But in many circumstances -when you have large amounts of complexity- just being able to split that complexity in pieces and manage it separately helps tremendously. On the other hand, types are just *one* such tool. How much gain you get from using it depends a lot on many other factors. One of them being what other tools you're already using. If you're already using VS to help you manage that kind of complexity, then it *may* be that the extra gain you could get from types is smaller in comparison. I'm not trying to get you to change your mind in any way. I'm not even much of a frequent user of TypeScript myself. But I think it should be made clear and well understood what is it exactly that types provide. And while the points you make are indeed things you might gain from using types, they are mostly *smaller* things, almost side-effects of the actual, more relevant intent of types.
Indeed
What about jsdom with @tsignore?
If only it were open source
Pretty annoying how many people think that classes mean oop. Javascript can be used to write object oriented style or functional style software. Even without classes you can write object oriented software...
http://lmgtfy.com/?q=create+node+js+module
Complexity isn’t necessarily a bad thing. Ever see the winners of of the obfuscated Perl contest? I can understand your code just fine, and it’s probably simpler than other modern languages like Swift.
Not smart enough to know that classes are part of JS and not TypeScript though. TypeScript adds types not classes.
Yeah, not really a typescript problem as much as it is just bad practice.
You are completely misinformed about what TypeScript is. TypeScript doesn't force you to use OOP or classes in any way. You can write code in the exact same style as you would with JavaScript, just with the addition of types.
This is it exactly. Types help offload complexity. That is why strongly typed languages are so preferred across the industry for complex software development work.
It's unfair that you are being downvoted for your opinion. &gt; ...and both sides are super entrenched in their belief that they are right. I completely agree with you here, it's like debating tabs versus spaces. In my opinion though, lots (not all) of anti-TypeScript folk are less informed about the topic since they either have ruled it out without trying it or trialed it and dismissed it too quickly. On the other hand, most of us TypeScript fans naturally came from using plain JavaScript for years and have decided TypeScript is significantly better haven gotten used to it. I can't imagine building anything significant in JavaScript any more. TypeScript is just so much better in my opinion. But there definitely is an initial hurdle to get used to it and refactor your code.
Svelte 3: All the hype, none of the modern tooling/ecosystem.
Some place with competent, intelligent engineers? Yes, thanks.
There are no specifics. It’s not that simple. There’s no way to quantify the benefits of static typing. I get what you’re asking, but there’s simply nothing to talk about here.
You’re looking to quantify things that can’t be measured.
Hi guys, this project is still WIP, but I would like to know what do you think about it.
You just described why it's hyped :D
&gt; TypeScript doesnt stop runtime errors. Those happen all the time even with the type safety of TS when you're writing it. No, and nobody said that it did. However, it *dramatically* reduces the number of them. &gt; I agree with you, which then begs the question why TypeScript even has this level of type safety since nobody in their right mind should be writing code that's this obtuse. Because it helps? Code completion and compile time type checking when using libraries reduces development and debugging time immensely. Let the experienced engineers deal with the obscure typings, and rest of the team can enjoy the benefits of them without needing to understand conditional types and such.
Old news, but fuckin' lovely. :D I personally can't wait until Vue implements \`Proxy\` instead of \`Object.defineProperty\` in the 3.X release
Here is what you can see when you open an hexadecimal editor to view the content of a file saved with this extension: [https://twitter.com/check\_ca/status/1129365001666473985](https://twitter.com/check_ca/status/1129365001666473985)
You'll end up hating yourself if you stick with Angular ;D A quick search on GitHub yielded this page: [https://github.com/yuchiu/Netflix-Clone](https://github.com/yuchiu/Netflix-Clone), seems to be a decent starting-point for your next project! &amp;#x200B; GL&amp;HF
Um... I don’t think verbosity alone necessarily improves readability. I had to mentally remove the boilerplate, which is 90% of this code, to get to the essence.
&gt; if you diligently implement a wrong design with all types, it's still incorrect solution. wow.
I do think verbosity alone improves readability. It's not the only step but if we are going to talk about readability a little verbosity is required. You don't need four word classes but at least don't use one-letter variables. If I understood your comment, you're calling type notations "boilerplate". If that's what you think then you probably want to use Javascript instead of Typescript.
Just a doubt, after reading through really fast ... Why are you using await when you call serialize if that function does not return a promise and, therefore, is not an async function?
Your functions should take in an 'event' as a parameter. This will be passed in from the event itself. In the event you'll find the target (which is the one you're dragging on). If you provide a codepen, I'll be happy to fiddle around with it. &amp;#x200B; To put it in another way, all the 'this.append' and 'this.classname' won't work, as there is no 'this'. You will probably need to replace all those 'this' instances with the node from the event.
I love this, just need a community now. Please spend some money on evangelism.
But he just edit a bit!
It saves the page as a file which _claims_ to be an HTML file, but is not actually valid HTML. As per [the spec for HTML 5](https://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#syntax), an HTML file can only have BOM, HTML comments and whitespace before the initial &lt;html&gt; element. So, cool hack, but not something I'm going to use for archiving documents.
Thank you for your reply. I tried passing an "event" to each function but the result I get is the same, only one of them actually changes. And here you have the codepen, [https://codepen.io/gezzzz/pen/LoLVXR](https://codepen.io/gezzzz/pen/LoLVXR) Thank you again
Not gonna lie. I have no reason or need to use something like that.
Ionic or React Native, Ionic is very similar to Cordova but you'll likely find better documentation and community surrounding it. Cordova is less popular except as the free branch of the enterprise platform PhoneGap.
How does the make one tool better than a other?
Hi /u/sxtxnn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rshetty01, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fagnerbrack, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cmjdev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FrontendNation, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/daney_q, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hwold, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/resnine, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/madein86, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The fault tolerance behavior when parsing HTML content is standardized (cf. [https://html.spec.whatwg.org/multipage/parsing.html](https://html.spec.whatwg.org/multipage/parsing.html)). Any browser that claims to be compatible with HTML5 will be able to display these pages properly.
Hi /u/jfadev, this post was removed. Please do not repost the same project unless there's been major updates.
I’m just saying TS’s type annotation is starting to become burdensome. You wouldn’t want it to turn into another C++ or Scala where a code can easily consist of 80% of type annotations! There are other type-safe languages that do it with much less verbosity. Haskell comes to mind. Even Facebook’s Flow seems much cleaner.
I think Typescript mainly appeals to developers migrating from Typed OO languages like Java or C# It is scary to go from C# to raw JavaScript because C# definitely stops you from doing stupid stuff. Raw Js lets you do stupid stuff but if you are an experienced Js developer you have burnt your fingers often enough that you know how not to do the stupid stuff. Experienced Js developers see Typescript as a step backwards because it limits what they can do. Inexperienced JavaScript developers see TypeScript like training wheels on your first bicycle. I don't think a discussion of the IDE is relevant since most IDEs just display the output of the Typescript compiler or a liniting tool like tslint anyway, so there is no real difference in the code generated.
As I see it, the huge advantage of TS over C++ is that if you don't feel this kind of complex type annotations don't pay the benefit of them you can still type: ``` function composeCtor(A, B) { return x =&gt; new B(new A()); } ``` And it'll still be valid. I do that when my code does fancy magic and the native library annotations do that too. While at the same time gives you the power to actually define the annotations for this complex snippets if you want to. I admire how this language allows you to choose the level of complexity and specification you feel necessary for each case.
Delete this, please
``` // Some Setup let currentlyDragging = null; // Let's keep track of what we're dragging on //drag functions const dragStart = event =&gt; { currentlyDragging = event.target; event.target.className += ' hold'; setTimeout(() =&gt; event.target.className = 'invisible', 0); } const dragEnd = event =&gt; { currentlyDragging = null; event.target.className = 'fill'; } const preventDefault = event =&gt; event.preventDefault(); const dragEnter = event =&gt; { event.preventDefault(); this.className += ' hovered'; } const dragLeave = event =&gt; { currentlyDragging = null; event.target.className = 'empty'; } const dragDrop = event =&gt; { event.target.className = 'empty'; event.target.append(currentlyDragging); } const fills = document.querySelectorAll('.fill'); for(const fill of fills) { fill.addEventListener('dragstart', dragStart); fill.addEventListener('dragend', dragEnd); } const empties = document.querySelectorAll('.empty'); for(const empty of empties) { empty.addEventListener('dragover', preventDefault); empty.addEventListener('dragenter', dragEnter); empty.addEventListener('dragleave', dragLeave); empty.addEventListener('drop', dragDrop); } ```
I know many experienced JS developers (5 years plus) that see benefits. Agree about people coming from Java and C# though!
Yeah because other UI tools had everything from the start... &amp;#x200B; Yeah it's young. But guess what - in terms of replacing react it can already do it. I still can't get past some weird stuff like using export to pass props but as an idea - yeah. I love it. &amp;#x200B; Difference is pretty obvious. Handling DOM by hand will usually have much better performance than React or something similar. On the other hand you will write much much faster using React, Angular etc. And usually writing fast is more important than fast code these days. &amp;#x200B; Svelte combines both words a little. You write faster than direct doom manipulation and it's working better than react app. &amp;#x200B; And since Svelte does not need to include itself in the bundle - output is much much smaller compared to React or Angular.
Typescript does not eliminate the need for defensive programming! You can (maybe) control what your own core is doing but you cannot protect yourself from the dreaded null if you use any data at all coming from outside. Typing is JS is useful for programmer experience - but it doesn’t protect you from anything at all
Yes, great point!
Whats the difference with js-data?
If anyone is interested in learning Svelte, [Maximilian Schwarzmüller just put out a course on Udemy](https://www.udemy.com/sveltejs-the-complete-guide/). He also has a [free intro to Svelte on his youtube channel](https://www.youtube.com/watch?v=LIfIRdRlD58) which is worth subscribing to.
What would you say the advantage of using this versus an established ORM or knex for more raw sql query building?
It's really promising. I'll be using it on my next personal project, first for fun then to gauge how it performs on a real projet. The part I like the most about Svelte: [https://svelte.dev/blog/write-less-code](https://svelte.dev/blog/write-less-code) .
Some place where the bar for competent, intelligent “engineering” is so low that merely writing code that is type-safe will suffice, you mean. I’ll pass 👍
Does the chat still work if the server is down since its p2p? Or if there is no connection to the Internet but the peers are connected via the same wifi?
I'm writing this as someone who's used JS since 2012. I'm not focused on specific OOP features ( I rarely use classes in JS/TS for example ) , but instead the quality of life stuff TypeScript gives. TypeScript takes care of the mundane, easy to forget things so I can be productive without breaking things. I need to keep less context in my head, and most of the time it makes sure I don't break things without realizing it. It's like having a little helper that I just need to do a little more upfront work to configure, which is mostly making interfaces which is rather simple. I really like things like being able to define a type that is a set of strings like this - https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/abs . It virtually eliminates typos, and also auto suggests, and removes the need for me to keep checking API docs for specific strings etc. Expanding this into a larger project helps make people more productive if used appropriately. Less time running you code and seeing "cannot call X of undefined" or other errors that a compiler will highlight immediately.
It amazes me that almost nobody else seems to use Typescript the same way that I do. I write JS code and stuff it through tsc, and it acts like a very smart linter. The IDE understands all sorts of stuff even though my code is still nearly plain JS. I only add some type information if I'm tracing down a bug, and Typescript does all sorts of extrapolation and tells me where the problem is. I'm not into the "program in Typescript like it was Java" mindset that I've seen in nearly every other Typescript codebase. Plain JS, some compiler smarts, a better IDE, that does me nicely.
unfortunately to set up the p2p connection we jeed a server..but once the connection is made then even if the server dies..messages will be relayed they just won't be backed up by the server.. that's all and if 2 clients are on the same wifi network, then yes they can turn of their internet but i haven't tried it yet.
Some of those VS Code features are because of Typescript, y'know.
The complexity of dealing with types is in your program regardless of whether you use JavaScript or TypeScript or something else. The difference between JS and TS is that TS gives you the tools and support to manage and control this complexity and basically not screw it up. For small simple JS programs the types used may be obvious enough that you don't need help. This approach doesn't scale as programs become bigger.
Don't worry about that person, they would make their own errors that you would instantly spot so it means nothing that they think your mistake was so simple. That wasn't even the point of your article, and yes using a state machine is a very good solution to a wide range of concurrency mistakes including teams of people working together.
It should be obvious in Javascript sub... it means we don't need to mess with a stack most of us probably don't know
[https://github.com/feedzai/brushable-histogram](https://github.com/feedzai/brushable-histogram)
This is why I prefer to write in ES6, but with TypeScript's JSDoc-like documentation for Javascript. (Details [here](https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript ). You would write it like this: /** * @template T * @template U * @template V * @param {new(T):U} F * @param {new(U):V} G * @return {new(T):V} */ function compose(F, G) { return x =&gt; new G(new F(x)); } It's more verbose, but 100% the same result, and way easier to read. Also the actual code is regular ES6, so no transpiling. You get all the neat intellisense in VSCode as well. The verbosity can be addressed by the fact you can add a comment at the end of each JSDoc line to signify in plain English what these variables do. You can also do `@template {Date} T` and lock down what kind of template you're expecting. That'll get type checked as well. The `new` syntax is TypeScript specific, but you can substitute that with `function` as in: `* @param {function(T):U} F`. I'm not sure there's something in JSDocs I can use to say it's the class of U, not an instance of U.
This is intentionally all wrong, right.
I find it a nice interesting idea, but for a niche of applications. ORM and services are there to limit and watch over what you can do in the server's db. Having an endpoint that allows for arbitrary queries to me means attack surface. However, I can see this being useful in desktop apps or small, self-contained ones, as well as remote admin apps (like a remote sql manager app, but that's a beast of its own kind).
Sorry, but I too have to say this: the competition is way too high.If you want to stand out give it a reactive api like RxDB but I doubt that its worth the effort
Awesome. Does it cost anything to post my code to the Google Play Store?
Even if every browser out there handles the multiple parse errors in the same way, it still isn't a valid HTML file. I think [Postel's law](https://en.wikipedia.org/wiki/Robustness_principle) applies. Since ZIP files are designed to be appendable to other files to allow for self-extracting archives, it seems to me you could make the document start as a valid HTML file, maybe with a comment explaining how the file is constructed and how to deal with it. It's a pity there isn't a marker for "end of document" in the HTML 5 standard, like in Perl and Ruby. (You can make a valid Ruby script that's also a valid man page.)
To be fair, he's quoting that interesting man who writes mediumarticles such as, "mocks are a code smell."
Yeah I think it's like $100 to stop spammers
1 &amp; 2 are both autocompletion. Yes, typescript is going to be better at autocomplete because there is a lot ore detail in the code. That said, some people dont use autocompletion for coding, so they just dont see that benefit. 3 This is false; you absolutely must still write code defensively and you must still write unit tests. As soon as you think you dont have to, you become a bug factory. 4 Renaming things is not refactoring; The contract between each module of code should be as simple and static as possible. When you find yourself using deep and broad interfaces with an abundance of types, no browser renaming feature can solve the problem, it can only round off the edges. If you use less OOP and more modular code then you can restructure things more easily and far less often.
But can you refresh the page with a keyboard shortcut while in a debugger?
Honestly why even bother with a link like this that goes to github with 5 repositories - couldnt you at least submit a readme link with some descriptions.....
Svelte combines both worlds without the tooling those worlds have, or the immense amount of preexisting components. I have a gut feeling the more components you have, the larger your bundle will grow in Svelte as compared to a lib with a runtime. For TODO apps, though, sure.
Almost all non-trivial modern Javascript applications will have a compile step. Why is not having one an advantage?
Thank you for the suggestion! I didn't think about prepending the "bootstrap" HTML content to the zip file. However, it looks like it may make the zip harder to read: "although some tools, for example gzip, will not process archive files that do not start with a file entry at offset zero" (cf .[https://en.wikipedia.org/wiki/Zip\_(file\_format)#Combination\_with\_other\_file\_formats](https://en.wikipedia.org/wiki/Zip_(file_format)#Combination_with_other_file_formats)).
Ok, sorry.
If you want to see some types that make your head hurt check out this: https://github.com/ClickerMonkey/vuex-typescript-interface/blob/master/index.d.ts Some of the helper types were made by other people, but I've been working on this for around 12 hours now just to provide better typing for vuex. I have some WIP types not committed yet for this project that make it even crazier, but as a user it makes a JS library that is not TS friendly entirely type safe.
This is such an under-appreciated fact. Robust tooling matters more for large projects. And most large web development projects are performed by **teams**, not individuals. Documentation is crucial for most teams, at least in the long run, and typescript provides not only self-documentation of code, but continuous feedback from autocomplete, and type enforcement at compile time. It totally wipes out about 95% of the friction of writing documentation, looking it up all the time, and mentally asking yourself whether it’s actually correct all the time. Talk about clearing out mental clutter! And as you said, that lack of mental overhead makes onboarding new team members so much easier.
`Experienced Js developers see Typescript as a step backwards because it limits what they can do. Inexperienced JavaScript developers see TypeScript like training wheels on your first bicycle.` This is really ridiculous over-generalization. I would argue that _really_ experienced JS devs, ones who have maintained large projects with lots of devs contributing code, can see past surface-level generalizations like “it limits what you can do,” and take the time to understand that there are actually very valid reasons why what you are calling “limitations” can actually help make a more maintainable codebase. Every experienced JS dev I have ever met who gave TS a proper chance _beyond the initial learning curve_ has loved it. But I know, Eric Eliot says otherwise, so surely all of the thousands/millions of devs using it are wrong. Also, FWIW, TypeScript doesn’t limit _anything_. If you run into a situation where you really can’t deal with typing something, either just don’t type it or explicitly type it as `any`, and you’re right back to plain old JS.
Live version here: https://svelte-snake.netlify.com/
I had to figure this crap out myself over the last two weeks lol. It’s pretty freaking slick though, I have to say. Once you get past the fact that there’s no internal router or any out there that work. I made my own. :3
To be fair, you really should have guarded inputs to your code no matter what, but that’s just standard development knowledge anyway. Internally ts makes it a lot easier to eliminate redundant checks in internal functionality though. If someone is poking around your internals without being type safe, honestly, they deserve every error coming their way. You can’t protect against every case anyway.
You mind sharing
I assume this is an inclusive sub? Does it matter is the tool is written in Javascript, ruby, go, or assembly if it gets the job done? I'm asking what benefits I get should take my preexisting source files and run them through a different tool. Is it faster? Does it produce different html? Does it create a react component for each page? Aside from the ability to hack the code in a familiar language, what are the advantages or disadvantages of one over the other?
You can be the most experienced developer in the world and not be told that Tim from the next team over changed the method signature subtly blowing your shit up in production in my personally favorite way, intermittent data corruption. Something that typescript can help prevent.
Sometimes it feels like tt doesn't recognize keys when you do it really quickly like, down and then right to turn your snake by 180 deg
I like that article actually. But saying that 80% of bugs are specification related is like... I don't have a nice word for that. It's really dumb.
What made you choose svelte over something like react or vue with their own routers which you needed?
forgive my ignorance, but with for example TweenMax, isn't the "harsh transition" problem just a matter of picking a different easing equation?
Handling Dom by hand is like writing assembly. If you know how to do exactly what you need then you probably can do it slightly faster for now but the second it starts getting a little more complicated - the optimisations worked out from a very fast virtual Dom to work out what the minimal Dom commands needed are - would probably win in most cases.
\- Do the workshops for them \- Show that writing tests is not a scary \- Show a good examples (in your app) and don't force them to write tests, teach them that is a must have nowadays \- Determine the critical places that you need to test \- Don't try to do 100% coverage \- Maybe e2e tests would be better (easier) for start ?
Yeah, could be how I'm doing the detection to make sure you can't move back in the direction you just moved from. I'll see if I can replicate.
Good work u/Likalo That's really awesome, I am going to use it in my next project to create a tour guide.
Virtual dom has a tradeoff so it always depends. Also it's worth comparing real life scenarios and not useless benchmarks. I'm quite sure than just by having 6x less JavaScript overall saves me a lot of time. Because I managed to implement one of my apps in svelte that was already done in React and that's the difference in output size. It is faster judging by the chrome profiler. And it was way easier to do. For example I didn't need styled components library. Each component have isolated styles. Meaning you just make a component with local styles and that style is unique to that component. Overall my app is smaller thanks to that. Not much boiler plate. Right now the biggest minus I have not counting weird stuff you need to get used to (like freaking props using export) is poor Typescript support. Me personally I suspect that in most cases, virtual dom, diffing, optimizations and applying changes creates enough overheat that it's still slower. Also most people talk about those things but can't give any specifics. Are you sure svelte also don't perform optimizations in their own way?
Great, workshops is a great idea!!! I like those suggestions thanks !!! I'll think about e2e as well
For sure - I’m very much not saying that typing is wrong - just that holding the mistaken belief it saves you from being defensive is not helpful. That said I’ve watched a team waste absolutely days and weeks on end to making Flow happy - I’m yet to see any tangible improvement in the work, it’s velocity or it’s likelihood to produce bugs!
It doesn't make sense in declaring same event more than once, on (document.body). What is your use-case? Can you explain a bit what you're trying to accomplish by this?
I think it's unnecessary.
I found functional programming style to suffer most when using typescript as well.
that's why code reviews exist, that's why tests exist, that's why isolated codebases exist.
I'd love to see some examples, do you have a project you could share on github
Incorrect. What you quoted is a problem that only an inexperienced dev / team will ever experience, because experienced JS devs have high test coverage and nothing get commited unless it passes the tests. That's what Typescript protects against, people like yourself who think they are experienced when they are not.
This is really a good idea. You must start writing tests for your application code. It will save you a lot of time and headache.I my opinion you should:- encourage your team to start thinking and considering writing tests \- if they don't know how to write tests, tell them to practice it on a simple (todo-like, or something similar) app. \- give them some time to follow some courses on Udemy or Linda.- don't expect that they will start writing tests by tomorrow. It will take a little time for them to get use to it and write better tests.
This related video is an informative and enjoyable watch https://www.youtube.com/watch?v=AdNJ3fydeao &gt;Modern JavaScript frameworks are all about reactivity. Change your application's state, and the view updates automatically. But there's a catch — tracking state changes at runtime adds overhead that eats into your bundle size and performance budgets. In this talk, we'll discover an alternative approach: moving reactivity into the language itself. Your apps have never been smaller or faster than they're about to become.
I feel I can share this sentiment, having autocomplete for libraries I use feels amazing. Whether they use jsdocs or typescript, vscode can use either to do suggestions.
Oh my sweet summer child, your assumption that unit and integration tests have 100% coverage, and that everyone involved in the codebase has complete knowledge of the entire system to know that some distant usage of a function might be affected, is very telling.
what benefit you got that made you feel this is the best way. I'm truly trying to love ts. But be objective.
yes, which is great. It's basically 'free' upgrade. benefits of type without typescript. so my question is i guess, is it marginally better if you are already on vscode.
You *do* work in our industry right? You would know that statement is patently false that only inexperienced dev teams don’t have tests. I’d argue there are more incomplete coverage than anything else.
would you say interface benefits can also derived with vscode/jsdocs combo?
so it's just a matter of personal taste?
can you share an example of code.
this is true, i acknowledged this. if parameter is complex object then default autcomplete of vscode doesn't really help.
VSCode's JavaScript intelligence is internally driven by TypeScript's language service. So when you see tooltips, code completion, etc, that's the same language service under the hood. [https://code.visualstudio.com/docs/nodejs/working-with-javascript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) Almost all TS stuff can be described in an alternate JS-only syntax that uses JS comments. It requires more repetition and characters than the TS syntax, since you're forced to use comments, but it works and you can sprinkle it into your JS wherever you want. This is not a direct answer to your question, but I think it's helpful information.
I dunno, we eventually realized it was essential enough that even though some of the devs (myself included) didn't really want to have to write tests, we understood that much like code reviews, they should be treated as a pre-req for approving code for release. In the long run, you get more stuff done when you spend less time testing yourself/going back and forth with QAs/worst, addressing customer-reported regressions, instead spending that time writing a mostly one-and-done test that can then save you headaches in the future. Unit tests are fairly easy. Functional tests are daunting, I can't blame any dev for putting those off. To be honest, if you see the value in it most, then you'll simply have to lead by example. What you can then do is that after you understand it, create any and all resources to help the rest of your team. To help with functional testing, our de facto tooling dev wrote a helper class that abstracts away our adopted framework (in our case, Intern with leadfoot via Selenium) to make a bunch of chainable methods that describe user actions in easy terms like .leftClick(selector) .rightClick(selector) .search(query) etc. It certainly made writing tests much more friendly such that our new hires in another location (i.e. we weren't able to directly help them, just show them our own internal documentation) were able to catch on relatively quickly.
awwww yeah
Why would I use this instead of e.g. Loopback?
Ive been meaning to use Svelte for a prototype for nearly 2 years. Thanks for the reminder!
It's just plain JS, you don't have to set it up. You just use --allowJS and run it through tsc, and then pretend Typescript doesn't exist at all. All that happens is that your IDE works better, and if you're very sure that something is a string, you add in a :string for what you're debugging, and then boom, your IDE says "this bit of code thinks the variable is a number". And that's as far as I go.
Well you're in luck, the recent upgrade to svelte 3 brought along a lot of cool things! https://svelte.dev/blog/svelte-3-rethinking-reactivity
Your team needs to understand the value of tests before they start spending their valuable time on them. It isn't enough for them to know how (thought they'll obviously need that too). For your team, where interdependent units are causing friction, I'd focus first on how tests expose this interdependence. They must start this process understanding that neither the tests nor the testing framework are the problem. I've seen and been a part of several teams that abandon testing while blaming the test framework for its lack of flexibility rather than be self-reflective on the potential problems in their own designs.
As an Australian, this "sweet summer child" fake niceness is where you Americans started fucking up. Say what you think instead of all this euphemism shitcunt bollocks.
Is your spreadsheet [published](https://support.google.com/docs/answer/183965?co=GENIE.Platform%3DDesktop&amp;hl=en)? After publishing a Google sheet of my own, making it retrievable as a **CSV**, I am able to use the following URL to fetch the specified range: `https://docs.google.com/spreadsheets/d/e/[my-spreadsheet-id]/pub?gid=0&amp;single=true&amp;output=csv&amp;range=A1` The code you quoted works just fine with the URL above: `function loadData() {` `var url = "https://docs.google.com/spreadsheets/d/e/[my-spreadsheet-id]/pub?gid=0&amp;single=true&amp;output=csv&amp;range=A1";` `xmlhttp = new XMLHttpRequest();` `xmlhttp.onreadystatechange = function () {` `if (xmlhttp.readyState == 4) {` `document.getElementById("display").innerHTML = xmlhttp.responseText;` `//alert(xmlhttp.responseText);` `}` `};` [`xmlhttp.open`](https://xmlhttp.open)`("GET", url, true);` `xmlhttp.send(null);` `}`
A `return` never logs anything, it just returns a value. I've not used FreeCodeCamp, but if they have their own web-based editor, then I suspect they just log stuff behind the scenes for learning purposes.
Well JS is coming the jQuery of all of languages.
It's not a big deal. That's kind of the point of having an API like `addEventListener` rather than having just a single `onclick` as it allows multiple listeners to be attached to the same event/event target. Depending on what you're trying to do, though, it could make sense to have a higher-level component handle the click once and delegate as needed if each of those components are doing something similar. Depends on circumstance. One thing, however, since you are attaching listeners to the body, you'll want to make sure your components also _remove_ those listeners when they're no longer needed. Otherwise you could have a memory leak.
1. You can invoke a function on a variable, not a value. 2. I guess that empty array is is zero so 0+3 is 3. Im not sure, never checked things like this.
`3.toString()` doesn't work because the period after a number is being read as a decimal separator. If you want to do a `.toString()` on a number, just wrap the number in parenthesis, like this: `(3).toString()` and it'll work. When assigning a number to a variable, the decimal point is no longer an issue, which is why `x.toString()` works fine.
No, no matter what easing equation you pick, if you change the value you are getting to it will make a sharp turn. This is because Tweenmax is not making sure that the new equation starts with the same speed/slope as the current one, it'll just reset that to 0 and start a new transition.
1) The dot `.` operator in JavaScript has a couple of different meanings. One is for accessing properties and methods - methods like `toString()`. Another is to specify decimal values in numbers. When dealing with numbers, its assumed dots are used for decimals. So when you write `3.toString()` JavaScript tries to interpret `toString()` as a decimal value and causes an error. When you assign it to a variable first, JavaScript will know to use the property access version since decimals only apply to number literals. Other than using a variable, you can also use parens, `(3).toString()` or even two dots, `3..toString()`. 2) JavaScript also has multiple meanings for plus `+`. One is to add numbers, and the other is to concatenate strings. Additionally, when you try to add two values that aren't either both numbers or both strings, JavaScript will try to make some conversions to make them both numbers or both strings. Though, usually, it will favor strings over numbers. For example adding `"1" + 2` is actually `"12"` (string concat) rather than adding the numeric versions of the values to make 3. Something similar is happening with `[] + 3`. `[]` isn't a number so it gets converted to a string representation of itself which is `""`. Then, when this is added to `3`, a string concatenation operation is used where you effectively get `"" + "3"` which is `"3"`
1dt of all you should ask yourself "What is a benefit of useing this over other solutions? "
Code reviews before allowing merges, reviews must include functional+performance tests and results.
Here's the code, it can be a bit smaller by removing the newlines at expense of readability. &lt;canvas id="c"&gt;&lt;script&gt; x=c.getContext('2d') T=-1 setInterval(U=_=&gt;{ c.width=99 onclick=_=&gt;V=1 X=99-T%128 i=T++&gt;&gt;7 y=18+i**2%25 T&amp;&amp;X*X&gt;144|(Y-y)**2&lt;49?Y-=V-=.03:T=Y=V=0 for(j=2;j--;x.fillRect(X+3,7+y-120*j,19,99)) x.fillText(i,9,Y,9) },16) &lt;/script&gt;
I find it speeds up my development significantly. Idk where you’re getting this next level autocomplete but it’s very nice to me to be able to click “.” after a variable and get a list of possible properties I can set, and ensure that all parameters are the exact type I need. I use typescript to play screeps which is very type heavy and it’s not always clear what accepts what parameters in vanilla javascript. Another nice thing is it tells you if something can be undefined so you remember to handle that case if it is.
Imo it seems very easy to use, which im a fan of :)
I find that without proper typing, VSCode's suggestions/auto-complete is very hit or miss to the point where it is not reliable. It tends to handle objects/functions/variables completely built in the same scope mostly well, but then starts to break down beyond that. The suggestions become more of a guess based on their heuristics (like name recently typed, name seen in same file, etc) which are good for what they are, but the unsureness that it has is obvious. This is why the suggestions also include things that are totally irrelevant. With proper typing (no anys) it can suggest confidently because it know exactly what a thing of that type is supposed to have. This is also why Go to Definition, Find All References, and renaming become reliable. Without typing, these barely work if the target is from another file.
This looks amazing. Will definitely give it a try. How far is this from release?
Funny thing is that OP praises VSCode for it's auto complete, but it is doing exactly that with his code. It's autocompletion is based on typescript compiler attempts to infer types as much as it can from untyped js...
why not put a td:lr on this reddit post seems like you just pormoting your medium article
Thx you all for your comments, at this point I wouldn't compare Chego to other established libs like knex. This is still fresh package, For now it supports only MySQL and firebase. Difference between this and knex is that you can use it with firebase and in future with other DBs. Background story for that lib is that I had to create Backend for mobile app @ firebase. My first impression about FB wasn't so good - API/documentation etc. and after some time I've took some parts of my project and wrapped with readable MySQL API. For future projects, for others. In my opinion Knex isn't so intuitive and most of people I know uses its raw options. This lib isn't for hardcore, stricted DB structure apps. I think that if you know that you gonna use MySQL, than you should use pure MySQL client. Besides that was/ still is great exercise, maybe some1 would like to implement other DBs for that. Again thank you all.
I remember this when using Chrome DevTools for the first time. Every time I typed any statement like "let num = 5", it displayed "undefined" and it made me a little sad...
Thank you, Im not sure if you can use knex with firebase. Firebase API isn't intuitive, at least for me and I wanted to use something familiar like mysql syntax.
I think it's http://wiki.c2.com/?BlubParadox
What if I want to learn to learn how to learn Javascript?
I want to expand the answer since you seem to be newer to programming in general. Outputting things with console.log in JS or echo in PHP are generally for human debugging, and not used in the final program. Returning the value is, again generally speaking, the only thing the program will care about and does not output anything itself. So for example: function testfunction(){ a = 1+2 console.log(a) return a } b = testfunction() In this example the function will both output 3 to the console and set b equal to 3. If you remove the return statement, it will still output 3, but b will be undefined. If you remove the console log, it won't output anything, but b will still be set to 3.
You need examples? I have been battling with webpack for several days at work because we have multiple modules that must be bundled at compile time and work seamlessly in a SPA. We use ReactJS, Babel and ExtReact (UI framework). It is A PAIN to configure. It is not, usually, but trust me, sometimes I miss old, untranspiled code.
Um, this is just an alternative way to write SQL queries for a database you have access to. I think you misunderstood it.
Wow that really makes things more clear, I appreciate it. And yes you were right I am new to programming! Thank you!!
Some advantages of TS from personal experience: 1. Documentation. Knowing the return type of a function makes it easier to treat it like a black box. Also, types are verifiably correct whereas something like JSDoc must be verified manually. It’s also really nice for complex objects, eg a settings object or props passed to a React component. 2. Correctness. My guesstimate is that 90% of bugs in JS code are type errors. Most often these are caught so early we may not even think of them as bugs - they can be considered part of the development cycle. However, the actual crash may show up several steps away from the actual error (eg you misspelled a property name and accidentally returned `undefined`, which got passed to another function, and so on) which means you usually need to do some detective work to find the root cause. Typing moves many of these problems to compile time, which means they can be discovered and fixed much faster. I posit that for any non-trivial project, adding types is a net win for development speed. You invest a bit more time up front, but you make it back and then some as the code base starts growing.
Curiosity tbh. I’m far enough down the pipe where I can actually make a useful app. So I think I’ll stick with it for a little. I wouldn’t use it for anything larger than say 2-300 users ever.
Sharing what I learned? Or the router? I’m planning on making a module. I’ll share it when I get around to it.
cool thanks for explaining
We expect to reach the 1.0 version in around 1 month, so we are not that far :)
Then you use a few libraries where somebody else bothered to do the declarations, and now your code has that much more information. Even if you're writing library code, there's going to be someone who contributes some TS definition files, then all sorts of shit gets cleaned up. Just program in JS, don't worry about Typescript. Just use it anyway, that's the brilliant part about it.
thanks love this approach
Can’t help but read the name as “Front-Titty”
Hi, js-data is cool but I wanted to have/use something more intuitive. Besides that, with Chego you won't have to write functions to filter, order, join... your data.
&gt; Your team needs to understand the value of tests before they start spending their valuable time on them. Agreed. Setup a few simple tests that show how a simple change can break an API contract, for example.
Ah, sorry, I am too centered on the frontend, and thought it was meant to be used in the browser. Forgot that NodeJs exists. If it is meant to be used in the server only... Sail to the moon! :)
i stopped reading at typescript
I like your spirit. I was like you. My opinion: You need a guide, a leader who isn't a learner, and a team culture oriented towards technical excellence. The guide can be someone external or internal, and the team culture can be already in place, or brought by that leader. Or try to deal with unrecognized authority/leadership issues, test quality/maintenance issues, and motivation and involvement issues. I burned all my passion and energy into preparing and animating workshops and talks, building and configuring tools. Worked till 2AM. Worked the week-end. Tried to show by example. From my effort a very nice community of passionate coworkers was born, and I am very glad it happened. But this community (and myself) started building resentment for the organization culture because we were **learners** and without us, **no one** would carry any will for doing better software. So I left the organization for one with the right technical leaders, infrastructure, and culture for me. Best decision ever in my life. I can finally learn how to do things right from people for who that's freaking common sense. The experience of trying was really interesting though. But gotta do that once, no more. Most valuable lesson for me was the following : Feeling a learner and being seen as a guide is a red flag.
&gt;Maybe e2e tests would be better (easier) for start ? Not sure about this one, through my experience e2e tests are the most complicated ones
Learning How to Learn How to Learn Javascript for Dummies: A Medium Article
Or `3..toString()` which is among the ugliest things in the language lol
The best kind.
Awesome
The funny part is the web tried typescript already. Its called ES4 and it was a failure.
I love Typescript, but this is terrible. Downvoted.
Any demos?
&gt; teach them that is a must have nowadays Not really. It's a matter of cost and benefit. Some long term projects will probably benefit from tests but it's certainly not a must. There are many cases where time to market was the deciding factor in the success of a project or product and not pristine code. For example [MongoDB vs RethinkDB](https://www.defmacro.org/2017/01/18/why-rethinkdb-failed.html). Mongo was a shitty database, but it caught on, specially in the JS community that (wrongly) cringes at SQL. Another factor is that it's completely useless to spend so much time writing tests when you don't even know if the solution is valid. And you only know that once you have used it for a sufficient amount of time. I'm not saying tests are useless, I'm saying that spending all that money in writing tests should be justified.
Have a look at documentation. It has a link to codesandbox.
You’re missing out then.
&gt; it means we don't need to mess with a stack most of us probably don't know
If you are really interested in this stuff the free book series "You Don't Know JS" is great for this
I could give you tips on making one I'd you want, but I'm not sure if any exist atm
&gt; Correctness. My guesstimate is that 90% of bugs in JS code are type errors. Type errors have been measured at ~2% of all errors in a study of open source project bug trackers.
Why? :) Frameworks are great and you have to only write selectors and actions like click here, fill input here, click submit etc. The most hard thing is connect it in CI at the end.
It depends on experience and project etc, cause for our team writing tests saving money, cause application is lack of bugs and we faster deliver products. If project is almost ready and doesn't have tests then I think e2e will be faster to implement and will help with providing new functionalities without regression.
Its a trade off. Time spent vs extra bugs found. The trick is "how much" of both. In most studies "time spent dealing with types" generally exceeds "time saved by not having to deal with typing bugs". (when pitting groups of programmers with static vs dynamic languages, dynamic langs generally win the quality/time race)
Im more of a Back-Boob type
Hi /u/Jimbroslice, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
We also have multiple large projects with Styled Components, and the performance was terrible in VSCode. They released a new version of VSCode yesterday, but this did not include the TS update. I decided to update my VSCode local environment to use TS 3.5.0@rc (we don't write TS, just JS) to see how it improved the editor. It's night and day different. IntelliSense is useful again!
Exactly, it depends. Which means it's not "a must".
Yes please, i figured it would be a common use case but i'm all in for making one myself. Where should i start?
Have you looked into implementing a PHP-based SSR solution, using something like [this](https://github.com/phpv8/v8js), or [this](https://github.com/Limenius/ReactRenderer), or [this](https://github.com/reactjs/react-php-v8js)? Right now this is the only thing holding me back from trying out a React-based solution for WordPress. I subcontract for a company that makes WordPress sites — I'm handed design files, content/assets, and credentials for the client's LAMP setup (usually on a cheap shared hosting plan), and beyond that I have wide latitude for implementing the design however I see fit, but needing a Node.js server for SSR is a dealbreaker.
Use some brain dead simple library like Jest. It will ease the pain ALOT to getting started. Also I would show them the benefits and the huge time saving they will have if they debug later.
Wow
That’s what I meant when I wrote &gt; Most often these are caught so early we may not even think of them as bugs - they can be considered part of the development cycle. Usually these bugs are discovered before they’re merged to master.
See also: Babel
create a funny weekly podcast and send them.
I'm 100% on board with a lot of Svelte's idioms, except for the weird assortment of special case syntax for control flow / dynamic html - # for beginning tags, : for middle tags, / for end tags, @ for other(???) tags, two distinct meanings for $ in the context of `&lt;script&gt;` and in `&lt;html&gt;`... it just seems like a messy mishmash of characters, weirder still considering Svelte *also* uses component directives (for event handling as an example). I would personally prefer an all directive approach, like in Vue for example. That being said, that's basically the only gripe I have, and it's a fairly minor one.
Don't teach him that! 😭
It seems a bit of a hodge podge of pre-historic libraries - a bit of jquery, a bit of AngularJS, a bit of dojo (!) .... the color changing stuff is all Canvas, it uses http://html2canvas.hertzen.com/ to take a snapshot of what's on the screen (looks like coming from houzz) and then add the magic All painfully put together many years ago
That's impressive
The number one benefit in my mind is, probably unsurprisingly, catching type-related bugs before they can even happen. Say your API used to return a string for some value. The spec changes and now that value could be a string or, in some rare circumstances, a number. Ten functions deep in your code you `.trim()` the value. With JavaScript you might find that error in production. In TypeScript you change an interface and it immediately screams at you that a potential bug is there. Second biggest advantage is the ease and safety it brings in refactoring your code.
Amazing.
I love TypeScript and use it for all my web apps, but I can never find myself agreeing with the apparently common assertion that it reduces bugs. Trust me, dude, I've managed to develop apps with **plenty** of bugs using TypeScript. Maybe it's a unique talent I have, but strongly-typed != bug-free for me.
It sounds to me like he has multiple components each requiring the a listener on the same event
RemindMe! 1 month
I will be messaging you on [**2019-06-17 21:02:01 UTC**](http://www.wolframalpha.com/input/?i=2019-06-17 21:02:01 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/bpssm2/introducing_frontity_framework_beta_a_framework/enyamsp/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/bpssm2/introducing_frontity_framework_beta_a_framework/enyamsp/]%0A%0ARemindMe! 1 month) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! enyay5i) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
damn must be rough, i'd imagine benefits only show up when you have large codebase and it barely changes. But if you have constantly changing codebase lot of work is going down the drain.
im using vscode ide that uses typescript underneath on js files, do you use vscode?
RemindMe! 1 month
r/Ihadastroke Yes? No?
RemindMe! 1 month
Remindme! 1 month
I just started using styled-components and found it to be really slow in VSCode as well, really happy about this update!
1. Ensure test infrastructure setup and easy to use. 2. Make a "how-to-unit-test-in-our-proj-for-dummiez" wiki page. 3. Ensure code reviews are mandatory. 4. Don't approve code reviews until tests are implemented. 5. Don't close stories until tests are implemented. It's all about process, as shitty as that is. Humans naturally fear, and dread, the elusive unit test for both its seeming time wastingness, and often confusion. But when enforced, they are always written.
yup vscode. idk what you mean by uses typescript underneath on js files
Some points that could to encourage your team to write tests: \- As you said, fixing one bug breaks some code else where, imaging having something that notifies this breakage. This is nothing but having a test for that code. \- A lot of time is spent in fixing bugs that were unintentionally created while fixing some other parts of code. Having tests could avoid this and save time. \- Try to build a graph based on number of bugs fixed vs created (based on tickets created). This visual representation could be huge motivator. \- Lead by example. show them how productive you are by writing tests (have some examples from day to to day work)
 if (anxiousDeveloper.focus &lt; seniorDeveloper.focus) { anxiousDeveloper.punt(); return null; }
No doubt it’s a pain. I’ve been there many times. But it’s also a reality of modern web development; you’re going to have a compile step regardless of Typescript usage.
Saw that you posted something a month ago about "moved too quickly into a senior role" but that post got removed. What happened?
Hi /u/anxiousDeveloper1, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jorge-peay, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/schubidubiduhu2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ismolk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Very nice..will make use of this
Not sure. I don't think I deleted it! Maybe a mod did? Still true, but I think I have some stuff to figure out before I take my next role. I'm going to keep pushing to learn as much as I can. Otherwise, it's way too easy to let this get me down. I'll probably search for a mid level role in a place that values teaching their employees over a more slash and burn method.
Could also post to r/TinyCode, or for some possible tips to make it even shorter, r/CodeGolf (and maybe http://codegolf.stackexchange.com).
basically vscode/tyepscript does its best to lint js files with ts compiler and try to guess types automatically and see if something is not right.
Thanks lol
Hi /u/KristianWEB, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NikitaDyagilev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kudos4datboi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks, I will use that instead!
The market's always hot for strong developers. Good luck with everything!
That, my friend, is undeniable.
 RemindMe! 1 month
Where I work we use .Net, but use a lot of react. Does anyone know if this is something that we should look into?
I think it's about value. If Devs don't see the value of tests, they won't want to write it. Cause it's just a bottleneck that slows down coding the feature. Try show value, what are good areas that should be tested and why? Such as business logic areas that are used by many or a function that's so hard to read how can you know what the I/O results are without tests. Try make it fun, make it easy, make it valuable
No shit enums can be approximated with plain Js, typescript compiles to that. Though ts const enums can give you the advantages of enums but without any runtime objects being created (it inlines the values). And if you believe generics are only useful in narrow scopes, you're not writing generic code. Write more things generic to avoid duplication and they're a lifesaver.
Does that competition-ish idea include the static-with-inference crowd (Haskell, Java var, etc)?
Thanks! It's also on dwitter! I posted an early version there a while ago. With help from some people on there we have improved it greatly and I think any shorter will require too big compromises. Here's a link to the hd version on Dwitter: https://www.dwitter.net/d/13937
Oh man, what a lesson was your story here. I will try to teach by example, to invest some time in workshops and producing the content. and identify If my team would really have the mate spirit and go in the same direction then I'll dedicate more time. I recently did a workshop introducing angular to some company folks and also People from outside I really enjoyed the experience.
I'm seeing all these great replies, thank you very much those are all awesome suggestions!!!! I'm glad I created this post
How do you start learning something like this?
Where I'm at right now tests are an absolute must, you can't even commit to a branch until certain code coverage is there and all tests are passing. Of course, some people find a way around those hooks, so coverage and tests are also run in our CI/CD pipelines so you can't even get it to build in DEV without it. I hated writing unit tests and once they became an absolute necessity for me to do my work, I just caved and ended up doing it. Workshops help, but ultimately just hard-wiring it into the release process alone gets people in the right mindset: do it, or you can't do your job. If someone throws a fit and is unwilling to learn, should they really be a part of your dev team?
Ahh. I’d rather have exact control over what type things are than rely on that. But i much prefer statically typed languages for large projects. Less mental load
Yeah that feeling of being part of a community with exchanges and learning and perspectives and sharing and constructivity and growing together is amazing in my opinion. I hope that you can find not only [individuals and interactions](https://agilemanifesto.org/) , but also [a community of professionals] (http://manifesto.softwarecraftsmanship.org/) and not fall into the [superman syndrome] (https://www.urbandictionary.com/define.php?term=Superman%20syndrome&amp;amp=true&amp;defid=3912757) that I fell into :)
Nice api. If you made adapters this for a bunch of DBs, that'd be dope, and it would be a nice foundation for a lite ORM.
First you need to learn the basics of javascript the normal way you would program and some software engineering skills. Once you have that there are a few great resources online for this kind of creative code golfing. My two favorite are... * [Dwitter](https://www.dwitter.net/) - Javascript demos in 140 characters * [JS1k](https://js1k.com/) - 1k javascript code golfing compititon If you already know javascript my advice would be to find a something on dwitter or js1k that you like and learn from how they did it, then modify it. I also wrote a post on my blog about my experience making 7 1k demos in 1 weeks for JS1k. This goes into a little more detail about some of the tricks I did to "minify" the code. * http://frankforce.com/?p=5959
I've been playing with it for the past month or so. I've liked what I've been seeing enough to start integrating it into our React app. Right now I'm just using it for some minor components, but it's been a real breath of fresh air!
I had this superman feeling sometimes because I want to make things as perfect as possible or as close as the beautiful way I imagine then as possible haha, now I am trying to make things more balanced between spending my time with tech stuff I love and everything else. This is my actual challenge and it's tough I know that at least one of the guys in my team is excited for TDD for example so I hope we can both spread the seed and get good results, leta see
Holy shit, I literally cannot even read the React version. Is this an example of this "hooks" thing I keep hearing about? I learned React a couple years ago but still haven't used it for anything big. If this is the "new and improved" React, I'm inclined to just... stay away.
You seem to be the kind of person who would enjoy the books clean code and the pragmatic programmer.
Haha I am actually reading the clean code book and it's amazing!!! You got it
Give a try to the pragmatic programmer buddy. I bet you'll love it even more.
The set up to get a proper e2e test going and done well is just a lot more work, especially if you're trying to get people who do t do automated testing into automated testing... I'd start with simple unit testing first
I'll definitely do thanks!!!
Not really. Even without hooks the code would be almost as big: import React from 'react'; export default class extends React.Component { state = { a: 1, b: 2 } handleChangeA(event) { this.setState({a: +event.target.value}); } handleChangeB(event) { this.setState({b: +event.target.value}); } return ( &lt;div&gt; &lt;input type="number" value={a} onChange={() =&gt; this.handleChangeA()}/&gt; &lt;input type="number" value={b} onChange={() =&gt; this.handleChangeB()}/&gt; &lt;p&gt;{a} + {b} = {a + b}&lt;/p&gt; &lt;/div&gt; ); };
[removed]
Hi /u/iaan, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Haha I can tell you that you are not the first one :P
Share this link: https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80?utm_source=share&amp;utm_medium=ios_app
This is a framework 100% focused on WordPress, if you use .NET for the backend it won't fit your needs.
What does SSR stand for?! I can feel the downvotes a comin’
Server side rendering. I trust you to research from there!
Hello, don't mean to be rude but this is in violation of rule 3. Please post your question over at [r/LearnJavascript](https://www.reddit.com/r/LearnJavascript). Also, when you post there, be sure to detail exactly what the problem you're having is and what you need help with because there isn't enough information in this post for anyone to help you as it stands.
If writing bugs is the goal i agree i dont disagree. 😄 Second week into it, may be too early to comment. It already caught some critical type issues for us. Slowly migrating over.
How is this any better than any of the dozen other libs out there?
Interesting. What about ACF?
Server-side rendering. It's explained a bit at the link in OP, but the main advantages are faster initial load time and (potentially) better SEO, since you don't need to execute the JavaScript in order to have the page populated with your markup and content.
I think it was the `+` that was throwing me off, but looking at it again I'm realizing it was just a type assertion
Maybe it’s supported?
FP is a growing paradigm in the JS community. The community accepted it, too. See the upvotes. I suggest revisiting this rule.
Asking the real questions
I'm more of a Back-Ass man
What's described is not a race condition.
That would be a big improvement.
Maybe not in the sense that people are used to, but if we're going to play the semantics game, &gt; A race condition or race hazard is the behavior of an electronics, software, or other system where the system's substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable. The bug described appears when requests are sequenced in a particular way. I'd say that fits the description pretty well! [https://en.wikipedia.org/wiki/Race\_condition](https://en.wikipedia.org/wiki/Race_condition)
Your team needs to understand the usefulness of writing tests for your code. You may need to show them some examples.
optimizations like that are reason of coupled code, before you know it it's too late for generic function save the day. but i guess whatever make you efficient. you have to trade cons for other cons.
[removed]
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
it seems you're reinventing pjax or turbolinks ;-)
Well wrt the study was from the 80s, and as far as I know the haskell team is still working on on theri submission ;) You can find several on google. This is also a good summary of all of them: https://vimeo.com/74354480 I would like to see a new study with the most modern languages. Python vs JS vs Typescript vs GO vs Scala perhaps.... but I dont think inferred types are going to change anything.
it seems you're reinventing pjax or turbolinks ;-)
RemindMe! 1 Month
RemindMe! 1 Month
Not sure if it will meet your needs but Cypress really helped me get fellow developers on board for testing. There are some pitfalls with going with Cypress, depending on your app it may or may not meet the spec. Limited cross browser support and unable to do some complicated interactions like switching tabs or to a pop up. Iframe support is lacking. Of you just have a crud app though it may be the best best and easiest tool to use imo.
It's not a bug. It's doing exactly what it should be doing. What you're describing is basically an optimization for making two requests for the same piece of data.
It's not a bug. It's doing exactly what it should be doing. What you're describing is basically an optimization for making two requests for the same piece of data.
It's not a bug. It's doing exactly what it should be doing. What you're describing is basically an optimization for making two requests for the same piece of data.
Why is needing a Node server a deal breaker for you? I’m simply curious. The biggest downfall I see is hosts that offer one stop shop for PHP/Node don’t really exist. While the performance and dev experience with headless WP sites is superior, it’s not awesome to have two hosts (and bills) to host a site.
Why is needing a Node server a deal breaker for you? I’m simply curious. The biggest downfall I see is hosts that offer one stop shop for PHP/Node don’t really exist. While the performance and dev experience with headless WP sites is superior, it’s not awesome to have two hosts (and bills) to host a site.
Why is needing a Node server a deal breaker for you? I’m simply curious. The biggest downfall I see is hosts that offer one stop shop for PHP/Node don’t really exist. While the performance and dev experience with headless WP sites is superior, it’s not awesome to have two hosts (and bills) to host a site.
How does this address SEO concerns when using frameworks, especially with a CMS where most of its primary purpose is discovery and exposure (landing pages, blogs, etc)?
How does this address SEO concerns when using frameworks, especially with a CMS where most of its primary purpose is discovery and exposure (landing pages, blogs, etc)?
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
The race condition is when two processes compete for completion and depending on who finishes first, the state of application alters. This isn't the race condition. This is the argument for whether to cache the response of a promise or the actual promise itself, since the response is only available once the request is served, and thus allows several other requests for the same id to be made. And btw, just because you are returning the cached promise to two different code blocks doesn't mean that both of them would run concurrently once the promise resolves. Yes, you indeed would be able to save the time by not waiting for the same fetch to finish twice, but that's about it that you are going to achieve from this code.
Very cool , I liked and tested , everything it's okay
Very cool , I liked and tested , everything it's okay
Hello
Hello
5 upvotes in 9 hours means nothing. For the record, upvotes are a poor measure regardless, but especially such a low number doesn't even support your suggestion. But all that doesn't matter, because your post is about general FP and has no specific tie-in to JS.
thanks for suggestion update at [https://bipin000.github.io/imgix-price-calculator/](https://bipin000.github.io/imgix-price-calculator/)
thanks for suggestion update at [https://bipin000.github.io/imgix-price-calculator/](https://bipin000.github.io/imgix-price-calculator/)
thanks for suggestion update at [https://bipin000.github.io/imgix-price-calculator/](https://bipin000.github.io/imgix-price-calculator/)
thanks for suggestion update at [https://bipin000.github.io/imgix-price-calculator/](https://bipin000.github.io/imgix-price-calculator/)
Hello
Assuming fetchById is idempotent, there is no bug (yes, it's wasteful and inefficient but behavior is still correct). A bigger issue is your solution only works for this specific situation and does not generalize at all. Consider some local db with an asynchronous API for reading/writing keyed storage. Assume you have a call such as: async function foo() { let obj = await getFromDb('key'); obj = obj || {'count': 0}; obj.count++; await putToDb('key', obj); } Two overlapping calls will not work correctly and your technique does not help.
When I worked for someone I had really simple method. Each time someone screwed up something after a change in the code I was like "I'm glad we had a test that detected this problem before it was a fuckup... Oh....". It's hard to convince team because you can with discipline write and test your code without unit tests etc. If code is not big and complicated it's actually quite easy and quite fast. But things will start to blow up when you start making changes. And that's the main reason everyone should make tests. Regression. Assurance that after major or minor changes system is still working great.
Maybe I could have done a better job of wording the title (&amp; writing the article 😄) - seems like I've given the wrong impression of how broadly applicable I think this fix is
Looks interesting. I'll definitely try this.
&gt; and some software engineering skills How dare you. Here, on Reddit, where every user is the best engineer in the world just in their blood with no need to learn anything.
Emphasize repeatability. Automated tests prevent you from having to repeatedly write manual tests every time you debug. Phase Three gets easier and easier as time goes on and you get better test coverage.
Another way to solve it, if the scope is clean cut: My mobile CMS loads a measly 2KB CSS and 2KB JS (both tightly minified of course), and the full page content (also just a few KB) is static from the browser's viewpoint. The user experience is "app like" on 3G or better.
Some feedback... 1. Completing tasks does not work. Sometimes it does, if you're lucky, but in general it doesn't because it's not done correctly. 2. You are spamming more than 20 subreddits and using an all-caps title. **Don't do that ever again**. Do not say "oh, I'm sorry for spamming", just don't fucking spam. 3. If you want people to try something which requires an account, give out a demo account. Otherwise you appear as if you were trying to harvest emails and passwords. **You** want help; you should make it easy for people to help you. 4. If you're going to ask people to look at your code, take the time to clean it up. Remove unused code, remove commented-out code, correctly indent the code, etc. Asking people to review sloppily formatted code is just rude. 5. Do not use `onclick`. 6. Do **not** do `window.onload = ...`. In particular you do this in `list.js`, which is clearly **not** the place to do that, even if you were not using `window.onload = ...` 7. It's not "fully responsive" if, on mobile, the task list font size is so ridiculously small that you simply can't read shit.
I'd recommend /r/learnprogramming for these sorts of questions in the future.
No support for Typescript is another concern of mine on top of yours.
Realize that writing tests is a skill (just as Angular is a skill), in the beginning you and your team will sucks at it and make mistakes. Be prepared to carry the torch until you've established a workflow that work for you, then try to convince the rest of the team. Don't start with convincing the rest of the team and let them "suffer" through the initial struggle with you. &amp;#x200B; In the end you'll greatly enhance productivity, get a more enjoyable and productive workflow and more important: you'll feel free to refactor any crappy code because it will be covered by tests which will greatly benefit the code quality. &amp;#x200B; Start by buying the excellent [testing javascript](https://testingjavascript.com/) course . The author is the author of the excellent -[\*-testing-libraries](https://github.com/testing-library). So you know you're getting good stuff! &amp;#x200B; Focus on writing integrations tests, in our application it took me a while to write the first (good) one but once you've tackled the setup part it's very easy to write your second integration test. Just add the API mocks and program the steps the user would take and tada! You have another awesome test. &amp;#x200B; Code coverage and most unit tests are a waste of time. Focus on the integration ones and then after a while add unit tests where it makes sense.
seconded. doing a 30 second video showcasing a tour would help a lot. I looked at the examples was then faced with another 3 pages of text even though i would just have wanted a hello world sample.
&gt; framework &gt; vanilla JS dude :|
Try both of them and you can find out which you like best
Thanks a lot!
wanna avoid using frameworks, try a framework!
but you don't notice the framework while coding, it just handles the navigation
Hi /u/TalhaShan, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 &lt;body onclick=V=1 onload="x=c.getContext('2d');T=-1;setInterval(`c.width=99;X=99-T%128;i=T++&gt;&gt;7;y=18+i**2%25;T&amp;&amp;X*X&gt;144|(Y-y)**2&lt;49?Y-=V-=.03:T=Y=V=0;for(j=2;j--;x.fillRect(X+3,7+y-120*j,19,99));x.fillText(i,9,Y,9)`,16)"&gt;&lt;canvas id=c&gt; 249-&gt;234 characters. Best I can do right now, but I'm confident at least a few bytes more can be shaved off.
Seems like you need a tour guide for Tourguide.js. I couldn't find a demo or screenshot or anything. Also Ionic has ion-slides that accomplish the same goal.
Hi, thx for your comment. I did before writing this thing. MySQL queries are easy to read and I wanted to have something like that in my firebase project. Than I thought that it would be nice to have it in different types of databases. Just write your query and everything else is done under the hood.
Thx for comment, yep this is still fresh project - first public announcement. There is still a lot of things to do but I will implement more features DBs soon. Fun to do it. Thx again
Hi thank you, that is the goal of this project
There's a JS Fiddle demo right in the README: [https://jsfiddle.net/eugenetrue/q465gb7L/](https://jsfiddle.net/eugenetrue/q465gb7L/)
I spent some time building a fully responsive, to-do list web application with user registration, logins and personalization of data. Here's the website link -- [https://todo-list-website.herokuapp.com/](https://todo-list-website.herokuapp.com/) and the Github repository -- [https://github.com/alexnjoroge/todo-list-website](https://github.com/alexnjoroge/todo-list-website) PS: My Github account has other stuff i've built recently.
Number 44 like maybe next time.
Pretty cool, would have kept going for longer if the words weren't repeating.
CSS-Only Chat is a truly monstrous async web chat using no JS whatsoever on the frontend. 4,295 stars by now. No JS repository in a top 43 JS-only listicle Admittance by omission?
No idea if you're looking for feedback, but it's always a good approach to have your game operate completely separate from your ui. This boils down to your gamelogic not making any calls to ui-stuff - it should not have any knowledgde of the ui, just have it operate on data. This way you could for example very easily change your ui later on to a 3d view (even if you don't plan on doing that: you should separate your logic from ui stuff) Also: why did you choose the 50ms for setinterval? Seems like a random number, you probably want it to run as fast as possible which you can do by removing that time parameter. But what i actually want to say is: use requestAnimationFrame intead of setInterval.
Ooh! About that. I couldn't figure a way to go through the words sequentially in an array so i opted for the random way. If you've got time, help out and contribute a better way to implement that.
Thanks for the info! Why don't you redo the code on those areas we see how it turns out?
There's no need for a war when there is no competition
Here you go, a starting point for your next framework xDDDDDDDD [https://codepen.io/imlinus/pen/rgwppJ](https://codepen.io/imlinus/pen/rgwppJ)
How do you select those repos? Do you have an api query? Or is it just repos you found that have a lot of stars?
What about React? It has 4 times more stars than the #1 on this list. So many crappy articles on Medium.
I've been looking into this and you can redirect social bots to a service like prerender.io, which should solve this problem.
I doubt anyone looking at this article doesn’t know about react. These are smaller but still interesting ones that most people don’t already know.
You will learn a lot more if you try to implement it on your own. You'll come up with certain solutions, run into issues, realize why some won't work or are inconvenient etc
Did you read the readme? \&gt; [https://github.com/LikaloLLC/tourguide.js#fiddle-with-it](https://github.com/LikaloLLC/tourguide.js#fiddle-with-it)
Another thing that may seem minor, but naming things correctly is in my opinion the most important things in coding. Don't call that variable levels if they actually contain the times for each level. (the name level doesnt tell me anything about that fact)
[removed]
Why is this downvoted so much?
Why bother mentioning JS when you have something as glorious as CSS-only chat?
That's fine but that's not what the title of the article says it's about.
Make sense. Not sure about does Knex, does it provide it or not.
Username checks out
r/UsernameChecksOut
Very enjoyable. Missing score and high score so I can beat a record.
Fluff piece with no useful information whatsoever for this sub
why removed
do I see an API key in that repo?
I'll improve it to your liking. In the meantime.....put a star on it :)
https://github.com/NullVoxPopuli/emberclear/tree/master/packages/frontend
Cool idea! It’s SPA stripped to its essence. May try this.
Got 412 until I messed up... Butt I would say a bigger list of words would make it more enjoyable...
Thanks! Sorry about that, I didn't know.
Probably because those tour things are annoying and unnecessary? If a client or test group thinks your interface or process is too confusing, spend your time improving that instead of writing a guided tour.
Yes? Ctrl-r works just fine for me from the debugger window, even while paused. It even works from the remote debugger. Does it not work for you under some conditions?
If you have not reported any of these crashes to Bugzilla, please do. They should appear in `about:crashes`, where you can ensure they are submitted and provide a link to the crash report in your bug.
It's planned to be enabled by default soon (version 68 I think). We often test things using about:config flags before we enable them for good (then the flag goes away).
Ahh, good point!
The game takes it as a bad answer when i use caps on the word begining, you should arrange that
Yeah....am improving on that. After a day or so it'll have an infinite list.
That's how it should be. You type in exactly what you see....fast
I've been improving my email alias app Ptorx: https://github.com/Xyfir/ptorx It's a privacy/security app that lets you send and receive mail anonymously while still using your preferred email client (like Gmail).
That makes unplayable on phones, unless people desactivate the auto-caps in settings just for playing it, telling that for a better potential reach.
Es no un bug. Es un featuro! Good job by the way :)
It's still off, I would remove the top margin on .header-logo You also have some broken comments in the commented out pricing section :). Otherwise site looks great.
Hi /u/codingcreativo, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Okay. Thank you. I will. I should be doing more to improve the software.
Whoa Javascript that runs in a browser. You are really onto something
Just a nitpick here in case you didn't know, you don't need to create an anonymous function just to call the handleChange. The way you're doing it, it's creating a function every time you run that code. If you just reference it like onChange={handleChangeA} it will by default pass the event to that function.
Yeah, apparently when I was trying to fix the margins for the buttons in the “get ClassClock” section I accidentally broke the alignment of the logo without noticing. I’ll try and fix that as soon as I can. Also, what do you mean by broken comments? Is there something visible on the page that’s not supposed to be? Since the site is made with a template it included a few sections that I didn’t need immediately but might need later (like pricing and testimonials) so I just commented those out for now.
Comments inside of the commented section like the pricing section, they're not closed off. Honestly I would just remove the whole sections you're not using and save them in a file to use later... And I guess maybe that's why there are so many comments, they're from a template.
I made a Entity-Component-System purely in JavaScript without any dependencies. It's really small (1.61kb minified) and simple to use. I would like to get feedback on the code and generally some improvement ideas if anyone has one :) &amp;#x200B; Link to the github repo: [https://github.com/Stuhl/javascript-entity-component-system](https://github.com/Stuhl/javascript-entity-component-system) In the description there is also a link to JS bin with a demo. It's not the best demo but I hope it gets the idea through. Have fun!
Thank you, that's the plan.
Oh yeah, all the nested and unclosed comments within comments are pretty frequent on the landing page. I definitely do need to do some cleanup on that though before releasing it to other schools.
Who plays a speed typing game on a phone though?
Why is jquery valued? A lot of mentors that have taught me in the past don't seem to value it as much
"You only have to pay me $7 dollar a/month", why dated topics like jquery and why are you adding Bootstrap, I not understand why include that in a starter course inplace of giving your students the change to build full layouts without it and really understand css and html?
Oh wow, thanks! I was mostly focused on the JS, didn't know about the html minification tricks you used.
Hi, thank you for the question. I think it is beneficial for a beginner to be introdused to "easy" to grasp concepts that produce fast results when learning for first time, hense jQuery can increase productivity while working on practice projects, although I do agree that it is declining in popularity. The Bootstrap is included for the same reasons. The CSS part covers the basics that allows you to build and style a complete web page, while Bootstrap increases productivity. Best regards
to... practice speed typing on a phone...
Pluralsight. You only have 3 years in this industry why should anyone trust your curriculum?
It's a great website with really good marketing. Congratulations on your initiative and I wish you luck. Having said that, I'm not certain it feels like good value for money. For the things and level you are teaching I think there are tons of excellent free resources. I get the feeling your curriculum so far doesn't get you much further than Code Academy would for free. Perhaps when you have fleshed out the PHP/Symphony courses, and ideally added some React or Vue, that would be more worth the money. But generally I would advise students that they are best learning the basics with free resources, and then consider paying for more advanced stuff, where you are not just learning syntax but good programming habits and practices. Your current curriculum is really "how to build a website". It's good stuff, but I would not pay to learn that.
Hi there, there is mixed opinions on jQuery. One of the reasons is the rising popularity of frameworks such as Angular and React. I've chosen to introduce a beginer to jQuery as I think it is still widely used in web development especially in smaller projects. Exactly like the projects beginner would practice on before moving to JavaScript frameworks. Best regards
Hmm. Tough to play on my mobile. Each word the keyboard auto capitalizes the beggining letter which fails the check, and game over.
&gt; onChange={handleChangeA} For that to work, handleChangeA should be defined outside of the class. That's usually not how you work with class component. The alternative to using the anonymous function is: ``` constructor() { this.handleChangeA = this.handleChangeA.bind(this); } //render function onChange={this.handleChangeA} ```
Hi, thank you for the question. While 3 years do not seem much experience, it is enough to land job as web developer. The curriculum is geared towards complete beginners and their preparation for junior level positions. During the past year I was on the inteviewing side of many interviews for junior and mid level dev positions in Europe and that gave me great insight of the general knowledge level of your average junior/mid web developer. This helps me tune and add necessary technologies in the course. While the material is yet scarce (the platform was released 2 days ago), I will add 4+ video tutorials every week. In a year the curriculum will be more than complete to prepare a beginner for a junior position. Best regards
I hate to say it because I like that you took the time to put together something to help others learn, but I don’t see anything on here that you couldn’t get for free elsewhere. I personally would never pay someone with &lt; 3 years experience $7/mo to learn jQuery and bootstrap. I think Frontend Masters or the like is a *much* better investment
I made a data binding library focused on modularity, testability and separation of concerns https://datumjs.com
Some may think it’s a bit arrogant to charge for your wisdom with 3 years of experience. The fact that you haven’t touched modern frontend frameworks makes it feel like you’re perhaps overestimating the degree and value of your experience. Congratulations on being made “lead” at your agency, but don’t let it get to your head.
I left out pointing out you didn't have the constructor since I thought you were more or less just showing code. For what it's worth, you can easily skip binding by defining handleChange like this: handleChange = e =&gt; { // do stuff } You can call handleChange within the class method without binding this if you write it like above. Otherwise, you're correct, you can bind it and still use it the same way.
I am a complete beginner and was in search of an all in one kind of place for courses, so that i understand web development as a whole and stumbled upon your post. I am starting it today and it really looks promising, will give you the feedback once i make significant progress.
Hi, thank you for the comment! I do agree there is tons of high quality learning material for completely free. When I was learning few years ago, I used a lot of free resources and some paid courses from Udemy, while their worked and I managed to get a job as developer - it was difficult. This platform, on the other hard is the solution to the problems that I encountered while learning from random resources. 1 - It creates a strucured path that a beginner can follow from start to end. I always had the question - "and now what?" after I finished given random material. 2 - The material out there is so much that a one can get overhelmed extremely easy. What language should I learn first? 3 - Guidance and mentorship. If I had a mentor or someone who I could ask for reviews, recommendations, tips and guidance while I was learning, it would have made it many times easier. This is my goal for the students of the platform - to make their journey easy, efficient and productive. &amp;#x200B; Best regards
I've never heard of front end Masters. I just checked it out and it looks interesting. Do you have any experience with it?
Hi, thank you for the comment. The platform is geared towards complete beginners who wish to start their web development journey. While I do agree the current material is scarce ( the platform was released 2 days ago ) , the weekly tutorials that I've scheduled to release will greatly increase the material available. Best regards
&gt; handleChange = e =&gt; { // do stuff } Yes, this works too.
Learning on outdated practices because it seems easier is counter productive to the end goal, and a bit of a cop out in lieu of good teaching.
I’ve taken multiple courses on there and I can say it’s pretty solid. They even put up “pre released” unedited content if you are eager to learn newer things that they haven’t had time to edit into real courses yet. Also as a a side note, I had a question about the content once and asked about in their chat. The founder responded to me within a few minutes and explained their plan to update, etc. Overall I would highly recommend using FrontendMasters. Great experience.
Hi, thank you for the comment. Angular will be added to the curriculum in a later stage. My goal is to have sufficient front/back material before adding more specialized and complex tools such as Angular best regards
bootstrap and jquery? ... really?
I, sometimes this post are not very accurate. They use it just to promote something
Configure your keyboard settings.
Yap...configure your keyboard settings first.
Awesome. I'm going to school for C#/.NET development but have always wanted to do frontend. Are they self paced courses?
It's the application that runs in the browser. It could be built by JavaScript but runs on the desktop. Heard of Electron?
Yep. I definitely recommend giving it a shot
You made this while you're still in school? Good job!!
Almost every feature of jQuery is already built into JS nowadays. Frameworks like React are completely different and almost unrelated to jQuery. jQuery is basically just an extra feature set for JS and it's irrelevant now.
make it more fun for more people, allow initial caps
Thanks! I really hope enough people nominate their school so I can continue to develop the app into a proper service that other schools can make use of.
Am onto that...will be implemented soon.
Your website is broken. https://imgur.com/a/CFcULNr
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/MPNX6YV.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eo1qclv)
He didn't ask for the purpose of it tho, only who does that
Как выучиться на джиквери клепальщика за 7 бачинских в месяц у чувака, даже не пытающегося говорить без ужасного акцента. За такой контент заплатят только те, кто не понимает, за что он платит.
Thank you for the report. Will investigate it. best regards
Awesome! Thank you for this. Hopefully I'll be able to find a beginner in JavaScript to work/learn together with! :)
Cool. I'm happy if this helps you out in the learning process!
This is already a sub. /r/ProgrammingBuddies
I like ProgrammingBuddies. My only real criticism is that it's hard to tell how many folks actually end up buddying up and following through on a project. So there's a few things I want to improve. - Working with slack/discord programming communities that aim to connect developers together for the purposes of learning and working on projects together - Down the line I will showcase some of the projects the folks on /r/ProgrammingPals have worked on and shipped together. - I will be organizing 100% remote hackathons for the subreddit on a consistent basis.
Here's a sneak peek of /r/ProgrammingPals using the [top posts](https://np.reddit.com/r/ProgrammingPals/top/?sort=top&amp;t=all) of all time! \#1: [Looking for other software developers/ programmers who are bored as fuck with life, and want to be challenged with a project that will hopefully help society at large.](https://np.reddit.com/r/ProgrammingBuddies/comments/az7kf4/looking_for_other_software_developers_programmers/) | [4 comments](https://np.reddit.com/r/ProgrammingPals/comments/azwpc8/looking_for_other_software_developers_programmers/) \#2: [Interested in using Python for data science, making a few GitHub projects.](https://np.reddit.com/r/ProgrammingPals/comments/b1vr00/interested_in_using_python_for_data_science/) \#3: [Small group of iOS developers (Beginners and Experienced)](https://np.reddit.com/r/ProgrammingPals/comments/bl15zb/small_group_of_ios_developers_beginners_and/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
Why not just do all of those things on /r/programmingbuddies?
Agree with other responses, this can all be learned free. However, to play devil's advocate: some people don't realy put the necessary effort in, unless they've got skin in the game. Maybe a few bucks is enough for people who subscribe to use the fees as motivation. Now for OP, the goal is for you to take these naysayers' advice by making your content more valuable. You can add frameworks, tutorials, etc, but use their complaints as ways to improve. The market is telling you exactly what it wants. The ball is in your court.
I was previously a mod on /r/programmingbuddies and made an effort. It just didn't work out so I decided to start some of these things up.
Now that we've golfed it that small it's possible to include style="width:100%" to make the canvas full screen. Any trick to making that part smaller? &lt;body onload="x=c.getContext('2d');T=-1;setInterval(`c.width=99;X=99-T%128;i=T++&gt;&gt;7;y=18+i**2%25;T&amp;&amp;X*X&gt;144|(Y-y)**2&lt;49?Y-=V-=.03:T=Y=V=0;for(j=2;j--;x.fillRect(X+3,7+y-120*j,19,99));x.fillText(i,9,Y,9)`,16)"onclick=V=1&gt;&lt;canvas style="width:100%"id=c&gt;
These weren't created this week, but some stuff I haven't posted here yet: ### [WaveShader](https://github.com/spacejack/waveshader) A GLSL-based audio waveform sketchpad. Kind of like ShaderToy's audio shader editor, but with a UI designed specifically for audio and short sound effects. Lets you share sketches by url and save WAV files. ### [Hyper-Static](https://github.com/spacejack/hyper-static) My idea of what the One True static site generator should look like. (By static I mean old-school static - plain HTML pages, not hydrated SPA views.) There is zero convention over configuration. All this does is set up tooling to compile and hot-reload: * HTML layouts (from [HyperScript](https://github.com/hyperhype/hyperscript) JS sources) * Page content (from Markdown sources, compiled with [Marked](https://github.com/markedjs/marked)) * A CSS bundle (from [PostCSS](https://github.com/postcss/postcss) sources) * JS or other bundling is left up to you The idea here is that you have maximum expressive power in your views so you don't need any other templating tooling. They are just plain JS functions that run when the page is rebuilt. (Note that you could probably add JSX support pretty easily if you wanted it, or use React or Mithril or other rendering engines in place of HyperScript.) One problem I've had with other static site builders is that it takes too long to figure out where files are supposed to go, how the template DSL works, how to compose layouts and so on, and then how to customize the high-level orchestration. I realized that all I really wanted was to be able to do arbitrary high-level scripting in JS and have the prerequisite set of preprocessors and watchers/reloaders set up and ready to go. ### [HyperSVG](https://github.com/spacejack/hypersvg) This is a small back-burner project and I'm still thinking about the API design. It's a collection of declarative SVG rendering functions that make it more ergonomic to use inline SVGs in declarative views. Includes some helper primitives that are a pain to implement from memory (like arcs) and a few icons I've found useful (when unicode characters are too unpredictable to rely on.) The idea is you inject your (V)DOM's render function (Eg: React.createElement, Mithril, HyperScript) and the svg render functions return a rendered tree. One could probably implement a lot of [svg.js](https://svgjs.com/)'s API in a declarative fashion...
Hi, thank you for the comment. I do agree with the feedback given by others and will improve the curriculum. I will scrap the jQuery section and add Angular on its place. My goal is to offer modern and up to date material. Best regards
Its cool and all, but can we change it outside of rebuilding chromium ?
This is a fantastic idea.
thanks I appreciate it! I hope it helps.
Overall the time logic needs work. If you get an answer right it resets the timer itself but not the interval, so if you answer correct with .5s left it still has that time until the clock changes.
Hi /u/mburakerman, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
Nice find
Here is something that will be more beneficial to you... stop crowd-sourcing your opinions and likes. Think for yourself. Try both, pick the one you like the most. Try to learn everything you can about your choice.
[Free Server Side Bot Detection Service](https://www.botdetector.ca)
&gt; // TODO(dpapad): Add more checks according to our styleguide. :)
I would avoid exposing all methods on the DOM, otherwise you can get cheaters like me: setInterval(() =&gt; { let word = document.getElementById('current-word').innerHTML; let input = document.getElementById('word-input'); input.value = word; startMatch(); }, 10)
&gt; framework war The only winning move is not to play
I wanted to understand differences between existing and new Promise combinator methods shown in [What’s new in JavaScript (Google I/O ’19)](https://www.youtube.com/watch?v=c0oy0vQKEZE) video. I've had hard time grasping differences due to terminologies used to describe Promise **states** such as `fulfilled`, `rejected`, and `pending` as well as `settled` to describe a state of either fulfilled or rejected (not a reall state but used as a "[a linguistic convenience](https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md)"). I didn't explain what a "promise" is as 1. The post is mostly about the comparison 1. how each static Promise combinator method works Explaining it would digress from the goal (and out of scope). As I've wrote the article, there might be many mistakes here and there and unclear. Would you please kindly point out mistakes and how I can write it clearer? Thank you.
Yes, I read it after this post was made and before that guy added commits linking js fiddle.
Lol.
Well wrt the study was from the 80s, and as far as I know the haskell team is still working on on their submission ;) You can find several on google. This is also a good summary of all of them: https://vimeo.com/74354480 I would like to see a new study with the most modern languages. Python vs JS vs Typescript vs GO vs Scala perhaps.... but I dont think inferred types are going to change anything.
I fucjing hate eslint tbqh
I did it. And was disappointed when I found out it didn't work. Seems like an easy fix that would please players like me.
There’s also /r/WebDevBuddies which I guess is more closely related to a JavaScript sub!
Your typo exposes the need for it
This I would say is more of a router than a framework :P
Lmao I have fat thumbs. Personally I hate style checks. I feel like it limits creativity, and I especially dislike when it disallows semicolons. Sometimes they impede functionality and to be honest strict style requirements dont add anything. If readability is an issue then you have serious problems beyond your usage of tabs vs spaces or semicolons, and anyone who tries to tell you that your code is unreadable because you didnt put a space between your function name and its parameter lost is just being a cock
fair
Hey Guys/Girls First time submitter here. Any ideas or constructive criticisms are welcome. I have been working on a Reactjs based social media app for the past 6-8 months or so. (The Video is around 2 min long, sorry this is the first time recording an app tour. Its a little laggy because of my bad internet and an old laptop that could barely run my program and record the screen at the same time without sounding like it was going to catch on fire.) [streamable video here.](https://streamable.com/ir77w) Its a reddit/instagram-like hybrid with a focus on video gaming clips only. You can add game clips to game communities and vote/comment/subscribe. There is also an explore-ish type page where you can explore different genres and find new or interesting games you may like. Also it can sort clips by trending/top/new by day/week/month/all time I made this because this was actually something I really wanted and maybe some of you will to. I am looking to launch the beta version in a few weeks. If you would be interested in contributing clips to the beta version or maybe even interested in moderating, just send me a DM, and when the beta launches I will send out an email alert for the first users. This is the first time I have really put my work out there hence the throwaway account. &amp;#x200B; Thanks for checking it out.
Lmao are you in a trilogy program? Good fucking luck
What’s wrong with a trilogy program?
Have fun trying to get a job afterwards when they flood the market with everyone in your class that had no idea what they’re doing. They’re all about graduation rates; they don’t give a fuck if people actually learned from their programs.
Low IQ argument. Consistency improves comprehension speed. Time is money. ESLint saves time and money. That's not an opinion, it's a fact.
[removed]
It only saves time if you don't know how to do TDD efficiently (aka you're a bad developer). Any module with 1000+ lines of code of logic, TDD will save time if you know how to do it right. If all you're doing is calling apis from react and there's no logic then tests might not save time/money.
Try adding `// @ts-check` as the first line in the `.js` file to opt into VS Code's type checking.
I disagree. Shipping code that has logic without tests is scamming your clients. You're giving them something that will cost 10x the amount to modify because you are too incompetent to follow good practices. You're robbing them of future money. It's like building a house badly that will crumble in 1 year. It's basically fraud.
I actually use classes because it's easier to mock state and dependencies for unit tests and I don't really care about the unbound method because I autobind all methods in the constructor always.
&gt; especially dislike when it disallows semicolons I have never seen a linter that disallows semicolons. That would be a weird mixture of demanding correctness (linter) and allowing sloppy bugs (no semicolons).
What’s wrong with getElementById?
I will just use standardjs, it is stricter and more detailed.
If you are new to JS (which seems the case because of, well, this question): try Vue. You will pick Vue quite fast and can start building things in a matter of a few weeks. &amp;#x200B; After one or two of small projects, have a look at the huge and ever burgeoning JS library-verse. Use one or more to build the same projects that you did in Vue. Pick something that is popular if you still feel not so comfortable digging into framework internals. For e.g. the framework has questions flowing in SO, Reddit, product forums and more importantly - questions being welcomed and addressed. &amp;#x200B; At that time, you will have more than enough reasons on what will work for you. You will also recognize that the framework(s) you love will be the ones you pick up for projects despite others having a thousand advantages like proven faster performance, lighter libraries, and a zillion Github stars on a number of frameworks.
It's an option with eslint to disallow them. It's actually the opposite that you suspect though and you can also pretty much lint to cover the scenarios where there are bugs. It's pretty safe either way. It's purely style / project preference at this point.
eslint
I agree with your consistency argument but I find it hard to believe that you can cite a credible source to back up your time and money saving "fact". If you can, I'd like to read it though.
No semicolon doesn’t mean a bug - look into StandardJS
Thank you :)
ok
An app to replace your paper based business cards: https://github.com/karanpratapsingh/kcards Still in beta 😄
you can use "eslint" for that. It will highlight such kind of issues.
Looks like they just want to consistently use jQuery
You can add Testcafé to the "types" section of your tsconfig. Actually, look up jsconfig instead. It's like tsconfig but for js files. You can also download @types/&lt;library&gt; to get the type definitions.
It works well when you're working in teams. But then again I'd imagine JS formatting is the least of your worries when working in teams.
nope. look at utils.js linked in the comment.
I am literally going by the error message bud
The error message [explicitly says](https://cs.chromium.org/chromium/src/.eslintrc.js?q=lang:%5Ejavascript$&amp;sq=package:chromium&amp;dr&amp;l=27) to use $ *"from chrome://resources/js/util.js"*. [here](https://cs.chromium.org/chromium/src/ui/webui/resources/js/util.js?sq=package:chromium&amp;dr&amp;g=0&amp;l=7-18)
pretty ignorant, bud.
Yes... Use (what i am assuming based on the syntax) jQuery, or a specific getter
Yes, chromium is definitely built with jquery 🤔😂
It's a no brainer. No discussion about styling, less bugs likely to be put into testing or production because of ability to restrict certain methods and through that, less bug finding. Saves time, thus money. Especially if whatever page was developed is linked to selling something where the bug was introduced.
from utils.js: /** * Alias for document.getElementById. * @param {string} id The ID of the element to find. * @return {HTMLElement} The found element or null if not found. */ function $(id) { return document.getElementById(id); }
I'm sure your coworkers love any creative antics you come up with to feel special.
Frankly most people don’t use it for that anyway, they just want basic static typing for their js
My work (and many others) use this to put a recruitment link in the console. It gets zero click-throughs but whatever, it passed the time one Friday afternoon months ago. The [BBC](https://www.bbc.co.uk/news) do this too. So do Reddit but it's not styled and is obscured by an ass-ton of console errors.
Was about to post, 'AKA the recruitment feature', but you kind of beat me to it. Guardian does it also.
what about puting a non-working emaill address in console? i think when developer see a message from website in the console, he will become exited , like he found something, so the message should be abit rewarding and friendly. it shouldn't be a cold message like what bbc or reddit do. perhaps something like : "Hi developer! i'm john, from Piedpiper. if you're interested in us, here is my email if you want to collaborate or talk with us: [john@Piedpiper.com](mailto:john@Piedpiper.com) . don't hesitate to send me a message, i'll answer to it."
wow, i didn't know this was common practice, i once stumbled upon one, and i thought that was so weird and awkward for some reason :D
Why are you deleting nearly every reply you made here?
The svelte team is going into overdrive with the anti-React shit, huh?
Wow dope reading skills. It's not to feel specoal6, but go ahead and insult strangers ok n the internet to make yourself feel better. Lemme know how your 3rd grade reading comprehension test goes, tho
Personally it's not something I notice at all. It doesnt sig ificantly impact readability, it's just nitpicking level of detail
`npx` is just a way of running a package without installing it. If you want - you can also run `npm i -g degit` and then just run `degit sveltejs/template my-svelte-project`
Eslint allows it and my workplace enforces it. Another feature my workplace disallows is labels, which have their place
It can cause bugs
Wow cool! I didnt know that having a differing opinion on software development made me mentally challenged. That's a totally mature opinion to have! Tell me, if I dont vote for the same person as you or like the same music, does that make me retarded too? How about when someone makes an argument you disagree with, instead of responding with insults or hostility, you just, I dunno, talk to them? I wasnt hostile to you at all, but your immediate response was "this person is retarded." What does that say about you?
I bet your humble attitude makes you even more popular.
You're not a pleasant person, you know that? I came in here with an opinion and you come in here with personal attacks. Who's more pleasant at work, the guy with a different opinion, or the neckbeard who goes straight to calling his coworkers retards when they have a disagreement? Work on your interpersonal skills
Wow great work
Don't get me wrong: I'm all for enforcing consistent styling but I don't follow your "no-brainer" argument. You seem to assume that using ESLint will reduce bugs. Can you elaborate? For me it's mostly useful for enforcing styling. Even if we assume that it does find bugs: how serious are these bugs? How often do they occur? Your argument is: this saves time, so the question is: how hard are these bugs to fix and how serious are they and how often do I save time? Because making changes to my code to conform to ESLint rules also _costs_ time (and thus money by your own argument). For anyone writing code (noone I know writes pitch perfect code the first time around) and for new people joining your team that have to learn the rules. Does the time saved outweigh the time spent running the tool, waiting for results and fixing your code? Again: I'm all for using ESLint. I just don't buy that using it is "free" in terms of development costs. So again my question: has anyone done more than say: it's a no brainer? Done some actual numbers on this?
``` onEveryStateChange(() =&gt; { document.body.innerHTML = renderMyApp(); }); ``` OK, this is a pretty extreme example but once you take it down to a component level this is _exactly_ what things like marionette/backbone did isn't it?
What your are reading into my comments says more about you that me, mate. Be all the rockstar you want but others will call you out for it. You're the one calling others cocks by default. I can promise you that anybody that works with you will prioritize readable and maintainable code any day. Code that is understood at a glance and looks like it could have been written by anyone in the team. Nobody will appreciate having to figure out some other coders "creativity" when you have a ticket to close and an office to get out of. That said, you're welcome to keep your personal project any mess you want. Make all your properties and methods in emoji for all I care.
Well so my argument is that linters dont significantly impact readability. They nitpick small details like where a space goes, and they negatively impact functionality by disabling certain features like semicolons or labels. You can follow all the dumbass rules of what some brainlet thinks makes javascript look good and still write shit, unreadable code.
&gt;You seem to assume that using ESLint will reduce bugs. Can you elaborate? For me it's mostly useful for enforcing styling. Sadly I can't talk about large-project-advantages of ESLint here, that's to others, but from my experience with personal projects, ESLint rules made me a better developer by showing me (even potential) errors where I didn't assume any, it forced me to write more concise code that in hindsight is easier to maintain. &amp;#x200B; And code that is easier to maintain inevitably leads to less bugs because there's less code written which reduces potential for bugs, whoever is gonna change it will have less code to fuck up and has an easier time understanding it before even laying hands on it. &amp;#x200B; &gt; Because making changes to my code to conform to ESLint rules also *costs* time (and thus money by your own argument) I'm unsure about which case you're specifically talking here so I'll answer both: \- youre talking about implementing ESLint to an existing codebase - then yes, definitely costs time, but you don't have to ESLint be strict about for example not letting builds go through until everythings clean, you might just use it for new code to be linted. I think that'd be comparable to React Hooks, nobody expects everyone to instantly rewrite their whole app with Hooks just because its less code. Just use it for new code. &amp;#x200B; \- youre talking about using ESLint in some brand new project - then I'd argue there's a tiny learning curve adapting to, this time, strict rules because obviously you have your own habits and are used to write things the way you do and now ESLint tells you to fuck off basically. But eventually you'll have those maintainability and reduced bug likeliness advantages I mentioned earlier. &gt; and for new people joining your team that have to learn the rules. Tbh I don't consider this an issue at all - unless you/your project/your team uses some quite obscure ESLint rules, people will probably have an easier onboarding experience because they already know ESLint since its the de facto industry standard linter anyways. Plus, there are plenty of popular eslint-configs out there that more or less compete about being industry standard too (standard-js, airbnb to name two). &amp;#x200B; And if someone doesn't know ESLint yet it's probably for the better to introduce that developer to it. After all, ESLint enforces rules that are mostly considered best practices. &amp;#x200B; &gt; the time spent running the tool, waiting for results and fixing your code? ESLint is from my experience almost instant.
Yeah, and that is one of those "cool" completely unnecessary features with poor support, you in the end realise just causes problems. For example, in a browser-module project (not made public yet) I used some styling in the console output to make certain kind of errors more clear. The test however is running mocha / chai in node, and instantiate the browser-module, and must pass the console object in order to make the browser-module work "serverside". Then `%c` becomes less attractive, because nodes' console not support this feature === `%c0_0","font-size: 50px;border: 5px solid #aef; border-radius: 50%;padding: 30px;color: #359` (as example) is printed out as text in the console. Not really what you want users to see, when they evaluate your project :)
Here is for hacker haters: console.log("%c\*\_0","font-size: 30px;border: 5px solid #aef; border-radius: 50%;padding: 10px;color: #359"); console.log('%cYou seems suspicious, please dont consider hacking or copy this website, cuase: i p== \*\_\*','padding:10px;color:red;background-color:#aef'); console.log("%cThat's a gun buy the way, and that means:",'color:red;background-color:#aef;padding:10px;'); console.log("%cI'll kill you",'color:red;background-color:red;padding:10px;');
Thanks. Am trying to improve it by making each gif able to be clicked and redirect to a page where it occupies a larger area. In the meantime...put a little star on the repo :)
For your information; You're not improving in making yourself sound like a pompous arse. That is, like somebody highly immature that is reading way too much ego in his or her ability to produce code. Calling others cocks and brainlets and reactive strongly to opposition points very distinctively at a narcissistic mindset and throws red flags of toxic behaviour. If you were on my list of interviewees I'd cancel before I even met you and if you were forcibly assigned to my team I'd keep you busy with an isolated non critical module that nobody else has to be in touch with. You may think this is an insulting comment, but if this is your attitude, it is what people are thinking even if they don't say anything because nobody wants drama in their workplace. Make of this information what you want. It could be an opportunity of reflection and self improvement. Or you could dismiss everything. Seriously, it won't bother me in my future life the least. You're the one that stands everything to gain from it. Or not.
K. Let's bring personal attacks into the javascript subreddit. Let me know how your internship goes kid.
Lawsuit, you said kill!
react doesnt work with large application. Have tired and ull got no help from reddit. is very bad actually
Interesting, i read that react is for large applications but Vue for small..
labels... in HTML?
 Label: for(let Item of SomeList){ for(let Foo of Item.MoreItems){ if(Foo.Name === "MyName") break Label; } } } Labels break all the way out of nested loops.
I really could not care less about the performance of the VDOM, I use React because I love the programming pattern, the ecosystem is rich, and because the next developer after me won't be wondering what the fuck he's looking at.
面白い!
[removed]
The virtualdom being such a selling point IS a meme though. Whenever you want to talk about anything react, people are always like, 'what about virtualdom?'
Do you mean vanilla handlebars? Like what some people used in the old days to get templating in their JS before templating was really a well thought out thing?
Might be a good idea to understand what `npx` does before trashing something for using it in their examples.
At this point in the "discussion", you are still the only one who has relied on personal attacks. Take a moment to reflect.
I don't think the article exactly says otherwise. It's saying that if you want "declarative state-driven UI" then the virtual DOM is better than just making a tonne of unnecessary changes to the real DOM. However, it's then saying that in a better world you could just make only the necessary changes to real DOM without the virtual DOM, and you could do this by using a preprocessor/compiler that writes specific code for the possible states of your specific application, rather than just generalized code like you have written there. At least that's what I'm assuming Svelte does, I haven't actually used or looked into it.
You can write "while(true)" using every framework. Maybe you were doing things wrong? At least define what you mean by "large applications". I find that React scales fine to larger apps as long as you think about how you manage your application state - and there are plenty solutions for that.
https://www.npmjs.com/package/vividlog
😂😂😂
Facebook uses it to tell you *not* to be in the devtools lol
Is this the last defense of Angular? The “overhead” for vdom is very insignificant.
good detective work, sherlock
Just extract a function and return? It'll be way earlier to read
https://www.npmjs.com/package/ttlog
Right, so we are reading an article about a meme. What is the practical point of this?
I love svelte and it's performance and works with web components out of the box
You gotta provide a link my friend. =]
This is the link to your repository: https://github.com/alexnjoroge =]
Here you go [https://github.com/jskod/react-smart-modal](https://github.com/jskod/react-smart-modal)
Awesome. Thanks
Make sure to test it in your project and provide your feedback as well. If you can contribute to it, let me know. It'll be a great help and I will appreciate it. :)
Will do.
oooh..how did i mess that up. Thanks!!
Very much this answer. It’s novel that Svelte is making progress on not needing a virtual dom, but setting CSS and other DOM properties comes with complexity in Svelte. There are ease of use trade offs being made, just like with React vs Backbone.
That’s because half their activity are naive people spamming their friends because a post told them to. Of course some people would happily jump into the console and paste something if it would get them a free Aruba vacation.
They debunking the claim that direct manipulations to the DOM is slow. Saying that the VDom is the end-all solution to all performance problems. By making smart interactions with the DOM, you can have great performance. That's all they're saying.
It’s all good.
Discovered this a while back from browsing facebook with the console open.
You're pure evil.
I think it’s only useful if you are developing a testing platform for an enterprise app. At the level of individual and small biz, it takes too much energy for too little reward. I tried to write a shortcut JS class once, but the privacy of `Console` methods made it too much of a pain. Might be different now though.
[https://www.npmjs.com/package/krita](https://www.npmjs.com/package/krita)
I know Discord does the same thing :D
Yeah well at least I can use Typescript (or ReasonML or clojurescript etc.) with a virtual dom lib.
&gt; type checking
Hi /u/Shoma_ia, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/piyiotisk, this post was removed. `404` Well, this is awkward. Whatever you did is so uncommon that we don't have a canned response for it. It's also possible that you broke several guidelines. Either way, please have a good look over our guidelines (linked below and in the sidebar). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/piyiotisk, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Okay)) Thank you..
Hi /u/aenema_ggr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/programmerjules, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/colorsdontlie, please refrain from personal attacks. Thanks.
Hi /u/proboardslolv5, last warning on the personal attacks. Thanks.
Hi /u/haverbeke, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi, you're warning the wrong person. Please read again. Thank you
Hi /u/AForAlternative, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Cool just add on to the stack
Hi /u/simkessy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; [...] Lemme know how your 3rd grade reading comprehension test goes, tho Nope.
Which was a reply to &gt; I'm sure your coworkers love any creative antics you come up with to feel special.
And there is another guy who did the same: https://aerotwist.com/blog/react-plus-performance-equals-what/ You can do your own tests. Vanilla Js is where pure performance is all about. Anything else is just flavour and developer convinience.
Serious question: Have you ever honestly created a stack overflow or serious performance impact from extracting a function? Plus, we're in /r/JavaScript, performance is not going to be the highest priority. If you're in some weird field where you use js for high performance applications you can disable the linter for a section. Otherwise readability and maintainability are more important than that micro-optimization
You need to care about performance in javascript otherwise you get 15mb page loads, 90% of which is js libraries that arent needed
This article is about svelte not angular, and you’re making a blanket statement. You can definitely build React apps that scale horribly if you don’t know what you’re doing.
They raise a good point. This is one of the areas where Angular has some advantages over react, since you can bind things to observables that make updates to specific parts of the tree, so you’re able to tell Angular what to update and when, in a precise way. I still prefer React, but it’s important to understand every framework has tradeoffs.
Wow, animated images(gifs) will also work: console.log("%c.","padding:100px;background-size:cover;background-image:url('[http://clipart-library.com/images/6Tp6Mna8c.gif](http://clipart-library.com/images/6Tp6Mna8c.gif)')")
The game now supports input with upper case letters and the has an array of more than a thousand words. Perfect for mobile users.
Stack isn't measured in MB. I think you're conflating two ideas here. Your gut instinct to be wary of performance is good. Keep that. But also be mindful of the tradeoffs you're making. Focusing on readability of code is probably my #1 lesson learned in my 10 years of industry experience including working at one of FAANG.
I hope it's not Facebook because their application is a piece of shit
AANG then ;)
Yeah, that’s sort of the idea behind svelte. The more general premise: If you want to be able to update your view layer in an arbitrary way based on state, without having to write custom code for all possible permutations of your state and view layers, then you need some sort of abstraction layer to manage that complexity for you. Now, the complexity is still there. It’s just being managed by the abstraction layer. Where do you want that complexity to be managed? At runtime? Or at compile time? React manages it at runtime, which introduces some some degree of performance cost at runtime. Svelte just manages it at compile time. I’ve had a similar experience with ReasonML. When it compiles to JavaScript, it removes a lot of the complexity of type-checking and error handling at compile time, so My code doesn’t have to manage all of that at runtime. The result is usually a bit of streamlined JS that I couldn’t have written myself if I tried.
Hi /u/TheWebDever, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
console.log("%c.","padding:50px;background-size:cover;background-image:url('[https://media3.giphy.com/media/5kq0GCjHA8Rwc/giphy.gif](https://media3.giphy.com/media/5kq0GCjHA8Rwc/giphy.gif)')")
IINM, Jest supports async out if the box. The callback should either return a Promise, or call the done argument when it's finished.
You're using Jest wrong. Run your tests in `it()` or `test()`. `describe()` is an optional container.
What would be a useable case for this be though?
`console.log("%c.","padding:30px 510px;background-size:contain;background-repeat-y:no-repeat;background-image:url('`[`https://media.tenor.com/images/59478acf4603b91da87453051869fa80/tenor.gif`](https://media.tenor.com/images/59478acf4603b91da87453051869fa80/tenor.gif)`');");` `console.log("%c.","padding:30px 450px;background-size:contain;background-image:url('`[`https://media3.giphy.com/media/5kq0GCjHA8Rwc/giphy.gif`](https://media3.giphy.com/media/5kq0GCjHA8Rwc/giphy.gif)`');background-repeat-y:no-repeat;margin-left: 60px;");` `console.log("%c.","padding:30px 510px;background-size:contain;background-repeat-y:no-repeat;background-image:url('`[`https://media.tenor.com/images/59478acf4603b91da87453051869fa80/tenor.gif`](https://media.tenor.com/images/59478acf4603b91da87453051869fa80/tenor.gif)`');");`
ℕ𝕚𝕔𝕖
aside from custom styling logs, and make new log systems(like [vividlog](https://www.npmjs.com/package/vividlog)), it's attrract developers, so some use cases are : [https://airdev.co/](https://airdev.co/) : it's created by bubble (a website creator), so bubble promote itself to developers. [bbc.com](https://bbc.com) : bbc promote it's recruitment to developers.
Cool packages, but I wouldn't recommend ever actually using those "weird font styles" in production anywhere. Those characters all have some kind of meaning, whether it's mathematical or something else. Some of them will work fine, but others simply won't. Screen readers any other assistive technology will fall over trying to read those things. See https://twitter.com/kentcdodds/status/1083080784682995712 for more examples.
Ah that’s good to know! Cheers for the insight!
yes, this is toy project, just for fun.
Haha, i didn't meant non working. i want to say "personal email" , not "work email". i edited my comment. my English sucks :p
Now my comment makes no sense :'(
 8====𝕯
No it's not https://jestjs.io/docs/en/troubleshooting#defining-tests only if async code is indie test file.
but why
So use a test function.
this don't work because you can have async tests the only way is to have async desribe that don't work in jest. If you have async test it will run after jest finish running.
lol, I changed it back :p
\`test\` is alias for \`it\` it can't run asynchronously in jest, that way I'm searching for library that work that way.
You're pure evil. hahaha
My tests functions are in external file that I want to load.
TBH he's right on the CLI part. Svelte basically just uploaded a boilerplate GitHub repository and then tells people to download that repository using a git repository downloading CLI tool
Bahahaha I knew it! Facebook be crankin out premature optimized frameworks in a bid to slow down the rest of the Web and appear fast by comparison
because "why not"
Are you certain your function came back by the time your console ran? Wrap it in a promise just to prove that it has.
Are you sure you're passing the correct args? Add a console.log() to the beginning of the function to see what's being passed in.
You are changing the array stored in val. The array you pass to the function is passed as a reference, so you are calling splice on the array outside of the scope of the function, so you need to make a copy of the array inside the function if you do not want to change the actual array outside of the function. let newArray = arg.slice(); // should do the trick
Listened to the podcast, I loved it. Really inspiring re: my next data visualization project I want to do with the mugshots.com client.
check the value of 'val' after you run the first arrayToList. is it modified by the function? if so, then did you call arrayToList twice? &amp;#x200B; console.log(arrayToList(val)); let returnedList = arrayToList(val); console.log(returnedList); &amp;#x200B; &amp;#x200B; { value: 1, rest: { value: 2, rest: { value: 3, rest: null } } } { value: undefined, rest: null }
But I reckon if the correct args weren’t being passed then it wouldn’t output the correct result in the first place no ?
Ahhh I see. Gotcha , thanks !
Yes I think the problem is splicing the array within the function also spliced it in the global scope. Thanks a lot
Thanks
Unfortunately im using a sheet that will have live data being pumped in so I cant change it to csv. I did manage to get things working using the new api though! Pain in the butt. Thanks for the idea though :)
Gave it a shot. Finally managed to get it to work using code on the api site you gave me. thanks!
Hmm. Hardcoded "fonts"? What you have made is simply utilization of a few arrays containing unicode, which I believe you have spent a lot of time to pick together :) I made something similar 8-9 months ago. With more variants (as it is called) and even opt-in for strike through and underline (if available) -&gt; [https://github.com/davidkonrad/toUnicodeVariant](https://github.com/davidkonrad/toUnicodeVariant) Perhaps you can be inspired to a different approach? The repo above was made for pure fun a saturday night, there is no tests or similar, but I believe the concept is stronger (no offense!)
Finally got it to work using the new v4 api. This is what I ended up doing. I'm just not sure that it's okay that the api key would be visible in the html doc... &lt;!-- Get Sheets data --&gt; &lt;button onclick="makeApiCall()"&gt;&lt;/button&gt; &lt;div id="apiresult"&gt;result &lt;/div&gt; &lt;script&gt; function makeApiCall() { gapi.client.sheets.spreadsheets.values.get({ spreadsheetId: 'YOUR_SPREADSHEET_ID', range: 'YOUR_RANGE' }).then((response) =&gt; { var result = response.result.values; console.log(result); document.getElementById("apiresult").innerHTML = result; }); } function initClient() { var API_KEY = 'YOUR_API_KEY'; var CLIENT_ID = 'YOUR_CLIENT_ID'; // Authorize using one of the following scopes: // 'https://www.googleapis.com/auth/drive' // 'https://www.googleapis.com/auth/drive.file' // 'https://www.googleapis.com/auth/drive.readonly' // 'https://www.googleapis.com/auth/spreadsheets' // 'https://www.googleapis.com/auth/spreadsheets.readonly' var SCOPE = 'https://www.googleapis.com/auth/spreadsheets.readonly'; gapi.client.init({ 'apiKey': API_KEY, 'clientId': CLIENT_ID, 'scope': SCOPE, 'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'], }).then(function() { gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus); updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get()); }); } function handleClientLoad() { gapi.load('client:auth2', initClient); } function updateSignInStatus(isSignedIn) { if (isSignedIn) { makeApiCall(); } } function handleSignInClick(event) { gapi.auth2.getAuthInstance().signIn(); } function handleSignOutClick(event) { gapi.auth2.getAuthInstance().signOut(); } &lt;/script&gt; &lt;script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()"&gt; &lt;/script&gt;
I must have seen this video here a BILLION times by now
Gtfo retard
You could use the Google Chart API. The "Treemaps - Chart" should fit your needs. https://developers.google.com/chart/interactive/docs/gallery/treemap
Hi, I've took some time to check Loopback. In Chego you write your query and everything else is done under the hood. You won't have to write your own functions, callbacks to parse, filter etc data you get. Check examples like this https://github.com/chegojs/chego/blob/master/README.md#Like I wanted to have simplicity of mysql queries in my nosql DBs. BTW currently I'm doing nosql code base.
To anyone who downvoted, why do you disagree? It might not be the best idea every time, but if you are doing proper OOP it is one of the main tools available. Maybe it is more TypeScript than JavaScript style, wrong forum?
List is scoped inside your arraytolist function. So it is not defined in the outer scope
I stole that idea at work.
It's not a meme, the previous way stored all the information and committed every change to the actual DOM, which is slow, virtual DOM is faster because you can batch changes or not update at all unless something has actually changed, this it is much faster than previous frameworks, and is still the fastest method without a compilation step, like svelte has. I think svelte may be the way things are heading, though I think debugging will suffer because the code isn't 1 to 1, but I'm sure that will get worked out. I also think compiling to WASM is an option and completely changing how things are laid out, maybe just using the canvas or an absolute positioning system to get further speed, though current methods have proven to be able to create rich apps that are fast without much compromises.
I've just been kinda casually following the Svelte posts popping up, and they make sense and make Svelte sound really compelling. I'd be curious to read an anti-Svelte article to learn what the trade-offs are (other than a having a smaller ecosystem).
Of course direct manipulations to the DOM are slow. They are the bottleneck. It doesn't matter what abstraction you are using, ultimately something is writing to the DOM and the DOM wasn't really built originally designed handle modern UIs. It's just a matter of if you want a preprocessor optimizing your code or if you want to have the overhead of an extra UI runtime to optimize for the fewest interactions.
I think you either misunderstand how Jest works, asynchronous JavaScript, or both. You can definitely have async tests in Jest that await completion. I use them every day. The link u/BehindTheMath shared covers everything you need to know.
No... You're asking a question, being told the correct answer, and then disagreeing with the answer... I don't follow the thought process behind that.
Wrap your tests in an async It Use “it” as your wrapper for your sub tests.
The only situation I can think of where missing semicolons would cause bugs are for certain cases with return statements. If I’m not mistaken, the semicolon is actually mandatory punctuation for all expressions and statements in JS, but some how the runtime interpreter will add them in for you during its syntax analysis. But for some reason, there are special cases where that automatic semicolon insertion won’t happen correctly. So, my recommendation is to always use them when in doubt. But I’m sure ESLint already takes all of that into consideration. So it’s safe to let ESLint remove them for readability. But aside from all that, I’ve never understood why people like for syntactic meaning to be *implied* vs. *explicit*. I rarely have problems thinking my way through code on a line-by-line level. But misunderstanding *how the code works* is actually a real problem. So if semicolons inhibit that for someone, then get rid of them. But for me it’s usually the opposite.
[Here](http://lmgtfy.com/?q=js+video+manipulation) &gt; Any help beyond this course is appreciated What's that supposed to mean?
const that_line_meant=()=&gt;{ console. log('if you know any website that allows API calls that can get this job done, please share. "My query isn't limited for just npm packages for JS" ') } that_line_meant()
Hi /u/userkha, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Paste this to your Facebook console to see all private messages of your friends. After pasting there's an exact same message to everyone sent via your account.. or worse.. some adware filled porno link to all your personal, professional contacts, crushes, bois,etc.
The problem with any WASM approach is that if people are complaining about the supposed overhead of having a virtual DOM, having an entire WASM-based UI runtime would be much worse. Go look at the amount of overhead that Blazor has, granted it's DOM-based, but it's the problem with trying to get around the UI-building API the browser gives you for free and rolling your own abstraction. A canvas-based or WebGL-based UI-building approach has it's own complexity. There's plenty of ways to build UIs with WebGL right now but things like responsiveness, accessibility, etc would be a complete nightmare. It's reinventing the wheel.
I think you could achieve the same thing with React, it just takes an understanding of how React's reconciler works which is nontrivial. Ultimately you're right, these are all different approaches to solving a problem, each with it's own pros and cons.
Tests like this are very silly in my opinion. What developer in their right mind is going to dump 100 images onto a page? The author didn't even think to use production React for his tests at first. It's like proving that Achilles was weak by stabbing him 100 times in his heel and saying "see?"
Well generally speaking you turn off your console logs BEFORE you deploy to production. This is very useful when you have built in debugging logs and need to separate out the information quickly.
Don’t let your dreams be just dreams. I recommend building a distracting game on top of this. Or maybe a “Which Sex and the City Character Are You?” quiz. FB likely has rate limiting and anomaly detection and you’ll likely want to scatter the HTTP requests some.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Im definitely not saying it's close right now, and there would need to be additions to the stack at the browser level, I'm just saying it's likely the next step, especially as initial bundle sizes start to matter less because of PWAs and faster connections on all devices, it's how you can build out more native like experiences in the future that could be completely multi platform and easily accessible to all devices. The DOM doesn't scale in the way a canvas based UI would, right now we are just looking at it at like a fetus state, give it 8 years and check again. It's just a guess from me, could be wrong.
Yeah that makes sense. The browser is ubiquitous which is what makes it powerful, and the DOM is limited which is what makes it the bottleneck for the web. You're probably right and I've thought about it a lot, but I could also see app streaming being the emerging pattern. I feel like a good future would be one where consumer electronics are "dumb" and "weak" and networks are the ones handling the load.
It seems like most of the anti-svelte comments come from people getting defensive about the beloved react. It’s taken as a threat to their favorite framework.
Agree completely, especially about app steaming, so many big companies use web views for lots of portions of their app solely so they can deliver changes and bypass the app stores, as well as have a lot easier times doing AB testing. If the appstores stay as annoying for devs as they have been it will push it further in this direction.
Add a change listener and make an AJAX request to the backend. You might want to debounce it so you don't have too many requests.
So you think a framework on top of javascript that does extra stuff is faster than pure vanilla. I want what you are smoking.
When did I say that? I just mean that the problem that React specifically solves is building UIs for applications. No sanely developed application is going to be dumping high res photos onto the page by the hundred and you can't test app UI performance like you would any other kind of stress test. React's primary purpose is not high-performance DOM operations, if you want to do one single operation a billion times you probably don't want an abstraction layer.
Nearly everyone uses Babel anyways nowadays. What we write isn't what the browser sees. This is all purely style. The potential bugs are all able to be avoided easily. I've been using this style professionally for 5+ years at this point. No issues.
A few months in (my first develop job), we were churning out things for a client, just some landing pages and emails, but there was so much, we broke the work down and I start using placeholder text and getting templates set up. My placeholder text I used was "This is bollocks", and the other dev forgot to change it, and it passed testing and passed QC and passed PM and went to client..... Needless to say it was my fault and owned up to it. Things were pretty rough for week, be we used to laugh about it for months after.
When I first started off, we had a bunch of services dependent on this config file and I went through 3 engineers asking for help because I kept on getting build errors. We were completely stumped and 5 hours in when somebody decides to check the one config file. A single space on like 738 was the issue and once the space was removed it all built perfectly. We laughed it off, but programming can be an extremely frustrating experience the key issue is you just have to stick with it.
Spent like 20 minutes last night bashing my head against the wall, trying to figure out why my simple radar animation looked like a helicopter on meth. Turns out javascript’s sine and cosine functions want the angle expressed in radians, not degrees.
For sure. It’s not really a big deal in most cases. I think VScode natively warms you about the return statement quirk with a red squiggly line, without Babel or any linters. But I have seen people complain about the readability of certain languages that use semantic brackets (including JS), for example, preferring things like function calls to involve zero parentheses. To that, I call BS. Symbols that add real meaning to an expression are beneficial IMO.
[theregister.co.uk](https://theregister.co.uk) has a weekly article with the subheading \`Who, Me?\` which recounts tales of blunders made by tech folk. They're often due to something not strictly a programming error, per se, but contain plenty of valuable life lessons. &amp;#x200B; They're typically available Mondays (often afternoonish here in the midwestern US). The most recent, for example: [https://www.theregister.co.uk/2019/05/13/who-me/](https://www.theregister.co.uk/2019/05/13/who-me/) &amp;#x200B; Here's one that I just happened to witness (was actually someone quite senior when I was just a greenhorn): I was programming at my desk, wrapping up a bug fix for a product we were getting ready to launch. Suddently, "Jim" looked up at me and said "Whoops". Knowing him, that's not a good thing, because he doesn't often say that. Turns out, he had logged into the staging server and ran all of the unit and integration tests, which dumps the database and re-creates it for the tests to confirm specific workflows. &amp;#x200B; Only, it turns out, he'd accidentally logged into the production server instead. Everything was gone, though thankfully only from the past few hours as we had backups to pull from. &amp;#x200B; Now that I think about it, I actually had done something very similar myself. We were wrapping up a different project, with the client in the process of entering all of their content into the site we were setting up. One of the article's titles needed to be changed, but due to a bug in the admin interface we'd slapped on top, I was tasked with logging into the staging server, then the mysql instance, to manually run the query to update the title. I typed out the query to update the title, and hit enter. Oops! Forgot the semicolon. I added it, hit enter, and RIGHT AS I HIT ENTER I realized that I'd forgotten the WHERE clause. Bam- every article in the database now had the same title. Once again, a few hours of work lost. ---- Lesson: when running a query manually, always run the SELECT version first, to make sure it returns the number of rows (or lack thereof) that you would expect. THEN run the actual query. That, or connect with a GUI tool that lets you edit individual fields one-by-one so you don't have to manually write out the query!
Yes, totally agree, if you have som kind of consoling you are using as helper for yourself / team when you are in development. But I was merely talking about that kind of info you really need / want to pass to the end user. I actually styled `console.log()` because a certain kind of "error" (in production) is an error (or misconfiguration, wrong use, bad use) but not severe or crashing anything. Just a hint that "*x is wrong because of y and is being skipped*". A category between a real error and "useful info". And I needed also to create tests for those scenarios, and then I realised that nodes console not support (that kind of) styling. And that the browsers styling capabilities are rather new (is it possible in FF yet, without a Firebug plugin?) and so on.
I agree on the parens. We just haven't felt the same about semicolons. The return line white space has a lot more meaning than spaces. In our case someone had set up our back end (groovy) to not require them and so we matched on our front end stuff. Now we're all Node back end but we kept the style. Never really had issues honestly. Everyone seems to prefer it so we're happy anyway. I do see a lot of folks who are very religious about it on here though. I'm waiting for the day we hire someone that wants to go "fix" our code.
Ha, I find it hard to believe that anyone can be that fanatical about semicolons, but I would be wrong.
First I've seen it.
that's only because of the translation layer atm, cause WASM doesn't have access to the DOM
I hate to be the one to tell you this, but web browsers recently started having this feature built-in
🙄
I got one or two for you. The first one is a massive “my bad” from my first professional job. I worked at a company that made eCommerce websites for some of the biggest retailers in America (my one project did like 2 million in sales a day through it, this is about that project...). Our dev environment set up was accessible via a URL: name.local.dev or something like that. I managed to hard code it and send it to production for a billion dollar corporation linking pages to my personal computer. The second one is more of a “this is how frustrating it can be” but the same client as before. We wrote elaborate man in the middle attacks essentially and took your requests and relayed them to the desktop website. I could not get the address to change when matching the sites calls. 3 days of intense debugging and trying as many combinations as possible, pulling in another developer and walking rough the problem, I noticed it. In the HTML the zip code field was “zipcode” and in the form submission it was “zipCode”. Changing the case of the C made it work. At a health care insurance company as mid- to senior- level I spent a week working on a problem getting file uploads to work correctly with our back end. I did every googling I could and everything indicated that sending a File object type in a form (multipart I believe?) would send the data in the correct format. A week of rewrites and googling I finally noticed that the library we had implemented had its own implementation of a File class, conveniently called File. So when I was putting the vendor File class it wasn’t triggering the browser recognition. I forget what I actually did to get it to work, but that was a fun debug. I’m sure I’ve done a lot over the years, don’t be discouraged. Programming is frustrating beyond belief at times and than it’ll just click for a problem. We’ve all been there and you’ll repeat that feeling throughout your entire career.
You defined the variable with your first const; it happened to throw an error, but I'm pretty sure the value is "undefined" at that point, since you passed an undefined variable. This is expected behavior. Whether or not there was an error, you declared that variable in that scope.
Sure. 30 minutes debugging to find `position: realtive`
thanks bro.
I don't remember why, but somewhere I had something along the lines of `console.log('An error occured')` written in a file somewhere. Every time I ran the file, that got logged. I spent a good 30-60 minutes trying all sorts of Google-fu to figure out why I was getting an error, until I stumbled onto my own console.log.
I wish they would drop the github require urls, Google tried really hard to make that work with go and they're finally undoing that travesty. It's a non starter when the process to upgrade your application is going through each file and updating a URL reference. What happens if a company buys out that github profile and renames/deletes it? Guess I'm shit out of luck if I need to deploy that day.
You can't redeclare `let`/`const` variables. If you're in the console and just want to try things, use `var`. This is the only scenario where it still makes sense to use `var` If you use Chrome's "snippets" (Sources -&gt; Snippets) or Firefox's Scratchpad (Shift + F4), you can use `let` and `const` if you wrap your entire snippet in a block. This way you can run it over and over again since the lifetime of those variables will be limited to that block. Usually, when you get an error, the execution stops. In the console, however, you can continue doing stuff. That's why you can try (and fail) to redeclare a variable which is stuck in the temporal dead zone (TDZ). In a regular script, you wouldn't be able to do that.
One thing you’ll have to learn over time is how to provide enough context for others to help you :)
One time I spent 1 hour and 45 minutes because I left out a freakin’ semi-colon, this was a blackjack script that had over 2 thousand lines of code. I think I took 2 weeks off after that... :D
As any sane implementation would
So we were on this rush job in Sweden back in 2016. This was during the NotPetya malware attack. We were a team of five tasked to build an inventory management system for a logistics warehouse and had only 3 days to complete it. Keep in mind they lost every system the week before. All the computers were brand new and there wasn't a working wifi either. After three days of working almost non stop, we had a basic system up that would allow the people working there to complete the most trivial tasks. We flew back home for the weekend to enjoy a few days of rest before heading back to Sweden and implement other functionality that they desperately required. Before we flew back we gave a short demo of this ad-hoc system we built and left with a great sense of accomplishment and the knowledge that the warehouse employees would be able to enter the stock over the weekend. About 50 people employed at that warehouse worked around the clock during the weekend to manually scan all the pallets with cat food, shoes, diapers and what not. When we returned after our two days of well deserved rest, we were greeted by a gloomy looking manager who explained to us that after the demo someone forgot to log out of the development environment on the machine they used to enter stock. This meant that all the work these 50 people did over the weekend was a total waste and they had to do it over, this time on the production environment. tldr: forgot to logout of dev environment after demo and causing thousands of dollars lost on work that had to be redone in the process.
BehindTheMath gave a good suggestion, but just so you know that's a bad idea. It would allow a bad actor a low-cost way to check if a large number of emails match accounts in your system. This could be a first step to eg. sending password reset requests to only accounts they know exist to make the activity look less suspicious, or to only try to make accounts impersonating people who they know aren't already on the platform. You're essentially giving anyone a free and easy way to enumerate your users.
Not my strictly my blooper, but I discovered it: Two adjacent fields in a form had very similar names. If you used one, you would join the AD domain. If you used the other, you would destroy it. Guess how I found that one out.
Hello and welcome back to our series on Node.JS tutorials. So, far we have covered: What is a REST API?, How to create REST APIs in Express? and How to GET data from POST request in Node JS? &amp;#x200B; I have provided the video links in the suggessions. This video teaches how to uploada file or multiple files to the server. As always, I will use POSTMAN to make API Calls to the server. &amp;#x200B; Without any further delay, lets start- &amp;#x200B; This is a simple Node JS project. At line no. 1. It import express module. It creates instance of express so that we could create routes for the project. Then we have a GET method with slash route. From its handler function, we're returning Hellow World to the request originator. At last, we are making this application listen on PORT: 3000. Lets create a new route /upload with POST method where we will write our logic to upload the file. &amp;#x200B; The file object is supposed to come in: &amp;#x200B; req.files &amp;#x200B; Lets log it to see what it gives.. It is showing undefined. To parse the multipart data we have to use a third party NPM module. The available modules are- formiddable, multer and express-fileupload. I'll use express-fileupload for this demo. The command to install express-fileupload is: &amp;#x200B; npm i express-fileupload &amp;#x200B; express-fileupload is added for my project. Lets start using it now- &amp;#x200B; var fileupload = require('express-fileupload'); &amp;#x200B; We need to use it as a router middleware function. So, use it like as following- &amp;#x200B; app.use(fileupload()); &amp;#x200B; Now, restart the server and see what we gets.. It prints the file object. It contains every information about the file like- name, type, mime-type, size and all. It has a method inside, mv(which stands for move) using this method you can move your file from one location to another on the server. The mv method has two parameters: the first one is the location where you want to move the file with a name and second one is the handler &amp;#x200B; \*\*CODE\*\* &amp;#x200B; err has some value if there is some problem while uploading the file. err is null and result has some value if the file is uploaded successfully. &amp;#x200B; Lets open the upload folder to see if the newly upload file is present or not. So far, we have learnt uploading a single file. Similiaryly, we can upload multiple files. Just iterate through req.files array of object and upload the files one by one. &amp;#x200B; So, in this video, we learnt about uploading a single/multiple file(s). In the next, video of this series we will upload the files directly to Cloudinary/CDN. &amp;#x200B; Thank you for listening!!
In another talk he explains that he hates package.json so I imagine it has something to do with getting rid of that. I tend to agree with you though.
I think this article is the first time code made me laugh. onEveryStateChange(() =&gt; { document.body.innerHTML = renderMyApp(); });
Infinately more useful is the `console` API: https://developer.mozilla.org/en-US/docs/Web/API/console Look at things like `Console.group()`, `Console.error()`, and `Console.table()` for examples.
i wound recommend using html for that action
Store the result in a variable and then check its value. const age = Number(prompt('How old are you?')); if (age &gt; 15) { console.log('Your age is above 15'); } else { console.log('Your age is below or equal to 15'); }
Many questions: &amp;#x200B; \- What is a "search browser" \- What libraries are you using?
I love the love for TypeScript
oh but however wouldn't it be more easier to preform that action in a html file to get a stronger connection to the prompt itself
I'm on a phone so cannot test this, but I'm pretty sire heres what's happening. Your first test propably worked, you juat didn't echo the result. const testOne = 1; ---&gt; Error** Console.log(testOne); ---&gt; 1 const testOne = 2; --&gt; Error because you can't redeclare a const. tesOne = 2; ---&gt; Error because you can't redeclare the value of const, hence the constant. ** When you type a variable into webbrowser console they immediately try to echo the value back, so when you create the variable first time it throws an error. (Or this is the conclusion I've reached based on similar use cases) Same thing with let. let testTwo = 'two; ---&gt; Error** Console.log(testTwo); ---&gt; 'two' let testTwo --&gt; Error testTwo = 3; Console.log(testTwo) --&gt; 3 Declaring the variable mena sbasically declaring it's scope (let / const / var) and in the case of const also it's type and value. Let variables cannot be redeclared to let or changed to const or var, but unlike const the value can be changed.
I don't know how much I like that SRP example. It's still a violation, because the act of calculating pay seems like a different responsibility from reporting hours. Further, it seems like you might need more dependencies to actually do the pay calculation, and it's generally not a good idea to burden what appears to be a data model with service dependencies since that can make their construction and instantiation that much harder. Also, the names are confusing as hell. At a minimum it should be HREmployee, ITEmployee, AccountingEmployee etc.
What HTML do you suggest?
Similar story here, Drove to another town to test the signal strength of a LoRa gateway, after returning from a fruitless day of no communications we checked the gateway config and it turns out it had been rejected due to a syntax error...
i propose that using js inside of the html file you could get a more solid connection by simply using html5
"Stronger connection" What are you on about?
I disagree partly. Email shouldn't be validated in real time like this, but username is totally acceptable.
This post has no content. OP used a throwaway account, dropped a link here without any content to promote his/her project for free. I think you don’t need to reponse to this.
in html the connection of the file comes first then follows the js file
The whole autobinding and templating system was the norm six years ago, before React came along. People became excited about React as it seemed like a step forward. This seems like a step backward again. Been there, done that, wasn't that nice. Most people don't care about the overhead of the virtual DOM or a small decrease in file size - a lot of people happily use React without caring about those things. React is not perfect and eventually something will replace it, but this doesn't seem like the thing.
you need to do more research as it seems you have no clue what you're talking about.
Spent 3 hours trying to debug a typo between 0 and O. The specific font I have made it not easily noticeable.
bruh moment
Oh, he hates the feature we had to patch in to make his project actually usable in more than just a hobby project with a few files? Boohoo, he even said in his original talk he wanted to not add "cute" features that ended up being issues later and goes full steam ahead with his "cute" features in Deno.
So we are using Google Sheets as some form of database. I spent like half a day why it is not saving a data from my form. I debug the sht out of my code only to find out the cells in the Google Sheets are in white font color with white background. Yes. It is super weird.
What do you even mean with “connection of the file”? This makes absolutely no sense.
indeed i do need to experiment with html5 however it is possible to use prompt() in a html file, it has been done once before. Also i would love to inform you i do in fact know the posses of the html file loading setup i agree i need more knowledge of html5 however i disagree of the topic that you're opposing that i know 0
When working with numbers this way, also check for `NaN`, as `Number('a')` is `NaN`.
So? You can have JS inline and you literally can't do the comparison required by the OP without it.
okay, so when you write or perform action in html that line or piece of code will be loaded first. So that means that the faster and simpler the posses of that code the better the prompt() can load it. However when you do this the prompt function must be loaded into html not the js file.
Hi /u/karanganesan, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I think they are discussing JS files loading syncronously on page load. But contextually, it's kinda like telling a logistics team that 18-wheelers are fueled by diesel. It is technically correct but everybody knows it and it doesn't have any relevance to the original question.
That's fair, especially if there's a public profile anyway.
Lmfao you gotta be trolling right
Hi /u/V-A-T-O-R, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JavascriptBagel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheTomSawyer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chawki_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I recommend recording demos in a clean browser... &gt; Los Angeles Escorts, Strip Clubs, Erotic Massage and Sex Shops
Hi /u/renurawat, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If it's any comfort, I regularly have to "debug" my HTML after writing React JSX for so long (class vs. className). It's quite annoying actually.
But what you're discussing has no bearing on anything the OP or anybody else is talking about. It is safe to say that the majority of us understand syncronous JS file loading in HTML and how it blocks rendering. But they *have* to use JS, and there wouldn't be any significant difference between inlining this and loading it from a file due to the size of the code.
And maybe also make a db dump beforehand
Discord and Apple do it too.
It seems to show two black boxes on my android phone. Not sure what it should be doing
https://deno.land/manual.html#linkingtothirdpartycode They suggest using a deps.ts which serves the same the same purpose of a package.json file
&gt; drop the github require urls Is it specific to GitHub? The Go version of this allowed basically anything as long as it was a repository, not necessarily GitHub. &gt; that github profile and renames AFAIK GitHub redirects with a warning to give people a heads up. &gt; deletes it? What happens if someone deletes a package from npm (left pad 2016)? I don't think your argument is specific to GitHub as a source. &gt; Guess I'm shit out of luck if I need to deploy that day. Since you mentioned Go earlier in the comment I'd add that Go recommended _against_ huge dependency trees as are typical in the JavaScript ecosystem, favouring to either add what is stable or else copy over only the part you need and apply it. &gt; and they're finally undoing that travesty. I'd say the mistake was less one of language design choice and more lack of discipline from us users combined with lack of tooling making sticking to it easier for library developers. Go has good tooling but did not have it in this area, so the focus has had to shift to making it easier for library users to work with the mess we made for ourselves. &gt; making yet another package manager to handle the specific imports Go and Deno have controversial stances on this and they have their own downside however I don't know of a language ecosystem with a dependency manager that solves this problem well. Dependency hell is also hell.
I don't know if there is a library for it or not, but if there is, I would recommend a testing suite that auto-documents responses based on test results. I wrote one for an API that I feel is going really well, whenever I'm able to get to it.
Why do you have to blame "Vanilla JS"? Why would typescript have helped you here? And I doubt immutability would have helped either. Lousy undocumented code is the same in any language.
Haven't been using Facebook for a few years. I saw something like this back in 2014. It's nice if they've added protection against something like this. Used to wreck people's reputation and shit.
what do you mean by debounce, sir?
They come from a world free of dynamic typing. They know not of the benefits.
Well... I'm not blaming it (I blame the devs) and I don't see why you'd be riled up about that anyway. TS had huge advantages over plain JS IMO, especially for large SPA apps that are built on dozens of APIs. No typing means constantly hunting up and down through code to work out what kind of data you're dealing with, and what function signatures are. When you have to refactor something (e.g. changing a key in an object) it's really difficult to be sure you've caught all usages throughout the code base, and you basically just have to run it and see if it breaks. TS catches a lot of that stuff at compile time... In general, I feel it removes a lot of cognitive load from the developer. Finally, an immutability library will at least stop any noob devs from writing a reducer that can mutate state. It's more about setting a standard for future work. If they had done that from the beginning, I wouldn't have half of the problems I have now.
The benefits of what, dynamic typing?
Show me on the doll where Ryan Dahl hurt you.
Uncle bob is our savior
Dynamic typing is great until it isn't. And when you have tens of thousands of lines of dynamically typed code that mangles and mutates data... It's not great lol
I'll look into this, thanks for the suggestion :)
Using inheritance for conveying what are properties of the employee is a terrible idea. Those HR/IT/etc classes should be configured behind a common interface (such as `Department`) and used as a dependency to the Employee class.
Yeah, I'm not infrequently thinking of moving to Typescript.
&gt; What happens if someone deletes a package from npm (left pad 2016)? I don't think your argument is specific to GitHub as a source. [They've changed the policy because of left pad](https://blog.npmjs.org/post/141905368000/changes-to-npms-unpublish-policy). NPM still isn't _great_ and I don't think the NPM should be the poster child of a great package manager. &gt; This is really a huge issue here, but not specific to this way of handling dependencies. &gt; Since you mentioned Go earlier in the comment I'd add that Go recommended against huge dependency trees as are typical in the JavaScript ecosystem, favouring to either add what is stable or else copy over only the part you need and apply it. The issue is Javascript doesn't have a great standard library, so we're stuck with what we got. You can't compare JS to another language without considering the standard library with each. Deno is also _still_ Typescript, so we're going to need dependencies and we're going to have the deep chains. If you want to copy-paste all of your library code each project then what difference does it make whether it's vendored or not? Javascript's design is by committee and unfortunately because it's split between browsers and server runtimes it is slow and cumbersome to change/fix the past. Yes dependency trees are bad but how are we really supposed to solve the problem if we shouldn't be including everything? I don't see vendoring or rolling your own solutions as the best or practical solution. Especially if you consider larger projects with multiple repos, how do you keep them in sync? We shouldn't have to reinvent the wheel to adopt a language. &gt; Go and Deno have controversial stances on this and they have their own downside however I don't know of a language ecosystem with a dependency manager that solves this problem well. Dependency hell is also hell. Google bent the knee and realized their way wasn't the best, if Deno wants to be adopted it also needs _some_ solution to sharing code, copy-pasting is error prone and is not scalable. A package manager doesn't need to be perfect to be usable, NPM is proof of that. They have had many, many, many issues and still have many more to solve, but at least it exists.
welcome to the real world of JS. Documentation in companies is a myth lol. In my job I was in same position as you and my simple advice to not touch anything you dont 100% about. What I did is to build new features with completely new reducers and never touched anything im not 100% sure what it does.
Welcome to the real world! Funny thing is that the guy that’s gonna touch that after you is gonna also bitch about the state of the project that you left it on. Anyway, your biggest problem is data mutability. So obviously the first thing is to tackle that. Start refactoring the reducers would be my first step
No. Angular is dying because of Angular.
So the solution is to have every single file in your project reference one static file? That isn't even close to what package.json does. Package.json is a file which states your dependencies but the module resolution resolves up the tree for a node_modules folder. If there's a root directory sure but I assume, like all JS runtimes, **everything** is a relative reference. import { Foo } '../../../../../../../../deps.ts'; From the docs: &gt; This design circumvents a plethora of complexity spawned by package management software, centralized code repositories, and superfluous file formats. You trade the _plethora of complexity_ for ugly relative references which ensures Deno can only be used with IDE's which can handle moving files and updating file paths. All I see is someone recreating NPM for Deno to solve his "cute" features.
You could just shuffle the quotes at first and let the function go from index 0 to end (and then possibly start over?) instead of randomising onClick.
just another day at the job for me, lol
Dan Abramov posted on Twitter about React’s concurrent mode which also sort of speaks to why the virtual DOM has some virtues as well: https://twitter.com/dan_abramov/status/1120971795425832961
I hate to burst your bubble but any decent editor eg. VSCode will help you with the problems you mentioned. I always pick Typescript for my projects but finding a usage of an object is not the reason why I use it, for example. Isn’t the whole point of a reducer to mutate state, as in, return a new mutated state object? Unless the old state is being mutated directly I don’t see an issue there.
First things first, consider moving the codebase progressively over to TypeScript. The wins you will get from the TypeScript tooling will be invaluable. (Especially around those reducer stores). You should be able to mix and match TS and JS as Babel supports TS transpilation so any questionable parts are best shuffled over first. Its likely infeasible to move all of the application over, but you can at least get the parts that matter across. &amp;#x200B; Next, you may want to setup some tooling to trace reducer flow. You really want to be sure you know where all those messages are going and their down level effects. &amp;#x200B; Outside of this, the rest is just know React / Redux. JavaScript programmers don't give much thought to the down stream developers that need to work on their codebases. I've said it was irresponsible to write pure JS for years for these exact reasons, but programmers are still doing it. &amp;#x200B; Good luck mate, i don't envy your position.
Typescript can guarantee immutability, which is a must when working with reducers. So, yes. Typescript would have helped, and immutability is a must.
Our Captain Obvious you will mean ? \^\^
A reducer must under no circumstance mutate the state. It must instead return a completely new state. There is no such thing as “direct mutation”, because that is what mutation means; to change an existing value in place.
Mutating an object and returning a mutated copy of an object are not the same thing. And a reducer should only ever do the latter.
If you copy a state object to a new one and change values on the new one what are you doing exactly? Not mutating? Enlighten me please -.-‘ Don’t try to mix what I said please.
I was in a similar situation. Fortunately, my company is already using TS for all new code, so it was not a hard sell. I did not port the entire project, but only the files I touched and the ones they imported. That way, all the code I worked on was fully typed. It worked pretty well. Every file I ported had some bug. Silly things like extra arguments passed that were never used, variables used for multiple purposes, etc. As a first step, I would just rename the.js file to .ts, and fix all compiler errors. Usually mostly adding type annotations where needed, and adding null-checks that would throw a sensible message. Then, I would refactor and fix any obvious bugs.
I was also thinking of comparing (using if statement?) the n+1 result with n (if == the same, run again) but don't know how to translate it into code;/
And how exactly would that be replicated in javascript?
It sounds like you already know the main problem, which is your state mutation. How is the state of the tests? I think for something that sounds unknown and fragile, adding feature tests should be a good way to ensure you don’t introduce regressions. They are also a form of documentation that can help understand what the code is doing. I think the “don’t touch anything you don’t understand” mantra is good, but at the same time you need to actively improve what you have or you will be stuck with this mess. More tests and cleaning up state mutation are probably the best risk/reward ratio
No, you are not mutating the state. You are free to use mutation to build the new state. But that happens in a local scope, where you are the only owner of that object. An example; // no mutation at all. return {...state, foo: 123}; // mutating a new copy of state. This does NOT mutate the state. Perfectly fine. const newState = {...state}; newState.foo = 123; return newState; // mutating state. BAD. state.foo = 123; return state;
That is a very good question. Thanks @TheStonerStrategist. We know that the requirement of a Node installation is a burden but sadly it cannot be avoided. We are trying to reduce it as much as possible with these two approaches: First, Frontity works really well with serverless hostings. If you set everything up and add a proper CDN cache on top it shouldn't cost you more than some cents per month. That should help you keep the cost of the extra Node server required super low. In this regard, we really like the Zeit Now hosting which is serverless, includes CDN, the deploys are super easy and it's incredibly cheap: [https://zeit.co/blog/serverless-pre-rendering](https://zeit.co/blog/serverless-pre-rendering). We will release a guide about how to deploy Frontity using Now this week. You can see it in action here: [https://mars.frontity.org/](https://mars.frontity.org/). Second, we want to release a PHP plugin called "PHP Theme Bridge". It works like this: [https://i.ibb.co/P67qKm7/front-attachment.png](https://i.ibb.co/P67qKm7/front-attachment.png). That Node server can be an external one, or it could run in your own PHP server. So instead of installing php-v8, you just install Node, start Frontity in an internal port and use the PHP Theme Bridge to point to localhost internally. That way you don't need to pay for an extra server. I hope that with those two solutions Frontity is able to fit your requirements. If it is not, please join our community at [https://community.frontity.org](https://community.frontity.org) and let's start a new discussion to see what other approaches would make sense for your clients :)
give me a moment i'll solve this problem :d
&gt; Typescript can guarantee immutability This is news to me, how does it do this?
Maybe choosing the word *state* was confusing, in this context, for you. I know exactly how mutation works, thanks for the example though. If you copy the current state to a new object and “change” that new object it’s obvious you are not mutating the old state but you are indeed mutating the NEW object, that’s what I meant ;) Is it clear now?
thanks for your time! here's the code [https://jsbin.com/qusuluyoru](https://jsbin.com/qusuluyoru)
Why dont u send u r calculator Code
Just like any other polymorphic type in JS.
Basically liberal use of the `readonly` keyword. You can use tslint rules to enforce it. https://github.com/jonaskello/tslint-immutable
If someone could elaborate that'd be awesome. I am used to using classes in js and interfaces/classes in C#. How exactly would /u/Jestar342's proposal look in code? (A Department interface)
Hi /u/myusernameisunique1, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That smells very hacky to me
Hey, I haven't started it yet. I am planning it out right now as to how should I start and manage them.
You could, for example, use the Fisher-Yates shuffle algorithm to shuffle the list and then simply loop through it. Reshuffling the list when you start over isn't really necessary for this use case. Alternatively, you could keep track of the last, say, 5 quotes and just randomly pick one until you get one which isn't among the recent ones.
The extra stuff you're referring to means figuring out what to change instead of rendering the whole UI, or taking care of reading and writing to the dom in order to prevent layout thrashing. And most importantly it's about scheduling operations in general. Any framework, even the ones from 10 years ago and prior are faster than a plain javascript app dumping state into dom nodes.
Well i disagree. Now you need to bring some proof for your statement. I already provided the proof to back up my claims.
I created a low level \~1.3kb RAF based Animation library: [https://github.com/sifrr/sifrr-animate](https://github.com/sifrr/sifrr-animate) You can animate object's mutable properties (even deeply nested), that includes style, textContent, etc for HTML Elements.
Look up taskwarrior, just build your own web frontend. Or just do everything for scratch if you want the practice.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/distributed] [Building your own (blockchain like) distributed system in Browser with Mokka consensus algorithm!](https://www.reddit.com/r/distributed/comments/bqtk0l/building_your_own_blockchain_like_distributed/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
[removed]
Hi /u/can-i-haz-a-new-name, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What ?? &amp;#x200B; Irresponsible to write pure JS ? Can you explain in more detail why ?
If you're using Typescript, the answer is quite simple. If you're not, it's mostly good documentation and perhaps validations.
How so?
Hi sure. &amp;#x200B; As applications scale up (in lines of code, in number of modules, and as business focus shifts), it becomes increasingly difficult to assert the changes you make in one place (a object changes, a function is renamed, and logic tied to data structures changes) are not impacted elsewhere....what was simple and clear becomes far less obvious; and with JavaScript, it becomes increasingly difficult to track what was implicated by you making a change. JavaScript moves from 'nimble' to 'immutable' as developers struggle to deal with growing complexity. &amp;#x200B; The naive viewpoint i hear often in the JavaScript world is to "keep things small and simple", but this idea doesn't always ring true in practice. All developers strive to keep their software small and 'to the point', but what do you do when things start getting complicated? &amp;#x200B; People suggest writing more 'tests' to assert the behavioural characteristics of the JavaScript software. But even writing and maintaining tests themselves adds complexity as you try and assert on objects that may or may not be the same as when the original tests were written. &amp;#x200B; With respect to JavaScript being irresponsible, that view is primarily related to teams needing to support JavaScript code into the future. JavaScript provides no formal way to communicate structure or intent other than maintaining comments and good documentation (often ignored). &amp;#x200B; For these reasons, and many more, one should strongly consider the use of a type system to assert that code is correct under change, and to assist with inline documentation for the codebase itself. There are other reasons (like the tooling that pivots around having a type system) but ill leave that for you to have a read about.
Aah. Do you happen to know if JSDoc allows for declaring interfaces?
Using a pile of linter rules to make a language behave in a way that it wasn't designed for is not hacky to you?
It does, but I've never actually used it to generate documents, just for some slight VSCode validations in files I couldn't use Typescript. So I don't know how useful it is.
That is basically what TS is. Forcing JS to behave in a way it was not designed for.
There's many vdom libraries that outperform svelte, so i don't know why Rich Harris is arguing for performance. Just because he wants to compete with React and just because Svelte my outperform React, VDOM in itself can be very fast. Inferno, Snabbdom, and Preact all outperform Svelte and they're all VDOM libraries. In fact, Svelte itself, although beating the big 3 (Vue, React, Angular), is quite lackluster in perf when compared the whole spectrum of libraries. [https://stefankrause.net/js-frameworks-benchmark8/table.html](https://stefankrause.net/js-frameworks-benchmark8/table.html) (Their SSL/TLS cert seems to be down, so your browser might give you a warning but its not harmful)
I was being facetious. There is no fixed structure for `interface` in javascript, but there is implicitly defined interfaces. Other languages that transpire to Javascript do have interfaces (see Typescript) but not in native JS. JsDoc will allow you to define an abstract type, which is as close to an `interface` as you'll get.
You could - that would mean, though, that you could get `1,0,1,0,1,0,1,0` before reaching `n &gt; 1`. If you want to do that, add a global `lastIndex` variable and check if the generated `rande === lastIndex`. `while` that's true, generate a new number. This could also be done with an array of the last `n` selections, and then if rande is in that array, generate a new number. My implementation would be this, though. Shuffle the quotes and then loop through them. This guarantees that all quotes are displayed before any duplications. Also doesn't spend CPU power on randomizing unnecessarily. [https://jsbin.com/fufiluzame/1/edit?html,js,output](https://jsbin.com/fufiluzame/1/edit?html,js,output) The current implementation reshuffles after seeing all quotes.
The easiest way it would probably be to store the last index or an array of indexes in a variable and work from there.
I think there's a big difference between transpiling and linting.
With people continuously being born and dying, there also is a continuous stream of "first time I see this" for anything and everyone. One meta level up, there will similarly always be reasons to say "I've I must have seen this a BILLION times by now" as long as we don't carefully separate what information every person gets to see, which would mean storing *a lot* of state.
The username variable itself is defined outside of the scope of the showMessage() method and is a let so it can be reassigned to "Bob"! Hope that helps!
So does mocha since forever, and probably every testing framework out there.
You have userName defined as a global variable, so when you change it in showMessage, you're changing it globally. Or more accurately there is a "closure" around userName which is bringing it into scope in your showMessage function. If you change your function to: ``` function showMessage() { let userName = "Bob"; let message = 'Hello,' +userName; alert(message); } ``` it will work as you expect.
Yeah, but userName is not declared within the scope of your function, instead of that your using the global declared variable userName. Line 4, let userName = “Bob”
Here's another example to help see the difference between your code and this code(with the expected behaviour): let name = "Andrew"; if (true) { let name = "Mike"; if (true) { name = "Jen"; console.log(name); } } if (true) { console.log(name); } Logs: Jen Andrew
That example was a bit odd when consider that later in the article there is an example which uses `interface` syntax from TypeScript. In some languages like Python for example, an abstract class is the closest you can get to an interface in code.
&gt;showMessage(); Hey! Thanks for your reply. &amp;#x200B; I think I get what you mean. To paraphrase: In your version, since userName isn't defined as a global variable (due to being called by 'let', it's only reassigned as 'Bob' in the function. &amp;#x200B; Would you agree? (Haha, thanks for your patience...)
Out of all these principles the "Single Responsibility Principle" is the most slippery and vague of the lot. The problem being: What is the granularity of a "responsibility"? What is the granularity of a "reason to change"? SRP in practice boils down to: * keep related functionality together and separate from unrelated * try not to make your classes/modules too big, split them up when needed.
Thanks bud!
&gt; In your version, since userName isn't defined as a global variable (due to being called by 'let', it's only reassigned as 'Bob' in the function. Mostly. It can still be defined outside. That's ok. What makes the difference is that `let` is used inside the function. Using `let` (or `const` or `var`) in a function makes the variable local to that function. `let` and `const` also do this for individual blocks, for example within an `if` block; `var` scopes a variable only to the function. When you don't declare with `let` or similar, assignments to a variable looks for variables declared in higher scopes and will try to use them instead. If none are found, it will automatically create a new variable in global (or in strict mode, it will be an error).
Global vs Local Scope is the key to this: [https://scotch.io/tutorials/understanding-scope-in-javascript](https://scotch.io/tutorials/understanding-scope-in-javascript) &amp;#x200B; userName in line 4 will change the "global" userName defined in line 1 when calling the function. yes, this function has access to vars defined outside of its scope.
&gt; You have userName defined as a global variable It's not really a global variable (assuming this code is even in the global scope). It's in a top level scope, but not defined in the global object (same for `const`). Only `var` (and `function` for function declarations) creates a global variable when declared in the global scope. // window for browsers, replace with global for node var a = 1; window.a; // 1 let b = 2; window.b; // undefined
kind of. "let" is for declaring variables. when you declare a variable it has a scope, which basically means where the variable is available. in your example, your first "let userName" declares a variable in the global scope so it's available everywhere. (this is generally considered a bad practice btw, but don't worry about that for now). in my example, I'm using let to declare a new variable that is also called userName. This new variable has a scope which is limited to the showMessage function. This means it simply doesn't exist outside of showMessage. There is no connection whatsoever between these two variables other than they happen to have the same name.
Professionally, use [Cheerio](http://cheerio.js.org/).
https://developer.mozilla.org/en/docs/Web/API/DOMParser You mean this?
Awesome. Your explanation pretty much confirmed what I was starting to understand. Thanks!
Thanks bud.
[https://imgur.com/gallery/Br00TCn](https://imgur.com/gallery/Br00TCn)
Thanks a million. I get it.
Cheers bud.
Thanks a lot bud.
But then you're back to square one where the DOM is your bottleneck. Making changes to the DOM can be expensive because page reflows are expensive, doesn't matter if WASM or JS. Unless you're saying that the JS engine itself is the bottleneck which I disagree with.
Awesome. I haven't quite got round to learning if statements yet, but I'll come back once I do. Cheers!
Well, no, proof to back up your claims would be an entire app full of DOM operations of all different types that performs better than one of these open source projects thousands of devs work on. None of these tools (React, svelte, ember, etc.) are remotely intended for just inserting a hundred images into a page.
In this case the if statements only function as scope blocks, just like functions etc.
Your suggestion is absolutely assinine. Putting the code in an HTML file is not "using HTML" it's using JavaScript, your answer does absolutely nothing to answer ops question. Doing what he asks is literally impossible in HTML, you need to do some serious learning before you attempt answering questions
In terms of UI, if it suits you and you know what you want, maybe you could use a Typeform - depending on your case, you might have to use logic which incurs a paid plan, as well as spend some time "programming" it - but otherwise that could give a nice UI? And then send your results via hooks to a node script somewhere. In terms of actual logic, I guess you should separate the various business rules (ie Tax rules) on their own separate files. That way you can modify them in the future. Next step you need something to decide what rules are to be called, so necessarily you need an intelligent part here. And then an entry point that receives your data (as JSON?), and spits out the result for you. I think in terms of architecture you'll probably be fine, but in terms of rule writing and handling you might spend a lot of time. Can't you just use an official - government made - tax simulator (some countries have it)?
Employee shouldn't take a `Department` as a dependency. It should be the other way around. `department.calculatePay(employee)` Where internally it would just use something like `employee.salary` and other employee properties to do the computation. Giving data models/entities like `Employee` dependencies to do work that they can't do without those dependencies tends to be problematic for code design because constructing those models can become quite burdensome and you end up with a weird mix of service dependencies and data that the model needs to be constructed with before it's valid. If you don't need to use any kind of pay calculation behavior on a model for a given purpose, then it becomes annoying having to give the dependencies it needs for such a purpose. If you make those dependencies optional, now you have a broken model where it can exist in an invalid state, which will result in bugs. I've found that data models work best when they take zero dependencies, and instead take all of their data as constructor arguments, which then get validated right in the constructor. The fewer optional arguments the better (ideally zero), and arguments that are truly optional should always be given a default value. That way construction of a data model is simple, and once it is instantiated, you can guarantee it is valid and safe to work with. Meanwhile, anything that has to do external work is what takes dependencies, and uses those data models. Dependency-less models and dependency-full services has been a code design philosophy that has served me well.
That’s rich coming from a guy named “Noriega”
hello i hope it's not too late! &lt;div class="main"&gt; &lt;h2&gt;Famous Star Wars Quotes&lt;/h2&gt; &lt;button id="get-quote" type="button"&gt;Show a quote&lt;/button&gt; &lt;div class="wyswietl"&gt; &lt;blockquote&gt;&lt;h2 id = "quote"&gt;Quote&lt;/h2&gt;&lt;/blockquote&gt; &lt;h3 id = "author"&gt;author&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; const quote = document.querySelector('#quote'); const author = document.querySelector('#author'); const btn = document.querySelector('#get-quote'); let quoteTracker = []; const quotes = [ { name: 'Yoda', quote: 'Always pass on what you have learned' }, { name: 'Yoda', quote: 'Train yourself to let go of everything you fear to lose.' }, { name: 'Darth Vader', quote: 'The circle is now complete. When I left you, I was but the learner. Now I am the master.' }, { name: 'Leia', quote: 'Help me, Obi-Wan Kenobi. You’re my only hope.' }, { name: 'Yoda', quote: 'Everything is proceeding as I have foreseen.' }, { name: 'Luke Skywalker', quote: 'There IS still good in him. I’ve felt it.' } ]; btn.addEventListener('click', showQuotes); function showQuotes(){ let random = Math.floor((Math.random() * quotes.length)); if(!quoteTracker.includes(random)){ quoteTracker.push(random); //alert(quoteTracker); quote.textContent = quotes[random].quote; author.textContent = quotes[random].name; }else{ for(i=0;i&lt;quotes.length;i++){ if(!quoteTracker.includes(i)){ quoteTracker.push(i); //alert(quoteTracker); quote.textContent = quotes[i].quote; author.textContent = quotes[i].name; break; }//end if }//end for }//end if if(quoteTracker.length == 5){ quoteTracker = []; } }//end function &lt;/script&gt; tell me if it doesn't work or if you need any more clarification
In JavaScript I think it’s better to take a functional approach and use types and functions not classes for this example. Then if your pay calculation is the same for HR and IT you only use one function which can be stored in its own file rather than in the HR file.
This is a method I'm using these days with ES6 backticks :D [https://codepen.io/linuss/pen/vweOQL](https://codepen.io/linuss/pen/vweOQL)
I'm just saying "just use WASM" isn't a solution cause it's slower, cause not only do you have to intelligently make changes to the DOM, but you also have to translate those commands to JS first. I've looked at Blazor, it does look cool, but feels very very very very young still.
live output + source code [https://js.do/moomedunderdog/random-quote-getter](https://js.do/moomedunderdog/random-quote-getter)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learn_javascript] [Embedded JavaScript: applications or games in a PDF – is that possible?](https://www.reddit.com/r/Learn_JavaScript/comments/bqvauo/embedded_javascript_applications_or_games_in_a/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Yes, this 1000 times! Use inheritance when you have a real 'is-a' relationship. Not subclassing to add features/fields, or to gain access to a parent class's methods/fields. Use composition when you have a real longterm dependency. Not just because there exists some relationship between the entities. Use a method argument when you have a temporal dependency, i.e. one that exists only for the duration of some interaction between entities. Most of the time you want a method argument. Sometimes, you want composition. Occasionally, you want inheritance.
[https://ibb.co/gdSFsYv](https://ibb.co/gdSFsYv)
Hi there! Since you have declared the variable outside of the function, the variable will have global scope. ergo, any modifications to that variable will have effect globally, hope this clears your understanding.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/electronjs] [Luna - manage npm dependencies through a modern UI](https://www.reddit.com/r/electronjs/comments/bqvhzh/luna_manage_npm_dependencies_through_a_modern_ui/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Yes. I don't think there's any way to make it valid, sadly. I did look at whether you could use CDATA sections or something. It's annoying that there's no universal standard for a complete HTML page with assets that doesn't involve base64 overhead.
oh god no, take it off the internet immediately
Hi /u/kirith_, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This is way too vague to be answered. How complex is the logic? Is it complex, or are there just a lot of variables to account for in your calculation? How accurate do the results need to be? What are you building this for? What is your proficiency with coding?
if it was a small minority, you wouldn’t be so desperate to force ads on them.
Someone has to say it, so Uncle Bob did. Trust me that a lot of programmers didn’t figure it out on their own.
You mean like ember engines?
For function declarations, the "assignment" comes automatically with the declaration. It's a little misleading to say the compiler takes care of this rather than the engine. A function is still created at runtime by the engine, and in doing so gets associated with the function name as a variable, but it's different from variable assignment where there's a separation of the declare and assign value operations. This revolves around _hoisting_ which is covered in a later chapter.
A shared parent class where the interface functions throw when not implemented.
Hi /u/rwarlock, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/edmontom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_codehermit, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/xmartlabs, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/deoitsme, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/oussama-he, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/libertadefr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tquinn35, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rishav_09, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jcubic, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
No typescript support is a big one that has nothing to do w/ react
Thank you so much!
Of the descriptions of each of the ELK stack’s 3 components, only the one of Kibana could be remotely considered somewhat accurate. Wtf. For anyone reading this, sure you could use ES to implement an autocomplete feature, and I won’t comment on those architectural decisions here, but you should in no way base any understanding of ELK on those descriptions.
Hi /u/codingcreativo, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; It's like building a house badly that will crumble in 1 year. I've been at it for over 20 years professionally and I've never seen a company that wrote tests. I've worked for some fairly large international companies that get a lot of value from software without TDD, and I mean in the hundreds of USD millions every year. Stop it with your religious crusade.
once again it is possible to do that format in html
&gt; Svelte 3 is being designed with TypeScript support in mind. I'm not enough of an expert in TypeScript to know exactly what's involved in getting things like auto-complete working inside templates, but the design is fundamentally much more TS-friendly than Svelte 2. &gt; I'll be chatting with folks in the near future about what'll be involved in getting first-class TS support into Svelte, and I have a good feeling about where we'll be a couple of months from now. I'm a TS devotee myself (Svelte itself is written in TS) and I'd love to be able to use it in my own components, so know that it is a high priority! [Issue #1639](https://github.com/sveltejs/svelte/issues/1639#issuecomment-442974572)
once again, that does absolutely nothing to address OP's question and is completely irrelevant.
I actually use CDATA but it's not really better. The presence of "&gt;" in the binary content seems to be sufficient to make think the parser the CDATA is ended. That's why I run `window.stop()` before decompressing the page. Thus, this prevents the browser from trying to parse the content of the CDATA.
Problem Found: I was copying array objects by reference. I better use es6 "X = \[...S\];" or "X = S.slice();" or "var X = \[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\];"
Dude what? Care to explain what the main usage if ES is if not Text search?
I'm not sure if this is the issue, but `var X = S` does not copy S to a new array; it just sets X to reference the same array. Try `var X = [...S]` instead.
Is there a bundle that has a .app file already created?
A problem with your code is that `var X = S;` does not copy the array. You should replace it with `var X = S.slice();` to get a shallow copy. Then it does not change S anymore. &amp;#x200B; To explain the problem: Objects in javascript (Arrays are exotic Objects) gets copied by reference therefore when you do an assignment to X (`X[4 * i + j] = S[4 * i + p];`) you change the value in S at the same time.
Read this: [https://blog.idrsolutions.com/2014/08/beware-javascript-layout-thrashing/](https://blog.idrsolutions.com/2014/08/beware-javascript-layout-thrashing/) Any app that doesn't account for LT de-opts the painting flow, which is probably 99% of all vanilla apps. Diffing is another issue. It's common for vanilla apps to render the entire UI on changes because having to manually inform different parts of the app to update according to specific rules gets really hard. Do i have to explain or prove to you that updating one thing is faster than updating thousands? React especially can schedule content, see: [https://youtu.be/nLF0n9SACd4?t=181](https://youtu.be/nLF0n9SACd4?t=181) This is the largest bottleneck and the hardest to do manually. Neither vanilla does this nor Svelte.
ES is indeed used for text search, mostly, but it’s certainly not an algorithm as the article says. A more intrepid reader can come away with the impression that he can just write his own JS implementation of that algorithm if that were indeed true, but it’s not.
Hi /u/jeremad, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The whole reason npm runs in a command line is that it feels hacker-esque. Webdevs build UIs for dummies all day. They want to use the command line.
Server-side ported frontend will never really be more than a toy for script kiddies. Even clumsy old PHP is going to straddle Node in longevity and relevance. It would have been better to learn. If you are gunna learn a server-side technology, learn a real one.
Nice our build process needs some work too maybe this can be the push i need to fight for that
I don't see anything related to JS on that page, where is it exactly? Or are you confusing it with Java?
Start Chrome on the PC, hit F12 to start the browser console and then copy and paste the provided Javascript code. Then copy and paste the last part of that stack overflow answer (starts with console.log(...)) also in the browser console.
Sorry, I meant to specify, this is for Macs. I can get the Console back end up though, I pasted the code and hit enter. I got an "undefined" text back. I believe it's supposed to provide me with a number to then put in the next piece of code to decrypt.
Pretty sure this doesn't work, I ran it and it just returned undefined. Don't think you can find shit like that using the chrome console like the guy advised. &amp;#x200B; Probs easier doing one of the other methods
https://apple.stackexchange.com/a/239922
 Remember this: "REACT IS A FRAMEWORK ON TOP OF JAVASCRIPT". No matter what you are lying to yourself is never ever gonna be faster than pure javascript. If you dont know how to create a high performance vanilla js. You dont know how to create high performance react code as well.
You will need to combine that with the [answer about extracting encrypted key from SQLite database](https://apple.stackexchange.com/a/207624). Once you've extracted encrypted 24-digit key from each machine, you can run them trough the decrypt function on any machine, it doesn't have to be once of those. To run that JS function, you can [open JS console](https://webmasters.stackexchange.com/a/77337) in one of the browsers, paste in the code for the `DecodeAdobeKey` function, and then call it on each of the encrypted keys you got earlier, e.g.: &gt; DecodeAdobeKey("123456789012345678901234") "0363-9254-6015-4048-1937-2237"
you got "undefined" after you entered: `console.log(DecodeAdobeKey('[put the encrypted number here without the square brace]'))`
I got it after I entered the first, longer section of code. I did not run the second part, because I wasn't given the below bold part to enter: console.log(DecodeAdobeKey('[**put the encrypted number here without the square brace**]'))
Yes I see your point. Fair enough. I'll change it to be more appropriate. I'm just trying out blogging.
The Javascript part of that post is split in two things: 1. The "longer section of code" - or the function definition - you are telling the browser how to decode an encrypted Adobe key by feeding that code into the console. 2. Sending the signal to the browser to use the function you just defined to decrypt the key you are passing to it, and then to post it back to you by "logging to the console". So that is only to decrypt the encrypted key you have stored on your machine. It has nothing to do with obtaining the key. That you need to do some other way, perhaps using one of the methods provided in other answers of the same Stack Overflow post.
Already asked this in /r/node but it seems to be getting more traction here: So this manages global packages as well as dependancies per project? If so, cool stuff
Thanks, I am trying the sqlite3 method mentioned earlier on that page. Trying to learn how to navigate sqlite3 now haha. I can get sqlite3 running, but cant get it to run the cache.db file that the keys are stored on.