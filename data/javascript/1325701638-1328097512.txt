I agree, my method is that I build my object then create a simple jquery wrapper if (window.jQuery) { jQuery.fn.gitview = function (options) { // some error checking on the parameters here this.each(function () { var view = new Gitview({ user : options.user, // any github username domNode : $(this), // domNode to attach to compact : options.compact || false // if set to true, will display smaller version of widget (no participation graph) }); }); }; } // example usage $('#foo').gitview({user: 'originalsyn'}); $('#foo').gitview({user: 'originalsyn', compact: true}); 
Sure, feel free to do whatever you like with it. I'll be improving the code and server over time for some of my stuff so it's not going anywhere. Any suggestions, just let me know :)
I did actually mention it to a mod on IRC. I'll mod mail it next time!
Cool, added now, thanks again.
are you using node + socket.io?
If you pull the latest code, this is now fixed. Thanks for the catch!
a week or so ago now... I hated the idea of even asking, but jeresig hasn't been active on reddit in ages, and was the lone mod... so I posted a redditrequest...
Correct, but I did have to mod socket.io a little to get it working with JSONP properly for the cross-domain magic (if websockets are not available)
Same on Opera 11.60, but they work after being rebound.
Totally gonna run this through JSHint.
I usually go with JSON since its usually more efficient on bandwidth, and it also decouples the client and server. 
Not in IE 8, but I must admit this is the first time I do anything related to canvas, so I could be wrong
Oh, I see. I asked more because of ignorance than because of a critique 
Any half-decent web application will have more than just client-side validation of user input, but server-side validation of user input too. That's not something you can change with just Firebug. I noticed that they were hiding the interface with the modal too, but I wouldn't give it that much more work besides that. Accessing that JavaScript just seems to show "The total size of the items you have queued up is more than your account allows. To download more videos please upgrade your account.", which shows that there is some server-side validation in play. Go torrent/purchase your 'movies' like the rest of us. :P 
Ditto for Safari 5.1.2
That's correct, in IE8 and down you'd have to use a replacement, like ExplorerCanvas or FlashCanvas, which converts the canvas to flash in IE8 and down. Still prints fine after that though :)
Ditto on latest Chrome.
Web Sockets? http://socket.io/ degrades to whatever the browser supports too. Although I'm not 100% sure how you could use it on a PHP server.
A php web app would be easy. I do it for porn sites
Thanks :)
Yup, I had this consideration in mind. The initial page load contains a php generated table. Then, an update script empties and updates just the table body. I should probably see if I can just replace values in the table rather than regenerating the table body html.
Ohh, good idea. Given the frequency of updates and ease of implementation, I was just going to go with polling. There is probably going to be a daily cycle of fewer updates at night, so, given your advice, I'm reading up on javascript comet libraries. Thanks!
I can only speak for myself but I'd never heard of jsbin.
It's more likely than you think.
Whoa! Calm down, I didn't see the r/forhire to the side and with the economy as is, I wanted to try and present this to as many people as possible with direct correlation to the need. Sometimes when things are so watered down in different subreddits, the people who need to see the post can't because they are not part of that particular one. No reason to get all bent out of shape over this, if you don't like it down vote. Isn't that why we have them?
&gt; I wanted to try and present this to as many people as possible with direct correlation to the need. Fair enough, but we have subreddits for a reason, and it's so that people don't just go posting things that are inappropriate to any old subreddit just so they'll get a lot of eyeballs. r/javascript is for "All about the JavaScript programming **language**", not "javascript jobs". I appreciate you apparently didn't realise job-postings were inappropriate, but unless you're actively looking for a job they're stultifyingly boring content... and once a few people start posting them without immediately getting very publicly jumped on by other members, sooner or later everyone looking for a coder will do it as a matter of course (for example, this is the third commercial post I've seen in r/javascript in the last *three days*, and I'd barely ever seen even one before this week). Then you end up with a programming language forum full of job postings and containing little or no discussion of the language (ie, what the forum is actually *there* for), and a job-posting forum where nobody bothers to post or subscribe because if they're looking to recruit for a job doing "X" everyone for preference posts to the "X" subreddit instead. It's a subtle effect, but by posting inappropriate content like this you encourage others to do the same, and inadvertently contribute to ruining *two* subreddits (r/javascript by diluting it with sterile, boring content, and r/forhire by diverting content away from it to inappropriate communities). Apologies for coming on strong, but frankly I would have expected a redditor of over a year to know better. In addition, while each infraction is individually a small event, the cumulative effect ruins whole communities; no one raindrop believes it's to blame for the flood. P.S. You also double-posted your reply. :-(
Reddit gave me a 504 error on the first submit, so I hit reply again. I'll kill off one of them. I understand the concern on filling this subreddit with job postings and it's detrimental effect to the quality of content provided. I will move this post over to r/forhire. I might be a redditor for over a year, but I don't spend a lot of time diving into comments and subreddits unfortunately due to a lack of time.
It's asking you to "divide by 100. digits truncated." so, Math.floor(roundedSum/100); http://stackoverflow.com/questions/2125715/javascript-trunc-function
Yeah, pretty sure the variable sum needs to be the final result. sum = Math.round((first + second)*100)/100;
I'm not seeing the intrinsic value of this if jQuery or Mootools is required. Both frameworks have methods to attach events to any element with a certain attribute. Mootools example: document.addEvent('click:relay(div.anySlector, a.seriously)', function(event, target){ //Do Function });
Reset erases all satellites (Chrome).
I apologize for that - the Reset button would more aptly be named 'Clear'. The four original satellites that are drawn are meant to show that the integration method I am using to calculate the Force between the satellites and the earth is accurate enough for the demo - which basically means that the orbits repeat. If there was a problem with the Math you'd see that the path of the satellite would slightly change over time. The main intent of the application is to allow the user to click anywhere in the field and explore how varying your starting position - and initial velocity - create varying orbits. I appreciate the comment though - I really should rename that button. :)
This would be a lot more fun if you could 'throw' the satellites into orbit - ie, their initial vector is the mouse vector when the button is released. 
Holy hell, that's a convoluted solution. var sum = first + second; sum = sum.toFixed(1); Whoever wrote this test doesn't know Javascript very well. You can get the same floating point rounding issue with division, btw, so multiplying, rounding, then dividing is not a generic solution; it just happens to work with this specific example.
No offense, but you're all missing the point of this task (and the explanation and hint only supports the misconception). If you want exact and reproducible results (and you do if you calculate with monetary values), you **must** calculate with fixed-point numbers. Therefore, you must get integer values (or really fixed-point numbers with factor 10^-2) **before** calculating anything: sum = (first * 100 + second * 100) / 100; or, more verbosely: var firstInCents = first * 100; var secondInCents = second * 100; var sumInCents = firstInCents + secondInCents; var sum = sumInCents / 100; Note that although this is the way to calculate correctly, note that it only works because of abundant precision and clever string representations. 0.3 and 0.4 are not representable in base 2.
What do you mean? Send an ajax request and have the url be updated?
You mean making an ajax request with GET? 
sites often use "hash listeners" to monitor changes in the url following the # (pound sign). Changes to the hash don't force a page reload, but can trigger ajax calls that update the page.
If you mean sending an AJAX request with something like this in the URL bar: javascript:var options={ // options for AJAX request }; var xhr = new XMLHttpRequest(); xhr.send(options); Yes, it should be possible, but why you would ever want to do that is beyond me.
Yep, this question might be right: I posted an explanation about the distinction between those two here: http://www.reddit.com/r/javascript/comments/o49ru/jsbehaviour_is_very_extendable_toolkit_to_inject/c3egl00
Another implementation using iframes: https://github.com/substack/node-browserify/blob/master/builtins/vm.js
Are those updates specific to each user, or for all the same? If they are the same for all users, just store a static file and pull it with json/html. This has the advantage, that server can respond with 'Not Modified' Status Code =&gt; no data send at all (except headers).
I'm not sure about other browsers, but newer versions of Firefox won't let you paste Javascript into the URL bar any more. Sure, you can run it from a bookmarklet, but not in the URL bar.
The idea you are suggesting is exactly what I hope to delve into next! It's called the 'N-Body' problem, as opposed to what I implemented which is just a single body interaction - each satellite interacting with only one other mass. Being that this has just been a bit of a side-project I've been exploring for fun, I'm struggling to find some time to implement this - but my plan is to update this application to behave with N-Body Gravity calculations so that every satellite you create will pull on every other satellite in the display.
Why use the url bar when you have the console?
Not true, you can put js in there but it doesn't have access to the dom so it's kinda pointless, unless they changed it with the latest version.
... wtf
http://i.imgur.com/4iySO.jpg
https://github.com/balupton/History.js/
I initially started the tool as a client project. They were wanting a jquery mobile app and needed a touch capable drawing tool. There weren't many great offerings in the jquery scope that had touch capabilities, from what I found. Once I finished the project I continued to work on the plugin in my free time, and have since used it on some personal projects. 
The trick here is to realize that in the first example, the variable "a" does not exist in its local scope, so it goes up the scope chain to look for a variable "a" where it finds a copy of the value that was passed in and returns the expected value. While the second example does not pass in any values or has a local copy of the value, so by the time you call any of the function in "funcs" array, it'll look up the scope chain for the variable "i" only to find that the value is set at 5. So, all function in the "funcs" array will return 5.
Thanks, that's a good introduction, what if i want to dive deeper? Any good resources out there?
You can execute arbitrary Javascript from the URL bar, so why wouldn't you be able to do that?
How good is your grounding in javascript. I've been reading "Javascript: the good parts" recently and it's got his kind of stuff in it. I think it's just a bit above me to really get though currently.
Glad the introduction was good! [Chapter 8 of Eloquent JavaScript](http://eloquentjavascript.net/chapter8.html) is probably a good place to start a deeper dive.
You're incrementing start and testing i. You are not alone.
She supports pretty massive IO.
if I replace "start++" with "i++", my browser just crashes and thus indicates that sth else is wrong :(
In your while statement, you have a *i=0* statement. This means that every time after the do block is executed, *i* is set to 0 before the test against *timesToIncrement* and the test therefore will always return true. See if you can solve it from here. Ask if you have any questions :)
You don't need to have "i = 0" inside the conditional for the while loop. Inside the conditional is just something that evaluates to a true/false value.
Prom**p**t
[At least I was consistent.](https://github.com/DanielRapp/twss.js/commit/d9e455cdae2966cdbaa6752fa0760caf0dcba9b7)
It is basically just using a [spam filtering algorithm](http://en.wikipedia.org/wiki/Bayesian_spam_filtering#Mathematical_foundation). [Here](https://github.com/DanielRapp/twss.js/blob/master/lib/classifier/nbc.js#L20) is the core naive bayes code, for anyone curious. Generating sentences is a completely different animal.
Okay, I solved it but I don't understand one thing: **Why is this considered wrong:** // This function should increment the start value by 1 // the number of times specified. function increment(start, timesToIncrement) { // Add the appropriate code here, this time using a // do/while loop. This time, you must also write in the loop // body. var i=0; do{i++;} while(i&lt;timesToIncrement); return start; } **and this considered correct:** // This function should increment the start value by 1 // the number of times specified. function increment(start, timesToIncrement) { // Add the appropriate code here, this time using a // do/while loop. This time, you must also write in the loop // body. var start=3; do{start++;} while(start&lt;4); return start; } Also, I think that codeacademy would be a lot better if they provided constructive criticism after you made a mistake or gave you a hint about the mistake or sth.. 
This. Verily.
Your title is correct, but you have some factual errors I think. The real distinction you're drawing is between function declarations and function expressions. Anonymous functions are a sub-type of function expressions where the optional identifier is left out. (See chapter 13 of ES3/ES5 spec for more info here). Both function expressions and function declarations have been in the language since at least ES3 so neither is newer or older. Hopefully you aren't marking down interview candidates for using terminology supported by the spec rather than meeting with your arbitrary definitions...
 var fnA = function() {}; var fnB = function notAnonymous() { }; alert(fnA.name + ", " + fnB.name);
Function literals and anonymous functions are synonymous according to wikipedia so the rhino book is correct... Also I think I was wrong to say that function literal is an incorrect because a function expression can be named (var x = function foo() {}), so I think both anonymous function and function literal are acceptable.
Ahh yeah, that's definitely incorrect, and I agree with your assessment. After a misstatement like that they'd have to demonstrate they actually understand closures so I could know whether they made a simple misstatement or have incorrect understanding.
&gt;In my experience, most of the time when people say "anonymous function", the term "function literal" would be more appropriate. I don't understand this. Your title makes sense, but this point gets it backwards. In my experience, when people say closure, they typically mean anonymous *callback* function, like one you'd use in jQuery. $('#myId').on('click', function() { // people call this function a closure }); When people say anonymous function, they usually mean anonymous function - been my experience that people who use the term anonymous function use it correctly. Furthermore, the function literal in your example *is* an anonymous function that is assigned into the variable foo. A named function literal assigned into foo: var foo = function bar() { console.log('bar'); }; foo; // function bar() { console.log('bar'); } foo(); // logs bar bar; // udefined Agree 100% on the distinction between closure and anonymous function though.
Definitely room for debate on some of these points. I still dislike the term "anonymous function" for that kind of usage. Technically correct, but you could also say "anonymous string" or "anonymous number" or "anonymous array" or whatever. // anonymous things $(function(){...}); // function $("&lt;p&gt;hello&lt;/p&gt;"); // string $([1,2,3]); // array No problem with that terminology but it's not really helpful either, whereas calling it a "literal" makes it clearer—to me at least—what it is.
~~Negavite~~ Negative
Not the cleverest name considering there's another popular web technology with the same name (screen reader UA).
&gt;you could also say "anonymous string" or "anonymous number" or... That is a good point. It is misleading to say "anonymous" function as though that were an unnatural state for functions. It's been my general observation that people that hate Javascript don't think of functions as values to be passed around and manipulated like numbers, people that love Javascript do.
In a nutshell? It uses examples for positive and negative matches and then uses an algorithm to figure out whether a given new input is a good match or not. To generate new data OTOH would require a more linguistic analysis of the input and some really complex logic to figure out which juxtapositions of phrases are funny or not. tl;dr: [NLP](http://en.wikipedia.org/wiki/Natural_language_processing) is hard. Let's go shopping. EDIT: If you don't believe _how_ hard NLP is, consider this: Google's translations and reasoning cheat by using a statistical process (and some fudge factors) instead of properly parsing the language-specific sentence structure because it's easier to get "good enough" results with this approach.
It handles most chords, but has trouble with some like D7#9.
Do this to show the difference between the declared form and the literal form: (function(){ alert(typeof foo); (function foo(){}) })(); (function(){ alert(typeof foo); function foo(){} })(); 
Works in Every single browser out. So... Yeah.
It's not totally bad. Wrapping your code into self-executing modules is a nice way to keep the global namespace uncluttered. Passing in `undefined` to your self-executing function is just a small part of that goal.
Considering what your coworkers did to you last time, this doesn't seem so bad in comparison.
true
Erxor, you should use what my teacher called a "desktop test". Take a paper, and draw a table, with a column for each variable. Write a new row every time you pass for the DO part. For example, if you call the function like this: increment(1, 3) The table would look like this: start | timesToIncrement | i 1 | 3 | 0 (this is before the first "do") 1 | 3 | 1 1 | 3 | 2 1 | 3 | 3 This seems OK, but you return the variable start instead of returning the variable i, so your function uses the right aproach, but just return the wrong variable I have another two tips: 1) I don't know how the exercise is written, but I should be: "This function should **return** the start value **incremented** by 1 the number of times specified." 2) This advice is not general and is not aplicable always, but should try to never change the parameters of a function. Do you math, do whaterever you have to do, but limit yourself to just read the parameters without changing them. If you need to store a value, just use a new variable (like "i" in this case). 
How would I get a webpage to use this? I've never used node.js, so have no experience installing "modules" in it. Would I need to download Node.js, type **npm install twss** as the writer says to do to install this into node.js... I imagine that command amends the code in node.js to include TWSS....... if that's the case, I guess I'd need to copy and paste the new node.js folder over to the website folder, and then include node on a page: &lt;html&gt;&lt;body&gt;&lt;script src="node.js"&gt;&lt;/script&gt; alert(twss.is("Can you make it harder?") ); &lt;/body&gt;&lt;/html&gt; It seems a lot of work if I'm accurate?
GO NORTH
agreed
You realise this is /r/javascript.
This seems like a really specific use for a plugin. Is it common to see music transcribed in HTML like this?
backwards and forwards compatibility and accessibility. Your website *should* still work with the js and css turned off. I know most people don't care about this, but I was trained to make sure that the site worked and made sense with all the css and js turned off because i worked in a space where accessibility was mandated by federal law and all our sites had to be navigable with a screen reader. Also, when javascript dies because you left out a semi-colon somewhere or whatever you site will still work.
..I thought inline js just got ignored when js was off. That's news to me if that's true
http://en.wikipedia.org/wiki/Unobtrusive_JavaScript http://en.wikipedia.org/wiki/Progressive_enhancement &gt;He thinks it is easier to debug How... exactly? If there is some kind of issue on the page, I check which module is responsible for that part, then I open its file, and then I can see which listeners it registers. The most complex module (in terms of user interaction) I can think of allowed you to create/move/resize hotspots in some image. It registered maybe 4 or 5 listeners. With those selectors in place, I can easily figure out which one is the interesting one (even if there aren't any comments). I don't really see what could be a problem here. It doesn't require any cognitive skills whatsoever and it doesn't add any delays. I have to inspect that area anyways and of course I also have to open that file if I want to fix it.
It's good you gave a code example, I wasn't sure what you meant. I don't see how his solution makes debugging easier. But then I don't see any big disadvantage of putting it in html, unless it starts taking so much space that it would be more readable to put it in one file. I think both solutions are ok. Maybe if you give in it will give him a good example of civil discourse or whatever, and make it easier next time you have a difficult discussion, which might be about something more important. Maybe you should both recognize from this discussion that software is a craft, that there are several ways of doing things well, and that contradicting views can be both true. I see it as a conflict between two rules, your rule: "put all javascript in js files" and his rule "put all interface behavior in html". I like his rule less, because it needs a clear definition of what "interface behavior" is. Since the rule is less obvious, someone who just looks at the code will find it harder to infer the organization principle. The fact that your way of organizing is more common is also an argument in its favor. It can't just be dismissed as "dogma", because it will help another javascript programmer to navigate the code more easily. But when arguments start getting as esoteric as that, it's an indication that it doesn't matter much. And maybe code highlighting and ides work better when javascript is not inside html.
Conceptually, it is wrong to put handler bindings in the HTML code. His own argument actually shows that: "He says it's easier to know what a button does if it is right there next to the button". In reality, there should be some semantics on the button, defining its intended use. The backend should read these semantics and create handler bindings based on that. This way, the presentation layer stays separated from the business logic. Pseudocode: panel { button { coords : 3, 4, 7, 20; semantic : "playpause"; } } The layer between GUI and business logic should translate this. The button would be transformed into a nullary action with semantic "playpause" (nullary, because a button click does not need to pass any arguments - the click itself is enough). The business logic should have specified a nullary event handler to this layer for the semantic "playpause" during initialization of the application. The neat side effect is that since this is a more MVC-ish approach, you can use different interfaces. Several HTML versions, a REST-style interface for automated tasks, an interface for testing your application and so on and so forth. It makes testing in general easier, because you can mock actions. This way, he can test his backend code, and you can test your frontend, without stepping on each other's toes. For more inspiration, look up Adobe Adam &amp; Eve. [This](http://www.murrayc.com/blog/permalink/2006/09/20/adobe-source-libraries-asl-adam-and-eve/) is a good introduction. Especially focus on Adam; it is an ingenious idea, and to my understanding, it has not been done before.
I don't have any links to recommend, sorry - I had an enthusiastic coworker teach me the basics of node.js :)
"Separating concerns also helps development, maintenance, and ease of updates to an existing web application, because you know where to look when something breaks. When there's a JavaScript error, you don't need to look at the HTML or the CSS to fix it." - Stefanov, Stoyan. *JavaScript Patterns*, p.182. O'Reilly, 2010. If your friend is seriously arguing against the separation of concerns in a software project, I would recommend not starting a largish project with him.
There's a bunch of reasons why you wouldn't do this. As Schoens said, for simple binding, sure, this is fairly straightforward but you limit the ability to add multiple bindings to an element and make it extremely more difficult to selectively remove bindings. For a complex system, custom events are a great way to organize an application and doing event bindings in two different places (js and html) makes it harder to understand how this is working. It also makes it harder to debug as you now have to associate a call that originated from your html (which may be generated at run or build time) versus originating from JavaScript.
Psh, you could totally just write out named function calls in your client-side templates then make sure those functions always have the same name. Easy peasy! /extreme sarcasm
codeacademy considers this to be correct: function increment(start, timesToIncrement) { var start=3; do{start++;} while(start&lt;4); return start; } I don't know why yours is wrong though :C
He isn't arguing against separation of concerns. He is arguing what concerns should be separated in what way.(and how a concern is defined) 
“Function literal” describes a bit of syntax. A function *declaration* is another bit of syntax that hoists a function up to the beginning of the enclosing scope, binds it to a local variable, and assigns the `.name` property. Of course, there are other ways of getting ahold of functions, as they can be passed as parameters or returned as the value of expressions that aren’t function literals, such as function calls. How do you describe the function called by the expression `func()()`??? alert func()(); function func () { return funcfunc(); function funcfunc () { return “da’ funk!”; } } Is it named, since `func().name` has a value? Or is it not named, since it is not bound to any variable in the current scope? Is was originally generated as a literal, but we don’t know that unless we inspect its origins. For our local purposes, it’s anonymous. I would probably fail your job interview, as to me all JS functions are very much alike, there are just different means of making them. I don’t think I’d call any of these examples closures, as none of them involve closing over free variables.
* ~~There's no opportunity for event delegation when the function calls are in the HTML.~~ (this is wrong, see the post by wtfmf below) * The JS might be clicked and evaluated before the function is actually loaded, unless you put the script in the head. That itself is an acknowledged bad practice, as scripts in the head are blocking. * Related to Stoyan's quote below - it does make maintenance easier. If you need to change the method name or tweak it in some way, you will always have to edit two files instead of one. * Clients with JS disabled are downloading useless bytes. (people seem to not care about this too much lately, but there are definitely user agents with JS disabled)
I put 100% of my JavaScript code in external files. If you need to pass data from the view layer, you can use HTML5 data attributes on your HTML. That's it. Frankly, anything else is lazy and improper scripting. You can't cache inline JavaScript.
I'm the author of JawsJS. Was thinking of posting the lib here when I got a 1.0'ish feel about it.. but why not now :). If you got any questions, shoot. Or you can try the docs: http://jawsjs.com/docs/index.html .. or check out one of the many examples I've made. I love learning through examples myself, so I made a lot. Or @katarie: the name is jawsjs.. though it's very easy just to say jaws ;).
&gt; I would probably fail your job interview, as to me all JS functions are very much alike Haha, well my main beef was people equating closures with anonymous functions, not for thinking all functions were the same. It sounds like you've made the leap from thinking of functions as just-methods or just-subroutines to thinking of them as data, which is a good thing.
&gt; He says it's easier to know what a button does if it is right there next to the button. If this is really a concern, devise a convention to map element classes to their (sensibly named) handlers: HTML: &lt;div class='promptSomething'&gt;&lt;/div&gt; External JS: $('.promptSomething').click(function(){ promptSomething()})
I agree with most of what others have written here but I really want to make one point... &gt; He insists it's dogma. This is the point at which he completely lost the argument. *Everything* related to program structure is dogma and convention - we aren't an engineering discipline which is bound by the hard laws of physics! His "interface behavior should be bound at the point of interface specification" is similarly dogma but one with which I do not agree when it comes to web development. If that is all he has against what you are saying, he is admitting he doesn't know what he is talking about and is trying far too hard to sound like he has an intelligent argument. &gt; I need to hear good arguments (or link to good arguments) for why we have always done this (besides the fact that we have always done this). The fact is that we *haven't* always done it this way. These are best practices that have been discovered and codified after much trial and error (mostly error!). Once upon a time, we gladly intermingled code, markup, and style and thought it was great. As our code-bases grew, *we were proven wrong.* Somewhere else you said: &gt; $("#fooForm).bind('submit', fooFormHandler) //fooFormHandler being external My first problem with this is that it requires all your bindings to be global. If only that one form will ever call *fooFormHandler*, then why pollute the global namespace of your entire app? In an interaction heavy app, you are going to be required to make a large majority of your functions global. For what benefit? If you can read the binding in the HTML then you can read the binding in JS. Secondly, how is that code above conceptually any different from doing this: &lt;form id="fooForm" onsubmit="fooFormHandler();" ...&gt; ?? Ask your friend! Because the reasons your friend gives you for why the above is a terrible practice, are exactly the same reasons why using jQuery to bind to external functions *from the HTML* is a terrible idea. There are a whole host of things your friend obviously isn't considering. If you need to change the function that submitting "#fooForm" calls, then you need to edit the HTML. This may not be a big deal in the example given above but what happens when you have a single function that is bound to similar buttons appearing on 10 different pages? Under your friend's crazy dogma, you would have 10 different HTML files with the exact same intermingled code all referencing the same damned function! Not only does this violate DRY, but in order to change those buttons' bindings you would have to edit 10 different files! If the JS binding was **properly** kept separate, changing *one line* of JS would have the desired effect. When we violate DRY, we invite bugs - "Oh! I totally forgot to change that thing in just that one place...."
Are you sure on the event delegation? I just did a quick test and event delegation seemed to work fine. Any links you can point me to on that one?
You've gotten good answers here, but I think it all can be summarized with the following observation: it's a very tight coupling. What your friend is proposing requires that the HTML knows what the Javascript is in order for that Javascript to work -- specific code signatures, every time. Metaphorically speaking, you would now have to teach two people how to do one person's job. Other HTML attributes (and the entity hierarchies themselves) provide plenty of identifying information. The standard solution is to create a "switchboard" that is responsible for the wiring. HTML &lt;--[Router]--&gt; Business (usually Controller&lt;--&gt;Model)
Ooooh... can you teach me how to do that? I am having JSONP cross-domain problems for one of my projects.
Event delegation was the first thing I thought of too. I can imagine it would be very easy to accidentally set up more than one handler on an element using this approach - something which can be tricky to debug.
it sure got my attention at the time - nice work :-)
Your friend's approach all well and good when you have a single handler that never changes, you are just binding to one event, there is only one handler per event, there is no conditional logic to determine what handler method to bind to, etc. Real projects ALWAYS contain more complex scenarios than that. The scenario doesn't even have to be complex at all. How does your friend propose to bind the same handler to an event for all controls with the same class? Is he really proposing that there be a separate line of handler code for every single control instead of just writing: $('.myClass').bind('click', myClickHandler); That sort of thing gets out of control really quickly. Not only are you wasting time repeating yourself, you are also making your code much more difficult to change. When you actually try to wade through markup to find the control buried in all of the other controls that have 4+ javascript event handlers on them, it is hard to debug because the event on that control that you are trying to debug has multiple handlers anyway. This is all separation of concerns 101 and I'm kind of shocked that your friend would make a really oversimplified argument against it and claim that YOU are the one being dogmatic. I hope my examples have given you some concrete reasons why your friend is DEAD WRONG.
The ‘unobtrusive’ approach was originally motivated by wanting to make sure your site worked OK with JavaScript turned off—the idea being to make it clear to everyone that the JavaScript code is icing on the cake, but not required to eat the cake itself. It is part of an overall philosophy of progressive enhancement, where ancient web browsers see a workable version of the site, and people with better browsers see a more whiz-bang version. Nowadays browsing with JavaScript turned off is a lot more unusual, and we tend to dismiss people whose company’s security profile requires this as being irrelevant. Leaving aside web apps that are all about interaction, the number of sites that require JavaScript to be active in order to perform the most rudimentary navigation is increasing. And if you are aiming at mobile Safari, you know JavaScript is available to you and you need it to do a decent job of imitating mobile app conventions, so the distinction between presentation and interaction becomes more blurred.
I wouldn't wonder about the typical javascript addition: "..but closures == anonymous functions"
I like how straightforward your explanation was. Now I understand the difference between a closure and a lambda.
Quickest way is that to bind your application at the presentation layer means you must dynamically build out all of this information in html. You on the other hand can be much more percise by using some kind of model which then pulls in some ajax which gives you a list of targeted elements. Remember, we want to be Client Heavy, Server Light moving towards future web applications. As you move forward in the JS evolution of things, the client will handle more and more. The only thing the server should do is load up files which help bootstap your application and the rest is done in js. Thus doing attribute event binding on html elements is arcane.
It's not that the target isn't correct. It's that you get the target from the event object. "this" always refers to the current object context. For example, document.body.addEventListener('click', function(){ alert(this.tagName) }) ends up alerting body even if you click on the button. The event object is available using "event", so onclick="alert(event.srcElement.tagname);" would alert you the proper target (works in IE and latest version of Chrome I tested in. Or event.target in FF and Opera.) 
I think the whole paranoia about `undefined` being defined is stupid. So what if someone decides to be stupid and break your code? 
&gt; It'd be painful to pull in 30k of jQuery just for rendering what's usually a very basic UI. If you use Google's CDN, [most people](http://encosia.com/6953-reasons-why-i-still-let-google-host-jquery-for-me/) will never have to download anything.
Ah, I stand corrected! I didn't know you could pass in the event there, thanks for the correction! I guess I'll have to strike event delegation off the list in my post above then. :)
&gt; I have never gotten a satisfactory answer from my team about how I am supposed to figure this out Check out: http://jsfiddle.net/AJxgA/2/ Open your console and you can see that jQuery lets you discover the run-time event bindings on DOM elements fairly easily even if you don't know exactly how they were bound originally. Of course, this requires your front-end guys use properly named functions but they are doing that anyway, right?
If you just want to see it output, you can use console.log("text");. Then the output will show in the console of your browser. Though I don't believe that works in IE. The more widely supported method to use is alert("text"); Which makes a box appear with the text. Another simple way to debug or test output.
The following are better IMO: * [Trepine.org: JavaScript call and apply](http://trephine.org/t/index.php?title=JavaScript_call_and_apply) * [OdeToCode.com: Function.apply and Function.call in JavaScript](http://odetocode.com/Blogs/scott/archive/2007/07/04/11067.aspx) * MDN: [call](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call), [apply](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply)
Twitter?
http://memegenerator.net/instance/13037338
Why are those better? I read the first one at trepine, and it took 2/3 of the way down the page to say this: &gt;The only difference between call and apply is the manner in which additional arguments are passed. Why is that a better explanation than &gt;So that's the difference between call and apply. Both can be called on functions, which they run in the context of the first argument. In call the subsequent arguments are passed in to the function as they are, while apply expects the second argument to be an array that it unpacks as arguments for the called function. which gets to the point in fewer words and with examples that are just as clear?
&gt; How... exactly? Try working with dynamic binds supplied via code written from Dart or GWT and supplied to the client in a file that carries a Java application file extension. If the code that is binding the node is nested in some anonymous function you are completely screwed.
Definitely this, but at the same time it's good practice for user input, comparisons, and showing a result.
&gt; Quickest way is that to bind your application at the presentation layer How would you bind application logic to presentation on the web? Presentation layer on the web is either CSS or XSL. HTML is a data structure. If you are speaking in terms of the OSI layer then really all of the web is presentation including JavaScript and the only bits that qualify as application layer are the mere events themselves.
Well, if you're concerned with brevity, Trepine also has an [abbreviated version](http://trephine.org/t/index.php?title=JavaScript_call_and_apply_quick_reference). As for the OP's site, the code formatting markup sucks; Trepine's is much easier to actually _read_ the code. There's not a huge disparity in quality, though. I just like to offer alternatives, and to point out that many of the silly articles posted here have already been covered _ad nauseam_ elsewhere, and so seeing them pop-up here on reddit gets old. These are not new notions or techniques, and the OP certainly isn't breaking any new ground for original writing or engineering.
Not sure why you're getting the downvotes. The post is obviously (hopefully) satire and a snarky response is warranted.
Funnily enough, no. I got a lot more positive feedback with regards to original writing for the Javascript guide at http://hangar.runway7.net/javascript-guide-to-objects-functions-scope-prototpyes-closures This post is pretty much just groundwork for upcoming ones, but it's being upvoted a lot more :-/ 
a wut?
Looks like code generated automatically by [Dreamweaver](http://www.codingforums.com/showthread.php?t=149083). Not sure what it does, my guess would be image preloading/transitions.
I think we can all agree that this is a pedantic nitpick with no practical significance. The only important thing is to make sure people know what a closure is for. Because in the most generic sense, all javascript functions are closures, although many may not make use of any variables in the closure. 
With Node.js there's no reason not to, but yeah, using only client-side js for a login system would be despicable. 
Thanks for the feedback and agree there's plenty of great discussion to dive deeper into the trade-offs of each method. You're right, knowing how to approach a problem in a variety of ways isn't valuable if you can't also rationalize the upsides and downsides of each. The primary goal for this post was to show even the simplest of coding problems can lead to a wealth of good discussion and practice.
All dreamweaver generated code. MM_preloadImages() - Preloads images on page load so rollovers will be seamless. MM_findObj() - Find an object in the DOM. MM_swapImage() - Swap one image with another. Used for rollovers. MM_swapImgRestore() - Puts the original image back. 
thank you, much appreciated.
I get that, but it's actually kind of sad when simple coding problems don't have simple and obviously right solutions. For example, it bothers me enormously that JavaScript doesn't have a built in foreach loop that works like you want it to with arrays, or a shallow foreach for objects that avoids the hasOwnProperty test. I know neither of this would be terribly hard to implement in the runtime and would be more efficient than anything you can do within the language. Having just these two iterations built in would pretty much eliminate the need for the dozen different types of iterators you can make now... and would making wrapping them up in a programming pattern that much easier and less error prone as well.
After some reflection, it's probably "cleaner" to use a data-attr instead of a class in this case. ([Class vs data-attr selector performance.](http://jsperf.com/class-selectors-vs-data-attrs))
Yeah, and the thing is, nobody worries about, `window`, `document`, `Math` or `String`, but somehow it's the sign of an amateur to not protect against `undefined`.
Yeah, that's the goal, once npm and/or jspkg are supported.
 #ifdef for JavaScript but without the compiler support... (sigh) I know, it's a tough problem.
Maybe he was trying different logic that he ended up removing before he took the screenshot. You don't think he typed in 20 passwords to test the current code, do you?
&gt; I would never use **client-side code** on the web for any security purposes. FTFY
Trusting users is the problem.
Either/both. #define/#undef allow internal assignment, and there are compiler flags for external assignment. JSDev can do the same. Same set of problems too -- you no longer have one body of code to test, now you have a matrix. So now some tests won't run on the production code.
Good to know about the compiler flags for C/C++. I thought that was true but couldn't remember. Agreed this would be true for multiple bodies of code to test in languages like C/C++, but with JavaScript a typical process for production code is to run it through a minifying processe where comments are stripped out. So, you could still have one body of code with the various environment tests included and your build process would be something like: JSDev (enable appropriate tests) --&gt; Run Appropriate Tests --&gt; Minify (strips all comments including JSDev code) --&gt; Production Formatted Files.
It's not weird, a year ago you probably didn't understand JavaScript, now you do.
It's more sensible to test the minified code, since that's what your customers run. ESPECIALLY if you're using something like Google's closure compiler, but even with simple stuff like file merging, comment stripping, and whitespace compaction you still want to make sure the post-processed code works as expected. Don't get me wrong, debug-build-only tests can still be helpful, especially when tracking down regressions, and I'm sure JSDev is handy for that sort of thing.
With regards to that, any idea of what would be good material to cover if you were to write a tutorial on how to write such a game to an audience where the pre-required knowledge is only a cursory knowledge of javascript/programming in general? (In other words, you must know the syntax, but not much else).
This is true. I remember running around the house screaming like a little 10 year old the first time I was able to add together two numbers and print to output. (Then again, I was 10 years old)
The semicolon after the if else statement bothers the shit out of me
Oh, yeah - classes are much faster. I wasn't saying that data-attrs were more performant, but that they are more satisfying from a purists' standpoint; the tests were just demonstrating the tradeoff.
Nah, it's just that his will has been broken.
So like, am I the only one that sees this post as being a troll?
Could you post the link to whatever site you're using? I'm trying to teach a designer how to do some code and would love a good js tool for them to use.
It looks familiar but I can't pinpoint it, it is likely in this list. There are more in the comments of course. http://www.reddit.com/r/learnprogramming/comments/o3kej/list_of_interactive_programming_websites/
An algorithm is an algorithm. But an algorithm that never gets to run is completely useless, no matter how otherwise secure it is. Any algorithm has outputs that can be copied. Therefore your server-side code can receive the same response from your client-side code or some totally different code. So someone else could for example produce a logging page that always let them log in. 
why a gist and not a repo?
Seriously, why the fuck is this the most upvoted thing in days?
http://jsfiddle.net/ An alternative.
This. Ever ever ever. Logins belong to server side code. However, enjoy programming :)
http://jsbin.com would work too..
To call out the ; and not the == (in favor of ===) tells me you need to watch crockford's videos again :). Keep it up OP, javascript is awesome!
Yeah... think I saw that in the jQuery implementation of .each... they have a special fast case for no-args runs that just uses call.
 // not in order but kinda cool var i = arr.length; while(i--) { // do something }
For code formatting try this: http://code.google.com/p/google-code-prettify/ Good post by the way. Simply and clearly explained the difference. 
Steve Souders has a [different opinion](http://www.yuiblog.com/blog/2007/01/04/performance-research-part-2/): "40-60% of Yahoo!’s users have an empty cache experience and ~20% of all page views are done with an empty cache. To my knowledge, there’s no other research that shows this kind of information. And I don’t know about you, but these results came to us as a big surprise. It says that even if your assets are optimized for maximum caching, there are a significant number of users that will always have an empty cache." I think it has to do with browser limits for cache sizes being too low. The lesson I learn from this is to optimize as much as possible, but assume the worst case for a significant number of users. Use the cache, but don't rely on it for performance.
I agree, I've never understood why this extra precaution has become so popular. 
And he'll make damn sure you do JavaScript his way, or else it's wrong.
LOL So cute!
Code Academy is sponsoring a program called [Code Year](http://codeyear.com/) and it's quite likely the OP is doing that.
yes its codecademy, great site for beginners like me!
&gt; Human.super.constructor.call(this, "I AM A HUMAN"); Well, there goes your iOS support.
Glad you're having fun! It looks way better than my first day of coding... A few pointers, which are TOTALLY nit-picky, but good habits to form (a ton fo coding is about habitual behavior and style): 1) Keep your assignment white-space the same. For the prompt you have no spaces around the equals symbol, for the var pass1 you use them... It's probably best to use them always for clarity. 2) Name your variables something sensible. "var pass1" means NOTHING to me when I'm browsing the code and (if this code gets larger) will be hard to keep track of what it is. I would probably name those two variables something like "user_input" and "actual_password" This would make the code read more like a sentence, which helps readability. Again, these are ABSOLUTE nit-picking, but it's good to form solid habits as soon as possible.
I am yet to find a decent "Class" implantation that will support inheritance when the base class/object holds some initialized non trivial data-structure (like a tree) without hugh resources price to pay. All I can see is a shallow copy of properties from one object to the next. It may be that this "Class" notion isn't good enough. My feeling is that one needs to unlearn those classic concepts and adapt to function composition patterns which are for me, at least, does not come naturally. 
What would be cool if I could use the closure compiler to check type annotations in nodejs. Any solution to handle the module dependencies for this ? 
I'm wondering too. Came here sure to see people laughing because this is clearly a joke. Now I'm unsure...
- (to prevent dubble click) generate a unique id and attach that id to the vote, if same id is voting again then block it - block ip number (and time) after voting (keep the time and ip with the vote) - the voter needs to answer a simple question to vote, like "1 + 3"
i dont know why people think im joking...
Sorry, I didn't want to be rude but this really looked like a joke, because experienced coders like me too often had to convince some kind of management that what they called password protection was a joke (admittedly a little less often those last years). As long as you know you're just learning and you don't put this protection anywhere, that's fine. Please accept my encouragements, you're at the start of a very interesting and exciting intellectual adventure, coding is a lot of fun :)
What if the asshole defined it to false?
 if (undefined || undefined === false || undefined === 0) { throw "Error: some asshole defined undefined to " + undefined; } // life is good and Brillegelt is happy
"Class" as a first-class object always looks wrong to me.
&gt;(to prevent dubble click) generate a unique id and attach that id to the vote, if same id is voting again then block it Better to just [remove the event handler](http://jsfiddle.net/ureFx/) on the first click.
`typeof undefined == "undefined"` should be a robust test. Alternately you could just say `delete undefined`, I believe. This is all pretty academic IMO and I'm perfectly fine with people assuming `undefined` is what you expect it to be.
I'm not sure how qualified I am to answer that question since I'm not a "classically trained" programmer, i.e. I don't know a lot about CS and the proper definitions of event-driven and pubsub. However, here's what I think the difference is: you could certainly emulate a lot of what pubsub does with bind and trigger but it's subtly different: * An event happens *on* (or to) something. A topic is usually global; it just happens. * publish() usually passes a number of arguments related to the topic. trigger() passes an event object with the details of what happened. * Events bubble up the DOM hierarchy. There is no such thing in pubsub. * Any event handler can prevent handlers from higher up in the hierarchy from being triggered by canceling the bubble phase. Subscribers are completely separated and should not have any influence on each other. Having said that, you can emulate 99% (&lt;-- made up number) of pubsub with jQuery's bind, unbind and trigger (or on, off and trigger since 1.7). As long as you bind and trigger on the document itself there will be no bubbling and trigger allows you to pass additional arguments with the topic/event to the handler. edit: here's a great overview of how DOM events work: http://jupiterjs.com/news/a-crash-course-in-how-dom-events-work
Thanks for pointing this out. The transposer is pretty simplistic in that it does not take key into account. Can you give me a rule of how I should take the key into account? Sorry I'm not real strong on music theory. Perhaps I should ask on r/musictheory.
Nope. It actually handles D7#9 just fine.
i understand ;) but i came from .Net and Java ... And i &lt;3 Coffeescript :) 
You can write insecure or secure code in any language. A blanket statement that "JS isn't secure" is hardly accurate. Client side authentication is ALWAYS insecure - be it written in JS, Dart, Actionscript, or whatever. To your point, I have several applications running in production, written on Node, with authentication systems in place that are just as secure as if I had been working in any other language.
Blog spam. Mods please remove. Original here: http://addyosmani.com/resources/essentialjsdesignpatterns/book/
Awesome reply, thanks! And don't worry about being "classically" trained (I'm not either), I wasn't asking for anything super-technical, just what the underlying difference(s) may be... I know very well how events work, it's just "pubsub" that I haven't used really. Just to add to your point that 99%* of this could be done in jQUery... * An event happens on (or to) something. A topic is usually global; it just happens. I guess one could simply use the `document` or `window` for all pub/sub type events. * publish() usually passes a number of arguments related to the topic. trigger() passes an event object with the details of what happened. I think `trigger()` lets you pass in other params, aside from the event object. Thanks again, I wasn't getting the 'big picture' difference before your reply, but now am :) 
wow, just wow
Safari doesn't support ES5 identifiers. It treats `super` as a keyword here, thus fails to properly parse the code.
Yes but we were talking about the address bar not the console.
Direct link to the GitHub repo: https://github.com/tbranyen/backbone-boilerplate
[to whomever did this](http://awesomegifs.com/wp-content/uploads/carl-sagan-youre-awesome.gif)
WEIGHT_KEY is a variable, so when you put quotes around it it's not referenced. Hope that points you in the right direction.
&gt; You can write insecure or secure code in any language. A blanket statement that "JS isn't secure" is hardly accurate. I completely agree with the first statement in this quote, but not the second. It is the conventions and practices around JavaScript that make it insecure opposed to its operation in a vacuum of only security best practices. While these insecure practices are completely out of control on the client side it would be false to say such immaturity has not found its way to the server-side as well even if more tightly constrained.
This had me stumped (amongst others). var WEIGHT_KEY = person.weight; var person = { name: 'Ryan', // But this sets person['WEIGHT_KEY'] as 350. weight: 350 }; var weight = person.weight; This works, but I wasn't convinced that it was what it was asking for.
It's honestly not really essential in equal temperament tuning because F# and Gb *are* the same, but you will drive some people crazy. As far as algorithms go, I'm not sure off of the top of my head. If I can think of something I'll submit a pull request.
That lesson could probably be explained better but I presume that this is what they are looking for: var WEIGHT_KEY = 'weight'; var person = { name: 'Ryan' }; person[WEIGHT_KEY] = 350; var weight = person[WEIGHT_KEY];
javascript games are fine and all, this one was a lot of fun - but the nature of javascript lends itself too easily to cheating, when you can alter the script that is running inside the browser. A lot of games aren't concerned with cheats, but for some types of games it won't be a good solution if they rely on competition. Any game can be hacked, but javascript makes it especially easy to change gameplay. 
Also, because it's a phone
Care to delete the link too? Also, why? Sounded awesome, but all I get is Gene Wilder
Yeah, heaven forbid a phone with a 1GHz(?) processor should be able to run decades old code at a reasonable speed.
Sorry, I didn't know about server-side js until today :(
Basically I wanted something like Dojo's Dijit widget system, but without all the _Dojo-ness_ associated with it. I found myself copying and pasting and rewriting a lot of this stuff whenever I needed it, so i figured I'd just make it its own thing that I can build off of. It's not quite done yet, and I might shift some things around in it. It should be compatible with CoffeeScript, but I haven't tried it yet. I used it to write this drum machine, which is super untested. Works in Firefox on my Mac though. https://github.com/brian-c/beatboxes Is this of use to anyone else?
I can understand for some ROM, but is there really any problem to host and make a gameboy emulator ?
What's wrong with using web workers to do a map-reduce?
How do you "get too big"....bandwidth is cheap
So, kill the roms, still give out the source? Or use some HTML5 voodo to make the rom load from a local file. edit: Not HTML5, File API
ok, I tried that but I don't think I have the same rom version of red as you hosted on your site
Should leave the emulator but just take down any ROMs you were hosting, and use the File API to let people play ones they already have on their computers. Emulators aren't inherently illegal, you just can't host copyrighted material. http://en.wikipedia.org/wiki/Console_emulator#Legal_issues
Word. Forgot you had two different pages set up for this stuff. Sweet shit, btw. Kinda surprised a lot of people in the thread seemed to have not seen this yet. EDIT: Wow, and apparently reddit just didn't load all the comments from like an hour ago basically saying the same thing I said in my OP....
Have you heard of [Pygments](http://pygments.org/)?
I'm not sure what that is supposed to mean. I found the localstorage file but as you said, it's encoded and I have no idea where to start or what to do with it
If someone can make sense of 15,000 lines of js code without explaination, he's pretty smart
Ah, just the thoughtful kind of comment I'd hoped for! That last paragraph sounds like good advice; my team lead keeps espousing the same thing.
Outstanding work. Note: Seems to work well on IE and on the othe rbrowsers I've tried. 
I dunno about you guys but I just got full-on yelled at by Willy Wonka. 
Super cool. Wanna do a blog post about this? It'd be cool to read about the challenges you ran into &amp; what you did to solve them. How did you approach this? Did you look at the code of an existing emulator and try to port it line-by-line to JS? (Obviously you would have had to write some parts from scratch, like rendering to the canvas element.)
Yeah, All I got was some Wonka Rage, nothing else on the page besides the title no gameboy for you and a zeroed out page with a youtube iframe.
How does that answer my question? Secondly, I cannot stand jQuery. If you really really want to demonstrate your point with solid authority do not use jQuery, or any other framework, to do it.
Web workers = traditional asynchronous JavaScript. JavaScript is a single threaded synchronous language. It only becomes asynchronous by supplying independent separated access from a completely external source to the language so as to run parallel calls from something else. Parallel JavaScript appears to be an effort to spawn multiple threads natively to the language without external assistance, and from looking at this post the most difficult challenge to code authoring would be to open data structures to multiple simultaneous access. To get an idea of what any of this means you have to think about from the perspective of application code only. If you are coming at this from a web or DOM perspective you are probably wrong and miss the point.
Very well written article. Helped me understand things better.
It sounds like you are conflating 2 different things: should you re-write it and which style it should be re-written in. It also sounds like you've answered your own questions already.
You got it. I was mostly looking for validation, discussion of people's preferences, concerns I missed, or pertinent resources like design pattern tutorials (which one person provided) -- and the community provided!
I'm using Pygments right now... doing server side highlighting. I'm considering moving to prettify because it gives cleaner HTML, with the features k3n was suggesting... 
&gt; The person could still never see your site even after they follow one of the links. For example, they could open the page in a new tab behind their current one and then close it before they view it. This is probably an edge case.... Oh... I do that all the time! Ever since Netscape 6 came out I've been opening a few search results in background tabs and then start looking through them. If I find what I need I'll close the others. I often open tabs I never read this way. This seemed like a really natural way to browse search results that might take time to load. Am I really an edge case?
The text is barely readable -- I can't even critique the article. Please make the text darker, there isn't enough contrast.
Thanks a ton.
Bah... Firefox has been pre-fetching pages for years, already.
Doesn't appear to work on FireFox 9...
Nice article...tired of hearing about parseInt and radix, though. Can we please move on?
Legal GB ROMs for the JS emulator : http://pdroms.de/files/gameboy/the-horrible-demon-2 http://pdroms.de/files/gameboy/blastah http://pdroms.de/files/gameboy/iron-hike http://pdroms.de/files/gameboy/jet-set-willy http://pdroms.de/files/gameboy/final-blade Enjoy :) 
&gt; $('input').toArray() &gt; .map(function (domElement) { &gt; return domElement.value; &gt; }) &gt; .map(parseFloat) This is great and all as a piping pattern, but it seems inane from an efficiency perspective due to the overhead of using map. As for the stack, it seems like six of one and a half-dozen of the other; the one extra stack call if you just put parseFloat into the first anonymous function is probably offset by the cost of calling map twice. Am I missing something or is it just supposed to be an academic exercise? Ah, the problem with contrived examples.
One thing that will invariably bite you in the ass when you first start experimenting with a lot of array.map: [Array.map on MDC](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map) &gt; callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed. So you're out there having fun mapping and reducing and then one day you pass a variadic function to map (with optional arguments for example) and then wonder what the hell is going on. Luckily this might lead you to ask yourself "*but then how can i sink arguments?*" and push you towards even more fun stuff to do with functions.
Can you give an example of a codebase like that in a public project? I think I know what you mean but I'd like to see more.
On the subject of get() In Prototype.js, there's a very useful enumerable method called [pluck](http://prototypejs.org/api/enumerable/pluck): ['hello', 'world', 'this', 'is', 'nice'].pluck('length') // [5, 5, 4, 2, 4] Which would give you something like: $('input').toArray() .pluck('value') .map(parseFloat) 
Excellent point. I hadn't wanted to go too far down the functions-as-first-class-entities rabbit hole, but your suggestion conveys the spirit of what I was trying to say even better than I had imagined. I have incorporated a variation, please let me know if you'd rather I didn't include your handle in the credits.
So `get('value')` returns a function, right? function get(y) { return function(x) { return x[y]; } }
Yes, it's defined in the OP's article. &gt; function get (attr) { &gt; return function (object) { return object[attr]; } &gt; }
Thanks! An earlier version of the post used `.pluck` from Underscore. As you probably know, the issue with prototype is that not everyone approves of opening core classes, so sometimes a post using an example like this touches off a lot of bikeshedding about the practice. The post is on GitHub, so you're welcome to browse the history and let me know what you think of how it looked when it used `.pluck`.
I think that trimming your post to show the most basic implementation of the concept you wanted to demonstrate was indeed the way to go. Bringing Prototype (or even functional.js as I see in the history) into the mix shows that there are more elegant ways to do this in javascript but it also muddles the point of the post, to an extent. Maybe as a sidenote kind of thing. ps - i'm currently reading your book about birds. if you ever visit the 514, we'd love to have you show us something at js-montreal.
I would think that there's a lot of multitasking going on in an iphone. It has to maintain the cellular, wifi, and bluetooth connections before it allocates time to the browser. Then, I think it's safe to assume that an emulator of this caliber is pretty complex. All in all, I'm not too critical of my 3gs not being able to handle this emulator. Also, clock speed isn't a reliable indicator of processing power.
I'm with you on the servers should be data APIs and simply serve the templates/javascript needed for the app. They should not need to do view rendering or state persistence between users views. I am trying to convince my dev team to write our remote management and deployment code for our cloud launched instances in javascript and node.js. BTW, what exactly did you mean by the "Throw MongoDB or CouchDB in the picture and your entire application stack is written in JavaScript"? Mongo is written in c++ and CouchDB in erlang. MongoDB's API utilizes sockets and BSON for data transfer. CouchDB is RESTful and JSONy.
&gt;The single largest reason why I absolutely refuse to have "hidden" private methods in JavaScript is that they become completely untestable. That's true in almost every language
you're welcome
I still do not understand what you mean. In the context of separation of roles HTML is not presentation. By referring to HTML as presentation you are violating the concept of separation that this thread is about.
&gt; This model gives you the ability to create a secure system… almost. In a fully closed, as in offline, environment I might agree with this. In the wild though, I would say this does not apply. People, regardless of how foreign or malicious, can access any code they want provided available references. Even if the necessary references were not available then simply clone the existing code with minor alterations to make them available. The only way to reduce the completely out of control web security problem is to: * eliminate all auto-execution of code including the onload event. * prompt each time when foreign code creates bindings to existing code. If the web is not willing to make these sacrifices it is not willing to improve security. Honestly, I believe these sacrifices are entirely contrary to the gathering of metrics and analysis that power most web businesses, which means that at this time the web is not willing to improve security and would rather risk consumers to the current problems.
Incorrect. Almost every language actually have the real notion of public/private/protected keywords, which still allow you to get access to a "hidden" method through reflection. In JavaScript you can't just reflect into the closure and see the hidden anonymous method. That's why I prefer the Pythonic route of underscores in names.
What I meant was that the "query language" for both of those databases is JavaScript. Node.js, too, is written largely in C++ but most people only ever use the JavaScript APIs. With Mongo or Couch in the picture it is unlikely that the application developer would be writing anything except JavaScript.
Yea, I figured that is what you meant and having the data returned to you as JSON makes these guys and node a match made in heaven. Using mongoose in front of mongo makes it even that much better. 
IMO - Google had a lot to do with showing people the potential of JavaScript. Yeah, other people were doing neat things with it before - but for many people, their perception of JavaScript was limited to pop-ups and image roll-overs and generally viewed as a nuisance. Then, out comes Google Maps - I know for me, that was a big 'what the hell.... I didn't even know you could do that.', and really started to show some really useful ways of using JavaScript. Over time, web pages started to become more dynamic, and are now becoming web applications. JavaScript works in the browser, across platforms - Windows, Mac, Linux/Unix, Handheld devices, etc. People want their web applications to be responsive, and get close to a 'desktop application' type experience. The best tool to accomplish that these days is JavaScript. You can use Flash - but that is a fading technology and does not run on all platforms (ie: no iPhone), and can still be flakey on devices that do support it (Android). Or, you could use propitiatory plugins that people need to go out of their way to install - that is a barrier to getting people to use your app. Or, you could use Java Applets ... which is well... yeah. If you want to write a web application, that can be used on almost any device in almost any browser - JavaScript is pretty much the way to go. Anything else, and you start to limit your potential market. It comes with pretty much every browser, you actually have to go out of your way to disable it in most cases, and as standards/implementations improve - it's getting easier to have it work across all browsers with minimal fuss. Toss in libraries like jQuery/etc, which hide some of the ugly stuff under the hood - it gets much easier to jump in right away.
In short - because earlier it was more difficult to write due to lack of standards (browser wars etc.); due to this people had bad associations with the language. XMLHttpRequest helped. Increased connection speeds helped. JS Libraries helped. Mobile devices helped. Boom?
It's an illusion. JS isn't any more "popular" now than it was 15 years ago. Because JS is the only ubiquitous scripting language across every browser, it must be used. What *has* changed, is the need for every businesses to have an online presence, which in turn caused a dramatic increase in the number of web developers, all of whom are invested in JS whether they want to be or not.
The simple answer is: *The Good Parts.*
What else are you gonna use?
Porn.
There are a tremendous amount of people out there doing programming and development that have never touched a functional language. (sadly)
1) Faster interpreters allowed Big Companies to build fancy things like Gmail without setting peoples' computers on fire. 2) Everyone else saw this, realized JavaScript isn't evil after all, and wanted to build their own. 3) People built tools to make it easier. 4) Here we are.
Gmail predates any large-scale work going into JS performance: that only happened a couple of years after Gmail first appeared.
this absolutely. i dunno what drugs everyone else is smoking. browser javascript interpreters are shitloads faster now. and we have tons of easy to use libraries that we don't really need to be concerned with performance impact as a result.
It has nothing to do with the maturity of web development. Having been a web developer 15 years ago, I can tell you from experience that JS was all over the place. Whether it was "mature" or just replacing URLs with text in the status bar on hover, is irrelevant. As I pointed out in my original comment, the numbers are larger, but the percentage is the same.
It does OO, though :|
JS is more popular then 15 years ago. Yes it was present and used. But even if we ignore what it was used for and how, it's still more popular today. JS is found in many more places then browsers by now. So even if the percentage of web sites using JS has stayed the same, it is deployed in way more different places then 15 years ago.
I agree with almost everything you've written, but there is a blanket statement in here that kind of bothers me. You used your chance to answer his question as an opportunity to preach something that is, for lack of any nicer way to put it, BS. &gt; You can use Flash - but that is a fading technology and does not run on all platforms (ie: no iPhone), and can still be flakey on devices that do support it (Android). 2 things here: 1) Flash is less of a fading technology than you likely [want to] believe. The whole "HTML5/CSS3/Javascript" ball of wax has a number of issues that it does not solve, but Flash does. Not everyone is targeting both mobile AND desktop, and even if they are -- if they're also targeting IE8 or less, then Javascript is only an option for much simpler things. Google Maps is, by far, as "complex" as it will get. 2) "Or, you could use propitiatory plugins..." -- I think you mean proprietary, and you'll apparently be surprised to know that Flash's penetration rate is over 98%. It's not something you need to worry about these days. Now, to be clear: Javascript is taking over for Flash in a lot of places where it absolutely should. Whole sites should not be done in flash. Image sliders should not be done in flash. TONS of stuff should not be done in flash. However, good luck doing in Javascript-only a lot of the things you *can* do in Flash -- unless you're willing to sacrifice anywhere from 15-30% of your desktop userbase (IE8) depending on target audience... Even then -- even if you say "well, I will put up a message telling IE8 users to piss off" -- everything is more expensive and difficult to do using "HTML5" [buzzword] as it is compared to Flash. There do not (yet) exist solid workflow tools for production. There do not (yet) exist really solid cross-browser libraries to minimize or eliminate the need to worry about browser-specific hacks all over the place to get things to function the same... Is HTML5 potentially the future? Yes... but we won't be going pluginless until a few issues are solved: 1) better code and asset obfuscation... not everybody wants to inherently open source every interesting app/game they develop... 2) like it or not (I don't like it, myself!) - DRM isn't going away... and HTML5/javascript video players offer no such thing. Everything else you wrote about Javascript answers the OP question pretty well... but the Flash stuff is, in my opinion, a bit misinformed.
You are technically correct... the best kind of correct.
&gt; So even if the percentage of web sites using JS has stayed the same, it is deployed in way more different places then 15 years ago. But.. that's my point. An increase in JS usage that matches the inflation of developers, internet usage/availability, and the total number of sites, is not an increase in popularity. A high school student named Jenny is considered popular by having 50 out of 100 classmates as friends or followers. The following school year, there are 10 new students added to the class, 5 of whom become friends with Jenny. Has Jenny's popularity increased in relation to her class? No, it's still 50%.
JavaScript 10 years ago was a language mostly used by non-developers to add simple effects to web pages. Not being developers, they would hack until it worked, resulting in really really, ugly JavaScript. Better developers stayed away from JavaScript in part because their brief exposure to horrible code written in it gave them the impression that it was a horrible toy language. Browser incompatibilities didn't help either. So it remained mostly the playground of designers and "drive-by" coding by developers who were more comfortable on the server-side. It took a while before patterns to make it more solid and manageable were established and a rough consensus about these emerged. JavaScript is a very flexible and dynamic language that doesn't really offer a lot in the way of clear structure (modules? classes?), so this consensus was really important. Some capable developers were, of course, exploring JavaScript about a decade ago, and wrote impressive code, but due to browser incompatibilities and lack of interest by other developers this just wouldn't really go anywhere for a while. In-house applications targeted to one particular web browser were written, but "this application works in Internet Explorer only" didn't really appeal to many web developers either. Things changed over the course of years; browsers became slowly more compatible (for some years Netscape Navigator 4.5 was the main choice on linux, and that was one crufty browser!) and gained more powerful debugging tools, there were the big applications (google maps and such) that demonstrated that JavaScript *could* work, and JSON and AJAX patterns were established as patterns to talk to servers. Libraries emerged that hid some of the browser differences away. Over time this made other developers realize that: * JavaScript can be used to do cool things beyond a few effects. * browser differences had become manageable. * JavaScript was actually quite a decent language once you knew how not to use it. In turn this resulted in more powerful browsers, which attracted more developers, and so on. It took a while for that snowball to get rolling. It's been rolling for a while though, and it needed that time to become a nice big round snowball that people notice. Could this have happened earlier? Perhaps a different JavaScript and different browser standards could have sped things up a bit, but developers had to learn first what really was the proper way of doing things. Many things that were considered ugly, incompatible hacks 5 years ago are now accepted, tamed, established patterns. It's hard to say whether a browser maker or standards body could have anticipated that better - it takes time for a community to learn. 
Recently? One word: AJAX.
Google: Google Maps, and Google Apps. Plus, Javascript got a lot faster in the past few years. And, last but not least: browser incompatibilities have largely been eliminated.
This. Read it an you will see it is a fairly well constructed, powerful language with a crap library. 
Do you have any real examples of sites that won't be able to switch in the near future to something other than Flash? To be honest except for a few edge cases I'm trying to think up (maybe web-sockets) I cannot think of many people who absolutely NEED to have Flash. More and more JS libraries are even using things like VML in IE6 to get some of the drawing functionality you'd normally only seen using SVG in Flash.
[Eloquent JavaScript](http://eloquentjavascript.net/)
These days, for the most part, if you're designing a rich media application, you can assume 95% of your user base will _not_ be IE. Sure, IE users are 30% of the total share, but 30% of the share that uses anything except hotmail, yahoo and MSN? Once people stop pandering to shit platforms, those few non-lobotomized users will be forced to upgrade. Not to mention IE specifically will have a rolling target for the system itself to update the browser to IE9. 
&gt;JS isn't any more "popular" now than it was 15 years ago. The web is several times larger now and the percentage of sites which use JavaScript one way or another is also a lot higher. Back then there were around 36 million users. Today, there are over 2,110 million. http://www.internetworldstats.com/emarketing.htm The number of websites also went from below 1 million to over 162 million. http://royal.pingdom.com/2008/04/04/how-we-got-from-1-to-162-million-websites-on-the-internet/ The amount of JavaScript code per page also increases every year: http://httparchive.org/trends.php
Whoa man, I was just sayin'. Gettin' a little vicious over browser stats are we? Anyways, yeah, if you're getting paid to develop games for casual users that are getting out over social networks then _your entire customer base_ is luddite retards, so sure, I can't expect you to be able to move to better tech stacks than Flash. If you want to be that kind of redditor, I work on a privacy plugin for firefox/iOS/IE. About 95% of the users who google search "Online privacy" or "proxy service" or "proxy browser plugin" are _not_ ie users. That is close to 95% of almost 800,000 customers. Again, these are _already_ mostly power users, because most IE users don't even know what a proxy is. So, in _our_ situation, the IE plugin was a waste of time. If you know enough to know you want a more secure browser, you know enough to not use IE. I can see how that is different for _casual_ games. Sorry for speaking from experience. &gt;This is the argument I've seen for how long now? How long have we been trying to rid the world of IE6 and how long has it taken? &gt;It doesn't work. Because you havn't tried :P Keep pandering and keep wondering why no one changes. No more farmville without Firefox 11? You've just helped every web development firm ever save hundreds of thousands of dollars. Thanks! Edit: On second thought, it's the games that really ought to be requiring browser upgrades. I mean, your users are playing games, they're not doing finances, so upgrading a browser on a kids home computer is no big deal. It's your big corporate applications that I can see require IE6 support, because a corporate browser update is a big deal.
[chrome frame doesn't require admin access](http://blog.chromium.org/2011/08/non-admin-chrome-frame-reaches-stable.html) , and your assumption that people using IE8 aren't savvy enough to install it is belied by the countless people who will click anything presented to them and subsequently get infected by viruses - this is a well known phenomena on the web, so I don't see how installing a plugin would stop even the lowest common denominator. Your point sounds valid but it's not quite. IE has always been a leader in 'rich media', even if people never coded for it. Many of the things being done with WebGL today could be done with DirectAnimation as far back as IE6. Just because you've never heard of it or used it doesn't mean it didn't exist and wasn't usable. The industry wasn't in the same place it is now, but that doesn't mean IE wasn't capable of some pretty interesting 'rich media' even in the late 90s. Of course, the javascript engine in IE is much slower and all that stuff was non-standard, so I'm not arguing that people should be using DirectAnimation to support older browsers, but you can't say that some of this stuff wasn't possible to do inside IE a long time ago. I will give you code obfuscation, that's about all I can see that Flash has over Javascript, but Flash can be decompiled, so even that argument falls apart. Flash is faster than Javascript, but that lead is dwindling more as time goes on. There are some decent tools for Flash, but they mostly deal with the animation aspects of it, and there are already similar tools that produce similar results in HTML5.
I think it's one primary thing: it's universal. Javascript and the web platform is found on more operating systems and devices than any other platform. What's more, the momentum is building with new capabilities coming to the web platform every day (and with huge endorsements from companies like Microsoft).
I think you're confused about what the word popularity means. I'd recommend reading some of my other comments in this thread to learn more.
gmail and google maps launched in 2004 and 2005. in fact, javascript's popularity has been pretty stable for years http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html if anything, i'd say javascript has gotten trendy recently.
I don't know what you are talking about, but performance impact are always a concern.
Wow, this is a pretty good tutorial. Keep them coming.
A minor player? Look at some of the companies [on their home page](http://nodejs.org/) and say that again.
&gt; this absolutely. i dunno what drugs everyone else is smoking. That *also*. There are many different (though often related) reasons. V8 is one of the more recent reasons - Chrome came out 2008, and JS was already increasing a lot in popularity before that (jQuery 2006, Prototype/Scriptaculous 2005, GMail 2004). It also helps that hardware has simply gotten faster, WebGL turns into a slideshow on older hardware, V8 or not :)
That's not true at all. Now it's being used left and right to write full video games and other client application experiences (not simply powering certain features in HTML documents), and to write full server-side software ([node.js](http://nodejs.org/)). This isn't simply more of what it's been used for all along.
&gt; Is Flash the answer to that? Not really, as Apple has gained some dominance and they don't support it, and companies are abandoning it because of Apple's non-support. This is still something that I feel is less clear/answered than you seem to think. Flash is still working on desktops, and the argument that it is dead on mobile is a little bit of a red herring. Flash (basically) is what is used to make AIR apps, and AIR apps compile to iOS and Android just fine. We are experimenting with AIR-&gt;mobile right now where I work and it's better than you'd guess. Flash in the browser on mobile is dead, and for the most part: good riddance. Besides having it for video delivery, I just can't imagine wanting flash *in the browser* on my phone. It's not the right form factor, it's not the right interface, it's not the right... anything! EDIT: It remains to be seen, and Flash developers are rightfully scared, just how committed Adobe is to continuing to improve Flash and AIR and ensure that AIR-&gt;mobile compilation makes acceptably efficient apps... but I'm hopeful/optimistic because there aren't really any great cross platform development tools out there that aren't massive ugly hacks (like phonegap, for example) &gt; But, most HTML5 'rich media' apps I've seen run very slowly in iOS on any of their devices. This is very true. They're not stellar on Android, either. Worse yet, although I have converted from iOS to Android - Android's browser *still* lacks multitouch javascript events! An AIR app? Works fine with multitouch. In the end, HTML5 may well be the future... I'm mostly just "uppity" about people's false declarations that it's somehow a catch-all cross platform development toolset *today*, because we've got clients asking us for HTML5 games - and we have to explain to them why (for many of them) in their case, they really don't want an HTML5 game and it'd be a terrible idea.... The more buzz it gets, the more we get people asking for it with no legitimate technical reason why. It's hard to start off a good business relationship by explaining to someone "you're wrong about your own needs"...
Definitely, I built them :-) By hand, in HTML 2.0 ...
Apples refusal to allow flash mostly affected video. By the time Apple did that the amount of overlap between what javascript and flash were both being used for was fairly low. Sure some areas like games and complex animation but the majority of uses had diverged by that point. If we are going for overlooked points though I'd say Mozilla using javascript and XUL to render it's interface was a huge step forward.
it sure is private, but it's not a private data member - meaning it isn't accessible to instances of foo outside of the constructor. for example, consider a java-like class: public class Customer { private int Id; public string Name; public string ToString() { return this.Id + " " + this.Name; } } in this class, there are two data members, Id and Name, only the latter of which is public - i.e. other classes can't read or set it. however, a Customer instance's ToString() method can access the private variables just fine. to pull this off in javascript, you'd have to use closures in some fancy way, so that your instances expose methods that use instance data that is not exposed to clients of the class. one way to do it is this: var Customer = function(id, name) { this.Name = name; // now a public member // define a function in the constructor, so that // the function is 'closed' over the arguments to // the constructor that aren't exposed as public // data members this.ToString = function() { // here we are referencing 'id' even though it's // not an instance member (just a variable defined // in this scope) return id + " " + this.Name; }; } this mimics private instance variables, but is kind of weird because: * the data isn't actually an instance variable, but rather a random variable floating around in a closure scope * using this method, you have to define methods that access the private data within the constructor, rather than, say, in a prototype. a lame consequence here is that if you create 1,000 instances, you have 1,000 copies of the methods in memory (whereas if the methods were defined in the prototype, you'd have 1 copy of each).
&gt; Call the function from four different scopes that was terrifying; thanks :)
I don't think there is enough data here to help you. Try using jsfiddle.com to recreate your problem and post that here.
That is precisely it; though the = sign mistake is probably genuinely an error. 
Just wanted to say that this is a really interesting conversation. I am a Flash developer making a reasonably sized web app who has had the chance to look into JScript for a revamp of our application and decided it just won't cut it. So instead, we have delivered a blazing fast, secure Flash version and are creating independent apps for iPhone/Android where nessecary, using the PHP API that feeds the application. The Flash simply is one way of delivering our content; in the future we may move to recode in JS, but today (like you said earlier) it will hit 98-99% of desktops without a problem. This is compared to delivering an HTML5 app to a corporation, where we can't even guaranteethat 1% of their machines/clients will support it. So glad to hear someone talk about HTML5 as the 'buzzword' it really is. The problem is the more people hear it, the more management think they need to say it. The funniest example we've seen recently is a client (a rather large publisher, I won't embaress them by naming) who asked us to deliver an HTML5 audio/video player and then tried to deliver it through HTML4 iFrames in their CMS! The managers hadn't even checked with their IT teams whether that's what they wanted, they just heard the buzzword and assumed it was what they needed. Of course by that time we had finished the project to spec. More work for us, but then more bills for them!
&gt; i wonder if i should just try to understand prototype-based development and how to leverage it's benefits, rather than trying to pretend i'm in a different language. If you're using a language you should *always* try to learn to code in it idiomatically - in fact that's the single most important reason to *ever* learn more than one language. If you don't do that, you're basically wasting your time learning it because *learning it will teach you nothing new*. It's like graduating from hammers to the entire toolbox, and wondering aloud if you should learn about these "screw" things or this scary-looking "glue" stuff, or whether you should just keep banging nails in with the handle of your shiny new screwdriver.
There's really nothing to recreate... it's just a simple &lt;.select&gt; with the usual &lt;.option&gt; ... then the script transforms the select to what you can see on the website I linked.. basically you can just look at the source (CTRL+F "Selected and Disabled Support") and it's the exact same thing (except that I changed the option values accordingly to my needs)
hey, i don't feel awesome about it! but i see two general themes in popular javascript libraries: * the module pattern, or in other words a singleton that does all the work (see jquery) * some fancy attempt at pretending javascript has classes (see backbone.js) so i'm not being a noob out of laziness; as far as i can tell, essentially zero of the javascript ninjas out there are significantly leveraging prototype-based programming.
Oh, I see now. You're right about the documentation. I'm not exactly sure how you're supposed to retrieve values at all...
Removing ASI from the discussion (as it doesn't apply), I think what you're saying is equivalent to saying "don't use styles that increase the chances of forgetting semicolons at the end of statements". I don't think that's an issue, personally.
prototype.js I was FLOORED I dont understand why I was downvoted. When prototype was released it changed EVERYTHING. It can really be seen as the tipping point for JS. It brought the Google-like abilities to the everyday dev. 
This is actually a really big factor. I've been doing contract work for some of australias largest banks and a lot of them are moving from having their calculators and tools done in flash to done in javascript purely because of the ipad / iphone.
so here's where the rub lies: var Customer = function( id, name ) { this.Name = name; }; // define functions common to all Customer instances Customer.prototype = { ToString : function() { return "Customer '" + this.Name + "'"; }, Save : function() { // want to make a call with this.Id, but // there is no such instance variable. if // there were, it would be public (and editable). } }; here we are using prototyping, which is the standard javascript way of sharing data and behavior between object instances. the plus side to prototyping is that creating N instances of Customer does not create N instances of Customer's methods in memory; all instances defer to the prototype for these methods. (you are correct in that defining an instance's method to reference a method of another object has the same memory-saving goodness.) the down side is that these methods cannot access private instance members, because using the hack we previously discussed, the private data are only available within the scope of the constructor. you could just define all of your methods in the constructor, but here you are working around the language (e.g. not using prototyping at all), and potentially wasting a lot of memory should you create a lot of instances, since each instance will have it's own definition of its methods (instead of a shared definition, which you would have if you used a prototype). having thought about it a while, the best i could do with prototypes was to achieve class-level (not instance-level) private data members using closures via [the revealed prototype pattern](http://sphex-industries.net/content/revealing-prototype-pattern-for-javascript), which is interesting but isn't quite what you'd want.
Can you name one website that people use regularly that was still using that gimmicky whole flash site when the iphone came out? The reason how Mozilla renders itself is important because they are a big player in the browser world and they put their weight behind javascript.
Well, with Javascript, you kind of don't really have a choice. ... except on the server side. Why did Node get so popular? With Twisted being to Python for &gt;10 years (which is really quite a lot … less … quirky language than Javascript) what Node has been to Javascript for like a forthnight... Did people go all "Oh. Asynchronous is the s.*t! And I already know Javascript!" or something? 
I'm not arguing javascript is popular because of Mozilla. I'm saying that had more to do with it then shitty flash sites no one ever visits that wouldn't work on an iphone. You haven't named one site, that people actually use that, is impacted by the iphone other then video sites. Plus google maps was released and the term ajax was coined in 2005. By the time the iphone came out in 2007 javascript was already popular.
So, if I'm understanding your code correctly, this is just a fancy wrapper for hiding `privateField` under `this._pvt.privateField`. What's the advantage of using this candy over simply following a convention of referring to `this._pvt.privateField` directly?
ah. I come from the programming school of hard nox and not computer science. good to know.
Because ['HOT SPRINGS' (U+2668)](http://www.fileformat.info/info/unicode/char/2668/index.htm) is not a letter character while ['KANNADA LETTER TTHA' (U+0CA0)](http://www.fileformat.info/info/unicode/char/ca0/index.htm) is. (If you weren't really asking, and just wanted to link to that article, then don't phrase your title like a question.) 
The short answer is that previously the JavaScript runtimes were too slow, and processors weren't fast enough. Today, with most people having at least a dual core system blazing at 2+ ghz, gigs and gigs of RAM, and significantly faster JS engines, well that's why JS is taking off and clearly showing that it's what "everything" is going to be written in, in the future.
 var mySelect = $('#fieldId'); var values = mySelect.val(); for(var i = 0; i &lt; values.length; i++){ alert(values[i]); } 
Actually, it appears that you're the confused one. And yes, I read your other comments in this thread and you're just plain wrong in this case. E.g.: &gt;[JavaScript is] not used by a larger percentage compared to 5, 10, or 15 years ago. 1. The medium as a whole expanded drastically. This equals higher popularity by definition. (E.g. those TV people wouldn't be popular if TV itself wouldn't be popular. Net effects always play a big role.) 2. More sites use JavaScript. It went from &lt;5% to &gt;95%. 3. The amount of JavaScript is also growing. Just within *one* year the average size increased from 113kB to 170kB (+50%).
Oh that was interesting. And great, now I discovered the Kannada alphabet... ಡಂಡ ಠಿ_ಠಿ ಠೈಠೆ
The haters are gonna keep hating, but I actually like Javascript as a language. I prefer Python but Javascript's not so bad. 
MY EYES ARE BURNING
I haven't noticed it getting more popular - at least not recently. If I had to guess, HTML5? &lt;canvas&gt; being powered by JavaScript and its potential have probably interested a lot of people in learning it.
It hasn't gotten popular recently as much as it's been gaining popularity for years. Like others have said, Google Maps showed that javascript could be useful. After that everyone created their own AJAX wrappers and learned about closures and the libraries where born. Browsers other than IE started to gain some traction, which meant there was a need for things to work cross browser. From there it's just been building momentum. It's the only language that is truly everywhere. All OSs and mobile devices have JavaScript.
fixed, thank :D although it would just be a syntax error, not a global var.
Cool story bro. Now can I parse CSV with regex ? \*evil virgin blood dripping grins\*
It's more about maintaining a common style which I suppose is a bit subjective. I use the following style in example below to avoid ASI issues: return { 'foo': 'bar' } And then to match the same style, I use the following style for conditional blocks if ( foo === 'bar') { doSomething(); } It's easy to compare this form to hyphens in a word, it lets the reader know the word continues onto the next line. To keep this form, I treat commas, operators, etc in the same manner: var foo, bar; var foo = 'some' + 'split' + 'string'; someMethod(). someOtherMethod(); Again, it's a bit subjective, but for me it makes more sense. As someone reads line-by-line, when they encounter the end of the line they can immediately know if the author intended to end the statement/expression or if it continues onto the next line.
Waiting 4 years isn't exactly rushing and you haven't exactly given any actual examples other then some cryptic mention of companies you work for. Did you also have to rush to take down your under construction gifs and convert your tables to css? I can't think of one major site that was still using flash for anything other then video with the exception of flash games and banner ads.
That says more about the talent than the technology.
ALSO webgl. that's the reason i am here ;D
I'm sorry, what?
it's not so much that there's something i can't do as it is that i'm not sure how to do things well. two of my first thoughts when modeling a domain are reuse and encapsulation - normally meaning class hierarchies with shared data and functionality, and data hiding. in javascript you don't share data or functionality through inheritance, and you don't hide member data or functions. so when i'm writing javascript, i feel like i have to be unusually careful in avoiding excessive coupling between objects; whereas in a class-based statically typed language, i only have to worry about this when designing type interfaces. which isn't to say i think the javascript way is worse - i just feel like i don't understand how to leverage the benefits of dynamic typing and prototype inheritance while writing maintainable code; e.g. it seems impossible to avoid introducing [code smells](http://www.codinghorror.com/blog/2006/05/code-smells.html) of the "between classes" variety.
I don't think most people knew Google Maps leveraged JavaScript. It came off as more of a flash app in the beginning.
It has been popular since 2005 when libraries like jQuery, Dojo, and YUI/YUI-Ext came out making it possible to build desktop like applications in the browser with little custom code. I think the recent popularity has been from the Ruby-heads who write in coffee script and also Node js.
Boom is correct, sir.
Thanks * Do you also use requirejs to manage dependencies? * What are your experiences with AMD compatibility of third-party libraries, and how difficult is it to patch them?
IE (IE 9 was tested by the SO asker) allows some non-letters as well, which makes it non-compliant: ◎♨☺.
In my personal taste, it depends on how the element's going to be used, and if the element has any purpose or function if scripting is switched off. I used to be a hard separation-of-concerns purist, where all markup should be in the page by default and only *manipulated* (shown/hidden/moved/etc) by Javascript, but as I also try to design sites with full, proper progressive enhancement I realised that - for the no-script experience of the site - there's no point in polluting and bloating the markup with elements with no semantic meaning and which would have no function for that version of the user-experience. Rather, these days I try to ensure the markup contains all the elements which are necessary and semantically meaningful for the noscript/mobile versions of the site, and then tend to add any additional DOM elements for the full-strength/desktop/rich-UI versions of the site using Javascript.
Why were you using Firebug Lite when Chrome has its own (fucking awesome) Dev Tools? 
There are a few things about the Chrome dev tools that aren't so awesome. I haven't used it in a while, but the first thing that comes to mind is that checkboxes for css rules are right aligned in the css rule editor and there aren't any lines to guide you to which checkbox corresponds to which rule. Firebug has its checkboxes right next to the rules on the left, so it's extremely easy to toggle things.
also, in firebug you see ajax requests in the console instead of Network &gt; filter xhr, and you can view ajax responses as json or html.
The checkboxes have tooltips. I would assume that they are right-aligned because to add a new/edit attribute, the user clicks on the whitespace to the left of the existing attributes
No. I instantiate an object for every one of these "custom elements". The object keeps track of it's HTML. This is much easier than what you're suggesting.
You can't use the scroll bar (for drop-down menu functionality) in Chrome or IE9. Firefox seemed OK, but it looks to me like they haven't done a lot of testing with other browsers yet.
You can additionally remove Backbone and Underscore from the global namespace... define(['vendor/underscore'], function() { return _.noConflict(); });
Interestingly your use case is one where I could see using JavaScript to create some elements. HTML5 forms have support for a stepper input [min max step](http://wufoo.com/html5/attributes/04-minmaxstep.html) In a case like this you might want to build your markup in anticipation of widely spread support for these attributes and use js as a fallback on platforms where they are not supported. Particularly because these form elements are supported in specific ways on mobile platforms where your implementation may not work correctly. 
I presume the HTML you mentioned above is already in your page. So you create an object for each div you find with the class 'numericStepper'? Basically what I'm asking is how do you refer to those elements that you need to hook? For pages that have all of their elements already on the page, indeed, it is easier. What I was referring to was pages where the content changes, like a list with pages and ajax. In those cases it is needed for javascript to create elements, right?
Right-click in the console. Check "Log XMLHttpRequests"
Sadly, HTML5 forms lack a lot of styling possibilities.
I think I may be alone in my opinion here, but I believe that anything that NEEDS JavaScript to run should be created through JavaScript, save for whatever server data it needs to be built (image locations, ect.). I also believe that for normal, non-application websites, you should build the whole thing to work without CSS or JS, then add them on top. A bottom up approach, if you will. I know this is too costly to be viable pretty much ever, but I think that it makes the build quality of the site maximum.
I agree. Very dynamic pages need javascript to build *some* of its content. When you already need to build that part of the page, why also build that same part in pure html too? Just use Javascript and don't bother with html *for these parts of the page*. For everything else pure html seems easier.
I still can't expand any of the detail in the console. I just get a link to examine in the Network tab. Thanks anyway, but I still prefer Firebug for the reasons mentioned here. I just wish FF was faster :\
I've seen in one demo somewhere on the intewebz, that you can edit css that is responsible for look of inspector. So maybe someone with enough amount of free time could make it more usable ;-)
If it wasn't for inability of easy multiline js console, I would've switched from firebug. 
Do you have any references, I'd like to learn more about the limitations.
See my response to psayre23.
Thanks.
A good title makes all the difference. I guess the same goes for a good variable name.
I'm gonna pretend I know what I'm talking about and just say: Minecraft. Open source, made for all ages, and IMHO, it's a great motivator. Gives me a reason to master the language, seeing as how I'm not a very motivated person. Not to mention, it's introducing children to the possibilities of hard work. It's like a lesson within itself, if you can be bothered to find and install your own mods.
What does MC have to do with JS?
It's a little different but its all there in Chrome's web-console as well, but just use what you prefer. FYI ,one of the main reasons Chrome's web-console is so close to Firebug is because in July of last year Firebug's lead developer left to work on Chrome's web-console.
do shift-enter. How do you do it in firebug?
Ewww
This particular piece of code hides an element with an `id` of `FerquQQTZp`. The piece being `eval`uated is: document.getElementById("FerquQQTZp").style.display="none";
Unless I am building a fairly large-scale application, is there any serious reason I should be using RequireJS? I'm trying to use it now with a small Backbone application (first time testing either library) and I'm running into issues here and there. I'm thinking I may be better off at least trying to build the app without RequireJS first. Suggestions?
It's not all there in Chrome's console, though. Besides the fact that you can't render hxr responses as HTML or JSON in Chrome's web tools, you also don't get any detail about the response in the console itself; All you get is a link in the console which takes you to the network tab. For developers like me who deal almost exclusively in front-end work for RIA's, small differences like this make a big impact on workflow.
When I first came from using Firebug to the Chrome console I was not to exited, but it got much better, and now I prefer it over Firebug.
Ironically 'HOT SPRINGS' (U+2668) displayed correctly on my Adroid phone, while 'KANNADA LETTER TTHA' (U+0CA0) didn't.
Of all the things I could possibly imagine, you're complaining about *that*? Perhaps you should go send some letters to Donald Norman, nitpicking his books.
By the end of the article, I was misreading 'eval' as 'evil'.
I do quite a good bit of UI work myself, not exclusively but a lot. Now we're talking solely about personal preference, not features that are missing. I use the console for debugging so I don't want to see every request show up there (I don't need to debug image requests). I prefer Chrome keeping the HTML/JSON representations of my response in the proper place (preview/response tabs of network render JSON/HTML your looking for), if I'm doing heavy xHR work, I just leave that tab active. The bigger the RIAs you work on, the more cluttered the Console tab will get. We use a logger that prints formatted logs to the console instead of putting alerts throughout the code. I'm so accustomed to using the web-console its 2nd nature for me to find everything I need. *Edit: Just out of curiosity, have you tried Fiddler? If I'm doing heavy request/response work I'll fire that up and use the proxy to grab all of the traffic coming into the browser. I like checking it via Fiddler because it intercepts the response before the browser has a chance to do anything to or with it. It also has decent filters so you can set it up to only grab what you want.
raw javascript? :P
&gt; don't say jquery [Zepto.js](http://zeptojs.com/)? What browsers are you wanting this small library to support?
You can actually inspect the inspector.
I've used Fiddler, but not to any great extent, and I haven't used it in a while. We don't use xhr for images, since our design is very data-driven with very lightweight design elements, so I wouldn't see any other resources in the console. But yeah, I could see where someone working on a different project might prefer to keep xhr out of sight by default.
If you want rapid development, jQuery. High performance and no "catches" (minor changes in jQuery syntax can result in major performance differences), raw DOM.
yes, it will show you the raw response, which is really crappy if you want to inspect JSON responses or view HTML back from an hxr service. Firebug will let you parse JSON and examine the object as you would in the DOMInspector or mark-up the response as HTML, all in the expandable element itself. 
I think this is a poor attitude to have. bjb39 makes a good point that the usability of the CSS checkbox toggles is not as ideal as it could be. Do you think that people should not strive for perfection? I would also argue that bjb39's comment does not come across as "complaining" - he is only making a comparison between two products and why he thinks one approach is superior to another. I cannot understand why someone would give another person a hard time for paying attention to details - imo, there are not nearly enough people that do pay attention to details, and it is something I would value in a person.
Ok, I can see the value in that. That's definitely superior.
looks like it's just a combination of parallax and css transitions, and html5 transformations. I don't know of any frameworks that specifically target this set of features, but knowing the terms that drive the effect might help you out. Edit: Cool page, btw. Thanks for sharing!
yeah, _believe_ me when I say that I don't want to use Firefox anymore. I _hate_ the performance as it compares to Chrome, but I just can't leave these features :\\
[140medle](https://github.com/honza/140medley) is the ultimate micro library. Includes DOM stuff.
It loads a minified JS file off schemer.com that refers to [MochiKit](http://mochi.github.com/mochikit/), which seems like a pretty good library to use for this.
Have you checked out any of the info from Doug Crockford? He's got a few articles and videos that helped me start to understand the prototypical aspects of the language: http://javascript.crockford.com/ 
I agree. I define variables where they're relevant.
How could I name a site that was still flash when my argument is there haven't been a major flash only website since years before the iphone came out? If there are so many and it was a big game changer it is odd you can't name a site.
Mustache/Handlebars load templates as text, parse them using javascript, and do text replacement. DustJS/Closure has you write templates as text, compile them to javascript. Then at runtime, the javascript is loaded and JIT (just-in-time compiled to native machine code assuming you're using a modern browser). The result is that dustJS and closure are much faster(benchmarks): http://akdubya.github.com/dustjs/benchmark/index.html 
You don't need a framework to write a few lines of css and js.
[Bonzo](http://github.com/ded/bonzo)? Anyway, see [microjs](http://microjs.com/#dom).
If I had a nickel for every time some hurried developer changed a comma to a semicolon in [this](https://github.com/shichuan/javascript-patterns/blob/master/general-patterns/single-var-pattern.html) and therefore dumped a bunch of variables into global scope, I'd have like thirty-five cents.
... and CoffeeScript.
I mainly dev in Chrome but have to keep round-tripping to Firebug for that killer "copy css path" function. 
This is what strict mode is for.
Yeah I know what you mean. I don't want to be "that guy", but using coffeescript for client side rendering just seems wrong.
It already has a multiline console without needing shift-enter. Just enter...
Same here. I guess purists might argue that your functions are getting too big if you need to define variables elsewhere, though. Sometimes it just makes sense to decompose things a bit.
**I N S P E C T I O N**
I just use onload for script elements and have a handler case a load event fires after an error event. Does onload not work for script elements in older versions of IE?
No it doesn't fire. You have to use onreadystatechange.
I know, I usually use [butterflies](http://xkcd.com/378/) but nowadays I prefer to use the wheel someone else invented instead
Thanks. This is useful info for me.
It would be easier to answer if you could throw your entire problem, including your html up into a jsFiddle so we can actually see what it's doing.
Ok, [here](http://jsfiddle.net/gyGPW/) it is.
you don't need CoffeeScript to run the thing. all you need is the compiled .JS file and you can use it with jQuery like normal. 
yep... i think it is a bit misleading for the "purists" to use Jade or CoffeeScript on the client side, lol
Both good links .. thanks !!!
That's all fine and well, but first I need to learn CoffeeScript syntax to read the post.
neat, thanks for the info. I'll definitely check that out.
Sizzle.js is just jQuery's selector engine and nothing else. https://github.com/jquery/sizzle
Thanks! I will check those out.
Well Sublime Text 2 is just about the prettiest little editor I ever did see, and with a little finagling I've got the jslint package playing nice with Ext and jQuery. Now if I could just figure out how to make it pretend that those libraries are always included for the purposes of code completion, it would be perfect. Still, this is a lot nicer than Komodo Edit. Thanks for the tip!
I can't prove a negative. I'm saying there weren't major sites. Why can't you name just one site?
IE complies with the spec, and the spec got it wrong. Empty elements in array literals are a bad idea in the first place. I was hoping that the strict mode in ES5 would outlaw them once and for all, but if I'm not mistaken, there will be no such luck. They're almost never used intentionally, are easy to do accidentally, and will *appear* accidental even if you do them intentionally. Lines like `var a = [1 ,,2];` and `var b = [1, 2, 3,];` should throw a syntax error. In the rare case that you *want* undefined elements in your arrays, you're going to have to do something like `a = [1, /* blank */ , 2];` unless you want whoever maintains your code to break it by pulling out the "extra" comma. And at that point, you'd be better off typing `a = [1, undefined, 2];` anyway. People bitch about ASI, and I agree that it was a silly thing to add to the language, but I've never actually hit a bug that it caused. But I run into comma-related bugs fairly often. At least ASI is standard and consistent across all browsers. Automatic Comma Deletion is a non-standard and inconsistent patch that masks the symptoms of a serious design error.
Wait I'm a troll because you are afraid any site you mention wouldn't be major? How does that make any sense. What if we agreed on a page rank or how many views a site gets? I think you just don't have any. You just pulled the Apple thing out of your ass and now because I'm challenging you go into your default reddit state of calling anyone who argues with you a troll over and over again.
Yeah, mostly I'm being cognitively lazy and I'd rather get to the point of the article rather than have to mentally switch models. I've also been programming in JavaScript using jQuery interwoven with Prototype. I need to clean up a *lot* of legacy code on this site and reduce the number of plugins. It's all a bit muddling, you see.
It makes it harder to make bug fixes and step through code.
That's is ok. Because your 100% that undefined will be really undefined in that scope
lol
You are vastly overestimating the difficulties of debugging coffeescript. It's true that you need to know both JavaScript and coffeescript adequately, but the translation between the two is direct enough (and the generated code is pretty enough) that in practice you can easily fix issues in the coffeescript code by debugging the generated JavaScript. The choice between the two languages just boils down to syntactic preference.
You type 80 WPM but you need to take time with JSLint to find a trailing comma issue? After a decade of writing JS I can say that I'm a lot more concerned with code completion that is smart across my entire project. And again, I recommend JSHint. These days JSLint will waste a lot of time being too pedantic. Best to develop a coding style that fits the application (node, browser, or otherwise).
I think you blew a gasget there friend. Like I said before flash video was certainly killed by Apples move but aside from that flash wasn't being used on major sites. Which is why you have to link to news articles instead of providing examples.
&gt; You type 80 WPM but you need to take time with JSLint to find a trailing comma issue? Yeah, it turns out that typing fast doesn't in any way affect how quickly you can find a bug in a program, and doesn't in any way affect your tendency to miss trailing commas when scanning your code. &gt; After a decade of writing JS I can say that I'm a lot more concerned with code completion that is smart across my entire project. Problem for me is that I'm doing a lot of freelance work, and it's not usually practical to test in a local environment. The project I'm working on now, for instance, is rather huge (unnecessarily so, but I'm not the one who made it), so downloading the whole project would be a huge hassle. The overhead of managing all of that simply isn't worth the added autocomplete. &gt; And again, I recommend JSHint. These days JSLint will waste a lot of time being too pedantic. &amp;#3232;\_&amp;#3232; Sorry, I didn't mean to imply that JSHint wouldn't be acceptable; just that Komodo's validation was insufficient. At the advice of another redditor I'm trying out Sublime Text 2, and there's a linter plugin for it that uses JSHint with nice highlighting.
WHY DID YOU DO THIS, NO POINT. But actually: Will this eventually be able to call upon itself through the API forming some kind of javascript Gitception, and if so, when will this feature be implemented? Thanks.
Then I'd have to wonder what would be the point in writing your code in coffeescript to begin with. Like what is your ongoing code artefact, the coffescript or the javascript?
github api for node, in development: https://github.com/pksunkara/octonode
&gt;What I mean is, rather than typing 90 WPM and relying on an external syntax checker, a better idea may be typing 60 WPM and concentrating on good habits and self-checking. I don't have problems with typing errors. I have problems with going in and deleting a line of code and missing that there was a comma before it. Usually I catch even that issue because I do try to focus on it. But usually isn't enough to prevent it from happening. &gt;Then you don't need a Linter except on occasion, and will be able to speed up while still having good code. Why not just have a linter running in the background telling me at all times if my code is valid? It's awfully silly for me to devote brain cycles to such an easily automated process. But look, I'm not trying to tell you how to structure your workflow, and I'd prefer if you didn't try to tell me how to structure mine. Different people prefer to work different ways.
I'm trying to give you helpful advice on how to use good habits to entirely eliminate steps in your workflow and become more productive. JS syntax is rather straightforward and easy to remember, in contrast with entire various libraries of variables and method names. With proper code completion you can easily type 75% less keystrokes giving you much higher than 90 WPM. But if fast, sloppy, and dependent is your most productive workflow, I don't know what the best IDE is for that.
If you are contributing back to the repository then obviously you should use CoffeeScript, that is a trade-off that developers knowingly make when choosing CoffeeScript. But if you just want to have a look through the code (and/or tinker with it) then by all means use the javascript version and you need never look at the CS.
Itself is a proper word. I meant can it retrieve its source code from github and then run it to retrieve its source code from github. This I then alluded to the movie Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception^Inception
**Oh!** Yes. Soon. That will be the next API. And because I have the HTTP code done, I can just add the URL routing and testing for each method. Seriously, it's now 75% test code and 25% API code. So yeah, not long!
If by back peddling you mean keep you on the topic at hand, which is that Apple didn't make javascript popular, then sure call it what ever you want to make yourself feel better. You still are confusing html5 and javascript because you think Pandora switched to using javascript instead of flash. Pandora was already using javascript and had a dedicated iOS app. All they did was move away from flash streaming which is the only thing anyone was really using flash for.
[Notepad++](http://notepad-plus-plus.org/)
I use this library so I don't have to wrap my head around it: http://ejohn.org/blog/simple-javascript-inheritance/ Edit: Hmm... not sure why all the downvotes. Is there a reason not to use a lib like this, and "roll-your-own" inheritance every time?
The first method is different from the other two. The first does not add "hop" to the Rabbit prototype, it adds it as a method on the individual rabbit objects.
Actually all 3 methods do different things. 1. Should be avoided, since objects from this class won't share anything except their constructor function. This means you will have the same methods in memory multiple times. Methods are better put on the prototype. 2. Better, since the name and the method will be shared across all objects (until one object reassigns it on itself).This is a pretty good approach imo, but you have to be careful with what you attach to the prototype.. I recommend to only put immutable objects (like strings) on the prototype. If you have a shared, mutable object on the prototype, then you can't just change it on one object without affecting all others. 3. Also a good way to do it and you don't have to worry about shared properties like with #2. Also this attaches the name to the object directly instead of the prototype, which means looking up the name is a little faster because no prototype traversal is needed. I normally go with method 3.
I would say that you use prototype for functions(methods) and for everything else you use "this." . I'm no sure why, need to refresh my memory. Also, i would say method 3 is preferred.
My favorite is now Object.create and it's the simplest of the bunch. var Rabbit = { name:"Hoppy", hop: function() { console.log(this.name + " is hopping!"); } } // Create an object with the prototype of Rabbit var rabbit = Object.create(Rabbit); // Create different object with the prototype of Rabbit var RodgerRabbit = Object.create(Rabbit); RodgerRabbit.name = "rodger"; // Create an object with the prototype of RodgerRabbit var myRodgerRabbit = Object.create(RodgerRabbit); assert(myRodgerRabbit.name === "rodger"); 
Brendan Eich, the creator of JavaScript, did a podcast all about this very topic: http://www.aminutewithbrendan.com/pages/20110216 :-)
Closures are simply function trees. Here's a small outline ... parent function --[has many]-&lt; child functions "Child Functions" are able to access variables from their "Parent (and/or Grandparent) Functions". This is the core feature of Closures. Parent Functions can not access variables of there Children. You can only access going up the function tree. A function child is created when defined within another function (the parent). The cool stuff happen when you start to pass the child functions around in your program as they still maintain the relationship to their parents.
Cool! Just one piece of feedback - I noticed that there was a little bit of lag when clicking on a target, causing me to often times miss. Changing the "onclick" event on your canvas element to "onmousedown" made the game a great deal more responsive
The major sites are ditching flash for html5 because of video. Which I keep saying. I really don't think you know the difference between what javascript does and html5.
 if (!Object.create) { Object.create = function (o) { function F() {} F.prototype = o; return new F(); }; } 
Exactly! I'm not sure if onmousedown works on iOS - I generally use touchstart if I'm developing for mobile
yeah i should of done that
This is so much easier to explain with a few simple graphics but I will try to do my best in text. When I said "the current context" I really mean the current scope-chain. The default scope-chain (before you do anything) contains the Global Scope. # A Brief Introduction to the "Scope-Chain" **Every time** we *invoke* a function, the JS engine creates a new scope and appends it to the end of the existing scope-chain to hold the function's local variables. Let's say we have this code: var x = 1; function foo(){ var i = 10; // We will stop here #1 }; foo(); // We will stop here #2 When we call (invoke) *foo()*, the JS engine creates a **new** local scope at the end of the current chain. Let's assume that we stopped at the comment "// We will stop here #1" and examine the scope-chain at that point. We would have something like this: Foo's Scope[ i = 10 ] -&gt; Global Scope[ x = 1 ] While we are inside of the function *foo()*, this is your *current context* (i=10 and x=1). If you were to reference the variable "x" while inside of this function, the engine checks *Foo's Scope* for "x", and doesn't find it so it walks up the scope-chain looking for the first instance of "x". In this case, the engine will find "x" in the *Global Scope*. Immediately after the call to *foo()* completes (at the comment "// We will stop here #2"), *Foo's Scope* is destroyed and the scope-chain will look like: Global Scope[ x = 1 ] ...or, in other words, it is just the *Global Scope* once again. The *current context* no longer has access to "i" because the scope it was contained in is long gone. # A Short Introduction to Closures Now, let's introduce a closure and see how that changes the scope-chain: x = 1; function foo(){ var i = 10; return function(){ var h = 99; // We will stop here #2 }; }; var bar = foo(); // We will stop here #1 bar(); In this instance, when we call *foo()* the exact same scope-chain shown above is created: Foo's Scope[ i = 10 ] -&gt; Global Scope[ x = 1 ] The only difference is that a function is declared inside of *foo()* and returned. This function is a closure. Once again, let's look at the scope-chain in the various places. If we stopped at "// We will stop here #1" and examined the scope-chain we would see only the *Global Scope* and nothing else. From that point of view (the *current context*), *Foo's Scope* is long gone and "i" is inaccessible. But the scope isn't gone! This is because functions maintain a reference to the scope-chain (or context) in which they were defined (called the function's *environment* in some explanations of closures). When *bar()* is finally invoked, the engine once again creates a new scope and appends it to the end of **the scope-chain that existed when the function was declared**. THAT is the vitally important part of closures. Read it a few times. In other words, if we stop at "// We will stop here #2" and examine the scope-chain, we will find something like this: Bar's Scope[ h = 99 ] -&gt; Foo's Scope[ i = 10 ] -&gt; Global Scope[ x = 1 ] *Foo's Scope* suddenly reappears because **the closure still maintained a reference to the scope-chain that existed when the closure was declared.** This happens even though *Foo's Scope* was no longer accessible from the context from which *bar()* was finally invoked. The function *bar()* brings *Foo's Scope* along for the ride every time *bar()* is invoked. # Disclaimer Phew! I hope all of that made sense. I am feeling a bit under the weather and have taken some cold medicine. For all I know, I could be giving you dimensions on Playmate of the Month.
Haha... wow. Ok that is around the 20th variation I've read of describing how closures work (and a very indepth attempt. Thank you!) I do believe it is starting to make sense. I just need to find some real world code where it is used and that will help it solidify. Then I'll be able to say "*YES! I do know what closures are, damn it!*" Thanks for your help. :-)
I like JS too, but I'm confused by this comment. How is JS vs Python (or any server-side language) even an issue?
Thank you, Peter for posting this. It helped me to better understand the better pattern for what application. 
Nice! That's similar to what I did for mine: http://sdball.github.com Love twitter bootstrap!
Yeah, I don't really know how to make something work cross-browser. Could you explain what you mean by this: "the size of your "field" is too large and cannot be resized"?
I have yet to use any of these in practice but I've read up a good amount. If you're just looking for good view bindings, knockout is the way to go apparently. Uses in-html bindings. Some people see that as a con, some dont. 
&gt; Should be avoided, since objects from this class won't share anything except their constructor function. This means you will have the same methods in memory multiple times. Methods are better put on the prototype. I see this argument a lot, and although it's true, it's not necessarily a good reason to discard this variation. Unless you have a giant constructor of 100s of lines or have thousands of instances, in my experience the extra memory use has zero impact on user experience. I am not a "premature optimization" zealot, but if you're going to optimize, make sure you're focusing on the right things. In this case I think too much code readability is sacrificed for only minor gains.
There's nothing wrong with it. Of course, this article is about 4 years old. A lot of things happened since then.
What are the main benefits of dust.js when comparing to, e.g., Handlebars or Transparency? If I got it right, async loading seemed to be an unique feature, otherwise it was pretty much like Handlebars. The workflow seemed to be: * Define templates with custom syntax, e.g., {{variable}} * Load a template * Compile it (either client-side or server-side) * Render the data * Append the result string to the dom. With Transparency the workflow is just * Call .render(data) for the target dom element I think the latter significantly more convenient. For sure, handlebars and dust.js are better performance vice, as string manipulation is faster than dom manipulation. However, in the real world projects, I haven't noticed the difference. EDIT: Fixed list formatting
Not strictly correct for option 1. The methods will be compiled/parsed a single time and the only duplication will be having separate closures, which is a much lower additional overhead. My preference is a variation of Method 1 where you completely avoid the usage of "new" and "this" in favour of purely lexically scoped closures, as relying on "this" to be correct will screw you anytime you have callbacks.
This looks like something you can solve server side, is there any reason why it needs to be done in JS?
For "normal" applications the memory consumption really is not that big of an issue, that's right. I'm working on games, so I usually have a huge number of instances, and that's where using prototypes really can make a difference (: On readability it's probably a matter of taste.. I find using the prototype-approach to be a lot nicer to read than putting everything in the constructor.
Do you need a way to manipulate URLs on the server side? I just wrote a [class](https://github.com/justinbauman/PHP-URI-Class) for that the other day and tossed it on github. I haven't finished documenting it, though.
Nice answer. OP, you might want to take a look at javascriptmvc. I was forced to use it for my current job, but the more I learn the more I like it. I particularly like the automatic unbinding of handlers. * I've never used any other js mvc framework
In terms of memory usage from including the file? Or in terms of the amount of method calls you'd have to make? Also, could you paste and example of one of your actual URLs and also the URL part you're trying to output? So I can apprehend exactly what you're trying to do. I think you're trying to just get secondary component of the domain, so `http://www.reddit.com/r/javascript` would be `reddit`. Amirite? &lt;?php echo str_replace(array('www.', '.subdomain', '.com', '.net'), '', URI::create(get_post_meta($post-&gt;ID, "source", true))-&gt;host());?&gt; Or you can just use str_replace for everything but that would give poor results with some URLs.
Should work for the URLs you're dealing with. It keeps the port number, though. You should rename `$host` to `$authority` because you're keeping the entire authority portion of the URL not just the host. I understand why you don't want to include a class when you just need one method. I suggest you at least put your method into a function. You could call it `$authority = url_get_authority($url)` edit: Add a colon to the chars you're splitting on to make it `url_get_host`
It's interesting that it is claimed to be smaller and faster than zepto, which I am currently looking at for a mobile JS framework. I guess I'll just have to dive in to see if it's worth switching.
Really? An email newsletter? \**checks calendar*\* Whew! It's **is** 2012....for a minute there I got scared, since email newsletters were the hot thing around 1998.
I'm talking about the class semantics, foremost, rather than the procedural source. But I'll bite. How is it not clean? It's normative and correct.
If you have a knee-jerk reaction to immediately downvote any submission that contains the word "closure", "truthy/falsey", "patterns", or "anonymous".....then your vote would be well-placed 95% of the time.
normative and correct !== readable and maintainable.
The problem is that the CoffeeScript is ambiguous and the interpreter has to account for both but in the *vast* majority of use cases the programmer would know so in javascript you'd end up with: for (var i = 0; i &lt; test; i++) { doSomething(); } Or if `test` is known to be less than 0 for (var i = 0; i &gt; test; i--) { doSomething(); } 
I have to agree. CoffeeScript doesn't have a way to determine that the programmer intends never to change the valuable of a variable. You could do: i = 0 while i &lt; test doSomething() i++ Or if test is known to be less than 0 i = 0 while i &gt; test doSomething() i++ Which is pretty readable and maintainable I guess.
I agree with the comment about the source. It strongly reminds me of NIH Syndrome; someone took a look at jQuery's source, decided they didn't like it, and rewrote everything because they thought they could do better. Also, the source organization is poor; nothing is separated out, there are no comments (which is very telling for unminified source), and there's no easy link to documentation from the main page. The only documentation I could find is on their [Github page](https://github.com/appMobi/jQ.Mobi), which consists of a list of available functions followed by a one-line comment. It also supports *browser* detection, which has recently been widely eschewed as inferior to *feature* detection; for a library currently in beta, one would think they would target the current state of the art. I'm going to take a pass on this one.
but you can use isPrototypeOf (although it might need to be emulated in older browsers) https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf
What do you think of the javascript on the right of [this page](http://coffeescript.org/#classes), which supports calling methods on the super class?
I removed var start and var timesToIncrement and it all works now. Fuck. I thought it was working because when it printed i it would go 1 - 5. Thanks for explaining it to me though. I see where my mistake was.
If you ask a question or two I can get a better understanding of what, exactly, is your boggle. Chances are that if you are doing any JavaScript, you are making closures without even realizing it. They are such a fundamental part of the language that you have to try really hard to end up with no closures in any non-trivial piece of code.
I made this to have some sanity with console output in a complex JS app I'm working on. There are situations where I would like to view logging output in a production environment, but I don't want to see *all* logging output, just that of one or two modules. You load the ConsoleManager (possibly first?) early in the load order, and tell it which "zones" you want to enable or disable logging for. In each module, you call the console manager once to get the console object for that zone, and define 'console' locally for that module. It's either the original window.console (if it ever existed) or an object that looks like a webkit/firebug console object with dummy functions that don't do anything. This doesn't allow you to dynamically set logging once the app is running, but it does give you the opportunity to conditionally set up logging at app load time, e.g. based on url params or some other condition. I haven't tested it in IE yet(!!) but I'm hoping the logic at the end of the constructor works. I'm hoping for some suggestions or criticism. Seems to be working for my purposes so far. 
Myself, It is a very simple interface to interact with the backend server from the app. The problem occurs when the DB field is blank essentially "" or empty string. If this is returned to the XHR then it translates that to be undefined. But on the contrary returning a field that has data in it then it will be just fine. 
 &gt;&gt;&gt; var a=1; undefined &gt;&gt;&gt; a 1 &gt;&gt;&gt; delete a; true &gt;&gt;&gt; a ReferenceError: a is not defined
&gt; Why not just write a jQuery based on standard methods like querySelectorAll? That's what zepto.js is, and JQ.Mobi claims that it is slower as a result because it uses querySelectorAll even when it could do getElementById. I can't verify any of that myself, but it's still interesting to read.
&gt; I agree with the comment about the source. It strongly reminds me of NIH Syndrome; someone took a look at jQuery's source, decided they didn't like it, and rewrote everything because they thought they could do better. To be fair, it's a relatively specific recoding- it removes all the extra code for various desktop browsers, and results in a much smaller library that only works on Webkit. I don't think they are trying to do jQuery better.
I didn't tried on a plain html page but from the console (Chromium) I got the same results as OP, where did you test?
Yeah, when a mobile framework doesn't support the most popular mobile browser in the world... neeeeeeeeeeeeeeeeeeeeeext.
I must have conveyed the wrong impression if you came away thinking that this behavior was undocumented. All the examples are according to spec. I just think the specified semantics are a little crazy, that's all :) For example, your comment illustrates a common misconception: "When assigning eval to another variable, those variables' "versions" of eval are run in the global scope, which is why we're getting undefined errors when trying to access variables scoped in the calling function" That's not the case! var foo = 10; (function (x) { var foo = 20; var eval = x; return eval('foo'); })(eval) Your mental model, if I understand you correctly, would predict that the result here is 10, because the actual copy of eval was passed through x and then assigned to a new lexical variable, eval. But it's 20! There are many things to like about javascript. The relationship between eval and scope is not one of them :-)
Awesome! Thanks.
It may very well be that I have limited experience with problems related to scope where I don't know why closures are useful. I suppose it's like if someone handed me a device and said "*This will make your car feebalblossom better than any other vehicle!*" I am not sure why I would want my car to *feebalblossom* or why that is a good thing. I assume that seeing more real world examples would help things sink it and I'll eventually want to fill my code with feebalblossoms...er...closures :-)
Bindings created with the var statement will not be deletable unless they are created in eval (see ES5 section 10.5). You cannot test this behavior in a console as usually these use eval so the semantics are different.
They're also outdated and stupid.
Newsletters are fantastically usable for many people. My grandma can find web interfaces confusing, but knows how to send and receive emails.
[RSS](http://en.wikipedia.org/wiki/RSS) The fact that it's ONLY email just smells bad to me, like a scam. I know it probably isn't, but it gives that look, especially when there's not even sample content on the page. And they want my email address? Better yours than mine... It ~~looks~~ sounds similar to [JS Mag's blog](http://www.jsmag.com/blog/), except that's on RSS...
I agree RSS would make it more useful (even though I don’t personally subscribe to feeds via RSS). I don’t know if you missed it, but the home page does provide links to sample content: "Want a sneak peek? Check out issues [32](http://javascriptweekly.com/archive/32.html), [26](http://javascriptweekly.com/archive/26.html), and [25](http://javascriptweekly.com/archive/25.html) or perhaps our [complete archive!](http://javascriptweekly.com/archive)"
Thanks, yeah I did miss that. Might help if they didn't feature a screenshot of an email as their main graphic. Email newsletters are what I used before RSS; to me, it's the difference between reading news online or reading it through a newpaper.
If you can find enough suckers, anything is a valid business model.
With Package Control, I have my build integrated with JSHINT, GOOGLE CLOSURE &amp; UGLIFYJS. Not to mention, if you work on a larger application the editor caches your project directory for easy file access. Textmate allows easy access but they don't cache your files. Sublime is so much faster at this.
Ah, didn't even notice the date. What would be an example of a more "modern" way to encapsulate the notion of inheritance? I can see the value in understanding the lower-level mechanisms for rolling-your-own (as the OP asked) but I would think it would be rather tedious to manually handle the process of reinventing inheritance for every project.
Wow! Cool! For those who like to learn more about making game in HTML5 please visit http://www.onlywebpro.com/2012/01/14/most-easiest-simplest-way-to-create-a-game-using-html5-canvas/
Didn't read the article huh? Maybe you should.
Having that screenshot results in a conversion rate that's 8x higher than without. Yeah, I split tested it :-) JSW is just about to tip 20,000 subscribers (more than this sub-Reddit, why? More people use e-mail than read Reddit, perhaps) so I've built up a lot of cool data about what works. Sorry you're not digging it, though, but you're not in my target audience (the majority of Internet users use e-mail regularly and are subscribed to at least one e-mail newsletter, I'll provide citations if you require them).
So it's obvious your primary objective is profit. Glad we got that out-of-the-way. That's why I don't do "newsletters". EDIT: just read this part again: &gt; JSW is just about to tip 20,000 subscribers (more than this sub-Reddit, why? More people use e-mail than read Reddit) so I've built up a lot of cool data about what works. LOL! That is quite the conclusion to draw, I'm sure you're completely right about everything.
This is my first tutorial published at SitePoint. Although they've classified it under HTML &amp; CSS, most of the article focuses on the JavaScript functions needed to build the game.
I don't have a dog in this fight but: &gt; AMD requires you to wrap all of your code inside an anonymous function that is passed to the define method: &gt; define(['dep1', 'dep2'], function (dep1, dep2) { &gt; //Define the module value by returning a value. &gt; return function () {}; &gt; }); &gt; &gt; In my opinion, having to write this out for every file *sucks*. This just sounds incredibly petty.
Seriously, thank you for taking the time to explain all of that. That example definitely gives me more insight into the usefulness of closures. Much appreciated. 
You are advertising them as private variables, when they are not. You might as well do: var Proto = function() { // privates this._ = {}; this._.foo = 93; this._.bar = 393; } This: * has the same (non) privacy rules * avoids just as many name clashes * easier for people to get what you are doing * doesn't require extra code * is faster
I too don't have a dog in this fight, but fighting boilerplate is a valid concern for programmers. This isn't a jQuery plugin we're talking about here; this is the kind of convention that could very well end up in *every* serious, shippable software product moving forward. It's a good idea to be picky at this stage. That said, programmers often make the mistake of conflating thoroughness with complexity, and end up oversimplifying. None of this an issue if this is the best solution after all, which it very well could be. I look forward to seeing the arguments play out.
&gt;Don't most websites minify their code already? With an [average of 14 JS files](http://httparchive.org/trends.php)... no.
They might minify at the individual file/lib level. I'm sure jquery.min.js is a popular one. Someone had to go and minify that code at some point.
His primary objective is irrelevant to the value of his product. Reddit is here to make money. Why are you using it?
Ah, thanks for pointing that out. I am working on something just for the iPhone right now, as a bit of a hobby project. But this is something to keep in mind for compatibility then.
I think the modularity of ender is really awesome. Being able to choose exactly what functionality you need will help keep a "framework" small, without needing to compromise.
Ignore my statement. I didn't pay attention.
James' reply: http://tagneto.blogspot.com/2012/01/reply-to-tom-on-amd.html Another response: http://geddesign.com/post/15994566577/amd-is-the-answer 
This is a bit of a "let me try", but here goes: http://www.reddit.com/r/javascript/comments/nv15i/the_javascript_guide_to_objects_functions_scope/
Just to clarify, how recently is recently? Do you have any charts or stats?
AMD is *an* answer. Personally, I don't see this obsession with not using global variables. Are you going to load more than one script that creates a "dojo" object? It seems like the point of AMD is to make it easy for lazy developers to load twenty different versions of jQuery.
&gt; Are you going to load more than one script that creates a "dojo" object? It seems like the point of AMD is to make it easy for lazy developers to load twenty different versions of jQuery. The point of not releasing globals, or doing so sparingly with a noconflict mode, is to prevent library name collisions. Think about a situation where there's this great library that solves an issue you're having, however for whatever reason or another it writes to the same global variable that you've already used within your application or another library is also using. Using AMD or some other module pattern it's not really an issue. More realistically, in jQuery's case they encountered issues where other libraries were using the $ variable as shorthand for their selectors and what have you. jQuery introduced the noconflict mode as a universal solution, AMD's pattern would also have worked well in this situation. Long story short, for your personal code using globals is fine (just hope a 3rd party library you want to use doesn't have a collision) but if you're releasing a 3rd party library for people to reuse, you must be careful not to leak anything.
AMD Is a terribly confusing acronym to use.
But typically, libraries only create one or two global variables. Name collisions are extremely unlikely.
On small projects where you can control the environment it's not as important, but as more and more libraries have dependencies, things like AMD are trying to help mitigate inevitable collision. It's easy to say 'well, don't do that then', but JavaScript is a programming Lang like any other and needs a way to deal with dependencies and global clobbering. Regarding why not having global vars exposed is important, again, working on a large project where everyone is mucking with globals makes it apparent how bad collision issues are. Especially in the browser when third party scripts (ads, video embeds, share buttons, etc) cannot be trusted.
Passing a function doesn't look right to me. I would probably do: foo.add(new Bar(arg)) I don't think Foo needs to know how Bar is created at all.
I know, right? When will Intel processors finally support jQuery, too?
It is the correct solution. It is not redundant. It is more verbose for the caller, yes, but in the big picture a correctly factored program will have many fewer lines of code and better opportunities for code reuse.
This is awesome. Any word on compatibility for it?
[Asynchronous Module Definition](https://github.com/amdjs/amdjs-api/wiki/AMD)
I take great exception to your assertion that I posted this to “drive revenue to the host.” I just told you that I did not. If you cannot accept my statements as fact, we have nothing further to discuss. Update: [Plonk](http://www.reddit.com/r/india/comments/jsnkf/rindia_check_out_the_reddit_enhancement_suite/).
I suppose so, but it seems like that boilerplate is pretty descriptive of what's actually happening, you know? That said, it does seem to me that with some manipulation of objects and variadic functions, you could set this up to be a little less redundant, and a lot less order-dependent like so: define(['foo', 'bar'], function (deps) { return function () {}; }); Where `deps` is an object with members `foo` and `bar`.
Thanks for sharing that with me. Yes, the long term objective is to make a reasonable living from my day job. Yes, it is run as a for-profit enterprise. Like Reddit. Like YCombinator. Like your day job, perhaps. I am certainly not "completely right" so your faith in me is misplaced. Indeed, I run experiments because I know I am not right by default. I formulate hypotheses about what will work well and perform experiments to validate or refute those hypotheses. That is the scientific method and multivariate testing of this sort is a common way for both businesses and individuals to improve their performance. I shall continue to perform experiments and if the way people consume media changes (such as, say, a wholesale shift from e-mail across to Facebook or Reddit) then I'll change my opinion and adjust my strategy accordingly. As it is right now, e-mail is the domain in which I can have the most success in serving the most people. I make nothing without delighting my readers so while profit is a key objective, it will not come without delighting readers. And I am.
&gt; What's so different from your submission, and all of the blogspam (affiliate) posts? So what if they're looking to make a buck, that's no different than JSW. The difference is that the typical affiliate spam post provides little useful information or service other than to get you to click on a link for which the author either makes a per click amount or a commission on a sale. In contrast, JavaScript Weekly is a 61 issue old weekly newsletter that features original commentary and is curated. It has an extensive readership covering a large section of the JavaScript development community. Of its 61 issues, about 7 or 8 so far feature a single advertising slot which is clearly marked as such. Those are some differences between JSW and "blogspam posts" for you. As before, thank you for sharing your opinion, though I would appreciate it if you desist with the libel.
Does anyone have a link to those slides?
 this.type = 'password'
What if `Foo` is a library's external API? Is it worth making users worry about `Bar`?
Streaming (comet) is faster than XHR (depending on how its implemented, the best libraries use a number of techniques), although it'll probably change the way you write your app quite a lot.
Here might be a good place for a caveat that if you're computing an md5 hash in a browser, you're *probably* doing something wrong. (Which isn't to say that a fast JS implementation of md5 doesn't have a ton of legitimate uses)
Internet Explorer won't allow you to change the field type though. HTML5 has a placeholder attribute that handles things automatically for you. &lt;input name="password-login" id="password-login" type="password" placeholder="Password" /&gt; That will work in modern web browsers. For IE though, you can add the ability to do so by using a shim. You can find them at places such as: https://github.com/parndt/jquery-html5-placeholder-shim http://www.jonathansewell.co.uk/index.php/2011/05/25/html5-placeholder-shimshivfiller/ http://snipplr.com/view/47390.58337/
 var hexHash = SparkMD5.hash('Hi there'); // hex hash var rawHash = SparkMD5.hash('Hi there', true); // OR raw hash I'm not a big fan of the second argument being a boolean. Just passing *true* doesn't say anything about its function. I'd prefer seeing something like { raw: true } to make it clear.
This is a known limitation of the FileReader in chrome only. I will update the docs. Please see: http://code.google.com/p/chromium/issues/detail?id=60889
In before blackout! I would change line 457 to something like: var hash_string = new String(hash); hash_string.toHex = function() { return hex( this.valueOf() ); }; return hash_string;
&gt; Not necessarily. Well, right. That's why I said "probably".
Oh, that's simple! Sometimes I forget how dynamic JavaScript can be.
Ok it seems chrome can run it if you launch it with a special argument. There is more details in the documentation.
Nice idea, I will probably do it :)
Hi, Cool project, i also tried a while back to toy around with the same concept but for warhammer quest. I hope these two links could help you out: * [Drawing isometric worlds](http://stackoverflow.com/questions/892811/drawing-isometric-game-worlds) * [Isometric tile game tutorial](http://fivedots.coe.psu.ac.th/~ad/jg/ch064/ch6-4.pdf) I would also suggest you to cross-post to /gamedev. Would like to watch the progress, if you want to set it up on github or something :) Best of luck
Thanks for the links. I hope to get a little more done, clean up the code and then I'll set it up on Github for sure :)
OH MY GOD I LOVE YOU! I was *just* looking up board games not 5 minutes ago to buy; and as a nostalgia thing was looking for Hero Quest. Hope you keep this up, I'd love to be able to play this online Edit - shall you be putting this on github at all?
Once I have a solid foundation down I'll put it on Github and welcome any user contributions
For the love of all that is good, stop using parseInt() instead of Math.floor(), Math.ceil(), or Math.round()!
Wait, whats wrong with it?
Hold down middle mouse button to scroll and try hovering over some of the squares further away
Yeah, the scrolling doesn't work at all for me on FF...whatever. 9. As far as the hovering, yes it is off but honestly I didn't even notice at first. It seems like you could just change the tile that gets highlighted and be fine with it, instead of the tile that gets clicked? To me it just seems like those tiles are at a "higher elevation" so that's why the mouse pointer is above....sorry I realize this is pretty useless advice.
{ "name": "Elijah Manor", "priorities" : [ "Christian", "Family", that's about as far as i read
I'll check this out when I get chance.. Thanks for the great response!!
Why is this in javascript?
Cool! I started working on a simple isometric game about a year ago, but I haven't worked on it recently. Here's [the demo](http://robbles.github.com/isometric-game), and [the github repo](https://github.com/robbles/isometric-game). Click on a square or use the arrow keys to move the player around. I definitely remember having issues with positioning the isometric tiles, but I'm not sure what I did to solve the problem. You can check out the `convertIso` function in `js/game.js` - I'm pretty sure that's the conversion function from X-Y to isometric.
Just curious, why are you avoiding canvas?
You can apply the same concept to Backbone written in JS very easily, I wouldn't say this is a coffeescript only idea.
Looks like a great start. I see you're using gameQuery as a framework.. How are you finding this? I looked into it myself, but so far have done all the coding myself.
It's great when companies do this; reveal what they are using and how. Their tech choice is very interesting. I can't help but think that “Use things that are going to work great in two years” was taken to mean, use the very latest thing that you can: CoffeeScript AND Node.js AND Backbone AND MongoDB, do we really think that all of these choices will be there in 2 years? This is not just bagging them out. If their justification was use technologies that allow JavaScript developers to write an app that is performant and easy and quick to develop then they succeeded. I'm just not sure that the reason given is accurate.
Perhaps krawcrates' parser is buggy and can't parse lists of more than two items? 
http://calip.so/ ?
fair enough, all further posts containing coffeescript to this subreddit will be annotated with NSFNC (Not Safe for Non-Coffeescripters?)
Abstractions in that, when you look at coffee script, it isn't javascript...it is another interpreted layer on top of javascript. For personal projects this is perfectly ok...but as a person who deals with a lot of code that is especially not totally his own, I must argue against further abstractions which cloud how something works. Debugging javascript that has been compiled from coffee script becomes more difficult simply because of this.
I agree that using Coffeescript if you barely know javascript is a bad idea. However, Coffeescript is just Javascript with some painful syntax removed. That's all. You still need to know Javascript. I like Coffeescript because it makes it so easy to write *very* complex applications with little boilerplate code while maintaining clarity and readability. 
Just as a learning experiment I wrote one in Node.js, CouchDB and jQuery. I made a couple screencasts as I wrote it. http://mcottondesign3.appspot.com/post/ag5tY290dG9uZGVzaWduM3IMCxIEQmxvZxj57AkM
http://xkcd.com/386/
Disclaimer: I love JavaScript &amp; don't love ActionScript, but wanted to hear some responses to this from the experts here on /r/javascript.
I believe he's looking for dynamic content based on user edits. A CMS can provide a *lot* more than easy changes for a developer. Live user edits and workflow for making new content live, and sharing content across multiple front-end sites are a few items I can think of that would support wanting this.
Not sure about CMS, but there's a pretty cool framework for building apps (a la Ruby on Rails) called [Bones](https://github.com/developmentseed/bones)
That's a pet peeve of mine as well. I hate seeing people calling dynamic languages "untyped". Is there even such a thing as an "untyped" language, besides perhaps brainfuck? I'm not even sure it's fair to call assembler untyped, as some registers are meant to hold and operate on floating-point values only, for example. Anyways, the author seems a little biased, in my opinion. He works for Adobe, he'd like to see Flash/AS to "win", which isn't happening right now, with the massive push JS is getting. Me, I'm rooting for Google/NaCl. Screw forcing people to use broken languages.
Javascript comes with your browser. ActionScript doesn't. If the argument is that ActionScript is a faster and better language, then you have to compare it to other options in the browser plugin category, e.g. [NaCl](http://en.wikipedia.org/wiki/Google_Native_Client). That said, I'd take a standard language that's present in everyone's browser over a plugin any day.
What do you think about the possibility supporting javascript byte code in the browser, similar to how Java is distributed? Eg. instead of pulling in source files, the server could deliver a byte code version of the same file? I don't know much about compilers, but I assume that the benefits of static analysis are vastly diminished when dealing with a dynamic language. Still, it would seem that certain optimizations would be possible, and the parsing step would be removed from the browsers work?
According to crockford, the use of any language construct where we cannot tell if the author intended to utilize the quirky behavior of said construct or if they simply didn't understand the difference should be avoided. He even calls people who use == funny names ;)
"ActionScript is awesome, Javascript sucks" -Creator of ActionScript. Bit of a bias here, no?
&gt; I think it treats all data as bits. If that is the case it would be untyped. No. You use different instructions when branching depending on whether the data is considered signed or unsigned: in x86 for example this means using JA/JB (jump if above/below) for unsigned, JG/JL (jump if greater/less) for signed. You use different instructions for multiplying and dividing signed (IMUL/IDIV) vs unsigned numbers (MUL/DIV). You use different instructions for doing nearly any operation depending on whether you want to operate on bytes vs words vs dwords vs qwords. You most certainly use different instructions when operating on binary floating point vs. integer vs. decimal float vs. BCD. So right there, we have roughly the full basic C type system represented: {signed,unsigned} {char,short,int,long}, float, double. 
Do the instructions care if the data is considered signed or unsigned, or does the programmer?
scumbag adobe dev: claims to compare languages, actually compares toolchains wohoo our in house toolchain which only runs code in our products can be faster. Well JS runs on any browser, can &amp; is used server-side while Flash doesn't exist on iProducts.
The CPU is just reading bits from the flags register during a jump. Other operations set those bits. Registers have no meaning; they're just machine words. Operations do have meaning (`mul` and `umul`, for example). They often give meaning to data temporary, but that meaning is local to the operation. The data itself is still just bits, and nothing can be enforced or implied about the data.
Yeah, I'd go along with that. But it doesn't change the fact that Flash is on the way out.
Really nice work there on tachyon. You just earned yourself a bookmark! &gt; The tradeoff for JITs is simple: the longer your program runs, the more time you can spend optimizing it. I don't see this happening at all in practice WRT v8.
I think jakewins is a bit confused as to why people want to distribute bytecode; whereas some might think that it's to save on compilation time, that's such a negligible benefit. The biggest benefit to bytecode is minification, which is significant for large programs (&gt;500kb of minified JS) and becomes less worthwhile as the size decreases. How do you feel about using LLVM bytecode as the compilation target? That seems to have the widest support and most acceptance, and there's even a compilation (or execution, I can't remember) option for Chrome to enable LLVM bytecode execution.
Check out [AMD](http://addyosmani.com/writing-modular-js/); it addresses the modularity of javascript in a browser-compatible way, and there's an excellent library ([requirejs](http://requirejs.org/)) that will aggregate your modules with the specified dependencies, package it up, and then minify it. If you don't want to package it (during development, for example), then it all still works. It also supports externally defined modules. It's a great library, but it doesn't address your second point about "truly huge apps"; I think that's what NaCl is for.
I don't understand why Bytecode systems go high level. I would have thought it would be better to have something analogous to a real CPU. I'm becoming inclined towards thinking that a browser bytecode format would be a good supplement and contrast to JavaScript. Portable NaCl might work in that respect. Although I would be inclined to go for a bytecode that was user mode Arm. Emulators have shown it can perform well on x86 and mobile devices would handle it even easier. In fact I'd think multiple bytecode formats would serve different goals well. An 8bit AVR instruction set wouldn't give a high execution speed but would have good code density and low memory usage. Considering the number of webpages that I have encountered that don't do much but still eat up a hundred meg over the course of a day, something like that could be beneficial. 
Regarding CMS, I really suggest you stay away from them - as pointed by vertice. Regarding back end JS, are you sure there are some CMS that are totally built on javascript? I always believe that JS is most suitable for front end only.
Think of it like a singly linked list of fallbacks for when properties (methods and values) are attempted to be accessed, but do not exist.
The Firefox bytecode (internal to the JIT) and the Java bytecode were originally designed for interpreters. They tried to keep those simple because it makes the interpreter implementation simpler (and a bigger level of granularity can mean better interpreter performance too). Something else I often hear mentioned is the fear that, for example, having something very low-level (think x86 instructions) would be hard to optimize on the receiving end. That you'd be tying yourself to a very specific architecture and get terrible performance on ARM, for example. Some people seem to think the only alternative to that is a stack-based bytecode. My personal preference is for a medium-level IR that tries to be both language and machine-agnostic. I designed the IR of my compiler to be fairly low-level yet portable. The IR has direct support for pointer, reference (garbage collected), integer and floating-point values, for example. Yet it's in SSA form, so it's independent of register allocation. My IR is actually strongly inspired by that of LLVM. I'm pretty confident it could be efficiently compiled for any modern general-purpose CPU.
Interesting article. As with any argument from semantics, this distinction is completely useless outside of academia, though.
I would think that, given your earlier argument against the cost of parsing, you wouldn't find the LLVM-&gt;machine code translation to be a reasonable advantage of using LLVM. I guess I just don't see how those two items are significantly different. However, to the rest of your point: the optimization is quite nice, and allowing other languages on the Web would really be a long-overdue feature that really needs to be supported more than it currently is.
Being able to have a client that runs LLVM bitcode means we don't have to be restricted (in terms of performance) by the effectiveness of JavaScript optimizations. It makes it possible to use languages that are easier to optimize, like C++, if you want. I'm working on better JS optimizations myself, but there are things you can do in C/C++ that you just can't do in JavaScript.
yeah, there is an error there, but is not in the sintaxis 
I've tagged you as "knowledgeable about web technologies", so I'll be sure to keep an eye out for said optimizations in the future ;)
I can read the future and someone will post an answer to this shortly...
Well, when JavaScript and a server *really* love each other...
Fantastic!! That's perfect - exactly what I was looking for.
The problem then is you then need a fair bit of run-time semantics in each case: for example, instead of GETN_IMM %r1, %r2, "foo" for a property access in JavaScript, you need something along the lines of a lookup in property table, mutate any caching you have, and then return the property, so it comes a lot more verbose to do simple operations. You can't just have a generic object type because the semantics of property reads/writes is radically different between something like JavaScript and Python.
Well, you're looking at a tutorial in [Codecademy](http://www.codecademy.com/), a site that helps beginners (like you!) to learn programming. The specific tutorial is [lesson 7](http://www.codecademy.com/courses/programming-intro/6#!/exercises/0), though you'd probably want to start from the beginning to understand what the code does. 
No access to a computer, does using 'use strict' change any of these results?
Is this in response to the WAT lightning talk?
If you remove the ambiguity between object and block, you get "[object Object]", too. ({}) + []
I think you're missing the forest for the trees.
It increases even without the console.log, you just don't see it. The for loop initializes i to 0. It checks to see if i is less than 2 and runs the loop, then adds 1 to i. After that, it checks to see if i is less than 2, and if so, runs the loop again, etc. So on the final run through the loop, i == 1. At the end of the loop, it adds 1 to i (making i == 2), which fails the loop condition and continues onward. 
I don't see data transfer as a huge problem. The code doesn't have to be any bigger than modern compiled software. You can fit alot of code in just a few kilobytes. Certainly, statically compiled languages would easily gain. Dynamic languages can also be compiled more compactly if better optimized, as I intend to demonstrate for my Ph.D. Furthermore, compiled libraries can be cached and even shared between multiple websites. It wouldn't be hard to just have a JS compiler library hosted somewhere that tons of websites can use. That pretty much solves that issue.
To be honest I learn these kinds of things best when I raise the question with a friend or coworker as a brain teaser. There is much value in bouncing your ideas around with other techies.
It has an option to bundle up all the requirements and minifiy the stuff. 
There's a [list of node users here](https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node). As I understand it, node.js really shines when you want to process a high volume of IO-bound requests. It won't really be all that effective if there is a lot of CPU processing required to serve the request, but if it's primarily just shuffling data around then it's quite effective because a single instance can serve a lot more requests with the same hardware compared to the usual "thick" application server (WSGI/Python, mod_php/Apache, Mongrel/Ruby, etc.) that requires one thread/process per simultaneous request. It's a popular choice among these "single page application" sites where all the rendering is done client-side and the backend just provides a JSON API. It would also be a good choice for an application that has a high volume of short messages that require low latency, like one of those real time collaborative drawing/editing-type apps where you can watch the document being modified live by someone else, or a live chat app, or perhaps as the back-end for an analytics or advertising engine, etc. 
The first one is a primitive (unboxed) string, which is not an object. The second one gets auto-boxed into a `String` object when you try to look up a property on it.
Yup. Object("") instanceof String; // true
I don't care what his benchmarks show, everyone knows that flash is dog ass slow. Where I work, we're replacing all of our Flex interfaces with javascript based ones, and the difference is night and day. When I load up an old Flex tab, it takes about 8 seconds before I see any content. Click on a JS tab, and everything is rendered in about 2. And from a developer's perspective its worse - it takes 2.5 minutes to compile our Flex code, just to see one simple change. When you make a change in javascript code, you can often do it straight from the browser and see the result in real time.
 %&gt; perl foo.pl %&gt; python bar.py %&gt; node baz.js If that makes sense to you, then you've got your foot in the door of the node party.
Conversely: typeof Object("") === "string"; // false
It's not all that strange if you understand how things actually work. Take for example reading from a file on disk. To do this, the CPU sends commands to the drive controller, telling it "please read logical block numbers W through X and store the results at the buffer at address Y in memory, and when you're done please raise interrupt Z to let me know." It's going to take the controller some time to fulfill this request: the average rotational latency for a 7200 RPM drive is about 4ms and the average seek time is around 9ms, so it will be around 13ms on average before the head can begin to read any data from the surface. For a 2.4 GHz processor, 10ms is 24,000,000 cycles, which is quite a long time. The CPU can do anything it wants while this is all happening -- it would be fantastically inefficient if it were tied up during this period. If you use blocking IO, then the operating system just suspends the process that made the IO syscall until that "I'm done" interrupt arrives. Other processes or threads on the system that are ready to run then get to use the CPU, and so if you write a threaded application then you can begin processing a new request (or whatever) during this period while the file that needs to be read for the other request is being read. But if you think about it, non-blocking IO is really a more natural fit to what's going on. Instead of the OS blocking the thread and switching to something else, it just lets it keep on running. But that's what we want, since there's only one thread anyway. The function returns immediately, even though the data isn't ready yet. When that interrupt by the controller saying that it's done reading the data occurs, the OS will simply make a note of it. It's up to the non-blocking application to periodically ask the OS for a list of IO operations that have completed and are ready -- that's handled by the application's event loop. It then takes one entry off that list and runs the callback that was associated with it.
I agree that Backbone.js has too much boilerplate. I'll admit that I haven't actually built anything with it, but I've read several tutorials and I can't get past the fact that you seem to rewrite the same code over and over again (for example, in view/template rendering). I realize that they want it to be flexible - but sometimes I wish it were more opinionated so the boilerplate could be kept at a minimum. Ideally, I would like something in between Backbone.js and Ember.js. The Backbone utilities (routing, storage, etc.) plus the streamlined Ember templates &amp; data bindings would be awesome.
There's lots of technical specs about what programs can benefit from running on node, but here are some examples given without explanation. For the most part ruby or python could do them as well but the difference is that ruby/python does not run on the client. * An AJAX chat room that serves and receives JSON. * A service that fetches pages or data out of a short term cache and serves them over HTTP. It can update itself periodically driven by an event or on a timer. A webserver that you can program. * Games (especially multiplayer games). * Something that optionally executes client side scripts on a page before serving the page to the user so that it is served in a mature state. Because this is JavaScript, the server can run the same programs the client can, it just lacks some of the APIs (e.g. the DOM, but you can provide this with a node package). Things like replicating form validation on the server and the client couldn't possibly be easier. Node is not just a "server-side" environment and shouldn't really be compared to the use of mod_php - I'm sure it runs on a server of some sort 90% of the time, but it doesn't have to serve clients or run as a service in the background. You can use it the same way as any scripting language, although it doesn't have the utility of bash for system administration or perl for text processing, it is more general purpose.
Thanks, I've changed that particular instance, since it is *just* a constructor rather than the constructor-prototype pair that would form a class. I'm keeping uses of the terms 'subclass' and 'superclass' though, since they carry semantics appropriate to the problem I'm describing.
I think it's pretty safe to assume the author knows that and is using class in the "thing you use as the basis for creating multiple things which have access to the things the first thing has" sense. "class" is still a succinct and widely-understood way to describe that (and "subclass" for the same plus inheritance), regardless of its technical accuracy.
Ember.js has plugins to provide Backbone.js-like, API-backed model objects.
I just wrapped up a project in backbone and generally found it to be a pretty decent mvc-ish framework to use. Be prepared for some work if you're not trying to talk to a restful service though. The only way you can modify the querystring parameters that a fetch call uses is at the collection level. This means that if you need to pass parameters for your individual model saves / gets you either have to override the fetch / save completely or rely on wrapping it in a collection of a single model (this is ugly I don't suggest doing it). Once the data is at the frontend though binding views to your models just works and any changes updates only those elements of your UI that need updating. 
Because Javascript.
So you're the author? Great! Can you expand a bit on how you cope, psychologically or otherwise, with the necessary publicity of "this really should be considered private" state when using methods defined on the prototype?
To understand the "voodoo", you have to understand the idea that executable code is a type of data. You know how it's possible to download a program (like firefox)? The fact that the program can be transmitted shows that programs can be represented as data. Once you've accepted the idea that program is data, then the way to get a function to always return immediately would be to pass, as a parameter, a program (i.e. a set of instructions) which state what do to when the function is done. For example, in "normal programming", you might write code like: var fileContents = readFile(); print(fileContents.length()); While in the node.js style, you'd write something like: var whatToDoneOnceFileIsRead = function(contents) { //Creates a new, anonymous function, and assigns it to a variable print(contents.length()); }; readFile(whatToDoneOnceFileIsRead); and in the second version, the readFile can return immediately, even though the file is not done being read. This "node.js style" wasn't invented by node.js, BTW, and the proper name of this style is called "CPS" or "Continuation Passing Style", because you're passing the "continuation" (i.e. "what to do next") to each blocking operation.
Not the author, but I'll take a stab at this. You're talking about the situation in which you can't enforce privacy, so you just prepend an underscore to a property name and hang it off of a public object? That's annoying, sure, but what _worries_ you about that approach? I mean, sure, people can see the implementation details, but they can do that anyway with View Source. They can mess with stuff they shouldn't, but they can do that anyway because everything's mutable (at least for now) in a JavaScript environment. So what is it that you'd need to cope with?
That is not really namespacing. That is just putting your function pointers inside of nested objects.
Kudos for acknowledging that this can be as much a psychological issue as a technical one. Personally, I subscribe to the "[we're al consenting adults here](http://mail.python.org/pipermail/tutor/2003-October/025932.html)" philosophy on privacy in javaScript. For example, say my HTTP API wrapper module happens to use [request](https://github.com/mikeal/request) for HTTP requests, takes an options object through which (the documentation states) you can specify a proxy and default headers, and stores the object it uses to make requests in a ``_request`` variable. If you, as a user or extender, mess about with or depend on this variable being a particular way, *you* just took on responsibility to check I'm not switching my dependencies out from under you the next time you ``npm update``, and I'm just fine with that. I'd rather give you the *option* to take responsibility than take the MC Hammer position (it also makes it much simpler for me to mock this sort of thing out for testing, without introducing a bunch of dependency injection which is solely to support making my code testable in language in which none of this hoop-jumping is strictly necessary).
Did it look a bit like [this?](http://bonsaiden.github.com/JavaScript-Garden/) This one says it's built with Node.js and a jade template, maybe that's what you're looking for?
It's similar, but not quite. In the one I remember seeing, the height of each link in that menu is proportional to how much height the actual content took in the page. I think it also showed where I scrolled to, so I could see how much left in this section I need to read. I imagine doing this wouldn't be too difficult, but if there's something ready to go, I'd love to reuse.
That's really slick stuff. Thanks for the share.
Basically, what insin said. Underscored methods are enough of a communicator of intent that I know others will understand the risk they're taking by accessing those fields. As I said in the article, enforced privacy, especially *within* a codebase's internals, is often a sign of over-defensive programming and I find it tends to go away if people practise TDD or some other method that makes them focus on designing good APIs. My other approach to this, on my open-source projects, is "it's not in the docs". If you release code, people *will* poke around in it, and may use stuff you don't want them to. People have done very useful things this way. To communicate the risk, I try to write very good documentation that explains the indented usage model for my code, then I can say to people they should expect risk if using something that's not documented.
To get to the other side?
You should totally put that on GitHub if you haven't already (if you did, please point me to it as I was blind obviously). I'd love to watch this project and or help out! I fucking loved Command &amp; Conquer. EDIT: Sorry, I indeed was blind. https://github.com/adityaravishankar/command-and-conquer
I don't care if the author knows it or not. It's harmful to use the word class when talking to audience partially composed of beginners because it encourages them to think in a class-oriented way while using a prototype based language.
Dragon shrines.
Do you sell used cars too? 
I was always a Dune fan, myself, but your project is pretty rocking!
Very ambitious - however it is unusably slow for me (using Google Chrome 18.0.1010.0 dev on OSX on a 2.6 GHz Intel Core 2 Duo Mac).
The zeal of the newly converted.
I could have sworn I'd read somewhere about one of those actually being in the works. I cannot remember what it is now, but I think it was for one of the known RTS franchises, too.
From what I heard from one of Ryan Dahl's talks, one of the goals seem to be let's see how much even driven style can achieve. You could start with Rails applications running behind a well known front-end web server (for load balancing and security) to serve your websites. Once frameworks built on Node.js are mature enough, you replace all Rails applications with one Node.js process. That is one process doing multiple stuff which is made possible by the event driven nature. When that process can take care of security as well, then the whole thing is Node.js. If confused, watch Ryan Dahl's own explanation from 35:00 to 39:00 in [YUI Theater — Ryan Dahl: “Introduction to NodeJS” (58 min.) » Yahoo! User Interface Blog (YUIBlog)](http://www.yuiblog.com/blog/2010/05/20/video-dahl/) with a series of diagrams. You could imagine a giant program (such as Google Search, Google Maps, Skynet) running on a network of computers. A bunch of Node.js processes are running on a bunch of computers and they talk to each other, and talking is event driven and they are streaming data to each other, and the collective sum of their behavior is the giant program.
https://www.facebook.com/profile.php?id=100001520322744
Incredible. I can't help but think that HTML5 and Javascript will become the defacto platform for everything.
I've found some optimizations I can do to improve performance.... I didn't really expect so many people to start playing the game, and the first version was very crude.....
There's also jQuery fracs, which creates a full (scrollable) outline of the document (and other useful stuff like % visible etc.): http://larsjung.de/fracs/
To prove that it could be done... :) I just wanted to see how far I could go with HTML5 game programming... I had just learned all the pieces I would need to make a game like this.... &amp; C&amp;C was an old favorite :)
Looks very nice. Yet another slider, but I'm always looking for the perfect one. I'll give this a try some time.
Yep, they own copyright on any search result or graph you make.
I like how [thomasdavis](https://github.com/thomasdavis) set up his [modular backbone example](https://github.com/thomasdavis/backbonetutorials/tree/gh-pages/examples/modular-backbone-updated).
Nice javascript graph. Not sure what all this other talk is about or why you couldnt just post "Hey I made a graph!"
Anytime I see "design patterns" in this sub, it's usually pretty bad....but this post is not too shabby. He has a decent series covering some of the less-talked about patterns in JS (composite, adapter, decorator, facade).
I just took a quick look at the source via Firebug. It looks like these "responsive" images work by: * max-width: 100% (on the images themselves) * Image parents (&lt;li&gt;) have pixel widths, which control the image max-width. Is that basically the secret sauce here? Unfortunately, mobile devices still have to download the big/desktop version of the image.
Have you tried with multiple params? ary.push(x, y, z); is valid. I'm also curious if overriding Array.prototype.push would give performance improvements on Safari/IE. My guess is that once you got down to handling multi arguments, it'd no longer be worth it. edit: I'm also curious about array concat, but I'm too lazy to test :) (i.e. Array.prototype.concat(ary, STUFF)) here's my completely untested re-implementation of push (written in the reddit comment box... so take it as pseudocode): Array.prototype.push = function() { if(arguments.length === 1) { return this[this.length] = arguments[0]; } else { return Array.prototype.concat.apply(this, arguments); } }; edit2: my suggested implementation is impossible, because you can't use concat to modify an array in place. You could keep the original "push" implementation someplace, or re-implement it using a for loop, but I'm guessing both would be slower than native push. 
And image scaling looks like crap in older versions of IE.
"The page you requested cannot be displayed right now. It may be temporarily unavailable, the link you clicked on may have expired, or you may not have permission to view this page."
I'm not aware of any rule or "best practice" that says you can't introduce *any* new variables into the global scope. It is perfectly acceptable to provide a public interface through a *single* object. It's only a problem when you're introducing a large amount of identifiers into the global scope which would increase the likeliness of conflicts.
Are you saying they're both run in v8? Or why would a v8 version is faster? You need to refine your test cases to only the relevant code. I looked, but with 50 lines in each file, there's no telling what the difference is. Most likely, V8 will be making all kinds of crazy optimizations to each and every line.
Both using v8. The Fast version comes from the Great Language Shootout binary-trees benchmark. The Slow version is the same as the Fast version from around line 21 of the Slow version on.
That awkward moment when you downvote what looks like blog spam then find 3 useful things on the first 2 pages of the blog.
I really do love it, I don't have much experience but I'm eager to learn. It's also great to see someone not shun a noob, ha. ah, yes, I had removed the 's += ...' and replaced it with the 's = ...' while trying to debug, thanks much. No change to issues, but I can definitely see where that would be a major issue.
Definitely. Once it's functional, I can go back through and clean it all up.
Here are some other things to consider once you get it working: The first rule of good programming is don't repeat yourself. When you look at the code, do you notice how you have many repeating patterns? The names of the fields, calling the same function over and over again, etc.. Here's an idea to play with var calculatorForm = document.calc, job = window.localStorage.getItem(jobName); [ 'shirt_cost', 'shirt_markup', 'primary_print_number' ].forEach( function(fieldName) { calculatorForm[ fieldName ].value = job[ fieldName ]; }); If you keep going in that direction, you can reduce your 100 line file to, oh, maybe 10. :)
Sure, go ahead. I think I also posted my version in a comment a few months ago: [here it is](http://www.reddit.com/r/javascript/comments/kp3zb/essential_javascript_namespacing_patterns/c2m407y). I went a step further and allow for passing in arbitrary objects which you can then reference and alias via function arguments. 
Ow ow ow, too cluttered. &gt; I know some people don't like this syntax, but ... Oh, sorry. I acknowledge that readability is a partly subjective thing. I'm sure that looks a lot better in a colorizing IDE than it does here. 
Also, candidate for the most useless link-headline of the week award. :-(
I think some of the syntax sugar is purdy, but to me plain JavaScript is usually more clear about what it's doing.
What didn't work when you tried Cloud9? The only issue I have currently (mostly I'm using the current master) is that it doesn't work with node 0.6.x yet. But it's on the way and so long I'm fine with having a 0.4.12 binary lying around that i use for Cloud9. There's also the option to use the provided environment from the devs at http://c9.io/ . That should always work.
That's how you make namespaces in JS. There is no other suitable mechanism.
DevExpress has a control for this (for .Net)
Sorry, I didn't notice was subreddit this was. I assumed it was web_design. Unfortunately I'm not 100% familiar with Python. But there has to be a jquery plug-in for this. What do you mean by 'drag along a row/column in order to create an event'"?
Ah fair enough. Month mode does something similar IIRC. What I mean is more allocation of timeslots in a day.
Performance testing?
How does one load existing project files into it?
http://jsfiddle.net/9LNs7/1/ You might have better luck setting up your mammal constructor to accept a mammal type rather than name for that animal. That way when you set your prototype of the child you can pass it the type for all those instances. Then just create a name function off of mammal that the child would inherit and set the name there.
https://github.com/themouette/jquery-week-calendar
How long did it take you? I wanted to start on something like RA2 the other month but my skills are not up to it.. yet 
Sorry for the newbie question, but what does headless means in this context?
Don't worry, I gave him one for you.
My mistake, I thought they were a value. I'll have to read on --oh, I remember now, I use True/False, correct?
Correct. Or you could use strings. Also, for variable names, it's more common to have the first letter lower case in JavaScript. Good luck with learning, JavaScript is awesomely fun.
true and false (case is important as they're "keywords" in javascript) are boolean primitive values and represent what their names imply.
&gt; the reduce() method isn't supported too well in the wild as of yet Meaning that IE8 doesn't have it. But for that kind of easily reimplemented feature, why not just use something like [es5-shim](https://github.com/kriskowal/es5-shim/) to fill the gaps?
Thanks for the reply Orteil and imbcmdth! But this is an assignment for an online course and I need to do it with switch &amp; case.
You may not be interpreting your assignment correctly. A switch/case statement is a shorthand for turning repeated tests for equality like this: if ( aNumber === 1 ) { console.log("1"); } else if ( aNumber === 2 ) { console.log("2"); } else { console.log("default"); } Into an easier to manage form like this: switch ( aNumber ) { case 1 : console.log("1"); break; case 2 : console.log("2"); break; default : console.log("default"); } A switch/case statement is **not** a complete replacement for *if()* and *else* because it doesn't accept complex conditionals like the kind you tried to use in your OP. **EDIT:** There is one *crazy way* to actually use a switch/case to do what you want (though it is the wrong tool for this job!) but it involves doing a little bit of math first. The first thing is to realize that all of the values you need to check for **start** and **end** on multiples of 10. Put another way, each grade is exactly 10 points wide and starts on a multiple of 10. So if we take the grade (between 0 and 100) and *divide it by 10* and then use *Math.floor()* on the result, we should get an integer value between 0 and 10 where 5, for example, is equal to all the grades from 50 to 59.9999... var fullGrade = prompt("What is your grade?",""); var tenthGrade = Math.floor( fullGrade / 10 ); Then we use that new value inside of a simplified switch/case statement similar to this: switch ( tenthGrade ) { case 6: document.write("You have a D."); break; case 7: document.write("You have a C."); break; default: document.write("You have utterly failed."); }
Oh, haha, sorry, I'm low vision. Let me correct myself. Thank you Popple!
I thought this was "quick and easy"? And FYI, `es5-shim === your own implementation`.
Beat me to it! I came back to post this after thinking on it for a bit. Like you said this is a crazy, overly clever way of doing this, but you never know, maybe they are looking for you to think outside the box.
Heres the assignment: Create a HTML that uses JavaScript. Create a page that tells a student the range their mark falls in if they know their letter grade. Below 50 is an "F", 50-59.9 is a D, 60 - 69.9 is a "C", 70 - 79.9 is a "B", 80 - 89.9 is an "A" and 90 - 100 is an "A+". You determine the input and output format. Ill ask my teacher if he wants its as If() or case
That is super complicated haha, but thanks for the words of wisdom dude!
This worked perfect, thanks!!
&gt;I thought this was "quick and easy"? Dropping in a simple library is quick and easy. &gt;And FYI, es5-shim === your own implementation. Not really. There's a big difference between taking the time to write your own implementation with a relatively high likelihood of edge-case bugs, and using a library that has been tested and used in other projects.
That's the complete opposite of what your example and the one in the thread said. That's just grade = prompt("your letter grade?"); switch (grade) { case "A": document.write("Your marks are between 50-59.9%"); break; //blah blah blah //... } That's way easier. Turn it into something useful, like for loop through some fixed width ascii characters and append them into a progress bar or something, or make a sort of "ruler" with the marks as notches along the length and base the height of a opaque sibling div or range marker on the output of your for loop.
I guess I did do it the opposite, I did so many assignments today I misread this one, well I think it is better than the other way around 
So "quick and easy" namespacing means including 2 separate JS snippets/scripts, one of which is 8kb and includes tons of other functionality that YAGN? I must be missing the joke here, because I think using only a couple extra characters in the source to be much more "quick and easy". I guess YMMV... As for the 'your own implementation', I was specifically referencing my previous comment, which is to say that I was using "your" in the sense that the browser isn't going to handle it, thus **you** have to solve the problem....whether you write the code or download 8kb to solve that problem wasn't my point. 
My 2 cents: I'd suggest not writing a game engine, but using one that already exists. Check out [Impact JS](http://impactjs.com/) , it's cheap and works well with good support and documentation.
Forgive this long winded reply with a poor analogy. But this is how my dad taught me BASIC when I was a kid, and it stuck. The assignment of 2 to i still happens within the loop. There's some great explanations in the thread and I can't add much to them as the OP has it already figured out but let me try an analogy that worked on me. Premise: You want 2 apples in your bag. You have an empty bag of apples. var i = 0 //executes once, the starting state The first thing to do is look in the bag, furthermore, "If there's less than two apples, I'll keep adding them to the bag, then counting them out loud." &gt;console.log(i); //bag is empty (0 &lt; 2) ↵ true //that's less than two "I have no apples, that's less than two, better get another". i++; //apple added to bag / i is now 1 (1 &lt; 2) ↵ true //still too few console.log(1); "Hey guys! I have 1 apple. It's still not enough!" i++; //getting another one, now i == 2 (2 &lt; 2) ↵ false // That's enough for me! You don't say anything because talking to yourself is weird and you are attracting attention. Plus, you can leave now. So now you have two apples, but you never said anything about it. You don't need to get any more apples as you have completed your task but the ones you got are still there - so if you peek into the bag: console.log(i) ↵ 2 "I have two apples!" Also, more technical things for learning programmers. Loops and arrays had me quite confused when I started learning about computers, since we always number things by one This is one reason it's important to say var i = 0 instead of i = 0 because you could have a scoped variable i being used somewhere (for example, in a loop that your loop is nested in, or in a different loop elsewhere in your program that uses a global i, though that is a bad idea for many reasons. In the case of var i = 0; while (i &lt; 10) { console.log(i); i++; } The same thing happens, because as long as i &lt; 10, the code block is run, and it is only checked after it finishes a cycle. The other short of loop is is i = 0; do { i++; console.log(i); } while (i &lt; 2); You will get all the last two numbers, but not zero because it is incremented before being logged. The output statements occur before the check, and it is guaranteed to run once. In the analogy, it's "I'll get an apple, announce how many I have and then have a look in my bag. If I am still missing apples, I'll get them. After it is run, i is still 2 because once the until() sees this, it stops the loop. for (var i = 1; i &lt;= 2; i++) { console.log(i); } This has has the same output as the while...until loop, but because the loop test still occurs after the counting expression, i now exists outside the loop as "3". The difference here is we have incremented the initializer by one to avoid the number zero, which means our top value gets testing with &lt;= instead. This can be useful if your are dealing with a numeric offset that starts at 1 (or whose first value of 1) instead of an index where the length is one more than the numeric value of the last index, e.g. new Array(1,2,3,4,5)[4] == 5
Hooking it up to real-world data is a goal. There is also [Twine](http://supermechanical.com/twine/), which is a sensor box with wifi. They have a different kind of visual programming, but it could still be sending data into a Meemoo graph.
Yeah Twine is neat. Now if we had proper WebSocket support on boards like the Arduino or Nanode the whole combination would be crazy. (I know there are some WebSocket clients out there, but these are very buggy.). Also what I find cool about using Pachube or ThingSpeak is the aggregate functionality you get through all the feeds worldwide. Change the color of my face according to some guys private weather-station in Bangkok? No problem!
... and there's no point in defining the variables "Apply" and "DoNotApply" - you might as well just console.log() true and false. As a general rule: `var True = true;` or anything semantically similar is a very bad pattern, because it uses memory unnecessarily, introduces an unnecessary level of abstraction into your code, and opens the possibility that someone later might (for some expedient reason) decide to redefine the variable "True" to something else, making the code an unholy and confusing mess (and if you doubt this, you haven't worked with other developers for long enough).
&gt;&gt; and perhaps get a critique in response &gt; You could try to be a little positive Make your mind up! &lt;:-) With the greatest will in the world you posted a bunch of error-filled pseudocode (and to be fair, it's not even particularly funny to anyone who's been programmign in JS for very long) to a javascript forum full of skilled developers, then ask for critiques. It might have stung, but if you post something that has very little merit and ask people for their honest opinions, it's going to be overwhelmingly negative. Good luck with learning javascript development, and don't let a poor reception put you off learning... but it's probably a good idea to *either* avoid posting code in public until you're sure it at least runs without errors, or develop a thicker skin when people do criticize your invalid code.
Early stages so far but an excellent time for suggestions. I like the learn from example approach so I'm hoping I can get code that works in front of people with an invitation to tweak. 
I haven't taken a very close look, but [Secure ECMAScript](http://code.google.com/p/es-lab/) may be of interest. (Not that it works in all browsers, though.)
it doesn't load for me, could it be that a server is overloaded? The verge just featured your game
You can use [capybara-webkit](https://github.com/thoughtbot/capybara-webkit) - in terms of tech it's like phantomjs (QT-powered webkit engine, without the gui) but it can be driven programmatically.
Thanks, I guess it was my mistake to realize that the code I posted wouldn't be taken as real code. Two opposing forces of wanting real code (formatted properly that is) and nonfunctional code for humorous purpose. I'll spend a few months before trying to draft a funny and functional code. :] I was too eager to try it out.
Huh, that makes sense. I did wonder if I was introducing too much unnecessary code with the true/false with apply/donotapply. Thanks for pointing that out! By the way--I haven't worked with any developers as I am very new to learning JS, which is why the code I posted blew up in my face here. I'm glad to be learning something like this from you, where it's properly coded and done so for a reason. 
There's already sites that do similar to this, I know several have been submitted here (Kahn's, CodeAcademy, _et. all_). Also, I'm not sure I agree with your approach of creating your own API with which to teach with; I think I'd much rather teach pupils the basics of the language first... this kind of goes with the argument that one should always learn the underlying language of a framework before taking the time to learn the framework. I understand that this is a beginner's course, but I think the same principles apply. Right now you're providing an API that will forsake the pupils should they attempt their own coding endeavor -- _how I come get an error when I call `print()`? It's what I've always used...._ If you're trying to make a language-agnostic approach to learning programming, I think that could still be accomplished with native functionality. I also think such an endeavor might be better suited for [/r/programming](/r/programming), on account that it looks like you aren't necessarily teaching javascript, but just _programming_.
OTOH, if you do a shitty enough job to begin with, it may never even get to the functional stage.
So someone took John's [env.js](http://ejohn.org/blog/bringing-the-browser-to-the-server/) idea and ran with it?
X requirement is only partially true. PhantomJS 1.4 can be built without the need for it. It will be the default for 1.5 onwards.
Great comments, the reason we don't call it delete() is because it's not really deleted until you call Save(), it's only marked as deleted.
We'll add some of your requests, tonight, good suggestions
Or, one can learn from their mistakes and improve their skillset (or lack thereof) so they don't have to deal with cynical people like you. Hypothetically, of course.
jQuery &amp; selectors. With jQuery, you could add a class to all the div and target them. Much shorter &amp; easy to manage code: $("div.sample").hide()
You're right, that most languages are just about more abstractions, but your details are wrong. &gt; Yeah, and PHP, Python, Perl, javascript are all not languages, either....they're just wrappers for C. That is only true for core libraries; most compilers/runtimes for those languages do not output C code at any stage.
Huh? I wasn't positing that they emitted C, only that they're all basically abstractions over lower-level languages, which was to retort to the OP's suggestion that a language that is an abstraction of another language isn't a real language. If that were the case we'd only have a couple languages in the whole world. You could write a webpage in PHP of course, but you could also write it in C, and likewise, you could even write it in assembly; that doesn't make PHP any less of a _language_ than C, nor does it make C any less of a _language_ over assembly.
[Bing Maps](http://www.microsoft.com/maps/developers/web.aspx) is looking fairly slick.
 function() { // do something } This is an anonymous function which is not a valid expression in JavaScript. It is not recognized by the interpreter and if you were to try to execute it: function() { alert('hello world'); }() it will fail. Instead, you force it to become an expression with the parens around it: (function() { alert('hello world'); }()); The thing I did (putting the executing parens () inside the expression enforcing parens) is a style decision. Either way works, but JSLint ~~with~~will call it an error if the braces are outside the expression. EDIT: Spelling
It is used to avoid polluting the global scope. This can be especially useful if you are using multiple libraries that can conflict. (function(){ var test = "hello"; })(); alert( test ); // ReferenceError: test is not defined You'll see this a lot with jQuery, you can pass in jQuery or other variables into that scope without affecting the global one: var myVars = { a: "hello", b: "world" }; (function( vars ){ alert( vars.a ); })( myVars ); In your example, there would be no reason to enclose the code because there are no variables being defined. **Edit: Also note that you can actually name this function too and still keep it from polluting the global scope: var myVar = "hello world"; (function test( val ){ alert( val ); })( myVar ); test( 'test again' ); // test is not defined This is because the function is not being assigned to window.test, and instead is executing right away. 
This is a task best suited to the server side. You can use JavaScript to accomplish this task if you are using a JavaScript service like Node.js. Since this is just static population of data into HTML there is no reason to burden the client with task.
You're just anonymously calling the anonymous function inside the first parenthesis. It's effectively the same as doing the following, except without assigning the function to any namespace: function example() { console.log('hi'); } example();
While your code works perfectly fine, this is not the reason that this pattern is commonly used
You mean the pattern is usually used to immediately execute a function or to enforce a scope in which the closure will be executed? ... please do elaborate.
Indeed you are. Plenty of knowledgeable folks within.
I wasn't implying you didn't know that 
good answers and discussion in the comments already, just adding that they're also called IIFEs or [Immediately-Invoked-Function-Expression](http://benalman.com/news/2010/11/immediately-invoked-function-expression/)s
look at http://www.youtube.com/watch?v=i_qE1iAmjFg I believe it's the very first thing he mentions
&gt; Your you're
Well, yes and no. It sounded like his point was that people really wanted to be able to do function(){ } But couldn't.. so they needed to solve that problem, and the solution is to wrap it in parenthesis. While that does solve the problem, that's not really the reason why people wanted to be able to do it in the first place. That's how I understood it anyway
Fair enough. Good luck to you!
On lines 17 and 18 you're using `const`, which isn't supported in IE. Use `var` instead.
What happens when you try to call it? From quickly skimming your code I think you are referencing an array position that is undefined.. IE really hates malformed HTML being inserted into the DOM. You're getting a random task from "tasks" and each entry is only one long.. When you try to reference it later in displayTask with task[LINK_ROW] I don't think that element exists... Basically it's like saying.. function displayTask( task ){ alert( task[1] ); } displayTask( [ 'Quote 2'] ); When really you need displayTask( [ 'Task', 'Task link' ] ); And change your array to be all like that: var tasks = [ ['Quote 1', 'link 1'], ..... ]; Edit: Ahh "const" will definitely do it too but you'll still have the problem I mentioned above in any browser 
This is only IE? I didn't know this was accepted at all
Its javascript, but you can't automatically use the same tools as javascript, you have this two step process. So I guess the trick is, write better JS?
Thanks, it's corrected.
It should be acceptable according to the [ecma spec](http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.4). The weird thing is that the extra comma should actually increase the .length of the array while not increasing the actual number of elements. &gt; Whenever a comma in the element list is not preceded by an AssignmentExpression (i.e., a comma at the beginning or after another comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements. Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to the length of the Array. I may be interpreting this wrong as well.
&gt; I call it with a hyperlink: javascript:generateRandomTask(); Stop doing this and learn how to use event listeners.
I've ran into problems with this a few times. var tasks = [ ["Quote 1"], ["Quote 2"], ["Quote 3"], ]; IE seems not to like commas at the end of arrays. Try this. var tasks = [ ["Quote 1"], ["Quote 2"], ["Quote 3"] ]; 
A little biased (I made an app for the Touchpad), but this is really great news. Enyo is a terrific and easy little framework that can now be used anywhere.
no, not meant for r/java, very much so.
 backbone is not what i am after, tried it - meh, closure gives me typing, compression, super fast templates, rendering on the server - everything I wanted from JS, sorry all in all, closure is so much better that the features I get with backbone I was able to write in 2 weeks and go wah anything backbone offers, i have. tis like a candy which you only like once you have eaten it.
module loaders is not an issue for me, I have full dependency management via goog.provide and goog.require, I want DI, I want it in its true sense. I want to be able to inject into test harneses, I want to annotate for compiled code or at least have reasonable runtime time injection via reflection in development mode and ideally real compiled injection. I want the real deal, and I know someone is doing it or is thinking about it. If not, fuckit, this is all sad. Then again I saw someone say that anything abstract is bad in regards to abstract factories on this subreddit yesterday, so no getting hopes up...
The trouble is that these days, placing the function parenthesis outside of the containing ones is now considered to be dog balls. (function () { ... })(); The reason why the above style is not preferred is that the function arguments are being applied to the surrounding parenthesis, they're hanging off the end just like a pair of dogs balls. The fuction arguments should be being applied to the function instead, not to the wrapper itself. This is the preferred style to use: (function () { ... }());
DI is a nice tool, and mostly used in Java for switching out interface implementations and for mocking in test frameworks. You're not going to find a direct correlation in JavaScript, a language that doesn't even have interfaces. Using Jasmine and Sinon, you should be able to easily stub, mock, and spy on your javascript objects, callbacks, and ajax. I don't think DI is necessary. 
Oh, so snarky!
Trailing comma in line 12. JSLint would have complained. `const` in line 17 and line 18. JSLint would have complained. Line 20: `var task_link = task[LINK_ROW]; if (task_link != null) {` Why is this one line? &amp;#3232;\_&amp;#3232; Also, the code isn't even properly indented. &gt;On the page, I call it with a hyperlink: javascript:generateRandomTask(); http://en.wikipedia.org/wiki/Unobtrusive_JavaScript Whenever you want to use something like `javascript:` or `onclick`, you're doing it wrong.
Also check out /r/gis , you may get more answers there
what are the correct alternatives? 
You don't even need Javascript for this.
Attaching listeners directly or using event delegation.
Applying arguments to the outside parens works just as well as applying them to the function. I'm not sure if you meant to but it seems you are implying that this wouldn't work: (function(foo) { alert(foo) })('bar'); ...when in fact it does.
It should be noted that even though var x = function() { return 'hello world'; }(); is valid even without the outer parens, you should still use var x = (function() { return 'hello world'; }()); The reason being that the first one looks a lot like x is being assigned a function, while from the latter it is immediately obvious you are actually assigning x the *result* of that function. 
You miss the whole point of JSDev.
Hi Lannister, That's a valid question. Let's see if I find some spare time to generate and execute some basic tests, e.g., for long lists and nested structures. For sure, Transparency is significantly slower than, e.g., Handlebars. However, it has been fast enough for us in numerous projects (meaning that you wouldn't notice the difference). In real-life projects, with reasonable UI design, it's rare to have use cases where one needs to render hundreds or thousands of elements.
I have also seen the following variants of this scheme: !function() { ... }(); And -function() { ...}(); The `-` or `!` operators before the `function` keyword, turn the function declaration from a *statement* to an *expression*. So now you can apply the () operator to invoke that function. 
I think he means it is the preferred style. First I've heard of this though.
By "preferred style", he means Crockford's [style](http://javascript.crockford.com/code.html). Feel free to use any (legible) style you want. In this case, both work fine.
The only advantage I'm seeing is that because it's commented, it'll be stripped out by your packaging tool on the way out. I understand what it's for. I'm just skeptical of the means used to implement it. But enough about what I think, what is the whole point I missed?
Another way of making the code slightly more efficient is to hide the parent of the group of objects first, set all the necessary children as hidden, then unhide the parent. This will only make the browser redraw twice, instead of once per hide.
Thanks fore the tip. Someone did also mention ArcGIS, which is a good idea.
I assume these also negate and reverse the polarity* of the returned value, respectively? It's a bit terse. *-Uh, I forget what this operator is called, but I'm supposed to be getting dressed for work, not looking up the names for unary operators.
The more you knooooow *stars*
we implemented a simple DI framework ourselves today. &gt;Use static global functions that provide dependencies or build objects that get passed around, giving you a single point which you can easily switch out what's being made. kinda is how we did it, creating a An injector modeled on guice which allows you create instances according to scope/lifetime from there, based on an (api) contract, this allows me to setup testing and mocking much easier as the injector registrations are the hubnub of the situation. because we use closure, we are looking at adding a seperate annotation to the code /** @inject {type, SCOPE} */ and when we compile for advanced mode inline around this. Obviously this is a lot more effort, but we have the injector working without too much overhead and it made dependency management easier. &gt;&gt;Utilize a generic event bus which keeps your code more loosely coupled and thusly, less dependencies in general, allowing you to easily switch out who handles generic events. this is an approach of which I am wary. There are several drawbacks, as with any specific event architecture, but for the problems we are solving event bubbling through domain models are better suited than centralized busses. Thanks for the input.
Here you go, here is the DI pattern implemented in the simplest way I could imagine, maybe you can elaborate it to your needs: http://jsfiddle.net/YJe8L/1/
Do you mean the ability to create singleton deps vs instance deps? Or something more?
Every time.. *every time* I think I now have a handle on JS syntax, something like this comes along..
Of interest is that the Underscore.js library provides `_.memoize` so you can write things like this without rolling your own `cacheify` functions.
I feel like this is an example of a major problem with JavaScript. Waaay too many ways to do the same thing. Some with unforeseen consequences. 
Well, at least you've made an effort to correct him.
Why not: switch(true) { case varMark &lt; 60: // Stuff break; case varMark &lt; 70: // Stuff break; case varMark &lt; 80: // Stuff break; case varMark &lt; 90: // Stuff break; case varMark &lt; 100: // Stuff break; default: // Stuff } This way you a) Don't double check (e.g. if the varMark failed the varMark&gt;50 &amp;&amp; varMark&lt;=59.9 we can be certain varMark is above 59.9, so we don't need to check for varMark&gt;59.9 in the next case) b) Cases like 60, 70, 80, and 90 don't fall through to default.
http://jsfiddle.net/lennel/wUZmq/ 
Further to your second point, if you do var lib = (function(w,d,undefined){ ... })(window,document); Then you can also reliably know that **undefined** is what it should be, and hasn't been replaced by some nefarious code pollution.
Also, creating a local scope using this method can improve performance since when you call a variable it'll check the local scope, then check the outer scope, then the next outer scope, all the way up to the Global scope. By passing in globals like jQuery to a local scope like this you save the time of travelling up the scope chain to the Global scope to resolve EDIT: grammar/wording
You probably prefer closure coming from a Java background. Those of us that started early and continue with JavaScript prefer less "robust" libraries that don't overtly mold the language into a different one.
Scumbag Blog Title, says it's about JavaScript, only shows coffee-script.
I don't come from a java background, but yeah I come from a background in more formal languages, and I can code java, although it is no where near my fav language. the benefits of closure are immense. try it, you will be amazed. our code base is 20k+ lines of code on the client alone nd with apps that are large you gain a lot.
I already use unit testing, i use cucumber for bdd testing. trust me, not overly complicating things, DI makes the code simpler in the long run.
More often than not when looking at other people's code, I see the "dog balls" style used. For this reason, and the fact that I haven't really heard a persuasive counter argument, I continue to personally use dog balls. In my opinion, the dog balls form makes logical sense. The first set of parenthesis wraps the function definition, so now you've got a function as an object, after which, you call the function with the second set of parenthesis. (function () { }); // 'ad-hoc' function object. (function () { })(); // execution of 'ad-hoc' function object. Putting the second set of parens on the inside of the first set makes less logical sense to me.
It is not self-executing. Self-execution suggests recursion, which does not happen. It is an Immediately Invoked Function Expression.
The main difference that you'll notice as a user right now is the simplicity: we aim to let you work with whichever tools you want. Whereas with PhoneGap, you start a PhoneGap project in the respective IDE (Xcode or Eclipse), with Forge, all you need is a terminal and a text editor and you're good to go. In general, we try to be light-weight, get out of the way as much as possible, and offer a great, streamlined experience for users writing apps in the bottom 50% of the complexity spectrum.
If you think CoffeeScript is not JavaScript, you will be appalled at how far ClojureScript departs from JavaScript semantics. Still, this post provides an interesting introduction. The tl;dr is that the author strongly prefers ClojureScript to either, mostly because he wants the power of ClojureScript’s abstractions.
OSM could be even better than google maps. 
&gt; It is used to avoid polluting the global scope. A beneficial side-effect. That is not what it is though. It is merely execution without a reference, though more commonly described as immediately invoked.
You need to re-read the post because it's exactly what the OP is asking. He is wondering why sometimes the files are wrapped like this and the reason is to create a 'namespace' for the code.
Check [d3.js](http://mbostock.github.com/d3/)
Of course, that is better, I was just modifying his example a little as possible.
I have used highCharts for our company's clients for a year now for when we need modeling tools and visualization in a reactive and dynamic environment. It's defaults are visually pleasing but more importantly is very easy to configure/setup. Check out the demo gallery (http://www.highcharts.com/demo/) and their API documentation(http://www.highcharts.com/ref/), which is very handy since it is hooked into jsfiddle for easy "fiddling". PS: i did try other tools like google's and flot but that weren't even close.
My company is trying [wijmo charts](http://wijmo.com). It seems pretty simple so far and for $300 for unlimited use, you could do worse. I think I'll look into the others you guys have mentioned though.
I've been pretty pleased with highcharts.
[Kendo UI DataViz](http://www.kendoui.com/dataviz.aspx)
For the browsers, you just install the extension and use the built-in debugging tools (we have a helper for Firefox where the extension can be installed and run from the command line, with more on the way). For Android, we support running the app in emulator or deploying directly to a connected device. For iOS, you can run your app in the simulator, and we have deploy-to-device support coming through our pipeline right now. For the mobile platforms, we have a debugging tool called Catalyst (based on the excellent Weinre) which allows you to inspect the state of the webview from a browser on your desktop. It's a life-saver!
Although, with v8, now you can write your server backend in javascript. Or even the server itself lol.
I only wanted DI, but that is a form of IOC. we wrote a simple little injector which solved our problem. I put a fiddle up in this thread with our code, 
Take a look at dhtmlxScheduler, an open source (GPL) JavaScript event calendar: http://www.dhtmlx.com/docs/products/dhtmlxScheduler/ (disclosure: I work for DHTMLX)
That looks really nice, but I can't stand ASP.NET MVC3, can it be used with other stuff?
That dimension picker looks perfect!
Photoshop has used javascript for scripting longer than '3 years' ago, so what is this about nodejs taking js out of needing a browser?
You could also use jscript for wsh programming for longer but I'm pretty sure the sentiment is mainstream javascript outside the browser.
oh come on!
I made a website the other day. I needed to validate the input on a form field. So I **INVENTED** a regex for it. Then I placed the check in a function I **INVENTED**.
I second the AMD and CommonJS loaders. For most loaders it is possible to write plugins if you have some special case. Playing around with the configurations for the loaders I managed to get my tests and my production stuff running. (Both based on dojo stores)
alright alright ... I give in ... you win &amp;#3232;\_&amp;#3232;
Dependency injection is easy. You only need to dependency inject one thing. Your mediator. I use [nCore](https://github.com/Raynos/nCore) to dependency inject a mediator. Injecting mocks elegantly in unit tests is easy as well. Just mock out require ( http://howtonode.org/testing-private-state-and-mocking-deps ) or in your case mock out goog.require. Seriously why make it so over engineered, complicated and bloated?
*Ever*? Of course. There are some things you simply can't do without your script manipulating the DOM.
You don't write tests in comments. Though you can do some simple checking in comments (as it was showed in the video) the real power is not there. You can use real tests (i.e. not in comments) and your favorite test framework. And you additionally use JSDev to prepare the object for consumption by tests, so your tests are true unit tests. When you are satisfied with your unit tests then you can do integration tests using the original object.
Generally speaking this is cost prohibitive because you can guarantee that 99% of your target market will have some certain standards, so lost revenue from that 1% is negligible. Only an incredibly large target market or a target market you know to have incredibly diverse needs will allow for a budget that lets you build that foundation.
True. If you're talking a 1-10 page site without much functionality, doing it right wouldn't be cost prohibitive.
Agreed, for certain values of "page". A site which uses a CMS can be designed correctly this way and have thousands of "pages" in terms of content.
Thanks James_GAF, I'll try to make those edits. Will this address both issues? If it's not too much work, could you show me step by step what to edit/change? Thanks so much. I see the lines you're referencing but not sure what to change exactly. This looks like it applies to the bottom thumbnails...would I edit something different for the top Menu? Thanks
An API which marks its "private" variables as such by convention is no less high-level than one which hides them in such a way that people have to come up with hacks (and JSDev is just another one) just to make the code testable. And security? In code you usually run on someone else's machine, in an environment they have complete control over, source access to and easy access to debugging tools? ಠ_ಠ
Sorry, I meant creating elements where none yet exist. The title of my post is a bit misleading.
http://www.flickr.com/photos/reciprocal_pronoun/5705070162/
Rob Schneider is a screen writer in a coffee shop in "Java Script".
Cool idea.
I think someone downvoted you for acknowledging the existence of Microsoft. :) Great point, though. Just because almost nobody used JScript/WSH doesn't mean it wasn't around.
&gt; `commentKarma = parseInt(commentHtml.replace(" points", "").replace(" point", ""));` `commentKarma = +commentHtml.split(' ')[0];` &gt;`$(".sitetable").find("div.entry")` You're doing that 3 times. By the way, all of your variables are globals. &gt;`$(this).find... $(this).css...` Store it in a variable if you use it more than once.
The answer is that the particular example you choose doesn't actually show the subtle differences between the two. The first example is used to create a new function from scratch. This is what you should be using a majority of the time. Preferably, you would be using the prototype instead of recreating the increment function for each instance of Counter: var Counter = function(val) { this.value = val || 0; } Counter.prototype = { increment : function() { return this.value += 1; } } var v = new Counter(10); v.increment(); // 11 v.increment(); // 12 The second example is used to "decorate" another preexisting function with new functionality: var AFunctionWithoutIncrement = function(val) { this.value = val || 0; } var doDecoration = function(anotherFunction) { anotherFunction.increment = function() { return this.value += 1; }; return anotherFunction; } var v = new AFunctionWithoutIncrement(10); doDecoration(v); v.increment(); // 11 v.increment(); // 12 
 (function () { var highestKarma = 0, pct, k, round = Math.round; $(".sitetable .entry .unvoted").each(function(i,v) { k = v.innerHTML.replace(/ points?/, ""); if (k &gt; highestKarma) { highestKarma = k; } }).each(function(i,v) { k = v.innerHTML.replace(/ points?/, ""); if (k &gt; 0) { pct = (k / highestKarma); $(this).parents(".entry").css("background-color", 'rgb(' + round(255 - pct * 128) + ',' + round(510 - pct * 255) + ',' + round(255 - pct * 128) + ')'); } }); }()); Alright, I'm spending way too much time on this. Time to go to bed.
Shrunk just a bit more: var h = 0, k, r = Math.round; $(".sitetable .entry .unvoted").each(function(i,v) { k = parseInt($(v).html()); if (k &gt; h) h = k; }).each(function(i,v) { k = parseInt($(v).html()); if (k &gt; 0) $(this).parents(".entry").css("background-color", 'rgb(' + r(255 - k/h * 128) + ',' + r(511 - k/h * 255) + ',' + r(255 - k/h * 128) + ')'); });
Cleaned that up a bit for ya. http://jsfiddle.net/dawnerd/DDfgj/
How would you test a helper function defined in a closure? Probably you can do integration testing using provided API, but you have no ability to unittest the function directly. And by the way security is important. It's not about inspecting private variables with a debugger. It's about being non-spoofable for a third-party scripts. Look at ADSafe or Caja projects.
every language prints lines differently.. although syntax may change, design patterns stay the same in many languages. Don't be thrown off by new syntax, just keep a handy reference of common functions, keywords, and operators while you're reading code to familiarize yourself with the langauge.
you can use `document.write(myString);`, which is generally frowned upon for real applications due to its being terribly inefficient. you can use `alert(myString);` which is generally frowned upon for real applications because it blocks and because it interrupts the user in a jarring way you can use `console.log(myObject);` which is great in conjunction with firebug for developing, but otherwise will cause an error But these are only for simple string output. You could create a printf-alike in JS pretty simply, but a word of warning; JS is not a strongly typed language, by asking for printf it seems like maybe your attitude is still that of a strongly typed language. Finally, what would be the point of printf in JS? You can just concatenate into a string? The only time I've used/wanted/needed anything similar is in NodeJS when writing prepared SQL statements - and in that case the library has support for that, eg sql.query('SELECT * FROM Foo WHERE Name=? AND Age BETWEEN ? AND ?', ['John', 17, 39], myCallback);
`printf` is short for "print formatted" (the 's' in `sprintf` stands for string, you "print" into a string). It does a bit more than blind concatenation. E.g. you can print a number as hex value, you can specify the amount of decimal places, you can print leading zeros, and things like that.
There is a library on github which implements something like it: https://github.com/samsonjs/format
You're right! Thanks for calling me out on my laziness. It's cleaned up in the example below. I reread the documentation on parseInt() and realized that the call to replace() was unnecessary--it simply returns the first integer it finds. 
The accepted answer there uses a common example of why you should use semicolons: function f() { var a = 1 var b = 2 var c = a + b return a + b + c } will return `undefined`, which is surprising. __But__ if you insert semicolons where you want them: function f() { var a = 1; var b = 2; var c = a + b; return a + b + c; } then it _still_ returns undefined, right? How does adding semicolons help anything here? I can see this example as an argument that Javascript has surprising behavior, or that you need to understand the rules of Javascript's semicolon insertion, but it doesn't seem like an argument for using semicolons to me.
console.log(object);
TBH I just removed the loop and it stilled worked on the html I used. I say we just call it magic :D
 Moving the increment function to the prototype makes it so that it doesn't have to be recreated every time Counter is new'd, but it also requires that value be publicly accessible. In your example, a user could then do: v.increment(); // 11 v.value = 15; // 15 v.increment(); //16 For the original example, you might want to keep value inaccessible and not use a prototype.
If you want a codebase where everything is public and there is no encapsulation, fine. If you don't, then be aware of how prototype methods work.
Here's a quick and dirty sprintf implementation that I wrote. You can have it. String.prototype.sprintf = function(){ output = this.toString(); for(var i=0;i &lt; arguments.length;i++){ asNum = parseFloat(arguments[i]) if(asNum || asNum == 0){ suffix = (asNum &gt; 1 || asNum == 0)?"s":"" output = output.replace(/%s {1}(\w+)\(s\){1}/, "%s $1" + suffix) } output = output.replace("%s", arguments[i]) } return output; } I'm not sure of all the implementation details of the original sprintf. I just needed a quick way to print into a string quickly. I also added a shortcut that will detect numeric arguments and optionally pluralize words for you. so: "I have %s item(s) but only %s thing(s)".sprintf(3, 1) results in the string: "I have 3 items but only 1 thing" EDIT: I just saw this (http://www.diveintojavascript.com/projects/javascript-sprintf) further down the page. It's a much better, not-so-dirty implementation of sprintf. Use that.
nice. Thanks.
There are always down votes ;) Too bad I don't know why they down vote :p. Just to be clear about my motivations, I wrote this library for chrome extensions. It's a simple way to export/import large user data. I didn't need to implement password feature so it does not work with password locked zip. It only supports [zip format](http://www.pkware.com/documents/casestudies/APPNOTE.TXT). However, since gzip uses deflate compression algorithm too, it should be quite easy to write a library for gzip files.
The SO question was, "should I always use semicolons in JavaScript"? ASI may well be a misfeature, but that doesn't mean that pretending that feature doesn't exist (by putting in semicolons where you want them) will help anything. It's not like using semicolons turns off ASI, so it's still necessary to understand it. I think this statement is misleading: &gt; Now in Javascript, if you don't write a semicolon, one is automatically inserted at the end of line. While that's true, it's also the case that if you _do_ write semicolons, other semicolons are still inserted at the end of lines (where you didn't want them, sometimes).
What the fuck? Seriously, what the fuck.
This is madness...
It's not so much about individual specific examples as pointing out a strange behavior in case it comes up in a different context. I don't know if anybody would put a multiline comment in the middle of a return statement. But, I know it is better someone understands that 1. there are statements that must be terminated with a semicolon and the interpreter will try to insert them and 2. multiline comments are not simply ignored in ECMAscript. I'm not sure why you are losing your patience, it's like you don't want people to talk about weird things like this. Weird things like this are the only reason someone would be interested in your approach of prepending semicolons to address something that comes from the language requiring certain statements be terminated by a semicolon.
Cool! So basically, could this be used to retrieve zipped json files from server? I tried to implement LZW -&gt; browser scheme, but got lost at how to represent/optimize data (got to octal; I think I should look in to typed arrays).
This. Is. JAVASCRIPT! (Though I agree completely.)
thanks. the author is quite satisfied with the fact that no one else can understand what he wrote. (But Im sure you all heard about commenting) by the way nowadays' common websites don't need more than one javascript developer.
I agree with joshuag. Code readability is really important. Verbosity is not really an issue if you have the right tools. For example, there is a good auto-completion engine in Eclipse JSDT. Most of the time, Ctrl-space will help to type code without any effort. &gt; common websites don't need more than one javascript developer Imagine this developer leaves its job...
the cross-browser thing hit me hard. you are right. maybe I should leave it as an experiment... 
That downvote is completely unwarranted. "For fun" is one of the best reasons to do anything.
off the top of my head maybe something like this var settings = (function() { // retrieve model json from local storage // or create initial settings hash var model = new SettingsModel(initialOrSavedSettings); this.get = function(id) { return model.get(id); }; this.getModel:function() { return model; }; this.save = function() { //save code }; return this; })(); 
Thanks. I'll try to make something a little more musically interesting for my next demo. I just need a photoshop of Uncle Sam wearing headphones ("I WANT YOU TO DANCE!"). Any help on that would be appreciated, if anyone's interested ;)
Thanks for the info. I didn't know that
This isn't a Javascript question.
I'd recommend simply making a global variable that has a function to return stuff from local storage. Then when the view renders itself, it retrieves the settings from that global variable. window.myappSettings = { getSetting: function (key) { //return stuff from local storage } } This way there's only ever one instance. 
Instead of create a brand new server side application, i would look at some CMS like wordpress or drupal.
Doesn't Firefox implement its own [Audio API](https://developer.mozilla.org/en/Introducing_the_Audio_API_Extension)? Apparently all the properties and methods have the "moz" prefix, so you'll have to edit your code a bit to make it work (as long as both APIs are compatible).
I disagree. If you can fix the language, even if it's done via a shiv, it's still progress, it still makes the code clearer.
Where it becomes helpful is that if you use a linter and never rely on semicolon insertion, then function f() { var a = 1; var b = 2; var c = a + b; return a + b + c; } will be caught by the linter because it will see that a semicolon gets inserted after the `return`. It won't tell you that the next line is getting ignored, but you as a programmer will have no problem seeing that that is the case. What I do find interesting about that though is that it's actually no different in the python case except that if you try to do return a + b + c you'll get an `IndentationError`. However def add(a,b,c): return a + b + c will return `None`.
&gt; Photoshop has used javascript for scripting longer than '3 years' ago And Spidermonkey's been available as a stand-alone console interpreter for years, and OpenOffice can be scripted in JS, and VRML's integrated ECMAScript since VRML97, and DX Studio uses SpiderMonkey for game and simulation logic handling, etc...
&gt; Now you don't need anything else but the console/program You already didn't need it, [SpiderMonkey has been available as a standalone console/application for years](https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell) And on Windows, JScript has been a "first-class" scripting engine for quite a long time now (mid-to-late 90s?)
Right, so, the linter will tell you every time a semicolon is inserted, and let you decide whether it's surprising. It seems to me like it would be easy enough to have a linter only tell you when a semicolon is inserted surprisingly. I'm having trouble thinking of any ambiguous examples.
&gt;I'm having trouble thinking of any ambiguous examples. Me too, but I am not seeing any clear way to prove that such examples don't exist, and given that the doSomething(2) (a = new B()).blah() case had not occurred to me (and would not have), I am wary of assuming that it would be so easy to make a linter that did not miss some surprising cases.
My point is, the shiv isn't changing the language, it's a library that adds that functionality, which is exactly the same thing as manually using the design patterns. My point is that in either case it is not built into the language, but that isn't a shortcoming of the language. I just disagree with the fact that the language has to have these patterns built in, because libraries can fulfill the same duty. I have nothing against using shivs/libraries, I just don't think it's necessarily the languages job to implement the patterns.
How about, "Who are you and why should I care?"
a significant % of the tutorials and interesting stuff posted here is from addyosmani.com ... so... I care?
Hey Addy! Would you tell me about architecture patterns - why use one over the other (MVC, MVVM, etc.)? Is there a pattern you prefer?
Yes, I've run into that case, and it's the only thing that ever surprised me. I would definitely like a linter to point that one out. But it seems pretty obvious to me how to detect those. There are three red flags: * it's not a syntax error with the semicolon * neither line by itself is a statement with no effect * the indentation is consistent with a semicolon But yeah, I appreciate your wariness, that's fair enough.
Speaker. jQuery Core Bug Triage &amp; Docs Team, JavaScript Developer at AOL, Author of EJS Design Patterns
Wrong submission try here: http://www.reddit.com/r/IAmA/comments/p2d43/ask_addy_osmani_anything_video_ama/
click that link... it says [removed] in the selftext body, which means the post was deleted.
There may be some awesome content there, but I didn't fucking read it, because as soon as I got on the page, an annoying popup asked me to sign up for some newsletter for some site I've never been to. Much more effective to let me read your article, *then* provide me with a small, **unobtrusive** form to sign up for your newsletter, after I've read the content you've created and decided you can provide me with value in my JavaScript knowledge.
What do you think about Sencha Ext/Touch in regard to technical level, MVC pattern and how is it compare to Dojo. Thank you for doing this. 
How much does a JS developer make?
Yes, THIS. MIDI Export would be sweeeeeeet
Frames and iframes are two different things with unfortunately similar names. Don't worry about using an iframe. What you want to do is exactly what it was intended for. I understand you may not like working with the iframe because of the sandbox, but there are already a lot of solutions for working with/around that. Another solution would be to re-think how you organize your stylesheets. If that's possible then you could just use an AJAX call to get the file for the HTML fragment you need.
There's a [documented feature](http://api.jquery.com/load/) that you can leverage in .load(). You can pass a CSS selector of the element to grab from the loaded document. In this case, I'm assuming you have, let's say, an "About Us" page that is otherwise accessible as a normal page (with head, css, js, etc), but for some reason you just want it to popup in a lightbox. Well, in this case you can use $('#container').load('/myPage.htm #aboutUsDiv') and jQuery will grab *just* the #aboutUsDiv and insert that instead. Ninja edit: In terms of what you want to do (specifically, target CSS) - you can't do what you want to do. This, however, is as close as you can get to non-conflicting sheets. My recommendation is to simply start targeting with an additional ID tag in the CSS. Basically, L2CSS
You need frames. If it is on the same domain (loading from the same site) you just fetch the necessary portion of the remote page (body, container, whatever)
Yes, I believe in context of this question and most well designed websites you don't really want to pollute your global tags with too many style options. And for the ones you do it shouldn't really be a problem to revert since it'll be something basic like a font or an icon next to a link. Just because you CAN do something with CSS doesn't mean it works out as a good idea to do it
I was honestly asking what a top notch js developer is paid as I am looking for one. 
I could be wrong but I think you want [/r/java](/r/java)?
Can you load only the contents of a containing div rather than the whole page. Then include required styles for that content only, in the master css file. (Maybe even add a class/id to the containing div and additional css to prevent clashing)
I think you're right haha
Operator precedence. SCORE1 + SCORE2 / NUMBER is equivalent to SCORE1 + (SCORE2 / NUMBER)
Edit: Nothing, so far as I can see. I originally had the math for C to F stuck in my head, but you have it correct as typed. 5 / 9 * (F - 32) = C (9 / 5 * C) + 32 = F Edit Edit: You could probably do with using a float for your answer, though.
Have you taken a look at Enyo? What are your thoughts on this framework as apposed others that have been available longer?
I really dig the simplicity. I can see myself using this.
Thanks. If you happen to find bugs or think of a useful improvement please post it on the [issue tracker](https://github.com/RobertWHurst/OriginJS/issues) so I can fix/add it. Cheers!
Can you tell FITC that answering questions a week later via video (presumably on their site?) isn't really how AMA works?
I don't get the entry/exit handling. &gt; As you can see there is an optional callback for cleaning up when a different route is loaded I have no idea what that means. 
Looks very nice, I'll dig further !@4am!!!
pretty sure you're exactly wrong on the css. You *want* styles that apply across your entire website - that way you can reskin the whole thing with a single file. see: csszengarden.com
This is EXACTLY what I was looking for. Great work here man, I can't wait to get this in my project.
Its for cases were you want a route to clean up after itself when the user navigates to another route. So lets suppose you make a route for /users and that route builds a bunch of handlebar templates and sticks them in the page; this is done in the entryCallback. If the user later changes the current route somehow and a new route is followed, for example /profile, it will also trigger the /users route's exitCallback. You could use this callback to delete the elements (handlebar templates) remaining in the DOM. That way your routes don't have to clean up the garbage left behind by the former route. In any case if you feel this is unneeded in your project it is optional and you don't have to supply an exitCallback.
Confucius say: Man who code after dark, debug till dawn.
no no no... you misunderstand! it's not that you can't span them across the website - it's that they are _specific_ and point to _specific_ elements. i'm talking about the difference between p { something } and \#mainContent p { something }
Nice, I've been wanting to make a library for exactly this purpose. I've used Sammy.js for hash routing but never use any of the other features, so it's bloated for my usual purposes. Are you planning on adding any new features? How about support for &lt;IE8? Looks great overall - only thing I would suggest is to explain the uris array passed to the callbacks a little more in the documentation/readme.
Damn. Now i know why i love debugging so much. Good one, though.
Exactly. Thats probably a good idea, I'll clarify that better in the docs.
 I've been featured by so many places now, my site keeps getting hit with new waves of traffic :( It should be fine now...
I did this by accident for you when I was in college. It was a college project, you will have to go through and change the code though. The user doesn't have to hit anything, it calculates automatically after choosing anything and updates if errors were to occur. Also, don't hate on the website.. I had no idea of anything, and I still don't. I have it hosted now for you to look at on my website. [Here's the link](http://www.shanehoban.com/pros/TollBridge/4-Buy_a_pass.html) Oh my it is hideous, what an embarrassment. Anyway, use the dropdowns there and see the price update. It was a college project OK, stupid toll bridge (p.s. I know Bus or Coach are identical in price, it was a specification for the project) it's working correctly edit: Here is the 2 source codes that you'll needed [Pastebin.com - HTML](http://pastebin.com/0sDCdTFy) [Pastebin.com - JavaScript](http://pastebin.com/0EbtqFzz)
edit: clicked reply instead of edit first time
It doesn't work =/ well not with CS5 PSDs at least.
dhtmlxScheduler (found by the link above) is a JavaScript component and you can use it with any server-side technology. You may also use special Connectors (for PHP, JAVA, or ASP.NET) to bind the calendar data to the server side: http://www.dhtmlx.com/docs/products/dhtmlxConnector/
Hmm, I wonder how easy it would be to implement a Python API for it.
This calendar uses rest-like API to fetch data (xml or json) and send updates, so there is no problem with server side integration (have used it with ruby myself)
That's neat. Might get the GPL version and have a play with it and if it's good enough to use in an app I may develop, I'll go with the Premium version.
Not working for me
Maybe safe with backwards compatibility? Do that most of the time because it was and might still be the only way the finder can create preview icons for it. But on the other had: I do not know what I would use this for.
No, my backwards compatibility setting are turned on. It's probably because CS5 has new group nesting rules, you can have a group inside a group inside a group and so on, you couldn't do that in CS4 or prior. Adobe probably changesd something critical about how the new CS5 PSDs work.
That's probably why i like it: it feels like an adventure!
ERROR: not a PSD file
Defining new rules is also about the same: 1, you need a selector, which element should be validated with the rule 2, you need a nam 3, you need to define the validator method Defining messages is different, because the plugin doesn't define any message, since it don't know what do you want to show, where do you want to show. The plugin is for those, who want more control over the validation.
One aspect I really love about your projects is their size and scope - you are delivering a really useful slice of functionality and nothing more. I appreciate that very much - good job once again!
Shit, if I could find a decent PSD IO library in *any* language it would be great. When I added PSD export to a project a few years back, I found the existing options to be so glitchy that I just wrote my own library. Of course, that's not as practical for import.
If I was the professor who probably assigned this to you, I would: 1.) Sell you my solution to the problem 2.) Flunk you for cheating and present the evidence to whoever handles that at my school 
Thanks ZeroBugBounce. I'm really glad you find them useful. Cheers
thank you, i will use that next time
I wasn't suggesting using history.js over OriginJS. I was suggesting using history.js within OriginJS for managing the url &amp; associated events.
I'm using CS3 Extended version on XP SP3 and it isn't working. You're not alone. 
Ah, I see want you mean now. In that case I'd say its unnecessary. If anyone wants push state history I'll implement it. I would be a much simpler than adding a dependency as it would only require a few more lines in the handleCurrentRoute() function.
I just want to point you at a previous conversation about PSD: http://www.reddit.com/r/programming/comments/8ejiz/psd_is_not_my_favourite_file_format/ Edit: The original link to Google Code doesn't work, here's an updated one: http://code.google.com/p/xee/source/browse/XeePhotoshopLoader.m?r=a70d7396356997114b548f4ab2cbd49badd7d285#107
Added! You might need to rename the file to .mid, but it seems to work fine on my system :D
Done.
You could serialized your form data into an object and then send it via Xhr, followed by preventing the default post. 
I agree with this. A good example are the Mongoose API docs, which are *fucking terrible* (though it does have a nice "look at all the cool shit you can do" site), and the Express API docs (which has the exact same problem... not really a coincidence). Personally, I really try my best to write my documentation concisely and sanely. Then again, it's much easier when your code isn't a huge project, but just a few small functions in a utility library.
How are you trying to do it? Edit: why don't you try stackoverflow better? It's a super nice q&amp;a colaborative site and there is plenty of kind helpful people.
Me too. Sounds like a nice idea, but dropping a PSD on to it resulted in: &gt; Error: not a PSD file.
If I understand you correctly, and I'm not sure I do, on the form submit event you would have to save the form values to a cookie, and then next time the page loads, read the values from the cookie and populate the form. 
I figured here I would get some help without having to paste all of my code. I really just need a starting point for getting a form implemented, but there it seems like everything needs to be already established, and just tweaks to fix. It looks like not a lot of JS subscribers really like to help new projects, just posting about updates to the JS code and community.
That's probably what I'm trying to do...any tutorials on how to implement cookies?
Thanks for this link. I did a couple challenges and realized I hadn't done anything like this professionally for over 4 years now. I get my bills paid, but it was code like this that always made me feel like "STAND BACK, CITIZEN! I'LL HANDLE THIS!!" This is my programmer's substitute for daily crossword puzzles. :)
Ok... I won't get in the details of it, not here. But I'll give you some hints. You need to execute a js function on form submission, cancel submission and then send the data in an ajax way. This link shows you how to cancel form's submission (basicly you just need to return false from the js function that handles this event). http://www.htmlcodetutorial.com/forms/_FORM_onSubmit.html This one will show you how to send the post using ajax: http://www.openjs.com/articles/ajax_xmlhttp_using_post.php Anyways I would recommend using some js library, my choise is always mootools. Any other question please send me a private message.
I'm going with [Sphinx](http://sphinx.pocoo.org/) (and ReadTheDocs commit hooks) so I can include as much guide (the most important part - API docs are NOT sufficient documentation) and API information as necessary and very light comments on the code itself for anything in the API which is documented with Sphinx (with JSDoc tags used only to annotate for Closure Compiler). I will endeavour to try to keep docs in sync with the code, just as I always commit unit tests changes along with code changes, but tagging the next version is always a good chance to catch up if you tag new minor versions often, SemVer style.
Holy shit.. I can't thank you enough
I am creating a website that uses Google Maps technology coupled with weather data to provide weather/routing mapping. The user will have to input a starting place and a destination. What is currently working is just that. If the user wants to change the start and/or destination, they currently have to refresh the page. I am attempting to use a form to stop them from having to refresh the page every time.
Gah! Clicked submit code instead of run code... now i have a failed test :-(
[No problem](http://www.youtube.com/watch?v=dnr2m-2_JmA) :D How do you intend to use it?
You should try my script in their page. function jsChallenge() { $("#container").html('hello world'); return 1; } 
That's a fun little site: reminds me of 4clojure for Javascript. Looks like it must've been fun to make!
Hrm, that's a bit frustrating. The specification for the "palindrome" challenge is… incomplete. It doesn't mention that the input can contain spaces, and those spaces should be ignored. In fact, the wording implies that the input will be a single word. Also, it claims that test cases failed, while still giving me 5/5 (ie, full marks), and when my code quite obviously does not fail the test case.
Ok. It's nothing new, but let's first understand the distinction between the different target audiences: * The users of your code * The person tasked with maintaining and extending your code **Documentation for users:** * Wordy introductions * Demos * Reference material Demos are invaluable for understanding how a piece of software works. See code in action, and it becomes much easier to determine if it can do what you want (or not). Reference material will typically be the only element that is directly written in the code file. (Though it is possible to maintain this elsewhere, keeping it as close to the code as possible is good practice.) Generally, this documentation will fail in exponential proportion to the complexity of the software being used. Too many configuration combinations usually leads to overly-complicated documentation. **Documentation for maintaining and extending code:** After reading *Clean Code* (**A MUST READ**), I now write **ZERO** comments in my code other than those for the above reference material. And my code is much better for it. When it comes to comments, it is true that **CODE THAT NEEDS COMMENTS TO EXPLAIN IT IS BADLY WRITTEN AND NEEDS TO BE REWRITTEN SO IT DOESN'T NEED COMMENTS.** So, instead of focusing on improving your comments, do the following: * Make functions small, performing only one task at the given level of abstraction. No hidden tricks, e.g. a function that checks arguments for validity should do just that and nothing else (like changing settings). * Name functions (verbosely) according to what they do, e.g. moveObjectToEndOfArray is much better than moveObj. Compressing production code removes any latency this practice introduces. * Name variables according to what they hold, and don't reuse them for something else. For example: listOfWords is much better than lw. Also, where helpful, use some method to indicate what kind of data is being held, e.g. I prefix all my jQuery objects with jq, to distinguish them from normal DOM elements. * Define functions and declare variables when and where you need them. Use newspaper-style (i.e. most important stuff first, smaller details later). Maintain strict control of scope. (This is one major reason why I love Javascript). * Religiously avoid duplication in all its forms, except where duplication is merely a coincidence (i.e. don't enforce using the same code, if this could well change later). My code is significantly more readable and maintainable since I changed to this practice. I strongly recommend you do the same 
So you are anonymous!
I had a similar problem with the "Letter Changes". It says I failed 2 of the tests, but it doesn't state what the expected output is. When I examine the output of my code, it seems correct to me, as in it adheres to all the specifications, so I don't know why it considers my code to have failed.
This is definitely something I should be doing at 4am! http://pastebin.com/x1vwnjHc