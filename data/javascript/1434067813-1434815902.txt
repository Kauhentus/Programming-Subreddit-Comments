You'll get used to it.
Well, it's `0`, just twice as big. An easy solution would be to start off with a positive, non-zero number.
Wow thank you for that very informative response :) Was very useful. If I am using something like express on node.js I believe this is a basic server side MVC? So by changing the view engine to dust.js/handlebars or even react I'd still be achieving something similar without these frontend frameworks other than SPAs? If the routing is handled on the backend then a frontend router such as the ones angular and react have are not necessary, only when creating a SPA? I know sometimes it's best to use a framework/library that a team is developing and has a big community around it, I'm all for it as long as my application code doesn't get too tied to it like I've had with past experiences. Sometimes the choices made in these frameworks have certain quirks that you have to work around to achieve things or maintain performance or integrate another lib. If you've heard of MEAN/SailsJS they seem to be a higher level framework where they're using a frontend framework along with other tools, still a smart group of people with a community behind it but a very specific way of doing things/choices, easier to get into and get going, though if taking the time to understand the smaller building blocks that piece these together I'm tempted to have that extra flexibility. Again thanks and I'll definitely take that into consideration :) Really appreciate the React explanations!
Sweet
Oh get the fuck out of here
I agree that experimentation is critical. I just see A LOT of "me too" out there where there is little to no distinction besides a different corny name and some aesthetic changes. It's like with mobile apps, it's gotten so easy to make them that we're awash in a sea of crap and copies (copies of crap even). I can't help but to feel like all that wasted effort on recreating existing functionality with trivial differences would be better spent elsewhere. Maybe a better better approach to repos are needed that encourage novel approaches and functionality and dissuade mimicry. 
&gt; how will the server know what to push? We do static analysis to create dependency graphs which drive creation of bundles, maybe that same information could be used to push files?.
Glad that it helped. If your solution works fine with server-side, than sure go with it, no need for frameworks, and yeh routers in React and Angular are for SPAs. When in server-side use any view engine you like, it doesn't really matter they are all very similar and quick to swap. What you said about *"specific way of doing things/choices"* is absolutely true... every framework solves a specific problem... like SailsJS, very nice for real time and it has a lot of stuff ready to go. . About MEAN, i've tried it too... last year i've looked at nearly all big web frameworks of all big languages xD soooooo many, lol. I was very interested in Node and all (Meteor, Express...) but the lack of quality put me off... like, i ask myself *"Can i develop the next version of {SOME_BIG_BANK}'s online services with this stack?"*. I don't see JS as a good platform for serious enterprise... . Yeh it works... Walmart uses it... but do they? Do they process banking transactions with it? I don't know... but i surely wouldn't, basically because: lack of types in the language (have to use something like TypeScript) and that effects development (a big reason why Clojure, Python, PHP have gotten type-hinting...), tooling is getting good now (after years of "let's make this event-loop faster..."), all this crap about IO.js and Node, it's just plain crap for a company that needs good support/stack. Common! Joyent had to get kicked in the ass by the community to wake up and move faster with Node... ( sorry for the rant... xD ) . Then i had a choice... `Node + TypeScript + LoopBack + WebStorm` or `.NET/Mono + C# + ASP.NET + Visual Studio` . ¯\\_ (ツ) _/¯ I like computer science, i like research, and i just cant take these guys throwing away years of research just to be cool with a dynamic language in the server and forget about the most important parts.... [TJ says it all IMHO](https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b) , lol . Anyways... this had nothing to really do with the question, sorry about the rant, i just like rattle about sometimes, lol. But again... .NET captured my soul, if Node is the right for you, go with it and build something great :D (i've never liked Ember, but these sites in the BuiltWithEmber page are beautiful, designs are great, so... it's about the work, people don't really care about our science mumbo jumbo)
New syntax proposal: foo.bar.bind(foo)() Is equivalent to: foo::bar()
It's best practice to add an event listener in JS instead of the old onevent attribute. Plus it's easier to read, debug, and refactor. Just do it, future you will thank you 
I saw that, actually was going to do a blog post later on my thoughts about the new proposals.
Just post the assignment. And next time put in some smilies so you can draw in the NiceGuy crowd.
Sure! A big thing for Node to is the tooling, i can't imagine front-end today without Gulp and many other libraries in NPM... Another are the editors with a Node back-end, even Visual Studio Code, some awesome projects.
bind is not cool. It's useful. But it's also extremly slow and mem greedy. https://jsperf.com/bind-vs-closure-setup
Sounds like you want a click handler on the entire frame that captures x, y and a date. You could then replay these in your dev environment however you wanted
That's really silly, you shouldn't have to mess around with filenames, ES6/7 is backwards compatible with ES5. It should have been possible to just write ES6 in your `gulpfile.js` 
I like that. 
If this is for a commercial project you might to consider something like Tealeaf or Clicktale. * Tealeaf - http://www-01.ibm.com/software/info/tealeaf/ * Clicktale - http://www.clicktale.com/ Last I used these Tealeaf was top of the line, but was also expensive. It was smarter in that it could do video playback or user interactions according to defined events and error states. It would then aggregate these interactions to persona profiles that you could determine which types of users were having which types of problems with what regularity.
I did add an everything (click, keypress) handler to the document. Going by coords feels like an incomplete solution because items can be layed over eachother. Even saving coords + tagName would be incomplete because there can be 2 divs on top of each other and then i wont know which to screenshot. The only way I see this working for every situation is if I find unique elements in the page and record user action relative to them. Complicated part of this (I think) is understanding what exactly the event target is for a click (since event.target may not have a unique class/id) so now I'm building an algorithm that goes down the DOM tree to find id or unique class. Again, not sure if I need all this complexity or if there's another solution all together
Thanks for the recommendation, the goal is commercial in the end and i am happy to use some service but it needs to be something that accepts a dom selector and produces a screenshot of it. Do you know of something along those lines?
i can't afford a developer, this is a prototype I'm developing over weekends :) Using a pay as you go screenshot service is much more manageable for me than hiring someone, and you may be surprised but I haven't found a commercial service that creates screenshots of dom selectors (maybe because they ran into the same complication) .. only full pages. 
Ember can sometimes feel like a boys club. It's still lacking quite a bit friendliness towards new developers. Often you'll see posts or stackoverflow questions from over a year ago and know that today they are completely useless. I'm not entirely sure a tutorial would really help you here. The core concept of ember hasn't changed too much. They are just trying to add new and better features all the time. Here are some gotchas that I think will put you on the right path. 1. Only use ember-cli. Although ember can still be used as without ember-data... the entire community has focused on it. Honestly, it makes for a great development experience. 2. Use the ember-cli generator. "ember g route users", "ember g route users/user", "ember g component user-card" are super simple ways of outlining your ember application structure in an idiomatic fashion. It will create the necessary files in the proper place, add to your router file, create test files, etc. Very, very simple and productive. 3. Check out http://www.emberaddons.com/. There are plenty of resources available. Typically if you need to include a popular third-party library application into your ember app, theres an addon available which can install it in one line. 4. Decide early on if you're going to be using ember-data. If you think ember help is hard to come by... good luck searching for ember-data. That being said, it's a very impressive library. If you have a typical REST backend then there shouldn't be much of change needed. If you decide not to use ember-data then thats perfectly fine. I would just advise you to do your ajax calls in the route. 5. Ember 2.0 is all about actions up and data down. Right now ember still uses controllers but it will shift to routable components in the future. It really shouldn't be a huge shift to migrate over. Ideally, you can begin to prepare now by really utilizing components. 6. Make sure to use ember's built in helpers. Things like the link-to helper and input helper make life much easier and these will get updated with ember so you don't have to worry so much about fixing them in the future. 7. Watch out for depreciation warnings. If you get the ember inspector addon (you really should). Not only does it make exploring your application much easier, it will collect all of your warnings into one nice place. 8. As per worrying about &lt;components&gt;... I wouldn't. If you want to be ahead of the curve then go for it but its not necessary. The ember core team isn't just building for new apps, but making sure that existing apps can still receive the upgrade benefits. When its time to really convert over old implementations then the warnings will tell you. I hope that helps. Let me know if any of that was confusing.
That looks really promising if not quite there yet. Search and dependency management doesn't seem to even be on their radar yet, I'm sure it will, eventually. The process of registering on the blockchain to arrive at shorter urls versus the long hash strings seems... well... long. But if that's the only way, someone much smarter than I will figure out how to automate it. *edit* After thinking about it for a while, just like bittorrent, only the popular survive, maybe being backed as a default to github would fix this, Maidsafe, Ethereum or IPFS, or something new or a combination.
Bower has a hybrid strategy, where there's a registry but it only serves to point you to the right git repo. In my experience from several open source JS libraries, it's more painful to deploy for than npm is. The main reason I feel that way is build artefacts. If you deploy to a git repo, whatever you want the consumer to have access to needs to be committed in when you release. If your codebase is, say, Coffeescript, or compiles from SASS, in do the compiled files go although they don't have any business being under version control. It's also more difficult to do continuous integration. Tag a version for release; oops, it's already out before the CI server has had its word. One solution is to have a source repo and another repo as the Bower deployment target. You can let CI handle building your releases and shipping the artefacts to the target repo. This works but is more cumbersome to set up, while featuring the distinct feel of misusing a system meant for other things entirely. In short, I believe git isn't a good place for build artefacts. Between the approaches taken by npm and Bower, I have a clear preference for npm.
The biggest issue I have had with this approach in production is overzealous HTTPS proxies and confusion between git:// vs git@ vs https:// when referencing the repo, each of which have weird edge cases across machines and networks.
o wow, now I'm embarrassed lol Thanks you!
&gt; Unlike Bower, npm has a mechanism for building on the dev's machine (i.e. the "install" script), which alleviates the need to store build artefacts in the repo. As a fan of bower (who also happens to publish stuff using it) and npm this is one of the things that has always bugged me about bower (having to insert build artifacts into the repo). Honestly I kinda wish bower and npm would 'merge' somehow...as it is now sometimes I have to pull certain deps from npm and some from bower...it's not a huge pain but it's an issue that I think doesn't need to exist. I have to use bower to publish because thats what most front-end (non-node) developers use/prefer for dependency management...but probably would prefer NPM if I could get away with it (ie: if it had the ability to create a flat dep tree).
Bower and Component use GitHub. Some issues with that approach: - repo size is not a negligible problem; try installing ThreeJS or a similar project as a GitHub dependency - GitHub is not persistent; you can remove and rename tags/branches and break a lot of dependencies - it's pretty complicated trying support semver ranges using git hashes/tags; and often requires trawling through tags/commits/etc
I don't have any information to back this up, but I would be willing to bet what you're trying to do is not possible using only JavaScript. You can call `window.print()`, but that's still going to pop open a dialog prompting the user to click OK before the actual printing starts. One option would be to use this Firefox extension - https://addons.mozilla.org/en-us/firefox/addon/seamless-print/ Another option would be to look into something called jZebra. It's a Java app, and it requires security approval when installing, but since it sounds like you always want to be printing from the same lobby computer, once you approve it once, it should be good from there on out.
With seamless-print, Would I need to go the split pages one with the thank you message and one very basic formatted page that prints on load, then closes?
Apologies for the bad formatting, not sure why that happened. 
Yep, I'm a big fan of ~~ too. Just make sure it's not a value with more than 9 digits and you'll be good.
I agree with you. However, there are some ways to solve these problems with a better engineered tool. * Github provides .tar.gz downloads for releases. So a smart tool could just grab one of those tarballs instead of cloning off a whole repo. * Tools like Cargo and Bundler generate a "lockfile" which records commit hashes as a kind of receipt for the last time you updated your dependencies. Since Git hashcodes are unique to each commit, it's a good way to ferret out unreliable repos and other shennanigans * No good solution for the last one, other than prefering to go after actual releases instead of tags or branches.
Is server side an option?
In that case you will probably have to roll your own solution. The commercial options cost more than a developer.
This is terrific. It not only explains the what but the why. Hopefully they do this full of an explanation for every new es6 feature. So often I'm aware of a new feature, but I don't understand why I would want to use it. I don't like how fat arrows look (I feel they obfuscate the code), but lots of people seem to like them so there must be some benefit (and more than the scoping benefit which doesn't seem to be enough to justify making code less readable, readability always takes preference over conciseness for me). 
I personally like Number#toFixed() since it allows rounding to a number of digits. (blockChance * 100).toFixed(2) + '%' // '21.01%'
still using firebug, eh? :)
So that forces a float to integer conversion by double-NOT-ing the value? Clever. My guess it that any JIT can easily optimize the heck out of that. It's right up there with `!!`.
Yeah it's probably the best and *really in-depth* series on new features. Read [older articles](https://hacks.mozilla.org/category/es6-in-depth/) and wait for new one each week.
Only at work! Chrome at home. At work I'm stuck with IE or FF.
&gt; hopes to create an active counter of data I'm kind of confused... You just want to count how many data points you have? I don't know how to pull in your data, but if you can do that part... then why not just store it all in an array and use array.length to figure out how many data points are stored in the array? &gt; count the number of recurring data entries Oh... okay. So you want to know how many of each duplicate data entry there are? Yeah, you can use a nested for loops to do that. &gt; I've then used some jquery code that tries to display a counter in an h2 tag, but it's not showing up. I don't use jQuery. Here's how to put content in an &lt;h1&gt; element using javascript: document.getElementById("id of your h1 goes here").innerHTML = yourCounterVariable
I'm actually more interested to hear why it caused a bug.
- the release would typically include docs/source/examples/etc, so you still end up downloading a lot of extra bloat - this doesn't help too much if somebody deletes a remote branch.. unfortunately this happens pretty often since branches are treated as disposable GitHub seems to treat releases and tags as the same thing. So, "going after releases" is the same as crawling through tags to find semver-like values. isaacs has stated in the past that this is [complicated](https://github.com/npm/npm/issues/3347#issuecomment-16986673) though I'd be curious to see more discussion on it.
Just a display bug. It showed a block rate of 14.0000000002% in the tooltip. For example... [Taldek's Singed Guardian Shield](http://nevergrind.com/nevergrounds/index.php?character=Taldek)
I think that u/g3bj45hg34857 is not arguing against the usefulness of the new syntax, but is pointing out that the new syntax is more valuable if you know about the option to create a bound function without invoking it immediately.
This isn't a javascript thing, this is a floating point numbers thing. Why do we feel the need to blame javascript for this?
It's not quite that simple. JavaScript deals with 32-bit integers* under the hood when doing bit operations. This means that using binary operations on numbers with more than 32 bits will lose data (JavaScript numbers can store up to 53 bits of integer data, the other bits are used for the decimal part and sign). *) The integers are by default signed: `~~Math.pow(2, 32) - 1 === -1` however you can force them to be unsigned using the triple bit shift: `~~Math.pow(2, 32) - 1 &gt;&gt;&gt; 0 === 4294967295`
Web pages can't print stuff without user interaction. &gt; The label printer is connected via USB to the lobby kiosk. Not sure if server side would be able to do it? Yes, on the server side you can do whatever you want. You can read/write files, spawn child processes, talk to other servers, and so forth.
What's wrong with Firefox's built-in developer tools?
Nothing's wrong with it. I use both situationally.
so either: its auto escaped to prevent xss or more likely the \n is parsed in String constructor or .toString()... (or not idk) I would recommend domelem.value.replace("\\\\n","\n")
Chrome's debugger is orders of magnitude faster and has some features that go above and beyond Firebug. Also, Firebug has historically been really slow. 
My advice on this is: **don't**. I've built a couple systems that automatically printed things after some user interaction, and it was a cluster both times. Don't do it. Reassess your objectives and what you have available to you, and look for another solution. First, there's no native way do to this in JS, it's simply not possible. You may be able to achieve something like it with extensions or other software, but in the end it's doing to be more work and frustration than it's worth. Second, from the server side while it is possible to interact directly with printers, there is no simple, stable api. `lpr` is *terrible*. I'm sure windows is equally awful. Last, do you really want to be supporting this forever? Unless you know the printer specs so well you can recite them in your sleep (and I'm talking about the programming specs, not things like paper size and ink and so on) you'll make mistakes or do things that aren't to spec, and when your host software updates, or your printer drivers change, or even the usb drivers update, your app will break and you'll have to go back and fix everything. It's a *nightmare*.
Its really slow.
The answer is blindingly obvious: an RCS (revision control software) is not a package manager. A package manager like NPM, provides a formal, consistent means of identifying packages your project depends on. RCSs do not. A package manager, will rely on centralized repositories of packages with the ability to add and remove other repositories for additional packages. Why is the centralized approach better? Because it makes it much easier to run repos within your local network, allowing you to not only directly depend on third party repos for your packages, but makes it much easier to publish your own packages privately for the rest of your team or organization to use, or to stage such an operation before it's published to a main repo of some kind. A package manager will not be tracking changes of individual files, a package manager can allow additiona logic to get executed pre and post installation, as well as provide formal ways for hooking into whatever environment you're installing the package on (eg: adding scripts to PATH). A package manager, manages PACKAGES, not CODE. As well, a package manager will be fine tuned for whatever environment it's tasked to install packages into. So, one piece of software, could be packaged differently for different managers (eg, a NodeJS project for system services will be packaged as an NPM package by default, then converted along the way so that it can be installed via apt or yum for linux OSes). And this is why we have RCSs. RCSs are tracking changes to code, providing tools to audit those changes, being able to make changes safely in branched off copies of the code, and to merge changes around. Some RCSs provide tags to bookmark a specific change. RCSs have no idea how to install the software within it. RCSs also put no requirements on how to manage that code. Different people, different teams, different projects, will have different ways of managing their code. Some will consider what is typically called "trunk" as code pertaining to the latest stable release, using tags containing a semver to denote individual stable releases. Some will consider trunk as the development branch, and for each release they will branch off trunk, and use tags as just helpful bookmarks for anything they feel need bookmarking. And ontop of that, not all RCSs have the same concepts. SVN for example, has no concept of a branch or a tag. Perforce I believe, have different types of tags! So, if your build process requires you to fetch code directly from RCSs, then your life will be made much more difficult, as you will have to account for an infinite set of possible ways to organize an RCS as well as the multitude of RCSes that exist. Just because you so far have only used Github and have been fortunate enough to only use packages that follow a similar convention, doesn't in any way negate the reasons why you should be using a package manager for dependency management instead of fetching code directly from source control systems.
Because JS doesn't have ints?
I think fat arrows are more readable than the function(){} syntax. It also reduces the need to use "var that = this" or .bind, which reduces unnecessary boilerplate code and also prevents a certain class of bugs. const square = x =&gt; x * x; I love it.
I have used fullcallendar before in an angular project, it ended up working out very well, it would be a lot of work to make that functionality from scratch. 
How are you liking vue? With a release called dragon ball its calling my name.
How is this more readable? I've read a number of articles on fat arrows, but I still can't remember how they are read. It just looks like "equal to or greater than" to me. I honestly can't make heads or tails of your example. But if it was written using traditional braces I think it be more readable. Or maybe instead of readable you mean concise. 
If you need to keep accuracy so can't round stuff, you can try [BigNumber.js](https://github.com/MikeMcl/bignumber.js/).
If you rely on your install script to run your build, then wouldn't you need to mark all "devDependencies" in your package.json as "dependencies" so that they get installed? If so, there would be a non-trivial amount of new node modules that need to be installed.
I was not aware that [TSD](https://github.com/DefinitelyTyped/tsd) existed. This would appear to be the Bundler/Cargo approach as applied to TypeScript. That's an incredibly nice thing to have.
It's not that you should be using MVC paradigm in each one of my web projects. It's more like Yahoo will not invest resources in that library. You are welcome to use it, fork it, maintain it... That said, I prefer YUI over Angular any day... but the sector has chosen to go other way. There are other libraries around that work more like YUI , like ExtJs (IMHO the nicer looking, but it is not free. They deserve every penny) or Sap Open UI5, or DojoToolkit, or Webix. All open source and more or less maintained 
What is the purpose of writing a promise implementation that doesn't follow the spec? You made a Promise-like thing. It's a function that gives you an object with a `.then()`, but it's not a Promise.
IMO is doesn't offer very good error tracing and browser emulation, as is extremely slow.
If it's only for a single visit and doesn't need to be persisted, what you have is fine.
This is not even close to a Promise, sorry. Aim for compliance to a spec rather than minimizing lines of code.
Incorrect. ECMA 262v5.1 8.5, The Number Type, Paragraph 9: "Note that all the positive and negative integers whose magnitude is no greater than 2^53 are representable in the Number type (indeed, the integer 0 has two representations, +0 and -0)." In the second to last paragraph, "Choose the member of this set that is closest in value to x." and sections 9.4 through 9.7 ToInteger, ToInt32, ToUint32, and ToUInt16. Taken as a whole, in plain english the specification states that if a Number can be represented as an Integer, it should be. As /u/zuurr points out, this means that every JS VM does so. If your operations are performing addition, subtraction, multiplication, or modulus, and both the operands and the output are within the range of -2,147,483,648 through 4,294,967,295 will be treated as a 32 bit integer at the machine instruction level. Javascript does not have "int" in the same definition that C does, I will accept. It instead has the broader Number type, which includes every C int value, and internally every engine *does* use the 32bit version. Edit: In a more constructive vein, this conversion is what asmjs is all about. As /u/zuurr also mentions, the bitwise operations are defined using the ToInt32 section. Thus, by using bitwise operations (like `numval = othernum | 0`, bitwise or 0), you can gain additional assurances you are working on an int and only an int. This explicitly forces, rather than implicitly requests, the VM to behave as "desired". In OP's shifting all their constants by a magnitude of 100 would achieve their desired behavior, and applying bitwise 0 would force their desired behavior.
I am aware that they use int as a speed optimization, but the results of any calculation must happen as if it's a float. Meaning they are not permitted to overflow the way an int does, but must check for that and upgrade to a float. So while there might be optimizations, from the user's point of view it's all floats. (These days with 64 bit integers ints actually have a larger integer range than floats (which have 53 bits), so that probably helps with speed optimization.)
Sounds like you need to learn about floating point arithmetic.
I think it helps with readability in the right scenarios. 
&gt; /u/tardmrr wrote: &gt; Uh. What? Double-precision floating point is 64 bits (1 sign, 11 exponent, 52 fraction). The largest int you can store exactly in a float has 53 bits. Back before they had 64 bit ints it was a very common way of extending the range of ints from 32 bits. &gt; Also to nitpick a bit further, "float" normally refers to single-precision floating point which is 32 bits (1 sign, 8 exponent, 23 fraction). No. Float refers to all sizes. You can be specific if you like and say double float. (Which is often shortened, but you were the one to nitpick.) Float refers to the decimal point: The position "floats", in contrast to fixed point decimals. (They are not very common these days, and today are typically emulated with ints. Historically they were used a lot.) Maybe you should read this: http://perso.ens-lyon.fr/jean-michel.muller/goldberg.pdf
That's an incorrect statement based on a common misunderstanding of how IEEE754 works - the maximum numeric value of a 64bit IEEE floating point number is 2^53 - 1, which I've seen many confuse with "is a 53 bit number". (Edit: Which as /u/asr points out is equivalent to a 53-bit integer number). /u/asr is at a technical level correct - without forcing 32-bit ints via a bitwise operation, the spec is totally fine with the implementation leaving it a 64bit IEEE754 float. What /u/asr fails to accept is that every operation on an int32 in a 64bit number will result in an exactly representable int32, and so from a user standpoint, if int-like strings go in, int-like values come out.
Because it doesn't overflow like an int. And because you can store a 45 bit integer in there and add it, and it will work fine. You can't say "except for", and then also say "it's exactly the same". It's not the same precisely because of those "except for".
Bitwise-or 0 is "more accepted" var val = 0.51000000001; console.log((val * 100)|0); And by "more accepted" I mean that's the way ASM.js encourages int typecasting. Also it's clearly "faster" because it's one operation instead of two, though if you're worried about a single extra hardware-level bitwise-not in your performance, you have other issues.
&gt; fails to accept is that every operation on an int32 in a 64bit number will result in an exactly representable int32 That isn't true. It will not overflow like an int32. Also, nothing stops the user from using 45 bit ints.
If the iterator object is every reinitialized during a visit you will end up with duplicate id's. This means you have to have a very firm understanding of the exact lifetime of the iterator object, not only for the code as it sits now but for the code in the future (i.e. after a bunch of revisions). barkmic's suggestion of uuid/cuid means you don't have to worry about the iterator's lifespan or what might happen in the future.
Right - it is actually better than an int32! As long as your input is using a non-decimal number, you won't hit these "floating point" issues. If you use a decimal number, you hit those issues. This isn't a javascript thing, it's an IEEE754 thing.
Totally! I was a double-tilde guy a while myself. Took me longer than I'd care to admit to recognize why `val|0` is "better" 
[Ractive](http://www.ractivejs.org/) is super simple if you just need a view library. Even better is [Mithril](https://lhorie.github.io/mithril/), which is a more complete solution, but still very simple.
It has an inordinate amount of hate in reddit, but is very pure in that you can just write js and accomplish things. 
I was skeptical until I saw the release name. Downloading now.
If you always operate on whole numbers and only round down when you divide then you shouldn't have a problem. The problem op is having is that he started with a fraction (.14, 0.16, etc) and tried to multiply his way out of it, which is guaranteed to fail in any language. 1+2 is always 3. the problem is when you do (0.1+0.2)*10 which will not work in any language that uses floats of any kind.
[realtime conf](https://ti.to/&amp;yet/realtimeconf-2015) is coming up in october
It's neat but I wouldn't use it for anything serious. As far as I can tell [it's largely a one man show](https://github.com/yyx990803/vue/graphs/contributors). A Meteor employee's side project. Who knows if it will still be maintained in a year. Development doesn't appear to be all that active. 0.11 was release 7 months ago. 0.10 was released 15 months ago. It wouldn't be that big of a deal if it was stable but every time I've played with it I hit bugs.
Server side is probably the only way to do it. What's your server language? Although I would take the advice of other's here and say don't... unless you have a product owner who demands it.
Yeah love that library. `expects(big(blockChance).times(100)).toBeCloseTo(blockChance*100, 0)`
Don't call this function "iterator". It's confusing. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols Other than that it's fine. Most databases also just use auto-incremented ids. If all ids are generated in a single place, a simple counter really is all you need.
What is this?
semantic-ui is another one.
YUI was great until jQuery came along. jQuery's API was much better.
If many people have worked on it for a long time, can you really reproduce all of it from scratch yourself? I would start small. Grab some modules and beat it into shape: refactor, add testing, etc. Repeat the same process for some of the most important modules.
That's the only reason why I refrained from burning everything down so far! I have to say, though, that the only decent developers who worked on it are the ones who built it. After that, there was a year and a half of people doing more damage than anything else...
This should be an example of why you have to filter output.
If I were you, the first thing I'd do is start making things measurable and reproducible. For example, fix the deployment so that it's just ./deploy.sh. Then choose a testing framework that you can also run with a single command. With those things done, you're in a much better position to start refactoring and rewriting piece by piece. 
The function you described is called "counter". I'd rather have it written as... var counter = function () { var n = 0; return function () { n += 1; return n; }; }(); instead of the confusing thing where you rebind a value. Especially since if you pass `iterator` by value *before* calling it initially, you're not rebinding that passed function anymore. If you need non-persistent uniqueness, a simple counter works. If you need persistent uniqueness, UUIDs/CIDs are useful.
As far as I know, nobody is maintaining YUI anymore. Yahoo dropped support for it sometime in the past year. To me, it just looked too much like trying to shoehorn Java in to JavaScript, although I never actually looked too deeply into it - that's just what it looked like superficially.
&gt; Which is the topic of this thread. Sort of. The thread split and now covers both topics. &gt; If you explicitly use non-integer numbers, expect non-integer behavior, and don't blame javascript for machine arithmetic. Looks like we have arrived at a meeting of minds :)
Use format strings, guy! Always be explicit about your sig figs.
Not to worry; I have installed this application.
Is this actually faster with identical behavior? If so, it seems a bit surprising that a modern JavaScript executor wouldn't optimize the performance difference away.
[Decimal floating point](https://en.wikipedia.org/wiki/Decimal_floating_point) is definitely floating point math.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Decimal floating point**](https://en.wikipedia.org/wiki/Decimal%20floating%20point): [](#sfw) --- &gt; &gt;__Decimal floating point (DFP)__ arithmetic refers to both a representation and operations on [decimal](https://en.wikipedia.org/wiki/Decimal) [floating point](https://en.wikipedia.org/wiki/Floating_point) numbers. Working directly with decimal (base 10) fractions can avoid the rounding errors that otherwise typically occur when converting between decimal fractions (common in human-entered data, such as measurements or financial information) and binary (base 2) fractions. &gt;The advantage of decimal floating-point representation over decimal [fixed-point](https://en.wikipedia.org/wiki/Fixed-point_arithmetic) and [integer](https://en.wikipedia.org/wiki/Integer_(computer_science\)) representation is that it supports a much wider range of values. For example, while a fixed-point representation that allocates eight decimal digits and two decimal places can represent the numbers 123456.78, 8765.43, 123.00, and so on, a floating-point representation with eight decimal digits could also represent 1.2345678, 1234567.8, 0.000012345678, 12345678000000000, and so on. This wider range can dramatically slow the accumulation of rounding errors during successive calculations; for example, the [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm) can be used in floating point to add many numbers with no asymptotic accumulation of rounding error. &gt; --- ^Relevant: [^IEEE ^floating ^point](https://en.wikipedia.org/wiki/IEEE_floating_point) ^| [^IBM ^System ^z10](https://en.wikipedia.org/wiki/IBM_System_z10) ^| [^Scientific ^notation](https://en.wikipedia.org/wiki/Scientific_notation) ^| [^Decimal128 ^floating-point ^format](https://en.wikipedia.org/wiki/Decimal128_floating-point_format) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cs4uwnu) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cs4uwnu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
DFP is a halfassed attempt at decimal arithmetic, more of a "trick" than anything actually useful. Mainly because it can still suffer from rounding errors, it's just much slower than normal floats.
Frankly, the overhead of all other operations is going to drastically overshadow any difference in these two approaches. To play, I started a CPU profiler and ran the following three loops in the console: for(var i = 0; i &lt; 1e7; i++){} for(var i = 0 ; i &lt; 1e7; i++){ Math.random() * 100; } for(var i = 0 ; i &lt; 1e7; i++){ (Math.random() * 100)|0; } for(var i = 0 ; i &lt; 1e7; i++){ ~~(Math.random() * 100); } The empty look took 7.17 seconds, the null test case took 9.27 seconds, the `or zero` took 9.30 seconds, the `not not` took 9.03 seconds. YMMV, but clearly the iteration is the expensive part, presumably followed by the Math.random call.
I said "*technically* a thing" for a reason.
What does this syntax mean? Does &lt;= mean the same thing as =&gt;? Can you use any combination like &gt;=?
What jumped out at me right away was [line 26](https://gist.github.com/oeb25/3791a252a0d7505f229c#file-promize-js-L26): setTimeout(() =&gt; cb(w.resolve, w.reject), 0); ES6's `Promise` runs the callback synchronously.
This is a fun learning exercise, and you should feel good about yourself for trying it. Even if it's not A+ compliant, you'll learn from the experience. Kudos.
Honestly, did you even take ten seconds to look at the docs? He explains it right in the intro. &gt; Vue.js’ API is heavily influenced by AngularJS, KnockoutJS, Ractive.js and Rivets.js. Despite the similarities, **I believe Vue.js offers a valuable alternative to these existing libraries by finding a sweetspot between simplicity and functionality.**
Poor Javascript, always getting the shit end of the stick
sometimes it seems like far too much time/effort is spent on this stuff. Templating, data binding whatever... so many opinions and and libraries just for replacing tokens with strings. odd.
This is the big deal with ES6 modules, because now there's a standard import/export language, those modules can now be understood by your tools (and servers). JSPM, for example, has a command (--depCache) that basically pre-calculates the dependency tree for an app (you do this pre-deployment) and it spits out a list of dependencies. This could be easily leveraged by a server to do the push thing :)
You're sorta missing the point if you're comparing TypeScript and Babel. Funnily enough, Babel uses TypeScript's syntax for some of their [documentation](https://babeljs.io/docs/learn-es2015/) (and calls that out).
Babel is following the spec and future iterations of it. I prefer something that will eventually be replaced by native functionality then a transpiler I'll always have to use.
TypeScript is as well, with the addition of types.
 // We can't call the callback right away, since we need to let the user add // .then and .catch beforehand! setTimeout(() =&gt; cb(w.resolve, w.reject), 0); This is a potential race condition. There's no guarantee then() will be called before the setTimeout executes. (I'm sure I see why that's required? It seems you wouldn't want to call this until the promise resolves in the first place, rather than during construction?)
I am genuinely curious. How is it funny?
One man show can be good though. Look at Laravel. It's a lovely framework. One excellent obsessive programmer is worth 10 average programmers.
Well, its the initial load that's the issue right? If someone has a poor 3G connection, you still want them to connect fast.
Yeah, the initial load is the issue. If you use Bower or something similar, your file probably won't be cached, so your user will have to load a bunch of new files. You might as well help them out as much as you can.
It depends on the settings used by the minifier. The least they can do is to remove the unnecessary white spaces. Sometimes they can tell exactly how variables are used then they could try to rename some of the variables to shorter names as well. Different tools provide different levels of minification. The Closure tools by Google seem more capable of going into more advanced minification levels. The JavaScript parser used by the browsers could read the minified source code slightly faster. With a small script it wouldn't matter much. But when you start to go into millions of lines of code, those gains get more noticeable. Also it has effects on your dependencies. If you depend on many other libraries, they can add up to many more lines of code and could enjoy the help of a minifier. A minifier can also obfuscate your code a little bit. Although there are other tools that can further obfuscate your code. If you don't want to give away your pristine source code with comments and all, minifying and obfuscating are both good tactics to use. Oh yes, minifying could also remove comments. :-P
Not much of a dirrenece it seems. 100m ops of each: ~~: 3310ms ~~: 3320ms ~~: 3306ms |0: 3204ms |0: 3207ms |0: 3232ms
If you have Linux, gzip is already present, if not, install gow or cygwin. Minify your JS and gzip both the original and the minified version. Is the difference significant? In some cases, removing comments and initial spaces/tabs might make a significant difference.
I wrote a reply on the differences between Vue and React [just below](http://www.reddit.com/r/javascript/comments/39lynf/vuejs_0120_released/cs52ykj), which might help you (obviously Vue's documentation doesn't give a totally fair explanation)
The solution was in regards to floating points in general, not the OP's specific problem. The post title says "you have round/ceil/floor almost every expression with floating points..."
Good comparison. One thing I want to clarify is that Virtual-DOM is just a means to ensure acceptable performance for full re-render and diffing; it does NOT make React always faster than other frameworks. Vue will be significantly more efficient for small updates, e.g. changing a single text field in a huge page, whereas in React you need to sprinkle shouldComponentUpdate everywhere to prevent over rendering. Even for large redraws, Vue can still be faster with simple optimizations, as shown in the dbmonster benchmark: http://vuejs.github.io/js-repaint-perfs/ Also, Vue doesn't use components as data stores. Vue components observe plain JS Objects (made reactive by Vue), and it is these Objects that hold the source of truth about your application state, not the components. Multiple components can be observing the same Object, and that Object can at the same time be managed by a dedicated store. The fact that the data is not coupled to your Vue components is often overlooked.
That's certainly a good point; I'm personally not familiar enough with Crankshaft or Hydrogen to dig into those details.
I didn't know that about promises, thank you! I updated it now, would you say this would be an ideal solution?
Reducing the file size is not a goal in itself (except for competitions like js1k and 140byt.es), and even transferred size may be partially neglectible in some cases. One of the major problems of minification is that it's bad for debugging.
What? No, that is *not* a reason whatsoever. You debug with normal JS and production has minified. This is standard.
&gt; Now because requestAnimationFrame can be called 60 times per second or 5 times per second, we're going to use setInterval to have a constant rate at which our cube moves: But there's no guarantee that `setInterval` will run at a consistent rate either. The better way to do this is to keep a time stamp of the last time updated, then calculate the movement distance (and whatever other state changes need to happen) based on the delta of current time minus time last updated. Further, since you're calling `setTimeout` with a 1ms delay (and keep in mind that some browsers don't support timeouts of less than ~15ms, so this timeout could silently be bumped up to 5 or 10 or 15ms depending on the browser), but you are only drawing a frame, at most, every ~16ms, you are doing a lot of unnecessary work. In other words, you are trying to update the game state every millisecond, but are only drawing no more than every ~16ms. What you should be doing is updating and drawing every ~16ms (or however often the user's browser supports), and figuring out what would have happened in the time between now and the last update.
A prime is any number that the only factors are 1 and itself. So this function just checks every number from 2 to num-1 and sees if they are factors (num % i === 0 returns true if i is a factor of num and false otherwise). If they are any factors it returns false, if it reaches the end of the loop without finding any factors then it returns true. You could improve this function by only checking up to the floor of the square root of the number, since factors come in pairs. Think about 20, it has factors 2, 4, 5, 10. These come in pairs (2,10) and (4,5) so once you've reached 4 there is no point in checking any further, since you have captured all of the factors already.
check network inspector: open devtools, click the network tab, refresh your page, trigger the script one of the items in the list should be the url you fetch, check the response and make sure your getting json, ajax can be a pita.
disagree with this. jquery is well designed, start with jquery its a lot less frusterating (to me) use a fw if you want. you will still get the key javascript concepts as you go.
Thank you! 
This guy's work is always good. I cannot wait to read this book.
Sometimes, you have to, because you don't have access to the production files, e.g. with Google CSA or similar APIs.
Well, I'm just trying to explain why building a web interface can sometimes be much more complex than "replacing tokens with strings". If you honestly believe web front end is all about templating... then you probably need to catch up.
Finally a real reference for ES6... can't wait to go through it.
On line 123 I clear the already called `.then`'s! Isn't that preventing multiple calls?
Ah - didn't see that. You've potentially still got yourself another race condition there - what happens if one of the callbacks leads to a code path that calls the original resolve() again mid execution? I think there's a simpler version possible that doesn't require clearing that list. (I believe it's possible to do a completely immutable version, although it's a fair bit more complex and has subtly different semantics) I whipped up a quick and dirty implementation of how I've seen it done in other places - off the top of my head so I might have made a mistake somewhere. https://gist.github.com/jimmydivvy/ab0a759eb69cf3fbba48. Let me know if it doesn't make sense and I'll try and explain it in more detail. (It's only a poor-mans continuation monad. There's no error handling, and I'm using map/bind instead of using a single then() method to handle both, but the overall gist is the same.)
If your primary goal is to learn JavaScript, then I'd suggest starting out with plain JS and no frameworks. jQuery is becoming less and less useful as browsers add native support for the things that used to make jQuery so valuable. I personally love using MV* frameworks, but you will likely miss out on learning about the parts that they hide from you. For instance, you generally won't need to directly interact with the DOM when using a framework like Angular.
 online version https://leanpub.com/exploring-es6/read
His "Speaking JavaScript" book is really good. I always wonder why it is never mentioned when someone wants to learn the language.
Turns out I updated the Pen, but not the post. Thanks for letting me know.
JS frameworks are gone every 1-2 years. pick something based on the job u wanna get or the style you like. i would skip asp.net and go with node. its possible to do everything you can do in asp and php in node, and as a bonus you can use it for your shell scripts and desktop apps.
No.
JavaScript does support a form of private variables Example: var myObject = (function() { var pub = {} // The public variables/functions from this object var imPrivate = ':)'; pub.imNotPrivate = ':('; return pub; }); var newObj = new myObject(); The only things that can be accessed from this object are what is returned in `pub`. I don't know why more people don't do this.
Could not agree more. His blogs are really high quality, and his book "Speaking JavaScript" is one of must read for me. 
No.... just no...
 $('#something').css('top','0px'); //versus var a = document.getElementById('something'); var style = a.getAttribute('style') if (style.indexOf('top') == -1) a.setAttribute('style', style+";top:0px;") else a.setAttribute('style', style.replace(/top: ?+d+px;/, "top: 0px;")) thats not even the crossbrowser version of getattribute youll have to write if u want to support old browsers... this is the chrome version op can decide for himself on jquery vs vanilla
Why? If there is no fundamental knowledge of the language then these libraries/frameworks are only going to cause confusion. Without knowing how a for (var i) loop works and how to DI an anonymous function, you're going to have a real hard time trying to figure out angular.forEach or even $().each for that matter. Sure, you'll pick up on the syntax of that library/framework, but you'll have no idea why or how it's actually doing what it's doing.
yea i agree with this, javascript frameworks go out of style after less than 2 years usually and then its not a skill for your resume. op should stick with backbone if he knows it already, its a solid fw.
Looks cool, just wish ES6 had support for mixins :/
I really like Flight JS. I wish more people would be using it.
Writing "someObj.B" or "function ... this.B" would work. I recommend to use a shorthand method: addB(a) {return a + this.b}
See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this
One example they don't provide is using the arrow function from within an object literal. :)
I think I understand why it was confusing to me; the same reason why `this` is always confusing to beginners, it changes depending on context. in my head, I was thinking that with something like: const someObj = { someFunc() { return this; }, someArrow: () =&gt; this }; That `someObj.someFunc()` would return a `this` scoped to `someFunc`, and that `someObj.someArrow()` would return the `this` scoped to `someObj`. But I'm wrong. When ~~inside an object literal, every functions `this` is scoped to the object,~~ called from the someObj context (e.g. `someObj.someFunc()`), it's `this` is obtained from `someObj`. If it was called from another context, e.g. `const foo = someObj.someFunc(); foo();` then it's `this` would be obtained from the scope that `foo` was initialized from. The arrow function's `this` is lexically scoped (so it will take it's `this` value from wherever it is defined and does not change), so the arrow functions `this` should refer to the parent scope (outside of the object). EDIT: Thanks to /u/metanat for clarifying further.
Yeah, I think I understand now why that's so. [I made a post lower down](http://www.reddit.com/r/javascript/comments/39qs7e/es6_arrow_functions_inside_object_literals/cs5n4ax) explaining my thinking.
Most of his blog posts are the highest rated here on on /r/javascript.
I know it was resolved.. But why was it a problem in the first place? (why did Joyent lag so much?) That's what i think about... is it really a trustworthy platform? Is this where decades of research has gotten us? Tell me the advantages of Node.js over an established | productive | stable platform like .NET, because i must had missed something... 
Current at version 1.2.5 
Describe what kind of job you want. What kind of shoes would you wear to work: No shoes = Ruby Sneakers = JS and all of its meme frameworks Leather shoes = C# Some studies say Ruby developers are earning the most money right now. Personally, I think a more stable job comes with JS or C# (or even Java, to be honest). 
Documentation certainly is lacking. Also, dependency on jQuery at this day and age might raise some flags. Also, AMD only?
Yeah. I had that issue last week. It took me a while to get that `insteadOf` figured out but it worked fine after that. What I don't understand is it only did for certain packages.
This isn't really new, I think parts of twitter are actually considering using React.js now.
I've been wanting to learn `ampersandjs` for a while. I've got couple of questions if you don't mind me asking. - Do I have to know Backbone to start using ampersand? I've made few simple apps with Backbone but nothing complicated. - Does it depend on jquery and underscore like Backbone does? *Edit: I'm very familiar with other frontend frameworks however.*
This is pretty much end of life now... based on recent job postings from twitter, they're moving to react amongst other things. 
I'm not an expert, but using mongoose, you can specify associations. Take a look at the documentation provided here - http://mongoosejs.com/docs/populate.html Also, I did not see the Group schema definition in the project. You might have forgotten to commit it to github.
No I'm saying it is. DFP is floating point math. But actual decimal arithmetic is exact and will never have rounding errors.
the group schema is under models/user.js Ive looked at the populate, but I dont see how I could have it dynamically populate users. I dont want to just manually add user by user
I've been looking at react and I like it. I was a bit unsure about flux, but maybe I should just integrate it with backbone.
Nice, another javascript framework....
You don't, that's the point. Decimal arithmetic can't do things like floats, its much more limited. They are fixed length decimals with a real finite value within bounds. You also can't do all math like you can with floats, any manipulation that would result in a number that isn't a fixed length decimal will produce an error. Because of the complications its really only used in the financial world.
I partially agree with you. There's a lot of reasons someone might want to start with jQuery. If they are more interested in design than JS/programming in general, or if they find grinding on the core JS stuff too boring and want to get right to dom stuff. I personally found jQuery super confusing before I had a solid understanding of general javascript stuff first though. 
Seems that version 2 [won't depend on jQuery](https://github.com/flightjs/flight/issues/320) and will be moved to [CommonJS](https://github.com/flightjs/flight/issues/297) I don't care so much about the jQuery dependancy as I use it in every project anyhow...
Hey i'm a beginner too, currently trying to learn javascript, been at it for a couple months. I tried to start with jQuery and dom manipulation stuff right out of the door and I wouldn't recommend it. I had a much easier time with jQuery after spending a few weeks on core JS stuff. It's hard to make a good recommendation as to what you exactly should do without knowing your current level at all, so i'll just say a bunch of stuff and maybe something will be relevant. The order i'd recommend is: * general programming stuff in javascript * numbers, strings, booleans, variables, loops, functions, arrays, objects etc * vanilla javascript stuff * think of an easy project, and make it in jQuery spaghetti code * redo it but better with an mv* framework like Backbone The way i got started was through a combo of codeschool, code academy, and Udacity. If you are a total beginner to programming I would start there. They give you a pretty good intro to the basics. When I started with those I couldn't write a `for` loop. There's a lot of other great mooc stuff out there too. If you only pick one i'd go with code academy, i found code school annoying. As far as stuff you'll want to learn beyond the code school basics, I can give you a short list of some of the things I worked on after the code school curriculum. This is in no particular order, * you are probably familiar with chrome dev tools since you do html/css, but get to know it better. The console and sources tabs in particular. Being able to step through problems in the debugger has been invaluable to me. * higher order functions and callbacks (ch 5 or 6 ish of eloquent javascript is a good resource for this) * closures and scope in general * recursion * objects / inheritance patterns / prototype chain / `this` (object playground is a good resource) * call / apply / bind (writing your own bind function is a good exercise) * take a look at lodash or underscore or other similar libraries and try to write your own simplified version of any of the functions that sound cool to you. This is a really cool and challenging exercise for a beginner and helped me learn a lot. Depending on which functions you pick it could really help your understanding callbacks, closure scope, and objects, which were all stumbling blocks for me. This is basically taking the higher order function chapter of Eloquent Javascript a bit further. Once you can write your own reduce and memoize function you'll be pretty happy with yourself. * write a simple event system for `on` and `trigger`(like in backbone) * write some easy data structures like stack, queue, linked list, tree, etc. * write some easy algorithms like bubble sort or an array shuffle * do toy problems on coderbyte, project euler, and other similar sites If you want to go the extra mile and pick up a good habit, when you're doing all of these things you could try writing simple tests. When i'm messing around with toy problems or new concepts I test with mocha/chai and I use a [yeoman generator](https://github.com/phillipalexander/generator-test) to scaffold out a simple test setup. I also have a chai completions plugin for Sublime Text which makes writing the tests quicker. So when I want to work on something it's as quick as `touch myFile.js` `yo test`and everything is set up for testing in the browser or node. I prefer browser usually just so i can step through stuff in the debugger. Writing tests is also a great way to force yourself to think about the problem at hand before you just start coding away. And as a general tip don't spend too long stuck on any given thing. If you don't understand answers you're finding on stack overflow try to find someone that can help you out. If you don't know any programmers personally just ask strangers on the internet. The subreddits focused on learning programming are good place to start. Definitely try to find a buddy to learn with or least talk to this stuff about. It makes learning a lot more fun and often easier. freecodecamp.com is a good place to find people to talk to about this stuff, the community there is good. I didn't care for the curriculum much though. 
I'm sad that I've only just seen this now. Flight.js looks exactly like the sort of framework I could make use of. There doesn't seem to be much development activity on V2. Are they still pushing ahead with it or are they switching to React?
IIRC Joyent didn't want to implement the newest ES6 stuff (I could be wrong though, I didn't follow it too closely). As for the advantages of Node, I think its a more open platform and the language is familiar to everybody who has done web development before, whereas .NET feels a bit clunky. I've had to do some .NET for school and I had to spend a few hours just downloading and installing random executables. After that I had to deal with things like having to wait for the code to compile, only being able to use Visual studio, having to use the strange .NET templating (bear in mind that we weren't using Razor). As a bonus, JavaScript isn't "owned" by anyone, in contrast to .NET/C# which is controlled by a single company.
It's not like that. The this returned in the first function will refer to the calling context when the function is called. So if you do someObj.someFunc() this will be someObj, but if you do, let x = someObj.someFunc; x(); undefined will be returned. The arrow function will always be bound to the lexical this, and won't ever depend on the calling context.
Do you want any kind of persistence in the application? As in, user logins, saving mockups to the application, pricing, etc? If so, you'll need a backend. Do you want it online? Can other people use it? If so, you'll need to host it anyway, so you may as well use a backend. Otherwise, if this is just an app that you want to create for yourself, then you can do it just fine with javascript. You can also use node.js and write the backend and front end in javascript if you're looking to teach yourself and want some more practice. 
CommonJS was cancelled. Mailing list and repo are very inactive this year. Flight is in maintenance mode.
Here is a CommonJS version: https://github.com/flightjs/flight/tree/necolas-commonjs-wip
Firstly, I don't think AngularJS is trashed. In my current job we are using it to develop web apps that we rely on and it's working great. They might not be actively developing it as the efforts move to 2.0 but it's certainly not trashed. In terms of learning a framework, I personally believe that if you think becoming an AngularJS developer or an &lt;insert framework here&gt; developer is a good career move then that will be a short lived career. Become a good JavaScript developer and learn a couple of frameworks to help you get by. It takes a couple of days to learn a framework (that's why they exist) versus months or years to become a truly good JavaScript developer. If you want a framework to tag on your resume then AngularJS is as good as any. As long as your JavaScript skills are solid moving between frameworks is a small effort. In this area you have to constantly be evaluating the latest thing, trying it and getting your head around it rather than worrying about becoming an "expert". The frameworks will come and go but JavaScript will always be around.
ok in that case I will begin with reactJS
Angular has still its uses. But mostly, angular developers are searched because the employers have zero knowledge about frontend development, but stay halfway recent on the buzzwords. That being said, if I had to choose a new framework, I'd probably go for polymer. First, with the growing support for HTML5 components, polyfills can be only loaded for older clients and performance increases. Second, it comes very close to how our team already organizes our components.
sup g
Would you recommend using Angular Material for developing web apps? Pros/cons?
Chrome is a one-liner: document.getElementById('something').style.top = '0px'
It does not become add or multiply, it just USES it. The function gets thrown another function, which it can use at will. Another example: you can make a function that gets access to a list of different functions, and then, depending on what number you passed to it, it runs the corresponding functions. It is best to think of functions in Javascript as objects that represent a space. They can be referenced, and therefore they can be used anytime you wish. 
https://github.com/jacobp100/state-transitions/issues/1 Would be good to have a discussion there! I quite like mixins, so haven’t actually used ES6 classes for React components, so it would be nice have some input from people who have used them.
...and for good reason...love his stuff.
I'm less worried about my code than maintaining code. I expect to eventually see code like this up for review: var boozle=()=&gt;()=&gt; {var bam=true;return {get: function(){ return bam},set(x){bam=x;}, add:x=&gt;bam+=x}}(); That's five functions in five styles (fat arrow w/ parentheses, fat arrow IIFE, classic, object literal, fat arrow no parentheses). EDIT: with formatting: var boozle = () =&gt; () =&gt; { var bam = true; return { get: function(){ return bam; }, set(x){ bam=x; }, add: x =&gt; bam += x } }();
So learning yesterday's favorite framework is getting trashed today, eh? Lotta good that did everyone. (Not that I think that's true.) I had a headhunter call me last Thursday. She asked if I knew Angular. I groaned a little and she said, "Yeah, most developers I speak with do the same thing. They tell me it's unreasonable for anyone to use it and I agree." I found that statement interesting.
There are a half dozen settings I can think of off hand that effect this. Some are package level, some are git client level, some are network level, and some are remote server level.
Thanks!
Thanks!
That's like... 20 decades in JS time?
Honest question, because I don't understand you guys — but I love your product. You have it within your grasp to open up the Spotify UI so the community itself could make changes and implement features that it wants. You could even say that it's a highly experimental feature, and that any plugins/addons/changes made using it may stop working at any time — leave the community to fix it when you change something. It could be like a tiny, tiny hole you could poke to let us tinker with this stuff: "put a css / js file here, and we will include it after we've initialized everything else". I see the potential for Spotify being *immense*, since you empower your customers in a way that other desktop clients *just can't*. The people wanting a more compact playlist, the users who don't have good enough eyesight to actually use the dark UI, people that don't want the social sidebar, etc — you could satisfy them all. And I know about the .spa files, and we could potentially build something on top of that — it'd be a lot better if you guys provided the community with some semi-official means of doing it that isn't wiped upon every update. So why don't you? Why aren't you guys doing this? Your architecture is perfect for it! 
gfs should be a constant, yo!
I'm just an engineer so can't speak to any legal issues that may or may not be preventing this. But what I can say is that this request is definitely for power users like yourself. Again I'm just an engineer not someone who makes these sort of decisions. Certainly if we did this there would have to be a strict security review ahead of time to ensure our encryption, user data, etc would not be able to be touched by these "plugins". That said... nothing stops you from doing this on the web player using greasemonkey or something like that. Hope this helps (probably doesn't).
&gt; That said... nothing stops you from doing this on the web player using greasemonkey or something like that. Way ahead of you. Global hotkey to remove the currently playing song ftw. :D Unfortunately the web player isn't as nice as using the desktop application though. &gt; Certainly if we did this there would have to be a strict security review ahead of time to ensure our encryption, user data, etc would not be able to be touched by these "plugins". Sigh — I guess you have a point here. Although reasonably you'd just have to make sure the plugins would have no way of doing http requests to anything but your designated endpoints (if you're doing that at all from the UI — else you could just disable ajax calls altogether obviously.) 
**Question 1&amp;3:** When it comes to your 'carrier' concept, there is no real 'convention' per se, like with most things use names that are relevant to your uses and make sense for the application. The one name that covers generally all this type of data is "bootstrap". So your bootstrap data in this case would be things like: "something", "user", etc. We use our company acronym as the global variable for storage (I've seen this done many times). So serverside, you'd load a script tag in the head of your document that might look like: &lt;script type="text/javascript"&gt; window.yourCompanyData = { lookupStrings: { homeLayout: { content : { something : $something }, }, }, auth: { user : $user }, lang: { }, } &lt;/script&gt; As for question 1, this is more about how often that data changes and what changing it means. It sounds like *$something* is dynamically generated text. If it never changes once set from the server, you could easily come up with a lookup strategy along the lines of the above. If it does change or needs to be saved or anything of that nature, you're probably going to greatly benefit from the use of a data 'model' that has 'something' as an attribute that can be get/set and that you can begin to use ajax to save or fetch itself from the persistence layer. **Question 4:** There's nothing evil about putting script tags in the head. As shown above, sometimes there is literally no way around it. We need access to that data immediately so it needs to be there. It will not hurt you, just know when its best practice. **Question 2&amp;5:** If all your JS involves is a few DOM queries, some form validation and some text changes here or there your middlewares strategy might work for you. But if you are expecting this to grow and become more data/update intensive you probably want to rethink things. Given you are already using a build system of sorts (bower, grunt) it probably wouldn't take you more than a day of reading and experimenting with something like require.js, webpack or browserify and harness those to get away from your middlewares strategy. Of everything I read that one looks like it is the ripest for causing you pain down the road. This gets towards answering question 3: using require isn't concatenating the files, its to figure out the dependencies so that you don't have to and to get away from the use of global variables. Also, its so that you aren't having to try and manage/figure-out/maintain the context of your 'this'. edit: removing quotes in the above json. 
Note: Read the following as if it was written by someone drunk. ### Q1 &gt; So `var text = "{{ $something }}";` will end up being `var text = carrier.something;` and I will have to bind those data into carrier file each time. That is actually a good thing, not a bad thing. From your explanation, `carrier` is the place where you do data communication between back and front, right? So it should be the place where you do **all** data communication between back and front. Letting yourself do `var text = "{{ $something }}";` is letting yourself have _most_ of your data communication in one place but then disperse additional little pieces just for some apparent convenience. You're actually going around your own design with a kludge. ### Q2 IMHO this isn't terribly important unless you have load performance concerns. (And I mean, **observed**, **identified** concerns) But in any case, I'm not sure I understand correctly this part: "concatting them each time". Do you mean you are concatenating them _on each request_?? If you meant that, then sure, that's totally unneeded and you shouldn't do it. If by "each time" you mean "on each build", then I don't see what the problem is. That's what the building process is for, isn't it? ### Q3 I have used a similar thing in some projects, yeah. I've tended to call it something along the lines of `pageConfig` or `config` or some such thing. But... generally I wouldn't put so much data in there. Or sensitive data. Things in there would mostly be backend service endpoints. Sometimes a few flags. Generally not string literals. Sometimes, an initial data batch to avoid an initial call to said services. But in those cases, we would keep that separate from the `config` object. In particular I don't think I like much the need to tell the frontend code the fact that the environment is _local_. That smells fishy _to me_. ### Q4 I don't know. I'd generally always use a separate system for tracking. Be it external or internal, the tracking system was always separate. And yes, just thrown wherever. The idea is that tracking would not interfere with application code. But don't listen to me on this. ### Q5 Not everything needs to be a class.
The first I heard about them using React.js was during this [talk in 2014]( https://www.youtube.com/watch?v=m0oMHG6ZXvo). Here are the [slides](https://speakerdeck.com/necolas/adaptation-and-components). Since then there have been a few hints from their engineers that they have been looking towards using React, ES6, &amp; Webpack.
Add all kinds of closures for no apparent reason. 
I realized that after posting. Thanks for clarifying!
Let's have a look at some facts, because i think there is a big bias/outdated view with many developers... i use to think this way too but I've actually tried the different frameworks/platforms following their best practices to experience how they are like today (2014/2015) and try to do so once every year or two... * [ECMAScript Specification](http://www.ecma-international.org/publications/standards/Ecma-262.htm) * [V8](https://code.google.com/p/v8/) by Google * [Node](https://github.com/joyent/node) by Joyent . * [C# Specification](http://www.ecma-international.org/publications/standards/Ecma-334.htm) * [Roslyn](https://github.com/dotnet/roslyn) by Microsoft * [DNX](https://github.com/aspnet/DNX) by Microsoft Both languages standardized, all environments open-source, C#, like JavaScript, is also used in a variety of places... mobile with [Xamarin](http://xamarin.com/), gaming with [Unity](https://unity3d.com/unity/editor), trading with [NinjaTrader](http://www.ninjatrader.com/) ... so, really? (specifically in what way Node and .NET differ in the point of view of your statement): &gt; As a bonus, JavaScript isn't "owned" by anyone, in contrast to .NET/C# which is controlled by a single company. It is pretty "public" (known by people who follow the updates of .NET) that you can get started in minutes with the new ASP.NET 5, Linux, OSX or Windows... [dotnetConf 2015: Introduction to ASP.NET 5 ](https://www.youtube.com/watch?feature=player_detailpage&amp;v=XYvQSzq-m14&amp;t=1993) ... i think JS is a great platform.. for front-end. React native coming around, lots of frameworks, big community. But i don't trust it for critical data in the server (banking, events, healthcare...) 
The code injection can only be done by a filtering proxy - or the code is not able to communicate with the site because the latter would be loaded inside an iframe.
The Onion for web developers: "Dev learns of new useful library, learns it's already outdated after excitedly posting a link to it"
There are a few variations on JS ORM tools. I'm the maintainer of one, [JEFRi](jefri.org). It works pretty well, though the documentation and tooling support is a bit week. Message me if you're interested in a walkthrough of it.
Though remember that Bootstrap isn't the only choice for responsiveness, you can also use Foundation or any number of other front-end packages (or develop your own, if you want)
This looks like a good tutorial (found this by Googling "javascript bookmarklet"): http://code.tutsplus.com/tutorials/create-bookmarklets-the-right-way--net-18154
My codes is scripts are cools 
Definitely possible. I also see twitter as the type of company that would split test different technologies on different users to see which works best.
&gt; with the growing support for HTML5 components A very recent article (June 2015) by a Mozilla developer, goes into great detail: "The state of Web Components" -- https://hacks.mozilla.org/2015/06/the-state-of-web-components/
wow 0,3 fps in firefox.. Impressive.
Hi. Pretty random post. I don't know what SRT is or why you would want to deserialize it. I you are looking for feedback on your code, I would say that I do think that your function is too long and does too many things.
Yes. http://www.scienceleadership.org/blog/HTML5_Canvas_-_Solar_System_Example http://fabricjs.com/solar-system/ http://codepen.io/search?q=solar+system&amp;limit=all&amp;depth=everything&amp;show_forks=false
Thanks! This is exactly what I was looking for, something that goes over the concepts with a real project example and also tooling (like gulp and Browserify in this case).
I recently went through these ones on Egghead.io: https://egghead.io/series/react-fundamentals https://egghead.io/series/react-flux-architecture Not all of the videos are free, though, unfortunately.
This is a genuine question that might sound a bit clueless. :) But I'd really like some info on the topic.
Extremely helpful. Thank you very much!
https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript This guy sums it up better than anyone I have ever seen. Also, this is a great talk, and why satirical in nature, is still definitely worth your time. The short answer is that in 1995, someone wanted to give their browser an edge on the competition, and what started out as more of a marketing stunt turned joke, has surprisingly become a ubiquitous language for scripting. In adding scriptable interactivity, Netscape inadvertently changed the way browsers are supposed to work, and created a new, standard feature. While there are alternatives, support is on a per vendor basis, but JavaScript is everywhere.
First, if you're using Chrome, you ARE using compiled JavaScript! That's what Chrome's V8 JavaScript engine does. The big difference starts with the difference between scripting and programming. Scripting is code to control software, and programming is code to control hardware. Compiling is much easier to do for programming, as you have an idea of what type of hardware platform you'll need.
"WIP" -- Nicholas closed the associated pull request. That branch is dead.
Np. For the front-end, check out yeoman generators. generator-m is a good Ionic app generator.
Here's one: var str = 'scale-to-width/xxx'; var result = str.replace(/scale-to-width\/\d{3}/, '480'); Take note, that regular expressions are first-class objects in JS, meaning that you don't quote them like you might in PHP or some other languages; instead, you start (and end) a regex with a `/` to create a [_regular expression literal_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).
&gt; if you're using Chrome, you ARE using compiled JavaScript Every browser has a javascript compiler. IE has Chakra, Firefox has SpiderMonkey, Safari has JavaScriptCore. The performance of such a dynamic language isn't as good as C++ because there are a lot of checks and things that you need to put in the compiled code, but these compilers are pretty good and still making huge performance improvements every year.
Thank you so much! Regex is something I know I need to work on but I find it difficult to learn since I can't get feedback for errors in the console. I appreciate the link too, I didn't realize it shouldn't be quoted in JS, which explains why none of my combos worked haha. 
i think reddit is removing some of the characters. here is a paste http://pastie.org/pastes/10240515/text
2 questions: 1. Why did you include *all* of jquery just for 1 ajax request? You're not doing any DOM manipulations here, so you don't need the majority of it, and you could just use a much smaller library just for ajax. 2. Why did you accept a callback instead of just returning the promise? Using a callback within a promise resolution seems like the opposite way people are moving. 
Every time I get a question answered 1000 more appear xD. Thank you for pointing me in the correct direction though. So much to absorb!
It's because creating UI is something that seems to never be done. There is always another tweak or huge refactoring or the need to support a different platform that demands a different kind of UI... Languages like C++ were good for the non-UI parts of the programs that changed more slowly. But when it came to the UI they would often come up with a scripting language that would make changing the UI more straightforward. Another reason to use a scripting language for the UI parts of a program is that you could give the users of the program the power to change the UI or to make API calls without necessarily having to give them all of the source code and demand that they would have an IDE with a compiler nearby to make the changes themselves. There are many stories of successful combination of low level languages with scripting languages for the UI. From games like Quake to Adobe products. It's something that is still being done today. Also, compilers give errors. If you miss a dependency, you get an error. You may need support to get around those errors if you are not the original developer of the code or are not too proficient in the language at hand. So even if you could hand over your source code to the end users, it would still be a relative support headache. When companies do offer the source code they also add open source licenses and make the license say that it's warranty free so that from that point on you as an end user may be on your own. ;-P JavaScript ended up being the only supported language on the browser because alternatives like VB Script fell by the way side. Mainly because the browsers tried to be compatible with one another, and if one browser did not support something, users would not want to use features that would restrict their market to just one browser. Even the companies that created the browsers would also need to create programs that would support every browser out there and not just their own browser. Recently there are 4 main browser developers: Google, Microsoft, Apple and Mozilla. In the past it was not always like that and changes would be easier to incorporate, because in the past Apple did not have their browser and their own popular platforms. But even if one of them wanted to add a cooler language to the browser, the language would have to be completely in the public domain. So economically it didn't matter to them much to innovate. In their history of supporting the browsers those companies may have lost many wars and they may be wary of trying to innovate again. It seems as though the web is currently under maintenance, while a large development focus is being directed at mobile competition instead. The web won its slice of the market place and is successful and is needed, but it also carries the responsibility of just being compatible with what is already out there and they are trying to avoid creating new incompatibilities. Changes to the web are coming from committees which are very slow at accepting changes and it's easy for changes to take half a decade to come into being. While JavaScript is not compiled, since it's so important, those companies have come up with some compilers for JavaScript that can extend JavaScript from the outside. Google used a compiler tool called Closure tools for their web services. Recently we have seen TypeScript, Babel, Dart, CoffeeScript and so on. Some of them will give you more error reports on your IDE of choice. But there is only so much that they can do without changing the semantics of JavaScript. Luckily or not, JavaScript will have some [changes to make it more strict](https://developers.google.com/v8/experiments) and that will also help with error reporting. Cheers.
http://reactjscamp.com/
Chrome has [NaCl](https://developer.chrome.com/native-client), and Mozilla made (and is pushing it to other browsers) [asm.js](http://asmjs.org/spec/latest/) and there is also [emscripten](https://github.com/kripken/emscripten) The last two still sit ontop of JavaScript, but usually in an (un?)safe enviornment (see [Strict mode](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode), asm.js, and probably the upcoming [Sane/SoundScript](https://github.com/rwaldron/tc39-notes/blob/master/es6/2015-01/JSExperimentalDirections.pdf)) JS was created by NetScape under the name Mocha in two weeks?, and for the reasons waffles just outlined.
[http://reactweek.com](http://reactweek.com)
A v8 talk from Google around 2-3 years ago showed that v8 was only 17% slower than C++ when finding primes. While this is definitely *not* true for all cases, it does put to rest the idea that dynamic languages somehow *must* be slow and bad. Despite the bad parts, prototypes and good support for higher-order functions make a very good programming experience in JS compared to a lot of languages. I often think to myself that I would rather program in JS than in something like Python or Ruby (though I wish JS were Scheme like originally intended). If you write your code in a way that optimizes well behind the scenes (esp. don't add/remove object properties, don't change var types, don't mix types in arrays and declare them, and no polymorphic functions), then performance of JS is quite good (and in the case of numeric calculations, it can be very good). asm.js makes this even better and is within 1.5x the speed of C (as of late 2013). SIMD.js moves this performance much closer as well. On the other hand, though it's *technically* JS, you will never actually code asm.js by hand. My preference would be something like PNaCl and a set of low-level APIs that any language could compile for. This would provide a lot of advantages and solve quite a few outstanding problems.
Question 1: Dependency Injection. If Object A depends on Object B, then Object A should not be going "this.myB = new ObjectB()". Give Object A what it needs. Question 2: that depends. RequireJS is nice in that it does everything browserify does, but without having to compile first before executing the code. HOWEVER, RequireJS syntax is funky and duplicitious: define(['depenency1','dependency2','dependency3'], function(Dep1, Dep2, Dep3) { }); I dunno, I use RequireJS, but that double dependency list can be quite annoying. Question 3: No. Data access is data access. It's the pattern and architecture that matters (sometimes forced on you by frameworks). Question 4: Don't put any inline JS anywhere. All your JS should be in external files. Unit testing anything else will be annoying. While we're on the subject, saying you do most of your work in a single file, is probably wrong for anything beyond a simple app. Get your unit tests going, it will help shape your architecture because code that is easy to test, is often better code in general. 
Do you have an array of answers or each answer stored as it's own variable like answer1, answer2,..., answern? I'd suggest using an array of possible answers than you would just use: if(answers[qa]==userAnswer)
Are you looking for something like [this](http://codepen.io/short/pen/zGdrea)? You can use computed names. Here I use the window object to get at the variables, but you can also throw it inside any object you want.
But would an array work if each answer has a certain value signed to it 
Maybe I didn't understand exactly what you were trying to accomplish. I assumed you were comparing an answer to a predefined list of answers. &gt; But would an array work if each answer has a certain value signed to it I'm not sure I understand the question? Do you mean different data types? 
This is why you often see people recommending not to use for-in on arrays.
Arrays are objects. You basically added a new property to the object called "boom" which stores the string.
Oh, man, Javascript. I was going to tell you that, well, that's the toString() function. NOPE! NOPE NOPE NOPE! It would be totally expected for an array's toString() function to only loop over numbered keys. And it does! So, I declared an array `a`, such that `a[0] = 1`, `a[1] = 2`, `a[10] = "what"`, and `a["boom"] = "boom"`. So (using Chrome): `a.toString()` gives `"1,2,,,,,,,,,what"` `console.log(a)` gives `[1, 2, 10: "what", boom: "boom"]` `a` in the console gives `[1, 2, undefined × 8, "what"]` I'm guessing that the `toString()` method is part of Javascript, the `console.log()` method is a nice Chrome tool to help you adequately explore the objects passed to it, and I have no fucking clue why just typing the variable name into the console doesn't give either one of these. Anyone else know?
I really like your `parseTimeCode` function. It's interesting to think about doing this without underscore/lodash.
EmberCLI 2.0
 let a = [...'abc']; a.foo = 'bar'; console.log([...Object.keys(a)]); console.log([...a.keys()]); Output: ["0", "1", "2", "foo"] [0, 1, 2] Don't use for-in for arrays. It's for objects. Don't use arrays like objects and don't use objects like arrays. Use forEach, for-of, or a regular for-loop for iterating over arrays. for(let v of a) { console.log(v); // a b c }
I used these tutorials on Egghead to get my first introduction to React, but I have a pro account through my job, so I had access to all of the videos.
The method [`toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) is defined on `Object.prototype` and therefore is available to all objects (except those created with `Object.create(null)` because those don't inherit from `Object.prototype`); by implicit temporary conversion, that method is also available to the scalar primitives (booleans, numbers, strings, and symbols), but not to `null` or `undefined`, although it is possible to `call` or `apply` to them, in which case the results will be the obvious ones: Object.prototype.toString.call(null); // '[object Null]' Object.prototype.toString.call(undefined); // '[object Undefined]' Almost every built-in object in JS, including the wrapper objects `Boolean`, `Number`, `String`, and `Symbol`, along with the DOM objects, overrides the `toString` method with its own interpretation; `Array.prototype.toString` (commonly written in documentation as `Array#toString` for brevity, although that is not legal JS syntax) loops from 0 to `length - 1`, converts each property in that index (or `undefined` if there is no property in that index) to a string (unlike the example above, `null` and `undefined` are respectively converted to `'null'` and `'undefined'` using the internal `ToString` operation), and then concatenates them with commas, much like calling `Array#join` with no argument (`','` is the default). --- Meanwhile, the [`console.log`](https://developer.mozilla.org/en-US/docs/Web/API/Console/log) method is part of the Console API, not properly part of JavaScript; however, all modern browsers implement it, and so does Node, and Firebug (which pioneered this API) provides it to older browsers via a Firefox extension or a bookmarklet (a.k.a. "[Firebug Lite](http://getfirebug.com/firebuglite)"). The Console API has its own way of representing values, and it's not even the same from browser to browser, or between what `console.log` records and how the return value of that expression is represented in the console. --- When you type an expression into the console, you will see a representation of what the ECMAScript standard refers to as the "return value" of the expression; in some browsers, arrays with holes are represented by saying a certain number of slots are undefined, and this is actually different from explicitly setting one of those slots to `undefined`, because *that* means that the array has a property with that certain index, with value `undefined`. For example, after running this code, the value of `a` should show up in the Chrome console as `[1, undefined x 1, undefined]`: var a = [1]; // undefined a[2] = undefined; // undefined a; // [1, undefined x 1, undefined] Another way to express this difference is that `1 in a` is `false` while `2 in a` is `true`; to actually delete an element from an array, use the `delete` operator, like `delete a[0];` (note that deleting the last element of an array actually does not alter the array's `length` property, although if you set `length` directly, all properties at that numeric index and higher *will* be deleted).
FYI: A Typescript type definition file for Stream.js is under development here: https://github.com/erosb/DefinitelyTyped/blob/streamjs/streamjs/streamjs.d.ts
It's enumerable, that's why it shows up in for-in.
You can use Babel to make it work in ES5 environments. Array.prototype.keys is also from ES6, by the way. (Unlike Object.keys, which is from ES5.) Anyhow, this was only meant to illustrate that there is a difference. For-in iterates over those values you'd get from Object.keys, which is obviously not what you want. Regular for-loops and forEach work just fine with ES5.
because the "toString" function of array, only iterates over integer keys, while the key for "Whaaaat" is a string. [Having the key integer instead of string, makes it show in log ](http://puu.sh/ipove/8fa43a0216.png)
I learned this through practice recently.
This looks good so far but I can't help but notice its only half complete, and was last updated in April. The last two planned articles might not be as crucial, but routing will be if you plan on making a single page app.
It should look something like this (in ES5): var parseTimeCode = function (timeCodeStr) { return timeCodeStr.split(/[:,]/) .map(Number) .map(function(a,i){ return [60 * 60 * 1000, 60 * 1000, 1000, 1][i]*a; }) .reduce(function(a,b){ return a+b; }, 0); };
I personally got introducted to react with the free egghead.io videos and then I just read the whole guide + docs on the official site. React has a rather small API so just get started and dont worry to much, the real shit (atleast for me) started with flux, which might be not that hard at its core but is really different then the current js solutions out there.
Downvotable bragging time: I like the preloader on [the works](http://raphaelmalka.com/works) page but I did it better when I wrote the preloader for [National Geographic's Killing Jesus site](http://killingjesus.nationalgeographic.com/#!/the-birth/thorns). Not sure how Raphael made his but I did mine using SVG and JS. All the lines are 1 px wide rectangles that all act as a mask for a texture file. I made a shell of the SVG in the HTML document, defined the paths of the rectangles using multidimentional arrays in JS, dynamically populated the SVG with elements for each of the rectangles, then animated the rectangles as the page loads. I live in Boston and I wrote most of the code for the preloader during snowpocalypse when the trains weren't running and I was home alone all day.
Sure, I didn't mean to argue about that. Just wanted to point out that, well, _some_ of those features are already available and it shouldn't be too weird to use them _specially in a piece of code that is meant to explain but not really become production code_ :)
1. Good point! This code snippet is taken out of a project which already has jQuery in it. 2. I'm actually using something *kinda* similar to promise called "[bacon stream](https://github.com/baconjs/bacon.js/#eventstream)" internally, although it is, like the case with jQuery, not actually required since there's only one async call which could be managed easily without any special tools. The important point here is that while I use all sorts of libs within my functions implementation, I always keep their interface "plain" (using only native JS types) so I don't enforce any library on my consumers, which don't necessarily favor Promises (or BaconJS for that matter).
You'll be disappointed when you learn Flux is a "way of doing something with React", not a framework or some sort of add-on. React can tidy up your UI. But Angular can, too, via directives. Angular Material is the perfect example for directives. It's true that Angular's way is a bit harder to learn. Personally, the main disadvantage of React is it's lacking of two-way data binding. You need to write down some extra code to get the value from DOM element, using refs. Besides, if you're planning to create a SPA, React does not have routing. 
Note that javascript interpreters may rely on you not making a habit of doing this. An array that's only used as an array and only holding values of the same type may be drastically optimized by the JIT, while less regular objects are going to have to do things the hard way. 
http://vanilla-js.com/
Hi pdizz. I wrote the series above. React Router is going through a rather extensive API update right now. So I've been waiting until they've at least put the new router in Beta before I write the next article. If it's not out in the next month I'll write it with the "old" router.
I would ask what features of the Angular 1.x framework itself are better than React for a beginner in the OPs experience (not popularity or results of popularity such as widget libraries as these simply happen given time and direct comparison is nearly impossible). In my experience, Angular is easy to start with, but anything beyond "Hello World!" has the learning curve of a wall (and this curve exists even if you know JS because NOTHING about the framework has anything in common with the rest of the JS ecosystem). React hits the sweet spot for me. It's easy to teach (a couple days to teach in its entirety), powerful (proven by all the other frameworks adding its features as fast as possible), functionally composable, contains almost zero proprietary ideas, has an easy mental model, and Most importantly, it gets out of the way. 
angular is better than react because it is a complete framwork -- it has everything I need to build an app. you're right about the learning curve though, that was a doozy. I'm not even going to bother with 2.x for that reason. Just more made up non-sensical paradigms. I really like aurelia so far.
I think there's no problem with using `for...in` on arrays, you should just never directly assign values to an array index (`arr[5] = 3` or `arr.boom = "Whaaat`) unless you know it won't introduce a gap. As soon as you do that you're basically treating it as a sparse array, in which case it should be an object (e.g. length doesn't really make sense anymore). If it really is an array, you should probably be pushing and popping anyway. And before you mention it, `array.forEach()` *is* better, but in some cases, for example generator coroutines (using co or bluebird's Promise.coroutine), you don't want to introduce another function scope because that stops you from using `yield`, so `for...in` is a lot better than `array.forEach`
Nooooooo, this will break a project of mine :(
Which part of pipes do you use?
Really appreciate it!
Currently, the polyfill for `.forEach` is still faster than using the built in version. Currently.
A question to all the JS people: Is it guaranteed that the timeouts are called in correct order? Especially when the timeouts are short?
Excuse me, I sealed
I basically use it for a backend-less webapp to fetch XML and return it as JSON.
While the timeout-ed functions aren't necessarily executed on time, the order appears to be as-scheduled. Which... kinda makes sense, I guess. After all, that queue is sorted. So, even if the timing and resolution is all over the place, the tasks are executed in queue-order, which directly corresponds to the specified delay.
needs a `.find` function. you can wrap `document.querySelectorAll(selector)`.
Just raw XML, since it's hard to properly fetch that asynchronously from the client-side.
hmmm...what server? can you share the url? 
As a safety measure for that, the [Rosetta Code](http://rosettacode.org/wiki/Sorting_algorithms/Sleep_sort) sample sets the timeout for `5*n`.
`Object.observe(objectToObserve, function callback(obj){return console.log(obj.toString() + " has changed")})`
"Don't use for-in for arrays. It's for objects." End of. 
ES6 quick solution ;) "I'm a littlE tEa poT".toLowerCase().split(' ').map((a) =&gt; a.charAt(0).toUpperCase() + a.substr(1)).join(' '); ES5 long version: function ucfirst(str) { return str.charAt(0).toUpperCase() + str.substr(1); } function titleCase(str) { return str.toLowerCase().split(' ').map(ucfirst).join(' '); }
Actually, all the keys are strings in an object (be it an array or not). They should be numeric, though. There are no real arrays in JS, just objects disguised as arrays. 
Also don't do i+1 when using for in on an array. It's probably safer to just stick with for (var i=0; i&lt;array.length; i++).
Just out of curiosity - have you done any benchmarks showing how much faster kewjs is compared to jQuery? 
You should really do your homework on your own, otherwise you won't learn enough to pass the exams.
I created it as a set of tools that would benefit MY day to day dev. There are probably other libraries, like you mentioned, that would probably do the same thing. The difference is that I created it as a way to learn and improve, as well as benefiting from the result. As I optimize and improve the code, I'm learning. I'm just giving other people an opportunity to contribute if they like. It might turn into something amazing and unique. If not then it's not the end of the world.
Not sure what you need or whatever that code makes but... there're lot of mistakes up there... a fiddle would be nice to understand the problem
I'm confused as to what you're trying to do, I created a JSfiddle to test your code: http://jsfiddle.net/hhh8bbh9/ The second button works just fine, outputting 'hello world' into a div with an ID of demo. The first button doesn't work because $('#myButton').button isn't a function but I assume that's because the laravel jquery isn't loaded but I couldn't find a link to it's source. Anyway hope this helps in some way, if you give me more details I'll take another look.
I wish they'd at least open source it.
What WHY! ?
http://jsfiddle.net/bd7tLdrt/ yall can use this fiddle, $().button is a bootstrap button.js function... so you have to make sure you have bootstrap js loaded :d if all javascript on a page isnt working that means there was an error in it that stopped the script from finishing... check console! the reset sets the text back to "loading state" thats why its not working this one works: http://jsfiddle.net/bd7tLdrt/1 and http://jsfiddle.net/bd7tLdrt/3
Actually what you see here is Chrome's DevTools representation of an array object instead of what toString() returns though they happen to be very similar.
consider it a valuable lesson: if you depend on third party services, you better have a backup plan ready to roll fast ;)
i don't really use w3schools, it's just that i never touched javascript as i like the native compile languages better. But fuck that documentation devdocs.io i love it thx for the cheatsheet
Explain. 
Stricter JS should be welcomed by everyone!
&gt; From a function point of view, jQuery uses a lot of code to support pre IE8 which made it a lot slower (especially the basic selector) Friendly FYI the 2.X branch of jQuery drops support for IE &lt; v9. your point still stands as it's 83KB but that's not because of legacy IE support. The 1.X branch has legacy IE support with a file size of 94KB. 
typeof [] &gt; ’object’
Definitely worth it in my opinion to get a Pro account, but I typically prefer video tutorials for new topics.
"Screen readers read from the DOM" there are several way and there are best practices to notify visually impaired user of dynamic changes to content by JS. I guess he was a little vague on that point, but I am certain he has used screen readers before.
I have seen some instances where for...in includes the length property. 
Yep, realized the mistake previously, updated now. 
I have not tried it yet- there are some things I find interesting about aurelia- mainly the fact that it seems to be a single monolithic framework capable of doing all things, and there are things that kindof turn me off about it- mainly the fact that it seems to be a single monolithic framework capable of doing all things. 
No. HTML5 spec says that setTimeout has a minimum timeout of 4ms (and should be increased to that automatically).
You can just use [React.createElement()](https://facebook.github.io/react/docs/glossary.html#react-elements) directly. That's [all the JSX compiler does](https://facebook.github.io/react/docs/jsx-in-depth.html#the-transform) anyway. 
I've recently joined a company that uses regexes a lot. I have been having some trouble, so I will try this link out. Thanks!
I also usually assign it to a var to make things more concise: var r = React.createElement; //... render: function () { return r("div", {className: "foo" ...} // ... }
A little late but if you still want to help: mainMethod: http://pastebin.com/k0RDcYiq Where Player array is filled: http://pastebin.com/zysm78Tv 
Primitives (strings, numbers, booleans) are not objects, and are passed around by value instead of by reference. Functions are also an edge case. function a () { console.log('a') } typeof a &gt; "function" They don't claim to be objects, but you can add properties to them. a.b = 'B' a.b &gt; "B" Try that with a primitive and it won't have any memory of the property you assigned.
 typeof null "object"
I believe it's tradition just to write a new framework.
Forgive my ignorance, but what does 0,3 frames per second actually mean? 0.3? 30? 
[Wat](https://www.destroyallsoftware.com/talks/wat)?
Hmm odd, I have a bookmarklet with this exact behavior and I don't have any cross-site-scripting issues at all... I'm not sure why though. You can take a look at the [source](https://github.com/Azeirah/azeirah.github.io/blob/master/groovemarklet2dev.js) and the [bookmarklet]( https://martijnbrekelmans.com/SMG/groovemarklet.php)
Do you have a list of features you'd like to add to the library?
A little late but if you still want to help: mainMethod: http://pastebin.com/k0RDcYiq Where Player array is filled: http://pastebin.com/zysm78Tv
Sad to see it go. Until last month I was using it to aggregate podcasts into a single feed. But Pipes had some serious bugs and poor documentation, so I eventually decided to just roll my own in PHP. Looks like I did it just in time too. On the off chance anyone's looking for the same sort of tool, [I put my code up on GitHub](https://github.com/insanityfarm/podquilt). Zero documentation and no roadmap for future development but it's been working solidly for me for the past month. Maybe I'll do more with it at some point. Feed details are managed in the config.json (example file in the repo). Just subscribe to index.php and all your feeds will be fetched, merged, and sorted. (Edited for clarity)
I mean, it really sounds like if you don't like JSX, and you don't like using the raw JS React library, then maybe React isn't the best library for your team?
 Besides transpiling ES6, there are lots of useful libraries like underscore or lodash that have utility functions that do this: var _ = require('underscore'); var keyName = 'foo'; var obj = _.object([ [keyName, 'bar'] ]); Or you could write your own 
I wouldn't call that nicer ;)
You can try [t7](https://github.com/trueadm/t7). Website is at [t7js.com](http://t7js.com). It's a small library that converts HTML content in template strings into compatible virtual DOM objects/functions. It works well with React too. The only downside is that (without a transpiler like Babel) it will only support Chrome and Firefox (as of writing this), so older IE browser support won't be there. There's also an Atom plugin if you or your team are users of Atom. Let me know if that works for your team. Note: I'm the author of t7
I like this one : String.prototype.toProperCase = function(){ return this.toLowerCase().replace(/^(.)|\s(.)/g, function($1) { return $1.toUpperCase(); }); } [Source and explanations](http://www.codeproject.com/Articles/11009/Proper-Case-JavaScript-Function)
If you can invest a couple of hours on educating yourself in the ins, outs, beauty, shortfalls, rationales, history and future of JavaScript, I highly recommend the most excellent [Crockford on JavaScript](https://www.youtube.com/playlist?list=PLK2r_jmNshM9o-62zTR2toxyRlzrBsSL2) series.
It's a shortcut for doing it in two lines: beginning = clause.indexOf(...); if(beginning != -1) { ... } This is done when you are going to need the value of the index later, i.e. you aren't just testing for presence or absence. In other words, if you had written: if(clause.indexOf(...) != -1) { ... } ...and you needed the index, then you would have to compute it again, which wastes time. &gt; As for indexof, if "OLD_STATE IN" is found in clause, will the index be the beginning of the string being searched for or the end of it? Surely you can answer this yourself in 20 seconds with a little experimentation from a JavaScript console, or by reading MDN. 
Yeah, this is a known issue with bookmarklets and CSP, although the specification explicitely states that _User agents may allow users to modify or bypass policy enforcement through user preferences, bookmarklets, third-party additions to the user agent, and other such mechanisms._ ([source](http://www.w3.org/TR/CSP/#processing-model)) – GitHub [wrote more about CSP and its drawbacks](https://github.com/blog/1477-content-security-policy). However, most sites' CSP allows at least script injection, although they may block cross-domain AJAX (this is case with, e.g., Medium). Then you have some workarounds available, e.g. if you need only some data from the site, you can pass them to the URL in a pop-up window – Pinboard's bookmarklet works like this, for example. Or you can redirect the client to a new location – Instapaper does that. There's [an open issue in Bugzilla](https://bugzilla.mozilla.org/show_bug.cgi?id=866522) to allow bookmarklets to bypass CSP. Unfortunately given the technical complexity and potential security risks I doubt we will ever see this implemented.
You can even use Array functions on Objects: var obj = {}; Array.prototype.push.call(obj, 'Hello'); And thats where u can do really awesome things with js :)
Array = Object
Looks useful. I was just thinking the other day why jQuery doesn't have a built in way to bind to a selector and have it apply as new elements are added to the DOM. Will give this a try, thanks!
Without looking like a React fanboy, I have worked with quite a few frameworks and libraries and do see React as one of the quickest to pick up. **Angular** took a few weeks to get things working properly. Sometimes you find something difficult and don't know where to get help, only to discover that there was some trick you had been missing. The multitude of new terms also made it a little overwhelming. **React** was really as simple as checking out the few short tutorial pages they had. I could say it is possible to learn most of what you need to know in about 1/2 an hour to 1 hour, at most. **Mithril** is similar to React in its ease of use, but the render() method syntax is straight Javascript. If you know HTML then use React, if you don't mind building your layout in JS, then Mithril looks like a great choice.
Heres a video that talks more about what I was only slightly poking at. :)
Same technique can be used to terminate infinite loops. `arr[Infinity] = 'Wait what??'` 
Works with ES6 classes now!
This is very interesting. In fact, it's the perfect solution for us, the only problem is that we do have to support mobile browsers (they are over 60% of our total traffic). We're fortunate to be able to not care about IE uses as they make up less than 5% of our traffic. Although we could use t7 in development and change out build pipeline to Babel, it would still screw up our tests that run older browsers. I might revisit this when Safari gets the support needed – as Safari and Chrome are 90% of our user audience. Thank you too though!
Interesting idea, I wonder how you test it though. You don't get a reference to the thing you just created, so uh..... good luck I guess
I have no idea what you're going on about, but it's very simple: If you depend on something that has no obligation to you, and you have no control over it, you need to do risk management for anything remotely serious. And don't compare services to software either. If I can use open source software, then I can have 100% control over it. It's not the same comparison in the least.
If you are using docker, vagrant is redundant. The author does not seem to use vagrant in a way that it is required. It can be eliminated entirely from this tutorial afaict. 
Crap, you're right. I didn't realize that syntax had different functionality over the "click()" method
No not as far as i know. However the main javascript functions do work on my desktop apparently. So consider this solved. thanks everyone for helping. Any tips are welcome, cause atm PHP or any web/browser based language seems aids for. However frameworks have made me rethink that statement. so maybe Jquery will do the same for javascript
And that won't happen with regular images?
Very cool. It would be nice to be able to configure some of the syntax, though: - removing spaces around `{ FOO }` - adding a semicolon - not having the file extension
At least with regular images you usually get some indication that a download is occurring.
Jesus Christ this is evil
&gt;On mac, its necessary to run docker in a vm That frames the technology poorly imo. The reason you need a VM is due to the lack of support for containers in the OS X and Windos kernels (for now). So that leaves Linux as the only viable base and host for containers. It is being pedantic I know, sorry. I am fairly certain however that is the whole point of the boot2docker project. http://boot2docker.io/ &gt;using vagrant its possible to more precisely control the host environment. So a multi os team could share a more closely aligned host environment. Not sure how you intended this to be different from docker? They allow the same capability in that sense. Only If I use both docker and Vagrant, I have to ship two scripts and any dev has to wait for two systems to be downloaded, booted and configured. One 700mb docker image is plenty =D
This looks similar to Google's Feed API. I feel like there's a desire for this kind of service but it seems like everyone who runs something like it is shutting it down. I recently used Google's Feed API to grab some RSS from a blog to render headlines and snippets on a related website. There wasn't any other way to do this due to CORS. Google Feeds is deprecated, though, so I know I'll soon need to roll my own solution, but I feel like this is a common use case. Is it just not a profitable service to run? Are people not using it?
Oh, look, another JS fan boy who thinks JS is perfect because he knows it.
Well, I'm afraid you will have to do extensive re-structuring of that code for it to work :) Some ideas, thinking about the goal of having more than one player in the page: - identify what _one_ player needs to know to work and encapsulate it correctly. E.g. `mainMethod` is using `numOfVideos` for a number of things, but `numOfVideos` is outside `mainMethod`'s scope. It's even outside `Player` scope. Instead, pass that as an argument. `Player.prototype.mainMethod = function (id){ var uVidTitle = 'vidTitle' + id; /* ... */ };` - absolutely avoid making references from inside `Player` or a `Player` method (e.g. `mainMethod`) to stuff that goes beyond its responsibilities as a _single_ player. That is, in `mainMethod`/`dimDiv` you have references to `allPlayers`. Consider that absolutely forbidden. Don't do it at all. One player should only care about and reference its own stuff. - avoid generating HTML with inline `onClick` or `onmouse*` attributes. Instead assign them with `addEventListener` that way you _can_ reference local, encapsulated functions. - with those ideas, try to get a completely encapsulated `Player` which only uses the arguments it receives (and it's own local or derived variable, of course) but not a single thing outside of it's scope. When you have that, having more than one in the same page should be straightforward.
You never know. They've discontinued [lots of products](https://en.wikipedia.org/wiki/Category:Discontinued_Yahoo!_services) in recent years; they can't _all_ have been in a state of disuse. Edit: [Better link.](https://en.wikipedia.org/wiki/List_of_Yahoo!-owned_sites_and_services#Closed.2Fdefunct_services)
True, they work best with the unmoded DOM, just as a way to distinguish parts of the UI. Though I would say updating the user is comes before separating content, I think we can be sufficient with i.e focus() but yea, it's still a bit of a nightmare sometimes. 
Thanks for the advice, I appreciate the time you're spending to help me out, I feel like I'm actually making progress again.
Well yes, boot2docker is the more widely used solution for the fact that you need a linux host vm on mac because as you said, mac doesnt support containers. Currently i use boot2docker; but i was just saying that vagrant could potentially give you more precise control over the host linux vm. Edit: Also using vagrant you can do certain types of orchestration to the host environment that really isnt possibls with boot2docker. 
That's because Chrome doesn't support arrays longer than 4294967295.
DevMountain for the win!
Should I have said that differently? I use boot2docker because it works for me.. but I'm commenting on why someone might use vagrant. Just because I dont require vagrant doesnt mean that someone might have a use for it in conjuction with docker for the reasons I've pointed out. 
Hey, just FYI it looks like CORS is now the way to handle this type of thing: http://www.html5rocks.com/en/tutorials/cors/ Basically it just lets servers make sure of where the cross-site requests are coming from. Though I'm not sure what stops a rogue client from lying about the request origin.
Absolutely. I pointed out the madness of isNaN once and someone accused me of not understanding the language. As if it's reasonable for "is not a number" to return false for so many values that are objectively not numbers. Or for typeof null to return "object". There are parts of the language that are broken. Plain and simple. 
Vagrant has a 'Docker Provisioner' The two are designed to co-exist. In my project I treat Vagrant as a 'local cloud instance' and use Ansible to provision Vagrant exactly like I would my Production Digital Ocean instance. 
No sorry, my comment was mangled somehow. What I meant to say was: &gt;Currently i use boot2docker
So you have multiple vagrant VMs each runing one docker image? That's redundant if on Linux and you can use boot2docker on windows and OS x. Maybe you can explain how you setup your digital ocean instances and why you need/use vagrant to match your production environment?
Low-level =/= strongly/statically typed!
Good point
When did I say anything about multiple Vagrant VMs? I have one Vagrant machine. It runs Multiple Docker containers. PosgresSQL, NGINX, REDIS, my custom app container. Why do I need/use vagrant to match my production environment? I'm developing locally. I have an Ansible play book that sets up the containers. I can run it against Vagrant or a DO instance and have the same setup.
if you were to write a byte you would write 0b00101001 probably... but regardless in terms of JS behavior an integer index, among other things, must be a string value that is a canonical numeric index string (ie. ToString(ToNumber(n)) === n).
Animating with CSS has better performance than trying to animate DOM with JavaScript. Yeah, you could just write the CSS for these interactions, but sometimes it is easier to write these types of interactions with JavaScript.
I think you are. CSS animations take advantage of the GPU in specific browsers and run smoother. If this lib can do the translation of definitions to CSS animation definitions - this is powerful. 
So you need vagrant because you use more than just docker containers correct? Otherwise you could just use boot2docker. While your use case shows a valuable use for the two technologies, the author of the article fails to do the same. 
Sure, absolutely right... it's still a little weird though... I mean, if CSS is as good as everyone likes to claim, why do we need to abstract away from it into JS land? Isn't that a tacit admission that, despite the clear benefits as you describe, that there's something about CSS that *isn't* working? Same kind of argument you could make against things like SASS and LESS and whatever we're supposed to be doing *this* week. BTW, just in case anyone thinks otherwise, my comments should *not* be taken as *any* sort of ding on this library... it actually looks pretty cool for what it's doing... I'm talking more general and meta here.
As opposed to something that doesn't make you want to die after you've used it for a few months to build something, ha In all seriousness, plenty of places are building Angular apps. So if you're concerned about your career, I'm sure you will be able to get jobs writing and maintaining Angular apps for a long time (in Javascript years). It's just so terrible, though.
This was my first reaction. The entire point of CSS animations is that they are declarative... Why use javascript to calculate the same result of predefining a Bezier curve? And it's in coffeescript, of course.
&gt; A *JavaScript* library... CoffeeScript, actually.
What differentiates your library from the standard DOM methods that do the same thing?
If you go with that kind of definition, the Unreal engine would also qualify even though it's written in C++. I'm always mildly annoyed by those ".js" projects which turn out to be CoffeeScript. I have zero interest in learning how to decipher CoffeeScript's quirky syntax.
How about creating your own "track" function. If lib has loaded, track passes it straight through to lib.track. If not, it adds that track event to a queue. When lib loads, process the queue.
That's what you get when you hire an intern, allow them to write the spec and the code and then send their "finished" idea to a production product. You can all thank Microsoft for this one. They brought in a summer intern who came up with the idea of Favicon's. Implemented the spec and the code and then left. After that all browsers implemented the thing in order to "keep up" and the rest is history.
Const declares a constant on the current block's scope, an object is not a scope so it doesn't work. Just like how var object.foo = 2 wouldn't work either. If you want an object with properties that can't be changed then either use Object.freeze or Object.defineProperty for each constant.
This doesn't work for the same reason that this doesn't work: var testObj = {}; var testObj.FOO = 1; // Syntax error You wouldn't use the var (or const) keyword again to define a property of an existing object. You would do something like this: const testObj = { FOO: 1 }; However, that doesn't protect the properties of the object - it just prevents anything else from redefining `testObj`. See line 31 of the code example here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const for more information. If you wanted to create a constant that was a namespaced collection of properties, you could do something like this: const testObj = { FOO: 1, BAR: 2 }; Object.freeze(testObj); 
 Yes i want an object with constant properties... I'm starting to get it ... thank you!
Yeah, it did look a weird to me.. i should have known! 
Angular 1.3 and 1.4 allows one way binding. Eh, it's a framework that once known, you can cover a serious amount of UI ground in very little time.
It's Microsofts fault that chrome and Firefox don't have any sanity checks on falcons? 
Yep, saw kitematic the other day. Good stuff. I wasnt saying I use vagrant with docker, only trying to suggest the OP might have had a reason. Kitematic still uses boot2docker as a VM behind the scenes. I definitely love how macs tend to have some of the cleanest and best made workflow apps. Tower for Git is a great example; I think by far the best gui for git.
Does this only happen to a node server? Can someone explain what is the implication? Can favicon.ico be replaced by other links? Thanks.
My favorite part of this whole thing is step 1: Install io.js (NodeJS works too)
Here's a defineProperty example which doesn't cause the entire object to be frozen in the freeze case. This lets you be more selective about what properties you want to be constant (read only). var testObj = {}; Object.defineProperty(testObj, 'FOO', { value: 1 }); console.log(testObj.FOO); // -&gt; 1 testObj.FOO = 2; console.log(testObj.FOO); // -&gt; 1 (function() { "use strict"; testObj.FOO = 2; // TYPEERROR! })(); testObj.BAR = 'a'; console.log(testObj.BAR); // -&gt; a testObj.BAR = 'b'; // not read-only; ok console.log(testObj.BAR); // -&gt; b
I like JS fairly well, but the 'in' operator should NOT run the prototype chain. There should have been a second operator that does that, but in almost 100% of cases, that is not what the programmer wants.
Something ontop of WebDriver.
Like Selenium? I know Selenium and know it can simulate user behaviors on browser. So that's enough for front-end testing? Thanks for your feedback.
I think component based UI is where everyone is headed because components are easier to reuse and compose, and that includes React and Web Components. That said, you can use React and Web Components within an Angular app.
I would like to hear more about what you mean by widgets. But here's my thoughts on your options: 1. Big Digital agencies hire outside shops to do a lot of their big web dev work. However, many have in house developers/design, and they get so do some really cool stuff([digital kitchen's page is worth a look](http://thisisdk.com/) -- but those positions are hard to get if you're not a veteran or the well-connected. So I'd do a bit more exploration before going down this path if you're just starting out. 1. News sites are going to be like Digital Agencies but probably but much more boring. They are driven by advertising and traffic stats, so a lot of their devs are tasked with making the ads more successful and the traffic greater. **If** you want to get involve with cool widgets and content you'd need to get some work with a new agency that wants to put out media assets ([Mike Bostock makes insane JS stuff for the NY Times](http://bost.ocks.org/mike/)). 1. SaaS: Now this is so broad by that I don't think you could go wrong. SaaS is basically another way of saying "We code things in exchange for money". I know SaaS folks here are cringing at that description, but that's not my point. Working for a SaaS company, OP, you are correct: It is a place where you can work with great developers. Not only that but many of the companies are young enough not to have miles of red tape preventing you from getting a shot at a cool opportunity you deserve. Regardless of the industry your apps are used in, it sounds like you're looking for a front-end developer role with a heavy emphasis on design. There are shit loads of companies that do this. There are a lot of web shops in every major city. They key is getting their attention! And, what do you have to offer them? Can you manipulate SVG's? Have you checked out [Famo.us](http://famous.org/)? If I told you to make me a sortable table in 2 hours, could you deliver? What if I said I wanted an interactive landing page prototype in 1 hour -- what could you give me? All of those your options would require you to do these things. Master them and have any of those jobs. **Start diving into the learning**. If you start confronting the nuances I think you'll have a much clearer idea of what you want to do. Master jQuery. Learn React or D3. Learn a CSS framework. Learn Functional and Object Oriented Programming. Go full stack. **Build a fucking toolbox of insane ninja coding weapons.** Then you will be a true weapon of design.
It is considered bad practice to use for..in on an array. This is why in ECMAScript 6 we have for..of which is better suited for the purpose.
you are right. fixed it.
Clicked the link, read the description, did a double take to check that I was on r/javascript. This is pretty cool! Definitely going to play around with it a bit.
Also, typescript/atscript. 
Funcunit is quite good. I have limited experience with it though. Sorry, on my phone so I can't provide a link. 
I think for a lot of people writing code in coffeescript or typescript is kind of like writing a subset of js, or a sister language. I don't look at it as a completely separate thing. If you don't like it or want to learn it, fine of course! But that shouldn't have any bearing on whether someone else uses it.
Huh? I just think it's kinda misleading to use a whatever**.js** project name if it isn't written in JS.
Your analogy is bad because the unreal engine wasn't written to be a JS library, it was the result of an awesome technology effort that allows portability between native code and js. This on the other hand is written for exactly that. The fact that its in coffeescript as the source language means literally nothing for the vast majority that will never touch the source and only include the library. For them it will be a js library and that alone.
People who say that probably don't know what they're talking about. For the record I built a large Angular app, and though I'd never do it again for reasons that I'll get to, it brought a lot of techniques to the table that were not dead ends at all. Take their Promise-based ajax library $http for example. Promises are now a native part of Javascript, and they greatly improve the maintainability of async operations. Learning to use them with Angular was worth the effort. Angular has one of the most unwieldy module systems you could imagine, with different methods for Services, Factories, Constants, etc. But modular design is a really good thing. That's why Node.js has CommonJS modules, and ES6 is bringing native modules to Javascript. They are both much easier to use, mainly because Angular's module system is an IoC system which facilitates dependency injection and unit testing. Those are also really great things that you *should* use if you can handle the complexity, but you don't have to have Angular to get them. I'd bet that the people that you're hearing are just talking about two-way data binding. Miško Hevery, the head Angular developer even admitted that two-way data-binding was "kind of an antipattern". Everyone latched onto that when they were looking for a reason to bail on Angular and convince their bosses to refactor their apps in React. Now it's true that Angular's implementation of data-binding sucks. Dirty checking doesn't perform as well as Knockout, or Ember's Observables and the digest cycle often misses updates to the model meaning you have to manually apply the changes. Half the point of data-binding is that changes to data are automatically reflected in the view, so that's a pretty big fail. But I don't agree that two-way data-binding is an anti-pattern. I think it's a footgun. When data can flow back and forth between the View and Model and watchers or Computed properties can cause side-effects it makes it easy to create cascades of updates. That's actually a feature, and it facilitates reactive data-flows which are a good thing, but In Angular and Knockout these changes can trigger lots of directives or bindings which can thrash the DOM. It's possible to mitigate all these problems, but you have to be careful. React just makes it so you don't have to be careful. You can be as wreckless as you like with your Model, and React will always do the least amount of work possible. React batches DOM manipulations together and performs them all at once. It's worth noting that you can do two-way data-binding in React too, you just have to use a plugin. Like I said I never want to touch an Angular app again, but you can't dismiss it entirely just because it has some flaws. Every new framework benefits from the principles that Angular popularized.
Chrome os hides downloads from the file browser until they are complete. Chrome os distinguishes such files by adding .crdownload to the end of them. Chrome os allows downloaded files to end in .crdownload. You can use a javascript trick to download a 300mb+* file generated client side in under a second without user interaction.
Yups I'm learning Javascript because of Web Audio API, so I tend to post things related to that. I'm actually a sound designer..not a developer. 
It's not really fair to compare the world of digital musicians to that of open source JS programmers. Musicians often don't mind paying something like $50 for modules in their software. It's a rather common standard within that industry and quite a lot of musicians have no interest in programming. They just want to make music. &gt;Not even that, if it's open source, anyone can just re-distribute it. That's why commercial software isn't open source. It's easy to prevent this with correct licensing. It doesn't seem like a license has been added though. There's also no reason open source software can't be commercial too. 
Thanks a lot!
We use jasmine for our unit tests. It can simulate ajax requests, timing, and a lot of other stuff. I can't simulate events as of yet, but you can do those yourself. I don't know how well it works with React, though.
Angular 1.x is a great prototyping tool that runs into a lot of quirks when moving to production. As it was originally designed to be a Google prototyping tool, it makes sense. You want to rapidly spin up a new concept? Awesome, easy. Angular 2 looks to solve some of the quirks that are found in 1.x, while also moving to a more modern architecture and methodologies. Due to this, there's a lot of flack from the fact that many ideas from 1.x are being ditched. Time will tell if it will pay off, but yes it is a huge evolutionary step. I prefer to reserve judgement until they are in a somewhat ready state for release. 
is there major compatibility issues between 4.1 and 5.0 ? i cant find anything in the release notes
Do the jQuery features integrate with one another that provides value over using separate libs for each of jQuery's main features?(ajax/DOM/events/animation) I already like SuperAgent for ajax, and greensock for animations. Though I've not come across anything as compelling for working with the DOM and events yet. File size doesn't bother much(greensock is quite large for animation lib), I'm more interested in what it's like working with the lib. Would you suggest I still use JQuery? Or do you have experience with smaller libs(as in isolated functionality not file size) that focus on the DOM/events?
Could you please demonstrate creating another post?
Notice that recursive functions are rare in the popular programming languages. For loops, while loops, etc are often enough. To really understand a recursive function you first need to find a problem that fits them well. A common problem that fits them well is generating a set of menus with submenus which themselves can have other submenus, in a tree. It's the pattern you find in the tree of directories in your hard disk. So to start off you would need to collect some sample data in a tree and then try to navigate that with a recursive function. I will provide you with a sample here: var menus = [ "File", [ "Open", [], "Save", [], "Save as...", [ ".jpg", [], ".png", [] ] ], "Edit", [ "Copy", [], "Paste", [] ] ]; function printMenus(indentSpace, menu) { for (var i = 0; i &lt; menu.length; i += 2) { console.log(indentSpace + " " + menu[i]); printMenus(indentSpace + "*", menu[i + 1]); } } printMenus("", menus); I loaded this sample on JSBin for you to play with: http://jsbin.com/biqujocuqe/edit?js,console Your original sample is not realistic. It's like replacing a for loop with a recursive function instead. That's possible, but not a good idea per se. Actual examples of using recursive functions are creating menus, browsing directories and parsing files like programming languages do.
Honestly, this reply helped me A LOT! :) Especially your advice with adding console.log in my code. Really, thank you so much for your patience and answer. Thank you thank you thank you! :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Euclidean algorithm**](https://en.wikipedia.org/wiki/Euclidean%20algorithm): [](#sfw) --- &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), the __Euclidean algorithm__ [a], or __Euclid's algorithm__, is an efficient method for computing the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) (GCD) of two numbers, the largest number that divides both of them without leaving a [remainder](https://en.wikipedia.org/wiki/Remainder). It is named after the ancient Greek [mathematician](https://en.wikipedia.org/wiki/Mathematician) [Euclid](https://en.wikipedia.org/wiki/Euclid), who first described it in [Euclid's *Elements*](https://en.wikipedia.org/wiki/Euclid%27s_Elements) (c. 300 BC). It is an example of an *[algorithm](https://en.wikipedia.org/wiki/Algorithm)*, a step-by-step procedure for performing a calculation according to well-defined rules, and is one of the oldest numerical algorithms in common use. It can be used to reduce [fractions](https://en.wikipedia.org/wiki/Fraction_(mathematics\)) to their [simplest form](https://en.wikipedia.org/wiki/Irreducible_fraction), and is a part of many other number-theoretic and cryptographic calculations. &gt;==== &gt;[**Image from article**](https://i.imgur.com/kgLKj3l.png) [^(i)](https://commons.wikimedia.org/wiki/File:Euclid%27s_algorithm_Book_VII_Proposition_2_3.png) --- ^Relevant: [^Extended ^Euclidean ^algorithm](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm) ^| [^Lehmer's ^GCD ^algorithm](https://en.wikipedia.org/wiki/Lehmer%27s_GCD_algorithm) ^| [^Binary ^GCD ^algorithm](https://en.wikipedia.org/wiki/Binary_GCD_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cs8akut) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cs8akut)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
Actually, the example is pretty realistic. Recursive algorithms for calculating the GCD are not only common but efficient.
That's a great answer. One question: Doesn't Ember also have two way data binding? Is it different/better than Angular's?
How about write them in JavaScript then copy them to a CSS file so you're not bringing in yet another JS library
Try [Mozilla Developer Network](https://developer.mozilla.org/en-US/). 
For recursion... you need a function which calls itself. So, to make that useful, this function must return some value, it must expect at least one value, and this value is either increased or decreased and passed to the next invocation. And you do of course need some condition which checks that increased/decreased value, because you want that it stops somewhere. The go-to example is factorial. 5! = 5 \* 4 \* 3 \* 2 \* 1 = 120. function factorial(n) { if (n &lt; 2) { return 1; } return n * factorial(n - 1); } console.log(factorial(5)); // 120 !0 and !1 are 1. And !n is the same as n \* !(n-1). It goes down the rabbit hole (call-stack) and once it hits that end-condition it comes back up. What's !5? It's 5 * !4 What's !4? It's 4 * !3 What's !3? It's 3 * !2 What's !2? It's 2 * !1 What's !1? It's 1 &lt;- A-ha! So, !2 is 2 * 1 = 2 So, !3 is 3 * 2 = 6 So, !4 is 4 * 6 = 24 So, !5 is 5 * 24 = 120 And we're back at the surface with the end result of 120. It's just like A(B(C())). Before A can do something, it needs the result of B(C()). Before B can do something, it needs the result of C(). Recursion is exactly the same thing except that the nesting is done by the function itself.
I'm not claiming to be an expert here either, but it definitely does. There's only convention stopping you from editing a model in a view in response to an action. They're calling their unidirectional data flow philosophy "data down, actions up" to indicate you should instead pass notifications of user interaction upwards (with actions) to the owner of the data to do the modification. More information [in a blog post here](http://www.samselikoff.com/blog/data-down-actions-up).
For a second, I thought they were describing my career.
I would like to know that too. So my best take on it is to search for the libraries/modules/components/technologies that enable those "ultra light weight widgets" and then check everyone who is working on them or using them and try to get in touch with those people. They might know whom to ask and if you contribute to those projects, you might naturally get in touch with them. I dont know if you will like it, but checkout * http://github.com/atomify/atomify * There is a short tutorial you could follow and examine the code * http://serapath.de/atomify-examples/#/ I'm sorry for the slightly distracting background images - i'll fix that in the future when i have time. Thought it would make it interesting, but got feedback that its not. so a pull request to change that would be welcome :-) 
could you do something like: // header var queue = window.queue || []; queue.push("User on register pages."); // footer class Queue { constructor(initial) { this.initial = initial; // ... }, push(val) { // insert tracking code // lib.track(val) probably }, onLoad() { this.initial.forEach(val =&gt; this.push(val)); } } window.queue = new Queue(window.queue || [])
Ahh well, at least a decent company bought the domain :).
Wonder how much that domain name cost 
So, I'd like to try and grab some food later... should I just eat my cat instead? The police might stop me and shoot me because I'm black. I might get into a car accident. Why did the IRS not receive my tax return last year? I sent it. What if I get sick later, should I do risk management on that as well? What if I take a shit and the toilet gets clogged? Son of a bitch, here I was all my life trusting the toilet to do it's fucking job. 
Embedding a youtube video with controls=0 and autoplay=1 is shitty.
for DOM manipulation and traversal, jQuery's API is far better than the native DOM API. Even as the DOM API improves, jquery is still far more intuitive. And as the DOM API improves, so too will the underlining implementations in jQuery. $('#foo') is going to be slower than document.getElementById('foo'), but unless you're doing this hundreds of times a second for some reason, it's a performance hit I'm willing to live with for the cleaner API.
Those plebs, nothing beats my sweet vanilla JS.
We must learn from history else we are doomed to repeat it. ;-)
Really nice, I'll have to see about a realtime/low latency kernel in linux to fix the lag issues on my end. source: https://github.com/mmckegg/loop-drop-app
Ha, no problem. I wrote this code for my own personal use, with the thought in the back of my mind that someday, maybe it would be useful for others and I could make it presentable then. But hey, it's up on GitHub and Pipes is shutting down. I figured there's no harm in sharing the link if somebody might find it useful.
lol
I doubt the library works that way.
Little Bobby Tables, is that you?
I too am curious.
you're missing out on that high fructose syntactic syrup
Everything is viewed with contempt in Portland?
&gt; JavaScript also has built-in features, called functions. In order to *call* a function, ... If I'm brand new to JS/programming, do I know or understand what "calling" is? Seems like a word we might take for granted as programmers. "Use" might be a better word. Or explaining what function invocation actually does, then explain calling in relation to that.
The dream is alive.
So, it's cool and all that this is, er, somewhat possible. But isn't it rather ridiculous to be asking $50 for what is essentially just a toy, when one can get [Reaper](http://www.reaper.fm) for $60, a full featured DAW with support for VST/RTAS/AU plugins, cross platform, ASIO support for windows, and everything else you expect from a DAW?
&gt; But we also get into a strange grey area when we start selling open source software. If you want to sell a codebase that anyone is contributing to, you better have some pretty rigorous code review, and some pretty rigorous quality assurance, none of which seems evident here. There isn't any continuous integration, there aren't even any tests — hell, there isn't even any linting. Sure. But that's the same for all software you purchase. In open source software, you have the insight to actually assert whether this is a product you would trust. My point is that software can be: 1. Proprietary and commercial. 2. Proprietary and non-commercial. 3. Open source and commercial. 4. Open source and non-commercial. I don't see why you can't have a commercial product where the source code is opened for customers to evaluate and perhaps even contribute to the product, even if they still pay for it. Hell, I'd love some of our software suppliers to open source just so we could help point out bugs. That doesn't mean we wouldn't still pay for it. Does open source and commercial make sense from a business perspective? Perhaps. Perhaps not. But I think it's up to the creator to decide how the product should be used and/or paid for.
Calling a function is pretty much the same as using it, in a sense. I would generally refer to "use" when talking about the creation of a function. If you are repeating the same actions over and over, you would use a function, containing those actions, then call it to invoke said actions. 
No Sublime? I use it daily on a large node project and it blows these other options out of the water.
Estimated $39k. http://www.siteprice.org/website-worth/www.javascript.com
That was definitely the first thing I thought as well!
No mention of Webstorm? Webstorm has great integrated Node debugging and has most other features the author was testing for.
I love IntelliJ, and WebStorm is basically such with just web integrations. I'm far too biased to write a review on it.
Note this bug for Atom - [ 0.209.0 doesn't save session #7231 ](https://github.com/atom/atom/issues/7231) which is probably the reason why you couldn't get it to remember the project you where working on. It will be fixed in 0.210.
I would rather live in a gulag than anywhere in Florida.
Hi /u/qooxdoo, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just `qooxdoo.org`. Thanks for your understanding. domain submitted from|count|% :-|-:|-: [news.qooxdoo.org](/search?q=%28and+site%3A%27news.qooxdoo.org%27+author%3A%27qooxdoo%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|11|100%
This is the issue I've had with nearly all online testing apps
Probably a joke about the weather
Your JSFiddle seems to be working ok for me both on Firefox and Chrome. Not in IE, but that's to be expected as IE does not support `setDragImage`.
But if you add a find then you can chain.... http://plnkr.co/edit/2L5tngEyA1OZPFLVAVCj?p=preview
Codecademy does this too. I think it's because they aren't checking your result they're checking your code without running it like Our code = a Their code = b If a = b return pass If a != b return fail (Obviously not in JavaScript or any particular syntax)
Not a .io domain? Ugh get it away from me! /s
&gt; anywhere in the southeast united states FTFY edit: Excluding New Orleans
Does this too? I think they don't do it, like you explained you can get through different ways to your goal.
I haven't used codeschool but I have used codecademy and they do this. if your code doesn't match theirs 100% regardless of result you fail the lesson.
I've used codecademy, and it isn't as strict as codeschool, barely had any problems.
I don't think you get to pick what something someone else created is worth. Plus this is full of open source goodness, which reaper isn't apparently https://www.gearslutz.com/board/q-justin-frankel-designer-reaper/118545-why-not-open-source-reaper.html
We use AngularJS's jqLite for our projects and actively avoid using jQuery because of the overhead it creates (you can basically do anything with jqLite if you know the API well enough).
Hipster capital... "I liked JavaScript before it was cool. JS sounds better when you play it on Netscape Navigator."
This is not a problem with jquery though. for (var i = 0; i &lt; 10; i++) { var el = document.querySelector('#foo div .someclass ul .someulclass li .someliclass'); el.innerHTML = 'Now Equals ' + i; } It's a problem with programmers ;)
So how is this different than the userstyles extension?
&gt; I don't think you get to pick what something someone else created is worth. Well no. Anyone can assign any face value to anything they want to sell. For example, [someone is selling prints of photos he did not take, for $90k](http://www.dailymail.co.uk/femail/article-3102977/Woman-Instagram-photos-stolen-controversial-artist-Richard-Prince-sold-90-000-hits-selling-identical-prints-just-90.html). I am well within reason to point out that these prints are not worth $90k. Someone sold an app called [I am Rich](https://en.wikipedia.org/wiki/I_Am_Rich) for $999.99. I am also well within reason to point out that an app that does nothing, is not worth a thousand dollars. Granted, those two examples are quite different from LoopJS. LoopJS actually does something, and as a form of academic Javascript, is an interesting project. And being open source, sure it's a nice icing on the cake. But that won't stop me from criticizing the author's decision to assign a face value of $50 to a tool that is, by any comparison, far and away from matching the features of Reaper. Why? Because like my other two examples, there just isn't that much justification for such a high face value.
Totally agree with you - we're only used to the terms function, method, property because we've dealt with them for a long time. I tried to teach a friend who learnt english later in life to program and we had a really hard time getting a good translation for function - mainly because it's a mathematical concept and not natural language.
Definitely something we try to fix when we see it -- either by making the instructions more explicit in what's required, or change how we test the entered code. Do you remember any specific challenges (or courses) that you had this issue in? Be curious to know to focus a bit more attention on making them better!
Yep! The [Try](https://www.javascript.com/try) page is a super small Angular app for running a series of challenges, while the homepage is raw JavaScript.
I did, that's the first one on there.
bottom line on difference between US and Europe: US : more disposable income, less financial security EU : less disposable income, more financial security US pay is definitely higher for equivalent position, and sales tax (like VAT) is low compared to EU. so if you want to have things, its better to be in the US. but in the US its left up to the individual to watch out for his own security, for the most part. especially healthcare. in the EU, pay is way less for equivalent position, but healthcare and retirement are more or less guaranteed. VAT tax is very high compared to sales tax in the US. 
I think you missed my point ;) I was just trying to say that jQuery and the modern DOM API both have the same problem. jQuery just makes it look nicer: $('.some .deep .long .css .selector').each(function() {}); as far as I'm aware (and please correct me if I'm wrong), is functionality equivalent to doing document.querySelectorAll('.some .deep .long .css .selector').forEach(function() {}); Assuming that document.querySelectorAll() is available in the environment the code is run in. I don't think jQuery makes this problem any worse than it already is, and I've seen this problem many times in code that uses DOM APIs for dealing with XML documents. People who execute the same xpath query needlessly in a loop. Hell, some people opt to use DOM and Xpath to traverse very large XML documents because it was easier than using a much more efficient event-based parser like SAX. Don't fault the hammer because an idiot used it to drive in a screw ;)
I'm confused as to how this is a big problem Is this some kind of exploit? Is there a standard somewhere that says favicon can not be larger than x number of bytes and browsers are not respecting it? What exactly is the worst case scenario here? A site causes your browser to crash and you never visit it again?
Is there a repo online to view the source code?
Right, more of a high fructose sirup then. Although sometimes you need that goddam glucose when you have to get shit done on time!
Interesting issues wrapped in clickbait rhetoric. I hate it. I just hate those alarming introductions and "well it's not actually so bad" disclaimers at the end. 
"Estimated". It's not made to be accurate. It's made to give a ballpark figure. Obviously a thing is only worth what people pay for it. These types of sites show how much it is roughly worth (to advertisers, mostly) based on traffic patterns. It doesn't show how much someone has paid or will pay for it, obviously.
It's OK, but to be honest, the main reason it's on there is that I'm not that active on Jamendo :P
There wasn't really a back-up for my requirements, which was to be cheap (no backend) and easy - those two being more important than being 100% sure this would work ad infinitum, since it's just a hobby project with virtually zero visitors. That said, I do think it was a reasonable assumption that Pipes wouldn't be pulled in a day. Which is not, so theoretically I should have enough time to fix this. (Although in practice, this'll probably be too low on my priority list :)
Yes, I still use it. Typically my other dependencies dwarf jQuery to such an extent that worrying about the difference in download time between it and the parts of it I need isn't worthwhile. The rest of the time I can usually structure the page such that it is still reasonably usable until jQuery loads. I get the point behind this "hand crafted artisanal bespoke JavaScript" movement, but I think it goes way too damned far. How is just having jQuery worse than using six different libraries with their own implementations of 1/5th of jQuery?
No you missed his point. Failing to cache elements is a mistake that can easily be made both with jquery and DOM.
So ... Try Mozilla Developer Network?
Pretty sure that's the point. The "breaking changes" are in only the most esoteric of cases, that the author is actually applauding the committees for their diligence on the subject.
And why view MDN on MDN when you can view the MDN on codeschool?
Benchmark it [here](http://jsperf.com/query-vs-array-map). !! Note that this will download a 12mb JSON file, so don't do it if you have limited bandwidth!
What overhead besides file size?
I completed all of the JavaScript path training, and yes that's a big issue. Thankfully it's diminished by the great help I've got on the forums. Almost every exercise you get stuck on has an answer on the forums. I also found out about the codeschool forums way too late, so there's that. 
When you're only using a jQuery for one it's features and there is an alternative library better suited for the task? jQuery's promises aren't implemented properly either, though I've heard this'll be fixed with 3.0(not previously due to backwards compatibility issues). Usually though it's hard to argue against jQuery with it's community/documentation, active development, etc....it's doesn't have the same sort of risks that you could find with it's alternatives.
They're probably linting the code using jshint defaults. It yells at you for using double quotes, forcing you to use single quotes instead. Edit: autocorrect is evil...
Why not test everything based on assertions like freecodecamp and codewars.
Yep! That's what we do too. All code is run in it's native environment and evaluated. We do a ton of mocking and stubbing, code tree analysis, putting in debuggers and stepping through code and inspecting -- all kinds of neat stuff. If you're curious how it works behind the scenes for JavaScript courses, checkout [Abecedary](http://codeschool.github.io/abecedary/example/), which is our open source library we use based around Mocha (although this only works for languages we can run with JavaScript, so not Objective C, Ruby, R, etc).
Sounds a bit like a really weird homework assignment :/ 
&gt; This code, published in 2009 to a pop singer’s fan site, describes a program that is 100% compliant with the ECMAScript 5 standard. Give us teh website or OP is FOS.
Thanks for this! I've just pushed your changes (after ES6ifying them a little)
&gt; if (i === current === delete function() {}.length) { lolwut &gt; Across the web, code that uses the expression `delete function() {}.length` instead of the literal `false` will suddenly start behaving in surprising ways. So, just this one example then? I don't think anyone has a problem with that.
I would like to extend a huge thank you to you! In the morning I will have to review, and figure out the code you modified with your notes, so that I will know exactly what to do. I would again like to say thank you for your time and effort in helping me to expand my knowledge!
I'm seeing a lot of woosh in this thread.
Why do you say you're "far too biased"? I have to agree that it seems like an incomplete list without any JetBrains products.
Does anyone know what this is about, I refuse to click link only posts. especially to ones going to sites like "blog.peer5.com" Is it just click bait rubbish?
In a language with tail-end recursion elimination, recursion is just as performant and often much cleaner. To say it isn't used is not exactly accurate; it's the easiest way to solve a lot of hard problems and makes things like memorization (check out the memorizing y-combinator for a neat example) trivial. 
How do people feel about the amount of code being demonstrated here? To me it seems absurd, I've seen game engines written in fewer lines. Is this really "the Angular way"? I'm not an Angular user, so I really have no idea why displaying an animated image and then removing it is so complicated.
It's about why JavaScript is used to deliver videos (content?) to browsers, the title is really misleading.
I think plain, simple code is easier to read and collaborate than any framework specified code. For the template thing, I meant frameworks tend to simplify DOM changes to one straight forward workflow: any data change goes through the template first before reaching the DOM. This approach works fine in many cases, but not all. The problem with frameworks is sometime you find that you're trapped with their way of doing things. In my projects, I use Handlebars to render HTML for the first time, then use jQuery to make changes. I use stuff like fastDom to optimize redrawing performance. This simple approach give me maximum control over my DOM. 
Dos anyone know about this Adaptive bit rate stuff? Can I upload several HTML5 videos of different bitrates and have the browser show the right one for the user based on their bandwidth? Or swap as necessary?
Usually used to indicate something "private", so something that the author doesn't intend to be called directly by library users.
It doesn't work automatically like that. The video player has to be much more intelligent. It needs to be able to measure it's own bandwidth and select a higher or lower bitrate video to download. The video file also has to be segmented into many short clips of different bitrates, that way, the bitrate can be changed during playback by downloading a lower/higher bitrate segment after the current one finished playing.
I'm not sure that's 100% accurate. I've noticed if I upload a long video... I can skip ahead and start playing a part of the video it's not even close to reaching in the buffer yet. It works great, no need to segment a video into shorter clips to start playing a video at a different point.
Not sure if this is the case, but theres an open source library called lodash that does a shitton of useful things that native javascript does not. Things like _.assign({ 'a': 1 }, { 'b': 2 }, { 'c': 3 }); //{ 'a': 1, 'b': 2, 'c': 3 } [lodash site](https://lodash.com/) Keep in mind that valid names in javascript can be $ or _ and some other weird ones. Its just like any other function or object, just has a symbol for the name. jQuery ($) is a good example of that. I mention it because people sometimes think a symbol instead of a name means something when it dosent. What radhruin refers to is the double underscore best practice found in C / java, and hes right, but not complete.
It's too mark certain functions as private or internal generaly helper functions
No, since Internet explorer became sane, jquery started to decline in popularity quite fast.
I personally avoid it as much as I can. I prefer functionality that creates a map of the input option to the expected result and use that directly: function strUtil(str) { return str + ', etc.'; } function processString(str) { switch (str) { case 'abc': return 'some value'; case 'def': return 'something else'; default: return strUtil(str); } Instead of this, I prefer: var STR_MAP = { abc: 'some value', def: 'something else', default: function strUtil(str) { return str + ', etc.'; } }; function processString(str) { _.result(STR_MAP, str, STR_MAP.default(str)); } where I use [_.result](http://lodash.com/docs#result)
Why do you think this is a job for a plugin?
There are 3 competing structures for branching code. Maybe even a 4th. The if-else if-else combination is good for when you need too much flexibility and are still within a reasonable number of statements. The switch statement used to be more important in lower level languages where they would be optimized to quick memory jumps. But recently with higher level languages, they haven't been as optimized for. I don't know how optimized it is in JavaScript, but in asm.js they had to optimized it like in the lower level languages because in asm.js they use it a lot more. Perhaps those improvements will show up in normal JavaScript code depending on heuristics before long. :-P Also in OOP languages the practice seems to discourage the use of switches and favor the use of smaller functions instead. But the combination of switch + functions is also a possibility. One of the reasons they cite for preferring functions is that it could be good for optimization opportunities. Another alternative is simply using a Hash/Map/Object to dispatch the calls to the functions. Or even a List/Array if that's good enough. Since List/Arrays can be better optimized it could produce faster code. And yet another alternative could be passing the closure/function around via a variable. Not sure how well it compares. The break down is: use if statements if say you have at most 10 comparisons. If you have more, maybe an Array/List could be better. Use switch statements only if you have to. It tends to be more verbose and error prone. Maybe benchmark and decide. :-P
Javascript.com should point to Mozilla Developer Network. Hope Codeschool can turn Javascript.com in to a valuable resource for developers.
&gt; the issue is asking for $50 for something that is clearly not worth $50. Not worth $50 *to you*. Someone might use it to make something worth $200, or record a really popular album? It's a good bit of (open source!) software which probably took a lot more than 100 hours to make. Don't be a dick. 
Actually it's a common convention to prefix a property with a single underscore. This usually implies that it's not part of the public API and therefore can change unannounced. Double underscores are usually reserved for non-standard vendor functions like `__proto__`. This is true of C also, I believe.
When writing this post I attempted to talk about each of the products without having a biased opinion. I'll consider writing about it Thursday however.
I've also been playing around with it, if you get stuck on anything feel free to shoot me a msg and I'll try my best to help out.
Only in Flux stores, pretty much. 
Not only that by they drop the word string out of nowhere too. Do non-programmers know that a string is supposed to mean a sequence of characters?
yo dawg...
I use switch/case whenever I would otherwise get a structure that looks like: if (varname === 'xxx') { // ... } else if (varname === 'yyy') { // ... } else if (varname === 'zzz') { // ... } /* etc */ It doesn't happen a lot, but when it does, it makes zero sense to me to abstract that out into another pattern. Switch/case is simply the most readable alternative to me. 
Hi, thanks for your feedback. Albeit the project's own site is the most authoritative source of information, will try to use a variety of sources for any future posts.
Please see the announcement (blog post), particularly the website section. The qx.Website widgets now have a different and uniform internal structure, in such a way that only a single DOM root element is exposed. That's only relevant for custom widget creators. If you don't leverage that area, you might not run into compatibility issues between 4.1 and 5.0. HTH.
Thanks for the suggestion, but it doesn't work unfortunately.
When you return a value, the code below the return call will not be executed. Just a hint.
Yeah I am still having problems trying to run it. Says error when I visit output rss page.
Yes, I'm aware of that. But in the case of a function definition, [function hoisting](http://elegantcode.com/2011/03/24/basic-javascript-part-12-function-hoisting/) will effectively put those functions above the return statement at run time. That's why the pattern above works. Of course, you need to be careful not to put any expressions (such as variable assignments) below the return statement, as you mention. 
When i do table layouts
i use it quite a lot in event-handlers, where i switch on the event-type.
Gotcha, you're right! Thanks for posting this link :) You learn something new every day.
I'd go further and say that tests should assert one thing per "it" you could have a nested describe "adding two numbers", then a separate it for each assertion, if your test above fails, you know something has failed about the two numbers but it's sometimes not clear from test output what exactly has went wrong. A single assert per it will tell you exactly what's went wrong with your add function. describe("A calculator", function() { describe("adding two numbers", function() { it("should add two positve numbers", function() { expect(add(5, 3)).toBe(8); }); it("should add a positive and a negative number", function() { expect(add(5, -3)).toBe(2); }); it("should add two negative numbers", function() { expect(add(-5, -3)).toBe(-8); }); it("should add 0 to 0", function() { expect(add(0, 0)).toBe(0); }); }); }); 
Yes you can. Wrote a blog about how to do it here: http://blog.wirewax.com/building-a-media-source-html5-player-with-adaptive-streaming-25/ That's exactly what we're doing, but its only prototype stuff so far. A little bit bleeding edge due to browser support.
Certainly a good improvement.
So you created a simple way to obfuscate idiomatic react? Personally I would still wrongly prefer JSX harmony style react components any day. I don't see how this really improves encapsulation at all.
If you're really interested in going the TDD route, don't start by writing code. Start by writing a spec that describes, in plain English, exactly what you want the code to do. Take an add() example, you'd start by writing something like: &gt; This function should take two numbers as arguments, add &gt; them together and return the resulting sum. From that statement, you'd write your tests using Jasmine, Mocha, Karma...any of the frameworks that other people are looking to. You'd want to make sure you have tests to cover all the types of inputs you could send to the function. What happens when you pass in more than two arguments? What happens if you pass in stings of letters instead of numbers? Once your tests are written, run it and watch as all your tests fail. **Then** you go start writing your the code that implements your spec. As you add features, exception handlers, etc. you'll eventually get to the point where all the tests are passing. Then you move on to the next part if your spec, and start all over again.
dont forget e2e testing. protractor is a popular choice. i learn fast by examples. copy/paste until you get it.
Unless I'm mistaken, they're missing out a pretty massive downside in the conclusion of the article - what happens without javascript? Oh, it breaks.
Thanks much!
I wonder what Oracle thinks about that, being the owners of the JavaScript trademark
* You could say that today's bundling support all kinds of content. Just look at webpack (love it). Bundling of non-js files is nothing new, ASP.net has been supporting it for years (image spritesheets, css, typescript, to name a few). * http2 is not bundling, Just saves a round trip, but there's more overhead than that in having all your js separated. * the problem is between the chair and the keyboard in that case.
yep, I've been looking for a good course that walks through all best practices for testing websites/web apps but not just unit testing. From unit testing to integration testing and acceptance testing. Different frameworks (mocha, jasmine, QUnit) , different tools, phantomJS vs selenium (pros and cons), best practices in cross browser testing and cross device testing. I've a good lot of experience in these areas but it's mostly just picked up on the job, I'd like to reinforce what I know or find out if there are better ways to tackle these areas. 
Well spotted , I just quickly copied the tests above as an example, will change now 
First of all, tests are pretty much used on back-ends but not enough on front-ends, because most of the time it is hard to test if a UI is acting the way it should or not through unit testing. It is easier to test, for example, if calling a webservice with a specific parameter returns the value you expect, or if a complex calculation should return a specific value. Although javascript nowadays can be used for back-ends, and front-ends have more and more intelligence than it used to, it is useful to write tests for checking that there are no regressions when changing some part of your code, and checking that nothing has broken since the code changed. If your code contains classes or manipulates json data, for example, it is easy to write a few mockup data json objects which you will pass to functions to check that they return what you expect, that there are no exceptions, and that nothing breaks. Jasmine is pretty simple and I would suggest you start off there. The documentation contains enough very simple tests which you could get inspired to get started. Some tip: in some projects you can even write the tests to describe the behavior you expect before writing the actual code that does the job.
This is my dream setup, but I have never in the last 17 years of development, knew what I was building enough to start with specs. 
DEBOUNCE DEBOUNCE DEBOUNCE DEBOUNCE DEBOUNCE DEBOUNCE (https://alexsexton.com/blog/2015/02/the-15-commandments-of-front-end-performance/)
Parts of the language that are sub optimal are not broken. True, they are not perfect, but they do work, they are not broken. The English language have a lot of illogical things. Imagine if people start using patched versions of it. That would be very impractical.
...and not stating once JSLint, or even JSHint ?
If the previous responses haven't already demonstrated, be prepared to be confused. Its not as easy as you might think. Writing a couple of tests? How hard can that be, right? There's testing libraries to consider, new APIs to learn, figuring out ways to integrate testing into your workflow, this whole "Test Driven Development" process... I think a good place to start without having to do hardly any work is http://www.codewars.com/. If you're not familiar, they have code challenges - often testing your knowledge in, and helping you further explore, the language - that are (especially early on) already set up with test cases to help you see that your code passes the challenge presented. This effectively is TDD, but the setup is all there in place and you just need to throw a little code in your browser to make it all happen. This will help you see not only how tests are written, but the benefits of having them when writing your own code. Once you pop off a few of those and get a feel for it, start exploring some of the other resources already (and to be) mentioned in this thread.
It's can be difficult to set up the tests, and how you write them differ a lot depending on frameworks your using (you can't write tests for av Angular app in the same way as in a react app. My advice is to look up Yeoman. If, for instance you want to write tests in an Angular app, you can start by generating such an app by Yeoman. You will then have the testing frameworks set up together with some example tests that you can run. 
True. I've used the word 'broken' repeatedly partly for narrative effect. Some of the things in that list are merely bad. But async support, core datatypes and the default rendering model are all so bad that I stand by saying they're broken. The are so bad, and the alternative approaches so much better, that the world would be a better place if we threw them into the box marked GOTO.
oops, meant that as a reply to the parent comment... @domainkiller: TDD done properly doesn't require you know upfront what you're building. In fact, I'd say it makes it much easier to change your code as your idea of what you're trying to do evolves. TDD tends to enforce small units of testable and maintainable code. These are easy to move around and change. Its hard to do well mind you. But when you get it right it feels really good. You can often completely change what a code base does in small chunks by small cycles of modifying a unit test, then changing the code. Also, I can no longer imagine refactoring without it. It pretty much gives you a button with near-instant feedback to make sure you're not breaking anything. All this being said, I am also a big advocate of rapid prototypes when the coding you're doing is super-exploratory. The only catch is you have to throw this code away and start over with TDD.
This works: var seconds = 360; setInterval(function() { seconds--; renderTime("drag", 0, 0, drag, seconds) }, 1000); function renderTime(name, x, y, something, time) { console.log(time); }
Web workers can do ajax while being limited to a specific number of threads. 
You need to set the prompt to a variable like this: var userInput = prompt("Please enter something"); Then call the variable in your function. In this case, I'm just logging the variable to the JavaScript console which you can view in your browsers developer tools: function yourFunction(){ console.log(userInput); }; Hopefully my formatting is okay, I wrote this on my phone.
No problem! I'm far from an expert, so I was glad to finally be able to answer a question.
There is a node school workshop that introduces test writing: http://nodeschool.io/#test-anything
It's pretty complicated to get this right. I recommend using a library or at least studying a library to see how it's done. This is what I use: https://github.com/janpaepke/ScrollMagic/blob/master/scrollmagic/uncompressed/ScrollMagic.js Also If you need to support iOS You should use [iScroll](http://iscrolljs.com/). iOS 8 has *more frequent* triggering of scroll events, but still not frequent enough to do nice parallax effects and such. Really though I would recommend not doing scroll-based animations unless your client or designers absolutely demand it. It's kind of a tired gimmick at this point, and it still takes a lot of work to execute properly, even with the help of above libraries.
I agree with your comment about testing of DOM manipulation being outside the scope of a unit test, and if I were testing your first example I'd do something like this instead: describe("My colorful background", function() { it("should become red", function() { spyOn($("body"), "css"); // Spying on this would actually be more complicated makeBgRed(); expect($("body").css).toHaveBeenCalledWith("background-color", "red"); }); });
Stylish just associates stylesheets with urls, so all the user has to do is write standard css. It's also available on more browsers than just Chrome. What's not to like? 90% of its interface is just stylesheet.
 (function(){ console.log("hello simon"); })(); That is being called immediately. The function is wrapped in parenthesis and then called with the `()` at the end. The pattern is called "Immediately Invoked Function Expression", or IIFE for short.
Already mentioned but I also recommend checking out FuncUnit (http://funcunit.com). It is a functional unit testing library in the browser that works on top of QUnit, Jasmine and in the latest pre-release also with Mocha.
Happy Cake day, have an upvote. But I've always preferred Sencha's [jsduck](https://github.com/senchalabs/jsduck) myself, at least for projects of any size.
[This might be overkill](http://pastebin.com/qdreWbfh), but I found setTimeout needs to have the object passed back to itself to keep the counter in scope.
So, I am agreeing with you, but I would argue that the stack trace issue is a JavaScript issue (I know plenty of languages that preserve traces just fine with recursion), and that recursion comes up constantly because any loop can be written as recursion and vice-versa. It's stylistic, but personally, something like function foldLeft (fn, ini, arr) { if (arr.length === 0) return ini; return foldLeft(fn, fn(ini, arr[0]), arr.slice(1)); } much easier to reason about than the imperative version function foldLeft (fn, ini, arr) { for (let item in arr) { ini = fn(ini, item); } return ini( } due to recursion not mutating any values at all. Immutability is a really strong selling point when you get to complex algorithms, and with looping it's simply impossible to build up state without mutation. 
Yep. That was the majority of the cases I ran into so this kind of came organically. You have a set of enumerations declared on the server that need to be mapped to functionality or display strings parsed through an i18n processor. A generic solution followed by declaration of maps was always simpler. 
I am probably doing something wrong then. Can you please show me how would you create the same counter object, showed in the example? 
One of TDD's biggest (former) proponents agrees with you: [TDD is dead. Long live testing.](http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html)
Or ESLint (my favorite!).
You can instead have the counter be the state of the component, and you can use `setState` to update the state. This will automatically take care of the rerendering of the component. You can kick off some sort of incremental counter updating code in the constructor. The problem with your example is you are trying to use React, in a way that circumvents the main benefits of react: `state` and `props`. Try to think of React components in a more functional way: Given the `state` and `props` of a React Component, you should be able to know exactly what it produces. Same input =&gt; same output. 
For fun. I'm not a machine. Am I?
I meant to just give the user id thing as an example, I have had some other use cases for this kind of task queue before, and was wondering if there are any better solutions than just doing a standard worker pool.
Don't you know? That's what programming *is*. Plugins.
The big thing to understand here is that your unit tests should testing a singular piece of functionality, not overgrown functions that are doing too many things at once. If you are working on a website for a bank that could somehow accept a deposit, your unit test for deposit() SHOULD be testing that the underlying bank balance is updated properly to reflect the new deposit - the unit test should not be concerned at all with how this new information is displayed. The function that handles the deposit should not be concerned with how that change in state is reflected to the user. View updates should be handled somewhere else in your code. Once you have a modular design in place, you will be able to much more easily reason about and write unit tests. If you find yourself mocking object after object, that should be your sign that your code needs to be refactored and that the 'unit test' you are writing has morphed beyond what an actual unit test is and should be (because your functions are doing too much work). The best thing about writing unit tests is that it helps you quickly identify areas of your code that need to be refactored into separate pieces.
I agree 100%, but I'm not sure how my example sparked your comment.
Oh, no worries then. I agree, if you find your unit tests getting large and unruly, it's a sign that perhaps your design should change.
this might not be 100% but the jist of asm.js is: - javascript is slow because everything is an object - llvm is great compiler and gives highly optimized ASM cuz 2015 - guy ports asm functions and data types to JS, now unreal engine in asm (compiled-from-c) runs with a few bugfixes - lots of gains by using functional programing (asm) and not using js OOP - lots of gains by not using the object type and re-implementing a "tighter" Array lib and a "tighter" Math lib, both that also don't use objects - lots of small gains can be had cuz he implemented a vector datatype or something - firefox then backed it and optimized some stuff on the browser side for even more gains (idk about chrome) results in better FPS than Javascript game engines, especially oop engines, the rest is from the "tighter" math lib and lack of objects i assume you can compile your old OOP JS engine to ASMJS and get an instant speedup...
Bout. Fucking. Time. This is why I think it's stupid when people complain about companies creating non-standard functionality. Who's wants to wait a decade or more for some inept standards consortium to get their shit together?
Noob question here: Now that this is approved, when can we use it? Do browsers need to update to allow use of it? Edit: Ok, I found a compatibility table: http://kangax.github.io/compat-table/es6/
I should note this is in ES6 syntax. In ES5 Syntax you don't need to bind(this). In ES6 you do.
I think this is more related to functional testing (black box tests) for this its better to use something like [protractor](https://angular.github.io/protractor/ ) or [nightwatch](http://nightwatchjs.org) if you need help with the second one just let me know, I can help you :)
Because this is going to be in use for several decades more. It's important to get it right. Once the standard is approved, it can't be changed.
No one told you where to start hehe. Here OP : [https://github.com/jasmine/jasmine/releases](https://github.com/jasmine/jasmine/releases)
Do you understand what asm.js is? This is just a refinement of that idea that allows for skipping the step of having to parse JavaScript, which becomes a limiting factor when you have huge applications compiled with Emscripten. In the future it's expected that the format will be used to add additional capabilities, but for right now it's the same as asm.js without the parsing. 
You can use it. You just have to use babeljs to compile it down. You can auto compile using grunt or your IDE can do it for you with plugins. I know there is one for webstorm at least.
Changes are going to come yearly now it seems. &gt;The official name of the latest JavaScript version is ECMAScript 2015, and Ecma intends to release new versions in smaller increments more often, the next one being planned for the next year and called ECMAScript 2016. From now on, the name of new the versions will include ECMAScript followed by the year of their release. .... Work has started on ECMAScript 2016, a number of proposals being submitted already, including among others: async functions, typed objects, parallel JavaScript, class decorators, and observables. 
While I don't disagree that much with this post, the last line is entirely wrong. In the wonderful world of the web, we can ONLY use Javascript and we can ONLY use CSS. Unfortunate, but good luck getting the major browsers to agree on what interpreters to include by default. Apple would just yell SWIFT and fuck off into its own little AOL-like walled garden of apps, MS would just yell OPEN SOURCE CLR, C# FOR EVERYONE, Google would just yell GO, and Firefox would feel compelled to add all of them in along with a brainfuck interpreter that no one wanted. 
No, they're made of plugins. ;)
&gt; ECMAScript is now a fully featured general propose programming language propose?
Pre-compiled code? It's almost like JS is a real language!
Precompiled code... which is anything but JS.
ECMAScript 2015 === ES6?
Now we have to wait and see if they can/will actually follow through on that 
Several of the items cannot be shimmed or polyfilled in ES5- Proxies and tail-call recursion come to mind specifically. Sub-classing built-ins such as Array, Date and Error are also impossible in ES5 due to their magical behaviors.
Just so I understand this, you can become a great javascript developer by learning javascript. Is this correct?
Erm, you'll have to clarify that one for me. You surely can't mean compilers are a bad thing, because that would take us back to pre-1952.
Tests are just programs that verify the correct behavior of other programs. Suppose you have a gcd module at index.js: module.exports = function gcd (m, n) { return b === 0 ? a : gcd(b, a % b) } now you can write a test to verify the correct behavior of this module given some known valid values: var test = require('tape') test('sanity values ripped from wikipedia', function (t) { t.equal(gcd(48, 18), 6); t.equal(gcd(54, 24), 6); t.equal(gcd(48, 180), 12); t.end(); }); We can run this test in node: $ node test/num.js TAP version 13 # sanity values ripped from wikipedia ok 1 should be equal ok 2 should be equal ok 3 should be equal 1..3 # tests 3 # pass 3 # ok or in a browser (npm install -g browserify browser-run): $ browserify test.js | browser-run -b chrome TAP version 13 # sanity values ripped from wikipedia ok 1 should be equal ok 2 should be equal ok 3 should be equal 1..3 # tests 3 # pass 3 # ok The most important thing to keep in mind while writing tests is that you should write your code so that it is easy to test. Trying to test some code that wasn't written to be easy to test is an uphill battle. If you stick to simple abstractions and avoid global state and singletons, everything is usually not so hard. Also sometimes the best way to test something is to spin up a real http server or database. Some databases make this easier, like leveldb or sqlite, but it's usually possible in any case. Another important consideration is to know why you are writing tests. For me, tests help in catching regressions and quickly checking that nothing broke when I pull a patch or make a change myself. If testing some functionality is too hard or too brittle, avoid testing those features and consider different approaches or perhaps refactoring instead. Here's an article I wrote about how I like to write tests: http://substack.net/how_I_write_tests_for_node_and_the_browser
I personally wouldn't add 'should' to each test description. Not sure where it comes from but I see it a lot. ``` it("adds two positve numbers", () =&gt; {}) ```
About the same time you can start using HTML5.
I don't view transpilers and compilers as being the same thing. BabelJS converts one standard of Javascript to another. The first analogue that comes to mind is the python2to3 transpiler. As well, tools that convert one language to another, are typically called transpilers, when they share the same uhm.... well for lack of a better term, "level". BabeJS is a transpiler, because it's converting ES6 to ES5. Emscripten by comparison, is converting machine language (LLVM) to Javascript. Emscripten is a compiler, as it is moving logic from one "level" to another. Typescript, is a transpiled language, because it is in the same "level" as javascript. I really HATE the term "level", but I'm using it to separate how far away certain languages are, from basically, assembly/machine codes. I'm certain there is a better term/description so someone fill me in please. Any how, my issue with transpilers, vs compilers, is that transpilers often produce code that would have been better off handwritten (either yourself, or maybe through a sensible framework or library). Now, I'm not a huge fan of polyfills either. They seem really easy, but did you ever use PrototypeJS? Using that thing can often prove very frustrating, as it modified what is essenially the JS standard library. This is what polyfills do. But, you have better control over polyfills, and if you want to be a purist, you can opt to not use them AS polyfills. But regardless, you have direct control over the code. Granted, this can't always make up for new syntactic sugar, but that syntactic sugar can be emulated. Compilers have similar issues of course, but it's an entirely different ball game than transpilers.
I thought the "most private" way to make data accessible to the prototype methods without exposing it to the instance was to use a WeakMap instance and then do something like `weakMap.set(this, privateData)`. Then the prototype methods can access this private data by doing `weakMap.get(this).privateProperty`.
Hi /u/arsss23, this post was removed because /r/javascript is not for helping you to cheat in web games.
I used to call these things decorators, but the word will soon have a very specific meaning with respect to class syntax. These are more like “lightweight traits."
If you want to use prototype methods and not add methods to the instance within a closure, yes. But you may find that the performance of going through a `WeakMap` is no advantage over adding methods to each instance in many cases. The other issue is that sometimes, you do want to have some reflection on instances, for example if you want to write a shallow copy function.
While many here are giving code examples and such (which are immensely useful), since you specifically asked for places where you can "read up", I can't recommend Misko Hevery's enough. Yes, he's the AngularJS guy, but long before AngularJS he was deeply involved in software testing. Here's some to get started: * [Guide: Writing Testable Code](http://misko.hevery.com/code-reviewers-guide/) * [Clean Code Talks – Unit Testing](http://misko.hevery.com/2008/11/04/clean-code-talks-unit-testing/) * [The Clean Code Talks -- Unit Testing](https://www.youtube.com/watch?v=wEhu57pih5w) (video) * [Examples of Bad and Good Unit Tests](https://www.youtube.com/watch?v=c5YltI3N1tc) (video)
It's all pretty straightforward inside the three Javscript includes, jelly.js, tentacle.js, and nardove.js.
Wouldn't you have the same problem of making shallow copies with Symbols as well (as they're not enumerable)? And my point was that claiming Symbols provide a way to have private properties is not true and the WeakMap approach gives you a much better representation of private properties.
I'm mostly wrong, but the idea would be apps that target WebAssembly instead of android or chrome or ios. We can already do this, sort of, but with a lot of effort in bundling V8 (node.js) and cross compiling C++ to javascript. The long term goals make it feel like its turning V8 into .Net, which would be awesome for truly cross platform apps. Will that actually happen? Who knows. 
Sort of happy about it. I like that it's pushing the rolling standard, but now the browser support matrix is going to get ugly. Maybe Microsoft can keep up this time around...
Well, technically tail call is an optimization and doesn't mean that ES5 can't do that operation... just that it takes more time and memory. But absolutely, there are things that ES6 makes better like a fucking standard for Promises, real generators, and just general quality of life stuff. I imagine the OP is technically correct that ES5 can do these things (Babel helps here, as well as some other libraries) but having it in standard is a win.
Why not just use Object.defineProperties() if the only thing you care about is the properties not being enumerable? That'd remove the need for a closure, too.
Well, as long as we understand that a certain requirement for “privacy” is stronger than that offered by languages with reflection such as C# or Ruby, then yes, for that requirement, symbols is not “true” privacy. But we also have to then either claim that languages like C# and Ruby don’t provide “true” privacy, or accept that “privacy” is a concept with an inexact definition, and what one person says is “private” may not match another’s expectations. As for shallow copies, `Object.assign` copies symbol properties even though they aren’t enumerable, and you can write your own copy functions using `Object.getOwnPropertySymbols`. With a stronger concept of privacy, that might not be possible. It all depends on who has access to the `weakMap`. For example, if it is specific to a particular class, then you can write a `.clone` method that copies the private data.
&gt; ES6 is a major improvement over ES5, the language specification having almost 600 pages compared to 245 for ES 5.1. I wouldn't cite that as evidence of language improvement.
Babel on their homepage says they can't transpile proxies because of the limitations of ES5.
It's a neat idea, the downside is that it makes caching more difficult. Any change to either the JS or HTML will (must) bust the cache. Also, SPDY, HTTP2, etc.
Not so much in this specific case, unless the interpreter can return non-boolean from an a===b statement, which was closer to what I'd found. I think he'd just gotten accustomed to switches in this example's project for UI purposes (select boxes) and it started to... Creep.
It has even more aggressive caching if you use enableCache:true, in that case, it does not even read the file after it has been read once. I am curious though as to how to make cache busting easier. Maybe by sending the js as a header attribute or a cookie? lol that would be cool, but only if the payload is small. 
Did you end up digging into Supersonic? I'd love to hear if you continued down this path, and if so, what your experience has been...
If you add four spaces before your code, it will be formatted so we can read it more easily. Here's a very annotated solution. // Always keep your code in functions when you're using JS var rockPaperScissors = function () { // Our choices are in an array var choices = ['rock', 'paper', 'scissors']; // Keep asking for input until they give something valid do { // Get input as string var user = prompt('Please enter "rock", "paper", or "scissors".'); // Convert their string to lower case (so we can accept things like 'Rock' or 'ROCK') // .indexOf() checks an array to see if an item is there and gives the item index user = choices.indexOf(user.toLowerCase()); // .indexOf() returns -1 if there is no match. We loop since that means they had an invalid entry } while (user &lt; 0); // Get random number between 0 and 2 var comp = Math.floor(Math.random() * 2); // If they are the same index, then we have a tie if (user === comp) { // Don't use document.write(). It's bad for logging and terrible for real applications // console.log() or alert() are better (though alert will ask if you don't want to see any more in most browsers) console.log('Both chose ' + choices[user] + '. You tied.'); } // If the user choice is zero, then wrap around else subtract one // For example, if comp = 1 = 'paper' and user = 2 = 'scissors' // then 1 === 1 and we know that user had the next item in line and won // if user = 0 = 'rock' instead, then we get 1 === 2 and we know that the computer won if (comp === ((user === 0) ? 2 : user - 1))) { console.log(choices[user] + ' beats ' + choices[comp] + '. You Win!'); } else { console.log(choices[comp] + ' beats ' + choices[user] + '. You Lose!'); } }; I'd encourage you to expand on the idea with something like [rock-paper-scissors-lizard-spock](https://en.wikipedia.org/wiki/Rock-paper-scissors#Additional_weapons). It can be done by expanding on what I've shown you here (the subtraction part is key to the star-shaped answers).
Dang, this is more then I could've asked for!! Explanations and everything, I can't express how much I appreciate people like you!
console.log("Javascript is "+ es6+" ."); 
There is talk of using a `with` keyword, and likewise talk of Python decorators. I do not follow all the deliberations, but given the arc the language is on, I do not expect it to suddenly acquire a single, focused metaphor for OO, I expect it to continue to borrow ideas from other languages, especially if they seem to be popular as proven by success in popular libraries or other compile-to-JS languages.
wait a minute wait... you might be asked this all the time but... are you "the flash guru" senocular?
 console.log(`but ${es6} is not JavaScript`);
What is it? ELI5. also Javascript is still awesome though.
Wouldn't you have to transpile property accesses everywhere because you can't tell what is or isn't a proxy? How would that work with non-transpiled JS?
Probably. Just try it in VS Code, Atom (+atom-typescript), or any other editor with proper TS support. Add some type annotations to the function signatures and observe the tooling improvements you get in return.
No. Use a transpiler like babel which allows you to write es6 syntax and it'll be transpiled to es5 which all major browsers support. Also, babel specifically allows for using es7 syntax like a sync and await I believe. 
Ok, do you know about arrays in general or are you unsure how to represent the cards in an array? [Here is a discussion of arrays and how to use them](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). As for what to store in it, there are 52 cards and each has a suit and a face value.
You're welcome, and thanks. :) It was a good run. It ended a little sooner than I had hoped, and a little more abruptly than I had hoped, but it was a fun ride and it opened up a lot of awesome opportunities for me. Some of that domain-specific Flash knowledge can even translate over to JavaScript, so that's always nice! I mean look at ES2015 here, we finally got some AS 2.0-like classes! ;)
I agree. It was soon and abrupt. Maybe for the best.
JavaScript isn't completely hostile to static analysis, there are some cases where you could statically prove that the object cannot be a Proxy. But yes, everything else. It wouldn't work with non-transpiled code. I assumed we were transpiling everything, if we aren't then I agree this feature can't be transpiled in.
C#'s "lambdas" have some significant differences from the old "anonymous delegates" though.
CoffeeScript didn't invent that syntax. 
I have checked some open source project,such as underscore.js, all its source code is in (function(){}())
The link helped me a lot.
[Here's a blog post](http://ajbogh.blogspot.com/2015/05/performant-testing-with-jasmine-and.html) I wrote for my team of developers. We ran into a lot of useless tests being developed (2000+) and a problem with the test suite taking too long to process, eating up development time since the unit tests would run after each file modification. An example of a useless test is this: it('calls the doIt function', function(){ spyOn(scope, 'doIt'); scope.doIt(); expect(scope.doIt).toHaveBeenCalled(); });
Using JSX is definitely optional. Many kudos to the React team for making that decision. The team I'm on has been using a wrapper function around React.createElement, very much inspired by the [virtual-dom](https://github.com/Matt-Esch/virtual-dom) project instead of using JSX. The result is very terse, allows for quickly including CSS classes, and we're very happy with it so far: h('div.someclass', [ h('p', 'Child One'), h('p', {onClick: () =&gt; console.log('Got click.')}, 'Child Two'), h(SomeComponent, 'Child Three'), h('p', {className: 'anotherClass', key: 'four'}, 'Child Four'), ]); See more usage examples at the top of the Gist: https://gist.github.com/whiteinge/02a4868ff91aeacf3b99 The only thing we've encountered that JSX would do for us automatically is to set `displayName` automatically for custom components. This wrapper doesn't free you from having to know how to use React without JSX, but there's just not much to learn there -- it's fairly straightforward 1-to-1 mapping.
Who's writing Angular 2.x apps?
Such as? As far as I can tell they are pretty much syntactic sugar. What is different enough about them that arrow functions can't be called lambda expressions?
Flight is super simple, lightweight and it is already in a good state which doesn't mean that it is dead :) Read the "Why flight?" section http://flightjs.github.io/ Tweetdeck - that is more frontend/client heavy - has developed a lot of the stuff that frameworks like React have built-in for example: state management or rendering mixins. They open sourced a few https://github.com/flightjs/flight-toolbox
Yeah, or just go away. If they want to stick it to Google, they should just make the best ad blocker on the market and give it away for free.
Some teams (eg. Nicolas' one) are using React. Some teams maintain Drupal websites and write PHP for that matter :) I think the company size and a services oriented architecture allow them to try different stuff at the same time and see what works best. The main web apps (twitter.com and tweetdeck) are built with Flight.
If you don't know where to start, you're not gonna do it (honestly on your own) in two days. How can you make a game if you don't know how to use an array? Good luck.
Meh. It's not *that* bad. http://www.typescriptlang.org/playground/#src=const%20Coloured%20%3D%20%7B%0A%20%20setColourRGB%20(%7Br%2C%20g%2C%20b%7D)%20%7B%0A%20%20%20%20this.colourCode%20%3D%20%7Br%2C%20g%2C%20b%7D%3B%0A%20%20%20%20return%20this%3B%0A%20%20%7D%2C%0A%20%20getColourRGB%20()%20%7B%0A%20%20%20%20return%20this.colourCode%3B%0A%20%20%7D%0A%7D%3B%0A%0Ainterface%20IRGB%20%7B%20%0A%20%20r%3A%20number%3B%0A%20%20g%3A%20number%3B%0A%20%20b%3A%20number%3B%0A%7D%0A%0Ainterface%20IColoured%3CT%3E%20%7B%0A%20%20setColourRGB%3A%20(rgb%3A%20IRGB)%20%3D%3E%20T%3B%0A%20%20getColourRGB%3A%20()%20%3D%3E%20IRGB%3B%0A%7D%0A%0Aclass%20Todo%20implements%20IColoured%3CTodo%3E%20%7B%0A%09%20name%3A%20string%3B%0A%09%20done%3A%20boolean%3B%0A%09%0A%20%20%09constructor%20(name)%20%7B%0A%20%20%20%20%09this.name%20%3D%20name%20%7C%7C%20'Untitled'%3B%0A%20%20%20%20%09this.done%20%3D%20false%3B%0A%20%20%09%7D%0A%20%20%09do%20()%20%7B%0A%20%20%20%09%09this.done%20%3D%20true%3B%0A%20%20%20%20%09return%20this%3B%0A%20%20%09%7D%0A%20%20%09undo%20()%20%7B%0A%20%20%20%20%09this.done%20%3D%20false%3B%0A%20%20%20%20%09return%20this%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20setColourRGB%20%3D%20Coloured.setColourRGB%0A%20%20%20%20getColourRGB%20%3D%20Coloured.getColourRGB%0A%7D%0A%0Anew%20Todo('test')%0A%20%20.setColourRGB(%7Br%3A%201%2C%20g%3A%202%2C%20b%3A%203%7D)
I'm somewhat concerned by the fact that you can only add a react component to one and only one element on a page rather than all elements with said class name. The fact that react won't work with multiple class names simultaneously bothers me. There are arguably ugly ways to get around this limitation but it makes more sense for me to fill in this gap with a Web Component TBQH. For the smaller pieces of a larger app I tend to think components is the way to go. For the app itself, Reactjs is VERY attractive in my mind. I think the difference between Reactjs and Web Components is a question of "scale". A Web Component really could be a smaller part of a Reactjs app. 
You know it's finals week when..
Finals is actually over, Just extra credit. Trying to get a 3.5 and this raises my grade 2%!
 values = ['nothing','rock','paper','scissor']; chosenValue = values[ choice.toLowerCase() ] || 'nothing'; if (chosenValue == undefined || chosenValue == 'nothing') //prompt again and recall ur fn boom :D
Project is not being worked on for about 2years. I doubt it will catch up to NW or electron.
Ah, sorry for missing that.
I don't want to be _that person_, but... Do you really think you deserve that extra credit? I mean, (nothing personal, sorry for bluntness but) you can't even do a Rock-Paper-Scissors. I mean, a comparison, you don't know how to compare two values.
yeah im honestly going to just google everything and try to piece it together. i was really into this course but ever since i fell behind i just want to get through it.
In addition to /u/x-skeww's point about TypeScript, I believe that JSDoc-like comments are useful when they provide more information about what parameters mean, rather than what they are. /** * Checks whether this Rectangle contains the given point. * @param {number} x Assumes the Rectangle's origin (0,0) is the lower-left corner and must be a positive number. * @param {number} y blah blah blah * @return {boolean} */ contains (x, y) { ... }
 loadPage(url) .then(parseRows) .then(connectDb, handleError) .then(setDb) .then(findStock) .then(filterStock) .then(tweetStock) .then(saveStock, handleError) .then(disconnectDb) No error handling? [See #3](http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html). Also - ugh - really? Are developers chaining that many calls together?
2 years must be the new, new
Looking at the [compatibility table](http://kangax.github.io/compat-table/es6) it seems browsers are nowhere close to being able to use most features. I mean, Chrome 45 has 45% compatibility? Even Firefox I expected higher than 66%. What is happening? Why are browsers so far behind the spec?
Unit tests wise I use Qunit on all my open source projects, also this can then be automated to run cross browser see https://www.jonathanfielding.com/unit-test-your-code-across-multiple-browsers-with-browserstack/
Now we await es7
JSBin overwrites the browser's console.log method. Without JSBin you are using the native method which works as I told you.
Edge jumped ahead of even the canary browsers in compliance in one solid leap. I expect now that Edge has been freed from IE and is going full blow evergreen, MSFT will do more than just keep up. 
I've created a similar module, but you can inject whatever HTML code you want and it can be used with Express or with any Node HTTP server: https://github.com/alessioalex/inject-html
School? Netbeans? GUI? Are you sure it's JavaScript and not Java?
You have &gt; async="false" Which means that async is true and that script will load asynchronously. Try removing it. Note that boolean value in HTML is the presence or absence of the it. 
Why do you need a citation? It's simple to prove for yourself in the JS console: &lt; var x = console.log &gt; undefined &lt; x('foo') &gt; TypeError: 'log' called on an object that does not implement interface Console. (This is Firefox, but you get a similar message in Chrome.) All you need to do to fix it is change `console.log.apply(null, arguments)` to `console.log.apply(console, arguments)`. I don't see why that's such a big deal. 
I got some reference about this. https://stackoverflow.com/questions/8159233/typeerror-illegal-invocation-on-console-log-apply Bug Report: https://code.google.com/p/chromium/issues/detail?id=48662 
But how could the functions defined in this anonymous functions be called outside the scope?
About a month ago I wrote a post about the end of JavaScript as a design-time programming language http://blog.wolksoftware.com/the-end-of-javascript now I feel like this could mean the end of JavaScript as a run-time language as well.
Hi /u/happymapper, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Drupal?? And I'm not sure what to say about this... &gt; So first step was to get rid of the View UI javascript error. For that I disabled javascript under the advanced screen in configuration for this module. You do realize that this is **/r/javascript**?
Hi /u/datnt, this post was removed. I don't see the reason for posting something like this.
It's faster and you can see your change live while writing them instead of refreshing the browser.
Sure, understood. Future posts will be rather individual, addressing specific tech topics. Not just an entire release, i.a. as an announcement. Thanks for pointing this out.
If I may recycle my comment from a different thread: wasm aims at being a target for lower level compiled languages, like C, C++ etc. It is not designed to replace JS. It will complement it, (contrary to what the denizens of /r/programming would wish to believe.) In the same way that you might, for example, code in Python and mix in a few C modules for speed, you will be able to code mostly in JS and mix in some wasm libraries. JS will still have a privileged place in the web as the primary high level language, and it will still be around to glue everything together. I can imagine that we will still be transpiling high level languages to JS for a long time to come. 
An imaginative way to screw up your fellow programmers: const True = false;
[**@appjs**](https://twitter.com/appjs/) &gt; [2013-10-28 19:41 UTC](https://twitter.com/appjs/status/394911856910823424) &gt; AppJS is not maintained anymore as node-webkit (https://github.com/rogerwang/node-webkit) fulfilled the purpose. Thanks everyone for supporting us:( ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Wow, prediction of the demise of xyz? Not exactly an accomplishment, in IT that's *risk-free*. Even languages of 20 years ago that we still use today are either very low-profile and/or have changed so much that apart from very, VERY basic syntax they actually have become something very different. So, anyone who agrees with you will be proven 100% right eventually. Already even ES5 had very little to do with JS 1.0, and in JS *how* you write in that relatively low-level language and which framework you use *completely* changes you code. AngularJS code looks very different from 10-year-ago basic-JS-plus-jquery code. Not to mention that your comment makes no sense for at least the next 10 years even so. You don't seem to understand the purpose of this format.
&gt; You also get uniqueness, Exactly. Avoiding collisions with ones privates should be a major concern for most programmers, or the creation of new instances of programmer may suffer.
Apparently it doesn't since its dead. Sorry for wasting your time guys. I was also looking at TideSDK but that too is dead because the team is focusing on TideKit which is due to be out. It has a pretty GUI. I guess Ill be checking out Electron.
Even then... you still have to use transpilers. No way you can use that in production. Even at 2%, IE8 still has to be considered.
This is an implementation detail you shouldn't have to worry about. Always assume a method called from another object may internally reference `this` so always provide correct context (console and not null) when calling.
No response on OPTIONS is _not_ good. It should tell the client what request methods are available. I wouldn't be suprised of Firefox Mobile is simply honouring your OPTIONS method. Here is what an API I'm working on returns on OPTIONS request: `CHECKOUT,CONNECT,COPY,DELETE,GET,HEAD,LOCK,M-SEARCH,MERGE,MKACTIVITY,MKCOL,MOVE,NOTIFY,PATCH,POST,PROPFIND,PROPPATCH,PURGE,PUT,REPORT,SEARCH,SUBSCRIBE,TRACE,UNLOCK,UNSUBSCRIBE`
If your users are using IE8, you need new users, or a new job
The T in dataType should be uppercase, that's it.
I do think that template generators are a better solution, although doing one well would take a lot more time than just tagging a boilerplate project. I'd like to do a template generator down the track, with extra generators for each of the various modules (controls, models, reducers, actors) - just like rails. For the moment though, I'd like to concentrate on just iterating the actual framework and getting feedback on the concepts behind it.
In a perfect world, would we just write a parallel language that wasn't backwards compatible and all major browsers just supported both? That would probably keep the new language far simpler, no? I guess the story for forwards compatibility would be the problem. Lots of packages not ported to the new language. Is this kind of what's happening with TypeScript? 
definitely 
I really don't understand the point that you're trying to bring across.
Sorry but you've got to be kidding. Millions of websites written with javascript aren't going to poof out of existance dawg. You gotta think things through a little more
Doesn't work when you visit over HTTPS: &gt; idoco.github.io/:1 Mixed Content: The page at 'https://idoco.github.io/map-chat/' was loaded over HTTPS, but requested an insecure script 'http://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js'. This request has been blocked; the content must be served over HTTPS. &gt; vertxbus.js:27 Uncaught ReferenceError: SockJS is not defined &gt; main.js:10 Uncaught TypeError: undefined is not a function
Thanks for your comments. I think I fixed the https issue. Can you see if it is resolved? 
Or use Typescript which is basically the second coming of Jesus.
Unless you are a developing an enterprise application, IE8 can be ignored. 
I though about it and it looks like compile-to-javascript is going to become mainstream. If we use a compiler after some time we could stop thinking about the output (JavaScript) and after some years the compiler could introduce a new option "compile-to-webassembly" so we would use the same code but a different output and that would be how JavaScript could end. I'm not saying that is going to happen I'm just saying that it could happen.
&gt; The lambda is not the expression tree and only certain kinds of lambda expressions can be used in the building of one. That is true. Multi-line lambdas (statements) can not. &gt;The linq chain is what can be decomposed into an expression tree, No. Expression trees do not require LINQ at all. &gt;and only if that linq is done against the type IQueryable or another expression tree type. No. IQueryable is not an "expression tree type." IQueryable is a type that happens to provide methods that take an expression tree as one of their arguments. The reason that you can pass a lambda to Where and have it treated as an expression tree has entirely to do with the signature of the Where function, and nothing to do with IQueryable beyond that. Any function/method that takes an argument of form `Expression&lt;SomeLambdaType&gt;` can be passed a lambda expression and that lambda will be decomposed into an expression tree. That's it. You don't need LINQ, you don't need IQueryable. &gt; So you're not saying arrow functions can't be called lambda expressions, you're merely pointing out that JS does not have expression trees. I just don't think that's a reason why we can't call them lambda expressions. You can. That's what I call them. I was only making the point that in C# the name distinction is particularly important because there was a lot more to the new feature than simply "syntactic sugar." In JS, the same thing applies. Lambdas in JS are more than syntactic sugar over the old `function () {}` syntax. 
The templating is from LoDash: https://lodash.com/docs#template Once the template has been parsed, it uses the grunt config (i.e. what you passed into `grunt.initConfig`) as it's scope. Using `grunt-contrib-concat` does [process](https://github.com/gruntjs/grunt-contrib-concat#process) templates when concat-ing files, so you can do: grunt.initConfig({ meta: require('./package.json'), concat: { options : { process: true }, src : ['lib/**/*.js'], dest : 'dist/dist.js' } }); And then in your code, just like you have it: // @name &lt;%= meta.name %&gt; // @version &lt;%= meta.version %&gt; tl;dr, you might just need to expose the `package.json` file to the template scope, if you already have `process: true`
https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval
It's really quite straightforward. It calls the function (arg1) once every interval (arg2) in milliseconds. http://www.w3schools.com/jsref/met_win_setinterval.asp
They use css property background-image liberally to achieve the effect with set height an width elements. No javascript required.
Double edged sword for JavaScript: This would allow ECMAScript to evolve faster independent of browser updates (as long as new feature can be implemented using existing WebAssembly features), but it would also erode JavaScript's hegemony of the Front-End web. 
Also wondering if they realize that the handleError in this example, would catch errors on 'parseRows' and not 'connectDb' 
Ah, so things like browser machine learning code would benefit greatly?
I don't know much about machine learning, but I'm guessing yes. ;-)
&gt; I'm not saying that is going to happen I'm just saying that it could happen. Dogs could learn to drive one day. 
Uh, you'll need a little more info than that. Like a stack trace?
Got it, thanks!
For splitting the string you can do `var names = Str.split(', ');` Then you can loop over the `names` array like for(var i = 0; i &lt; names.length; i++) { // your div stuff here with names[i] }
Can't imagine that being faster than compiling SASS on the server ahead of time and just serving CSS to the browser
It falls back to canvas when you're on a browser that is not compatible.
That 23x speedup is about loading the binary format instead of parsing text (a JS file which follows the Asm.js rules). WASM currently only covers what Asm.js did. So, you can't use it for JavaScript or any garbage-collected language.
That's irrelevant
Well I'd see the purpose mostly being for development. No longer needing to recompile, just refresh the page. Seems useful to me! 
THIS THING IS AWESOME I HAD NO IDEA THAT IT EXISTED THANKS THANKS THANKS
Would you mind giving an example of how I'd do that div thing? I don't really get arrays in JavaScript. 
[Babel](https://babeljs.io/) is the one you want. I've played with most of the transpilers, and babel was my favorite by far. Traceur was also ok, but I believe google is more or less dropping support for it, especially with angular swapping to typescript.
Only if X language doesn't have garbage collection.
Oh I see. So when I hover over the bird image ("Home") and the eye opens, is that javascript? A friend showed me a website she made with hand-drawn illustrations that moved/animated when you hovered on them. I'm having trouble understanding what javascript is used for.
And just so you know OP, this person isn't saying ignore all the ie8 people except for enterprise. It is the fact that the ie8 users will pretty much only be enterprise users. 
Interesting. Why is that?
It's just two different images. In this case they display two different portions of the [same image](http://www.ourwildlifegarden.org/wp-content/themes/basic2col/images/nav.jpg). Javascript *can* be used to accomplish the same thing, but CSS is preferred when applicable. Conversely, Javascript is used to handle any manipulation of the page (DOM) that CSS cannot handle.
I'm not sure about #7. Is there a way to challenge their skills without a project that can be copy pasted? I think I would be frustrated by this as I want a challenge, not something that has you reproducing solutions. 
 var genDiv = function(name) { var div = document.createElement('div'); div.innerHTML = name; document.body.appendChild(div); } And just call this function in the loop. If you wanted to attach it to a specific div, you would use: document.getElementById(id) 
Technically ES2016 at this point. Or one can hope.
It's time to make a polyfill lib.
You shouldn't be getting that feeling. The WebAssembly effort has broad support by the browsers makers. Once it is in use on the web there is really no way of removing it without break the web itself. No browser maker wants to break the web and have the browser which doesn't work all the time and pisses off their users. 
Inded. Everyone is quick to say "transpilers". Not to be a turd in the punchbowl, but transpilers only partially or do not support the four best features of ES6: * Symbols * Tail call elimination * Proxies/Reflection
An excellent summary. There are a *lot* of misconceptions of what WebAssembly is and what it means. This post clears them up well and concisely. 
HTTP already transports binaries. What do you think image, video or sound files are?
 somePromise() .then(success, error) At this point you are attaching a success / error handler to 'somePromise'. Once you are in a promise - anything you return is another promise. So the result of success - will be treated as a promise in this chain. If you want to handle errors in somePromise, or success - then you need to let it sort of bubble: somePromise() .then(success) .then(null, error) depending on the promise library, could use .catch() instead
&gt; somePromise() &gt; .then(success, error) Ah right. It seems obvious written this way.
async/await https://github.com/lukehoban/ecmascript-asyncawait#example
/u/parpaythrums /u/thomasruns I added WebStorm/IntelliJ Ultimate 
Or a way to circumvent privacy.
As long as the browsers continue to support hooks to intercept each request and check for permission, I don't see how it will matter. This new technology won't gain the ability to break out of the sandbox and use raw network sockets, so any fetching of ad content will still have to go through the browser and will be subject to ad blocking via those existing hooks the same way it's worked for the last decade or more. 
This: $(document).on('page:load', ready()); should be $(document).on('page:load', ready); 
oh my god. http://i.imgur.com/mXc4xdb.jpg 
Just off the top of my head it looks from [design spec](https://github.com/WebAssembly/design/blob/master/MVP.md#binary-format) like you could convert all the assets needed to run the page in this "blob". Including encoding images as text. So this wad-o-mystery can have the code needed to render the page plus all the assets needed for a web ad campaign. Once it's down it won't have fetch anything to pop up a nice "punch the frog - win an IPad!"/Viagra banner. New set of ads? New wad-o-mystery. We'll have to escalate to unpacking their bundle and murdering the ads on the fly I suppose.
&gt; would this enable JS to be compiled and run faster? Yes. Though "sooner" would be more apt than "faster."
The capability to do that has existed forever in the form of `data:` URLs which can be used to embed images or any other kind of resource inside a script. Advertisers could create a monolithic script bundle today if they wanted to, but nobody does that. If they did, Adblock would just block that bundle.
I tried less on one project, I found the syntax wasn't for me. I much prefer how Sass looks and feels. 
I would find that incredibly useful!
I got frustrated with that too and just sorta skipped around a bit to get the gist of it. The browser I'm using doesn't have the Readability plugin installed, and I'm not willing to go download it and log in just to read this article.
Yes, I've read that, but it still doesn't tell me where to put all of that in my code/how to actually run tests through that.
Thank you! :)
I hate the coding camp trend but I've pointed new web developers to this site and they've actually learned quite a lot. A big part of it is that they ease you into contributing to real projects, which is way better of a learning environment then the other codecademy-type sites.
It's a joke. 
Ahh. 1) Heres a good video on theory / why to test. Even if you 'know it', watch it. ONLY WATCH TO 2:38!! After that he goes through doing stuff with yeoman, installing stuff / uninstalling blah blah blah.... https://www.youtube.com/watch?v=U_vFtXNDXTw 2) THEN go here https://github.com/jasmine/jasmine/releases and download the latest (jasmine-standalone-2.3.4.zip for me) and save it somewhere. Extract it where youll use it, (I have a test folder I put mine in), BUT DONT TOUCH ANYTHING YET! 3) THEN, read / follow along with this article http://evanhahn.com/how-do-i-jasmine/ (skip the 'get jasmine' part) up to the 'before and after' part. As you go through it, it will all fall into place. If you run into issues Ill try to help. 
what if i want to build my app with javascript and NOT transpile it from some other language?
There are certain features that you want to expose to language implementers but don't want to expose to application programmers. This is hard to do if the compile target is JavaScript, but easy if there is a bytecode version (aka WebAssembly) that people are not expected to hand coded. For example: * GC control or `malloc/free` - JS might have auto GC, but other languages may not. * `goto` - Can be used to simplify implementation of a lot of flow control devices without having to reorder the code * continuation - Can be used to easily implement a lot of the async features in some languages (generators, async/await, continuation)
Is there any way to join without giving our email address?
I mean, if someone comes up with a "js-to-webassembly" compiler (that significantly increased the performance of that JavaScript), I could see serving up JavaScript files to browsers to become pretty scarce (especially if web servers like Apache/nginx add features to make it automatic). I don't think writing JavaScript is going to go away anytime soon, however.
Intermittent issues like this are almost always caused by a race condition. Most often, you implicitly rely on something that takes some time to complete without even realizing it, and when there's a change in the system (whether it's your code, the user's browser, the network, etc.) then the timings are thrown out-of-whack. This is part of the complexity of building asynchronous applications. There's a few suspect pieces of code that I can see that I'd dive into first. This first snippet has several potential problems: (function(jQuery){ function initFlyouts(){ initPublishedFlyoutMenus(/* long args snipped */) } if (jQuery) { jQuery(document).ready(function() { jQuery(initFlyouts); }); }else{ if (Prototype.Browser.IE) window.onload = initFlyouts; else document.observe('dom:loaded', initFlyouts); } })(window._W &amp;&amp; _W.jQuery) * First, this snippet tells me that you're not really sure that jQuery is going to be loaded at this point: `window._W &amp;&amp; _W.jQuery`; otherwise, why not just pass in `jQuery`? Also, the `if (jQuery)` inside of there -- it's obvious that you're _really_ unsure if jQuery is going to be available. I would address that problem first (the uncertainty of whether jQuery is loaded or not), because that's a pretty big smell to me. You should know with absolute certainty whether or not your most fundamental library is going to be loaded at that point. * Second, this is redundant: `jQuery(document).ready(function() { jQuery(initFlyouts); });`, because `jQuery(document).ready(fn)` is exactly the same thing as `$(fn)`. In effect, while jQuery is in the middle of processing callbacks, you're adding another callback... just replace that entire line with `$(initFlyouts)` and be done with it. * Third, it's really bad to do this: `window.onload = initFlyouts;`. What if some other code comes along and does the same? Then your `initFlyouts` is gone forever; likewise, if something had previously set `window.onload = ...`, well now you've just gone and over-written it. * You really should not be using jQuery and Prototype at the same time if you can help it; and if you have to, you should take greater control over which is used, and when -- quit making alternate code paths for each lib. Then another code block at the bottom... (function(jQuery) { try { // lots of code } catch(ex) {} })(window._W &amp;&amp; _W.jQuery); So, you rarely need to use `try/catch` in JS, and this example is not one of those times. In short, `try/catch` should not be a "let's just throw `try/catch` around it to make sure nothing bad happens" type thing, it should be implemented with strict expectations of how and when something will fail. But, the worst of it is the empty `catch` -- why?!? Exceptions are kind of a big deal, they cause the code to halt at that point and with the lack of at the very least a `console.log()` there, then you'll never even know why. At my old job, they had used `try/catch` in much the same way, and they (both devs and users) were always complaining of weird bugs with no symptoms. Hrmm, wonder why? I removed probably about 100 of them, and did the sky fall? No. Did we get a couple of very specific error messages in the console that were very easy to track down? Yup. Did the "mysterious" bugs go away? Yup. Turns out we had tons of hidden race conditions, but they were never exposed because of the liberal usage of `try/catch`. So get rid of that `try/catch`, and force yourself to fix the code so that it works without it, 100% of the time. Same goes for `window._W &amp;&amp; _W.jQuery` and `if (jQuery)` as well, you should never have to guess what your runtime environment is like, especially since you're in complete control of it.
Why not just use IRC?
I think perhaps you're overestimating your need to switch. First, your code is not going to stop working because of ES2015. It's not going to stop working now, and it's not going to stop working when you upgrade to browsers or Node versions that support it, because ES2015 is backward-compatible with older Javascript dialects. Even if Coffeescript had already released its last version upgrade, ever, you would still be able to run old code with it, write new code with it, and interoperate with libraries written in other Javascript or compile-to-Javascript languages, including code written in ES2015. So there isn't actually any reason why you *have to* switch. Second, unless your code will run only on new versions of Node, Chrome, and Firefox, you are just trading one transpiler for another... and for many settings of Babel, it generates code that is slower than the code generated by Coffeescript. (For that matter, the native implementations of many ES2015 features are still slower compared to the JS generated by idiomatic Coffeescript.) Third, Coffeescript *is* adding ES2015 features, albeit slowly. You can use generators, for example, if your back-end platform supports them. (And if it doesn't you can use regenerator.) Given that was just released a few months ago, it is pretty likely we have not yet seen the last release of Coffeescript. Certain other ES2015 features are in the planning phase, and there's also a spin-off group working on a "BabelScript" project that's supposed to make a Coffeescript dialect using Babel as its back-end code generator, but I don't know how far along they've gotten yet. In short, the rumors of Coffeescript's death are greatly exaggerated, and with them, the perceived need to switch. Except for generator functions, most of ES2015 is actually a *subset* of the features Coffeescript *already provides*. And those few new features which affect the runtime rather than the syntax can be directly accessed from Coffeescript already, assuming you're running on that backend. The idea that people *need* to switch to ES2015 is basically FUD.
"They're 64-bit numbers" could be sufficient content for this article, followed by a link to an article about 64-bit numbers, which would just be this article without any mention of JavaScript. It reminds me of how different soaps are marketed towards men and women, as though men and women need different chemicals to get clean.
Related: I wrote a Mat file reader in Javascript, so you can read Mat files directly in the browser without using Matlab. It's called [jMatFile](https://github.com/fluffynukeit/jMatFile). I haven't used it a lot in practice, but it has a lot of tests so I expect it's robust.
These kind of features generate a lot of interest for me 
This is a little SVG loading animation I made with Greensock. I figured I'd post it here for others who are interested in picking up GSAP or working with SVG via javascript. Feedback or questions are welcomed. It's modular so it would be pretty easy to drop it into a project as a library. As an example, here it is cloned 200 times: http://codepen.io/neiltron/full/4121f27c02051564a1f9e458a5995096/
Those are possible benefits, yes, but I think the primary benefit is that programmers will be able to use their language of choice for development, and not be locked into one (historically) slow moving beast. This would allow promising languages(Rust, Haskell, Python,..) and programming concepts(await/async) to be adopted much more quickly because they would rely less on browser support for language features. Eg. when your language of choice implements the feature, you can use it, rather than wait 2 years for the slow standards body to approve it, then wait 2 more years for the feature to have enough market penetration to be usable in production.
Forgive me for being ignorant but how will this be different from Flash?
Black is not used on websites because it's too high contrast. The font-color used (#3d3d3d) is perfectly acceptable for readability. It has a contrast ratio of 10.86:1, which easily passes WCAG accessibility. For you, it's probably more of the font-weight than the font color causing the problem.
I feel people like javascript because the language is in itself challenging, it's as if it was a crown to show off
Thanks!
Haven't you heard? Chat is dead. We're all using chat now.
I'm with the guy until this suggestion: &gt; 7. Give them a project. If you feel good about the candidate at this point, let them know that you'll be sending them a project to code on their own the next business day. Are you paying this candidate for their time? Do they have another job? I might want the job being offered, but I've got a life and I don't need to spend a whole day doing something that may lead nowhere and not get paid for it. 
I'd rather a small project that I can do in my own time over fucking whiteboard coding, which has to be the single most divorced-from-actual-practice idea I've ever come across.
Everybody wants to work with other great developers. Because we're all great developers too. But the law of averages says that most of us are mediocre. How about we just focus on getting a decent person for the job and stop trying to win the recruitment Olympics everytime?
I thought we were specifically talking about executing JavaScript programs. 
&gt; think it would be SUPER naive to suggest that their interview processes aren't designed with a lot of forethought. OF COURSE there's a lot of thought going into it. Unlike what went into your comment. Or at least I *hope* that if you had given it some thought you might have realized that the amount of work or thought(=work) that goes into something is *not* necessarily in any way linearly related to the quality of the outcome. Moron thoughts in - idiocy comes out, no matter how much time moron spend thinking. &gt; But they're still great companies. They're doing well, hiring tons of talented engineers, Because they are WELL-KNOWN. Human herd-behavior plus shortage of (good) jobs and uncertain outlook letting job seekers esp. young ones seek safety. [Work disengagement and dissatisfaction is at record highs.](http://www.forbes.com/sites/susanadams/2012/05/18/new-survey-majority-of-employees-dissatisfied/) Because those companies are all "great"? Well, with people like you no wonder mediocrity is a majority. "Thinking" --- waaayyy too hard, why not just write a wall of idiocy instead!
WebAssembly is just a different encoding for asm.js, which is a subset of javascript.
WebAssembly is just a different storage format for asm.js, which is just a subset of javascript.
It's just a smaller delivery format for a subset of javascript.
&gt; I've never used EDX, and do not have a login, so perhaps I'm missing something ??? Yes, you are missing the "Create a free login in one simple step". You can go on and on about the course WITHOUT ACTUALLY LOOKING if you like, I said what I came here to say. &gt; Can you link me directly or grab a screenshot I didn't think this could go to such ridiculousness. I don't think your main problem is finding a course for the web audio API.
http://blog.sonoport.com/post/120993888887/learningwebaudioapi
I sometimes feel with npm scripts that you're basically writing long bash commands that aren't overly readable or maintainable. Gulp pipelines on the other hand are very readable and easy to extend. There's also room to document and comment in your code so it's easier for others to pick up why you've done what you've done.
Did you actually **LOOK AT THE COURSE** by now? If not - FUCK OFF, moron. If yes FUCK OFF, moron. What makes you think "feedback" to me is of any use except to highlight your severe psychological issues? YOU asked for links, I gave you one. Why not just move on if it doesn't suit you, YOU MORON, like any SANE person would do? *Inbox replies disabled so that I no longer have to see your brain farts.*
It's hard to tell with that few information. Could you upload it on something like https://jsfiddle.net/? For now, all I could say is check your developers console. Does the console show any errors? In the network tab, is the script.js loaded? Try a console.log in top of the script.js page to see if it actually loads and do the same in the beginning of the function you are calling to see it the function is actually called. It might be that the code in your function isn't working but that it is called.
Here you go! https://jsfiddle.net/kbnefv0j/ The function works when I test it without the button.
Register the event like this: JavaScript: document.getElementById("buttonId1").addEventListener(battleShip); HTML: &lt;button id="buttonId1"&gt;Click here for battleship &lt;/button&gt; Also don't forget to move the &lt;script&gt; tags to the bottom of the body. It's good practice and avoids some mistakes.
Be aware that: - JSFiddle has some options on the left. Particularly _how_ you load the JavaScript has a direct impact in how you can do things. To be more precise: If you select to execute the JS "onLoad", all your code will be wrapped and thus not globally accessible. For that, you want to choose for it to be loaded [no wrap - in &lt;head&gt;](https://jsfiddle.net/kbnefv0j/1/) - Calling `battleShip` won't do anything. The problem is your starting point seems to be setting a `window.onload` handler. But attaching `battleShip` to the button means that when you click, the document is already loaded, so you handler will never fire. - What /u/contantofaz said about event handlers.
That's awesome.
&gt; and DOM manipulation is slow There was a time when this was once true. DOM manipulation isn't that slow anymore. It has been really fast for several years now. Frameworks and querySelector can make it seem far slower than it really is (by an order of magnitude). Of course, the same people that typically bitch about this are the same people who cannot be untethered from their pet framework. No amount of help or support will solve for incompetent developers.
This was on /r/AskReddit yesterday: "There are 100 cookies sitting on a table, 98 are delicious and 2 will kill you (very painfully) For each one you eat you get $300k." This is a script which simulates it: http://jsfiddle.net/jhkmccp8/2/ The `type="button"` bit makes that button do nothing. By default it submits, which I would have needed to cancel via `event.preventDefault()`. "qs" is just an alias for `document.querySelector`. You can ignore the contents of both functions. Those parts aren't important.
That should have been: etc.addEventListener('click', battleShip, false);
Summary slide: http://i.imgur.com/5am8q8j.png - Domain sharding actively harmful with http/2. - Advice is to split applications into several chunks that can be invalidated separately. A smaller initial chunk also improves loading time, with deferring some functionality to later chunks. (A larger file can achieve better compression ratios, so there's some tradeoff between compression and cache granularity) - Inlining hurts caching granularity and means content can't be prioritised by client/server. Basically, most best practices are still good, domain sharding was always a bit dodgy, and packaging was already moving towards multiple-chunks for large applications. Server-push will give some big wins once servers/clients iterate on their implementations (Although if you're serving js/css assets from a cdn separately from the main site you can't push them).
Awesome job ! maybe after you select a category from the menu, and the the page refreshes, the menu auto-hides again.
I see, HTTPS isn't supported a.t.m :)
I really like it. But here is one thing that bothers me: Why can't I right click on a link, like the comments link, and open them in a new tab? Is this right-click issue an angular related problem? Also is this Angular 1.4 or Angular 2? And are youg going to write a How-To tutorial on this, because it would enable us to learn from you? Great job, by the way.
I use a custom redirector for links, that's why you cant right-click + open in new tab, I might look into how to fix this (Made this just to learn myself). I'm not that good at writing but I'll attempt to make a tutorial
Yeah sorry, it's build on the [angular seed](https://github.com/angular/angular-seed)
Very well done, thanks for sharing! Two questions: 1. Why are you using href="app.setLocation(...)" on every link and not using something like href="#/the/url/for/the/link" ? 2. I really like the sidebar, how you did implement it?
Think I got it. http://jsfiddle.net/fLcfpt86/2/ Noticed a few things... you left out the Answer on function checkAnswer() in the js. You missed some semicolons throughout. Not sure what syntax you're using to identify elements through the js. I love to use document.getElementsByTagName("tag"); document.getElementsByTagName("tag")[0]; document.getElementsByTagName("input")[6].value; //grabs the 7th &lt;input&gt; in your document and sets its value So that's what I did and things seem to be working... 
document.quiz is your form. input name result is outside of form =&gt; document.quit.result does not exist. Check http://codepen.io/hadl/pen/aOLyRE for a working example
I don't think it matters whether you graduated or not.
I'd use that over the original if I could log in and comment, etc... awesome job pal.
Great article. Just want to point out that the author states: &gt; The use of HTML import can generate a lot of requests to the server to fetch each element. One of the primary rules of website optimization is to reduce the number of requests. There is no bundling mechanism that I’ve run across for addressing this problem. But 1. [HTTP2 multiplexing](https://http2.github.io/faq/#why-is-http2-multiplexed) will help alleviate the problem of multiple requests 2. [Vulcanize](https://github.com/polymer/vulcanize) is a project that "builds" your component dependencies into a single file to avoid the multiple requests
First of all, the options argument appears to be wrong: require('babel/register')({ optional: ['es7.asyncFunctions'] }); require('./script.js'); `script.js` fails because the `await` keyword must be used within an async function. You can wrap it in an immediately-invoked async function expression (yeah pretty much): (async function () { var text = await fn(); console.log(text); //-&gt; should output 'text'; })();
Data is coming from reddit (just add .json to any url)
"In a few years I believe all the top browsers will sport JS engines that have become truly polyglot virtual machines." -Brendan Eich https://brendaneich.com/2015/06/
Thanks!!
A-fucking-men to that.
Neat!
404
Thanks for your feedback, I've already fixed the loader :)
For what it's worth, we took a look and stayed with gulp for that reason. And gulp wins over grunt because of the in memory feature (so faster) and less configuration to write. We have gone with react and flux, and flummox as well, and are looking at mocha and chai.
I started reading about it about a week ago, i did some online tutorials (I googled angular tutorial and tried a few), after that I just started the project and googled my way along. Angular is actually quite easy once you get the structure. If you have any questions while learning feel free to shoot me a pm
HTTPS is now supported 
Usually if I feel like I'm overstuffing an npm script I'll just move the code over to a build.sh or something along those lines. Those can be commented as well. Just need to remember to `chmod +x` that file. I agree it's not as a conventional, but I haven't had the chances to work on projects with lot's of people involved, so I just do what makes most sense for me.
Good job. I love GSAP &amp; velocity.js. JS animation &gt; CSS3 animation.
I get what you're saying, but I'd much rather be given a project and 3-7 days to complete it on my own time than to be asked to solve ridiculous problems on a white board in person. It's more aligned with how software development works in the real world. NO ONE is familiar with every problem, every library, every framework that they keep all of that in their head at any given time to solve anything. Part of being a good developer is knowing how to use things like Google, Hacker News, Reddit, StackOverflow, GitHub, etc. to do research on the specific problem you're dealing with in order to choose the best approach to solving it. 
Very nice!
That's pretty cool didn't know you could do that. 
Angular is dead, didn't you get the memo? J/K looks great! Nicely done.
Just present the link as an `&lt;a&gt;` with a valid URL (relative or full) instead of a `&lt;span&gt;`, so it's usable as a real anchor. The router *should* be able to cope with this navigation just fine.
I'll try it when I get home. Looks fucking beautiful.
I saw that, and really like the custom hover zoom. It's just hard to un-learn hovering links on reddit, lol. I realize I sound like, gasp, a user when I say that. 
This is great! Very interesting read -- especially the part about matching pitch.
JavaScript has become the de facto core of the web, what you preach here has been out of fashion roughly 10 years ago already. JavaScript penetration is high enough to consider it always on and disregard any fallbacks, not mentioning that a static web front-end without JavaScript simply cannot deliver the experiences required nowadays. Using an `onclick` event handler is an antipattern? What? DOM kinda has this whole API and was designed that way. We're calling native features antipatterns now?
You could catch the links and call `preventDefault` on the left-clicks of the reddit ones. [Here's an example](http://plnkr.co/edit/Cw788ZjLWvGf7uSUBQbA). I attached the event handler to the body, but you could technically put it anywhere.
Awesome work! Just a little question: what purpose does putting classes in your html tag serve? I've seen it in a lot of projects but I can't quite figure it out.
Well, the transformation is trivial, just not very useful. You can very easily compile a javascript interpreter to asm.js/wasm and attach the javascript as data... ;)
How have your experiences been with polymer been? Do you have any comparisons to working with it vs other frameworks?
Yup.
Yeah, it's already fixed :)
Read about HTML, CSS, JS and DOM. Refer to good books. Search good books by referring to various articles online. Probably, the following is close to your requirement. But I recommend self-studying before looking for a readymade solution which won't benefit you a dime. Well, here you go. http://jsbin.com/vakariz/1/edit?html,css,js,output If you have the right knowledge and skill, you can customize it to your requirement.
Could you open the console and log the errors for me ? thanks in advance :)
Then you still have event listeners like `$('.thing').on('click', onThingClick)` which is useless, and you can't use it in other places or the name is wrong. What if I then wanted to also do it on hover after 100ms, should I make two methods that do the same thing? one calls the other? It descends into a spaghetti bowl.
It's just the CSS trick of `background-position` and `background-size` property. **Example** div { /* two images lined up horizontally*/ background: url('sprite.png'); background-size: 20px 20px; background-position: 0 0; } div:hover { background-position: 0 -20px; }
 TypeError: event.preventDefault is not a function at self.setLocation (http://martijnwelker.github.io/Angular-Reddit/app.js:55:9) at fn (eval at &lt;anonymous&gt; (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:13129:15), &lt;anonymous&gt;:2:557) at callback (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:23239:17) at Scope.$eval (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:15830:28) at Scope.$apply (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:15929:23) at HTMLAnchorElement.&lt;anonymous&gt; (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:23244:23) at HTMLAnchorElement.eventHandler (http://martijnwelker.github.io/Angular-Reddit/bower_components/angular/angular.js:3264:21)
What do you mean by you don't get array thing in Javascript. You must learn JS 101.
IGV? Do you mean [IGB](https://en.wikipedia.org/wiki/Integrated_Genome_Browser)?
Give up while you still can. I tried to make a reddit browser SPA and ran into *a lot* of issues. One of them was cloning the RES expando and another was scrolling. Implementing proper scroll handling will be painful.
Proper scrolling isn't and the expando is broken.
Fixed, thanks
What's broken about it ?
Maybe not but it's no more a good practice to support and advertise w3schools. W3Fools explains this in details.
Needs a heading so i know what sub im in
The last image to load is displayed. If you move your mouse over several thumbnails and one takes a little longer to load, you will see the latest thumbnail opening and you see it being replaced by a the one which took longer to load.
thanks! I got that, I just thought those classes names like js, flexbox, canvas, canvastext, webgl, no-touch, geolocation, etc did something else than just styling... Like controlling JS dependencies
That's [Modernizr](http://modernizr.com/), you can do javascript checks based on the classes it adds (If it adds "canvas" it means your browser supports it)
Nope, that's a different tool. IGV = [Integrate Genomics Viewer](https://www.broadinstitute.org/igv/)
Cool, looks good. The only thing I would do is scale the burger menu a bit better. Its slightly oversized so the icon looks blurry and i think its a tad bit too wide. 
Strange, could you retry and post browser info :) ?
It's just an ugly image, i toke the first one that showed up on google :) I'm mainly focussing on functionality atm.
Javascript is not complex. Writing UI code is complex. Autoboxing is arguably a type coercion , but in the scheme of type coercion it's like nothing compared to some of the goofy shit that even Copeland doesn't like in javascript. C# would never "autobox" an integer into a boolean or a number into a string. 
As raganwald said, ES6 is pretty much JS merging CoffeeScript into master. That is, ES6 is not a bunch of random shit people thought "hey, wouldn't this be cool"? It was features people used for real before they were put in the language. I guess I can't really contest the larger point but right now JS does not feel "too big" to me. On the other hand, there are things in ES6 we probably didn't need like class syntax. I would like to see the faux-classical inheritance stuff just die, but I know why it's there.
The class syntax does a few magical things that you wouldn't normally get with standard prototypal inheritance: * `class` based classes throw an error if invoked without the `new` keyword * In the constructor, `this` doesn't exist until `super` has been called. That's how exotic objects such as Array, Date and Error can be subclassed, unlike in ES5 * methods of `class` based classes are not enumerable by default, unlike `MyClass.prototype.method = function...` property methods It's a shame that the syntax looks so much like traditional class-based languages. I imagine that it might add to newbie confusion, but that's not to say that the syntax isn't needed, because the above bullet points are all very useful.
ohh I get it! Thanks!!
I don't think I knew any of that. Interesting!
&gt;I'm aware of progressive enhancement and it's area of thinking I'm not convinced that you are. Your arguments seem to be against Graceful Degradation, which is basically the opposite. If you're dealing with fallbacks and alternate experiences, you're not talking about progressive enhancement.
You can make your code more functional, easier to test, by clearly separating interaction from flow. OnThingClick(event) { // here do nothing more than read event data and pass them to a function. makeThingDance(/* dance options extracted from event or event target */); } function makeThingDance(danceOptions) { this.dancer = new Dancer(danceOptions); this.dancer.dance(); };
I was skeptical at first (and still am a little bit), but the more I read about Slack, the more I think it's a good thing. Yes, IRC "works", but that doesn't mean that there's not room for improvement, and from what I can tell, Slack is basically just IRC re-imagined, e.g. IRC was never intended to share anything but plain/text, while Slack lets you embed images, code snippets (w/formatting), etc. Also contains a history with search, something long-problematic for IRC. Here's [an article](http://www.itworld.com/article/2833495/consumerization/slack--i-ve-seen-the-future--and-it-reminds-me-of-the-past.html) that goes over many of it's differentiating features, I'd encourage you to at least skim it if you're genuinely curious. I have a feeling Slack isn't going away.
You don't need the IE10 bit in the title. They all blow, you just don't have to refresh IE10+.
Slack works awesome for teams -- the integrations, archival, file transfers, etc, are great. I use Slack at work and actually rallied for it to be used at a startup I worked at when there was a strong voice saying we should use IRC. But it's simply not required for idle chat among folks connected by a hobby or interest. I would say it's the wrong thing to do for JavaScript folks. Head over to ##javascript on freenode and chat there. Post code snippets as a gist. Upload images to imgur. I don't think you'll end up with many folks in your Slack channel, especially with the fact that I can't join two orgs with the same Slack app on my desktop (I've already got two copies open!).
run. This is not a place where you want to work.
Ok, that's a little bit more context; no offence, but I couldn't tell if your original reply was sincere or smarmy. If it wasn't clear, I've never used Slack, and so I'll take your word that this isn't a good use-case for it. And for further clarification, I'm 100% unaffiliated with OP's Slack channel, and was just playing devil's advocate.
This. That environment is toxic. Get the fuck out. Don't try to play their game.
I thought it was unusual but my boss says this is common practice in the industry and how they provide productivity analytics to justify dev costs. I'm a little worried because this is my first programming job and the owner of the company knows a lot of people in town. I've been told that if i am let go then i won't be able to get a job anywhere within a thousand miles of the place.
Hi /u/appaloosa_lika_goosa, I've removed this post. &gt; My manager wants to start working toward milliseconds on estimating. If this isn't trolling, then simply take the advice others have given here -- you need to evacuate your current job ASAP. That is the most unhealthy and counter-productive environment that I've ever heard of.
do most dev shops not focus on speed? sorry I'm just trying to figure out what I should be doing to be good.
What industry is this? It's definitely not IT. This sounds like your boss does not give a single fuck about code quality or his developers. Does your boss have coding experience? How can he even begin to estimate how long a task should take? If it's not him, then quintuple every estimate, push back against any sort of pressure, AND FIND A NEW JOB ASAFP.
the problem is the owner of the company knowing so many people... I have talked to a recruiter in the past week and as soon as they heard who my boss was they said they can't help me.
It's nowhere close to normal, every place that I've ever seen gives estimates in hours (with an occasional 1/2 hour here and there for trivial tasks). Suggesting that estimates should be accurate down to milliseconds is the most absurd thing I've ever heard with respect to project estimation. It's ok, don't freak out. Just start shopping around as fast as you can.
alright thanks
Is he your local warlord? Why does he have so much pull over all possible programming jobs across all the industries in your area?
i honestly don't know, but i've heard from several people that he is *very* powerful and has control over a lot of people. recruiters won't touch you if you have ever worked with him. I wouldn't be surprised if he is invovled in drugs as well though.
&gt; Since when is the web just HTML again? That isn't what I said. What I said was the right place to attach a click event is from JS itself, not from the markup. &gt; I consider it poisonous at this stage of web evolution as JavaScript should be the expected standard, so we don't have to waste time with fallbacks and even more crafting alternate experiences, still in 2015. Then you clearly either didn't read or didn't comprehend the article I linked, which very clearly demonstrates why that perspective is objectively wrong.
Do the interaction with the event object in some anonymous function and do the actual work in separate function. So, if you have a function with shows a popup menu, you don't hand the mouse event object to that function. Instead, you just grab the parts you need (in this case the X and Y coordinates) and hand those to the function which is responsible for displaying that menu. This way it will be much easier to spawn that menu via other means. Creating a synthetic mouse event object would be extremely roundabout and you also wouldn't know which properties actually matter. Another good example is event.preventDefault(). Some "calculate" or "update" function has no business dealing with some event object. That function will be much better off if it doesn't know anything about any event objects.
I don't know what imagus does, but it probably makes sense for you to use [the Imgur API](https://api.imgur.com/).
imagus will allow users to hoover their cursor over any image link (.jpg,.webm,.gif,ect) and it will render a floating window of that image on that same page. *imgur* api requires authentication and is not so much geared towards embedding galleries or helping javascript interaction :( do you recognize the javascript I pasted above, or know what it's called? 
So instead of adapting the tool to the user, the user has to adapt to the tool. Yeah, you CAN use a wrench like a hammer. Or try using Forth to program anything but a toy examples.
Picky on the sentences. Surely, the article is god, we must listen.
Is typescript worth learning? Not sure how it can work in a team environment when nobody is using it.
On mobile it looks really good
I'm in love with you 
&gt; "Progressive Enhancement Holds Back the Web"... yes! A hardline focus on it does! No, it doesn't. Using Angular (and similar anti-PE frameworks) in contexts where PE is more appropriate is a distinct step *backwards* for the web. It more closely resembles the dark days of Flash than the gains we've made with fancy new web standards by reducing performance, standing in the way of accessibility, and creating unnecessarily high support tiers. &gt; "JavaScript Frameworks Make Development Simpler"... yes they absolutely do for apps with complex user interfaces. Obviously no one could disagree with that. What the author is saying is you should pick a framework that is compatible with PE in contexts where PE is relevant, which is virtually everything developed for the open web. If you're targeting a context where JS availability is guaranteed, like NW.js, PhoneGap, internal LAN webapps, etc, then you're good to go for a hard JS dependency and I'd be the first to applaud you for using one of these frameworks which aren't based on PE. Also of note: AngularJS was originally developed primarily targeting those use cases for that reason. Its overwhelming popularity has caused people to just default to it regardless of whether it's the right tool for the job. Sometimes it is, sometimes it isn't. There are *rational* ways to *measure* that. Scientifically. Like the article did. &gt; "No One Disables JavaScript" and "No One Uses Old Browsers"... Let convince these people to upgrade instead Might as well be waiting for pigs to fly. &gt; "No One Disables JavaScript" and "No One Uses Old Browsers"... of course they do but they can safely be ignored. Why ignore them when it's so easy to serve them the non-JS flow with a plain stylesheet? You don't have to deliver today's UX to yesterday's browser. Showing a splash screen that says "fuck you and your outdated technology" doesn't reveal to users that their technology is old, it reveals the developer's ignorance of better ways of developing websites. &gt; Get out of here with this "perspective is objectively wrong" garbage. It is objectively wrong. As in scientifically measured. You're literally deluding yourself into believing objective facts are false right now. This debate is the global warming denial of web development, and you're the fucking science denier.
Sidebar transition is noticeably slow.
The Weak collections are definitely one of my favorite additions to the language.
Not necessarily business rules. A ton of things could happen in there that are ui related. Also why not handle business rules on event functions? The only need for separation, if you ask me, is if you feel the need to have a method named after what calls it. Methods and functions shouldnt care what calls them as long as the arguments are correct.
Why? Example of where it's confusing?
Sure, do exactly what you say, in a named function, named after what it's doing to the event or data...
It might have just been grunt that was giving me headaches, it's been a couple weeks since I last have the seed a try. I distinctly remember having lots of issues trying to just serve a test page on localhost despite having no problems doing it with express, serving Angular files as static from /public. I think my main problem with bower in the seed is just that I'm new to webdev and having *another* package manager (what else is bower good for other than as a package manager?) inside the web app just seemed like a lot of overhead for what I was doing. TBH, all my problems probably just stem from inexperience and hardly knowing anything about grunt or bower. I've been meaning to teach myself more about testing, but every time I sit down to do it I get distracted by just about anything else, so I totally get the boring part haha.
This is one thing I like about Angular: I can pass `$scope` data into my onClick directly: &lt;input type="text" ng-model="searchString"&gt; &lt;button ng-click="controller.searchMovies(searchString);"&gt;Search&lt;/button&gt;
Great explanations! I read through the underscore source code, it did export object "_" to the global "window" on browser or "global" on Node.JS
This is about the least convincing "don't use jquery" article I've seen yet
Just looked at the design and overall layout (didn't click or browse) but this is probably my favorite 'redesign' of reddit. Good work. I wouldn't complain if this was implemented.
I know HTML and CSS and a tiny bit of Javascript. I know After Effects pretty well, so I was wondering if I could piece together elements from after effects into functions in Javascript. Thank you for clearing things up though, I appreciate that. It's more coding than animating. I understand now. Can't wait to understand Javascript better. 
You have two `operation` variables, one in the global scope and other defined inside `getOperator`function, so it will never equal to five, because you override it with an unitialized value, and since you have no other case, the returned value is `undefined`.
Hover over kikbak.tv in the top left to present the color theme options when viewing the app!
What version of Polymer is this? 0.5, 0.8, or the new 1.0?
Syntactically, I fail to see how this is an improvement. "Kilos" of code is nothing to worry about unless you're google/amazon/facebook, and even then we have cache. Actual performance and speed of development/maintainability is what's important to me. I'd love to see native JS do that for me. This particular article does not convince me that it's there yet.
That's not the same thing at all.
After using dart for over 2 years (which has had "futures"/promises used in its core for ages) I can honestly say whilst this way of doing things is cleaner, looks nicer and functions a lot better than promises, it still eventually gets to the stage where it too just becomes a mess. Asynchronous methods are an absolute pain to deal with. I would have really liked to see async and await keywords in ES6 to remedy this issue but unfortunately we have to wait even longer for ES7 to come around. 
I am a fan of using native over jQuery when possible. I don't shy away from frameworks either, but I began to stop using jQuery with them a long time ago. The real benefit for me was cross browser compatibility. jQuery was helpful for that, but today, most browsers support the same basic API. So all I am left with is a bunch of shortcuts I don't really need since the standard API is clear, easily memorable, and easy to use in most cases.
The javascript code above is minified, which means it has been made as small as possible to make it faster to send to the user. A downside of that is that it becomes unreadable (no line breaks, variable names are 1 letter, etc...). Ypu probably won't learn too much from trying to understand this code. Edit: yes you're right :) that was incorrect. It looked like minified javascript on my phone.
Hi /u/OnTheInfluence, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
You have quite a history of coming into any es6 related thread and shitting on the whole thing. Why do you hate necessary language evolution?
(Something (tells me (Common (Lisp (being) (("large") isn't)) (why it's) not) very) popular)(.)) A lot of developers speak about the "beauty" of a programming languages, but that misses the point of them. Programming languages are intended for humans to tell computers what to do; not to be read as prose. Likewise, programming languages are intended to tell other humans what you're telling the computer to do. From Common Lisp's wikipedia page, the first example `(+ 2 2) ` presents us with Polish Notation which, to my understanding, is used because it's easier for computers to parse *not* necessarily humans. There seems to be this phenomenon among certain developers where they decry C's success and usefulness, and bemoan their Utopian languages. I don't fundamentally understand what, in my mind, is sticking their fingers in their ears and saying "lalalalala I can't hear you" when someone suggests that maybe there's a reason language development is, and has been, going the way it has other than "I'm right and you're wrong." Mark M's email reads as if he would prefer that JavaScript sat around in the state it's been in for the last couple decades. His conjecture is an *argumentum ad metum* claiming the community must hold features to an undefined and arbitrary standard, or JavaScript will surely fail. JavaScript will evolve. Deal with it. Oh, and one last point. "Beauty" is subjective. Can we please stop saying that people should use technologies, or certain technologies are good because they are "beautiful?" Lisp makes me go cross-eyed, but I'll stare at C all day.
Run this in the console. `Polymer.version` &gt; "1.0.2"
Your formatting is kind of a mess, so I used [this tool](http://jsbeautifier.org/) to bring it back to normalcy. To diagnose/debug JS, you'll need to become intimately familiar with the console; just hit `F12` on your browser, and then click on the `console` tab. Doing so, it shows a reference error for `newQuestion()`, and it looks to be due to the way jsfiddle is setup -- I changed the drop-down in the upper-left to `No wrap - in &lt;head&gt;`, and that fixed the new question error. While I was messing around, [I added](http://jsfiddle.net/dawLknzh/3/) a few `console.log()`'s in your `getOperator()` function, which should log some text to the console every time the function is called. This is a very handy way to keep an eye on values as they change. p.s. you shouldn't put HTML tags (those with `&lt;` and `&gt;`) in your CSS; I fixed this for you also.
If you need 3d the de facto standard seems to be three.js. There's a pretty steep learning curve to it. Udacity had a full course on it with examples that's free. If you make it through the first few lessons you should have enough of a basis to make a 3d plot in space. For the second chart you could make your own using a canvas library like kinetic.js (or the currently supported branch on git hub called Konva). Refresh rate shouldn't be a problem. You'd still have to cook up your own mechanism for mapping your data to the graphic, but that should be pretty easy. Kinetic/Konva have baked into them a lot of features that handle the redraw area for you (based on a "dirty" area mechanism.)
 class Foo { // Keep your event handler separate and dispatch the work elsewhere. onFooClick(event) { bar(); } // bar does the work *and* it's not an event handler, so other things can make use of it. bar() { /* ... */ } }
You fail to see that developers don't use jQuery for it's speed, it's syntax is much easier than nativeJS. And even transforming one or two functions to jquery like syntax wouldn't do the trick. JS default ajax functions absolutely suck because it's too long and you can achieve this with just an object in jquery. And speed doesn't matter except you're routing for SEO and even then, jquery gzipped is like 22 kb which is really little! The only reason you should not use jquery, is that if you are using like 10 of it's functions. In that case you can either write those functions yourself or use ZeptoJS or something like that.
But... isn't ruby slower than python? 
What happens if you add something else for the handler function to do later? Now you've got some confusion for future developers. I.E. OnThingClick(event){ makeThingDance(); trackClick(); }
It is a better idea to take these kinds of questions to /r/LearnJavascript /r/learnprogramming and ask for help there. 
It's not a better name. What criteria do you have for a better name? Less characters? Name it something like makeDanceWithEvent
That's not possible with JS yet, hope Reddit will build that feature one day
I think when they speak about jQuery speed, they often mean the loading time apart from other things.
Unlike 'best' challenges, 'worst code' challenges really have no limit. In keeping with [xkcd's random generator](https://xkcd.com/221/), here's my solution: aray = [4, 0, 3, 1, 0, 1, 2, 1, 2, 4, 2, 4, 3, 1, 1, 2, 2, 1, 2, 4, 0, 4, 3, 0, 4, 2, 1, 2, 4, 3, 0, 0, 2, 0, 1, 3, 2, 2, 0, 3, 0, 4, 4, 0, 4, 2, 3, 1, 3, 1, 0, 1, 3, 4, 3, 4, 2, 0, 0, 2, 0, 4, 4, 3, 1, 3, 0, 3, 4, 4, 0, 0, 0, 4, 4, 2, 1, 3, 2, 3, 2, 1, 3, 2, 0, 0, 0, 1, 4, 0, 2, 0, 4, 2, 1, 2, 4, 2, 4, 4] //all numbers chosen by fair dice roll, guaranteed to be random It's a one-liner too.
[Image](http://imgs.xkcd.com/comics/random_number.png) **Title:** Random Number **Title-text:** RFC 1149.5 specifies 4 as the standard IEEE-vetted random number. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/221#Explanation) **Stats:** This comic has been referenced 286 times, representing 0.4161% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cscqfur)
 arr = require('sync-request')('https://www.random.org/decimal-fractions/?num=100&amp;dec=17&amp;col=1&amp;format=plain&amp;rnd=new').getBody().split('\n').map(Number);
Well, you could put just about anything that dot's together into that that ends up either not returning anything useful, or chain groups of things that negate each other, like you did. You could just go on endlessly join/split. 
 Math.randon = Math.random; myresultarray = new Array() makeRandomNumber = function() { digitone = (Math.randon() + '').substr(2, 1); digittwo = (Math.randon() + '').substr(2, 1); digitthree = (Math.randon() + '').substr(2, 1) figitfour = (Math.randon() + '').substr(2, 1); number = digitone + digitthree + digittwo + figitfour; myresultarray.push(number); } makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber(); maketenrandomnumbers = function() { makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber();makeRandomNumber(); } maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers();maketenrandomnumbers(); console.log('myresultarray', myresultarray); https://jsfiddle.net/5me90g01/2/
I'm proud and disgusted.
I think to make it EXTRA random, you need to get 100,000 random numbers and then randomly choose 100 from it.
&gt; Am I the only one sick of everyone pretending like speed should dictate everything that you do in programming? First, I love jquery and use it all the time. But no, speed shouldn't dictate everything, but on the other hand, I feel like the pendulum has swung way too far in the direction of sucky performance and laziness. Disclaimer: I'm an older programmer, who cut teeth on 8-bit micros... I was just reading a lament from a programmer who couldn't believe his text editor couldn't keep up with his typing speed. WHAT THE HELL IS THIS. I use Vim, so of course don't have anything like this problem, but how the hell does an editor get so slow that entering text (its primary function!) is too much for it? And I still remember the horror of trying to use Eclipse a number of years ago. It was so slow and sluggish that it was absolutely maddening and I wanted to tear my hair out. But I also noticed that many people didn't seem to get as frustrated with it, and I concluded that most programmers have come to expect that software has to be crappy and slow. But I was coming from the land of Vim and command lines, where everything is *instantaneous*. SNAP! SNAP! SNAP! That is how the world should be, and the way it *can* be, if we expect our multi-gigahertz(!) and multi-core(!!) powered software to instantly change screens. Bah. Get off my lawn, and do it FAST.
So anyone can use this? What copyright licence does it have? GPL/BSD/MIT would be fine
You're missing the point. This is an acceptable way to handle events; you subscribe with a method to handle the event, and you dispatch anything else to other, reusable methods. &gt; I know it's the convention, but having worked on several huge javascript projects. The biggest pain points when going back and editing them later is figuring out what happens in a method. In your event handler, you can rest assured that your event handler is only handling an event. That includes modifying the event, canceling the event, etc. and passing off any other work that the event handler knows needs to happen. Here's some code you might see in a server daemon that might make more sense. onClientConnect(client) { if (client.ConnectionCount &gt; 10) return; dispatchThreadWorker(client); } dispatchThreadWorker(client) { /* does something to keep from blocking the main thread. */ do { client.Read(); } while(client.Connected); } You wouldn't necessarily subscribe your client connection event directly to your thread dispatcher. It's all about abstraction. &gt; Naming a method onAButtonClicked does not help me at all. Why would I care how I got to the function? It is often useful to know who and what the event sender are, and what event what triggered. &gt; All that name says to me is: &gt; I better not call that anywhere but from that button being clicked, because if I do, not only is the name not helpful, it's misleading. What it should say to you is that, if you need to call that method through anything other than an event that was triggered, then perhaps your event handler is doing more than handling an event and it's time to refactor. &gt; Instead name your functions after what your method does. I often find this to be more difficult to maintain. Now, rather than knowing that a click event is sent to a click event handler, I have to first discover that a click event is sent to a makeThingDance handler. &gt; Can we please stop with the terrible naming convention of onEvent? No. Sorry, but it's not a convention that is unique to JavaScript, nor is it something many feel strongly about. You're also not likely to get traction by complaining about it on reddit. It takes action to make change; this isn't action.
fetch one number, then compare it to random() and if it matches, append it to the array, repeat until 100
Sorry, I should have kept it simpler. I know about HTML entities, and how the browser renders them .. I was merely curious if we can *tell* the browser to render arbitrary characters like: `foo` would be shown on browser, but on the source (ctrl+u) it would be converted in any choice of your pick. The best example is the [cloud-to-butt](https://github.com/DaveRandom/cloud-to-butt-mozilla) extension for chrome. But, that *extension* requires you to install a plugin, whereas I was (if possible) javascript to tell the browser to do the same.. 
Well done ! really enjoyed audio analysis explanation. When trying FFT though, i would've used a typed array, instead of a stock one. Done right, it can really speed things up (But fft was too slow anyways).
All these seems to suggest is that there should be a transpiler from jQuery shorthand to native JavaScript. Though I'm pretty sure the JQuery Ajax function does more than the native api?
Hi @geuis, True, this build does not satisfy all the cases, and should be only used when you know you only have fixed set of html files and css stylesheets. Example use case: Your personal website. Does not have more than 5 pages and uses some theme framework.
 var a = []; function random() { a.push(Math.floor(Math.random() * 100)); return random;} random ()()() ()()()() () () ()() ()() () () () () () () ()() () () () () () ()() ()() ()()() () () () ()() () () () () () () () ()() ()()()() () () () () () () () () () () () () () () () () () () () () () () () () () () ()() ()() () () ()()()()()()()()()()()()()()()()(); console.log(a); 100 000 calls | Time in microseconds --------|---------------------------------- Single | 382.2849998474121 Min | 1.9740009307861328 Max | 1324.9019985198975 Avg | 2.5243190785980225 Sum | 252431.90785980225 Tests took **347 ms** 
I don't know if this sort of fits into what you're explaining: http://webcomponents.org/hello-world-element/bower_components/hello-world-element/ In the page you see "Hello **Unicorn** :)" in the source you see `&lt;hello-world who="Unicorn"&gt;&lt;/hello-world&gt;`. If this is what you're thinking about, really any "dynamic content" works that way. http://jsfiddle.net/wmzsunfc/1/embedded/result/
I'd call that "best".
10 calls | Time in microseconds --------|---------------------------------- Single | 1018030.3849983215 Min | 836415.9189987183 Max | 977601.059999466 Avg | 897743.5375 Sum | 8977435.375 Tests took **10043 ms** for **10** calls.
100 000 calls | Time in microseconds --------|---------------------------------- Single | 59.066999435424805 Min | 0.33699989318847656 Max | 1109.8340015411377 Avg | 0.38504816879272463 Sum | 38504.81687927246 Tests took **132 ms**
100 000 calls | Time in microseconds --------|---------------------------------- Single | 105.47599983215332 Min | 6.145000457763672 Max | 1284.0809993743896 Avg | 6.498907682361603 Sum | 649890.7682361603 Tests took **745 ms**
100 000 calls | Time in microseconds --------|---------------------------------- Single | 2084.3489990234375 Min | 112.78499984741211 Max | 17143.55000114441 Avg | 187.89826342409134 Sum | 18789826.342409134 Tests took **18981 ms**
Agreed
For OP's code arr = new Array(100).join(',').split(',').map(function () { return Math.random(); }); 100 000 calls | Time in microseconds --------|---------------------------------- Single | 529.7259998321533 Min | 19.538000106811523 Max | 1369.545000076294 Avg | 20.736095316524505 Sum | 2073609.5316524506 Tests took **2232 ms** --- They mentioned a for-loop. var arr = new Array(100); for (var i = arr.length - 1; i &gt;= 0; i--) { arr[i] = Math.random(); } 100 000 calls | Time in microseconds --------|---------------------------------- Single | 288.36000061035156 Min | 1.0489997863769531 Max | 890.5349998474121 Avg | 1.2972559914779662 Sum | 129725.59914779663 Tests took **225 ms**
JQuery is more about browsers support than speed. Try to build apps that should run both on ie8 and Chrome with only native code.... 
 aray = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
Author could be trolling. I was laughing anyway.
Reminds me of [bogosort](https://en.m.wikipedia.org/wiki/Bogosort)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Bogosort**](https://en.wikipedia.org/wiki/Bogosort): [](#sfw) --- &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), __bogosort__ (also __stupid sort__, __slowsort__, __random sort__, __shotgun sort__ or __monkey sort__) is a particularly ineffective [sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm) based on the [generate and test](https://en.wikipedia.org/wiki/Trial_and_error) paradigm. It is not useful for sorting, but may be used for educational purposes, to contrast it with other more realistic algorithms; it has also been used as an example in [logic programming](https://en.wikipedia.org/wiki/Logic_programming). If bogosort were used to sort a [deck of cards](https://en.wikipedia.org/wiki/Deck_of_cards), it would consist of checking if the deck were in order, and if it were not, throwing the deck into the air, picking the cards up at random, and repeating the process until the deck is sorted. Its name comes from the word *bogus*. &gt; --- ^Relevant: [^Gnome ^sort](https://en.wikipedia.org/wiki/Gnome_sort) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cscuoh1) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cscuoh1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
I hate clickbait titles!
Well, there's really no relation between the hello in `&lt;hello-world who="Unicorn"&gt;` and the hello in "Hello **Unicorn**". In the sense that `&lt;hello-world who="Unicorn"&gt;` is arbitrary. It could be `&lt;foobar&gt;` or whatever for all we care. It's just an example of Web Components I found and there it "makes sense" to call it `&lt;hello-world&gt;`.
Even with the class syntax, whatever name is used with `class` is still a function with a prototype property, which can still be mutated or swapped at runtime. This is quite different from how classes work in more `classical` languages, where class definitions are more like an immutable template than a fluid object. It doesn't really bother me all that much, although I also understand why some would prefer to avoid any possible confusion. Honestly, I don't know what I'd come up with that's any better.
&gt; I am disappointed by the state of JavaScript build tools in 2015. They are very immature and don’t seem to be well informed by the long history of build tools for other environments and platforms. Amen to that. *sigh* I've still got my eyes open for a decent build tool for JS for when I can't get away with a few script lines in package.json and a tsconfig.json file. It is just a mess out there in JS land with cryptic and poorly documented plugin soup "task runners" which are completely ~~inflexible~~ sorry, I mean "opinionated". It seems to be a miserable in all areas of software with regards to build tools. Autoconf, automake was hell. Maven in Java land also sucks (another convention over configuration, plugin hell which is impossible debug or customise to do what you want). The only build tool I've met which looked good was gradle, a Java build tool. Can someone just port it over to JS please? 
 var array = []; for (var i = 0; i &lt; 100; i++) { var promptText = 'Enter a number. (Only ' + (100-i) + ' more to go!)'; array.push(parseInt(0 + window.prompt(promptText), 10)); } 
Disclosure: I use jquery all the time. I think its good to know how to use alternatives and understand how things work. For most of what I do it's so much more convenient to use jquery. No way in hell I would spend more time than I have to if I don't need to go Ben budgets and schedules. 
 &gt;Your argument is that you want to know what a method does by looking at it. If you're looking at the method definition, you can already tell what it's doing. Have you ever worked with complicated undocumented code? Yes you can always tell from reading the body, I could also eventually figure out what a program does by reading it's byte code. The point is to make it self documenting. &gt;In your example, the method takes in an "event" parameter, so it's intrinsically tied to an event occurring (rather than being a reusable method, where a more descriptive name would make sense). If I want to see what it does when that event occurs, I can just read what it does in the method body, but when looking at that method, there's no obvious indication of what actually calls the method. Is the event object for a "click" event or a "keyboard" event, or something else? So I'm reading through an application on day one, and I'm reading through the application entry. I see a bunch of event listeners. You're saying that it's better to see twenty lines of onClick -&gt; thing.onClick instead of onClick -&gt; thing.doSomethingDescrptive The second one allows me to know why every event listener exists and what it's responsible for, while staying in the same file and keeping the same context of analyzing the main application, not switching, analyzing, and then trying to remember what thing.onClick, thing.onDblClick, and thing.hover does. &gt;IMO one of the important things about naming things is making code traversal trivial. If I'm looking at the code that hooks up the event to your method, it's usually trivially easy to jump to the method's definition. On the other hand, when I'm looking at the method definition, finding the code that wires up that method to an event usually involves a much slower "find references" or even text search. If this were another language, i would be inclined to agree with you. However, this is backwards in javascript. It's often hard to find a method definition. With mixins, extensions etc... The definition can often require searching, and I'm usually only searching for it because I don't know what it does. 
&gt;You're missing the point. This is an acceptable way to handle events; you subscribe with a method to handle the event, and you dispatch anything else to other, reusable methods. Nope, not missing the point. Actively disagreeing with it. &gt;&gt; I know it's the convention, but having worked on several huge javascript projects. The biggest pain points when going back and editing them later is figuring out what happens in a method. &gt;In your event handler, you can rest assured that your event handler is only handling an event. That includes modifying the event, canceling the event, etc. and passing off any other work that the event handler knows needs to happen. Resting assured that it only does one thing in one case is the same as making it non reusable. Naming it after where it came from makes it a mystery function that needs analyzing before understanding it. You can still get all the benefits of this while naming it something descriptive. &gt;Here's some code you might see in a server daemon that might make more sense. &gt; onClientConnect(client) { if (client.ConnectionCount &gt; 10) return; &gt; dispatchThreadWorker(client); } &gt; dispatchThreadWorker(client) { /* does something to keep from blocking the main thread. */ &gt; do { client.Read(); } while(client.Connected); } &gt;You wouldn't necessarily subscribe your client connection event directly to your thread dispatcher. It's all about abstraction. No I would name onConnect something along the lines of initializeThreadWorker &gt;&gt; Naming a method onAButtonClicked does not help me at all. Why would I care how I got to the function? &gt;It is often useful to know who and what the event sender are, and what event what triggered. Ah yes, this keeps being brought up, and is the heart of the problem. It should be obvious from your event listener setup. No where else, in any code ever, do we force a method to keep track of how it got to the state it's in. Method names need to be about what they are doing, not who or why they are called. &gt;&gt; All that name says to me is: &gt; I better not call that anywhere but from that button being clicked, because if I do, not only is the name not helpful, it's misleading. &gt;What it should say to you is that, if you need to call that method through anything other than an event that was triggered, then perhaps your event handler is doing more than handling an event and it's time to refactor. Agreed, refractor and name it something useful. &gt;&gt; Instead name your functions after what your method does. &gt;I often find this to be more difficult to maintain. Now, rather than knowing that a click event is sent to a click event handler, I have to first discover that a click event is sent to a makeThingDance handler. If it can really only work on click events name your event argument "click event" &gt;&gt; Can we please stop with the terrible naming convention of onEvent? &gt;No. Sorry, but it's not a convention that is unique to JavaScript, nor is it something many feel strongly about. You're also not likely to get traction by complaining about it on reddit. It takes action to make change; this isn't action. Oh, should I take out a billboard? Write a book about it? Posting it on reedit gets the idea out there, and gives me a chance to get feedback on others people's stances on the issue. So far I have heard no good arguments, with no good examples of why onEvent is superior to something descriptive. 
Just out of interest, can't you just use Gradle on your js project? I use Rake on my js project and on .NET projects, but perhaps my usage is much simpler than yours.
It doesn't matter that Ruby is slower than python, because both are slower than PHP
Still not covering all the cases. You may find the problem solved in the other comments, read them and try to fix your html markup, css and JS from them. If you want to go slowly, I'll keep replying your questions. So: - Still not covering all the cases - Remove indentation and press TidyUp, keep your code readable. 