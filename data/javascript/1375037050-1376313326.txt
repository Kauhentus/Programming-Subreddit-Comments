IE 9 and below are only of concern in corporate environments where they're irresponsible in regards to technical debt in ways smaller companies and individuals just cannot be. Besides, if we don't make apps that require up-to-date software we will enable the worst sort of misbehavior in those that refuse to upgrade things.
I'm envisioning a userscript that adds special id's to the relevant elements in the DOM. Then you can just link to somepage.html#special_id_employee_name .
I solved your first half, frames not being ready, with a simple ping, the "master" will repeatly ping the "slave", when it pings back, its considered ready. (though now i think about it "master" could assume "slave" will ping window.parent by itself when ready - next release :) ) The second portion you seem to have solved with easyXDM. I looked into EasyXDM, it was too big for what I wanted its `102KB,21KBmin` and XDomain is `6KB,0.7KBmin`so it's about 20 times smaller. If you can forego IE6/7 support, you could just implement RPC over postMessage, in XDomain, it's basically just: #sub-events with id's listen: (id, callback) -&gt; if @listeners[id] throw "already listening for: " + id @listeners[id] = callback unlisten: (id) -&gt; delete @listeners[id] Then adding an ID to each message
IE 8 and 9 are a concern in any online business that has IE 8 and 9 customers. I don't like IE though the fact is, the people who are still using IE don't have the skills or the drive to upgrade it. So business could say, "force them to update, if they don't, their loss...", its not their loss though, its the business's. Hence, at the moment, while there is still a large user base on IE8 9, it'll need to be supported, in both large and small business. And you'll find technical debt wherever you find poor management and/or lack of knowledge, which will also be in both large and small business. Keeping our apps in unison with the current state of technology is good thing, though we still want to try and make them usable for IE, even if it's not optimal. The lack of CORS support will make an app completely dysfunctional, hence XDomain. I generally agree with your points though there is another side that you're clearly missing.
GA Events ftw
If a significant amount of your customers are ignorant and full of technical debt then you're another JC Penny waiting to happen. A slow decay is the best you can hope for if you're not able to take advantage of new technology.
Didn't take many [photos today](https://plus.google.com/photos/112794340410311340601/albums/5905820021987703281?authkey=CPTrxNDh8OCpBg), as you can see, visibility wasn't too great, but I thought I'd share! *Note: I'm not in the pictures, just my dive buddy*
What I'm trying to say is: build something that people who know better will want to use. Feeding off the ignorant and disadvantaged is not something to be proud of.
This is more what I meant. This code is for the parent page. The child page has normal postMessage code that returns a "ready" response and a "complete" response when it's done. function xprot(data){ buildIframe(); //normal code that builds an iframe and attaches it to the body if(!window.messageOpen){ window.messageOpen = []; } window.messageOpen.push(1); //tell something that we have a message awaiting return window.onmessage = function(e){ //only allow this domain to post and reply if(e.origin === otherProtocol+"://"+document.domain){ switch(e.data){ case "ready": e.source.postMessage(data), otherProtocol+"://"+document.domain; break; case "complete": window.messageOpen.pop(); //remove an open message from the stack break; } } } } //this fires but the code doesn't wait until the postMessage is complete xprot({"test":"test"}); //it continues past here because now we have an asynchronous request happening in the background //we need a check function to make sure it's done before moving on function messageOpenCheck(callback){ if(window.messageOpen.length &gt; 0){ //it recursively calls itself in a non-blocking manner setTimeout(function(){ messageOpenCheck(callback); }, 10); }else{ //when all of the postMessage requests are complete it is allowed to call the callback. callback(); } } //my clients are redirecting the page when my functions get done. I don't control their code. function complete(){ //redirect page. } //they need to implement this check process so they don't redirect until all of the postMessage requests are complete. setTimeout(function(){ messageOpenCheck(complete); }, 10); 
javascript:(function(text)%7Bvar%20count%3D0%2C%20dv%3Bif(text%3D%3Dnull%20%7C%7C%20text.length%3D%3D0)return%3Bdv%3Ddocument.defaultView%3Bfunction%20searchWithinNode(node%2C%20te%2C%20len)%7Bvar%20pos%2C%20skip%2C%20spannode%2C%20middlebit%2C%20endbit%2C%20middleclone%3Bskip%3D0%3Bif(%20node.nodeType%3D%3D3%20)%7Bpos%3Dnode.data.toUpperCase().indexOf(te)%3Bif(pos%3E%3D0)%7Bspannode%3Ddocument.createElement(%22SPAN%22)%3Bspannode.style.backgroundColor%3D%22yellow%22%3Bmiddlebit%3Dnode.splitText(pos)%3Bendbit%3Dmiddlebit.splitText(len)%3Bmiddleclone%3Dmiddlebit.cloneNode(true)%3Bspannode.appendChild(middleclone)%3Bmiddlebit.parentNode.replaceChild(spannode%2Cmiddlebit)%3B%20%20count%3Bskip%3D1%3B%7D%7Delse%20if(%20node.nodeType%3D%3D1%26%26%20node.childNodes%20%26%26%20node.tagName.toUpperCase()!%3D%22SCRIPT%22%20%26%26%20node.tagName.toUpperCase!%3D%22STYLE%22)%7Bfor%20(var%20child%3D0%3B%20child%20%3C%20node.childNodes.length%3B%20%20%20child)%7Bchild%3Dchild%20searchWithinNode(node.childNodes%5Bchild%5D%2C%20te%2C%20len)%3B%7D%7Dreturn%20skip%3B%7Dwindow.status%3D%22Searching%20for%20%27%22%20text%20%22%27...%22%3BsearchWithinNode(document.body%2C%20text.toUpperCase()%2C%20text.length)%3Bwindow.status%3D%22Found%20%22%20count%20%22%20occurrence%22%20(count%3D%3D1%3F%22%22%3A%22s%22)%20%22%20of%20%27%22%20text%20%22%27.%22%3B%7D)(%22Bob%22)%3B Just change "Bob" at the end with the employee name.
The page abruptly ends with 'and you should see' and nothing more. It looks like your app is trying to paint the html for the button into the .preview and the js for it into the pre.code but that code isn't present within those divs; they're both empty. &lt;pre class="code"&gt;&lt;/pre&gt;and you should see&lt;div class="preview"&gt;&lt;/div&gt; 
It checks the code blocks inside markdown files. 
You can use a code block to make your code look far more readable. Just put 4 spaces at the start of your code. javascript:( function(text) { var count=0, dv; if(text==null || text.length==0) return; dv=document.defaultView; function searchWithinNode(node, te, len) { var pos, skip, spannode, middlebit, endbit, middleclone; skip=0; if( node.nodeType==3 ) { pos=node.data.toUpperCase().indexOf(te); if(pos&gt;=0){ spannode=document.createElement("SPAN"); spannode.style.backgroundColor="yellow"; middlebit=node.splitText(pos); endbit=middlebit.splitText(len); middleclone=middlebit.cloneNode(true); spannode.appendChild(middleclone); middlebit.parentNode.replaceChild(spannode,middlebit); count; skip=1; } } else if( node.nodeType==1&amp;&amp; node.childNodes &amp;&amp; node.tagName.toUpperCase()!="SCRIPT" &amp;&amp; node.tagName.toUpperCase!="STYLE") { for (var child=0; child &lt; node.childNodes.length; child) { child=child searchWithinNode(node.childNodes[child], te, len); } } return skip; } window.status="Searching for '" text "'..."; searchWithinNode(document.body, text.toUpperCase(), text.length); window.status="Found " count " occurrence" (count==1%3F""%3A"s") " of '" text "'."; })("Bob");
TopHattedCoder had made the code easy to paste into a bookmark, it does not need to be readable. Although its nice to see the clean code to get an idea of how it works. 
What Number.prototype.toLocaleString outputs isn't specified. You shouldn't rely on it if you want identical output across all browsers.
Browsers that don't work correctly ignore the locale parameter. So instead of checking expected formatting, check to see if they return the same thing when requesting two locales that should differ: if (tempNumber.toLocaleString('en') !== tempNumber.toLocaleString('fr')) It's a small thing, but it makes it a lot easier to switch the number you're testing without having to modify your checks. Some countries use dots for the decimal point, some use commas... some countries use spaces as the thousands separator, others use commas, and still others use dots. By checking something like Math.PI*1000000 as tempNumber you'll cover all cases without having to figure out what the formatted string should be, and it will continue to work far in to the future as the French and the English won't agree on a formatting standard any time soon.
It isnt working :( tried copying and pasting to browser. Replacing the bob with "ago" . ( tried to search for ago on on reddit web page since there are a lot of posts made x hours ago) it didnt work. Made it into a bookmark and still it didnt work for me . I wonder why.
I like it - why have HTML and JS when you can just have JS? As a Python programmer, I prefer Muntjac, so I just have Python instead of HTML and JS (wink). 
Thank you many times over, that comparison makes significantly more sense than the route I was going. I noticed Chrome toLocaleString returns this.toFixed(3). Is it short sighted for me to code in that direction?
he says "rules" which is a pretty strong word. More like guidelines. I agree with a lot of what he says (except for the block scope section and having to declare everything at the top, I prefer the declare when you need it approach).
I wouldn't use the try blocks, it's definitely not semantic and if you have break on all errors then debugging will be hell. If you want to try "let" then it's probably better to use [Traceur](https://code.google.com/p/traceur-compiler/wiki/LanguageFeatures). As for inheritance, it's definitely a pattern but there are still pros and cons and other style of programming that you can embrace such as [AOP](http://modernjavascript.blogspot.com/2013/06/aspect-oriented-programming-in.html). Bind is also good, but it can have a [performance impact](http://jsperf.com/bind-vs-closure-setup) as it's really just creating a closure for you under the hood. *edit* and for performance of try/catch - it's slower than IIFE but is closer to what a block scope would be: http://jsperf.com/block-scope-iife-vs-catch
for the next test: Apples, Oranges and Tomatoes -which fruit makes the best pasta sauce!
Thanks.
Fixed, once and for all: javascript:(function(c){function a(){}a.c=function(b){var a=d.a.document.createElement("span");a.style.backgroundColor="yellow";a.textContent=b.textContent;b.parentNode.replaceChild(a,b)};a.b=function(b){null==b&amp;&amp;(b=d.a.document.body);-1!=b.textContent.toLowerCase().indexOf(a.text)&amp;&amp;3==b.nodeType&amp;&amp;a.c(b);var e=0;for(b=b.childNodes;e&lt;b.length;){var c=b[e];++e;a.b(c)}};a.d=function(){a.text=a.text.toLowerCase();a.b()};var d={a:function(){}};a.text=c;d.a.document="undefined"!=typeof window?window.document:null; a.d()})("ago"); Just make sure you're not using Firefox, which is very picky about Javascript URIs.
still doesnt work :( But by the way , I really appreciate that you are helping out. Thanks man :) Sorry for being a nag haha
making a super call is harder than it seems. Try this: A = Backbone.Model.extend({a:function(){return 'a'}}); B = A.extend({a:function(){return 'b' + this.callSuper('a')}}); C = B.extend({}); c = new C(); c.a(); // 'bba' you need to check at each level if it's the same as the previous function. Have a bit more of a look at how Backbone extends works. This might help a bit: https://github.com/rhysbrettbowen/Backbone.ComponentView/blob/master/componentview.js#L66 and don't even get me started on when functions are decorated with things like [AOP](http://modernjavascript.blogspot.com/2013/06/aspect-oriented-programming-in.html)... The only real way is to explicitly call the function you need (such as Backbone.Model.prototype.a.call(this)) rather than try and use a 'super'
How about the updated one? It works for me using the JS Console on Firefox. What browser are you using?
It would be nice if this were a tiny file that checked support and then loaded scripts for non supported input types.
I'd personally prefer just going the Backbone.Model.prototype.whatever.call route, but couldn't you just implement super like this: Backbone.Model.prototype.callSuper = function(methodName) { var args = [].slice.call(arguments, 1), superProto = this.constructor.__super__, method = superProto[methodName]; return method.apply(this, args); } Why the extra code in your implementation? Also, might as well attach this prototype to the other backbone objects (Collection, router etc) Edit: My mistake, that will blow the stack given rhysbrettbowen example. 
Could be nice but it would generate multiple requests. Still, I'll keep that in mind. Thanks for the feedback!
Although I agree with the post in learning how to do Angular the Angular way, it is worth noting for all the jQuery haters our there that AngularJS comes with its own version of jQuery (http://docs.angularjs.org/api/angular.element) &gt;Note: All element references in Angular are always wrapped with jQuery or jqLite; they are never raw DOM references.
Hopefully this didn't come off as jQuery hate. I love jQuery, it's just that using it as the default goto solution with an Angular application is the mindset I'm working on breaking out of. I added a little postscript to mention the above.
It doesn't come off as jQuery hate, I just know some people are haters ;) Thanks for the postscript and for the great article.
I don't know why, but I'm actually having fun typing and deleting random keystrokes. Oh well.
To default to toFixed(3) if no precision is specified (and the precision is greater than 3 decimal places)...
Ajax only works if the domain of the page is the same as the domain of the Ajax call. I don't know what the domain of your server is, but `http://10.0.0.81:31458/` isn't very likely to work. If all else fails, use Firebug in Firefox or a similar tool in other browsers to check out what network traffic there is, or if you get any other error message.
How is it different from appjs? I could never get appjs running on my Mac so maybe I need to give this a look. EDIT: I spent around 2 hours with it. And yes, it worked flawlessly on my Mac which I could not with appjs for last 2 days. I think I am going to be using for my next project. EDIT 2: If somebody is interested in building an open source project around it, PM me.
While the ng-bootstrap-ui is a really cool project, FWIW - there are lots of undocumented gotchas you will be searching around on the github issues page. For instance: [use ui-carousel? you can't currently use Karma / Angular-scenario for E2E testing](https://github.com/angular-ui/bootstrap/issues/606). 
I don't think you should be okay with that. Forcing your team all into the same physical location sends the message that work can only be done effectively when everyone collaborates in the same room. This is a commonly held belief in our field, but it's wrong. Offices are crowded, noisy, and distracting. I highly recommend this TED talk on the subject for more depth: http://www.ted.com/talks/jason_fried_why_work_doesn_t_happen_at_work.html We creative professionals need large quantities of quiet, uninterrupted time to get meaningful work done. Sometimes it's helpful to gather all in one place to work out certain kinds of problems, but if that needs to happen several times a week, then it's either a very unusual project or it's being horribly micromanaged. I live in Silicon Valley and have worked for big companies on major software projects for most of my career. In my experience, most of the projects I've worked on could have been completed more efficiently if we *weren't* all gathering in one place daily, distracting each other. We, as a culture, need to do better at embracing telecommuting. It's ridiculous that we have just come to expect that anyone who wants to work in tech at a decent company should have to relocate to a big city when the vast majority of the work that employees will be doing is sitting in a cubicle working with software. Something that could be done from home just as easily, if not better. I've wanted to leave Silicon Valley for years to move back home and spend more time with my family, but I'm trapped in the valley by the job security. I know I could do 90% of my job from home and I'd be more than happy to fly to the city on a regular basis for the other 10%. Even if the travel came out of my own pay. Traveling to the city once a month would cost me less than the cost of living in Silicon Valley full time. I'm sure I can find a company whose culture is more friendly to that eventually, but it'll be hard to work out an arrangement like that because most employers, like you, are so frequently hostile to it. And if I feel this way about being forced to live in a place as celebrated as Silicon Valley, imagine how many more people would balk at the idea of being forced to live in Utah. I think you'd do well to consider tweaking your company culture to be less reliant on the antiquated notion that most work must happen in the office. The internet is a thing. We can do our jobs from anywhere. Let's be true technologists and figure out how to work together from any location rather than regressively forcing everyone into a single office like it's 1950.
It seems (at this point), that my IE issues were due to my endpoint. Surprisingly, my NancyFx endpoint was returning json with utf8 encoding, rather than utf-8. Which seems to be enough to break the real ajax requests in IE. Still investigating.
**Extension:** Even closure based modules have a public API, you can monkey patch that. Also: [Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) **Testability:** The internal interactions of an object are not what most people test. The public API is. That's the contract of the object. Not it's internals. **Readability:** I'm sorry but everything you've said here is a matter of taste, not of objective readability. If you are unfamiliar with sanskrit, you may find it difficult to read. **Tooling:** Closures can be lexically analyzed. The public API of the closure is just as accessable to static analysis as any prototype-based object. **True Privacy is a bad idea in OO:** No. Just no. If you need to modify the internals of my code, it would probably be smarter to simply write an alternate implementation. -- EDIT -- [Object Capabilities](http://www.youtube.com/results?search_query=object+capability&amp;oq=object+capability&amp;gs_l=youtube.3...28693.31923.0.32109.17.14.0.3.3.0.97.1047.14.14.0...0.0...1ac.1.11.youtube.PaiFccoLkRE) rely on "True Privacy" in order to provide secure APIs in a way where security can be visualized as a call graph. (It's much more powerful than that, that is just one feature that is pretty quick to mention). [Projects like this](http://caja-corkboard.appspot.com/) wouldn't be possible without information hiding. If browser's would take the time to optimize for things like this a lot of security problems would nearly vanish.
Honestly, It's really not bad to use jQuery. Why not use jQuery when it can save you lots of time. The key is that you should only use it within directives and always remember not to attach DOM elements to the $scope.
Yes, for an NancyFx users, JsonSettings.DefaultCharset = "utf-8" fixed the IE issue. Sadly though, I can't fully use this without IE7 support.
The only problem with projects like angular-bootstrap is now that bootstrap has updated and isn't backwards compatible, you now need to either fork it and update the library yourself or wait for one of the other devs on the project to do so. If it internally just did something like $(id).modal('show') then you could just update a bit of the html to match the new bootstrap layout and everything would work just fine. In the end of the day this is just duplicating the code that bootstrap already had and doing it in an 'angular way'. I would rather have simple wrappers around common jquery plugins than a bunch of code re-written to be in an angular way and requiring constant maintenance to keep up with the original jquery plugins
The examples you give are demonstrably false. For example, you provide this source code snippet: var SomeModule = (function() { function privateFunction() { } function publicFunction() { privateFunction() } return { publicFunction: publicFunction } })() And later conclude that `SomeModule.publicFunction` cannot be [monkey patched](http://en.wikipedia.org/wiki/Monkey_patch). While not the ideal method of extension, it would be quiet easy: var MonkeyModule = (function (SomeModule) { // should be using Object.create() to copy but this is a fast example var superFunc = SomeModule.publicFunction; function publicFunction() { // before superFunc(); // might want to use apply() // after } SomeModule.publicFunction = publicFunction; return SomeModule; }(SomeModule)); There are better ways to do this, but your example is false.
From the sound of it, I think you'll need to use something that can handle TCP connections. Ajax, as far as I know, won't work for two key reasons: first, your cross-domain issue (as mentioned by bart2019), and second, you're passing a full HTTP message to a server that's expecting a raw TCP connection. The workaround for this would be to code a simple proxy in a server-side language that would do the TCP legwork, and then have your ajax calls retrieve data from your proxy. If you don't have something like Apache installed, or you don't really care what server-side language you use, I highly suggest Node js for socket programming.
Maybe a code example would help, I'm still not sure what you're asking.
Well you didn't access privateFunction in the monkey patch, the claim was that you can't. And it is still true in your verbose monkey patch that you can't. You also can't access any "instance state". I guess this is the point of private, but it is too private. Sometimes (or more often) you want "package private" or access private anyway. Closures prevent this even for temporary reasons (in languages with private you can still use reflection to access if you have to). It's just not worth it.
I'm sorry but isn't part of the point of making those internal functions private so people *don't* monkey patch them?
Node-webkit? Wouldn't that be more like node-blink these days?
I actually built a simple IRC application with it using AngulaJS. It runs on linux, windows, and mac just fine. On my mobile now, but will post the links to the programs in about an hour. Edit: [Post with download links](http://www.reddit.com/r/javascript/comments/1ja8jk/nodewebkit_quite_possibly_the_coolest_javascript/cbcwhxj).
&gt; Well you didn't access privateFunction in the monkey patch, the claim was that you can't. And it is still true in your verbose monkey patch that you can't. This infers that you would ever be just ripping random parts of an internal function apart, which no method of extension in the current world of programming does. &gt; You also can't access any "instance state". I guess this is the point of private, but it is too private If something was made private by the designer of a module you would have to assume they have a reason for not exposing it into the publicly accessible object. &gt; . Sometimes (or more often) you want "package private" or access private anyway Probably to avoid making another object that represents the sharing, which you should probably be doing. 
Blink is Chrome's fork, is this library based on that?
I wrote something like this for Gate One but my way allows you to attach "before" and "after" events to any function without having to wrap it first... https://github.com/liftoff/GateOne/blob/master/gateone/static/gateone.js (Search for "before:")
Ah, OK. I'd say stick with providing the functionality you originally set out to provide and not worry about fixing Chrome's behavior. &gt; the Google gods can't be wrong. :| Oh, yes they can.
Here's a link to the program I built with Node-Webkit using AngularJS and Twitter Bootstrap. It was just a proof of concept so it may have some bugs in it. It's a fully functional IRC program that lets you join multiple channels at once. It does not support private messages because I ran out of time :). * [Download For Windows](https://docs.google.com/file/d/0B4jpXYivzfWkT0xGdGt6SWt6TG8/edit?usp=sharing) * [Download For Mac](https://docs.google.com/file/d/0B4jpXYivzfWkZVYtR1o3b2lvVDA/edit?usp=sharing) * [Download For Linux](https://docs.google.com/file/d/0B4jpXYivzfWkSmFRb2VnU2JvZWM/edit?usp=sharing) (with linux, you may need to do this: https://github.com/rogerwang/node-webkit/wiki/The-solution-of-lacking-libudev.so.0) Yes, I know you can inject HTML into the chat and it will render, so have fun with that :). If you do decide to try and use it, I will be in the #ngIRC channel for a chat :).
I've had great success getting Node-Webkit to work on any major platform. I'd say give this one a try :).
Neat. There's no need to call getHandler() in your before() and after() functions, though. You should remove lines 24 and 30 in pipez.js.
workers are the main problem usually, nothing more annoying than a fine library that has nothing to do with the DOM that I can't use in a worker easily because it uses $.ajax. Not a problem here specifically but in general unless you rely on something specific in jQuery or are extending a specific thing in jQuery it probably should be stand alone.
downvote considered harmful considered harmful get a thesaurus. 
It seems more featured and stable than AppJS does at the moment.
Between Node-Webkit and PhoneGap, there aren't many kinds of apps that shouldn't be written in Javascript at this point. I mean seriously, unless you're writing a PS3 emulator, or an operating system, or something similarly ultra low level, Javascript can pretty much do anything.
Seriously, it's a bizarre argument. Hiding data and private functions behind public interfaces is one of the main tools we as developers have for managing complexity and allowing code to scale and take on additional features. His arguments involving "reduced testability" are complete bullshit as well. Why does he have a need to test private functions?
I would argue that selecting and modifying elements is probably not one of the areas that you should reach for jQuery. This type of pattern (1. select element(s); 2. modify elements) works well, but could usually be refactored into a directive applied directly to the element(s) in question. This type of refactoring helps you build components that can be reused easily elsewhere in your app. Perhaps a good example of where the 'select and modify' example might be necessary is when you are using Angular.js to augment pre-existing markup or markup over which you have little/no control. I used to wrap jQuery plugins in directives (as can be seen in the Plunker source for the layout and notifications), I'm in the process of rewriting those components in Angular. For example, I've been hacking on http://plnkr.co/edit/djKW1GTDjeulaSUUtu7o?p=preview to replace the dependency on part of jQuery-UI and on jQuery.layouts.
Yes I agree. I rarely since that I need to use jQuery. And most of the times I feel i need to use jQuery is because I need to break my directive down into smaller directives. But there are still some times that I just feel it is right to use jQuery. As to jQuery wrappers. I dislike a lot. If you have the time it's better to rewrite them.
There may be other issues, but the first thing I notice is that your url is not in quotes... EDIT: Troubleshooting tip for AJAX calls - put the url you are trying to use in your browser address bar and load it. If it returns the data you are expecting, the problem is in your javascript. If it does not return the data you are expecting (which is likely in this case, as it doesnt sound like you are dealing with a HTTP app at all), the problem is not in your javascript.
While I can agree with you about the quick-to-get-it-going utility of node-webkit (yay x86!) [on mobile the landscape isn't so pretty](http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/).
I am using node-webkit to port my game http://qbqbqb.rezoner.net It even works via WINE so i can easily build Windows package without leaving Linux The only flaw of it is... There is none
In my opinion you should always utilize css when possible. That goes double for when scroll events are involved.
I agree. Its usually more fluid and requires less computational power than running a script after every scroll event. I'm still trying to figure out how this is different from using fixed positioning.
Yay for fragmentation! Stop with the uberhipster bullshit and just use npm like the rest of us for fuck sake.
Not only that, but if jQuery is loaded before Angular then it will be used instead of jqLite. So you'll be able to use things like .find inside directives. Which is handy.
No they are not, they are a bunch of bloggers who are good programmers. Damn this is one of the stupidest lie's I ever seen. Opera,MDN, and any large company would not stoop so low as to make attacks on a non-factor like w3schools. Stop the ignorance.
AppJS doesn't make a really active impression. The last commit [was 4 months ago](https://github.com/appjs/appjs/commits/master) and [appjs.org](http://appjs.org/) has been occupied by a school girl. They have let their domain expire so now their site is on [appjs.com](http://appjs.com/) but the .org site is still the one linked from their GitHub repo. It's a mess and it doesn't look like the developers still care very much. It you want to use something that is less likely to die, I'd stick with Node Webkit.
It's not like Webkit is now Blink. There is now Webkit and Blink. And Blink is a fork of Webkit used in Chrome.
I used this for a small project the other day and it worked really well. It's so nice to be able to develop using web technologies but not have to worry about browser support or download times.
A "fork" of Webkit? That's not how it looks to me. What is going to remain in Chromium once the transition is complete? As I understood it, there were three major parts in Webkit before the Google people started the Chrome project: the infrastructure (network libs, thread management etc.), the layout engine, and a Javascript engine. The Google folks stripped the JS engine right away, replacing it with V8, and the infrastructure couldn't have been left intact because of the whole multi-process model they use. That leaves us with the layout engine, which they replaced now since it gives them vast opportunities for optimization (the new engine supporting jitting DOM code, for example). So, *what exactly* remains in the current Chromium trunk from Webkit to make the name "node-webkit" justified?
It's not a fork, it's a replacement layout engine they wrote because Webkit was inadequate for their purposes.
Yeah, I remember having heard them call it a fork with optimizations to make it suit better for Chrom(e|ium). I always thought, Webkit was only the rendering engine and everybody had always used their own JavaScript engine. Like Chrome uses V8 and Safari uses Nitro. But you're right. If node-webkit uses chromium they should rather call it node-chromiumwindow or something. But then.. it's just a name. Edit: "node-chromeless" would be a good name. As it's Node.js + Chromium without the browser chrome. 
It's not really "with Yeoman and Jenkins" if all I see is Grunt related. And then not even that as most of the work is actually done in a shellscript. If it was really Yeoman based then it didn't have any platform dependencies. Should be *"Continuous Deployment with shellscript and using grunt to trigger a CLI command."*
Thanks for the comment, here's a response: **Extension:** Not if you want your monkey patch to access any of the original functionality that's inside private methods - as the example demonstrates :) **Testability:** Most people don't need to test private methods, but some find it useful to test, especially in open-source code where a lot more is private. **Readability:** Yes this is subjective. Still - I'd argue that most folks new to JS would agree it's harder to read &amp; conceptualise than prototypes. **Tooling:** Sure - but most tools don't. **Privacy is a bad idea in OO:** Really? As an example, a public function on q.js (Q.async) was broken recently. To test a on a new version I had to download the source, NPM link it, and then hack around. If I could access the private functions referenced by Q.async - like in smalltalk, ruby, JS with objects, or python - I could have done it in no time. As is suggested by the phrase "True privacy" - which you edited out of the subtitle, rhetoric bonus ;) - this article is criticising a too-strong *implementation* of privacy. It's not denying the value of communicating whether something is private. I've written a [follow up](http://sidekicksrc.com/post/enforced-privacy-is-rude/) to stress that.
Not well written, and weird pacing with the first few paragraphs moaning about browsers. Inspire beginners, don't scare/bore them!
&gt;Also to date there is no firm evidence that CSS animation is necessarily higher performance than JavaScript animations. It's about the implementation. You mean the implementation of the browser renderer or the animation from the user? I think there is plenty of evidence that css animations are higher performance, if for no other reason than they take processing off the JavaScript thread. &gt; Also JavaScript animations are asynchronous and do not 'block' the thread. not sure where you're getting this from... if you have a setTimeout it doesn't really make it "asynchronous" it still runs in the same thread just not in the same call level (not sure what the correct term for it is) it will still need to run on the same thread and while it runs no other javascript processing can be done. I agree that "pre-rendering" is the wrong term but I'm not about to get bogged down in semantics.
I'm currently working on a project wherein my server needs access to a WebKit runtime in order to produce scheduled PDF exports of my website. I'm still new to browser-less javascript... Can anyone explain to me why this would be a better/worse/equivalent choice over phantomjs? I realize the intended purpose of the posted module is to write native graphical apps, but the ease-of-use makes it sound compelling for my use case as well.
* According to Google Blink is "a new open source rendering engine based on WebKit" ([Chromium Blog](http://blog.chromium.org/2013/04/blink-rendering-engine-for-chromium.html)). * "Fork" commonly means that you "take the source from someone's repository at certain point in time, and apply your own diverging changes to it" ([Stack Overflow](http://stackoverflow.com/questions/2916849/what-do-these-words-mean-in-git-repository-fork-branch-clone-track)). Blink is undoubtedly a fork of Webkit.
If they actually intend to do all the things they have in mind, such as tight integration between statically compiled code and V8-compiled code (and I don't doubt that, because their reasons are obvious), then mere "based on" will not suffice. Article headlines such as ["Google's Blink team pulls 8.8 million lines of WebKit code in one month"](http://www.engadget.com/2013/05/16/google-blink-team-pulls-8-8-million-lines-of-webkit-code/) really make you wonder *what* is it that they are going to eventually keep (if anything).
So simple, I like it. I've been kicking around an idea in my head for a personal project that'd be dead simple - and having a setup/workflow like this seems like it'd be a perfect fit for the size/scope of the project I'm thinking about. 
Ya, the deploy process is what really grabbed my attention. Time to sit down and take a full look into grunt.js.
I've been very cozy in the Microsoft .NET land - been seeing some great tooling with Yeoman, Grunt, etc. I want to do a project using these just to challenge myself a little, and maybe some of what I learn I can bring back into my work environment. 
Sigh. That article again. I've had to explain this to a half dozen people. That article's methodology doesn't support its absurdly loaded headline. The headline should be "why JS is slower on mobile than on desktop and why JS is slower than native." Yes, not as catchy, sensationalist, and attention-getting, I know. But more accurate. The article completely ignores that for the vast majority of mobile webapps, the bottleneck isn't the JS parsing, it's rendering and reflows related to HTML and CSS. Moreover, mobile web apps aren't categorically slow, like the article implies. They're slower than native. And most of the time when written properly they're not so much slower to make an actual difference in performance to the end user. And while the performance stats could certainly rule out JS for writing many different kinds of apps (like the ultra low level examples in my OP), the universal response I've seen to the article has, as always, tilted towards extreme positions rather than nuanced ones. Articles with absurd (and inaccurate) headlines like that do nothing but polarize people towards thinking things like "OMG the web sucks and is overhyped!" And that's not helpful to anyone. Your reply and summary of the article is case in point on why that kind of incredibly loaded headline and slant makes for bad writing. That article is an editorial disguised as science. And thousands of devs fell for it.
A conference featuring the Angular Team and much more.
Are you associated with the conference? Was wondering if there was any way to submit proposals for talks.
http://docs.closure-library.googlecode.com/git/closure_goog_fx_draglistgroup.js.html uses the closure library, though I'm sure you could port it to jquery. Example here: http://closure-library.googlecode.com/git/closure/goog/demos/draglistgroup.html
i am running the ajax call locally from my computer, which has access to this IP, both on the same domain. I don't get anything in the console (no errrors or otherwise). 
This is really great... and I hate you and your skills :-P
Awesome! Thanks so much for sharing. It's not essential for it to be jQuery. I am open to pure JS and jQuery alike. Thanks!
nice :)
Thank you, not sure if you have noticed but (extended) soundtrack is available for free at http://rezoner.bandcamp.com - also I post a lot of experiments on https://soundcloud.com/rezoner/
Damn this is one heck of a JS file :D gj
Are you Merrick Christensen from JSJ?
I certainly expect community members to be able submit their presentation proposals :-)
Great work! Also, nice job making it responsive. I'm able to use it without any issues on my HTC One. I'll send this around to all my designers :-).
I hand code all of the patterns. That way I know they are coded perfectly. You're right, it would be similar to my squared pattern. This is how the Squared document does it: There is a definition for the square at the top of the page, like so: &lt;defs&gt; &lt;rect id='s' fill='#000000' width='5' height='5'/&gt; &lt;/defs&gt; then the square is used with fill-opacity of .04 like this. This is repeated a ton of times but with different x,y,and opacity values... &lt;use x='0' y='0' fill-opacity='0.04' xlink:href='#s' /&gt; So what you would need to do differently for those triangles would be make it a path tag so that you can draw a triangle instead of a rect. Then for half of the paths, you would add the attribute transform='matrix(-1 0 0 1 0 0)' which will flip the path along the x-axis. Give it a shot in the code editor! I might try to play with it later as well.
After seeing the static website creation tool [jekyll](http://jekyllrb.com/) I was inspired to create a way to quickly create a data source for simple JavaScript apps and prototypes without having to go through the hassle of setting up a server. My first NPM module so love to hear some feedback.
Thanks. I didn't spend as much time on mobile, since most people do their design work on desktop. Glad to hear it worked though.
Is this going to be streamed and/or recorded.
That's not true. Trust me, there is *no* need to overwrite self.handler with a new anonymous function each time you append a new element to your before/after arrays. The original function closure contains references to the same variables and will see the newly-added elements when the function is eventually invoked.
The omission of "True" was accidental, not rhetorical.
This is really awesome! Really helpful :D
Great work! I strongly encourage you to take a look the dyson node module. A little bit different but same concept of quick and easy api servers
Fantastic response sir. edit: just realised this post is 12 days old haha my bad.
The idea that CSS animation being higher performance simply because its on another thread, is an assumption that must be supported. Set timeout is asynchronous, and not blocking the thread. Yes while it's executing nothing else is, but that is not the same as blocking. If the js thread is getting bogged down, animation is not the first place to look for diagnosis. Pre rendering is a meaningful term not a semantic difference. Your script is excellent, just remove the incorrect term and call it dynamically generated CSS animations or something; and remove the performance claim and you are 200% awesome in my book.
Can't use on my phone. Tells me to upgrade my browser.
That is cool! Gives me some ideas to play with!
Thanks for the reply. That's what I am starting to lean towards. I assumed I would at least ask the community to see if there may be anything in the wild I could go with, considering all of my Google searches were pointing me to jQuery UI sortable. Since I had never worked with the functionality before, I very well could have been searching the wrong keywords or something. We will need IE7 support, as well as Posting element location to the server and save them for user sessions, as well as other views that would use the positioning. Thanks again :-)
Neat, but whats the purpose of replacing x,y,z with 'deadbeef' variables? This looks to work just as well, and is more concise. return function(a) { return new Function(tokens, 'return '+ logic + ';')(a[0], a[1], a[2]); }
Of course. Having read you response, though, I think if you need IE7 support following my advice will unfortunately bite you down the road. Normalizing drag/drop handling for the earlier IE versions is going to make your code more involved (feature detection, workarounds, etc). Sorry I do not have any recommendations in that regard, but I'm sure there's something out there someone else in the community knows about.
yup, that is who that is
I did this before in high school... It takes like under 100 lines of code. You should be able to bang it out really fast
Android &lt; 2.3 doesn't have SVG support. Sorry about that
Very cool. This could find its way into a project of mine. 
Thanks. That looks interesting seems to have some nice features
http://microjs.com/#drag **Edit:** added search term
Makes sense, wonder if they have ideas to use it on Firefox OS.
I'll give it a shot. Are you considering adding user logins so that we can submit our own patterns? Also, couldn't you generate a fallback PNG for incompatible browsers? You should probably do this on the server-side for best cross-browser compatibility, but on the client-side you could do [something like this](http://stackoverflow.com/a/3976034/105428) to go from SVG to canvas to PNG/JPEG. A static image wouldn't work for the backgrounds that are stretched, but for the patterns it could work well.
Javascript actually executes synchronously if they are in script blocks on the page or are called in as a separate file. The page will stop loading until the javascript has been executed. There is a new "aync" attribute that can be put on javascript files being pulled in (and 'defer' attribute from IE) that will tell the page to load the javascript file but not execute until the page is loaded. I believe the async tag will load those files in any order but defer will preserve the order they were put in the page. This might help a bit: http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/ it's about loading scripts without blocking and links to other articles that helps
With windows, I have never been able to use yeoman and the angularjs package you can install. It always fails due to some karma generator error. Anyone else have that issue?
Here's the relevant Kickstarter: http://www.kickstarter.com/projects/creationix/js-git Looks super interesting, and nice to see Mozilla chipping in. I'm looking forward to seeing this project come to life. 
i did check out [cloud9](https://c9.io). Cool stuff, but not mine.
I actually like cloud9 quite a bit, but only after I learned all the key commands. I love that it's a hosted node.js environment + mongodb, full socket.io support (unlike heroku), and github integration.
Mismatched braces. if(choice1 === "paper") { if(choice2 === "rock") { return "paper wins"; } else { if(choice2 === "scissors") { return "scissors wins"; } // Whoops! } The comment // Whoops! marks the spot where your indentation mislead you. The if block for looking at choice1 === "scissors" is enclosed in the if block for choice1 === "paper", so it will never be entered. Incidentally, you don't need to check if choice2 === "scissors" in the above block; you know it's not paper because you checked for ties in the beginning. This kind of situation is well-suited to using a table or nested objects instead of using if statements for flow control. Consider something like var matchup = { paper: {paper: "tie", scissors: "scissors", rock: "paper"}, scissors: {paper: "scissors", scissors: "tie", rock: "rock"}, rock: {paper: "paper", scissors: "rock", rock: "tie"} }; var result = matchup[choice1][choice2]; if (result === "tie") { console.log("The result is a tie!"); } else { console.log(result + " wins!"); }
I have developed something that gets you halfway there. See [dragjs](https://github.com/bebraw/dragjs). It is framework agnostic. You will have to animate those transitions etc. but that might be a starting point.
True... Here's a direct link: https://www.bountysource.com/fundraisers/325
FYI: Yeoman doesn't give a **** about Windows. It's happens with many generators and modules.
Yeoman loves everyone. Generators are not all maintained by Yeoman. If you're having a Windows issue, just create an issue so it can be fixed.
Just curious, are any of you other /r/javascripters using any of these libraries that get linked here everyday? It seems like so many of these things add little language features, which would be nice, if you didn't have to include them in your page downloads. Seems to me if the JS language itself doesn't have the features you need to be productive you should use a language like coffee or dart and just compile to JS.
Pretty cool. My only critique is that your minified source isn't minified enough. I would run it through a more rigorous minification process, you can get it down to 60% of the current minified size: !function(a,b){"function"==typeof define&amp;&amp;define.amd?define([],function(){return a.overload=b()}):"object"==typeof exports?module.exports=b(require()):a.overload=b()}(this,function(){function a(a){return a.name||a.toString().match(/function\s+([^(]+)/)[1]}function b(a,b){if(a.length!=b.length)return!1;for(var c=0;c&lt;a.length;c++)if(a[c]!==b[c])return!1;return!0}function c(b){var c={}.toString.call(b).match(/\s([a-zA-Z]+)/)[1];return"Object"==c?a(b.constructor):c}function d(a){return Array.prototype.map.call(a,c)}function e(a,c){return b(c,d(a))}function f(){var b=[],d=function(){},f=function(){for(var a=0;a&lt;b.length;a++)if(e(arguments,b[a].types))return b[a].func.apply(this,arguments);return d.apply(this,arguments)};return f.when=function(d,e){if(2==arguments.length&amp;&amp;"Array"==c(arguments[0])&amp;&amp;"Function"==c(arguments[1])){var g=d.map(a);return b.push({types:g,func:e}),f}throw new Error("usage: when([types...], function(){ ... });")},f.fallback=function(a){if("Function"==c(a))return d=a,f;throw new Error("usage: fallback(function(){ ... });")},f}function g(){if(1==arguments.length&amp;&amp;"Function"==c(arguments[0]))return f().when([],arguments[0]);if(2==arguments.length&amp;&amp;"Array"==c(arguments[0])&amp;&amp;"Function"==c(arguments[1]))return f().when(arguments[0],arguments[1]);throw new Error("usage: overload(function) or overload(array, function)")}return g});
If you use a good text editor that understands JavaScript syntax you can easily avoid these kinds of issues. I use [http://www.sublimetext.com/](http://www.sublimetext.com/) with a bunch of JSLint and Prettify packages to avoid this problem myself.
While Yeoman is now ["officially supported in windows"](https://github.com/yeoman/yeoman/issues/216#issuecomment-19749465) many generators, including generator-angular, contain a number of dependencies (ie: SASS/Compass) that are non-trivial to configure on various versions of Windows; as a result Windows is not really treated as a first-class citizen IME. If you are looking for a lighter-weight alternative that doesn't come preconfigured with all the bells and whistles as the yeoman angular generator, you could always try my [Lineman Angular Template](http://www.github.com/davemo/lineman-angular-template); we've made support for Windows (and Linux, for that matter) a priority when building Lineman. Give it a shot and let me know if you have any questions! :)
An idea/exercise/thought: Consider saying *who* wins, not which move wins. "User wins!" vs "Rock wins!". 
In addition to what stephenplusplus said, we don't get a lot of Windows testing. So any feedback, bug reports or fixes you can provide us with is highly appreciated.
You should checkout [commander](https://github.com/visionmedia/commander.js), it's how I build all of my command line apps.
I had the same issue on OSX and installing the karma generator fix it
Pretty cool library. You're not showcasing an awesome feature though. Your example should read as: var createPerson = overload([String], function(name){ return "name: "+name; }).when([String, Number], function(name, age){ return createPerson(name) + ", age: "+age; }).when([String, Number, Function], function(name, age, callback){ return callback(name, age); }); In the 2nd overload, I'm calling the 1st overload, which lets me remove the duplication from your example. Pretty nice solution, my only complaint is I don't like using overload for the first function, and then .when for the rest. I'd probably change it to overload.when for the first one, and then just chain the whens. That way they all have .when in front of them, which makes it easier to read. var myFn = overload .when([String], function(s) { // ... }).when([String, String], function(s1, s2) { // ... }).when([String, Number], function(s, n) { // ... }); But that's just a personal preference. Nice work overall!
I use it too, the only thing that bugs me is how it does list choices... the trailing colon is awkward Choose one of the following 1) foo 2) bar 3) baz : _ 
Nice! These all look really great on my retina display. By the way, I just noticed that your link was in the [HTML5 newsletter](http://html5weekly.com/). 
FYI `generator-angular` doesn't require that unless you answer "yes" to using the SASS/Compass Twitter Bootstrap. If there's something else wrong, please file an issue.
I just noticed a bit of traffic coming from e-mail. Now that makes sense... lol. I had a huge wave of traffic on the night I launched it. David Bushell tweeted it and Smashing Magazine retweeted it. It was 1 AM my time, so I was asleep, but analytics showed about 2000 unique visitors in that first hour alone. Thanks for the graphic suggestion, though. I really like that one.
It's still worlds better than var userArgs = process.argv.slice(2); var value1 = parseInt(userArgs[0]); var value2 = parseInt(userArgs[1]); that is used in the article. You can use [nopt](https://github.com/isaacs/nopt) which is what grunt uses. But it's not as nice to work with IMO as commander. I wonder if someone has forked commander to use nopt?
I think JS is so great because it has a huge wealth of libraries. Not having everything baked into the language means developers are free to innovate the best APIs that make building apps easier. Everyone is free to scratch their own itch. Innovation happens much faster this way. But, I think the best value for all these libraries is not necessarily getting use in actual web pages (only a small percentage of these will see any production use), but more in the ideas contained therein. Even if a library doesn't catch on and see wide use, there is a good chance the idea will give someone else an idea, and the chain continues in perpetuity.
I think the issue is that the default for the Compass question is `true`; this is somewhat strange because the wording of the question as it appears in the prompt is: `Would you like to use Twitter Bootstrap for Compass (as opposed to vanilla CSS)?` which would imply that the default is vanilla CSS. I submitted a [pull request](https://github.com/yeoman/generator-angular/pull/300) to fix the default value of the question to better optimize the base experience for cross platform love.
Things are getting better with Bower and Usemin and whatever other dev tools I'm behind the curve on...
Anyone starting to get the sense that we're *overtooling* on the front end?
I have implemented something similar. See [annotate](https://github.com/annojs/annotate).
Go about 2cm from a largish planet and fire one at a tangent to the surface. Just pull back a little bit.
it has other options to 'package' an app without zipping -- see https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps
That or [optimist](https://github.com/substack/node-optimist)
There's an interesting discussion on Hacker News https://news.ycombinator.com/item?id=6133796
Looking at it, I would guess: http://closure-compiler.appspot.com/home
Side note: I wrote a bookmarklet for Rock Paper Scissors the other day: javascript:!function(){for(var d,e,g,a=0,b=0,c=0,f="";d=prompt(f+"rock, paper or scissors?\n(r, p, or s)")[0];)e=function(a){return{r:"Rock",p:"Paper",s:"Scissors"}[a]||"FLUB!"},g="rps"[Math.floor(3*Math.random())],f="you: "+e(d)+"\ncpu: "+e(g)+"\n"+(d==g?(c++,"DRAW"):"r"==d&amp;&amp;"s"==g||"p"==d&amp;&amp;"r"==g||"s"==d&amp;&amp;"p"==g?(a++,"WIN"):(b++,"LOSS"))+"\n(record: "+a+"-"+b+"-"+c+")\n\n"}(); It is "endless" and tracks the player's record.
Now THAT is a boss open source project name. 
 var fourtyOneYearsAgo = (new Date().getFullYear() - 41); Using the new Date() constructor will always give you the current date. 
Check the functionality, if you have some odd things in there, closure compiler can 'break' them. And I must have been wrong with my guess if Shark_Kicker got it down by 40% when you only achieved 33%, I don't know what he/she used then.
Not necessarily.
thanks! :)
Am I the only one who finds solutions like these clever but absolutely hideous, ass-backwards solutions? I mean seriously - if your chosen framework means you have to: * User-agent sniff to spot search engine spiders (bad form) * When you detect one send it off down a different code-path from regular users (bad form) * Spin up a headless browser, rendering the HTML and running any javascript on the server and then returning the resulting HTML back to the search engine spider (bad form) ... at some point you have to just face the realisation that *you chose the wrong damn framework*. Build a static site in HTML (or a framework that degrades back to HTML and links) and you get *all* this functionality for free... essentially zero extra development effort, and for significantly less server-cycles than doing the work of the browser *and* the server every time a search engine hammers your site. Then if you need to layer JS over the top to intercept link-clicks and page-reloads and you can build an AJAX javascript app that doesn't require disgustingly baroque and workarounds just to fulfill basic functional requirements like "must be spiderable by search engines". I mean I get it if you think you're building something with no requirement for SEO and suddenly some dickhead in mangement decides it does... but even then projects like this are nothing but nasty, inefficient, over-complicated workarounds to a problem that should never have existed in the first place. They deserve the reaction "Oh man - that's probably great for someone who gets painted into a corner but I hope *I* never have to rely on something as nasty as that", but never "Oooooh!" or "Hey, cool!". :-/
Sencha/ExtJS is VERY much a walled garden. It took me awhile to get into the groove. I did enjoy the results, but I also was okay not trying to "push it". I do find the whole JSON object approach very different than marked up HTML though. The worst part about Sencha is the whole "no one has ever done this before" feeling I get when surfing their forums. There's basically one or two guys who know it all... and if they don't answer, you're up the creek. Otherwise... great looking results.
&gt; doing the work of the browser and the server every time a search engine hammers your site. Unless, you know, you have a sane caching layer like varnish.
I would also worry that google would have technology to detect this kind work-around, and treat the results with suspicion or lower rankings. Since this kind of work-around would inevitably be used to game the SEO rankings by some (presenting different information to google than users), google will likely give such sites a lower score (if it doesn't already).
How to be better at JavaScript 1. Stop using add-on libraries for minor things. 2. Even if you're using an add-on library for all the good things it brings (i.e. jQuery) realize you don't need to always run everything through it. 3. Learn JavaScript 4. Benefit from reduced dependency on external libraries and better performance from your more streamlined code.
For people about to implement this: make sure you consider people who *purposely* left the window open and are hoping to continue where they left off when they get home from work. From a UI perspective, trigger the event to give them the option to expand the feed or update it as opposed to automatically FORCING them to. I only say this because there are a couple websites I've found where I purposely leave it open and when I return I have to scroll for 15 minutes to find what it was I left open to read, if I even find it at all. 
I wrote a really fast Ruby webcrawler a few years ago now that is also called Arachnid: https://github.com/dchuk/Arachnid I don't care one way or another that they used the same name, but just wanted to say that I agree, Arachnid is a boss open source project name :)
If I have a choice between using 50-60% of a thoroughly tested library and writing stuff from scratch I'll always use a library. If you want to write everything from scratch feel free to do so. I prefer to get the project done faster with well tested code. If that costs a few additional kb so be it. I usually use more than half of the library anyway (lodash, moment, knockout) and only used jquery in my example because it's simpler to write and was not part of the question or answer.
I don't really understand the Javascript community. Every day I see posts of libraries that would be trivial for a software engineer to write, and aren't even original ideas -most of them are to bring features from modern languages. Is Javascript mostly a beginner/amateur development ecosystem, or have I overlooked something?
I don't think you actually read what I wrote. I never advocated writing everything from scratch even if an add-on library is a good solution. What I did say was to not try to use them for every little thing. We'll talk jQuery for a moment. Let's say that you want to change the href of that Snoo link in the top left from "http://www.reddit.com" to "http://www.reddit.com/r/javascript". You can use jQuery to do so: $("#header-img").prop("href", "http://www.reddit.com/r/javascript"); Or vanilla JavaScript: document.getElementById("header-img").href = "http://www.reddit.com/r/javascript"; They wind up doing the same thing, but the jQuery version had to do a lot more work. It doesn't seem like it should make much of a difference (and it probably really doesn't in this basic example), but it can with a JavaScript heavy web application or something that has a large amount of elements. Just for fun (written to be easily readable by everybody): var testing = { jqVersion: function (iterations){ var start = Date.now(); for(var i = 0; i &lt; iterations; i++){ $("#header-img").prop("href", "http://www.reddit.com/r/javascript"); }; console.log("jQuery version: " + (Date.now() - start) + " milliseconds"); }, vaVersion: function (iterations){ var start = Date.now(); for(var i = 0; i &lt; iterations; i++){ document.getElementById("header-img").href = "http://www.reddit.com/r/javascript"; }; console.log("Vanilla version: " + (Date.now() - start) + " milliseconds"); }, runBoth: function (iterations){ testing.jqVersion(iterations); testing.vaVersion(iterations); } } For testing.runBoth(100000) I get: jQuery version: 1175 milliseconds Vanilla version: 379 milliseconds
You should check out this library. It is very well written and the code runs really fast. http://vanilla-js.com/
Tried it. Use it a lot actually. But I prefer knockoutjs to writing my own backwards compatible MVVM code. Silly me right.
If you need to check for updates using ajax this lets you know when everyone's done with your object so you can stop polling.
This isn't new idea, but it is something that many people will need. It's silly to implement it slightly differently over and over again, doing that would be very beginner/amateur.
Newbie web dev here, but huge music fan and creator. Can you expand on some of the more real-world uses or musical uses of something like this? I would assume it's the first step in building a synthesizer engine as a fully native web app, is that correct?
While that is true, mixins are a bit problematic in terms of side effects. And that is where Traits and Talents become a better solution. On the other hand, the idea behind CocktailJS is to have code to be at least a bit more elegant and organized. You can write prototypal inheritance as well just in plain js, but when you start reading your code finding those "snippets" buried in the middle of a file makes your daily job a bit hard. But don't get me wrong, I'm not trying to sell anything here, it is just an alternative to bring a different way, which I feel more comfortable with. But ultimately it is up to the group of developers what's best for you. Otherwise I cannot see why should anyone would write CoffeeScript for example.
Yeah, there are musical uses for noise. I've got a couple of examples here: http://jsfiddle.net/szms8/6/ One of them is a saw wave behind a lowpass filter modulated by low-frequency pink noise, which gives a sort of "unstable" synth effect. The other is brown noise modulated by an LFO to give an effect sort of like waves on the beach. You're right that noise is also a building block for synthesizers. For example, noise is a key ingredient in [Karplus-Strong string synthesis](https://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis), which is a great way of synthesizing guitar-like sounds. Take a look at http://en.wikipedia.org/wiki/Noise_in_music for more ideas.
Sorry! We didn't really know about your project... had we known, we'd have picked a different name. Arachnid sounded just cool and appropriate enough for the job, and is indeed a boss open source project name. By the way, awesome spider ASCII!
One other application I know of is to use low-level noise for dithering, which can help avoid some kinds of aliasing.
Exactly. It's all really a single well-known pattern: don't code like an idiot!
"Don't X like an idiot" is an idiotic thing to say in lieu of concrete suggestions.
Suitable place /r/LearnJavascript
The `removeToInsertLater()` function was interesting. I know jQuery has [$.fn.detach()](http://api.jquery.com/detach/) which I suspect was engineered to do something like this, but it has the obvious difference of losing its location in the DOM, which is why I've never used it. Whereas the Google suggestion actually lets you re-insert the element at the place where it was removed, which is a pretty nifty function.
Dude, documentFragment has been supported since IE6. Use it, is important :) 
instead of: function factorial(n) { do: var factorial = function(n) { then memoize with: factorial = memoize(factorial) and it will all work. Or you could pass the function to callback as an optional parameter function factorial(n, callback) { .... return callback(n - 1, callback) * n; } and you just pass through the memoized function
I am getting "Error: Can't set headers after they are sent." on first request.
Is it just me or does this seems like a really, really, really bad idea?
They are something that I've come to rely on heavily, it's basically a generic DOM container that dissolves once added to the DOM. You don't have to worry about detaching elements in performance-critical areas, so when used properly, they're a dead-simple way to dramatically reduce reflows. /u/jeresig did a [great write-up](http://ejohn.org/blog/dom-documentfragments/) about them a long time ago on his blog. I highly recommend reading that and playing around with them.
Technically, the [spec](http://www.json.org/) says: &gt; An object is an unordered set of name/value pairs. The key word is unordered. That means that order doesn't have to be preserved, which means if I write a JSON processing tool that reads input and writes output with keys in random order, the result should be valid and equivalent to the input. But if you use this crazy idea, such a tool will break your JSON, which means this is not valid JSON according to the spec; if it works, it's by luck not by design. It probably won't matter, but it could. Just because you found a validator that happens to not check for this doesn't change the situation. 
Now it works fine on node 0.10.x. Thx for report!
It is. So many things could go wrong. While it may happen to work, you can't guarantee that.
Have you made a lobby system to exchange private keys?
Only to an idiot is that statement idiotic. There's SO many crappy developers in the world today who either can't or seemingly refuse to think about "low-level" things like this (low-level being a relative term). I think usually they simply don't have the knowledge of what's happening at any level below the level of abstraction they're working on, and that's a BIG problem. If you don't have at least a rudimentary knowledge of how a web page is built by a browser then things like this, which SHOULD be obvious to any competent developer, will escape you. You can quibble with the choice of the word idiot, but whatever term you like it means the same thing: a developer who can't do their job properly. You want concrete suggestions? Fine: learn what the hell is going on under the covers. If you know jQuery, and that's ALL you know, then I don't care if you're John Resig himself, you don't know enough to do your job well. It may be turtles all the way down the stack, and I'm not suggesting you need to be concerned with what the turtle on the bottom is doing all the time to deal with the turtle on top, but if you don't at least HAVE A CLUE about the turtles below you then you're an idiot (or whatever term doesn't offend your sensibilities). Put it another way: there's such a thing as coding stupid. Nobody gets it right all the time, and hardware will obviously gloss over many a stupid piece of code, that doesn't make it any less stupid. There's entire sites dedicated to pointing out the stupidity of some developers. I'd wager that virtually none of those developers were actively TRYING to be stupid. They just didn't know any better... but that's the problem! They can't think but two inches away from the problem at hand, so they make what are, in retrospect and to those of us that have a wider grasp of things, foolish mistakes. They are coding like idiots (and before you say it: I'm NOT talking about new developers... I fully EXPECT new developers to code like idiots, that's expected).
Looks cool. Not anything new on the surface here, but after watching Bret Victor's latest talk (The Future of Programming) yesterday, I'm ready to give something like this a chance. However, I would want a bit deeper of an explanation as to why this is better than previous attempts at visual programming, before I would back it.
Can you expand upon that? Why do you say it results in a worse user experience? 
Exactly! Their parser might work because it uses the last one... But you can't be assured that it'll work for ALL parsers. This seems like a terribly idea. 
My point is, you're blowing a whole lot of air and not describing what's actually going on under the hood like OP's link did. Umbrella descriptions like "learn the stack" are nice and all but practically useless to somebody who doesn't even know where to start looking for knowledge.
Cool idea, looks interesting. But I don't see myself backing it or using it. It doesn't seem like it'd scale very well for large applications, but then again I'd be fine with swallowing my words.
You're right, but you're missing the point: I'M TALKING GENERALITIES. I am, in fact, making a, as you put it, umbrella statement. That's exactly my point. It's not a question of "in this specific situation, do X instead of Y for reason Z", it's a matter of "if you understand the system as a whole then you'll realize on your own that doing X instead of Y is smarter". You'd know the Z already in other words. I'm not at all debating the factual nature of the OP, or the descriptions he gives. They are accurate and they are, in fact, valuable tips. My point is that a good developer, because they have a more fundamental level of knowledge, wouldn't need to read the OP at all. Now, if you aren't sure where to start looking for knowledge then that's a perfectly fair conversation to have. Like I said, if you're a new developer I'm not holding you to the same standards yet and you can ignore my "idiot" classification because it doesn't apply to you. We all started off at some point with a blank slate of knowledge, there's absolutely nothing wrong with that. But, all I'm saying is that there are A LOT of developers... and I know this because I interview a couple of developers a week nowadays... who never bothered to learn. They're little more than trained monkeys who can spit out bits of code, or who are proficient Googlers and nothing more (that's a valuable skill to be sure, but not on its own). THOSE are the people I'm referring to when I use the phrase "idiot" (or, again, whatever term to denote their lack of real skill you prefer).
Yes it would. *class="one two three"* would become *class="newclass"* so using "+=" would be better but don't forget to include a space if you use that method otherwise you'd get this: *class="one two threenewclass"*
You may want to add that link to the readme and talky.io.
Did a guy really walk through the frame spinning a pillow on his finger?
It's not how you do it in Ruby or Python, however, which are probably the two most common server-side languages, these days. And the weirdness with `String()` vs. `new String()` probably confuses a fair number of people who take the "just dive in and figure things out" approach.
What happens at the low level is extremely complex. Even myself, as a browser developer, I find it very difficult to apprehend. Don't call people idiot or stupid. You're always know less about what's under the hood than someone else. Learn to respect people, especially the one that don't know as much as you. This is how you'd like to be treated. 
You can't speak of unordered data with labels like "from left to right" or "data ... that comes later." Unordered means unordered -- the order is not significant. 
&gt;in the cloud People need to stop saying this buzzword. It's like cyberspace / information superhighway all over again.
Fair enough. But I stand by the basic sentiment that, difficult or not, developers need to make more of an effort than they (generally) seem to nowadays so things like this, that should be fairly obvious, are known by more people. I don't expect perfection, 'cause I've certainly yet to achieve it, but I DO expect more effort than I see from many developers these days.
Touch friendliness and Real-Time Collaborations aren't "hardcore problems". They are buzzwords. And dear god they have the most appalling and conceited attitude I've seen on Kickstarter in a while...
I've seen quite a few of these attempted in the past but all of them have pretty much failed or have been forgotten. Heck, Microsoft even tried it sometime around 2005 for developing against .NET. I had a program sometime around the time BeOS was released that promised the same thing but I don't remember what happened to that.
&gt; NoFlo moves code out of applications and into reusable components that can be visually wired together by doers, not just coders. Because the best thing for software is for project managers to start re-wiring components. 
Wow this is incredibly misleading: &gt; 'actual source code to jekyll' http://cdn.thegrid.io.s3.amazonaws.com/noflo/kickstarter/images/jekyll-source-code.jpg &gt; 'jekyll rebuilt on noflo' http://cdn.thegrid.io.s3.amazonaws.com/noflo/kickstarter/images/cards-v4-kickstarter-up.jpg The first one would actually execute a program. The second one is a useless, high-level, leaky abstraction. 
It looks like they took spaghetti code and made it visual.
Yeah, all my beliefs are based on the mobile web of the year 2000. Besides, my opinion about web apps has nothing to do with any sort of allegiance to languages or technologies. I work on web apps all the time. I have spent hundreds (maybe thousands) of hours optimizing web apps through using transforms instead of positions, transitions, keyframes, workers, webgl, canvas, etc. However, I am a mobile phone and tablet user. And I can confirm that mobile web apps are not as good as native.
Backbone _super() adding have been around for a while now. John Neilsen's one 2 years ago seems to be earliest one: http://forrst.com/posts/Backbone_js_super_function-4c Backbone-super on GitHub is what most people use these days: https://github.com/lukasolson/Backbone-Super
https://github.com/lukasolson/Backbone-Super You'd be surprised how easy it is if you diff it against the standard backbone extends. It's basically stitching resig Inheritance into backbone extends
They talk a lot, but don't explain the actual system. They talk about how visual programming is better, the GUI, but not the semantics of their language. I would say that their GUI in the visual language paradigm is the equivalent of a text-editor in the text-language paradigm. They touch a bit on their GUI, however, the actual language itself is not described. I would say the language is far more important than the editor that's being used. At least that's the case for text-languages. What do the lines represent? What do the boxes mean? What do the entries inside the boxes mean? How does a program look like in its fullest, not just some overview? Give me some examples with a good explanation. From what I gathered from the video, the explanation should be quite a bit easier to do in a visual language, so show that to the (potential) backers! I've tried visual programming languages before. In those instances they were fun to use for small/toy examples, but doing anything substantial would result in a mess, whereas the code would only take one page. Maybe that's because I (and many others) are not used to a visual programming language, but it's an issue that does need to be addressed. I'd say it would be a good idea to talk about this as well.
My testers complain that the application is slow, and it would either get better or worse when I simply refactor the code. I couldn't explain it. Armed with this knowledge, I can hopefully improve performance. 
If they have a guy who can do that on their team, I'm in!
MDN says that classList is only supported in IE10. A more compatible version would be to just do something like: element.className = (element.className == '' ? 'selectedAnchor' : element.className + ' selectedAnchor');
Welcome back to [1976](http://www.cinderella.dk/aboutsdl.html) 
Visual and textual code should support each other - not replace. Like cooking recipes - can be reinforced by adding images - but images cannot substitute the written set of instructions. Also I would love to see more real programmers than CEO's in this video. Is it going to end as a software design tool where "Project Manager " is reflowing his fantasies as boxes and then poor programmer has to put actual code under these bogo connections? Despite being skeptical I would &lt;3 to give it a try.
So, basically it's [Scratch](http://scratch.mit.edu/) but for business users.
So, is NoFlo being developed with NoFlo? Yeah didn't think so.
I see a lot of negative comments here. I do think that they are right, the top down line by line code is old. Perhaps this is just the first of many tools to come to change development.
That is a beautiful lib. My only comment would be more well.. comments within the unminified src, and the possible conflict with underscore. Other than that the layout, structure, and your obvious grasp on some very tough concepts in js are all wonderful and it shows. Thank you op for this lib.
Oh Jeez, graphical programming again... What makes them think that their approach is better than any of the other failed or existing graphical programming systems? Instead they are talking about touch friendliness and sit in fancy mansions and promise Mayan pyramids adventure quests. Brogrammer much? There have been many attempts at graphical programming and they generally don't work. They work for certain specialised niche markets. Like LabVIEW which is mostly used for lab automation. Which really is a job where you just connect predefined modules. However any complex application does not simply consist of a few predefined interconnected modules. The problem will still be writing the modules in the first place. Where a graphical tool does not help at all. 
This is not a general purpose "language". It's a system for "wiring" pre-built components together into "flows". The flows represent run-time execution sequences not develop time dependencies (i.e. this class extends that class etc). Components implement an interface for defining their in values, out values, errors etc. Depending on what a component needs to do it can be developed by further wiring other component (nesting) or be written in the system language, which in this case is javascript and/or coffee script. The real value and potential is in the components. Add a touch of [Zooming UI](http://en.wikipedia.org/wiki/Zooming_user_interface) to manage the "wiriness" and you have the start of something. 
I actually shivered when I read what you wrote.
Microsoft has a pretty good start at creating tools like this. Visio and Visual Studio can generate visual data from existing code libraries and databases. -- They're great tools to use to understand foreign code bases and I like that idea more than the reverse.
Currently, NoFlo is a Flow-Based Programming Environment used by programmers to create JavaScript applications for the browser and Node.js. In flow-based programs, the logic of your software is defined as a graph. The nodes of the graph are instances of NoFlo components, and the edges define the connections between them. NoFlo components react to incoming messages, or packets. When a component receives packets in its input ports it performs a predefined operation, and sends its result out as a packet to its output ports. There is no shared state, and the only way to communicate between components is by sending packets. NoFlo components are built as simple CoffeeScript classes that define the input and output ports, and register various event listeners on them. When executed, NoFlo creates a live graph, or network out of a graph, instantiates the components used in the graph, and connects them together.
Yeah I was a bit confused too. At first it sounded like it was a program layoutter like the program design flowcharts you see in beginner textbooks, but then it looked like it was a visual programming paradigm? Judging from how they filmed the video it's kinda already lost my interest though so I'm kinda unwilling to look into it further. Honestly it seems like the video was designed more for getting money from people who don't know about coding but want to change the world through technology in a positive light, or beginner coders that are naively eager to jump onto anything that might "change the world" through programming.
I'm not even sure the idea is bad, but the presentation is so pretentious and, honestly, offensive, that I can't make myself get far enough into it to find out for sure.
Like javascript is hard in the first place. They talk about this like javascript is the core of anyone's project. Apparently they've never heard of how a web application works... on the server!
Sometimes, late at night, I get up and walk over to my window. Staring up at the night sky, as the stars dot the sky, I pick one out and wish as hard as I possibly can "Can people please just start saying 'server' instead of 'cloud'?" Apparently, I continuously pick the wrong stars.
Perhaps it is. I don't think they literally mean that project managers will be able to drag things wherever they want, but maybe we'll get to a point where we write components that are completely modular and even project managers could activate/deactivate various pieces of an app. Consider a sidebar. Let's say your programmer is developing something else and doesn't have the time or desire to pick and switch a banner every other day. What if a project manager could go into this NoFlo thing, see a box marked "Sidebar Banner" and cut the line to the current banner, drag a new line to the "Holiday Special Banner", hit save, and the app doesn't break? Personally, this thing has me pretty excited. I'm definitely going to give it a whirl when it launches and if they make it social like that one social network codey thing (starts with a K, forget it's name), and it's as clean as it looks, I'll probably end up splurging on it for a small team of friends. I dunno, it has me excited. I like this. :) 
http://i.imgur.com/37HA6Kj.jpg
Exactly this. This doesn't look like they're trying to replace code with boxes, but rather just organize projects with the graphical flowchart layer, and once you dive into each of those boxes, you can see modular code. I'm really baffled at how poorly this is being received. It looks so promising... :(
1:27
How in the hell have I not known about microjs.com? Thank you!
You do know that you can't see the stars through a cloud? Not unless there's a whole cluster of them. 
BUT HOW ELSE DO YOU GO WEB-SCALE?!
I'll just connect this red line to this box, aaannd this blue line down here....whoa! I accidentally recreated GCC.
"Code is our enemy ... If you’re a programmer, deep down, you know code is bad" So what's under your pretty lines and boxes? Who's gonna write that? 
Not to mention that when you start to add up those boxes you end up with literal spaghetti code.
I'd love to see more visual programming tools succeed. But these guys seem to be maliciously proposing a perfect world in which no code needs to be written. Either they are honest and naive, or they are aware and malicious. Either way I wouldn't want to fund them. Any programmer knows at the end of the day the devil is in the details and your CPU will not accept pretty lines and boxes as instruction. Visual tools fall short in specifying the details succinctly and sooner or later someone needs to write the code for each of those boxes. I would support them, if they were more honest and admitted and addressed at least some of these issues. They show a very small graph and claim that it is Jekyll "remade using NoFlo". Well bitch spare me your Jekyll. Why don't you show me samples of the following programs? Put the code on one side, and put the equivalent NoFlo on the other side. - HelloWorld application - FizzBuzz application - Fibonacci sequence application - Towers of Hanoi application - A script that creates an empty file, given a folder path - A script that reads data from a file and writes it to another file - A script that opens a SQLite database and inserts one record to the database - A script that makes a HTTP request Let's see how you do that "without code", "without refactoring" and "without spaghetti code". 
I think at best this is what will happen, 1. Engineers draw up concepts on whiteboard 2. Managers fuck up the concepts by redoing them using their pretty NoFlo application and feeling like they actually accomplished something 3. Engineers write the code line by line 4. Managers feel good about themselves thinking their pretty drawings are doing real work 5. .... 6. Profit? *yeah..no*
BECAUSE DA CLOUD THAT'S WHY!
Was going to link to jresig's article as well. It's a much more fluid way to iteratively create elements... *and* it saves on DOM reflows! Win-win. I always shudder a bit when I see this jQuery: $(document).append('&lt;span&gt;straight HTML!&lt;/span&gt;');
Only one API request? Which API is this? Secondly, one aspect that makes ShareThis appealing is the fact that it is javascript code executing DOM injection. If facebook updates their API, ShareThis can push the new code to all of their users at once, instead of having frustrated non-technical admits wonder why their Facebook button stopped working. I haven't checked out your code since I am currently on a phone. Does your project do the above? 
NodeBB was facing similar issues with making dynamically generated content crawlable. We worked around this by also generating HTML content in noscript tags. No fancy phantomJS server, although I did look into it at one point. 
Thank you very much, I really appreciate it. With regards to the conflict with underscore, the library is closured and the utilities object (`_`) is never exposed to the `window`, so this shouldn't be a problem. I will look into commenting the whole unminified lib in the next few days.
Definitely!
You should post this to /r/LearnJavaScript and /r/jQuery?
I got the fever, and the only cure is more buzzwords.
F*ck older browsers. I'm only now getting back into commercial web dev with the advent of HTML5 and WebGL. Couldn't stand dealing w/ browser compatibility issues in the years past. That being said, really nice work! Bookmarked!
Looks great. Nice work :-).
Thanks!
The second would execute a program as well. That's a visual representation of executable graph. Individual blocks contain code, but they are represented as "black-boxes" (in a spirit of good OOP). individual blocks are [unit-]tested and the whole-app graph is not cluttered with details and is easy to understand
And pay for that hotel room they filmed in. 
* boxes — are instances of components. they call them "processes" * entries inside — are "components" * components define input and output "ports" * basic component is a javascript-class * a group of interconnected components can be represented as a metacomponent more here: http://noflojs.org/documentation/
they actually talk about server-side javascript (nodejs)
point is, that this approach enforces modularity. it's much easier to write good tested code for a reusable component than to write a good tested glue-code
Ah, that documentation is helpful. So is this video: https://www.youtube.com/watch?v=pgP4v9b5DvE&amp;feature=youtu.be After seeing part of that video, I can see where FBP could be helpful with callback-based systems like NodeJS. I just am not sure how a real application will look like. The 'Getting started' documentation does not show *anything* of a visual program. It seems the Kickstarter seems to be mostly focused on non-programmers and the getting started is focused on people who know how to work with FBP. The video is more focused on nodejs programmers, so that's pretty informative.
it's a flow-based programming paradigm. visual part is just a cherry on a cake. idea is, that you program by creating (and reusing) black-box components with strictly defined interfaces (input and output ports). No implicit global state (kinda like in pure-functional languages). Data is pushed thru the system and program works. Obvious applications are the data-crunchers (think map-reduce), but it actually can be applied to anything, including the GUI. It's just a matter of how you define what is pushed via I/O ports. well, and the good part is that groups of interconnected components can be represented as a single high-level blackbox component with it's own I/O ports
the ui thing in the end of the movie looks like apples quark composer. http://en.wikipedia.org/wiki/File:QuartzComposerSnowLeopard.png
I hadn't done much research into deferred but I didn't really grasp it at the time. This cleared it up for me. Thanks! I'd be interested to see some sample patterns and ways to apply this technique. Seems easy to just have a ton of functions running down the page not necessarily organized. 
I don't get how people aren't getting this simple concept. Am I going to use it? Not likely, but for a lot of other people it lowers the bar of entry.
To offer a comparison, here's the documentation for Dojo's implementation of Deferred: [http://dojotoolkit.org/reference-guide/1.9/dojo/Deferred.html](http://dojotoolkit.org/reference-guide/1.9/dojo/Deferred.html)
Promises are a great pattern to follow, and if you aren't using them now you will have to at some point
I used a similar product 20 years ago with Smalltalk called Parts. The components were at a fine grain and made a visual mess that was unreadable.
I installed it. now I can laugh instead of cringe. http://i.imgur.com/3C9B1Vf.png
This seems good for proof of concepts and certain domain specific applications, but as an application grows in complexity and details, wires in a 2D surface will not do any service for engineers and programmers. Written languages advantages are the capability of being expressive and representing complex concept with idiomatic constructs.
There are means of abstraction (groups of blocks represented as single block). Won't that help?
strictly speaking, language is not graphical. it's still [a kind of "code"](http://noflojs.org/documentation/fbp/) underneath which is use to configure the "flow" of events. they speak about an IDE which will represent both this code (and underlying "real" code) in a visual way
well, NoFlo lets you package groups of components into "subgraphs" which are treated just like other components. so you can hide a lot of low-level stuff under the cover and work on level of detalization which works best for you
[I know](http://www.reddit.com/r/javascript/comments/1jkp81/kickstarter_noflo_development_environment/cbfy578).
I started integrating Deferred's into my project a couple months ago and I keep finding new ways that it can solve some of my problems. The syntax also allows you to write very clear narrative code. Two of the most common tasks I use them for is building a simple cache, and grouping a bunch of functions with callbacks into a single callback. Escape callback hell with deferreds. I found this [talk](http://www.youtube.com/watch?v=juRtEEsHI9E) very helpful in showing me many of the uses for defereds. The slides are available [here](https://github.com/alexmcpherson/jquery-talk) 
Very cool! I made something like this in Processing a few years ago, but I hacked the physics together in probably the worst way possible. This is far more successful.
i actually use underscore.deferred, which is the jquery one rebuilt as a _.mixin. 
I recently used it in an internal tool at work, combined with the memoization pattern. When I clicked on a URL, it ajaxed a big set of data from the server and formatted it and stuck it in a modal div. because that function took a value and returned a deterministic value, it could be memoized with a wrapper, meaning I could cache the data on the client! The memoized function kept a hash of promises, which I could then() respond to :)
that sounds useful for bookmarklets to load js libraries some of which depending on others.
Is Deferred something like continuations? How does it compared to [core async thingy](http://bryangilbert.com/code/2013/07/19/escaping-callback-hell-with-core-async/) that featured in /r/programming about a week ago?
I know cloud is a popular buzzword, but which single word would you use to summarize "applications that are accessible through a web browser or a light-weight desktop or mobile app while the business software and user's data are stored on servers at a remote location."? ([Wikipedia](http://en.wikipedia.org/wiki/Cloud_computing#Hosted_services)) Do you want to write this every time down?
just started using angular in a project. its awesome.
&gt; responseId = new $.Deferred(); &gt; $.ajax{ &gt; url: '/put/ '+ myvalue, &gt; success: function( response ){ &gt; // response.id holds X's id &gt; reponseId.resolve( response.id ); &gt; } &gt; } I believe you can just do responseId = $.ajax('/put/ '+ myvalue).then(function(response){ return response.id; }); 
That's probably the more idiomatic jQuery solution. I usually create the deferred object manually because the types are clearer to me (I don't write much jQuery :) )
I love angular - but in what sense is angular a model system? Just because of the ng-model directive? IMO Angular is a View/Controller system, and models are an entirely separate concept that Angular does not directly address (though it does provide some support for your own model implementation, like ng-model, and some of the form validation features). I'm not trying to be pedantic or nitpicky, i'm just curious why people think of it as a model system, as I see that claim made often.
In that case, a more realistic (and fair) visual comparison would be between a screenshot of Jekyll's directory structure and this top-level 'not cluttered with details' graph. Both represent an abstraction above code. Showing thousands of lines of code as equivalent to a handful of 'black boxes' is disingenuous and detracts from what seems like an interesting idea.
As far as I'm concerned the whole concept of "the cloud" can go away. If you need an application, download it use it on your own computer and save your work on your own hard drive.
Angular definitely implements view models, but not regular models.
How does this work, in terms of not having to provide a URL (which the Web Workers API expects)?
I assume you are talking about JavaScript running in a Node.js environment. In theory nothing, but Java is more mature and has lots of libraries for, say, interacting with EI/mainframe systems via JCA (Java Connector Architecture) compared to Node.js. I am not sure there are any EI libraries for Node.js at all. Also I think there are no libraries for Node.js that support distributed transactions. Node.js is also not suitable for handling and execution of long running tasks as it is single-threaded (in Node.js environments, usually these types of work are handed off to other processes that are implemented in Java, etc.).
Aside from the languages themselves (which have differences in the way they handle numbers, data types, object-oriented patterns, etc), a big difference is where and how the programs are executed. Most often (I'll give a counterexample in a bit), Javascript is run directly on your users' computer, by their web browser. This means your browser downloads the Javascript code and then runs it itself. But that means the Javascript needs to be sandboxed so that you can't do anything malicious with it. As a result, you're not allowed to make system calls (for the most part); you can't do things like direct file I/O or open up a network socket in javascript (through the browser, that is). On the other hand, Python is kept and run on your own server, so you can do whatever the heck you want with it; there is no sandbox or security restriction in place (unless you make one, of course). .NET languages can be a little of both; C# can either be run by the client or the server. So it really all depends on context. Of course, there are exceptions to the above. You *can* run Javascript on your own server (through Node.js), and in that case you *can* do file I/O and open sockets. You can also make Python a downloadable app that your clients run (the original Dropbox app was written in Python; I don't know if it still is though).
&gt; .NET languages can be a little of both; C# can either be run by the client or the server. So it really all depends on context. What?? In a web context this is not true. Unless you are talking about WPF or something, then carry on. 
Javascript is [Turing Complete](http://en.wikipedia.org/wiki/Turing_completeness), meaning it is capable of full, universal computation. In other words, it can do anything those other languages can do. How you may say? Well, if it can't do it natively, it can simulate it via enough ancillary Javascript code of your own creation. Practically, however, that isn't very satisfying. One thing in particular Javascript can't do is communicate with the bare metal it is running on. Other interpreted languages can't, either (Java/Python/.net, etc) without help from some integration with C/C++ or some built-in library to do it for you. Same with Javascript (Node.js in particular), the other languages just have a bigger head start in this. And, in fact, Node can do File IO just fine, so that's a start. 
That's why I said "it really all depends on context"!
Thanks everyone! I appreciate the help/info. Yea I mean I don't any hardcore programming or anything, I just want to make sure I go down the right path in terms of learning a script/language.
Well, the whole point of this post is in the web context
That quote is really misleading. The line that begins "Integers are considered reliable..." is talking about IEEE doubles, not integers. And 0.06 + 0.01 will certainly equal 0.07 under floating point math as long as you are careful to use proper rounding when you display the result: &gt; (0.06 + 0.01).toFixed(2) "0.07" Printing out raw doubles with no rounding specified is hardly ever what you really want. Moreover, in modern browsers JavaScript *does* have access to more numeric types through [Typed Arrays](http://www.khronos.org/registry/typedarray/specs/latest/). There's no 64 bit integer type, but most of the other common types are available. You could use this as a building block to implement a variety of arbitrary precision math types (e.g. BigInt, BigRational, BigDecimal, etc.) if you really had the need. While it might not be easy, it's certainly *possible*, which is what the question was about. The answer, as usual, is that it's rarely the case that something is *impossible* in any language, making it a pretty meaningless question. It's only a matter of how much work you are willing to spend to get it.
IEEE doubles can exactly represent every integer in the range -2^(53) to 2^(53) or -9,007,199,254,740,992 to 9,007,199,254,740,992. Describing that as "to 15 digits" is somewhat questionable. Sure, it can represent every integer with 15 digits, but it can also represent a good many (most, even) with 16 digits. If the intent was to define which integers are representable, it is far more clear to just say [-2^(53), 2^(53)], which makes it clear that it far exceeds the range of a 32 bit integer but falls short of what is possible with a 64 bit integer.
Holy cow, I really didn't expect this to be any good, but this is really a great game. I don't have an android device, so I couldn't test it there, but how do you trigger the playing field rotation on those devices? Device orientation? 
Wow!!! Really inspiring to see it's already possible to make something awesome and cross platform with canvas. How was distribution with an uncompiled format? Esp with firefox OS, it seems it's pretty hard to prevent piracy with an html5 game? Oh, and how did you get into humble store? :P 
Congratulations, looks really good.
http://i.imgur.com/3TUbdrs.png
For browser based apps - I did totally nothing - source is there - unobfuscated - maybe someone will learn something - however I only put demos online so the assets are semi-protected. It is harder to produce quality assets than reproduce the code/mechanics itself. I haven't released it on FFOS because performance was too low - still I don't think it has any means to protect your code.
Ah thanks for the clarification 
Was the performance about the same as in the browser on those platforms? I've been working on a pretty graphically intensive (non webgl) html5 game for a while, and have wondered whether wrapping it in an app would potentially give any boost to speed (though I wouldn't really have good reason to expect it, unless being free of browser overhead allows things to run faster).
I like the music too. How did you do that? I just learned about the WebAudio api.
Yes it is faster. I must admit that Android 4.x has pretty fast browser but still not as fast as application wrapped with Cocoon. You can feature at least 2x more particles on screen :) Node-webkit won't give you a boost because it is "just chromeless chrome".
This video says something about tools used to create it http://www.youtube.com/watch?v=NQ4rrw7zVAE If you ask about how it is used in game - each tune consists of couple of loops - I am just tracking the position on game updates. If user passed another level (100 points) on the end of the loop another loop is triggered - otherwise the loop plays again. (using audio.currentTime)
As someone who's been trying to learn how to make games in JavaScript this is really an inspiration for me. The only problem now is I'd be spending more time playing this game than learning. :D This game is just too good. 
6718 points. It gets really hard.
The music makes the game. This is great.
With JavaScript you can run the same language and even some of the same code on the server and in the browser.
Hi, it's nice to see that your game is finished and polished (especially difficulty level) - I remember "first" version you posted on wykop.pl. Good luck on further projects!
BEAUTIFUL, thanks for sharing!!!
~60% after taxes
&gt; Node-webkit won't give you a boost because it is "just chromeless chrome". Yeah that's what I figured, though was seeing information which seemed to suggest that running it as a standalone somehow brought it to native performance (which surely couldn't be from compiling with today's JITs). But that phones are faster is very interesting, I might have to try the wrapping since my app runs pretty bad on my galaxy s 1 (which can't even be upgraded to 4.x and is stuck on an oldish browser). Thanks. :D
I am jealous! Really amazing high quality work!
Documentation says that CocoonJS is working for Android 2.x but I couldn't make my game running. However try it - for instance - go to Play Store and search for CocoonJS (Launcher) - it is free and it comes bundled with a few demos - so you can test it right away.
Are you able to give a link/fiddle? I'd love to take a look Also this might help with debugging: http://google.github.io/tracing-framework/
&gt;instead of: function factorial(n) { do: var factorial = function(n) { This part doesn't seem necessary. 
Amazing game! I love it!
[Yet another one, huh?](http://www.reddit.com/r/javascript/search?q=jquery+deferred&amp;restrict_sr=on) [Or more](http://www.reddit.com/r/javascript/search?q=promises+jquery&amp;restrict_sr=on&amp;sort=relevance&amp;t=all) Seriously... unless you wrote something new, there is nothing this subreddit needs to learn about JQuery.
Thanks, I was looking into seeing what it would take to test my app in it earlier, but it seemed that you have to hand over your code for them to compile which I'm a bit cautious about for now (until it's more done).
Keep it up ! Great game :)
Thanks for all the info, I'm also trying to get going on games in Javascript, so this will be quite helpful. Also, I think I've played this game before during the last Ludum Dare (the theme was minimalism)? I had quite some fun with it. Nice going iterating on it further. Its always cool to see js based games, especially when they get so good!
5 stars! Some suggestions: on my nexus 4, it's too easy to accidentally hit the fall button, I'm right handed so I like to use my right hand to control rotation. add a rate me option to to your options menu. possibly different backgrounds based on the level. GJGJGJ! I look forward to your tuts on this.
http://i.imgur.com/sXAmqOc.png 11903 :)
One area I've found python useful is due to the ubiquity of python. Sometimes I need to write a quick script to do something and I know that it will run in most linux distributions and OS X. Also python has a huge set of "batteries" included. So I can easily distribute such scripts to developers or sysadmins and they can run it without any complicated steps. I would like to use node.js for such tasks, but I don't think it's installed by default yet in linux distributions. Also node.js doesn't have much in the core API compared to python. Does anyone know the status of node.js in linux distributions? Will it someday be installed by default like python is currently?
It's certainly possible, if you're able to inject JavaScript into a site you'd easily be able to track it's users. As for the code itself, that version is heavily obfuscated. There's posts in the bigger [subreddits](http://www.reddit.com/r/technology/comments/1joqr6/half_of_all_tor_sites_compromised_freedom_hosting/cbgtxt7) where they've posted the deobfuscated version, and it's a ton easier to read. Did the FBI really do it? There hasn't be an admission of them doing it *that I'm aware of* but it wouldn't be shocking. EDIT: According to the code posted, they implanted a tracking cookie and iframe which would certainly be able to determine actions of users.
I would suggest not using jQuery's Deferred. It is fundamentally broken and will not be patched in later versions of jQuery because it will break backwards compatibility. jQuery does not follow the [Promise/A+](http://promises-aplus.github.io/promises-spec/) specification. Instead use [Q](https://github.com/kriskowal/q), [When](https://github.com/cujojs/when) or [RSVP](https://github.com/tildeio/rsvp.js) to wrap your async operations.
"Models are the heart of any JavaScript application," and I don't think any library can match the Model/Collection support that Backbone offers. Some of my projects have very deeply nested Collections/Models, and at times I've had to do a lot of work on app data, the layer that demands accuracy. Data binding/MVVM is a secondary concern, and I say this as the maintainer of a data binding plugin.
exactly.
&gt; There hasn't be an admittance [...] "Admittal". 
This is one of the coolest games I've played in ages. Amazing music, aesthetic, and simple gameplay are what really do it for me. Well done!
what are TOR onion sites?
Not sure if trolling...
I don't even have sound enabled and the game seemed awesome to me :)
Websites accessible only through TOR, so the identity of both the server and the client are protected. https://en.wikipedia.org/wiki/.onion
What I don't get is obfuscated code, people will deobfuscate it thus just giving it more attention.
&gt; As for the code itself, that version is heavily obfuscated. There's posts in the bigger subreddits where they've posted the deobfuscated version, and it's a ton easier to read. You are not linking to a deopfuscated version. What you are linking is the javascript that inserts the iframe. What OP is linking is a firefox exploit, looks like a heap spray. 
Exactly. The RFC says JSON keys SHOULD be unique, the spec on json.org doesn't say anything about the issue as far as I can tell. Relying on the behavior of some parsers one have tested sounds like a really bad idea when there is no guarantee all current and future parsers will support it.
It implies no such thing. Some parsers for some languages will overwrite earlier definitions of something when they find new data. Some will ignore new definitions. If nothing is specified (like for JSON) there is nothing saying that one implementation or the other is more correct.
I agree. My ideal setup would be Backbone's models as a service in Angular.
Yep, we were inspired by that (and various nodal editors in other industries) quite a bit.
We have bunch of NoFlo code in production. But indeed, it is still early days!
The product is 100% open source, but we will provide a hosted version for a fee for those who don't want to set it up themselves.
Yep. See http://www.kickstarter.com/projects/noflo/noflo-development-environment#project-faqs
Here is a little bit more: http://bergie.iki.fi/blog/noflo-kickstarter-launch/
Thank you. Have you tried SWAP button (it is next to sensitivity slider)?
[Admission](http://dictionary.reference.com/browse/admission). An [admittance](http://dictionary.reference.com/browse/admittance) is a right to enter somewhere. [Admittal](http://dictionary.reference.com/browse/admittal) isn't even a real word. If you're going to have a novelty account, least ensure you know the first thing about the domain it's supposed to operate in. If you're trying to be a smart-ass and you aren't smart, what does that make you?
Would yo add Google play services? 
TBH in this project it was PHP :)
Canvas 2D - http://canvasquery.com
Hi, What did you actually use node-webkit for? I'm having a little bit of trouble working out what is actually does. Why do you want to use node-modules in the browser?
true, not really necessary but I prefer it as it's closer to what you're trying to achieve. By assigning it to a variable you're saying that you want to call that function when that variable is instantiated whereas otherwise you're using a named function and the function will keep that name even though when you call that name you're not getting the factorial function, rather the memoized one.
Are you using the latest nightly for FFOS? I found the performance difference to be huge. Edit -&gt; also any plans for Windows 8? Our HTML5 game has got half a million downloads on Windows 8 alone, and has proved one of our best platforms. I also wrote a C# wrapper for HTML5 games on Windows Phone if you're interested. More on our game here: http://mortarmelon.com/
&gt; I don't think any library can match the Model/Collection support that Backbone offers really? Backbone is very light when it comes to models, it really just has change handlers. It doesn't have computed properties, can't tell if there are changes deep in an objects properties (or the path to them), doesn't natively give you a pool so a single ID will always be the same model, you can't have a collection with attributes like a model, if you silent some changes they're lost, etc. etc. etc. I wrote https://github.com/rhysbrettbowen/PlastronJS with all these taken care of. I have since been using Backbone at work and I really do miss these features. The ability to write a schema for a model and have computed properties is a must. So is having a collection that can have properties (in PlastronJS a collection extends a model). There is even a native way to the framework to give you filtered collections (and other sorted collections) from regular collections that keep themselves up to date. Backbone's model implementation is minimal at best.
it can't tell you the typeof NaN isn't a "number"
I wouldn't call overriding the Backbone inheritance "easy". I wouldn't even call it safe - what happens if Backbone changes the way it's inheritance works (I know unlikely but what if they put in a bugfix for some edge case is what I really mean)? also putting a wrapper around every function isn't a great place to be, what if I want to test that a prototype has a certain function in it (obviously one I have a reference to)? Also dynamically changing this._super isn't a great idea, it may not work with well with some newer ecmascript things (like Object.freeze and setters).
&gt; I'd be interested to see some sample patterns and ways to apply this technique. I love it to sync up 2 requests; for example, say you have 1 request to grab a template, and another to grab the data. To render the view, you need both, but designing logic to determine when they're both complete and then firing off a final function to combine the two is a pain (especially if they live in different places in the code). With deferreds, you can do: // "when" both requests are complete... var dfd = $.when($.ajax("/data"), $.ajax("/template")); // "then" do this... dfd.then(function(data, template) { // do something with data + template }); &gt; Seems easy to just have a ton of functions running down the page not necessarily organized. That is part of the motivation for designing promises -- to escape [callback hell](http://callbackhell.com/). You can have one function/method make the request, and then have a separate function/method located somewhere else act on the response. This isn't as easy with callbacks since you can only have 1 callback, and so all the code to run must be either inside that function or called by it. With deferreds, you can unlimited callbacks run, each coming from anywhere in your app. On top of that, they can be added anytime after the request is made, whereas with the old-style callback, it had to be declared _before_ the request.
Sure. In the Promise/A+ specification the .then() method is always supposed to return a new promise. So in the case where an error occurs somewhere in your thenable chain there is no error bubbling. You can read about it more [here](http://thewayofcode.wordpress.com/tag/jquery-deferred-broken/).
Awesome, thank you!
http://i.imgur.com/Um2HEmZ.png 13018
An alternate implementation would be to provide for a hashing function to determine whether or not one invocation is identical to another, like [I did for my PHP version](https://github.com/k3n/PHP-Memoize). Reason being, calling `JSON.stringify()` on the `arguments` object can be a performance-killer if those args are non-trivial. Using a hash function, you allow the user to cherry-pick and more precisely control the caching. Here's what that would look like: function memoizer(func, hash) { var cache = {}; // keep a reference of the wrapped function var this_function = function() { var key = hash.apply(this, arguments); if (!cache.hasOwnProperty(key)) { // pass the wrapped function as `this` cache[key] = func.apply(this_function, arguments); } return cache[key]; }; return this_function; } And then: var memoized = memoizer(factorial, function(n){ return n; }); memoized(5); Of course, it all depends on how you use it which will be more efficient. If the args are always simple, the original may be better, but if they are complex or you want more control, then mine might be better.
My coworker made this, which might suit your needs: Demo: http://modeln.github.io/sDashboard/example/ex.html Project page: https://github.com/ModelN/sDashboard
Ah, [jQuery Gridly](http://ksylvest.github.io/jquery-gridly/).
Great overview of a stack direction that our own projects are moving. Though I would ditch Backbone for something like Angular or Ember or Knockout (personal prefs).
Nice try... FBI.
Draggable isn't on a grid, and allows elements to be dragged past the edge of the boundary, making them hard to reach again.
was going to do this up a bit better with examples and a blog post, but have a look at this: https://github.com/rhysbrettbowen/widgetboard basically gives widgets that snap to a grid and will resize themselves as need be when you move or resize the other widgets. At the moment it has a few requirements because that's how we develop but I'll be removing that in future
Both of those are easily configurable options with jQuery UI draggable elements: http://api.jqueryui.com/draggable/#option-grid http://api.jqueryui.com/draggable/#option-containment
This is Reddit... http://img.ffffound.com/static-data/assets/6/bd8266e0b0fa85dbf2be6bfc9d6275e2f2b6cf1c_m.gif
Sort of. Below the visuals you still have to write all your components just like normal. You write all your code as objects just like now. NoFlo inspects them and provide a UI. Then it allows you to register the inputs and outputs. If you've ever generated UML Diagrams from existing code this is very similar. 
Funny how reddit, when faced with reality or facts, frequently responds that way, without any thought whatsoever.
So Backbone is great because you can do it yourself rather than already have it? And Backbone syncing is not great either - it's a function that assumes you do your REST a certain way. Anything else and you have to do it yourself. I'm pretty sure that nearly every other MV* out there does nearly the exact same thing. If the greatest thing going for it is that collections and models have underscore methods built in then I'm not seeing how any other library can't match it. Just run what you want through underscore or mix in those underscore methods manually, because that's what you'd have to do with Backbone to do any of the other things - you'd need a plugin.
Same. While I lack the experience, I do have several hours, days even, of research into the subject and AngularJS seems to be emerging as the killer framework. Backbone is often described as being too bare bones and Ember is often described as having feature creep. I am currently on the process of learning angular and so far I have been very impressed by the flexibility and power, despite some of its strong opinions.
It's a pity people are downvoting this based on it asking about and prompting exposure of some limitations of JavaScript. Previously I had encountered quite a lot of hostility from a user when I brought up some of these topics (it's nice not to get that this time around). This board should operate to discuss JavaScript (including its shortcomings) rather than as some kind of fan-forum where people imagine it's a perfect language and dismiss evidence to the contrary.
I think you should switch back to PlastronJS - it sounds like you really hate Backbone.
Wish I could... but switching an entire platform at work where others are already up to speed with the technology they've been using is always an uphill battle and not always where time is best spent It's not that I hate backbone - I think it has a place. It's just that it gets a lot more credit than it deserves. I know that sounds like I hate it, but really I think the best tool is the one for the job and saying things like X is better than Y or is the best is the wrong mentality. I don't think Backbone is the best in any single area (perhaps in community but I really don't look for that when choosing a platform, there are much more important factors) - there are definitely better MV* for models, data, binding, views etc etc. What it does do though is be simple and light so you can get started. I wouldn't say it was better than any other framework, but it can still be the right (right being a very loose term here, there could be several "right" solutions) building blocks depending on the project and the plugins that you choose to use with it.
I oversimplified the situation for the sake of brevity, but assuming async:false wasn't available, is there a way to pull this off w/ promises/deferred? The real use case is a third party oembed library that returns success/fail callbacks I'd like to wait for.
I oversimplified the situation for the sake of brevity, but assuming async:false wasn't available, is there a way to pull this off w/ promises/deferred? The real use case is a third party oembed library that returns success/fail callbacks I'd like to wait for.
Sure! [Here is a blog post](http://blog.embed.ly/post/57097477000/visualizing-discussions-on-reddit-with-a-d3-network-and) for more information, and [here is the code on github](https://github.com/whichlight/reddit-network-vis). It is all client side. I crawled the json response for a reddit discussion to pull all of the comments. The json is pretty much as nested as the page looks when you're looking at comments, so I did this recursively, and added all of the nodes to an array. For each comment I checked to see if it's parent or child node is in the array, and added links accordingly. With all the nodes and links, I could use the D3 force directed layout. For the URL preview and comment thumbnails, I used the Embedly jQuery plugin. So if you hover over a comment with a link, it automatically embeds. 
Gridly has some weird behavior when you're moving boxes around, boxes were jumping that I wouldn't expect, very odd.
[Packery](http://packery.metafizzy.co/) has got dat awesome sauce
jQueryUI has both drag-able and sort-able that can be in a grid. A lot of times the customization is what gets people. Gridly is great though But if gridly does not give you any errors it is a good fit for what you need.
Only supported by modern browsers / IE10?
why not just use the fact that most of the backbone sync events return ajax objects, which are in fact promises. var model = new SomeModel({ id : 123 }); model.fetch() .then(function(res) {}, function(err) {});
I like the concept of NoFlo, and this UI (aside from aesthetics) does look like a leap forward in how software is made but yes, I agree with you, way too dramatic... It was like watching a Kickstarter for a new reality show. 
Yup, it requires [`Worker`](http://caniuse.com/#feat=webworkers) and [`Blob`](http://caniuse.com/#feat=bloburls) APIs: 
Thank you for sharing all of this! I have been working with some web-apps as side-projects for fun, and have nothing but good experiences on Firefox OS and node-webkit.
This is awesome, I had something like this in my mind for a few months but in the end I probably would never had it done. Nice you did. Now I have the proof that there isn't much discussion in /r/gonewild and most threads look like a lot of guys surrounding a pole dance stage: http://whichlight.github.io/reddit-network-vis/?discussion=http://www.reddit.com/r/gonewild/comments/1jqn2z/cant_believe_the_feedback_i_love_you_people_keep/
Promises are a convenient notation to simply bind the success and failure events of the request. The problem with this though is that the handler has to be in scope of the fetch call. Meaning that whatever is calling fetch now has a dependency to add these other listeners. Whereas with Traffic, you can bind an event listener to the request and then pass it to the model. Now you have a persistent success/failure handler that will be invoked on each model sync operation. var request = new Traffic.BackboneRequest("/somewhere.api"); var model = new Traffic.Model({ id : 123}, { request : request }); request.on("success", genericSuccessHandler); request.on("failure", genericFailureHandler); //later in execution in any scope model.fetch();
Was excited because I thought it'd be a wrapper with a shim.
Just stopping by to say this is great! Well done.
I thought it would come with pre-coded nodes (things that are very common and everybody could use), and then you might have the option of coding custom ones and sharing them. Either way I don't see this as replacing or being for hardcore people. It softens up the task of jumping into coding and then maybe that person goes on to learn more.
was expecting to see some castration at the end of that creepy video. very disappointed.
Are you running it through file:// protocol or with an http server, eg. MAMP or WAMP?
Absolutely. `async: false` is really the only option to preserve the semantics you included in your example, but if you're willing to throw around some callbacks, you can definitely do it. The tradeoff is synchronous execution; you can't `return false` from the `$('form :input').each()` to stop iterating through the elements when you get the first failure. This is extremely simplified because the semantics are very dependent on the lib, but a basic case could be: function validateNextElement(elementList) { if (elementList.length &gt; 0) { $.ajax({...}).then(function(result) { if (!result) { triggerFieldError(elementList[0]); } else { validateNextElement(elementList.slice(1)); } }); } } validateNextElement($('form :input').toArray()); This isn't particularly elegant, but it should work as expected. Another approach would be promise chaining, where you'd dynamically create a function to validate each element and attach them as sequential promises; something like: function doValidation(element) { return function() { // $.ajax actually returns a promise! (well, a promise-like object) return $.ajax({}).then(function(result) { // returning a non-promise from a success callback will auto-wrap // it as a successfully resolved promise, // whereas returning a rejected promise will just return that return (result || $.Deferred().reject(element); } }; } var dfd = $.Deferred(), currentPromise = dfd.promise(); $('form :input').each(function() { currentPromise = currentPromise.then(doValidation(this)); }); currentPromise.fail(triggerFieldError); dfd.resolve(); This method is a bit more idiomatic (though the top level $.Deferred is ugly), but a bit harder to grasp if you're not comfortable with promises. Basically, calling `then` on a promise returns a *new* promise; each time the current promise succeeds, it will call the first argument (the *done* callback), which we created dynamically to validate the next element. When one of the validations fails, it will stop calling the first argument and instead call first *error* callback defined, which is your `triggerFieldError` function. The other advantage to this method is that you now have a promise that will call a success function when the entire form validates, which may be of interest if you want to then submit the form. One caveat: error handling in promise chains is not particularly straightforward. For instance, you would not want to do `currentPromise.then(doValidation(this), triggerFieldError)`; this would call `triggerFieldError` on the first rejected element, then continue down the chain as though it had succeeded since it interprets error callbacks that don't return rejected promises as "having successfully fixed whatever problem caused that other promise to get rejected". That's why we put it at the end, so the first element that fails validation will bypass all of the other validation callbacks and go straight to `triggerFieldError`. Hope this helps! 
Initially, I tried the file:// protocol..then I figured that -that- would be an issue. Next, I'd put it through Visual Studio to get access to a localhost (new to programming, and WAMP, etc was too much for me to get set up in shot notice). And I had build errors, in VS, anyway...
That clever navigation element makes this article unreadable on my phone. 
Covers content on my desktop at my current browser size. Really hate that.
Because 99% of what any web app does is to show the data to user and accept his input and save data to storage. Without data binding you will have a lot of boilerplate code to route data back and forward. 
Is the point of XAMPP to connect to a localhost? Because if so, I've got that down pat, without it for now. Maybe I misread instructions, or am totally inept, but I'll look back at it some other time (so long as it isn't -necessary- to have, here)
Yes, installing XAMPP would be for a localhost. (There are other reasons too, but they're not relevant.)
Of course, but in this scenario, now that I have connected to localhost--no matter what the means may be, how come I can't connect to my laptop's webcam? I literally copied the code, verbatim, into an HTML file, shown above, and connect via localhost. Nada.
https://github.com/shichuan/javascript-patterns/blob/master/general-patterns/conditionals.html is absolutely horrid. If you take a moment to think about it, you don't *need* an **else** statement after a program flow statement such as **return**, **throw**, **break**, and **continue**. I worked this out a long time ago and I'm sort of happy that lints and compilers are just beginning to pick up on this. This basically prunes the indentation of logic trees and keeps it very readable. Hopefully they'll pick up the next step: if the program flow statement is in the **else** side, negate the **if** conditional to switch the program flow statement to the **if** side and prune the **else** as normal.
in his example...should he be appending the doc fragment after every div is created....dosent appending it after every loop iteration defeat the purpose?
Was it only exploittable on windows? Is Mac safe?
The actual expression doesn't render. Tested in latest Chrome and Firefox.
http://adambom.github.io/parallel.js/
Correct me if I'm wrong here… but this seems like this introduces a fairly significant memory leak on any browser that doesn't support [WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap), given that this is the shim implementation: WeakMap: typeof WeakMap != "undefined" ? WeakMap : (function() { function WeakMapShim() {} WeakMapShim.prototype.get = function(k) { return this[k] } WeakMapShim.prototype.set = function(k,v) { return this[k] = v } return WeakMapShim })() Am I missing something?
The essence of this "framework" is simply: var smartStorage = function(k, v) { if ( v ) return localStorage.setItem(k, JSON.stringify({v: v})); else return JSON.parse(localStorage.getItem(k)).v; }; var a = {hello: 'world'}; smartStorage('a', a); var b = smartStorage('a'); b.super = 'smart?'; console.log(a, b); // {hello: 'world'}, {hello: 'world', super:'smart'}
And an isJSON method that like this???? // Checks if the specified string can be parsed to JSON var isJSON = function isJSON(string) { try { JSON.parse(string); return true; } catch(e) { return false; } }; And then on the usage: else if(isJSON(value)) { return JSON.parse(value); // value was of type object or array Why not simple call the function tryJSON and return object / null? 
I think something a lot of developers might not realize is that every idea isn't necessarily an accepted or proven pattern - especially when mixing patterns from different paradigms. Often enough, they are even anti-patterns. As you said, there are too many potential patterns, but thankfully many of them can be ignored. If you are familiar with accepted and rejected patterns from any other language, you can probably figure out which ones will hurt you in JavaScript. Personally, I stick to patterns I've used previously to solve architecture problems that I now understand will solve this new problem. As most developers are likely not researchers, it's probably safer to use what's already well understood. http://addyosmani.com/resources/essentialjsdesignpatterns/book/#whatisapattern
This. It means that you can structure your JavaScript and html to be more MVC-like and have less random boilerplate event manipulations.
You're right, the library is simple but so is localStorage. Unless developers who use localStorage only work with strings, they'll have to code similar functions to parse the correct type. Might as well make it into a mini-library with some helper methods thrown in to make the job easier/faster for everyone.
Thanks for the suggestion, I refactored the code and actually didn't need a separate tester method.
As far as I know, Angular 2.0 will start using Polymer web components. Just to give you a quick answer, yes you should. For more information check https://groups.google.com/forum/#!msg/polymer-dev/4RSYaKmbtEk/uYnY3900wpIJ .
Could it be that you are using id="infoWindow" multiple times and that that is the cause for your errors?
If you *really* want to support IE &lt; 8 you need to point out that json2.js is also required
Good work on the well commented and brief js, it makes the functionality of the library easy to figure out.
That's true, thanks. I'll note that in the readme.
I have used the text plugin with r.js countless times. it has always worked for me. Did you try to use the closure compiler instead of uglify, and vice versa?
I have added a shim so it will not fail on older browsers. However it uses a pseudo-threading method which is not true multi-threading.
You might want to check out the Polymer implementation of TodoMVC, which uses Polymer elements along with [MDV](http://www.polymer-project.org/platform/mdv.html): http://todomvc.com/architecture-examples/polymer/
http://rubular.com/ for ruby!
I just heard about Websockets, literally, someone walked over and showed me what he was working on. Informative read for newbies like me
I have a question: in a JS module do people really prefer to do var _myFunction = function myFunctionFn () { }; vs. function _myFunction() {} 
You can use [moment.js](http://momentjs.com) to make this very easy. If you had a few more details about how your time is displayed I can give you a more solid example through a jsfiddle.
Found the first bug: when you open the file selector and press cancel, it kinda breaks until you succesfully select a file again. Will fix later.
Why can't you do SPAs with a websocket (socket.io) router and update the page with ajax, but from the client side store, without page refreshes.
you are not using a [fixed-width/monospaced](http://en.wikipedia.org/wiki/Monospaced_font) font to display the output, so the output is all skewed.
[This book](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) is a much more in-depth resource. Addy Osmani writes some excellent posts and free books. Not to devalue the author's work, of course - it is nice to have code samples, but the discussion around them brings more understanding.
I think there is definitely room for both, but it's possible that WebSockets could move into the AJAX space rather aggressively. You have two technologies that can complete the same task, but one of them is broader and has more capability. Also, Websockets have some performance benefits over AJAX. The real argument against Websockets is the tooling and ecosystem isn't quite there yet. As an example, SOAP has largely been abandoned in favor of REST, so there is some precedence for standards overtaking one another in the Web development world.
Are you sure that's not on your end? What browser/OS? I ask because I'm doing nothing to the textarea, just setting a font on the body, which looks fine in all the browsers I tried. To make sure I explicitly set a monospace font for textareas, but I'd really like to know *why* this is.
I agree, use case is critical. If it's a simple mobile site with alot of jquery it may not make as much sense. But if you are looking to build mobile web applications that compete with native mobile apps, then low-latency WebSocket messages are probably going to give you a better user experience. Especially, if you're building a twitter or facebook-like application that needs to receive updates and notifications from the server, because with Websockets you have bi-directional communication baked in.
AJAX was really a hack, that has sometimes turned really ugly. I really think WebSockets will take AJAX's spot on various (if not all) cases. The real alternative to WebSockets will be WebRTC, which could make room for a different kind of real-time applications, not solely based upon TCP connections (think : games). I really want to see it coming true.
The meta network was also posted in /r/dataisbeautiful, it's fun seeing the responses when people begin [looking at their own network of the discussion about the network](http://www.reddit.com/r/dataisbeautiful/comments/1jqz3f/reddit_conversations_visualized/) You see long threads of the same color, users posting replies to their own comments to make new branches or grow longer ones.
Thank you. I'll make my own *thread*.
It's kind of a bummer, because SSE + AJAX would be a great fallback for browsers that don't have native Websockets support. Only problem is that Websockets actually has better browser support than SSE. IE doesn't seem to want to support it. I think as things progress the actual protocol that data is sent over is probably going to be more abstracted away from browser side application development. So maybe you would just change an option to switch to SSE/AJAX vs Websockets. The only advantage I can think of is that firewalls and load balancers would be friendlier to SSE/AJAX traffic out of the box since it's all just vanilla HTTP technology. 
There is no war. Like in all engineering you ask the question, "what fits my needs best for what I am doing?" If I need something that polls XML/HTML data, then I'll use AJAX. If I need something for bi-directional communication with raw data, then I'll use Websockets. 
Lots of WS libraries fallback to long polling which keeps an open http connection that expires after X seconds (long polling) .. The fallback is if WS isn't available for whatever reason. AJAX would be an on demand/request connection, such as a request for a specific piece of information and not polling of a server resource. 
Ah, I didn't take abstraction layers into consideration. Yeah, long polling seems like an especially bad idea these days. I seriously hope that WS will become commonplace ASAP.
/me nods You know what's also bad that I didn't mention, if WS isn't available, first fallback on SocketIO is Flash.. It delivers a full flash file, parses it, executes it.. I mean come the funk on! Nastyspice/
I haven't worked with websockets before, but I think I assumed I would still use REST or something like it. Is that not the best practice? Let's say the user is entering a contact, so they're going to enter first/last name and a phone number. With AJAX, I would let the user enter all of that, then send it. Are we saying that with websockets the best thing to do would be to send each field when it loses focus? Or maybe send every character?
Thanks, I will do this!
AJAX isn't a hack; its name just never changed as it evolved. As a developer you must realize that there are use cases for both AJAX and Websockets. You can start by reading the specs: http://www.w3.org/TR/2009/WD-websockets-20091222/ and http://www.w3.org/TR/XMLHttpRequest/ From there you are better able to make decisions which satisfy your requirements and not jumping on bandwagons. Edit: words not sense
Oh, and I guess you'd need an additional [DOMReady](https://github.com/ded/domready/blob/master/src/ready.js)-like function to replace `jQuery()`, but I'd just leave that up to the implementer to execute a function to trigger your UI updates.
Im running Chrome 28 on OSX Mountain Lion All i can see is this in your `body` css: ``` font-family: tahoma,arial, sans-serif; ``` I don't see anything else about a specific font for the textarea. Try adding: ``` textarea { font-family: "Lucida Console", Monaco, monospace; } ``` That fixed it for me. 
I've found that sometimes some chrome browsers use a sans-serif for all their defaults fonts (serif, sans-serif, monospace). It might be worth it to insist on a specific monospace or use a @font-file.
Ajax wasn't *designed* as a hack, but it was misused many, many times. What AJAX was used for (sending information from a server to a client without asking for a fully formed HTML page) can and will be done with Websockets. The article says this exact same thing : &gt;In point of fact, the entire AJAX protocol could be built using Websockets technology. This makes Websockets a literal superset of AJAX. So it makes sense that we might abandon a limiting technology for a broader technology. There is no "AJAX vs. Websockets". Websockets have won by design. They will just need to be broadly adopted, but the upsides to WS will take care of that part. Now WebRTC offers something *different* but still not that far. I think we can debate on which one to chose over which one, depending on the use cases. No bandwagon, just facts. Thanks for your time anyway.
... almost. I would recommend people just go to Github and read the code itself, it's well commented and more accurate than this article. EDIT: typo.
Are you running any chrome extensions?
It looks like it's just adding on query params to the href of links that go to tmall. The second part updates the action -, I'm not sure if it's actually changing where the form is pointing. What domain is the script.js from? Most likely it's a script from an advertising agency that deals with both places and so has their code together. pid is more likely to be a tracking id for the user as it's unlikely both sites would have the same id for a single product
Looks nice, I am curious why you don't use requestAnimationFrame though.
yes * JSON formatter * ABP * Tineye * RES * FB photo zoom none of which I believe would have any connections to a Chinese marketplace
and what is passed to the 'v' in the function is passed by jQuery's each, which would be the element that is found (k being the index). So it's only going to add to the query string of the href already there (if it's an anchor and 'tmall.com' is found in the href) Having a look at taobao.com they use a J_TSearchForm on their homepage so they just use similar naming conventions. So all up, it looks like a script that just tries to add in extra information for those outbound links which points to advertising, no re-routing to other sites (at least not on purpose)
No, it doesn't. It uses flash to set up sockets.
I will be glad to receive any critics here, in github issues or via pull requests :)
I really hope so - since the SSE setup and use fits so many usage patterns where possibly a full WebSocket setup is overkill. Support is already pretty good (no guesses to whom does not support - yet). http://caniuse.com/eventsource
Here here. Also, Websockets can be resource intensive. Imagine a server having sockets open to 500 clients. It can be taxing very quickly. By design it has more functionality, but that does not mean better.
Does it happen in incognito mode? i.e. with all extensions disabled.
An idea: add a contrast slider as well as a brightness slider.
My money is on door #5. My guess is you're using a knockoff by accident.
&gt; native mobile apps, then low-latency WebSocket messages A constant, reliable, and available connection on a mobile network seems pretty dicey even these days, no?
idk what Facebook photo zoom is, but there is a nice safe extension called Hover Zoom thats shows full images when you hover them or links to images. 
[Hover free](https://chrome.google.com/webstore/detail/hover-free/hcmnnggnaofmhflgomfjfbndngdoogkj?hl=en) is actually the one to use now, since Hover Zoom started [getting shady](http://www.ghacks.net/2013/03/05/beware-hoverzoom-extension-for-chrome-turns-evil/). 
I wasn't aware of it when I first started the project and haven't gotten around to it yet. I'll add it to my list.
&gt; SOAP has largely been abandoned in favor of REST You mean over browser AJAX calls right? Just to be clear for other readers. If you're just requesting little packets of data to populate your controls and tables in your UI then SOAP is overkill. But SOAP is still very big in the enterprise especially for critical B2B data exchange. When you need transport agnosticism and have clients that need to submit/consume sensitive or precise information then the rigid RPC and payload specs emergent and enforced in SOAP is still the way to go. 
There is a library called SignalR which will try WebSockets first, if not available (either client or server) it will fall back to SSE, or Forever Frames on IE, and finally to long polling. It's a .NET server library and there's client libraries for multiple languages (of course including javascript). I used it for work and was very easy to work with. I very quickly implemented it in an existing Ajax site to push status updates from the server. 
Thanks for etherpad. We've got a local instance at NASA and hopefully adopting it for a larger audience 
when you press F12 and view sources, you can view all of the scripts that ran in context of the page. One of them wrote a script tag into the pages. In the latest version of chromium, you'll see "sources" and "Content Scripts" as separate tabs (NEW!) The gobledy-gook hash that you see in Content Scripts is the plugin ID... once you find the script, you can ctrl-f on your extensions page and find out which it is by that ID.
Had to go back and resize my browser but now I see what you mean... yuck. 
[Here is a super good resource](http://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname) that answers that question in detail: 
&gt; I initially had the IE check outside the function so it only runs once but decided to keep it inside so var ie isn't in the global namespace. Do you think this is a good idea or? Well, it is still calculated every time. I'd suggest you use it like `Locstor.getRemainingSpace = ie &amp;&amp; ie &gt; 7 ? function(){ return localStorage.remainingSpace; } : function() { return defaultSize - this.getSize(); }` or even `Locstor.getRemainingSpace = 'remainingSpace' in localStorage ? function(){ ... } : function(){ ... }` &gt; What would be a better way of doing it? Well, you can use custom function for unicode characters (see http://stackoverflow.com/questions/2848462/count-bytes-in-textarea-using-javascript ). But really it's not that necessary. Seems just my bias, sorry :-)
Seems like I fixed that by accident while improving performance. That is, while fixing utter sillyness! Instead of calling GetImageData in the inner loop for each single pixel, that gets done once, which is a huge speed increase. Also, the image doesn't get parsed every time a slider gets changed, which eliminates the flicker, at least on my machine. So if you tried this before and the slowness annoyed you, try it again :D
Yeah, at least allowing a small selection of monospace fonts would be nice.
Oddly enough I **just** finished writing a [blog post](http://trevoro.net/2013/whats-your-timezone/) about this very subject.
 (""+new Date()).match(/\((.+)\)/)[1]
Does not appear to work at all in Android. (4.1.2 stock browser)
For anyone wondering where to find this in the AngularJS source, check here https://github.com/angular/angular.js/blob/master/src/ng/rootScope.js 
You should submit a pull request. A more accurate getSize() function would be awesome! Especially with such a (relatively) small amount of storage space available.
Could it be an attempt to gain affiliate marketing revenue or something? (e.g. append affiliate marketing identifier to the URLs so it counts as if you were referred by person X...)
/r/LearnJavascript is the subreddit you're looking for.
Chrome Extensions have an awful permissions system. Have you tried disabling all extensions (through chrome://extensions) and seeing if it changes anything? Bear in mind, because of the (shit) way Chrome deals with permissions, **any app developer** who has at **any point** asked for "All website data" has complete access to your Chrome. **They can release an update silently** that can do things like simulate websites. Not only will you not know that it's happening but as far as the website that's being simulated is concerned it's you doing it. Sorry for the rant, but as a chrome extension author myself (and needing lots of permissions to have my app actually work) it angers me that the Chrome team don't seem to care. I [logged](https://code.google.com/p/chromium/issues/detail?id=117054) a security bug with proof of concept last year and they said they wouldn't fix it.
Yeahhh, I guess I could've probably just googled that thanks though!
Thanks for the tip!
This was my guess too.
Very nice game! The UI elements, such as the buttons, are very small on my HTC One (1920×1080), but the experience is super smooth and fun! EDIT: Looked at the screenshots and it seems you made the buttons small on purpose. I'm just used to shrunken interfaces due to this phone, but it seems your elements are scaling nicely!
Might be a good idea to actually link to it.
The link is in the description now.
So I saw the post the other day on $watch, $digest and $apply in this subreddit, and I honestly felt like it didn't do a great job of accurately explaining what they are and how they work together. I'm currently the front end "architect" (lead) for a large team of developers working on a large effort in Angular. My worry is that since some of my team members are redditors the other article would give them the wrong ideas about what's happening... not because the other article was outright "wrong" but because it's not exactly accurate either. The most important statement in this entry, if you're kind enough to read it is this: **DON'T TAKE MY WORD FOR ANYTHING, [READ THE CODE ON GITHUB!](https://github.com/angular/angular.js)** This is the beauty of using open source frameworks. You can read the code and understand what's going on. I'm not doing this for any sort of profit (I think Blogger.com may make something off of ads they inject or something, I don't know, I have AdBlock)... I'm doing this to learn and help others. **TL;DR: I wanted make sure people didn't get the wrong ideas about what Angular is doing with $watch and $digest, particularly my team members that read this subreddit.**
I liked how you showed the $watch expression both as a string input and as a function that returns the $scope.variable. I never really realized that before. In looking at the actual Angular JS $watch documentation [$watch documentation](http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch), I'm not sure I would. Thanks for the nice writeup, keep at it.
One important thing that isn't mentioned about the difference between $apply and $digest, is that $digest checks the watches of the current scope and the children. $apply starts the digest cycle on the rootscope, so $digest is executed on all the scopes. This can be important if you have something that changes often and you know which scopes it is limited too. Performance can be increased by not using $apply and just using $digest on the proper scopes. That said, this should be an exception, and you should almost never use $digest directly.
You're 100% correct. Here is the code for $apply [straight from the source](https://github.com/angular/angular.js/blob/master/src/ng/rootScope.js): $apply: function(expr) { try { beginPhase('$apply'); return this.$eval(expr); } catch (e) { $exceptionHandler(e); } finally { clearPhase(); try { $rootScope.$digest(); //&lt;--- THIS is what Zeroto is talking about } catch (e) { $exceptionHandler(e); throw e; } } }, Whereas the $digest will start at whatever scope it's called on and work it's way upwards through child scopes.
Very interesting.
Said that, your post is really good. I always try to explain as much as possible (but trying to not be dense or dull), maybe that was the wrong approach for something like this.
No, just fire an emit event to the server on submit with all fields in a json chunk, once it hits the server, process away. It's surprisingly easy.
Thanks! I'm actually planning to use this as a base for a game that I had in mind once I get more experienced. Obviously there's still a lot of work to be done, though. And sorry about the link, it's better now.
Looks pretty good, I remember making these types of things in Processing a long time ago. One thing I can suggest from looking at your code, is that you shouldn't need to have two types of objects, Satellite, and Sun. You could just have one object that is called Mass or something. I see the only real difference is that you are setting the Suns default color / density, you could just pass this in when you create the Masses or you could create a decorator or something. This will allow you to loop through all of the Masses instead of having two seperate for loops for drawing and updating etc. You could also add some functions to them to make it a little cleaner: Mass.prototype.distance = function(that){ return Math.sqrt(Math.pow(this.x-that.x, 2) + Math.pow(this.y-that.y, 2)); } var mass1 = new Mass(...); var mass2 = new Mass(...); var dist = mass1.distance(mass2); 
Great suggestion, I'm currently at work implementing something similar to this. 
Here's a really terrible example I threw together. I also fix the fade in transition. Normally the toast/notification instantly appears. http://jsfiddle.net/aR5GJ/1/ Disclaimer: I am not connect to this project in anyway and just discovered in through this thread 10 minutes ago.
I never once blamed anyone. I'm glad your contributing to the community. However, I don't have control over your blog/site, I don't know you, and I don't feel comfortable contributing to your site. I hope you understand. Thank you for posting your article. I'm sorry if I've offended you with mine.
Nah, there is no offense. But I got tired of: "Your article is not good, leaves much to be desired", etc etc but no one is capable to point what's wrong.
Thanks for the example I'll have to try myself, although there is already a whole sea of notification based javascript libraries out there unless this is really special I don't see the draw. I also rarely see any sites using this sort of thing. 
No prob. You might not have found that particular resource and it is hands down the best for that topic.
* Alerts * Confirms * document.layers * document.all * &lt;a href="javascript:void doSomethingWonderful();"&gt;Click here&lt;/a&gt; * Also brush up on the big "library" out there, I think it's called protoquery or moojo, I can't remember which. It's like a scaffolding framework with animation, part of the noSQL thing.
Take a look through these examples: http://shichuan.github.io/javascript-patterns/ while there's some contention as to their validity the core concepts are viable.
I would say that being able to clearly explain closures, and all of the related scoping and garbage collection related to closures, is a big one that trips up a lot of people (and, from what I hear, is asked very often in interviews). Also, being able to identify what the **this** keyword is referencing in a given block of code would be another core idea that I've heard is asked pretty frequently (since it's so easy to get wrong). Good luck! 
I never thought about searching the hash, or that it links back to the extensions page, thanks!
The code loads commented out, so I'm afraid I do not know a context for which to run it to watch it's local vars.
nice! thanks for the link. I'd like to add my own here as well, while on the topic of JavaScript design patterns. Found this really useful, and well written. http://addyosmani.com/resources/essentialjsdesignpatterns/book/
This aint 1997 :-)
Did no one get that he was joking? I laughed out loud in my office.
I looked at the "optimized for loops" on that page: https://github.com/shichuan/javascript-patterns/blob/master/general-patterns/for-loops.html Wtf? Amazing how much worse he can make the code with no benefit at all.
Yeah, I have to agree with the criticism of *"shichuan's javascript-patterns"*. There was some discussion which said this repository isn't very good: http://www.reddit.com/r/javascript/comments/1jr6p0/javascript_programming_patterns/
I agree with most, but in essence these are the trickier parts: - this - Closures - Currying - Memoization - Functions as a first-class citizen - Lexical scope - Prototypes - AMD pattern (other patterns as well) - IIFE's Some other things you might want to know surface-level - Node.js - Require.js and other module systems - jQuery - Browser caching or cache-busting While JavaScript is important, I'd also brush up on other things as well (if you haven't already). Like the DOM, CSS (box-model, preprocessors, CSS3), and browser differences too. Those are important as well!
As far as *this* goes, I've always said that "It's a reference to the function invocation, which is typically the parent object unless you've overwritten it in the Function.prototype.apply() method." Would you add anything to that?
Anytime I interview someone on their JS knowledge I start by asking, "what is the significance putting `var` in front of a variable name". If they can't answer that question correctly, I don't bother asking any other JS questions.
+1 for Local Storage, which seems to have [pretty good browser support now](http://caniuse.com/#feat=namevalue-storage). I found [the Dive Into...](http://diveintohtml5.info/storage.html) section to be very helpful. 
OP: this ^ is your answer.
Don't forget the shiney new library: angleBone, I think it's part of that MMXIII pattern I've been hearing so much about.
While it is a good idea, I don't see where you use `getTimezoneOffset()` in your example. You seem to use a different method in the example to convert dates.
are you offering to pay some one for this....cause you are asking for a lot. There are enough materials online for you to learn these things on your own. Why would someone hold your hand and basically give you their hard earned knowledge?
You gave me names for techniques and concepts I already knew. Cheers.
Sounds spot-on to me!
can't decide if I'm happy I can answer a few of this questions or terrified I can't answer most. Been doing JS for the last 8 month -- successfully to my standards
So I wrote this code for another Redditor (who asked for help over in /r/web_design). He knew no Javascript, what-so-ever (barely even knew HTML), so the code was designed to be very easy to add/remove languages and prices from. This is my first try at Javascript (other than randomly messing around in Chrome's console) - any good practices that I skipped, or anything else in my code that looks terrible? Would love a bit of insight in what you guys think of it.
Nope, a Map, generally, doesn't have an order to its elements. I'm sure there are some implementations that do guarantee some ordering when iterating members, but that's unusual. 
I'd take it as an indication you may want to go deeper, that's all :-) 8 months isn't long and if I was interviewing you knowing that, it would matter which questions you got wrong and how you answered them... you almost WANT a little BS in an interview in the sense that if you don't know something a good answer is "I don't know that, but, here's what I *think * it might be based on my experience"... as long as the answer you give after that at least sounds reasonable and in the ballpark then you've greatly reduced the negative impact of not knowing something. To put it in perspective, I've been in IT for over 20 years, have had 7 programming books published along with some articles besides, done a lot of things that are generally regarded as pretty impressive as a developer, but I'm certainly going to have to use that answer sometimes too, and any interviewer doing their job well will understand and account for that.
It'd be pretty funny if the OP is getting ready to interview with you.
If you can't remember if it's apply or call that takes the array. Apply has the same starting and ending letter and the same amount of letters.
This only works if your use case is only to display time in user's timezone. If you have anything more complicated, then it wouldn't work. 
2 criticisms: 1. You should probably provide default contents for your `&lt;time&gt;` tag to prevent pop-in and issues with people running noscript, bots that are unaware of the `&lt;time&gt;` tag, etc. 2. REALLY focus on the UX of your site: Users will have an expectation of consistency and may be thrown off if they see different times on a device they didn't realize had a misconfigured timezone, or they are traveling and are still thinking in their native timezone, etc. This **may not** be a good idea for the application you're building, or it may be great, be very cautious. 
Ha, I never noticed that. Nice! Now of course I'll have to alter my question to make sure people aren't just remembering that :-) 
&gt; Explain what a closure is and give examples of when to use them and why it makes sense (and sometimes I ask when it DOESN'T make sense). Can anyone give a couple good answers for this? Closures seem like such an all-purpose tool to me it's hard to answer. It's like asking when would you use and avoid Arrays.
A cool question that involves apply is 'How do you combine or add an array to an other array without creating a new one without using any sort of loops.'
I think the only thing out of here I don't know offhand is the XMLHttpRequest bit, but that's only because I use jQuery to handle my AJAX. Is that a generally acceptable answer? 
Welp, where's a good place to learn this stuff?
E.g. one of these implementations would be Ruby's (1.9+) `Hash`.
http://html9responsiveboilerstrapjs.com/
&gt; Explain what a closure is and give examples of when to use them and why it makes sense (and sometimes I ask when it DOESN'T make sense). Can someone point me in the direction of information about this? I know *of* closures, and have heard of Clojure (or however it's spelled), but have o idea what it / they are for. 
Frankly, no, not unless jQuery is *specifically* requested in the job req (or some other caveats- see below). I also interview a lot of people who claim to know JavaScript but then it turns out they only know &lt;insert library name here&gt;. While that knowledge is fine, it's in no way synonymous with knowing JavaScript. I liken it to someone that can read the error codes out of a car's computer and can swap some parts based on what it says... yes, that person is useful in at least some settings, but they don't actually really know how to fix a car. Now, here's the caveat I mentioned: if you otherwise know JS but it just so happens that you only ever used jQuery for AJAX, that's fine. I haven't written "naked" AJAX code in a couple of years myself (DWR for me), so it's only a problem if jQuery is all you know generally.
Conventions, terminologies, ideologies, theories and fancy talking... you need that aspect of a programmer in the corporate world. Doesn't mean you can't get the job done without any of the above or vice versa (brogrammers). My particular approach to programming goes down to performance and maintainability. The rest I couldn't care less.
I see. From my point of view, I use a lot of vanilla JavaScript, but I abstract away the annoying (read: cross-browser) parts with jQuery (AJAX being the only one I can think of), which is why I asked. I'm glad that it'd be an okay solution for you at least - that means some interviewers likely feel the same way. Thanks for your feedback!
One answer I like is in the context of asynchronous calls, AJAX being maybe the best example. Closures let you capture values you'll need in the callback without (a) passing the values to and from the server and (b) storing them in some context independent of the callback (via a vis, a global object for example). It keeps the code clean and concise.
Yeah, that's awesome! I've only interviewed for a few development jobs and they were all pretty lax on the basics like this, and more focused on specific frameworks. I figure I should use every opportunity I get to get a wider variety of interviewer knowledge under my belt.
While you may find someone willing to do this for free, you'll certainly find a lot more of us willing to help solve a specific problem. Each of your three bullets, for example, could be asked and answered individually. I'll happily look at any code samples you post here and will do my best to answer your questions, though if you really want a mentor I strongly suggest finding someone you can sit next to. If you just want general knowledge of the current world of Javascript I suggest checking some of the links on the sidebar, and while I haven't tried it, checking the IRC channel noted in the sidebar will presumably give you access to many knowledgeable persons.
Well, there are times where you would avoid arrays as well, because they were unsuited to the task or had performance implications you weren't willing to tackle. A closure is a function scope that has been "closed over" meaning that any calls to functions defined within that closed-over scope have access *to* that closed-over scope. This can have dangerous memory and debugging implications. For as long as any part of your app has access to one of these closure-defined functions, the closure scope must be retained.* If you closed over something huge (an array representing 5 megapixel image for example), you're going to have a hard time evicting that data from memory. In other words, a memory leak. Also, because closed-over functions have a secret shared state, they are more difficult to debug and test. If you have a race condition somewhere, it can be difficult to "insert a probe" where you need it, especially in a live environment. \* - I believe V8 and other modern JS engines are able to clean up parts of scopes by analyzing the dependency graph, but that's just supposition based on some peculiar experiences I've had with the debugger. 
I always think of the meaning of the words *call* and *apply* themselves. For *call*, your *calling* the method as you would on the object. For *apply* your *applying* the method to a more nefarious construct. I think your way is simpler and less confusing though.
I prefer boneular.js to anglebone. You should give it a shot. It's the future
Surprised no one said HTML/CSS and W3C DOM. Maybe those were just implied. JavaScript isn't that useful without something to play with. Usually I won't hire a JavaScript dev unless they also know html/css well (and vice versa) or nodejs if its a backend dev. 
http://stackoverflow.com/questions/111102/how-do-javascript-closures-work
sometimes undefined isnt what you expect.
Yeah, it's a bit tricky to word clearly... I've gone through a couple permutations of it... it's even harder when we do a phone interview with non-native English speakers on cell phones from half a world away.
I think you meant to say scottBacular.js paired with the Al router (btw the ziggy addon is buggy) and you're always hoping the next route will be the route index
I like tree var a = b.c || "default value" is very useful very important too : clojure and self contained singleton : var a = (function(){ var b = function(){ this.plop = "very cool things"; }; return new b(); })() and last one is : var a = {}; var b = a.something = new othercall();
This really seems academic to me. $.ajax and XMLHttpRequest achieve the same things. Rather than switching response codes and listening for an event, jQuery abstracts those things away. If a person is competent enough to use $.ajax in most cases switching to vanilla would seem to be a minor diversion in the cases it's required not inordinately different than someone like myself that's not used the vanilla approach in several years.
Thanks!
Here's a situation of where to use a closure: var i; var array = [ 'one', 'two', 'three' ]; for (i = 0; i &lt; array.length; i += 1) { var item = array[i]; setTimeout(function () { console.log(item); // logs: three three three }, 1); } for (i = 0; i &lt; array.length; i += 1) { (function () { var item = array[i]; setTimeout(function () { console.log(item); // logs: one two three }, 1); }()); } First time you run into this when not using a closure is pretty crazy. The reason why it logs 3 x three is because at the time the callback of setTimeout is called the item variable is already three.
If he used spaces for alignment, it would be okay.
this
sorry, it's an internal app behind a firewall :P Actually the performance may be unrelated to browser reflows. Turns out an old version of iScroller was animating frames infinitely... These are still good practices to follow
I would start here: http://www.codecademy.com/courses/getting-started-v2/0/1
 [This](https://github.com/rmurphey/js-assessment) assessment test will really cover all your bases. It ranges from trivial to difficult problems. Hell, just getting thing running and working will give you a leg up because you will be learning the basics of testing. 
Function.prototype.bind and Function.prototype.call also allow `this` to be set arbitrarily. Also, 'reference to the function invocation' sounds unclear to me, and you didn't mention the case of the function being called with `new`. These are the possibilities, in order of precedence: - *Outside of a function body:* `this` is a reference to the global object. - *Function called with new:* `this` is a reference to the object created by the constructor. - *Function called with .bind, .apply, or .call:* `this` is a reference to the object given as the first argument. - *Function called as an object property:* `this` is a reference to the object the function was called from. - *In strict mode:* `this` is undefined. - *Otherwise:* `this` is a reference to the global object.
Here are a few: * How can you call a function in a specific context? The very clear ways are .call or apply. If you want to impress you would add Function.prototype.bind to that mix. This is ES5. * What is hoisting in javascript? Not a lot of people I've interviewed know what this is or why it matters. * At least know how to perform a binary search. * What is the output of the following. var adder = new Function("a", "b", "return a + b"); adder(6, 2);. The answer is 8. Creating a new function from the Function primitive allows you to pass n number of arguments and a function body. * What is the difference between == and ===? * What does var add = function (a, b) { return a + b; }; add.length; tell you? add.length is going to tell you how many arguments add is expecting. * How can you tell if a parameter is an array or not. This seems like you should be able to do typeof [] === 'array', but actually it's object. So the way to really do type checking is doing something like [] instanceOf Array. That's all for now. If I think of more I'll add. 
Understand completely what the 'new' keyword does, and you'll be ahead of most JS developers (unfortunately).
I'm not a fan of asking about specific methods, such as XMLHttpRequest or document.getElementById as modern libraries abstract away all of this stuff. If interviewers ask a lot of questions like this it's a warning sign the organization may not have moved with the times. I generally get people at my whiteboard and say: Here is an array of animals ... var animals = ['cat', 'dog', 'mouse']; You have an empty web page (with a body tag). Write a bulleted list of animals to the page. This lets them use any framework they want, removed awkwardness as they have seen my handwriting is worse than theirs and it starts a discussion. We then usually start coloring things with css, reduce the number of dom writes, get into the difference between == and ===, missing 'var', undefined vs null, grabbing the data with an ajax request, repeating the ajax request at a regular interval, GET vs POST etc. Exact syntax is less important that knowing the approach to problems. By having a discussion around a problem I get a much better sense of if you know what you're doing or have just read a textbook and JavaScript interview questions.
What kind of salary would the positions you do these interviews for be? 
Off topic, but what's revenue like from authoring a book? Is it more a labor of love for a technology or a grab at serious side income?
Because it is rewarding to be a mentor to others? Because teaching someone else often solidifies and enhances your own skills? Because you might actually work well together and be able to build something worthwhile? If you don't want to help, that is fine, but I see nothing wrong with his asking.
Protip: pass array[i] as an argument of the closure. Not sure if it improves GC heuristics by removing the interdependence but it's more explicit about the fact of why you are creating a function inside a loop which is often recommended against and you will need to pass an option to jshint for it to stop bitching about it. 
I have to admit I often fall into the trap of just using $.ajax as well, but I agree with your point - my job has lots of people who know jQuery and assume they know Javascript when a lot of their code works by accident. For example they check if an element exists by grabbing it with jQuery and checking if it == null to see if it's been defined yet. The only reason that worked is they didn't know what === was and thus never used it, and they didn't know null and undefined were different but they happen to == to the same value. Lucky. They used this all over, though, and many times this DIDN'T work and so they'd write big functions (and of course, they were big 300+ line spaghetti functions because JS isn't "as good" as C# so just make one big function, right?) to try and "get around" the bug. But they all claim to be Javascript devs because it's "C-based" so they "know it, it's not hard if you know C#". 
Generally speaking I find the tools a person knows less important than how well they use the tools they chose and pick up different ones. Vanilla or a library, they're all just tools and if a person doesn't need to use one you've chosen to test them on I hardly find that valuable information. Unless of course you're dealing with positions that require primarily those vanilla tools, then the context would seem dictate otherwise. Then again I find a lot of people want to approach ability assessment as if it were a University exam, even though development rarely resembles one. 
I always love these threads...especially when they pop up the day before I'm doing a technical on someone. I've not yet had someone admit to asking one of these threads, but I can't say I would judge them for doing so. I like to throw in a few questions about things like Memoization and other borrowed methodologies from languages that JavaScript can do just to see if they branch out or just study the night before. I tend to lean heavily on Lisp-like (or functional) JS myself, but I ask about their use of OO techniques, Prototypal, JSON, anonymous functions (you'd be amazed at all the JQuery "wizards" who don't know what those are)...
Awesome summary! Commenting mostly to save, going to be putting in apps for php/js/design work soon to jump out of freelance. 
Clojure is a Java Runtime language that uses Functional programming techniques. Which reminds me. I always like asking if JavaScript is based on Java or vice versa. Just to see how they answer.
&gt; What's the difference between setTimeout() and setInterval()? I can't even begin to tell you how many "JavaScript developers" I've interviewed who cannot answer this. I'm floored every time! Thanks for making me question my sanity. I had to double check because its in the function name! 
It all depends, as you can probably guess, on how well the book sells. Most publishers give you an advance, and that's yours to keep (that may not be true for all publishers, but is of Apress at least). That's usually a few thousand, depending on a number of factors (how "hot" the topic is, if you've published before and have good sales, etc). I've personally made as little as $4k and as much as $9k (interestingly, there's been no pattern to the amounts, it's whatever I could negotiate for a given book at a given point in time... although, as you can probably guess, having a few under your belt helps a bit!) Then, you get royalties after the advance is "paid back". So, if my advance was $4k, I won't see anything else until my cut of sales is more than $4k (I forget what my exact percentage is, but I think it's in the 25% neighborhood). I put "paid back" in quotes because if I never make $4k I still don't owe the publisher anything. As I said, the advance is mine to keep no matter what, they assume all the risk essentially. My sales have been, over the course of 7 books, average. What that translates to is that I've made little in royalties (&lt; $5k total across all 7 books). I've always suspected they set the numbers up so it works out that way unless you happen to write a best-seller. Just a guess, but I think it makes sense from the publishers' perspective... kind of playing the odds for them, so to speak. So, it's not really about the money unless you happen to write a hit, which I'm still working on frankly :) I make good money at my regular job so this is just some side income... certainly nice to have, but I couldn't make a living at it. For me, I write for a couple of reasons. First, yes, it's kind of a fun process. Well, except for one book, which wound up being a chore, but usually it's enjoyable. Second, it helps keep my skills sharp. At my regular job, these days I'm tilting a bit towards the management side of things, so I don't touch code as much as I used to (although I'm not officially management... but I refuse to EVER be a manager that loses my technical abilities!). Related to that, even though I write about topics I know well, I always wind up learning a few things. Third, honestly, it looks pretty good on a resume :) It certainly gets you some attention at work even if you never go elsewhere. Fourth, I *LOVE* the feeling of having someone eMail me or come up to me at a conference and tell me how they enjoyed what I wrote and it helped them. It's not about ego, it's just that knowing you helped someone, even if only in a trivial, unimportant way (which it IS in the greater scheme of life), that's a great feeling. And yes, I'd be lieing if I didn't admit some of it is just plain old ego! Not everyone can write, and fewer still have the stomach to put in months of effort on a book, let alone 7 books (with #8 set to hit shelves in October). That's frankly an impressive achievement to most people, and certainly the adulation you get because of it is cool. I can honestly say though that this is the smallest part of it for me... but it's there :)
Maintainability is one of the primary things that matter in professional development. While I mentioned the technical questions I ask, I have a collection of more non-technical questions that get into those sorts of things, and even if someone gets every single technical question perfect they can still very much blow the interview with these things... it's in fact far more likely they blow that portion than the technical portion. Maintainability simply can't be overstated. I agree, performance matters too, but I find that you can teach someone to write efficient code, but it's virtually impossible to take a developer with bad habits with regard to code formatting and complexity ("as simple as possible, but on simpler" the the mantra I preach) and teach them differently. Not impossible, but more times than not the effort fails in my experience.
Very good! I've used that one too, excellent opener.
Agreed on HTML/CSS... I know I definitely cover those topics as well in my interviews, along with a lot of other stuff.
I literally was in an interview yesterday where the guy asking most of the questions, if he were to create a *Jeopardy* category, it would be called "Obscure Object-Oriented Concepts That Developers Never Know." He also stared at me as if he wanted to eat my liver with a Chianti and a nice fava bean. Needless to say, I declined to consider working there.
That's a good one! (JS vs Java) If they get it wrong ... yikes!
That's a good question, but obviously the two are not related if you had studied the history of Javascript at all.
Interestingly, apply and call are taken from Lisp, http://stackoverflow.com/questions/3862394/when-do-you-use-apply-and-when-funcall. Except in Lisp it's funcall.
Didn't they call it JavaScript because they mimicked Java's syntax?
Only once you can answer these questions are you allowed to put JavaScript on your resume. I have 4 open JS positions in SoMA,SF if anyone's looking.
I think it was sort of arbitrary, and they wanted to hook into the popularity of Java, if only in name. It is primarily a subset of C with some other concepts thrown in. It's small, obviously, because it has to be compiled everytime it runs. edit: from Wikipedia JavaScript is a prototype-based scripting language with dynamic typing and has first-class functions. Its syntax was influenced by the language C. JavaScript copies many names and naming conventions from Java, but the two languages are otherwise unrelated and have very different semantics. The key design principles within JavaScript are taken from the Self and Scheme programming languages.[6] It is a multi-paradigm language, supporting object-oriented,[7] imperative, and functional[1][8] programming styles
That's pretty much my phone interview questions. I also ask how you can debug JavaScript. Looking for alerts/console/debug bonus points if they a strategy.
No reference to jslint? I don't allow my JavaScript onto a live site without running it through a linter like jslint.com.
reading "It is primarily a subset of C with some other concepts thrown in" just hurt my soul.
I don't know if I just suck or if currying is just a thing that doesn't come up very often.
Yes, I have a whole section of questions on, generically, how they ensure code quality. Static analysis is one thing I'm looking for.
To be fair, most Javascripters (especially front end) do not need to know about many of these concepts. Most of my front end JS is now just doing basic JQuery stuff.
It's kind of a rare thing to use and I haven't seen it in the wild very often. Crockford only talks about it for a half a page or so in "The Good Parts." It's essentially another way of code reuse similar to that of OOP. 
Yup. You got it! If you want to make a variable global it's better to namespace it and explicitly attach it to the window. For example - window.globalVariableNamespace.variable = 1;
I strongly disagree. While you certainly can get a job doing nothing but jQuery, and it sounds like you have, that doesn't make you a good front-end developer generally. It just makes you a good jQuery developer. That might be sufficient in some jobs, but you'll quickly find yourself in over your head in others. It's akin to a C developer saying since they know the standard library that they don't need to know the C language itself. It's like a Java developer saying they know how to use the standard APIs but they don't know anything about OOP. Those are plainly nonsensical statements.
Thanks a lot. It really helped me out!
what's the error? also, you have a trailing single quote. remove that and try.
yes, the map question seems poorly worded. I'd phrase it differently, I don't know what the person is asking. (I've been writing javascript for 16 years).
WOW. Thanks guys! Woke up this morning to a full page of advice :-) Will be going through them today.
Those are fancy names for simple concepts that I see used every day but never talked with such a theoretical strong-arm. I'd be scared if someone felt obliged to use big words for small ideas.
I ask completely novel questions such as: * Have you seen javascript the good parts? how thick is it? What color is it? * Who is Brendan Eich? Who is Jon Resig? How about Jeremy Ashkenas? * What company came out with Javascript? * Just list 2-4 common JS libraries that are in widespread use today. * Can you name any that focus on graphics? * Can you name any that focus on asynchronous communication? * What's some common JS syntax that breaks on IE? * Going back to syntax, there was this huge debate over semicolons. What do you know about that? * If I wanted to take my code and put it in production, is there anything I should do to make sure it loads more quickly? What common tools have you used for this? * IE is generally quite good at telling you where it fails. It can also fail silently. When is that possible? * What is "v8" and "npm"? Where would I find them? (knowing that they aren't say, standards or programming practices but actual software is a good start) * Pretend I wanted to know about the nuances of the Date object. What sites would be good references? What sites would show up high in the search results and be not so good? These should be easy questions for someone who does a lot of JS development and impossible for people who aren't doers. I'm not interested in tricking people and I'm not interested in academics. I need things to get done.
But XMLHttpRequest isnt even part of javascript is it? It's just a browser API. I could answer every one of your questions up there but if you asked me to write a raw ajax request off the top of my head in an interview I would laugh at you. 
Appart from what other people have already said, Memory Management. How the garbage collector works and where and when you are leaking memory as hell and how to avoid it. Seriously, if you are doing single page apps this is a huge issue...
You're right, it isn't part of JS... but I'm interviewing people for real-world development positions, not theoretical/academic positions. At least knowing about that object isn't a ridiculous expectation, whether part of JS or not, even whether they ever use it or not. But, for what it's worth, my question on that isn't to test if they know how to use it in intimate detail, it's just that they're aware of it.
I'm still learning (full stack webdev for almost a year now), but is there any reason to attach it to the window *other* than helping unexperienced developers understand what's happening?
ahem...could you quote the part where I ask for actual teaching? first bullet: maybe I didn't put it so clearly, but what I meant is look at my code occasionally, when I'm not sure if my solution was the best. that isn't the same thing as sitting down and explaining it from the basics. second bullet: introduction means (at least for me) just saying wich library/framework should I check out and why. that's it. third bullet: seriously? so don't worry, I bothered googling it, my trouble was more with the general direction. 
good points.
Extraneous `'` at the end, globally scoped `arr` that may or may not exist
Lemme give it a shot: Let's say you have an object with some defined values and methods stored in variable spam. You also have the name of one of its methods stored as a string in variable eggs. How can you call a method of spam using variable eggs. * edited to specify methods
I think that if you want to truly ask about JS you need to really talk about how would you go about such and such scenario. Given object A, how do you extend A and give it X functionality, which produces Y result. Listen to their process. See how they go about doing their task. Part of programming is learning to work on a team. Voicing ones opinion especially in times of duress during an interview also helps figure out demeanor. Stress really helps you figure out the type of people you want to be around during the most stressful parts of your day. Ask about why do you use json-p, not what is json-p. Why would you use jQuery.ajax over say XMLHttpRequest. What do you feel are the major benefits between X vs Y. Why use document.getElementById() vs $('#&lt;id&gt;') etc. What frustrates you most of all about JS, and how do you improve it? Why develop encapsulated libraries vs using prototypal inheritance? Why use Prototype vs jQuery? What purpose is there between using setTimeout vs setInterval? Is it possible to stop these methods from further execution?
Agreed. :P I'd say it has inherited C like syntax and Java like APIs due to business politics at the time.
It really depends on if you're using JavaScript to accomplish extremely light "DHTML" stuff to make your web page do simple things, or if you want to professionally develop web applications.
If you wouldn't write your back-end server logic without using software engineering principals, why would you write web application front-end software without them?
*Sort of* not using a loop: `array1.forEach(function(element) { array2.push(element); });` I wouldn't be surprised if people don't know the answer to this question though, you can't call it the most intuitive way to add elements to an array.
To be honest, XMLHttpRequest has nothing to do with JavaScript as a language. It has everything to do with the DOM. Off hand, I couldn't tell you how to use either version, but I do know where the documentation for both of them are, and how to use the documentation effectively. JSON-P, Hidden IFrames and the other 'hacks' are also not a part of JavaScript. It's web dev stuff, and if the programmer actually knows the rest about JavaScript, they can be quickly brought up on how these hacks work. Similar can be said about setTimeout and setInterval, except I don't know of any environment that doesn't define them. But they aren't in the ECMAScript specifications. Furthermore, you missed setImmediate. Can you tell me what that one does? And then you have the get the Element from the DOM with a specific ID. That is also DOM related and not JS related. Luckily though, this method is easier to remember.
I was also a bit confused by this, as I usually use the term Hash map for what you refer to as a Map, and initially assumed you meant a map function. ( map :: (a -&gt; b) -&gt; [a] -&gt; [b] )
 var a = [1,2,3], b = [4,5,6]; a = a.concat(b); Easy! :D
Understand completely what it does, and you'll learn you never want to use it.
Frankly if you got all the other answers right, then I wouldn't worry. You obviously know about the mechanics of Javascript. If *all* you knew was jQuery you wouldn't get a number of the other questions right. Particularly, if you didn't know about closures or prototypal inheritance, *then* I'd be worried if you didn't know about XMLHttpRequest.
I'm not going to lie, I don't think my brain is capable of writing overly clever Javascript! I always keep it as simple as possible cos I don't have a choice :)
Javascript: The Definitive Guide by David Flanagan Available at a library near you.
Which is why it's a good question: if weeds out people who know nothing about the history of Javascript at all.
**datetime** attribute manipulation (**jQuery**) is not recognised by IE8 and older, troubling for websites facing the masses. &lt;time datetime=""&gt;&lt;/time&gt; jQuery('time').attr('datetime',your.local.time); I think **AngularJs** can handle it though. &lt;time datetime="{{your.local.time}}"&gt;&lt;/time&gt; $scope.your.local.time = your.local.time;
The wording of the question was a little tricky to understand, but what he was looking for was `O[M]()` Consider that `M` is a string variable containing the name of a method in the object `O`. 
1) Suggesting that JavaScript is single-threaded ignores the existence of web workers. 2) You seem to not be completely differentiating the ideas of "multi-threaded" and "non-blocking" 3) Don't ask when not to use closures. That's a silly question, a double negative, and the answer is any time that doesn't fit the answer to when TO use them. The question is confusing, and nearly every imaginary answer is correct. 4) Lots of these questions are too vague. Leave some to the image, but at least try to solve a problem so that you don't give away your answers so easily. WTF?
Sorry, I don't think you can call yourself a Javascript programmer if you don't know those concepts. 
Not sure that memoization fits in this list...
Those aren't JavaScript related. That's why. Different topic.
Holding down right click is fun.
If you don't know what the "modern libraries" are doing, then you need to learn your tools. Learning modern libraries as if they were the language is almost as bad as learning CoffeeScript before you learn JavaScript. In both cases, you aren't learning what you need to know. That's why asking about low level JS is important. Your jQuery-lover that never learned JavaScript is going to burn a lot of time wondering why his variables are all wrong in his asynchronously called functions if he doesn't understand closures, XMLHttpRequest, etc.
Prototypes are useful for making and extending usable objects. For instance, if you wanted a circle, square, and triangle object, you might make a "shape" object, that has methods like "move", "show", "hide", etc., and use that as the prototype for the different shape object types. They would gain use of all the other methods and properties of the "shape" prototype, and would only need to include specific functions. Your shape prototype code stays in one place and can be debugged and fixed centrally, as opposed to using something like code copy/paste, where updates would have to be carefully synchronized. 
Well, no more recursive setTimeouts for you! 
This was much easier to comprehend (at least for me)
There are "developers who use JS", and there are "JS developers". If you're going to bill yourself as a JS specialist, these questions are relevant. 
Window is a browser construct, though. That'd possibly lead to problems if you wanted to reuse your code in other arenas. It's nonstandard, but I usually just say "global" in a c-style comment next to the first declaration. That and rarely use non-function globals. 
I wouldn't have thought to do this, but I really like this approach. Experienced JS developers should answer almost all of these easily and not only do some of them give the opportunity for the interviewee to elaborate in an open ended way, but there's a side benefit that they'd be somewhat tickled by the questions themselves. This means they'd leave with a good impression of the interviewer and be more likely to say yes to an offer. Sometimes very specific technical questions can either be insulting for being too mundane or annoying for being too obscure and can shoo away the best candidates. Good questions! (and nice dig on w3schools)
Actually here's a good question. for(var i = 0, o = {}; i &lt; 1e5; o[' ' + i] = i, i++); var last = -1; for(var key in o) { if(o[key] - last != 1) { console.log(o[key] - last); } last = o[key]; } Give me some possible outputs. What if I did i.toString(20) as opposed to ' ' + i?
Have you tried [SuperAgent](https://github.com/visionmedia/superagent)?
Two problems. Firstly, your params should be a string, like var params = "language=test&amp;language2=hello" Secondly, you also need to set the request header if using post like so xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); This code would work: var xhr = new XMLHttpRequest(); params = "language=test&amp;me=1"; xhr.open('POST', 'test.php', false); xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xhr.send(params); alert(xhr.responseText);
By the way, xmlhttprequest is part of ajax. A quick search turns up sites like http://www.tutorialspoint.com/ajax/. and http://www.cs.utah.edu/~germain/PPS/Topics/truth_tables_and_logic.html You may want to look into http://www.codecademy.com/ if you're looking for tutorials.
Not the same, if another variable pointed to a before the assignment, then that variable and a would be different afterward. You're making a new array. It is often useful to instead change the original array.
this really is excellent!
Most are terminology Crockford uses in "Good Parts."
You're talking about someone knowing JavaScript VS knowing a JavaScript library and at the same time you're saying the DOM API is part of Javascript. Surely the argument is the same? I could know Javascript very well, but not be clued up too much on the DOM API. Just because I'm not familiar on the DOM API, doesn't mean I don't know Javascript, right?
Be able to explain and use prototypical inheritance and to understand how it is different from classical inheritance. Huge bonus points (in my book) if you can use it well *without* just trying to implement classes on top of it!
No trick... *far* too many people who claim to be able to work with JS can't even answer this question properly, which means they don't understand scoping in JS, which means they can't code in JS... :P
&gt; I like to ask "if you have an object referenced by variable O, and you have another variable M that names a method of O, how do you call the method with no arguments?" The answer of course is simply O[M]() but you'd be surprised how many people don't seem to know you can do things like that (even though it's one of the things that makes JavaScript as powerful as it is). You should rephrase that question, you stated it in a confusing way. It's not obvious that M is a string in your example.
&gt; I would have pointed out that the value of M is a string containing the name of a method. That makes a lot more sense. I read the question several times and couldn't figure out how his question lead to his answer.
For anyone who doesn't know we exist, we have an AngularJS specific subreddit that we've been growing for a while: http://www.reddit.com/r/angularjs
I see this readily with heavy jQuery users and its certainly not limited to AJAX. FrontEnd engineers should certainly be familiar with jQuery as it is so prevalent. At the same time the programmer should know what a library is abstracting away. For myself, a good exercise is asking myself: "this library function I'm using ... what is it doing?" The depth you'll gain from asking and thoughtfully answering this question is extremely valuable.
My mantra in coding is "Keep it as simple as possible and as complex as necessary."
Good point, I'll make sure I specify that going forward, thanks. You know, I was actually wondering for a second what would happen if the key is an object, and I wasn't certain, so I tried it... var key1 = { firstName : "Bill" }; var key2 = { lastName : "Mark" }; var map = { }; map[key1] = { dataField : "abc" }; map[key2] = { dataField : "xyz" }; console.log(map[key1]); console.log(map[key2]); You get xyz both times... so it seems like a key CAN be any old object, but only once... my guess is JS treats both keys as just Object prototype, and the second therefore overrides the first. Just a guess though. And, that key can coexist with string keys: var key1 = { firstName : "Bill" }; var key2 = { lastName : "Mark"}; var map = { }; map[key1] = { dataField : "abc" }; map[key2] = { dataField : "xyz" }; map["testing"] = { dataField : "123" }; console.log(map[key1]); console.log(map[key2]); console.log(map["testing"]); Now you get xyz, xyz, 123. And, of course, one could be tricky and do: var key1 = { firstName : "Bill", toString : function() { return this.firstName; } }; var key2 = { lastName : "Mark", toString : function() { return this.firstName; } }; Now it works exactly like you'd expect. That's a cheat though! :)
Exactly. I have no problem with someone that uses jQuery, or any other library, most of the time. That's efficient development IMO. I take issue with those that don't actually know what's going on underneath the libraries though (at least roughly- I don't expect someone to know every last detail). And I definitely like your approach to understanding, that echoes how I approach things as well.
&gt; And interesting one is the "bonus" question of what other similar-ish &gt; mechanisms there are (postMessage to avoid setTimeout's 4ms delay but &gt; still yield, requestAnimationFrame, IE-specific non-standard setImmediate) Very good, I need to add that to my battery of questions too! &gt; Technically it's an expression. True, though not a terribly important distinction in this context :) &gt; That's a risky one though, unless you're specifically using &gt; Object.create(null) there are issues if you're shoving user-provided &gt; data as key. Also keys can only be strings, of course. See my reply about this to a previous post... the part about keys being strings is true, but only to a first approximation of truth :) I'd like to know what issues you're referring to otherwise though?
Yes, but if it's the *only* one you couldn't answer I would consider it an interesting anomaly and wouldn't hold it against you. We all have missing bits of knowledge, even at fundamental levels, and while it would surprise me given your experience, it's not an interview-ender :)
&gt; See my reply about this to a previous post.. Couldn't find it. &gt; the part about keys being strings is true, but only to a first approximation of truth :) Well no it's the whole truth, even if it uses toString to perform the conversion it's still storing a string, and thus by default useless for objects as keys and the like. &gt; I'd like to know what issues you're referring to otherwise though? http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/ and https://mail.mozilla.org/pipermail/es-discuss/2011-December/019025.html (which is an issue even with `Object.create(null)`) This is in part why Harmony introduces a full-fledged Map object. Alongside the keytype limitations.
[This will automatically evaluate your code for some common errors](http://www.jshint.com/) and if you're willing to tolerate a very opinionated analyser: [There is Douglas Crockford's original contribution](http://jslint.com/)
"Have you seen javascript the good parts? how thick is it? What color is it? Who is Brendan Eich? Who is Jon Resig? How about Jeremy Ashkenas? What company came out with Javascript?" I'd walk out of the interview. I like working with professionals not fanboys.
Sorry to be that guy but the singular is vertex, not vertice. Also your Minecraft link is broken. Good article though! 
so I do a YouTube search and am turned off by results that are 2+ years old. am I mistaken? 
It's usually an opening salvo. I don't place much weight on the response except to see if the person answering knows of these basic ~~JavaScript~~EcmaScript APIs.
&gt; Couldn't find it. This one: http://www.reddit.com/r/javascript/comments/1jw96t/what_are_your_vanilla_javascript_knowledge/cbjkgti &gt; Well no it's the whole truth, even if it uses toString to perform the conversion it's still storing a string, and thus by default useless for objects as keys and the like. See above :) I'm not actually arguing the basic point here by the way, but I did find the example I posted a little interesting... but it doesn't disprove the assertion or anything. Interesting links, thanks! Using key names that override intrinsics is a bit of an edge case though and I think only an issue if you're using dynamic user-inputted data as keys. If you're just doing something like: var o = { firstName : "frank" }; ...I don't think you need to go down the path of a full-fledged Map implementation, this is going to be Good Enough(tm). But yeah, if the user can enter those keys, or they can somehow be generated on-the-fly, I agree that a proper Map is probably the better answer. Now, the interesting question is how many Map implementations just use a { } under the covers with some syntactic sugar on top and don't actually avoid that problem anyway :)
This was the first thing I watched when getting back in to JavaScript development: http://www.yuiblog.com/crockford/ there are other things on YUI theatre and a lot of conferences and some meetups will put up their videos later (like html5devconf, jsconf, mloc.js, sf js meetup etc).
My next question is usually something like "Tell me 4 things you disagree with in the text" or "Do you know any shortcomings in backbones event model?"
&gt; This one: http://www.reddit.com/r/javascript/comments/1jw96t/what_are_your_vanilla_javascript_knowledge/cbjkgti &gt; my guess is JS treats both keys as just Object prototype More precisely it will call `#toString()` and get the default representation which is `[object Object]`, thus both objects will map to the same key. &gt; Using key names that override intrinsics is a bit of an edge case though and I think only an issue if you're using dynamic user-inputted data as keys. Sure. Still a risk until we get actual maps though. The links provide past examples of broken code in the wild.
The redirection is handled before anything is returned to the XMLHttpRequest object. You can't detect this kind of redirect programmatically from the browser.
Actually if you look at [most frequently asked questions about JS on Stack Overflow](http://stackoverflow.com/questions/tagged/javascript?sort=frequent&amp;pagesize=50) you'l find most of these questions there. Closures, Ajax, multidimensional arrays - these questions pop up all the time. this is just essential stuff everyone should know. And by the way, obviously if you can't answer those questions and you're going to an interview just read the answers there.
Actually: var a = [1,2,3]; var b = [4,5,6]; Array.prototype.push.apply(a,b); //merge console.log(a) //[1, 2, 3, 4, 5, 6] now a contains [1,2,3,4,5,6] 
Not sure if you have noticed this but yahoo.finance.quotes is a community based table and therefor is not all that stable. If yahoo detects that the table is being abused (this is an automated process) the table gets locked, so the data being available isnt all that reliable. The google stock api is still available, but you have to be crafty to get it. Very similar to what you are doing now.
Keys are always strings, but if you pass in a non-string, JS will convert it for you. Try your code at http://objectplayground.com to visualize what's going on: var key1 = { firstName : "Bill" }; var key2 = { lastName : "Mark" }; var map = { }; map[key1] = { dataField : "abc" }; map[key2] = { dataField : "xyz" }; this.map = map;
This is awesome.
Looks like a dream come true for me as a semi-literate tech manager. 
In other words: var M = 'M';
What does it do that would make you not want to use it? The only argument I can find against it is if you forget include it. I've never run into that problem once, and it would be obvious what went wrong as soon as I tried to call any method on the resulting object.
I forked and wrote your project how I would do it personally: http://jsfiddle.net/path411/686MC/ I know that for myself I learn a lot by looking at other people's code by seeing their style and thought process, so I hope this helps you at least in the way of seeing someone else's take on the same project. First, definitely don't take my code as law. There's almost always a better way to do everything in programming, and while I have been doing JS for awhile, there is someone always better than me. Some explanation of my changes: * My constants are structured a bit more consistently, this lets me reuse my BindOptions code for all of my lists, as well as I think provides a better "future proof" structure. Also, my constants could easily be replaced by json provided by an api. * My HTML is void of data. I'm using my HTML simply as a layout language, I want to store as little data in it as possible. * My data then is what is filling the selects, and now the last drop down is being dynamically populated with only the available options. (Personally I also feel this is a better UX approach as it no longer shows users options that they aren't able to pick) * Since my data is what is structuring the options, I no longer need to read the DOM. I have a direct binding to the javascript object that is selected, this provides a lot of benefits, as well as gives you a more familiar functionality similar to the many MVC and MVVM libraries/frameworks you will see out there like KnockoutJS/Angular, etc. * I removed the console.log commands as I have removed the need of conditionals in all of your cases. (Note: If a concern, console.log will actually break IE8 and lower, despite running fine in ie9+ with set to IE8 mode). * My css changes weren't really needed, and you can definitely ignore them completely. I hope this helps you in your journey, and I wish you good luck! Let me know if you have any questions and I will try to answer them.
Callback soup, that is an awesome term for it. I like your example, it certainly cleans up nicely. I've done something similar in Traffic JS using HttpRace/HttpQueue, https://github.com/MFoster/TrafficJS#httprace-and-httpqueue
Yep, you're right, I somehow managed to forget that the default toString() would be used and that explains it... embarrassing given that I went on to talk about toString() myself :(
If you think jQuery is the be-all, end-all answer then you're severely limiting your employment opportunities. Your choice.
It's cool, I already make more than what you're offering
If you don't care about ecmascript 3 compatibility, `bind` can be used as a builtin `partial`: function add(a,b) { return a + b; } var add5 = add.bind(null, 5); add5(6) // returns 11 Nice article. Another advantage of using named callbacks is stacktraces and profiler results are much easier to read. 
Hey, thanks for the tip, didn't know abound bind!
This one has some nice tricks http://www.paulirish.com/2010/10-things-i-learned-from-the-jquery-source/
Backbone for the reason that /u/kabuto mentioned but KnockoutJS is probably next. It doesn't involve as much complexity as Ember or Angular and it's documentation is arguably the best of all the JS frameworks. http://learn.knockoutjs.com/
Could you give a rough example?
From my understanding (please correct me if i'm wrong, i am not never good at these type of test questions) Func1 will run every 1000ms (1 second). Func1 takes 4 seconds to 'execute'. Func1 will only execute once within the time it takes it execute. Although their use of the word 'execute' to represent the start of the function running, and the function completing seems to be a bit confusing. 
From John Resig's explanation in the 2nd link, I'm led to believe the interval fires but the function isn't executed at all until after the loop. Someone please correct me if I'm wrong.
I dislike these kinds of tests in interviews, but in the interests of a good and useful discussion here... JavaScript is not multi-threaded. No way, no how (setting aside WebWorkers and what-not). So the `setInterval` call says, "make a note to yourself to run this function no less than every 1,000 milliseconds, or one second." Then you are told that the loop takes four seconds to run. But during those four seconds, it never cedes control of the single execution thread. So `func1` is still sitting there, waiting to be executed. When the loop completes, the JavaScript engine looks around to see if there's anything to do and yes, `func1` is overdue by three seconds. So it executes `func1` ~~once and then queues it up to be executed no less than 1,000 milliseconds later.~~ UPDATE: four times right after each other, because four seconds had passed. So the answer is, it doesn't execute *at all* during those four seconds that JavaScript is executing the loop. Normally I try to use these opportunities to pimp my JavaScript book, but speaking very frankly, I avoided this topic entirely and it can't help you :-(
Thanks man. I got it wrong. The test made me feel quite shitty but I learned something from it :(. 
~~Another catch in this code is hoisting. `func1` is `undefined` when `setInterval` is called.~~ UPDATE: I've been corrected.
I'd go further than that. It would be like a wedding photographer who doesn't know what "aperture" is. Or a car mechanic who doesn't know what a fuel filter does. Edit: or [this guy](http://i.imgur.com/6KSrdOL.jpg)
They're using document.write. You don't wanna work there.
Of course it runs. That's why hoisting is so cool. And the reason why it doesn't run in your Firebug is because you're probably just running a single statement. Try this instead. setInterval(func1(),1000); function func1() { console.log("I'm hoisted"); } Edit: Just tested with Firebug. It doesn't seem to run but works like a charm in Chrome console. 
No, because `func1` is a function declaration. See [http://stackoverflow.com/questions/7506844/javascript-function-scoping-and-hoisting](http://stackoverflow.com/questions/7506844/javascript-function-scoping-and-hoisting)
nope. That would be the case if it was written `var func1 = function(...`, but `function func1()` is hoisted *in its entirety*.
Ignore me... I'm a sour old programmer who's sick of dealing with Bootstrap and Drupal :-P Someone should tell _them_ to stick to SE principles.
I've delved deep enough into Javascript (tried to implement a distributed multithreaded multiplatform ASM in Javascript [for my PhD](http://openiaml.org)), but for sure - my current job is half client-side jQuery/Bootstrap stuff, and half server-side Alfresco JS stuff (using Rhino). I've definitely noticed a split in the Javascript community: most Javascripters just use frameworks (Bootstrap, jQuery, Node.js, etc), and very few actually write their own (which I prefer to do). If you're using other's frameworks, often you need to learn _the framework_ rather than Javascript's idiosyncrasies. It would be more akin saying that a Java developer needs to know how classloaders and security managers work, rather than learning SWT, PDT or JUnit. I do, most don't, but that doesn't mean they're bad "Java developers".
You're right. I got confused between function expression and function declaration. &gt; First of all, function declarations are parsed and evaluated before any other expressions are. Even if declaration is positioned last in a source, it will be evaluated foremost any other expressions contained in a scope. from: http://kangax.github.io/nfe/#expr-vs-decl
The question is BS and you should not feel at all bad about not being good at these type of questions. I'd never use something like this in an interview and hiring JS devs is something I do on occasion. A few questions I have right off the bat: 1. "If the loop takes 4 seconds to execute" * appending "onetwo" to a var and deriving 64 takes 4 seconds... It's hard to get past this and the contents of the loop but ... ok 2. Most obvious answer is incorrect: (if the interval fired in a different thread, the interval would fire 4 times etc.) 3. The correct answer is 0. The loop will execute and then the interval will "catch up" by firing ~~4~~ 1 times (or however many seconds have actually elapsed.) Beyond the use of setInterval in general (another topic etc.) this question is either a trick "gotcha" question or it was written by someone ignorant in actual js use. Either way, terrible interview question. Wouldn't work for this place after I saw the questionnaire. Edit: corrected how many times the loop will fire immediately after. Here's a JSFiddle demonstrating the behavior: http://jsfiddle.net/tpAra/ (Warning initial for loop takes about 17 seconds.)
It depends on context. A front-end web developer probably should know a bit about the DOM, including things like getElementByID, and that there *exists* such a thing as an XMLHTTPRequest object. But it's totally irrelevant for Node.js coding and other coding that doesn't involve the browser/DOM environment.
Because they are NOT software engineering tools. They are web designer tools. If you're serious about being front end, get a real framework and developer tools! IE package management, data-binding, AMD, unit testing, loose coupling, etc. People want JS devs to be software engineers now. They are tired of having to remake websites again and again since they're simply not built to scale with the evolution of technology. Knowing jQuery is simply not enough. jQuery is just a tool at best and can easily be swapped for various other libraries or just plain old vanilla javascript. All jQuery does is make it more convenient to do some common web things, IE query dom, make animations, and ajax. But there is a gazillion things it does NOT do, and these days people are making web applications and not just websites with some cool effects. 
probably only does hoisting when a new scope is created, so wrapping that in an IIFE might help. 
Few levels of Javascript programmers: * Novice: Those who don't know any of how Javascript really works, they just use what they know. * Intermediate: Those who know about the global object and why to declare a variable with *var* before initialising it. * Advanced: Those who also know how closures work and how prototypal inheritance is. And who would have a strong opinion on why trying to emulate class-based inheritance is probably a bad idea.
I'm still learning too. Really, you should never attach something to the window object like that. That's bad practice. The only reason I've had to do something close to that was when I wrote a program that would execute the Jasmine testing html reporter in a pop-up so it could run alongside my application. Even then, I did not actually *add* anything to the global namespace myself. Even though I use require, Jasmine still adds itself to the global, which made it useful for me to call window.opener.jasmine.getEnv() from the popup (and thereby, being able to call the HTML reporter in the popup window but still have it test against &amp; control the main application.) So in this specific instance, I am using a global. I didn't put the global there myself - the library did that. But since this is just for running tests, hopefully it isn't too bad of practice. I jslint all my code and I don't let variables even THINK about becoming global. Also, in 'use strict'; mode, I dont think browsers will even let you run code which contains undeclared vars. So theres that.
I think you should rethink the issue at hand here. It isn't that the expectations are cryptic, and it's not a crappy system for testing skill, either. It actually takes skill to be able to even read the tests - and it is extremely useful to know how to read tests. This syntax is common to a lot of BDD frameworks. I don't even understand what test you are referring to (what do you mean by 'getting' items from an array? Removing them? Reading them?), but if you said the name I could help you parse it. why dont you take a look at expect.js and familiarization yourself with the syntax first. I started learning BDD yesterday (jasmine). At first I was so apprehensive about learning it, because it just looked weird. And then I learned it. And now I'm a huge fan of it. If you know jasmine or any BDD framework for JS, you will surely impress interviewers 
This seems like a good idea to do to before I go on interviews. Thanks for the link!
What do you mean in strict mode this is undefined? I've been using strict mode and use this for functions called with bind, apply, or call, being used as an object property.
I work with functional programmers, and they love to curry.
More resources for anyone reading into this: http://kevzettler.com/programming/2012/09/30/how_to_manage_javascript_callbacks.html http://callbackhell.com/
I would also recommend backbone first. It's simple but, that's what makes it a great learning tool for other much more complicated frameworks. I've used a decent amount of frameworks, and I've found that each is fitted for a certain set of use cases. Knowing the basics of JavaScript MVC will help you pick up others more easily. As for what to do afterwards, my recommendation is just read about each one and what they are typically used for, see what interests you. There are many great articles breaking them all down. Personally I'm pretty fond of Angular, but it's one of the more opinionated frameworks so I've found it's not as adaptable as I would like some times.
1. I feel like that question is discriminating against kindle users. &gt;:( 2. I don't disagree with a whole lot in the book, actually I agree with a good part of it. Mostly because of JSlint. There isn't too much to "disagree" with since the author just points out how javascript works (you can't disagree with that) and although I suppose you could disagree with his assessment of what's "Good" and "bad" it's seriously a fairly introductory JS book and most people who read it do so to gain a better understanding of how JS works, not to go against what the author is saying. Anyway I read it awhile ago and have since moved onto reading other JavaScript books, effective javascript, professional js for web developers, functional javascript, javascript patterns, etc. So I don't really remember what I read in "The good parts" because it just introduces you to JS and tells you what to not do. That's the important part. As for those people, why does it matter if I know them? I don't care about those people or the company that made JavaScript. Although I did read the intro and found the story of how JS was made in 10 days (by netscape, I guess) do I come into an interview expecting to answer that kind of question? Lastly, I've never used backbone. So this would be a hard question for me to answer. Instead, I use Nikolas Zakas' approach to scalable javascript apps, ko for databinding and reactive (rx) for pub/sub...So, you tell me what are the short comings? Because I would not know. As for libraries which focus on graphics - three.js for 3D stuff, d3 does data-viz and jQuery can be used for animations, but not sure what else you want here. What's a good answer? I'm not doing much with graphics so, I would love to know. As for async, yes, lets see theres knockout or any data-binding library, RX (reactive), obviously any AJAX library is async, testing frameworks like jasmine can be used to test async code, animations are async, am I missing something here? I'm not sure if it's too common, but IE does not have support for an HTML element's parentElement whereas chrome does. Also things that have broken in IE for me have been things like, not setting widths/heights value with the 'px' at the end. What am I missing here? I obviously use best coding practices, so none of my code really breaks in IE. . . Semicolons are inserted for you by the browser if you 'forget' them. There are some places where it inserts semicolons where they were not supposed to be inserted, IE, in this example return { someKey: someVal }; would be turned into return ; :/ even though the first one was still correct, browsers insert the ; after the return statement if there is nothing there. But I don't really see a debate about it. Nor is it huge. The thing is, you need to use semicolons. You just do. And not only that, but make sure your code adheres to correct whitespace standards so they are not inserted elsewhere. Jslint will help you. Also if you are making some lib, lots of people put a semicolon before the beginning of it so when they concat their scripts, it doesn't screw things up. Is that right? minification and concatenation - requirejs I dont know when IE fails silently. I mostly have written in chrome, then tested in IE, and I don't see it failing in IE so I'm not quite so sure. (I'm still an intern btw. So about 8 months of js experience) Not sure what v8 is - but npm is node package manager. it is a tool for installing packages to work with node js. Date object, I would normally visit the w3c spec, mozilla's site, and stack overflow for anything specific, but usually w3c covers it all. How would I do in your interview? 
I for one have never used XMLHttpRequest more than once - maybe the first time I ever had to make an ajax call. But I know how to use YUI ajax and jquery ajax, and could easily learn others I'm sure of. It's good to get an idea that the dev knows how to write programs and knows javascript concepts but not specific methods themselves. For example, you wouldn't discriminate against a C# user who made all of their db requests via LINQ to SQL, and couldn't really remember how to write an SqlConnection since they've been using LINQ for so long? No one forces you to write XMLHttpRequests in school, I've used it more in C# than in JS probably, and companies don't want you wasting time coming up with your own solutions to already solved problems. If you're interning at a company doing JS anywhere, you'll be using jQuery or other lib/abstraction to do something as simple as send an ajax request.
dammt i dont remember what was so fucking quirky about the last one. Read it in some book...can you remind me?
because it's completely unnecessary in most situations, IE functional programming approach uses just regular objects made in a closure. JS is probably best suited for functional programming since it has little support for classical OOP and it's best to avoid it, using it sparingly..
Any good material on this? normally garbage collection is not something I think about while programming, but I'm building an SPA and we're in the deployment stage. I'm currently writing tests and next will go and refactor some of the extensions, and would like to know if I'm leaking memory anywhere. I don't think I am since my application uses APIs to deal with automatically unsubscribing/detatching themselves from subscriptions. Also the very few, few times I used setInterval did I make sure to clear that interval. My guess is that, memory management bad practices allow async processes to keep running with no one listening for them, so they're just taking up space in the thread and clogging to pipe so to speak. I didn't really need to read anything to know inherently that I should be aware of that. But do I really know how garbage collection works? Nope.
I've been interning at a company doing JS for 6+ months and I'm already getting past the Advanced category into learning functional programming using JS. In a tad over my head but this thread makes me feel awesome about JS development...I got so lucky with my experience at this company! Also so happy I read so many JS books!
I'm not so good at these questions. But let me see. The Prototype of an object is part of a chain. If you create an instance of that object, that object has a link to it's own prototype and the creator object's prototype. When you call a method on an object, it first looks through its own prototype, then walks up the links of connections until it finds it in the prototype chain or it returns undefined. You can edit a functions prototype at any time. Unlike classical inherentance (which uses getters and setters, and actually has private vars, among other things) where you must edit the base class for it to apply to all of the objects which inherit from that class, you can edit an objects proto at any point in the code, making it rather unreliable. A good reason to use the prototype is to use functions from primitive values to do some cool stuff, like using Array.prototype.slice.call(arguments, 0); For encapsulation, I use closures. 
You're invoking func1 immediately in your interval, and since func1 does not return a function for setInterval to invoke, nothing will happen on the iterations. You just need to pass a reference to it: setInterval(func1, 1000); function func1() { console.log("I'm hoisted"); }
I think it's supposed to be a "pay attention to the details" question. The loop and the loop details are irrelevant. The Interval event will trigger once every 1000 ms or 1 seconds. If the sample code is executed for 4 seconds, the Interval event will count to 1000 ms four times and trigger the function to execute four times.
In what cases has it not been adaptable? I'm currently written several Phonegap apps with it and have found it great to work with. 
You're right. IIFE did the trick. rhetoric1, this should work in Firebug too. (function(){ setInterval(func1,1000); function func1() { console.log("I'm hoisted"); } })(); And thanks to sprjrx for correcting that nasty bug.
Poorly worded question. It technically asks: how many times is it executed in the time it takes the loop to complete (which is 4 seconds), not how many times is it executed while the loop itself is actually in progress. In other words, the question is technically just asking how many times the function would execute in 4 seconds, though the interviewer probably wouldn't accept an to this interpretation.
Nah, this is a stupid question. I bet your interviewers would get it wrong too. Me, I'd just run it and see what happens.
great! I know quite a bit about you from that. I see you asked questions, let me answer them inline. &gt; As for those people, why does it matter if I know them? It doesn't! It was just a datapoint. &gt; do I come into an interview expecting to answer that kind of question? No you shouldn't! It just helps me know a bit about you. &gt; what are the short comings? The answer is totally a matter of opinion. Backbone is part of the Martin Fowler, GoF, MV* systems. There's many models and schools of thought on it. Someone could say "nothing." and someone could roll their eyes and say "OMG, where do I start?". They are both acceptable. &gt; (graphics) What's a good answer? It helps me understand how big someone is on data-visualization or on graphics in general. Oftentimes people are proud of graphics demo work they've done. So it gives an opportunity for them to do a show-and-tell. &gt; (async) am I missing something here? Nope. There's a bunch of ways to interpret that word. Someone else could have easily listed meteor, now, and socket.io. It tells me where their heads at. &gt; (IE) What am I missing here? Oh so much. So very much. From code execution rules cross IFrames to small things like not reporting the deltas for setTimeout. Try this: `setTimeout(function(delta) { console.log(delta) }, 50);` and then on IE. There's small things like this all over the place. IE also can have some reference counter issues and need "CollectGarbage" to be run manually. There's deeper nuances too. IE has different XDomain Rules and buffers data differently for XHR partials; there's different `LocalStorage` rules and limits (down to the method of parsing the domain!) Even something totally standard and innocent like Date.now() which was in Javascript 1.5 didn't make it's way to IE until IE 9(!) and you couldn't do "hello"[2] until IE 8(!). Would you guess `3e15/(3e15 + 1)` to produce a different number on IE than on FF or Chrome? Try it out! What about this? `(new Number(1)).toLocaleString()`. Why does only IE put those two trailing decimal numbers on it? Now try `(new Number(1e5)).toLocaleString()` on your phone. Woops, where did those commas go? I did a [blog entry on this](http://kristopolous.blogspot.com/2011/11/winners-are-opera-ie-firefox-chrome.html) about 2 years ago. [quirksmode](http://www.quirksmode.org/compatibility.html) is also good. You can see that something as simple as event propagation is as different as night and day (http://www.quirksmode.org/js/events_order.html) &gt; (semicolons) Is that right? Good enough. But I suggest you go back and read that spec you referred to. It's a bit more detailed. Also web-search "javascript semicolon debate". Given what you've said (8 months), this predates you a couple months.
no because it will be blocked by the constant effort of running the loop. the func will never run until after the loop is complete
Needs more weapons.
Well I thought I was pretty good with perl, but I am struggling to figure it out. Will you explain?
&gt; Indeed. Doesn't tell you anything about the candidate other than they know something that would never come up in production. The question may have been a bad example, but it's still very important to know that javascript is single threaded and how situations like this are resolved.
No matter how many times I iterate I keep coming up with 4.
the left [] is an anonymous list reference =&gt; is equivalent to comma -&gt; dereferences the right [] contains an index for the dereference &lt;= is numeric less-than-or-equal, an infix operator that returns 0 or 1 in this context The code returns the larger of $x or $y after comparing them as numbers. If equal in numeric context, it returns $y.
Thanks for answering! I had no idea IE sucked so hard. But how!? Microsoft really dropped the ball there. At least IE 11 looks cool :) I think days of supporting old browsers are coming to an end. Especially anything pre ie8. Im happy to be entering the field now. I feel so pumped to graduate and get a job doing js while its hot. Its so much fun and there is a wealth of things to learn. When you ask your backbone question, maybe you should consider making it more general like out of these what do you know of and have a preference for: angular, backbone, ember, ko or other. Also yeah anything about js that predates 1 yr ago I might not be aware of. Still believe I learned a lot fairly quickly. Feel like theres a lot left to learn.
&gt; angular, backbone, ember, ko or other The correct interview answer is "depends on the problem". Anything else is unacceptable there, so it's not a good one since the answer is really just a form of a generalized "what tool for the job" question.
The single-threaded nature of JS might not come up in production if you're only validating form fields. But it certainly is an issue if you're doing anything significant. Client-side performance can quickly become something that shouldn't be ignored. Honestly, this question isn't bad as part of a series of questions to identify breadth of experience.
Red flag. Stupid, poorly phrased and irrelevant question. I hire people to program, not to answer trivia on the exact mechanism of setInterval. There are better ways to establish that a candidate understands JavaScript's single-threaded nature. Avoid this job.
I write jquery code daily but this one made me do a double take. Very poor wording.
This might be better presented as: var x = 0; function func1 () { x++; } setInterval(func1, 1000); for (var i = 0; i &lt; 10000000; i++) { var s = ""; s += "one"; s += "two"; var a = 8; var b = 8; var c = a * b; } console.log(x); // What is the value of `x` when logged here?
I guess that would depend on the computer.
That's amazingly inventive. And quite twisted. Good read.
You're correct, so for 4 seconds nothing happens. Then the 4 queued calls of setInterval fire back to back (this is in fact one of the dangers of setInterval, it will "tick" when told to then fire as soon as it can, this means if your setInterval callback takes longer than the delay you'll build an infinite queue of ever-executing callbacks)
No, he's asking how many times it'll execute *during the loop*. The answer is 0, because even though setInterval will add an item to the runqueue ~every second, the loop never yields to the runqueue and thus the callbacks won't run before it is done.
no, it's the core semantics of JS: it's a single-threaded event loop, so while blocking code is running it will not yield to the runqueue and what's been queued by setInterval won't execute.
If you are au fait with JavaScript, I would suggest a MEAN stack, MongoDB, Express, AngularJS(optional), Node. It is incredibly easy to setup and you could have prototypes running in a few hours. With regards to pre-processors, don't write them off, especially SASS. It is an invaluable tool.
TBH I am quite affraid of bricking my device so I am using originally provided FFOS. Thank you for the suggestion - I have plenty of other platforms yet to support but guess I will also hit the Windows phone on some point. Especially that Cocoon lets me to export Pokki build.
Siema :)
I don't think so - every platform has its own API and integration stuff, I would rather like to move on to another project.
These videos are really good and still in play with today's technology. You can also view them on youtube as a playlist as well: http://www.youtube.com/playlist?list=PL7664379246A246CB These are also good but a bit old. The techniques still work though: http://www.youtube.com/playlist?list=PL5586336C26BDB324 Keep in mind Douglas Crockford is an extremely intelligent, opinionated man. He has a lot of reasons he does some things and has a lot of preferences. You'll need to distinguish what you like and what you'll keep for consideration but do differently.
SHL?
Left parentheses is an anonymous arrayref with two elements, -&gt; dereferences it, [] is a list of indexes of elements to return. $x &lt;= $y is a comparison. Since this is an array index, Perl treats it as either 0 or 1- ie 0 if $x &gt; $y, 1 if it isn't. So, this snippet returns the greater of $x and $y. It's from a cool Perl book by Joseph Hall, if I remember right. edit - replied before seeing bloobloobloo's more in depth reply above :-)
Fair enough. Once you get your head around the basic JS design patterns though, this isn't really something that would hit you in reality. Good point though.
sexy
When exactly programming became a quiz-show? Once it was a science...
They all do the same basic thing or something similar since they're all mvvm or mvc, some do more and some do less but asking specifically about backbone implies that you only care about if backbone. My answer would be knockout and that their event model is pretty solid. Its also significantly faster than the other 3 and since it only does binding it does it well and does it right. And then theres the binding class provider plugin which extends ko capability so its even more powerful. My answer to your question though would have to be that although the mvvm model is great, sometimes it gets a bit tedious to be doing data based and visual changes with the same tool. But that's why you can write your own binding handlers. I know little to nothing about the other 3 since I've only worked with ko thus far and ita a great choice for a scalable application 
Looks nice, but why just WordPress? I'd love to use this in my regular ol non-cms apps too. 
&gt; code smell. Hadn't heard this phrase before but it is a great way to describe code that works but follows poor standards. 
Just because older versions of IE ~~are retarded~~ don't have developer tools, it doesn't make document.write good.
I am trying to start my first video game, what do you think about phaser? 
Looks great. On the calendar widget it would be nice to click on the icon. Also being able to edit the numerical values next to the sliders would be great.
I'm going to be a contrarian and say this is an _excellent_ question, although it probably could have been phrased similar to the way bicknellr suggested. An experienced JavaScript developer should know the answer, with very little hesitation. She doesn't even need to know what setInterval does. Her eyes should scan the for-loop only for a reference to `func1`, and by not finding one, immediately know that it will never execute during the life of the loop. A knowledgeable but perhaps less experienced JavaScript developer may take a few minutes. She might ask questions about hoisting, or about the precise behaviour of setInterval (both irrelevant), and eventually come to the right conclusion. An inexperienced JavaScript developer might read over the code very carefully, and eventually give an answer like 2, 3, or 4, or worse yet, ask about threading, etc. A good interviewer can learn a _lot_ by an interviewee's reaction to this question.
usually you won't use 'constructor' but will override 'initialize'. This is because the constructor does things like setup it's ID, and does some things with the options before finally calling initialize. If you override 'constructor' then you lose all that stuff. The extend in Backbone will basically copy all the parents prototype onto a new protoype for the child. It's still not classical inheritance but it sort of acts a bit more like it. What you may like to do is do something like this: Backbone.Model.extend({ initialize: function(attributes, options) { _.extend(this, options.properties); } }); though that will be a problem if you want to override initialize later. We use [Backbone.Advice](https://github.com/rhysbrettbowen/Backbone.Advice) to mixin functionality like that: var MixinProperties = function() { this.after({ initialize: function(attributes, options) { _.extend(this, options.properties); } }); }; After that adding properties should be as easy as: var coffee = new Coffee(null, { properties: { addMilk: function() { this.set('milk', true); } } });
According to observation of Chrome, Firefox, and NodeJS, and to draft spec, this statement is incorrect. setInterval timeouts are queued in serial, not parallel. The next call is queued when the current one returns^1 . Thus, after four seconds, the first interval will fire right away because the timeout has passed. However, the next interval will happen one second after that because it is only queued once the first interval is complete. ^1 if you put a timeout or other interval in the function that is called, the next interval will likely be queued before the inner interval/timeout is executed. 
Maybe this will help? http://stackoverflow.com/questions/1270221/how-to-format-code-in-html-css-js-php
No. Once immediately after and then once every second. 
What context is this where html outputted from jQuery would ever be edited by a human? If the html is being built as a string you could probably use \n where you want line breaks. For example "&lt;div&gt; \n \t &lt;div&gt;" etc. That said this will be hideous code and it is really considered a bad practice to have html mixed in with your javascript. Look into templating for an example of separating your html from your javascript.
To me, this puzzle-like question is what should be asked, and the type of question that is relevant and revealing. It's a better filter too if it's being asked as a pre-interview screener to weed out people too lazy even to test it out or google an answer. A day or so ago, there was a thread about Javascript interview questions. Someone in the thread suggested questions like: "Who is Brendan Eich?" Seems pretty dumb to me. &gt; A good interviewer can learn a lot by an interviewee's reaction to this question. Totally, but it needs to be done in-person, not via multiple choice possibly over the internet. One or two clever puzzles, even if answered incorrect, can reveal how someone deals with problems.
I'll go against the grain and recommend Angular. Backbone is simple yes, but in my experience you have to write a lot of boilerplate for common tasks. If you want to spend more time writing code unique to your app I think it's a better choice.
Checked that out, its nice but not what were lookin for. He might just have to make a custom function to do it, figured something out there would exsist to auto format/indent code to a readable format... Thank you though.
You are correct. I'm not sure what I was thinking. Must have been tired.
Your example isn't formatted though, at least not with indenting and whatnot. protip: if you want to preserve whitespace formatting on reddit, indent the text by 4 spaces: &lt;example&gt; &lt;-- 4 spaces &lt;/example&gt;
Why is that? I'd like to know more about why you think we should "definitely" use an external library or even, switch to a different language. I personally don't like the idea of programming in a language that has to be translated into Javascript in order to work. No matter the quality of the generated JS, I rather learn to love the features of the language than hate them because they don't fit with my previous experiences. (I'm not saying this is your case, I'm just giving you my opinion)
Yeah, but it was a dumb mistake on my part. I knew that setInterval adds an event on the end of the stack to determine if events need to be triggered and refreshes itself after the events are done so "once, then once a second" should have been my go-to. This is part of why Firefox can give you a delay value in the arguments for the function being called by setInterval.
sorry I didn't notice that. Can't get it working.. Never been able to get reddit formatting working.. thanks though.
Maybe [this](http://pastebin.com/np0jVAr0) will help? You should be able to copy/paste that (the "RAW Paste Data") here and have it retain the spacing. 
&gt; Totally, but it needs to be done in-person, not via multiple choice possibly over the internet. One or two clever puzzles, even if answered incorrect, can reveal how someone deals with problems. Oh, agreed completely.
Keeping with the off-topic, how did you land your fist book deal? I'm kind of interested in trying to get an extra from writing tech articles or tech books, but I have no idea where to start.
I'm thinking the easiest way to do this will be with some jQuery plugin or some other external script. HTML is not a complex language, but there are nuances which would make this a non-trivial task. While fun, it might also be time-consuming to work out all the edge-cases. Could also try something [like this](http://stackoverflow.com/questions/8348545/simple-html-pretty-print).
In my case, I wrote a few articles and put them on my site and an acquisitions editor at Apress saw them, thought they were pretty good, and asked if I'd be interested in doing a book. I'd never actually considered it before then, it was just blind luck frankly (although the articles being perceived as good helped of course!) I know now that all publishers have links on their site to submit approvals (some harder to find then others). If you go that route I'd suggest trying one of the smaller publishers. Packt is a good choice (I've done some work for them too) or even Apress is somewhat smaller than an O'Reilly for example. You could also write articles for the many different magazines out there. I've written for JSMag for example, and those are relatively easy gigs to get. Could be a chance to get noticed by a publisher. Also, you can try and get a gig doing tech review for another author. I've done that a few times too. Its a few hundred bucks for not all that much work and gets you some contacts to approach later for your own books. If you happen to know an author that's a good a way get into that, otherwise you'll need to hunt down some names on a publisher's site to approach.
read it in some code for me. I use it for this kind of usage : https://github.com/waxzce/events4js/blob/master/tests/events.js It's cool for a local variable in your block :-)
Thanks for the nice explanation, so far I've only been approached once by a Magazine, but I was hoping to get more track... I'll try your advices... much appreciated! :)
Programming isn't science, it's applied computer science. A possible analogy is calling a baseball player a theoretical physicist. Besides, if you're hiring someone for a position where they're using JavaScript, I'll hazard they're not doing fancy theoretical theses.
Lol. Every language is translated including JavaScript. Those languages I mentioned are objectively better for a number of software engineering reasons starting with the fact that they expres s the same thing with less code. Also everyone wants classes in JS eventually they just have a lot if different random wonky ways of getting them.
Sorry mate, if you're looking for classes in JS, you're barking at the wrong tree. You don't need them in JS and IMHO trying to force them into the language (by using Coffeescript, or any other "different random wonky way") is a waste of time. Care to elaborate on the "number of software engineering reasons" why those languages are better than JS?
I will take a look at this later!
[jsbeautifier](http://jsbeautifier.org/)? It does html too (although it breaks with font tags).
Yeah there is no file found at this location, can you see if it's still there?
You're kind of mixing composition with inheritance. I feel like Coffee should be your model and CoffeeShop could be a collection of Coffee objects. Although that feels a little specific, what if you start selling pastries? 
I don't believe you about the loop never ceding control, and causing a backup in execution cue. Behold http://codepen.io/Fresheyeball/pen/gJuKr 
"Can we run it on note-js?"[sic] - colleague at work.
Will add that. Thanks :)
Conditional laws that work on each keystroke; having star, thumb, and smiley ratings in forms with the click of a button; forms that save partial data and can be filled up later on as well; responsive forms; a fast form builder interface; good-looking forms.
The link doesn't work anymore.
Just because using prototype-based inheritance might look like using classes doesn't mean people are doing it wrong or trying to do things equivalent to classes. Here are some links that show you how I see JS OOP and how I use it: http://www.commented-out.com/2012/05/28/javascript-youre-doing-it-wrong/ http://www.commented-out.com/2012/06/12/javascript-oop-for-the-uninitiaded/ and a code sample: https://github.com/deleteman/resourcer/blob/master/lib/resourcer.js
Created by Richard Davey aka Photon Storm who has been making games X times longer than me :) It is more like a library of loosely coupled solutions rather than a one engine that tells you what to do - which is great because you have freedom of adapting only these parts that you like. 
Like I said, it's an opening salvo. It's not what I base my assessment on. If you tell me you have 4 years of javascript experience and you've never seen call or apply, I'll treat you with suspicion. If you don't know these, and don't claim javascript experience, I move on to general questions that solve day-to-day problems encountered in the job.
This quora response about how they tracked their own problems with memory leaks is a nice place to see the kind of problems I'm talking about: http://www.quora.com/Quora-product/Why-does-Quora-use-so-much-RAM
Great post! I have spent the past week wrapping my head around Angular and I love it so far. It's definitely been a bit confusing at times but two-way data binding, dependency injection, and directives are just... awesome. I'm feeling like it's worth it to keep trying to master it. I've also been reading the [O'Reilly Angular book](http://shop.oreilly.com/product/0636920028055.do) and it's put together fairly well, also...
I suppose it depends on the job description. If it's going to be a mostly maintenance of legacy code thing (which is what we've been hiring for recently, it is important) If it's an R&amp;D project, I skip talking about javascript entirely. It's mostly programming patterns and problem solving.
I'm looking at it now. It's hard to tell without some of the other resources the file includes, like the /search page that the form redirects to. My guess is, like you stated, it's attempting to impersonate the google page ( even down to the top header items ). I would guess that if we had the page for /search or some of the other stuff it links we'd quickly find out what it's doing. I'm also thinking there were other source files included since there are some calls to functions that don't exist in this page. For example if we look at the google logo tag we can see a call to lol() which isn't defined in the page. Since it can't exactly run a legitimate Google search (with Adwords and all) one of my guesses is that it would just redirect you to an ad-heavy "search" page that it's using to generate ad revenue. 
It is definitely "slick", has a nice UI, is fantastic that is it being placed in an accessible GPL CMS etc. But to call this a "*New* Category of Web Form" would suggest there is something about it that would, well, "new". Wufoo has been doing this for a long time now. Drupal has had a similar module for over five years: https://drupal.org/project/form_builder
I haven't read it. The reviews seemed to suggest it was a bit of a rehash of the docs. Is that the case? http://www.packtpub.com/angularjs-web-application-development/book This is from the cats that made angular-app, so based on that I am definitely curious.
&gt;The downsides to this pattern are that your models or collections won’t really follow a RESTful architecture since they won’t map perfectly to a Web resource; also, this pattern can cause a bit of bloat in your models; and it can cause a bit of pain when saving your models if your endpoint strictly accepts only the JSON it expects. In other words, it's a bad idea. Selection is View state and should be stored on the View; if it needs to be available app-wide it should be broadcast. Actually that whole example is weird; the Model is really a Collection, and I _do_ implement functions like getCurrent on my Collections (when the "current" model is indicated by url string --&gt; "comments/1k0whk"). The Router example is also wonky. 'search/:foo': 'searchFoo', 'search/:bar': 'searchBar', 'search/:foo/:bar': 'search' Backbone processes and matches routes in the order given. search/:bar is redundant. (Right?)
I've been meaning to spend some time with it. Seems like Bootstrap + Angular + CodeIgniter would be solid as a general purpose tech stack.
I find it depends on the problem being solved. I like the prototypical approach for some applications, and the functional approach for others, but it really depends on your needs and your style. I've had plenty of successful projects using prototypes, and plenty of successful projects using a functional style. I find it's most important to choose a style that works for you early on, and be consistent with it. It also depends on how your project is structured. In backbone projects I rely highly on the prototypical style, and that's in no small part because the backbone library is heavily prototypical.
Yeah ok, you're definitely not in charge of hiring people for JS positions if you don't realise the importance of knowledge of the event loop.
that's weird as hell. Yeah I'm pretty sure that since they're attempting to emulate the homepage they're likely trying to get some fake ad revenue from someone. However, it's also entirely possible that they're using it for something more nefarious. I doubt it's anything that poses a serious security threat unless they're convincing people to input passwords/credit card info (I can only imagine the damage someone could do by nabbing my google account password). 
thats actually an excellent idea. It would definitely make testing everything a lot easier! thanks for the suggestion!
As someone with a pretty basic understanding/barely working knowledge of JS, would it be a good idea to jump right in with Angular, or should I better grasp JS before I do?
I'd probably keep hammering at vanilla JS, but really it wouldn't hurt to dive in.
I can't see why you'd need something as complicated as CodeIgniter. Serve the static resources from S3, and provide a JSON API.
http://leanpub.com/javascript-allonge There's a podcast about it today on http://javascriptjabber.com
I've got Boostrap3, Angular, and Symfony. Pretty solid.
I haven't experimented much with Symfony, though I hear it mentioned often. Any particular selling points versus CI?
I'm gonna give a slightly different advice here. Dive in right away, and you'll pick up Javascript on the way. After all, AngularJS is just Javascript (TM).
Just learn JavaScript itself, first. Don't worry about any other library until you have a solid understanding. Then you can worry about Angular and jQuery and all that other shit.
The ifor only does reverse iteration, which is not the desired effect I'd say a good 95% of the time. His [cited source](http://browserdiet.com/#cache-array-lengths) doesn't even use that pattern as an example. It's the usual length-cache-and-move-forward approach.
If this is the best way the interviewers could come up with to ask about the event loop, then it's not a place any qualified JS developer would want to work.
Tested 6/10/2013, works in Chrome/FF/IE.
Beautiful! This is the perfect compliment to VerbalExpressions. Great job!
You said the question is irrelevant - you're wrong. It's obviously been pulled out of an old text book or something, stop nitpicking. If a suitable JS dev can't figure out what it's trying to ask then I'm going to suggest they're not a suitable JS dev.
This is really nice. I've been wanting something like this for awhile. I'm on my phone and can't try it, but it would be nice if it downloaded styles for a single component. A single but or alert box for example.
&gt; oo if it's being asked as a pre-interview screener to weed out people too lazy even to test it out or google an answer. FYI I had a minute to do this question, about 15 seconds to read the question, so I couldn't google or try it out in time :/
a minute is a bit silly, given that it's a bit of a puzzler and could easily trip up an experienced dev. I have had at least one interview where, via phone, the interviewer asked a very specific technical question and I was able to mumble through it as I googled the answer. I think context is everything for a question like this. In the right context it's fine, in the wrong context its obnoxious. 
This is not javascript
Thanks for the thorough overview. Sounds like it'd be worth learning, even if I don't end up using it much.
Great list! If they had been using a library like jQuery would they get points off in your mind for not knowing some of the base js libraries by heart, like XMLHTTPRequest and DOM selection.
console.log doesn't exist in Internet Explorer IF the console isn't open when the page is loaded. (Or at least it's like that in versions &lt;9) What I do is write a few wrappers (I mostly create a function pr() because I use it a lot in CakePHP) and when you want to disable all logging, you just need to modify 1 function.
Not a professional developer, but CS grad student and hobbyist programmer. I usually create my own logging function that itself contains console.log, and an 'if statement' related to a global variable in the namespace I'm working with, usually just 'debug=true,' or an array of booleans if I want several options. Then you can simply set 'debug' to false or 0 or whatever when you no longer want the logging to happen. 
console.log is good but terrible. Better to do self.log() =&gt; which conditionally delegates to a console.log or which you can get ie: the last 100 entries as a dump. self.log( "foo, bar" ); self.dump_log(); This neatly avoids two problems. 1) IE doesn't have console.log, 2) Allows you programmatic access to log information at a later time (not just "print print print"). --Robert
Remember to add if(!window.console){ window.console = { log: function(){}, info: function(){}, warn: function() {}, debug: function() {}, error: function() {} }; } So you dont get any errors IF you forgot to remove a console on the production site. All though you can also have all your development javascript files, and then run them through [grunt](http://gruntjs.com/) (or similar) which can minify, uglify, remove console, combine all javascript files to a single one and a lot of other stuff :)
Just to tac on: having logs in a production environment is usually bad practice. 
This is definitely best practice. Something along the lines of... var debug = true; var trace = (function (w) { var log = w.console &amp;&amp; 'log' in w.console ? console.log : function () {}; return function(msg) { if (debug) log(msg); }; })(window); The above code also accounts for IE&lt;9 not having console.log. 
As far as I know, tampermonkey is contained in the "window" scope (someone probably knows the proper terms for this), so no, you can't write a txt file, but you can do an ajax call, and make the server do the stuff for you.
*sigh* One day, maybe, people will learn that a "design pattern" is not a piece of code. Maybe. Or maybe copying from Wikipedia that "A design pattern is not a finished design that can be transformed directly into source or machine code" right into the presentation of a project which consists in a bunch of *code snippets* is some form of sarcastic comment on life or whatever.
I look at the interview in totality, so probably not. Here's the key point: we are looking for people with a deep understanding. Anyone who thinks you can ever get that with jQuery alone is fooling themselves. But, you certainly can have that deep knowledge AND use jQuery. For example, if you tell me: "I know its XMLHttpRequest, but I don't remember the details because I haven't used it in a while in favor of jQuery" then that's a fine answer. Also, note that most of my questions are meant to get at things other than the details I'm asking about. The details are in fact the least important thing in most cases! Any good developer can look stuff up quickly, but you need to know the underlying concepts, that's what I'm after. Also, frankly, we're trying to weed out dishonesty... you'd be surprised how many people flat out lie about their abilities, and we have to catch them as best we can... even if you stretch the truth a little, I need to know how far you stretched... a little might not disqualify you if I gauge that you actually do have ability, but it's a fine line and my job is to try and figure out if you've crossed it :-) 
I know for a fact that console.log() bugs the whole code on IE ~8.
Why is that best practice? Obvious practice is to have logs removed in your build step.
Instead of concats use commas because it'll handle objects/arrays/strings/ints console.log("the value of this variable is", myVar); console.log(myVar , " | " , myVar2);
Correction: IE has console.log defined if the debugging console was open at load time
Up and down thumbs have a bit of jerk on hover. Should probably give them padding and/or smoother transition.
I know he says his name is Edward Martinez, but he looks an awful lot like [Rick Steves](http://randomuser.me/g/portraits/men/016.jpg). On reloading, Edward Martinez comes up again, but this Edward Martinez is a spitting image of [Jake Gyllenhall](http://randomuser.me/g/portraits/men/029.jpg). Hello, Candice Lee. Anybody ever tell you you look just like [Julie Bowen](http://randomuser.me/g/portraits/women/015.jpg)? How many of the random user portraits are celebrities? It might save you some trouble down the line if you remove the celebrity photos as randomized profile photos. Especially Oscar winners or award-winning PBS hosts. Otherwise, it seems pretty useful. I was just generating a list of users by either using [names](http://treyhunner.com/2013/02/random-name-generator/) from Trey Hunner or [fake name generator](http://www.fakenamegenerator.com/), which gives me more random generated data, but no photos. Good work and good luck!
^ great tip ;) Prevents stuff like `Object.toString()` which would log `[object Object]` 
Thanks. We definitely need to find better photos for the service. It's harder than you'd think to find high quality portraits. 
Yeah that's just a message unclear syntax for classes.
All that I'm saying is that it's important to understand how your tools (IE, jQuery) work. There are too many developers who just think that jQuery is some magic thing, and don't have the slightest clue how its features are implemented. If you don't ask questions about how they are implemented, you'll hire developers like this.
Where are you getting the portraits? Are they royalty free?
It really depends on what you are logging, how much, how detailed/verbose, what the JavaScript is there to do, and what the logs contain. Logging it's self, is neither good or bad. Although outside of JavaScript, it's bad practice *not* to have logs in most systems, and plenty of organizations backup their logs in case they need them.
I was thinking the same thing regarding the routes, the second route would **never** fire.
One thing I've noticed a lot of novice/beginner Backbone users do is constantly do things like this in their routes: routeName: function(){ var view = new ViewName(); var model = new ModelName(); // Rest of route logic using the view &amp;&amp; model } Which causes a nice little memory leak
Before a dev uses jQuery they should try to learn how it works for sure. How it uses chaining is just so cool. :)
I'm partial to https://github.com/jsoverson/grunt-strip , primarily because it doesn't rely on a regexp approximation, but uses a correct js parser to find console logging calls. Also, it's relatively easy to extend to include assert() calls or whatever else you don't want to keep in production. 
I agree. Apache logs for instance are always good to have.
https://encrypted.google.com/search?q=portrait&amp;lr=&amp;tbs=sur:fmc&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=-6kGUsP7KcWQyQG2goHQAQ&amp;ved=0CAkQ_AUoAQ&amp;biw=1600&amp;bih=775 Note the "labeled for commercial reuse with modification".
If Tampermonkey can get you access to the chrome.storage API, then you can get/put data into the browser's local storage. 
Very cool! I'm constantly seeding development apps with fake users; this will come in so handy.
You rock, I didn't know you could do that.
Function.apply.call console.log, console, arguments if @debug? gosh i love coffeescript, but also, I enjoy this method because it allows you to use console.logs multiargument: console.log(this, that, them)
I've done this too, but my problem with it is that Chrome no longer displays the correct line number and file. 
Looks like we're still having issues. Looking into it still. I'm having these errors, not sure what they mean http://www.intodns.com/randomuser.me
I would greatly prefer if all of the email addresses ended with @example.com, to reduce the chances of having emails sent to real people.
Great book raginwald, you fogus and matthias felleisen have expanded my mind.
It may not be a good idea to assume that you should feel free to use any photo listed in that search. Start with the first two people on the page: Obama? Sure, go for it. [Gabrielle Giffords in 2010](http://en.wikipedia.org/wiki/Gabrielle_Giffords)? Probably not...
Exactly. What does it say about a company to be pulling JS test questions out of "an old text book or something?"
I use log4js for logging. http://log4js.berlios.de/ It handles this situation by having various levels of logging that can be turned on and off at runtime.
I read the book while building rewriting an app that is being pushed to production later this week. It really is just a rehash of the docs. You're better off reading the tutorials on the ng website and just diving into development. StackOverflow will be your most useful documentation though. 
The direct answer to your question is this: $('#llama').click(wrong); $('#duck').click(right); When you call these methods, you're *adding* click handlers, not replacing the existing ones. Eventually, your "llama" button is going to have a hundred click handlers.
Thank you! Would you happen to know how I could fix this, if not I guess I will have to sharpen my Google-Fu skills :P.
NOW, let's also talk about the design of your code. One of the most important rules of thumb you should learn is abbreviated D.R.Y.: "Don't Repeat Yourself." As much as possible, avoid having multiple blocks of code all doing the same thing. For example: var randNum = Math.floor(Math.random() * 9); if (randNum === 0) { $('body').css({ "background": "url(img/llama1.jpg) no-repeat center center fixed", "-webkit-background-size": "cover", "-moz-background-size": "cover", "-o-background-size": "cover", "background-size": "cover" }); $('#llama').click(right); $('#duck').click(wrong); console.log("Random # is 0"); } else if (randNum == 1) { $('body').css({ "background": "url(img/llama2.jpg) no-repeat center center fixed", "-webkit-background-size": "cover", "-moz-background-size": "cover", "-o-background-size": "cover", "background-size": "cover" }); $('#llama').click(right); $('#duck').click(wrong); console.log("Random # is 1"); } else if (randNum == 2) { ...etc etc. There are ten of these blocks, and they're all *almost* identical. You can make things a lot easier on yourself by putting blocks of that code where you don't have to repeat it. When you have repetition, try your best to isolate only the parts of the code that are changing. For example, all the stuff you did for blocks could be: var randNum = Math.floor(Math.random() * 9); console.log("Random # is " + randNum); $('body').css({ "-webkit-background-size": "cover", "-moz-background-size": "cover", "-o-background-size": "cover", "background-size": "cover" }); if (randNum === 0) { $('body').css({"background": "url(img/llama1.jpg) no-repeat center center fixed"}); $('#llama').click(right); $('#duck').click(wrong); } else if (randNum == 1) { $('body').css({"background": "url(img/llama2.jpg) no-repeat center center fixed"}); $('#llama').click(right); $('#duck').click(wrong); } else if (randNum == 2) { $('body').css({"background": "url(img/llama3.jpg) no-repeat center center fixed"}); $('#llama').click(right); $('#duck').click(wrong); } else if (randNum == 3) { $('body').css({"background": "url(img/llama4.jpg) no-repeat center center fixed"}); $('#llama').click(right); $('#duck').click(wrong); } else if (randNum == 4) { $('body').css({"background": "url(img/llama5.jpg) no-repeat center center fixed"}); $('#llama').click(right); $('#duck').click(wrong); } else if (randNum == 5) { $('body').css({"background": "url(img/duck1.jpg) no-repeat center center fixed"}); $('#llama').click(wrong); $('#duck').click(right); } else if (randNum == 6) { $('body').css({"background": "url(img/duck2.jpg) no-repeat center center fixed"}); $('#llama').click(wrong); $('#duck').click(right); } else if (randNum == 7) { $('body').css({"background": "url(img/duck3.jpg) no-repeat center center fixed"}); $('#llama').click(wrong); $('#duck').click(right); } else if (randNum == 8) { $('body').css({"background": "url(img/duck4.jpg) no-repeat center center fixed"}); $('#llama').click(wrong); $('#duck').click(right); } else if (randNum == 9) { $('body').css({"background": "url(img/duck5.jpg) no-repeat center center fixed"}); $('#llama').click(wrong); $('#duck').click(right); } THEN, the CSS declaration on body for ``-webkit-background-size``, ``-moz-background-size``, ``-o-background-size``, and ``background-size`` could be moved out of the JS altogether into an external stylesheet. THEN, you can recognize that the assignment of right vs. wrong doesn't vary for every single option, just for 0-4 and 5-9: if (randNum &lt;= 4) { $('#llama').unbind('click').click(right); $('#duck').unbind('click').click(wrong); } else { $('#llama').unbind('click').click(wrong); $('#duck').unbind('click').click(right); } if (randNum === 0) { $('body').css({"background": "url(img/llama1.jpg) no-repeat center center fixed"}); } else if (randNum == 1) { $('body').css({"background": "url(img/llama2.jpg) no-repeat center center fixed"}); } else if (randNum == 2) { $('body').css({"background": "url(img/llama3.jpg) no-repeat center center fixed"}); } else if (randNum == 3) { $('body').css({"background": "url(img/llama4.jpg) no-repeat center center fixed"}); } else if (randNum == 4) { $('body').css({"background": "url(img/llama5.jpg) no-repeat center center fixed"}); } else if (randNum == 5) { $('body').css({"background": "url(img/duck1.jpg) no-repeat center center fixed"}); } else if (randNum == 6) { $('body').css({"background": "url(img/duck2.jpg) no-repeat center center fixed"}); } else if (randNum == 7) { $('body').css({"background": "url(img/duck3.jpg) no-repeat center center fixed"}); } else if (randNum == 8) { $('body').css({"background": "url(img/duck4.jpg) no-repeat center center fixed"}); } else if (randNum == 9) { $('body').css({"background": "url(img/duck5.jpg) no-repeat center center fixed"}); } It's getting shorter and shorter. (This includes a call to 'unbind' also, so you don't multiple-bind the handlers.) THEN, you can recognize that your CSS call is doing almost the exact same thing every time, except with a different URL, and you could make that a function: function setBackground(url) { $('body').css({"background": "url(" + url + ") no-repeat center center fixed"}); } //... if (randNum === 0) { setBackground('img/llama1.jpg'); } else if (randNum == 1) { setBackground('img/llama2.jpg'); } else if (randNum == 2) { setBackground('img/llama3.jpg'); } else if (randNum == 3) { setBackground('img/llama4.jpg'); } else if (randNum == 4) { setBackground('img/llama5.jpg'); } else if (randNum == 5) { setBackground('img/duck1.jpg'); } else if (randNum == 6) { setBackground('img/duck2.jpg'); } else if (randNum == 7) { setBackground('img/duck3.jpg'); } else if (randNum == 8) { setBackground('img/duck4.jpg'); } else if (randNum == 9) { setBackground('img/duck5.jpg'); } Shorter still. THEN, you can recognize that really, the only thing that's varying in any of these cases is the URL string. JS has a tool that already exists for mapping from an integer to some other arbitrary data, an array. You could declare... var images = [ 'img/llama1.jpg', 'img/llama2.jpg', 'img/llama3.jpg', 'img/llama4.jpg', 'img/llama5.jpg', 'img/duck1.jpg', 'img/duck2.jpg', 'img/duck3.jpg', 'img/duck4.jpg', 'img/duck5.jpg' ]; And now your ``newGame`` function just becomes: var randNum = Math.floor(Math.random() * 9); //... setBackground(images[randNum]); No 10-part if statement at all! I recommend you keep doing this process until you've gotten your code as small and non-repetitive as possible. It will make the code cleaner, easier to debug, easier to alter later, and it'll help you brush up your skills.
Use [jQuery's ``unbind`` method](http://api.jquery.com/unbind/) to remove the old handler before adding the new one. **Edit**: Or alternately you could use [the ``one`` method](http://api.jquery.com/one/) to assign the handlers instead of the ``click`` method, and that takes care of the binding happening only once. So instead of $('#llama').click(right); You'd do $('#llama').one('click', right);
Haha, I don't need gold. Pay it forward down the road.
This also applies to objects. I've done things like function gotoSearch () {}; router = { search: gotoSeach, categoies: gotoCategories } you can do something like var request = 'search': router[request](); // gotoSearch is called and request is actually a variable with string. So what you're doing is you're using some dynamic variable to call a function on an object by accesses it's property by its 'key'. Much like accessing arrays (where a number is the key), accessing an object's properties is via variables is a neat JS trick
Again, I would like to thank you again. This has been my project for "learning javascript as I go" and if it wasn't for you I would have learned dirty habits. Thanks again!
&gt; why just the other day I wanted to write a test framework and was told to use jasmine. I reinvented this wheel, because started learn TDD with Qunit. Maybe if i had started with jasmine too, test.it was never been coded. &gt; one thing this is missing is async ability yes. There are few lacks: * no async tests * no way to run one group without running other * no diff of comparison values But i working on them! P.S. yesterday I have got pull-request which adds ability to use test.it in node.js. It will be merged soon. 
There's no reason to ever commit logging code to production. It's wasted bandwidth, wasted CPU cycles, wasted memory, and it serves absolutely no purpose. If you follow this pattern, you'll eventually end up with tons of console.log statements that result in making things harder to debug. You could write a library to help make that easier to maintain, but there's still no reason to do it in the first place. Just use them during debugging, and avoid keeping them around. You can always add them back as you're debugging later.
This sounds good in theory, but the UIs for inspecting these things in browsers are still pretty terrible.
Not if it's executed conditionally.
Just wanted to add... you can assign console.log() to something less verbose. I use L()... write this in a global js file: L = function() { return console.log.apply(console, arguments);}; 
There is also good snippet to detect what function it was called from: var name = function () { var caller = arguments.callee.caller; while (caller &amp;&amp; !caller.name) caller = caller.caller; if (caller) return caller.name; return "______"; }; and then return function() { if (debug) log(name()+'(): ', Array.prototype.slice.call(arguments)); };
I am also using something similar to this. It's one of the really good practices to tell from what module/function some message originated. But prefix should be behind **if (this.debug)** if you don't use it in other places so it won't be computed in a production version. if (this.debug) console.log("[" + this.name + "@" + this.version + "] " + msg);
It's always gives me a smile when I see how some people strip all logging (needed and unneeded indiscriminately) and then complain about unintelligible bug-reports from clients.
For a nice formatting it's also good to use [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) to preprocess JSON-serializable objects: JSON.stringify(msg, null, " ");
It says something completely negligible compared to what else you can learn about a company in an interview. P.S. Down voting me doesn't strengthen your argument.
Unfortunately `arguments.callee` is forbidden in `strict` mode from ECMAScript5 onwards. [edit] stray 'not' that shouldn't have been there
You could use [localstorage](http://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage), which works fine from Tampermonkey scripts, although it has a 5MB limit (about 2.6 million characters) and is cleared if you clear cookies.
I usually have one global variable exposed during development (`window.app` in my case), so I can debug on-the-fly without having to set a debugger and refresh the page. If something isn't doing what I expect, I can just open console and do `app.controllers.users.index()` to re-run a function once I've made some changes. When I go live, I take out the `window.app` assignment, and everything stays contained in the "setup" anonymous function. 
This is the correct approach. Breakpoints really are the future and if you are a developer that says things like "browsers are still pretty terrible" [at this] then you're not actually aware of how to use them. For instance, even IE8 has great breakpoint support. You can really get more work done and done well with breakpoints in much less time. [added *even*]
Good suggestion. Noted.
Why would I use JS to make my site responsive? That's a job for CSS, not JS. They both have their clearly designed tasks but some people seem to try to do everything in JS instead of using the right tool for the right job.
This is out of date as it's for Bootstrap 2. Update it to use the current version: http://getbootstrap.com/
I generally remove console.log once something is done/ready for production. Especially since often my console.log tend to be somewhat silly "console.log("Oh hai? what's this right now",this)";, or occasionally somewhat rude "console.log('why the fuck am I ending up here?',stuff)"; Although a console.log that slips through to production is better than an "alert("Fucking fuck" + something)"); 
One thing I've noticed with AngularJS, is occasionally setting a breakpoint can mess up with the digest/apply/watch cycle which can be a bit WTF, as IMO - setting a breakpoint shouldn't impact the program flow/logic. It's rare that I've had this happen to me - but still annoying when it does.
You should x-post this to /r/LearnJavaScript.
Woops! You're totally right. That's what I get for being high and thinking about programming
This isnt the case of using JS to make a site responsive, its the case of you making your styles responsive using CSS and then any javascript that works differently between responsive breakpoints (or States as I like to call them when working in JS). So this could be that on desktop your form opens in a lightbox but on mobile you want it to open another page. Another example is that on desktop you may show some content open, but on mobile its actually displayed in an accordion. My next blog post actually goes into why you should be doing this sort of stuff to improve the user experience.
Ah, that makes a lot of sense. I could see some use for it in there but I think you might want to clearly define it's use to avoid this sort of misconception, or show some examples of appropriate use. Regardless I hope I didn't come off as insulting, rather just critical. Any contribution deserves a thanks!
My two favorite are a console.log snippet and an event listener snippet. console.log("ping"); I've set up the snippet to execute when I type "cl" and hit tab. "ping" is selected automatically so I can type my message without interruption. I have two versions of my event listener snippet. The first without a supporting function: if(window.addEventListener)window.addEventListener("load", handleIt, false); else window.attachEvent("onload", handleIt); I've set it up so you can highlight the element, the type of event and the name of the function on tab. In that order. The Second version is with a supporting event. if(window.addEventListener)window.addEventListener("load", handleIt, false); else window.attachEvent("onload", handleIt); function handleIt(e){ //.... } Same tab set up with the addition of the "//.....". I use these all the time and love them very much. hope they help!
 // String format function if (!String.prototype.format) { String.prototype.format = function() { var args = arguments; return this.replace(/{(\d+)}/g, function(match, number) { return typeof args[number] != 'undefined' ? args[number] : match ; }); }; } Allows you to do this: var userName = "BlackOdder"; var myString = "Hello {0}, welcome to {1}!"; myString.format(userName, "my website"); Outputs: "Hello BlackOdder, welcome to my website!"
I use something very similar: String.prototype.parse = function(o) { return this.toString().replace(/\{([^}]+)\}/g, function(m, g) { return o[g]; }); }; It allows you to do stuff like this: var tmpl = 'Hello {name}, Welcome to {place}!'; var values = { name: 'BlackOdder', place: 'my website' } tmpl.parse(values); This is very useful for localisation problems where a dynamic value is required in a localised sentence.
Cross browser event listening: var addListener = (function() { if (window.addEventListener) { return function(el, ev, fn) { el.addEventListener(ev, fn, false); }; } else if (window.attachEvent) { return function(el, ev, fn) { el.attachEvent('on' + ev, function() { fn.call(el); }, false); }; } })();
The strict mode already prevents forgetting new even without the extra code.
Given the way arrays are implemented in JS, you can even do `"{0}, {1} and {2}".parse(["Tom", "Dick", "Harry"])`. Although I'd definitely rename it to `format` in my code, I have no idea what that has to do with parsing :)
Is there any reason var queue = []; array.forEach(function(item) { queue.push(item); }); is not var queue = array.slice(0); ? Cool snippet though.
underscore.js
For one, you can use the latter to convert array-like objects like `arguments` into arrays. Relevant: http://tech.pro/tutorial/1453/7-javascript-basics-many-developers-aren-t-using-properly EDIT: I see now that you're suggesting the latter. I don't see any reason why not to use `array.slice(0)` if what you want is to clone an array or array-like object. EDIT 2: I thought of a reason: readability.
Thanks, I have more coming on this topic. Also, Grunt-S3 is getting ready to switch from knox to AWS (by Amazon itself) so that it should end up being more stable. At SproutSocial, we've been using this for over a month every day on hundreds of files, so it's battle tested. I'll probably contribute real tests for it though.
It's an idiom - as such, it might be opaque to beginners, but I'd say that to any experienced JS coder, it's more readable since it's succinct, and they've seen `.slice(0)` used to clone arrays a zillion times. Same as `a1.push.apply(a1, a2)` for multipush, or `foo ||= bar` for defaults instead of `if (!foo) foo = bar` - all of those somewhat puzzling when saw for the first time, and completely readable after a bit of experience.
I like that quite a lot... will probably replace my original post as my go-to.
Appropriate username.
[Here's my collection of snippets](https://code.google.com/p/unifac/wiki/JavaScriptSnippets). It's a work in progress, and I write HTML5 games so some of them are specialized or will only work in modern browsers.
Get with the times, man! [Lo-Dash!](http://lodash.com)
Mahh man! +1 for checking "window.addEventListener" only once.
Personally I wouldn't use `.slice(0)` to clone an array. I think `.slice()` - without any argument - is better. To me, omitting the argument makes it more clear that we're not slicing from a specific index but want the whole thing. (Admittedly, of course, this is just a matter of style and taste.)
Strict mode completely changed my code for the better. Lazy coding is bad code for a reason.
&gt;Get with the times, man! [Lo-Dash!](http://lodash.com) I think you meant [Lazy.js](https://github.com/dtao/lazy.js) 
I am glad somebody respected like Zakas has finally announced this conclusion publicly. Whenever I bring up that people should use fewer frameworks the conversation almost immediately dissolves into something about Assembly or machine code. It happens so frequently that I have given this phenomenon a name: Godwin's Law of Programming - Provided a discussion on software development, particularly JavaScript, grows longer the probability of comparing any development effort to writing directly in Assembly or machine code grows increasingly larger. At some point developers will either have to learn to work in the technologies directly or they will encounter a problem they cannot and are not willing to solve themselves.
I did not know that worked. [According to MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), the first argument is not optional, so I never left it out. How sure are you that argumentless `slice` is cross-browser compatible?
Extend jQuery a bit $.fn.prevWrap = function(selector) { var prev; prev = $(this).prev(selector); if (prev.length &lt;= 0) { prev = $(this).parent().children(selector).last(); } return prev; }; $.fn.nextWrap = function(selector) { var next; next = $(this).next(selector); if (next.length &lt;= 0) { next = $(this).parent().children(selector).first(); } return next; };
It should be working now! http://randomuser.me
It is not due text plugin. I find out that if I put template inside index.html and reference it with jQuery .html() function (so whitout text!) i still get an error when minifyed. maybe error is due that I'm creating: *var data {location: location, underscore:underscore}* for every (inside each) location. For now, working code is hardcode inside content element multiplying strings and variables, and that is ugly. p.s. replace underscore word with underscore symbol :)
Seems to be a lot of goodies there 
Seems more like a template than a format. Not that I suppose there is a sharp distinction but there seem to be as many JS templating libs nowadays as there are JS programmers in the world.
I dedicate a portrait screen to my browser and use another screen for writing code, but the Chrome dev tools are still so bad that I find myself using console.log more often.
Is there a reason to use snippets over shorthand functions in a generic mini library you can use for all your stuff? Just curious. I've always maintained a shorthand library and use it for everything and I am wondering if I can do something better instead.
That's an interesting point; I'm glad you brought it up. I've used `array.slice()` with no arguments for many years in production sites with millions of users, and it's never failed in any browser. But as they say, past performance is no guarantee of future results. What about that MDN doc? Well, it turns out it's simply in error, and MSDN [makes the same mistake](http://msdn.microsoft.com/en-us/library/ie/tkcsy6fe\(v=vs.94\).aspx)! The [ECMA-262 standard](http://www.ecma-international.org/publications/standards/Ecma-262.htm) requires any conforming implementation to treat `array.slice()` identically to `array.slice(0)`. Here is how we know this. First we look at [Section 15.4.4.10](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.10), "Array.prototype.slice (start, end)": &gt; The `slice` method takes two arguments, *start* and *end*, and returns an array containing the elements of the array from element *start* up to, but not including, element *end* (or through the end of the array if *end* is `undefined`)&amp;hellip; What is this? There's not even any mention of *end* being optional. Are both *start* and *end* required? Yes, they are. But we need to look elsewhere to understand what this means. [Section 15](http://www.ecma-international.org/ecma-262/5.1/#sec-15), "Standard Built-in ECMAScript Objects" says (in the fourth paragraph): &gt; Unless otherwise specified in the description of a particular function, if a function or constructor described in this clause is given fewer arguments than the function is specified to require, the function or constructor shall behave exactly as if it had been given sufficient additional arguments, each such argument being the `undefined` value. And this is consistent with how other methods are specified. We know, for example, that the compare function argument to `array.sort()` is optional, but [Section 15.4.4.11](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11) "Array.prototype.sort (comparefn)" doesn't say anything about the *comparefn* argument being optional. It just describes what to do when *comparefn* is `undefined` or not. So now we know that `array.slice()` is interpreted as `array.slice(undefined,undefined)`. Continuing, then, with [Section 15.4.4.10](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.10), we find the relevant step: &gt; 5 . Let *relativeStart* be ToInteger(*start*). ToInteger is described in [Section 9.4](http://www.ecma-international.org/ecma-262/5.1/#sec-9.4), where the first two steps are relevant: &gt; 1 . Let *number* be the result of calling ToNumber on the input argument. 2 . If number is `NaN`, return `+0`. ToNumber is found in [Section 9.3](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3), where the first entry in the table says that when its Argument Type is Undefined, the result is `NaN`. So, the `undefined` first argument to `array.slice()` is passed into ToNumber, which returns `NaN`. This causes ToInteger to return `0` (or `+0` as they call it here), and that's the value that `array.slice()` uses. Therefore, `array.slice()` is the same as `array.slice(0)`. If an implementation doesn't treat it that way, it doesn't conform to the ECMA-262 standard. 
It should **only** be posted in r/coffeescript. Coffeescript !== Javascript. 
&gt; foo ||= bar Syntax error. foo || (foo = bar); Also, this should only be used when you're expecting foo to be an object, or to be either null or undefined. Other falsey values like empty strings or 0 may give unintended results.
 console.log(1); :'(
I am trying to encourage the use of SSM and encourage people to contribute to its development. Any ideas for its improvement are welcome
The big brother of alert(1);
I'm a little late to this party, but I use this "barebones canvas animation engine" thing a lot: http://jsfiddle.net/neuroflux/sH2S5/1/ 
Function bind() can often be used for this myStuff.forEach(function() { /* Do stuff here with correct 'this' context. */ }.bind(this));
**Float to integer conversion** /* Math.floor */ value | 0; /* Math.ceil */ value + 0.5 | 0; **2d to 1d array lookup shorthands** var index = x + y * width; /* or */ var x = index % width; var y = index / width | 0; [Quick example](http://cssdeck.com/labs/2d-to-1d-array-coordinates) **Simple easings** /* linear mod - goes from 0 to 1 - duration is in [ms] */ var linear = Date.now() % duration / duration; /* full sinus easing - works like 0 -&gt; 1 -&gt; 0 */ var bidi = Math.sin(linear * Math.PI); /* want nice 0 -&gt; 1 easing ? Just go by half: */ var mod = Math.sin(linear * Math.PI * 0.5); [Quick example](http://cssdeck.com/labs/simple-sine-oscilator) **16 random chars** /* but you can combine it to get more */ Math.random().toString(36).substring(2, 18); 
Phaser is AFAIK based on Flixel or tries to be as similar as possible. If you are going to settle with that, and if HTML5 isn't an absolute requirement why not consider Flixel for OpenFL. You develop in ECMAScript language and deploy to native (creates C sources in between). http://openfl.org http://www.haxeflixel.com 
I understand what he's saying. But it's not as cut and dry as he portrays it. Moving back to the server is faster for Twitter? Good for Twitter. Their app is different, isn't it? They have the luxury of comparatively incomplex data and ridiculous infrastructure that allows them to prerender content and cache it to a static or pseudo-static state. So, should you be aware of "how much" JS you're adding to your site? YES! Hell yes! Slim that load time down. Should you move all of your HTML rendering back to the server from now on? No, not in all cases. Just where it makes sense. Also, if his mom is so non-technical, how did she disable JS? The idea that everyone should cater to the lowest common denominator, that being people with JS disabled is ridiculous. Some web apps need to, sure. Most don't, and a simple "JavaScript is required" message will suffice in most cases.