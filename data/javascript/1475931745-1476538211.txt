I heard that you serialise the array in order to pass it to php. JSON.stringify serialise the data, so i can grab it in php. 
Its not about the value, its the _key_ used to access it. You need to change either the js or the php. $.ajax({ url:'datastore.php', method: 'POST', data: {"data":JSON.stringify(array)}, datatype: 'json' }); ... $_SESSION['recieve'] = $_POST['data']; or $.ajax({ url:'datastore.php', method: 'POST', data: {"array":JSON.stringify(array)}, datatype: 'json' }); ... $_SESSION['recieve'] = $_POST['array']; or if you're feeling especially adventurous... $.ajax({ url:'datastore.php', method: 'POST', data: {"and_now_for_something_completely_different":JSON.stringify(array)}, datatype: 'json' }); ... $_SESSION['recieve'] = $_POST['and_now_for_something_completely_different']; 
If a javascript file only includes these 6 characters, shouldn't the file size be significantly smaller when gzipped?
Significantly smaller than what? alert("wow") is 12 characters, that's 12 bytes. Writing that using the 6 characters is about 6300 characters, 6.15KB. Even with the best compression, you're never getting 12 bytes or less. Maybe there's more potential with a bigger codebase, but I can't see it being less than the original. Would love to be proved wrong though!
same here, its so useful
This is very good advice. Keeping feature and library usage to the absolute minimum has always paid off for me, especially for the times when you get new people on the team that have to get up to speed asap.
There is also [SteelToe](https://github.com/jclem/steeltoe) which does the same thing only without resorting to `eval` like this library.
This is the first react.london conference so I don't think so
I updated the benchmark here: http://infernojs.org/benchmarks/dbmonster/ with the latest Inferno 1.0-beta3 and made some changes to the implementation. You still have some more work/optimisations to do before you catch up it seems :) Furthermore, there seems to be a bug somewhere as on some update loops your implementation doesn't actually update at all, it skips out of the render, resulting in why you have 0ms min update time (which shouldn't be happening). A gap also appears in the chart below it, showing that you did no computation for that frame.
Json.parse it maybe 
maybe one of those object values is an array? so d.id[0] would work? Just shooting here while taking a dump. 
See? I need sleep. 
Yup, it was return a string. OneSignal recently upgraded their API and they used to return objects, now they are returning strings.
Is "additionalData" a serialized object? If the object in the first log is simply a string, that explain these results. Edit: Should have refreshed before commenting. Seems that answer is given. Anyways, here's a fiddle as an example with that exact result being duplicated. https://jsfiddle.net/L7Lo8f6d/
Set a breakpoint, see what 'data' really is. Be not afraid of the debugger: it is your friend.
I haven't worked in Photoshop, but those are non standard extensions. They look like C style preprocessor directives, which means they would run on constants strings only, not on a variable. If it supports the new System.import API, you could use that to bring a dynamically discovered module in, if needed.
Strictly speaking, an API will only ever return strings, that's all the HTTP protocol provides for*. However, by using the `Content-Type` HTTP header, the server can clue the client in as to what sort of response it provided. Some libraries, like jQuery, will inspect this header, and if it's `Content-Type: application/json`, then jQuery will run the `JSON.parse()` for you. It's likely a bug in their API whereby it's not sending the correct header; that, or they changed the API and now require you to send an explicit `Accept` header or similar. Additionally, you can have jQuery still do this for you even if the API doesn't send the correct header, by setting `dataType: 'json'` in your AJAX options -- this will relieve you of the responsibility of manually calling `JSON.parse()` yourself. ^\* _this isn't 100% accurate; you can send binary data over HTTP._
Awesome it works perfectly now thanks a million! Will definitely be using this site in the future.
Since it's a little slow today, I'll help out by providing some of the removed posts from earlier this week which should have been posted here: * [Project Feedback - Online Tax Calculator](https://www.reddit.com/r/javascript/comments/56773y/project_feedback_online_tax_calculator/) by /u/sajad_burritos * [3D grapher I made this week](https://www.reddit.com/r/javascript/comments/56a1mb/3d_grapher_i_made_this_week/) by /u/banalusername
Not a bug it is throttled to 60fps(though i just disabled that now). On my machine i'm getting a 56fps+/- flux with infernojs vs a constant ~60fps with this(with or without the throttle) on Chromes FPS meter.
Though on the js-framework-benchmark inferno beats this by 2% 1.10 vs 1.08(inferno)
Hi Meefims thanks for the comment. Yes you can limit time, all the init flags are explained here: http://adderscript.com/docs.html#executing-adder---host-application-side--advanced-init-settings--flags Also there's an online sandbox where you can play with commands here http://adderscript.com/examples/sandbox.html. However if you try the endless loop there it will break on statements limit (another type of quota you can set) before it hits the time limit.
No problem mate, welcome to the hell of quotes and brackets :) Just as a side note JS has introduced [template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals) to alleviate the issues with quotes, so instead of this: $body.append('&lt;img class="bgimg" src="' + streetViewHandler + '" &gt;; now we can do this: $body.append(`&lt;img class="bgimg" src="${streetViewHandler}"&gt;`); Notice the \``backticks`\` and ${variable} [interpolation](https://en.wikipedia.org/wiki/String_interpolation) 
Yes, a thousand times this. `debugger` + Chrome dev tools is insanely useful for these types of issues. 
Slightly related to a link I posted earlier (but not the same) this is a Web game I wrote that you need to program a simple AI to fight against the house AI in a rock-paper-scissor like game (but more complex): http://adderscript.com/examples/BotWars/BotWars.html 
Ok I tested it out. jquery.min.js 86.709 bytes jquery.min.js.gz 29.155 bytes jquery.min.fucked.js 162.266.608 bytes jquery.min.fucked.js.gz 1.865.661 bytes As expected the 99% compression is impressive (from `jquery.min.fucked.js` to `jquery.min.fucked.js.gz`), but I didn't expect the inflation by almost 2000% (from `jquery.min.js` to `jquery.min.fucked.js`)
The FPS in this benchmark have very little to do with JS performance – it's CSSOM/DOM related. I'd re-check your browser that is getting 56FPS and make sure it's up-to-date, recently Chrome fixed a regression and should be in 53. Thanks for removing the throttle – makes the results look far more accurate now. I'll be happy to talk you through some other parts that you can optimise too if you want (on Slack/Gitter rather than here).
This got a touch up! [code-aoke](https://code-aoke.herokuapp.com)
so native code is telling you that it's a built in function you're trying to change?
Stringifying a function is the inverse of `eval()`. Since you can't possibly represent native code as a set of javascript instructions, the javascript implementation just puts `[native code]` in the function body.
We don't try to change it. We just want to see its definition, but yes: It's telling us, that it is a built in function. These functions are usually not even implemented with JavaScript and are part of the JavaScript Engine.
Sounds great, i have the inferno-v1.0.0-alpha7 version, would love to see the commit diff that's the reason for the bump in performance.
Most likely you are forgetting to send and "Accept" header of "application/json"? Check the "Content-Type" header of the request. JSON is just a string but by setting Accept you are setting a contract that you want to parse it immediately to a JSON object.
You'll need a backend solution, with a database and something to connect it with. You could run a separate blog and expose some kind of api or rss feed, or run something like prismic.io, if you don't feel like addinga backend to the existing site. 
You can put a wordpress or ghost blog on a different subdomain. For example, you can put your blog on `blog.example.com` instead of `www.example.com/blog`. That way you can have your existing webpages on the `www` domain and you can have your blog separately on the `blog` domain. Building your own blog can be a difficult task if you're still a beginner. You will need code that runs on the backend (php or node.js for example) and you'll need to interact with a database. If you're familiar with JavaScript the easiest way to do this would be to use node.js, express and a templating engine like Jade. You'll also need a database. MySQL will be a good enough solution for what you need and it's probably the easiest database to get started with. You can use [jsmysql](https://github.com/mysqljs/mysql) to interact with your MySQL database from node.js
How sure are you that user code can't escape the sandbox? Have you had it audited by a security professional, or indeed by anyone other than yourself? 
For non-programmers (e.g. early web designers) who just wanted to make a simple thing work, I can definitely see it being useful. That being said, I wish there was a mode (like strict mode) that turned off a lot of that stuff now, for developers that don't want it.
I built a project planning tool that builds Kellogg Logic Models. It's written using the "MERN stack": https://github.com/joeattardi/kolinahr
I'm about to get *really* opinionated. Probably most people will disagree with me, but anyway... I think part of it is that JS is a pretty good language, but the Web's software as a whole isn't that good at all, being an ugly attempt to build an application-delivery medium on top of a document-delivery medium. The Web is sort of like what would happen if you tried to build an operating system on top of an email program, using the email program's primitives. HTML and CSS are crap. JS isn't crap but it gets judged mostly in the Web context, and while the Web is one of the greatest accomplishments in the history of humanity, it's succeeded largely in spite of the quality of the software technology underlying it rather than because of it. I would argue that the Internet's hardware technology and lower-level software levels are great (to the limited extent that I understand them), but the Web, which is built on top of the Internet, is a mess. We put up with it because the Web's *content* and what it can do for us are absolutely fantastic, basically a revolutionary step forward for the human species that links together all of human civilization's modern regions in a way that is not under the control of any single authority or group of authorities. But Web technology, as it exists, is a giant mistake. If one were building the Web from scratch, one would not implement it in the way that it actually is implemented now. People get frustrated with Web software and the current state of web development and they take it out on Javascript frameworks because JS frameworks are very visible, often highly hyped and much-talked about representatives of modern web technology. There's a common perception in the field that you *have* to use an existing framework that someone else built, a perception which is sometimes justified, sometimes not. And if you feel that you *have* to use a framework, then you'll probably feel like you *have* to use the "best" framework, or at least one of the top ones. So begins the search for the "best"... My guess is that most of the people who criticize how many frameworks there are probably don't really understand frameworks on a deep level and are caught in the idea that using one is mandatory. It's superficial-level criticism. To some extent the criticism is a consequence of the Web's success and the high visibility that Web development has in the software field. There's a lot of choice in desktop development too, but I don't see a lot of people writing essays about it. There is also the matter of the weird resentment that some non-web developers seem to have for web developers. To me, it makes no sense. I'm like, you think Web technology sucks? Hey, I work with the Web and I agree with you. But I bet you *use* the Web, don't you? Of course you do. So instead of bitching, how about you come and you help us make this shit better? You don't like Javascript? Build a fuckin browser that's really awesome and isn't locked into Javascript, then, and share it with people. Everyone would benefit.
hi Scatters, thanks for the comment, excellent question. First just for clarification - its not a sandbox, its a language implemented on top of JavaScript. The main difference is that no user code is ever evaluate as JavaScript (no evals() etc), Instead, the user code is parsed as a string, broken into syntax trees and evaluated by the interpreter I wrote. You can think of it as a huge system that wires keywords to hard-coded JavaScript functions, but obviously in reality its much more complicated than that. Whats important to remember is that no user code is ever evaluated as JavaScript, so its not exactly a sandbox to escape from. With that said, does it mean its 100% safe? Nope. there might be bugs etc that could freeze the interpreter, crash the host application, or maybe even run a hostile code somehow. I did my best to test it and write it in a secure way (I've been working before in cyber security), but its a new project and still needs to be tested, beaten and challenged by the community. EDIT: if you want to try and find security holes the fastest way for you to test it is to go to the online sandbox (http://adderscript.com/examples/sandbox.html) and try to break out using only the Adder code box (by break out I mean crash the browser, change dom elements, override JavaScript variables etc). Note however that in the sandbox the time limit is turned off and the alert and input debug modules are enabled (eg Alert.alert("A") or Input.rawInput("msg")). so if you break using one of these in production you won't have them :)
&gt;Attributes of HTML elements are always strings, so considering you were frequently operating on items like that at the time it made a lot of sense. I never thought about that, it's an interesting angle &gt;Prototypes have always had their drawbacks in that it resulted in a number of security risks over the years. I've never heard of this; what kind of security risks resulted from prototypes? 
Elucidating, thank you :)
&gt;I wish there was a mode (like strict mode) that turned off a lot of that stuff now, for developers that don't want it. Agreed, that would be super handy
debugger isn't pushed enough as a solution to these kinds of questions
Hi /u/instasiink13, please use an online service to host your code. Here are a few, but not all, of the ways you can post your code: * [Github Gist](https://gist.github.com/) for simple JS/text dumps * [Pastebin](http://pastebin.com/) for simple JS/text dumps * [Codepen](http://codepen.io/pen/) for JS+HTML+CSS * [JSFiddle](http://jsfiddle.net/) for JS+HTML+CSS Please reply to this comment once you have done that and I will make the post public. Thanks!
Put it in a function and re-call that same function as the last line. Please be sure to give your users an out as this would be annoying as hell with alerts/prompts
As a coworker of mine once told me. Some people who have "10 years of experience" actually have "1 year of experience repeated 10 times". If you don't challenge yourself, no unit of time will make you good.
I'm not sure however, three other very popular languages (vb, perl and php) from this time period had similar coercion features. All three are known for their beginner friendliness in their respective domains. Personally I think the ease of getting something useful working quickly with little ceremony is what is ultimately the killer feature of this generation of language. All of these languages can be used to throw small one off projects very rapidly. Go is interesting to watch in this space, it's a more modern language targeted at throwing together an application quickly. It actually has static typing but often feels like writing a dynamic language because of type inference and some constructs to basically statically check duck typing. It is quickly starting to be the de facto micro service standard. Go's success shows that domain specific languages with easy production stories and quick dev time are the secret sauce. Coercion is an attempt to get to these features but I think it's ultimately a historical misstep. 
I went through and basically addressed all the problems you submitted. I can't do anything about the photos at this moment but I will be working on them in the future. I will resubmit the question to Reddit later when i get more articles ramping up. I really appreciate the criticisms. 
This sounds like a good use case for setting up something like Jekyll in a sub-directory. I'd recommend checking out some static site generators unless you are specifically interested in pursuing the backend side of one of the popular CMS solutions. At which point, you should check out the getting started guide for that platform and maybe research "[plaform name] on [hosting provider]" because some platforms and some hosts don't play nicely with one another. You should be able to add a /blog/ directory to your server and run basically any blogging platform inside it, though. It really depends on what you're looking for the system to provide and how comfortable you are with the technologies it is built on. Making it fit in with the rest of your site style-wise will likely be the most time-consuming part assuming you are in a hosting environment where setting up a new application and corresponding database, if necessary, is simple.
I really don't know what that means or what that has to do with this article but experience *is* a thing. I promise you it matters. The problem with this whole convo is that skill, seniority and experience are all being lumped together and I am supposed to have said they are equivalent. They are not. They are correlated and they correlate differently for everyone. You could be amazingly skilled with little experience. You could have tons of experience and be mediocre. You could have seniority and have barely any skills. All of the traits mean different things. Everyone is welcome to an opinion on any subject, even if they know nothing about it, however I - me personally - am only going to trust opinions of those with experience. If that doesn't suit you then by all means use whatever you want to judge opinions.
a very dirty way to do it would be do { var active = true; var command= prompt("Enter a command") switch (command) { case '/help': alert("List of commands: /help, /hello") ; break; case '/exit': active = false; break; } } while (active)
I think you misunderstood me. I just feel that for many. Experience has diminishing returns. In my experience. For a lot of jobs. Once someone has 3-5 years of experience. The space between them gets pretty difficult to judge via years. The comment was said about from a boss we had who would continually poo poo good, modern design decisions because he was unfamiliar with them. Or it wasn't what he knew how to do. In essence, he'd done software writing one way. Had learned how to do it. And stopped there. And never reflected or kept up with what he didn't know. When challenged his response was always "I have 20 years of experience". And then discussion over. My coworker and I felt such thinking, and an obsession over time rather than demonstrated merit, was detrimental. Obviously, experience matters, but only insofar as it relates to competence. And we found that a willingness to put forth effort in learning. And a willingness to accept and engage in criticism to be far more indicative of the value of someone's words than a flat number of years for experience. 
What's the use case for this? 
That's not needed anymore: https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html
I appreciate what you're saying, because I don't have any experience building apps on the scale you're describing, so it's interesting to hear your perspective. However, I think you're misunderstanding some aspects/ implementation of observables. I mean a simple `map` operation would be a solution. 
I've hated on JS but only after using some of the ridiculously elegant languages like Python. HOWEVER, the new ES standards really change everything for me. Somehow those guys have crafted what basically amounts to an entirely new language with some dramatically improved feature set and cleanness, all while preserving backwards compatibility to the beginning of time. The weirdest thing to me with the new JS is the way they couldn't reuse old keywords and also couldn't use keywords that were already used by popular libraries. That's how you end up with "fetch" instead of "ajax" or "let" instead of "var", or the backtick template string syntax instead of, say, normal quotes. Now I'm excited to dive into the front end world. Things are changing so fast and JS and is charging ahead and evolving to meet the future.
Oh, people complain about C all the time don't worry -- ask any Rust programmer.
What would feature parity with other languages look like to you?
Maybe too late :P Didn't create it this weekend but I just fixed an annoying issue in it so I thought I should share it: https://github.com/R4meau/abDetector It's an ad blocker detector to display a message to visitors who use ad blockers on your website. Let me know what you think of it.
I wouldn't bother
Thanks so much! You were incredibly helpful :)
I would say var commandHandlers = { '/help': handleHelp, '/hello': handleHello }; askForCommand(); function askForCommand() { var command = prompt('Enter command...'); handleCommand(command); } function handleCommand(command) { var handler = commandHandlers[command]; if (!handler) { alert('Unknown command'); return; } handler(); } function handleHelp() { alert('commands available: ...'); askForCommand(); } function handleHello() { alert('Hello!'); askForCommand(); } Always use triple === Divide your application into small functions The map makes the application more flexible and less complex (less if statements)
TLDR; It doesn't matter if you transpile performance wise.
Not if you're using babel.
It's a paradox. One one hand is it a "toy," probably because, as troorl said down below, its capabilities beyond ES5 aren't commonly known. On the other hand it happily eats into fields traditionally dominated by Java, C++ and C#, chipping away at the desktop, mobile, elbowing Java from Iot and C# from the server. 
&gt; var commandHandlers = { &gt; '/help': handleHelp, &gt; '/hello': handleHello &gt; }; &gt; &gt; askForCommand(); &gt; &gt; function askForCommand() { &gt; var command = prompt('Enter command...'); &gt; handleCommand(command); &gt; } &gt; &gt; function handleCommand(command) { &gt; var handler = commandHandlers[command]; &gt; &gt; if (!handler) { &gt; alert('Unknown command'); &gt; return; &gt; } &gt; &gt; handler(); &gt; } &gt; &gt; function handleHelp() { &gt; alert('commands available: ...'); &gt; askForCommand(); &gt; } &gt; &gt; function handleHello() { &gt; alert('Hello!'); &gt; askForCommand(); &gt; } &gt; FTFY BTW, would this create a stack overflow? Running this 10000... Would this be better? const commandHandlers = { '/help': handleHelp, '/hello': handleHello, '/exit': handleExit }; let active = true; // begin REPL loop do { let command = askForCommand(); active = handleCommand(command); } while(active) function askForCommand() { return prompt('Enter command...'); } function handleCommand(command) { var handler = commandHandlers[command]; if (!handler) { alert('Unknown command'); return true; } return handler(); } function handleHelp() { alert('commands available: ...'); return true; } function handleHello() { alert('Hello!'); return true; } function handleExit() { alert("Goodbye!") return false; } 
 &gt;That being said, I wish there was a mode (like strict mode) that turned off a lot of that stuff now, for developers that don't want it. Google was developing something called “strong mode”, but it didn't work out and they abandoned it. But at least you can use linters: `for in` is rarely useful now that there's `for of`, `==` only makes sense when comparing to a literal `null` (to test for `null` or `undefined`, and so on. And when using typescript or flow, you can eliminate the remaining problems by always knowing if you're using e.g. `for in` on a plain object or array. Sure, something built into the language would be better, but at least during development you can make sure everything is sound.
Your first solution was a bit cleaner, you just need to prevent the event emit from messing with the promise chain. Either wrap the emit in a try/catch, or emit in a separate promise chain: doSomething() { let promise = doThis().then(doThat()); promise.then((result) =&gt; { this.emit("doSomethingSuccess", result); }); return promise;
What about other crawlers?
This is an interesting experiment with some cool results. Its a great academic exercise with some potentially valuable output. I don't think the practical application of these learnings is important though as there is not a significant distribution among the results and everything was around the 0.25ms range (excluding eval).
The only js hate I see is all in good humour and it's always from the old Java devs at work. Everyone else is starting to come around.
I feel like a heretic bringing Python syntax to this place :) I agree JS syntax can be more useful for many cases here, but I chose Python-like syntax because its easier to parse and handle (from the interpreter perspective), and also I felt like choosing the same syntax as JS would make users believe everything supported in JavaScript should supported in Adder too, so drawing the line between Adder and JS would be trickier.
You cannot hold someone accountable to invisible standards. If Crockford is being punished for breaking a code of conduct, that code needs to have been made public so he would at least have had the choice of willingly breaking it. What you think of Crockford and his comments are irrelevant. This replaces one hidden club (Old Boys) with another hidden club (My Feelings). It doesn't fix anything, it merely changes the nature of the problem. A secret committee made an arbitrary choice based on some people's personal opinion - isn't that what we're trying to stop doing? Furthermore, good luck drawing up a code of conduct that would have caught this statement in advance. "Balls". "Big boy pants". "Man up". "Life's a bitch". Also, I notice that in a lot of Crockford's talks, his default third person pronoun is the masculine "him/he", that's clearly going to offend a whole bunch of people, better make sure every speaker uses the full inclusive list. In fact, going forward, every speaker at every tech event should submit a written copy of their talk, in full, for review by a committe to make sure that no one will feel left out. Said speaker will of course then be compelled not to deviate from the submitted talk. I love how the people who think they're fixing the problem are making it worse, and can't even realize it.
Also, optimizations and deopts change from one VM (or version of a VM) to another. If your profiler says something is crazy slow, try to optimize. Otherwise my feeling is not to worry about it that much. Interesting experiment, though, because pure ES6 is pretty fast. In the past, new features added to JS (getters/setters, freeze) were dog-slow. 
I agree on that you would not do it like that. A REPL is more a thing you would do for a command line tool. You are in the browser so build a user interface :D. But probably this was for learning purposes. 
&gt; BTW, would this create a stack overflow? Yes, eventually this would overflow the stack. An engine which does tail-call optimization (TCO) should be fine, I think.
oh nice. didn't think about that. 
I would then say: // Wrap everything in an IIFE to prevent leaking to global scope (function () { 'use strict'; const commandHandlers = { '/help': handleHelp, '/hello': handleHello, '/exit': handleExit }; repl(); function repl() { const command = askForCommand(); const result = handleCommand(command); if (!result) { return; } repl(); } function askForCommand() { return prompt('Enter command...'); } function handleCommand(command) { const handler = commandHandlers[command]; if (typeof handler !== 'function') { alert('Unknown command'); return true; } return handler(); } function handleHelp() { alert('commands available: ...'); return true; } function handleHello() { alert('Hello!'); return true; } function handleExit() { alert('Bye!'); return false; } })(); I liked your solution of returning the prompt and handler result :D I think the stack will not overflow because A: in this usecase you'll probably not reach 100000.. + B: I think JS will clear the references that are not neccesary anymore. Ofcourse in a real world program for the browser you would just build a user interface which is asynchronous anyways.
Making a UI for this isn't too tricky either. It's really simple with flexbox and calc. https://jsfiddle.net/c3h824da/
Eh, not specifically a javascript problem... I believe the issue is that using PHP `$_POST` is expected to be a urlencoded form with content-type `application/x-www-form-urlencoded` You should really spend time reading the PHP documentation for it... &gt; An associative array of variables passed to the current script via the HTTP POST method when using application/x-www-form-urlencoded or multipart/form-data as the HTTP Content-Type in the request.
[touchstart, touchmove, touchend, touchcancel](http://www.creativebloq.com/javascript/make-your-site-work-touch-devices-51411644)
Perhaps a better way to solve this is to instead classify the sentence rather than understand what it's trying to say. If you have a limited number of commands and a large number of potential sentences you can build a classifier to guess which command is meant. Unigrams, bigrams, and POS tags are likely sufficient features. The difficult part is training because you need to know a good enough set of the types of sentences you want to support. Your classifer is likely to choose any sentence with "weather" as a request for the weather if you don't include negative cases as well. Otherwise, a quick approach would be to look at the words and their part of speech (POS) tags and build a classifier by hand. You might, for example, look for sentences that have "What" or "Tell me" followed by "weather" and interpret that as a request to get the weather. I've never use the API in your post but you may want to also look at [natural](https://www.npmjs.com/package/natural). Your API seems pretty high level but may have plugins to get lower level data (like the ngram plugin referenced in the readme).
my thoughts exactly. thanks. Software was the last meritocracy I knew of. 
thank you :)
Very good. I'm probably not helping those numbers by opening links in Reddit Is Fun's browser.
 Lets say I have a SPA, basically I initialise Electron and render my `index.html` which is the entry point for my app. Electron is just Chromium so you can basically run any web app inside. const electron = require('electron'); const {app} = electron; const {BrowserWindow} = electron; let win; function createWindow() { win = new BrowserWindow({ width: 800, height: 600 }); win.loadURL('file://' + __dirname + '/views/index.html'); win.webContents.openDevTools(); win.on('closed', () =&gt; { win = null; }); } app.on('ready', createWindow); app.on('window-all-closed', () =&gt; { if (process.platform !== 'darwin') { app.quit(); } }); app.on('activate', () =&gt; { if (win === null) { createWindow(); } });
Add this Eventlistener: document.body.addEventListener('touchmove', (e) =&gt; { this.moveImage(e) }) replace the x,y assignments in moveImage with this: this.mouse.x = e.pageX || e.touches[0].pageX; this.mouse.y = e.pageY || e.touches[0].pageY; Enjoy!
Ahh, okay thanks. Don't I still need to add it to my package.json?
No need to feel that way. I love the idea of a custom interpreter on top of javascript. So, well done! I agree, that probably a more JS like syntax would have given the impression of full access, yet the same could be said of a Phyton-esque syntax no? :D Now here is a thought: how about a way to define your own syntax :)
The number of loops is low to be easy to reason about the results. The results are pretty much the same increasing the number loops. I'd like to know what is broken if you can find it.
I think JS is usually "hated" on account of being "misunderstood". No one takes time to dig into why JS does the things it does and weak typing especially trips people up. Wtf?! Why did it do that! Worst language ever! Imma go post online about this! Rant rant rant. Once you take the time to appreciate and properly use these dynamic features, closures, the event loop, and more you can understand the power at hand. I think that is key in any language.
You're looking for a static page generator. You could try Jekyll (ruby based), hexo (nodejs), Hugo(based on golang) etc... they take a bunch of yaml files and compile them into static HTML and CSS files which you can host practically anywhere (including github pages). If you already have a running site and want to add stuff in a very customized way, try metal smith, it is very minimal and lets you build your own pipeline so you can tell the generator what to do.
Good point! Fixed now.
Javascript has nothing to do with classical inheritance, as it's powered by delegate prototypes... but I read the first lines of that Github repo: &gt; Now that JavaScript supports classes, ... That keyword is one of the worst things of ES2015 **IMO**.
People hate C? I have only heard of people fearing C, but never hating it. I highly respect people who can build complex applications in C
Would you recommend using something like this with just jQuery? Or would it be good to use React?
Makes sense. Thanks (both of you).
Or just call this.moveImage(e.touches[0]) and the original code should be fine. 
Well since no one I think has mentioned it yet I think the reason JS gets hate is because many developers feel forced to use it. Unlike the server side or even desktop applications, where there is a variety of languages you can use that fits your style or coding religion, many developers are being told they have to use JS and it pisses them off because it's different. But if JS was optional, then no one would hate on it because only people who enjoy it would use it. JS has some flaws too, one of the biggest is how the syntax appears like other languages, but the underlying implementation is wildly different. So a C# or Java programmer may come into JS and assume **this** works like a class method in that where it is **defined** matters, rather than in JS where it is **evaluated**. So JS works radically different than it appears, and when some PM tell a Java person to build a "dynamic frontend" they soon realize the language is more complex than they thought and they get pissed. Explaining Javascript is like explaining what Holland, the Netherlands, and Dutch are and how they're interrelated and also not always the same. 
Haha! I'm actually considering it. But already work on too many libs/frameworks at the moment :) But i would definitely let you know :)
thanks. Seems buggy tho, tried the pen on my iphone 6s. Do I need to do anything else?
Only tried it in chrome on a surface pro, ran smoothly. Might be that the mousemove and touchmove get in eachothers way and produce some unexpected behaviour?
I'm not trying to build a website. I am trying to build a desktop app that uses a GUI. I have stated this lol. I build websites using dreamweaver.
Do you think if someone does lots of early exits for incorrectly types parameters like if(!thing || thing typeOf !== "number") return Could be optimized to a function that only deals with float data types?
Thanks for pointing these, have fixed them. &gt;Line 150 references some otherwise unknown xmlns property that nodes don't seem to have. That is not a VNode but a props object, var NS = oldProps.xmlns; it will return undefined if there is no namespace defined &gt;only do the diffing but not the actual rendering. Yes the calls to native api's would be within the functions that are prefixed with the comments `calls native api's` but the said functions have not been written as of yet, it's still a skeleton of what every languages implementation will share where as those functions will probably contain Platform specific code(DOM, iOS, Android, macOS, Windows) But when that is in play the following code should render/patch the view // a text node var TextNode = Node(3, "Text", {}, ["Hello World"]) // an element node NavBar with one single child TextNode var ElementNode = Node(1, "NavBar", {state: "active"}, [TextNode]) reconciler(ElementNode, ElementNode)
Maybe have a look at the upcoming pointer events and this polyfill which will allow you to use it in browsers which don't support the upcoming standard (which means apples safari, mostly): https://github.com/jquery/PEP It makes lots of things easier 😉 
I think the main reason it's both loved and hatred is that it's both sparse in terms of its core and incredibly permissive. This means it's incredibly easy to pick up and do neat things with almost immediately. It's insanely flexible. Which is very appealing to human beings... but isn't necessarily a great thing for something meant to communicate with computers. All of this leads to a _tremendous_ amount of confusion eight-zillion ways to do the same thing, and then because of that, just a lot of really bad code that's very hard to maintain. I mean, a HUGE amount of any js devs time on legacy code is just spent figuring out why anything is written the way it was in trying to add a new feature or track down a bug. Most more formal languages fight you, forcing you to do things in a set way. That's not as enjoyable or approachable. In the long run, it saves a lot of time. But most JS code never sticks around for the long run, or is a matter of life and death... so...
Depends. For method arguments the best way is to not detect it. Check for the other options and if none of those match, use String(val) otherwise you could also check typeof val === "object" &amp;&amp; typeof val.valueOf() === "string"
I have been working on a multiplayer "io" game called RocketBlitz using all of the technologies you listed: https://rocketblitz.com/ It takes a lot of knowledge in a lot of different areas of game development. I have been making games for a while(https://bombsightgames.com for proof) and multiplayer games still manage to test my skills. If you do not have skills in game development I do not recommend you start with something this complex. Start with something simple like Pong and work your way up to more complex games from there. While you may be using the same language, web dev differs quite a bit from game dev and it will not be easy to jump right in to something that large. Feel free to message me about any game development questions you might have, I would love to help when I have the chance. :)
What do you mean by "analytic tools"? What are the requirements? What's the purpose? How should this work? Without any specific requirements this could be 5 minutes job - set up Google Analytics and paste the code, and done.
val.toString() === val
Curious where/when/how you're using string objects? I can't recall the last time I ever encountered one in the wild... For academic purposes though... do you have to worry about `null` and `undefined`? If not, you can do: typeof val.valueOf() === 'string'; Otherwise, /u/METALz's [answer](https://www.reddit.com/r/javascript/comments/56o6a9/what_is_the_most_elegant_way_to_check_if_a_value/d8l0tww) is probably the most robust (it handles `null`/`undefined` without issue).
I think he was asking more about the requirements that would be set forth by your job and the results required in the product. Like... - How much data and what kind of data are you developing this product around? - Is it small or large datasets? - Do you need a server to process this data? - Can you do data processing online? - Is it daily dumps of data? Streaming data? - What is the end user's interface supposed to be like? - Is it interactive? - Is it embeddable? - Is it a dashboard? - Is charting a requirement? Or is everything a grid? - Do users add data to a system? - What's the timeframe allowed for development? Once you start answering these questions, it's always good to look for open source alternatives before going down your own path. If somebody has done these things, there may be no need for you too. Sure you can get involved with those projects if you wish, but save yourself the headache and your boss, his money. So once you've answered these kinds of questions and looked at alternatives like [Elasticsearch/Kibana](https://www.elastic.co/products/kibana), or even commercial projects like [Tableua](http://www.tableau.com/), then make a decision.
It is generally pointers to structs, However, in the case of things like numbers, it is stored and passed around as values. In the case above. inc would probably be optimized away all together. because inc isn't used as a number, (not really, the values are thrown away), the optimizer will very likely change the whole thing into just let inc = "jan michael vincent"; As for the changing types, type information is stored and carried along in the struct. Not much more to it than that. Nothing really cares about what the previous type of the variable was. In fact, interestingly enough, most compilers (and I don't know if the JIT does this or not), use what is called SSA. Essentially, internally it represents all data changes as simply introducing new variables. The benefit of doing this is that it allows for a lot more optimizations. It is easier for the compiler to mutate the code into patterns it recognizes and then to generate optimal code for that. https://en.wikipedia.org/wiki/Static_single_assignment_form *edit* after briefly combing through the wiki article linked to make sure I'm not spreading misinformation, it looks like the javascript jits are using SSA internally (both V8 and Spidermonkey).
Phaser!
There is no more nexts of `getConcordFromGen`. You have one `yield`, and after that, its done. Nothing else happens when you reach the end of the iteration; there's nothing more to do. If you want to log the all the values, simply call `console.log(value);` in the loop instead of going through `getConcordFromGen`. I'm not quite sure how you're expecting `*gen` to function here. Maybe we could use more info about what you're trying to accomplish?
Awesome, thanks for filling me in!
It's dark in my room and I need to change the lightbulb. "OH MY! let me tell you about track lighting. Let's rip out all the old lights and replace it with this!"
really cool game!
I don't think you get what I'm saying. You're referring to the native onclick event handler. I'm referring to wiring up the click event from the template via angular 2 syntax. (click)= and on-click= both tell angular to wire up a click event. The first is called "syntactic sugar". {{expression}} [target] = "expression" bind-target = "expression" The above three are all the same for binding in one direction (from the data source to the view). (target) = "statement" on-target = "statement" These two are the same for binding from the view to the data source. [(target)] = "expression" bindon-target = "expression" And these two are the same for binding bi-directional. The syntactic sugar is easier to scan, in my opinion, to differentiate what's going on in the template. It's also shorter. The same goes for the * template syntax. When you see an *, you know the template will be modified, but you don't have to use it if you don't like. &lt;hero-detail *ngFor="let hero of heroes" [hero]="hero"&gt;&lt;/hero-detail&gt; The above can be rewritten to: &lt;hero-detail template="ngFor let hero of heroes" bind-hero="hero"&gt;&lt;/hero-detail&gt; or, even better, you can take advantage of the html template tag: &lt;template ngFor let-hero bind-ngForOf="heroes"&gt; &lt;hero-detail bind-hero="hero"&gt;&lt;/hero-detail&gt; &lt;/template&gt; 
I thought that Java thing was a joke title, so disappointed :(
I don't understand what your situation is. Node should always just be 'node' from the cli. 
Except it isn't. On most ubuntu builds it runs under nodejs.
You don't want two equal signs. This is an equality test irregardless of type. &gt; "1" == 1 // true The catch, as you alluded to in your with description, is that using new creates a brand new object. Personally, I prefer toString() because it doesn't use an object. It just gives you a string literal, but if you absolutely have to support new too (not sure why you would, but whatever) then try something like this. &gt; val.toString() === val || val.PrimitiveValue === val.toString() That will work for ("" + ... ) or String(...) or new String(...) ---- I'm the first person to say it's not as "cool" as some of the other options, but it's readable. 
If I type "node" into the console I get: The program 'node' is currently not installed. You can install it by typing: sudo apt install nodejs-legacy When you install nodejs it's just sudo apt install nodejs My impression is that there's a naming conflict somewhere in the various repos that creates this problem, but now that I'm looking at it I can find no source for this.
I agree with you. I'm not asking for advice, rather I'm interested in discussing elegance. You can't write a line more elegantly than to not write it at all.
Oh, that's very interesting! I didn't know that was possible. I will explore this and play around with it. Happy to accept a PR as well. Thanks!
You do want to use the touch* events to do it yourself. That said, if your app is going to need more in-depth support I'd recommend [hammer.js](http://hammerjs.github.io/). There's a good 3200 lines of helpful code in there.
Not sure if i fixed it now, hehe
No, it really isn't. I'm running Kubuntu 16.04 and Linux Mint 17.2 Rafaela. Neither of these will let you use node as the command for nodejs without special setup. My friend runs ubuntu mate. He also has this happen. In fact, Ubuntu main also has this happen [according to DigitalOcean](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04) &gt; Because of a conflict with another package, the executable from the Ubuntu repositories is called nodejs instead of node. Keep this in mind as you are running software.
You could just give each div a different class name that way it doesn't animate ever div element at every interval
&gt; all the divs get moved because im selecting all the divs with $('.attacking-door'). This isnt what i want. Then don't do that. Select only the door you are interested in. Or don't select it at all, and just keep a reference to the element when you create it.
This is what my server is running: Distributor ID: Ubuntu Description: Ubuntu 16.04.1 LTS Release: 16.04 Codename: xenial This is a link to my server setup guide that I did just a few months ago: https://docs.google.com/document/d/1J2o6Lmq00Lk3k3HPUVKnOvSKaIp-S6NPu8VPdsUSR8k/edit?usp=sharing The relevant part is installing node. Official node version is behind latest release. This uses a ppa from NodeSource curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - sudo apt-get install -y nodejs Using "which node" and "which nodejs", we find they share the same directory /usr/bin but are different paths. You can also see where the binaries are using this: :~$ ls -la /usr/bin/node* lrwxrwxrwx 1 root root 22 Jul 22 00:15 /usr/bin/node -&gt; /etc/alternatives/node -rwxr-xr-x 1 root root 24013664 Jul 6 19:49 /usr/bin/nodejs :~$ /etc/alternatives/node -v v6.3.0 :~$ /usr/bin/nodejs -v v6.3.0 So at least installing the way that I researched in July, whichever node/nodejs command you use shouldn't matter.
Just install nvm and never worry about this again. Just do 'nvm install 6.0.0` and boom, node -v gives you 6.0. 
Actually what you could do is just give the div another class such animate and remove that class after the animation
Uhh. I don't know Norwegian, and I'm not sure of your intentions by looking at your code, so I'll just base my response upon this: &gt; make it display all the numbers and amount of them ... look something like this: number amount number amount I just iterate through each element of a sorted array, counting how many of each number I come across. As soon as I find a new number, I console.log the old number and amount, and start counting again. let array = [7,7,8,8,9]; let numberToCount = NaN; let amountCounted = 0; /* notice I'm cheating a little here by iterating through length+1 items. The last iteration calls console.log and then attempts to count 'undefined's!*/ for (let i = 0; i &lt;= array.length; i++) { if (array[i] == numberToCount) { amountCounted++; } else { if (!isNaN(numberToCount)) { console.log("There are " + amountCounted + " of the number " + numberToCount + "."); } numberToCount = array[i]; amountCounted = 1; } } or, to avoid the odd isNaN check, this might work better: let array = [7,7,8,8,9]; let i = 0; while (i &lt; array.length) { let numberToCount = array[i]; let amountCounted = 0; while (array[i] == numberToCount) { amountCounted++; i++; } console.log("There are " + amountCounted + " of the number " + numberToCount + "."); }
But the animate isnt the problem here. Animate is working fine. What the problem is, is that i need it to spawn in random locations in the div container with the proper css but if i give them a class, all the other divs move since they have the same class.
Could you post your problem on jsfiddle so I can see it?
Ahh i normally hate jsfiddle but i got it to work this time. This is pretty much what i get: https://jsfiddle.net/asoy4r03/
&gt; add those to a new array in which i count the number of elements/numbers and then display them all Why do you need to add the numbers to a new array to count them? Also, I've edited my post, just FYI.
Yep. Please fix that formatting, OP. Code indentation is supposed to be helpful, not confusing.
formatting might be off im not used to reddit :/
If agar.io was your original inspiration, you may find this tutorial to build an agar.io clone interesting: - Pt1: https://www.youtube.com/watch?v=JXuxYMGe4KI - Pt2: https://www.youtube.com/watch?v=ZjVyKXp9hec And I believe pt3 is forthcoming.
building your own analytics tool is is a fairly stupid thing to do if you dont have full knowledge about the infrastructure and how to do it. depending on your product you will quickly have data of multiple hundred gigs on your server. your server must be able to withstand thousands of analytics requests. go with GTM and configure it properly. the end product will be much more helpful for your company in terms of maintenance, usability and scalability. and cost...
I hadn't checked out any books related to this, but from a quick search found a [Udacity playlist on youtube](https://www.youtube.com/watch?v=i3n-BZ2UHO0&amp;index=1&amp;list=PLAwxTw4SYaPlUUkh6txMRXE-w-6N1Z225) that might help with some foundations in this area.
thanks!
I wrote a library a whole ago called t7 – https://github.com/trueadm/t7 (back when template literals were new). There have been many similar libraries that do the same sort of thing but I do have to warn against something: native tagged template literals are insanely slow (about 15x slower than the Babel compiled equivalents in the latest V8 and even worse in other engines). There is some good news though, I've spoken to the V8 team, and asked if there was any future attempt to optimise them and they might commit to improving them. For now, I'd advise against using them in production if there's any desire to have decent performance.
I would do it this way https://jsfiddle.net/ccnb322a/1/ Do not use "animate" from jquery, prefer "transition" CSS property (you can set width only instead of "all"). The setTimeout with 16ms delay is to add the class on the next frame, after the DOM element has been rendered by the browser (if you directly add the class with final with-height it won't works). But to do a "game" you should prefer canvas 2D (engine or not). Keep coding ! :p
What are you trying to do here? Is this some kind of counter for how many time user gave number between ? - 9? Your input does not have min value or steps. At least there is problem with you companies **inp[i]** and **numList[i]**. I think you meant inp == numList[i]. inp is int not array.
This might be a problem as well... But when i remove the int the output still gives me : Element nr 4 is 0 Element nr 3 is 1 Element nr 4 is 2 4,3,4
I'm still not sure what you want to do. But if you want to calculate how many time user inputed x number then try following. Remove following lines. var counter = 0; numList.push(intxt); for (var i = 0; i &lt; numList.length; i++) { if (inp[i] == numList[i]) { counter++; } txt += "Element nr " + numList[i] + " is " + i + "&lt;br/&gt;"; Then replace it with: numList[inp] = numList[inp] + 1; txt += "Element nr " + inp + " is " + numList[inp] + "&lt;br/&gt;"; Instead of storing counter inside numList you are always pushing new text **numList.push(intxt);** into it. So if user inputted number 1 3 time you will have following array **numList** ['1', '1', '1'] instead of of [3, 0, 0, ... ].
I made a PR. Also thought about it some more, actually the decorator is just the default export, which is nameless by convention and can be named anything really. It should be completely fine to add this scenario to the docs, should you decide to use it. It just makes sure postCSS and syntax highlighting doesn't break down.
i cant get it to work. The frustration is getting real after hours of not getting it to work :L. Mind helping me out a little more ? 
Is this LOLPHP? This is in fade.php class FadePaid { private $opacity=1; public function __construct() { $start = time() + (7 * 24 * 60 * 60); // default next week, change to what you want $end = $start + (7 * 24 * 60 * 60); // default a week later, change to what you want if( time() &gt; $end ) { $this-&gt;opacity = 0; // YOU ARE TERMINATED } elseif( $start &lt;= time() &amp;&amp; $end &gt;= time() ) { $this-&gt;opacity = ( $end - time() ) / ( $end - $start ); } } public function getOpacity() { return $this-&gt;opacity; } } Tell me... How can `$start` *ever* be lower than `time()`? It's always next week... from now. **Update** ow I see, the Javascript is a port of the same code so it has the exact same problem.
I've been in situations like this. I've never actually deleted a clients site before, but I have taken it offline before. It's tough to be ethical and just leave it up and spend the many hours taking them to court when you can just 'break' their website and they pay in the next 24 hours. Generally the only reason to do this to clients is if they continue to show that they won't pay.
Taking it offline is very different to being a dick about it, you can just put a notice up saying site suspended like any hosting company - for example - would do if you didn't pay.
Just why...
I think Pong is a great starting point too. May I ask you 2 questions? Would you put the game logic (collisions etc) on the client or the server? How do you keep your clients in sync?
Are we going to argue authorial intent in a programming language forum? Is this really it? The moment my humanities degree finally means something?
Given that it's a library that supports two programming languages, one of which is the main theme of this subreddit, then why not? /u/foxhall had a question, tongue-in-cheek or not, that I answered.
Well I think that we can only understand libraries within the historical, cultural, and technological context in which they are written. Furthermore, I believe that we should view the entire corpus of the repository as the work, rather than accepting it as a series of versioned 'releases'. The problem-solving traditions and architectural style that has arisen amongst the programmers who develop co-linguistically with JavaScript/PHP provide a rich context in which to examine this library, even as a side project. We must especially seek to understand the attitude towards unit testing within the author's localized tradition, because we can infer a great deal from the coverage and poignancy of the tests. In general, by comparing the evolution of the code to contemporaneous work, we can derive an understanding not only of what the author believed he was articulating but the greater social and historical forces underlying the development of the library.
Thank you, it still has a long way to go haha.
Ha!
Well when I said start with Pong, I meant singleplayer only. You have to take baby steps with game dev. That being said I obviously can't stop you. Unless you want the game to be hackable all logic will have to be on the serverside. The client acts as just a way to render data from the server. In my case with I send around 20 "snapshots" per second to the client. These snapshots contain all positions, rotations, and entity states from that timestamp. I interpolate these positions on the client side so the user never notices I'm sending less data than the fps. Here is a good resource I used: https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking
If the client didn't pay their electric/water bill, they would get several warnings and then a shutoff.
why wouldn't it be
It doesn't matter the order, I don't think. But if you want to learn ReactJS than do it! :) Don't go off on a tangent and learn something that you're not interested in or won't really help you.At the moment React's the big hotness, I'd vote for it. Learning things like redux and flux will come with it but it's worth the learning.
Oooo. How did you do this?
I leave a big ass full site note about not paying for website when not paid for a long time. Works as a charm.
That's because you are supposed to change those.
I've only started part of the client which is the menu and the GUIs, so now I'm just trying to see where I need to start looking to be able to build the actual game, from this post I learned that I need to start small, then working my way up, like making it offline then to add networking, but I'm currently learning more about htm5 canvas and game creation, still would appreciate new links to tutorials or books. Link: http://sperms.io/
Yeah. Why fade out body when you can start randomly redirecting to a competitor. Each day the probability to be randomly redirected goes up. Also make sure the client is always redirected to something gory. Unless they are into that sort of thing, and in that case redirect to cuddly puppies. 
Because it can be replaced by a single function
I code C# every day. ... Shit
Listen kids. Just in case someone thinks it's ethical to shut down a website. There is a thing called "legal system" which is used to solve things like that. If you mess with your client against the contract it makes you accountable for the damages. Of course if it reads in your contract that the site will have opacity in range [0,1] depending the money paid, that's another thing completely. The moral of the story is you really do not know why the client has not paid, perhaps their own client has not paid their bills, maybe they have temporary cash flow problem and will pay next month, who knows, maybe they are just evil, but the only money you'll ever get is from that business. The best bet getting your money is to not to disturb your clients business as long as possible so that they can eventually pay you - it may take year or three, but if you are persistent you will get something. You can send a debt collection agency or lawyer after them, but if you shut down their business only because you can, it helps nobody but may put you responsible of the total damage caused.
Yeah, the code is pretty naff. Pretty jokes idea though!
Im pretty sure if you dont pay your car monthly bill, after a couple of warning statements, they will just take it back. 
Did you miss this awesome snippet?? const a = 'a'; const props = { b: 'b', c: 'NOT C' }; const moreProps = { d: 'd' }; t7`&lt;div a=${a} b='NOT B' ...${props} c='c' ...${moreProps}&gt;&lt;/div&gt;`; // =&gt; div will receive { a: 'a', b: 'b', c: 'c', d: 'd' } What the fuck is going on?? This would be a nightmare to maintain. It makes no sense.
&gt; YOU ARE TERMINATED Such badass-ness.
Shorter solution: &lt;?php $paymentDueDate = new \DateTime('2016-10-01'); $daysSincePayment = (new DateTime)-&gt;diff($paymentDueDate)-&gt;days; ?&gt; &lt;body style="&lt;?php echo 'opacity:' . (100 - ($daysSincePayment &lt;= 100 ? $daysSincePayment : 100)); ?&gt;"&gt;
I am not sure what you are trying?? can you please elobrate so i can finaly help you here
True, but the lender's right to repossess is written into the terms of the loan. Unless you've written that into the contract you hopefully signed before you started work for the client, they could come after you for damages if you shut off their site without warning, even if they failed to pay.
That's called extortion. It may work, but it's not strictly legal. Edit: &gt; the practice of obtaining something, especially money, through force or threats Downvoting me won't change the meaning of the word. Someone didn't pay you? Go through the proper legal channels, rather than taking actions that could directly impact their business or reputation in order to force their hand.
Yeah ... This is an awful mess, too! I wouldn't even recognize it as something even loosely related to any type of templating system.
So write it into the contract. Still, I don't see how it's unprofessional. All services (your utilities, health insurance, car insurance, lawn service, etc) will cut off service if you miss several months of payments.
And if you have in contract that you are site owner until fully paid? It's yours, you can do whatever you want with it.
r/pettyrevenge
For me, I think Typescript, when I think of the features that JS should have. I know not all devs are fond of them, but I find Traits, Interfaces, and Typehinting useful and think JS would benefit from having them. Also, the ability to include and autoload other classes/modules would be useful.
Rather than selecting every element with the class each time, you can either select them by their ID (not as good, means you need to store a list of IDs) or keep a reference to them when they're created. In that example I create an element with var ship = $(document.createElement('div')) and then added the class, positioning CSS and click handler directly to it. If I needed to do further actions on the ship, I'd return it from the 'spawnShip' function and use it later on.
Hi /u/princeabc1 , this sub is for Javascript, not Java. 
[What does *if-meister* mean?](http://codepen.io/anon/pen/xEWBaW?editors=1010)
why? they are useful and enabled by default for a long time
`_.isString(val)`
[Minesweeper rendered in VueJS 2.0](https://github.com/JohnathanWeisner/minesweeper-vuejs2) I'm new to VueJS (This was my first use of it) But it was fun and relatively trivial to hook up my minesweeper game with it. Edit: I'm sharing less for the game more for the code. I think the code is rather pretty.
I use the Boolean object sometimes. For example this is common in the JS community `!!expresion` to cast to a boolean, I prefer to do `Boolean(expresion)`. I think it's most readable. With the String object though, I don't think I have ever needed to use it and I would advise against using it.
I agree. It has been years since I wrote PHP but as far as I remember it was the preferred way to write PHP in templates.
That's because you are familiar with `!!` but not all devs are. Imagine coming from another language looking at the code and seeing `!!expression` vs `Boolean(expression)` which one you think is easier to understand? Not trying to form a debate in here, at the end everybody is free to use whatever they think is better :)
If you know that there are falsy and truthy values, you can figure out what "!!" means. For Boolean(whatever), you have to read the docs. It might as well be one of those constructor functions which work the same when `new` is omitted. Anyhow, I wasn't talking about this. I was talking about using those wrapper objects. &gt; !!new Boolean(false) true &gt; new String('foo') == 'foo' true &gt; new String('foo') === 'foo' false They suck. They don't have any use except for giving the "methods" of primitives a home.
Or you can use the and operator: var b1 = Owner2FirstName != null &amp;&amp; Owner2FirstName.toLowerCase();
&gt; If you know that there are falsy and truthy values, you can figure out what "!!" means. That's the problem. Why would I need to figure out anything. I just want to read the code and understand what it does right away. &gt; Anyhow, I wasn't talking about this. I was talking about using those wrapper objects. That's what I said. I would advise against using the String object, but in other cases, for example the `Boolean` one makes sense to make the code most readable, again, in my opinion, I can see why a lot of people would prefer `!!`.
&gt; the Boolean one You aren't creating an instance of that wrapper object. You're using that constructor's obscure secondary function.
&gt; "Any headline that ends in a question mark can be answered by the word no." https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines 
I recommend to not produce any "null" values if you can avoid it. Any null you create has to be checked at least once. If those values are coming from inputs, they should be empty strings ("") which would work fine. So, why are they null?
Think I'll be more blunt and go down "if payment isn't received upon the respective deliverables, then any customer-facing products can be disabled without warning."
I liked your solution.
Your friend needs a better lawyer, it seems to me. UCC under, I believe section 2, states that goods or services can be revoked without warning if the contract isn't fulfilled.
Using a tool like this isn't the solution. That said - client excuses for not paying invoices shouldn't be tolerated: 1. Your own client has not paid their bills? Fuck you. Pay me. 2. You are having a temporary cash flow problem? Fuck you. Pay me. 3. You are going to pay next month? Fuck you. Pay me. This is taken from a talk by Mike Monteiro: https://www.youtube.com/watch?v=jVkLVRt6c1U 
I see what you mean. Yep, you're right.
I see what you mean. Yep, you're right.
There's no direct way, but you can do something like this: str.split(' ').map(function (substr) { var x = substr.toLowerCase(); x = x[0].toUpperCase() + x.slice(1); return x; }).join(' ');
It's at 1 now again. But I simply don't understand it. It's a working solution. And it is no post that is not contributing to the discussion. So there is no need to downvote the post. (To be honest it's not an outstanding post so there is no need to upvote it, too.) If there is something fundamentally wrong with my solution telling me what I made wrong would be much better than simply downvoting the post. By downvoting no-one learns anything from the mistakes.
People are assholes. You'll have to learn to just ignore the idiots that downvote anything they don't like, understand, or agree with. They have no clue how to be helpful or have a conversation.
I personally believe not working with shitty clients is best route, but my former nickname was Killswitch, not only because I was listening to Killswitch Engage when I created it, but also because I wrote kill switches into software I created for very dodgy clients of mine, for this exact reason. Granted I worked in the porn industry that was rife with shady people. I've used the tactic a few times, always resulted in quick payments and apologies. Never hurt my future or current clients either. Typically because they'd ask why I took the site down, I would explain and they'd agree.
There's zero reason for it to be a class. function getOpacity() { $start = time() + (7 * 24 * 60 * 60); // default next week, change to what you want $end = $start + (7 * 24 * 60 * 60); // default a week later, change to what you want if( time() &gt; $end ) { $opacity = 0; // YOU ARE TERMINATED } elseif( $start &lt;= time() &amp;&amp; $end &gt;= time() ) { $opacity = ( $end - time() ) / ( $end - $start ); } return $opacity; }
You have static methods/classes, the class just becomes a namespace if everything in it is a static method.
Thank you for resonating with me :)
To be fair, Rust seems pretty awesome.
Thank you. ITT: People who will never get paid for their work
This is awesome, although I'd need it to use jquery, as I'll have to select my selects by $('select[id^="selele-"]') where they'd be named like selele-1, selele-2...
Regular expression search and replace should be able to do this. 
Legally it can take up to a year or two to evict someone, FYI
On touch devices anything that triggers touch events also usually simulated mouse events as well so you may have to be careful not to double up your event handling
&gt; I'll be honest, it doesn't feel like satire. Did you see it get cross posted to /r/programming and get 2,869 upvotes? The highest post (600+ upvotes) is basically agreeing. There is a real feeling that this is a problem, so maybe my choice of "trolling" was extreme. I don't feel like it's satire either, though. I'm not understanding your point here. I read the comment that has 700+ upvotes in that cross-post, and it's basically acknowledging how hard it is to determine which framework/library is necessary if you aren't an expert in low-level javascript and how the libraries actually work under the hood. As silly as it may sound on the surface, this is a real problem IMO, and the article uses satire by exaggerating a real issue. You can have your own opinion and reasons that attempt to explain why this is silly and isn't an issue, and you can give your opinion on how to easily solve this problem. But at the end of the day, I think the upvotes and the attention this article is getting clearly shows that it resonates with a lot of people at a deep level, and it is a real issue for a significant amount of people. 
Fuck you, asshole.
*regardless
I have no problem with people downvoting on opinion in entertainment subreddits or on subjective posts within discussion threads. But I can’t stand people downvoting objective content in technical subreddits instead of giving constructive criticism.
[removed]
Surprised I had to go down this far to see this.
Oh wow... I don't know how I missed that. Thank you!
It might not have been his server..
It might not have been his server
Hi /u/bevacqua, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
OP said he signed in using his credentials though.
That's not true. If they haven't paid you, they don't own the site. Its like me parking my car in your driveway. Its still mine unless you pay me for it.
That depends on the contract. Obviously this one was not written in a way that allowed what he did. I'm just saying that it may seem obvious that you can shut them down, but it's not legally automatic. Also, if I have something you own, and you break into my house to take it back, that's still breaking and entering, and a crime.
Very cool and an interesting use case. What inspired this project? 
They may not be in ownership of the files, but if they own the server, then accessing it to delete the files they didn't own in and of itself would very likely be a violation of the Computer Fraud and Abuse Act. Even if the company had provided him with a login which could delete the files, they had not explicitly granted him permission to do so. Accessing the system with the provided credentials to do anything you were not supposed to do is "exceeding authorized access" per the wording of the CFAA.
gonna assume the answer: depends on how many development programs you want between your code and your product.
There's different laws for landlord/tenants versus work/contractor. You can squat for 6 months without paying rent in New York City and that's in place because the city doesn't want a bunch of homeless people who had a bad couple of months.
It could be argued, yes. Hacking laws are extremely restrictive however, and if the contract didn't make ownership 100 % clear, the argument falls flat.
i got the zeit geist. 
I'm confused, the instructions told you to install `nodejs-legacy`, but you chose to install `nodejs`, why? Just install the package they told you to install and you won't hit issues. The same goes for your end users.
Exactly this!
Dumb.
Great! Though... you don't ever *need* to use jquery. JavaScript has the querySelector method. Like this: `document.querySelectorAll('select[id^="selele-"]')` That returns an array like html collection of all the matching elements.
This is why all of my customers are lucky enough to have me host their solutions at virtually no cost. :) 
The code will probably save a bunch of guessing
Same here. Much easier to keep it all under one roof
Symlinks fix this: sudo ln -s /usr/bin/nodejs /usr/bin/node 
Use class not id. var highlights = document.querySelectorAll("span.highlight"), hlBtn = document.querySelector("button"); //querySelectorAll returns an array-like collection of html elements //you can loop over these elements just like with any old array function highlight () { for (var i = 0; i &lt; highlights.length; i++) { highlights[i].classList.add("highlighted"); } } hlBtn.addEventListener("click", highlight);
Sorry. For the most part I'd been going off what my prof said. He seems to have been *very* misinformed.
&gt; "long life" and "long term support" Wow apparently that means less than one year to the Angular-Material team. Sad. Doubly sad since Angular 2 is so different from Angular 1.
You also can't get progress events
Maybe I don't understand your problem. At the end of the day, you need to run some command that is linked with some binary / executable. Whether it's nodejs or node or jomama, if it points at some binary, then that's what will execute the program you want to run. If you use nvm, it will automatically install the binary linked with "node". Again, maybe I misunderstood the spirit of your post, but it seemed like you were having issues running node with a single command.
I think that's definitely part of it. I think the hate is misdirected, though. Nothing is forcing people to use JS out of the box. There are plenty of JS frameworks and languages that transpile to JS. Hating on JS for being sparse and permissive is like hating on C for being sparse and permissive.
This is a known cygwin limitation that I have suffered with for a long time. The origin of this (from 4 years ago) is here: https://cygwin.com/ml/cygwin/2012-08/msg00062.html For some reason, the developers won't simply have ctrl-c kill the running process.
On week 3 of it. In my opinion yes, I have started learning Javascript a few times over the past year but the path I took was the problem. Drives in those fundamentals that normally are skimmed. Let's say some codecademy stuff can be quite vague. But with the jsissexy curriculum you pair that skimming with book exercises. My retention went up tenfold from my previous tries.
Only hackers use gnu/linux.
How is it better to add intentional bugs to your code? Then you just seem like a shitty developer...
i like that the repo has 69 additions and 69 deletions
Thanks for addition. That's right, &gt;&gt;&gt; operator is used to convert the length property of the array, or array-like object to the 32-bit unsigned integer. It automatically handles null, undefined and not-a-number values, i.e. null&gt;&gt;&gt;0=0.
Fortunately for me it's not on the web end. He was trying to do regular expressions and state machines, and figured javascript would be fairly good for that. It also helps that I've been trying to port a networking project of mine from Python. Nearly ready for its next beta release, so that's fun. This question came from me trying to make a makefile that could run all of my tests.
[Fuck you, pay me.](https://creativemornings.com/talks/mike-monteiro--2/1)
Tenant just hasn't been paid for their webdev work...
Haa, the things you find out :)
[Minesweeper-Demo](http://minesweeper-demo.herokuapp.com)
true.. Thought it would help. 
Raised my existing deep appreciation for polyfills, but what then happened, due to the first responder's link, is that I actually read through the whole mdn page on bitwise operators, which is super timely cause I've started watching a lecture series on discrete math (which I very much recommend, the instructor is Shai Simonson and it's on YouTube), and boolean logic and algebra are the main topics at the moment. This stuff is not just fascinating, it's core CS functionality. My mind is blowing up! That being said, if anyone knows of a fun article about flags and masks please link it, I'm interested in seeing some concrete examples. Cheers!
Hi! I absolutely agree that the bitwise operations is super-intresting area of the CS. Here is one interesting resource : https://graphics.stanford.edu/~seander/bithacks.html That would be a great achievement if you master all the tricks listed on this page :)
You need to set a variable to the return of setInterval. On mobile so excuse any formatting mistakes: `const timer = setInterval(fn, 1000); clearInterval(timer);` In your code you're calling clearInterval on the testing function. Edit: fwiw it looks like setTimeout is what you're looking for, not setInterval - they both work the same (except setInterval loops) so your code doesn't need to change except for those.
Yeah and there's a bounty! Haha thanks!
It's pretty frustrating. 
change $("document").keypress(function(){ to $("body").keypress(function(){ then change $("#quote").html("quoteArray[number]") to $("#quote").html(quoteArray[number])
Oh my, hurtful comments from a troll. I'm crying. Reported.
What version of D3 are you using, after 4.0 it changed to d3.scaleLinear() insted of d3.scale.linear()
here is the full list of all the [changes in 4.0](https://github.com/d3/d3/blob/master/CHANGES.md), if you come across something like this again look for it in this documentation 
[removed]
It's just like passing any other value function myFunc(myArr) { var myInt = 0; for (var i in myArr) { if (myArr[i] &gt; myInt) myInt = myArr[i]; } return myInt; } var myArray = [ 1, 2, 3, 4, 5, 6, 7]; var result = myFunc(myArray); console.log(result); //&gt;&gt; 7 
Interesting that most of the articles about es6 that I come across describe destructuring.
I've found that it works well when used like this: Promise.all([ asyncGetColor(), asyncGetName() ]).then(([color, name]) =&gt; { })
I found this really useful while I was at University. It was a great for trying things out and keep loads of small projects accessible anywhere. Although I never used the paid option, it can get quite slow on the free container and I had a lot of problems with NPM installs sometimes - this could probably be attributed to my lack of knowledge at the time. I'd highly recommend it though. It's also great because you can host and link someone a page with a prototype or small project that you made. 
Thanks for the response. I'll have to look into that. I'm just really getting frustrated using basic PHP/Javascript to get it working properly. Socket sounds like a good solution
When you're starting a new project of suitable size and complexity it is a good assumption that you will need a lot of these tools. An experienced developer will be able to anticipate certain needs, like adding a data architecture layer on top of React or supporting unit tests with line coverage reports, and using Webpack to develop and build your production code. In this case it can be useful to find a rock solid starter kit which implements the basic tools so that you can get starter building your application more quickly.
React won't solve your Ajax calls, it will only structure your app for maintaining your data on the views. It won't help you with animations either, but will keep the state of your components clean and effective. If Vue2 is solving these problems, Go for it!
Yep, that's how I wrote all my `Promise.all().then()`'s when using Coffeescript. There's always `Promise.all().spread()` as well, but I continue to use destructured `.then()`'s out of habit.
So everyone has settled on the fact that Javascript isn't going away and can't be improved so they just start making compilers for Javascript? Why doesn't anyone balls up and actually kill JS like they should? I mean they killed flash, why not kill something that actually is horrible, instead of killing something simply because you can't control it?
https://xkcd.com/927/
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3629 times, representing 2.7823% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d8ne6wj)
 var grades = [ "Enter your first grade", "Enter your second grade", "Enter your third grade" ]; var total = 0; for (var i = 0; i &lt; grades.length; i++) { total += parseInt(prompt(grades[i])); } total = total/3; if (total &gt;= 80) { alert('Your average is ' + total + ', that is awesome!'); } else { alert('Your average is ' + total + ', you need to practice more.'); } EDIT: forgot the average, added.
First off, happy cake day! Hope you get lots of alcohol. Secondly, I really appreciate it--but how do I get the average? It seems to just be adding the three grades. edit: saw you said you added the average, but it still doesn't seem to average edit 2: my bad, it's averaging but it's alerting the sum of the grades. I can just remove the alert of the average though.
From a [commenter on Hacker News](https://news.ycombinator.com/item?id=12685158): &gt; &gt; Yarn, a collaboration with Exponent, Google, and Tilde. &gt; &gt; Multiple big players investing in this package manager means that we should maybe inspect a little bit more before chanting xkcd.com/927. 
[Web Assembly](http://webassembly.org/) is coming, but I doubt JS is ever going away.
Haha thank you &amp; my bad forgot about changing the alert's at the bottom. Fixed it for you
Phasing out Flash was only possible because alternatives started to pop up (video, audio, canvas, SVG, ...). Adding a separate VM won't happen. Google tried it with Dart, but they gave up on that idea. Having two VMs interacting with the DOM is a massive pain in the rear. So, Wasm and to-JS languages are the only viable alternative. Everything is compiled to ES6 modules and you can freely mix and match them. Sounds quite nice on paper. I think this direction will turn out alright.
You're awesome internet person, thanks a million.
 &gt; Math.max(...[5, 2, 99, 1]) 99 Thehe.
&gt; I learned something new too! for ... of Yea, don't use for-in to iterate over arrays. You won't necessarily iterate in order and any enumerable non-integer property will be also included. See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/statements/for...in#Array_iteration_and_for...in Use for-in for objects and for/for-of for arrays.
As I understand it, both are OK, the main difference is if I'm familiar with JSX or not (I'm not). As far as I saw, Vue seems easier to use/understand to me (templating seems more English than JSX). I dont see any obvious facts that would makes me pick one or another on the performance side, it merely seems that it is a matter of habits etc. And as I've never tried Vue nor React...
Any idea if hosting a private registry with yarn would be easier than with npm?
It doesn't guarantee you that it will become anything close to mainstream.
&gt; At Facebook we're already using Yarn in production, and it's been working really well for us. + tilde and google is a hell of a sell, goddamn. 
From just reading the linked announcement blog post it seems more a question of "whyever would you want to use npm directly?" Of course there might be reasons, but after this article it doesn't look that way.
About half a year ago, I gathered links to the documentation on Javascript in Adobe Acrobat; the PDFs that FoxIT creates will follow one of these versions of Acrobat: https://www.reddit.com/r/javascript/comments/4dj82h/using_javascript_to_create_automations_in_adobe/d1rhepu
I love this language. Yes, there is some sloppiness in this language that impedes learning in the beginning, but it's a great functional language.
Devs these days are also rushing to ascribe any new project as a **standard**. For the uninitiated, standards require a governing body of some sort to, you know, _make them standard_. While there are indeed _de facto_ standards, I think they are, by definition, disqualified from XKCD 927 criticism.
I thought I'd also include another way if you really want to impress, haha! The switch can be swapped out for the if statement, just thought I'd add something different for you. var grades = [ "Enter your first grade", "Enter your second grade", "Enter your third grade" ]; var total = (grades.map(function(g) { return parseInt(prompt(g)); }).reduce(function(a,b) { return a + b; }, 0)) / grades.length; switch (total &gt;= 80) { case true: alert('Your average is ' + total + ', that is awesome!'); break; default: alert('Your average is ' + total + ', you need to practice more.'); break; } Maps around the array of 'grades', total becomes an array, reduce with the a+b function adds the total of the array together and the '/ grades.length' gives you your average. It's a little more dynamic, the more grades you enter it will still give you the correct average.
If you use JSX in Vue you basically write React, and as i said, the disadvantage is that you cannot use React components or tap into its eco system. Also you are still bound to filling Vue component objects instead of having your own classes. This is the hardest aspect about it. 
Nothing is happening inside your if statement
Hahahahahaha holy shit! This is gold 
The config file you're describing sounds a lot like how CSS works. To this date, I've never found anything that makes visualizing it really easy. The closest would be Chrome's devtools, where it will tell you what the final values are, and then list each way it was modified along the way, and striking through all the ones that go overridden later. It seems like a lot of work to go through to visual the results of a configuration, but if it's causing repeated stress, perhaps creating a tool like that, for your system, would be worth the time and effort.
Fresh install of my system is 1.45 minutes on npm, 9.69 seconds with yarn.lock and 29.64 without yarn.lock.
Been waiting for something like this for a while. Good to see a collaboration between major players who have a vested interest in the community and ecosystem. Would love to see the registry taken over as soon as yarn matures a little more. Thank you many many times over /u/sebmck, /u/thejameskyle and the other contributors!
"The second method is generally what I use, but it will only work if your nav height doesn't change", that may be problem nav bar gets smaller the smaller when screen size gets to size of mobile phone screen. I will give the first option a go. And sorry for putting this in the wring place but to me this seems like a JavaScript thing as I am using JavaScript to alter the web page.
/u/shitty_watercolour - nice artwork mate! `yarn run &lt;any file from node_modules/.bin&gt;` - why wasnt this mentioned? its awesome!
I hope this wasn't your homework I just did ;)
In fact, it uses NPM as the standard, as it's fully compatible.
Nah, it was an exercise to make a for loop that would average three grades and spit out some messages based on the average. I had the code written to accomplish all that, except it wasn't in a for loop which u/likealcohol so graciously helped me with. Yours is just awesomeness wrapped in awesomeness!
You're mixing JavaScript and jQuery. Try: $("#test").css() Or: document.getElementById("test").style.backgroundImage
Hardly a scientific test, but here are the timings for a project of mine with a boatload of dependencies (express server to serve a JSON API + React app). I have a hot NPM cache, because I didn't think it was worth timing downloading dependencies, just resolving them. ####clean `npm install`: real 4m5.729s user 2m5.996s sys 0m29.272s ####clean `yarn` without `yarn.lock`: real 1m15.299s user 0m52.755s sys 0m40.914s ####clean `yarn` with `yarn.lock`: real 1m3.500s user 0m46.984s sys 0m34.525s
&gt; Initially, following the prescribed best practices, we only checked in package.json and asked engineers to manually run npm install. This worked well enough for engineers, but broke down in our continuous integration environments, which need to be sandboxed and cut off from the internet for security and reliability reasons. I'd like to know if any of them gave npm enterprise a try along the way, and if so, what problems persisted.
Ah, that sucks. In any case, here is all the "inspiration" you need: https://raw.githubusercontent.com/brix/crypto-js/develop/src/hmac.js Just don't forget to sign your API request urls with a timestamp. On the server, validate the tiemstamp so it's not over X seconds/minutes old. 
One "=" is an assignment. You need "==" or "===" for comparison.
Also tried that :(
I was just going to ask if I was tge only one who isn't even going to bother trying it out for now.
Except this isn't another library it's a CLI
&gt; You won't necessarily iterate in order Is there any engine that actually doesn't iterate in order? Because I have never seen this before.
Or you can use a real computer.
I know. I was joking about the library :)
Yeah, I totally agree. It's absolutely insane that `npm install` is not deterministic. 
It works fine if you run it natively on Windows. There's even an installer: https://yarnpkg.com/latest.msi Disclaimer: I built the installers for Yarn
It's funny that I need package manager to install package manager. &lt;3 JS
&gt; It has 12 github stars and it doesn't even work yet What's it called? I'll send another star over your way :P
Awesome work!
https://github.com/prettydiff/biddle/ Thanks!
my-devs-are-a-cost-center@foobar.com
**yarn link**. _Symlink a package folder during development_? Oh joy! Happy day! This looks great. 
 I think the bigger challenge when using Vue is when you're writing the code, not the templates. It requires you to use the `this` keyword inside of functions, which are *usually* bound to the Vue instance (and therefore have access to the router, vuex, other plugins). However, there are cases where that isn't true, like in some of the router hooks. It's a big mental burden to remember all of that, so good luck being productive without the docs up. Despite that, I do like Vue 2.0. The various plugins which are developed by the creator all work very well together. The way he structured the reactivity system and virtual-dom implementation, you get some rendering perf without any effort. I'm excited to play around with the streaming Server-side-rendering also. React definitely lets you code in a more functional way, so it's kind of a preference. If I were going that route, I'd use Cycle.js instead.
Okay, so there are a few issues with this. First, you are using your fun4 function with null inputs, as you call the functions before setting the arguments. Second, you only compare the string to the array, not the array element; `arr4 === str` isn't what you want, you want to index the array `arr4[i] === str`.
Very useful read. Thanks for sharing. I hadn't thought of broadcasting the game state at regular intervals. I figured the broadcast would only be needed when a change occurred. One more question.. in your snapshots, would you include the users' key/mouse state or would you purely transmit the entity states?
Statements are executed in order. You call "fun4" before you assign something to "userIn" and "array". "userIn" and "array" only exist at this point because `var` declarations are hoisted. If you'd use `let` instead of `var`, you would have gotten an error, because you're trying to access "userIn"/"array" before they were declared.
 &gt; var arr = [1,2,4,5] &gt; function highest(param){return Math.max.apply(null, param)} &gt; highest(arr) &gt; 5 
Thumbs up: [Ask yarn why a package is installed](https://yarnpkg.com/en/docs/cli/why) Thumbs down: [No replacement for npm search](https://yarnpkg.com/en/docs/cli/search) Edit: The overall benefits look pretty amazing and I'm definitely going to be giving yarn a spin
Aww, man, `npm` decided to be mature and realistic about the announcement of an alternative tool. Where are we supposed to get our daily dose of pointless internet drama from, now?
but how do i fix this then ? could u give me an example 
As someone who uses and loves NPM and never really had trouble before, can you ELI5 for me please? I mostly build custom / bespoke WordPress websites. Sometimes with a React / Angular app within; most often not. Will this help me regardless of what I'm doing and is it easy just to switch from NPM to yarn? 
I have some recent experience with these two frameworks. I hit the ground running with vuejs. Their cli is really nice to skip the bs and get to work and between their docs and samples I've answered all the questions I've had. With react I get bogged down in all the extras. The create-react-app is a nice addition for getting up and running faster. For me react is usually boiling down to; I want to do x, Hey there is this package for x, ohh but you are using y as well so you need to add package z too. Down the rabbit hole I go. I am however sticking with react despite how much I've enjoyed my time with vuejs. The simple truth is react has the backing of the community and as I am trying to transition from a c# developer to a js developer react and angular are more likely to net me a job.
My laptop is ubuntu, but I use my desktop for games as well as development.
React and Vue are just view libraries, they have nothing to do with Ajax per se. You can use any package that suits your goal. I'd recommend [fetch polyfill](https://github.com/github/fetch).
wow have you seen the codebase? That's some next gen shit right there. This is probably one of the first big node.js projects I have seen which totally ditch callbacks and utilize async/await. Soooo awesome.
So you're saying that Vue templates require some special learning while JSX is common knowledge? Also, just for your information, Vue has great community with huge amount of reusable components and libraries. It also has great dev tools, so does Vuex (in fact it's the same vue-dev-tools).
Yea, I am just on about bash for windows it fails because of the annoying network interface missing. Not an issue with Yarn itself :) It's also not really an inconvenience other than having to open a powershell instance outside of VS Code. It plagues a crap load of things but setting os.getNetworkInterfaces to a noop if on bash for windows usually works as long as the module isn't actually using it. Just have to wait for the bash on windows team to look into it :(
Check out the `array.indexOf()` function. The best online JS references are w3schools and Mozilla Developer Network.
I'll be honest, why would you use search functionality through the CLI? I've always found NPM's search to be confusing and unhelpful and usually just end up search the site or looking up the package name on the library I'm interested in's site.
How soon before we get [yarn pre-bundled with node releases](https://nodejs.org/dist/latest/)? Is anything planned? It would be super sweet to have the option to use it instead of npm at all. I'm not advocating for replacing npm, but it would be great to have the option to pick between npm and yarn as clients.
To be fair, crypto-js is not "random". It's pretty much *the* JS crypto library so if you're going to do browser-side encryption you're much more likely to pass an audit using CryptoJS than you are rolling your own. Though as jxlarrea suggested, if you do need to roll your own that link is a great "tutorial" :)
holy shit, you weren't kidding.
I'm just getting back in to coding after a three year hiatus, so I guess I haven't had the opportunity to find npm search confusing and unhelpful yet. So far I've just found it to crash trying to build a local cache until I remember to tell node to use more memory.
UPDATE : tried to change it to parseInt to get a value from unserIn which apperently didnt give me anything, but i still dont get anything in the function
I think backgroundImage isn't always set from the CSS. It's probably going to work better if you use jQuery.
These lines are all executing the functions: high = fun1(array); sum = fun2(array); avg = fun3(array); find = fun4(array);
but im meant to have a array in a parameter for function 4...if that isnt a parameter ?
Not trying to be rude, but... read the blog post? For complex projects, NPM doesn't scale very well.
Not nearly as awesome as simply adding ./node_modules/.bin to your path, so auto-completion actually works.
It works fairly similar to bash elsewhere. 
Ahh ! okey that actually fixed that problem so now it isnt running before i do anything.
It's a big name if you work in JS, or if you work in package managers. If you don't work in either, then sure. But given this is about a new JavaScript package manager...
This was funny and apt. Downvoters are idiots. (And I'm excited about Yarn.)
what version of node supports async, or are they transpiling it? 
Ember, or, more importantly for this article, Ember-CLI, which has been forked by angular and react.
According to their gulpfile, they are indeed using babel to transpile https://github.com/yarnpkg/yarn/blob/master/gulpfile.js
r/dota2
Good read. Something to keep in mind if you're researching compilers is that ASTs are not necessary. You can write a parser/generator and be done; no reason to complicate things if you're just dipping your toes in.
Check out Eclipse Che as well.
Touche. Also, /r/NoMansSkyTheGame
Isn't separating "tools for frontend" from "tools for backend" arbitrary?
[removed]
You don't have to. However, there are a lot of benefits to the modern JavaScript build environment. The only way around that is by implementing the same tools in "your preferred environment". Suggest an alterative.
Looks great, I can't wait to use it everywhere. I ran into a few bugs which will hold me back right now: 1. Apparently it wants to replace _both_ `npm` and `bower`, and there's no way to only use it for `npm`. Maybe there's a way, but I sort of wish it would just ignore `bower` for now. I'm not ready to combine those just yet. 2. More specifically, I ran it on one of my projects which had a bunch of `bower.json` and `.bower.json` files inside the `test` directory (used, as you would expect, for testing), and it simply deleted them. No warning whatsoever. The second part is a bit alarming, because it made changes _outside_ the expected directories, without warning. I assume it's a bug, but I'm wondering why code exists to delete bower configs **at all**? Supposedly it's a drop-in replacement where you don't even have to have the entire team switch over at once. Anyway, if they provide a way to have it play nicer with Bower (so I can migrate on my own time), it looks to clearly be a replacement for `npm` for everything else.
EcmaScript 2017
Your solution requires global install though
Looks promising
As of 4 hours ago, [I logged 7+ years of yarn under my belt.](https://twitter.com/joshmanders/status/785885907618369536)
No it doesn't, it simply requires being in your project's root directory to run commands specific to that project.
Stuff like * transpilation * concatination * minification They're all needed to go from the original source -&gt; final product that's sent to your browser.
OK, now someone make a package manager that installs for multiple languages. Give me a consistent way to handle dependencies regardless of JavaScript, Python, Ruby or whatever language :) 
Statically compiled binaries? Of what? I wasn't aware that Node did this, but it sounds like a bad idea. The reason they should be separate is so that they can have separate release schedules. NPM and Yarn should ideally work on both the LTS and latest stable releases of Node.
Nice job! :)
How's that?
&gt; Why are you transpiling javascript? A common reason is "I'd like to _write_ my code using features in a newer version of the standard, but support browsers which only support older versions of the standard." Another common reason is "I write something like TypeScript, which needs to be compiled to JavaScript." &gt; What are you concating? All JS files into one large file, for performance. &gt; I understanding minification but you should be able to do that without having to install nodejs. Then, your minifier has to be written in some other language. But you're writing JavaScript because... you like to write JavaScript. Furthermore, unless it's a language which gives precompiled binaries, you'd need _its_ runtime as well... and it's very likely that a JavaScript developer has a JavaScript runtime (node) installed.
&gt; Why would I ever use anything but javascript for my server if my system requires it to work. This is indeed one of the selling points for using Node for your backend.
Am I correct in reading that switching over to yarn is all-pro and no-con? No buy-in, switch back to using plain npm whenever? Faster and deterministic installs for free? 
Because you like having types, different languages, etc. You can build a javascript frontend but still distribute it as static files. Nothing says you have to run or expose the node to the world. Just like you can use tools made from C++ to do things with python without needing to write your whole server in C++. It is just another set of tools in the grand wide ecosystem of programming tools.
what does the console say? I'm guessing `value` is a string and it's throwing an error. check the console. based on my guess, try: return Number(value).toPrecision(sigfigs);
edit: Not even worth trying to explain.
This is going to be the next big thing right? Better start putting "3+ years experience with Yarn" on my resume. 
Knowing that, is it a better idea going with NG2 if my project is creating a webapp from scratch that can handle http calls, routing etc? 
Exactly what youre asking for already exists. https://docs.npmjs.com/files/package.json#local-paths
[Original Source](https://xkcd.com/927/) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3640 times, representing 2.7892% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d8nzibt)
Ah gotcha, thanks. I'll dig into the tracker.
http://i.imgur.com/ObguYK5.jpg
Tilde's Yehuda Katz is a big name. He worked on the design of Bundler and Cargo.
And that's literally npm link. Best shorthand is npm link ../&lt;local package&gt;
Hmm...apparently no one liked and/or understood my MTG reference. Fellow redditors, I wasn't *really* asking if those versions existed. It was just a really bad joke.
https://www.reddit.com/r/javascript/comments/56yesn/introducing_yarn_fast_reliable_and_secure/d8ne6k3
Is the Sebastien who authored this the same one who wrote babel? If so, maybe that's why they use it :)
One summer at college, I worked at the circulation desk in the library. The summer was quite low, so we could use the desk computers for whatever we wanted to, but were not allowed to install any software on them. Cloud 9 allowed me to do full-stack web development including an express server and mysql backend, all from the browser, which I found pretty cool. However, I prefer to use Atom and the terminal as my daily driver, because cloud 9 can be quite slow, at least when using the free version.
I'm a big fan of ng2 myself, and one of the reasons is the "full featuredness" of the framework. Definitely consider it and in doing so checkout out the CLI.
you use a relative path to the node_modules bin: export PATH=./node_modules/.bin:$PATH
Appreciate it! I find it pretty amazing that I made this 3 weeks into learning js
Thanks!!
"Yarn resolves these issues around versioning and non-determinism by using lockfiles and an install algorithm that is deterministic and reliable. These lockfiles lock the installed dependencies to a specific version, and ensure that every install results in the exact same file structure in node_modules across all machines." &lt;3
Glad I could be of service. In my case from the client I send key presses and mouse clicks on change. The server processes it immediately but the results aren't sent back until the next snapshot is sent. With the snapshot from the server I only send entity states. Also because of the delay between user input and the snapshot being sent clientside prediction is important, as you have probably seen with the articles I mentioned.
You should add `npm install` with a shrinkwrap file as well
You have 22 stars now! Almost 100% growth :D
I believe it's compiled to generators / `yield` for newer versions of Node.
&gt; Second - is it possible to install packages from a private github/bitbucket repository with yarn the same way it's possible with npm? Not 100% sure about this, but using a Git URL in the `dependencies` in `package.json` should work.
This is crazy. I completely never expected any attention. I just wish there were more hours in the day so that I can get it into a beta release sooner.
Awesome game, I learned something reading your code as well.
Can someone ELI5 on what piece of the JS ecosystem that this is reinventing? Does this only replace npm? Is this another Webpack, JSPM, SystemJS replacement/competitor?
In case you're not trolling, web assembly is probably what you're looking for. It should allow you to use Python (or any language for that matter), for the whole stack. It's probably closer to reality than we realize.
&gt; -18 points Ouch...
React has only 1% of the API surface of Vue? Hmm kay. JSX doesn't need to be learned? Hmm kay. Vue template syntax really is that hard to learn? Hmm kay. Vue has no dev community and no components? Hmm kay. Vuex doesn't have devtools? Hmm kay. Look, I get it you've worked with Vue and you like React better, but at least try to be objective. 
Seems to work no problem. I use a file reference for one of my dependencies 
&gt; Now, kindly take your sarcastic arrogant shit out of here. Um, no? Why don't you take a timeout. p.s. I haven't removed any of his comments, he deleted them.
Npm mostly. But fixes most of the problems with it. 
It's easy to work with fetch or similar. Routing is easily added with react-router or vue-router too. Some of the largest companies in the world use React, Vue, Angular, etc. They are all very capable. It's really up to what you feel comfortable with.
So it doesn't replace Webpack/SystemJS?
Tell me why I should use your framework versus others. Do you have an example app/tutorial?
If you truly feel like your app shouldn't be killing performance, it's time to start looking into optimizations. However it is difficult for Redditors to help with so little information. &gt;React isn't fast for this sort of performance React is what you make of it, it has sane defaults for batching strategies but needs to be customized in certain cases. I haven't used Angular 2 or Vue 2, but I'm fairly sure you don't need to ditch React. Are you updating more than you need to? Try `shouldComponentUpdate` Only in rare cases will you need to dive deeper. If your issue remains unsolved: Have you used the [Perf Utils](https://facebook.github.io/react/docs/perf.html)? Have you tried generating flame charts with Chrome Devtools Timeline, and if so, does your code issue unnecessary reflows or paints? Maybe you could tune your CSS by avoiding certain CSS triggers: https://csstriggers.com/ I would avoid implementing complex optimizations unless you're really at a loss. It would be useful to provide a contrived and isolated example of the issue you're experiencing.
eat my dick
npmjs requires you publish every new version instead of just seeing it in the git repo, so it's actually much more of a PITA
Sweet, saw that on #636! 
Great on power consumption though. 
Lol this just gave me a project idea: A timer which will count hours since new last javascript framework, build system, depedency management, version, etc comes out that seems to be the next big thing. 
You don't have to do that with npm. Just define a command in package.json scripts and npm does it for you (devDependencies bins in PATH) when you `npm run scriptname`.
The npms-cli module has `npms search`.
~ is home directory
They're much simpler than you think. See - Express examples: https://github.com/expressjs/express/tree/master/examples - Mongoose examples: https://github.com/Automattic/mongoose/tree/master/examples
Speaking only about templating - if JSX is mandatory for you, then use React, because the vue jsx implementation is very shoddy (in my opinion)
&gt; the vue jsx implementation is very shoddy (in my opinion) In what way exactly? 
thank you
This is really welcome. NPM is so slow on large projects. Another great contribution from Facebook to the Javascript ecosystem. Great to see they have Google and more on board. 
Thank you, seems like great resource. Can you also provide a step by step tutorial that can goes through building one app ? The links are great while more geared towards getting me started and occasional peeking when I am stuck with doing things. Would be great if can get one article/tutorial/book that builds upon one app.
if you mean `./node_moduels/.bin`, then for the love of god don't, as it can be quite the security risk.
So in a nutshell you are starting a Javascript project and just because you lack type definitions you might switch framework ? To me your main issue is Typescript in the first place. It is very hard to find all the libs covered and up to date. Maybe consider sticking to Javascript or use Babel since Koa uses ES6.
* Tool: webpack (sourcemaps on, babel+eslint+less) * Loc: 30,500 js + 6000 less * Initial build: 60-90 seconds * Watch build: 0.5-4 seconds * Machine: i5, 8GB, SSD LOC counted using `( find ./src -name '*.js' -print0 | xargs -0 cat ) | wc -l` in case anyone needs it :)
I am pretty dummy, so can someone explain the main advantages of Yarn? Because I have never built huge projects, thats why I can't understand pros of Yarn. 
because: 1. the core (the pattern matcher) is on c++ and very fast (i have a benchmark between this core and others). 2.supports all transport protocols. 3.I ensured bypassed errors so that the server is always secured 4.used by wakanda.io 5.there is no other framework that will let you generate your application that you generate inside automatically all your microservices, database,schemas... just read de generator-devis readme and see the videos. and yes i have some apps that i'll add later but there is 3 default microservices on the generator that you can see and try. 
Damn, perfect response. Thank you.
Yeah ok, if you do it like that it works, but above you said `~/node_modules/.bin`, which had me confused.
Hey guys! Vlad from Vectr here. You may have heard we launched our free graphic editing tool Vectr out of beta last months, and now just wanted to share with you some of the scheduled updates for the next year. Let us know what you think! Feel free to ping me with any questions :)
I'm quite excited by the improvements Facebook brought to the world of frontend development recently. Solid tech all around.
hmmm... it's free as in "free beer", not as in "free speech": for example the first software i checked in the list, "Nuclide", has this part in its license: "...free to... reproduce and distribute the Software as part of your own software ("Your Software"), provided Your Software does not consist solely of the Software;". That means the license does NOT grant you the right to FORK the software, and by FSF's book, this is not free open-source software.
If you have 3 yes experience with npm, you have 3 yes experience of yarn. 
Impressive – even some features that I miss in Illustrator (the popup for item ordering and the hover previews are _really_ nice). I can see how this tool could fit nicely into a creative pipeline, provided that you can _provide reliable hosting_ of the artwork. That would for instance allow me to code a d3js visualisation, requesting artwork hosted on your service. As the creator, I would have instant access to powerful editing tools, change artwork on the fly, and simply refresh my visualisation without going through the tedious "save, then rename, move, replace the previous version and refresh" task. I've inspected the svg you're generating and it looks really clean and straight-forward. The actual artwork is stored as defs and I understand why, the only question is whether that might cause problems when for instance animating the artwork. Three things I'm missing for that kind of workflow: 1. The ability to set arbitrary id's of objects 2. The ability to convert type into outlines 3. The rather weak font selection – maybe tap into Google Fonts? If you were to market this as a web development tool, might want to consider the ability to browse and fork others' artwork. Again, impressive tool!
Yeah, it's crazy. Who would've thought that the most popular programming language in the world at a time when there are more programmers than ever before would have a lot of development? When are these moronic devices going to learn not to release free open source software? It's not like this process reinforces learning or gives people experience in launching a product. They should get back to making WordPress sites. 
You shared your personal video page.
You don't need to download anything or use any tool. You can remain in 2006 and use a script tag and import Angular through a script or via the local file system. 
arrow functions are always anonymous (and have special lexical bindings). If you're looking for a named function, there's a new shorthand for that too, as long as you're defining it in an object literal or class... var obj = { func(){ // ... }, otherFunc(){ // ... } }; 
Most of Facebook's software *is* open source (as in, FSF and OSI-compliant), but there are a few exceptions, such as Nuclide, or example code for React Native. There's also a few concerns about the patents around React.
That's the problem with the javascript community, instead of fixing something everybody creates something new, adding shit to clusterfuck
I started using node heavily when it was version 0.2. This was quite early, really. And I remember seeing a job posting that said `4 years of node experience` at a time when I had 3. Maybe... be less random in the job requirements :)
Thanks for this answer, I'm gathering all the infos you guys gave me and will pick one framework, and it will very probably be Vue2 :))
There's a reason for this diff https://github.com/yarnpkg/website/commit/692d22ce4294790cd934ce49f11106c7e40b9692
npm actually encouraged us to build a separate client, it's really hard to make breaking changes to something that so many people depend on.
- No private module support - Definitely not as battle-tested as the official npm client - Maybe missing other npm features that we're accustomed to (not sure if they support npm scripts?) - Doesn't come bundled with nvm (node version manager), unlike npm; that might mean that you might have to remember which yarn version is compatible with which node one
Happy to hear that! :) Also you probably already seen this, but if someone didn’t, there is a in depth comparison between Vue and React (and some other frameworks). http://vuejs.org/guide/comparison.html
Looks like it has some nice features, but anyone contemplating switching over to it for speed might want to check out [ied](https://github.com/alexanderGugel/ied). My times for doing clean installs of react-native (after initial warm-up runs): ied: 11.32s yarn: 24.42s npm: 52.95s
"npm install -g yarn" hehehe
&gt; I write billion of times "function MyName().." You do the same with `var`, `let` and `const`.
Oh you did? It's so messy! Thanks though!
Hi /u/JeroenDekker, please use an online service to host your code. Also, please tell us what the problem is -- saying "it doesn't work" doesn't tell us anything. Here are a few, but not all, of the ways you can post your code: * [Github Gist](https://gist.github.com/) for simple JS/text dumps * [Pastebin](http://pastebin.com/) for simple JS/text dumps * [Codepen](http://codepen.io/pen/) for JS+HTML+CSS * [JSFiddle](http://jsfiddle.net/) for JS+HTML+CSS Please reply to this comment once you have done that and I will make the post public. Thanks!
Hi /u/DarknessInUs, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Also `` `npm bin`/&lt;any file from node_modules/.bin&gt;`` works the same. Or you know use a script in `package.json`
Both frameworks use a plugin for Ajax though right? Vue-resource really isn't that different from something like axios. In fact in vue I tend to just stick with axios because I like the syntax better. But if streaming videos like Netflix I don't know if a normal ajax interface will suffice.
Hi /u/VladShvets, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just content about `Vectr`. Thanks for your consideration!
Sure, it's just that I thought that this piece of content was very valuable to certain groups of people, surely will follow the rules :)
Absolutely yea, remove it. We are in 2k16 and javascript is more awesome than ever.
Can't view the text on my 1366x768 screen
Yes, I just tried it yesterday. Works like a charm, installs way faster than npm, especially on any re-installs when it already has dependencies cached. But the main draw is finally being able to lock down versions and have deterministic installs.
Damn that sucks. Sorry you can fully enjoy it, didn't really have time for media queries. I dont know this helps but cmd - to zoom out? 
GAME OVER! YOUR FINAL SCORE IS: 2470
Does this affect Webpack or then build/builders?
It's used where it's used. And if used in a sane way it is okay to use it. But I'd never start a new project using it.
I'm just starting to take a deep dive into web pack and so far, I'm only using it to bundle files and Transpile Es2016. So far, my webpack. config. js is unchanged. My package. json start script has a webpack - dev-server a now, instead of npm run start, I just use yarn run start
How is it any more of a security risk than typing out the full path? As /u/kovensky pointed out, it's not going to override any other commands when added at the end of the path. Am I missing something?
Yeah, thanks, that's what I get for writing paths on my phone. Fixed.
EDIT: I need to make a getTotal, but I don't understand on how to do it. Can someone help me do that? It's supposed to be getTotal = getEther + getBitcoin + getTether.
I would suggest you to create 3 functions for the calculations, then create a 4th for the onChange event. ` function getEther() { var total = document.getElementById("inputEther").value || 0; return total * etherPrice } ` Now it will return 0 if the inputEther is empty. `function onChange() { var ether = getEther(); // ... for the other two document.getElementById("outputEther").innerHTML = ether.toString() + "$"; document.getElementById("outputTotal").innerHTML = ether.toString() + tether.toString() + bitcoin.toString + " $"; }` Something like that. EDIT: i dont know why my code formatting does not work 
Yeah, my bad, sorry.
The article doesn't mention hosting a private NPM repo, which is completely supported and I've used on enterprise projects, where CI and other environment servers were locked down from the internet. The qty of fragmentation in the JS community is getting hard to manage, and has been for years. I'm sceptical solving dependencies needed a completely new codebase. The article also mentioned they custom curated their dependencies: line endings, js linting ... What would have been very noble is to put their resource to action in submitting pull requests to those repos for the community to benefit.
*Takes a break from working on his very first web app; using jQuery for DOM manipulation.* *Opens Reddit... reads title of this post.* *Looks back at his script.js file... chalk full of jQuery.* *Sulks away.*
But how do I apply that patch?
ah, good ole view source programming, another insecurity is born out of secure 'business' procedures
Surely that's exactly what they should do then? If you disagree with the philosophy of npm, surely you should make something new with a different philosophy, rather than trying to change an existing project's philosophy.
I think you misunderstood my comment. I'm asserting that none of their complaints are philosophical in nature - they are merely issues npm needs to resolve at some point. And rather than contribute to npm to help them do that, they've built an entirely new tool.
It is still one of the best choices for some applications: * marketing splash page * static page with minor JS Not everything is a SPA
As far as discussions go, this one was not that interesting. Sounded like a bunch of old-timers reminiscing about them "jQuery days", mostly agreeing on things. Which is fine, but again does not make an interesting discussion.
Yes, it can still come in handy for more complex dom manipulations. However, vanilla Javascript is another good route to take for non-SPA websites, the native dom functions are actually pretty good and consistent (if you dont care about &gt; IE8, which you probably shouldn't).
seems like an ad for "Angular". jQuery is incredibly relevant. 
Unfortunately yes, because there are people who will hold onto old technologies because they are comfortable with them, and don't care or want to learn what *should* be used. The only way it is ACTUALLY relevant is if for some reason you're stuck in a piss poor position or company that still is supporting unsupported browsers like IE8. Even then, leave. In reality should it be relevant at all? No, not with what we have native in the browser available today.
Almost exactly in the same boat. Only difference is that I didn't do all that much DOM manipulation, but I do have a bunch of stuff like this: var body = '{'+ '"module": "Enforcement",'+ '"openedDateFrom" : "'+$("#FromDate").val()+'",'+ '"openedDateTo" : "'+ $("#ToDate").val()+'"'; if(!($("#violationSel").val()=='All')){ body += ',"customForm" : {'+ '"Specific Violation" : "'+$("#violationSel").val()+'"'+ '}' } if(!($("#statusSel").val()=='All')){ body += ',"status" : {'+ '"value" : "'+$("#statusSel").val()+'"'+ '}' } body += '}'; I can here the cries of anguish from the non-newbs already. Edit: Sheesh. Went to lunch, and came back to this. In case it wasn't clear, I'm a newb, this is my very first web app, and it worked perfectly. The end goal was to send a XMLHttpRequest to a REST API which required filters to be defined as JSON in the body of the request. Edit 2: In case anyone is interested, [this is what the app actually does](http://imgur.com/a/ViQh5)
Please, what *should* be used? What the fuck does that even mean?
Rather than stripping then adding the language code separately, do them all in one step. i.e. use `changeLangDir`, instead of `stripLangDir` and `addLangDir` (replace both to `changeLangDir`). e.g. function changeLangDir(lang) { var regex = /(\.com\/)(en|es|fr|pt)\//i; var url = self.location.href.replace(regex, '$1' + lang + '/'); self.location.href = url; } 
Everything in a SPA if you try hard enough 
What about jQuery for effects, animations, and other types of things that Angular, React, etc are not really for?
I'm a bit worried about seeing this question in various forms all over the place. I love jQuery, and use it for all kinds of stuff. Can someone explain why I wouldn't, and what people do instead?
Again, none of their complaints were philosophical in nature. Had yarn represented a fundamental shift in npm's philosophy, then I do believe it would be more warranted. However, they brought up issues that should be resolved in npm, independent of whether or not yarn is created. As such, the right move would be to contribute to and improve npm. That is the move with long-term in mind. The move not based on ego or desire to put your name on the new shiny thing. Unfortunately, it seems part of the motivation came from the npm maintainers suggesting they do this. That doesn't really change the circumstance, but it does shift the blame. The maintainers of npm have made a choice to reject significant community contribution and would rather it fracture to move forward. That's fine, and if that's honestly the view they take then we'll be better off with yarn becoming the tool we all use. Open-source tools that don't behave in an open-source manner deserve the fate they'll undoubtedly meet. They may argue big changes are too dangerous. Of course they are. Lots of people use the tool, which is why it's all the more important to continue improving it so the entire community can reap the benefits. On the face of it, none of the issues they brought up would have represented an interface-breaking change. Should the interface need to be modified, a new version of npm may be warranted to move the tool forward. There is a great deal of benefit to standardization and common languages. Npm was one of those common tools/languages. It seems the fault may lie with npm in this case more than the yarn maintainers - so be it. I do not believe that detracts from the crux of my issue with the whole thing, however, which is that we should be incrementally improving the tools our community has surrounded and adopted, rather than reinventing the wheel every time we run into issues with how something fits into our workflow.
👌🏻
If it ain't broke, don't fix it. Learned that lesson enough time in my career...
Why worried? I also thought MVVM was great at the time, kind of ignoring the obvious issues we had with it. Inflating data by code is even older than MVVM. Still, i loved Jquery, but apps did turn into a spaghetti mess quick. At the time it still felt like the best option. But things have changed *so much* over the last years. There are technologies available that make building apps easy to the point where you can pick up the toughest project, something you'd be afraid to do native on the desktop, and say, sure, let's do this. The difference is hard to explain in words. Something like React for instance teaches you to think differently of your application, how to compose, how state flows through it. Actually grab an editor and follow along: https://egghead.io/courses/react-fundamentals 
They're different but there's overlap. Even in the article Todd Motto mentions moving away from jQuery since starting Angular.
As Google devs like to say, #usetheplatform :-) Which means use the functionality that modern web browsers offer (and which is frequently hidden when we rely on jQuery). (Just a quick and stupid example: using jQuery, I did not even know that document.querySelector existed :-) ).
lol vanilla should be used! 
It's fine. Just remember two things: 1. Working code is working code. 2. If you look at code you wrote 2 years ago and are not ashamed then you are not growing fast enough. 
Can you elaborate on what that means? What are deterministic installs?
`&lt;div class='legal-shit'&gt;` Love it :P
All that matters is the end users are happy. If the product fulfills the business requirements and is fast and reliable it doesn't matter.
I use my motorcycle to haul things even though I have access to a truck. But I'm quite happy with my motorcycle, so I will stick with it.
lol
Yes, especially when working with the DOM.
Its very cool. I used 10x10 representation within 720x1280 pixel region, but this uses 28x28 representation within 200x200 pixel region. Also I think, it is used different algorithm for recognition.
Sure that's maybe the toughest. Everything you touch from now on requires build steps. But if you see what this stuff enables you'll understand why. You don't think of it like this now, but what you have to do to get a regular jquery app running is hardship. Hunting down polyfills, constantly fumbling around with script includes, tracking dependencies manually, messing around with intertwined scope globals because es5 doesn't have modules, etc. All you need for that tutorial is install Node. And an editor. He teaches you to get a buildsystem in the 4 minutes of the first video. You can get a long mileage out of that first config file you create there. 
upvote for readability and !==
How about something like this: http://codepen.io/lemmin/pen/QKxKog
No, but it will now.
&gt;wait are you building an object like a string?? why?? No, I'm building the body for an API request. It needs to be JSON.
Why do you want your body to be a string literal? Are you evaling it afterwards?
Oh, I thought you meant you would add it afterwards if you needed it. I still use it when we have small sites that I need to bust out really quickly. It still has it's place for me.
Wow!
This attitude makes me cringe. Learn your craft, man! How can you tell the difference between a passive aggressive troll writing unreadable code vs someone who doesn't understand what they're doing? Getting it to do what it's supposed to is the easy part. Not building a piece of shit is the goal. Like if I had a plumber fix some pipes because there was a leak, then 3 weeks later it starts leaking again cause the dumbass used scotch tape, I'd be pissed. Learn your craft! 
What is this yarn magic and does it pull packages from the npm repository or does it have its own separate repository?
It uses npm's repositories by default, but you can set it up to pull from wherever. https://code.facebook.com/posts/1840075619545360/yarn-a-new-package-manager-for-javascript/
Actually, after trying that, it didn't work. The end result of my code was: &gt;{"module": "Enforcement","openedDateFrom" : "2016-09-06","openedDateTo" : "2016-10-12"} Which was exactly what I needed. Your code produces: &gt;"{\"module\": \"Enforcement\",\"openedDateFrom\" : \"2016-09-06\",\"openedDateTo\" : \"2016-10-12\"}" Which gets spat back as a Bad Request. Edit: sorry. Screwed up somewhere. Your code produces: { "module": "Enforcement", "openedDateFrom": "2016-09-06", "openedDateTo": "2016-10-12" } Which does seem to work. I'll be doing that from now on. Give yourself a pat on the back for teaching a newb something new.
Facebook's language prevents you from suing them for patent infringment for anything. Not just things related to React. So if you are using React and Facebook crosses the line in a completely different area, you can't sue them.
Well you *can* sue them, but then your license to use React is revoked.
&gt; Facebook touts React.js as open source software. But in my mind the license termination provision of the Additional Grant of Patent Rights takes the offering outside the realm of open source software. &gt; I could be missing something, but I have never seen any other software license use such a condition and also claim to be an open source license. I may be mistaken, but *Open Source* software is a loose term which means nothing more than the source code being available for viewing. In that regard, React.js is *open*, you can browse the source. *Open* software is different from *Free-as-in-Freedom* software, and if that's what the writer wants to say, he should avoid the ambiguous term *Open*.
Can you give an example? It's been a long time since I saw something implemented with jQuery that wouldn't have been just as easy to do in vanilla JS. 
&gt; But, unusually, in addition to the BSD License, Facebook issued an addendum-like document titled “Additional Grant of Patent Rights” The fact that he said this was unusually instantly makes me question his credibility. Patent grants for open source software are so common that some licenses include them automatically (Apache 2.0, MPL, etc). I would expect his opinion as a lawyer on the matter would mean he's an expert on issues of open source software licenses, but the fact that he considers it unusual for a big company to issue a patent grant tells me otherwise.
If the pipe is leaking then it isn't reliable. Using jquery isn't the end of the world.
Why can't we, as a community of developers, just make one thing really fucking good and stick to it. Sure, yes, "you don't have to use this" you say. But seriously. Python has pip. Pip is really good, nothing else matters... Why not, instead of making and using Yarn as an exercise in futility, don't we spend time improving upon NPM? This seems to be a symptom of web development. Maybe because work done by web developers is so highly visible that everyone feels like their thing is the new thing. Fuck. Pick a fucking standard. YOU ARE KILLING US ALL. 
if you want the JSON on one line you can write `JSON.stringify(body)` with no additional arguments. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
/r/savedyouaclick
You could just have the page poll the server periodically. You could use a cookie to see which views belong to a single device.
If you'd read the whole article, you would notice he was mentioning the _scope_ of it as being unusual. The scope being, if you're using React, you can't sue Facebook if they infringe upon any other unrelated patents.
Actually no, pip isn't good at all.
[removed]
 just meant, unless I misunderstand this code, that at the end of it body is just a string. I guess this is something you are using to communicate with json from the client to the server or vice versa.
With that logic, why allow multiple programming languages to exist? Why not use just one language like Java or C and just spend time improving it to fit everyones needs and unique situations. We should all just force these brilliant developers to work on existing solutions and forbid them from innovating and creating something new. 
Before pip it was easy_install. In this case, `easy_install` is to `npm` as `pip` is to `yarn`. You used to have to install pip with easy_install too. Ideally if yarn pans out, then people will just use that over npm cli like how pip is the defacto standard.
Lol @ development. more like pendulum of trends that are followed by ADHDs who never had proper CISC knowledge and every idea from 30 years ago seems revolutionary. Problem I guess is that things that work for 10,000+ devs big organization might not be a good idea for you and your 4 member team. Who are trying to be agile. 
They provide a reason in their blogpost for yarn: &gt; Rather than continue building infrastructure around the npm client, we decided to try looking at the problem more holistically. What if instead we attempted to build a new client that addressed the core issues we were experiencing? Sebastian McKenzie in our London office started hacking on this idea and we quickly became excited about its potential. This is obvious but I'm going to say it anyway: building something from scratch is often easier than modifying something that already exists. I get that you're tired of the rate of change in the node ecosystem... but it produces a lot of great things. Competition breeds innovation. You already stated the solution to your problem. Don't use the tool. The npm client isn't going to go away any time soon.
Its an exaggeration at the same level as your original comment. But seriously though. Have you ever worked on a old codebase and try improving it to the level of improvement Yarn was able to bring in regards to NPMs client? There are legacy design decisions that can hinder significant improvements to software.
Python installs both `pip` and `easy_install` and in the past you used to have to use `easy_install` to install `pip`. Ruby gives you `RubyGems` but not `bundler`. There is definitely precedent for this in the OSS world.
* npm could be faster by doing more stuff in parallel, that's what yarn does * I believe yarn is not accessing npm directly but going through their mirror. It's possible they have more bandwidth and/or are using a cdn to speed up downloads Bottom line, rather than asking why yarn is so fast, you should really be asking why npm is so slow. edit: also it has a local cache, like maven and ivy but npm doesn't.
Yes, Yarn only supports Node v4 and above: https://github.com/yarnpkg/yarn/blob/master/bin/yarn.js#L33
[Image](http://imgs.xkcd.com/comics/standards.png) [Mobile](https://m.xkcd.com/927/) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini\-USB\. Or is it micro\-USB? Shit\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 3648 times, representing 2.7929% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d8p4u2k)
The reason the JavaScript ecosystem is so diverse is because everyone has to use it for front-end development. On server side if you don't like a language you switch to another, and each platform develops its own culture of like-minded developers. But on JavaScript you find everyone, including people with wildly different opinion, which is why it's so vast and sometimes contradictory.
You're acting as though every developer is doing this. There is really only 2 big players in this field right now. NPM's own client and now Yarn, which is backed by a lot of prolific developers in the community. This isn't just some random dev that decided to make their own NPM client and people are pointing the lime light at them. Did you even examine why the lime light is now at Yarn? Or did you just complain as a knee-jerk reaction?
... and if they did that, then 6 months down the road there'd be people complaining about monoculture... there's just no way to keep everyone happy.
You obviously didn't read [the blog post](https://code.facebook.com/posts/1840075619545360), which details exactly why they made a new client instead of trying to fix npm.
I've only used it a couple of times when I was forced to work with python but these are the issues I ran into The error messages are pathetically cryptic. Aren't you basically forced to use virtualenv if you don't want global install? The syntax is not intuitive. Poor windows support.
I don't think it's relevant in these cases. For something so minor just use the querySelector api. Personally I only use jQuery for DOM Events and AJAX. As soon as I polyfill fetch, then it will just be DOM events.
&gt; If the ID's represent form values you can do: &gt; document.querySelector('#statusSel') Or the OG: document.getElementById('statusSel') 
Weird - this is not my experience. On my side project, npm3 came in a couple seconds before yarn with from-scratch installs with clear caches. I imagine a lot of this depends on whether you're hitting facebook's proxy (which is probably a lot faster than npm) for gathering the package metadata.
At first I was impressed, but then I realised it doesn't support shortcuts such as `yarn i` or `yarn un`. I wonder if there is a reason for that...
&gt; virtualenv This. Pip is almost useless in the professional world without virtualenv. So the whole tirade about Python having it figured out is pretty much invalid.
[How it feels to learn JavaScript in 2016.](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f)
Because different programming languages solve different problems. This claims to be objectively better than npm, by doing the same thing, but being faster and also solving problems that npm neglected to solve. I'm not saying this is a problem, by the way, just pointing out that the comparison isn't exactly fair
Your opinion seems somewhat absurd. Ultimately, it comes down to why bother with choices. Why should I have to choose between McDonalds and Burger King or Ford and Lamborghini or cake donuts and frosted donuts? Seriously, if Lamborghinis are so much better than Ford cars why not just improve Ford cars so that we don't have to make this choice. Such a burden. Variety is the spice of life. I suppose not having choices would make life easier. Imagine a beautiful world were you get paid oodles of cash to write code a computer could probably write better and never have to be stressed with a single decision. Seriously, why the fuck did those assholes have to go and make Facebook. Digg was already there. Why couldn't they just improve Digg. Its like they just love to reinvent the wheel those idiot assholes.
Well, `yarn i` would be redundant because `yarn` is already equivalent to `npm i`. That's the default command. In fact, everything is shorter in yarn out of the box. Instead of typing `npm i --save something`, you'll be doing `yarn add something`. 
http://caniuse.com/#feat=queryselector
Alright thanks man, I'll definitely check this out. I guess I'm not working on complex enough projects yet for this to be a problem. I'm just getting into MVC these days as well, so I'm a bit behind. I guess I'll just have to try and really concentrate on understanding things like Node and React. I don't know why it seems so hard to me.
Unless you're at a bleeding edge startup or redoing your tech stack, you're gonna be dealing with legacy code and legacy browsers. I wouldn't introduce jquery to a new project but hell yeah I'm using it if it's keeping some corporation's ancient site alive. 
I'm not sure if you are trying to play a semantics game here or not but NPM certainly facilitates building of binaries through node-gyp. Many times you won't actually have to build because it also supports downloading pre-built binaries, which is a godsend for windows. NPM also performs "other installation/configuration tasks" so I'm not really sure what you are getting at there.
Yes, you're right. Now I have to learn a new set of options. Not sure if that's the best approach though. They could just mirror the standard options to make it compatible.
I'm gonna make a competitor to RES! Nah just kidding, RES is the cats meow and cannot be competed with. Sent from RES for Chrome.
\3. Write your code as if the next person to read it owns a .45 and knows where you live. 
You just drained the no-look shot.
Are they going to fix their client's compatibility with Webpack? Last time I checked they didn't consider it as a priority.
Of course you can sue. You just lose the patent grant. If you're suing a $300billion company, react is the least of your worries or cost.
&gt; When a major company releases a project [...] and then starts trying to get every other business to use it, you generally make the assumption that they're acting in good faith Yeah, no. That assumption is, generelly, dumb.
I don't know man but if that's really your gripe with the thing so be it. The fact is that npm has been both a blessing and a curse for node and JavaScript in general, and I personally believe it is time something better came along. As compatible as possible so we don't end up forking the whole JavaScript community, but with way less bloat. I really think (and hope) we will be seeing a reduction of relevant libraries, frameworks and tools until a couple of standards roll out, like standard libraries. In a couple of years we might even see stuff that MV* frameworks are trying to do be native to a browser JavaScript environment.
You can alias anything in your bashRC
[removed]
That choice is up to you. I'd probably just use babel and flow-with it you can add your typings gradually, no need for type definitions. Problem is tooling is not really comparable with typescript.
NPM is SO last month.
No. This isn't a new standard, as it reuses the same metadata. Irrelevant xkcd.
In this case, neither of those matter, because, if I understand the video correctly, yarn has pre-cached the dependencies in a global NPM module store. That's why step 2 (which would be the actual fetching) is done almost instantaneously. Step 3 is then filling in symlinks to all the cached dependencies in the project's node_modules step. The upshot of all this is that for most rebuilds, and even many builds in controlled environments where you can manually provide the desired dependency packages, you don't need any internet connection. In NPM's defence, the most equivalent usage here would probably be a shrinkpacked directory, at which point NPM just resorts to unpacking the dependencies, and also doesn't need to make network calls - by the looks of things, NPM is checking at least some sort of metadata, so this is not a little unfair on it. However, by all accounts, in most cases, yarn is a significant improvement.
I was under the impression that NPM had already replaced Bower. Aren't all the Bower packages already in the NPM repos?
No, and it's not that simple. For several reasons. ~~Like I said,~~ Most newer projects _are_ moving in that direction, but legacy projects don't necessarily want to invest the time (and deal with potential issues) switching. There's several other reasons why I'm still not sold on switching to NPM 100% for front-end libraries: - NPM libraries are not always built with browser-compatible formats. They are (obviously) built using modules, which require conversion before they can be used in a browser. - Not everyone uses Browserify or WebPack. We don't. I have my own build process that is now heavily tuned, switching would be a waste of time. - Mixing build- and production-libraries. Since everything on NPM heavily depends on everything else, if you need a different version of a library for the front-end than the build process, you could have version conflicts. Honestly, it's naive to make a blanket statement like "NPM [has] already replaced Bower". There's thousands of projects out there, all built in many different ways. From another angle, if "NPM…replaced Bower", that actually _strengthens_ my argument: there's no reason for Yarn to be touching anything related to Bower. The only reason I can see for Yarn touching Bower files is that Facebook (or someone else) is still heavily invested in Bower, and wanted to move them under the same dependency framework. *Edit* I just realized I was remembering some of the stuff I wrote up in the bug report, so I didn't mention in my original comment how I know many projects are using NPM for everything. Sorry about that!
That's a good analysis, thanks. I personally never used Bower heavily, and in new projects I always find everything I need in the NPM repos.
SPA is the new jQuery ;) P.S. [you should use jquery for that](/r/ProgrammerHumor/comments/25mp2k/you_should_use_jquery_for_that/)
One big difference here is that npm is open source.
I might be a little late in replying but I think you should be able to use [draft-js-import-html](https://github.com/sstur/draft-js-import-html) to convert HTML back into DraftJS-formatted JSON content. 
There is no mention (that I could find) of trying to even contact any NPM maintainers, through issues, pull requests, or otherwise. It appears they gave up on NPM before trying the first thing a sane person would have done.
Otherwise a default value is going to be awkward. const { a = "unknown": age } = dave. Otherwise I agree. I would like the `as` keyword in an import to follow this colon destructor convention, now it's an oddball. 
Change is fabulous. What's not fabulous is making something new that isn't new. What they've created, more or less, is npm with a bunch of issues fixed. It's not a philosophical divergence, and as such it would have made more sense - albeit with more work - to contribute to NPM. I'm excited that it solves a bunch of problems, but all they've done is deprecate npm because there is no philosophical reason to use npm over yarn anymore if yarn fixed the bugs/problems npm wouldn't. I'm to understand the NPM team suggested they make their own client, however, so it seems the problem is really more the maintainers of NPM than it is the Yarn team.
Can someone explain the scoll indicator? It seems like it relies on setting the background width to `calc(100% - 100vh + -6px)`. Does `vh` count the stuff you scrolled by before? It seems to me that the viewport is the size of the browser window. Then I guess it is the 100% that is changing somehow?
[I created a CSS-only gallery](https://jsfiddle.net/wy432knt/3) the other day, actually &amp;ndash; click on either the left or right of the image. It also cycles infinitely.
Your comment is a bit confusing to me. "yarn has pre-cached the dependencies in a global NPM module store" Both yarn and npm cache modules to the hard drive. Yarn apparently utilizes the local cache better, but I don't know why. "Step 3 is then filling in symlinks to all the cached dependencies in the project's node_modules step." Yarn is not using symlinks, it's copying the modules to the node_modules cache. Apparently they're trying out a symlink mode, but it will break some stuff at the moment. That would probably require some support from Node.js to make it work well.
It uses the yarn registry, which is proxied or mirrored from the offical npm registry. "repository" in this context is not the correct term.
I guess to be precise, I use miniconda which doesn't install much of anything: http://conda.pydata.org/miniconda.html &gt; These Miniconda installers contain the conda package manager and Python After that I use conda to create envs and install things. The normal anaconda does include way too much stuff. Out of interest, what were the libraries that clashed with the system libraries ?
It got the point across.
r/keming material I suppose. 
&gt; yam &gt; yarn Maybe you're onto something.
No, they provided technical details about topics thats should be improved on npm, but not, in any moment, anything about trying to fix all them along with npm team. They even say "we began speaking with engineers across the industry and found that they faced a similar set of problems and had attempted many of the same solutions", but apparently, npm wasn't invited to the party. That's the OP's questioning. 
Ah, my reading of the yarn documentation was that it was currently using symlinks, I could well be wrong. As regards to the network requests, I think their claim is that they split out the 'downloading packages' and 'linking packages' phases into two distinct entities. NPM basically has to check each time whether it's got that particular version at that particular version in cache, which is a slower action during a period of time (analogous to yarn's linking phase) where later requests (for sub-dependencies) are blocked by previous requests (for dependencies). Essentially, you want your linking phase to be as efficient as possible, because you can't parallelise it as easily, whereas you can parallelise downloads without much problem at all. That's something yarn solves by splitting the two.
The changes that we made to the Yarn client would be huge breaking changes for npm. npm is at a scale where they have a lot of difficulty making these kind of breaking changes. We're working with the npm team on this and they've been extremely encouraging and are happy about what we've built.
the solution is this $('#loadModal .modal').modal("show");
/u/MGaafar Can you also try [pnpm](https://github.com/rstacruz/pnpm)? I reckon it would be in the same ballpark as yarn.
Ironically coming from an irrelevant company in terms of developer tools.
Symlinking was the plan originally but [was removed](https://github.com/yarnpkg/yarn/issues/57).
Open a perf testing issue, not sure why you are experiencing that. I'm assuming it is happening consistently?
Please reference and improve this cheatsheet on the website https://yarnpkg.com/en/docs/migrating-from-npm#toc-cli-commands-comparison
Because NPM inc. is a terrible company lead by social justice warriors instead of engineers.
As someone who has contributed to NPM (fixed the preinstall bug) I can tell you that it is incredibly difficult code/architecture to work with. Yarns code is an absolute dream to work with.
&gt; It is about collaboration, and not competition. I get the complete opposition impression when people fork projects for purely political or managerial reasons. One example is JSHint is a fork of JSLint. Zakas stopped trusting JSHint so he wrote a new original one from scratch that is very much in competition with the former two. Dart was an open source project and it was very much in competition with JavaScript. Gecko, Chackra, V8, and others are always in competition. Competition isn't a bad thing. It motivates innovation and initiative. JS Beautify and my Pretty Diff project are in competition as code beautifiers, but in the spirit of open source we still examine each others code and occasionally help out with each others' issues.
This seems to work fine for the case described in the readme. Kudos for that! However, I'd imagine in the real world, the requirements can be trickier. For example, what if we wanted to improve the onboarding process and show a "awesome, keep on going!" popover once the new user adds their 2nd todo? Or, more generally, if we wanted to react to a sequence of actions, and not just a single one. An overly specific solution like `redux-rules` wouldn't do. Have you seen [redux-saga](http://yelouafi.github.io/redux-saga/)? If not, check it out, it's pretty cool. Now, the hypothetical requirement I've described can be implemented with sagas roughly like the following function* welcomeSaga() { yield take(USER_SIGN_UP_SUCCESS); // wait for the user to sign up yield take(TODO_CREATED); yield take(TODO_CREATED); // wait for two todos to be created yield put(showCongratsPopover()); // dispatch the action to show the popover } As you can see, it's very flexible to accommodate various business requirements. Your example from the readme can be implemented like this: const isAuthUser = (action) =&gt; action.payload.user.roles.some(role =&gt; role === 'authenticated'); const isComingBackUser = (action) =&gt; !!action.payload.user.lastLogin; function* welcomeAuthSaga() { const action = yield take(LOGIN_SUCCESS); if (isAuthUser(action) &amp;&amp; isComingBack(action)) { const { name } = action.payload.user; yield put(flashMessage('Good to see you ' + name + '!')); } }
Upvote from me. Even if you felt jQuery wasn't relevant there's no need to downvote. See you on the ng-side my friend ;)!
http://blog.npmjs.org/post/151660845210/hello-yarn npm was invited
Ehh... I think that loses readability 
As that issue states this was fixed in npm 3.10.0. node 6.3.0 included npm 3.10.3. I sure hope this test was done with current versions of node and npm.
They use cloudflare for cdn on the proxy so latency issues are lower.
The reason we're trying to solve this problem is because people think it's actually okay to have 18 thousand dependencies for your JS. ffs. For example, this video's project had 18178 JS dependencies.
Well unless we want to build up the massive library base then npm is going to stay.
it doesnt
What font are you people using?? It must have overenthusiastic kerning if "yarn" looks like "yam". Either that or you've got the text size too small.
You seriously can't remember 2 extra commands when you already need to remember hundreds as part of your job? Seems like a pretty weak argument to me. 
Pip is not very good, and it's replacement is in the works. Plus, before pip came easy_install. 
&gt; Recommended for in depth studying: [Shameless plug coming right up] If you would like something else other than destructuring, I have also covered: ES6: An Idiots Guide to let and const - https://medium.com/@MentallyFriendly/es6-an-idiots-guide-to-let-and-const-70be9691c389#.65ki6q5ku ES6: All Hail, Template Literals - https://medium.com/@MentallyFriendly/es6-all-hail-template-literals-5df04e31d8d3#.ux49l9mk7 
A better question might be why go through a proxy at all
I assume it's so they can record everything, run tests, etc.
Although performance is great in yarn, that's not why yarn was created. Speed is just a bonus.
It's more of an issue during deployment than in development. And even during development you'll likely break packages once in a while and want to do a clean reinstall. 
You're not still using npm &lt; v3.x.x by chance are you?
I can't tell if you're being sarcastic, or if you're learning, but I do think it's weird that people are talking about yehuda katz and only mentioning tilde, or cargo, or bundler He was extremely well known in the ruby on rails community before he transitioned to js. Most js people would probably know him as one of the main people behind Ember.js (and before that, jQuery), which is an open source mvc framework that competes with react / angular He's also responsible for an ecmascript feature proposal or two I believe But... yeah. If you work in js you should be at least passingly familiar with at least one of those things
Haha, no I try to keep my tools up-to-date. Currently using version 3.8.3.
Symlinking with gRPC/protobuf will most definitely not work. Unless something has been changed in the last few months with this, I have first hand experienced some very difficult to track errors that ultimately derived from attempting to use gRPC with symlinked modules. (Soft links and hard links made no difference). 
Could you try npm@2 as well? Won't produce the same, deduped, dependency file tree, but still..
Honestly? I'm still annoyed with the way the NPM people handled the whole leftpad thing. That's good enough reason for me to say "lets look at new tools, developed by new people". 
&gt; Honestly? I'm still annoyed with the way the NPM people handled the whole leftpad thing. That's good enough reason for me to say "lets look at new tools, developed by new people". Yes, that's the kind of unproductive attitude I'm talking about.
Don't forget this bit: &gt; or any of its subsidiaries or corporate affiliates Who the hell are Facebook's corporate afiliates? The license is, on some level, trying to discourage *all* patent litigation. But on another level, it's not really like that -- it's probably more about strengthening Facebook's hand in cross-licensing negotiations with Apple, Google, IBM, etc. Which is shitty, I'd say. (Full disclosure, though, I do legal work for IBM). (I should also mention that I see nothing in either the Open Source Definiton or Free Software Definition that would make this fail either. You could think of it as an unreasonable restriction on freedoms, but I would not, I think it's just shitty.)
Like Free Software, the people who coined the term "Open Source" have provided us with a handy definition: https://opensource.org/osd-annotated That said, I believe Facebook's additional grant generally meeds these definitions.
[Vue](https://vuejs.org) is MIT, just to add another great framework to the list.
Yarn IS IMPROVING IT. And if it's such a trivial change in NPM why don't you submit a PR? Because it's not trivial. And you're just blindly white-knighting the status quo for no good reason. I'm glad Yarn was built. I'm thankful for the effort and the talent behind it. I'm also thankful for NPM and the effort behind it. My hope is that much like Vim/NeoVim we end up with better code on both sides.
&gt; If you're suing a $300billion company, react is the least of your worries or cost. Nope. It's fucking annoying, whatever the scale, because facebook could potentially enjoin a *shit ton* of your products. I mean, they probably won't, they would probably just get some huge judgments, but it's big enough that you'd try not to use React. Source: the exact situation you described is my job.
Not in this case. You're doing everything in function calls, so nothing enters the global namespace, anyway.
It's actually super productive. Open Source software has the benefit of being super democratic, and when people don't like one solution (for technical or political and social reasons) they are allowed to try- or make- others. This is one of the most productive possibilities out there. It means software doesn't stall when the project leads disappear or start blocking progress, and even in cases where it results in multiple packages that do the same thing the original package can benefit from the ideas brought up by the new ones. People have bitched about NPM for awhile, and so some people went and made a cool replacement. Now if NPM wants it can take some of the ideas and try them out themselves. What would be unproductive would be to simply not build new tools where old ones exist- the result of that would be a horrible lack of progress. If everyone adopted your viewpoint the world of software would be a bleak space. Who needs Linux, we have Unix! Why build NGINX when Apache exists? Why build python when we have C and Perl already? Well, it turns out that it's possible to learn from previous projects, and sometimes it just makes sense to start new ones.
I see it just fine, but here you go: &gt; &gt; Facebook React.js License &gt; &gt; September 29, 2016 &gt; &gt; Robert Pierce &gt; &gt; I recently reviewed the license documentation applicable to the React JavaScript library. The library provides a web user-interface function allowing views for HTML data. Facebook maintains the library as a project on Github, and it offers licensing documentation for the library on that site. &gt; &gt; I’m critical of the license approach used by Facebook for React for at least three reasons. More on that below. But since Facebook’s approach is unconventional, I first offer a brief explanation of the history and substance of that approach. &gt; &gt; I. History and Structure of React Licensing. &gt; &gt; All I know about React licensing is what I’ve seen on the Internet– notably, on Wikipedia.org. &gt; &gt; Initially, in May 2014, React.js was offered under the Apache License, v. 2.0. &gt; &gt; In October 2014, Facebook changed its licensing and began to offer React.js under the BSD License. But, unusually, in addition to the BSD License, Facebook issued an addendum-like document titled “Additional Grant of Patent Rights” that gave an “additional” license to use the library under Facebook patents. Even more unusually, this Additional Grant of Patent Rights included a termination provision that stated, in part, that Facebook’s grant of patent license would terminate if the software licensee were to initiate or participate in certain patent infringement lawsuits, including, filing any patent lawsuit against Facebook or its affiliates. &gt; &gt; Apparently in response to criticism, in April 2015 Facebook issued a second version of the Additional Grant of Patent Rights that softened the termination provision to say that the React software licensee would not lose its right to use the software under Facebook patents in the special case in which the licensee brings a patent lawsuit that is a counterclaim against Facebook or its affiliates that is unrelated to React.js. The second version of the Additional Grant of Patent Rights, in addition to the BSD license, is what governs use of React.js today. &gt; &gt; II. Criticism. &gt; &gt; A. The Additional Grant of Patent Rights in Unnecessary. &gt; &gt; It is unknown to me why Facebook issued an Additional Grant of Patent Rights in the first place. If Facebook was trying to make developers feel better by publishing an express patent license grant, then their effort was unnecessary. To the extent it created complexity and questioning, it was misguided. True, the BSD License does not explicitly state that the licensee receives the right to use the licensed software under the licensor’s patents. But I’ve never heard any lawyer postulate that that document does not grant a license to fully exploit the licensed software under all of the licensor’s intellectual property. Anyone who pushes that view is thinking too hard. &gt; &gt; Similarly, I’ve never heard of any BSD licensor claiming patent infringement for any use, distribution, or other exploitation of software it has offered under the BSD License. That would be very strange. Developers-licensees (or, more to the point, their lawyers) have traditionally been very confident that the BSD License does not leave room for a licensor to successfully sue under patents. &gt; Facebook’s Additional Grant of Patent Rights does not add anything to the simple and heavily relied-upon BSD License. &gt; &gt; B. Facebook’s Licensing Language is (a bit) Inelegant. &gt; &gt; I’ll say upfront that my second criticism of the Facebook Additional Grant of Patent Rights is pretty wonky. Perhaps I’ve written too many software licenses, but here it goes. &gt; &gt; You will note that the Additional Grant of Patent Rights uses the defined term Necessary Claim, which it defines as follows: &gt; &gt; A “Necessary Claim” is a claim of a patent owned by Facebook that is necessarily infringed by the Software standing alone. &gt; &gt; The document then grants rights under only Necessary Claims. &gt; &gt; The defined term “Necessary Claim” is, err, unnecessary to the purpose of the Additional Grant of Patent Rights. The document would be more economically, and thus more gracefully, written if it simply granted the right under all of Facebook’s patents to exploit the software. Indeed, version 1 of the Additional Grant of Patent Rights did just this. &gt; &gt; Put another way, the Additional Grant of Patent Rights, although a patent license, is still only a software license. There is ordinarily no reason to define the licensed patent claims in a software license grant because the behavior one wants to license is bounded by the software itself. Expert technology licensing practitioners will note that the “necessary claims” or “required claims” concept arose in the practice of granting patent rights to implement written technology specifications (not software), where it is more important to carefully bound the scope of patent claims under which permission is granted. &gt; &gt; C. This is Not Open Source Software. &gt; &gt; Facebook touts React.js as open source software. But in my mind the license termination provision of the Additional Grant of Patent Rights takes the offering outside the realm of open source software. &gt; &gt; The patent license offered in the Additional Grant of Patent Rights (v.2) is conditioned upon the licensee not bringing a patent infringement lawsuit against Facebook or its affiliates. Thus, the licensee pays a price to use the library. It is not a price paid with money. The price demanded by Facebook for use of the library is that the licensee refrain from exercising any of its patent rights against Facebook or its affiliates. &gt; &gt; I could be missing something, but I have never seen any other software license use such a condition and also claim to be an open source license. &gt; &gt; Importantly, one should note the breadth of the patent assertion condition used by Facebook. Facebook is not saying only that a licensee’s rights to use React will terminate if the licensee claims patent infringement by the React library itself. This more limited approach, in my mind, would not disqualify React licensing from open source status. An open source licensor may employ a non-assert condition if the spirit of that condition is to protect the integrity and promote the use of the licensed software. But that is not what Facebook did. Instead, it wants to terminate its license if it is sued by a React developer under any patent. Facebook is using its publication of React source code as leverage to win some protection against patent lawsuits generally. In my mind, this is too greedy an approach for Facebook to claim open source status. &gt; &gt; I don’t know what the Open Source Initiative (OSI) has to say about the Facebook Additional Grant of Patent Rights (v.2), if anything. The OSI definition of open source may leave enough room for Facebook to validly claim open source status. But one would need to read the word “fee” in the first paragraph of that definition narrowly. &gt; &gt; I’d like to hear from anyone who disagrees with me. Corrections and differing views welcome! &gt; For the record, I disagree with his reading of the Open Source Definition.
easy tiger. they have a ton of issues already. the hard part in software isnt building it, its community and maintenance.
Aren't they really one in the same? I was under the impression that this was an issue because Facebook claims patents on certain parts of React. If you were to lose the ability to use those patents, you'd effective lose the ability to use React since it makes use of those pattens.
Are you familiar with the left-pad/npm/kik issue? Kik came over and asked some dude to remove his package, threatening legal action if he didn't. He refused, so Kik then went to NPM directly. NPM forcibly removed the package from the NPM repositories and gave the package name to Kik. As a result the package developer decided to no longer host his packages with NPM. When NPM wrote their blog post about it they stood by their decision to steal the package name from the original developer and give it over to Kik. NPM made a horrible decision back when they started not to use vendor namespaces, as many other package managers do. To be fair that's the real technical solution to this problem. That alone is a technical issue, but they've compounded it by writing a name dispute policy that favors companies over individuals. That is the issue I am referring to, as well as the fact that they doubled down on that policy after the Kik/Leftpad incident.
I was in the jQuery camp for a long time (5 years maybe), and in the last couple years tried out some of the newer frameworks. At this point there is no way I would go back for a big application. For simple things, I don't see anything wrong with jQuery at all. I think the appeal with jQuery is you hardly ever need to think abstractly about what you're doing. So for smaller applications that's good because you can look at 50 or 100 lines of jQuery and know immediately what is going on. But jQuery itself doesn't encourage you to write in a specific way, which isn't a bad thing, but tends to lead to very undisciplined code--stuff that is fine to write once, since you can see it working right away, but that takes a while to get refreshed on when returning to an old part of the code. 50-100 lines of jQuery is no problem. But anytime I see 1,000 or 10,000 lines of jQuery I know I am going to have to read a lot of code, because it tends to intermingle in ways that are not always obvious. Sometime last year this article got me going with React: http://reactfordesigners.com/labs/reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by/ I only mention React since it's the framework that got me away from jQuery at first, but I'm by no means a huge fan like so many React developers are. There are lots of other view libraries out there, though. For what it's worth, my personal choice has been mithril.js. Anyway, back to React: right off the bat, I disliked JSX, disliked transpiling and having separate src/ and build/ folders, and missed the template syntax I'd already learned (Jade). I still have those gripes about React, but have to admit it changed my approach to building web applications. And the approach that just comes with using React in the way all the tutorials/docs suggest is one that scales really nicely as applications grow. The same is true with Mithril, Inferno, Vue, a bunch of the others. The last Mithril project I worked on had ~15k lines of code, excluding vendor code, and that was about 4 months ago. A week ago I went in and made some changes, and had no trouble changing an important part of the site. I could not say the same for some of the jQuery projects I have worked on in the past. edit: I've also learned a lot of js just by not using jQuery as much. I used $.each, $.ajax, jQuery's events and other features as a crutch for way too long. It's worth learning things outside that ecosystem even if you plan to keep using jQuery.
My biggest complaint is that they changed the names of the commands (eg, `npm install --save package` became `yarn add package`)... It's a (very) minor thing, but I feel like they should've made it so you can just replace the word `npm`with `yarn`. Other than that, working well so far, but it's only been one day!
I'm not sure what you're getting at. This particular post is about comparing performance and install time of yarn and npm.
My co-worker mentioned that he has seen problems with variables clashing. I believe it happened when the files were concatenated and minimized. Not sure how that would happen exactly. 
YESSSSS
I know that. He's talking about getting rid of NPM.
This just in: Yarn is not cool anymore, it's all about pnpm now. Get with the times, people!
Don't worry. If a big player wants to sue you, you're screwed anyway.
I saw the same situation. Also noticed that yarn would result in node_modules being 100MB larger and having 15,000 more files.
This looks cool. What do people use this for? A quick hobby project? Internal tool? 
Personally I use it in a client's site where they wanted to update their class list without having to code and they already had a basic site built. Almost everyone can use google sheets for basic tasks so this is a quick way to use it as a cms. It would be great for internal tools, sites where hosting isn't an option or a collaborative project site. Using google sheets as a backend isn't a new concept. I know of a few people who use proprietary tools to build simple apps for churches, education, etc. This just makes the whole process a lot easier and doesn't cost anything. The google sheets api can be a bit daunting for new users.
Do yourself a favor and compare the npm codebase to yarn in github. Then ask yourself if you really want to go through the process of refactoring npm's code 
If you really wanna be nit picky about this then IIRC aren't most, if not all programming languages boil down to machine code? If so, then aren't they all just doing the same thing and just claim to be better at something than the all the rest? And each programming language just differ in implementation but the end result is the same. This also applies to Yarn vs. NPM comparison, they differ in implementation but the end result is the same. 
Can some team members use Yarn while others can continue to use npm?
It took me so long to master CSS, and still to this day it surprises me every once and a while it's completely illogical. Not to mention the differences between CSS on different browsers is way more vast than JS.
&gt;When something can be implemented as a minor update without disrupting the community, it's rather self-centered to make your improvements a new project. It's probably good for this team at Facebook getting their names out there, but it's not good for the community. Then Mozilla or some other organization should've done it. This has been a problem with npm for years. It's simple economics. Facebook isn't going to sideline talented devs and waste orders of magnitude more time/money trying to fix a nagging problem no one else wanted to fix. Facebook disrupts. Javascript has never been a unified, monolithic community with an appointed benevolent dictator/organization for life. It's always been a rapidly evolving, somewhat anarchic loosely coupled union, which is part of its charm and responsible for its growth. That's why you see so many similar projects with maybe one or two new core features but an updated and very sexy UI, which does matter. If you want to get your name out there, it definitely is the language to do so. I wouldn't call if self-centered though, it's just a different way. I prefer to let it develop along its current path, with people being inspired by one-upmanship and competition. Javascript and the devs who practice it have always been derided and looked down upon by systems programmers as being script kiddies, not real programmers, people who are only there to make things look pretty, etc. Is it any wonder that they eschew the traditional dev community? I only have 4 years of experience, so I may be blowing hot air, but I don't think too many people would like it if there was some movement towards a unified, monolithic community and a benevolent dictator/organization for life. Like it or not, a lot of people are inspired to make projects to get their name out there. Silicon valley types are care most about the almighty dollar. I didn't mean to come off as snarky in my previous reply. You seem like an intelligent, mature developer. Is it really so bad if JS remains this why? It is the red-headed step-child of the dev community after all :)
I was so confused for a good amount of time before realizing there's a thing called YARN that isn't the HADOOP resource management
Nice demonstration of using the TS API - apart from the fact that the samples use tabs over spaces. ;)
Is it developed by Facebook? It can't be cool if it isn't developed by Facebook.
&gt; However, I am strongly for a unified community that lifts up its pillars and reinforces/bolsters our standards. I am your antithesis! :D Javascript has never been a unified, monolithic community with an appointed benevolent dictator/organization for life. It's always been a rapidly evolving, somewhat anarchic loosely coupled union, which is part of its charm and responsible for its growth. That's why you see so many similar projects with maybe one or two new core features but an updated and very sexy UI, which does matter. Javascript and the devs who practice it have always been derided and looked down upon by systems programmers as being script kiddies, not real programmers, people who are only there to make things look pretty, etc. Is it any wonder that they eschew the traditional dev community and its standards? And the Silicon Valley mindset is ever present. People want their mega-millions, not the adoration of the dev community :) 
Deployments are the real reason. Facebook deploys a lot, so 2 minutes adds up. 
Have you tried to use emscripten? I don't know mutch about python but i'm pretty sure it can compile python to js. Also, wouldn't it be easier to rewrite that script using JS or maybe coffeescript? I really don't think you should use python to write a web app.
porm
Thank you. I'll do that later. I'm in class atm
Have you tried running each command without fancy progress bars? I heard some crazy things about performance gains from disabling the progress bar with `npm install`
I will look into emscripten. I could look into converting the script into JS. It is a pretty extensive script. That being said it could probably teach me a lot be rewriting it. 
&gt; For example, this video's project had 18178 JS dependencies. But big libraries with everything bundled is *potential bloat*. It's much better to have your dependencies declared at function level! I guess this is where theory and practice starts differing and trying to reduce bloat actually causes it instead :)
npm@2 is an order of magnitude slower than npm@3 in projects with many dependencies
Why are you counting node modules? It's a portable build system containing tools, modules, full sources, distributed sources, documentation, tests, assets. Modules have their dependencies declaring theirs and so on. Like dlls in Windows with the distinction that source comes along. Scramble through /redist in VisualStudio or Cocoa and you get the same. The build that you create in the end only has what it needs. You upload it and that's that, node_modules doesn't go anywhere. Contrast that to your script includes, where you use 2 functions from a library but get 100KB added to your pageload anyway for the 1000 functions you didn't use, and you couldn't help it.
That's fair; unfortunately GitHub's never given great control over that sort of thing and just defaults to something like 8 spaces per tab.
That update/upgrade thing will never settle in my brain. In every package manager it means something different. I always confuse it in brew, npm and apt-get. Also in their [documentation](https://yarnpkg.com/en/docs/migrating-from-npm) I failed to find an equivalent of `npm start`. Anyone knows how to do it with yarn?
Fair enough, hadn't thought about that.
My off-topic question would be: Smooth scrolling in Atom. How?
No yarn xmas? The hype train is dead, go back to npm folks.
Nope, it's actually faster. For our project at work with a ton of dependencies I would say npm@2 was 2 times faster at least.
When I measured a install for my work website, npm@2 would take ~25min vs npm@3's ~5min. It's worse in one of the older ci servers; installing from a clear cache, npm@3 would take ~8min, npm@2 would take ~50min and then crash.
&gt; Oh, I thought you meant you would add it afterwards if you needed it. I try to avoid it if possible.
Ah yes, good point. Thank you! :)
Not for me. If I want to do some easy DOM manipulations I just use pure JS with its modern selectors. CSS (perhaps, with bouncejs) for animations, fetch (polyfill) for network requests. Why would I need JQuery? It was relevant when IE had some considerable market share.
Would be nice to see any example. For now, there are too few clues how to use this tool or what is it for.
Motivation?
Yes, Oracle have a node driver, i know, but the problem is that you need to run python 2.7 on the computer, and the computer where this application should run doesnt have python and sth. It just has to start and work well, nothing to install at the customer.
You can update npm independently from node as well, through `npm install -g npm@latest` Since this is comparing it to the bleeding edge tool yarn, I don't really think that argument should be relevant.
that considering that the packages were cached before
&gt;Many of Yarn's improvements can be just a minor update to NPM oh yeah? so why didn't they update it then? or why don't you submit a PR?
Because I'm not the one complaining about NPM. It works fine for me as is. But fragmenting the package managers is not fine with me. Therefore that's how my opinion is formed. See? 
so if my company doesn't deploy as much as facebook (which it doesn't, and neither does yours), we don't need any of this shit?
I wonder which part of Defender affects performance that badly.
I'm not familiar enough with Oracle DB to know whether that will just be a generic requirement across other potential drivers as well. Are you sure Javascript is going to be the right technology for this? Perhaps Java might be a better fit?
I cant wait for next mondays package managaer. 
This was definitely [an issue](https://github.com/npm/npm/issues/11283), but it got fixed a few months ago. As long as you're running any version of npm &gt;= 3.10.0, the progress bars should not have a noticeable impact on your install times anymore.
*The Current Version of JavaScript
&gt; Pick a fucking standard. I wasn't referring to the post. I was referring to the parent comment.
Beause Redux is not universal library for everything (like jQuery), but purpose of Redux is solely to keep state of your app ("Redux is a predictable state container for JavaScript apps"). 
If you have a CI/CD process, this absolutely does matter. Builds happen for every commit, every pull request, every deploy to every environment. When you're working in an agile environment, you absolutely will notice if a build takes 5 minutes versus 2 minutes. You shouldn't need to walk away from your computer and take a 10 minute break while you wait for a commit to make it up to a development environment before you can move a ticket along a kanban board. It's disruptive. That said, as someone who works for a company that absolutely does see impacts from build times, I'm least excited about the performance improvements of Yarn. The way it handles dependencies consistently and focuses on caching is far more interesting and beneficial to any team environment, whether you're using a CI/CD process or not. Also, it's kind of offensive that you are projecting what seems like your own job dissatisfaction onto others. There are many people who work for companies like Facebook, or even Facebook themselves, here on Reddit. Nevermind the size and scale though, just because Facebook has one of the largest userbases in the world doesn't mean that they are the only company out there that requires streamlined development processes. Our company's development department has less than 20 devs and we still care greatly about deploying efficiently and consistently through all environments. 
In order to contribute TO you must build AROUND. 
I can add it but i preferred to write a real world example in place to show how its actually useful. The sharing code part can easily be explained. For example if i had a counter and a calculator both can execute the AddCommand to increment their sums without the need for the Calculator to inherit the Counter.
go substack
Hey, just stumbled upon this. It's my post so I'd reply: The post isn't about the mechanics of making a request, it's about how async operations fit into the Redux architecture and why "special support" on part of Redux is **not** required. Read the article, don't limit yourself just to the title :)
Frankly, not that much. I'd still use a transpiler &amp; core.js, if only for supplementary edgy features (mainly object spread), and I already uses flexboxes all over the place. I wouldn't have to worry about IE, but we're already following the "IE layout bugs are not bugs" rule, which greatly helps.
Nice work dude :)
Well, the current is ES2016 (ES7), so it's actually the previous version of JavaScript.
Thanks for reply
Just note that if the user should be able to change his password then JWT requires some manual housekeeping as you somehow have to keep track to invalidate the old token, how? With a database? Well... 
Because they use cloudflare cdn, which results in faster downloads because the files are coming from a local server to you and not across the world. Helps immensely in download times.
if you really need active connections to all those services there are a few options. before i get to that i'd ask if you really need a persistent connection to every one- use a regular http call if you can... if you have a true need then there is a common pattern: you build an aggregation server to stitch together all your services. its basically a proxy that sits between a client and the rest of your microservices. that way your client makes a single connection and the requests are routed to the various services from that proxy service.
I know this is a javascript subreddit but must you really use javascript for this task?
I don't understand how you can't switch. Every package manager for node is designed for some level of compatibility with npm. Yarn happens to make it priority #1 that nothing breaks.
IMHO (session) cookies are still more secure than JWT, because they are not vulnerable to XSS (session stealing). JWT may only be really helpful, when doing cross-domain requests. See my blog post about this: http://tqdev.com/2016-javascript-web-token-security
Nothing would change. You should always design toward standards, not browsers. What would you do if, next year, someone comes in and says you all have to use Firefox for whatever reason? Or that browser vendor doesn't matter? I promise you this. Some time in the future, something like that will happen, and your name will become a curse word.
That would be... not so nice, actually. Developers would so much depend on non-standard implementations that it would create a niche, like IE did back in the days.
&gt; NPM forcibly removed the package from the NPM repositories and gave the package name to Kik. Except they didn't. They removed the listing and gave the name to Kik, but left the published kik package in the registry so any existing dependencies would not be broken. Azer then removed all his packages himself.
Bingo. Javascript doesn't exist solely in the browser. We're seeing it in VR, Xbox apps, Mobile phones, Apple TVs, servers, native desktop apps, and more. All lack a DOM.
My company makes some internal tools that only have to support chrome. The only major change, aside from less testing and supporting old IE, is I can use modern css features that are standard and not really polyfillable, like flexbox for layout things. The js probably would not change much.
S11 will support fetch. The blob stuff seems to be supported. http://caniuse.com/#search=blob Still, Safari is currently the browser which is most lagging behind.
I'd still use Dart or TypeScript and test with Firefox and Chrome. Testing with at least two modern browsers (with different engines) is important because it's easy to accidentally write code which relies on unspecified behavior or nonstandard features.
You can write them all in the same code repository, perhaps within separate subdirectories, perhaps not. `node auth-service.js` to launch the authentication service. `node shop-service.js` to launch the shop service. Etc.
If it's a new project, I wouldn't immediately jump to microservices. For a new project, you'll probably need to iterate quickly, do large refactors etc., and if you have a bunch of microservices that's a bit tricky. Especially if you find flaws in your early domain model. Instead, structure your application so you can easily move to microservices in the future, when you need it. So you'll still have an authentication module, shop module, inventory module, etc. But instead of REST calls to communicate between the modules, just do normal javascript function calls between them. Instead of a network boundary, you'll have a logical boundary. After a few iterations when you're feeling confident you've Got Things Right, then you split out some microservices. See also http://martinfowler.com/bliki/MonolithFirst.html 
Isn't it blob constructors that don't work? Something to do with creating them
but why not just use the vanilla? 
More or less if you dont use shrinwrap (90% of community does not - lets face it) there is little or no gain really even with CI/CD. Unless you do crazy amount of builds (hunderds of open branches etc) then shaving of those few sec has actually value in grander scale (if as some of those tests show, you actually shave them off) 
Looks great! Mathematics sure is pretty!
was the whole purpose of yarn's creation to speed up installing/updating packages? what are the other benefits?
Angular requires jQuery, that is of course you're talking about Angular angular and not **ng-C#JS.net**
npm is a disaster as a package manager. By default it excludes dev dependencies which is what you need most of the time, it has no lock by default (how many people know about the shrinkwrap?), installing a dep is not added to the package.json by default, the install is not deterministic and npm install with shrinkwrap still takes a lot of memory and is slow as hell (where you would expect it to be extremely fast: you have no resolution to do and the content downloaded should be cached). It's better than nothing, and it has been a great asset, but it's not good enough to push best practices and stability. And I must say I find worrisome that quite often some npm releases have been done while some issues reported as critical have not been solved or even the fact that there is over 2K issues open.
I believe that commit exists because the project was started at facebook and they have a template they use to get boilerplate out of the way, and was just removed while in private dev when the collaboration began. 
[yep](http://imgur.com/a/wYJhi)
yeah I know, but I am full of hyperbole. 
You can't load files if you run the code from file (file:///) you need to load it via http. 
&gt; You can also change the secret key used to validate the JWT, which would only be valuable if you have a key on a per-user basis. And would you know which user is that if it was not saved somewhere in db? List of invalid tokens seems most reasonble. As well as some hashsum for easier search. Most important valide token authentificates you but do not authorize operation ----- Ow actualy if you have RSA signed one you can store date of last password update and compare with your user date - if its different token is aint valid ;]
Do they give you socks with Wombats pictures? Do they have cutesy graphics with multi sexed multi cultural all inclusive people on it?
Not really, unless you use plain http, but then you are in deep whole anyway. Nobody said you can not store valid ip's in RSA encoded JWT.
You are wrong in this, I know this for a fact as I read it on the internet.
Hold your horse, the jury is still out on yarn. Also the parallel between yarn and pip is false: pip is supported by the Python Package Authority while yarn is not affiliated with NPM. 
Especially since most of these packages have so much shit and cruft in them. I find whole test suites and all kinds of data and support code in there; people just publish their whole repo content to NPM.
well, you can make one main process, and then make all of subprocesses as kids. This way if master goes down, whole thing restarts. If child goes down, master can restart. My personal experience is that its good to delegate specyfic tasks to specific processes, but that does not really mean you have to write separate software and control it. Now those spawned nodes can either work with each other (being parent acting as relay or having separate center to communicate) or be part of larger scaled architecture. This also means you make once config, that is spawned to children, you can reuse heavily modules etc
Did some research on this. Looks like there's three aspects: - Downloaded packages automatically get placed in the global cache folder - Based on the tests, you can add a `.npmrc` file with a `yarn-offline-mirror` path. Yarn will presumably copy packages into that folder, which could be checked in (similar to how https://github.com/JamieMason/shrinkpack works). See [this test file](https://github.com/yarnpkg/yarn/blob/0f1db96846badbbe3b43c470c05196eb29437fb4/__tests__/fixtures/add/install-deterministic/.npmrc) for an example. - The `yarn pack` command also appears to generate a single combined tarball of packages, presumably relative to the project Note that I have not yet actually tried this stuff out yet myself. Hoping to play around with it in the next few days.
Spin up a local server. https://www.reddit.com/r/learnjavascript/comments/57aty1/environment_for_learningpracticing_ajax/d8qhii1
[removed]
hmm.. HTML support would be awesome!
[removed]
I know back ticks are used in ES6 template strings now, but what's with how they are being used in the WebpackBin example? What does this mean? ``` const Wrapper = styled.section` padding: 4em; background: papayawhip; `;```
These are my favorite projects to make in js
This makes it sound like the npm registry isn't hosted with a major CDN, which it is.
clicks out for Hararnbe
Think of it in terms of "what can I do". Coding is just like playing a guitar, easy to learn and impossible to master =&gt; Your knowledge of JavaScript is not a benchmark of where you fall as a developer (often a mid-level developer will know more or less JS as a senior/etc). In a work environment, it's more like this: Junior: writes sub-portions of apps, not expected to have all the answers, has good general knowledge of processes/development, is constantly learning/improving skillset, lacks overall experience in actually delivering assets/product, etc. Mid: writes a few apps a cycle, can work with limited supervision, has thoughts/suggestions on design/environment/etc, understands/practices modern development practices, takes on full projects (but they are generally smaller in scale compared to senior dev projects). Senior: Not only regularly writes apps during cycles, but he/she is also the SME for your development group and regularly weighs in on design implementations, mentors younger developers, brings in new technology to the group, works with other partners to determine feasibility of projects, etc. Can generally be dropped into any work-environment and quickly catch him/herself up on any gaps in tech-knowledge. These are of course just general classifications, how heavily each of these apply greatly depend on your team-structure and environment.
Web-based Xbox apps have a DOM. At least HTML5 UWP apps do anyway.
IE8 here you lucky, lucky bastard! ;)
nice job!
It's not really about a measurable difference in programming skill. If you've worked as a junior dev in teams and ended up leading them and providing software architecture input, you might be a senior dev.
Doesn't seem to be doing anything for me on Chrome 55.0.2880.0 on macOS 10.12
This isn't an issue that you can disagree or agree on. You are either wrong or right. They tried to do what they did within the framework of the npm client and *couldn't* because the way things were done boxed them in. Bottom line, you can't make a square wheel round. So they made a round wheel. Sometimes, although infrequently, starting from scratch is the better choice.
It's important to distinguish between web *sites*, where people go to read things, and web *apps*, where people go to do things. For sites, traditional progressive enhancement still makes sense. You don't need CSS or Javascript to simply show text, images, or video, so requiring them feels wrong. For apps, though, this new "offline-first" version of progressive enhancement makes a lot more sense. The only way to make a web app work without Javascript is to turn every action into a server round-trip. This is slow and bad, no matter where you live. Requiring Javascript is the only sensible way to solve the problem.
Even for JS that's meant to run in a browser, there's plenty of code in modern applications that has nothing to do with touching the DOM. You could use a framework like this, for instance, to test reducers in a redux app, or some other kind of business logic that's abstracted from the DOM.
I only have experience with WinJS Xbox apps using Angular on top of a WinJS wrapper. The DOM there isn't true DOM. But cool! Didn't know there was HTML 5 Xbox apps out there.
&gt; This is slow and bad, no matter where you live. Requiring Javascript is the only sensible way to solve the problem. I was with you until here. These statements are hyperbolic and don't add anything to the conversation. Round-trips to the server aren't bad; it's simply another way to solve the problem. Likewise, requiring JavaScript because of a preconceived notion that it's the _only sensible way_ to solve a problem is not only hyperbole, but stating this demonstrates an extremely narrow vision of how to build software. JavaScript isn't always right, and many problems can be solved without it.
Why would you use stringly defined function names instead of either named references or an object onconaining functions? Doing it this way is ask for your code to break upon minification.
Maybe it's a little hyperbolic, but I am thinking about the kind of web apps that were built back in the late 90's, like the original Yahoo Mail. To do things, you either clicked on hyperlinks or submitted form fields. It *was* slow and bad, since every action required a full page reload. But, without Javascript or CSS, this was literally the only way to change things on the page.
Oh yeah I'm already iterating, a lot. All only on client for start with global logic. Now doing a single server and moving some front logic to the back. I'll do it step by step x) The thing is (I probably didn't explain it well) all services won't have to communicate between them, they can be completely independent (looking for data in DB, and session in Redis). So this is easier I guess. Thanks for the link, checking it!
Ah, yeah! That's exactly the kind of tool I'm looking for, thank you for the link. It looks like ast-query is assuming you're starting from source, and not necessarily building it from scratch. And I'm not sure how complete it is, looking at the README. I'll poke around in the source.
Heeeee I think about this but don't know how can I configure this with my host. (it's generating containers). I'll ask, if this feet it's great !
That looks like it should go to formtest.php if the user clicks yes on the confirmation box.
I would use KeyboardEvent.key and KeyboardEvent.code: - https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key - https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code And also CSS variables, service workers, native web components (native shadow dom). And other good stuff.
css variables?
Why would you use Windows, though? Any respectable programmer would use an UNIX system.
For real. Btw thanks for horford, kind hawks fan!
How can you block the UI if there's no UI to begin with?
Well, I don't know of such a library. If it were me, I would generate hs files using standard string operations with the new backtick strings. I would avoid putting js in attributes, even injecting a script at the bottom and hooking into items would be better.
Due to security implications, the browser is essentially sandboxed. Any code running in the browser can't access any files on the system. You will need to request the file and work with the data.
https://www.youtube.com/watch?v=ujkc4tOlnRQ&amp;feature=youtu.be&amp;t=15
https://api.twitch.tv/kraken/streams/aquadragon33 Maybe Twitch changed how this API works?
Hmm unfortunately removing the surrounding code on it doesn't appear to resolve the issue. If that was preventing a successful load, my hunch would be that removal would resolve it.
He constantly contradicts himself. &gt; the “HTML-first” approach has become almost completely obsolete (with the minor exception of server-side rendering) How is that a minor exception? Server side rendering IS HTML-first! He keeps saying that it's fine sites shouldn't work without JS, but server side rendering means that the site DOES work without JS. 
That's pretty fantastic. Great work!
SSR doesn't mean that the core functionality is available without JS. In the case of the app-shell model, you can do SSR for the shell, but the content still requires a spinner. Or you can also SSR the inside of the shell in some cases if the data is relatively static or you know how to transfer state from client to server (e.g. via cookies, Ember FastBoot does this), but that still doesn't guarantee you can actually interact with the page once it's loaded in no-JS mode. E.g. my https://pokedex.org app does SSR for both the shell and the content, but I didn't bother to make anything else work without JS because I don't think it's important. So you can view the page but can't click anything.
His submissions over the past couple of weeks have been primarily focused on this lib, but before that he had a fairly diverse posting history: domain submitted from|count|% :-|-:|-: [github.com](/search?q=%28and+site%3A%27github.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|14|22% [codepen.io](/search?q=%28and+site%3A%27codepen.io%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|9|14% [pakastin.github.io](/search?q=%28and+site%3A%27pakastin.github.io%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|5|8% [frzr.js.org](/search?q=%28and+site%3A%27frzr.js.org%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|5|8% [deck-of-cards.js.org](/search?q=%28and+site%3A%27deck-of-cards.js.org%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|5|8% [jsfiddle.net](/search?q=%28and+site%3A%27jsfiddle.net%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|4|6% [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|4|6% [freezer.js.org](/search?q=%28and+site%3A%27freezer.js.org%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|3|5% [youtu.be](/search?q=%28and+site%3A%27youtu.be%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|3|5% [redom.js.org](/search?q=%28and+site%3A%27redom.js.org%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|3|5% [survivejs.com](/search?q=%28and+site%3A%27survivejs.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|2|3% [bombsweeper.js.org](/search?q=%28and+site%3A%27bombsweeper.js.org%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|2|3% [youtube.com](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% [worker-example-pakastin.c9users.io](/search?q=%28and+site%3A%27worker-example-pakastin.c9users.io%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% [vimeo.com](/search?q=%28and+site%3A%27vimeo.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% [forwardjs.com](/search?q=%28and+site%3A%27forwardjs.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% [ponyfoo.com](/search?q=%28and+site%3A%27ponyfoo.com%27+author%3A%27pkstn%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% [self.javascript](/r/javascript/search?q=%28and+author%3A%27pkstn%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|2% subreddit submitted to|count|% :-|-:|-: [javascript](/r/javascript/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|29|45% [webdev](/r/webdev/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|22|34% [vanillajs](/r/vanillajs/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|6% [freeflight](/r/freeflight/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|5% [InternetIsBeautiful](/r/InternetIsBeautiful/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|3% [docker](/r/docker/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [mobilewebdev](/r/mobilewebdev/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [html5](/r/html5/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [oddlysatisfying](/r/oddlysatisfying/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2% [gaming](/r/gaming/search?q=author%3A%27pkstn%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|2%
While I agree shameless self-promotion is annoying, I can at least see where he's coming from... If you spend so much time building something you're going to really want people to use it. But again I agree this isn't helping.
you mean "what does it feel like to develop internal apps?" flexbox is really the greatest part of it. the js stuff isn't that much different with transpilation. but flexbox makes layout so easy you almost dont have to think about it.
It's possible in principle to selectively erase by overwriting or xoring, but that worked poorly when I tried it, because of alpha blending and antialiasing.
You could just have a loading screen while data is getting fetched, but once the data is there it's like 10ms to render the UI. Anyways, you can always render the first stretch and then do XHR or WebSockets for the rest of the communication. 
Trust me, I know that, but unfortunately I am in this situation now.
No. Not really. That is what records (objects with just data) or tuples (fixed sized arrays) are for. IMO any immediate value this may bring you now, it more than likely a huge cost in the future. You can fake something like this though...Because we have First class functions you can make a special compose that will take 2 functions f and g and return a function. const nastyCompose = (f, g) =&gt; (...args) =&gt; f(...(g(...args))) const f = (x, y) =&gt; [ x + 1, y + 1 ] const g = (x, y) =&gt; [ x * 2, y * 2 ] const notGood = nastyCompose(f, g) But to be honest this is really bad form, you may as well use compose and use a record or tuple. If you go this route, you will lose the ability to use partial application and oh man without type checking, you are going to be prone to introduce errors on even the slightest. Even though I gave you code to do so, you really REALLY should not.
hmm okay. The only thing I can think of that works is this: let data = [1, 2, 4, 6, 0, 5]; let template = { min: null, max: null }; const min = (...args) =&gt; { let prev = args[0]; let curr = args[1]; if (prev.min === null) { prev.min = curr; } else if (prev.min - curr &gt; 0) { prev.min = curr; } return prev; }; const max = (...args) =&gt; { let prev = args[0]; let curr = args[1]; if (prev.max === null) { prev.max = curr; } else if (curr - prev.max &gt; 0) { prev.max = curr; } return prev; } const wrapper = (...args) =&gt; { let returnData = min(...args); returnData = max(...args); return returnData; } let returnData = data.reduce(wrapper, template); log(returnData); But I really don't like how the wrapper is written.
That function would be aware that it take a record or tuple and will parse as expected. You can use destructuring to pull it out const recordFunc = ({x, y}) =&gt; { x: x + 1, y: y + 1} const tupleFunc = ([x, y]) =&gt; [ x *2, y * 2 ]
Heck Yeah, give me a few and I will pound it out...To bad you are a rando on the internet, would be easier to just pair. HA Give me a few!!
I love it!
This looks awesome! Can't wait to try it out at work tomorrow! Edit: The only thing this project needs is a "Buy the developers a cup of coffee" button. This is the best thing ever.
Why not something like: const data = [1, 2, 4, 6, 0, 5]; const initialState = {min: null, max: null}; const computeState = (state, next) =&gt; ({ min: Math.min(state.min, next), max: Math.max(state.max, next), }); const newState = data.reduce(computeState, initialState);
While it is correct, I would feel worried about null not being a Number Edit: For example: Because of coercion this provides a value of 0 when it should be 4: Math.min(4, null) Which is a bug...Infinity is a better choise for your empty (or initial as named above)
I never really understood the Passport middleware. I used it.... It worked but I was mostly just copying it from other code because that's what everyone did. If I can encrypt the password then why exactly do I need a seemingly unnecessary piece of code that's just confusing lines of if statements and random 'done's.
Awsome..
How did you get enough JS know-how to do something like this? And does it require understanding of things beyond JS, like polygons or pixel shaders or some such other shit?
Awesome! I forked your thing and applied a Fermat spiral. http://codepen.io/gunderson/full/ozrLyZ/
I'm going to read this. I didn't notice that there was a link to your post. When I read "Why doesn't Redux support AJAX out of the box?" I assumed that was just question asked by one of user. 
Its the same as with input type="file", where you cannot set value programatically due to security reasons. If you are able to trigger context menu, you could potentially click on menu items on user's behalf.
Oh meeeeeeeeeeeeeen this is amazing. I'm trying it right now !
Java maybe fits better, but the problem here is that we cant install Java on the computer. The application has to run for itself, without ANY pre installing software (like Python, Java). 
What do you would choose? We cant use c# cause we cannot run .exe on Linux. 
Yeah, but, but, can you save stuff to a database? Because I can!
Can be done, you'd need to compile a different variant for each OS though.
Honestly I would use C++ for a performance measuring tool (not saying that its not possible using javascript), you can use CMake for cross platform builds. Oracle provides a c++ call interface for c++ too. Although you would end up compiling different variants for each os so as to not install anything else.
Have a look into trigonometry, Pythagoras; specifically for coding and animating. 2d Vectors, etc.. This is a fantastic resource I used to get started by Daniel Shiffman. http://natureofcode.com/book/ It's free to read online and easy to follow. 
I removed the post, sorry for spamming
Although I did make a total rebranding of the site and thought some might find that interesting. But it's more of matter of design, not Javascript – you're right about that.
Although I did make a total rebranding of the site and thought some might find that interesting. But it's more of matter of design, not Javascript – you're right about that.
I will speak with our project team and boss, but its hard for us to learn a new language in this time, so we decided first that we use a language that we know:D maybe this was not the best idea...
but does it have an `xmas` command?
Yeah i thought so. Thanks anyways, i'll try to use a different mechanic for my context menu. 
Warning : Contains light effects, May induce epileptic seizures
Put all the script inside a function and then in the body use the event onload to call that function.
Honestly, you're probably better off just doing two passes over the list. const data = [1,2,3,4,5]; const minNum = min(data); const maxNum = max(data); The code is much simpler, and simpler is usually better. In this case it's also likely to be faster since: a) It'll fit into a few sequential cache lines and require no new allocations. 99% of the computation time will be spent waiting to get the data from RAM to the CPU cache. Once it's in the cache, the cost of iteration through it and accumulating a value is insignificant to the point that it's almost a rounding errors. b) Reducing with an object tracking two values means you're creating a new object each pass. Even if the JIT can pack this into a tight struct (I have no idea if it will or won't), you're still allocating new memory each iteration. 
yeah, but changing a value in a bar chart now requires redrawing the whole bar chart in an animation loop. It seems absurd that this would be faster than SVG, but thats what I'm soon going to find out. I just want to know that the "repaint every frame" is the way to go. 
http://www.w3schools.com/jsref/event_onload.asp
Looks good but I've never even heard of Crystal so the express project it's based on is probably of more interest to most of us here - [Exchange Rates streamed in multiple JavaScript Frameworks](https://github.com/paulhoughton/fx)
At the time you're querying the DOM, elements with those IDs don't exist yet. You can either put all scripts at the bottom (just before &lt;/body&gt;) or use the DOMContentLoaded event. https://developer.mozilla.org/en/docs/Web/Events/DOMContentLoaded
I'm not the person you're replying to, but SSR improves the perceived performance of the page - seeing a styled shell almost instantly "feels" faster than a blank white page followed by the shell + content, even if they both take the same amount of time to display the actual content itself.
&gt; Now that Angular 2 is out, a lot of web companies and enterprise companies are starting to adopt it. And when building new apps we will need to choose a backend to go with Angular 2. In this post I will go over some reasons why I think that the latest Firebase might be just as impactful in web development as Angular 2 itself, and why the two combined could be the best thing that happened to web development in a long time. After all the advances in technology, building web applications is still way harder than what it should be, but maybe not so much anymore if we can use something similar to Firebase.
I only simplified the example, but the array I am dealing with has 9999 elements. I need to calculate averages, rate of change and a few others.
Thanks for the example code. It's much cleaner.
As another commentator said, [the point of SSR is perceived performance](http://tomdale.net/2015/02/youre-missing-the-point-of-server-side-rendered-javascript-apps/). You can do this without SSR'ing the whole thing. &gt; No one can link me to a specific piece of content on there Quite right, this was laziness on my part. I wrote Pokedex.org in vanilla JS (no framework) and never bothered dropping in a router. I still think it's largely irrelevant, though, since even with a JS-based router I couldn't guarantee it'd work without JS, nor would I necessarily implement a no-JS version of the search bar or other features. It does demonstrate, though, that routing/linking is more difficult to do with client-side JS apps than with static sites (where you get it for free).
The reality is you're probably not making any money off non-JS users, and even if you are it's certainly not enough to cover the cost of designing, implementing, and testing a site to work both ways.
[Nice catch](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage$compare?locale=en-US&amp;to=1130287&amp;from=1035630)
Hi /u/fagnerbrack, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Haha wow, it didn't even occur to me that was just a typo because even though it was a weird choice it made sense in that context. Your responsiveness on correcting that is awesome btw. MDN is a great resource for me so I definitely appreciate your work.
This is awesome! Once again the text-mode proves damn useful.
Unfortunately multiple loop iteration is discouraged at my work. I need to come up with a performant code. As the size of the program grows and more analystical calculation is needed, iteration count will increase and it will slow down.
sweet!
If performance is your primary concern, then an imperative loop with mutable variables over a typed array will be the fastest. It'd also have less GC churn, which may be an important factor for animations. If you want to stay purely functional, then do some benchmarking between reducing with multiple accumulators in one iteration vs single accumulators in multiple iterations. It could go either way, but definitely don't assume a single pass will be faster. In other languages you could write a tail recursive version directly and avoid having to wrap the accumulators into an object, but IIRC you still don't have widespread tail call optimisation in browsers. 
You've removed the code that presents any output.
Yes I would like to stay purely functional. I will try some benchmarking. Thank you for your help.
That format doesn't really allow for numbers above 99, but I assume that's known. [I cobbled this together](http://codepen.io/anon/pen/ORwvrz?editors=1111) for kicks and giggles.
Another option is to host your CSV in a Google Docs spreadsheet and pull it from there. This article is somewhat Meteor-specific but does a good job of explaining cross-origin issues and explains how to host CSV data in Google Docs: [Loading CSV Files From External Sites Using Meteor](http://meteorlife.com/loading-csv-files-from-external-sites-using-d3-in-meteor/)
So all the code is there but the Codepen itself is just a black screen. 
&gt; can you suggest a framework that I could use to create SEO-friendly websites The framework is almost irrelevant, but Angular is the most popular, React is up and coming: https://www.google.com/trends/explore?q=react,angular &gt; authentication and i18n https://auth0.com/ is the fastest way to implement auth &gt; I was maybe considering Meteor but I don't think it performs well with search engines as most of the SPA frameworks. The framework doesn't change the fact that you're still just rendering HTML on a page - just follow the basic SEO strategy of clean and coherent hierarchical information (&lt;title&gt;, &lt;meta desc&gt;, &lt;h1&gt;). If you're using React, ReactHelmet can help organize/structure your meta tags: https://github.com/nfl/react-helmet &gt; The only one I came across is Middleman but I wanted to know if there are better alternatives. Isn't Middleman a static site generator? https://middlemanapp.com/
There's no guarantee that a data tracking script can be detected without using a blacklist from wither the script host name, or part of its URL. e.g. contains the word "analytic", "stats", etc. Mind you, any site can use minified script path e.g. "/js/s/k.js" and be hosted in a CouldFront host whose subdomain name is a random characters. And the script code itself can be easily minified.
If you put a console.log message inside the getJSON success function you should see that it is never happening. You could chain a .fail() callback onto the end of that function and it will probably execute that code. $.getJSON().fail(function (){console.log('failed');});
The problem here is that the right-hand value isn't a compile-time constant as it is in pretty much any other language. You can put arbitrary complex expressions after every '='. The second problem is that the syntax is pretty ugly. I would have preferred special syntax just for this. function foo({a = 1, b = 2} = {}) { ... } foo({a: 5}); Same with Dart: foo({a: 1, b: 2}) { ... } foo(a: 5); A bit easier to read, isn't it? Reusing restructuring for this really wasn't a good idea, but now it's too late.
Try gl-matrix, i've been using it for web gl for past few years, its pretty fast Edit: it uses raw matrices data, not webgl stuff, i thing i should mention that
I'd love to see stats on how many changes are happening that never have a problem and people never notice. 
If you're not using floats, I believe you can use ~--input Edit: You'll have to check if the input is negative first before applying.
True, but I feel like it's giving everyone the wrong idea of what yarn even is. I was just pointing that out. pnpm is a faster `npm install`, yarn is an entirely new alternative client with lots of improvements.
 return input &gt;= 0 ? input : 0-input;
I think you pretty much had it. You didn't include the "turn to positive number" part, though. That's simply using the negative (`-`) sign. -(-2) == 2 Its your second condition that you really care about. The first one does nothing (unless input is -0, then it turns it into +0). if (input &lt; 0) { return -input; } return input; This says, if the number is less than 0, return the negated version of that value (what is negative is no longer negative). If that condition isn't met, and that return isn't triggered, then the last line runs returning the original, &gt;= 0 value.
-(x) is just a shortcut for -1 * x which was explicitly not allowed.
I think most just don't know enough about how npm resolves libs let alone sermver or whatever. No one agreed (except maybe 3 guys in a github issue thread 6 years ago). That the default for npm install is to add that ^ bullshit to the version tag is proof enough of the eternal optimism/free love that goes on in JS land. 
The jobs expressed in the video are almost entirely tooling related. As such there isn't much creativity to explore. I would say output a timer next to every step of automation. This forces you to be aware of how much is spent on automation tasks and where time goes during the automation processes. Also, be aware of how many times you run automation tasks in a given day. During that time you aren't writing code, you aren't testing theories, you aren't forming opinions. You are just wasting your life away.
[It makes working with "option objects" a breeze](https://github.com/Klathmon/imagemin-webpack-plugin/blob/8039e55b7dbf15dee77e307cb459029b32d49cf6/index.js#L14-L37)
That's like telling someone that wants to get a little more HP in their car to just buy a new car. Technically correct, but you aren't helping anyone
I prefer for...in; it's a little more verbose, but is easier to reason about when scanning and/or debugging/rereading code. That said, `for...in` and `Object.keys(myObject).forEach` are practically the same thing; just depends on the individual. Also, how would you use `reduce` on an object's keys if they are strings?
I agree with the article. It can be summed up with this: &gt; It is high time we, the community that survived the first browser wars and made standards-driven development our goal, start facing facts. At one time standards driven development was important. Now it isn't. As the article indicates fresh developers now are a new generation completely excluded from the lessons learned of the early web. Now its all about tooling. If there aren't tools to do it for you simply give up or wait for somebody else to do it for you.
We'll Object.keys returns an array of those keys so you could do something like this: let divThing = { class: "stuff", id:"isthing", 'data-stuff': "88,nn"} let theDiv = document.createElement("div") Object.keys(divThing).forEach((keyy) =&gt; { theDiv.setAttribute(keyy, divThing[keyy]); });
Hi jotto thanks for your suggestions. I started recently to use Angular 2 but server side rendering doesn't seem very easy to implement and as far as I know (but I can be easily wrong) it would be limited to a subset of pages, not the whole website. Yes Middleman is a static site generator, but could possibly do the job although I would personally prefer to use Angular...
yes * is not allowed that's the problem, just that operators on the list
So if you're subclassing an exotic like Array. `class MyArray extends Array` is the fastest you're going to get but it's going to be slower than subclassing a non-exotic like a plain old object. Now there are ways to subclass Array without using `class`. Notably using `function MyArray () { return Reflect.construct(Array, [], new.target;}` or `function MyArray () { const inst = new Array(); inst.__proto__ = new.target.prototype; return inst; }` On V8, Reflect is 2-3x as slow as class extends, and `__proto__` is 2x as slow as class extends. Class extends for Array is 4x as slow as extending a non exotic. The issue is compounded when you're extending the classes even further, since you're reflecting your whole type chain of constructors or reassigning `__proto__` for the whole type chain. This is because neither `__proto__` assignment nor Reflect.construct is are performant, and there is no real way to pass the new.target to your subclasses. We don't really have access to call [[Construct]] as it exists in the EMCA standard. 
IIRC NPM (the tool) wasn't ever properly documented. Most of the way it does things are the way it does things because that's how NPM the tool does it. When they moved to NPM3 the NPM team found a TON of bugs that were hiding, and a few "design" issues which were considered bugs but couldn't be easily fixed because it would break functionality. There's a lot of baggage there, and when you care about backwards compatibility it's not easy to work around all of those. Making a new tool was faster, would get better results, and follows the [unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy) better, so it was probably the right choice to go with. They also worked somewhat closely with the NPM team and have their blessing, so it's not like they are "withholding" their new tool.
how about input - (input + input) example [codepen](http://codepen.io/hlarken/pen/KgBBEO)
&gt; The Unix philosophy emphasizes building simple, **short**, clear, modular, and extensible code I wish the editors had taken that to heart, because 70% of that summary could be thrown right out. Also, I don't see how making a new tool is more in line with the unix philosophy.
thx for the advice on avoiding writing the code on the bootstrap js. I was able to fix the issue i just removed the menu adding display:none; in @media screen size
Point 1 from the "original" unix p: &gt; Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new "features". and in some (lesser) ways point 3 as well &gt; Design and build software, even operating systems, to be tried early, ideally within weeks. Don't hesitate to throw away the clumsy parts and rebuild them. Since lots of people use NPM now, and making these changes to it would break some people's usage of their tool, the better option is to build it as a new tool. Avoiding "bloat" in programs and keeping them single purpose and simple is extremely important. Yarn might be one of the best examples in this case. Since it's a "drop in replacement" (still to be determined if this is really true), it can "solve" different issues (like consistency, speed, and reproducibility), than NPM can and is free to do so without having to mess about with defaults, flags, settings, or anything else. Now obviously all of this needs to be taken with a grain of salt, but IMO yarn is a great example of when it's appropriate to cut out the legacy and start new. Especially when compatibility is retained for the most part.
Ok jotto thanks, will definitely follow your suggestions! 
interesting, but the app dones't allow me to use (), 
Reverting changes, or maybe should I send a PR to fix the name to a more neutral *TypedObjectNeuteredOrSpayed*? 
return -input solved omg!
 // be careful with multiple params! The whole right-hand side // is replaced with your argument! Oh look, another pitfall. Some of this is useful, but holy cow -- just throw readability out of the window. const a = 5; const { a: b } = { a: 3 }; I feel like a lot of this is tricky code - not good code.
Getting immediately notified of this kind of issue is much better runtime errors. TS is a viable alternative to Babel. If you use ES6 today you might as well use TS (in most scenarios).
But you used a function..
If it were president nominee I would vote for it.
 [v, -v][+(v &lt; 0)] That's the expression. Everything else is just there to show that it works.
Ok thanks, unfortunately considering I am learning Angular 2 atm I don't know if it would be worth to dive into another framework with a modest learning curve... btw it would be really nice to have the chance of trying it out
The question about the registry was clearly answered in the announcement. It is a dns name that is just redirecting to the npm registry.
&gt; Once those [2 features] drop in node, i won't need to use [Babel] at all. Assuming there won't be any other features popping up which would make it necessary again. &gt; TS is forever... As "forever" as a few years (at most) can be. Anyhow, if I were to work on some large project for a long time, I'd *really* want to get all the tooling benefits I can. I would want to be told - right away - that I'm passing the wrong parameters or whatever.
Could someone provide actual useful examples? Particularly in "destructuring", which, frankly, looks not only completely unintuitive as to what it's *purpose* is, it also looks completely useless. 
I don't know, but package management with npm is an absolute nightmare. See also the 1+gigs of code required to "Hello World" a certain set of libraries that I was messing with a couple of weeks ago.. and once we realized that it was that extreme, we went with a much lighter solution. Even if the eventually produced thing is only 1/100th that size, it's NOT NOT NOT ok to have 1gig+ of code for a thing. 
&gt; You might love TS I don't. I think it's alright. &gt; you might think it's better in every way I know that it addresses some of JS' shortcomings. Non-nullable types are a good thing, for example. Anyhow, the thing is that writing defensive code is super annoying and verbose. That massive pain in the rear is never worth the trouble. E.g. this "mandatory" pseudo check isn't an improvement over just letting the code explode the usual way (via NPE or whatever). I actually think it's a bit worse, because the parameter does have a default value. How backwards is that? The only way to step up your game is by catching this stuff immediately when you write the offending line.
Object spread should be in 2.1 which will be released next month.
Seriously. Author is exceedingly self righteous 
I posted this elsewhere, but [here](https://github.com/Klathmon/imagemin-webpack-plugin/blob/8039e55b7dbf15dee77e307cb459029b32d49cf6/index.js#L14-L37) is a file that uses object destructuring a ton to destructure an options object and provide defaults in a really nice way. And on line 41 is another instance of destructuring that i've started using more and more to build an array of arrays and then destructure that in the loop. Once you start using (abusing?) it, patterns like this become pretty normal.
Yeah I dunno why you're being downvoted, TypeScript is a godsend. If you're using a transpiler anyway then just go for gold and switch to TypeScript.
/u/jameside answered some of these on day one here https://blog.getexponent.com/yarn-a-new-program-for-installing-javascript-dependencies-44961956e728#.lxbjfcm4d **Why a new project?** These features are great for our workflows in the Exponent code base and we’re glad Yarn has emerged. One question I’ve seen a couple times on Twitter and Hacker News is, “Why didn’t the Yarn developers work on npm instead?” These are some of the reasons that come to mind: * Exponent and Facebook independently tried adding tools and infrastructure to improve how we use npm, but it wasn’t working as well as we wanted it to. The Yarn developers at Facebook talk about * “Attempts at scaling the npm client” in their blog post. Many of Yarn’s features aren’t extensions of npm’s existing features that can be incrementally added. They are major changes to how packages are downloaded and installed. * Some of Yarn’s central design decisions, including the ones I talked about above, are different from npm’s. It’s usually difficult to change the core design decisions of a project unless you’re a core contributor to it, and the Yarn developers weren’t in that spot. * Yarn changes developer workflows. For example, instead of thinking about installing packages in your node_modules folder as you do with npm, with Yarn you add packages to your project. See the Yarn docs on managing dependencies for the details.
Npm is nearing 3000 open tickets in the issue tracker. Some of them years old and still pestering users. The quality also went downwards with npm 3, causing myriads of new problems. Not to mention that "the fix" would be a complete re-write from top to bottom. Have you ever seen such PR's go through? Npm is also written in ES5, not the best choice for async dataflow using callbacks and promise chains. Yarn is ES7 + async/await. Such things are drastic and call for rewrites instead of adaptions, allowing for leaner structures and architectures.
i feel ya. it's a stylistic thing, it doesn't provide anything the language couldn't do before, it just does things in one line that normally take two or three. in simple cases, and in combination with other things (like object shorthand), it's awesome and can really increase readability: let transformSomething = props =&gt; { let { transform, something } = props; let transformed = transform(something); return { transformed, something }; }; without it: var transformSomething = function(props) { return { transformed: props.transform(props.something), something: props.something }; }; not world shattering and in some cases, it's just silly and is probably better to use more clear syntax: export const responseSerializer = res =&gt; { let { statusCode: statusCode = 500, headers: { response_id: responseId = null, date: date = null } = { response_id: responseId = null, date: date = null } } = res; return { statusCode, responseId, date }; }; it took me a minute to figure out the intent with destructuring, but for simple cases, i prefer it now
Then you need to get offended less easily.
Just for reference: https://github.com/facebook/react/wiki/Sites-Using-React, TS probably wouldn't be able to transpile more than a handful of these *now*. When TS gets spread in the end of the year 2016 it will lack other language features. TS sure has its benefits, but it will always be behind current proceedings and that is a real issue.
Cool, then it will be a great addition to the language next month. but right now it doesnt help anyone
I don't see your issue tbh. 
[Object.freeze\(\)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) guarantees immutability. [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) is awesome at turning something like a function's "arguments" keyword and turning that value into a native array object. [Object.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) is my favorite, but not quite a standard yet.
Oh, no that's possible if you want to be really clever about it in canvas. But your operating system is still rerendering every pixel anyways, and I think your GPU is too. The "rerendering every pixel" thing is stuff computers are really good at. Unless you're making very dynamic scenes (which would require whole screen rerendering anyways), getting that level of performance increase just isn't going to matter much. At the end of the day, though, it *might* not matter, especially if the others are staying the same anyways (likely easy to compute) any reasonable computer can re-render a static scene (like an image) at way higher than 60fps. Your monitor is limited in its fps anyways.
According to semver, a patch version (i.e. 1.0.x) doesn't introduce breaking changes, so it should always be possible to be on the latest patch version without risk of breaking anything. When you specify "I will only install 1.0.4", you miss out on potentially important things like bugfixes, etc.
TypeScript (or another static typechecker) is a great way to catch these mistakes at compile-time. Libraries may still want to use the `mandatory()` trick if runtime checks are desirable, for example to catch mistakes by non-TypeScript users. You could put mandatory() in a debug build and elide it for production. Then again, assigning a default value may actually indicate to ES (non-TypeScript) IDEs that the argument is optional, which actually negates coding assistance. 
Sarcastically accusing the author - a named individual - of passive aggression is hardly equivalent to their raising pointed questions to big corporations. It's pretty shitty of you, actually.
X depends on Z v1.0.7 Y depends on Z v1.0.8 Your client-side app depends on X and Y. Do you want to ship two versions of Z? Sometimes you need to, if there are important differences between 1.0.7 and 1.0.8 (even with semver this is inevitable in some cases), but most of the time you can just ship 1.0.8 and make your app load faster. It is absolutely asking for instability, but performance matters too, and if your tests are good enough you can catch version incompatibilities before deploying.
Good call @zoomzoom83!! Other than the T$ bit, I totes agree!! Have a karma
I dunno if I'd call it "Flash player stigma" It was measurably awful on mobile devices...
That is the case in TS 2, actually. Having a default value makes the parameter optional.
Author here. I'm not a native speaker so I get it wrong sometimes. Thanks for pointing that out.
But you are referring to the VM, not the language itself.
Also, try IED (http://gugel.io/ied/). That one is faster than NPM too. Plus I've chatted with the creator in person, he's awesome.
Yeah, and I'm guessing IDE code assistance for ECMAScript, not TypeScript, would implement the same behavior. (I'm not referring to any IDE or editor in particular)
&gt; Also, how would you use reduce on an object's keys if they are strings? Why wouldn't you be able to? Object.keys(things).reduce((prev, curr)=&gt; { if (someRequirement) prev[curr] = things[curr]; return prev; }, {}); Using `Object.keys` and `.reduce` we implemented a `.filter` on on object.
... so, it's about as useful as RPN? 
This isn't exactly what you're asking for, but it requires what you're asking for as a sub-piece, so, it ought to teach you what you need to know to [do it in d3](https://bl.ocks.org/cjrd/6863459).
IMO the best ES6 feature is definitely arrow functions. So concise! 
Note that Object.freeze only performs a shallow freeze, and recursively freezing an object can be pretty expensive. If you want to use immutable objects, a library like immutable-js is often a better choice. 
 function a({ x = 20, y = 30 }) { console.warn(x, y); } a({ x: 50 }); &gt; 50 30 a({ y: 10 }); &gt; 20 10 
Anyone else feel like they're looking at a completely different language? Jeez I need to get up to speed with this new stuff. 
Try calling it without any arguments. You need the default assignment not to throw. It's possible you'd want to express that at least one property must be supplied, but a runtime error is most certainly not an idiomatic way to handle something like this.
HP calcs for life, man. I love RPN.
I don't think the restructuring in the origin link is necessarily "great" style either. There's enough options that it's basically configuration. I think it's bad API design to pass an option object. You would never have an API with so many optional positional parameters, I'm not sure why naming them suddenly makes this better, even if there are defaults. Maybe works in a statically typed language where configuration objects are typed and intellisensed, but in JS it's just like a bunch implicit arguments that I have to remember or look up.
performance wise for..in out performs Object.keys, and even better performance can be had when you hoist for..in loops.
Oh yeah now that in think about it using Object.keys with a map or forEach loop will create an anonymous function n times.
I agree, though I think static type checking with TS is better than built-in language types.
You might find [this](https://stackoverflow.com/questions/2399797/javascript-let-user-select-an-html-element-like-firebug) helpful.
To expand on what \_\_env said, imagine if every library had locked versions and a security patch was added to libc. You couldn't have a secure system until _every_ lib that depends on libc updated it's dependency on it and rebuilt. That's a lot of upstream software that needs to be fixed, and a lot of work for _you_ to now update all of those deps.
Um... okay. Cool, I guess? This is pretty basic stuff. You can use something like this with `Promise.race` to timeout a request or whatnot: const timeout = (delay, err) =&gt; new Promise( (resolve, reject) =&gt; setTimeout(reject, delay, err) ); Promise.race([ timeout(200, new Error('Request timed out')), sendRequest(), ]);
As /u/ArcanisCz said, you can't trigger the contextmenu to show, but you could make it so right-clicking on your custom menu shows the normal contextmenu.
Yeah, more or less what u/__env said. Suppose the latest version of a library is "1.2.3". With normal usage of npm, I'd specify something like "~1.2.3". (Which means "1.2.x where x&gt;=3") The good of this, is that if a critical bug is found tomorrow and 1.2.4 fixes it; then I'll automatically get that new version with the bug fix and I didn't have to do anything or even be aware that the bug existed. The downside is that if the package authors do something wrong: e.g. 1.2.4 actually introduces a bug instead of fixing one, then suddenly my application (or library) is broken, despite the fact that I haven't actually changed anything on my end. (Even more frustratingly, it's broken for people who happen to have 1.2.4, but not other for people who don't) With npm, you can specify exact versions to somewhat get around it; but if I depend on 1.2.3 of package A, and package A depends on ~2.3.4 of package B, version package 2.3.5 of B might introduce a bug, which would break me, despite that I've specified an exact version of package A. To really prevent this you need to use `npm shrinkwrap`, which controls both your dependencies versions, and their dependencies versions (and so on). --- `acorn` starts there by default: this means that you'll never have to worry about your dependencies breaking you, unless you explicitly upgrade them; but on the other hand, if 1.2.3 has a bug that's fixed in 1.2.4; the only way I'll get the bug fix is if I manually update the library. (Which means either I regularly read the patch notes of my dependencies, or I regularly upgrade my dependencies, or I just wait until I hit the bug, then trace it down) It's actually probably more work in most cases (especially for a single person project); but it's a lot safer; hence why it's favored for situations like Facebook where stability is a big deal. But it's maybe not for everyone, which is why the `yarn` style fits a different niche than `npm`.
https://www.owasp.org/index.php/Cross_Frame_Scripting
even without .map or .forEach using a for i++ with Object.keys is still slower than a for-in. Though when Object.keys gets more VM optimisations that might change but then again for-in is also a candidate for VM optimisations.
Not if you specifically update. Being deterministic does not mean being unupdatable. It just means that when you update a package you get the same results everywhere.
&gt; why is it discouraged or uncommon to shrinkwrap libraries in Javascript? The problem is that `npm`'s implementation is horribly, critically broken. For example, maybe you're working on a simple project using Babel on an Mac laptop, and you'd like to push it your your CI server (running on linux) where it will build the project, run your tests, and if they pass, deploy it. This is not a complicated or unusual scenario, but if you try and use shrinkwrap to make sure that the version that gets tested on your CI server is the same as you were working with on your dev laptop *it will not build*, thanks to a really dumb interaction between `npm`, shrinkwrap, and optionalDependencies. And that's just one of dozens of bugs and issues. &gt; why doesn't npm create a lockfile by default, like almost every other language's package manager? Lockfiles have always been third-class citizens in the npm world. They don't work, so nobody uses them, so nobody bothers fixing them, so they don't work. :) &gt; that they can be inconsistent from one machine to another, is insane and I don't know how that was agreed upon as the standard in the JS community. I wouldn't say it's an agreed upon standard; the npm registry is a de facto standard but nothing stops people from creating a more sensible client which doesn't have so many bugs. *yarn* isn't the first, and given the eagerness our community embraces change, it probably won't be the last.
I created a Github issue on launch day about the tradeoffs between yarn and npm. I'm hoping that as things calm down they will get a chance to answer it. https://github.com/yarnpkg/yarn/issues/798
Also click-jacking and reading sensitive data. If you don't own both sites, you don't have the right to do things programmatically for many security reasons.
 if (input &gt;= 0) { return +input; } else { return -input; } Assuming that `input` is a string and you need to convert it to a number. If it's already a number, then you can replace `+input` with just `input`. If you're allowed to use [ternaries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator), which are just a shorthand for `if` and `else`, then you could write more concisely: return input &lt; 0 ? -input : +input; See [less than or equal operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator_(&lt;%29), [unary negation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation_(-%29) and [unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus_(%29).
"Powerful" doesn't equal good or sensible. This is something I'd never use, because complicated expressions as default values won't make for a good API. Can you think of an example (no matter how contrived) where using a complicated expression as default value would make your API nicer to use?
AS3 was much nicer to use than ES3/5. It was a huge improvement. The only thing I didn't like back then was that it was still using function scope.
Why do you bother fixing them? Aren't too few people using Safari anyway? Is it worth the time investment? http://www.w3schools.com/browsers/
Lol, my linux machine can have 30 windows and you wont even hear it
You realize every iOS user without exception is using safari engine, right? Chrome on iOS is just a wrapper around uiwebview 
w3schools ... really? no one is reading w3schools on their iphone
Yea it definitely comes last, but we don't want our layouts to be totally broken on safari
iOS is pretty popular.
Completely irrelevant, he was talking about Mac. Google Chrome on Mac is notoriously bad for memory management though it has improved some recently. Safari on Mac is hands down the best web browsing experience you can get on a Mac but it certainly isn't the standards based browser that it should be. Edit: "Did you just assume my browser preference bruh?"... Sorry guys, I know not every Mac user prefers Safari.
Pardon my ignorance, but isn't it the case that it does support form validation, but the developer is left to implement the UI?
`return` keyword can't be used outside of funtctions, and OP stated he can't use them.
You can use `return` in node modules outside of functions. Plus its in OPs "have" list, and OP replied "return -input solved omg!", so it seems legit.
Ooo Cool! Just wondering, what makes mousedown more effective than click?
Yep. Just use rest. This way your function's signature will clearly state that you can pass an arbitrary amount of arguments. Additionally, there are some deoptimization triggers surrounding `arguments`. Not touching it at all is a good idea.